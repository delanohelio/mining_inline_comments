{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3Nzk2NjQw", "number": 17826, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDozNzoxOVrOE9eWoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNTo1MTo0OVrOE9fHPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODk1OTA0OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusProcessorClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDozNzoxOVrOH6Llpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDozNzoxOVrOH6Llpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2OTMxOQ==", "bodyText": "May be explain about autoComplete as it is important part.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17826#discussion_r530769319", "createdAt": "2020-11-26T04:37:19Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusProcessorClient.java", "diffHunk": "@@ -36,11 +36,10 @@\n import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.AZ_TRACING_SERVICE_NAME;\n \n /**\n- *  The processor client for processing Service Bus messages. {@link ServiceBusProcessorClient\n- *  ServiceBusProcessorClients} provides a push-based mechanism that invokes the message processing callback when a\n- *  message is received or the error handler when an error occurs when receiving messages. A\n- *  {@link ServiceBusProcessorClient} can be created to process messages for a session-enabled Service Bus entity or\n- *  a non session-enabled Service Bus entity.\n+ * The processor client for processing Service Bus messages. {@link ServiceBusProcessorClient} provides a push-based\n+ * mechanism that invokes the message processing callback when a message is received or the error handler when an error\n+ * occurs when receiving messages. A {@link ServiceBusProcessorClient} can be created to process messages for a\n+ * session-enabled or non session-enabled Service Bus entity.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14842baa12819bfd308ac1c812def473b9fe116"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTAwMDI5OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNTowMzozNFrOH6L9XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMjozNjo0OFrOH7Kgsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3NTM4OA==", "bodyText": "I missed it to change to return BinaryData.fromBytes(amqpAnnotatedMessage.getBody().getFirstData())\nBinaryData will always have data, a null is converted into empty byte array inside BinaryData, So we do not have to\ncheck for payload.isPresent().\nBinaryData  store data in byte[] variable. so calling getFirstData will be efficient.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17826#discussion_r530775388", "createdAt": "2020-11-26T05:03:34Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java", "diffHunk": "@@ -50,50 +60,56 @@\n     }\n \n     /**\n-     * The representation of message as defined by AMQP protocol.\n-     *\n-     * @see <a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-message-format\">\n-     *     Amqp Message Format.</a>\n+     * Gets the set of free-form {@link ServiceBusReceivedMessage} properties which may be used for passing metadata\n+     * associated with the {@link ServiceBusReceivedMessage} during Service Bus operations. A common use-case for\n+     * {@code properties()} is to associate serialization hints for the {@link #getBody()} as an aid to consumers\n+     * who wish to deserialize the binary data.\n      *\n-     * @return the {@link AmqpAnnotatedMessage} representing amqp message.\n+     * @return Application properties associated with this {@link ServiceBusReceivedMessage}.\n+     * @see ServiceBusMessage#getApplicationProperties()\n      */\n-    public AmqpAnnotatedMessage getRawAmqpMessage() {\n-        return amqpAnnotatedMessage;\n+    public Map<String, Object> getApplicationProperties() {\n+        return amqpAnnotatedMessage.getApplicationProperties();\n     }\n \n     /**\n-     * Gets the actual payload/data wrapped by the {@link ServiceBusReceivedMessage}.\n+     * Gets the payload wrapped by the {@link ServiceBusReceivedMessage}.\n      *\n      * <p>The {@link BinaryData} wraps byte array and is an abstraction over many different ways it can be represented.\n-     * It provides many convenience API including APIs to serialize/deserialize object.\n+     * It provides convenience APIs to serialize/deserialize the object.</p>\n+     *\n      * <p>\n      * If the means for deserializing the raw data is not apparent to consumers, a common technique is to make use of\n      * {@link #getApplicationProperties()} when creating the event, to associate serialization hints as an aid to\n      * consumers who wish to deserialize the binary data.\n      * </p>\n      *\n-     * @return A byte array representing the data.\n+     * @return Binary data representing the payload.\n+     * @see ServiceBusMessage#getBody()\n      */\n     public BinaryData getBody() {\n         final AmqpMessageBodyType bodyType = amqpAnnotatedMessage.getBody().getBodyType();\n         switch (bodyType) {\n             case DATA:\n-                return BinaryData.fromBytes(amqpAnnotatedMessage.getBody()\n-                    .getData().stream().findFirst().get());\n+                final Optional<byte[]> payload = amqpAnnotatedMessage.getBody().getData().stream().findFirst();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14842baa12819bfd308ac1c812def473b9fe116"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc5Njc1MQ==", "bodyText": "I had an IntelliJ warning about this. I think it's defensive programming. You only know this because you implemented it. We could change the underlying behaviour.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17826#discussion_r530796751", "createdAt": "2020-11-26T06:25:06Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java", "diffHunk": "@@ -50,50 +60,56 @@\n     }\n \n     /**\n-     * The representation of message as defined by AMQP protocol.\n-     *\n-     * @see <a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-message-format\">\n-     *     Amqp Message Format.</a>\n+     * Gets the set of free-form {@link ServiceBusReceivedMessage} properties which may be used for passing metadata\n+     * associated with the {@link ServiceBusReceivedMessage} during Service Bus operations. A common use-case for\n+     * {@code properties()} is to associate serialization hints for the {@link #getBody()} as an aid to consumers\n+     * who wish to deserialize the binary data.\n      *\n-     * @return the {@link AmqpAnnotatedMessage} representing amqp message.\n+     * @return Application properties associated with this {@link ServiceBusReceivedMessage}.\n+     * @see ServiceBusMessage#getApplicationProperties()\n      */\n-    public AmqpAnnotatedMessage getRawAmqpMessage() {\n-        return amqpAnnotatedMessage;\n+    public Map<String, Object> getApplicationProperties() {\n+        return amqpAnnotatedMessage.getApplicationProperties();\n     }\n \n     /**\n-     * Gets the actual payload/data wrapped by the {@link ServiceBusReceivedMessage}.\n+     * Gets the payload wrapped by the {@link ServiceBusReceivedMessage}.\n      *\n      * <p>The {@link BinaryData} wraps byte array and is an abstraction over many different ways it can be represented.\n-     * It provides many convenience API including APIs to serialize/deserialize object.\n+     * It provides convenience APIs to serialize/deserialize the object.</p>\n+     *\n      * <p>\n      * If the means for deserializing the raw data is not apparent to consumers, a common technique is to make use of\n      * {@link #getApplicationProperties()} when creating the event, to associate serialization hints as an aid to\n      * consumers who wish to deserialize the binary data.\n      * </p>\n      *\n-     * @return A byte array representing the data.\n+     * @return Binary data representing the payload.\n+     * @see ServiceBusMessage#getBody()\n      */\n     public BinaryData getBody() {\n         final AmqpMessageBodyType bodyType = amqpAnnotatedMessage.getBody().getBodyType();\n         switch (bodyType) {\n             case DATA:\n-                return BinaryData.fromBytes(amqpAnnotatedMessage.getBody()\n-                    .getData().stream().findFirst().get());\n+                final Optional<byte[]> payload = amqpAnnotatedMessage.getBody().getData().stream().findFirst();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3NTM4OA=="}, "originalCommit": {"oid": "c14842baa12819bfd308ac1c812def473b9fe116"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgwMDI0Mg==", "bodyText": "We already have call to getFirstData in ServiceBusMessage and I did not see any intellij warning.\nThis API getFirstData was added for one of the reason\n\nNo need to create unnecessarily create List  when we will have one byte[] always.\n\nIn SBRM.getBody() have return type BinaryData, so it is one byte [] always. So there is no harm in using getFirstData(). And you do not need to depend/assume anything how it is implemented internally. If you want to check for null when getFirstData() returns, that is fine.\nThink about received message performance , when every message create aList of one byte[] for 95% of users.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17826#discussion_r531800242", "createdAt": "2020-11-27T22:36:48Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java", "diffHunk": "@@ -50,50 +60,56 @@\n     }\n \n     /**\n-     * The representation of message as defined by AMQP protocol.\n-     *\n-     * @see <a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-message-format\">\n-     *     Amqp Message Format.</a>\n+     * Gets the set of free-form {@link ServiceBusReceivedMessage} properties which may be used for passing metadata\n+     * associated with the {@link ServiceBusReceivedMessage} during Service Bus operations. A common use-case for\n+     * {@code properties()} is to associate serialization hints for the {@link #getBody()} as an aid to consumers\n+     * who wish to deserialize the binary data.\n      *\n-     * @return the {@link AmqpAnnotatedMessage} representing amqp message.\n+     * @return Application properties associated with this {@link ServiceBusReceivedMessage}.\n+     * @see ServiceBusMessage#getApplicationProperties()\n      */\n-    public AmqpAnnotatedMessage getRawAmqpMessage() {\n-        return amqpAnnotatedMessage;\n+    public Map<String, Object> getApplicationProperties() {\n+        return amqpAnnotatedMessage.getApplicationProperties();\n     }\n \n     /**\n-     * Gets the actual payload/data wrapped by the {@link ServiceBusReceivedMessage}.\n+     * Gets the payload wrapped by the {@link ServiceBusReceivedMessage}.\n      *\n      * <p>The {@link BinaryData} wraps byte array and is an abstraction over many different ways it can be represented.\n-     * It provides many convenience API including APIs to serialize/deserialize object.\n+     * It provides convenience APIs to serialize/deserialize the object.</p>\n+     *\n      * <p>\n      * If the means for deserializing the raw data is not apparent to consumers, a common technique is to make use of\n      * {@link #getApplicationProperties()} when creating the event, to associate serialization hints as an aid to\n      * consumers who wish to deserialize the binary data.\n      * </p>\n      *\n-     * @return A byte array representing the data.\n+     * @return Binary data representing the payload.\n+     * @see ServiceBusMessage#getBody()\n      */\n     public BinaryData getBody() {\n         final AmqpMessageBodyType bodyType = amqpAnnotatedMessage.getBody().getBodyType();\n         switch (bodyType) {\n             case DATA:\n-                return BinaryData.fromBytes(amqpAnnotatedMessage.getBody()\n-                    .getData().stream().findFirst().get());\n+                final Optional<byte[]> payload = amqpAnnotatedMessage.getBody().getData().stream().findFirst();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3NTM4OA=="}, "originalCommit": {"oid": "c14842baa12819bfd308ac1c812def473b9fe116"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTA0MzcyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNToyODo1OFrOH6MV3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNToyODo1OFrOH6MV3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc4MTY2MQ==", "bodyText": "This is also, I think we missed it,\nThis should get getSubgect.\nJust to verify this is .Net API View https://apiview.dev/Assemblies/Review/b5d7e3304000449c859c2016f718db52#Azure.Messaging.ServiceBus.ServiceBusReceivedMessage", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17826#discussion_r530781661", "createdAt": "2020-11-26T05:28:58Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java", "diffHunk": "@@ -238,25 +266,30 @@ public OffsetDateTime getExpiresAt() {\n     /**\n      * Gets the label for the message.\n      *\n+     * <p>\n+     * This property enables the application to indicate the purpose of the message to the receiver in a standardized\n+     * fashion, similar to an email subject line. The mapped AMQP property is \"subject\".\n+     * </p>\n+     *\n      * @return The label for the message.\n+     * @see ServiceBusMessage#getSubject()\n      */\n     public String getLabel() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14842baa12819bfd308ac1c812def473b9fe116"}, "originalPosition": 248}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTA2MTY0OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNTozOToyNVrOH6MgmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNjo0Mjo1N1rOH6Nmzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc4NDQwOA==", "bodyText": "Document : This should throw exception if this is called for non-session entity. I think we do not have that check. we should add that check.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17826#discussion_r530784408", "createdAt": "2020-11-26T05:39:25Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -258,8 +255,8 @@ public ServiceBusReceivedMessage peekMessage() {\n \n     /**\n      * Reads the next active message without changing the state of the receiver or the message source. The first call to\n-     * {@code peek()} fetches the first active message for this receiver. Each subsequent call fetches the subsequent\n-     * message in the entity.\n+     * {@code peekMessage()} fetches the first active message for this receiver. Each subsequent call fetches the\n+     * subsequent message in the entity.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14842baa12819bfd308ac1c812def473b9fe116"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgwMjM4Mw==", "bodyText": "This is done on the management node. You don't have to be a sessioned receiver to receive a message from it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17826#discussion_r530802383", "createdAt": "2020-11-26T06:42:57Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -258,8 +255,8 @@ public ServiceBusReceivedMessage peekMessage() {\n \n     /**\n      * Reads the next active message without changing the state of the receiver or the message source. The first call to\n-     * {@code peek()} fetches the first active message for this receiver. Each subsequent call fetches the subsequent\n-     * message in the entity.\n+     * {@code peekMessage()} fetches the first active message for this receiver. Each subsequent call fetches the\n+     * subsequent message in the entity.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc4NDQwOA=="}, "originalCommit": {"oid": "c14842baa12819bfd308ac1c812def473b9fe116"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTA2NjYwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNTo0MjoxMlrOH6MjhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNjo0Mzo1MVrOH6Nn4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc4NTE1Ng==", "bodyText": "if the session lock cannot be renewed. : We have this line many places, but it does not give hint why this operation can not be done. One reason is  id client is already disposed. Should we let user know why  ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17826#discussion_r530785156", "createdAt": "2020-11-26T05:42:12Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -538,9 +556,8 @@ public void renewMessageLock(ServiceBusReceivedMessage message, Duration maxLock\n      * Sets the state of the session if this receiver is a session receiver.\n      *\n      * @return The next expiration time for the session lock.\n-     * @throws NullPointerException if {@code sessionId} is null.\n-     * @throws IllegalArgumentException if {@code sessionId} is an empty string.\n      * @throws IllegalStateException if the receiver is a non-session receiver or receiver is already disposed.\n+     * @throws ServiceBusException if the session lock cannot be renewed.\n      */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14842baa12819bfd308ac1c812def473b9fe116"}, "originalPosition": 348}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgwMjY1Ng==", "bodyText": "If the client is disposed, it'll throw an IllegalStateException. Any number of AMQP Exceptions can occur. These are all wrapped into a ServiceBusException.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17826#discussion_r530802656", "createdAt": "2020-11-26T06:43:51Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -538,9 +556,8 @@ public void renewMessageLock(ServiceBusReceivedMessage message, Duration maxLock\n      * Sets the state of the session if this receiver is a session receiver.\n      *\n      * @return The next expiration time for the session lock.\n-     * @throws NullPointerException if {@code sessionId} is null.\n-     * @throws IllegalArgumentException if {@code sessionId} is an empty string.\n      * @throws IllegalStateException if the receiver is a non-session receiver or receiver is already disposed.\n+     * @throws ServiceBusException if the session lock cannot be renewed.\n      */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc4NTE1Ng=="}, "originalCommit": {"oid": "c14842baa12819bfd308ac1c812def473b9fe116"}, "originalPosition": 348}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTA2OTIzOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNTo0Mzo1NVrOH6MlAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNjo0NToyOVrOH6NqKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc4NTUzOA==", "bodyText": "isn't this true that AmqpException will be mapped to ServiceBusException. Same in following few API.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17826#discussion_r530785538", "createdAt": "2020-11-26T05:43:55Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -160,9 +162,11 @@ public String getEntityPath() {\n      *\n      * @return The {@link Mono} the finishes this operation on service bus resource.\n      *\n-     * @throws NullPointerException if {@code message} is {@code null} , {@code transactionContext} or\n-     * {@code transactionContext.transactionID} is {@code null}.\n+     * @throws NullPointerException if {@code message}, {@code transactionContext} or\n+     *      {@code transactionContext.transactionId} is {@code null}.\n      * @throws IllegalStateException if sender is already disposed.\n+     * @throws AmqpException if {@code message} is larger than the maximum allowed size of a single message.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14842baa12819bfd308ac1c812def473b9fe116"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgwMzI0MQ==", "bodyText": "Fixed this", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17826#discussion_r530803241", "createdAt": "2020-11-26T06:45:29Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -160,9 +162,11 @@ public String getEntityPath() {\n      *\n      * @return The {@link Mono} the finishes this operation on service bus resource.\n      *\n-     * @throws NullPointerException if {@code message} is {@code null} , {@code transactionContext} or\n-     * {@code transactionContext.transactionID} is {@code null}.\n+     * @throws NullPointerException if {@code message}, {@code transactionContext} or\n+     *      {@code transactionContext.transactionId} is {@code null}.\n      * @throws IllegalStateException if sender is already disposed.\n+     * @throws AmqpException if {@code message} is larger than the maximum allowed size of a single message.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc4NTUzOA=="}, "originalCommit": {"oid": "c14842baa12819bfd308ac1c812def473b9fe116"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTA4MzUxOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSessionReceiverClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNTo1MTo0OVrOH6MtBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNjo0NjowNFrOH6Nq0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc4NzU4OQ==", "bodyText": "When user create  this  client ServiceBusSessionReceiverClient, they have to close this. Because this is intermediate client, it is easy to miss. We had same issue in our live test.\nSo may be we can write this  in builder when this is created also here so User ensure this is closed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17826#discussion_r530787589", "createdAt": "2020-11-26T05:51:49Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSessionReceiverClient.java", "diffHunk": "@@ -13,14 +15,15 @@\n /**\n  * This session receiver client is used to acquire session locks from a queue or topic and create\n  * {@link ServiceBusReceiverClient} instances that are tied to the locked sessions.\n- * Use {@link #acceptSession(String)} to acquire the lock of a session if you know the session id.\n- *\n- * {@codesnippet com.azure.messaging.servicebus.servicebusreceiverclient.instantiation#nextsession}\n- *\n- * Use {@link #acceptNextSession()} to acquire the lock of the next available session without specifying the session id.\n  *\n+ * <p><strong>Receive messages from a specific session</strong></p>\n+ * <p>Use {@link #acceptSession(String)} to acquire the lock of a session if you know the session id.</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14842baa12819bfd308ac1c812def473b9fe116"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgwMzQwOQ==", "bodyText": "The code snippets have this well documented.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17826#discussion_r530803409", "createdAt": "2020-11-26T06:46:04Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSessionReceiverClient.java", "diffHunk": "@@ -13,14 +15,15 @@\n /**\n  * This session receiver client is used to acquire session locks from a queue or topic and create\n  * {@link ServiceBusReceiverClient} instances that are tied to the locked sessions.\n- * Use {@link #acceptSession(String)} to acquire the lock of a session if you know the session id.\n- *\n- * {@codesnippet com.azure.messaging.servicebus.servicebusreceiverclient.instantiation#nextsession}\n- *\n- * Use {@link #acceptNextSession()} to acquire the lock of the next available session without specifying the session id.\n  *\n+ * <p><strong>Receive messages from a specific session</strong></p>\n+ * <p>Use {@link #acceptSession(String)} to acquire the lock of a session if you know the session id.</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc4NzU4OQ=="}, "originalCommit": {"oid": "c14842baa12819bfd308ac1c812def473b9fe116"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2712, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}