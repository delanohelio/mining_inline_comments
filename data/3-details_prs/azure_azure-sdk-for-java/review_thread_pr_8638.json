{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMzEzOTgy", "number": 8638, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOToxMDozM1rODkx7Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODozODoxNFrODlKGRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODkzMjc0OnYy", "diffSide": "RIGHT", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventProcessorClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOToxMDozM1rOFxS3-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoyODo1M1rOFxVYnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzMzc4Ng==", "bodyText": "Did you mean to change it from eventData2 -> eventData1? The same event data returns two different sequence values?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8638#discussion_r387233786", "createdAt": "2020-03-03T19:10:33Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventProcessorClientTest.java", "diffHunk": "@@ -200,9 +202,10 @@ public void testProcessSpans() throws Exception {\n             .createConsumer(anyString(), anyInt()))\n             .thenReturn(consumer1);\n         when(eventData1.getSequenceNumber()).thenReturn(1L);\n-        when(eventData2.getSequenceNumber()).thenReturn(2L);\n+        when(eventData1.getSequenceNumber()).thenReturn(2L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0f4c3af611772759d7c7829a0f9610e5f6b71c6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3NDkxMQ==", "bodyText": "Was meaning to remove eventData2 altogether.  Removed now.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8638#discussion_r387274911", "createdAt": "2020-03-03T20:28:53Z", "author": {"login": "samvaity"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventProcessorClientTest.java", "diffHunk": "@@ -200,9 +202,10 @@ public void testProcessSpans() throws Exception {\n             .createConsumer(anyString(), anyInt()))\n             .thenReturn(consumer1);\n         when(eventData1.getSequenceNumber()).thenReturn(1L);\n-        when(eventData2.getSequenceNumber()).thenReturn(2L);\n+        when(eventData1.getSequenceNumber()).thenReturn(2L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzMzc4Ng=="}, "originalCommit": {"oid": "a0f4c3af611772759d7c7829a0f9610e5f6b71c6"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjg2NjM2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/tracing/Tracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODozMDoxM1rOFx4rsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODozMDoxM1rOFx4rsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1MzIzMw==", "bodyText": "Same constant is declared in OpenTelemetryTracer too. Can this defined in just one place?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8638#discussion_r387853233", "createdAt": "2020-03-04T18:30:13Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/tracing/Tracer.java", "diffHunk": "@@ -62,6 +62,11 @@\n      */\n     String SPAN_BUILDER_KEY = \"builder\";\n \n+    /**\n+     * Key for {@link Context} which indicates the the time of the last enqueued message in the partition's stream.\n+     */\n+    String MESSAGE_ENQUEUED_TIME = \"x-opt-enqueued-time\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ecab65f0649b26332287a8e3c0b84bc2f117b61"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjg5MzUxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-tracing-opentelemetry/src/main/java/com/azure/core/tracing/opentelemetry/OpenTelemetryTracer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODozODoxNFrOFx48qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODo0NzoxOVrOFx5P8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1NzU3Ng==", "bodyText": "Should we convert time to Instant type? On the span, would a string formatted datetime make it easier than a long?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8638#discussion_r387857576", "createdAt": "2020-03-04T18:38:14Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-tracing-opentelemetry/src/main/java/com/azure/core/tracing/opentelemetry/OpenTelemetryTracer.java", "diffHunk": "@@ -256,28 +260,32 @@ private static Context setContextData(Span span) {\n      */\n     private void addSpanRequestAttributes(Span span, Context context, String spanName) {\n         Objects.requireNonNull(span, \"'span' cannot be null.\");\n-        span.setAttribute(\n-            MESSAGE_BUS_DESTINATION,\n-            AttributeValue.stringAttributeValue(getOrDefault(context, ENTITY_PATH_KEY, \"\", String.class)));\n-        span.setAttribute(\n-            PEER_ENDPOINT,\n-            AttributeValue.stringAttributeValue(getOrDefault(context, HOST_NAME_KEY, \"\", String.class)));\n-        span.setAttribute(\n-            AZ_NAMESPACE_KEY,\n-            AttributeValue.stringAttributeValue(getOrDefault(context, AZ_TRACING_NAMESPACE_KEY, \"\", String.class)));\n+        String entityPath = getOrDefault(context, ENTITY_PATH_KEY, null, String.class);\n+        if (entityPath != null) {\n+            span.setAttribute(MESSAGE_BUS_DESTINATION, AttributeValue.stringAttributeValue(entityPath));\n+        }\n+        String hostName = getOrDefault(context, HOST_NAME_KEY, null, String.class);\n+        if (hostName != null) {\n+            span.setAttribute(PEER_ENDPOINT, AttributeValue.stringAttributeValue(hostName));\n+        }\n+        Long messageEnqueuedTime = getOrDefault(context, MESSAGE_ENQUEUED_TIME, null, Long.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ecab65f0649b26332287a8e3c0b84bc2f117b61"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2MjUxMw==", "bodyText": "There is a direct specification to have this as a long value. It could be directly be used as-is if kept long, maybe?\n\nPlease add enqueuedTime attribute on each link when processing messages: unix epoch time with milliseconds precision representing when message was enqueued (x-opt-enqueued-time system property). Attribute value should have long type.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8638#discussion_r387862513", "createdAt": "2020-03-04T18:47:19Z", "author": {"login": "samvaity"}, "path": "sdk/core/azure-core-tracing-opentelemetry/src/main/java/com/azure/core/tracing/opentelemetry/OpenTelemetryTracer.java", "diffHunk": "@@ -256,28 +260,32 @@ private static Context setContextData(Span span) {\n      */\n     private void addSpanRequestAttributes(Span span, Context context, String spanName) {\n         Objects.requireNonNull(span, \"'span' cannot be null.\");\n-        span.setAttribute(\n-            MESSAGE_BUS_DESTINATION,\n-            AttributeValue.stringAttributeValue(getOrDefault(context, ENTITY_PATH_KEY, \"\", String.class)));\n-        span.setAttribute(\n-            PEER_ENDPOINT,\n-            AttributeValue.stringAttributeValue(getOrDefault(context, HOST_NAME_KEY, \"\", String.class)));\n-        span.setAttribute(\n-            AZ_NAMESPACE_KEY,\n-            AttributeValue.stringAttributeValue(getOrDefault(context, AZ_TRACING_NAMESPACE_KEY, \"\", String.class)));\n+        String entityPath = getOrDefault(context, ENTITY_PATH_KEY, null, String.class);\n+        if (entityPath != null) {\n+            span.setAttribute(MESSAGE_BUS_DESTINATION, AttributeValue.stringAttributeValue(entityPath));\n+        }\n+        String hostName = getOrDefault(context, HOST_NAME_KEY, null, String.class);\n+        if (hostName != null) {\n+            span.setAttribute(PEER_ENDPOINT, AttributeValue.stringAttributeValue(hostName));\n+        }\n+        Long messageEnqueuedTime = getOrDefault(context, MESSAGE_ENQUEUED_TIME, null, Long.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1NzU3Ng=="}, "originalCommit": {"oid": "7ecab65f0649b26332287a8e3c0b84bc2f117b61"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 295, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}