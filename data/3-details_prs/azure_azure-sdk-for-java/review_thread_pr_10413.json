{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2OTc1MzYz", "number": 10413, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjoxOToyM1rOD0hlTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjoxOToyM1rOD0hlTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDAyNzY2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/exception/AzureException.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjoxOToyM1rOGJgTdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTowMzowN1rOGKGZAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYxOTYzNg==", "bodyText": "Add the other 2 overloads too.\npublic AzureException()\npublic AzureException(Throwable cause).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10413#discussion_r412619636", "createdAt": "2020-04-22T02:19:23Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/exception/AzureException.java", "diffHunk": "@@ -25,9 +25,22 @@ public AzureException(final String message) {\n      * Initializes a new instance of the AzureException class.\n      *\n      * @param message The exception message.\n-     * @param cause The Throwable which caused the creation of this AzureException.\n+     * @param cause The {@link Throwable} which caused the creation of this AzureException.\n      */\n     public AzureException(final String message, final Throwable cause) {\n         super(message, cause);\n     }\n+\n+    /**\n+     * Initializes a new instance of the AzureException class.\n+     *\n+     * @param message The exception message.\n+     * @param cause The {@link Throwable} which caused the creation of this AzureException.\n+     * @param enableSuppression Whether suppression is enabled or disabled.\n+     * @param writableStackTrace Whether the exception stack trace will be filled in.\n+     */\n+    public AzureException(final String message, final Throwable cause, final boolean enableSuppression,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ee7dbfc175ed6e01fd2851ba576baf0ca948f91"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYyMjg2NQ==", "bodyText": "Should these overloads also be added into the other based exception types such as HttpResponseException and HttpRequestException?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10413#discussion_r412622865", "createdAt": "2020-04-22T02:28:59Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/exception/AzureException.java", "diffHunk": "@@ -25,9 +25,22 @@ public AzureException(final String message) {\n      * Initializes a new instance of the AzureException class.\n      *\n      * @param message The exception message.\n-     * @param cause The Throwable which caused the creation of this AzureException.\n+     * @param cause The {@link Throwable} which caused the creation of this AzureException.\n      */\n     public AzureException(final String message, final Throwable cause) {\n         super(message, cause);\n     }\n+\n+    /**\n+     * Initializes a new instance of the AzureException class.\n+     *\n+     * @param message The exception message.\n+     * @param cause The {@link Throwable} which caused the creation of this AzureException.\n+     * @param enableSuppression Whether suppression is enabled or disabled.\n+     * @param writableStackTrace Whether the exception stack trace will be filled in.\n+     */\n+    public AzureException(final String message, final Throwable cause, final boolean enableSuppression,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYxOTYzNg=="}, "originalCommit": {"oid": "0ee7dbfc175ed6e01fd2851ba576baf0ca948f91"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE5ODY2Mw==", "bodyText": "It's better to provide all constructor overloads and let the caller decide which ctor they want to use. Since all we are doing is delegating to the super ctor, I think it's better to include them in all exception types we create.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10413#discussion_r413198663", "createdAt": "2020-04-22T17:59:41Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/exception/AzureException.java", "diffHunk": "@@ -25,9 +25,22 @@ public AzureException(final String message) {\n      * Initializes a new instance of the AzureException class.\n      *\n      * @param message The exception message.\n-     * @param cause The Throwable which caused the creation of this AzureException.\n+     * @param cause The {@link Throwable} which caused the creation of this AzureException.\n      */\n     public AzureException(final String message, final Throwable cause) {\n         super(message, cause);\n     }\n+\n+    /**\n+     * Initializes a new instance of the AzureException class.\n+     *\n+     * @param message The exception message.\n+     * @param cause The {@link Throwable} which caused the creation of this AzureException.\n+     * @param enableSuppression Whether suppression is enabled or disabled.\n+     * @param writableStackTrace Whether the exception stack trace will be filled in.\n+     */\n+    public AzureException(final String message, final Throwable cause, final boolean enableSuppression,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYxOTYzNg=="}, "originalCommit": {"oid": "0ee7dbfc175ed6e01fd2851ba576baf0ca948f91"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0MzY0OQ==", "bodyText": "Added additional constructors to AzureException, HttpRequestException, and HttpResponseException as they were the only exception types in Azure Core which that have usage.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10413#discussion_r413243649", "createdAt": "2020-04-22T19:03:07Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/exception/AzureException.java", "diffHunk": "@@ -25,9 +25,22 @@ public AzureException(final String message) {\n      * Initializes a new instance of the AzureException class.\n      *\n      * @param message The exception message.\n-     * @param cause The Throwable which caused the creation of this AzureException.\n+     * @param cause The {@link Throwable} which caused the creation of this AzureException.\n      */\n     public AzureException(final String message, final Throwable cause) {\n         super(message, cause);\n     }\n+\n+    /**\n+     * Initializes a new instance of the AzureException class.\n+     *\n+     * @param message The exception message.\n+     * @param cause The {@link Throwable} which caused the creation of this AzureException.\n+     * @param enableSuppression Whether suppression is enabled or disabled.\n+     * @param writableStackTrace Whether the exception stack trace will be filled in.\n+     */\n+    public AzureException(final String message, final Throwable cause, final boolean enableSuppression,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYxOTYzNg=="}, "originalCommit": {"oid": "0ee7dbfc175ed6e01fd2851ba576baf0ca948f91"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4574, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}