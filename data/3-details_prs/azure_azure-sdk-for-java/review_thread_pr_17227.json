{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MjE4NzEx", "number": 17227, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNzo0NDozMFrOE1xT3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwODoyOTozM1rOE1_W7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODE3ODg1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSessionReceiverAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNzo0NDozMFrOHuO8bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODozMjowM1rOHuQ6QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI0MTM4OA==", "bodyText": "sessionId can not be null or empty for this method. This branch isn't reachable at runtime?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518241388", "createdAt": "2020-11-05T17:44:30Z", "author": {"login": "YijunXieMS"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSessionReceiverAsyncClient.java", "diffHunk": "@@ -113,13 +113,25 @@\n         final ReceiverOptions newReceiverOptions = new ReceiverOptions(receiverOptions.getReceiveMode(),\n             receiverOptions.getPrefetchCount(), receiverOptions.getMaxLockRenewDuration(),\n             receiverOptions.isEnableAutoComplete(), sessionId, null);\n+\n         final ServiceBusSessionManager sessionSpecificManager = new ServiceBusSessionManager(entityPath, entityType,\n             connectionProcessor, tracerProvider, messageSerializer, newReceiverOptions);\n \n-        return sessionSpecificManager.getActiveLink().map(receiveLink -> new ServiceBusReceiverAsyncClient(\n-            fullyQualifiedNamespace, entityPath, entityType, newReceiverOptions, connectionProcessor,\n-            ServiceBusConstants.OPERATION_TIMEOUT, tracerProvider, messageSerializer, () -> { },\n-            sessionSpecificManager));\n+        if (CoreUtils.isNullOrEmpty(sessionId)) {\n+            return sessionSpecificManager.getActiveLink().map(receiveLink -> new ServiceBusReceiverAsyncClient(\n+                fullyQualifiedNamespace, entityPath, entityType, newReceiverOptions, connectionProcessor,\n+                ServiceBusConstants.OPERATION_TIMEOUT, tracerProvider, messageSerializer, () -> {\n+            }, sessionSpecificManager));\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0232012b14dc8c9b089165c0e4ef216a12b1e1ce"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3MzYwMQ==", "bodyText": "removed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518273601", "createdAt": "2020-11-05T18:32:03Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSessionReceiverAsyncClient.java", "diffHunk": "@@ -113,13 +113,25 @@\n         final ReceiverOptions newReceiverOptions = new ReceiverOptions(receiverOptions.getReceiveMode(),\n             receiverOptions.getPrefetchCount(), receiverOptions.getMaxLockRenewDuration(),\n             receiverOptions.isEnableAutoComplete(), sessionId, null);\n+\n         final ServiceBusSessionManager sessionSpecificManager = new ServiceBusSessionManager(entityPath, entityType,\n             connectionProcessor, tracerProvider, messageSerializer, newReceiverOptions);\n \n-        return sessionSpecificManager.getActiveLink().map(receiveLink -> new ServiceBusReceiverAsyncClient(\n-            fullyQualifiedNamespace, entityPath, entityType, newReceiverOptions, connectionProcessor,\n-            ServiceBusConstants.OPERATION_TIMEOUT, tracerProvider, messageSerializer, () -> { },\n-            sessionSpecificManager));\n+        if (CoreUtils.isNullOrEmpty(sessionId)) {\n+            return sessionSpecificManager.getActiveLink().map(receiveLink -> new ServiceBusReceiverAsyncClient(\n+                fullyQualifiedNamespace, entityPath, entityType, newReceiverOptions, connectionProcessor,\n+                ServiceBusConstants.OPERATION_TIMEOUT, tracerProvider, messageSerializer, () -> {\n+            }, sessionSpecificManager));\n+        } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI0MTM4OA=="}, "originalCommit": {"oid": "0232012b14dc8c9b089165c0e4ef216a12b1e1ce"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODMzMTcyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODoxODo0M1rOHuQbqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTowNTowNlrOHuWadg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2NTc3MQ==", "bodyText": "Why do we have this?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518265771", "createdAt": "2020-11-05T18:18:43Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -166,6 +166,15 @@\n         });\n     }\n \n+    ServiceBusReceiverAsyncClient(String fullyQualifiedNamespace, String entityPath, MessagingEntityType entityType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0232012b14dc8c9b089165c0e4ef216a12b1e1ce"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI4NTk4MA==", "bodyText": "I am just following how Yijun did in acceptSession(), where a consumer is created (which create ReceiveLink)  and passed in the constructor . So  when ServiceBusReceiverAsyncClient is created it already have the consumer and it does not create new one.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518285980", "createdAt": "2020-11-05T18:53:18Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -166,6 +166,15 @@\n         });\n     }\n \n+    ServiceBusReceiverAsyncClient(String fullyQualifiedNamespace, String entityPath, MessagingEntityType entityType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2NTc3MQ=="}, "originalCommit": {"oid": "0232012b14dc8c9b089165c0e4ef216a12b1e1ce"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMxOTQzNg==", "bodyText": "The ServiceBusAsyncClient contains an asyncConsumer.. that's why we have getOrCreate as a child of this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518319436", "createdAt": "2020-11-05T19:41:45Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -166,6 +166,15 @@\n         });\n     }\n \n+    ServiceBusReceiverAsyncClient(String fullyQualifiedNamespace, String entityPath, MessagingEntityType entityType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2NTc3MQ=="}, "originalCommit": {"oid": "0232012b14dc8c9b089165c0e4ef216a12b1e1ce"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM2Mzc2Ng==", "bodyText": "I changed it as we spoke on teams", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518363766", "createdAt": "2020-11-05T21:05:06Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -166,6 +166,15 @@\n         });\n     }\n \n+    ServiceBusReceiverAsyncClient(String fullyQualifiedNamespace, String entityPath, MessagingEntityType entityType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2NTc3MQ=="}, "originalCommit": {"oid": "0232012b14dc8c9b089165c0e4ef216a12b1e1ce"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODMzNzEwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSessionReceiverAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODoyMDoxMlrOHuQfEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODozMTozN1rOHuQ5Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2NjY0Mg==", "bodyText": "Wait, why are we doing this logic here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518266642", "createdAt": "2020-11-05T18:20:12Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSessionReceiverAsyncClient.java", "diffHunk": "@@ -113,13 +113,25 @@\n         final ReceiverOptions newReceiverOptions = new ReceiverOptions(receiverOptions.getReceiveMode(),\n             receiverOptions.getPrefetchCount(), receiverOptions.getMaxLockRenewDuration(),\n             receiverOptions.isEnableAutoComplete(), sessionId, null);\n+\n         final ServiceBusSessionManager sessionSpecificManager = new ServiceBusSessionManager(entityPath, entityType,\n             connectionProcessor, tracerProvider, messageSerializer, newReceiverOptions);\n \n-        return sessionSpecificManager.getActiveLink().map(receiveLink -> new ServiceBusReceiverAsyncClient(\n-            fullyQualifiedNamespace, entityPath, entityType, newReceiverOptions, connectionProcessor,\n-            ServiceBusConstants.OPERATION_TIMEOUT, tracerProvider, messageSerializer, () -> { },\n-            sessionSpecificManager));\n+        if (CoreUtils.isNullOrEmpty(sessionId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0232012b14dc8c9b089165c0e4ef216a12b1e1ce"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3MzM2Mg==", "bodyText": "This is not needed, this is me working late night.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518273362", "createdAt": "2020-11-05T18:31:37Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSessionReceiverAsyncClient.java", "diffHunk": "@@ -113,13 +113,25 @@\n         final ReceiverOptions newReceiverOptions = new ReceiverOptions(receiverOptions.getReceiveMode(),\n             receiverOptions.getPrefetchCount(), receiverOptions.getMaxLockRenewDuration(),\n             receiverOptions.isEnableAutoComplete(), sessionId, null);\n+\n         final ServiceBusSessionManager sessionSpecificManager = new ServiceBusSessionManager(entityPath, entityType,\n             connectionProcessor, tracerProvider, messageSerializer, newReceiverOptions);\n \n-        return sessionSpecificManager.getActiveLink().map(receiveLink -> new ServiceBusReceiverAsyncClient(\n-            fullyQualifiedNamespace, entityPath, entityType, newReceiverOptions, connectionProcessor,\n-            ServiceBusConstants.OPERATION_TIMEOUT, tracerProvider, messageSerializer, () -> { },\n-            sessionSpecificManager));\n+        if (CoreUtils.isNullOrEmpty(sessionId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2NjY0Mg=="}, "originalCommit": {"oid": "0232012b14dc8c9b089165c0e4ef216a12b1e1ce"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODY3MDcyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxOTo0Mzo0NFrOHuTxlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxOTo0Mzo0NFrOHuTxlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyMDUzNA==", "bodyText": "This Async suffix is .NET", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518320534", "createdAt": "2020-11-05T19:43:44Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1050,6 +1059,10 @@ private boolean isManagementToken(String lockToken) {\n             });\n     }\n \n+    Mono<ServiceBusAsyncConsumer> getOrCreateConsumerAsync() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2940f9678bf3bc7d5fe75e9921dff565a85ab225"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTQyNTI4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzozOToyOVrOHua11g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzo1Mzo1NVrOHubIzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzNjMxMA==", "bodyText": "One last question. So we get and forget the returned result?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518436310", "createdAt": "2020-11-05T23:39:29Z", "author": {"login": "YijunXieMS"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1050,6 +1050,13 @@ private boolean isManagementToken(String lockToken) {\n             });\n     }\n \n+    Mono<ServiceBusReceiverAsyncClient> createConsumerWithReceiveLink() {\n+        return Mono.defer(() -> {\n+            getOrCreateConsumer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14038785e5c78938c2128a5d52c72bf56a80ced6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzODUzMA==", "bodyText": "This would be saved in existing consumer in this instance and will be used for all next calls.\nhttps://github.com/Azure/azure-sdk-for-java/pull/17227/files#diff-42c5fc794930edf5858987b570b871727693454acb27130ac5a9748e55d2de95L1054", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518438530", "createdAt": "2020-11-05T23:45:41Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1050,6 +1050,13 @@ private boolean isManagementToken(String lockToken) {\n             });\n     }\n \n+    Mono<ServiceBusReceiverAsyncClient> createConsumerWithReceiveLink() {\n+        return Mono.defer(() -> {\n+            getOrCreateConsumer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzNjMxMA=="}, "originalCommit": {"oid": "14038785e5c78938c2128a5d52c72bf56a80ced6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ0MTE2NQ==", "bodyText": "This will be saved on in class instance variable as cache consumer .", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518441165", "createdAt": "2020-11-05T23:53:55Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1050,6 +1050,13 @@ private boolean isManagementToken(String lockToken) {\n             });\n     }\n \n+    Mono<ServiceBusReceiverAsyncClient> createConsumerWithReceiveLink() {\n+        return Mono.defer(() -> {\n+            getOrCreateConsumer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzNjMxMA=="}, "originalCommit": {"oid": "14038785e5c78938c2128a5d52c72bf56a80ced6"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTU1OTk5OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMDo0MjoxMlrOHucESQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMDo0MjoxMlrOHucESQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ1NjM5Mw==", "bodyText": "Why are we returning the object again? We already have a reference to it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518456393", "createdAt": "2020-11-06T00:42:12Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1050,6 +1050,13 @@ private boolean isManagementToken(String lockToken) {\n             });\n     }\n \n+    Mono<ServiceBusReceiverAsyncClient> createConsumerWithReceiveLink() {\n+        return Mono.defer(() -> {\n+            getOrCreateConsumer();\n+            return Mono.just(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e70db071b76a3a660a73ed84850ac111917ac28"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTU2MjkyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMDo0Mzo1N1rOHucGHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMDo0Mzo1N1rOHucGHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ1Njg2Mg==", "bodyText": "You should be disposing of the original receiver one before setting it again.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518456862", "createdAt": "2020-11-06T00:43:57Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -897,7 +944,7 @@ void sendReceiveMessageWithVariousPropertyTypes(MessagingEntityType entityType)\n     void setAndGetSessionState(MessagingEntityType entityType) {\n         // Arrange\n         setSenderAndReceiver(entityType, 0, true);\n-\n+        receiver = receiverMono.block(TIMEOUT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e70db071b76a3a660a73ed84850ac111917ac28"}, "originalPosition": 260}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTU2NjExOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMDo0NToyN1rOHucH_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMDo0NToyN1rOHucH_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ1NzM0Mw==", "bodyText": "We're not cleaning up the existing receiver that was set.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518457343", "createdAt": "2020-11-06T00:45:27Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -897,7 +944,7 @@ void sendReceiveMessageWithVariousPropertyTypes(MessagingEntityType entityType)\n     void setAndGetSessionState(MessagingEntityType entityType) {\n         // Arrange\n         setSenderAndReceiver(entityType, 0, true);\n-\n+        receiver = receiverMono.block(TIMEOUT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e70db071b76a3a660a73ed84850ac111917ac28"}, "originalPosition": 260}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTU3MTAwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMDo0Nzo0OFrOHucK5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMDo0Nzo0OFrOHucK5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ1ODA4NA==", "bodyText": "We're not disposing of the receiver that was already set. This is some weird hack. If the flow is completely different, we should split test cases instead of shoehorning this in.\nAdditionally, you can do:\nvar receiver = sessionReceiver.acceptSession().cache(e -> Duration.MAX_VALUE, e -> Duration.MIN_VALUE, e -> Duration.MIN_VALUE);\ntry {\nStepVerifier.create(receiver.flatMap(e -> e.receive...))\n    .\n\n} finally {\n    receiver.close();\n}", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518458084", "createdAt": "2020-11-06T00:47:48Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -638,6 +671,10 @@ void receiveAndComplete(MessagingEntityType entityType, boolean isSessionEnabled\n         final String messageId = UUID.randomUUID().toString();\n         final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n \n+        if (isSessionEnabled) {\n+            this.receiver = receiverMono.block(TIMEOUT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e70db071b76a3a660a73ed84850ac111917ac28"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDQ1MzY1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSessionReceiverAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwODoyMTozMlrOHukMfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwODoyMTozMlrOHukMfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU4OTU2Ng==", "bodyText": "I don't think is correct or the change above. This method always returns a value. We only want the mono to complete successfully if it was able to acquire a lock on the session.\nThe logic before seems like the correct one.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518589566", "createdAt": "2020-11-06T08:21:32Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSessionReceiverAsyncClient.java", "diffHunk": "@@ -113,13 +113,17 @@\n         final ReceiverOptions newReceiverOptions = new ReceiverOptions(receiverOptions.getReceiveMode(),\n             receiverOptions.getPrefetchCount(), receiverOptions.getMaxLockRenewDuration(),\n             receiverOptions.isEnableAutoComplete(), sessionId, null);\n-        final ServiceBusSessionManager sessionSpecificManager = new ServiceBusSessionManager(entityPath, entityType,\n-            connectionProcessor, tracerProvider, messageSerializer, newReceiverOptions);\n \n-        return sessionSpecificManager.getActiveLink().map(receiveLink -> new ServiceBusReceiverAsyncClient(\n-            fullyQualifiedNamespace, entityPath, entityType, newReceiverOptions, connectionProcessor,\n-            ServiceBusConstants.OPERATION_TIMEOUT, tracerProvider, messageSerializer, () -> { },\n-            sessionSpecificManager));\n+        return  Mono.defer(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "641ff343e9bedcf149c7920a3872b85c3d2ff650"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDQ1OTEyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwODoyMzoxNVrOHukPzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwODoyMzoxNVrOHukPzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU5MDQxMw==", "bodyText": "There is a messagesDeferredPending that we no longer use and can be moved or removed. We never read its values.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518590413", "createdAt": "2020-11-06T08:23:15Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -64,12 +63,6 @@\n     private ServiceBusReceiverAsyncClient receiver;\n     private ServiceBusSenderAsyncClient sender;\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "641ff343e9bedcf149c7920a3872b85c3d2ff650"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDQ2ODYwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwODoyNTo1M1rOHukVhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwODoyNTo1M1rOHukVhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU5MTg3Ng==", "bodyText": "Why are we explicitly completing these? the method suggests that these should be auto completed receiveTwoMessagesAutoComplete. Same with the one below.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518591876", "createdAt": "2020-11-06T08:25:53Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -329,12 +261,15 @@ void receiveTwoMessagesAutoComplete(MessagingEntityType entityType, boolean isSe\n         StepVerifier.create(receiver.receiveMessages())\n             .assertNext(receivedMessage -> {\n                 assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+                receiver.complete(receivedMessage).block(Duration.ofSeconds(15));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "641ff343e9bedcf149c7920a3872b85c3d2ff650"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDQ3NTU4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwODoyNzo1M1rOHukZoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwODoyNzo1M1rOHukZoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU5MjkyOQ==", "bodyText": "Then consume while always returns true? Shouldn't we assert that completed < messages.size() and then stop when completed >= messages.size()? And instead of thenCancel(), expect a complete?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518592929", "createdAt": "2020-11-06T08:27:53Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -558,9 +486,13 @@ void peekMessages(MessagingEntityType entityType, boolean isSessionEnabled) {\n                 .assertNext(message -> checkCorrectMessage.accept(message, 7))\n                 .verifyComplete();\n         } finally {\n-            receiveAndDeleteReceiver.receiveMessages()\n-                .take(messages.size())\n-                .blockLast(Duration.ofSeconds(15));\n+            StepVerifier.create(receiver.receiveMessages().take(messages.size()))\n+                .thenConsumeWhile(receivedMessage -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "641ff343e9bedcf149c7920a3872b85c3d2ff650"}, "originalPosition": 212}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDQ3ODk2OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwODoyOTowOFrOHukb6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwODoyOTowOFrOHukb6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU5MzUxNA==", "bodyText": "We have a TIMEOUT duration already defined. We can replace all instances of this Duration.ofSeconds.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518593514", "createdAt": "2020-11-06T08:29:08Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -436,9 +362,10 @@ void sendScheduledMessageAndReceive(MessagingEntityType entityType, boolean isSe\n         sender.scheduleMessage(message, scheduledEnqueueTime).block(TIMEOUT);\n \n         // Assert & Act\n-        StepVerifier.create(Mono.delay(Duration.ofSeconds(3)).then(receiveAndDeleteReceiver.receiveMessages().next()))\n+        StepVerifier.create(Mono.delay(Duration.ofSeconds(4)).then(receiver.receiveMessages().next()))\n             .assertNext(receivedMessage -> {\n                 assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+                receiver.complete(receivedMessage).block(Duration.ofSeconds(15));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "641ff343e9bedcf149c7920a3872b85c3d2ff650"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDQ4MDQ1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwODoyOTozM1rOHukc5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwODoyOTozM1rOHukc5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU5Mzc2Nw==", "bodyText": "Same with this... wouldn't we expect receiver.receiveMessages().take(2) then not cancel?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518593767", "createdAt": "2020-11-06T08:29:33Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -586,6 +518,17 @@ void peekMessagesFromSequence(MessagingEntityType entityType) {\n         StepVerifier.create(receiver.peekMessagesAt(maxMessages, fromSequenceNumber))\n             .expectNextCount(maxMessages)\n             .verifyComplete();\n+\n+        // cleanup\n+        StepVerifier.create(receiver.receiveMessages())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "641ff343e9bedcf149c7920a3872b85c3d2ff650"}, "originalPosition": 227}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3031, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}