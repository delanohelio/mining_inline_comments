{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NTgxNTIz", "number": 10525, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNTo0MTowM1rOD2wMsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODowMjo0NlrOD20phQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzM5Mzc3OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusManagementNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNTo0MTowM1rOGMp60Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNTo0MTowM1rOGMp60Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkyMjg5Nw==", "bodyText": "Alphabetized methods in addition to adding session ones.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10525#discussion_r415922897", "createdAt": "2020-04-27T15:41:03Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusManagementNode.java", "diffHunk": "@@ -6,7 +6,6 @@\n import com.azure.messaging.servicebus.ServiceBusMessage;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9658e1ada5113aa0a5a78e5862bc83e8df9e994c"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODA2MTA2OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzo0OTo1NlrOGMwCNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzo0OTo1NlrOGMwCNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAyMzA5NQ==", "bodyText": "The check map.containsKey(ManagementConstants.SESSION_STATE) : Does not have value if  we do it after we already try to get sessionState.  Either this check should be before or not required because sessionState == null will be sufficient.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10525#discussion_r416023095", "createdAt": "2020-04-27T17:49:56Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -96,6 +97,44 @@\n             })).then();\n     }\n \n+    @Override\n+    public Mono<byte[]> getSessionState() {\n+        if (!isSessionEnabled) {\n+            return monoError(logger, new IllegalStateException(\"Cannot get session state for non-session management node\"));\n+        }\n+\n+        return isAuthorized(ManagementConstants.OPERATION_GET_SESSION_STATE).then(createChannel.flatMap(channel -> {\n+            final Message message = createManagementMessage(ManagementConstants.OPERATION_GET_SESSION_STATE, null);\n+\n+            final Map<String, Object> body = new HashMap<>();\n+            body.put(ManagementConstants.SESSION_ID, sessionId);\n+\n+            message.setBody(new AmqpValue(body));\n+\n+            return sendWithVerify(channel, message);\n+        })).flatMap(response -> {\n+            final Object value = ((AmqpValue) response.getBody()).getValue();\n+\n+            if (!(value instanceof Map)) {\n+                return monoError(logger, Exceptions.propagate(new AmqpException(false, String.format(\n+                    \"Body not expected when renewing session. Id: %s. Value: %s\", sessionId, value),\n+                    getErrorContext())));\n+            }\n+\n+            @SuppressWarnings(\"unchecked\")\n+            final Map<String, Object> map = (Map<String, Object>) value;\n+            final Object sessionState = map.get(ManagementConstants.SESSION_STATE);\n+\n+            if (!map.containsKey(ManagementConstants.SESSION_STATE) || sessionState == null) {\n+                logger.info(\"sessionId[{}]. Does not have a session state.\", sessionId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acda3bfb2bdb76ac7285e7847b6693937d406d0d"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODA4NDM5OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzo1NDo0NlrOGMwPhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODowNzoyMVrOGMwzGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAyNjUwMQ==", "bodyText": "sessionId : If this session id  is not maintained by this receiver. Should we validate it against list of session id this received is actively managing ? So if this session id  is managed by some other receiver, we thro error for example \"Session id is not managed by this receiver\".", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10525#discussion_r416026501", "createdAt": "2020-04-27T17:54:46Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -190,6 +191,24 @@ public String getEntityPath() {\n         return updateDisposition(lockToken, DispositionStatus.COMPLETED, null, null, null);\n     }\n \n+    /**\n+     * Gets the state of a session given its identifier.\n+     *\n+     * @param sessionId Identifier of session to get.\n+     *\n+     * @return The session state or an empty Mono if there is no state set for the session.\n+     * @throws IllegalStateException if the receiver is a non-session receiver.\n+     */\n+    public Mono<byte[]> getSessionState(String sessionId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acda3bfb2bdb76ac7285e7847b6693937d406d0d"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAzNTYxMQ==", "bodyText": "There is only one sessionId in the current implementation. This feature does not exist.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10525#discussion_r416035611", "createdAt": "2020-04-27T18:07:21Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -190,6 +191,24 @@ public String getEntityPath() {\n         return updateDisposition(lockToken, DispositionStatus.COMPLETED, null, null, null);\n     }\n \n+    /**\n+     * Gets the state of a session given its identifier.\n+     *\n+     * @param sessionId Identifier of session to get.\n+     *\n+     * @return The session state or an empty Mono if there is no state set for the session.\n+     * @throws IllegalStateException if the receiver is a non-session receiver.\n+     */\n+    public Mono<byte[]> getSessionState(String sessionId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAyNjUwMQ=="}, "originalCommit": {"oid": "acda3bfb2bdb76ac7285e7847b6693937d406d0d"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODEyMjkzOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODowMjo0NlrOGMwmDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODowMjo0NlrOGMwmDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAzMjI2OA==", "bodyText": "Are we going to add these API in ServiceBusReceiverClient .\nAlso will we add integration test for this ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10525#discussion_r416032268", "createdAt": "2020-04-27T18:02:46Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -494,6 +513,43 @@ public String getEntityPath() {\n             });\n     }\n \n+    /**\n+     * Sets the state of a session given its identifier.\n+     *\n+     * @param sessionId Identifier of session to get.\n+     *\n+     * @return The next expiration time for the session lock.\n+     * @throws IllegalStateException if the receiver is a non-session receiver.\n+     */\n+    public Mono<Instant> renewSessionLock(String sessionId) {\n+        if (!isSessionReceiver) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acda3bfb2bdb76ac7285e7847b6693937d406d0d"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4496, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}