{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyNDg0NjA2", "number": 10114, "title": "mgmt checkstyle azure", "bodyText": "", "createdAt": "2020-04-13T05:43:13Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10114", "merged": true, "mergeCommit": {"oid": "e316e661176036270cf69ef5d67519cecb5b47c8"}, "closed": true, "closedAt": "2020-04-13T06:23:31Z", "author": {"login": "weidongxu-microsoft"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXIFzPgH2gAyNDAyNDg0NjA2OjRiZjRjNWQxNjYxZGFiNzhjMDliZmFjYjJhMjgwZDc4MzNkNjA5MWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXIvo-gFqTM5MTk3Njc3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4bf4c5d1661dab78c09bfacb2a280d7833d6091e", "author": {"user": {"login": "weidongxu-microsoft", "name": "Weidong Xu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4bf4c5d1661dab78c09bfacb2a280d7833d6091e", "committedDate": "2020-04-13T05:31:55Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50c30c1db4694bc298e23ec5fa8c6a50862a3e1e", "author": {"user": {"login": "weidongxu-microsoft", "name": "Weidong Xu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/50c30c1db4694bc298e23ec5fa8c6a50862a3e1e", "committedDate": "2020-04-13T05:42:07Z", "message": "expose sub interface of AppServiceManager instead"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxOTY4NDM2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10114#pullrequestreview-391968436", "createdAt": "2020-04-13T05:46:24Z", "commit": {"oid": "50c30c1db4694bc298e23ec5fa8c6a50862a3e1e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNTo0NjoyNFrOGEdXyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNTo0NjoyNFrOGEdXyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMyODcxNQ==", "bodyText": "Class in implementation is not allowed to be exposed. So use common approach of exposing all its sub interface instead.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10114#discussion_r407328715", "createdAt": "2020-04-13T05:46:24Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/management/azure/src/main/java/com/azure/management/Azure.java", "diffHunk": "@@ -405,575 +405,474 @@ public Azure withDefaultSubscription() throws CloudException, IOException {\n \n     private Azure(RestClient restClient, String subscriptionId, String tenantId, Authenticated authenticated) {\n         this.sdkContext = authenticated.sdkContext();\n-        this.resourceManager = ResourceManager.authenticate(restClient).withSdkContext(sdkContext).withSubscription(subscriptionId);\n+        this.resourceManager =\n+            ResourceManager.authenticate(restClient).withSdkContext(sdkContext).withSubscription(subscriptionId);\n         this.storageManager = StorageManager.authenticate(restClient, subscriptionId, sdkContext);\n         this.computeManager = ComputeManager.authenticate(restClient, subscriptionId, sdkContext);\n         this.networkManager = NetworkManager.authenticate(restClient, subscriptionId, sdkContext);\n         this.keyVaultManager = KeyVaultManager.authenticate(restClient, tenantId, subscriptionId, sdkContext);\n-//        this.batchManager = BatchManager.authenticate(restClient, subscriptionId, sdkContext);\n-//        this.trafficManager = TrafficManager.authenticate(restClient, subscriptionId, sdkContext);\n-//        this.redisManager = RedisManager.authenticate(restClient, subscriptionId, sdkContext);\n-//        this.cdnManager = CdnManager.authenticate(restClient, subscriptionId, sdkContext);\n-//        this.dnsZoneManager = DnsZoneManager.authenticate(restClient, subscriptionId, sdkContext);\n+        //        this.batchManager = BatchManager.authenticate(restClient, subscriptionId, sdkContext);\n+        //        this.trafficManager = TrafficManager.authenticate(restClient, subscriptionId, sdkContext);\n+        //        this.redisManager = RedisManager.authenticate(restClient, subscriptionId, sdkContext);\n+        //        this.cdnManager = CdnManager.authenticate(restClient, subscriptionId, sdkContext);\n+        //        this.dnsZoneManager = DnsZoneManager.authenticate(restClient, subscriptionId, sdkContext);\n         this.appServiceManager = AppServiceManager.authenticate(restClient, tenantId, subscriptionId, sdkContext);\n         this.sqlServerManager = SqlServerManager.authenticate(restClient, tenantId, subscriptionId, sdkContext);\n-//        this.serviceBusManager = ServiceBusManager.authenticate(restClient, subscriptionId, sdkContext);\n-//        this.containerInstanceManager = ContainerInstanceManager.authenticate(restClient, subscriptionId, sdkContext);\n+        //        this.serviceBusManager = ServiceBusManager.authenticate(restClient, subscriptionId, sdkContext);\n+        //        this.containerInstanceManager = ContainerInstanceManager.authenticate(restClient, subscriptionId,\n+        // sdkContext);\n         this.containerRegistryManager = ContainerRegistryManager.authenticate(restClient, subscriptionId, sdkContext);\n         this.containerServiceManager = ContainerServiceManager.authenticate(restClient, subscriptionId, sdkContext);\n         this.cosmosDBManager = CosmosDBManager.authenticate(restClient, subscriptionId, sdkContext);\n-//        this.searchServiceManager = SearchServiceManager.authenticate(restClient, subscriptionId, sdkContext);\n-//        this.authorizationManager = AuthorizationManager.authenticate(restClient, subscriptionId, sdkContext);\n+        //        this.searchServiceManager = SearchServiceManager.authenticate(restClient, subscriptionId, sdkContext);\n+        //        this.authorizationManager = AuthorizationManager.authenticate(restClient, subscriptionId, sdkContext);\n         this.msiManager = MSIManager.authenticate(restClient, subscriptionId, sdkContext);\n         this.monitorManager = MonitorManager.authenticate(restClient, subscriptionId, sdkContext);\n-//        this.eventHubManager = EventHubManager.authenticate(restClient, subscriptionId, sdkContext);\n+        //        this.eventHubManager = EventHubManager.authenticate(restClient, subscriptionId, sdkContext);\n         this.subscriptionId = subscriptionId;\n         this.authenticated = authenticated;\n     }\n \n-\n-    /**\n-     * @return the currently selected subscription ID this client is authenticated to work with\n-     */\n+    /** @return the currently selected subscription ID this client is authenticated to work with */\n     public SdkContext sdkContext() {\n         return this.sdkContext;\n     }\n \n-    /**\n-     * @return the currently selected subscription ID this client is authenticated to work with\n-     */\n+    /** @return the currently selected subscription ID this client is authenticated to work with */\n     public String subscriptionId() {\n         return this.subscriptionId;\n     }\n \n-    /**\n-     * @return the currently selected subscription this client is authenticated to work with\n-     */\n+    /** @return the currently selected subscription this client is authenticated to work with */\n     public Subscription getCurrentSubscription() {\n         return this.subscriptions().getById(this.subscriptionId());\n     }\n \n-    /**\n-     * @return subscriptions that this authenticated client has access to\n-     */\n+    /** @return subscriptions that this authenticated client has access to */\n     public Subscriptions subscriptions() {\n         return this.authenticated.subscriptions();\n     }\n \n-    /**\n-     * @return entry point to managing resource groups\n-     */\n+    /** @return entry point to managing resource groups */\n     public ResourceGroups resourceGroups() {\n         return this.resourceManager.resourceGroups();\n     }\n \n-    /**\n-     * @return entry point to managing deployments\n-     */\n+    /** @return entry point to managing deployments */\n     public Deployments deployments() {\n         return this.resourceManager.deployments();\n     }\n \n-    /**\n-     * @return entry point to managing generic resources\n-     */\n+    /** @return entry point to managing generic resources */\n     public GenericResources genericResources() {\n         return resourceManager.genericResources();\n     }\n \n-//    /**\n-//     * @return entry point to managing management locks\n-//     */\n-//    public ManagementLocks managementLocks() {\n-//        return this.authorizationManager.managementLocks();\n-//    }\n-//\n-//    /**\n-//     * @return entry point to managing features\n-//     */\n-//    public Features features() {\n-//        return resourceManager.features();\n-//    }\n-\n-    /**\n-     * @return entry point to managing resource providers\n-     */\n+    //    /**\n+    //     * @return entry point to managing management locks\n+    //     */\n+    //    public ManagementLocks managementLocks() {\n+    //        return this.authorizationManager.managementLocks();\n+    //    }\n+    //\n+    //    /**\n+    //     * @return entry point to managing features\n+    //     */\n+    //    public Features features() {\n+    //        return resourceManager.features();\n+    //    }\n+\n+    /** @return entry point to managing resource providers */\n     public Providers providers() {\n         return resourceManager.providers();\n     }\n \n-//    /**\n-//     * @return entry point to managing policy definitions.\n-//     */\n-//    public PolicyDefinitions policyDefinitions() {\n-//        return resourceManager.policyDefinitions();\n-//    }\n-//\n-//    /**\n-//     * @return entry point to managing policy assignments.\n-//     */\n-//    public PolicyAssignments policyAssignments() {\n-//        return resourceManager.policyAssignments();\n-//    }\n-\n-    /**\n-     * @return entry point to managing storage accounts\n-     */\n+    //    /**\n+    //     * @return entry point to managing policy definitions.\n+    //     */\n+    //    public PolicyDefinitions policyDefinitions() {\n+    //        return resourceManager.policyDefinitions();\n+    //    }\n+    //\n+    //    /**\n+    //     * @return entry point to managing policy assignments.\n+    //     */\n+    //    public PolicyAssignments policyAssignments() {\n+    //        return resourceManager.policyAssignments();\n+    //    }\n+\n+    /** @return entry point to managing storage accounts */\n     public StorageAccounts storageAccounts() {\n         return storageManager.storageAccounts();\n     }\n \n-    /**\n-     * @return entry point to managing storage account usages\n-     */\n+    /** @return entry point to managing storage account usages */\n     public Usages storageUsages() {\n         return storageManager.usages();\n     }\n \n-    /**\n-     * @return entry point to managing storage service SKUs\n-     */\n+    /** @return entry point to managing storage service SKUs */\n     public StorageSkus storageSkus() {\n         return storageManager.storageSkus();\n     }\n \n-    /**\n-     * @return entry point to managing availability sets\n-     */\n+    /** @return entry point to managing availability sets */\n     public AvailabilitySets availabilitySets() {\n         return computeManager.availabilitySets();\n     }\n \n-    /**\n-     * @return entry point to managing virtual networks\n-     */\n+    /** @return entry point to managing virtual networks */\n     public Networks networks() {\n         return networkManager.networks();\n     }\n \n-    /**\n-     * @return entry point to managing route tables\n-     */\n+    /** @return entry point to managing route tables */\n     public RouteTables routeTables() {\n         return networkManager.routeTables();\n     }\n \n-    /**\n-     * @return entry point to managing load balancers\n-     */\n+    /** @return entry point to managing load balancers */\n     public LoadBalancers loadBalancers() {\n         return networkManager.loadBalancers();\n     }\n \n-    /**\n-     * @return entry point to managing application gateways\n-     */\n+    /** @return entry point to managing application gateways */\n     public ApplicationGateways applicationGateways() {\n         return networkManager.applicationGateways();\n     }\n \n-    /**\n-     * @return entry point to managing network security groups\n-     */\n+    /** @return entry point to managing network security groups */\n     public NetworkSecurityGroups networkSecurityGroups() {\n         return networkManager.networkSecurityGroups();\n     }\n \n-    /**\n-     * @return entry point to managing network resource usages\n-     */\n+    /** @return entry point to managing network resource usages */\n     public NetworkUsages networkUsages() {\n         return networkManager.usages();\n     }\n \n-    /**\n-     * @return entry point to managing network watchers\n-     */\n+    /** @return entry point to managing network watchers */\n     public NetworkWatchers networkWatchers() {\n         return networkManager.networkWatchers();\n     }\n \n-    /**\n-     * @return entry point to managing virtual network gateways\n-     */\n+    /** @return entry point to managing virtual network gateways */\n     public VirtualNetworkGateways virtualNetworkGateways() {\n         return networkManager.virtualNetworkGateways();\n     }\n \n-    /**\n-     * @return entry point to managing local network gateways\n-     */\n+    /** @return entry point to managing local network gateways */\n     public LocalNetworkGateways localNetworkGateways() {\n         return networkManager.localNetworkGateways();\n     }\n \n-    /**\n-     * @return entry point to managing express route circuits\n-     */\n+    /** @return entry point to managing express route circuits */\n     public ExpressRouteCircuits expressRouteCircuits() {\n         return networkManager.expressRouteCircuits();\n     }\n \n-    /**\n-     * @return entry point to managing express route cross connections\n-     */\n+    /** @return entry point to managing express route cross connections */\n     public ExpressRouteCrossConnections expressRouteCrossConnections() {\n         return networkManager.expressRouteCrossConnections();\n     }\n \n-    /**\n-     * @return entry point to managing express route circuits\n-     */\n+    /** @return entry point to managing express route circuits */\n     public ApplicationSecurityGroups applicationSecurityGroups() {\n         return networkManager.applicationSecurityGroups();\n     }\n \n-    /**\n-     * @return entry point to managing route filters\n-     */\n+    /** @return entry point to managing route filters */\n     public RouteFilters routeFilters() {\n         return networkManager.routeFilters();\n     }\n \n-    /**\n-     * @return entry point to managing DDoS protection plans\n-     */\n+    /** @return entry point to managing DDoS protection plans */\n     public DdosProtectionPlans ddosProtectionPlans() {\n         return networkManager.ddosProtectionPlans();\n     }\n \n-    /**\n-     * @return entry point to managing virtual machines\n-     */\n+    /** @return entry point to managing virtual machines */\n     public VirtualMachines virtualMachines() {\n         return computeManager.virtualMachines();\n     }\n \n-    /**\n-     * @return entry point to managing virtual machine scale sets.\n-     */\n+    /** @return entry point to managing virtual machine scale sets. */\n     public VirtualMachineScaleSets virtualMachineScaleSets() {\n         return computeManager.virtualMachineScaleSets();\n     }\n \n-    /**\n-     * @return entry point to managing virtual machine images\n-     */\n+    /** @return entry point to managing virtual machine images */\n     public VirtualMachineImages virtualMachineImages() {\n         return computeManager.virtualMachineImages();\n     }\n \n-    /**\n-     * @return entry point to managing virtual machine custom images\n-     */\n+    /** @return entry point to managing virtual machine custom images */\n     public VirtualMachineCustomImages virtualMachineCustomImages() {\n         return computeManager.virtualMachineCustomImages();\n     }\n \n-    /**\n-     * @return entry point to managing managed disks\n-     */\n+    /** @return entry point to managing managed disks */\n     public Disks disks() {\n         return computeManager.disks();\n     }\n \n-    /**\n-     * @return entry point to managing managed snapshots\n-     */\n+    /** @return entry point to managing managed snapshots */\n     public Snapshots snapshots() {\n         return computeManager.snapshots();\n     }\n \n-    /**\n-     * @return the compute service SKU management API entry point\n-     */\n+    /** @return the compute service SKU management API entry point */\n     public ComputeSkus computeSkus() {\n         return computeManager.computeSkus();\n     }\n \n-    /**\n-     * @return entry point to managing public IP addresses\n-     */\n+    /** @return entry point to managing public IP addresses */\n     public PublicIPAddresses publicIPAddresses() {\n         return this.networkManager.publicIPAddresses();\n     }\n \n-//    /**\n-//     * @return entry point to managing public IP prefixes\n-//     */\n-//    public PublicIPPrefixes publicIPPrefixes() {\n-//        return this.networkManager.publicIPPrefixes();\n-//    }\n+    //    /**\n+    //     * @return entry point to managing public IP prefixes\n+    //     */\n+    //    public PublicIPPrefixes publicIPPrefixes() {\n+    //        return this.networkManager.publicIPPrefixes();\n+    //    }\n \n-    /**\n-     * @return entry point to managing network interfaces\n-     */\n+    /** @return entry point to managing network interfaces */\n     public NetworkInterfaces networkInterfaces() {\n         return this.networkManager.networkInterfaces();\n     }\n \n-    /**\n-     * @return entry point to managing compute resource usages\n-     */\n+    /** @return entry point to managing compute resource usages */\n     public ComputeUsages computeUsages() {\n         return computeManager.usages();\n     }\n \n-    /**\n-     * @return entry point to managing key vaults\n-     */\n+    /** @return entry point to managing key vaults */\n     public Vaults vaults() {\n         return this.keyVaultManager.vaults();\n     }\n \n-//    /**\n-//     * @return entry point to managing batch accounts.\n-//     */\n-//    public BatchAccounts batchAccounts() {\n-//        return batchManager.batchAccounts();\n-//    }\n-\n-//    /**\n-//     * @return entry point to managing traffic manager profiles.\n-//     */\n-//    public TrafficManagerProfiles trafficManagerProfiles() {\n-//        return trafficManager.profiles();\n-//    }\n-//\n-//    /**\n-//     * @return entry point to managing Redis Caches.\n-//     */\n-//    public RedisCaches redisCaches() {\n-//        return redisManager.redisCaches();\n-//    }\n-//\n-//    /**\n-//     * @return entry point to managing cdn manager profiles.\n-//     */\n-//    public CdnProfiles cdnProfiles() {\n-//        return cdnManager.profiles();\n-//    }\n-\n-//    /**\n-//     * @return entry point to managing DNS zones.\n-//     */\n-//    public DnsZones dnsZones() {\n-//        return dnsZoneManager.zones();\n-//    }\n-\n-    /**\n-     * @return entry point to managing web apps.\n-     */\n+    //    /**\n+    //     * @return entry point to managing batch accounts.\n+    //     */\n+    //    public BatchAccounts batchAccounts() {\n+    //        return batchManager.batchAccounts();\n+    //    }\n+\n+    //    /**\n+    //     * @return entry point to managing traffic manager profiles.\n+    //     */\n+    //    public TrafficManagerProfiles trafficManagerProfiles() {\n+    //        return trafficManager.profiles();\n+    //    }\n+    //\n+    //    /**\n+    //     * @return entry point to managing Redis Caches.\n+    //     */\n+    //    public RedisCaches redisCaches() {\n+    //        return redisManager.redisCaches();\n+    //    }\n+    //\n+    //    /**\n+    //     * @return entry point to managing cdn manager profiles.\n+    //     */\n+    //    public CdnProfiles cdnProfiles() {\n+    //        return cdnManager.profiles();\n+    //    }\n+\n+    //    /**\n+    //     * @return entry point to managing DNS zones.\n+    //     */\n+    //    public DnsZones dnsZones() {\n+    //        return dnsZoneManager.zones();\n+    //    }\n+\n+    /** @return entry point to managing web apps. */\n     public WebApps webApps() {\n         return appServiceManager.webApps();\n     }\n \n-    /**\n-     * @return entry point to managing app services.\n-     */\n-    public AppServiceManager appServices() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50c30c1db4694bc298e23ec5fa8c6a50862a3e1e"}, "originalPosition": 732}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxOTc1OTU3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10114#pullrequestreview-391975957", "createdAt": "2020-04-13T06:14:52Z", "commit": {"oid": "50c30c1db4694bc298e23ec5fa8c6a50862a3e1e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxOTc2Nzcx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10114#pullrequestreview-391976771", "createdAt": "2020-04-13T06:17:37Z", "commit": {"oid": "50c30c1db4694bc298e23ec5fa8c6a50862a3e1e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1035, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}