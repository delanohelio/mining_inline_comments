{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MjQ3OTA5", "number": 8466, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyOTowMVrODi4B1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTozODo0NFrODjNnJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk2MTUwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyOTowMVrOFuXmfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNToxMDoyNVrOFuvVYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTUwMw==", "bodyText": "there is a bug here in refreshLocationAsync(.) invocation", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384165503", "createdAt": "2020-02-25T22:29:01Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java", "diffHunk": "@@ -159,6 +166,20 @@ public void close() {\n         });\n     }\n \n+    public Mono<DatabaseAccount> getDatabaseAccountFromCache(URI defaultEndpoint) {\n+        return this.databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, null, () -> this.owner.getDatabaseAccountFromEndpoint(defaultEndpoint).single().doOnSuccess(databaseAccount -> {\n+            if(databaseAccount != null) {\n+                this.latestDatabaseAccount = databaseAccount;\n+            }\n+\n+            this.refreshLocationAsync(databaseAccount, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3864034a967a964eae0768fcac3d37d3fdc38276"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE3MzE1MA==", "bodyText": "What bug , please explain . this is same as the code initially doing in RxDocumentClientImpl, via this.globalEndpointManager.refreshLocationAsync(databaseAccount, false).block();", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384173150", "createdAt": "2020-02-25T22:46:28Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java", "diffHunk": "@@ -159,6 +166,20 @@ public void close() {\n         });\n     }\n \n+    public Mono<DatabaseAccount> getDatabaseAccountFromCache(URI defaultEndpoint) {\n+        return this.databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, null, () -> this.owner.getDatabaseAccountFromEndpoint(defaultEndpoint).single().doOnSuccess(databaseAccount -> {\n+            if(databaseAccount != null) {\n+                this.latestDatabaseAccount = databaseAccount;\n+            }\n+\n+            this.refreshLocationAsync(databaseAccount, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTUwMw=="}, "originalCommit": {"oid": "3864034a967a964eae0768fcac3d37d3fdc38276"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5MTg3OQ==", "bodyText": "I think i see the bug will fix in next iteration", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384191879", "createdAt": "2020-02-25T23:33:48Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java", "diffHunk": "@@ -159,6 +166,20 @@ public void close() {\n         });\n     }\n \n+    public Mono<DatabaseAccount> getDatabaseAccountFromCache(URI defaultEndpoint) {\n+        return this.databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, null, () -> this.owner.getDatabaseAccountFromEndpoint(defaultEndpoint).single().doOnSuccess(databaseAccount -> {\n+            if(databaseAccount != null) {\n+                this.latestDatabaseAccount = databaseAccount;\n+            }\n+\n+            this.refreshLocationAsync(databaseAccount, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTUwMw=="}, "originalCommit": {"oid": "3864034a967a964eae0768fcac3d37d3fdc38276"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU1NDMzOQ==", "bodyText": "Made refreshLocationAsync in async pipeline , added test cases to make sure this method is getting called", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384554339", "createdAt": "2020-02-26T15:10:25Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java", "diffHunk": "@@ -159,6 +166,20 @@ public void close() {\n         });\n     }\n \n+    public Mono<DatabaseAccount> getDatabaseAccountFromCache(URI defaultEndpoint) {\n+        return this.databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, null, () -> this.owner.getDatabaseAccountFromEndpoint(defaultEndpoint).single().doOnSuccess(databaseAccount -> {\n+            if(databaseAccount != null) {\n+                this.latestDatabaseAccount = databaseAccount;\n+            }\n+\n+            this.refreshLocationAsync(databaseAccount, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTUwMw=="}, "originalCommit": {"oid": "3864034a967a964eae0768fcac3d37d3fdc38276"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk2NzkyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjozMToxOFrOFuXqeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjoxNzowMlrOFu-Zqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NjUyMg==", "bodyText": "where are we doing the initialization blocking call now?\nIf the global endpoint manager is not fully initialized with first databaseAccount fetch could this return null?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384166522", "createdAt": "2020-02-25T22:31:18Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -250,29 +250,12 @@ private RxDocumentClientImpl(URI serviceEndpoint,\n     }\n \n     private void initializeGatewayConfigurationReader() {\n-        String resourceToken;\n-        if(this.tokenResolver != null) {\n-            resourceToken = this.tokenResolver.getAuthorizationToken(RequestVerb.GET, \"\", CosmosResourceType.System, null);\n-        } else if(!this.hasAuthKeyResourceToken && this.authorizationTokenProvider == null) {\n-            resourceToken = this.firstResourceTokenFromPermissionFeed;\n-        } else {\n-            assert  this.masterKeyOrResourceToken != null || this.cosmosKeyCredential != null;\n-            resourceToken = this.masterKeyOrResourceToken;\n-        }\n-\n-        this.gatewayConfigurationReader = new GatewayServiceConfigurationReader(this.serviceEndpoint,\n-                this.hasAuthKeyResourceToken,\n-                resourceToken,\n-                this.connectionPolicy,\n-                this.authorizationTokenProvider,\n-                this.reactorHttpClient);\n-\n-        DatabaseAccount databaseAccount = this.gatewayConfigurationReader.initializeReaderAsync().block();\n+        this.gatewayConfigurationReader = new GatewayServiceConfigurationReader(this.serviceEndpoint, this.globalEndpointManager);\n+        DatabaseAccount databaseAccount = this.globalEndpointManager.getLatestDatabaseAccount();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3864034a967a964eae0768fcac3d37d3fdc38276"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE3MTIyNA==", "bodyText": "GatewayServiceConfigurationReader constructor is doing blocking call on async cache , so for first time if cache in null it will hit the BE", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384171224", "createdAt": "2020-02-25T22:41:55Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -250,29 +250,12 @@ private RxDocumentClientImpl(URI serviceEndpoint,\n     }\n \n     private void initializeGatewayConfigurationReader() {\n-        String resourceToken;\n-        if(this.tokenResolver != null) {\n-            resourceToken = this.tokenResolver.getAuthorizationToken(RequestVerb.GET, \"\", CosmosResourceType.System, null);\n-        } else if(!this.hasAuthKeyResourceToken && this.authorizationTokenProvider == null) {\n-            resourceToken = this.firstResourceTokenFromPermissionFeed;\n-        } else {\n-            assert  this.masterKeyOrResourceToken != null || this.cosmosKeyCredential != null;\n-            resourceToken = this.masterKeyOrResourceToken;\n-        }\n-\n-        this.gatewayConfigurationReader = new GatewayServiceConfigurationReader(this.serviceEndpoint,\n-                this.hasAuthKeyResourceToken,\n-                resourceToken,\n-                this.connectionPolicy,\n-                this.authorizationTokenProvider,\n-                this.reactorHttpClient);\n-\n-        DatabaseAccount databaseAccount = this.gatewayConfigurationReader.initializeReaderAsync().block();\n+        this.gatewayConfigurationReader = new GatewayServiceConfigurationReader(this.serviceEndpoint, this.globalEndpointManager);\n+        DatabaseAccount databaseAccount = this.globalEndpointManager.getLatestDatabaseAccount();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NjUyMg=="}, "originalCommit": {"oid": "3864034a967a964eae0768fcac3d37d3fdc38276"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwODU0Nw==", "bodyText": "could you please add an assert(databaseAccount != null) here. for sanity check and readibility.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384708547", "createdAt": "2020-02-26T19:20:12Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -250,29 +250,12 @@ private RxDocumentClientImpl(URI serviceEndpoint,\n     }\n \n     private void initializeGatewayConfigurationReader() {\n-        String resourceToken;\n-        if(this.tokenResolver != null) {\n-            resourceToken = this.tokenResolver.getAuthorizationToken(RequestVerb.GET, \"\", CosmosResourceType.System, null);\n-        } else if(!this.hasAuthKeyResourceToken && this.authorizationTokenProvider == null) {\n-            resourceToken = this.firstResourceTokenFromPermissionFeed;\n-        } else {\n-            assert  this.masterKeyOrResourceToken != null || this.cosmosKeyCredential != null;\n-            resourceToken = this.masterKeyOrResourceToken;\n-        }\n-\n-        this.gatewayConfigurationReader = new GatewayServiceConfigurationReader(this.serviceEndpoint,\n-                this.hasAuthKeyResourceToken,\n-                resourceToken,\n-                this.connectionPolicy,\n-                this.authorizationTokenProvider,\n-                this.reactorHttpClient);\n-\n-        DatabaseAccount databaseAccount = this.gatewayConfigurationReader.initializeReaderAsync().block();\n+        this.gatewayConfigurationReader = new GatewayServiceConfigurationReader(this.serviceEndpoint, this.globalEndpointManager);\n+        DatabaseAccount databaseAccount = this.globalEndpointManager.getLatestDatabaseAccount();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NjUyMg=="}, "originalCommit": {"oid": "3864034a967a964eae0768fcac3d37d3fdc38276"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwMTE5NQ==", "bodyText": "done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384801195", "createdAt": "2020-02-26T22:17:02Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -250,29 +250,12 @@ private RxDocumentClientImpl(URI serviceEndpoint,\n     }\n \n     private void initializeGatewayConfigurationReader() {\n-        String resourceToken;\n-        if(this.tokenResolver != null) {\n-            resourceToken = this.tokenResolver.getAuthorizationToken(RequestVerb.GET, \"\", CosmosResourceType.System, null);\n-        } else if(!this.hasAuthKeyResourceToken && this.authorizationTokenProvider == null) {\n-            resourceToken = this.firstResourceTokenFromPermissionFeed;\n-        } else {\n-            assert  this.masterKeyOrResourceToken != null || this.cosmosKeyCredential != null;\n-            resourceToken = this.masterKeyOrResourceToken;\n-        }\n-\n-        this.gatewayConfigurationReader = new GatewayServiceConfigurationReader(this.serviceEndpoint,\n-                this.hasAuthKeyResourceToken,\n-                resourceToken,\n-                this.connectionPolicy,\n-                this.authorizationTokenProvider,\n-                this.reactorHttpClient);\n-\n-        DatabaseAccount databaseAccount = this.gatewayConfigurationReader.initializeReaderAsync().block();\n+        this.gatewayConfigurationReader = new GatewayServiceConfigurationReader(this.serviceEndpoint, this.globalEndpointManager);\n+        DatabaseAccount databaseAccount = this.globalEndpointManager.getLatestDatabaseAccount();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NjUyMg=="}, "originalCommit": {"oid": "3864034a967a964eae0768fcac3d37d3fdc38276"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk3MTE0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjozMjoyOVrOFuXseg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMTozNjoyOVrOFu9LKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NzAzNA==", "bodyText": "there is a time window where GlobalEndpointManager is instantiated but hasn't fetched DatabaseAccount, within that period how do we ensure this never returns null?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384167034", "createdAt": "2020-02-25T22:32:29Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java", "diffHunk": "@@ -159,6 +166,20 @@ public void close() {\n         });\n     }\n \n+    public Mono<DatabaseAccount> getDatabaseAccountFromCache(URI defaultEndpoint) {\n+        return this.databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, null, () -> this.owner.getDatabaseAccountFromEndpoint(defaultEndpoint).single().doOnSuccess(databaseAccount -> {\n+            if(databaseAccount != null) {\n+                this.latestDatabaseAccount = databaseAccount;\n+            }\n+\n+            this.refreshLocationAsync(databaseAccount, false);\n+        }));\n+    }\n+\n+    public DatabaseAccount getLatestDatabaseAccount() {\n+        return this.latestDatabaseAccount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3864034a967a964eae0768fcac3d37d3fdc38276"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE3MjI0NQ==", "bodyText": "We are calling init on GlobalEndpointManager  from RxDocumentClientImpl which will update this value , any future call if return null due to any exception or error we will not update latestDatabaseAccount and async cahce , they will hold the previous not null value", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384172245", "createdAt": "2020-02-25T22:44:19Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java", "diffHunk": "@@ -159,6 +166,20 @@ public void close() {\n         });\n     }\n \n+    public Mono<DatabaseAccount> getDatabaseAccountFromCache(URI defaultEndpoint) {\n+        return this.databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, null, () -> this.owner.getDatabaseAccountFromEndpoint(defaultEndpoint).single().doOnSuccess(databaseAccount -> {\n+            if(databaseAccount != null) {\n+                this.latestDatabaseAccount = databaseAccount;\n+            }\n+\n+            this.refreshLocationAsync(databaseAccount, false);\n+        }));\n+    }\n+\n+    public DatabaseAccount getLatestDatabaseAccount() {\n+        return this.latestDatabaseAccount;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NzAzNA=="}, "originalCommit": {"oid": "3864034a967a964eae0768fcac3d37d3fdc38276"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwNzg2Nw==", "bodyText": "Please document the new API saying what you said above.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384707867", "createdAt": "2020-02-26T19:18:44Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java", "diffHunk": "@@ -159,6 +166,20 @@ public void close() {\n         });\n     }\n \n+    public Mono<DatabaseAccount> getDatabaseAccountFromCache(URI defaultEndpoint) {\n+        return this.databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, null, () -> this.owner.getDatabaseAccountFromEndpoint(defaultEndpoint).single().doOnSuccess(databaseAccount -> {\n+            if(databaseAccount != null) {\n+                this.latestDatabaseAccount = databaseAccount;\n+            }\n+\n+            this.refreshLocationAsync(databaseAccount, false);\n+        }));\n+    }\n+\n+    public DatabaseAccount getLatestDatabaseAccount() {\n+        return this.latestDatabaseAccount;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NzAzNA=="}, "originalCommit": {"oid": "3864034a967a964eae0768fcac3d37d3fdc38276"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc4MTA5Ng==", "bodyText": "done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384781096", "createdAt": "2020-02-26T21:36:29Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java", "diffHunk": "@@ -159,6 +166,20 @@ public void close() {\n         });\n     }\n \n+    public Mono<DatabaseAccount> getDatabaseAccountFromCache(URI defaultEndpoint) {\n+        return this.databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, null, () -> this.owner.getDatabaseAccountFromEndpoint(defaultEndpoint).single().doOnSuccess(databaseAccount -> {\n+            if(databaseAccount != null) {\n+                this.latestDatabaseAccount = databaseAccount;\n+            }\n+\n+            this.refreshLocationAsync(databaseAccount, false);\n+        }));\n+    }\n+\n+    public DatabaseAccount getLatestDatabaseAccount() {\n+        return this.latestDatabaseAccount;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NzAzNA=="}, "originalCommit": {"oid": "3864034a967a964eae0768fcac3d37d3fdc38276"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjQ1MTU4OnYy", "diffSide": "LEFT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayServiceConfigurationReader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOToyNzoyMVrOFu4_pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjoxMTozMVrOFu-PeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMjYxMg==", "bodyText": "as this httpHeaders.set(HttpConstants.HttpHeaders.API_TYPE, Constants.Properties.SQL_API_TYPE); is removed, we are not passing this header to the service in the initialization time.\n\nwhat does .Net do?\nIs that ok not to set SQL_API_TYPE? what happens on non sql type account?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384712612", "createdAt": "2020-02-26T19:27:21Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayServiceConfigurationReader.java", "diffHunk": "@@ -42,118 +24,28 @@\n  */\n public class GatewayServiceConfigurationReader {\n \n-    public static final String GATEWAY_READER_NOT_INITIALIZED = \"GatewayServiceConfigurationReader has not been initialized\";\n-\n-    public ReplicationPolicy userReplicationPolicy;\n-    private ReplicationPolicy systemReplicationPolicy;\n-    private ConsistencyLevel consistencyLevel;\n-    private volatile boolean initialized;\n     private URI serviceEndpoint;\n-    private final ConnectionPolicy connectionPolicy;\n-    private Map<String, Object> queryEngineConfiguration;\n-    private final BaseAuthorizationTokenProvider baseAuthorizationTokenProvider;\n-    private final boolean hasAuthKeyResourceToken;\n-    private final String authKeyResourceToken;\n-    private HttpClient httpClient;\n+    private GlobalEndpointManager globalEndpointManager;\n \n-    public GatewayServiceConfigurationReader(URI serviceEndpoint, boolean hasResourceToken, String resourceToken,\n-            ConnectionPolicy connectionPolicy, BaseAuthorizationTokenProvider baseAuthorizationTokenProvider,\n-            HttpClient httpClient) {\n+    public GatewayServiceConfigurationReader(URI serviceEndpoint, GlobalEndpointManager globalEndpointManager) {\n         this.serviceEndpoint = serviceEndpoint;\n-        this.baseAuthorizationTokenProvider = baseAuthorizationTokenProvider;\n-        this.hasAuthKeyResourceToken = hasResourceToken;\n-        this.authKeyResourceToken = resourceToken;\n-        this.connectionPolicy = connectionPolicy;\n-        this.httpClient = httpClient;\n+        this.globalEndpointManager = globalEndpointManager;\n+        this.globalEndpointManager.getDatabaseAccountFromCache(this.serviceEndpoint).block();\n     }\n \n     public ReplicationPolicy getUserReplicationPolicy() {\n-        this.throwIfNotInitialized();\n-        return this.userReplicationPolicy;\n+        return BridgeInternal.getReplicationPolicy(this.globalEndpointManager.getLatestDatabaseAccount());\n     }\n \n     public ReplicationPolicy getSystemReplicationPolicy() {\n-        this.throwIfNotInitialized();\n-        return this.systemReplicationPolicy;\n-    }\n-\n-    public boolean enableAuthorization() {\n-        return true;\n+        return BridgeInternal.getSystemReplicationPolicy(this.globalEndpointManager.getLatestDatabaseAccount());\n     }\n \n     public ConsistencyLevel getDefaultConsistencyLevel() {\n-        this.throwIfNotInitialized();\n-        return this.consistencyLevel;\n-    }\n-\n-    public void setDefaultConsistencyLevel(ConsistencyLevel value) {\n-        this.throwIfNotInitialized();\n-        this.consistencyLevel = value;\n+        return BridgeInternal.getConsistencyPolicy(this.globalEndpointManager.getLatestDatabaseAccount()).getDefaultConsistencyLevel();\n     }\n \n     public Map<String, Object> getQueryEngineConfiguration() {\n-        this.throwIfNotInitialized();\n-        return this.queryEngineConfiguration;\n-    }\n-\n-    private Mono<DatabaseAccount> getDatabaseAccountAsync(URI serviceEndpoint) {\n-\n-        HttpHeaders httpHeaders = new HttpHeaders();\n-        httpHeaders.set(HttpConstants.HttpHeaders.VERSION, HttpConstants.Versions.CURRENT_VERSION);\n-\n-        UserAgentContainer userAgentContainer = new UserAgentContainer();\n-        String userAgentSuffix = this.connectionPolicy.getUserAgentSuffix();\n-        if (userAgentSuffix != null && userAgentSuffix.length() > 0) {\n-            userAgentContainer.setSuffix(userAgentSuffix);\n-        }\n-\n-        httpHeaders.set(HttpConstants.HttpHeaders.USER_AGENT, userAgentContainer.getUserAgent());\n-        httpHeaders.set(HttpConstants.HttpHeaders.API_TYPE, Constants.Properties.SQL_API_TYPE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39fa9221dd222332b74dce47d08ca5e7e4eface3"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc4MDgxNQ==", "bodyText": "Checked with Jake , for .NET code is there to send apiType on all gateway calls , but currently it is taking ApiType.None, which is is filtered out when call goes to gateway.\nNow for java we have one place for all gateway calls ,we can include that in common place . We can track this item separately", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384780815", "createdAt": "2020-02-26T21:35:58Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayServiceConfigurationReader.java", "diffHunk": "@@ -42,118 +24,28 @@\n  */\n public class GatewayServiceConfigurationReader {\n \n-    public static final String GATEWAY_READER_NOT_INITIALIZED = \"GatewayServiceConfigurationReader has not been initialized\";\n-\n-    public ReplicationPolicy userReplicationPolicy;\n-    private ReplicationPolicy systemReplicationPolicy;\n-    private ConsistencyLevel consistencyLevel;\n-    private volatile boolean initialized;\n     private URI serviceEndpoint;\n-    private final ConnectionPolicy connectionPolicy;\n-    private Map<String, Object> queryEngineConfiguration;\n-    private final BaseAuthorizationTokenProvider baseAuthorizationTokenProvider;\n-    private final boolean hasAuthKeyResourceToken;\n-    private final String authKeyResourceToken;\n-    private HttpClient httpClient;\n+    private GlobalEndpointManager globalEndpointManager;\n \n-    public GatewayServiceConfigurationReader(URI serviceEndpoint, boolean hasResourceToken, String resourceToken,\n-            ConnectionPolicy connectionPolicy, BaseAuthorizationTokenProvider baseAuthorizationTokenProvider,\n-            HttpClient httpClient) {\n+    public GatewayServiceConfigurationReader(URI serviceEndpoint, GlobalEndpointManager globalEndpointManager) {\n         this.serviceEndpoint = serviceEndpoint;\n-        this.baseAuthorizationTokenProvider = baseAuthorizationTokenProvider;\n-        this.hasAuthKeyResourceToken = hasResourceToken;\n-        this.authKeyResourceToken = resourceToken;\n-        this.connectionPolicy = connectionPolicy;\n-        this.httpClient = httpClient;\n+        this.globalEndpointManager = globalEndpointManager;\n+        this.globalEndpointManager.getDatabaseAccountFromCache(this.serviceEndpoint).block();\n     }\n \n     public ReplicationPolicy getUserReplicationPolicy() {\n-        this.throwIfNotInitialized();\n-        return this.userReplicationPolicy;\n+        return BridgeInternal.getReplicationPolicy(this.globalEndpointManager.getLatestDatabaseAccount());\n     }\n \n     public ReplicationPolicy getSystemReplicationPolicy() {\n-        this.throwIfNotInitialized();\n-        return this.systemReplicationPolicy;\n-    }\n-\n-    public boolean enableAuthorization() {\n-        return true;\n+        return BridgeInternal.getSystemReplicationPolicy(this.globalEndpointManager.getLatestDatabaseAccount());\n     }\n \n     public ConsistencyLevel getDefaultConsistencyLevel() {\n-        this.throwIfNotInitialized();\n-        return this.consistencyLevel;\n-    }\n-\n-    public void setDefaultConsistencyLevel(ConsistencyLevel value) {\n-        this.throwIfNotInitialized();\n-        this.consistencyLevel = value;\n+        return BridgeInternal.getConsistencyPolicy(this.globalEndpointManager.getLatestDatabaseAccount()).getDefaultConsistencyLevel();\n     }\n \n     public Map<String, Object> getQueryEngineConfiguration() {\n-        this.throwIfNotInitialized();\n-        return this.queryEngineConfiguration;\n-    }\n-\n-    private Mono<DatabaseAccount> getDatabaseAccountAsync(URI serviceEndpoint) {\n-\n-        HttpHeaders httpHeaders = new HttpHeaders();\n-        httpHeaders.set(HttpConstants.HttpHeaders.VERSION, HttpConstants.Versions.CURRENT_VERSION);\n-\n-        UserAgentContainer userAgentContainer = new UserAgentContainer();\n-        String userAgentSuffix = this.connectionPolicy.getUserAgentSuffix();\n-        if (userAgentSuffix != null && userAgentSuffix.length() > 0) {\n-            userAgentContainer.setSuffix(userAgentSuffix);\n-        }\n-\n-        httpHeaders.set(HttpConstants.HttpHeaders.USER_AGENT, userAgentContainer.getUserAgent());\n-        httpHeaders.set(HttpConstants.HttpHeaders.API_TYPE, Constants.Properties.SQL_API_TYPE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMjYxMg=="}, "originalCommit": {"oid": "39fa9221dd222332b74dce47d08ca5e7e4eface3"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5ODU4NQ==", "bodyText": "thanks", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384798585", "createdAt": "2020-02-26T22:11:31Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayServiceConfigurationReader.java", "diffHunk": "@@ -42,118 +24,28 @@\n  */\n public class GatewayServiceConfigurationReader {\n \n-    public static final String GATEWAY_READER_NOT_INITIALIZED = \"GatewayServiceConfigurationReader has not been initialized\";\n-\n-    public ReplicationPolicy userReplicationPolicy;\n-    private ReplicationPolicy systemReplicationPolicy;\n-    private ConsistencyLevel consistencyLevel;\n-    private volatile boolean initialized;\n     private URI serviceEndpoint;\n-    private final ConnectionPolicy connectionPolicy;\n-    private Map<String, Object> queryEngineConfiguration;\n-    private final BaseAuthorizationTokenProvider baseAuthorizationTokenProvider;\n-    private final boolean hasAuthKeyResourceToken;\n-    private final String authKeyResourceToken;\n-    private HttpClient httpClient;\n+    private GlobalEndpointManager globalEndpointManager;\n \n-    public GatewayServiceConfigurationReader(URI serviceEndpoint, boolean hasResourceToken, String resourceToken,\n-            ConnectionPolicy connectionPolicy, BaseAuthorizationTokenProvider baseAuthorizationTokenProvider,\n-            HttpClient httpClient) {\n+    public GatewayServiceConfigurationReader(URI serviceEndpoint, GlobalEndpointManager globalEndpointManager) {\n         this.serviceEndpoint = serviceEndpoint;\n-        this.baseAuthorizationTokenProvider = baseAuthorizationTokenProvider;\n-        this.hasAuthKeyResourceToken = hasResourceToken;\n-        this.authKeyResourceToken = resourceToken;\n-        this.connectionPolicy = connectionPolicy;\n-        this.httpClient = httpClient;\n+        this.globalEndpointManager = globalEndpointManager;\n+        this.globalEndpointManager.getDatabaseAccountFromCache(this.serviceEndpoint).block();\n     }\n \n     public ReplicationPolicy getUserReplicationPolicy() {\n-        this.throwIfNotInitialized();\n-        return this.userReplicationPolicy;\n+        return BridgeInternal.getReplicationPolicy(this.globalEndpointManager.getLatestDatabaseAccount());\n     }\n \n     public ReplicationPolicy getSystemReplicationPolicy() {\n-        this.throwIfNotInitialized();\n-        return this.systemReplicationPolicy;\n-    }\n-\n-    public boolean enableAuthorization() {\n-        return true;\n+        return BridgeInternal.getSystemReplicationPolicy(this.globalEndpointManager.getLatestDatabaseAccount());\n     }\n \n     public ConsistencyLevel getDefaultConsistencyLevel() {\n-        this.throwIfNotInitialized();\n-        return this.consistencyLevel;\n-    }\n-\n-    public void setDefaultConsistencyLevel(ConsistencyLevel value) {\n-        this.throwIfNotInitialized();\n-        this.consistencyLevel = value;\n+        return BridgeInternal.getConsistencyPolicy(this.globalEndpointManager.getLatestDatabaseAccount()).getDefaultConsistencyLevel();\n     }\n \n     public Map<String, Object> getQueryEngineConfiguration() {\n-        this.throwIfNotInitialized();\n-        return this.queryEngineConfiguration;\n-    }\n-\n-    private Mono<DatabaseAccount> getDatabaseAccountAsync(URI serviceEndpoint) {\n-\n-        HttpHeaders httpHeaders = new HttpHeaders();\n-        httpHeaders.set(HttpConstants.HttpHeaders.VERSION, HttpConstants.Versions.CURRENT_VERSION);\n-\n-        UserAgentContainer userAgentContainer = new UserAgentContainer();\n-        String userAgentSuffix = this.connectionPolicy.getUserAgentSuffix();\n-        if (userAgentSuffix != null && userAgentSuffix.length() > 0) {\n-            userAgentContainer.setSuffix(userAgentSuffix);\n-        }\n-\n-        httpHeaders.set(HttpConstants.HttpHeaders.USER_AGENT, userAgentContainer.getUserAgent());\n-        httpHeaders.set(HttpConstants.HttpHeaders.API_TYPE, Constants.Properties.SQL_API_TYPE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMjYxMg=="}, "originalCommit": {"oid": "39fa9221dd222332b74dce47d08ca5e7e4eface3"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjQ5NzY1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTozODo0NFrOFu5aYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMTozMjowNFrOFu9CCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxOTQ1OA==", "bodyText": "does this mean there is a window of time where there is an invalid result in the cache?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384719458", "createdAt": "2020-02-26T19:38:44Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java", "diffHunk": "@@ -253,8 +274,27 @@ private void startRefreshLocationTimerAsync() {\n     }\n \n     private Mono<DatabaseAccount> getDatabaseAccountAsync(URI serviceEndpoint) {\n-        return this.owner.getDatabaseAccountFromEndpoint(serviceEndpoint)\n-            .doOnNext(i -> logger.debug(\"account retrieved: {}\", i)).single();\n+        final GlobalEndpointManager that = this;\n+        Callable<Mono<DatabaseAccount>> fetchDatabaseAccount = () -> {\n+            return that.owner.getDatabaseAccountFromEndpoint(serviceEndpoint).doOnNext(databaseAccount -> {\n+                if(databaseAccount != null) {\n+                    this.latestDatabaseAccount = databaseAccount;\n+                }\n+\n+                logger.debug(\"account retrieved: {}\", databaseAccount);\n+            }).single();\n+        };\n+\n+        Mono<DatabaseAccount> obsoleteValueMono = databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, null, fetchDatabaseAccount);\n+        return obsoleteValueMono.flatMap(obsoleteValue -> {\n+            if (firstTimeDatabaseAccountInitialization.compareAndSet(true, false)) {\n+                return Mono.just(obsoleteValue);\n+            }\n+            return databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, obsoleteValue, fetchDatabaseAccount).doOnError(t -> {\n+                //Putting back the old value in cache, this will avoid cache corruption\n+                databaseAccountAsyncCache.set(StringUtils.EMPTY, obsoleteValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39fa9221dd222332b74dce47d08ca5e7e4eface3"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczMTE0MQ==", "bodyText": "Yes", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384731141", "createdAt": "2020-02-26T19:58:16Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java", "diffHunk": "@@ -253,8 +274,27 @@ private void startRefreshLocationTimerAsync() {\n     }\n \n     private Mono<DatabaseAccount> getDatabaseAccountAsync(URI serviceEndpoint) {\n-        return this.owner.getDatabaseAccountFromEndpoint(serviceEndpoint)\n-            .doOnNext(i -> logger.debug(\"account retrieved: {}\", i)).single();\n+        final GlobalEndpointManager that = this;\n+        Callable<Mono<DatabaseAccount>> fetchDatabaseAccount = () -> {\n+            return that.owner.getDatabaseAccountFromEndpoint(serviceEndpoint).doOnNext(databaseAccount -> {\n+                if(databaseAccount != null) {\n+                    this.latestDatabaseAccount = databaseAccount;\n+                }\n+\n+                logger.debug(\"account retrieved: {}\", databaseAccount);\n+            }).single();\n+        };\n+\n+        Mono<DatabaseAccount> obsoleteValueMono = databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, null, fetchDatabaseAccount);\n+        return obsoleteValueMono.flatMap(obsoleteValue -> {\n+            if (firstTimeDatabaseAccountInitialization.compareAndSet(true, false)) {\n+                return Mono.just(obsoleteValue);\n+            }\n+            return databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, obsoleteValue, fetchDatabaseAccount).doOnError(t -> {\n+                //Putting back the old value in cache, this will avoid cache corruption\n+                databaseAccountAsyncCache.set(StringUtils.EMPTY, obsoleteValue);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxOTQ1OA=="}, "originalCommit": {"oid": "39fa9221dd222332b74dce47d08ca5e7e4eface3"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3ODc2Mw==", "bodyText": "Removed cache as per offline discussion", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384778763", "createdAt": "2020-02-26T21:32:04Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java", "diffHunk": "@@ -253,8 +274,27 @@ private void startRefreshLocationTimerAsync() {\n     }\n \n     private Mono<DatabaseAccount> getDatabaseAccountAsync(URI serviceEndpoint) {\n-        return this.owner.getDatabaseAccountFromEndpoint(serviceEndpoint)\n-            .doOnNext(i -> logger.debug(\"account retrieved: {}\", i)).single();\n+        final GlobalEndpointManager that = this;\n+        Callable<Mono<DatabaseAccount>> fetchDatabaseAccount = () -> {\n+            return that.owner.getDatabaseAccountFromEndpoint(serviceEndpoint).doOnNext(databaseAccount -> {\n+                if(databaseAccount != null) {\n+                    this.latestDatabaseAccount = databaseAccount;\n+                }\n+\n+                logger.debug(\"account retrieved: {}\", databaseAccount);\n+            }).single();\n+        };\n+\n+        Mono<DatabaseAccount> obsoleteValueMono = databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, null, fetchDatabaseAccount);\n+        return obsoleteValueMono.flatMap(obsoleteValue -> {\n+            if (firstTimeDatabaseAccountInitialization.compareAndSet(true, false)) {\n+                return Mono.just(obsoleteValue);\n+            }\n+            return databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, obsoleteValue, fetchDatabaseAccount).doOnError(t -> {\n+                //Putting back the old value in cache, this will avoid cache corruption\n+                databaseAccountAsyncCache.set(StringUtils.EMPTY, obsoleteValue);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxOTQ1OA=="}, "originalCommit": {"oid": "39fa9221dd222332b74dce47d08ca5e7e4eface3"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 370, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}