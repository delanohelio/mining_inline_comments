{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MDgzMjAy", "number": 8833, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMToyMDo1OVrODl-_Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzoyMzozM1rODnLFdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTU1OTM0OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzurePath.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMToyMDo1OVrOFzLpXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMToyMDo1OVrOFzLpXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxMjUxMQ==", "bodyText": "Oops!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8833#discussion_r389212511", "createdAt": "2020-03-07T01:20:59Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzurePath.java", "diffHunk": "@@ -531,10 +555,24 @@ BlobClient toBlobClient() throws IOException {\n \n         String blobName = this.withoutRoot();\n         if (blobName.isEmpty()) {\n+<<<<<<< HEAD", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fbc61eb8d100c7f9a08f37016f7b40c93b28320"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzc4NjU3OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjoyNTozM1rOF0-wSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTo1MDowN1rOF2Qafw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5ODQ0Mg==", "bodyText": "I don't think we need to call out what the NIO documents state explicitly, let's just include it as a statement in our docs. Would also like to change the first line to call out what exactly this method does, such as This API deletes the specified path/file, then adding the ancillary info like this isn't atomic, what can't be deleted, etc.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * As noted by the NIO docs, this method is not atomic. It is possible to delete a file in use by another process,\n          \n          \n            \n                 * and doing so will not immediately invalidate any channels open to that file--they will simply start to fail.\n          \n          \n            \n                 * Root directories cannot be deleted even when empty.\n          \n          \n            \n                 * Deletes the specified path.\n          \n          \n            \n                 * <p>\n          \n          \n            \n                 * This method is not atomic, it is possible to delete a file in use by another process. Open channels to the file won't immediately invalidate, they will simply start to fail.\n          \n          \n            \n                 * <p>\n          \n          \n            \n                 * Root directories cannot be deleted even when empty.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8833#discussion_r391098442", "createdAt": "2020-03-11T16:25:33Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "diffHunk": "@@ -363,11 +358,36 @@ BlobContainerClient getContainerClient(BlobClient client) {\n     }\n \n     /**\n+     * As noted by the NIO docs, this method is not atomic. It is possible to delete a file in use by another process,\n+     * and doing so will not immediately invalidate any channels open to that file--they will simply start to fail.\n+     * Root directories cannot be deleted even when empty.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdc841fbcb4fbea874463db8a43b489d8899c93"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEyODgyNw==", "bodyText": "If we really want to call out the NIO doc, we could also just link it", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8833#discussion_r391128827", "createdAt": "2020-03-11T17:10:40Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "diffHunk": "@@ -363,11 +358,36 @@ BlobContainerClient getContainerClient(BlobClient client) {\n     }\n \n     /**\n+     * As noted by the NIO docs, this method is not atomic. It is possible to delete a file in use by another process,\n+     * and doing so will not immediately invalidate any channels open to that file--they will simply start to fail.\n+     * Root directories cannot be deleted even when empty.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5ODQ0Mg=="}, "originalCommit": {"oid": "1bdc841fbcb4fbea874463db8a43b489d8899c93"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQzNjM1MQ==", "bodyText": "Below the javadocs I've written, I always inherit the javadocs from the parent, so all the extra info should be there anyway. I'll update the docs to remove the NIO reference and change the first sentence.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8833#discussion_r392436351", "createdAt": "2020-03-13T19:50:07Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "diffHunk": "@@ -363,11 +358,36 @@ BlobContainerClient getContainerClient(BlobClient client) {\n     }\n \n     /**\n+     * As noted by the NIO docs, this method is not atomic. It is possible to delete a file in use by another process,\n+     * and doing so will not immediately invalidate any channels open to that file--they will simply start to fail.\n+     * Root directories cannot be deleted even when empty.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5ODQ0Mg=="}, "originalCommit": {"oid": "1bdc841fbcb4fbea874463db8a43b489d8899c93"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzgwMDIxOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjoyODozNFrOF0-4fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMToxMzo0NVrOF2W7ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwMDU0MQ==", "bodyText": "Do we want to log and throw an exception if the exception is that the blob doesn't exist? I'm good with either, just a theoretical question on what delete on something that doesn't exist means.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8833#discussion_r391100541", "createdAt": "2020-03-11T16:28:34Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "diffHunk": "@@ -363,11 +358,36 @@ BlobContainerClient getContainerClient(BlobClient client) {\n     }\n \n     /**\n+     * As noted by the NIO docs, this method is not atomic. It is possible to delete a file in use by another process,\n+     * and doing so will not immediately invalidate any channels open to that file--they will simply start to fail.\n+     * Root directories cannot be deleted even when empty.\n+     *\n      * {@inheritDoc}\n      */\n     @Override\n     public void delete(Path path) throws IOException {\n+        // Basic validation. Must be an AzurePath. Cannot be a root.\n+        AzurePath aPath = validatePathInstanceType(path);\n+        validateNotRoot(path, \"Delete\");\n+\n+        // Get client.\n+        BlobClient blobClient = aPath.toBlobClient();\n+\n+        // Check directory status--possibly throw DirectoryNotEmpty or NoSuchFile.\n+        DirectoryStatus dirStatus = checkDirStatus(blobClient);\n+        if (dirStatus.equals(DirectoryStatus.DOES_NOT_EXIST)) {\n+            throw Utility.logError(logger, new NoSuchFileException(path.toString()));\n+        }\n+        if (dirStatus.equals(DirectoryStatus.NOT_EMPTY)) {\n+            throw Utility.logError(logger, new DirectoryNotEmptyException(path.toString()));\n+        }\n \n+        // After all validation has completed, delete the resource.\n+        try {\n+            blobClient.delete();\n+        } catch (BlobStorageException e) {\n+            throw Utility.logError(logger, new IOException(e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdc841fbcb4fbea874463db8a43b489d8899c93"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzMTIwNQ==", "bodyText": "Won't checkDirStatus do the blob doesn't exist validation for us? It gets the container client and lists paths with path = blob name and returns diff codes depending on the number of elements underneath it", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8833#discussion_r391131205", "createdAt": "2020-03-11T17:14:18Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "diffHunk": "@@ -363,11 +358,36 @@ BlobContainerClient getContainerClient(BlobClient client) {\n     }\n \n     /**\n+     * As noted by the NIO docs, this method is not atomic. It is possible to delete a file in use by another process,\n+     * and doing so will not immediately invalidate any channels open to that file--they will simply start to fail.\n+     * Root directories cannot be deleted even when empty.\n+     *\n      * {@inheritDoc}\n      */\n     @Override\n     public void delete(Path path) throws IOException {\n+        // Basic validation. Must be an AzurePath. Cannot be a root.\n+        AzurePath aPath = validatePathInstanceType(path);\n+        validateNotRoot(path, \"Delete\");\n+\n+        // Get client.\n+        BlobClient blobClient = aPath.toBlobClient();\n+\n+        // Check directory status--possibly throw DirectoryNotEmpty or NoSuchFile.\n+        DirectoryStatus dirStatus = checkDirStatus(blobClient);\n+        if (dirStatus.equals(DirectoryStatus.DOES_NOT_EXIST)) {\n+            throw Utility.logError(logger, new NoSuchFileException(path.toString()));\n+        }\n+        if (dirStatus.equals(DirectoryStatus.NOT_EMPTY)) {\n+            throw Utility.logError(logger, new DirectoryNotEmptyException(path.toString()));\n+        }\n \n+        // After all validation has completed, delete the resource.\n+        try {\n+            blobClient.delete();\n+        } catch (BlobStorageException e) {\n+            throw Utility.logError(logger, new IOException(e));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwMDU0MQ=="}, "originalCommit": {"oid": "1bdc841fbcb4fbea874463db8a43b489d8899c93"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzMTQ2OQ==", "bodyText": "I suppose something could also happen between that check and the delete", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8833#discussion_r391131469", "createdAt": "2020-03-11T17:14:45Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "diffHunk": "@@ -363,11 +358,36 @@ BlobContainerClient getContainerClient(BlobClient client) {\n     }\n \n     /**\n+     * As noted by the NIO docs, this method is not atomic. It is possible to delete a file in use by another process,\n+     * and doing so will not immediately invalidate any channels open to that file--they will simply start to fail.\n+     * Root directories cannot be deleted even when empty.\n+     *\n      * {@inheritDoc}\n      */\n     @Override\n     public void delete(Path path) throws IOException {\n+        // Basic validation. Must be an AzurePath. Cannot be a root.\n+        AzurePath aPath = validatePathInstanceType(path);\n+        validateNotRoot(path, \"Delete\");\n+\n+        // Get client.\n+        BlobClient blobClient = aPath.toBlobClient();\n+\n+        // Check directory status--possibly throw DirectoryNotEmpty or NoSuchFile.\n+        DirectoryStatus dirStatus = checkDirStatus(blobClient);\n+        if (dirStatus.equals(DirectoryStatus.DOES_NOT_EXIST)) {\n+            throw Utility.logError(logger, new NoSuchFileException(path.toString()));\n+        }\n+        if (dirStatus.equals(DirectoryStatus.NOT_EMPTY)) {\n+            throw Utility.logError(logger, new DirectoryNotEmptyException(path.toString()));\n+        }\n \n+        // After all validation has completed, delete the resource.\n+        try {\n+            blobClient.delete();\n+        } catch (BlobStorageException e) {\n+            throw Utility.logError(logger, new IOException(e));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwMDU0MQ=="}, "originalCommit": {"oid": "1bdc841fbcb4fbea874463db8a43b489d8899c93"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0MzExNA==", "bodyText": "It's true we do check for no such blob based on the dir status earlier and also true that something else could happen in between. I added a specific case for a BlobNotFound error code and throw a NoSuchFileException in that case as well.\nI would prefer to throw in the case of no such file because the docs say we can, so it's more informative and because there's a deleteIfExists api that customers can call if they don't want the exception behavior.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8833#discussion_r392543114", "createdAt": "2020-03-14T01:13:45Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "diffHunk": "@@ -363,11 +358,36 @@ BlobContainerClient getContainerClient(BlobClient client) {\n     }\n \n     /**\n+     * As noted by the NIO docs, this method is not atomic. It is possible to delete a file in use by another process,\n+     * and doing so will not immediately invalidate any channels open to that file--they will simply start to fail.\n+     * Root directories cannot be deleted even when empty.\n+     *\n      * {@inheritDoc}\n      */\n     @Override\n     public void delete(Path path) throws IOException {\n+        // Basic validation. Must be an AzurePath. Cannot be a root.\n+        AzurePath aPath = validatePathInstanceType(path);\n+        validateNotRoot(path, \"Delete\");\n+\n+        // Get client.\n+        BlobClient blobClient = aPath.toBlobClient();\n+\n+        // Check directory status--possibly throw DirectoryNotEmpty or NoSuchFile.\n+        DirectoryStatus dirStatus = checkDirStatus(blobClient);\n+        if (dirStatus.equals(DirectoryStatus.DOES_NOT_EXIST)) {\n+            throw Utility.logError(logger, new NoSuchFileException(path.toString()));\n+        }\n+        if (dirStatus.equals(DirectoryStatus.NOT_EMPTY)) {\n+            throw Utility.logError(logger, new DirectoryNotEmptyException(path.toString()));\n+        }\n \n+        // After all validation has completed, delete the resource.\n+        try {\n+            blobClient.delete();\n+        } catch (BlobStorageException e) {\n+            throw Utility.logError(logger, new IOException(e));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwMDU0MQ=="}, "originalCommit": {"oid": "1bdc841fbcb4fbea874463db8a43b489d8899c93"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDAyNjc5OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob-nio/src/test/java/com/azure/storage/blob/nio/APISpec.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzoyMzozM1rOF1BIMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzoyMzozM1rOF1BIMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzNzMzMQ==", "bodyText": "You could also make sure the value here is true just to prevent accidental fake news. One day the service could decide they want to set this to false for non-dir like blobs", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8833#discussion_r391137331", "createdAt": "2020-03-11T17:23:33Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/test/java/com/azure/storage/blob/nio/APISpec.groovy", "diffHunk": "@@ -481,10 +488,45 @@ class APISpec extends Specification {\n         }\n     }\n \n-    def rootToContainer(String root) {\n+    def rootNameToContainerName(String root) {\n         return root.substring(0, root.length() - 1)\n     }\n \n+    def rootNameToContainerClient(String root) {\n+        return primaryBlobServiceClient.getBlobContainerClient(rootNameToContainerName(root))\n+    }\n+\n+    def getNonDefaultRootDir(FileSystem fs) {\n+        for (Path dir : fs.getRootDirectories()) {\n+            if (!dir.equals(((AzureFileSystem) fs).getDefaultDirectory())) {\n+                return dir.toString()\n+            }\n+        }\n+        throw new Exception(\"File system only contains the default directory\");\n+    }\n+\n+    def getDefaultDir(FileSystem fs) {\n+        return ((AzureFileSystem) fs).getDefaultDirectory().toString()\n+    }\n+\n+    def getPathWithDepth(int depth) {\n+        def pathStr = \"\"\n+        for (int i = 0; i < depth; i++) {\n+            pathStr += generateBlobName() + AzureFileSystem.PATH_SEPARATOR\n+        }\n+        return pathStr\n+    }\n+\n+    def putDirectoryBlob(BlockBlobClient blobClient) {\n+        blobClient.commitBlockListWithResponse(Collections.emptyList(), null,\n+            [(AzureFileSystemProvider.DIR_METADATA_MARKER): \"true\"], null, null, null, null)\n+    }\n+\n+    def checkBlobIsDir(BlobClient blobClient) {\n+        return blobClient.getPropertiesWithResponse(null, null, null).getValue().getMetadata()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdc841fbcb4fbea874463db8a43b489d8899c93"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 279, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}