{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyODE4MTU4", "number": 12708, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODoxMDoxNFrOEKnMhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODo0ODoxM1rOEKn5-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTYzMzk2OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusManagementAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODoxMDoxNFrOGrwXsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoxNzoxOVrOGr5SAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUzNDQ1MA==", "bodyText": "Is there a online documentation which we can point user to for list of properties and default values ? More methods below have same comment.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12708#discussion_r448534450", "createdAt": "2020-07-01T18:10:14Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusManagementAsyncClient.java", "diffHunk": "@@ -342,48 +792,363 @@\n     }\n \n     /**\n-     * Creates a queue with its context.\n+     * Updates a subscription with the given {@link SubscriptionDescription}. The {@link SubscriptionDescription} must\n+     * be fully populated as all of the properties are replaced. If a property is not set the service default value is\n+     * used.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c225cb8fb73f04479748cdc7bb45020fbcc78e3"}, "originalPosition": 587}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4MDQ1MQ==", "bodyText": "The likelihood that users click on the documentation first before trying this out and having it fail is low.\nThere is a @see annotation to each of these methods if they want more complete information.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12708#discussion_r448680451", "createdAt": "2020-07-02T00:17:19Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusManagementAsyncClient.java", "diffHunk": "@@ -342,48 +792,363 @@\n     }\n \n     /**\n-     * Creates a queue with its context.\n+     * Updates a subscription with the given {@link SubscriptionDescription}. The {@link SubscriptionDescription} must\n+     * be fully populated as all of the properties are replaced. If a property is not set the service default value is\n+     * used.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUzNDQ1MA=="}, "originalCommit": {"oid": "2c225cb8fb73f04479748cdc7bb45020fbcc78e3"}, "originalPosition": 587}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTY5ODc0OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusManagementAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODozMTo0MlrOGrxArA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoyMzozN1rOGr5YrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NDk0MA==", "bodyText": "topicName == null : NullPointerException ? and add java doc for it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12708#discussion_r448544940", "createdAt": "2020-07-01T18:31:42Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusManagementAsyncClient.java", "diffHunk": "@@ -537,14 +1407,92 @@\n \n         try {\n             // If-Match == \"*\" to unconditionally update. This is in line with the existing client library behaviour.\n-            return queuesClient.putWithResponseAsync(queue.getName(), createEntity, \"*\", withTracing)\n+            return entityClient.putWithResponseAsync(queue.getName(), createEntity, \"*\", withTracing)\n                 .onErrorMap(ServiceBusManagementAsyncClient::mapException)\n                 .map(response -> deserializeQueue(response));\n         } catch (RuntimeException ex) {\n             return monoError(logger, ex);\n         }\n     }\n \n+    /**\n+     * Updates a subscription with its context.\n+     *\n+     * @param subscription Information about the subscription to update. You must provide all the property values\n+     *     that are desired on the updated entity. Any values not provided are set to the service default values.\n+     * @param context Context to pass into request.\n+     *\n+     * @return A Mono that completes with the updated {@link SubscriptionDescription}.\n+     */\n+    Mono<Response<SubscriptionDescription>> updateSubscriptionWithResponse(SubscriptionDescription subscription,\n+        Context context) {\n+        if (subscription == null) {\n+            return monoError(logger, new NullPointerException(\"'subscription' cannot be null\"));\n+        }\n+\n+        final String topicName = subscription.getTopicName();\n+        final String subscriptionName = subscription.getSubscriptionName();\n+        if (topicName == null || topicName.isEmpty()) {\n+            return monoError(logger, new IllegalArgumentException(\"'getTopicName' cannot be null or empty.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c225cb8fb73f04479748cdc7bb45020fbcc78e3"}, "originalPosition": 1221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4MjE1Ng==", "bodyText": "There is a null check when creating the actual subscription object. So this won't happen. I'll remove the double checks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12708#discussion_r448682156", "createdAt": "2020-07-02T00:23:37Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusManagementAsyncClient.java", "diffHunk": "@@ -537,14 +1407,92 @@\n \n         try {\n             // If-Match == \"*\" to unconditionally update. This is in line with the existing client library behaviour.\n-            return queuesClient.putWithResponseAsync(queue.getName(), createEntity, \"*\", withTracing)\n+            return entityClient.putWithResponseAsync(queue.getName(), createEntity, \"*\", withTracing)\n                 .onErrorMap(ServiceBusManagementAsyncClient::mapException)\n                 .map(response -> deserializeQueue(response));\n         } catch (RuntimeException ex) {\n             return monoError(logger, ex);\n         }\n     }\n \n+    /**\n+     * Updates a subscription with its context.\n+     *\n+     * @param subscription Information about the subscription to update. You must provide all the property values\n+     *     that are desired on the updated entity. Any values not provided are set to the service default values.\n+     * @param context Context to pass into request.\n+     *\n+     * @return A Mono that completes with the updated {@link SubscriptionDescription}.\n+     */\n+    Mono<Response<SubscriptionDescription>> updateSubscriptionWithResponse(SubscriptionDescription subscription,\n+        Context context) {\n+        if (subscription == null) {\n+            return monoError(logger, new NullPointerException(\"'subscription' cannot be null\"));\n+        }\n+\n+        final String topicName = subscription.getTopicName();\n+        final String subscriptionName = subscription.getSubscriptionName();\n+        if (topicName == null || topicName.isEmpty()) {\n+            return monoError(logger, new IllegalArgumentException(\"'getTopicName' cannot be null or empty.\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NDk0MA=="}, "originalCommit": {"oid": "2c225cb8fb73f04479748cdc7bb45020fbcc78e3"}, "originalPosition": 1221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTcwMTM1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusManagementAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODozMjozNVrOGrxCeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODozMjozNVrOGrxCeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NTQwMg==", "bodyText": "subscriptionName == null  : NullPointerException ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12708#discussion_r448545402", "createdAt": "2020-07-01T18:32:35Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusManagementAsyncClient.java", "diffHunk": "@@ -537,14 +1407,92 @@\n \n         try {\n             // If-Match == \"*\" to unconditionally update. This is in line with the existing client library behaviour.\n-            return queuesClient.putWithResponseAsync(queue.getName(), createEntity, \"*\", withTracing)\n+            return entityClient.putWithResponseAsync(queue.getName(), createEntity, \"*\", withTracing)\n                 .onErrorMap(ServiceBusManagementAsyncClient::mapException)\n                 .map(response -> deserializeQueue(response));\n         } catch (RuntimeException ex) {\n             return monoError(logger, ex);\n         }\n     }\n \n+    /**\n+     * Updates a subscription with its context.\n+     *\n+     * @param subscription Information about the subscription to update. You must provide all the property values\n+     *     that are desired on the updated entity. Any values not provided are set to the service default values.\n+     * @param context Context to pass into request.\n+     *\n+     * @return A Mono that completes with the updated {@link SubscriptionDescription}.\n+     */\n+    Mono<Response<SubscriptionDescription>> updateSubscriptionWithResponse(SubscriptionDescription subscription,\n+        Context context) {\n+        if (subscription == null) {\n+            return monoError(logger, new NullPointerException(\"'subscription' cannot be null\"));\n+        }\n+\n+        final String topicName = subscription.getTopicName();\n+        final String subscriptionName = subscription.getSubscriptionName();\n+        if (topicName == null || topicName.isEmpty()) {\n+            return monoError(logger, new IllegalArgumentException(\"'getTopicName' cannot be null or empty.\"));\n+        } else if (subscriptionName == null || subscriptionName.isEmpty()) {\n+            return monoError(logger, new IllegalArgumentException(\"'getSubscriptionName' cannot be null or empty.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c225cb8fb73f04479748cdc7bb45020fbcc78e3"}, "originalPosition": 1223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTcwNDc1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusManagementAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODozMzozNFrOGrxEiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODozMzozNFrOGrxEiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NTkyOQ==", "bodyText": "topic.getName() == null  : NullPointerException ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12708#discussion_r448545929", "createdAt": "2020-07-01T18:33:34Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusManagementAsyncClient.java", "diffHunk": "@@ -537,14 +1407,92 @@\n \n         try {\n             // If-Match == \"*\" to unconditionally update. This is in line with the existing client library behaviour.\n-            return queuesClient.putWithResponseAsync(queue.getName(), createEntity, \"*\", withTracing)\n+            return entityClient.putWithResponseAsync(queue.getName(), createEntity, \"*\", withTracing)\n                 .onErrorMap(ServiceBusManagementAsyncClient::mapException)\n                 .map(response -> deserializeQueue(response));\n         } catch (RuntimeException ex) {\n             return monoError(logger, ex);\n         }\n     }\n \n+    /**\n+     * Updates a subscription with its context.\n+     *\n+     * @param subscription Information about the subscription to update. You must provide all the property values\n+     *     that are desired on the updated entity. Any values not provided are set to the service default values.\n+     * @param context Context to pass into request.\n+     *\n+     * @return A Mono that completes with the updated {@link SubscriptionDescription}.\n+     */\n+    Mono<Response<SubscriptionDescription>> updateSubscriptionWithResponse(SubscriptionDescription subscription,\n+        Context context) {\n+        if (subscription == null) {\n+            return monoError(logger, new NullPointerException(\"'subscription' cannot be null\"));\n+        }\n+\n+        final String topicName = subscription.getTopicName();\n+        final String subscriptionName = subscription.getSubscriptionName();\n+        if (topicName == null || topicName.isEmpty()) {\n+            return monoError(logger, new IllegalArgumentException(\"'getTopicName' cannot be null or empty.\"));\n+        } else if (subscriptionName == null || subscriptionName.isEmpty()) {\n+            return monoError(logger, new IllegalArgumentException(\"'getSubscriptionName' cannot be null or empty.\"));\n+        } else if (context == null) {\n+            return monoError(logger, new NullPointerException(\"'context' cannot be null.\"));\n+        }\n+\n+        final CreateSubscriptionBodyContent content = new CreateSubscriptionBodyContent()\n+            .setType(CONTENT_TYPE)\n+            .setSubscriptionDescription(subscription);\n+        final CreateSubscriptionBody createEntity = new CreateSubscriptionBody()\n+            .setContent(content);\n+        final Context withTracing = context.addData(AZ_TRACING_NAMESPACE_KEY, SERVICE_BUS_TRACING_NAMESPACE_VALUE);\n+\n+        try {\n+            // If-Match == \"*\" to unconditionally update. This is in line with the existing client library behaviour.\n+            return managementClient.getSubscriptions().putWithResponseAsync(topicName, subscriptionName, createEntity,\n+                \"*\", withTracing)\n+                .onErrorMap(ServiceBusManagementAsyncClient::mapException)\n+                .map(response -> deserializeSubscription(topicName, response));\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Updates a topic with its context.\n+     *\n+     * @param topic Information about the topic to update. You must provide all the property values that are desired\n+     *     on the updated entity. Any values not provided are set to the service default values.\n+     * @param context Context to pass into request.\n+     *\n+     * @return A Mono that completes with the updated {@link TopicDescription}.\n+     */\n+    Mono<Response<TopicDescription>> updateTopicWithResponse(TopicDescription topic, Context context) {\n+        if (topic == null) {\n+            return monoError(logger, new NullPointerException(\"'topic' cannot be null\"));\n+        } else if (topic.getName() == null || topic.getName().isEmpty()) {\n+            return monoError(logger, new IllegalArgumentException(\"'topic.getName' cannot be null or empty.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c225cb8fb73f04479748cdc7bb45020fbcc78e3"}, "originalPosition": 1259}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTczNzg0OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/models/SubscriptionDescription.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODo0NDoyMFrOGrxZbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDo0NDo1NlrOGr5tqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1MTI3OA==", "bodyText": "Should we put default values as well in documentation , so user know what are the values?.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12708#discussion_r448551278", "createdAt": "2020-07-01T18:44:20Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/models/SubscriptionDescription.java", "diffHunk": "@@ -175,6 +181,117 @@\n             namespace = \"http://schemas.microsoft.com/netservices/2010/10/servicebus/connect\")\n     private EntityAvailabilityStatus entityAvailabilityStatus;\n \n+    static {\n+        // This is used by classes in different packages to get access to private and package-private methods.\n+        EntityHelper.setSubscriptionAccessor(new EntityHelper.SubscriptionAccessor() {\n+            @Override\n+            public void setTopicName(SubscriptionDescription subscriptionDescription, String topicName) {\n+                subscriptionDescription.setTopicName(topicName);\n+            }\n+\n+            @Override\n+            public void setSubscriptionName(SubscriptionDescription subscriptionDescription, String subscriptionName) {\n+                subscriptionDescription.setSubscriptionName(subscriptionName);\n+            }\n+        });\n+    }\n+\n+    private String topicName;\n+    private String subscriptionName;\n+\n+    /**\n+     * Json deserialization constructor.\n+     */\n+    @JsonCreator\n+    SubscriptionDescription() {\n+    }\n+\n+    /**\n+     * Creates an instance with the name of the subscription and its associated topic. Default values for the\n+     * subscription are populated. The properties populated with defaults are:\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c225cb8fb73f04479748cdc7bb45020fbcc78e3"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4NzUzMQ==", "bodyText": "I'll add those.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12708#discussion_r448687531", "createdAt": "2020-07-02T00:44:56Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/models/SubscriptionDescription.java", "diffHunk": "@@ -175,6 +181,117 @@\n             namespace = \"http://schemas.microsoft.com/netservices/2010/10/servicebus/connect\")\n     private EntityAvailabilityStatus entityAvailabilityStatus;\n \n+    static {\n+        // This is used by classes in different packages to get access to private and package-private methods.\n+        EntityHelper.setSubscriptionAccessor(new EntityHelper.SubscriptionAccessor() {\n+            @Override\n+            public void setTopicName(SubscriptionDescription subscriptionDescription, String topicName) {\n+                subscriptionDescription.setTopicName(topicName);\n+            }\n+\n+            @Override\n+            public void setSubscriptionName(SubscriptionDescription subscriptionDescription, String subscriptionName) {\n+                subscriptionDescription.setSubscriptionName(subscriptionName);\n+            }\n+        });\n+    }\n+\n+    private String topicName;\n+    private String subscriptionName;\n+\n+    /**\n+     * Json deserialization constructor.\n+     */\n+    @JsonCreator\n+    SubscriptionDescription() {\n+    }\n+\n+    /**\n+     * Creates an instance with the name of the subscription and its associated topic. Default values for the\n+     * subscription are populated. The properties populated with defaults are:\n+     *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1MTI3OA=="}, "originalCommit": {"oid": "2c225cb8fb73f04479748cdc7bb45020fbcc78e3"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTc0MjQ1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/models/TopicDescription.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODo0NTo0OVrOGrxcYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODo0NTo0OVrOGrxcYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1MjAzMg==", "bodyText": "same here, should we show to user what are default values ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12708#discussion_r448552032", "createdAt": "2020-07-01T18:45:49Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/models/TopicDescription.java", "diffHunk": "@@ -219,6 +223,81 @@ private AuthorizationRulesWrapper(\n             namespace = \"http://schemas.microsoft.com/netservices/2010/10/servicebus/connect\")\n     private String userMetadata;\n \n+    private String topicName;\n+\n+    static {\n+        // This is used by classes in different packages to get access to private and package-private methods.\n+        EntityHelper.setTopicAccessor((topicDescription, name) -> topicDescription.setName(name));\n+    }\n+\n+    /**\n+     * Json deserialization constructor.\n+     */\n+    @JsonCreator\n+    TopicDescription() {\n+    }\n+\n+    /**\n+     * Creates an instance with the name of the topic. Default values for the topic are populated. The properties\n+     * populated with defaults are:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c225cb8fb73f04479748cdc7bb45020fbcc78e3"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTc0NTY1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/models/TopicDescription.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODo0Njo0MlrOGrxeQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDo0NTozM1rOGr5uRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1MjUxNA==", "bodyText": "should this API be called enableSubscriptionPartitioning", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12708#discussion_r448552514", "createdAt": "2020-07-01T18:46:42Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/models/TopicDescription.java", "diffHunk": "@@ -635,7 +714,7 @@ public Boolean isEnableSubscriptionPartitioning() {\n      * @param enableSubscriptionPartitioning the enableSubscriptionPartitioning value to set.\n      * @return the TopicDescription object itself.\n      */\n-    public TopicDescription setEnableSubscriptionPartitioning(Boolean enableSubscriptionPartitioning) {\n+    TopicDescription setEnableSubscriptionPartitioning(Boolean enableSubscriptionPartitioning) {\n         this.enableSubscriptionPartitioning = enableSubscriptionPartitioning;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c225cb8fb73f04479748cdc7bb45020fbcc78e3"}, "originalPosition": 331}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4NzY4NQ==", "bodyText": "This is package-private, so it doesn't matter.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12708#discussion_r448687685", "createdAt": "2020-07-02T00:45:33Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/models/TopicDescription.java", "diffHunk": "@@ -635,7 +714,7 @@ public Boolean isEnableSubscriptionPartitioning() {\n      * @param enableSubscriptionPartitioning the enableSubscriptionPartitioning value to set.\n      * @return the TopicDescription object itself.\n      */\n-    public TopicDescription setEnableSubscriptionPartitioning(Boolean enableSubscriptionPartitioning) {\n+    TopicDescription setEnableSubscriptionPartitioning(Boolean enableSubscriptionPartitioning) {\n         this.enableSubscriptionPartitioning = enableSubscriptionPartitioning;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1MjUxNA=="}, "originalCommit": {"oid": "2c225cb8fb73f04479748cdc7bb45020fbcc78e3"}, "originalPosition": 331}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTc1MDMyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/models/TopicDescription.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODo0ODoxM1rOGrxhJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDo0NToyNlrOGr5uIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1MzI1Mg==", "bodyText": "setEnableExpress -> enableExpress()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12708#discussion_r448553252", "createdAt": "2020-07-01T18:48:13Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/models/TopicDescription.java", "diffHunk": "@@ -657,7 +736,7 @@ public Boolean isEnableExpress() {\n      * @param enableExpress the enableExpress value to set.\n      * @return the TopicDescription object itself.\n      */\n-    public TopicDescription setEnableExpress(Boolean enableExpress) {\n+    TopicDescription setEnableExpress(Boolean enableExpress) {\n         this.enableExpress = enableExpress;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c225cb8fb73f04479748cdc7bb45020fbcc78e3"}, "originalPosition": 349}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4NzY1MQ==", "bodyText": "This is package-private, so it doesn't matter.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12708#discussion_r448687651", "createdAt": "2020-07-02T00:45:26Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/models/TopicDescription.java", "diffHunk": "@@ -657,7 +736,7 @@ public Boolean isEnableExpress() {\n      * @param enableExpress the enableExpress value to set.\n      * @return the TopicDescription object itself.\n      */\n-    public TopicDescription setEnableExpress(Boolean enableExpress) {\n+    TopicDescription setEnableExpress(Boolean enableExpress) {\n         this.enableExpress = enableExpress;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1MzI1Mg=="}, "originalCommit": {"oid": "2c225cb8fb73f04479748cdc7bb45020fbcc78e3"}, "originalPosition": 349}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3666, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}