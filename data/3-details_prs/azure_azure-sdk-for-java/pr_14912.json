{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMjIyNzAw", "number": 14912, "title": "[Event Hubs] Support SAS token in connnection string", "bodyText": "This PR adds support to include SharedAccessSignature token in the connection string.\nMore details and discussion can be found here: Azure/azure-sdk#1701", "createdAt": "2020-09-08T18:29:59Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14912", "merged": true, "mergeCommit": {"oid": "1ea7f177f604afb6a9982eb290d60a4db3ae4d94"}, "closed": true, "closedAt": "2020-09-09T00:43:50Z", "author": {"login": "srnagar"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdGKaO0gH2gAyNDgyMjIyNzAwOjY4N2ZmNDM1NTU5Njc2ZDUwOTI5YmZmZDk1MGMxMmUxZmRmY2QzMjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHAixSgH2gAyNDgyMjIyNzAwOjBkZmJjMDlkZGQwOGRjYzlhODQwN2EzZjU3NjQ3ZDMxMDBlMzY3YWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "687ff435559676d50929bffd950c12e1fdfcd324", "author": {"user": {"login": "srnagar", "name": "Srikanta"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/687ff435559676d50929bffd950c12e1fdfcd324", "committedDate": "2020-09-06T08:48:29Z", "message": "Move load balancing options changes to main branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e609163d41ddea3a8585071641439fdd735eb9fa", "author": {"user": {"login": "srnagar", "name": "Srikanta"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e609163d41ddea3a8585071641439fdd735eb9fa", "committedDate": "2020-09-08T17:59:00Z", "message": "Support SAS token in connnection string"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a75dcd9783a53e31c899fd32ec5c0bef20bbe86d", "author": {"user": {"login": "srnagar", "name": "Srikanta"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a75dcd9783a53e31c899fd32ec5c0bef20bbe86d", "committedDate": "2020-09-08T17:59:35Z", "message": "Merge remote-tracking branch 'upstream/master' into eh-sas"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NDg1MTEy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14912#pullrequestreview-484485112", "createdAt": "2020-09-08T20:53:20Z", "commit": {"oid": "a75dcd9783a53e31c899fd32ec5c0bef20bbe86d"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDo1MzoyMFrOHOto6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMToxMjo0OFrOHOuM0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE4OTg2Ng==", "bodyText": "The above CS_WITH_ACCESS_KEY has EntityPath while this one doesn't.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14912#discussion_r485189866", "createdAt": "2020-09-08T20:53:20Z", "author": {"login": "YijunXieMS"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java", "diffHunk": "@@ -25,25 +25,31 @@\n     private static final String ENDPOINT = \"Endpoint\";\n     private static final String SHARED_ACCESS_KEY_NAME = \"SharedAccessKeyName\";\n     private static final String SHARED_ACCESS_KEY = \"SharedAccessKey\";\n+    private static final String SHARED_ACCESS_SIGNATURE = \"SharedAccessSignature\";\n+    private static final String SAS_VALUE_PREFIX = \"sharedaccesssignature \";\n     private static final String ENTITY_PATH = \"EntityPath\";\n+    private static final String CS_WITH_ACCESS_KEY = \"Endpoint={endpoint};SharedAccessKeyName={sharedAccessKeyName};\"\n+        + \"SharedAccessKey={sharedAccessKey};EntityPath={entityPath}\";\n+    private static final String CS_WITH_SAS = \"Endpoint={endpoint};SharedAccessSignature=\"\n+        + \"SharedAccessSignature {sharedAccessSignature}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a75dcd9783a53e31c899fd32ec5c0bef20bbe86d"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE5MjYyOQ==", "bodyText": "Nit: validSharedKey sounds like the shared key value is valid to the service. Suggest something like \"includesSharedKeyValue\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14912#discussion_r485192629", "createdAt": "2020-09-08T20:58:53Z", "author": {"login": "YijunXieMS"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java", "diffHunk": "@@ -83,25 +90,34 @@ public ConnectionStringProperties(String connectionString) {\n                 sharedAccessKeyValue = value;\n             } else if (key.equalsIgnoreCase(ENTITY_PATH)) {\n                 entityPath = value;\n+            } else if (key.equalsIgnoreCase(SHARED_ACCESS_SIGNATURE)\n+                && value.toLowerCase(Locale.getDefault()).startsWith(SAS_VALUE_PREFIX)) {\n+                sharedAccessSignature = value;\n             } else {\n                 throw new IllegalArgumentException(\n                     String.format(Locale.US, \"Illegal connection string parameter name: %s\", key));\n             }\n         }\n \n-        if (endpoint == null || sharedAccessKeyName == null || sharedAccessKeyValue == null) {\n+        // connection string should have an endpoint and either shared access signature or shared access key and value\n+        boolean includesSharedKey = sharedAccessKeyName != null || sharedAccessKeyValue != null;\n+        boolean validSharedKey = sharedAccessKeyName != null && sharedAccessKeyValue != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a75dcd9783a53e31c899fd32ec5c0bef20bbe86d"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE5OTA1OQ==", "bodyText": "Using constructor overloads work well. How about using a different sub class of TokenCredential, like EventHubSharedAccessSignatureCredential, or the shorter version EventHubSASCredential? It's cleaner to user two separate classes. Maybe someday the shared access signature will support new behaviors like token renew.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14912#discussion_r485199059", "createdAt": "2020-09-08T21:12:48Z", "author": {"login": "YijunXieMS"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubClientBuilder.java", "diffHunk": "@@ -178,13 +178,22 @@ public EventHubClientBuilder() {\n      *     connection string.\n      */\n     public EventHubClientBuilder connectionString(String connectionString) {\n-        final ConnectionStringProperties properties = new ConnectionStringProperties(connectionString);\n-        final TokenCredential tokenCredential = new EventHubSharedKeyCredential(properties.getSharedAccessKeyName(),\n-            properties.getSharedAccessKey(), ClientConstants.TOKEN_VALIDITY);\n-\n+        ConnectionStringProperties properties = new ConnectionStringProperties(connectionString);\n+        TokenCredential tokenCredential = getTokenCredential(properties);\n         return credential(properties.getEndpoint().getHost(), properties.getEntityPath(), tokenCredential);\n     }\n \n+    private TokenCredential getTokenCredential(ConnectionStringProperties properties) {\n+        TokenCredential tokenCredential;\n+        if (properties.getSharedAccessSignature() == null) {\n+            tokenCredential = new EventHubSharedKeyCredential(properties.getSharedAccessKeyName(),\n+                properties.getSharedAccessKey(), ClientConstants.TOKEN_VALIDITY);\n+        } else {\n+            tokenCredential = new EventHubSharedKeyCredential(properties.getSharedAccessSignature());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a75dcd9783a53e31c899fd32ec5c0bef20bbe86d"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2adb95aa0b7f8ceaaede2a058e19ae2458848e77", "author": {"user": {"login": "srnagar", "name": "Srikanta"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2adb95aa0b7f8ceaaede2a058e19ae2458848e77", "committedDate": "2020-09-08T22:17:45Z", "message": "Address PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NTM3NDM1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14912#pullrequestreview-484537435", "createdAt": "2020-09-08T22:38:44Z", "commit": {"oid": "2adb95aa0b7f8ceaaede2a058e19ae2458848e77"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMjozODo0NFrOHOwS8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMjo0MzowMFrOHOwYtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzMzM5Mg==", "bodyText": "nit: change CS -> CONNECTION_STRING.  I avoid abbreviations unless I it's widely used.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14912#discussion_r485233392", "createdAt": "2020-09-08T22:38:44Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java", "diffHunk": "@@ -25,25 +25,31 @@\n     private static final String ENDPOINT = \"Endpoint\";\n     private static final String SHARED_ACCESS_KEY_NAME = \"SharedAccessKeyName\";\n     private static final String SHARED_ACCESS_KEY = \"SharedAccessKey\";\n+    private static final String SHARED_ACCESS_SIGNATURE = \"SharedAccessSignature\";\n+    private static final String SAS_VALUE_PREFIX = \"sharedaccesssignature \";\n     private static final String ENTITY_PATH = \"EntityPath\";\n+    private static final String CS_WITH_ACCESS_KEY = \"Endpoint={endpoint};SharedAccessKeyName={sharedAccessKeyName};\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2adb95aa0b7f8ceaaede2a058e19ae2458848e77"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzMzQ3Mw==", "bodyText": "IIRC, our document format is not to align parameters or indent until the parameter.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14912#discussion_r485233473", "createdAt": "2020-09-08T22:38:58Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java", "diffHunk": "@@ -25,25 +25,31 @@\n     private static final String ENDPOINT = \"Endpoint\";\n     private static final String SHARED_ACCESS_KEY_NAME = \"SharedAccessKeyName\";\n     private static final String SHARED_ACCESS_KEY = \"SharedAccessKey\";\n+    private static final String SHARED_ACCESS_SIGNATURE = \"SharedAccessSignature\";\n+    private static final String SAS_VALUE_PREFIX = \"sharedaccesssignature \";\n     private static final String ENTITY_PATH = \"EntityPath\";\n+    private static final String CS_WITH_ACCESS_KEY = \"Endpoint={endpoint};SharedAccessKeyName={sharedAccessKeyName};\"\n+        + \"SharedAccessKey={sharedAccessKey};EntityPath={entityPath}\";\n+    private static final String CS_WITH_SAS = \"Endpoint={endpoint};SharedAccessSignature=\"\n+        + \"SharedAccessSignature {sharedAccessSignature};EntityPath={entityPath}\";\n     private static final String ERROR_MESSAGE_FORMAT = \"Could not parse 'connectionString'. Expected format: \"\n-        + \"'Endpoint={endpoint};SharedAccessKeyName={sharedAccessKeyName};\"\n-        + \"SharedAccessKey={sharedAccessKey};EntityPath={entityPath}'. Actual: %s\";\n+        + CS_WITH_ACCESS_KEY + \" or \" + CS_WITH_SAS + \". Actual: %s\";\n     private static final String ERROR_MESSAGE_ENDPOINT_FORMAT = \"'Endpoint' must be provided in 'connectionString'.\"\n         + \" Actual: %s\";\n \n     private final URI endpoint;\n     private final String entityPath;\n     private final String sharedAccessKeyName;\n     private final String sharedAccessKey;\n+    private final String sharedAccessSignature;\n \n     /**\n      * Creates a new instance by parsing the {@code connectionString} into its components.\n-     *\n      * @param connectionString The connection string to the Event Hub instance.\n-     * @throws NullPointerException if {@code connectionString} is null.\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2adb95aa0b7f8ceaaede2a058e19ae2458848e77"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzNDA4NA==", "bodyText": "This value should be culture agnostic, I would use the culture invariant locale.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14912#discussion_r485234084", "createdAt": "2020-09-08T22:40:38Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java", "diffHunk": "@@ -83,25 +90,34 @@ public ConnectionStringProperties(String connectionString) {\n                 sharedAccessKeyValue = value;\n             } else if (key.equalsIgnoreCase(ENTITY_PATH)) {\n                 entityPath = value;\n+            } else if (key.equalsIgnoreCase(SHARED_ACCESS_SIGNATURE)\n+                && value.toLowerCase(Locale.getDefault()).startsWith(SAS_VALUE_PREFIX)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2adb95aa0b7f8ceaaede2a058e19ae2458848e77"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzNDcwMQ==", "bodyText": "I believe there's a method, Instant.ofEpochSecond you can leverage.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14912#discussion_r485234701", "createdAt": "2020-09-08T22:42:32Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/EventHubSharedKeyCredential.java", "diffHunk": "@@ -153,4 +180,22 @@ private AccessToken generateSharedAccessSignature(final String resource) throws\n \n         return new AccessToken(token, expiresOn);\n     }\n+\n+    private OffsetDateTime getExpirationTime(String sharedAccessSignature) {\n+        String[] parts = sharedAccessSignature.split(\"&\");\n+        return Arrays.stream(parts)\n+            .map(part -> part.split(\"=\"))\n+            .filter(pair -> pair.length == 2 && pair[0].equalsIgnoreCase(\"se\"))\n+            .findFirst()\n+            .map(pair -> pair[1])\n+            .map(expirationTimeStr -> {\n+                try {\n+                    long epochSeconds = Long.parseLong(expirationTimeStr);\n+                    return new Date(epochSeconds * 1000).toInstant().atOffset(ZoneOffset.UTC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2adb95aa0b7f8ceaaede2a058e19ae2458848e77"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzNDg3MA==", "bodyText": "Should we log this? It would be nice to understand why we returned offsetdatemax in case there was some incorrect formatting in the se.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14912#discussion_r485234870", "createdAt": "2020-09-08T22:43:00Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/EventHubSharedKeyCredential.java", "diffHunk": "@@ -153,4 +180,22 @@ private AccessToken generateSharedAccessSignature(final String resource) throws\n \n         return new AccessToken(token, expiresOn);\n     }\n+\n+    private OffsetDateTime getExpirationTime(String sharedAccessSignature) {\n+        String[] parts = sharedAccessSignature.split(\"&\");\n+        return Arrays.stream(parts)\n+            .map(part -> part.split(\"=\"))\n+            .filter(pair -> pair.length == 2 && pair[0].equalsIgnoreCase(\"se\"))\n+            .findFirst()\n+            .map(pair -> pair[1])\n+            .map(expirationTimeStr -> {\n+                try {\n+                    long epochSeconds = Long.parseLong(expirationTimeStr);\n+                    return new Date(epochSeconds * 1000).toInstant().atOffset(ZoneOffset.UTC);\n+                } catch (NumberFormatException exception) {\n+                    return OffsetDateTime.MAX;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2adb95aa0b7f8ceaaede2a058e19ae2458848e77"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0dd1c9ac6eb435a90ae560a2441f8ae81c6df51", "author": {"user": {"login": "srnagar", "name": "Srikanta"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f0dd1c9ac6eb435a90ae560a2441f8ae81c6df51", "committedDate": "2020-09-08T23:05:00Z", "message": "review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NTU4OTYz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14912#pullrequestreview-484558963", "createdAt": "2020-09-08T23:25:34Z", "commit": {"oid": "f0dd1c9ac6eb435a90ae560a2441f8ae81c6df51"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "052d155f9603233d3fbc9b966add53729665355c", "author": {"user": {"login": "srnagar", "name": "Srikanta"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/052d155f9603233d3fbc9b966add53729665355c", "committedDate": "2020-09-08T23:26:43Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dfbc09ddd08dcc9a8407a3f57647d3100e367ac", "author": {"user": {"login": "srnagar", "name": "Srikanta"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0dfbc09ddd08dcc9a8407a3f57647d3100e367ac", "committedDate": "2020-09-08T23:52:41Z", "message": "Fix checkstyle"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3676, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}