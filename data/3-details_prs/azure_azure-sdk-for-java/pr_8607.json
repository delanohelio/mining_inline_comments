{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNDU1MDgz", "number": 8607, "title": "Adding meta data and serialization diagnostics on point operations", "bodyText": "This pr will collect the data points for meta deta and serialization cost.\nBelow is the sample of json for metadata and serialization , they are not from one single request , and captured from different requests just for an example.\n\"metaDataDiagnosticsContext\": {\n\"metaDataDiagnosticList\": [\n{\n\"metaDataName\": \"ContainerLookUp\",\n\"startTimeUTC\": \"28 Feb 2020 15:26:45.188\",\n\"endTimeUTC\": \"28 Feb 2020 15:26:45.390\",\n\"durationinMS\": 201\n},\n{\n\"metaDataName\": \"PartitionKeyRangeLookUp\",\n\"startTimeUTC\": \"28 Feb 2020 15:26:45.470\",\n\"endTimeUTC\": \"28 Feb 2020 15:26:45.647\",\n\"durationinMS\": 177\n},\n{\n\"metaDataName\": \"ServerAddressLookup\",\n\"startTimeUTC\": \"28 Feb 2020 15:26:45.737\",\n\"endTimeUTC\": \"28 Feb 2020 15:26:45.773\",\n\"durationinMS\": 35\n}\n]\n},\n\"serializationDiagnosticsContext\": {\n\"serializationDiagnosticsList\": [\n{\n\"serializationType\": \"DatabaseSerialization\",\n\"startTimeUTC\": \"28 Feb 2020 15:28:13.527\",\n\"endTimeUTC\": \"28 Feb 2020 15:28:13.527\",\n\"durationInMicroSec\": 0\n},\n{\n\"serializationType\": \"ContainerSerialization\",\n\"startTimeUTC\": \"28 Feb 2020 15:28:44.330\",\n\"endTimeUTC\": \"28 Feb 2020 15:28:44.330\",\n\"durationInMicroSec\": 0\n},\n{\n\"serializationType\": \"ItemSerialization\",\n\"startTimeUTC\": \"28 Feb 2020 15:30:06.213\",\n\"endTimeUTC\": \"28 Feb 2020 15:30:06.233\",\n\"durationInMicroSec\": 20030\n},\n{\n\"serializationType\": \"PartitionKeyFetchSerialization\",\n\"startTimeUTC\": \"28 Feb 2020 15:29:20.637\",\n\"endTimeUTC\": \"28 Feb 2020 15:29:20.643\",\n\"durationInMicroSec\": 6004\n},\n]\n}", "createdAt": "2020-02-28T15:43:04Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607", "merged": true, "mergeCommit": {"oid": "6dde0c086ebc2724ad2fb09ed9bd50603a0bf2a3"}, "closed": true, "closedAt": "2020-04-13T21:35:33Z", "author": {"login": "simplynaveen20"}, "timelineItems": {"totalCount": 47, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHkahNAH2gAyMzgxNDU1MDgzOjFkODg1NmExZGQxMGI5YWZhNjBkM2RhOWJhYmE3MDk2YzgyNTZlZDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXVwJQAFqTM5MjQ1MjAxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1d8856a1dd10b9afa60d3da9baba7096c8256ed6", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1d8856a1dd10b9afa60d3da9baba7096c8256ed6", "committedDate": "2020-02-24T21:29:06Z", "message": "making databaseAccount update dynamic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "390f8b2ff26e1e49884b860a3d35fdd216442eed", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/390f8b2ff26e1e49884b860a3d35fdd216442eed", "committedDate": "2020-02-24T21:39:51Z", "message": "Revert \"making databaseAccount update dynamic\"\n\nThis reverts commit 1d8856a1dd10b9afa60d3da9baba7096c8256ed6."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ba47e75759daf1f40f1a44cf7fe647f8d328193", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6ba47e75759daf1f40f1a44cf7fe647f8d328193", "committedDate": "2020-02-24T22:00:08Z", "message": "making databaseAccount update dynamic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99807ce7f5587b1f21ead3cd4f205c926b462aad", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/99807ce7f5587b1f21ead3cd4f205c926b462aad", "committedDate": "2020-02-24T22:00:08Z", "message": "Revert \"making databaseAccount update dynamic\"\n\nThis reverts commit 1d8856a1dd10b9afa60d3da9baba7096c8256ed6."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "639da10dd9c90a950733ab3a041886d9eab7ef0e", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/639da10dd9c90a950733ab3a041886d9eab7ef0e", "committedDate": "2020-02-24T22:10:22Z", "message": "Merge branch 'master' of https://github.com/simplynaveen20/azure-sdk-for-java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6529329540ef0175eea60b0154731fc46234146", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a6529329540ef0175eea60b0154731fc46234146", "committedDate": "2020-02-24T22:30:38Z", "message": "Adding meta data and serialization diagnoics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49fd90b7422c397c5d0422fa26fd108d578831a3", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/49fd90b7422c397c5d0422fa26fd108d578831a3", "committedDate": "2020-02-24T22:43:43Z", "message": "adding UTC  to time variables and adding meta data serializer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99fbe1f32742703249ac01b371de00172ef105f4", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/99fbe1f32742703249ac01b371de00172ef105f4", "committedDate": "2020-02-27T19:53:58Z", "message": "adding serialization infor to diagnostics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3391a3dfaa2100f59f4e21e3cf099927033681ee", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3391a3dfaa2100f59f4e21e3cf099927033681ee", "committedDate": "2020-02-27T19:54:39Z", "message": "Merge remote-tracking branch 'upstream/master' into user/nakumars/newMetaDataAndSerializationDiagnostics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89d6dca1697a404d152a167dbee50f35ad855729", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/89d6dca1697a404d152a167dbee50f35ad855729", "committedDate": "2020-02-28T00:01:33Z", "message": "adding test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NDkzMzk3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#pullrequestreview-366493397", "createdAt": "2020-02-28T15:45:20Z", "commit": {"oid": "89d6dca1697a404d152a167dbee50f35ad855729"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTo0NToyMVrOFv5ewA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTo0ODo0MFrOFv5mjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2OTE1Mg==", "bodyText": "Please share if there are more relevant serializations in the code which we want to capture", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r385769152", "createdAt": "2020-02-28T15:45:21Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java", "diffHunk": "@@ -0,0 +1,90 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.ZonedDateTimeSerializer;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+\n+public class SerializationDiagnosticsContext {\n+    public volatile List<SerializationDiagnosticsContext.SerializationDiagnostics> serializationDiagnosticsList;\n+\n+    public void addMetaDataDiagnostic(SerializationDiagnosticsContext.SerializationDiagnostics serializationDiagnostics) {\n+        if (serializationDiagnosticsList == null) {\n+            serializationDiagnosticsList = new ArrayList<>();\n+        }\n+\n+        serializationDiagnosticsList.add(serializationDiagnostics);\n+    }\n+\n+    public <T> T getResource(Callable<T> function, SerializationType serializationType) {\n+        ZonedDateTime serializationStartTime = ZonedDateTime.now(ZoneOffset.UTC);\n+        T t = null;\n+        try {\n+            t = function.call();\n+        } catch (Exception e) {\n+            throw new IllegalStateException(e);\n+        }\n+\n+        ZonedDateTime serializationEndTime = ZonedDateTime.now(ZoneOffset.UTC);\n+        if (serializationDiagnosticsList == null) {\n+            serializationDiagnosticsList = new ArrayList<>();\n+        }\n+\n+        serializationDiagnosticsList.add(new SerializationDiagnostics(serializationStartTime, serializationEndTime, serializationType));\n+        return t;\n+    }\n+\n+    @JsonSerialize(using = SerializationDiagnosticsContext.SerializationDiagnosticsSerializer.class)\n+    public static class SerializationDiagnostics {\n+        public volatile ZonedDateTime startTimeUTC;\n+        public volatile ZonedDateTime endTimeUTC;\n+        public volatile SerializationDiagnosticsContext.SerializationType serializationType;\n+\n+        public SerializationDiagnostics(ZonedDateTime startTimeUTC, ZonedDateTime endTimeUTC, SerializationDiagnosticsContext.SerializationType serializationType) {\n+            this.startTimeUTC = startTimeUTC;\n+            this.endTimeUTC = endTimeUTC;\n+            this.serializationType = serializationType;\n+        }\n+    }\n+\n+    static class SerializationDiagnosticsSerializer extends StdSerializer<SerializationDiagnosticsContext.SerializationDiagnostics> {\n+\n+        public SerializationDiagnosticsSerializer() {\n+            super(SerializationDiagnosticsContext.SerializationDiagnostics.class);\n+        }\n+\n+        @Override\n+        public void serialize(SerializationDiagnosticsContext.SerializationDiagnostics serializationDiagnostics, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {\n+            Duration durationinMS = serializationDiagnostics.startTimeUTC == null ?\n+                null : serializationDiagnostics.endTimeUTC == null ?\n+                Duration.ZERO : Duration.between(serializationDiagnostics.startTimeUTC, serializationDiagnostics.endTimeUTC);\n+            jsonGenerator.writeStartObject();\n+            jsonGenerator.writeObjectField(\"serializationType\", serializationDiagnostics.serializationType);\n+            jsonGenerator.writeStringField(\"startTimeUTC\", ZonedDateTimeSerializer.formatDateTime(serializationDiagnostics.startTimeUTC));\n+            jsonGenerator.writeStringField(\"endTimeUTC\", ZonedDateTimeSerializer.formatDateTime(serializationDiagnostics.endTimeUTC));\n+            if(durationinMS != null) {\n+                jsonGenerator.writeNumberField(\"durationInMicroSec\", durationinMS.toNanos()/1000);\n+            }\n+\n+            jsonGenerator.writeEndObject();\n+        }\n+    }\n+    public enum  SerializationType{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89d6dca1697a404d152a167dbee50f35ad855729"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3MTE1MA==", "bodyText": "fyi - I am not removing this onBeforeSendRequest , moving it early in the stack to getCreateDocumentRequest method , ensuring we are capturing meta data (collection calls) in retries", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r385771150", "createdAt": "2020-02-28T15:48:40Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -1120,14 +1133,10 @@ void captureSessionToken(RxDocumentServiceRequest request, RxDocumentServiceResp\n         try {\n             logger.debug(\"Creating a Document. collectionLink: [{}]\", collectionLink);\n \n-            Mono<RxDocumentServiceRequest> requestObs = getCreateDocumentRequest(collectionLink, document,\n+            Mono<RxDocumentServiceRequest> requestObs = getCreateDocumentRequest(requestRetryPolicy, collectionLink, document,\n                 options, disableAutomaticIdGeneration, OperationType.Create);\n \n             Mono<RxDocumentServiceResponse> responseObservable = requestObs.flatMap(request -> {\n-                if (requestRetryPolicy != null) {\n-                    requestRetryPolicy.onBeforeSendRequest(request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89d6dca1697a404d152a167dbee50f35ad855729"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b57868239bad96a91a3676575c4dc44cd0b155de", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b57868239bad96a91a3676575c4dc44cd0b155de", "committedDate": "2020-02-28T16:19:37Z", "message": "resolving merge conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MTM0MTU2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#pullrequestreview-368134156", "createdAt": "2020-03-03T16:32:15Z", "commit": {"oid": "b57868239bad96a91a3676575c4dc44cd0b155de"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjozMjoxNlrOFxNVfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjo1Mzo1MVrOFxONPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0MzAzNg==", "bodyText": "I think it is Metadata not MetaData", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r387143036", "createdAt": "2020-03-03T16:32:16Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java", "diffHunk": "@@ -9,12 +9,14 @@\n import com.azure.cosmos.implementation.CosmosPagedFluxOptions;\n import com.azure.cosmos.implementation.Document;\n import com.azure.cosmos.implementation.HttpConstants;\n+import com.azure.cosmos.implementation.MetaDataDiagnosticsContext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b57868239bad96a91a3676575c4dc44cd0b155de"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0NTAxNQ==", "bodyText": "I noticed in the resultant diagnostics string some fields are utc and some have timezone. I wonder why you have the mix of the two?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r387145015", "createdAt": "2020-03-03T16:35:19Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java", "diffHunk": "@@ -275,8 +264,8 @@ public void serialize(ClientSideRequestStatistics statistics, JsonGenerator gene\n             generator.writeStartObject();\n             long requestLatency = statistics.getRequestLatency().toMillis();;\n             generator.writeNumberField(\"requestLatency\", requestLatency);\n-            generator.writeStringField(\"requestStartTime\", formatDateTime(statistics.requestStartTime));\n-            generator.writeStringField(\"requestEndTime\", formatDateTime(statistics.requestEndTime));\n+            generator.writeStringField(\"requestStartTimeUTC\", ZonedDateTimeSerializer.formatDateTime(statistics.requestStartTimeUTC));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b57868239bad96a91a3676575c4dc44cd0b155de"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0NTI0Ng==", "bodyText": "metaData -> metadata here and other places please", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r387145246", "createdAt": "2020-03-03T16:35:41Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java", "diffHunk": "@@ -292,6 +281,8 @@ public void serialize(ClientSideRequestStatistics statistics, JsonGenerator gene\n             generator.writeObjectField(\"addressResolutionStatistics\", statistics.addressResolutionStatistics);\n             generator.writeObjectField(\"regionsContacted\", statistics.regionsContacted);\n             generator.writeObjectField(\"retryContext\", statistics.retryContext);\n+            generator.writeObjectField(\"metaDataDiagnosticsContext\", statistics.getMetaDataDiagnosticsContext());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b57868239bad96a91a3676575c4dc44cd0b155de"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0NzY0OQ==", "bodyText": "why are we preferring this approach over having a start timer and end timer before and after serialization?\nthis way you have to change every deserialization() code to a () -> deserialization() ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r387147649", "createdAt": "2020-03-03T16:39:27Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainerResponse.java", "diffHunk": "@@ -18,7 +21,11 @@\n             super.setProperties(null);\n             container = null;\n         } else {\n-            CosmosContainerProperties props = new CosmosContainerProperties(bodyAsString);\n+            Callable<CosmosContainerProperties> createCosmosContainerPropertiesCallable = () -> {\n+                return new CosmosContainerProperties(bodyAsString);\n+            };\n+            SerializationDiagnosticsContext serializationDiagnosticsContext = BridgeInternal.getSerializationDiagnosticsContext(this.getCosmosResponseDiagnostics());\n+            CosmosContainerProperties props = serializationDiagnosticsContext.getResource(createCosmosContainerPropertiesCallable, SerializationDiagnosticsContext.SerializationType.ContainerSerialization);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b57868239bad96a91a3676575c4dc44cd0b155de"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0OTU3OA==", "bodyText": "this is .Net naming style. the enum types should have java naming style.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r387149578", "createdAt": "2020-03-03T16:42:15Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/MetaDataDiagnosticsContext.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.ZonedDateTimeSerializer;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class MetaDataDiagnosticsContext {\n+    public volatile List<MetaDataDiagnostic> metaDataDiagnosticList;\n+\n+    public void addMetaDataDiagnostic(MetaDataDiagnostic metaDataDiagnostic) {\n+        if (metaDataDiagnosticList == null) {\n+            metaDataDiagnosticList = new ArrayList<>();\n+        }\n+\n+        metaDataDiagnosticList.add(metaDataDiagnostic);\n+    }\n+\n+    @JsonSerialize(using = MetaDataDiagnosticSerializer.class)\n+    public static class MetaDataDiagnostic {\n+        public volatile ZonedDateTime startTimeUTC;\n+        public volatile ZonedDateTime endTimeUTC;\n+        public volatile MetaDataEnum metaDataName;\n+\n+        public MetaDataDiagnostic(ZonedDateTime startTimeUTC, ZonedDateTime endTimeUTC, MetaDataEnum metaDataName) {\n+            this.startTimeUTC = startTimeUTC;\n+            this.endTimeUTC = endTimeUTC;\n+            this.metaDataName = metaDataName;\n+        }\n+    }\n+\n+    static class MetaDataDiagnosticSerializer extends StdSerializer<MetaDataDiagnostic> {\n+\n+        public MetaDataDiagnosticSerializer() {\n+            super(MetaDataDiagnostic.class);\n+        }\n+\n+        @Override\n+        public void serialize(MetaDataDiagnostic metaDataDiagnostic, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {\n+            Duration durationinMS = metaDataDiagnostic.startTimeUTC == null ?\n+                null : metaDataDiagnostic.endTimeUTC == null ?\n+                Duration.ZERO : Duration.between(metaDataDiagnostic.startTimeUTC, metaDataDiagnostic.endTimeUTC);\n+            jsonGenerator.writeStartObject();\n+            jsonGenerator.writeObjectField(\"metaDataName\", metaDataDiagnostic.metaDataName);\n+            jsonGenerator.writeStringField(\"startTimeUTC\", ZonedDateTimeSerializer.formatDateTime(metaDataDiagnostic.startTimeUTC));\n+            jsonGenerator.writeStringField(\"endTimeUTC\", ZonedDateTimeSerializer.formatDateTime(metaDataDiagnostic.endTimeUTC));\n+            if(durationinMS != null) {\n+                jsonGenerator.writeNumberField(\"durationinMS\", durationinMS.toMillis());\n+            }\n+\n+            jsonGenerator.writeEndObject();\n+        }\n+    }\n+    public enum  MetaDataEnum{\n+        ContainerLookUp,\n+        PartitionKeyRangeLookUp,\n+        ServerAddressLookup,\n+        MasterAddressLookUp", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b57868239bad96a91a3676575c4dc44cd0b155de"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1MjY0NQ==", "bodyText": "I am guessing this can be accessed from multiple threads. Then shouldn't this be a synchronized list?\nsee this similar race condition bug in the diagnostics string: #8505", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r387152645", "createdAt": "2020-03-03T16:46:57Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/MetaDataDiagnosticsContext.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.ZonedDateTimeSerializer;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class MetaDataDiagnosticsContext {\n+    public volatile List<MetaDataDiagnostic> metaDataDiagnosticList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b57868239bad96a91a3676575c4dc44cd0b155de"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1MjgzOQ==", "bodyText": "I am guessing this can be accessed from multiple threads. Then shouldn't this be a synchronized list?\nsee this similar race condition bug in the diagnostics string: #8505", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r387152839", "createdAt": "2020-03-03T16:47:16Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/MetaDataDiagnosticsContext.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.ZonedDateTimeSerializer;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class MetaDataDiagnosticsContext {\n+    public volatile List<MetaDataDiagnostic> metaDataDiagnosticList;\n+\n+    public void addMetaDataDiagnostic(MetaDataDiagnostic metaDataDiagnostic) {\n+        if (metaDataDiagnosticList == null) {\n+            metaDataDiagnosticList = new ArrayList<>();\n+        }\n+\n+        metaDataDiagnosticList.add(metaDataDiagnostic);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b57868239bad96a91a3676575c4dc44cd0b155de"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1Mzg5MA==", "bodyText": "as you are invoking this in the deserialization codepath it should have the same behaviour in terms of exception throwing.\nThis changes the exception type.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r387153890", "createdAt": "2020-03-03T16:48:48Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java", "diffHunk": "@@ -0,0 +1,90 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.ZonedDateTimeSerializer;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+\n+public class SerializationDiagnosticsContext {\n+    public volatile List<SerializationDiagnosticsContext.SerializationDiagnostics> serializationDiagnosticsList;\n+\n+    public void addMetaDataDiagnostic(SerializationDiagnosticsContext.SerializationDiagnostics serializationDiagnostics) {\n+        if (serializationDiagnosticsList == null) {\n+            serializationDiagnosticsList = new ArrayList<>();\n+        }\n+\n+        serializationDiagnosticsList.add(serializationDiagnostics);\n+    }\n+\n+    public <T> T getResource(Callable<T> function, SerializationType serializationType) {\n+        ZonedDateTime serializationStartTime = ZonedDateTime.now(ZoneOffset.UTC);\n+        T t = null;\n+        try {\n+            t = function.call();\n+        } catch (Exception e) {\n+            throw new IllegalStateException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b57868239bad96a91a3676575c4dc44cd0b155de"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1NDEwOA==", "bodyText": "I am guessing this can be accessed from multiple threads. Then shouldn't this be a synchronized list?\nsee this similar race condition bug in the diagnostics string: #8505", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r387154108", "createdAt": "2020-03-03T16:49:09Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java", "diffHunk": "@@ -0,0 +1,90 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.ZonedDateTimeSerializer;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+\n+public class SerializationDiagnosticsContext {\n+    public volatile List<SerializationDiagnosticsContext.SerializationDiagnostics> serializationDiagnosticsList;\n+\n+    public void addMetaDataDiagnostic(SerializationDiagnosticsContext.SerializationDiagnostics serializationDiagnostics) {\n+        if (serializationDiagnosticsList == null) {\n+            serializationDiagnosticsList = new ArrayList<>();\n+        }\n+\n+        serializationDiagnosticsList.add(serializationDiagnostics);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b57868239bad96a91a3676575c4dc44cd0b155de"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1NTA2Mg==", "bodyText": "also a general question, you changed the deserialization() -> () -> deserialization() everywhere thourhgout the code.\nAny reason we are not capturing the start and end time of deserialization and pass here only the time window?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r387155062", "createdAt": "2020-03-03T16:50:32Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java", "diffHunk": "@@ -0,0 +1,90 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.ZonedDateTimeSerializer;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+\n+public class SerializationDiagnosticsContext {\n+    public volatile List<SerializationDiagnosticsContext.SerializationDiagnostics> serializationDiagnosticsList;\n+\n+    public void addMetaDataDiagnostic(SerializationDiagnosticsContext.SerializationDiagnostics serializationDiagnostics) {\n+        if (serializationDiagnosticsList == null) {\n+            serializationDiagnosticsList = new ArrayList<>();\n+        }\n+\n+        serializationDiagnosticsList.add(serializationDiagnostics);\n+    }\n+\n+    public <T> T getResource(Callable<T> function, SerializationType serializationType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b57868239bad96a91a3676575c4dc44cd0b155de"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1NTQyNQ==", "bodyText": "this is .Net naming for enum. change to Java", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r387155425", "createdAt": "2020-03-03T16:51:03Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java", "diffHunk": "@@ -0,0 +1,90 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.ZonedDateTimeSerializer;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+\n+public class SerializationDiagnosticsContext {\n+    public volatile List<SerializationDiagnosticsContext.SerializationDiagnostics> serializationDiagnosticsList;\n+\n+    public void addMetaDataDiagnostic(SerializationDiagnosticsContext.SerializationDiagnostics serializationDiagnostics) {\n+        if (serializationDiagnosticsList == null) {\n+            serializationDiagnosticsList = new ArrayList<>();\n+        }\n+\n+        serializationDiagnosticsList.add(serializationDiagnostics);\n+    }\n+\n+    public <T> T getResource(Callable<T> function, SerializationType serializationType) {\n+        ZonedDateTime serializationStartTime = ZonedDateTime.now(ZoneOffset.UTC);\n+        T t = null;\n+        try {\n+            t = function.call();\n+        } catch (Exception e) {\n+            throw new IllegalStateException(e);\n+        }\n+\n+        ZonedDateTime serializationEndTime = ZonedDateTime.now(ZoneOffset.UTC);\n+        if (serializationDiagnosticsList == null) {\n+            serializationDiagnosticsList = new ArrayList<>();\n+        }\n+\n+        serializationDiagnosticsList.add(new SerializationDiagnostics(serializationStartTime, serializationEndTime, serializationType));\n+        return t;\n+    }\n+\n+    @JsonSerialize(using = SerializationDiagnosticsContext.SerializationDiagnosticsSerializer.class)\n+    public static class SerializationDiagnostics {\n+        public volatile ZonedDateTime startTimeUTC;\n+        public volatile ZonedDateTime endTimeUTC;\n+        public volatile SerializationDiagnosticsContext.SerializationType serializationType;\n+\n+        public SerializationDiagnostics(ZonedDateTime startTimeUTC, ZonedDateTime endTimeUTC, SerializationDiagnosticsContext.SerializationType serializationType) {\n+            this.startTimeUTC = startTimeUTC;\n+            this.endTimeUTC = endTimeUTC;\n+            this.serializationType = serializationType;\n+        }\n+    }\n+\n+    static class SerializationDiagnosticsSerializer extends StdSerializer<SerializationDiagnosticsContext.SerializationDiagnostics> {\n+\n+        public SerializationDiagnosticsSerializer() {\n+            super(SerializationDiagnosticsContext.SerializationDiagnostics.class);\n+        }\n+\n+        @Override\n+        public void serialize(SerializationDiagnosticsContext.SerializationDiagnostics serializationDiagnostics, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {\n+            Duration durationinMS = serializationDiagnostics.startTimeUTC == null ?\n+                null : serializationDiagnostics.endTimeUTC == null ?\n+                Duration.ZERO : Duration.between(serializationDiagnostics.startTimeUTC, serializationDiagnostics.endTimeUTC);\n+            jsonGenerator.writeStartObject();\n+            jsonGenerator.writeObjectField(\"serializationType\", serializationDiagnostics.serializationType);\n+            jsonGenerator.writeStringField(\"startTimeUTC\", ZonedDateTimeSerializer.formatDateTime(serializationDiagnostics.startTimeUTC));\n+            jsonGenerator.writeStringField(\"endTimeUTC\", ZonedDateTimeSerializer.formatDateTime(serializationDiagnostics.endTimeUTC));\n+            if(durationinMS != null) {\n+                jsonGenerator.writeNumberField(\"durationInMicroSec\", durationinMS.toNanos()/1000);\n+            }\n+\n+            jsonGenerator.writeEndObject();\n+        }\n+    }\n+    public enum  SerializationType{\n+        DatabaseSerialization,\n+        ContainerSerialization,\n+        ItemSerialization,\n+        PartitionKeyFetchSerialization", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b57868239bad96a91a3676575c4dc44cd0b155de"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1NjI3Mg==", "bodyText": "code style: always a space between a term and \"{\"\nalso you have two spaces between enum and SerializationType please fix\npublic enum  SerializationType{ -> public enum SerializationType {", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r387156272", "createdAt": "2020-03-03T16:52:21Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java", "diffHunk": "@@ -0,0 +1,90 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.ZonedDateTimeSerializer;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+\n+public class SerializationDiagnosticsContext {\n+    public volatile List<SerializationDiagnosticsContext.SerializationDiagnostics> serializationDiagnosticsList;\n+\n+    public void addMetaDataDiagnostic(SerializationDiagnosticsContext.SerializationDiagnostics serializationDiagnostics) {\n+        if (serializationDiagnosticsList == null) {\n+            serializationDiagnosticsList = new ArrayList<>();\n+        }\n+\n+        serializationDiagnosticsList.add(serializationDiagnostics);\n+    }\n+\n+    public <T> T getResource(Callable<T> function, SerializationType serializationType) {\n+        ZonedDateTime serializationStartTime = ZonedDateTime.now(ZoneOffset.UTC);\n+        T t = null;\n+        try {\n+            t = function.call();\n+        } catch (Exception e) {\n+            throw new IllegalStateException(e);\n+        }\n+\n+        ZonedDateTime serializationEndTime = ZonedDateTime.now(ZoneOffset.UTC);\n+        if (serializationDiagnosticsList == null) {\n+            serializationDiagnosticsList = new ArrayList<>();\n+        }\n+\n+        serializationDiagnosticsList.add(new SerializationDiagnostics(serializationStartTime, serializationEndTime, serializationType));\n+        return t;\n+    }\n+\n+    @JsonSerialize(using = SerializationDiagnosticsContext.SerializationDiagnosticsSerializer.class)\n+    public static class SerializationDiagnostics {\n+        public volatile ZonedDateTime startTimeUTC;\n+        public volatile ZonedDateTime endTimeUTC;\n+        public volatile SerializationDiagnosticsContext.SerializationType serializationType;\n+\n+        public SerializationDiagnostics(ZonedDateTime startTimeUTC, ZonedDateTime endTimeUTC, SerializationDiagnosticsContext.SerializationType serializationType) {\n+            this.startTimeUTC = startTimeUTC;\n+            this.endTimeUTC = endTimeUTC;\n+            this.serializationType = serializationType;\n+        }\n+    }\n+\n+    static class SerializationDiagnosticsSerializer extends StdSerializer<SerializationDiagnosticsContext.SerializationDiagnostics> {\n+\n+        public SerializationDiagnosticsSerializer() {\n+            super(SerializationDiagnosticsContext.SerializationDiagnostics.class);\n+        }\n+\n+        @Override\n+        public void serialize(SerializationDiagnosticsContext.SerializationDiagnostics serializationDiagnostics, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {\n+            Duration durationinMS = serializationDiagnostics.startTimeUTC == null ?\n+                null : serializationDiagnostics.endTimeUTC == null ?\n+                Duration.ZERO : Duration.between(serializationDiagnostics.startTimeUTC, serializationDiagnostics.endTimeUTC);\n+            jsonGenerator.writeStartObject();\n+            jsonGenerator.writeObjectField(\"serializationType\", serializationDiagnostics.serializationType);\n+            jsonGenerator.writeStringField(\"startTimeUTC\", ZonedDateTimeSerializer.formatDateTime(serializationDiagnostics.startTimeUTC));\n+            jsonGenerator.writeStringField(\"endTimeUTC\", ZonedDateTimeSerializer.formatDateTime(serializationDiagnostics.endTimeUTC));\n+            if(durationinMS != null) {\n+                jsonGenerator.writeNumberField(\"durationInMicroSec\", durationinMS.toNanos()/1000);\n+            }\n+\n+            jsonGenerator.writeEndObject();\n+        }\n+    }\n+    public enum  SerializationType{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b57868239bad96a91a3676575c4dc44cd0b155de"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1NzMwOA==", "bodyText": "why do we need explicit priority = 1 here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r387157308", "createdAt": "2020-03-03T16:53:51Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosResponseDiagnosticsTest.java", "diffHunk": "@@ -59,23 +59,23 @@ public void afterClass() throws CosmosClientException {\n     @Test(groups = {\"simple\"})\n     public void gatewayDiagnostics() throws CosmosClientException {\n         CosmosItemProperties cosmosItemProperties = getCosmosItemProperties();\n-        CosmosItemResponse<CosmosItemProperties> createResponse = container.createItem(cosmosItemProperties);\n+        CosmosItemResponse<CosmosItemProperties> createResponse = this.container.createItem(cosmosItemProperties);\n         String diagnostics = createResponse.getCosmosResponseDiagnostics().toString();\n         assertThat(diagnostics).contains(\"\\\"connectionMode\\\":\\\"GATEWAY\\\"\");\n         assertThat(diagnostics).doesNotContain((\"\\\"gatewayStatistics\\\":null\"));\n         assertThat(diagnostics).contains(\"\\\"operationType\\\":\\\"Create\\\"\");\n+        assertThat(diagnostics).contains(\"\\\"metaDataName\\\":\\\"ContainerLookUp\\\"\");\n+        assertThat(diagnostics).contains(\"\\\"serializationType\\\":\\\"PartitionKeyFetchSerialization\\\"\");\n         assertThat(createResponse.getCosmosResponseDiagnostics().getRequestLatency()).isNotNull();\n         validateTransportRequestTimelineGateway(diagnostics);\n     }\n \n-    @Test(groups = {\"simple\"})\n+    @Test(groups = {\"simple\"}, priority = 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b57868239bad96a91a3676575c4dc44cd0b155de"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56e806ddfed0d22f3e2ad2980df8918e233ee2e7", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/56e806ddfed0d22f3e2ad2980df8918e233ee2e7", "committedDate": "2020-03-24T15:15:14Z", "message": "merging with latest code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d096ab1925bdf2120703e8ab16b23f6ac49d3fc9", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d096ab1925bdf2120703e8ab16b23f6ac49d3fc9", "committedDate": "2020-03-24T15:31:10Z", "message": "fixing merge conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8f5dc0ca19d03c9f872b26ab7238cb887d4eae4", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d8f5dc0ca19d03c9f872b26ab7238cb887d4eae4", "committedDate": "2020-03-24T20:06:34Z", "message": "resolving comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93af70cb323e575cfe613008f0ac00fc170b4a2f", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/93af70cb323e575cfe613008f0ac00fc170b4a2f", "committedDate": "2020-03-24T20:15:18Z", "message": "resolving comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "425ca1928cab67a3c3d8583ded75874f34b3911c", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/425ca1928cab67a3c3d8583ded75874f34b3911c", "committedDate": "2020-03-24T20:17:16Z", "message": "resolving comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "581d8a85ddfaee2872281985ba583fe65859df6e", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/581d8a85ddfaee2872281985ba583fe65859df6e", "committedDate": "2020-03-25T15:33:52Z", "message": "Merge branch 'latest-master' into user/nakumars/newMetaDataAndSerializationDiagnostics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f1d7a51567104668e271c4c916b020e620ee25f", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4f1d7a51567104668e271c4c916b020e620ee25f", "committedDate": "2020-03-25T16:38:09Z", "message": "fixing test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "359909880befcc570f2023f14104b08cbf386b17", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/359909880befcc570f2023f14104b08cbf386b17", "committedDate": "2020-03-25T17:07:20Z", "message": "Merge branch 'latest-master' into user/nakumars/newMetaDataAndSerializationDiagnostics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a211d732e0bba298acefaaabf39fd71083a765ea", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a211d732e0bba298acefaaabf39fd71083a765ea", "committedDate": "2020-03-25T17:09:19Z", "message": "merge with master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0a99da81b9f3267c145ac7d204b195364c74cc0", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e0a99da81b9f3267c145ac7d204b195364c74cc0", "committedDate": "2020-03-25T17:55:26Z", "message": "fixing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "891e69f38fb17e41e7bcebfdaa8065f6c930b4e9", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/891e69f38fb17e41e7bcebfdaa8065f6c930b4e9", "committedDate": "2020-03-25T22:32:09Z", "message": "refactor serialization diagnostic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c759c419326a0d6c337167837d8ef1796669ab4e", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c759c419326a0d6c337167837d8ef1796669ab4e", "committedDate": "2020-03-25T22:34:30Z", "message": "refactor serialization diagnotics"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMDEwNjM3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#pullrequestreview-383010637", "createdAt": "2020-03-27T16:23:15Z", "commit": {"oid": "c759c419326a0d6c337167837d8ef1796669ab4e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjoyMzoxNVrOF84k8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjoyMzoxNVrOF84k8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM4NTg0MQ==", "bodyText": "as you are using UTC everywhere, please see if Instant is more appropriate or ZonedDataTime.\nas Instance is UTC only I am guessing it might have better perf.\nPlease do a jmh perf run as discussed offline to compare the two.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r399385841", "createdAt": "2020-03-27T16:23:15Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java", "diffHunk": "@@ -51,34 +53,31 @@\n \n     private List<URI> contactedReplicas;\n     private Set<URI> failedReplicas;\n-    private ZonedDateTime requestStartTime;\n-    private ZonedDateTime requestEndTime;\n+    private ZonedDateTime requestStartTimeUTC;\n+    private ZonedDateTime requestEndTimeUTC;\n     private Set<URI> regionsContacted;\n     private RetryContext retryContext;\n     private GatewayStatistics gatewayStatistics;\n     private RequestTimeline transportRequestTimeline;\n+    private MetadataDiagnosticsContext metadataDiagnosticsContext;\n+    private SerializationDiagnosticsContext serializationDiagnosticsContext;\n \n     ClientSideRequestStatistics() {\n-        this.requestStartTime = ZonedDateTime.now(ZoneOffset.UTC);\n-        this.requestEndTime = ZonedDateTime.now(ZoneOffset.UTC);\n+        this.requestStartTimeUTC = ZonedDateTime.now(ZoneOffset.UTC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c759c419326a0d6c337167837d8ef1796669ab4e"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a2b96e9e61b503820702c78b9ad7430d5cfdab4", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4a2b96e9e61b503820702c78b9ad7430d5cfdab4", "committedDate": "2020-04-01T18:53:37Z", "message": "fixing test case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NTE4Nzkw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#pullrequestreview-386518790", "createdAt": "2020-04-02T15:04:47Z", "commit": {"oid": "4a2b96e9e61b503820702c78b9ad7430d5cfdab4"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTowNTowNVrOF_vuIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNToyMjo1NVrOF_wjaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM4NjQ2Nw==", "bodyText": "option 1 makes sense.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r402386467", "createdAt": "2020-04-02T15:05:05Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java", "diffHunk": "@@ -51,34 +53,31 @@\n \n     private List<URI> contactedReplicas;\n     private Set<URI> failedReplicas;\n-    private ZonedDateTime requestStartTime;\n-    private ZonedDateTime requestEndTime;\n+    private ZonedDateTime requestStartTimeUTC;\n+    private ZonedDateTime requestEndTimeUTC;\n     private Set<URI> regionsContacted;\n     private RetryContext retryContext;\n     private GatewayStatistics gatewayStatistics;\n     private RequestTimeline transportRequestTimeline;\n+    private MetadataDiagnosticsContext metadataDiagnosticsContext;\n+    private SerializationDiagnosticsContext serializationDiagnosticsContext;\n \n     ClientSideRequestStatistics() {\n-        this.requestStartTime = ZonedDateTime.now(ZoneOffset.UTC);\n-        this.requestEndTime = ZonedDateTime.now(ZoneOffset.UTC);\n+        this.requestStartTimeUTC = ZonedDateTime.now(ZoneOffset.UTC);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM4NTg0MQ=="}, "originalCommit": {"oid": "c759c419326a0d6c337167837d8ef1796669ab4e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5NDA0MQ==", "bodyText": "the purpose of getCreateDocumentRequest is to create the request. Why retryPolicy is passed here?\nwhoever invokes getCreateDocumentRequest should handle requestRetryPolicy not this method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r402394041", "createdAt": "2020-04-02T15:14:49Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -972,15 +1016,26 @@ private static PartitionKeyInternal extractPartitionKeyValueFromDocument(\n             throw new IllegalArgumentException(\"document\");\n         }\n \n+        ZonedDateTime serializationStartTimeUTC = ZonedDateTime.now(ZoneOffset.UTC);\n         ByteBuffer content = BridgeInternal.serializeJsonToByteBuffer(document, mapper);\n+        ZonedDateTime serializationEndTimeUTC = ZonedDateTime.now(ZoneOffset.UTC);\n+        SerializationDiagnosticsContext.SerializationDiagnostics serializationDiagnostics = new SerializationDiagnosticsContext.SerializationDiagnostics(\n+            serializationStartTimeUTC,\n+            serializationEndTimeUTC,\n+            SerializationDiagnosticsContext.SerializationType.ITEM_SERIALIZATION);\n \n         String path = Utils.joinPath(documentCollectionLink, Paths.DOCUMENTS_PATH_SEGMENT);\n         Map<String, String> requestHeaders = this.getRequestHeaders(options);\n \n         RxDocumentServiceRequest request = RxDocumentServiceRequest.create(operationType, ResourceType.Document, path,\n                                                                            requestHeaders, options, content);\n+        if (requestRetryPolicy != null) {\n+            requestRetryPolicy.onBeforeSendRequest(request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2b96e9e61b503820702c78b9ad7430d5cfdab4"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5NTMwNw==", "bodyText": "the purpose of getCreateDocumentRequest is just to create the request. retry-policy interaction should happen outside. why are we moving this?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r402395307", "createdAt": "2020-04-02T15:16:31Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -1120,14 +1133,10 @@ void captureSessionToken(RxDocumentServiceRequest request, RxDocumentServiceResp\n         try {\n             logger.debug(\"Creating a Document. collectionLink: [{}]\", collectionLink);\n \n-            Mono<RxDocumentServiceRequest> requestObs = getCreateDocumentRequest(collectionLink, document,\n+            Mono<RxDocumentServiceRequest> requestObs = getCreateDocumentRequest(requestRetryPolicy, collectionLink, document,\n                 options, disableAutomaticIdGeneration, OperationType.Create);\n \n             Mono<RxDocumentServiceResponse> responseObservable = requestObs.flatMap(request -> {\n-                if (requestRetryPolicy != null) {\n-                    requestRetryPolicy.onBeforeSendRequest(request);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3MTE1MA=="}, "originalCommit": {"oid": "89d6dca1697a404d152a167dbee50f35ad855729"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQwMDEwNA==", "bodyText": "is this needed?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r402400104", "createdAt": "2020-04-02T15:22:55Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosAsyncContainerResponse.java", "diffHunk": "@@ -7,8 +7,13 @@\n import com.azure.cosmos.CosmosAsyncDatabase;\n import com.azure.cosmos.implementation.DocumentCollection;\n import com.azure.cosmos.implementation.ResourceResponse;\n+import com.azure.cosmos.implementation.SerializationDiagnosticsContext;\n import com.azure.cosmos.implementation.apachecommons.lang.StringUtils;\n \n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.util.concurrent.Callable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2b96e9e61b503820702c78b9ad7430d5cfdab4"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NTYyMjU4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#pullrequestreview-386562258", "createdAt": "2020-04-02T15:51:05Z", "commit": {"oid": "4a2b96e9e61b503820702c78b9ad7430d5cfdab4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9081ada97fc103a7e577545065660c3a75e667d2", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9081ada97fc103a7e577545065660c3a75e667d2", "committedDate": "2020-04-02T19:57:34Z", "message": "Merge branch 'latest-master' into user/nakumars/newMetaDataAndSerializationDiagnostics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb5949c0d7d49843f01a767d87210a729df98055", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cb5949c0d7d49843f01a767d87210a729df98055", "committedDate": "2020-04-02T19:58:37Z", "message": "removing unused import and merging with master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2ODA4MTU2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#pullrequestreview-386808156", "createdAt": "2020-04-02T22:00:58Z", "commit": {"oid": "cb5949c0d7d49843f01a767d87210a729df98055"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "331f737a65b8c8c4c39ad559c33a96a6bc6f6766", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/331f737a65b8c8c4c39ad559c33a96a6bc6f6766", "committedDate": "2020-04-08T14:38:41Z", "message": "Merge branch 'latest-master' into user/nakumars/newMetaDataAndSerializationDiagnostics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cb942e2c14f946a79daa6b70aa4a8a55394d111", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7cb942e2c14f946a79daa6b70aa4a8a55394d111", "committedDate": "2020-04-08T14:40:39Z", "message": "merging latest and fixing test case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMDA2NDI0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#pullrequestreview-391006424", "createdAt": "2020-04-09T17:50:54Z", "commit": {"oid": "7cb942e2c14f946a79daa6b70aa4a8a55394d111"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d80bbaa9f0567543f485e8d09f7a52be4b51fe5", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3d80bbaa9f0567543f485e8d09f7a52be4b51fe5", "committedDate": "2020-04-09T18:32:03Z", "message": "Merge branch 'master' into user/nakumars/newMetaDataAndSerializationDiagnostics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98d69f1f866337d1f39a4c2a20b85f810d5b165a", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/98d69f1f866337d1f39a4c2a20b85f810d5b165a", "committedDate": "2020-04-09T18:36:38Z", "message": "Merged latest master and updated module-info with directconnectivity module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ead6b3c345bb7ed58aee7a21709f67310e6f54e0", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ead6b3c345bb7ed58aee7a21709f67310e6f54e0", "committedDate": "2020-04-09T18:56:33Z", "message": "Reverted global endpoint manager close change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b472c3a658f212a14279a10b35db637bb8a2f93", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2b472c3a658f212a14279a10b35db637bb8a2f93", "committedDate": "2020-04-09T19:13:09Z", "message": "Moved ZonedDateTimeSerializer to implementation package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e50b30f9aa7b42259e2aea978c1e3914882605c", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5e50b30f9aa7b42259e2aea978c1e3914882605c", "committedDate": "2020-04-09T21:07:24Z", "message": "Disabled gateway service configuration reader test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3737f211765c89edc7756d4dadcd164dbbc8d374", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3737f211765c89edc7756d4dadcd164dbbc8d374", "committedDate": "2020-04-09T22:04:58Z", "message": "Disabled Gateway Service Configuration reader test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "181ded10620aa2bb5cd00d2e9931b314573a0c1a", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/181ded10620aa2bb5cd00d2e9931b314573a0c1a", "committedDate": "2020-04-10T15:05:57Z", "message": "closing all the globalendpoint instances in test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eea7431f07eda451a469f493d345b1d6ff4625f3", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/eea7431f07eda451a469f493d345b1d6ff4625f3", "committedDate": "2020-04-10T16:18:07Z", "message": "Disabling priority for testing our theory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5acaff142c3f9849b299c06b85025460f1b72933", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5acaff142c3f9849b299c06b85025460f1b72933", "committedDate": "2020-04-10T17:49:41Z", "message": "fixing test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "359f940c7e729c25ab428f018f041cdef1863944", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/359f940c7e729c25ab428f018f041cdef1863944", "committedDate": "2020-04-13T17:29:15Z", "message": "resolving merge conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b9522db705e9fdf2acea0c957fde75638eb4ebe", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3b9522db705e9fdf2acea0c957fde75638eb4ebe", "committedDate": "2020-04-13T20:58:28Z", "message": "Fixed cosmos check style exclusions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNDUyMDE0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#pullrequestreview-392452014", "createdAt": "2020-04-13T21:26:56Z", "commit": {"oid": "3b9522db705e9fdf2acea0c957fde75638eb4ebe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 952, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}