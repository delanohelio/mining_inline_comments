{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NDEwMTc4", "number": 13492, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMToxMDowOVrOES_ngw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMToxMzozOFrOES_r8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzUyMTMxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/TypeReference.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMToxMDowOVrOG4fAHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjoxOTo1MVrOG4huZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4MTM3NA==", "bodyText": "Why is this abstract?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13492#discussion_r461881374", "createdAt": "2020-07-28T21:10:09Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/TypeReference.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.serializer;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.lang.reflect.ParameterizedType;\n+\n+/**\n+ * This class represents a generic Java type, retaining information about generics.\n+ *\n+ * @param <T> The type being represented.\n+ */\n+public abstract class TypeReference<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d205f95589b6e68a8839cbb15ec682139a8128d2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyNTk4OA==", "bodyText": "This is abstract to leverage functionality of the Java type system. If this we a concrete class we would have access to the T type as the generic super class would be Object. But if this is abstract and the only way to use it is with anonymous, or concrete, sub classes the generic super type would be the T value a user expected.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13492#discussion_r461925988", "createdAt": "2020-07-28T22:19:51Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/TypeReference.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.serializer;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.lang.reflect.ParameterizedType;\n+\n+/**\n+ * This class represents a generic Java type, retaining information about generics.\n+ *\n+ * @param <T> The type being represented.\n+ */\n+public abstract class TypeReference<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4MTM3NA=="}, "originalCommit": {"oid": "d205f95589b6e68a8839cbb15ec682139a8128d2"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzUyNTM0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/JsonSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMToxMToyNFrOG4fCrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMToxMToyNFrOG4fCrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4MjAyOQ==", "bodyText": "This serves the purpose. The only thing is that the user will now have to learn about TypeReference but since this is going to be used mainly client library developers, I am not too worried about this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13492#discussion_r461882029", "createdAt": "2020-07-28T21:11:24Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/JsonSerializer.java", "diffHunk": "@@ -16,22 +16,22 @@\n      * Reads a JSON stream into its object representation.\n      *\n      * @param stream JSON stream.\n-     * @param clazz {@link Class} representing the object.\n+     * @param typeReference {@link TypeReference} representing the object.\n      * @param <T> Type of the object.\n      * @return The object represented by the deserialized JSON stream.\n      */\n     @Override\n-    <T> Mono<T> deserialize(InputStream stream, Class<T> clazz);\n+    <T> Mono<T> deserialize(InputStream stream, TypeReference<T> typeReference);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d205f95589b6e68a8839cbb15ec682139a8128d2"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzUzMjY1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-serializer-avro-apache/src/test/java/com/azure/core/serializer/avro/apache/ApacheAvroSerializerTests.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMToxMzozOFrOG4fG-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjozMzozN1rOG4iCtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4MzEzMQ==", "bodyText": "Can we avoid creating a new instance for same type here and also have a way to minimize duplicate instances when used by the user? Maybe have a static map of known types and vend those TypeReference instances if one exists or create one if it doesnt?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13492#discussion_r461883131", "createdAt": "2020-07-28T21:13:38Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-serializer-avro-apache/src/test/java/com/azure/core/serializer/avro/apache/ApacheAvroSerializerTests.java", "diffHunk": "@@ -54,61 +55,56 @@ private static ApacheAvroSerializer getSerializer(String schema) {\n \n     @ParameterizedTest\n     @MethodSource(\"deserializePrimitiveTypesSupplier\")\n-    public <T> void deserializePrimitiveTypes(InputStream avro, String schema, Class<T> clazz, T expected) {\n-        StepVerifier.create(getSerializer(schema).deserialize(avro, clazz))\n-            .assertNext(actual -> {\n-                assertTrue(clazz.isAssignableFrom(actual.getClass()));\n-                assertEquals(expected, actual);\n-            })\n+    public <T> void deserializePrimitiveTypes(InputStream avro, String schema, TypeReference<T> type, T expected) {\n+        StepVerifier.create(getSerializer(schema).deserialize(avro, type))\n+            .assertNext(actual -> assertEquals(expected, actual))\n             .verifyComplete();\n     }\n \n     private static Stream<Arguments> deserializePrimitiveTypesSupplier() {\n         return Stream.of(\n-            Arguments.of(streamCreator(0), schemaCreator(\"boolean\"), Boolean.class, false),\n-            Arguments.of(streamCreator(1), schemaCreator(\"boolean\"), Boolean.class, true),\n+            Arguments.of(streamCreator(0), schemaCreator(\"boolean\"), new TypeReference<Boolean>() { }, false),\n+            Arguments.of(streamCreator(1), schemaCreator(\"boolean\"), new TypeReference<Boolean>() { }, true),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d205f95589b6e68a8839cbb15ec682139a8128d2"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4NzI4Mg==", "bodyText": "Basically create a backing map of static references for common built-in Java types such as Boolean, Integer, Map<String, Object>, etc?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13492#discussion_r461887282", "createdAt": "2020-07-28T21:21:55Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-avro-apache/src/test/java/com/azure/core/serializer/avro/apache/ApacheAvroSerializerTests.java", "diffHunk": "@@ -54,61 +55,56 @@ private static ApacheAvroSerializer getSerializer(String schema) {\n \n     @ParameterizedTest\n     @MethodSource(\"deserializePrimitiveTypesSupplier\")\n-    public <T> void deserializePrimitiveTypes(InputStream avro, String schema, Class<T> clazz, T expected) {\n-        StepVerifier.create(getSerializer(schema).deserialize(avro, clazz))\n-            .assertNext(actual -> {\n-                assertTrue(clazz.isAssignableFrom(actual.getClass()));\n-                assertEquals(expected, actual);\n-            })\n+    public <T> void deserializePrimitiveTypes(InputStream avro, String schema, TypeReference<T> type, T expected) {\n+        StepVerifier.create(getSerializer(schema).deserialize(avro, type))\n+            .assertNext(actual -> assertEquals(expected, actual))\n             .verifyComplete();\n     }\n \n     private static Stream<Arguments> deserializePrimitiveTypesSupplier() {\n         return Stream.of(\n-            Arguments.of(streamCreator(0), schemaCreator(\"boolean\"), Boolean.class, false),\n-            Arguments.of(streamCreator(1), schemaCreator(\"boolean\"), Boolean.class, true),\n+            Arguments.of(streamCreator(0), schemaCreator(\"boolean\"), new TypeReference<Boolean>() { }, false),\n+            Arguments.of(streamCreator(1), schemaCreator(\"boolean\"), new TypeReference<Boolean>() { }, true),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4MzEzMQ=="}, "originalCommit": {"oid": "d205f95589b6e68a8839cbb15ec682139a8128d2"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5MDkwNA==", "bodyText": "Yeah, basically, support these built-in types out of the box and for custom types, lazily add to the backing map.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13492#discussion_r461890904", "createdAt": "2020-07-28T21:29:19Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-serializer-avro-apache/src/test/java/com/azure/core/serializer/avro/apache/ApacheAvroSerializerTests.java", "diffHunk": "@@ -54,61 +55,56 @@ private static ApacheAvroSerializer getSerializer(String schema) {\n \n     @ParameterizedTest\n     @MethodSource(\"deserializePrimitiveTypesSupplier\")\n-    public <T> void deserializePrimitiveTypes(InputStream avro, String schema, Class<T> clazz, T expected) {\n-        StepVerifier.create(getSerializer(schema).deserialize(avro, clazz))\n-            .assertNext(actual -> {\n-                assertTrue(clazz.isAssignableFrom(actual.getClass()));\n-                assertEquals(expected, actual);\n-            })\n+    public <T> void deserializePrimitiveTypes(InputStream avro, String schema, TypeReference<T> type, T expected) {\n+        StepVerifier.create(getSerializer(schema).deserialize(avro, type))\n+            .assertNext(actual -> assertEquals(expected, actual))\n             .verifyComplete();\n     }\n \n     private static Stream<Arguments> deserializePrimitiveTypesSupplier() {\n         return Stream.of(\n-            Arguments.of(streamCreator(0), schemaCreator(\"boolean\"), Boolean.class, false),\n-            Arguments.of(streamCreator(1), schemaCreator(\"boolean\"), Boolean.class, true),\n+            Arguments.of(streamCreator(0), schemaCreator(\"boolean\"), new TypeReference<Boolean>() { }, false),\n+            Arguments.of(streamCreator(1), schemaCreator(\"boolean\"), new TypeReference<Boolean>() { }, true),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4MzEzMQ=="}, "originalCommit": {"oid": "d205f95589b6e68a8839cbb15ec682139a8128d2"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyNjk4Mw==", "bodyText": "The best I can think of would be an API such as this.\n<T> TypeReference<T> createInstance(Class<T> clazz);\nWith a static cache of Map<Class<T>, TypeReference<T>>. This won't be able to handle ParameterizedType.\nIs this something we would need to GA this feature or could we add it later?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13492#discussion_r461926983", "createdAt": "2020-07-28T22:22:24Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-avro-apache/src/test/java/com/azure/core/serializer/avro/apache/ApacheAvroSerializerTests.java", "diffHunk": "@@ -54,61 +55,56 @@ private static ApacheAvroSerializer getSerializer(String schema) {\n \n     @ParameterizedTest\n     @MethodSource(\"deserializePrimitiveTypesSupplier\")\n-    public <T> void deserializePrimitiveTypes(InputStream avro, String schema, Class<T> clazz, T expected) {\n-        StepVerifier.create(getSerializer(schema).deserialize(avro, clazz))\n-            .assertNext(actual -> {\n-                assertTrue(clazz.isAssignableFrom(actual.getClass()));\n-                assertEquals(expected, actual);\n-            })\n+    public <T> void deserializePrimitiveTypes(InputStream avro, String schema, TypeReference<T> type, T expected) {\n+        StepVerifier.create(getSerializer(schema).deserialize(avro, type))\n+            .assertNext(actual -> assertEquals(expected, actual))\n             .verifyComplete();\n     }\n \n     private static Stream<Arguments> deserializePrimitiveTypesSupplier() {\n         return Stream.of(\n-            Arguments.of(streamCreator(0), schemaCreator(\"boolean\"), Boolean.class, false),\n-            Arguments.of(streamCreator(1), schemaCreator(\"boolean\"), Boolean.class, true),\n+            Arguments.of(streamCreator(0), schemaCreator(\"boolean\"), new TypeReference<Boolean>() { }, false),\n+            Arguments.of(streamCreator(1), schemaCreator(\"boolean\"), new TypeReference<Boolean>() { }, true),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4MzEzMQ=="}, "originalCommit": {"oid": "d205f95589b6e68a8839cbb15ec682139a8128d2"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyNzg0Mw==", "bodyText": "Adding this after GA would lead to 2 different ways of creating an instance of TypeReference - ctor and static method. So, we have to finalize this before GA.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13492#discussion_r461927843", "createdAt": "2020-07-28T22:24:40Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-serializer-avro-apache/src/test/java/com/azure/core/serializer/avro/apache/ApacheAvroSerializerTests.java", "diffHunk": "@@ -54,61 +55,56 @@ private static ApacheAvroSerializer getSerializer(String schema) {\n \n     @ParameterizedTest\n     @MethodSource(\"deserializePrimitiveTypesSupplier\")\n-    public <T> void deserializePrimitiveTypes(InputStream avro, String schema, Class<T> clazz, T expected) {\n-        StepVerifier.create(getSerializer(schema).deserialize(avro, clazz))\n-            .assertNext(actual -> {\n-                assertTrue(clazz.isAssignableFrom(actual.getClass()));\n-                assertEquals(expected, actual);\n-            })\n+    public <T> void deserializePrimitiveTypes(InputStream avro, String schema, TypeReference<T> type, T expected) {\n+        StepVerifier.create(getSerializer(schema).deserialize(avro, type))\n+            .assertNext(actual -> assertEquals(expected, actual))\n             .verifyComplete();\n     }\n \n     private static Stream<Arguments> deserializePrimitiveTypesSupplier() {\n         return Stream.of(\n-            Arguments.of(streamCreator(0), schemaCreator(\"boolean\"), Boolean.class, false),\n-            Arguments.of(streamCreator(1), schemaCreator(\"boolean\"), Boolean.class, true),\n+            Arguments.of(streamCreator(0), schemaCreator(\"boolean\"), new TypeReference<Boolean>() { }, false),\n+            Arguments.of(streamCreator(1), schemaCreator(\"boolean\"), new TypeReference<Boolean>() { }, true),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4MzEzMQ=="}, "originalCommit": {"oid": "d205f95589b6e68a8839cbb15ec682139a8128d2"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkzMTE5MQ==", "bodyText": "I would stick with using constructor as this matches patterns used in other similar concepts.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13492#discussion_r461931191", "createdAt": "2020-07-28T22:33:37Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-avro-apache/src/test/java/com/azure/core/serializer/avro/apache/ApacheAvroSerializerTests.java", "diffHunk": "@@ -54,61 +55,56 @@ private static ApacheAvroSerializer getSerializer(String schema) {\n \n     @ParameterizedTest\n     @MethodSource(\"deserializePrimitiveTypesSupplier\")\n-    public <T> void deserializePrimitiveTypes(InputStream avro, String schema, Class<T> clazz, T expected) {\n-        StepVerifier.create(getSerializer(schema).deserialize(avro, clazz))\n-            .assertNext(actual -> {\n-                assertTrue(clazz.isAssignableFrom(actual.getClass()));\n-                assertEquals(expected, actual);\n-            })\n+    public <T> void deserializePrimitiveTypes(InputStream avro, String schema, TypeReference<T> type, T expected) {\n+        StepVerifier.create(getSerializer(schema).deserialize(avro, type))\n+            .assertNext(actual -> assertEquals(expected, actual))\n             .verifyComplete();\n     }\n \n     private static Stream<Arguments> deserializePrimitiveTypesSupplier() {\n         return Stream.of(\n-            Arguments.of(streamCreator(0), schemaCreator(\"boolean\"), Boolean.class, false),\n-            Arguments.of(streamCreator(1), schemaCreator(\"boolean\"), Boolean.class, true),\n+            Arguments.of(streamCreator(0), schemaCreator(\"boolean\"), new TypeReference<Boolean>() { }, false),\n+            Arguments.of(streamCreator(1), schemaCreator(\"boolean\"), new TypeReference<Boolean>() { }, true),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4MzEzMQ=="}, "originalCommit": {"oid": "d205f95589b6e68a8839cbb15ec682139a8128d2"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4834, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}