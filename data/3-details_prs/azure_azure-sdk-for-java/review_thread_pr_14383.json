{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNzY3MDAy", "number": 14383, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzo1MjoxMFrOEcLkKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNDowMTo0OFrOEcZ0fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTg1MDY0OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-perf/src/main/java/com/azure/search/perf/core/ServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzo1MjoxMFrOHGjYJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODoyMjo0MVrOHGkaHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYzMzEyNA==", "bodyText": "justCurious why delay is added ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14383#discussion_r476633124", "createdAt": "2020-08-25T17:52:10Z", "author": {"login": "g2vinay"}, "path": "sdk/search/azure-search-perf/src/main/java/com/azure/search/perf/core/ServiceTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.perf.core;\n+\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.netty.NettyAsyncHttpClientBuilder;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.PerfStressTest;\n+import com.azure.search.documents.SearchAsyncClient;\n+import com.azure.search.documents.SearchClient;\n+import com.azure.search.documents.indexes.SearchIndexAsyncClient;\n+import com.azure.search.documents.indexes.SearchIndexClientBuilder;\n+import com.azure.search.documents.indexes.models.IndexDocumentsBatch;\n+import com.azure.search.documents.indexes.models.SearchIndex;\n+import com.azure.search.documents.indexes.models.SearchSuggester;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Random;\n+\n+/**\n+ * Base class for Azure Search performance tests.\n+ */\n+public abstract class ServiceTest<TOptions extends PerfStressOptions> extends PerfStressTest<TOptions> {\n+    private static final String CONFIGURATION_ERROR = \"Configuration %s must be set in either environment variables \"\n+        + \"or system properties.%n\";\n+    private static final String ALLOWED_INDEX_CHARACTERS = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n+    private static final int INDEX_NAME_LENGTH = 24;\n+\n+    protected static final String SUGGESTER_NAME = \"sg\";\n+\n+    protected final SearchClient searchClient;\n+    protected final SearchAsyncClient searchAsyncClient;\n+\n+    private final SearchIndexAsyncClient searchIndexAsyncClient;\n+    private final String indexName;\n+\n+    public ServiceTest(TOptions options) {\n+        super(options);\n+\n+        String searchEndpoint = Configuration.getGlobalConfiguration().get(\"SEARCH_ENDPOINT\");\n+        if (CoreUtils.isNullOrEmpty(searchEndpoint)) {\n+            System.out.printf(CONFIGURATION_ERROR, \"SEARCH_ENDPOINT\");\n+            System.exit(1);\n+        }\n+\n+        String searchApiKey = Configuration.getGlobalConfiguration().get(\"SEARCH_API_KEY\");\n+        if (CoreUtils.isNullOrEmpty(searchApiKey)) {\n+            System.out.printf(CONFIGURATION_ERROR, \"SEARCH_API_KEY\");\n+            System.exit(1);\n+        }\n+\n+        SearchIndexClientBuilder builder = new SearchIndexClientBuilder()\n+            .endpoint(searchEndpoint)\n+            .credential(new AzureKeyCredential(searchApiKey))\n+            .httpClient(new NettyAsyncHttpClientBuilder().build());\n+\n+        this.searchIndexAsyncClient = builder.buildAsyncClient();\n+\n+        Random random = new Random();\n+        StringBuilder stringBuilder = new StringBuilder();\n+        for (int i = 0; i < INDEX_NAME_LENGTH; i++) {\n+            stringBuilder.append(ALLOWED_INDEX_CHARACTERS.charAt(random.nextInt(ALLOWED_INDEX_CHARACTERS.length())));\n+        }\n+\n+        this.indexName = stringBuilder.toString();\n+\n+        this.searchClient = builder.buildClient().getSearchClient(this.indexName);\n+        this.searchAsyncClient = this.searchIndexAsyncClient.getSearchAsyncClient(this.indexName);\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        return searchIndexAsyncClient\n+            .createIndex(new SearchIndex(indexName, SearchIndexAsyncClient.buildSearchFields(Hotel.class, null))\n+                .setSuggesters(new SearchSuggester(SUGGESTER_NAME, Arrays.asList(\"Description\", \"HotelName\"))))\n+            .then();\n+    }\n+\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        return searchIndexAsyncClient.deleteIndex(indexName);\n+    }\n+\n+    protected Mono<Void> populateIndex(int documentCount, String documentSize) {\n+        /*\n+         * Generate the count of documents using the given size. Then, upload the documents in batches of 100, this\n+         * prevents the batch from triggering the services request size limit to fail. Finally, continuously poll the\n+         * index for its document count until it is equal to the count passed.\n+         */\n+        return Mono.defer(() -> {\n+            List<Hotel> hotels = DocumentGenerator.generateHotels(documentCount, DocumentSize.valueOf(documentSize));\n+\n+            return Flux.range(0, (int) Math.ceil(hotels.size() / 100D))\n+                .map(i -> hotels.subList(i * 100, Math.min((i + 1) * 100, hotels.size())))\n+                .flatMap(hotelDocuments -> searchAsyncClient.indexDocuments(new IndexDocumentsBatch<Hotel>()\n+                    .addUploadActions(hotelDocuments)))\n+                .then();\n+        }).then(Mono.defer(() -> searchAsyncClient.getDocumentCount()\n+            .delaySubscription(Duration.ofSeconds(1))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a982cac5d501f629a9d662ea50229d6b5279548"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY1MDAxMw==", "bodyText": "Document indexing doesn't always complete instantly, so I don't want to begin testing while it is still running nor do I want to spam the service with a ton of requests.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14383#discussion_r476650013", "createdAt": "2020-08-25T18:22:41Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-perf/src/main/java/com/azure/search/perf/core/ServiceTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.perf.core;\n+\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.netty.NettyAsyncHttpClientBuilder;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.PerfStressTest;\n+import com.azure.search.documents.SearchAsyncClient;\n+import com.azure.search.documents.SearchClient;\n+import com.azure.search.documents.indexes.SearchIndexAsyncClient;\n+import com.azure.search.documents.indexes.SearchIndexClientBuilder;\n+import com.azure.search.documents.indexes.models.IndexDocumentsBatch;\n+import com.azure.search.documents.indexes.models.SearchIndex;\n+import com.azure.search.documents.indexes.models.SearchSuggester;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Random;\n+\n+/**\n+ * Base class for Azure Search performance tests.\n+ */\n+public abstract class ServiceTest<TOptions extends PerfStressOptions> extends PerfStressTest<TOptions> {\n+    private static final String CONFIGURATION_ERROR = \"Configuration %s must be set in either environment variables \"\n+        + \"or system properties.%n\";\n+    private static final String ALLOWED_INDEX_CHARACTERS = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n+    private static final int INDEX_NAME_LENGTH = 24;\n+\n+    protected static final String SUGGESTER_NAME = \"sg\";\n+\n+    protected final SearchClient searchClient;\n+    protected final SearchAsyncClient searchAsyncClient;\n+\n+    private final SearchIndexAsyncClient searchIndexAsyncClient;\n+    private final String indexName;\n+\n+    public ServiceTest(TOptions options) {\n+        super(options);\n+\n+        String searchEndpoint = Configuration.getGlobalConfiguration().get(\"SEARCH_ENDPOINT\");\n+        if (CoreUtils.isNullOrEmpty(searchEndpoint)) {\n+            System.out.printf(CONFIGURATION_ERROR, \"SEARCH_ENDPOINT\");\n+            System.exit(1);\n+        }\n+\n+        String searchApiKey = Configuration.getGlobalConfiguration().get(\"SEARCH_API_KEY\");\n+        if (CoreUtils.isNullOrEmpty(searchApiKey)) {\n+            System.out.printf(CONFIGURATION_ERROR, \"SEARCH_API_KEY\");\n+            System.exit(1);\n+        }\n+\n+        SearchIndexClientBuilder builder = new SearchIndexClientBuilder()\n+            .endpoint(searchEndpoint)\n+            .credential(new AzureKeyCredential(searchApiKey))\n+            .httpClient(new NettyAsyncHttpClientBuilder().build());\n+\n+        this.searchIndexAsyncClient = builder.buildAsyncClient();\n+\n+        Random random = new Random();\n+        StringBuilder stringBuilder = new StringBuilder();\n+        for (int i = 0; i < INDEX_NAME_LENGTH; i++) {\n+            stringBuilder.append(ALLOWED_INDEX_CHARACTERS.charAt(random.nextInt(ALLOWED_INDEX_CHARACTERS.length())));\n+        }\n+\n+        this.indexName = stringBuilder.toString();\n+\n+        this.searchClient = builder.buildClient().getSearchClient(this.indexName);\n+        this.searchAsyncClient = this.searchIndexAsyncClient.getSearchAsyncClient(this.indexName);\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        return searchIndexAsyncClient\n+            .createIndex(new SearchIndex(indexName, SearchIndexAsyncClient.buildSearchFields(Hotel.class, null))\n+                .setSuggesters(new SearchSuggester(SUGGESTER_NAME, Arrays.asList(\"Description\", \"HotelName\"))))\n+            .then();\n+    }\n+\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        return searchIndexAsyncClient.deleteIndex(indexName);\n+    }\n+\n+    protected Mono<Void> populateIndex(int documentCount, String documentSize) {\n+        /*\n+         * Generate the count of documents using the given size. Then, upload the documents in batches of 100, this\n+         * prevents the batch from triggering the services request size limit to fail. Finally, continuously poll the\n+         * index for its document count until it is equal to the count passed.\n+         */\n+        return Mono.defer(() -> {\n+            List<Hotel> hotels = DocumentGenerator.generateHotels(documentCount, DocumentSize.valueOf(documentSize));\n+\n+            return Flux.range(0, (int) Math.ceil(hotels.size() / 100D))\n+                .map(i -> hotels.subList(i * 100, Math.min((i + 1) * 100, hotels.size())))\n+                .flatMap(hotelDocuments -> searchAsyncClient.indexDocuments(new IndexDocumentsBatch<Hotel>()\n+                    .addUploadActions(hotelDocuments)))\n+                .then();\n+        }).then(Mono.defer(() -> searchAsyncClient.getDocumentCount()\n+            .delaySubscription(Duration.ofSeconds(1))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYzMzEyNA=="}, "originalCommit": {"oid": "9a982cac5d501f629a9d662ea50229d6b5279548"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTkzMjgxOnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-perf/src/main/java/com/azure/search/perf/core/ServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODoxNjoxM1rOHGkMHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo0OTozMlrOHGpMWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0NjQyOQ==", "bodyText": "The indexName generation logic can be optionally replaced with this.\n this.indexName  =  random.ints(0, ALLOWED_INDEX_CHARACTERS.length())\n            .limit(INDEX_NAME_LENGTH)\n            .collect(StringBuilder::new, ((stringBuilder, value) -> stringBuilder.append(ALLOWED_INDEX_CHARACTERS.charAt(value))), StringBuilder::append)\n            .toString();", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14383#discussion_r476646429", "createdAt": "2020-08-25T18:16:13Z", "author": {"login": "g2vinay"}, "path": "sdk/search/azure-search-perf/src/main/java/com/azure/search/perf/core/ServiceTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.perf.core;\n+\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.netty.NettyAsyncHttpClientBuilder;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.PerfStressTest;\n+import com.azure.search.documents.SearchAsyncClient;\n+import com.azure.search.documents.SearchClient;\n+import com.azure.search.documents.indexes.SearchIndexAsyncClient;\n+import com.azure.search.documents.indexes.SearchIndexClientBuilder;\n+import com.azure.search.documents.indexes.models.IndexDocumentsBatch;\n+import com.azure.search.documents.indexes.models.SearchIndex;\n+import com.azure.search.documents.indexes.models.SearchSuggester;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Random;\n+\n+/**\n+ * Base class for Azure Search performance tests.\n+ */\n+public abstract class ServiceTest<TOptions extends PerfStressOptions> extends PerfStressTest<TOptions> {\n+    private static final String CONFIGURATION_ERROR = \"Configuration %s must be set in either environment variables \"\n+        + \"or system properties.%n\";\n+    private static final String ALLOWED_INDEX_CHARACTERS = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n+    private static final int INDEX_NAME_LENGTH = 24;\n+\n+    protected static final String SUGGESTER_NAME = \"sg\";\n+\n+    protected final SearchClient searchClient;\n+    protected final SearchAsyncClient searchAsyncClient;\n+\n+    private final SearchIndexAsyncClient searchIndexAsyncClient;\n+    private final String indexName;\n+\n+    public ServiceTest(TOptions options) {\n+        super(options);\n+\n+        String searchEndpoint = Configuration.getGlobalConfiguration().get(\"SEARCH_ENDPOINT\");\n+        if (CoreUtils.isNullOrEmpty(searchEndpoint)) {\n+            System.out.printf(CONFIGURATION_ERROR, \"SEARCH_ENDPOINT\");\n+            System.exit(1);\n+        }\n+\n+        String searchApiKey = Configuration.getGlobalConfiguration().get(\"SEARCH_API_KEY\");\n+        if (CoreUtils.isNullOrEmpty(searchApiKey)) {\n+            System.out.printf(CONFIGURATION_ERROR, \"SEARCH_API_KEY\");\n+            System.exit(1);\n+        }\n+\n+        SearchIndexClientBuilder builder = new SearchIndexClientBuilder()\n+            .endpoint(searchEndpoint)\n+            .credential(new AzureKeyCredential(searchApiKey))\n+            .httpClient(new NettyAsyncHttpClientBuilder().build());\n+\n+        this.searchIndexAsyncClient = builder.buildAsyncClient();\n+\n+        Random random = new Random();\n+        StringBuilder stringBuilder = new StringBuilder();\n+        for (int i = 0; i < INDEX_NAME_LENGTH; i++) {\n+            stringBuilder.append(ALLOWED_INDEX_CHARACTERS.charAt(random.nextInt(ALLOWED_INDEX_CHARACTERS.length())));\n+        }\n+\n+        this.indexName = stringBuilder.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a982cac5d501f629a9d662ea50229d6b5279548"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcyODQwOQ==", "bodyText": "Will do a slight variant on this, using random.ints(long streamSize, int lowerBound, int upperBound).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14383#discussion_r476728409", "createdAt": "2020-08-25T20:49:32Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-perf/src/main/java/com/azure/search/perf/core/ServiceTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.perf.core;\n+\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.netty.NettyAsyncHttpClientBuilder;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.PerfStressTest;\n+import com.azure.search.documents.SearchAsyncClient;\n+import com.azure.search.documents.SearchClient;\n+import com.azure.search.documents.indexes.SearchIndexAsyncClient;\n+import com.azure.search.documents.indexes.SearchIndexClientBuilder;\n+import com.azure.search.documents.indexes.models.IndexDocumentsBatch;\n+import com.azure.search.documents.indexes.models.SearchIndex;\n+import com.azure.search.documents.indexes.models.SearchSuggester;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Random;\n+\n+/**\n+ * Base class for Azure Search performance tests.\n+ */\n+public abstract class ServiceTest<TOptions extends PerfStressOptions> extends PerfStressTest<TOptions> {\n+    private static final String CONFIGURATION_ERROR = \"Configuration %s must be set in either environment variables \"\n+        + \"or system properties.%n\";\n+    private static final String ALLOWED_INDEX_CHARACTERS = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n+    private static final int INDEX_NAME_LENGTH = 24;\n+\n+    protected static final String SUGGESTER_NAME = \"sg\";\n+\n+    protected final SearchClient searchClient;\n+    protected final SearchAsyncClient searchAsyncClient;\n+\n+    private final SearchIndexAsyncClient searchIndexAsyncClient;\n+    private final String indexName;\n+\n+    public ServiceTest(TOptions options) {\n+        super(options);\n+\n+        String searchEndpoint = Configuration.getGlobalConfiguration().get(\"SEARCH_ENDPOINT\");\n+        if (CoreUtils.isNullOrEmpty(searchEndpoint)) {\n+            System.out.printf(CONFIGURATION_ERROR, \"SEARCH_ENDPOINT\");\n+            System.exit(1);\n+        }\n+\n+        String searchApiKey = Configuration.getGlobalConfiguration().get(\"SEARCH_API_KEY\");\n+        if (CoreUtils.isNullOrEmpty(searchApiKey)) {\n+            System.out.printf(CONFIGURATION_ERROR, \"SEARCH_API_KEY\");\n+            System.exit(1);\n+        }\n+\n+        SearchIndexClientBuilder builder = new SearchIndexClientBuilder()\n+            .endpoint(searchEndpoint)\n+            .credential(new AzureKeyCredential(searchApiKey))\n+            .httpClient(new NettyAsyncHttpClientBuilder().build());\n+\n+        this.searchIndexAsyncClient = builder.buildAsyncClient();\n+\n+        Random random = new Random();\n+        StringBuilder stringBuilder = new StringBuilder();\n+        for (int i = 0; i < INDEX_NAME_LENGTH; i++) {\n+            stringBuilder.append(ALLOWED_INDEX_CHARACTERS.charAt(random.nextInt(ALLOWED_INDEX_CHARACTERS.length())));\n+        }\n+\n+        this.indexName = stringBuilder.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0NjQyOQ=="}, "originalCommit": {"oid": "9a982cac5d501f629a9d662ea50229d6b5279548"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTkzODE0OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-perf/src/main/java/com/azure/search/perf/Autocomplete.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODoxNzo0MFrOHGkPTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODoyMzoxNVrOHGkbaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0NzI0NQ==", "bodyText": "Add Test Suffix to the Test Name ?\nTo have them identify as Test classes ?\nWill also make it consistent with the naming pattern in other perf test projects.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14383#discussion_r476647245", "createdAt": "2020-08-25T18:17:40Z", "author": {"login": "g2vinay"}, "path": "sdk/search/azure-search-perf/src/main/java/com/azure/search/perf/Autocomplete.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.perf;\n+\n+import com.azure.search.documents.models.AutocompleteItem;\n+import com.azure.search.perf.core.SearchPerfStressOptions;\n+import com.azure.search.perf.core.ServiceTest;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Performs autocomplete operations.\n+ */\n+public class Autocomplete extends ServiceTest<SearchPerfStressOptions> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a982cac5d501f629a9d662ea50229d6b5279548"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY1MDM0NA==", "bodyText": "Will add Test suffix to all test classes.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14383#discussion_r476650344", "createdAt": "2020-08-25T18:23:15Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-perf/src/main/java/com/azure/search/perf/Autocomplete.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.perf;\n+\n+import com.azure.search.documents.models.AutocompleteItem;\n+import com.azure.search.perf.core.SearchPerfStressOptions;\n+import com.azure.search.perf.core.ServiceTest;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Performs autocomplete operations.\n+ */\n+public class Autocomplete extends ServiceTest<SearchPerfStressOptions> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0NzI0NQ=="}, "originalCommit": {"oid": "9a982cac5d501f629a9d662ea50229d6b5279548"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDExMzQ3OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-perf/src/main/java/com/azure/search/perf/Autocomplete.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOTowNzozMFrOHGl8aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo0NToxNlrOHGpEFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY3NTE3OQ==", "bodyText": "Do we need some sort of validation that at least one item is received? since .then() just replays a complete/error signal.. is it possible autocomplete returns mono.empty() and this will still pass.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14383#discussion_r476675179", "createdAt": "2020-08-25T19:07:30Z", "author": {"login": "conniey"}, "path": "sdk/search/azure-search-perf/src/main/java/com/azure/search/perf/Autocomplete.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.perf;\n+\n+import com.azure.search.documents.models.AutocompleteItem;\n+import com.azure.search.perf.core.SearchPerfStressOptions;\n+import com.azure.search.perf.core.ServiceTest;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Performs autocomplete operations.\n+ */\n+public class Autocomplete extends ServiceTest<SearchPerfStressOptions> {\n+    public Autocomplete(SearchPerfStressOptions options) {\n+        super(options);\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        /*\n+         * First, run the global setup in the super class. That will create the index to be used for performance\n+         * testing. Then populate the index with a given number of documents.\n+         */\n+        return super.globalSetupAsync().then(populateIndex(options.getCount(), options.getDocumentSize()));\n+    }\n+\n+    @Override\n+    public void run() {\n+        searchClient.autocomplete(\"historic\", SUGGESTER_NAME).forEach(AutocompleteItem::getText);\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return searchAsyncClient.autocomplete(\"historic\", SUGGESTER_NAME)\n+            .map(AutocompleteItem::getText)\n+            .then();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a982cac5d501f629a9d662ea50229d6b5279548"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcyNjI5Mg==", "bodyText": "Should be simple to add in validation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14383#discussion_r476726292", "createdAt": "2020-08-25T20:45:16Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-perf/src/main/java/com/azure/search/perf/Autocomplete.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.perf;\n+\n+import com.azure.search.documents.models.AutocompleteItem;\n+import com.azure.search.perf.core.SearchPerfStressOptions;\n+import com.azure.search.perf.core.ServiceTest;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Performs autocomplete operations.\n+ */\n+public class Autocomplete extends ServiceTest<SearchPerfStressOptions> {\n+    public Autocomplete(SearchPerfStressOptions options) {\n+        super(options);\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        /*\n+         * First, run the global setup in the super class. That will create the index to be used for performance\n+         * testing. Then populate the index with a given number of documents.\n+         */\n+        return super.globalSetupAsync().then(populateIndex(options.getCount(), options.getDocumentSize()));\n+    }\n+\n+    @Override\n+    public void run() {\n+        searchClient.autocomplete(\"historic\", SUGGESTER_NAME).forEach(AutocompleteItem::getText);\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return searchAsyncClient.autocomplete(\"historic\", SUGGESTER_NAME)\n+            .map(AutocompleteItem::getText)\n+            .then();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY3NTE3OQ=="}, "originalCommit": {"oid": "9a982cac5d501f629a9d662ea50229d6b5279548"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDExNDU3OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-perf/src/main/java/com/azure/search/perf/Autocomplete.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOTowNzo1MFrOHGl9Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOTowNzo1MFrOHGl9Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY3NTM1NA==", "bodyText": "Some validation that we get at least one item?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14383#discussion_r476675354", "createdAt": "2020-08-25T19:07:50Z", "author": {"login": "conniey"}, "path": "sdk/search/azure-search-perf/src/main/java/com/azure/search/perf/Autocomplete.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.perf;\n+\n+import com.azure.search.documents.models.AutocompleteItem;\n+import com.azure.search.perf.core.SearchPerfStressOptions;\n+import com.azure.search.perf.core.ServiceTest;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Performs autocomplete operations.\n+ */\n+public class Autocomplete extends ServiceTest<SearchPerfStressOptions> {\n+    public Autocomplete(SearchPerfStressOptions options) {\n+        super(options);\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        /*\n+         * First, run the global setup in the super class. That will create the index to be used for performance\n+         * testing. Then populate the index with a given number of documents.\n+         */\n+        return super.globalSetupAsync().then(populateIndex(options.getCount(), options.getDocumentSize()));\n+    }\n+\n+    @Override\n+    public void run() {\n+        searchClient.autocomplete(\"historic\", SUGGESTER_NAME).forEach(AutocompleteItem::getText);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a982cac5d501f629a9d662ea50229d6b5279548"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjE4NjIwOnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-perf/src/main/java/com/azure/search/perf/AutocompleteTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNDowMTo0OFrOHG6-Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjo1NjowM1rOHHVK6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAxOTczNA==", "bodyText": "just checking,\nDoes the Rest API contract always guarantee a response when response code is 200 ?\nHere and other spots below too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14383#discussion_r477019734", "createdAt": "2020-08-26T04:01:48Z", "author": {"login": "g2vinay"}, "path": "sdk/search/azure-search-perf/src/main/java/com/azure/search/perf/AutocompleteTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.perf;\n+\n+import com.azure.search.perf.core.SearchPerfStressOptions;\n+import com.azure.search.perf.core.ServiceTest;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Performs autocomplete operations.\n+ */\n+public class AutocompleteTest extends ServiceTest<SearchPerfStressOptions> {\n+    public AutocompleteTest(SearchPerfStressOptions options) {\n+        super(options);\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        /*\n+         * First, run the global setup in the super class. That will create the index to be used for performance\n+         * testing. Then populate the index with a given number of documents.\n+         */\n+        return super.globalSetupAsync().then(populateIndex(options.getCount(), options.getDocumentSize()));\n+    }\n+\n+    @Override\n+    public void run() {\n+        AtomicInteger count = new AtomicInteger();\n+        searchClient.autocomplete(\"historic\", SUGGESTER_NAME).iterator()\n+            .forEachRemaining(ignored -> count.incrementAndGet());\n+\n+        assert count.get() > 0;\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return searchAsyncClient.autocomplete(\"historic\", SUGGESTER_NAME)\n+            .count()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c50e5307f927f32d2883c0bb9c0fede1b3cf6855"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0ODkzNg==", "bodyText": "There is never a complete guarantee on the request being successful, for performance tests how should be handle the case were an operation fails? Do we prevent that iteration from being counted in the metrics?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14383#discussion_r477448936", "createdAt": "2020-08-26T16:56:03Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-perf/src/main/java/com/azure/search/perf/AutocompleteTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.perf;\n+\n+import com.azure.search.perf.core.SearchPerfStressOptions;\n+import com.azure.search.perf.core.ServiceTest;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Performs autocomplete operations.\n+ */\n+public class AutocompleteTest extends ServiceTest<SearchPerfStressOptions> {\n+    public AutocompleteTest(SearchPerfStressOptions options) {\n+        super(options);\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        /*\n+         * First, run the global setup in the super class. That will create the index to be used for performance\n+         * testing. Then populate the index with a given number of documents.\n+         */\n+        return super.globalSetupAsync().then(populateIndex(options.getCount(), options.getDocumentSize()));\n+    }\n+\n+    @Override\n+    public void run() {\n+        AtomicInteger count = new AtomicInteger();\n+        searchClient.autocomplete(\"historic\", SUGGESTER_NAME).iterator()\n+            .forEachRemaining(ignored -> count.incrementAndGet());\n+\n+        assert count.get() > 0;\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return searchAsyncClient.autocomplete(\"historic\", SUGGESTER_NAME)\n+            .count()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAxOTczNA=="}, "originalCommit": {"oid": "c50e5307f927f32d2883c0bb9c0fede1b3cf6855"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1500, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}