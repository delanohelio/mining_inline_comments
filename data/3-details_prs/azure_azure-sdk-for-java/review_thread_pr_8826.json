{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MDUyMDg0", "number": 8826, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzozOToyMFrODmZa0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzozOToyMFrODmZa0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTg4OTQ3OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzozOToyMFrOFzyrjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODozMTo0MFrOFz0hLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg1MjA0NQ==", "bodyText": "don't feel too strongly about this but could we make this logic protected in regular Blob so its not duplicated?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8826#discussion_r389852045", "createdAt": "2020-03-09T17:39:20Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobClient.java", "diffHunk": "@@ -109,6 +116,32 @@ public BlobOutputStream getBlobOutputStream(ParallelTransferOptions parallelTran\n             metadata, tier, requestConditions);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void uploadWithResponse(InputStream data, long length, ParallelTransferOptions parallelTransferOptions,\n+        BlobHttpHeaders headers, Map<String, String> metadata, AccessTier tier, BlobRequestConditions requestConditions,\n+        Duration timeout, Context context) {\n+        final ParallelTransferOptions validatedParallelTransferOptions =\n+            ModelHelper.populateAndApplyDefaults(parallelTransferOptions);\n+\n+        // BlobOutputStream passes to buffered upload, which has logic for switching based on stream size\n+        BlobOutputStream blobOutputStream = BlobOutputStream.blockBlobOutputStream(encryptedBlobAsyncClient,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e32e4fdd52465a085b1a26048643ca41863267d2"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg4MjE1OA==", "bodyText": "Good call!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8826#discussion_r389882158", "createdAt": "2020-03-09T18:31:40Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobClient.java", "diffHunk": "@@ -109,6 +116,32 @@ public BlobOutputStream getBlobOutputStream(ParallelTransferOptions parallelTran\n             metadata, tier, requestConditions);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void uploadWithResponse(InputStream data, long length, ParallelTransferOptions parallelTransferOptions,\n+        BlobHttpHeaders headers, Map<String, String> metadata, AccessTier tier, BlobRequestConditions requestConditions,\n+        Duration timeout, Context context) {\n+        final ParallelTransferOptions validatedParallelTransferOptions =\n+            ModelHelper.populateAndApplyDefaults(parallelTransferOptions);\n+\n+        // BlobOutputStream passes to buffered upload, which has logic for switching based on stream size\n+        BlobOutputStream blobOutputStream = BlobOutputStream.blockBlobOutputStream(encryptedBlobAsyncClient,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg1MjA0NQ=="}, "originalCommit": {"oid": "e32e4fdd52465a085b1a26048643ca41863267d2"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 276, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}