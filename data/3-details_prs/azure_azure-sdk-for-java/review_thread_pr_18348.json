{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1MTc2MDc2", "number": 18348, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMjoyODozOFrOFJomOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMjozMjozMlrOFJooOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjQ2NjUwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/microsoft-azure-servicebus/src/main/java/com/microsoft/azure/servicebus/MessageAndSessionPump.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMjoyODozOFrOIMDMKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMjoyODozOFrOIMDMKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUwNjA4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                \t\tCompletableFuture<IMessage> excetionalFuture = new CompletableFuture<IMessage>();\n          \n          \n            \n                \t\tCompletableFuture<IMessage> exceptionalFuture = new CompletableFuture<IMessage>();", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18348#discussion_r549506088", "createdAt": "2020-12-28T22:28:38Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/microsoft-azure-servicebus/src/main/java/com/microsoft/azure/servicebus/MessageAndSessionPump.java", "diffHunk": "@@ -839,6 +839,58 @@ private void notifyExceptionToMessageHandler(Throwable ex, ExceptionPhase phase)\n             this.customCodeExecutor.execute(() -> this.messageHandler.notifyException(ex, phase));\n         }\n     }\n+    \n+    // These wrappers catch any synchronous exceptions and properly complete completablefutures with those excetions.\n+    // Callers of these methods don't expect any synchronous exceptions.\n+    private static CompletableFuture<IMessage> receiveAsyncWrapper(IMessageReceiver receiver, Duration serverWaitTime) {\n+    \ttry\t{\n+    \t\treturn receiver.receiveAsync(serverWaitTime);\n+    \t} catch (Throwable t) {\n+    \t\tCompletableFuture<IMessage> excetionalFuture = new CompletableFuture<IMessage>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16b074b6ba543d7ccc63efd383b8aef923fc4997"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjQ3MTYyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/microsoft-azure-servicebus/src/main/java/com/microsoft/azure/servicebus/MessageAndSessionPump.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMjozMjozMlrOIMDO7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMjozMjozMlrOIMDO7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUwNjc5Nw==", "bodyText": "nit: exceptionalFuture - fix this typo in other places too", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18348#discussion_r549506797", "createdAt": "2020-12-28T22:32:32Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/microsoft-azure-servicebus/src/main/java/com/microsoft/azure/servicebus/MessageAndSessionPump.java", "diffHunk": "@@ -839,6 +839,58 @@ private void notifyExceptionToMessageHandler(Throwable ex, ExceptionPhase phase)\n             this.customCodeExecutor.execute(() -> this.messageHandler.notifyException(ex, phase));\n         }\n     }\n+    \n+    // These wrappers catch any synchronous exceptions and properly complete completablefutures with those excetions.\n+    // Callers of these methods don't expect any synchronous exceptions.\n+    private static CompletableFuture<IMessage> receiveAsyncWrapper(IMessageReceiver receiver, Duration serverWaitTime) {\n+    \ttry\t{\n+    \t\treturn receiver.receiveAsync(serverWaitTime);\n+    \t} catch (Throwable t) {\n+    \t\tCompletableFuture<IMessage> excetionalFuture = new CompletableFuture<IMessage>();\n+    \t\texcetionalFuture.completeExceptionally(t);\n+    \t\treturn excetionalFuture;\n+    \t}\n+    }\n+    \n+    private static CompletableFuture<Void> completeAsyncWrapper(IMessageReceiver receiver, UUID lockToken) {\n+    \ttry\t{\n+    \t\treturn receiver.completeAsync(lockToken);\n+    \t} catch (Throwable t) {\n+    \t\tCompletableFuture<Void> excetionalFuture = new CompletableFuture<Void>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16b074b6ba543d7ccc63efd383b8aef923fc4997"}, "originalPosition": 93}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2517, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}