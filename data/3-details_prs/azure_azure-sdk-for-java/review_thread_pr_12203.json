{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0Nzg0MzYx", "number": 12203, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMjozNzo1NVrOEFuE0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMTo0NzowMlrOEHPp5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDMzMjM1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/CollectionGeometry.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMjozNzo1NVrOGkFFEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjo1OTozMlrOGkkxoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4NTEzNw==", "bodyText": "Does the spec call it CollectionGeometry, or is this just your choice? GeometryCollection would make more sense otherwise?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r440485137", "createdAt": "2020-06-15T22:37:55Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/CollectionGeometry.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+/**\n+ * Represents a heterogeneous collection of {@link Geometry geometries}.\n+ */\n+public final class CollectionGeometry extends Geometry {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4NTQ3OQ==", "bodyText": "Also, is it weird to anyone else that a CollectionGeometry is a Geometry?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r440485479", "createdAt": "2020-06-15T22:38:56Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/CollectionGeometry.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+/**\n+ * Represents a heterogeneous collection of {@link Geometry geometries}.\n+ */\n+public final class CollectionGeometry extends Geometry {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4NTEzNw=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5MzkzNw==", "bodyText": "It is a bit weird but it follows in the definition of the RFC. https://tools.ietf.org/html/rfc7946#section-3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r440493937", "createdAt": "2020-06-15T23:05:14Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/CollectionGeometry.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+/**\n+ * Represents a heterogeneous collection of {@link Geometry geometries}.\n+ */\n+public final class CollectionGeometry extends Geometry {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4NTEzNw=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyODM5MQ==", "bodyText": "Ok - but you'll rename this to GeometryCollection?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r440528391", "createdAt": "2020-06-16T01:04:40Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/CollectionGeometry.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+/**\n+ * Represents a heterogeneous collection of {@link Geometry geometries}.\n+ */\n+public final class CollectionGeometry extends Geometry {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4NTEzNw=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwNDQ0OQ==", "bodyText": "I think I'm going to keep the name as is for the reason that all other Geometry sub types are using the naming pattern <Type>Geometry (PointGeometry, PolygonGeometry). Switching this to GeometryCollection would cause it to be the only one which goes against that pattern.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441004449", "createdAt": "2020-06-16T16:59:32Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/CollectionGeometry.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+/**\n+ * Represents a heterogeneous collection of {@link Geometry geometries}.\n+ */\n+public final class CollectionGeometry extends Geometry {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4NTEzNw=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDMzNTM1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/CollectionGeometry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMjozOToyN1rOGkFHFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzowNTo1N1rOGkFofg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4NTY1NA==", "bodyText": "Collection isn't the most useful type in Java - should we do something more useful, such as List or Set?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r440485654", "createdAt": "2020-06-15T22:39:27Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/CollectionGeometry.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+/**\n+ * Represents a heterogeneous collection of {@link Geometry geometries}.\n+ */\n+public final class CollectionGeometry extends Geometry {\n+    private final Collection<Geometry> geometries;\n+\n+    /**\n+     * Constructs a geometry collection.\n+     *\n+     * @param geometries The geometries in the collection.\n+     */\n+    public CollectionGeometry(Collection<Geometry> geometries) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5NDIwNg==", "bodyText": "I'll change this to a list.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r440494206", "createdAt": "2020-06-15T23:05:57Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/CollectionGeometry.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+/**\n+ * Represents a heterogeneous collection of {@link Geometry geometries}.\n+ */\n+public final class CollectionGeometry extends Geometry {\n+    private final Collection<Geometry> geometries;\n+\n+    /**\n+     * Constructs a geometry collection.\n+     *\n+     * @param geometries The geometries in the collection.\n+     */\n+    public CollectionGeometry(Collection<Geometry> geometries) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4NTY1NA=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDMzOTQ1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/GeometryBoundingBox.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMjo0MTowNlrOGkFJjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzowOToxNFrOGklHgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4NjI4NA==", "bodyText": "Should there be validation on these values?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r440486284", "createdAt": "2020-06-15T22:41:06Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/GeometryBoundingBox.java", "diffHunk": "@@ -0,0 +1,103 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+/**\n+ * Represents a geometric bounding box.\n+ */\n+public final class GeometryBoundingBox {\n+    private final double west;\n+    private final double south;\n+    private final double east;\n+    private final double north;\n+\n+    private final Double minAltitude;\n+    private final Double maxAltitude;\n+\n+    /**\n+     * Constructs a bounding box.\n+     *\n+     * @param west West longitudinal boundary.\n+     * @param south South latitudinal boundary.\n+     * @param east East longitudinal boundary.\n+     * @param north North latitudinal boundary.\n+     */\n+    public GeometryBoundingBox(double west, double south, double east, double north) {\n+        this(west, south, east, north, null, null);\n+    }\n+\n+    /**\n+     * Constructs a bounding box.\n+     *\n+     * @param west West longitudinal boundary.\n+     * @param south South latitudinal boundary.\n+     * @param east East longitudinal boundary.\n+     * @param north North latitudinal boundary.\n+     * @param minAltitude Minimum altitude boundary.\n+     * @param maxAltitude Maximum altitude boundary.\n+     */\n+    public GeometryBoundingBox(double west, double south, double east, double north, Double minAltitude,\n+        Double maxAltitude) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5NjUyOQ==", "bodyText": "Could be, west/east are longitudes which should be between +/- 180, south/north are latitudes which should be between +/- 90.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r440496529", "createdAt": "2020-06-15T23:13:48Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/GeometryBoundingBox.java", "diffHunk": "@@ -0,0 +1,103 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+/**\n+ * Represents a geometric bounding box.\n+ */\n+public final class GeometryBoundingBox {\n+    private final double west;\n+    private final double south;\n+    private final double east;\n+    private final double north;\n+\n+    private final Double minAltitude;\n+    private final Double maxAltitude;\n+\n+    /**\n+     * Constructs a bounding box.\n+     *\n+     * @param west West longitudinal boundary.\n+     * @param south South latitudinal boundary.\n+     * @param east East longitudinal boundary.\n+     * @param north North latitudinal boundary.\n+     */\n+    public GeometryBoundingBox(double west, double south, double east, double north) {\n+        this(west, south, east, north, null, null);\n+    }\n+\n+    /**\n+     * Constructs a bounding box.\n+     *\n+     * @param west West longitudinal boundary.\n+     * @param south South latitudinal boundary.\n+     * @param east East longitudinal boundary.\n+     * @param north North latitudinal boundary.\n+     * @param minAltitude Minimum altitude boundary.\n+     * @param maxAltitude Maximum altitude boundary.\n+     */\n+    public GeometryBoundingBox(double west, double south, double east, double north, Double minAltitude,\n+        Double maxAltitude) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4NjI4NA=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwNDQ1Mw==", "bodyText": "I wouldn't do any extra validation here. These values can be in meters too. We should keep these object as much of DTOs as possible and let services to the validation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441004453", "createdAt": "2020-06-16T16:59:32Z", "author": {"login": "pakrym"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/GeometryBoundingBox.java", "diffHunk": "@@ -0,0 +1,103 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+/**\n+ * Represents a geometric bounding box.\n+ */\n+public final class GeometryBoundingBox {\n+    private final double west;\n+    private final double south;\n+    private final double east;\n+    private final double north;\n+\n+    private final Double minAltitude;\n+    private final Double maxAltitude;\n+\n+    /**\n+     * Constructs a bounding box.\n+     *\n+     * @param west West longitudinal boundary.\n+     * @param south South latitudinal boundary.\n+     * @param east East longitudinal boundary.\n+     * @param north North latitudinal boundary.\n+     */\n+    public GeometryBoundingBox(double west, double south, double east, double north) {\n+        this(west, south, east, north, null, null);\n+    }\n+\n+    /**\n+     * Constructs a bounding box.\n+     *\n+     * @param west West longitudinal boundary.\n+     * @param south South latitudinal boundary.\n+     * @param east East longitudinal boundary.\n+     * @param north North latitudinal boundary.\n+     * @param minAltitude Minimum altitude boundary.\n+     * @param maxAltitude Maximum altitude boundary.\n+     */\n+    public GeometryBoundingBox(double west, double south, double east, double north, Double minAltitude,\n+        Double maxAltitude) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4NjI4NA=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwNTM5Nw==", "bodyText": "This raises the question on whether we should validate additional constructors as well. For example a polygon type the first and last point in its points need to be the same coordinate, crossing the anti-meridian requires changing type (line to multi-line). The other option is keeping validation localized to simple scenarios such as this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441005397", "createdAt": "2020-06-16T17:01:08Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/GeometryBoundingBox.java", "diffHunk": "@@ -0,0 +1,103 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+/**\n+ * Represents a geometric bounding box.\n+ */\n+public final class GeometryBoundingBox {\n+    private final double west;\n+    private final double south;\n+    private final double east;\n+    private final double north;\n+\n+    private final Double minAltitude;\n+    private final Double maxAltitude;\n+\n+    /**\n+     * Constructs a bounding box.\n+     *\n+     * @param west West longitudinal boundary.\n+     * @param south South latitudinal boundary.\n+     * @param east East longitudinal boundary.\n+     * @param north North latitudinal boundary.\n+     */\n+    public GeometryBoundingBox(double west, double south, double east, double north) {\n+        this(west, south, east, north, null, null);\n+    }\n+\n+    /**\n+     * Constructs a bounding box.\n+     *\n+     * @param west West longitudinal boundary.\n+     * @param south South latitudinal boundary.\n+     * @param east East longitudinal boundary.\n+     * @param north North latitudinal boundary.\n+     * @param minAltitude Minimum altitude boundary.\n+     * @param maxAltitude Maximum altitude boundary.\n+     */\n+    public GeometryBoundingBox(double west, double south, double east, double north, Double minAltitude,\n+        Double maxAltitude) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4NjI4NA=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxMDA1MQ==", "bodyText": "I avoided any validation all together, send whatever customer puts into the object and exposed whatever service returned. We don't implement any operations on geometries on the client side so we don't care about data being valid in any way.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441010051", "createdAt": "2020-06-16T17:09:14Z", "author": {"login": "pakrym"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/GeometryBoundingBox.java", "diffHunk": "@@ -0,0 +1,103 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+/**\n+ * Represents a geometric bounding box.\n+ */\n+public final class GeometryBoundingBox {\n+    private final double west;\n+    private final double south;\n+    private final double east;\n+    private final double north;\n+\n+    private final Double minAltitude;\n+    private final Double maxAltitude;\n+\n+    /**\n+     * Constructs a bounding box.\n+     *\n+     * @param west West longitudinal boundary.\n+     * @param south South latitudinal boundary.\n+     * @param east East longitudinal boundary.\n+     * @param north North latitudinal boundary.\n+     */\n+    public GeometryBoundingBox(double west, double south, double east, double north) {\n+        this(west, south, east, north, null, null);\n+    }\n+\n+    /**\n+     * Constructs a bounding box.\n+     *\n+     * @param west West longitudinal boundary.\n+     * @param south South latitudinal boundary.\n+     * @param east East longitudinal boundary.\n+     * @param north North latitudinal boundary.\n+     * @param minAltitude Minimum altitude boundary.\n+     * @param maxAltitude Maximum altitude boundary.\n+     */\n+    public GeometryBoundingBox(double west, double south, double east, double north, Double minAltitude,\n+        Double maxAltitude) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4NjI4NA=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDM0MjI3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/GeometryPosition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMjo0MjoyMlrOGkFLWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzowMjozMFrOGkk4Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4Njc0Ng==", "bodyText": "I understand why you have Double type in these places, but I'm not super fond of it. I would wonder if we should have a boolean check that clarifies if it has been set or not.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r440486746", "createdAt": "2020-06-15T22:42:22Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/GeometryPosition.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+/**\n+ * Represents a geometric position.\n+ */\n+public final class GeometryPosition {\n+    private final double longitude;\n+    private final double latitude;\n+\n+    private final Double altitude;\n+\n+    /**\n+     * Constructs a geometric position.\n+     *\n+     * @param longitude Longitudinal position.\n+     * @param latitude Latitudinal position.\n+     */\n+    public GeometryPosition(double longitude, double latitude) {\n+        this(longitude, latitude, null);\n+    }\n+\n+    /**\n+     * Constructs a geometric position.\n+     *\n+     * @param longitude Longitudinal position.\n+     * @param latitude Latitudinal position.\n+     * @param altitude Altitude position.\n+     */\n+    public GeometryPosition(double longitude, double latitude, Double altitude) {\n+        this.longitude = longitude;\n+        this.latitude = latitude;\n+        this.altitude = altitude;\n+    }\n+\n+    /**\n+     * The longitudinal position of the geometric position.\n+     *\n+     * @return The longitudinal position.\n+     */\n+    public double getLongitude() {\n+        return longitude;\n+    }\n+\n+    /**\n+     * The latitudinal position of the geometric position.\n+     *\n+     * @return The latitudinal position.\n+     */\n+    public double getLatitude() {\n+        return latitude;\n+    }\n+\n+    /**\n+     * The altitude of the geometric position.\n+     *\n+     * @return The altitude.\n+     */\n+    public Double getAltitude() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwNjEzOA==", "bodyText": "I can add APIs such hasAltitude, hasMinAltitude, hasMaxAltitude for the scenarios where we have null-able geoposition data. Do you feel that these add enough benefit for having additional APIs?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441006138", "createdAt": "2020-06-16T17:02:30Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/GeometryPosition.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+/**\n+ * Represents a geometric position.\n+ */\n+public final class GeometryPosition {\n+    private final double longitude;\n+    private final double latitude;\n+\n+    private final Double altitude;\n+\n+    /**\n+     * Constructs a geometric position.\n+     *\n+     * @param longitude Longitudinal position.\n+     * @param latitude Latitudinal position.\n+     */\n+    public GeometryPosition(double longitude, double latitude) {\n+        this(longitude, latitude, null);\n+    }\n+\n+    /**\n+     * Constructs a geometric position.\n+     *\n+     * @param longitude Longitudinal position.\n+     * @param latitude Latitudinal position.\n+     * @param altitude Altitude position.\n+     */\n+    public GeometryPosition(double longitude, double latitude, Double altitude) {\n+        this.longitude = longitude;\n+        this.latitude = latitude;\n+        this.altitude = altitude;\n+    }\n+\n+    /**\n+     * The longitudinal position of the geometric position.\n+     *\n+     * @return The longitudinal position.\n+     */\n+    public double getLongitude() {\n+        return longitude;\n+    }\n+\n+    /**\n+     * The latitudinal position of the geometric position.\n+     *\n+     * @return The latitudinal position.\n+     */\n+    public double getLatitude() {\n+        return latitude;\n+    }\n+\n+    /**\n+     * The altitude of the geometric position.\n+     *\n+     * @return The altitude.\n+     */\n+    public Double getAltitude() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4Njc0Ng=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDM1MDQ3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/Geometry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMjo0NjoyN1rOGkFQag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzowNTozNVrOGkk_SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4ODA0Mg==", "bodyText": "Do you think, rather than have all Geometry subclasses having a getProperties() method, that Geometry itself should just contain the content of the GeometryProperties class? It seems quite long-winded to get a property at present, because you firstly need to getProperties.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r440488042", "createdAt": "2020-06-15T22:46:27Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/Geometry.java", "diffHunk": "@@ -0,0 +1,24 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+/**\n+ * An abstract representation of a geometry.\n+ */\n+public abstract class Geometry {\n+    private final GeometryProperties properties;\n+\n+    Geometry(GeometryProperties properties) {\n+        this.properties = properties;\n+    }\n+\n+    /**\n+     * Additional properties about this geometry.\n+     *\n+     * @return The additional properties associated with this geometry.\n+     */\n+    public GeometryProperties getProperties() {\n+        return properties;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwNzk0NA==", "bodyText": "Based on the RFC geometry is a concept which is a set of positions and optional bounding box and additional properties, so having this be in a superclass makes sense based on the definition. I could see removing GeometryProperties for its direct types of bounding box and additional properties, flattening the structure by a level.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441007944", "createdAt": "2020-06-16T17:05:35Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/Geometry.java", "diffHunk": "@@ -0,0 +1,24 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+/**\n+ * An abstract representation of a geometry.\n+ */\n+public abstract class Geometry {\n+    private final GeometryProperties properties;\n+\n+    Geometry(GeometryProperties properties) {\n+        this.properties = properties;\n+    }\n+\n+    /**\n+     * Additional properties about this geometry.\n+     *\n+     * @return The additional properties associated with this geometry.\n+     */\n+    public GeometryProperties getProperties() {\n+        return properties;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4ODA0Mg=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDM1MjE0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/GeometryProperties.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMjo0NzoyMVrOGkFRew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTowNjo1NlrOGktL6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4ODMxNQ==", "bodyText": "Is there a need for this ctor to be public - it seems like no sane user would need to call this? Also, should there be a ctor that takes just the bounding box?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r440488315", "createdAt": "2020-06-15T22:47:21Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/GeometryProperties.java", "diffHunk": "@@ -0,0 +1,50 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+import java.util.Map;\n+\n+/**\n+ * Represents properties about a {@link Geometry}.\n+ */\n+public final class GeometryProperties {\n+    private final GeometryBoundingBox boundingBox;\n+    private final Map<String, Object> additionalProperties;\n+\n+    /**\n+     * Constructs an empty properties.\n+     */\n+    public GeometryProperties() {\n+        this(null, null);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxMzQyMg==", "bodyText": "It is better to use setter pattern in this class. Search is only asking additional properties.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441013422", "createdAt": "2020-06-16T17:15:10Z", "author": {"login": "sima-zhu"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/GeometryProperties.java", "diffHunk": "@@ -0,0 +1,50 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+import java.util.Map;\n+\n+/**\n+ * Represents properties about a {@link Geometry}.\n+ */\n+public final class GeometryProperties {\n+    private final GeometryBoundingBox boundingBox;\n+    private final Map<String, Object> additionalProperties;\n+\n+    /**\n+     * Constructs an empty properties.\n+     */\n+    public GeometryProperties() {\n+        this(null, null);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4ODMxNQ=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyMzY2OQ==", "bodyText": "I'm thinking of removing this class and using its components directly in Geometry.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441023669", "createdAt": "2020-06-16T17:32:10Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/GeometryProperties.java", "diffHunk": "@@ -0,0 +1,50 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+import java.util.Map;\n+\n+/**\n+ * Represents properties about a {@link Geometry}.\n+ */\n+public final class GeometryProperties {\n+    private final GeometryBoundingBox boundingBox;\n+    private final Map<String, Object> additionalProperties;\n+\n+    /**\n+     * Constructs an empty properties.\n+     */\n+    public GeometryProperties() {\n+        this(null, null);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4ODMxNQ=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE0MjI0OQ==", "bodyText": "Removed GeometryProperties.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441142249", "createdAt": "2020-06-16T21:06:56Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/GeometryProperties.java", "diffHunk": "@@ -0,0 +1,50 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+import java.util.Map;\n+\n+/**\n+ * Represents properties about a {@link Geometry}.\n+ */\n+public final class GeometryProperties {\n+    private final GeometryBoundingBox boundingBox;\n+    private final Map<String, Object> additionalProperties;\n+\n+    /**\n+     * Constructs an empty properties.\n+     */\n+    public GeometryProperties() {\n+        this(null, null);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4ODMxNQ=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDM1MzA2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/GeometryProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMjo0Nzo0NFrOGkFSAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTowNzoxMVrOGktMcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4ODQ1MQ==", "bodyText": "Should you make a copy of this map so that it can not be mutated after being set?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r440488451", "createdAt": "2020-06-15T22:47:44Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/GeometryProperties.java", "diffHunk": "@@ -0,0 +1,50 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+import java.util.Map;\n+\n+/**\n+ * Represents properties about a {@link Geometry}.\n+ */\n+public final class GeometryProperties {\n+    private final GeometryBoundingBox boundingBox;\n+    private final Map<String, Object> additionalProperties;\n+\n+    /**\n+     * Constructs an empty properties.\n+     */\n+    public GeometryProperties() {\n+        this(null, null);\n+    }\n+\n+    /**\n+     * Constructs properties about a {@link Geometry}.\n+     *\n+     * @param boundingBox The bounding box for a geometry.\n+     * @param additionalProperties Addtional properties about a geometry.\n+     */\n+    public GeometryProperties(GeometryBoundingBox boundingBox, Map<String, Object> additionalProperties) {\n+        this.boundingBox = boundingBox;\n+        this.additionalProperties = additionalProperties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE0MjM4Ng==", "bodyText": "Making a deep copy now.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441142386", "createdAt": "2020-06-16T21:07:11Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/GeometryProperties.java", "diffHunk": "@@ -0,0 +1,50 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+import java.util.Map;\n+\n+/**\n+ * Represents properties about a {@link Geometry}.\n+ */\n+public final class GeometryProperties {\n+    private final GeometryBoundingBox boundingBox;\n+    private final Map<String, Object> additionalProperties;\n+\n+    /**\n+     * Constructs an empty properties.\n+     */\n+    public GeometryProperties() {\n+        this(null, null);\n+    }\n+\n+    /**\n+     * Constructs properties about a {@link Geometry}.\n+     *\n+     * @param boundingBox The bounding box for a geometry.\n+     * @param additionalProperties Addtional properties about a geometry.\n+     */\n+    public GeometryProperties(GeometryBoundingBox boundingBox, Map<String, Object> additionalProperties) {\n+        this.boundingBox = boundingBox;\n+        this.additionalProperties = additionalProperties;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4ODQ1MQ=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDM1NDgwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/LineGeometry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMjo0ODozMlrOGkFTCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMToxOTo1OFrOGktlDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4ODcxMg==", "bodyText": "Make a defensive copy in the ctor rather than here, otherwise the positions can be changed by the user having a reference to the positions collection that they gave to you.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r440488712", "createdAt": "2020-06-15T22:48:32Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/LineGeometry.java", "diffHunk": "@@ -0,0 +1,44 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+/**\n+ * Represents a geometric line.\n+ */\n+public final class LineGeometry extends Geometry {\n+    private final Collection<GeometryPosition> positions;\n+\n+    /**\n+     * Constructs a geometric line.\n+     *\n+     * @param positions Geometric positions that define the line.\n+     */\n+    public LineGeometry(Collection<GeometryPosition> positions) {\n+        this(positions, null);\n+    }\n+\n+    /**\n+     * Constructs a geometric line.\n+     *\n+     * @param positions Geometric positions that define the line.\n+     * @param properties Additional properties of the geometric line.\n+     */\n+    public LineGeometry(Collection<GeometryPosition> positions, GeometryProperties properties) {\n+        super(properties);\n+        this.positions = positions;\n+    }\n+\n+    /**\n+     * Unmodifiable representation of the {@link GeometryPosition geometric positions} representing this line.\n+     *\n+     * @return An unmodifiable representation of the {@link GeometryPosition geometric positions} representing this\n+     * line.\n+     */\n+    public Collection<GeometryPosition> getPositions() {\n+        return Collections.unmodifiableCollection(positions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE0ODY4Nw==", "bodyText": "Adding defensive copies of the list in the constructor, also making the store list unmodifiable at the same time.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441148687", "createdAt": "2020-06-16T21:19:58Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/LineGeometry.java", "diffHunk": "@@ -0,0 +1,44 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+/**\n+ * Represents a geometric line.\n+ */\n+public final class LineGeometry extends Geometry {\n+    private final Collection<GeometryPosition> positions;\n+\n+    /**\n+     * Constructs a geometric line.\n+     *\n+     * @param positions Geometric positions that define the line.\n+     */\n+    public LineGeometry(Collection<GeometryPosition> positions) {\n+        this(positions, null);\n+    }\n+\n+    /**\n+     * Constructs a geometric line.\n+     *\n+     * @param positions Geometric positions that define the line.\n+     * @param properties Additional properties of the geometric line.\n+     */\n+    public LineGeometry(Collection<GeometryPosition> positions, GeometryProperties properties) {\n+        super(properties);\n+        this.positions = positions;\n+    }\n+\n+    /**\n+     * Unmodifiable representation of the {@link GeometryPosition geometric positions} representing this line.\n+     *\n+     * @return An unmodifiable representation of the {@link GeometryPosition geometric positions} representing this\n+     * line.\n+     */\n+    public Collection<GeometryPosition> getPositions() {\n+        return Collections.unmodifiableCollection(positions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4ODcxMg=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDM1NjAyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/package-info.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMjo0OTowNVrOGkFTww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzowNjowMFrOGklAWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4ODg5OQ==", "bodyText": "Don't forget to export through modules-info too", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r440488899", "createdAt": "2020-06-15T22:49:05Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/package-info.java", "diffHunk": "@@ -0,0 +1,7 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+/**\n+ * Package containing GeoJSON classes.\n+ */\n+package com.azure.core.spatial;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwODIxOA==", "bodyText": "Added", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441008218", "createdAt": "2020-06-16T17:06:00Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/package-info.java", "diffHunk": "@@ -0,0 +1,7 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+/**\n+ * Package containing GeoJSON classes.\n+ */\n+package com.azure.core.spatial;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4ODg5OQ=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzYxMDkwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/GeometryPosition.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzoxMjowM1rOGklNxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOToxNDoxMVrOGkpnWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxMTY1Mg==", "bodyText": "Search use-case does not use altitude. So for serialization, this field is not required. Make sure the serializer will remove the field once it is null. Or make it optional.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441011652", "createdAt": "2020-06-16T17:12:03Z", "author": {"login": "sima-zhu"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/GeometryPosition.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+/**\n+ * Represents a geometric position.\n+ */\n+public final class GeometryPosition {\n+    private final double longitude;\n+    private final double latitude;\n+\n+    private final Double altitude;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyMzMwMw==", "bodyText": "Since it is a Double it is optional, if it is set it will be included in the serialization. I don't know what the Search service will do if it is included though.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441023303", "createdAt": "2020-06-16T17:31:31Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/GeometryPosition.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+/**\n+ * Represents a geometric position.\n+ */\n+public final class GeometryPosition {\n+    private final double longitude;\n+    private final double latitude;\n+\n+    private final Double altitude;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxMTY1Mg=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0NjY1Ng==", "bodyText": "There is a slightly chance to go wrong.\nIf sdk set the JsonInclude (JsonInclude(Include.ALWAYS)), then the serializer will include the field set to null.\nAlso, I am curious how would it be like for serialization.\nHere is what search looks like:\n\"type\":\"Point\",\"coordinates\":[-122.131577,47.678581]", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441046656", "createdAt": "2020-06-16T18:11:33Z", "author": {"login": "sima-zhu"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/GeometryPosition.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+/**\n+ * Represents a geometric position.\n+ */\n+public final class GeometryPosition {\n+    private final double longitude;\n+    private final double latitude;\n+\n+    private final Double altitude;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxMTY1Mg=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA2NjU0MQ==", "bodyText": "We'd better to assume service will throw error if you provide something unwanted in core spatial.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441066541", "createdAt": "2020-06-16T18:42:36Z", "author": {"login": "sima-zhu"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/GeometryPosition.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+/**\n+ * Represents a geometric position.\n+ */\n+public final class GeometryPosition {\n+    private final double longitude;\n+    private final double latitude;\n+\n+    private final Double altitude;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxMTY1Mg=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA3MTI4NQ==", "bodyText": "To make my point clear, if we set 'altitude' anyway in constructor, in some cases, we send out altitude even it sets to null.  (e.g. use JsonInclude(Include.ALWAYS)). So it is better to remove final and have setter to set the optional field.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441071285", "createdAt": "2020-06-16T18:51:12Z", "author": {"login": "sima-zhu"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/GeometryPosition.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+/**\n+ * Represents a geometric position.\n+ */\n+public final class GeometryPosition {\n+    private final double longitude;\n+    private final double latitude;\n+\n+    private final Double altitude;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxMTY1Mg=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA3ODU2NQ==", "bodyText": "These classes will be using a custom serializer and deserializer handler in Azure Core which won't include altitude if it is null. I've added them in the last commit.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441078565", "createdAt": "2020-06-16T19:04:36Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/GeometryPosition.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+/**\n+ * Represents a geometric position.\n+ */\n+public final class GeometryPosition {\n+    private final double longitude;\n+    private final double latitude;\n+\n+    private final Double altitude;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxMTY1Mg=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4MzczOA==", "bodyText": "Just saw the commit. That solves the problem. Thanks!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441083738", "createdAt": "2020-06-16T19:14:11Z", "author": {"login": "sima-zhu"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/GeometryPosition.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+/**\n+ * Represents a geometric position.\n+ */\n+public final class GeometryPosition {\n+    private final double longitude;\n+    private final double latitude;\n+\n+    private final Double altitude;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxMTY1Mg=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzYzNDk0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/PointGeometry.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzoxODo1OFrOGkldtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzozODozNFrOGkmK0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxNTczNA==", "bodyText": "Does search need to provide specific serializer/deserializer for coordinate system?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441015734", "createdAt": "2020-06-16T17:18:58Z", "author": {"login": "sima-zhu"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/PointGeometry.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+/**\n+ * Represents a geometric point.\n+ */\n+public final class PointGeometry extends Geometry {\n+    private final GeometryPosition position;\n+\n+    /**\n+     * Constructs a geometric point.\n+     *\n+     * @param position The {@link GeometryPosition geometric position} of the point.\n+     */\n+    public PointGeometry(GeometryPosition position) {\n+        this(position, null);\n+    }\n+\n+    /**\n+     * Constructs a geometric point.\n+     *\n+     * @param position The {@link GeometryPosition geometric position} of the point.\n+     * @param properties Additional properties of the geometric point.\n+     */\n+    public PointGeometry(GeometryPosition position, GeometryProperties properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyMjQ3MA==", "bodyText": "Search shouldn't need to have a custom serializer/deserializer as they should be using the GeoJSON standard.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441022470", "createdAt": "2020-06-16T17:30:16Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/PointGeometry.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+/**\n+ * Represents a geometric point.\n+ */\n+public final class PointGeometry extends Geometry {\n+    private final GeometryPosition position;\n+\n+    /**\n+     * Constructs a geometric point.\n+     *\n+     * @param position The {@link GeometryPosition geometric position} of the point.\n+     */\n+    public PointGeometry(GeometryPosition position) {\n+        this(position, null);\n+    }\n+\n+    /**\n+     * Constructs a geometric point.\n+     *\n+     * @param position The {@link GeometryPosition geometric position} of the point.\n+     * @param properties Additional properties of the geometric point.\n+     */\n+    public PointGeometry(GeometryPosition position, GeometryProperties properties) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxNTczNA=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyNzI4MQ==", "bodyText": "Search may need custom handling when using PointGeometry when setting an OData Edm.GeographyPoint.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441027281", "createdAt": "2020-06-16T17:38:34Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/PointGeometry.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+/**\n+ * Represents a geometric point.\n+ */\n+public final class PointGeometry extends Geometry {\n+    private final GeometryPosition position;\n+\n+    /**\n+     * Constructs a geometric point.\n+     *\n+     * @param position The {@link GeometryPosition geometric position} of the point.\n+     */\n+    public PointGeometry(GeometryPosition position) {\n+        this(position, null);\n+    }\n+\n+    /**\n+     * Constructs a geometric point.\n+     *\n+     * @param position The {@link GeometryPosition geometric position} of the point.\n+     * @param properties Additional properties of the geometric point.\n+     */\n+    public PointGeometry(GeometryPosition position, GeometryProperties properties) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxNTczNA=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzY4NTQ0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/CollectionGeometry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzozMjo1N1rOGkl-Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODo1NDozNFrOGko9mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyNDEwMg==", "bodyText": "Should the package be com.azure.core.models.spatial?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441024102", "createdAt": "2020-06-16T17:32:57Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/CollectionGeometry.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA3MzA1MQ==", "bodyText": "Moved in latest commit.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441073051", "createdAt": "2020-06-16T18:54:34Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/CollectionGeometry.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyNDEwMg=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Nzc3OTg4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/Geometry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzo1OToyNFrOGkm7Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODo1NjoyMFrOGkpBWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzOTY2Mw==", "bodyText": "Should this ctor be public to allow users/client libraries to extend from this?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441039663", "createdAt": "2020-06-16T17:59:24Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/Geometry.java", "diffHunk": "@@ -0,0 +1,24 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+/**\n+ * An abstract representation of a geometry.\n+ */\n+public abstract class Geometry {\n+    private final GeometryProperties properties;\n+\n+    Geometry(GeometryProperties properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA3NDAxMA==", "bodyText": "GeoJSON types are well-known and are expected to not be extended, https://tools.ietf.org/html/rfc7946#section-7.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441074010", "createdAt": "2020-06-16T18:56:20Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/Geometry.java", "diffHunk": "@@ -0,0 +1,24 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+/**\n+ * An abstract representation of a geometry.\n+ */\n+public abstract class Geometry {\n+    private final GeometryProperties properties;\n+\n+    Geometry(GeometryProperties properties) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzOTY2Mw=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Nzg5MDExOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/CollectionGeometry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoyNjo1M1rOGkoBLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMToxOTozMVrOGktkKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1NzU4Mg==", "bodyText": "The unmodifiable collection should be created in the ctor itself.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441057582", "createdAt": "2020-06-16T18:26:53Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/CollectionGeometry.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+/**\n+ * Represents a heterogeneous collection of {@link Geometry geometries}.\n+ */\n+public final class CollectionGeometry extends Geometry {\n+    private final Collection<Geometry> geometries;\n+\n+    /**\n+     * Constructs a geometry collection.\n+     *\n+     * @param geometries The geometries in the collection.\n+     */\n+    public CollectionGeometry(Collection<Geometry> geometries) {\n+        this(geometries, null);\n+    }\n+\n+    /**\n+     * Constructs a geometry collection.\n+     *\n+     * @param geometries The geometries in the collection.\n+     * @param properties Additional properties of the geometry collection.\n+     */\n+    public CollectionGeometry(Collection<Geometry> geometries, GeometryProperties properties) {\n+        super(properties);\n+        this.geometries = geometries;\n+    }\n+\n+    /**\n+     * Unmodifiable representation of the {@link Geometry geometries} contained in this collection.\n+     *\n+     * @return An unmodifiable representation of the {@link Geometry geometries} in this collection.\n+     */\n+    public Collection<Geometry> getGeometries() {\n+        return Collections.unmodifiableCollection(geometries);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE0ODQ1OQ==", "bodyText": "Updating to make these list unmodifiable in the constructor.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441148459", "createdAt": "2020-06-16T21:19:31Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/CollectionGeometry.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+/**\n+ * Represents a heterogeneous collection of {@link Geometry geometries}.\n+ */\n+public final class CollectionGeometry extends Geometry {\n+    private final Collection<Geometry> geometries;\n+\n+    /**\n+     * Constructs a geometry collection.\n+     *\n+     * @param geometries The geometries in the collection.\n+     */\n+    public CollectionGeometry(Collection<Geometry> geometries) {\n+        this(geometries, null);\n+    }\n+\n+    /**\n+     * Constructs a geometry collection.\n+     *\n+     * @param geometries The geometries in the collection.\n+     * @param properties Additional properties of the geometry collection.\n+     */\n+    public CollectionGeometry(Collection<Geometry> geometries, GeometryProperties properties) {\n+        super(properties);\n+        this.geometries = geometries;\n+    }\n+\n+    /**\n+     * Unmodifiable representation of the {@link Geometry geometries} contained in this collection.\n+     *\n+     * @return An unmodifiable representation of the {@link Geometry geometries} in this collection.\n+     */\n+    public Collection<Geometry> getGeometries() {\n+        return Collections.unmodifiableCollection(geometries);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1NzU4Mg=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzkwNTI2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/GeometryPosition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODozMTozMlrOGkoLSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODo1NjoxNlrOGkpBNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA2MDE3MA==", "bodyText": "Do we want to make these model types final? Users or client libraries may want to extend these types.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441060170", "createdAt": "2020-06-16T18:31:32Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/GeometryPosition.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+/**\n+ * Represents a geometric position.\n+ */\n+public final class GeometryPosition {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA3Mzk3Mw==", "bodyText": "GeoJSON types are well-known and are expected to not be extended, https://tools.ietf.org/html/rfc7946#section-7.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441073973", "createdAt": "2020-06-16T18:56:16Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/spatial/GeometryPosition.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.spatial;\n+\n+/**\n+ * Represents a geometric position.\n+ */\n+public final class GeometryPosition {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA2MDE3MA=="}, "originalCommit": {"oid": "b90b826c575b35f46b11fb7070c475a84d9f0f8e"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODkyODc3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/CollectionGeometry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMTowNDoyNlrOGkyIcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMTo0MDozNlrOGkysfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzI4Mw==", "bodyText": "You shouldn't need the new ArrayList<>(..) here, geometries is already a List", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441223283", "createdAt": "2020-06-17T01:04:26Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/CollectionGeometry.java", "diffHunk": "@@ -0,0 +1,52 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.models.spatial;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a heterogeneous collection of {@link Geometry geometries}.\n+ */\n+public final class CollectionGeometry extends Geometry {\n+    private final List<Geometry> geometries;\n+\n+    /**\n+     * Constructs a geometry collection.\n+     *\n+     * @param geometries The geometries in the collection.\n+     * @throws NullPointerException If {@code geometries} is {@code null}.\n+     */\n+    public CollectionGeometry(List<Geometry> geometries) {\n+        this(geometries, null, null);\n+    }\n+\n+    /**\n+     * Constructs a geometry collection.\n+     *\n+     * @param geometries The geometries in the collection.\n+     * @param boundingBox Bounding box for the geometry collection.\n+     * @param properties Additional properties of the geometry collection.\n+     * @throws NullPointerException If {@code geometries} is {@code null}.\n+     */\n+    public CollectionGeometry(List<Geometry> geometries, GeometryBoundingBox boundingBox,\n+        Map<String, Object> properties) {\n+        super(boundingBox, properties);\n+\n+        Objects.requireNonNull(geometries, \"'geometries' cannot be null.\");\n+        this.geometries = Collections.unmodifiableList(new ArrayList<>(geometries));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae93115639b8b8660a56cafd729ce9e4b4b0ec0c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIzMjUwOQ==", "bodyText": "This is done as the new ArrayList will copy the geometry references into an internal representation that the caller won't have a reference to, the latter is to make the representation that may be read unmodifiable.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441232509", "createdAt": "2020-06-17T01:40:36Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/CollectionGeometry.java", "diffHunk": "@@ -0,0 +1,52 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.models.spatial;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a heterogeneous collection of {@link Geometry geometries}.\n+ */\n+public final class CollectionGeometry extends Geometry {\n+    private final List<Geometry> geometries;\n+\n+    /**\n+     * Constructs a geometry collection.\n+     *\n+     * @param geometries The geometries in the collection.\n+     * @throws NullPointerException If {@code geometries} is {@code null}.\n+     */\n+    public CollectionGeometry(List<Geometry> geometries) {\n+        this(geometries, null, null);\n+    }\n+\n+    /**\n+     * Constructs a geometry collection.\n+     *\n+     * @param geometries The geometries in the collection.\n+     * @param boundingBox Bounding box for the geometry collection.\n+     * @param properties Additional properties of the geometry collection.\n+     * @throws NullPointerException If {@code geometries} is {@code null}.\n+     */\n+    public CollectionGeometry(List<Geometry> geometries, GeometryBoundingBox boundingBox,\n+        Map<String, Object> properties) {\n+        super(boundingBox, properties);\n+\n+        Objects.requireNonNull(geometries, \"'geometries' cannot be null.\");\n+        this.geometries = Collections.unmodifiableList(new ArrayList<>(geometries));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzI4Mw=="}, "originalCommit": {"oid": "ae93115639b8b8660a56cafd729ce9e4b4b0ec0c"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODkzMDM2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/Geometry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMTowNToyN1rOGkyJcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMTo0MDo1NFrOGkys3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzUzOQ==", "bodyText": "Collections.unmodifiableMap?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441223539", "createdAt": "2020-06-17T01:05:27Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/Geometry.java", "diffHunk": "@@ -0,0 +1,45 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.models.spatial;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * An abstract representation of a geometry.\n+ */\n+public abstract class Geometry {\n+    private final GeometryBoundingBox boundingBox;\n+    private final Map<String, Object> properties;\n+\n+    Geometry(GeometryBoundingBox boundingBox, Map<String, Object> properties) {\n+        this.boundingBox = boundingBox;\n+\n+        if (properties == null) {\n+            this.properties = Collections.emptyMap();\n+        } else {\n+            this.properties = properties.entrySet().stream()\n+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae93115639b8b8660a56cafd729ce9e4b4b0ec0c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIzMjYwNA==", "bodyText": "Good catch, I'll fix this in the next update when I add unit tests.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441232604", "createdAt": "2020-06-17T01:40:54Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/Geometry.java", "diffHunk": "@@ -0,0 +1,45 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.models.spatial;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * An abstract representation of a geometry.\n+ */\n+public abstract class Geometry {\n+    private final GeometryBoundingBox boundingBox;\n+    private final Map<String, Object> properties;\n+\n+    Geometry(GeometryBoundingBox boundingBox, Map<String, Object> properties) {\n+        this.boundingBox = boundingBox;\n+\n+        if (properties == null) {\n+            this.properties = Collections.emptyMap();\n+        } else {\n+            this.properties = properties.entrySet().stream()\n+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzUzOQ=="}, "originalCommit": {"oid": "ae93115639b8b8660a56cafd729ce9e4b4b0ec0c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODkzMTM2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/LineGeometry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMTowNjowMVrOGkyKBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMTo0MTowMVrOGkytAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzY4NQ==", "bodyText": "Same comment here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441223685", "createdAt": "2020-06-17T01:06:01Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/LineGeometry.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.models.spatial;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a geometric line.\n+ */\n+public final class LineGeometry extends Geometry {\n+    private final List<GeometryPosition> positions;\n+\n+    /**\n+     * Constructs a geometric line.\n+     *\n+     * @param positions Geometric positions that define the line.\n+     * @throws NullPointerException If {@code positions} is {@code null}.\n+     */\n+    public LineGeometry(List<GeometryPosition> positions) {\n+        this(positions, null, null);\n+    }\n+\n+    /**\n+     * Constructs a geometric line.\n+     *\n+     * @param positions Geometric positions that define the line.\n+     * @param boundingBox Bounding box for the line.\n+     * @param properties Additional properties of the geometric line.\n+     * @throws NullPointerException If {@code positions} is {@code null}.\n+     */\n+    public LineGeometry(List<GeometryPosition> positions, GeometryBoundingBox boundingBox,\n+        Map<String, Object> properties) {\n+        super(boundingBox, properties);\n+\n+        Objects.requireNonNull(positions, \"'positions' cannot be null.\");\n+        this.positions = Collections.unmodifiableList(new ArrayList<>(positions));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae93115639b8b8660a56cafd729ce9e4b4b0ec0c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIzMjY0MQ==", "bodyText": "Same response", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441232641", "createdAt": "2020-06-17T01:41:01Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/LineGeometry.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.models.spatial;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a geometric line.\n+ */\n+public final class LineGeometry extends Geometry {\n+    private final List<GeometryPosition> positions;\n+\n+    /**\n+     * Constructs a geometric line.\n+     *\n+     * @param positions Geometric positions that define the line.\n+     * @throws NullPointerException If {@code positions} is {@code null}.\n+     */\n+    public LineGeometry(List<GeometryPosition> positions) {\n+        this(positions, null, null);\n+    }\n+\n+    /**\n+     * Constructs a geometric line.\n+     *\n+     * @param positions Geometric positions that define the line.\n+     * @param boundingBox Bounding box for the line.\n+     * @param properties Additional properties of the geometric line.\n+     * @throws NullPointerException If {@code positions} is {@code null}.\n+     */\n+    public LineGeometry(List<GeometryPosition> positions, GeometryBoundingBox boundingBox,\n+        Map<String, Object> properties) {\n+        super(boundingBox, properties);\n+\n+        Objects.requireNonNull(positions, \"'positions' cannot be null.\");\n+        this.positions = Collections.unmodifiableList(new ArrayList<>(positions));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzY4NQ=="}, "originalCommit": {"oid": "ae93115639b8b8660a56cafd729ce9e4b4b0ec0c"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODkzMTk1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/MultiLineGeometry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMTowNjoyNVrOGkyKWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMTo0MTowN1rOGkytHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzc3MQ==", "bodyText": "Same comment here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441223771", "createdAt": "2020-06-17T01:06:25Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/MultiLineGeometry.java", "diffHunk": "@@ -0,0 +1,52 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.models.spatial;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a multi-line geometry.\n+ */\n+public final class MultiLineGeometry extends Geometry {\n+    private final List<LineGeometry> lines;\n+\n+    /**\n+     * Constructs a multi-line geometry.\n+     *\n+     * @param lines The geometric lines that define the multi-line.\n+     * @throws NullPointerException If {@code lines} is {@code null}.\n+     */\n+    public MultiLineGeometry(List<LineGeometry> lines) {\n+        this(lines, null, null);\n+    }\n+\n+    /**\n+     * Constructs a multi-line geometry.\n+     *\n+     * @param lines The geometric lines that define the multi-line.\n+     * @param boundingBox Bounding box for the multi-line.\n+     * @param properties Additional properties of the multi-line.\n+     * @throws NullPointerException If {@code lines} is {@code null}.\n+     */\n+    public MultiLineGeometry(List<LineGeometry> lines, GeometryBoundingBox boundingBox,\n+        Map<String, Object> properties) {\n+        super(boundingBox, properties);\n+\n+        Objects.requireNonNull(lines, \"'lines' cannot be null.\");\n+        this.lines = Collections.unmodifiableList(new ArrayList<>(lines));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae93115639b8b8660a56cafd729ce9e4b4b0ec0c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIzMjY2OA==", "bodyText": "Same response", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441232668", "createdAt": "2020-06-17T01:41:07Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/MultiLineGeometry.java", "diffHunk": "@@ -0,0 +1,52 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.models.spatial;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a multi-line geometry.\n+ */\n+public final class MultiLineGeometry extends Geometry {\n+    private final List<LineGeometry> lines;\n+\n+    /**\n+     * Constructs a multi-line geometry.\n+     *\n+     * @param lines The geometric lines that define the multi-line.\n+     * @throws NullPointerException If {@code lines} is {@code null}.\n+     */\n+    public MultiLineGeometry(List<LineGeometry> lines) {\n+        this(lines, null, null);\n+    }\n+\n+    /**\n+     * Constructs a multi-line geometry.\n+     *\n+     * @param lines The geometric lines that define the multi-line.\n+     * @param boundingBox Bounding box for the multi-line.\n+     * @param properties Additional properties of the multi-line.\n+     * @throws NullPointerException If {@code lines} is {@code null}.\n+     */\n+    public MultiLineGeometry(List<LineGeometry> lines, GeometryBoundingBox boundingBox,\n+        Map<String, Object> properties) {\n+        super(boundingBox, properties);\n+\n+        Objects.requireNonNull(lines, \"'lines' cannot be null.\");\n+        this.lines = Collections.unmodifiableList(new ArrayList<>(lines));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzc3MQ=="}, "originalCommit": {"oid": "ae93115639b8b8660a56cafd729ce9e4b4b0ec0c"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODkzMjEwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/MultiPointGeometry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMTowNjozM1rOGkyKdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMTo0MToxMlrOGkytNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzc5OA==", "bodyText": "Same comment here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441223798", "createdAt": "2020-06-17T01:06:33Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/MultiPointGeometry.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.models.spatial;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a multi-point geometry.\n+ */\n+public final class MultiPointGeometry extends Geometry {\n+    private final List<PointGeometry> points;\n+\n+    /**\n+     * Constructs a multi-point geometry.\n+     *\n+     * @param points The points that define the multi-point.\n+     * @throws NullPointerException If {@code points} is {@code null}.\n+     */\n+    public MultiPointGeometry(List<PointGeometry> points) {\n+        this(points, null, null);\n+    }\n+\n+    /**\n+     * Constructs a multi-point geometry.\n+     *\n+     * @param points The points that define the multi-point.\n+     * @param boundingBox Bounding box for the multi-point.\n+     * @param properties Additional properties of the multi-point.\n+     * @throws NullPointerException If {@code points} is {@code null}.\n+     */\n+    public MultiPointGeometry(List<PointGeometry> points, GeometryBoundingBox boundingBox,\n+        Map<String, Object> properties) {\n+        super(boundingBox, properties);\n+\n+        Objects.requireNonNull(points, \"'points' cannot be null.\");\n+        this.points = Collections.unmodifiableList(new ArrayList<>(points));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae93115639b8b8660a56cafd729ce9e4b4b0ec0c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIzMjY5NA==", "bodyText": "Same response", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441232694", "createdAt": "2020-06-17T01:41:12Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/MultiPointGeometry.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.models.spatial;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a multi-point geometry.\n+ */\n+public final class MultiPointGeometry extends Geometry {\n+    private final List<PointGeometry> points;\n+\n+    /**\n+     * Constructs a multi-point geometry.\n+     *\n+     * @param points The points that define the multi-point.\n+     * @throws NullPointerException If {@code points} is {@code null}.\n+     */\n+    public MultiPointGeometry(List<PointGeometry> points) {\n+        this(points, null, null);\n+    }\n+\n+    /**\n+     * Constructs a multi-point geometry.\n+     *\n+     * @param points The points that define the multi-point.\n+     * @param boundingBox Bounding box for the multi-point.\n+     * @param properties Additional properties of the multi-point.\n+     * @throws NullPointerException If {@code points} is {@code null}.\n+     */\n+    public MultiPointGeometry(List<PointGeometry> points, GeometryBoundingBox boundingBox,\n+        Map<String, Object> properties) {\n+        super(boundingBox, properties);\n+\n+        Objects.requireNonNull(points, \"'points' cannot be null.\");\n+        this.points = Collections.unmodifiableList(new ArrayList<>(points));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzc5OA=="}, "originalCommit": {"oid": "ae93115639b8b8660a56cafd729ce9e4b4b0ec0c"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODkzMjMwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/MultiPolygonGeometry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMTowNjozOVrOGkyKkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMTo0MToxOFrOGkytRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzgyNg==", "bodyText": "Same comment here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441223826", "createdAt": "2020-06-17T01:06:39Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/MultiPolygonGeometry.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.models.spatial;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a multi-polygon geometry.\n+ */\n+public final class MultiPolygonGeometry extends Geometry {\n+    private final List<PolygonGeometry> polygons;\n+\n+    /**\n+     * Constructs a multi-polygon geometry.\n+     *\n+     * @param polygons The polygons that define the multi-polygon.\n+     * @throws NullPointerException If {@code polygons} is {@code null}.\n+     */\n+    public MultiPolygonGeometry(List<PolygonGeometry> polygons) {\n+        this(polygons, null, null);\n+    }\n+\n+    /**\n+     * Constructs a multi-polygon geometry.\n+     *\n+     * @param polygons The polygons that define the multi-polygon.\n+     * @param boundingBox Bounding box for the multi-polygon.\n+     * @param properties Additional properties of the multi-polygon.\n+     * @throws NullPointerException If {@code polygons} is {@code null}.\n+     */\n+    public MultiPolygonGeometry(List<PolygonGeometry> polygons, GeometryBoundingBox boundingBox,\n+        Map<String, Object> properties) {\n+        super(boundingBox, properties);\n+\n+        Objects.requireNonNull(polygons, \"'polygons' cannot be null.\");\n+        this.polygons = Collections.unmodifiableList(new ArrayList<>(polygons));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae93115639b8b8660a56cafd729ce9e4b4b0ec0c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIzMjcwOA==", "bodyText": "Same response", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441232708", "createdAt": "2020-06-17T01:41:18Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/MultiPolygonGeometry.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.models.spatial;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a multi-polygon geometry.\n+ */\n+public final class MultiPolygonGeometry extends Geometry {\n+    private final List<PolygonGeometry> polygons;\n+\n+    /**\n+     * Constructs a multi-polygon geometry.\n+     *\n+     * @param polygons The polygons that define the multi-polygon.\n+     * @throws NullPointerException If {@code polygons} is {@code null}.\n+     */\n+    public MultiPolygonGeometry(List<PolygonGeometry> polygons) {\n+        this(polygons, null, null);\n+    }\n+\n+    /**\n+     * Constructs a multi-polygon geometry.\n+     *\n+     * @param polygons The polygons that define the multi-polygon.\n+     * @param boundingBox Bounding box for the multi-polygon.\n+     * @param properties Additional properties of the multi-polygon.\n+     * @throws NullPointerException If {@code polygons} is {@code null}.\n+     */\n+    public MultiPolygonGeometry(List<PolygonGeometry> polygons, GeometryBoundingBox boundingBox,\n+        Map<String, Object> properties) {\n+        super(boundingBox, properties);\n+\n+        Objects.requireNonNull(polygons, \"'polygons' cannot be null.\");\n+        this.polygons = Collections.unmodifiableList(new ArrayList<>(polygons));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzgyNg=="}, "originalCommit": {"oid": "ae93115639b8b8660a56cafd729ce9e4b4b0ec0c"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODkzMjc1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/PolygonGeometry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMTowNzowMlrOGkyK3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMTo0MToyNVrOGkytZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzkwMg==", "bodyText": "Same comment here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441223902", "createdAt": "2020-06-17T01:07:02Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/PolygonGeometry.java", "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.models.spatial;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a geometric polygon.\n+ */\n+public final class PolygonGeometry extends Geometry {\n+    private final List<LineGeometry> rings;\n+\n+    /**\n+     * Constructs a geometric polygon.\n+     *\n+     * @param rings The lines that define the polygon.\n+     * @throws NullPointerException If {@code rings} is {@code null}.\n+     */\n+    public PolygonGeometry(List<LineGeometry> rings) {\n+        this(rings, null, null);\n+    }\n+\n+    /**\n+     * Constructs a geometric polygon.\n+     *\n+     * @param rings The lines that define the polygon.\n+     * @param boundingBox Bounding box for the polygon.\n+     * @param properties Additional properties of the polygon.\n+     * @throws NullPointerException If {@code rings} is {@code null}.\n+     */\n+    public PolygonGeometry(List<LineGeometry> rings, GeometryBoundingBox boundingBox, Map<String, Object> properties) {\n+        super(boundingBox, properties);\n+\n+        Objects.requireNonNull(rings, \"'rings' cannot be null.\");\n+        this.rings = Collections.unmodifiableList(new ArrayList<>(rings));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae93115639b8b8660a56cafd729ce9e4b4b0ec0c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIzMjc0MA==", "bodyText": "Same response", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r441232740", "createdAt": "2020-06-17T01:41:25Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/PolygonGeometry.java", "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.models.spatial;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a geometric polygon.\n+ */\n+public final class PolygonGeometry extends Geometry {\n+    private final List<LineGeometry> rings;\n+\n+    /**\n+     * Constructs a geometric polygon.\n+     *\n+     * @param rings The lines that define the polygon.\n+     * @throws NullPointerException If {@code rings} is {@code null}.\n+     */\n+    public PolygonGeometry(List<LineGeometry> rings) {\n+        this(rings, null, null);\n+    }\n+\n+    /**\n+     * Constructs a geometric polygon.\n+     *\n+     * @param rings The lines that define the polygon.\n+     * @param boundingBox Bounding box for the polygon.\n+     * @param properties Additional properties of the polygon.\n+     * @throws NullPointerException If {@code rings} is {@code null}.\n+     */\n+    public PolygonGeometry(List<LineGeometry> rings, GeometryBoundingBox boundingBox, Map<String, Object> properties) {\n+        super(boundingBox, properties);\n+\n+        Objects.requireNonNull(rings, \"'rings' cannot be null.\");\n+        this.rings = Collections.unmodifiableList(new ArrayList<>(rings));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzkwMg=="}, "originalCommit": {"oid": "ae93115639b8b8660a56cafd729ce9e4b4b0ec0c"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjI3NTIyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/GeometryBoundingBox.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODowODowOFrOGl6mNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMjowODo1NlrOGmB1Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxMDU0OQ==", "bodyText": "I was wondering if this could be named differently or to be more specific into the spatial concept that we would foresee it being used. Or do we want this same model to be more generic and allow including the concept of the BoundingBox we encountered in FormRecognizer here.\nWhere a BoundingBox could be a \"Quadrangle bounding box, with coordinates specified relative to the top-left of the original image. The eight numbers represent the four points, clockwise from the top-left corner relative to the text orientation. For image, the (x, y) coordinates are measured in pixels. For PDF, the (x, y) coordinates are measured in inches.\",", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r442410549", "createdAt": "2020-06-18T18:08:08Z", "author": {"login": "samvaity"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/GeometryBoundingBox.java", "diffHunk": "@@ -0,0 +1,129 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.models.spatial;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a geometric bounding box.\n+ */\n+public final class GeometryBoundingBox {\n+    private final double west;\n+    private final double south;\n+    private final double east;\n+    private final double north;\n+\n+    private final Double minAltitude;\n+    private final Double maxAltitude;\n+\n+    /**\n+     * Constructs a bounding box.\n+     *\n+     * @param west West longitudinal boundary.\n+     * @param south South latitudinal boundary.\n+     * @param east East longitudinal boundary.\n+     * @param north North latitudinal boundary.\n+     */\n+    public GeometryBoundingBox(double west, double south, double east, double north) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52b598c8c8ce33311c228826fc36d8856a5d317d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUxNzYwNA==", "bodyText": "I believe these concepts are distinct from each other. The GeoJSON bounding box must be a rectangle as it simply lists to left, right, top, bottom bounding areas, with optional depth. Form Recognizer uses the four corners of the bounding area so it is a quadrangle which is a super set from a rectangle.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r442517604", "createdAt": "2020-06-18T21:39:45Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/GeometryBoundingBox.java", "diffHunk": "@@ -0,0 +1,129 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.models.spatial;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a geometric bounding box.\n+ */\n+public final class GeometryBoundingBox {\n+    private final double west;\n+    private final double south;\n+    private final double east;\n+    private final double north;\n+\n+    private final Double minAltitude;\n+    private final Double maxAltitude;\n+\n+    /**\n+     * Constructs a bounding box.\n+     *\n+     * @param west West longitudinal boundary.\n+     * @param south South latitudinal boundary.\n+     * @param east East longitudinal boundary.\n+     * @param north North latitudinal boundary.\n+     */\n+    public GeometryBoundingBox(double west, double south, double east, double north) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxMDU0OQ=="}, "originalCommit": {"oid": "52b598c8c8ce33311c228826fc36d8856a5d317d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUyNDg1MQ==", "bodyText": "I think it's fair to keep them as two separate models especially considering the fact that FR service is thinking of updating the BoundingBox to not be restricted to just four points and it can then grow differently.\nBut still think that GeometryBoundaryBox model name is too generic and can confuse users once we start including the other BoundingBox concepts. It doesn't suggest it is a GeoJson bounding box.  What do you think?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r442524851", "createdAt": "2020-06-18T21:57:59Z", "author": {"login": "samvaity"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/GeometryBoundingBox.java", "diffHunk": "@@ -0,0 +1,129 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.models.spatial;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a geometric bounding box.\n+ */\n+public final class GeometryBoundingBox {\n+    private final double west;\n+    private final double south;\n+    private final double east;\n+    private final double north;\n+\n+    private final Double minAltitude;\n+    private final Double maxAltitude;\n+\n+    /**\n+     * Constructs a bounding box.\n+     *\n+     * @param west West longitudinal boundary.\n+     * @param south South latitudinal boundary.\n+     * @param east East longitudinal boundary.\n+     * @param north North latitudinal boundary.\n+     */\n+    public GeometryBoundingBox(double west, double south, double east, double north) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxMDU0OQ=="}, "originalCommit": {"oid": "52b598c8c8ce33311c228826fc36d8856a5d317d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUyNTU1MA==", "bodyText": "That's a good thought.\n@pakrym, @srnagar, @JonathanGiles, @KrzysztofCwalina, ideas here as this will be common across the languages", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r442525550", "createdAt": "2020-06-18T21:59:47Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/GeometryBoundingBox.java", "diffHunk": "@@ -0,0 +1,129 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.models.spatial;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a geometric bounding box.\n+ */\n+public final class GeometryBoundingBox {\n+    private final double west;\n+    private final double south;\n+    private final double east;\n+    private final double north;\n+\n+    private final Double minAltitude;\n+    private final Double maxAltitude;\n+\n+    /**\n+     * Constructs a bounding box.\n+     *\n+     * @param west West longitudinal boundary.\n+     * @param south South latitudinal boundary.\n+     * @param east East longitudinal boundary.\n+     * @param north North latitudinal boundary.\n+     */\n+    public GeometryBoundingBox(double west, double south, double east, double north) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxMDU0OQ=="}, "originalCommit": {"oid": "52b598c8c8ce33311c228826fc36d8856a5d317d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUyNzMzNQ==", "bodyText": "I'm ok with how it is named now, but I am open to suggestions for other names too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r442527335", "createdAt": "2020-06-18T22:04:14Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/GeometryBoundingBox.java", "diffHunk": "@@ -0,0 +1,129 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.models.spatial;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a geometric bounding box.\n+ */\n+public final class GeometryBoundingBox {\n+    private final double west;\n+    private final double south;\n+    private final double east;\n+    private final double north;\n+\n+    private final Double minAltitude;\n+    private final Double maxAltitude;\n+\n+    /**\n+     * Constructs a bounding box.\n+     *\n+     * @param west West longitudinal boundary.\n+     * @param south South latitudinal boundary.\n+     * @param east East longitudinal boundary.\n+     * @param north North latitudinal boundary.\n+     */\n+    public GeometryBoundingBox(double west, double south, double east, double north) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxMDU0OQ=="}, "originalCommit": {"oid": "52b598c8c8ce33311c228826fc36d8856a5d317d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUyOTA4Ng==", "bodyText": "To me the prefix seems reasonable to distinguish.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r442529086", "createdAt": "2020-06-18T22:08:56Z", "author": {"login": "pakrym"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/GeometryBoundingBox.java", "diffHunk": "@@ -0,0 +1,129 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.models.spatial;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a geometric bounding box.\n+ */\n+public final class GeometryBoundingBox {\n+    private final double west;\n+    private final double south;\n+    private final double east;\n+    private final double north;\n+\n+    private final Double minAltitude;\n+    private final Double maxAltitude;\n+\n+    /**\n+     * Constructs a bounding box.\n+     *\n+     * @param west West longitudinal boundary.\n+     * @param south South latitudinal boundary.\n+     * @param east East longitudinal boundary.\n+     * @param north North latitudinal boundary.\n+     */\n+    public GeometryBoundingBox(double west, double south, double east, double north) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxMDU0OQ=="}, "originalCommit": {"oid": "52b598c8c8ce33311c228826fc36d8856a5d317d"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjI4MjQxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/GeometryPosition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODoxMDoxNVrOGl6qzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMTo0MTowNFrOGmBKQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxMTcyNg==", "bodyText": "We encountered situations in user studies where users seem to be wanting a toString() method on the returned models. I am considering adding those in FormRecognizer, do we think we should consider that here too?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r442411726", "createdAt": "2020-06-18T18:10:15Z", "author": {"login": "samvaity"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/GeometryPosition.java", "diffHunk": "@@ -0,0 +1,87 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.models.spatial;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a geometric position.\n+ */\n+public final class GeometryPosition {\n+    private final double longitude;\n+    private final double latitude;\n+\n+    private final Double altitude;\n+\n+    /**\n+     * Constructs a geometric position.\n+     *\n+     * @param longitude Longitudinal position.\n+     * @param latitude Latitudinal position.\n+     */\n+    public GeometryPosition(double longitude, double latitude) {\n+        this(longitude, latitude, null);\n+    }\n+\n+    /**\n+     * Constructs a geometric position.\n+     *\n+     * @param longitude Longitudinal position.\n+     * @param latitude Latitudinal position.\n+     * @param altitude Altitude position.\n+     */\n+    public GeometryPosition(double longitude, double latitude, Double altitude) {\n+        this.longitude = longitude;\n+        this.latitude = latitude;\n+        this.altitude = altitude;\n+    }\n+\n+    /**\n+     * The longitudinal position of the geometric position.\n+     *\n+     * @return The longitudinal position.\n+     */\n+    public double getLongitude() {\n+        return longitude;\n+    }\n+\n+    /**\n+     * The latitudinal position of the geometric position.\n+     *\n+     * @return The latitudinal position.\n+     */\n+    public double getLatitude() {\n+        return latitude;\n+    }\n+\n+    /**\n+     * The altitude of the geometric position.\n+     *\n+     * @return The altitude.\n+     */\n+    public Double getAltitude() {\n+        return altitude;\n+    }\n+\n+    @Override\n+    public int hashCode() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52b598c8c8ce33311c228826fc36d8856a5d317d"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUxODA4MA==", "bodyText": "Could be done, I was thinking it could be their GeoJSON representation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r442518080", "createdAt": "2020-06-18T21:41:04Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/GeometryPosition.java", "diffHunk": "@@ -0,0 +1,87 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.models.spatial;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a geometric position.\n+ */\n+public final class GeometryPosition {\n+    private final double longitude;\n+    private final double latitude;\n+\n+    private final Double altitude;\n+\n+    /**\n+     * Constructs a geometric position.\n+     *\n+     * @param longitude Longitudinal position.\n+     * @param latitude Latitudinal position.\n+     */\n+    public GeometryPosition(double longitude, double latitude) {\n+        this(longitude, latitude, null);\n+    }\n+\n+    /**\n+     * Constructs a geometric position.\n+     *\n+     * @param longitude Longitudinal position.\n+     * @param latitude Latitudinal position.\n+     * @param altitude Altitude position.\n+     */\n+    public GeometryPosition(double longitude, double latitude, Double altitude) {\n+        this.longitude = longitude;\n+        this.latitude = latitude;\n+        this.altitude = altitude;\n+    }\n+\n+    /**\n+     * The longitudinal position of the geometric position.\n+     *\n+     * @return The longitudinal position.\n+     */\n+    public double getLongitude() {\n+        return longitude;\n+    }\n+\n+    /**\n+     * The latitudinal position of the geometric position.\n+     *\n+     * @return The latitudinal position.\n+     */\n+    public double getLatitude() {\n+        return latitude;\n+    }\n+\n+    /**\n+     * The altitude of the geometric position.\n+     *\n+     * @return The altitude.\n+     */\n+    public Double getAltitude() {\n+        return altitude;\n+    }\n+\n+    @Override\n+    public int hashCode() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxMTcyNg=="}, "originalCommit": {"oid": "52b598c8c8ce33311c228826fc36d8856a5d317d"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDMxOTcyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/CollectionGeometry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMTo0NzowMlrOGmh-Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMTo0NzowMlrOGmh-Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA1NTcxOA==", "bodyText": "Is it worth the performance cost to copy the source list into a new array list?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12203#discussion_r443055718", "createdAt": "2020-06-19T21:47:02Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/models/spatial/CollectionGeometry.java", "diffHunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.models.spatial;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a heterogeneous collection of {@link Geometry geometries}.\n+ */\n+public final class CollectionGeometry extends Geometry {\n+    private final List<Geometry> geometries;\n+\n+    /**\n+     * Constructs a geometry collection.\n+     *\n+     * @param geometries The geometries in the collection.\n+     * @throws NullPointerException If {@code geometries} is {@code null}.\n+     */\n+    public CollectionGeometry(List<Geometry> geometries) {\n+        this(geometries, null, null);\n+    }\n+\n+    /**\n+     * Constructs a geometry collection.\n+     *\n+     * @param geometries The geometries in the collection.\n+     * @param boundingBox Bounding box for the geometry collection.\n+     * @param properties Additional properties of the geometry collection.\n+     * @throws NullPointerException If {@code geometries} is {@code null}.\n+     */\n+    public CollectionGeometry(List<Geometry> geometries, GeometryBoundingBox boundingBox,\n+        Map<String, Object> properties) {\n+        super(boundingBox, properties);\n+\n+        Objects.requireNonNull(geometries, \"'geometries' cannot be null.\");\n+        this.geometries = Collections.unmodifiableList(new ArrayList<>(geometries));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52b598c8c8ce33311c228826fc36d8856a5d317d"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3841, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}