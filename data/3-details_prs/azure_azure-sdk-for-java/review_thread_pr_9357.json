{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxODk0MTUw", "number": 9357, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxODozNjoyMFrODqGcpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQyMDoxMDozNlrODqGz1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDcyNDIyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/MessageLockToken.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxODozNjoyMFrOF5q-QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxODozNjoyMFrOF5q-QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxNzIxNg==", "bodyText": "Add a test", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9357#discussion_r396017216", "createdAt": "2020-03-21T18:36:20Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/MessageLockToken.java", "diffHunk": "@@ -0,0 +1,27 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import java.util.UUID;\n+\n+/**\n+ * Type representing the lock-token.\n+ */\n+public interface MessageLockToken {\n+\n+    /**\n+     *\n+     * @return {@link UUID} representing the lock-token.\n+     */\n+    UUID getLockToken();\n+\n+    /**\n+     *\n+     * @param uuid to use for creating {@link MessageLockToken} instance;\n+     * @return The created {@link MessageLockToken} object.\n+     */\n+    static MessageLockToken fromUuid(UUID uuid) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8731c4699d6f9eac6c395f566d49e6c95f93b068"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDcyNTkxOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxODozOTowOFrOF5q_GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxODo0MDowMlrOF5q_Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxNzQzMw==", "bodyText": "It would be easier to create a static default_dead_letter_options and then pass the arguments in, so that we don't do this extra logic if it is null.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9357#discussion_r396017433", "createdAt": "2020-03-21T18:39:08Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -268,47 +268,23 @@ public String getServiceBusResourceName() {\n         return deadLetter(message, null);\n     }\n \n-    /**\n-     * Moves a {@link ServiceBusMessage} to the deadletter sub-queue with modified message properties.\n-     *\n-     * @param message to be used.\n-     * @param propertiesToModify Message properties to modify.\n-     *\n-     * @return The {@link Mono} the finishes this operation on service bus resource.\n-     */\n-    public Mono<Void> deadLetter(ServiceBusReceivedMessage message, Map<String, Object> propertiesToModify) {\n-        return deadLetter(message, null, null, propertiesToModify);\n-    }\n-\n-    /**\n-     * Moves a {@link ServiceBusMessage} to the deadletter sub-queue with deadletter reason and error description.\n-     *\n-     * @param message to be used.\n-     * @param deadLetterReason The deadletter reason.\n-     * @param deadLetterErrorDescription The deadletter error description.\n-     *\n-     * @return The {@link Mono} the finishes this operation on service bus resource.\n-     */\n-    public Mono<Void> deadLetter(ServiceBusReceivedMessage message, String deadLetterReason,\n-        String deadLetterErrorDescription) {\n-        return deadLetter(message, deadLetterReason, deadLetterErrorDescription, null);\n-    }\n \n     /**\n      * Moves a {@link ServiceBusMessage} to the deadletter sub-queue with deadletter reason, error description and\n      * modifided properties.\n      *\n      * @param message to be used.\n-     * @param deadLetterReason The deadletter reason.\n-     * @param deadLetterErrorDescription The deadletter error description.\n-     * @param propertiesToModify Message properties to modify.\n+     * @param deadLetterOptions The options to specify while moving message to the deadletter sub-queue.\n      *\n      * @return The {@link Mono} the finishes this operation on service bus resource.\n      */\n-    public Mono<Void> deadLetter(ServiceBusReceivedMessage message, String deadLetterReason,\n-        String deadLetterErrorDescription, Map<String, Object> propertiesToModify) {\n-        return updateDisposition(message, DispositionStatus.SUSPENDED, deadLetterReason, deadLetterErrorDescription,\n-            propertiesToModify);\n+    public Mono<Void> deadLetter(ServiceBusReceivedMessage message, DeadLetterOptions deadLetterOptions) {\n+        if (deadLetterOptions != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8731c4699d6f9eac6c395f566d49e6c95f93b068"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxNzQ3OQ==", "bodyText": "Since this is an optional parameter, I expected another overload that just takes the received message and under the covers would pass default_dead_letter_options, that way we can do a null object assertion in this method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9357#discussion_r396017479", "createdAt": "2020-03-21T18:40:02Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -268,47 +268,23 @@ public String getServiceBusResourceName() {\n         return deadLetter(message, null);\n     }\n \n-    /**\n-     * Moves a {@link ServiceBusMessage} to the deadletter sub-queue with modified message properties.\n-     *\n-     * @param message to be used.\n-     * @param propertiesToModify Message properties to modify.\n-     *\n-     * @return The {@link Mono} the finishes this operation on service bus resource.\n-     */\n-    public Mono<Void> deadLetter(ServiceBusReceivedMessage message, Map<String, Object> propertiesToModify) {\n-        return deadLetter(message, null, null, propertiesToModify);\n-    }\n-\n-    /**\n-     * Moves a {@link ServiceBusMessage} to the deadletter sub-queue with deadletter reason and error description.\n-     *\n-     * @param message to be used.\n-     * @param deadLetterReason The deadletter reason.\n-     * @param deadLetterErrorDescription The deadletter error description.\n-     *\n-     * @return The {@link Mono} the finishes this operation on service bus resource.\n-     */\n-    public Mono<Void> deadLetter(ServiceBusReceivedMessage message, String deadLetterReason,\n-        String deadLetterErrorDescription) {\n-        return deadLetter(message, deadLetterReason, deadLetterErrorDescription, null);\n-    }\n \n     /**\n      * Moves a {@link ServiceBusMessage} to the deadletter sub-queue with deadletter reason, error description and\n      * modifided properties.\n      *\n      * @param message to be used.\n-     * @param deadLetterReason The deadletter reason.\n-     * @param deadLetterErrorDescription The deadletter error description.\n-     * @param propertiesToModify Message properties to modify.\n+     * @param deadLetterOptions The options to specify while moving message to the deadletter sub-queue.\n      *\n      * @return The {@link Mono} the finishes this operation on service bus resource.\n      */\n-    public Mono<Void> deadLetter(ServiceBusReceivedMessage message, String deadLetterReason,\n-        String deadLetterErrorDescription, Map<String, Object> propertiesToModify) {\n-        return updateDisposition(message, DispositionStatus.SUSPENDED, deadLetterReason, deadLetterErrorDescription,\n-            propertiesToModify);\n+    public Mono<Void> deadLetter(ServiceBusReceivedMessage message, DeadLetterOptions deadLetterOptions) {\n+        if (deadLetterOptions != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxNzQzMw=="}, "originalCommit": {"oid": "8731c4699d6f9eac6c395f566d49e6c95f93b068"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDcyNjc5OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/DeadLetterOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxODo0MDo1NFrOF5q_jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxODo0MDo1NFrOF5q_jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxNzU1MQ==", "bodyText": "To be consistent, copy and paste and add a summary.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9357#discussion_r396017551", "createdAt": "2020-03-21T18:40:54Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/DeadLetterOptions.java", "diffHunk": "@@ -0,0 +1,70 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import java.util.Map;\n+\n+/**\n+ * Options to specify while putting message in deadletter queue.\n+ */\n+public class DeadLetterOptions {\n+\n+    private String deadLetterReason;\n+    private String deadLetterErrorDescription;\n+    private Map<String, Object> propertiesToModify;\n+\n+    /**\n+     * Sets the reason while putting message in dead letter sub-queue.\n+     * @param deadLetterReason while putting message in dead letter sub-queue.\n+     * @return {@link DeadLetterOptions} object.\n+     */\n+    public DeadLetterOptions setDeadLetterReason(String deadLetterReason) {\n+        this.deadLetterReason = deadLetterReason;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the error description while putting message in dead letter sub-queue.\n+     * @param deadLetterErrorDescription while putting message in dead letter sub-queue.\n+     * @return {@link DeadLetterOptions} object.\n+     */\n+    public DeadLetterOptions setDeadLetterErrorDescription(String deadLetterErrorDescription) {\n+        this.deadLetterErrorDescription = deadLetterErrorDescription;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the message properties to modify while putting message in dead letter sub-queue.\n+     * @param propertiesToModify Message properties to modify.\n+     * @return {@link DeadLetterOptions} object.\n+     */\n+    public DeadLetterOptions setPropertiesToModify(Map<String, Object> propertiesToModify) {\n+        this.propertiesToModify = propertiesToModify;\n+        return this;\n+    }\n+\n+    /**\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4f20f539d165f8387b220be02246440b93cfbf9"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDc4MzExOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQyMDowOTozNFrOF5rc2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQyMDowOTozNFrOF5rc2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAyNTA0OQ==", "bodyText": "nit: group variables together by type. This is in between the private final variables. Generally I put static variables at the top arranged by visibility.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9357#discussion_r396025049", "createdAt": "2020-03-21T20:09:34Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -57,6 +57,8 @@\n     private final boolean isAutoComplete;\n     private final ReceiveMode receiveMode;\n \n+    private static final DeadLetterOptions DEFAULT_DEAD_LETTER_OPTIONS =  new DeadLetterOptions();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d74a46d9bd9a4d0eec85e5a17620ff5dd8768b49"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDc4MzU4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceivedMessageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQyMDoxMDozNlrOF5rdIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQyMDoxMDozNlrOF5rdIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAyNTEyMQ==", "bodyText": "Isn't there an equality check for durations", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9357#discussion_r396025121", "createdAt": "2020-03-21T20:10:36Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceivedMessageTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.time.Duration;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class ServiceBusReceivedMessageTest {\n+\n+    // Create a giant payload with 10000 characters that are \"a\".\n+    private static final String PAYLOAD = new String(new char[10000]).replace(\"\\0\", \"a\");\n+    private static final byte[] PAYLOAD_BYTES = PAYLOAD.getBytes(UTF_8);\n+    private static final String PAYLOAD_STRING = new String(PAYLOAD_BYTES);\n+\n+    @Test\n+    public void byteArrayNotNull() {\n+        assertThrows(NullPointerException.class, () -> new ServiceBusReceivedMessage((byte[]) null));\n+    }\n+\n+\n+    @Test\n+    public void messagePropertiesShouldNotBeNull() {\n+        // Act\n+        final ServiceBusReceivedMessage receivedMessage = new ServiceBusReceivedMessage(PAYLOAD_BYTES);\n+\n+        // Assert\n+        Assertions.assertNotNull(receivedMessage.getBody());\n+        Assertions.assertNotNull(receivedMessage.getProperties());\n+    }\n+\n+\n+    /**\n+     * Verify that we can create an Message with an empty byte array.\n+     */\n+    @Test\n+    public void canCreateWithEmptyArray() {\n+        // Arrange\n+        byte[] byteArray = new byte[0];\n+\n+        // Act\n+        final ServiceBusReceivedMessage serviceBusMessageData = new ServiceBusReceivedMessage(byteArray);\n+\n+        // Assert\n+        final byte[] actual = serviceBusMessageData.getBody();\n+        Assertions.assertNotNull(actual);\n+        Assertions.assertEquals(0, actual.length);\n+    }\n+\n+    /**\n+     * Verify that we can create an Message with the correct body contents.\n+     */\n+    @Test\n+    public void canCreateWithBytePayload() {\n+        // Act\n+        final ServiceBusReceivedMessage serviceBusMessageData = new ServiceBusReceivedMessage(PAYLOAD_BYTES);\n+\n+        // Assert\n+        Assertions.assertNotNull(serviceBusMessageData.getBody());\n+        Assertions.assertEquals(PAYLOAD, new String(serviceBusMessageData.getBody(), UTF_8));\n+    }\n+\n+    @Test\n+    public void toServiceBusMessageTest() {\n+        //Arrange\n+        final ServiceBusReceivedMessage originalMessage = new ServiceBusReceivedMessage(PAYLOAD_BYTES);\n+        originalMessage.setMessageId(\"mid\");\n+        originalMessage.setContentType(\"type\");\n+        originalMessage.setCorrelationId(\"cid\");\n+        originalMessage.setReplyTo(\"rto\");\n+        originalMessage.setViaPartitionKey(\"something\");\n+        originalMessage.setTimeToLive(Duration.ofSeconds(10));\n+        originalMessage.setReplyToSessionId(\"rsessionid\");\n+        originalMessage.setLabel(\"label\");\n+        originalMessage.setTo(\"to\");\n+\n+        // Act\n+        final ServiceBusMessage messageToSend = originalMessage.toServiceBusMessage();\n+\n+        // Assert\n+        Assertions.assertNotNull(messageToSend);\n+        Assertions.assertNotNull(messageToSend.getBody());\n+        Assertions.assertEquals(PAYLOAD, new String(messageToSend.getBody(), UTF_8));\n+        Assertions.assertEquals(originalMessage.getMessageId(), messageToSend.getMessageId());\n+        Assertions.assertEquals(originalMessage.getContentType(), messageToSend.getContentType());\n+        Assertions.assertEquals(originalMessage.getCorrelationId(), messageToSend.getCorrelationId());\n+        Assertions.assertEquals(originalMessage.getReplyTo(), messageToSend.getReplyTo());\n+        Assertions.assertEquals(originalMessage.getViaPartitionKey(), messageToSend.getViaPartitionKey());\n+        Assertions.assertTrue(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d74a46d9bd9a4d0eec85e5a17620ff5dd8768b49"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 84, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}