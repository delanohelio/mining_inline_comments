{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2MjYwMjY3", "number": 13984, "title": "Adds support for auto-lock renewal.", "bodyText": "Fixes #12459", "createdAt": "2020-08-11T17:53:30Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13984", "merged": true, "mergeCommit": {"oid": "8ea5e7df67fc8ec762cc8fab6de89845389b95ba"}, "closed": true, "closedAt": "2020-08-12T22:33:32Z", "author": {"login": "conniey"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8xkX8gH2gAyNDY2MjYwMjY3OjUwNDMxN2Y2MmVkNWRhYjkxZGVhYjRmMjI5Y2NhZjZhOGJlNWE3YWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-TAVggH2gAyNDY2MjYwMjY3OjI1YzFkMjk1YWNmZjMzMGI0MTY0ODc0MTY4NWVlODc1OTlkNTRjZDA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "504317f62ed5dab91deab4f229ccaf6a8be5a7ac", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/504317f62ed5dab91deab4f229ccaf6a8be5a7ac", "committedDate": "2020-08-08T04:46:37Z", "message": "Add LockRenewalOperation and LockRenewalStatus"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19e2f2e3836268e0a251354cc6e2904d4cc71da6", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/19e2f2e3836268e0a251354cc6e2904d4cc71da6", "committedDate": "2020-08-08T17:54:57Z", "message": "Fixing bug in lock renewal where it could be negative."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8765fdeca038a10c341d5b89af34db73fbce568e", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8765fdeca038a10c341d5b89af34db73fbce568e", "committedDate": "2020-08-08T17:55:13Z", "message": "Fixing deprecated method call."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca191b5a7b5149cf0d5fbc948309511a51da42d2", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ca191b5a7b5149cf0d5fbc948309511a51da42d2", "committedDate": "2020-08-10T11:45:31Z", "message": "Adding lock renewal operation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90392d458fba98ae4d075e5f0c20ac4a1e3a3a75", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/90392d458fba98ae4d075e5f0c20ac4a1e3a3a75", "committedDate": "2020-08-10T18:40:44Z", "message": "Add test for zero renewal."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c16bdbda6315ea6bade31256888cffff42f383f0", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c16bdbda6315ea6bade31256888cffff42f383f0", "committedDate": "2020-08-10T21:28:04Z", "message": "Reuse LockRenewalOperation for UnnamedSessionReceiver."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e3246ea047ae4973e8f190a56db4c933759c1b7", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5e3246ea047ae4973e8f190a56db4c933759c1b7", "committedDate": "2020-08-10T21:46:52Z", "message": "Fixing subscription."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fd95bbbe5d4ae757b3a76cf7715d52493cfcc2d", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7fd95bbbe5d4ae757b3a76cf7715d52493cfcc2d", "committedDate": "2020-08-11T17:51:42Z", "message": "Adding overload for public constructors."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MzU2MzM5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13984#pullrequestreview-465356339", "createdAt": "2020-08-11T19:15:11Z", "commit": {"oid": "7fd95bbbe5d4ae757b3a76cf7715d52493cfcc2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxOToxNToxMVrOG_FwuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxOToxNToxMVrOG_FwuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgwNzg2NA==", "bodyText": "It will be good to put some  embeded code samples in java doc on how to use this API.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13984#discussion_r468807864", "createdAt": "2020-08-11T19:15:11Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/LockRenewalOperation.java", "diffHunk": "@@ -0,0 +1,212 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.MessageUtils;\n+import com.azure.messaging.servicebus.models.LockRenewalStatus;\n+import reactor.core.Disposable;\n+import reactor.core.Disposables;\n+import reactor.core.publisher.EmitterProcessor;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.MonoProcessor;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+\n+/**\n+ * Represents a renewal session or message lock renewal operation that.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fd95bbbe5d4ae757b3a76cf7715d52493cfcc2d"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MzU4NDI2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13984#pullrequestreview-465358426", "createdAt": "2020-08-11T19:18:15Z", "commit": {"oid": "7fd95bbbe5d4ae757b3a76cf7715d52493cfcc2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxOToxODoxNVrOG_F3Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxOToxODoxNVrOG_F3Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgwOTUxOA==", "bodyText": "Lock ->  Message lock : To make it clear that it is message lock.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13984#discussion_r468809518", "createdAt": "2020-08-11T19:18:15Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/LockRenewalOperation.java", "diffHunk": "@@ -0,0 +1,212 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.MessageUtils;\n+import com.azure.messaging.servicebus.models.LockRenewalStatus;\n+import reactor.core.Disposable;\n+import reactor.core.Disposables;\n+import reactor.core.publisher.EmitterProcessor;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.MonoProcessor;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+\n+/**\n+ * Represents a renewal session or message lock renewal operation that.\n+ */\n+public class LockRenewalOperation implements AutoCloseable {\n+    private final ClientLogger logger = new ClientLogger(LockRenewalOperation.class);\n+    private final AtomicBoolean isDisposed = new AtomicBoolean();\n+    private final AtomicReference<Instant> lockedUntil = new AtomicReference<>();\n+    private final AtomicReference<Throwable> throwable = new AtomicReference<>();\n+    private final AtomicReference<LockRenewalStatus> status = new AtomicReference<>(LockRenewalStatus.RUNNING);\n+    private final MonoProcessor<Void> cancellationProcessor = MonoProcessor.create();\n+\n+    private final String lockToken;\n+    private final boolean isSession;\n+    private final Function<String, Mono<Instant>> renewalOperation;\n+    private final Disposable subscription;\n+\n+    /**\n+     * Creates a new lock renewal operation. The lock is initially renewed.\n+     *\n+     * @param lockToken Lock or session id to renew.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fd95bbbe5d4ae757b3a76cf7715d52493cfcc2d"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MzYyMTIy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13984#pullrequestreview-465362122", "createdAt": "2020-08-11T19:23:58Z", "commit": {"oid": "7fd95bbbe5d4ae757b3a76cf7715d52493cfcc2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxOToyMzo1OFrOG_GCrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxOToyMzo1OFrOG_GCrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgxMjQ2MQ==", "bodyText": "isZero() | isNegative() ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13984#discussion_r468812461", "createdAt": "2020-08-11T19:23:58Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/LockRenewalOperation.java", "diffHunk": "@@ -0,0 +1,212 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.MessageUtils;\n+import com.azure.messaging.servicebus.models.LockRenewalStatus;\n+import reactor.core.Disposable;\n+import reactor.core.Disposables;\n+import reactor.core.publisher.EmitterProcessor;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.MonoProcessor;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+\n+/**\n+ * Represents a renewal session or message lock renewal operation that.\n+ */\n+public class LockRenewalOperation implements AutoCloseable {\n+    private final ClientLogger logger = new ClientLogger(LockRenewalOperation.class);\n+    private final AtomicBoolean isDisposed = new AtomicBoolean();\n+    private final AtomicReference<Instant> lockedUntil = new AtomicReference<>();\n+    private final AtomicReference<Throwable> throwable = new AtomicReference<>();\n+    private final AtomicReference<LockRenewalStatus> status = new AtomicReference<>(LockRenewalStatus.RUNNING);\n+    private final MonoProcessor<Void> cancellationProcessor = MonoProcessor.create();\n+\n+    private final String lockToken;\n+    private final boolean isSession;\n+    private final Function<String, Mono<Instant>> renewalOperation;\n+    private final Disposable subscription;\n+\n+    /**\n+     * Creates a new lock renewal operation. The lock is initially renewed.\n+     *\n+     * @param lockToken Lock or session id to renew.\n+     * @param maxLockRenewalDuration The maximum duration this lock should be renewed.\n+     * @param isSession Whether the lock represents a session lock or message lock.\n+     * @param renewalOperation The renewal operation to call.\n+     */\n+    LockRenewalOperation(String lockToken, Duration maxLockRenewalDuration, boolean isSession,\n+        Function<String, Mono<Instant>> renewalOperation) {\n+        this(lockToken, maxLockRenewalDuration, isSession, renewalOperation, Instant.now());\n+    }\n+\n+    /**\n+     * Creates a new lock renewal operation.\n+     *\n+     * @param lockToken Lock or session id to renew.\n+     * @param lockedUntil The initial period the message or session is locked until.\n+     * @param maxLockRenewalDuration The maximum duration this lock should be renewed.\n+     * @param isSession Whether the lock represents a session lock or message lock.\n+     * @param renewalOperation The renewal operation to call.\n+     */\n+    LockRenewalOperation(String lockToken, Duration maxLockRenewalDuration, boolean isSession,\n+        Function<String, Mono<Instant>> renewalOperation, Instant lockedUntil) {\n+        this.lockToken = Objects.requireNonNull(lockToken, \"'lockToken' cannot be null.\");\n+        this.renewalOperation = Objects.requireNonNull(renewalOperation, \"'renewalOperation' cannot be null.\");\n+        this.isSession = isSession;\n+\n+        Objects.requireNonNull(lockedUntil, \"'lockedUntil cannot be null.'\");\n+        Objects.requireNonNull(maxLockRenewalDuration, \"'maxLockRenewalDuration' cannot be null.\");\n+\n+        if (maxLockRenewalDuration.isNegative()) {\n+            throw logger.logThrowableAsError(new IllegalArgumentException(\n+                \"'maxLockRenewalDuration' cannot be negative.\"));\n+        }\n+\n+        this.lockedUntil.set(lockedUntil);\n+        this.subscription = getRenewLockOperation(lockedUntil, maxLockRenewalDuration);\n+    }\n+\n+    /**\n+     * Gets the current instant the message or session is locked until.\n+     *\n+     * @return the instant the message or session is locked until.\n+     */\n+    public Instant getLockedUntil() {\n+        return lockedUntil.get();\n+    }\n+\n+    /**\n+     * Gets the message lock token for the renewal operation.\n+     *\n+     * @return The message lock token or {@code null} if a session is being renewed instead.\n+     */\n+    public String getLockToken() {\n+        return isSession ? null : lockToken;\n+    }\n+\n+    /**\n+     * Gets the session id for this lock renewal operation.\n+     *\n+     * @return The session id or {@code null} if it is not a session renewal.\n+     */\n+    public String getSessionId() {\n+        return isSession ? lockToken : null;\n+    }\n+\n+    /**\n+     * Gets the current status of the renewal operation.\n+     *\n+     * @return The current status of the renewal operation.\n+     */\n+    public LockRenewalStatus getStatus() {\n+        return status.get();\n+    }\n+\n+    /**\n+     * Gets the exception if an error occurred whilst renewing the message or session lock.\n+     *\n+     * @return the exception if an error occurred whilst renewing the message or session lock, otherwise {@code null}.\n+     */\n+    public Throwable getThrowable() {\n+        return throwable.get();\n+    }\n+\n+    /**\n+     * Cancels the lock renewal operation.\n+     */\n+    @Override\n+    public void close() {\n+        if (isDisposed.getAndSet(true)) {\n+            return;\n+        }\n+\n+        if (status.compareAndSet(LockRenewalStatus.RUNNING, LockRenewalStatus.CANCELLED)) {\n+            logger.verbose(\"token[{}] Cancelled operation.\", lockToken);\n+        }\n+\n+        cancellationProcessor.onComplete();\n+        subscription.dispose();\n+    }\n+\n+    /**\n+     * Gets the lock renewal operation. if the {@code maxLockRenewalDuration} is {@link Duration#isZero()}, then the\n+     * lock is never renewed.\n+     *\n+     * @param initialLockedUntil When the initial call is locked until.\n+     * @param maxLockRenewalDuration Duration to renew lock for.\n+     * @return The subscription for the operation.\n+     */\n+    private Disposable getRenewLockOperation(Instant initialLockedUntil, Duration maxLockRenewalDuration) {\n+        if (maxLockRenewalDuration.isZero()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fd95bbbe5d4ae757b3a76cf7715d52493cfcc2d"}, "originalPosition": 151}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MzY0Mzg0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13984#pullrequestreview-465364384", "createdAt": "2020-08-11T19:27:33Z", "commit": {"oid": "7fd95bbbe5d4ae757b3a76cf7715d52493cfcc2d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxOToyNzozM1rOG_GJ6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxOTo1NToxNVrOG_HA6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgxNDMxNA==", "bodyText": "is this messaging correct ?, the lockToken can be for Message Lock or session id.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13984#discussion_r468814314", "createdAt": "2020-08-11T19:27:33Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/LockRenewalOperation.java", "diffHunk": "@@ -0,0 +1,212 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.MessageUtils;\n+import com.azure.messaging.servicebus.models.LockRenewalStatus;\n+import reactor.core.Disposable;\n+import reactor.core.Disposables;\n+import reactor.core.publisher.EmitterProcessor;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.MonoProcessor;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+\n+/**\n+ * Represents a renewal session or message lock renewal operation that.\n+ */\n+public class LockRenewalOperation implements AutoCloseable {\n+    private final ClientLogger logger = new ClientLogger(LockRenewalOperation.class);\n+    private final AtomicBoolean isDisposed = new AtomicBoolean();\n+    private final AtomicReference<Instant> lockedUntil = new AtomicReference<>();\n+    private final AtomicReference<Throwable> throwable = new AtomicReference<>();\n+    private final AtomicReference<LockRenewalStatus> status = new AtomicReference<>(LockRenewalStatus.RUNNING);\n+    private final MonoProcessor<Void> cancellationProcessor = MonoProcessor.create();\n+\n+    private final String lockToken;\n+    private final boolean isSession;\n+    private final Function<String, Mono<Instant>> renewalOperation;\n+    private final Disposable subscription;\n+\n+    /**\n+     * Creates a new lock renewal operation. The lock is initially renewed.\n+     *\n+     * @param lockToken Lock or session id to renew.\n+     * @param maxLockRenewalDuration The maximum duration this lock should be renewed.\n+     * @param isSession Whether the lock represents a session lock or message lock.\n+     * @param renewalOperation The renewal operation to call.\n+     */\n+    LockRenewalOperation(String lockToken, Duration maxLockRenewalDuration, boolean isSession,\n+        Function<String, Mono<Instant>> renewalOperation) {\n+        this(lockToken, maxLockRenewalDuration, isSession, renewalOperation, Instant.now());\n+    }\n+\n+    /**\n+     * Creates a new lock renewal operation.\n+     *\n+     * @param lockToken Lock or session id to renew.\n+     * @param lockedUntil The initial period the message or session is locked until.\n+     * @param maxLockRenewalDuration The maximum duration this lock should be renewed.\n+     * @param isSession Whether the lock represents a session lock or message lock.\n+     * @param renewalOperation The renewal operation to call.\n+     */\n+    LockRenewalOperation(String lockToken, Duration maxLockRenewalDuration, boolean isSession,\n+        Function<String, Mono<Instant>> renewalOperation, Instant lockedUntil) {\n+        this.lockToken = Objects.requireNonNull(lockToken, \"'lockToken' cannot be null.\");\n+        this.renewalOperation = Objects.requireNonNull(renewalOperation, \"'renewalOperation' cannot be null.\");\n+        this.isSession = isSession;\n+\n+        Objects.requireNonNull(lockedUntil, \"'lockedUntil cannot be null.'\");\n+        Objects.requireNonNull(maxLockRenewalDuration, \"'maxLockRenewalDuration' cannot be null.\");\n+\n+        if (maxLockRenewalDuration.isNegative()) {\n+            throw logger.logThrowableAsError(new IllegalArgumentException(\n+                \"'maxLockRenewalDuration' cannot be negative.\"));\n+        }\n+\n+        this.lockedUntil.set(lockedUntil);\n+        this.subscription = getRenewLockOperation(lockedUntil, maxLockRenewalDuration);\n+    }\n+\n+    /**\n+     * Gets the current instant the message or session is locked until.\n+     *\n+     * @return the instant the message or session is locked until.\n+     */\n+    public Instant getLockedUntil() {\n+        return lockedUntil.get();\n+    }\n+\n+    /**\n+     * Gets the message lock token for the renewal operation.\n+     *\n+     * @return The message lock token or {@code null} if a session is being renewed instead.\n+     */\n+    public String getLockToken() {\n+        return isSession ? null : lockToken;\n+    }\n+\n+    /**\n+     * Gets the session id for this lock renewal operation.\n+     *\n+     * @return The session id or {@code null} if it is not a session renewal.\n+     */\n+    public String getSessionId() {\n+        return isSession ? lockToken : null;\n+    }\n+\n+    /**\n+     * Gets the current status of the renewal operation.\n+     *\n+     * @return The current status of the renewal operation.\n+     */\n+    public LockRenewalStatus getStatus() {\n+        return status.get();\n+    }\n+\n+    /**\n+     * Gets the exception if an error occurred whilst renewing the message or session lock.\n+     *\n+     * @return the exception if an error occurred whilst renewing the message or session lock, otherwise {@code null}.\n+     */\n+    public Throwable getThrowable() {\n+        return throwable.get();\n+    }\n+\n+    /**\n+     * Cancels the lock renewal operation.\n+     */\n+    @Override\n+    public void close() {\n+        if (isDisposed.getAndSet(true)) {\n+            return;\n+        }\n+\n+        if (status.compareAndSet(LockRenewalStatus.RUNNING, LockRenewalStatus.CANCELLED)) {\n+            logger.verbose(\"token[{}] Cancelled operation.\", lockToken);\n+        }\n+\n+        cancellationProcessor.onComplete();\n+        subscription.dispose();\n+    }\n+\n+    /**\n+     * Gets the lock renewal operation. if the {@code maxLockRenewalDuration} is {@link Duration#isZero()}, then the\n+     * lock is never renewed.\n+     *\n+     * @param initialLockedUntil When the initial call is locked until.\n+     * @param maxLockRenewalDuration Duration to renew lock for.\n+     * @return The subscription for the operation.\n+     */\n+    private Disposable getRenewLockOperation(Instant initialLockedUntil, Duration maxLockRenewalDuration) {\n+        if (maxLockRenewalDuration.isZero()) {\n+            status.set(LockRenewalStatus.COMPLETE);\n+            return Disposables.single();\n+        }\n+\n+        final Instant now = Instant.now();\n+        Duration initialInterval = Duration.between(now, initialLockedUntil);\n+\n+        if (initialInterval.isNegative()) {\n+            logger.info(\"Duration was negative. now[{}] lockedUntil[{}]\", now, initialLockedUntil);\n+            initialInterval = Duration.ZERO;\n+        } else {\n+            // Adjust the interval, so we can buffer time for the time it'll take to refresh.\n+            final Duration adjusted = MessageUtils.adjustServerTimeout(initialInterval);\n+            if (adjusted.isNegative()) {\n+                logger.info(\"Adjusted duration is negative. Adjusted: {}ms\", initialInterval.toMillis());\n+            } else {\n+                initialInterval = adjusted;\n+            }\n+        }\n+\n+        final EmitterProcessor<Duration> emitterProcessor = EmitterProcessor.create();\n+        final FluxSink<Duration> sink = emitterProcessor.sink();\n+\n+        sink.next(initialInterval);\n+\n+        final Flux<Object> cancellationSignals = Flux.first(cancellationProcessor, Mono.delay(maxLockRenewalDuration));\n+\n+        return Flux.switchOnNext(emitterProcessor.map(Flux::interval))\n+            .takeUntilOther(cancellationSignals)\n+            .flatMap(delay -> {\n+                final String id = lockToken;\n+                logger.info(\"token[{}]. now[{}]. Starting lock renewal.\", id, Instant.now());\n+                if (CoreUtils.isNullOrEmpty(id)) {\n+                    return Mono.error(new IllegalStateException(\"Cannot renew session lock without session id.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fd95bbbe5d4ae757b3a76cf7715d52493cfcc2d"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgxODIwOA==", "bodyText": "Shouldn't we check for empty or null session id and throw Exception as needed?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13984#discussion_r468818208", "createdAt": "2020-08-11T19:34:53Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -658,6 +659,59 @@ public String getEntityPath() {\n             transactionContext);\n     }\n \n+    /**\n+     * Gets and starts the auto lock renewal for a message with the given lock.\n+     *\n+     * @param lockToken Lock token of the message.\n+     * @param maxLockRenewalDuration Maximum duration to keep renewing the lock token.\n+     * @return A lock renewal operation for the message.\n+     */\n+    public LockRenewalOperation getAutoRenewMessageLock(String lockToken, Duration maxLockRenewalDuration) {\n+        if (isDisposed.get()) {\n+            throw logger.logThrowableAsError(new IllegalStateException(\n+                String.format(INVALID_OPERATION_DISPOSED_RECEIVER, \"getAutoRenewMessageLock\")));\n+        } else if (Objects.isNull(lockToken)) {\n+            throw logger.logThrowableAsError(new NullPointerException(\"'lockToken' cannot be null.\"));\n+        } else if (lockToken.isEmpty()) {\n+            throw logger.logThrowableAsError(new IllegalArgumentException(\"'lockToken' cannot be empty.\"));\n+        } else if (receiverOptions.isSessionReceiver()) {\n+            throw logger.logThrowableAsError(new IllegalStateException(\n+                String.format(\"Cannot renew message lock [%s] for a session receiver.\", lockToken)));\n+        } else if (maxLockRenewalDuration == null) {\n+            throw logger.logThrowableAsError(new NullPointerException(\"'maxLockRenewalDuration' cannot be null.\"));\n+        } else if (maxLockRenewalDuration.isNegative()) {\n+            throw logger.logThrowableAsError(new IllegalArgumentException(\n+                \"'maxLockRenewalDuration' cannot be negative.\"));\n+        }\n+\n+        return new LockRenewalOperation(lockToken, maxLockRenewalDuration, false, this::renewMessageLock);\n+    }\n+\n+    /**\n+     * Gets and starts the auto lock renewal for a session with the given lock.\n+     *\n+     * @param sessionId Id for the session to renew.\n+     * @param maxLockRenewalDuration Maximum duration to keep renewing the lock token.\n+     * @return A lock renewal operation for the message.\n+     * @throws IllegalStateException if the receiver is a non-session receiver or the receiver is disposed.\n+     */\n+    public LockRenewalOperation getAutoRenewSessionLock(String sessionId, Duration maxLockRenewalDuration) {\n+        if (isDisposed.get()) {\n+            throw logger.logThrowableAsError(new IllegalStateException(\n+                String.format(INVALID_OPERATION_DISPOSED_RECEIVER, \"getAutoRenewSessionLock\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fd95bbbe5d4ae757b3a76cf7715d52493cfcc2d"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgxODU0MA==", "bodyText": "Document NPE", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13984#discussion_r468818540", "createdAt": "2020-08-11T19:35:34Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -658,6 +659,59 @@ public String getEntityPath() {\n             transactionContext);\n     }\n \n+    /**\n+     * Gets and starts the auto lock renewal for a message with the given lock.\n+     *\n+     * @param lockToken Lock token of the message.\n+     * @param maxLockRenewalDuration Maximum duration to keep renewing the lock token.\n+     * @return A lock renewal operation for the message.\n+     */\n+    public LockRenewalOperation getAutoRenewMessageLock(String lockToken, Duration maxLockRenewalDuration) {\n+        if (isDisposed.get()) {\n+            throw logger.logThrowableAsError(new IllegalStateException(\n+                String.format(INVALID_OPERATION_DISPOSED_RECEIVER, \"getAutoRenewMessageLock\")));\n+        } else if (Objects.isNull(lockToken)) {\n+            throw logger.logThrowableAsError(new NullPointerException(\"'lockToken' cannot be null.\"));\n+        } else if (lockToken.isEmpty()) {\n+            throw logger.logThrowableAsError(new IllegalArgumentException(\"'lockToken' cannot be empty.\"));\n+        } else if (receiverOptions.isSessionReceiver()) {\n+            throw logger.logThrowableAsError(new IllegalStateException(\n+                String.format(\"Cannot renew message lock [%s] for a session receiver.\", lockToken)));\n+        } else if (maxLockRenewalDuration == null) {\n+            throw logger.logThrowableAsError(new NullPointerException(\"'maxLockRenewalDuration' cannot be null.\"));\n+        } else if (maxLockRenewalDuration.isNegative()) {\n+            throw logger.logThrowableAsError(new IllegalArgumentException(\n+                \"'maxLockRenewalDuration' cannot be negative.\"));\n+        }\n+\n+        return new LockRenewalOperation(lockToken, maxLockRenewalDuration, false, this::renewMessageLock);\n+    }\n+\n+    /**\n+     * Gets and starts the auto lock renewal for a session with the given lock.\n+     *\n+     * @param sessionId Id for the session to renew.\n+     * @param maxLockRenewalDuration Maximum duration to keep renewing the lock token.\n+     * @return A lock renewal operation for the message.\n+     * @throws IllegalStateException if the receiver is a non-session receiver or the receiver is disposed.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fd95bbbe5d4ae757b3a76cf7715d52493cfcc2d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgxOTAzMw==", "bodyText": "document NPE, and also if  sessionId validation checks .", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13984#discussion_r468819033", "createdAt": "2020-08-11T19:36:39Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -450,6 +450,30 @@ public void deadLetter(String lockToken, DeadLetterOptions deadLetterOptions, St\n         asyncClient.deadLetter(lockToken, deadLetterOptions, sessionId, transactionContext).block(operationTimeout);\n     }\n \n+    /**\n+     * Gets and starts the auto lock renewal for a message with the given lock.\n+     *\n+     * @param lockToken Lock token of the message.\n+     * @param maxLockRenewalDuration Maximum duration to keep renewing the lock token.\n+     * @return A lock renewal operation for the message.\n+     * @throws IllegalStateException if the receiver is a non-session receiver or the receiver is disposed.\n+     */\n+    public LockRenewalOperation getAutoRenewMessageLock(String lockToken, Duration maxLockRenewalDuration) {\n+        return asyncClient.getAutoRenewMessageLock(lockToken, maxLockRenewalDuration);\n+    }\n+\n+    /**\n+     * Gets and starts the auto lock renewal for a session with the given lock.\n+     *\n+     * @param sessionId Id for the session to renew.\n+     * @param maxLockRenewalDuration Maximum duration to keep renewing the lock token.\n+     * @return A lock renewal operation for the message.\n+     * @throws IllegalStateException if the receiver is a non-session receiver or the receiver is disposed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fd95bbbe5d4ae757b3a76cf7715d52493cfcc2d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgyMjM2OA==", "bodyText": "Instant.now() :  This would mean, renew until , current time. is this right ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13984#discussion_r468822368", "createdAt": "2020-08-11T19:43:26Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/LockRenewalOperation.java", "diffHunk": "@@ -0,0 +1,212 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.MessageUtils;\n+import com.azure.messaging.servicebus.models.LockRenewalStatus;\n+import reactor.core.Disposable;\n+import reactor.core.Disposables;\n+import reactor.core.publisher.EmitterProcessor;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.MonoProcessor;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+\n+/**\n+ * Represents a renewal session or message lock renewal operation that.\n+ */\n+public class LockRenewalOperation implements AutoCloseable {\n+    private final ClientLogger logger = new ClientLogger(LockRenewalOperation.class);\n+    private final AtomicBoolean isDisposed = new AtomicBoolean();\n+    private final AtomicReference<Instant> lockedUntil = new AtomicReference<>();\n+    private final AtomicReference<Throwable> throwable = new AtomicReference<>();\n+    private final AtomicReference<LockRenewalStatus> status = new AtomicReference<>(LockRenewalStatus.RUNNING);\n+    private final MonoProcessor<Void> cancellationProcessor = MonoProcessor.create();\n+\n+    private final String lockToken;\n+    private final boolean isSession;\n+    private final Function<String, Mono<Instant>> renewalOperation;\n+    private final Disposable subscription;\n+\n+    /**\n+     * Creates a new lock renewal operation. The lock is initially renewed.\n+     *\n+     * @param lockToken Lock or session id to renew.\n+     * @param maxLockRenewalDuration The maximum duration this lock should be renewed.\n+     * @param isSession Whether the lock represents a session lock or message lock.\n+     * @param renewalOperation The renewal operation to call.\n+     */\n+    LockRenewalOperation(String lockToken, Duration maxLockRenewalDuration, boolean isSession,\n+        Function<String, Mono<Instant>> renewalOperation) {\n+        this(lockToken, maxLockRenewalDuration, isSession, renewalOperation, Instant.now());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fd95bbbe5d4ae757b3a76cf7715d52493cfcc2d"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgyODM5Mg==", "bodyText": "Are we also taking care of situation when , user complete a message but renew operation still try to renew and keep getting error in logs.\nAfter settlement of the message by user, How does that lock is not renewing automatically in background and filling the logs ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13984#discussion_r468828392", "createdAt": "2020-08-11T19:55:15Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/LockRenewalOperationTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.models.LockRenewalStatus;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.mockito.Mockito.atMost;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Represents a renewal session or message lock renewal operation that.\n+ */\n+class LockRenewalOperationTest {\n+    private static final String A_LOCK_TOKEN = \"a-lock-token\";\n+\n+    private final ClientLogger logger = new ClientLogger(LockRenewalOperationTest.class);\n+    private LockRenewalOperation operation;\n+\n+    @Mock\n+    private Function<String, Mono<Instant>> renewalOperation;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        MockitoAnnotations.initMocks(this);\n+    }\n+\n+    @AfterEach\n+    void afterEach() {\n+        if (operation != null) {\n+            operation.close();\n+        }\n+    }\n+\n+    @ValueSource(booleans = {true, false})\n+    @ParameterizedTest\n+    void constructor(boolean isSession) {\n+        // Arrange\n+        final Duration renewalPeriod = Duration.ofSeconds(4);\n+        final Instant lockedUntil = Instant.now().plus(renewalPeriod);\n+        final Duration maxDuration = Duration.ofSeconds(20);\n+        when(renewalOperation.apply(A_LOCK_TOKEN))\n+            .thenReturn(Mono.fromCallable(() -> Instant.now().plus(renewalPeriod)));\n+\n+        // Act\n+        operation = new LockRenewalOperation(A_LOCK_TOKEN, maxDuration, isSession, renewalOperation, lockedUntil);\n+\n+        // Assert\n+        if (isSession) {\n+            assertEquals(A_LOCK_TOKEN, operation.getSessionId());\n+            assertNull(operation.getLockToken());\n+        } else {\n+            assertEquals(A_LOCK_TOKEN, operation.getLockToken());\n+            assertNull(operation.getSessionId());\n+        }\n+\n+        assertEquals(lockedUntil, operation.getLockedUntil());\n+        assertEquals(LockRenewalStatus.RUNNING, operation.getStatus());\n+        assertNull(operation.getThrowable());\n+    }\n+\n+    /**\n+     * Verify that when an error occurs, it is displayed.\n+     */\n+    @Test\n+    void errors() throws InterruptedException {\n+        // Arrange", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fd95bbbe5d4ae757b3a76cf7715d52493cfcc2d"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81447b28b24e923474fac082ac2fc417c1a4963d", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/81447b28b24e923474fac082ac2fc417c1a4963d", "committedDate": "2020-08-11T20:22:13Z", "message": "Add tests for receiver."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96c13ee14c1bcecbac5b27f31d3a880abd90b91b", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/96c13ee14c1bcecbac5b27f31d3a880abd90b91b", "committedDate": "2020-08-11T20:28:36Z", "message": "Add documentation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08eb7792d994441354eed7f618343e048d8c13aa", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/08eb7792d994441354eed7f618343e048d8c13aa", "committedDate": "2020-08-11T22:58:03Z", "message": "Add LockContainer<T>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db2172cc0150c1665324d1d19dbf6fdc8586156e", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/db2172cc0150c1665324d1d19dbf6fdc8586156e", "committedDate": "2020-08-11T23:35:00Z", "message": "Fixing build breaks."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NTIwMDAy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13984#pullrequestreview-465520002", "createdAt": "2020-08-12T00:47:07Z", "commit": {"oid": "7fd95bbbe5d4ae757b3a76cf7715d52493cfcc2d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "079897abb8445c4dc1873a96147a2328f75ccf3c", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/079897abb8445c4dc1873a96147a2328f75ccf3c", "committedDate": "2020-08-12T05:55:50Z", "message": "Adding renewaltoken."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c74d1b28b55cd02b7f3b9f571a4a502f820c4e8", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1c74d1b28b55cd02b7f3b9f571a4a502f820c4e8", "committedDate": "2020-08-12T20:42:41Z", "message": "Fixing lock renewal to not head into an infinite loop."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff93a9c2b216defa86537edba568c85d7da48b8b", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ff93a9c2b216defa86537edba568c85d7da48b8b", "committedDate": "2020-08-12T20:58:25Z", "message": "Fix checkstyle issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a25b1dcbced0dfcd656c61fa0554a6bdfc31b24", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3a25b1dcbced0dfcd656c61fa0554a6bdfc31b24", "committedDate": "2020-08-12T21:18:30Z", "message": "Only add to token when there is locked until."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ad37d225ebc1a58e25dc41c4fe78d906a1405ae", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9ad37d225ebc1a58e25dc41c4fe78d906a1405ae", "committedDate": "2020-08-12T21:30:47Z", "message": "Fixing lock container test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82d69aae6f980913ccbf9be3095a3e721f38ef18", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/82d69aae6f980913ccbf9be3095a3e721f38ef18", "committedDate": "2020-08-12T21:45:44Z", "message": "Fixing test failures."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30d4fe016db5ba89368becd752605e84417bcbd9", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/30d4fe016db5ba89368becd752605e84417bcbd9", "committedDate": "2020-08-12T21:57:19Z", "message": "Fix test assertion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25c1d295acff330b41648741685ee87599d54cd0", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/25c1d295acff330b41648741685ee87599d54cd0", "committedDate": "2020-08-12T22:17:57Z", "message": "Fix warnings."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 564, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}