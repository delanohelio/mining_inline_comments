{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3NTk5NjEw", "number": 9051, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjo0MjoxNVrODn5rWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOToxMjoxMlrODn8gmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTY2MDQyOnYy", "diffSide": "LEFT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/RequestResponseChannel.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjo0MjoxNVrOF2K1Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTowMDoyMlrOF2PKqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM0NDg3OA==", "bodyText": "Any reason why bring back hardcoded value and not using variable senderSettleMode  and receiverSettleMode ?\nLater in configureSender() and configureReceiver() these values are hardcoded.\nShouldn't this use provided values ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9051#discussion_r392344878", "createdAt": "2020-03-13T16:42:15Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/RequestResponseChannel.java", "diffHunk": "@@ -102,24 +102,19 @@\n         this.replyTo = entityPath.replace(\"$\", \"\") + \"-client-reply-to\";\n         this.messageSerializer = messageSerializer;\n         this.sendLink = session.sender(linkName + \":sender\");\n-        final Target target = new Target();\n-        target.setAddress(entityPath);\n-        this.sendLink.setTarget(target);\n-        sendLink.setSource(new Source());\n-        this.sendLink.setSenderSettleMode(senderSettleMode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c423e9c45ce0ee8e0eb4d3c7cc954ce8c7cf03c9"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4MDc0Nw==", "bodyText": "I can pass these later. My original design was that these could be overridden in an extending class. I'll revert this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9051#discussion_r392380747", "createdAt": "2020-03-13T17:47:54Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/RequestResponseChannel.java", "diffHunk": "@@ -102,24 +102,19 @@\n         this.replyTo = entityPath.replace(\"$\", \"\") + \"-client-reply-to\";\n         this.messageSerializer = messageSerializer;\n         this.sendLink = session.sender(linkName + \":sender\");\n-        final Target target = new Target();\n-        target.setAddress(entityPath);\n-        this.sendLink.setTarget(target);\n-        sendLink.setSource(new Source());\n-        this.sendLink.setSenderSettleMode(senderSettleMode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM0NDg3OA=="}, "originalCommit": {"oid": "c423e9c45ce0ee8e0eb4d3c7cc954ce8c7cf03c9"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQxNTkxNQ==", "bodyText": "That design is good. Thanks for letting me know.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9051#discussion_r392415915", "createdAt": "2020-03-13T19:00:22Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/RequestResponseChannel.java", "diffHunk": "@@ -102,24 +102,19 @@\n         this.replyTo = entityPath.replace(\"$\", \"\") + \"-client-reply-to\";\n         this.messageSerializer = messageSerializer;\n         this.sendLink = session.sender(linkName + \":sender\");\n-        final Target target = new Target();\n-        target.setAddress(entityPath);\n-        this.sendLink.setTarget(target);\n-        sendLink.setSource(new Source());\n-        this.sendLink.setSenderSettleMode(senderSettleMode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM0NDg3OA=="}, "originalCommit": {"oid": "c423e9c45ce0ee8e0eb4d3c7cc954ce8c7cf03c9"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTc4MTM1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzoxODowMVrOF2MC5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzozODoxNVrOF2MtzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2NDc3Mg==", "bodyText": "MessagingEntityType.QUEUE  Is there a need to know the type ? We will not always know for example if user uses connectionString(String connectionStringWithResourceName) in Builder.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9051#discussion_r392364772", "createdAt": "2020-03-13T17:18:01Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -236,7 +237,8 @@ public ServiceBusReceiverAsyncClient buildAsyncReceiverClient() {\n         final TracerProvider tracerProvider = new TracerProvider(ServiceLoader.load(Tracer.class));\n \n         return new ServiceBusReceiverAsyncClient(connectionProcessor.getFullyQualifiedNamespace(),\n-            serviceBusResourceName, connectionProcessor, tracerProvider, messageSerializer, receiveMessageOptions);\n+            serviceBusResourceName, MessagingEntityType.QUEUE, false, receiveMessageOptions,\n+            connectionProcessor, tracerProvider, messageSerializer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c423e9c45ce0ee8e0eb4d3c7cc954ce8c7cf03c9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3NTc1Nw==", "bodyText": "Yes. We do when building the receiver itself. On management operations, they specify what the entity type is before sending the message (in the headers).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9051#discussion_r392375757", "createdAt": "2020-03-13T17:38:15Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -236,7 +237,8 @@ public ServiceBusReceiverAsyncClient buildAsyncReceiverClient() {\n         final TracerProvider tracerProvider = new TracerProvider(ServiceLoader.load(Tracer.class));\n \n         return new ServiceBusReceiverAsyncClient(connectionProcessor.getFullyQualifiedNamespace(),\n-            serviceBusResourceName, connectionProcessor, tracerProvider, messageSerializer, receiveMessageOptions);\n+            serviceBusResourceName, MessagingEntityType.QUEUE, false, receiveMessageOptions,\n+            connectionProcessor, tracerProvider, messageSerializer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2NDc3Mg=="}, "originalCommit": {"oid": "c423e9c45ce0ee8e0eb4d3c7cc954ce8c7cf03c9"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTgwMjU4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusAmqpConnection.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzoyNDoxMlrOF2MQaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTowNDozNFrOF2PRvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2ODIzNQ==", "bodyText": "We do not know always what is the entity type.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9051#discussion_r392368235", "createdAt": "2020-03-13T17:24:12Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusAmqpConnection.java", "diffHunk": "@@ -11,14 +11,13 @@\n import reactor.core.publisher.Mono;\n \n public interface ServiceBusAmqpConnection extends AmqpConnection {\n-\n     /**\n      * Gets the management node for a Service Bus resource and performs metadata and management operations using it.\n      *\n      * @param entityPath Name of the Service bus resource.\n      * @return A Mono that completes with that resources's management node.\n      */\n-    Mono<ServiceBusManagementNode> getManagementNode(String entityPath);\n+    Mono<ServiceBusManagementNode> getManagementNode(String entityPath, MessagingEntityType entityType);\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c423e9c45ce0ee8e0eb4d3c7cc954ce8c7cf03c9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3NTkxNQ==", "bodyText": "We do, a management node is tied to an entity path, which is tied to a specific entity.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9051#discussion_r392375915", "createdAt": "2020-03-13T17:38:34Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusAmqpConnection.java", "diffHunk": "@@ -11,14 +11,13 @@\n import reactor.core.publisher.Mono;\n \n public interface ServiceBusAmqpConnection extends AmqpConnection {\n-\n     /**\n      * Gets the management node for a Service Bus resource and performs metadata and management operations using it.\n      *\n      * @param entityPath Name of the Service bus resource.\n      * @return A Mono that completes with that resources's management node.\n      */\n-    Mono<ServiceBusManagementNode> getManagementNode(String entityPath);\n+    Mono<ServiceBusManagementNode> getManagementNode(String entityPath, MessagingEntityType entityType);\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2ODIzNQ=="}, "originalCommit": {"oid": "c423e9c45ce0ee8e0eb4d3c7cc954ce8c7cf03c9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQxNzcyNw==", "bodyText": "Just want to clarify that user specify \"EntityName\" and it could be Queue or Topic. So when user provide EntityName connectionString, we will not know is it topic or queue. User can send to a Topic/Queue without knowing what is  EntityType.\nBut you said you are going to infer it, same way  it is done in track1, and that is fine .", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9051#discussion_r392417727", "createdAt": "2020-03-13T19:04:34Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusAmqpConnection.java", "diffHunk": "@@ -11,14 +11,13 @@\n import reactor.core.publisher.Mono;\n \n public interface ServiceBusAmqpConnection extends AmqpConnection {\n-\n     /**\n      * Gets the management node for a Service Bus resource and performs metadata and management operations using it.\n      *\n      * @param entityPath Name of the Service bus resource.\n      * @return A Mono that completes with that resources's management node.\n      */\n-    Mono<ServiceBusManagementNode> getManagementNode(String entityPath);\n+    Mono<ServiceBusManagementNode> getManagementNode(String entityPath, MessagingEntityType entityType);\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2ODIzNQ=="}, "originalCommit": {"oid": "c423e9c45ce0ee8e0eb4d3c7cc954ce8c7cf03c9"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTgwOTk1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzoyNjoyMFrOF2MVEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzoyNjoyMFrOF2MVEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2OTQyNw==", "bodyText": "nit: remove System.out", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9051#discussion_r392369427", "createdAt": "2020-03-13T17:26:20Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -51,9 +51,10 @@ void receiveMessageAutoComplete() {\n             .assertNext(receivedMessage -> {\n                 Assertions.assertEquals(contents, receivedMessage.getBodyAsString());\n                 Assertions.assertTrue(receivedMessage.getProperties().containsKey(MESSAGE_TRACKING_ID));\n-                Assertions.assertEquals(messageId, receivedMessage.getProperties().get(MESSAGE_TRACKING_ID));\n             })\n             .verifyComplete();\n+\n+        System.out.println(\"Completed.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c423e9c45ce0ee8e0eb4d3c7cc954ce8c7cf03c9"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTgyOTQ5OnYy", "diffSide": "RIGHT", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubMessageSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzozMjoxNlrOF2MhoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzozMjoxNlrOF2MhoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MjY0MA==", "bodyText": "Would we expect anyone to modify the return list? I believe Collections.singletonList returns an immutable list.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9051#discussion_r392372640", "createdAt": "2020-03-13T17:32:16Z", "author": {"login": "alzimmermsft"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubMessageSerializer.java", "diffHunk": "@@ -134,6 +136,11 @@ public int getSize(Message amqpMessage) {\n         }\n     }\n \n+    @Override\n+    public <T> List<T> deserializeList(Message message, Class<T> clazz) {\n+        return Collections.singletonList(deserialize(message, clazz));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c423e9c45ce0ee8e0eb4d3c7cc954ce8c7cf03c9"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTgzMTg5OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzozMzowMFrOF2MjMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzozODo1NlrOF2Mvaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MzA0Mg==", "bodyText": "Do you have test when user do not want autoComplete and  want to call him self ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9051#discussion_r392373042", "createdAt": "2020-03-13T17:33:00Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -155,14 +172,28 @@ public void close() {\n     /**\n      * Completes a {@link ServiceBusMessage} using its lock token. This will delete the message from the service.\n      *\n-     * @param message to be used.\n+     * @param message Message to be completed.\n      *\n      * @return The {@link Mono} the finishes this operation on service bus resource.\n      */\n     public Mono<Void> complete(ServiceBusReceivedMessage message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c423e9c45ce0ee8e0eb4d3c7cc954ce8c7cf03c9"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3NjE3MQ==", "bodyText": "I'll add that.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9051#discussion_r392376171", "createdAt": "2020-03-13T17:38:56Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -155,14 +172,28 @@ public void close() {\n     /**\n      * Completes a {@link ServiceBusMessage} using its lock token. This will delete the message from the service.\n      *\n-     * @param message to be used.\n+     * @param message Message to be completed.\n      *\n      * @return The {@link Mono} the finishes this operation on service bus resource.\n      */\n     public Mono<Void> complete(ServiceBusReceivedMessage message) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MzA0Mg=="}, "originalCommit": {"oid": "c423e9c45ce0ee8e0eb4d3c7cc954ce8c7cf03c9"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjEwMzQxOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTowNDozMlrOF2PRuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDoyMzoxMVrOF22kOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQxNzcyMA==", "bodyText": "Does this need to return a Boolean? It doesn't appear to be used by the caller, we just default into a then.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9051#discussion_r392417720", "createdAt": "2020-03-13T19:04:32Z", "author": {"login": "alzimmermsft"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -323,6 +354,65 @@ public Instant renewMessageLock(ServiceBusReceivedMessage message) {\n         return null;\n     }\n \n+    /**\n+     * Disposes of the consumer by closing the underlying connection to the service.\n+     */\n+    @Override\n+    public void close() {\n+        if (isDisposed.getAndSet(true)) {\n+            return;\n+        }\n+\n+        final ArrayList<String> keys = new ArrayList<>(openConsumers.keySet());\n+        for (String key : keys) {\n+            removeLink(key, SignalType.ON_COMPLETE);\n+        }\n+\n+        connectionProcessor.dispose();\n+    }\n+\n+    private Mono<Boolean> isLockTokenValid(UUID lockToken) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7b5d77f1a20bfbdc89ac9f725f1d8625f917e94"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA2MTQzMg==", "bodyText": "Oh yes. Thanks for pointing that out. If it is false, it should just return.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9051#discussion_r393061432", "createdAt": "2020-03-16T14:23:11Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -323,6 +354,65 @@ public Instant renewMessageLock(ServiceBusReceivedMessage message) {\n         return null;\n     }\n \n+    /**\n+     * Disposes of the consumer by closing the underlying connection to the service.\n+     */\n+    @Override\n+    public void close() {\n+        if (isDisposed.getAndSet(true)) {\n+            return;\n+        }\n+\n+        final ArrayList<String> keys = new ArrayList<>(openConsumers.keySet());\n+        for (String key : keys) {\n+            removeLink(key, SignalType.ON_COMPLETE);\n+        }\n+\n+        connectionProcessor.dispose();\n+    }\n+\n+    private Mono<Boolean> isLockTokenValid(UUID lockToken) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQxNzcyMA=="}, "originalCommit": {"oid": "f7b5d77f1a20bfbdc89ac9f725f1d8625f917e94"}, "originalPosition": 228}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjEwNTc4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTowNTozNFrOF2PTVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTowNTozNFrOF2PTVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQxODEzMg==", "bodyText": "Interesting that this returns false instead of throwing an exception and that the lock token being invalid throws an exception.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9051#discussion_r392418132", "createdAt": "2020-03-13T19:05:34Z", "author": {"login": "alzimmermsft"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -323,6 +354,65 @@ public Instant renewMessageLock(ServiceBusReceivedMessage message) {\n         return null;\n     }\n \n+    /**\n+     * Disposes of the consumer by closing the underlying connection to the service.\n+     */\n+    @Override\n+    public void close() {\n+        if (isDisposed.getAndSet(true)) {\n+            return;\n+        }\n+\n+        final ArrayList<String> keys = new ArrayList<>(openConsumers.keySet());\n+        for (String key : keys) {\n+            removeLink(key, SignalType.ON_COMPLETE);\n+        }\n+\n+        connectionProcessor.dispose();\n+    }\n+\n+    private Mono<Boolean> isLockTokenValid(UUID lockToken) {\n+        final Instant lockedUntilUtc = lockTokenExpirationMap.get(lockToken);\n+        if (lockedUntilUtc == null) {\n+            logger.warning(\"lockToken[{}] is not owned by this receiver.\", lockToken);\n+            return Mono.just(false);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7b5d77f1a20bfbdc89ac9f725f1d8625f917e94"}, "originalPosition": 233}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjEyNDQwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOToxMjoxMlrOF2Pexw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOToxMjoxMlrOF2Pexw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQyMTA2Mw==", "bodyText": "Any reason this is called Mono when it is a Flux?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9051#discussion_r392421063", "createdAt": "2020-03-13T19:12:12Z", "author": {"login": "alzimmermsft"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -323,6 +354,65 @@ public Instant renewMessageLock(ServiceBusReceivedMessage message) {\n         return null;\n     }\n \n+    /**\n+     * Disposes of the consumer by closing the underlying connection to the service.\n+     */\n+    @Override\n+    public void close() {\n+        if (isDisposed.getAndSet(true)) {\n+            return;\n+        }\n+\n+        final ArrayList<String> keys = new ArrayList<>(openConsumers.keySet());\n+        for (String key : keys) {\n+            removeLink(key, SignalType.ON_COMPLETE);\n+        }\n+\n+        connectionProcessor.dispose();\n+    }\n+\n+    private Mono<Boolean> isLockTokenValid(UUID lockToken) {\n+        final Instant lockedUntilUtc = lockTokenExpirationMap.get(lockToken);\n+        if (lockedUntilUtc == null) {\n+            logger.warning(\"lockToken[{}] is not owned by this receiver.\", lockToken);\n+            return Mono.just(false);\n+        }\n+\n+        //TODO (conniey): This check is done locally in Track 1. It's possible there is server skew.\n+        // who knows how reliable this is.\n+        final Instant now = Instant.now();\n+        if (lockedUntilUtc.isBefore(now)) {\n+            return Mono.error(logger.logExceptionAsError(new AmqpException(false, String.format(\n+                \"Lock already expired for the lock token. Expiration: '%s'. Now: '%s'\", lockedUntilUtc, now),\n+                getErrorContext())));\n+        }\n+\n+        return Mono.just(true);\n+    }\n+\n+    private ServiceBusAsyncConsumer getOrCreateConsumer(String linkName) {\n+        return openConsumers.computeIfAbsent(linkName, name -> {\n+            logger.info(\"{}: Creating consumer for link '{}'\", entityPath, linkName);\n+\n+            final Flux<AmqpReceiveLink> receiveLinkMono =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7b5d77f1a20bfbdc89ac9f725f1d8625f917e94"}, "originalPosition": 251}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 200, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}