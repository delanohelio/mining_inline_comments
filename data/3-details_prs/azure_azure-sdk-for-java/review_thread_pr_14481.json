{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczODU0Mjk5", "number": 14481, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNTowOToxMVrOEcnt0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDowMzozNlrOEcuovw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDQ2Mjg5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNTowOToxMVrOHHQuZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNToxNDoyNFrOHHQ9fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM3NjEwMQ==", "bodyText": "Is Itemizing (or promoting parts of) request option, to limit to applicable ones?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477376101", "createdAt": "2020-08-26T15:09:11Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -532,6 +534,102 @@ public String getId() {\n         return withContext(context -> readItemInternal(itemId, requestOptions, itemType, context));\n     }\n \n+    /**\n+     * Reads many documents.\n+     *\n+     * @param <T> the type parameter\n+     * @param itemKeyList document id and partition key pair that needs to be read\n+     * @param classType   class type\n+     * @return a Mono with feed response of cosmos items\n+     */\n+    @Beta(Beta.SinceVersion.V4_4_0)\n+    public <T> Mono<FeedResponse<T>> readMany(\n+        List<Pair<String, PartitionKey>> itemKeyList,\n+        Class<T> classType) {\n+\n+        return this.readMany(itemKeyList, null, classType);\n+    }\n+\n+    /**\n+     * Reads many documents.\n+     *\n+     * @param <T> the type parameter\n+     * @param itemKeyList document id and partition key pair that needs to be read\n+     * @param sessionToken the optional Session token - null if the read can be made without specific session token\n+     * @param classType   class type\n+     * @return a Mono with feed response of cosmos items\n+     */\n+    @Beta(Beta.SinceVersion.V4_4_0)\n+    public <T> Mono<FeedResponse<T>> readMany(\n+        List<Pair<String, PartitionKey>> itemKeyList,\n+        String sessionToken,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3514516afbf23f185e8e5ed20bc4e678830df587"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM3OTk2NA==", "bodyText": "Yes - the only relevant one is SessionToken compared to CosmosQueryRequestOptions", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477379964", "createdAt": "2020-08-26T15:14:24Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -532,6 +534,102 @@ public String getId() {\n         return withContext(context -> readItemInternal(itemId, requestOptions, itemType, context));\n     }\n \n+    /**\n+     * Reads many documents.\n+     *\n+     * @param <T> the type parameter\n+     * @param itemKeyList document id and partition key pair that needs to be read\n+     * @param classType   class type\n+     * @return a Mono with feed response of cosmos items\n+     */\n+    @Beta(Beta.SinceVersion.V4_4_0)\n+    public <T> Mono<FeedResponse<T>> readMany(\n+        List<Pair<String, PartitionKey>> itemKeyList,\n+        Class<T> classType) {\n+\n+        return this.readMany(itemKeyList, null, classType);\n+    }\n+\n+    /**\n+     * Reads many documents.\n+     *\n+     * @param <T> the type parameter\n+     * @param itemKeyList document id and partition key pair that needs to be read\n+     * @param sessionToken the optional Session token - null if the read can be made without specific session token\n+     * @param classType   class type\n+     * @return a Mono with feed response of cosmos items\n+     */\n+    @Beta(Beta.SinceVersion.V4_4_0)\n+    public <T> Mono<FeedResponse<T>> readMany(\n+        List<Pair<String, PartitionKey>> itemKeyList,\n+        String sessionToken,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM3NjEwMQ=="}, "originalCommit": {"oid": "3514516afbf23f185e8e5ed20bc4e678830df587"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDk2NTY0OnYy", "diffSide": "RIGHT", "path": "eng/jacoco-test-coverage/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzowODozOVrOHHVnuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzo0NzoyNlrOHHXBlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ1NjMxMw==", "bodyText": "We don't need to increment this version - since cosmos-encryption is not releasing.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477456313", "createdAt": "2020-08-26T17:08:39Z", "author": {"login": "kushagraThapar"}, "path": "eng/jacoco-test-coverage/pom.xml", "diffHunk": "@@ -104,12 +104,12 @@\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-cosmos</artifactId>\n-      <version>4.3.2-beta.3</version> <!-- {x-version-update;com.azure:azure-cosmos;current} -->\n+      <version>4.4.0-beta.1</version> <!-- {x-version-update;com.azure:azure-cosmos;current} -->\n     </dependency>\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-cosmos-encryption</artifactId>\n-      <version>1.0.0-beta.1</version> <!-- {x-version-update;com.azure:azure-cosmos-encryption;current} -->\n+      <version>1.1.0-beta.1</version> <!-- {x-version-update;com.azure:azure-cosmos-encryption;current} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a31c1bab620ada5d8da99b1af12f0439fbb7f0c0"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3OTMxNw==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477479317", "createdAt": "2020-08-26T17:47:26Z", "author": {"login": "FabianMeiswinkel"}, "path": "eng/jacoco-test-coverage/pom.xml", "diffHunk": "@@ -104,12 +104,12 @@\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-cosmos</artifactId>\n-      <version>4.3.2-beta.3</version> <!-- {x-version-update;com.azure:azure-cosmos;current} -->\n+      <version>4.4.0-beta.1</version> <!-- {x-version-update;com.azure:azure-cosmos;current} -->\n     </dependency>\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-cosmos-encryption</artifactId>\n-      <version>1.0.0-beta.1</version> <!-- {x-version-update;com.azure:azure-cosmos-encryption;current} -->\n+      <version>1.1.0-beta.1</version> <!-- {x-version-update;com.azure:azure-cosmos-encryption;current} -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ1NjMxMw=="}, "originalCommit": {"oid": "a31c1bab620ada5d8da99b1af12f0439fbb7f0c0"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTAwMTAyOnYy", "diffSide": "RIGHT", "path": "eng/jacoco-test-coverage/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzoxNzo0M1rOHHV9Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzo0NzoxN1rOHHXBQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2MTg1NQ==", "bodyText": "Same here, we don't need these version increments.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477461855", "createdAt": "2020-08-26T17:17:43Z", "author": {"login": "kushagraThapar"}, "path": "eng/jacoco-test-coverage/pom.xml", "diffHunk": "@@ -360,7 +360,7 @@\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-spring-data-cosmos-core</artifactId>\n-      <version>3.0.0-beta.2</version> <!-- {x-version-update;com.azure:azure-spring-data-cosmos-core;current} -->\n+      <version>3.1.0-beta.1</version> <!-- {x-version-update;com.azure:azure-spring-data-cosmos-core;current} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a31c1bab620ada5d8da99b1af12f0439fbb7f0c0"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3ODYyNw==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477478627", "createdAt": "2020-08-26T17:46:09Z", "author": {"login": "FabianMeiswinkel"}, "path": "eng/jacoco-test-coverage/pom.xml", "diffHunk": "@@ -360,7 +360,7 @@\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-spring-data-cosmos-core</artifactId>\n-      <version>3.0.0-beta.2</version> <!-- {x-version-update;com.azure:azure-spring-data-cosmos-core;current} -->\n+      <version>3.1.0-beta.1</version> <!-- {x-version-update;com.azure:azure-spring-data-cosmos-core;current} -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2MTg1NQ=="}, "originalCommit": {"oid": "a31c1bab620ada5d8da99b1af12f0439fbb7f0c0"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3OTIzMw==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477479233", "createdAt": "2020-08-26T17:47:17Z", "author": {"login": "FabianMeiswinkel"}, "path": "eng/jacoco-test-coverage/pom.xml", "diffHunk": "@@ -360,7 +360,7 @@\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-spring-data-cosmos-core</artifactId>\n-      <version>3.0.0-beta.2</version> <!-- {x-version-update;com.azure:azure-spring-data-cosmos-core;current} -->\n+      <version>3.1.0-beta.1</version> <!-- {x-version-update;com.azure:azure-spring-data-cosmos-core;current} -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2MTg1NQ=="}, "originalCommit": {"oid": "a31c1bab620ada5d8da99b1af12f0439fbb7f0c0"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTAwNTA2OnYy", "diffSide": "RIGHT", "path": "eng/versioning/version_client.txt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzoxODo0OFrOHHV_1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzo0NjozMlrOHHW_wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2MjQ4NA==", "bodyText": "benchmark and encryption should not be incremented. Nor should be spring-data-cosmos modules.\nyou can even skip azure-cosmos version increment here, and just do it one time when we are ready to release.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477462484", "createdAt": "2020-08-26T17:18:48Z", "author": {"login": "kushagraThapar"}, "path": "eng/versioning/version_client.txt", "diffHunk": "@@ -19,9 +19,9 @@ com.azure:azure-core-serializer-json-gson;1.0.0-beta.3;1.0.0-beta.4\n com.azure:azure-core-serializer-json-jackson;1.0.0-beta.3;1.0.0-beta.4\n com.azure:azure-core-test;1.4.0;1.5.0-beta.1\n com.azure:azure-core-tracing-opentelemetry;1.0.0-beta.6;1.0.0-beta.7\n-com.azure:azure-cosmos;4.3.1;4.3.2-beta.3\n-com.azure:azure-cosmos-benchmark;4.0.1-beta.1;4.0.1-beta.1\n-com.azure:azure-cosmos-encryption;1.0.0-beta.1;1.0.0-beta.1\n+com.azure:azure-cosmos;4.3.1;4.4.0-beta.1\n+com.azure:azure-cosmos-benchmark;4.0.1-beta.1;4.1.0-beta.1\n+com.azure:azure-cosmos-encryption;1.1.0-beta.1;1.1.0-beta.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a31c1bab620ada5d8da99b1af12f0439fbb7f0c0"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3ODg1MA==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477478850", "createdAt": "2020-08-26T17:46:32Z", "author": {"login": "FabianMeiswinkel"}, "path": "eng/versioning/version_client.txt", "diffHunk": "@@ -19,9 +19,9 @@ com.azure:azure-core-serializer-json-gson;1.0.0-beta.3;1.0.0-beta.4\n com.azure:azure-core-serializer-json-jackson;1.0.0-beta.3;1.0.0-beta.4\n com.azure:azure-core-test;1.4.0;1.5.0-beta.1\n com.azure:azure-core-tracing-opentelemetry;1.0.0-beta.6;1.0.0-beta.7\n-com.azure:azure-cosmos;4.3.1;4.3.2-beta.3\n-com.azure:azure-cosmos-benchmark;4.0.1-beta.1;4.0.1-beta.1\n-com.azure:azure-cosmos-encryption;1.0.0-beta.1;1.0.0-beta.1\n+com.azure:azure-cosmos;4.3.1;4.4.0-beta.1\n+com.azure:azure-cosmos-benchmark;4.0.1-beta.1;4.1.0-beta.1\n+com.azure:azure-cosmos-encryption;1.1.0-beta.1;1.1.0-beta.1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2MjQ4NA=="}, "originalCommit": {"oid": "a31c1bab620ada5d8da99b1af12f0439fbb7f0c0"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTAwOTk4OnYy", "diffSide": "RIGHT", "path": "eng/versioning/version_client.txt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzoyMDowMlrOHHWCxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzoyMDowMlrOHHWCxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2MzIzNg==", "bodyText": "This is not required either.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477463236", "createdAt": "2020-08-26T17:20:02Z", "author": {"login": "kushagraThapar"}, "path": "eng/versioning/version_client.txt", "diffHunk": "@@ -115,7 +115,7 @@ com.microsoft.azure:spring-cloud-azure-stream-binder-test;1.2.8-beta.1;1.2.8-bet\n com.microsoft.azure:spring-cloud-azure-servicebus-topic-stream-binder;1.2.8-beta.1;1.2.8-beta.1\n com.microsoft.azure:spring-cloud-azure-servicebus-queue-stream-binder;1.2.8-beta.1;1.2.8-beta.1\n com.microsoft.azure:spring-cloud-azure-eventhubs-stream-binder;1.2.8-beta.1;1.2.8-beta.1\n-com.microsoft.azure:spring-data-cosmosdb;3.0.0-beta.1;3.0.0-beta.1\n+com.microsoft.azure:spring-data-cosmosdb;3.0.0-beta.1;3.1.0-beta.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a31c1bab620ada5d8da99b1af12f0439fbb7f0c0"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTAxMTEwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos-encryption/CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzoyMDoyMFrOHHWDcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzo0Njo0OFrOHHXARQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2MzQwOQ==", "bodyText": "No need to update this. please leave it as it is.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477463409", "createdAt": "2020-08-26T17:20:20Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos-encryption/CHANGELOG.md", "diffHunk": "@@ -1,4 +1,4 @@\n # Release History\n \n-## 1.0.0-beta.1 (Unreleased)\n+## 1.1.0-beta.1 (Unreleased)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a31c1bab620ada5d8da99b1af12f0439fbb7f0c0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3ODk4MQ==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477478981", "createdAt": "2020-08-26T17:46:48Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos-encryption/CHANGELOG.md", "diffHunk": "@@ -1,4 +1,4 @@\n # Release History\n \n-## 1.0.0-beta.1 (Unreleased)\n+## 1.1.0-beta.1 (Unreleased)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2MzQwOQ=="}, "originalCommit": {"oid": "a31c1bab620ada5d8da99b1af12f0439fbb7f0c0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTAxMTkwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzoyMDozNFrOHHWD-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzoyMDozNFrOHHWD-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2MzU0Ng==", "bodyText": "Thanks for the changelog update.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477463546", "createdAt": "2020-08-26T17:20:34Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/CHANGELOG.md", "diffHunk": "@@ -1,7 +1,9 @@\n # Release History\n \n-## 4.3.2-beta.3 (Unreleased)\n-\n+## 4.4.0-beta.1 (Unreleased)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a31c1bab620ada5d8da99b1af12f0439fbb7f0c0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTAzMDc5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/AsyncQueryBenchmark.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzoyNTozMVrOHHWQDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODo1MDo0M1rOHHZLvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2NjYzNw==", "bodyText": "NPE bug if the number of pre-created documents is less than 1000.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477466637", "createdAt": "2020-08-26T17:25:31Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/AsyncQueryBenchmark.java", "diffHunk": "@@ -123,6 +123,11 @@ protected void performWorkload(BaseSubscriber<FeedResponse<PojoizedJson>> baseSu\n \n             SqlQuerySpec query = queryBuilder.toSqlQuerySpec();\n             obs = cosmosAsyncContainer.queryItems(query, options, PojoizedJson.class).byPage();\n+        } else if (configuration.getOperationType() == Configuration.Operation.ReadAllItemsOfLogicalPartition) {\n+\n+            int index = r.nextInt(1000);\n+            String pk = docsToRead.get(index).getProperty(partitionKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a31c1bab620ada5d8da99b1af12f0439fbb7f0c0"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxNDY4Nw==", "bodyText": "Fixed for other operation types as well", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477514687", "createdAt": "2020-08-26T18:50:43Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/AsyncQueryBenchmark.java", "diffHunk": "@@ -123,6 +123,11 @@ protected void performWorkload(BaseSubscriber<FeedResponse<PojoizedJson>> baseSu\n \n             SqlQuerySpec query = queryBuilder.toSqlQuerySpec();\n             obs = cosmosAsyncContainer.queryItems(query, options, PojoizedJson.class).byPage();\n+        } else if (configuration.getOperationType() == Configuration.Operation.ReadAllItemsOfLogicalPartition) {\n+\n+            int index = r.nextInt(1000);\n+            String pk = docsToRead.get(index).getProperty(partitionKey);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2NjYzNw=="}, "originalCommit": {"oid": "a31c1bab620ada5d8da99b1af12f0439fbb7f0c0"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTAzMzU3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos-encryption/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzoyNjoxNFrOHHWRvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODo1MjozNVrOHHZPyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2NzA2OQ==", "bodyText": "please undo all the pom version changes. here and elsewhere.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477467069", "createdAt": "2020-08-26T17:26:14Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos-encryption/pom.xml", "diffHunk": "@@ -13,7 +13,7 @@ Licensed under the MIT License.\n \n   <groupId>com.azure</groupId>\n   <artifactId>azure-cosmos-encryption</artifactId>\n-  <version>1.0.0-beta.1</version> <!-- {x-version-update;com.azure:azure-cosmos-encryption;current} -->\n+  <version>1.1.0-beta.1</version> <!-- {x-version-update;com.azure:azure-cosmos-encryption;current} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a31c1bab620ada5d8da99b1af12f0439fbb7f0c0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxNTcyMA==", "bodyText": "Fixed already - except for azure-cosmos", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477515720", "createdAt": "2020-08-26T18:52:35Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos-encryption/pom.xml", "diffHunk": "@@ -13,7 +13,7 @@ Licensed under the MIT License.\n \n   <groupId>com.azure</groupId>\n   <artifactId>azure-cosmos-encryption</artifactId>\n-  <version>1.0.0-beta.1</version> <!-- {x-version-update;com.azure:azure-cosmos-encryption;current} -->\n+  <version>1.1.0-beta.1</version> <!-- {x-version-update;com.azure:azure-cosmos-encryption;current} -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2NzA2OQ=="}, "originalCommit": {"oid": "a31c1bab620ada5d8da99b1af12f0439fbb7f0c0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTA1NDU5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/Beta.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzozMjowOFrOHHWfFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOTozOToxNFrOHHa-bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3MDQ4NQ==", "bodyText": "other than V4_4_0 do we need the other ones? perhaps we can start with V4_4_0 only for now?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477470485", "createdAt": "2020-08-26T17:32:08Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/Beta.java", "diffHunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.util;\n+\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.ElementType.PARAMETER;\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.ElementType.CONSTRUCTOR;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Documented\n+@Retention(RetentionPolicy.CLASS)\n+@Target({ TYPE, METHOD, PARAMETER, CONSTRUCTOR })\n+@Inherited\n+/**\n+ * Indicates functionality that is in preview and as such is subject to change in non-backwards compatible ways in future releases,\n+ * including removal, regardless of any compatibility expectations set by the containing library version.\n+ */\n+public @interface Beta {\n+    String warningText() default \"This functionality is in preview and as such is subject to change in non-backwards compatible ways in future releases, including removal, regardless of any compatibility expectations set by the containing library version.\";\n+\n+    /**\n+     * @return the version number when the annotated API was first introduced to the library as in Beta\n+     */\n+    SinceVersion value() default SinceVersion.V4_4_0;\n+\n+    /**\n+     * Azure library version numbers\n+     */\n+    public enum SinceVersion {\n+        /** v4.4.0 */\n+        V4_4_0,\n+\n+        /** v4.5.0 */\n+        V4_5_0,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a31c1bab620ada5d8da99b1af12f0439fbb7f0c0"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxNTU1MA==", "bodyText": "Ported this straight from Milis's change - i think his intention was to force that only at least Minor versions (not patch versions) bumps are allowed. I kind of liked that model. Do you feel strongly about this?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477515550", "createdAt": "2020-08-26T18:52:16Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/Beta.java", "diffHunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.util;\n+\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.ElementType.PARAMETER;\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.ElementType.CONSTRUCTOR;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Documented\n+@Retention(RetentionPolicy.CLASS)\n+@Target({ TYPE, METHOD, PARAMETER, CONSTRUCTOR })\n+@Inherited\n+/**\n+ * Indicates functionality that is in preview and as such is subject to change in non-backwards compatible ways in future releases,\n+ * including removal, regardless of any compatibility expectations set by the containing library version.\n+ */\n+public @interface Beta {\n+    String warningText() default \"This functionality is in preview and as such is subject to change in non-backwards compatible ways in future releases, including removal, regardless of any compatibility expectations set by the containing library version.\";\n+\n+    /**\n+     * @return the version number when the annotated API was first introduced to the library as in Beta\n+     */\n+    SinceVersion value() default SinceVersion.V4_4_0;\n+\n+    /**\n+     * Azure library version numbers\n+     */\n+    public enum SinceVersion {\n+        /** v4.4.0 */\n+        V4_4_0,\n+\n+        /** v4.5.0 */\n+        V4_5_0,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3MDQ4NQ=="}, "originalCommit": {"oid": "a31c1bab620ada5d8da99b1af12f0439fbb7f0c0"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzNzQ2Nw==", "bodyText": "it just sounds weird that we have constants for future unreleased versions here. I would rather to just have only the version we have and we don't add not needed version constant here.\nHowever not a big deal. no strong feeling. it is your call, whichever you prefer.\nFeel free to resolve the comment if you want to keep it they way it is.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477537467", "createdAt": "2020-08-26T19:26:39Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/Beta.java", "diffHunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.util;\n+\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.ElementType.PARAMETER;\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.ElementType.CONSTRUCTOR;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Documented\n+@Retention(RetentionPolicy.CLASS)\n+@Target({ TYPE, METHOD, PARAMETER, CONSTRUCTOR })\n+@Inherited\n+/**\n+ * Indicates functionality that is in preview and as such is subject to change in non-backwards compatible ways in future releases,\n+ * including removal, regardless of any compatibility expectations set by the containing library version.\n+ */\n+public @interface Beta {\n+    String warningText() default \"This functionality is in preview and as such is subject to change in non-backwards compatible ways in future releases, including removal, regardless of any compatibility expectations set by the containing library version.\";\n+\n+    /**\n+     * @return the version number when the annotated API was first introduced to the library as in Beta\n+     */\n+    SinceVersion value() default SinceVersion.V4_4_0;\n+\n+    /**\n+     * Azure library version numbers\n+     */\n+    public enum SinceVersion {\n+        /** v4.4.0 */\n+        V4_4_0,\n+\n+        /** v4.5.0 */\n+        V4_5_0,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3MDQ4NQ=="}, "originalCommit": {"oid": "a31c1bab620ada5d8da99b1af12f0439fbb7f0c0"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzOTk5OQ==", "bodyText": "In the ARM SDK case since we ship this as a separate library, we do need to capture future versions... Not really needed here but it does not hurt either. It's ok either way.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477539999", "createdAt": "2020-08-26T19:31:28Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/Beta.java", "diffHunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.util;\n+\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.ElementType.PARAMETER;\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.ElementType.CONSTRUCTOR;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Documented\n+@Retention(RetentionPolicy.CLASS)\n+@Target({ TYPE, METHOD, PARAMETER, CONSTRUCTOR })\n+@Inherited\n+/**\n+ * Indicates functionality that is in preview and as such is subject to change in non-backwards compatible ways in future releases,\n+ * including removal, regardless of any compatibility expectations set by the containing library version.\n+ */\n+public @interface Beta {\n+    String warningText() default \"This functionality is in preview and as such is subject to change in non-backwards compatible ways in future releases, including removal, regardless of any compatibility expectations set by the containing library version.\";\n+\n+    /**\n+     * @return the version number when the annotated API was first introduced to the library as in Beta\n+     */\n+    SinceVersion value() default SinceVersion.V4_4_0;\n+\n+    /**\n+     * Azure library version numbers\n+     */\n+    public enum SinceVersion {\n+        /** v4.4.0 */\n+        V4_4_0,\n+\n+        /** v4.5.0 */\n+        V4_5_0,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3MDQ4NQ=="}, "originalCommit": {"oid": "a31c1bab620ada5d8da99b1af12f0439fbb7f0c0"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU0NDA0Nw==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477544047", "createdAt": "2020-08-26T19:39:14Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/Beta.java", "diffHunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.util;\n+\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.ElementType.PARAMETER;\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.ElementType.CONSTRUCTOR;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Documented\n+@Retention(RetentionPolicy.CLASS)\n+@Target({ TYPE, METHOD, PARAMETER, CONSTRUCTOR })\n+@Inherited\n+/**\n+ * Indicates functionality that is in preview and as such is subject to change in non-backwards compatible ways in future releases,\n+ * including removal, regardless of any compatibility expectations set by the containing library version.\n+ */\n+public @interface Beta {\n+    String warningText() default \"This functionality is in preview and as such is subject to change in non-backwards compatible ways in future releases, including removal, regardless of any compatibility expectations set by the containing library version.\";\n+\n+    /**\n+     * @return the version number when the annotated API was first introduced to the library as in Beta\n+     */\n+    SinceVersion value() default SinceVersion.V4_4_0;\n+\n+    /**\n+     * Azure library version numbers\n+     */\n+    public enum SinceVersion {\n+        /** v4.4.0 */\n+        V4_4_0,\n+\n+        /** v4.5.0 */\n+        V4_5_0,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3MDQ4NQ=="}, "originalCommit": {"oid": "a31c1bab620ada5d8da99b1af12f0439fbb7f0c0"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTI5MzY4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODo0MDoxMlrOHHY1AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOToyMTo1OFrOHHabHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwODg2NQ==", "bodyText": "why do we need to expose session token here?\nDid anyone ask for it? if not can we remove this?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477508865", "createdAt": "2020-08-26T18:40:12Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -532,6 +534,102 @@ public String getId() {\n         return withContext(context -> readItemInternal(itemId, requestOptions, itemType, context));\n     }\n \n+    /**\n+     * Reads many documents.\n+     *\n+     * @param <T> the type parameter\n+     * @param itemKeyList document id and partition key pair that needs to be read\n+     * @param classType   class type\n+     * @return a Mono with feed response of cosmos items\n+     */\n+    @Beta(Beta.SinceVersion.V4_4_0)\n+    public <T> Mono<FeedResponse<T>> readMany(\n+        List<Pair<String, PartitionKey>> itemKeyList,\n+        Class<T> classType) {\n+\n+        return this.readMany(itemKeyList, null, classType);\n+    }\n+\n+    /**\n+     * Reads many documents.\n+     *\n+     * @param <T> the type parameter\n+     * @param itemKeyList document id and partition key pair that needs to be read\n+     * @param sessionToken the optional Session token - null if the read can be made without specific session token\n+     * @param classType   class type\n+     * @return a Mono with feed response of cosmos items\n+     */\n+    @Beta(Beta.SinceVersion.V4_4_0)\n+    public <T> Mono<FeedResponse<T>> readMany(\n+        List<Pair<String, PartitionKey>> itemKeyList,\n+        String sessionToken,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80b91ca9103f8fe082105fc8bb88981304785ccc"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxNjY0NA==", "bodyText": "How would a customer who wants to use Session consistency do the ReadMany in this case?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477516644", "createdAt": "2020-08-26T18:54:16Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -532,6 +534,102 @@ public String getId() {\n         return withContext(context -> readItemInternal(itemId, requestOptions, itemType, context));\n     }\n \n+    /**\n+     * Reads many documents.\n+     *\n+     * @param <T> the type parameter\n+     * @param itemKeyList document id and partition key pair that needs to be read\n+     * @param classType   class type\n+     * @return a Mono with feed response of cosmos items\n+     */\n+    @Beta(Beta.SinceVersion.V4_4_0)\n+    public <T> Mono<FeedResponse<T>> readMany(\n+        List<Pair<String, PartitionKey>> itemKeyList,\n+        Class<T> classType) {\n+\n+        return this.readMany(itemKeyList, null, classType);\n+    }\n+\n+    /**\n+     * Reads many documents.\n+     *\n+     * @param <T> the type parameter\n+     * @param itemKeyList document id and partition key pair that needs to be read\n+     * @param sessionToken the optional Session token - null if the read can be made without specific session token\n+     * @param classType   class type\n+     * @return a Mono with feed response of cosmos items\n+     */\n+    @Beta(Beta.SinceVersion.V4_4_0)\n+    public <T> Mono<FeedResponse<T>> readMany(\n+        List<Pair<String, PartitionKey>> itemKeyList,\n+        String sessionToken,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwODg2NQ=="}, "originalCommit": {"oid": "80b91ca9103f8fe082105fc8bb88981304785ccc"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxNzA2Mg==", "bodyText": "The idea was to start exposing this so that not other customers but Adobe take dependency on implementation package", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477517062", "createdAt": "2020-08-26T18:55:00Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -532,6 +534,102 @@ public String getId() {\n         return withContext(context -> readItemInternal(itemId, requestOptions, itemType, context));\n     }\n \n+    /**\n+     * Reads many documents.\n+     *\n+     * @param <T> the type parameter\n+     * @param itemKeyList document id and partition key pair that needs to be read\n+     * @param classType   class type\n+     * @return a Mono with feed response of cosmos items\n+     */\n+    @Beta(Beta.SinceVersion.V4_4_0)\n+    public <T> Mono<FeedResponse<T>> readMany(\n+        List<Pair<String, PartitionKey>> itemKeyList,\n+        Class<T> classType) {\n+\n+        return this.readMany(itemKeyList, null, classType);\n+    }\n+\n+    /**\n+     * Reads many documents.\n+     *\n+     * @param <T> the type parameter\n+     * @param itemKeyList document id and partition key pair that needs to be read\n+     * @param sessionToken the optional Session token - null if the read can be made without specific session token\n+     * @param classType   class type\n+     * @return a Mono with feed response of cosmos items\n+     */\n+    @Beta(Beta.SinceVersion.V4_4_0)\n+    public <T> Mono<FeedResponse<T>> readMany(\n+        List<Pair<String, PartitionKey>> itemKeyList,\n+        String sessionToken,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwODg2NQ=="}, "originalCommit": {"oid": "80b91ca9103f8fe082105fc8bb88981304785ccc"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxNzM5OA==", "bodyText": "If this needs more discussions I will revert it here and leave it as is to not unblock the Walmart fix on this discusison.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477517398", "createdAt": "2020-08-26T18:55:32Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -532,6 +534,102 @@ public String getId() {\n         return withContext(context -> readItemInternal(itemId, requestOptions, itemType, context));\n     }\n \n+    /**\n+     * Reads many documents.\n+     *\n+     * @param <T> the type parameter\n+     * @param itemKeyList document id and partition key pair that needs to be read\n+     * @param classType   class type\n+     * @return a Mono with feed response of cosmos items\n+     */\n+    @Beta(Beta.SinceVersion.V4_4_0)\n+    public <T> Mono<FeedResponse<T>> readMany(\n+        List<Pair<String, PartitionKey>> itemKeyList,\n+        Class<T> classType) {\n+\n+        return this.readMany(itemKeyList, null, classType);\n+    }\n+\n+    /**\n+     * Reads many documents.\n+     *\n+     * @param <T> the type parameter\n+     * @param itemKeyList document id and partition key pair that needs to be read\n+     * @param sessionToken the optional Session token - null if the read can be made without specific session token\n+     * @param classType   class type\n+     * @return a Mono with feed response of cosmos items\n+     */\n+    @Beta(Beta.SinceVersion.V4_4_0)\n+    public <T> Mono<FeedResponse<T>> readMany(\n+        List<Pair<String, PartitionKey>> itemKeyList,\n+        String sessionToken,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwODg2NQ=="}, "originalCommit": {"oid": "80b91ca9103f8fe082105fc8bb88981304785ccc"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxNzYyNw==", "bodyText": "for the common session scenario session is resolved through internal sessionContainer.\nI would say passing a session token arg is an advanced use case.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477517627", "createdAt": "2020-08-26T18:55:53Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -532,6 +534,102 @@ public String getId() {\n         return withContext(context -> readItemInternal(itemId, requestOptions, itemType, context));\n     }\n \n+    /**\n+     * Reads many documents.\n+     *\n+     * @param <T> the type parameter\n+     * @param itemKeyList document id and partition key pair that needs to be read\n+     * @param classType   class type\n+     * @return a Mono with feed response of cosmos items\n+     */\n+    @Beta(Beta.SinceVersion.V4_4_0)\n+    public <T> Mono<FeedResponse<T>> readMany(\n+        List<Pair<String, PartitionKey>> itemKeyList,\n+        Class<T> classType) {\n+\n+        return this.readMany(itemKeyList, null, classType);\n+    }\n+\n+    /**\n+     * Reads many documents.\n+     *\n+     * @param <T> the type parameter\n+     * @param itemKeyList document id and partition key pair that needs to be read\n+     * @param sessionToken the optional Session token - null if the read can be made without specific session token\n+     * @param classType   class type\n+     * @return a Mono with feed response of cosmos items\n+     */\n+    @Beta(Beta.SinceVersion.V4_4_0)\n+    public <T> Mono<FeedResponse<T>> readMany(\n+        List<Pair<String, PartitionKey>> itemKeyList,\n+        String sessionToken,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwODg2NQ=="}, "originalCommit": {"oid": "80b91ca9103f8fe082105fc8bb88981304785ccc"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUyNTg3Ng==", "bodyText": "I would argue readMany is only necessary in advanced scenarios anyway. What is the harm in exposing sessionToken as parameter? Is the concern that you would prefer a special ReadManyRequestOptions with just SessionToken for now?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477525876", "createdAt": "2020-08-26T19:06:10Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -532,6 +534,102 @@ public String getId() {\n         return withContext(context -> readItemInternal(itemId, requestOptions, itemType, context));\n     }\n \n+    /**\n+     * Reads many documents.\n+     *\n+     * @param <T> the type parameter\n+     * @param itemKeyList document id and partition key pair that needs to be read\n+     * @param classType   class type\n+     * @return a Mono with feed response of cosmos items\n+     */\n+    @Beta(Beta.SinceVersion.V4_4_0)\n+    public <T> Mono<FeedResponse<T>> readMany(\n+        List<Pair<String, PartitionKey>> itemKeyList,\n+        Class<T> classType) {\n+\n+        return this.readMany(itemKeyList, null, classType);\n+    }\n+\n+    /**\n+     * Reads many documents.\n+     *\n+     * @param <T> the type parameter\n+     * @param itemKeyList document id and partition key pair that needs to be read\n+     * @param sessionToken the optional Session token - null if the read can be made without specific session token\n+     * @param classType   class type\n+     * @return a Mono with feed response of cosmos items\n+     */\n+    @Beta(Beta.SinceVersion.V4_4_0)\n+    public <T> Mono<FeedResponse<T>> readMany(\n+        List<Pair<String, PartitionKey>> itemKeyList,\n+        String sessionToken,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwODg2NQ=="}, "originalCommit": {"oid": "80b91ca9103f8fe082105fc8bb88981304785ccc"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUyNjMzNg==", "bodyText": "Or don't want to decide on that model yet?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477526336", "createdAt": "2020-08-26T19:06:32Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -532,6 +534,102 @@ public String getId() {\n         return withContext(context -> readItemInternal(itemId, requestOptions, itemType, context));\n     }\n \n+    /**\n+     * Reads many documents.\n+     *\n+     * @param <T> the type parameter\n+     * @param itemKeyList document id and partition key pair that needs to be read\n+     * @param classType   class type\n+     * @return a Mono with feed response of cosmos items\n+     */\n+    @Beta(Beta.SinceVersion.V4_4_0)\n+    public <T> Mono<FeedResponse<T>> readMany(\n+        List<Pair<String, PartitionKey>> itemKeyList,\n+        Class<T> classType) {\n+\n+        return this.readMany(itemKeyList, null, classType);\n+    }\n+\n+    /**\n+     * Reads many documents.\n+     *\n+     * @param <T> the type parameter\n+     * @param itemKeyList document id and partition key pair that needs to be read\n+     * @param sessionToken the optional Session token - null if the read can be made without specific session token\n+     * @param classType   class type\n+     * @return a Mono with feed response of cosmos items\n+     */\n+    @Beta(Beta.SinceVersion.V4_4_0)\n+    public <T> Mono<FeedResponse<T>> readMany(\n+        List<Pair<String, PartitionKey>> itemKeyList,\n+        String sessionToken,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwODg2NQ=="}, "originalCommit": {"oid": "80b91ca9103f8fe082105fc8bb88981304785ccc"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzNTAwNg==", "bodyText": "I didn't want to decide on the contract/model. but this is beta anyway.\nso makes sense. let's keep it. resolving the comment.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477535006", "createdAt": "2020-08-26T19:21:58Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -532,6 +534,102 @@ public String getId() {\n         return withContext(context -> readItemInternal(itemId, requestOptions, itemType, context));\n     }\n \n+    /**\n+     * Reads many documents.\n+     *\n+     * @param <T> the type parameter\n+     * @param itemKeyList document id and partition key pair that needs to be read\n+     * @param classType   class type\n+     * @return a Mono with feed response of cosmos items\n+     */\n+    @Beta(Beta.SinceVersion.V4_4_0)\n+    public <T> Mono<FeedResponse<T>> readMany(\n+        List<Pair<String, PartitionKey>> itemKeyList,\n+        Class<T> classType) {\n+\n+        return this.readMany(itemKeyList, null, classType);\n+    }\n+\n+    /**\n+     * Reads many documents.\n+     *\n+     * @param <T> the type parameter\n+     * @param itemKeyList document id and partition key pair that needs to be read\n+     * @param sessionToken the optional Session token - null if the read can be made without specific session token\n+     * @param classType   class type\n+     * @return a Mono with feed response of cosmos items\n+     */\n+    @Beta(Beta.SinceVersion.V4_4_0)\n+    public <T> Mono<FeedResponse<T>> readMany(\n+        List<Pair<String, PartitionKey>> itemKeyList,\n+        String sessionToken,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwODg2NQ=="}, "originalCommit": {"oid": "80b91ca9103f8fe082105fc8bb88981304785ccc"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTQxMjkxOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/Configuration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOTowOTowMFrOHHaA0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOToxNDowOVrOHHaLUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUyODI3NQ==", "bodyText": "please add one line description to \"-operation\" parameter description, similar to other operations.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477528275", "createdAt": "2020-08-26T19:09:00Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/Configuration.java", "diffHunk": "@@ -163,7 +163,8 @@ public Duration convert(String value) {\n         Mixed,\n         ReadMyWrites,\n         ReadThroughputWithMultipleClients,\n-        CtlWorkload;\n+        CtlWorkload,\n+        ReadAllItemsOfLogicalPartition;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "977db82d9e74981d8d1e02261bd1e9e63e4dea8c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzMDk2Mg==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477530962", "createdAt": "2020-08-26T19:14:09Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/Configuration.java", "diffHunk": "@@ -163,7 +163,8 @@ public Duration convert(String value) {\n         Mixed,\n         ReadMyWrites,\n         ReadThroughputWithMultipleClients,\n-        CtlWorkload;\n+        CtlWorkload,\n+        ReadAllItemsOfLogicalPartition;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUyODI3NQ=="}, "originalCommit": {"oid": "977db82d9e74981d8d1e02261bd1e9e63e4dea8c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTQxNjIyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOTowOTo1NlrOHHaC0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOToxNzo1NlrOHHaTEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUyODc4NQ==", "bodyText": "dont' rely on StringUtils from micrometer, that's an external dependency.\nPlease use com.azure.cosmos.implementation.apachecommons.lang.StringUtils instead.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477528785", "createdAt": "2020-08-26T19:09:56Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosContainer.java", "diffHunk": "@@ -3,22 +3,30 @@\n \n package com.azure.cosmos;\n \n+import com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair;\n import com.azure.cosmos.models.CosmosItemResponse;\n import com.azure.cosmos.models.CosmosContainerProperties;\n import com.azure.cosmos.models.CosmosContainerRequestOptions;\n import com.azure.cosmos.models.CosmosContainerResponse;\n import com.azure.cosmos.models.CosmosItemRequestOptions;\n import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.FeedResponse;\n import com.azure.cosmos.models.PartitionKey;\n import com.azure.cosmos.models.SqlQuerySpec;\n import com.azure.cosmos.models.ThroughputProperties;\n import com.azure.cosmos.models.ThroughputResponse;\n+import com.azure.cosmos.util.Beta;\n import com.azure.cosmos.util.CosmosPagedFlux;\n import com.azure.cosmos.util.CosmosPagedIterable;\n import com.azure.cosmos.util.UtilBridgeInternal;\n+import io.micrometer.core.instrument.util.StringUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "977db82d9e74981d8d1e02261bd1e9e63e4dea8c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzMjk0Nw==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477532947", "createdAt": "2020-08-26T19:17:56Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosContainer.java", "diffHunk": "@@ -3,22 +3,30 @@\n \n package com.azure.cosmos;\n \n+import com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair;\n import com.azure.cosmos.models.CosmosItemResponse;\n import com.azure.cosmos.models.CosmosContainerProperties;\n import com.azure.cosmos.models.CosmosContainerRequestOptions;\n import com.azure.cosmos.models.CosmosContainerResponse;\n import com.azure.cosmos.models.CosmosItemRequestOptions;\n import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.FeedResponse;\n import com.azure.cosmos.models.PartitionKey;\n import com.azure.cosmos.models.SqlQuerySpec;\n import com.azure.cosmos.models.ThroughputProperties;\n import com.azure.cosmos.models.ThroughputResponse;\n+import com.azure.cosmos.util.Beta;\n import com.azure.cosmos.util.CosmosPagedFlux;\n import com.azure.cosmos.util.CosmosPagedIterable;\n import com.azure.cosmos.util.UtilBridgeInternal;\n+import io.micrometer.core.instrument.util.StringUtils;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUyODc4NQ=="}, "originalCommit": {"oid": "977db82d9e74981d8d1e02261bd1e9e63e4dea8c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTU4ODA0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDowMDo1MFrOHHbsFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjowMTo1OFrOHHfRSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1NTczMw==", "bodyText": "partitionSplit handling.\nDocumentProducer which is used internally for cross-partition query is recursively split-proof.\nPlease verify two things:\n\nthat this code internally uses DocumentProducer (and hence benefit from DB being split proof.)\nplease make sure if partition split happens before DocumentProducer is instantiated still this is split proof.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477555733", "createdAt": "2020-08-26T20:00:50Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -1812,6 +1830,75 @@ public QueryCompatibilityMode getQueryCompatibilityMode() {\n         return changeFeedQueryImpl.executeAsync();\n     }\n \n+    @Override\n+    public Flux<FeedResponse<Document>> readAllDocuments(\n+        String collectionLink,\n+        PartitionKey partitionKey,\n+        CosmosQueryRequestOptions options) {\n+\n+        if (StringUtils.isEmpty(collectionLink)) {\n+            throw new IllegalArgumentException(\"collectionLink\");\n+        }\n+\n+        if (partitionKey == null) {\n+            throw new IllegalArgumentException(\"partitionKey\");\n+        }\n+\n+        RxDocumentServiceRequest request = RxDocumentServiceRequest.create(\n+            OperationType.Query,\n+            ResourceType.Document,\n+            collectionLink,\n+            null\n+        );\n+\n+        // This should not got to backend\n+        Flux<Utils.ValueHolder<DocumentCollection>> collectionObs =\n+            collectionCache.resolveCollectionAsync(null, request).flux();\n+\n+        return collectionObs\n+            .flatMap(documentCollectionResourceResponse -> {\n+\n+                DocumentCollection collection = documentCollectionResourceResponse.v;\n+                if (collection == null) {\n+                    throw new IllegalStateException(\"Collection cannot be null\");\n+                }\n+\n+                PartitionKeyDefinition pkDefinition = collection.getPartitionKey();\n+                String pkSelector = createPkSelector(pkDefinition);\n+                SqlQuerySpec querySpec = createLogicalPartitionScanQuerySpec(partitionKey, pkSelector);\n+\n+                Flux<Utils.ValueHolder<CollectionRoutingMap>> valueHolderMono = this.partitionKeyRangeCache\n+                    .tryLookupAsync(BridgeInternal.getMetaDataDiagnosticContext(request.requestContext.cosmosDiagnostics),\n+                        collection.getResourceId(),\n+                        null,\n+                        null).flux();\n+                return valueHolderMono.flatMap(collectionRoutingMapValueHolder -> {\n+\n+                    CollectionRoutingMap routingMap = collectionRoutingMapValueHolder.v;\n+                    if (routingMap == null) {\n+                        throw new IllegalStateException(\"Failed to get routing map.\");\n+                    }\n+\n+                    String effectivePartitionKeyString = PartitionKeyInternalHelper\n+                        .getEffectivePartitionKeyString(\n+                            BridgeInternal.getPartitionKeyInternal(partitionKey),\n+                            pkDefinition);\n+\n+                    //use routing map to find the partitionKeyRangeId of each\n+                    // effectivePartitionKey\n+                    PartitionKeyRange range =\n+                        routingMap.getRangeByEffectivePartitionKey(effectivePartitionKeyString);\n+\n+                    final CosmosQueryRequestOptions effectiveOptions =\n+                        ModelBridgeInternal.partitionKeyRangeIdInternal(\n+                            ModelBridgeInternal.createQueryRequestOptions(options),\n+                            range.getId());\n+\n+                    return createQuery(collectionLink, querySpec, effectiveOptions, Document.class, ResourceType.Document);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a483b4ed80d406054c2ed51243277f3abb65a1c7"}, "originalPosition": 306}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU4NTQyMA==", "bodyText": "Fixed it - basically I had to change the code to include the PkRangeIdLookup within the retry policy as suspected. Thanks for catching this!\nThe Producers are used via the normal QueryexecutionContext factory - so we are good there.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477585420", "createdAt": "2020-08-26T20:59:03Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -1812,6 +1830,75 @@ public QueryCompatibilityMode getQueryCompatibilityMode() {\n         return changeFeedQueryImpl.executeAsync();\n     }\n \n+    @Override\n+    public Flux<FeedResponse<Document>> readAllDocuments(\n+        String collectionLink,\n+        PartitionKey partitionKey,\n+        CosmosQueryRequestOptions options) {\n+\n+        if (StringUtils.isEmpty(collectionLink)) {\n+            throw new IllegalArgumentException(\"collectionLink\");\n+        }\n+\n+        if (partitionKey == null) {\n+            throw new IllegalArgumentException(\"partitionKey\");\n+        }\n+\n+        RxDocumentServiceRequest request = RxDocumentServiceRequest.create(\n+            OperationType.Query,\n+            ResourceType.Document,\n+            collectionLink,\n+            null\n+        );\n+\n+        // This should not got to backend\n+        Flux<Utils.ValueHolder<DocumentCollection>> collectionObs =\n+            collectionCache.resolveCollectionAsync(null, request).flux();\n+\n+        return collectionObs\n+            .flatMap(documentCollectionResourceResponse -> {\n+\n+                DocumentCollection collection = documentCollectionResourceResponse.v;\n+                if (collection == null) {\n+                    throw new IllegalStateException(\"Collection cannot be null\");\n+                }\n+\n+                PartitionKeyDefinition pkDefinition = collection.getPartitionKey();\n+                String pkSelector = createPkSelector(pkDefinition);\n+                SqlQuerySpec querySpec = createLogicalPartitionScanQuerySpec(partitionKey, pkSelector);\n+\n+                Flux<Utils.ValueHolder<CollectionRoutingMap>> valueHolderMono = this.partitionKeyRangeCache\n+                    .tryLookupAsync(BridgeInternal.getMetaDataDiagnosticContext(request.requestContext.cosmosDiagnostics),\n+                        collection.getResourceId(),\n+                        null,\n+                        null).flux();\n+                return valueHolderMono.flatMap(collectionRoutingMapValueHolder -> {\n+\n+                    CollectionRoutingMap routingMap = collectionRoutingMapValueHolder.v;\n+                    if (routingMap == null) {\n+                        throw new IllegalStateException(\"Failed to get routing map.\");\n+                    }\n+\n+                    String effectivePartitionKeyString = PartitionKeyInternalHelper\n+                        .getEffectivePartitionKeyString(\n+                            BridgeInternal.getPartitionKeyInternal(partitionKey),\n+                            pkDefinition);\n+\n+                    //use routing map to find the partitionKeyRangeId of each\n+                    // effectivePartitionKey\n+                    PartitionKeyRange range =\n+                        routingMap.getRangeByEffectivePartitionKey(effectivePartitionKeyString);\n+\n+                    final CosmosQueryRequestOptions effectiveOptions =\n+                        ModelBridgeInternal.partitionKeyRangeIdInternal(\n+                            ModelBridgeInternal.createQueryRequestOptions(options),\n+                            range.getId());\n+\n+                    return createQuery(collectionLink, querySpec, effectiveOptions, Document.class, ResourceType.Document);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1NTczMw=="}, "originalCommit": {"oid": "a483b4ed80d406054c2ed51243277f3abb65a1c7"}, "originalPosition": 306}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxNDQxMQ==", "bodyText": "Actually I only moved the InvalidPartitionExceptionRetryPolicy up one level - so the change didn't impact partition splits. For partition splits my assumption is right now that readAllDocuments will behave like normal queries.\nFor queries the relevant PkRangeIds are retrieved form the query plan. The query plan is retrieved from the gateway before creating the QueryExecutionContext which then creates the DocumentProducer. QueryExecutionContext.executeAsync and DocumentProducer are handling partition splits.\nFor readAllDocuments the PkRangeId is set on CosmosQueryRequestOptions and this value is used by the QueryExecutionContext to create the DocumentProducer etc. Everything else is running through the same pipeline\nSo if there is a problem, because the pkValue -> pkRangeId resolution happens before creating the QueryExecutionContext/DocumentProducer in readAllDocuments the same problem exists for normal queries because the queryPlan has been also retrieved before creating ExecutionContext/DocumentProducer.\nWorth some additional investigation and testing - but Mo and I decided offline that it is ok to do that after releasing the initial Beta version.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477614411", "createdAt": "2020-08-26T22:01:58Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -1812,6 +1830,75 @@ public QueryCompatibilityMode getQueryCompatibilityMode() {\n         return changeFeedQueryImpl.executeAsync();\n     }\n \n+    @Override\n+    public Flux<FeedResponse<Document>> readAllDocuments(\n+        String collectionLink,\n+        PartitionKey partitionKey,\n+        CosmosQueryRequestOptions options) {\n+\n+        if (StringUtils.isEmpty(collectionLink)) {\n+            throw new IllegalArgumentException(\"collectionLink\");\n+        }\n+\n+        if (partitionKey == null) {\n+            throw new IllegalArgumentException(\"partitionKey\");\n+        }\n+\n+        RxDocumentServiceRequest request = RxDocumentServiceRequest.create(\n+            OperationType.Query,\n+            ResourceType.Document,\n+            collectionLink,\n+            null\n+        );\n+\n+        // This should not got to backend\n+        Flux<Utils.ValueHolder<DocumentCollection>> collectionObs =\n+            collectionCache.resolveCollectionAsync(null, request).flux();\n+\n+        return collectionObs\n+            .flatMap(documentCollectionResourceResponse -> {\n+\n+                DocumentCollection collection = documentCollectionResourceResponse.v;\n+                if (collection == null) {\n+                    throw new IllegalStateException(\"Collection cannot be null\");\n+                }\n+\n+                PartitionKeyDefinition pkDefinition = collection.getPartitionKey();\n+                String pkSelector = createPkSelector(pkDefinition);\n+                SqlQuerySpec querySpec = createLogicalPartitionScanQuerySpec(partitionKey, pkSelector);\n+\n+                Flux<Utils.ValueHolder<CollectionRoutingMap>> valueHolderMono = this.partitionKeyRangeCache\n+                    .tryLookupAsync(BridgeInternal.getMetaDataDiagnosticContext(request.requestContext.cosmosDiagnostics),\n+                        collection.getResourceId(),\n+                        null,\n+                        null).flux();\n+                return valueHolderMono.flatMap(collectionRoutingMapValueHolder -> {\n+\n+                    CollectionRoutingMap routingMap = collectionRoutingMapValueHolder.v;\n+                    if (routingMap == null) {\n+                        throw new IllegalStateException(\"Failed to get routing map.\");\n+                    }\n+\n+                    String effectivePartitionKeyString = PartitionKeyInternalHelper\n+                        .getEffectivePartitionKeyString(\n+                            BridgeInternal.getPartitionKeyInternal(partitionKey),\n+                            pkDefinition);\n+\n+                    //use routing map to find the partitionKeyRangeId of each\n+                    // effectivePartitionKey\n+                    PartitionKeyRange range =\n+                        routingMap.getRangeByEffectivePartitionKey(effectivePartitionKeyString);\n+\n+                    final CosmosQueryRequestOptions effectiveOptions =\n+                        ModelBridgeInternal.partitionKeyRangeIdInternal(\n+                            ModelBridgeInternal.createQueryRequestOptions(options),\n+                            range.getId());\n+\n+                    return createQuery(collectionLink, querySpec, effectiveOptions, Document.class, ResourceType.Document);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1NTczMw=="}, "originalCommit": {"oid": "a483b4ed80d406054c2ed51243277f3abb65a1c7"}, "originalPosition": 306}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTU4OTQ5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDowMToyMVrOHHbtIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMTo1NjowOVrOHHfIHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1NjAwMQ==", "bodyText": "collection stale situation:\ndelete collection, recreate the collection with the same name.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477556001", "createdAt": "2020-08-26T20:01:21Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -1812,6 +1830,75 @@ public QueryCompatibilityMode getQueryCompatibilityMode() {\n         return changeFeedQueryImpl.executeAsync();\n     }\n \n+    @Override\n+    public Flux<FeedResponse<Document>> readAllDocuments(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a483b4ed80d406054c2ed51243277f3abb65a1c7"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxMjA2MA==", "bodyText": "Fixed by moving InvalidPartitionExceptionRetryPolicy one level up", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477612060", "createdAt": "2020-08-26T21:56:09Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -1812,6 +1830,75 @@ public QueryCompatibilityMode getQueryCompatibilityMode() {\n         return changeFeedQueryImpl.executeAsync();\n     }\n \n+    @Override\n+    public Flux<FeedResponse<Document>> readAllDocuments(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1NjAwMQ=="}, "originalCommit": {"oid": "a483b4ed80d406054c2ed51243277f3abb65a1c7"}, "originalPosition": 243}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTU5Njc5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosItemTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDowMzozNlrOHHbxmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMTo1NDoxMFrOHHfEiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1NzE0Nw==", "bodyText": "unfortunately some of our existing tests rely on InternalObjectNode which is an internal class.\nCustomers see this and may use this as sample.\nPlease consider replacing InternalObjectNode with ObjectNode for the newly added tests (as this might get used as sample by end users.)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477557147", "createdAt": "2020-08-26T20:03:36Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosItemTest.java", "diffHunk": "@@ -200,6 +200,70 @@ public void queryItemsWithContinuationTokenAndPageSize() throws Exception{\n \n     }\n \n+    @Test(groups = { \"simple\" }, timeOut = TIMEOUT)\n+    public void readAllItemsOfLogicalPartition() throws Exception{\n+        String pkValue = UUID.randomUUID().toString();\n+        InternalObjectNode properties = getDocumentDefinition(UUID.randomUUID().toString(), pkValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a483b4ed80d406054c2ed51243277f3abb65a1c7"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxMTE0Nw==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14481#discussion_r477611147", "createdAt": "2020-08-26T21:54:10Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosItemTest.java", "diffHunk": "@@ -200,6 +200,70 @@ public void queryItemsWithContinuationTokenAndPageSize() throws Exception{\n \n     }\n \n+    @Test(groups = { \"simple\" }, timeOut = TIMEOUT)\n+    public void readAllItemsOfLogicalPartition() throws Exception{\n+        String pkValue = UUID.randomUUID().toString();\n+        InternalObjectNode properties = getDocumentDefinition(UUID.randomUUID().toString(), pkValue);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1NzE0Nw=="}, "originalCommit": {"oid": "a483b4ed80d406054c2ed51243277f3abb65a1c7"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1545, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}