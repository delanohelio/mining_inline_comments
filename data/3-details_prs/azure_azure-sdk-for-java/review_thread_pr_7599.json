{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NjM2Mjgz", "number": 7599, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODo1NDoyNVrODaRs9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMzo1MDoxNVrODcg2cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODc5NjA2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODo1NDoyNVrOFhJCCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMTozODo0OVrOFhrI5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5NTMwNQ==", "bodyText": "nit: rename this to activationOperationWithResponse to make it clear that this is different from activationOperation which doesn't have the PollResponse.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r370295305", "createdAt": "2020-01-23T18:54:25Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -89,17 +90,94 @@ public PollerFlux(Duration defaultPollInterval,\n         this.defaultPollInterval = defaultPollInterval;\n         this.activationOperation = Objects.requireNonNull(activationOperation,\n             \"'activationOperation' cannot be null.\");\n-        this.oneTimeActivationMono = oneTimeActivationMono(activationOperation);\n+        this.activationOperationEx = null;\n         this.pollOperation = Objects.requireNonNull(pollOperation, \"'pollOperation' cannot be null.\");\n         this.cancelOperation = Objects.requireNonNull(cancelOperation, \"'cancelOperation' cannot be null.\");\n         this.fetchResultOperation = Objects.requireNonNull(fetchResultOperation,\n             \"'fetchResultOperation' cannot be null.\");\n+        this.oneTimeActivationMono = oneTimeActivationMono();\n+    }\n+\n+    /**\n+     * Creates PollerFlux.\n+     *\n+     * PollerFlux obtained from this factory method uses an activationOperation which returns a Mono that\n+     * emits {@link PollResponse}, response holds the result. The PollerFlux created from constructor uses\n+     * an activationOperation which returns a Mono that directly emits result. Since the first variant of\n+     * PollerFlux has access to the response, it can skip the polling loop if the response indicate that\n+     * LRO is completed. Whereas the second PollerFlux variant calls pollFunction at least once.\n+     *\n+     * @param defaultPollInterval the default polling interval\n+     * @param activationOperation the activation operation to be invoked at most once across all subscriptions,\n+     *                            this parameter is required, if there is no specific activation work to be\n+     *                            done then invocation should return Mono.empty(), this operation will be called\n+     *                            with a new {@link PollingContext}.\n+     * @param pollOperation the operation to poll the current state of long running operation, this parameter\n+     *                      is required and the operation will be called with current {@link PollingContext}.\n+     * @param cancelOperation a {@link Function} that represents the operation to cancel the long-running operation\n+     *                        if service supports cancellation, this parameter is required and if service does not\n+     *                        support cancellation then the implementer should return Mono.error with an error message\n+     *                        indicating absence of cancellation support, the operation will be called with current\n+     *                        {@link PollingContext}.\n+     * @param fetchResultOperation a {@link Function} that represents the  operation to retrieve final result of\n+     *                             the long-running operation if service support it, this parameter is required and\n+     *                             operation will be called current {@link PollingContext}, if service does not have an\n+     *                             api to fetch final result and if final result is same as final poll response value\n+     *                             then implementer can choose to simply return value from provided final poll response.\n+     *\n+     * @param <T> The type of poll response value.\n+     * @param <U> The type of the final result of long-running operation.\n+     * @return PollerFlux\n+     */\n+    public static <T, U> PollerFlux<T, U>\n+        create(Duration defaultPollInterval,\n+               Function<PollingContext<T>, Mono<PollResponse<T>>> activationOperation,\n+               Function<PollingContext<T>, Mono<PollResponse<T>>> pollOperation,\n+               BiFunction<PollingContext<T>, PollResponse<T>, Mono<T>> cancelOperation,\n+               Function<PollingContext<T>, Mono<U>> fetchResultOperation) {\n+        return new PollerFlux<>(defaultPollInterval,\n+            activationOperation,\n+            pollOperation,\n+            cancelOperation,\n+            fetchResultOperation,\n+            true);\n+    }\n+\n+    private PollerFlux(Duration defaultPollInterval,\n+                       Function<PollingContext<T>, Mono<PollResponse<T>>> activationOperation,\n+                       Function<PollingContext<T>, Mono<PollResponse<T>>> pollOperation,\n+                       BiFunction<PollingContext<T>, PollResponse<T>, Mono<T>> cancelOperation,\n+                       Function<PollingContext<T>, Mono<U>> fetchResultOperation,\n+                       boolean ignored) {\n+        Objects.requireNonNull(defaultPollInterval, \"'defaultPollInterval' cannot be null.\");\n+        if (defaultPollInterval.compareTo(Duration.ZERO) <= 0) {\n+            throw logger.logExceptionAsWarning(new IllegalArgumentException(\n+                \"Negative or zero value for 'defaultPollInterval' is not allowed.\"));\n+        }\n+        this.defaultPollInterval = defaultPollInterval;\n+        this.activationOperation = null;\n+        this.activationOperationEx = Objects.requireNonNull(activationOperation,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bc39d4173f4baf9fc57a44552bc7c4b9bd8f0f2"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1NDExOA==", "bodyText": "I'm trying to get rid of storing activationOperation in class level, just updated the code to move all activation logic to its own inner class.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r370854118", "createdAt": "2020-01-24T21:38:49Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -89,17 +90,94 @@ public PollerFlux(Duration defaultPollInterval,\n         this.defaultPollInterval = defaultPollInterval;\n         this.activationOperation = Objects.requireNonNull(activationOperation,\n             \"'activationOperation' cannot be null.\");\n-        this.oneTimeActivationMono = oneTimeActivationMono(activationOperation);\n+        this.activationOperationEx = null;\n         this.pollOperation = Objects.requireNonNull(pollOperation, \"'pollOperation' cannot be null.\");\n         this.cancelOperation = Objects.requireNonNull(cancelOperation, \"'cancelOperation' cannot be null.\");\n         this.fetchResultOperation = Objects.requireNonNull(fetchResultOperation,\n             \"'fetchResultOperation' cannot be null.\");\n+        this.oneTimeActivationMono = oneTimeActivationMono();\n+    }\n+\n+    /**\n+     * Creates PollerFlux.\n+     *\n+     * PollerFlux obtained from this factory method uses an activationOperation which returns a Mono that\n+     * emits {@link PollResponse}, response holds the result. The PollerFlux created from constructor uses\n+     * an activationOperation which returns a Mono that directly emits result. Since the first variant of\n+     * PollerFlux has access to the response, it can skip the polling loop if the response indicate that\n+     * LRO is completed. Whereas the second PollerFlux variant calls pollFunction at least once.\n+     *\n+     * @param defaultPollInterval the default polling interval\n+     * @param activationOperation the activation operation to be invoked at most once across all subscriptions,\n+     *                            this parameter is required, if there is no specific activation work to be\n+     *                            done then invocation should return Mono.empty(), this operation will be called\n+     *                            with a new {@link PollingContext}.\n+     * @param pollOperation the operation to poll the current state of long running operation, this parameter\n+     *                      is required and the operation will be called with current {@link PollingContext}.\n+     * @param cancelOperation a {@link Function} that represents the operation to cancel the long-running operation\n+     *                        if service supports cancellation, this parameter is required and if service does not\n+     *                        support cancellation then the implementer should return Mono.error with an error message\n+     *                        indicating absence of cancellation support, the operation will be called with current\n+     *                        {@link PollingContext}.\n+     * @param fetchResultOperation a {@link Function} that represents the  operation to retrieve final result of\n+     *                             the long-running operation if service support it, this parameter is required and\n+     *                             operation will be called current {@link PollingContext}, if service does not have an\n+     *                             api to fetch final result and if final result is same as final poll response value\n+     *                             then implementer can choose to simply return value from provided final poll response.\n+     *\n+     * @param <T> The type of poll response value.\n+     * @param <U> The type of the final result of long-running operation.\n+     * @return PollerFlux\n+     */\n+    public static <T, U> PollerFlux<T, U>\n+        create(Duration defaultPollInterval,\n+               Function<PollingContext<T>, Mono<PollResponse<T>>> activationOperation,\n+               Function<PollingContext<T>, Mono<PollResponse<T>>> pollOperation,\n+               BiFunction<PollingContext<T>, PollResponse<T>, Mono<T>> cancelOperation,\n+               Function<PollingContext<T>, Mono<U>> fetchResultOperation) {\n+        return new PollerFlux<>(defaultPollInterval,\n+            activationOperation,\n+            pollOperation,\n+            cancelOperation,\n+            fetchResultOperation,\n+            true);\n+    }\n+\n+    private PollerFlux(Duration defaultPollInterval,\n+                       Function<PollingContext<T>, Mono<PollResponse<T>>> activationOperation,\n+                       Function<PollingContext<T>, Mono<PollResponse<T>>> pollOperation,\n+                       BiFunction<PollingContext<T>, PollResponse<T>, Mono<T>> cancelOperation,\n+                       Function<PollingContext<T>, Mono<U>> fetchResultOperation,\n+                       boolean ignored) {\n+        Objects.requireNonNull(defaultPollInterval, \"'defaultPollInterval' cannot be null.\");\n+        if (defaultPollInterval.compareTo(Duration.ZERO) <= 0) {\n+            throw logger.logExceptionAsWarning(new IllegalArgumentException(\n+                \"Negative or zero value for 'defaultPollInterval' is not allowed.\"));\n+        }\n+        this.defaultPollInterval = defaultPollInterval;\n+        this.activationOperation = null;\n+        this.activationOperationEx = Objects.requireNonNull(activationOperation,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5NTMwNQ=="}, "originalCommit": {"oid": "3bc39d4173f4baf9fc57a44552bc7c4b9bd8f0f2"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODgwNDY4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODo1NzozMFrOFhJHgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjoyMDowMlrOFhr-zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5NjcwNg==", "bodyText": "Would be good to add a unit test case for this change.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r370296706", "createdAt": "2020-01-23T18:57:30Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -89,17 +90,94 @@ public PollerFlux(Duration defaultPollInterval,\n         this.defaultPollInterval = defaultPollInterval;\n         this.activationOperation = Objects.requireNonNull(activationOperation,\n             \"'activationOperation' cannot be null.\");\n-        this.oneTimeActivationMono = oneTimeActivationMono(activationOperation);\n+        this.activationOperationEx = null;\n         this.pollOperation = Objects.requireNonNull(pollOperation, \"'pollOperation' cannot be null.\");\n         this.cancelOperation = Objects.requireNonNull(cancelOperation, \"'cancelOperation' cannot be null.\");\n         this.fetchResultOperation = Objects.requireNonNull(fetchResultOperation,\n             \"'fetchResultOperation' cannot be null.\");\n+        this.oneTimeActivationMono = oneTimeActivationMono();\n+    }\n+\n+    /**\n+     * Creates PollerFlux.\n+     *\n+     * PollerFlux obtained from this factory method uses an activationOperation which returns a Mono that\n+     * emits {@link PollResponse}, response holds the result. The PollerFlux created from constructor uses\n+     * an activationOperation which returns a Mono that directly emits result. Since the first variant of\n+     * PollerFlux has access to the response, it can skip the polling loop if the response indicate that\n+     * LRO is completed. Whereas the second PollerFlux variant calls pollFunction at least once.\n+     *\n+     * @param defaultPollInterval the default polling interval\n+     * @param activationOperation the activation operation to be invoked at most once across all subscriptions,\n+     *                            this parameter is required, if there is no specific activation work to be\n+     *                            done then invocation should return Mono.empty(), this operation will be called\n+     *                            with a new {@link PollingContext}.\n+     * @param pollOperation the operation to poll the current state of long running operation, this parameter\n+     *                      is required and the operation will be called with current {@link PollingContext}.\n+     * @param cancelOperation a {@link Function} that represents the operation to cancel the long-running operation\n+     *                        if service supports cancellation, this parameter is required and if service does not\n+     *                        support cancellation then the implementer should return Mono.error with an error message\n+     *                        indicating absence of cancellation support, the operation will be called with current\n+     *                        {@link PollingContext}.\n+     * @param fetchResultOperation a {@link Function} that represents the  operation to retrieve final result of\n+     *                             the long-running operation if service support it, this parameter is required and\n+     *                             operation will be called current {@link PollingContext}, if service does not have an\n+     *                             api to fetch final result and if final result is same as final poll response value\n+     *                             then implementer can choose to simply return value from provided final poll response.\n+     *\n+     * @param <T> The type of poll response value.\n+     * @param <U> The type of the final result of long-running operation.\n+     * @return PollerFlux\n+     */\n+    public static <T, U> PollerFlux<T, U>\n+        create(Duration defaultPollInterval,\n+               Function<PollingContext<T>, Mono<PollResponse<T>>> activationOperation,\n+               Function<PollingContext<T>, Mono<PollResponse<T>>> pollOperation,\n+               BiFunction<PollingContext<T>, PollResponse<T>, Mono<T>> cancelOperation,\n+               Function<PollingContext<T>, Mono<U>> fetchResultOperation) {\n+        return new PollerFlux<>(defaultPollInterval,\n+            activationOperation,\n+            pollOperation,\n+            cancelOperation,\n+            fetchResultOperation,\n+            true);\n+    }\n+\n+    private PollerFlux(Duration defaultPollInterval,\n+                       Function<PollingContext<T>, Mono<PollResponse<T>>> activationOperation,\n+                       Function<PollingContext<T>, Mono<PollResponse<T>>> pollOperation,\n+                       BiFunction<PollingContext<T>, PollResponse<T>, Mono<T>> cancelOperation,\n+                       Function<PollingContext<T>, Mono<U>> fetchResultOperation,\n+                       boolean ignored) {\n+        Objects.requireNonNull(defaultPollInterval, \"'defaultPollInterval' cannot be null.\");\n+        if (defaultPollInterval.compareTo(Duration.ZERO) <= 0) {\n+            throw logger.logExceptionAsWarning(new IllegalArgumentException(\n+                \"Negative or zero value for 'defaultPollInterval' is not allowed.\"));\n+        }\n+        this.defaultPollInterval = defaultPollInterval;\n+        this.activationOperation = null;\n+        this.activationOperationEx = Objects.requireNonNull(activationOperation,\n+            \"'activationOperation' cannot be null.\");\n+        this.pollOperation = Objects.requireNonNull(pollOperation, \"'pollOperation' cannot be null.\");\n+        this.cancelOperation = Objects.requireNonNull(cancelOperation, \"'cancelOperation' cannot be null.\");\n+        this.fetchResultOperation = Objects.requireNonNull(fetchResultOperation,\n+            \"'fetchResultOperation' cannot be null.\");\n+        this.oneTimeActivationMono = oneTimeActivationMono();\n     }\n \n     @Override\n     public void subscribe(CoreSubscriber<? super AsyncPollResponse<T, U>> actual) {\n         this.oneTimeActivationMono\n-            .flatMapMany(ignored -> pollingLoop())\n+            .flatMapMany(ignored -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bc39d4173f4baf9fc57a44552bc7c4b9bd8f0f2"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2NzkxNw==", "bodyText": "tests added", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r370867917", "createdAt": "2020-01-24T22:20:02Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -89,17 +90,94 @@ public PollerFlux(Duration defaultPollInterval,\n         this.defaultPollInterval = defaultPollInterval;\n         this.activationOperation = Objects.requireNonNull(activationOperation,\n             \"'activationOperation' cannot be null.\");\n-        this.oneTimeActivationMono = oneTimeActivationMono(activationOperation);\n+        this.activationOperationEx = null;\n         this.pollOperation = Objects.requireNonNull(pollOperation, \"'pollOperation' cannot be null.\");\n         this.cancelOperation = Objects.requireNonNull(cancelOperation, \"'cancelOperation' cannot be null.\");\n         this.fetchResultOperation = Objects.requireNonNull(fetchResultOperation,\n             \"'fetchResultOperation' cannot be null.\");\n+        this.oneTimeActivationMono = oneTimeActivationMono();\n+    }\n+\n+    /**\n+     * Creates PollerFlux.\n+     *\n+     * PollerFlux obtained from this factory method uses an activationOperation which returns a Mono that\n+     * emits {@link PollResponse}, response holds the result. The PollerFlux created from constructor uses\n+     * an activationOperation which returns a Mono that directly emits result. Since the first variant of\n+     * PollerFlux has access to the response, it can skip the polling loop if the response indicate that\n+     * LRO is completed. Whereas the second PollerFlux variant calls pollFunction at least once.\n+     *\n+     * @param defaultPollInterval the default polling interval\n+     * @param activationOperation the activation operation to be invoked at most once across all subscriptions,\n+     *                            this parameter is required, if there is no specific activation work to be\n+     *                            done then invocation should return Mono.empty(), this operation will be called\n+     *                            with a new {@link PollingContext}.\n+     * @param pollOperation the operation to poll the current state of long running operation, this parameter\n+     *                      is required and the operation will be called with current {@link PollingContext}.\n+     * @param cancelOperation a {@link Function} that represents the operation to cancel the long-running operation\n+     *                        if service supports cancellation, this parameter is required and if service does not\n+     *                        support cancellation then the implementer should return Mono.error with an error message\n+     *                        indicating absence of cancellation support, the operation will be called with current\n+     *                        {@link PollingContext}.\n+     * @param fetchResultOperation a {@link Function} that represents the  operation to retrieve final result of\n+     *                             the long-running operation if service support it, this parameter is required and\n+     *                             operation will be called current {@link PollingContext}, if service does not have an\n+     *                             api to fetch final result and if final result is same as final poll response value\n+     *                             then implementer can choose to simply return value from provided final poll response.\n+     *\n+     * @param <T> The type of poll response value.\n+     * @param <U> The type of the final result of long-running operation.\n+     * @return PollerFlux\n+     */\n+    public static <T, U> PollerFlux<T, U>\n+        create(Duration defaultPollInterval,\n+               Function<PollingContext<T>, Mono<PollResponse<T>>> activationOperation,\n+               Function<PollingContext<T>, Mono<PollResponse<T>>> pollOperation,\n+               BiFunction<PollingContext<T>, PollResponse<T>, Mono<T>> cancelOperation,\n+               Function<PollingContext<T>, Mono<U>> fetchResultOperation) {\n+        return new PollerFlux<>(defaultPollInterval,\n+            activationOperation,\n+            pollOperation,\n+            cancelOperation,\n+            fetchResultOperation,\n+            true);\n+    }\n+\n+    private PollerFlux(Duration defaultPollInterval,\n+                       Function<PollingContext<T>, Mono<PollResponse<T>>> activationOperation,\n+                       Function<PollingContext<T>, Mono<PollResponse<T>>> pollOperation,\n+                       BiFunction<PollingContext<T>, PollResponse<T>, Mono<T>> cancelOperation,\n+                       Function<PollingContext<T>, Mono<U>> fetchResultOperation,\n+                       boolean ignored) {\n+        Objects.requireNonNull(defaultPollInterval, \"'defaultPollInterval' cannot be null.\");\n+        if (defaultPollInterval.compareTo(Duration.ZERO) <= 0) {\n+            throw logger.logExceptionAsWarning(new IllegalArgumentException(\n+                \"Negative or zero value for 'defaultPollInterval' is not allowed.\"));\n+        }\n+        this.defaultPollInterval = defaultPollInterval;\n+        this.activationOperation = null;\n+        this.activationOperationEx = Objects.requireNonNull(activationOperation,\n+            \"'activationOperation' cannot be null.\");\n+        this.pollOperation = Objects.requireNonNull(pollOperation, \"'pollOperation' cannot be null.\");\n+        this.cancelOperation = Objects.requireNonNull(cancelOperation, \"'cancelOperation' cannot be null.\");\n+        this.fetchResultOperation = Objects.requireNonNull(fetchResultOperation,\n+            \"'fetchResultOperation' cannot be null.\");\n+        this.oneTimeActivationMono = oneTimeActivationMono();\n     }\n \n     @Override\n     public void subscribe(CoreSubscriber<? super AsyncPollResponse<T, U>> actual) {\n         this.oneTimeActivationMono\n-            .flatMapMany(ignored -> pollingLoop())\n+            .flatMapMany(ignored -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5NjcwNg=="}, "originalCommit": {"oid": "3bc39d4173f4baf9fc57a44552bc7c4b9bd8f0f2"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODgwODU0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODo1ODozOVrOFhJJ0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODo1ODozOVrOFhJJ0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5NzI5Nw==", "bodyText": "same here - maybe name this as isActivationWithResponse", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r370297297", "createdAt": "2020-01-23T18:58:39Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -129,34 +207,43 @@ public void subscribe(CoreSubscriber<? super AsyncPollResponse<T, U>> actual) {\n      * The decorated Mono also handles concurrent calls to activation. Only one of them will be able to call\n      * activation and other subscriptions will keep resubscribing until it sees a activation happened or get a chance\n      * to call activation as the one previously entered the critical section got an error on activation.\n-     *\n-     * @param activationOperation a supplier that provide a Mono upon subscription execute activation operation.\n+\n      * @return a one time activation mono\n      */\n-    private Mono<Boolean> oneTimeActivationMono(final Function<PollingContext<T>, Mono<T>> activationOperation) {\n+    @SuppressWarnings(\"unchecked\")\n+    private Mono<Boolean> oneTimeActivationMono() {\n         return Mono.defer(() -> {\n             if (this.activated) {\n                 return Mono.just(true);\n             }\n             if (this.guardActivationCall.compareAndSet(this, 0, 1)) {\n-                final Mono<T> activationMono;\n+                final boolean isEx = this.activationOperationEx != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bc39d4173f4baf9fc57a44552bc7c4b9bd8f0f2"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Njg1MTQ1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/DefaultSyncPoller.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjoyNjowMlrOFiTooQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjoyNjowMlrOFiTooQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUxNzYwMQ==", "bodyText": "Can you please improve this wording - I'm not entirely sure what it means.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r371517601", "createdAt": "2020-01-27T22:26:02Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/DefaultSyncPoller.java", "diffHunk": "@@ -38,10 +38,7 @@\n      * Creates DefaultSyncPoller.\n      *\n      * @param defaultPollInterval the default polling interval\n-     * @param activationOperation the activation operation to be invoked at most once across all subscriptions,\n-     *                            this parameter is required, if there is no specific activation work to be\n-     *                            done then invocation should return Mono.empty(), this operation will be called\n-     *                            with a new {@link PollingContext}.\n+     * @param syncActivationOperation the activation function upon call synchronously execute the activation operation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b73748b66cc8c5c62a78b1874f01347ef7a70a53"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Njg1NTkwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjoyNzo0N1rOFiTrVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjoyNzo0N1rOFiTrVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUxODI5Mg==", "bodyText": "If you're meaning to contrast this method against the constructor, be more explicit. \"This create method differs from the PollerFlux constructor in that the constructor uses an ....\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r371518292", "createdAt": "2020-01-27T22:27:47Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -87,19 +82,103 @@ public PollerFlux(Duration defaultPollInterval,\n                 \"Negative or zero value for 'defaultPollInterval' is not allowed.\"));\n         }\n         this.defaultPollInterval = defaultPollInterval;\n-        this.activationOperation = Objects.requireNonNull(activationOperation,\n-            \"'activationOperation' cannot be null.\");\n-        this.oneTimeActivationMono = oneTimeActivationMono(activationOperation);\n+        Objects.requireNonNull(activationOperation, \"'activationOperation' cannot be null.\");\n         this.pollOperation = Objects.requireNonNull(pollOperation, \"'pollOperation' cannot be null.\");\n         this.cancelOperation = Objects.requireNonNull(cancelOperation, \"'cancelOperation' cannot be null.\");\n         this.fetchResultOperation = Objects.requireNonNull(fetchResultOperation,\n             \"'fetchResultOperation' cannot be null.\");\n+        this.oneTimeActivationMono = new OneTimeActivation<>(this.rootContext,\n+            activationOperation,\n+            // mapper\n+            activationResult -> new PollResponse<>(LongRunningOperationStatus.NOT_STARTED, activationResult)).getMono();\n+        this.syncActivationOperation =\n+            cxt -> new PollResponse<>(LongRunningOperationStatus.NOT_STARTED, activationOperation.apply(cxt).block());\n+    }\n+\n+    /**\n+     * Creates PollerFlux.\n+     *\n+     * PollerFlux obtained from this factory method uses an activationOperation which returns a Mono that\n+     * emits {@link PollResponse}, which holds the result.\n+     * The PollerFlux created from constructor uses an activationOperation which returns a Mono that directly\n+     * emits result.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b73748b66cc8c5c62a78b1874f01347ef7a70a53"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Njg1NzIxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjoyODoyMFrOFiTsIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjoyOTowOVrOFiTtog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUxODQ5OA==", "bodyText": "Avoid acronyms, e.g, \"that the long-running operation\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r371518498", "createdAt": "2020-01-27T22:28:20Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -87,19 +82,103 @@ public PollerFlux(Duration defaultPollInterval,\n                 \"Negative or zero value for 'defaultPollInterval' is not allowed.\"));\n         }\n         this.defaultPollInterval = defaultPollInterval;\n-        this.activationOperation = Objects.requireNonNull(activationOperation,\n-            \"'activationOperation' cannot be null.\");\n-        this.oneTimeActivationMono = oneTimeActivationMono(activationOperation);\n+        Objects.requireNonNull(activationOperation, \"'activationOperation' cannot be null.\");\n         this.pollOperation = Objects.requireNonNull(pollOperation, \"'pollOperation' cannot be null.\");\n         this.cancelOperation = Objects.requireNonNull(cancelOperation, \"'cancelOperation' cannot be null.\");\n         this.fetchResultOperation = Objects.requireNonNull(fetchResultOperation,\n             \"'fetchResultOperation' cannot be null.\");\n+        this.oneTimeActivationMono = new OneTimeActivation<>(this.rootContext,\n+            activationOperation,\n+            // mapper\n+            activationResult -> new PollResponse<>(LongRunningOperationStatus.NOT_STARTED, activationResult)).getMono();\n+        this.syncActivationOperation =\n+            cxt -> new PollResponse<>(LongRunningOperationStatus.NOT_STARTED, activationOperation.apply(cxt).block());\n+    }\n+\n+    /**\n+     * Creates PollerFlux.\n+     *\n+     * PollerFlux obtained from this factory method uses an activationOperation which returns a Mono that\n+     * emits {@link PollResponse}, which holds the result.\n+     * The PollerFlux created from constructor uses an activationOperation which returns a Mono that directly\n+     * emits result.\n+     * Since the first variant of PollerFlux has access to the response, it can skip the polling loop if the\n+     * response indicate that LRO is completed. Whereas the second PollerFlux variant calls pollFunction at", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b73748b66cc8c5c62a78b1874f01347ef7a70a53"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUxODg4Mg==", "bodyText": "Similarly, I'm not entirely clear what you mean by 'first variant' and 'second variant'. Try to be more explicit to avoid any confusion.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r371518882", "createdAt": "2020-01-27T22:29:09Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -87,19 +82,103 @@ public PollerFlux(Duration defaultPollInterval,\n                 \"Negative or zero value for 'defaultPollInterval' is not allowed.\"));\n         }\n         this.defaultPollInterval = defaultPollInterval;\n-        this.activationOperation = Objects.requireNonNull(activationOperation,\n-            \"'activationOperation' cannot be null.\");\n-        this.oneTimeActivationMono = oneTimeActivationMono(activationOperation);\n+        Objects.requireNonNull(activationOperation, \"'activationOperation' cannot be null.\");\n         this.pollOperation = Objects.requireNonNull(pollOperation, \"'pollOperation' cannot be null.\");\n         this.cancelOperation = Objects.requireNonNull(cancelOperation, \"'cancelOperation' cannot be null.\");\n         this.fetchResultOperation = Objects.requireNonNull(fetchResultOperation,\n             \"'fetchResultOperation' cannot be null.\");\n+        this.oneTimeActivationMono = new OneTimeActivation<>(this.rootContext,\n+            activationOperation,\n+            // mapper\n+            activationResult -> new PollResponse<>(LongRunningOperationStatus.NOT_STARTED, activationResult)).getMono();\n+        this.syncActivationOperation =\n+            cxt -> new PollResponse<>(LongRunningOperationStatus.NOT_STARTED, activationOperation.apply(cxt).block());\n+    }\n+\n+    /**\n+     * Creates PollerFlux.\n+     *\n+     * PollerFlux obtained from this factory method uses an activationOperation which returns a Mono that\n+     * emits {@link PollResponse}, which holds the result.\n+     * The PollerFlux created from constructor uses an activationOperation which returns a Mono that directly\n+     * emits result.\n+     * Since the first variant of PollerFlux has access to the response, it can skip the polling loop if the\n+     * response indicate that LRO is completed. Whereas the second PollerFlux variant calls pollFunction at", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUxODQ5OA=="}, "originalCommit": {"oid": "b73748b66cc8c5c62a78b1874f01347ef7a70a53"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Njg2MTM4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjoyOTo1NVrOFiTuzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjozMDoyN1rOFiTvkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUxOTE4MA==", "bodyText": "Don't worry about this kind of indentation - checkstyle should be warning against this too - please check if checkstyle passes.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r371519180", "createdAt": "2020-01-27T22:29:55Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -87,19 +82,103 @@ public PollerFlux(Duration defaultPollInterval,\n                 \"Negative or zero value for 'defaultPollInterval' is not allowed.\"));\n         }\n         this.defaultPollInterval = defaultPollInterval;\n-        this.activationOperation = Objects.requireNonNull(activationOperation,\n-            \"'activationOperation' cannot be null.\");\n-        this.oneTimeActivationMono = oneTimeActivationMono(activationOperation);\n+        Objects.requireNonNull(activationOperation, \"'activationOperation' cannot be null.\");\n         this.pollOperation = Objects.requireNonNull(pollOperation, \"'pollOperation' cannot be null.\");\n         this.cancelOperation = Objects.requireNonNull(cancelOperation, \"'cancelOperation' cannot be null.\");\n         this.fetchResultOperation = Objects.requireNonNull(fetchResultOperation,\n             \"'fetchResultOperation' cannot be null.\");\n+        this.oneTimeActivationMono = new OneTimeActivation<>(this.rootContext,\n+            activationOperation,\n+            // mapper\n+            activationResult -> new PollResponse<>(LongRunningOperationStatus.NOT_STARTED, activationResult)).getMono();\n+        this.syncActivationOperation =\n+            cxt -> new PollResponse<>(LongRunningOperationStatus.NOT_STARTED, activationOperation.apply(cxt).block());\n+    }\n+\n+    /**\n+     * Creates PollerFlux.\n+     *\n+     * PollerFlux obtained from this factory method uses an activationOperation which returns a Mono that\n+     * emits {@link PollResponse}, which holds the result.\n+     * The PollerFlux created from constructor uses an activationOperation which returns a Mono that directly\n+     * emits result.\n+     * Since the first variant of PollerFlux has access to the response, it can skip the polling loop if the\n+     * response indicate that LRO is completed. Whereas the second PollerFlux variant calls pollFunction at\n+     * least once.\n+     *\n+     * @param defaultPollInterval the default polling interval\n+     * @param activationOperation the activation operation to be invoked at most once across all subscriptions,\n+     *                            this parameter is required, if there is no specific activation work to be\n+     *                            done then invocation should return Mono.empty(), this operation will be called\n+     *                            with a new {@link PollingContext}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b73748b66cc8c5c62a78b1874f01347ef7a70a53"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUxOTM3Nw==", "bodyText": "This is a very long, single sentence. Break it down into a few sentences.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r371519377", "createdAt": "2020-01-27T22:30:27Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -87,19 +82,103 @@ public PollerFlux(Duration defaultPollInterval,\n                 \"Negative or zero value for 'defaultPollInterval' is not allowed.\"));\n         }\n         this.defaultPollInterval = defaultPollInterval;\n-        this.activationOperation = Objects.requireNonNull(activationOperation,\n-            \"'activationOperation' cannot be null.\");\n-        this.oneTimeActivationMono = oneTimeActivationMono(activationOperation);\n+        Objects.requireNonNull(activationOperation, \"'activationOperation' cannot be null.\");\n         this.pollOperation = Objects.requireNonNull(pollOperation, \"'pollOperation' cannot be null.\");\n         this.cancelOperation = Objects.requireNonNull(cancelOperation, \"'cancelOperation' cannot be null.\");\n         this.fetchResultOperation = Objects.requireNonNull(fetchResultOperation,\n             \"'fetchResultOperation' cannot be null.\");\n+        this.oneTimeActivationMono = new OneTimeActivation<>(this.rootContext,\n+            activationOperation,\n+            // mapper\n+            activationResult -> new PollResponse<>(LongRunningOperationStatus.NOT_STARTED, activationResult)).getMono();\n+        this.syncActivationOperation =\n+            cxt -> new PollResponse<>(LongRunningOperationStatus.NOT_STARTED, activationOperation.apply(cxt).block());\n+    }\n+\n+    /**\n+     * Creates PollerFlux.\n+     *\n+     * PollerFlux obtained from this factory method uses an activationOperation which returns a Mono that\n+     * emits {@link PollResponse}, which holds the result.\n+     * The PollerFlux created from constructor uses an activationOperation which returns a Mono that directly\n+     * emits result.\n+     * Since the first variant of PollerFlux has access to the response, it can skip the polling loop if the\n+     * response indicate that LRO is completed. Whereas the second PollerFlux variant calls pollFunction at\n+     * least once.\n+     *\n+     * @param defaultPollInterval the default polling interval\n+     * @param activationOperation the activation operation to be invoked at most once across all subscriptions,\n+     *                            this parameter is required, if there is no specific activation work to be\n+     *                            done then invocation should return Mono.empty(), this operation will be called\n+     *                            with a new {@link PollingContext}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUxOTE4MA=="}, "originalCommit": {"oid": "b73748b66cc8c5c62a78b1874f01347ef7a70a53"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzEzMDQzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDo0Mzo0NlrOFiWRcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTozNDoxM1rOFiXAUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MDgxOQ==", "bodyText": "Is it necessary to do this blocking operation in PollerFlux if the sync poller is not going to be used? It might be better to move this to SyncPoller.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r371560819", "createdAt": "2020-01-28T00:43:46Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -87,19 +82,103 @@ public PollerFlux(Duration defaultPollInterval,\n                 \"Negative or zero value for 'defaultPollInterval' is not allowed.\"));\n         }\n         this.defaultPollInterval = defaultPollInterval;\n-        this.activationOperation = Objects.requireNonNull(activationOperation,\n-            \"'activationOperation' cannot be null.\");\n-        this.oneTimeActivationMono = oneTimeActivationMono(activationOperation);\n+        Objects.requireNonNull(activationOperation, \"'activationOperation' cannot be null.\");\n         this.pollOperation = Objects.requireNonNull(pollOperation, \"'pollOperation' cannot be null.\");\n         this.cancelOperation = Objects.requireNonNull(cancelOperation, \"'cancelOperation' cannot be null.\");\n         this.fetchResultOperation = Objects.requireNonNull(fetchResultOperation,\n             \"'fetchResultOperation' cannot be null.\");\n+        this.oneTimeActivationMono = new OneTimeActivation<>(this.rootContext,\n+            activationOperation,\n+            // mapper\n+            activationResult -> new PollResponse<>(LongRunningOperationStatus.NOT_STARTED, activationResult)).getMono();\n+        this.syncActivationOperation =\n+            cxt -> new PollResponse<>(LongRunningOperationStatus.NOT_STARTED, activationOperation.apply(cxt).block());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b73748b66cc8c5c62a78b1874f01347ef7a70a53"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3MjgxOQ==", "bodyText": "We don't block in the PollerFlux constructor/factory. We are creating  function that get passed to SyncPoller and it's gets blocked when called from SyncPoller.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r371572819", "createdAt": "2020-01-28T01:34:13Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -87,19 +82,103 @@ public PollerFlux(Duration defaultPollInterval,\n                 \"Negative or zero value for 'defaultPollInterval' is not allowed.\"));\n         }\n         this.defaultPollInterval = defaultPollInterval;\n-        this.activationOperation = Objects.requireNonNull(activationOperation,\n-            \"'activationOperation' cannot be null.\");\n-        this.oneTimeActivationMono = oneTimeActivationMono(activationOperation);\n+        Objects.requireNonNull(activationOperation, \"'activationOperation' cannot be null.\");\n         this.pollOperation = Objects.requireNonNull(pollOperation, \"'pollOperation' cannot be null.\");\n         this.cancelOperation = Objects.requireNonNull(cancelOperation, \"'cancelOperation' cannot be null.\");\n         this.fetchResultOperation = Objects.requireNonNull(fetchResultOperation,\n             \"'fetchResultOperation' cannot be null.\");\n+        this.oneTimeActivationMono = new OneTimeActivation<>(this.rootContext,\n+            activationOperation,\n+            // mapper\n+            activationResult -> new PollResponse<>(LongRunningOperationStatus.NOT_STARTED, activationResult)).getMono();\n+        this.syncActivationOperation =\n+            cxt -> new PollResponse<>(LongRunningOperationStatus.NOT_STARTED, activationOperation.apply(cxt).block());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MDgxOQ=="}, "originalCommit": {"oid": "b73748b66cc8c5c62a78b1874f01347ef7a70a53"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzEzMjkwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDo0NToxOFrOFiWS8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTo0NDozMVrOFiXIvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MTIwMQ==", "bodyText": "Change name to pollInterval instead as it's not a default and can be customized.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r371561201", "createdAt": "2020-01-28T00:45:18Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -87,19 +82,103 @@ public PollerFlux(Duration defaultPollInterval,\n                 \"Negative or zero value for 'defaultPollInterval' is not allowed.\"));\n         }\n         this.defaultPollInterval = defaultPollInterval;\n-        this.activationOperation = Objects.requireNonNull(activationOperation,\n-            \"'activationOperation' cannot be null.\");\n-        this.oneTimeActivationMono = oneTimeActivationMono(activationOperation);\n+        Objects.requireNonNull(activationOperation, \"'activationOperation' cannot be null.\");\n         this.pollOperation = Objects.requireNonNull(pollOperation, \"'pollOperation' cannot be null.\");\n         this.cancelOperation = Objects.requireNonNull(cancelOperation, \"'cancelOperation' cannot be null.\");\n         this.fetchResultOperation = Objects.requireNonNull(fetchResultOperation,\n             \"'fetchResultOperation' cannot be null.\");\n+        this.oneTimeActivationMono = new OneTimeActivation<>(this.rootContext,\n+            activationOperation,\n+            // mapper\n+            activationResult -> new PollResponse<>(LongRunningOperationStatus.NOT_STARTED, activationResult)).getMono();\n+        this.syncActivationOperation =\n+            cxt -> new PollResponse<>(LongRunningOperationStatus.NOT_STARTED, activationOperation.apply(cxt).block());\n+    }\n+\n+    /**\n+     * Creates PollerFlux.\n+     *\n+     * PollerFlux obtained from this factory method uses an activationOperation which returns a Mono that\n+     * emits {@link PollResponse}, which holds the result.\n+     * The PollerFlux created from constructor uses an activationOperation which returns a Mono that directly\n+     * emits result.\n+     * Since the first variant of PollerFlux has access to the response, it can skip the polling loop if the\n+     * response indicate that LRO is completed. Whereas the second PollerFlux variant calls pollFunction at\n+     * least once.\n+     *\n+     * @param defaultPollInterval the default polling interval\n+     * @param activationOperation the activation operation to be invoked at most once across all subscriptions,\n+     *                            this parameter is required, if there is no specific activation work to be\n+     *                            done then invocation should return Mono.empty(), this operation will be called\n+     *                            with a new {@link PollingContext}.\n+     * @param pollOperation the operation to poll the current state of long running operation, this parameter\n+     *                      is required and the operation will be called with current {@link PollingContext}.\n+     * @param cancelOperation a {@link Function} that represents the operation to cancel the long-running operation\n+     *                        if service supports cancellation, this parameter is required and if service does not\n+     *                        support cancellation then the implementer should return Mono.error with an error message\n+     *                        indicating absence of cancellation support, the operation will be called with current\n+     *                        {@link PollingContext}.\n+     * @param fetchResultOperation a {@link Function} that represents the  operation to retrieve final result of\n+     *                             the long-running operation if service support it, this parameter is required and\n+     *                             operation will be called current {@link PollingContext}, if service does not have an\n+     *                             api to fetch final result and if final result is same as final poll response value\n+     *                             then implementer can choose to simply return value from provided final poll response.\n+     *\n+     * @param <T> The type of poll response value.\n+     * @param <U> The type of the final result of long-running operation.\n+     * @return PollerFlux\n+     */\n+    public static <T, U> PollerFlux<T, U>\n+        create(Duration defaultPollInterval,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b73748b66cc8c5c62a78b1874f01347ef7a70a53"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3NDk3NA==", "bodyText": "Will do", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r371574974", "createdAt": "2020-01-28T01:44:31Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -87,19 +82,103 @@ public PollerFlux(Duration defaultPollInterval,\n                 \"Negative or zero value for 'defaultPollInterval' is not allowed.\"));\n         }\n         this.defaultPollInterval = defaultPollInterval;\n-        this.activationOperation = Objects.requireNonNull(activationOperation,\n-            \"'activationOperation' cannot be null.\");\n-        this.oneTimeActivationMono = oneTimeActivationMono(activationOperation);\n+        Objects.requireNonNull(activationOperation, \"'activationOperation' cannot be null.\");\n         this.pollOperation = Objects.requireNonNull(pollOperation, \"'pollOperation' cannot be null.\");\n         this.cancelOperation = Objects.requireNonNull(cancelOperation, \"'cancelOperation' cannot be null.\");\n         this.fetchResultOperation = Objects.requireNonNull(fetchResultOperation,\n             \"'fetchResultOperation' cannot be null.\");\n+        this.oneTimeActivationMono = new OneTimeActivation<>(this.rootContext,\n+            activationOperation,\n+            // mapper\n+            activationResult -> new PollResponse<>(LongRunningOperationStatus.NOT_STARTED, activationResult)).getMono();\n+        this.syncActivationOperation =\n+            cxt -> new PollResponse<>(LongRunningOperationStatus.NOT_STARTED, activationOperation.apply(cxt).block());\n+    }\n+\n+    /**\n+     * Creates PollerFlux.\n+     *\n+     * PollerFlux obtained from this factory method uses an activationOperation which returns a Mono that\n+     * emits {@link PollResponse}, which holds the result.\n+     * The PollerFlux created from constructor uses an activationOperation which returns a Mono that directly\n+     * emits result.\n+     * Since the first variant of PollerFlux has access to the response, it can skip the polling loop if the\n+     * response indicate that LRO is completed. Whereas the second PollerFlux variant calls pollFunction at\n+     * least once.\n+     *\n+     * @param defaultPollInterval the default polling interval\n+     * @param activationOperation the activation operation to be invoked at most once across all subscriptions,\n+     *                            this parameter is required, if there is no specific activation work to be\n+     *                            done then invocation should return Mono.empty(), this operation will be called\n+     *                            with a new {@link PollingContext}.\n+     * @param pollOperation the operation to poll the current state of long running operation, this parameter\n+     *                      is required and the operation will be called with current {@link PollingContext}.\n+     * @param cancelOperation a {@link Function} that represents the operation to cancel the long-running operation\n+     *                        if service supports cancellation, this parameter is required and if service does not\n+     *                        support cancellation then the implementer should return Mono.error with an error message\n+     *                        indicating absence of cancellation support, the operation will be called with current\n+     *                        {@link PollingContext}.\n+     * @param fetchResultOperation a {@link Function} that represents the  operation to retrieve final result of\n+     *                             the long-running operation if service support it, this parameter is required and\n+     *                             operation will be called current {@link PollingContext}, if service does not have an\n+     *                             api to fetch final result and if final result is same as final poll response value\n+     *                             then implementer can choose to simply return value from provided final poll response.\n+     *\n+     * @param <T> The type of poll response value.\n+     * @param <U> The type of the final result of long-running operation.\n+     * @return PollerFlux\n+     */\n+    public static <T, U> PollerFlux<T, U>\n+        create(Duration defaultPollInterval,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MTIwMQ=="}, "originalCommit": {"oid": "b73748b66cc8c5c62a78b1874f01347ef7a70a53"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzE1MTU4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDo1NzowMFrOFiWecA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTo0MDoyOFrOFiXFkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NDE0NA==", "bodyText": "Same here - might be better to defer this blocking operation until it's needed (when getSyncPoller() is called).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r371564144", "createdAt": "2020-01-28T00:57:00Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -87,19 +82,103 @@ public PollerFlux(Duration defaultPollInterval,\n                 \"Negative or zero value for 'defaultPollInterval' is not allowed.\"));\n         }\n         this.defaultPollInterval = defaultPollInterval;\n-        this.activationOperation = Objects.requireNonNull(activationOperation,\n-            \"'activationOperation' cannot be null.\");\n-        this.oneTimeActivationMono = oneTimeActivationMono(activationOperation);\n+        Objects.requireNonNull(activationOperation, \"'activationOperation' cannot be null.\");\n         this.pollOperation = Objects.requireNonNull(pollOperation, \"'pollOperation' cannot be null.\");\n         this.cancelOperation = Objects.requireNonNull(cancelOperation, \"'cancelOperation' cannot be null.\");\n         this.fetchResultOperation = Objects.requireNonNull(fetchResultOperation,\n             \"'fetchResultOperation' cannot be null.\");\n+        this.oneTimeActivationMono = new OneTimeActivation<>(this.rootContext,\n+            activationOperation,\n+            // mapper\n+            activationResult -> new PollResponse<>(LongRunningOperationStatus.NOT_STARTED, activationResult)).getMono();\n+        this.syncActivationOperation =\n+            cxt -> new PollResponse<>(LongRunningOperationStatus.NOT_STARTED, activationOperation.apply(cxt).block());\n+    }\n+\n+    /**\n+     * Creates PollerFlux.\n+     *\n+     * PollerFlux obtained from this factory method uses an activationOperation which returns a Mono that\n+     * emits {@link PollResponse}, which holds the result.\n+     * The PollerFlux created from constructor uses an activationOperation which returns a Mono that directly\n+     * emits result.\n+     * Since the first variant of PollerFlux has access to the response, it can skip the polling loop if the\n+     * response indicate that LRO is completed. Whereas the second PollerFlux variant calls pollFunction at\n+     * least once.\n+     *\n+     * @param defaultPollInterval the default polling interval\n+     * @param activationOperation the activation operation to be invoked at most once across all subscriptions,\n+     *                            this parameter is required, if there is no specific activation work to be\n+     *                            done then invocation should return Mono.empty(), this operation will be called\n+     *                            with a new {@link PollingContext}.\n+     * @param pollOperation the operation to poll the current state of long running operation, this parameter\n+     *                      is required and the operation will be called with current {@link PollingContext}.\n+     * @param cancelOperation a {@link Function} that represents the operation to cancel the long-running operation\n+     *                        if service supports cancellation, this parameter is required and if service does not\n+     *                        support cancellation then the implementer should return Mono.error with an error message\n+     *                        indicating absence of cancellation support, the operation will be called with current\n+     *                        {@link PollingContext}.\n+     * @param fetchResultOperation a {@link Function} that represents the  operation to retrieve final result of\n+     *                             the long-running operation if service support it, this parameter is required and\n+     *                             operation will be called current {@link PollingContext}, if service does not have an\n+     *                             api to fetch final result and if final result is same as final poll response value\n+     *                             then implementer can choose to simply return value from provided final poll response.\n+     *\n+     * @param <T> The type of poll response value.\n+     * @param <U> The type of the final result of long-running operation.\n+     * @return PollerFlux\n+     */\n+    public static <T, U> PollerFlux<T, U>\n+        create(Duration defaultPollInterval,\n+               Function<PollingContext<T>, Mono<PollResponse<T>>> activationOperation,\n+               Function<PollingContext<T>, Mono<PollResponse<T>>> pollOperation,\n+               BiFunction<PollingContext<T>, PollResponse<T>, Mono<T>> cancelOperation,\n+               Function<PollingContext<T>, Mono<U>> fetchResultOperation) {\n+        return new PollerFlux<>(defaultPollInterval,\n+            activationOperation,\n+            pollOperation,\n+            cancelOperation,\n+            fetchResultOperation,\n+            true);\n+    }\n+\n+    private PollerFlux(Duration defaultPollInterval,\n+                       Function<PollingContext<T>, Mono<PollResponse<T>>> activationOperation,\n+                       Function<PollingContext<T>, Mono<PollResponse<T>>> pollOperation,\n+                       BiFunction<PollingContext<T>, PollResponse<T>, Mono<T>> cancelOperation,\n+                       Function<PollingContext<T>, Mono<U>> fetchResultOperation,\n+                       boolean ignored) {\n+        Objects.requireNonNull(defaultPollInterval, \"'defaultPollInterval' cannot be null.\");\n+        if (defaultPollInterval.compareTo(Duration.ZERO) <= 0) {\n+            throw logger.logExceptionAsWarning(new IllegalArgumentException(\n+                \"Negative or zero value for 'defaultPollInterval' is not allowed.\"));\n+        }\n+        this.defaultPollInterval = defaultPollInterval;\n+        Objects.requireNonNull(activationOperation, \"'activationOperation' cannot be null.\");\n+        this.pollOperation = Objects.requireNonNull(pollOperation, \"'pollOperation' cannot be null.\");\n+        this.cancelOperation = Objects.requireNonNull(cancelOperation, \"'cancelOperation' cannot be null.\");\n+        this.fetchResultOperation = Objects.requireNonNull(fetchResultOperation,\n+            \"'fetchResultOperation' cannot be null.\");\n+        this.oneTimeActivationMono = new OneTimeActivation<>(this.rootContext,\n+            activationOperation,\n+            // mapper\n+            Function.identity()).getMono();\n+        this.syncActivationOperation = cxt -> activationOperation.apply(cxt).block();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b73748b66cc8c5c62a78b1874f01347ef7a70a53"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3NDE2MQ==", "bodyText": "As mentioned in previous comment, it's function that blocked only when called from SyncPoller\nThe reason for wrapping activationOpertion in Func is, we have two types of activationOperation depending on how user want to create poller - factory vs ctr.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r371574161", "createdAt": "2020-01-28T01:40:28Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -87,19 +82,103 @@ public PollerFlux(Duration defaultPollInterval,\n                 \"Negative or zero value for 'defaultPollInterval' is not allowed.\"));\n         }\n         this.defaultPollInterval = defaultPollInterval;\n-        this.activationOperation = Objects.requireNonNull(activationOperation,\n-            \"'activationOperation' cannot be null.\");\n-        this.oneTimeActivationMono = oneTimeActivationMono(activationOperation);\n+        Objects.requireNonNull(activationOperation, \"'activationOperation' cannot be null.\");\n         this.pollOperation = Objects.requireNonNull(pollOperation, \"'pollOperation' cannot be null.\");\n         this.cancelOperation = Objects.requireNonNull(cancelOperation, \"'cancelOperation' cannot be null.\");\n         this.fetchResultOperation = Objects.requireNonNull(fetchResultOperation,\n             \"'fetchResultOperation' cannot be null.\");\n+        this.oneTimeActivationMono = new OneTimeActivation<>(this.rootContext,\n+            activationOperation,\n+            // mapper\n+            activationResult -> new PollResponse<>(LongRunningOperationStatus.NOT_STARTED, activationResult)).getMono();\n+        this.syncActivationOperation =\n+            cxt -> new PollResponse<>(LongRunningOperationStatus.NOT_STARTED, activationOperation.apply(cxt).block());\n+    }\n+\n+    /**\n+     * Creates PollerFlux.\n+     *\n+     * PollerFlux obtained from this factory method uses an activationOperation which returns a Mono that\n+     * emits {@link PollResponse}, which holds the result.\n+     * The PollerFlux created from constructor uses an activationOperation which returns a Mono that directly\n+     * emits result.\n+     * Since the first variant of PollerFlux has access to the response, it can skip the polling loop if the\n+     * response indicate that LRO is completed. Whereas the second PollerFlux variant calls pollFunction at\n+     * least once.\n+     *\n+     * @param defaultPollInterval the default polling interval\n+     * @param activationOperation the activation operation to be invoked at most once across all subscriptions,\n+     *                            this parameter is required, if there is no specific activation work to be\n+     *                            done then invocation should return Mono.empty(), this operation will be called\n+     *                            with a new {@link PollingContext}.\n+     * @param pollOperation the operation to poll the current state of long running operation, this parameter\n+     *                      is required and the operation will be called with current {@link PollingContext}.\n+     * @param cancelOperation a {@link Function} that represents the operation to cancel the long-running operation\n+     *                        if service supports cancellation, this parameter is required and if service does not\n+     *                        support cancellation then the implementer should return Mono.error with an error message\n+     *                        indicating absence of cancellation support, the operation will be called with current\n+     *                        {@link PollingContext}.\n+     * @param fetchResultOperation a {@link Function} that represents the  operation to retrieve final result of\n+     *                             the long-running operation if service support it, this parameter is required and\n+     *                             operation will be called current {@link PollingContext}, if service does not have an\n+     *                             api to fetch final result and if final result is same as final poll response value\n+     *                             then implementer can choose to simply return value from provided final poll response.\n+     *\n+     * @param <T> The type of poll response value.\n+     * @param <U> The type of the final result of long-running operation.\n+     * @return PollerFlux\n+     */\n+    public static <T, U> PollerFlux<T, U>\n+        create(Duration defaultPollInterval,\n+               Function<PollingContext<T>, Mono<PollResponse<T>>> activationOperation,\n+               Function<PollingContext<T>, Mono<PollResponse<T>>> pollOperation,\n+               BiFunction<PollingContext<T>, PollResponse<T>, Mono<T>> cancelOperation,\n+               Function<PollingContext<T>, Mono<U>> fetchResultOperation) {\n+        return new PollerFlux<>(defaultPollInterval,\n+            activationOperation,\n+            pollOperation,\n+            cancelOperation,\n+            fetchResultOperation,\n+            true);\n+    }\n+\n+    private PollerFlux(Duration defaultPollInterval,\n+                       Function<PollingContext<T>, Mono<PollResponse<T>>> activationOperation,\n+                       Function<PollingContext<T>, Mono<PollResponse<T>>> pollOperation,\n+                       BiFunction<PollingContext<T>, PollResponse<T>, Mono<T>> cancelOperation,\n+                       Function<PollingContext<T>, Mono<U>> fetchResultOperation,\n+                       boolean ignored) {\n+        Objects.requireNonNull(defaultPollInterval, \"'defaultPollInterval' cannot be null.\");\n+        if (defaultPollInterval.compareTo(Duration.ZERO) <= 0) {\n+            throw logger.logExceptionAsWarning(new IllegalArgumentException(\n+                \"Negative or zero value for 'defaultPollInterval' is not allowed.\"));\n+        }\n+        this.defaultPollInterval = defaultPollInterval;\n+        Objects.requireNonNull(activationOperation, \"'activationOperation' cannot be null.\");\n+        this.pollOperation = Objects.requireNonNull(pollOperation, \"'pollOperation' cannot be null.\");\n+        this.cancelOperation = Objects.requireNonNull(cancelOperation, \"'cancelOperation' cannot be null.\");\n+        this.fetchResultOperation = Objects.requireNonNull(fetchResultOperation,\n+            \"'fetchResultOperation' cannot be null.\");\n+        this.oneTimeActivationMono = new OneTimeActivation<>(this.rootContext,\n+            activationOperation,\n+            // mapper\n+            Function.identity()).getMono();\n+        this.syncActivationOperation = cxt -> activationOperation.apply(cxt).block();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NDE0NA=="}, "originalCommit": {"oid": "b73748b66cc8c5c62a78b1874f01347ef7a70a53"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzE1NjEwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTowMDowNVrOFiWhPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxODoxNDowMlrOFivXCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NDg2Mg==", "bodyText": "Here you can do ctx -> this.activationOperation.apply(ctx).block() instead of eagerly creating syncActivationOperation", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r371564862", "createdAt": "2020-01-28T01:00:05Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -108,61 +187,12 @@ public void subscribe(CoreSubscriber<? super AsyncPollResponse<T, U>> actual) {\n      */\n     public SyncPoller<T, U> getSyncPoller() {\n         return new DefaultSyncPoller<>(this.defaultPollInterval,\n-                this.activationOperation,\n+                this.syncActivationOperation,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b73748b66cc8c5c62a78b1874f01347ef7a70a53"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3NDc0NA==", "bodyText": "We could do it in previous version but not anymore since we don't have two class members defined to store variations of activationOperations", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r371574744", "createdAt": "2020-01-28T01:43:24Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -108,61 +187,12 @@ public void subscribe(CoreSubscriber<? super AsyncPollResponse<T, U>> actual) {\n      */\n     public SyncPoller<T, U> getSyncPoller() {\n         return new DefaultSyncPoller<>(this.defaultPollInterval,\n-                this.activationOperation,\n+                this.syncActivationOperation,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NDg2Mg=="}, "originalCommit": {"oid": "b73748b66cc8c5c62a78b1874f01347ef7a70a53"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3NjUyNw==", "bodyText": "@srnagar - or we could re-introduces those two member vars and use it for SyncPoller. What do you think?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r371576527", "createdAt": "2020-01-28T01:51:34Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -108,61 +187,12 @@ public void subscribe(CoreSubscriber<? super AsyncPollResponse<T, U>> actual) {\n      */\n     public SyncPoller<T, U> getSyncPoller() {\n         return new DefaultSyncPoller<>(this.defaultPollInterval,\n-                this.activationOperation,\n+                this.syncActivationOperation,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NDg2Mg=="}, "originalCommit": {"oid": "b73748b66cc8c5c62a78b1874f01347ef7a70a53"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYzOTI5Mw==", "bodyText": "@anuchandy I guess re-introducing two variables will make it less readable. We can leave it as-is for now.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r371639293", "createdAt": "2020-01-28T07:18:44Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -108,61 +187,12 @@ public void subscribe(CoreSubscriber<? super AsyncPollResponse<T, U>> actual) {\n      */\n     public SyncPoller<T, U> getSyncPoller() {\n         return new DefaultSyncPoller<>(this.defaultPollInterval,\n-                this.activationOperation,\n+                this.syncActivationOperation,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NDg2Mg=="}, "originalCommit": {"oid": "b73748b66cc8c5c62a78b1874f01347ef7a70a53"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3MTg1MA==", "bodyText": "Ok, sounds good.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r371971850", "createdAt": "2020-01-28T18:14:02Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -108,61 +187,12 @@ public void subscribe(CoreSubscriber<? super AsyncPollResponse<T, U>> actual) {\n      */\n     public SyncPoller<T, U> getSyncPoller() {\n         return new DefaultSyncPoller<>(this.defaultPollInterval,\n-                this.activationOperation,\n+                this.syncActivationOperation,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NDg2Mg=="}, "originalCommit": {"oid": "b73748b66cc8c5c62a78b1874f01347ef7a70a53"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjI0NDgzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/DefaultSyncPoller.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMzo0NDozMVrOFklxeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMzo0NDozMVrOFklxeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxMTkyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @param <U> The type of the final result of long running operation\n          \n          \n            \n             * @param <U> The type of the final result of the long running operation", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r373911928", "createdAt": "2020-02-03T03:44:31Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/DefaultSyncPoller.java", "diffHunk": "@@ -22,7 +22,7 @@\n  * it is possible to be so, e.g. by using volatile and copying context.\n  *\n  * @param <T> The type of poll response value\n- * @param <U> The type of the final result of long-running operation\n+ * @param <U> The type of the final result of long running operation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546ed5ebd15b74dd198bb487a1e06086ee5aacd8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjI0NDk1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/DefaultSyncPoller.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMzo0NDo0NFrOFklxjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMzo0NDo0NFrOFklxjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxMTk0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param pollInterval the polling interval\n          \n          \n            \n                 * @param pollInterval the polling interval.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r373911949", "createdAt": "2020-02-03T03:44:44Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/DefaultSyncPoller.java", "diffHunk": "@@ -37,42 +37,38 @@\n     /**\n      * Creates DefaultSyncPoller.\n      *\n-     * @param defaultPollInterval the default polling interval\n-     * @param activationOperation the activation operation to be invoked at most once across all subscriptions,\n-     *                            this parameter is required, if there is no specific activation work to be\n-     *                            done then invocation should return Mono.empty(), this operation will be called\n-     *                            with a new {@link PollingContext}.\n+     * @param pollInterval the polling interval", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546ed5ebd15b74dd198bb487a1e06086ee5aacd8"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjI0NTY1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/DefaultSyncPoller.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMzo0NTo0NlrOFklyAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMzo0NTo0NlrOFklyAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxMjA2Ng==", "bodyText": "This still lacks clarity to me. I don't know, as a user of this API, what exactly I should supply here. In other words, you're telling me how this is used, rather than how I use it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r373912066", "createdAt": "2020-02-03T03:45:46Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/DefaultSyncPoller.java", "diffHunk": "@@ -37,42 +37,38 @@\n     /**\n      * Creates DefaultSyncPoller.\n      *\n-     * @param defaultPollInterval the default polling interval\n-     * @param activationOperation the activation operation to be invoked at most once across all subscriptions,\n-     *                            this parameter is required, if there is no specific activation work to be\n-     *                            done then invocation should return Mono.empty(), this operation will be called\n-     *                            with a new {@link PollingContext}.\n+     * @param pollInterval the polling interval\n+     * @param syncActivationOperation the operation to synchronously activate (start) the long running operation,\n+     *     this operation will be called with a new {@link PollingContext}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546ed5ebd15b74dd198bb487a1e06086ee5aacd8"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjI0NzAxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/DefaultSyncPoller.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMzo0NzoyOVrOFkly0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMzo0NzoyOVrOFkly0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxMjI3Mg==", "bodyText": "Break some of these sentences up - in a few places you flow straight into \"this parameter is required\" when a full stop and a new sentence would improve readability.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r373912272", "createdAt": "2020-02-03T03:47:29Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/DefaultSyncPoller.java", "diffHunk": "@@ -37,42 +37,38 @@\n     /**\n      * Creates DefaultSyncPoller.\n      *\n-     * @param defaultPollInterval the default polling interval\n-     * @param activationOperation the activation operation to be invoked at most once across all subscriptions,\n-     *                            this parameter is required, if there is no specific activation work to be\n-     *                            done then invocation should return Mono.empty(), this operation will be called\n-     *                            with a new {@link PollingContext}.\n+     * @param pollInterval the polling interval\n+     * @param syncActivationOperation the operation to synchronously activate (start) the long running operation,\n+     *     this operation will be called with a new {@link PollingContext}.\n      * @param pollOperation the operation to poll the current state of long running operation, this parameter\n-     *                      is required and the operation will be called with current {@link PollingContext}.\n-     * @param cancelOperation a {@link Function} that represents the operation to cancel the long-running operation\n-     *                        if service supports cancellation, this parameter is required and if service does not\n-     *                        support cancellation then the implementer should return Mono.error with an error message\n-     *                        indicating absence of cancellation support, the operation will be called with current\n-     *                        {@link PollingContext}.\n+     *     is required and the operation will be called with current {@link PollingContext}.\n+     * @param cancelOperation a {@link Function} that represents the operation to cancel the long running operation\n+     *     if service supports cancellation, this parameter is required and if service does not support cancellation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546ed5ebd15b74dd198bb487a1e06086ee5aacd8"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjI0NzMwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/DefaultSyncPoller.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMzo0Nzo0OFrOFkly9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMzo0Nzo0OFrOFkly9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxMjMwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Objects.requireNonNull(pollInterval, \"'defaultPollInterval' cannot be null.\");\n          \n          \n            \n                    Objects.requireNonNull(pollInterval, \"'pollInterval' cannot be null.\");", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r373912309", "createdAt": "2020-02-03T03:47:48Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/DefaultSyncPoller.java", "diffHunk": "@@ -37,42 +37,38 @@\n     /**\n      * Creates DefaultSyncPoller.\n      *\n-     * @param defaultPollInterval the default polling interval\n-     * @param activationOperation the activation operation to be invoked at most once across all subscriptions,\n-     *                            this parameter is required, if there is no specific activation work to be\n-     *                            done then invocation should return Mono.empty(), this operation will be called\n-     *                            with a new {@link PollingContext}.\n+     * @param pollInterval the polling interval\n+     * @param syncActivationOperation the operation to synchronously activate (start) the long running operation,\n+     *     this operation will be called with a new {@link PollingContext}.\n      * @param pollOperation the operation to poll the current state of long running operation, this parameter\n-     *                      is required and the operation will be called with current {@link PollingContext}.\n-     * @param cancelOperation a {@link Function} that represents the operation to cancel the long-running operation\n-     *                        if service supports cancellation, this parameter is required and if service does not\n-     *                        support cancellation then the implementer should return Mono.error with an error message\n-     *                        indicating absence of cancellation support, the operation will be called with current\n-     *                        {@link PollingContext}.\n+     *     is required and the operation will be called with current {@link PollingContext}.\n+     * @param cancelOperation a {@link Function} that represents the operation to cancel the long running operation\n+     *     if service supports cancellation, this parameter is required and if service does not support cancellation\n+     *     then the implementer should return Mono.error with an error message indicating absence of cancellation\n+     *     support, the operation will be called with current {@link PollingContext}.\n      * @param fetchResultOperation a {@link Function} that represents the  operation to retrieve final result of\n-     *                             the long-running operation if service support it, this parameter is required and\n-     *                             operation will be called current {@link PollingContext}, if service does not have an\n-     *                             api to fetch final result and if final result is same as final poll response value\n-     *                             then implementer can choose to simply return value from provided final poll response.\n+     *     the long running operation if service support it, this parameter is required and operation will be called\n+     *     current {@link PollingContext}, if service does not have an api to fetch final result and if final result\n+     *     is same as final poll response value then implementer can choose to simply return value from provided\n+     *     final poll response.\n      */\n-    DefaultSyncPoller(Duration defaultPollInterval,\n-                             Function<PollingContext<T>, Mono<T>> activationOperation,\n+    DefaultSyncPoller(Duration pollInterval,\n+                             Function<PollingContext<T>, PollResponse<T>> syncActivationOperation,\n                              Function<PollingContext<T>, Mono<PollResponse<T>>> pollOperation,\n                              BiFunction<PollingContext<T>, PollResponse<T>, Mono<T>> cancelOperation,\n                              Function<PollingContext<T>, Mono<U>> fetchResultOperation) {\n-        Objects.requireNonNull(defaultPollInterval, \"'defaultPollInterval' cannot be null.\");\n-        if (defaultPollInterval.compareTo(Duration.ZERO) <= 0) {\n+        Objects.requireNonNull(pollInterval, \"'defaultPollInterval' cannot be null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546ed5ebd15b74dd198bb487a1e06086ee5aacd8"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjI0ODQyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMzo0OTowMFrOFklzmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMzo0OTowMFrOFklzmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxMjQ3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A subscription to {@link PollerFlux} initiate a long running operation and polls the status\n          \n          \n            \n             * A subscription to {@link PollerFlux} initiates a long running operation and polls the status", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r373912475", "createdAt": "2020-02-03T03:49:00Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -11,13 +11,13 @@\n \n import java.time.Duration;\n import java.util.Objects;\n-import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.function.BiFunction;\n import java.util.function.Function;\n \n /**\n- * A Flux that simplifies the task of executing long-running operations against an Azure service.\n- * A subscription to {@link PollerFlux} initiate a long-running operation and polls the status\n+ * A Flux that simplifies the task of executing long running operations against an Azure service.\n+ * A subscription to {@link PollerFlux} initiate a long running operation and polls the status", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546ed5ebd15b74dd198bb487a1e06086ee5aacd8"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjI0OTQ2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMzo1MDoxNVrOFkl0NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMzo1MDoxNVrOFkl0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxMjYyOA==", "bodyText": "Provide a better first sentence, as this is the most visible text in the JavaDoc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7599#discussion_r373912628", "createdAt": "2020-02-03T03:50:15Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -38,68 +38,143 @@\n  * {@codesnippet com.azure.core.util.polling.poller.cancelOperation}\n  *\n  * @param <T> The type of poll response value.\n- * @param <U> The type of the final result of long-running operation.\n+ * @param <U> The type of the final result of long running operation.\n  */\n public final class PollerFlux<T, U> extends Flux<AsyncPollResponse<T, U>> {\n     private final ClientLogger logger = new ClientLogger(PollerFlux.class);\n     private final PollingContext<T> rootContext = new PollingContext<>();\n     private final Duration defaultPollInterval;\n-    private final Function<PollingContext<T>, Mono<T>> activationOperation;\n     private final Function<PollingContext<T>, Mono<PollResponse<T>>> pollOperation;\n     private final BiFunction<PollingContext<T>, PollResponse<T>, Mono<T>> cancelOperation;\n     private final Function<PollingContext<T>, Mono<U>> fetchResultOperation;\n     private final Mono<Boolean> oneTimeActivationMono;\n-    private volatile boolean activated = false;\n-    private volatile int activationGuardFlag = 0;\n-    @SuppressWarnings({\"rawtypes\"})\n-    private final AtomicIntegerFieldUpdater<PollerFlux> guardActivationCall =\n-        AtomicIntegerFieldUpdater.newUpdater(PollerFlux.class, \"activationGuardFlag\");\n+    private final Function<PollingContext<T>, PollResponse<T>> syncActivationOperation;\n \n     /**\n      * Creates PollerFlux.\n      *\n-     * @param defaultPollInterval the default polling interval\n-     * @param activationOperation the activation operation to be invoked at most once across all subscriptions,\n-     *                            this parameter is required, if there is no specific activation work to be\n-     *                            done then invocation should return Mono.empty(), this operation will be called\n-     *                            with a new {@link PollingContext}.\n-     * @param pollOperation the operation to poll the current state of long running operation, this parameter\n-     *                      is required and the operation will be called with current {@link PollingContext}.\n-     * @param cancelOperation a {@link Function} that represents the operation to cancel the long-running operation\n-     *                        if service supports cancellation, this parameter is required and if service does not\n-     *                        support cancellation then the implementer should return Mono.error with an error message\n-     *                        indicating absence of cancellation support, the operation will be called with current\n-     *                        {@link PollingContext}.\n+     * @param pollInterval the polling interval\n+     * @param activationOperation the activation operation to activate (start) the long running operation.\n+     *     This operation will be invoked at most once across all subscriptions. This parameter is required.\n+     *     If there is no specific activation work to be done then invocation should return Mono.empty(),\n+     *     this operation will be called with a new {@link PollingContext}.\n+     * @param pollOperation the operation to poll the current state of long running operation. This parameter\n+     *     is required and the operation will be called with current {@link PollingContext}.\n+     * @param cancelOperation a {@link Function} that represents the operation to cancel the long running operation\n+     *     if service supports cancellation. This parameter is required. If service does not support cancellation\n+     *     then the implementer should return Mono.error with an error message indicating absence of cancellation\n+     *     support. The operation will be called with current {@link PollingContext}.\n      * @param fetchResultOperation a {@link Function} that represents the  operation to retrieve final result of\n-     *                             the long-running operation if service support it, this parameter is required and\n-     *                             operation will be called current {@link PollingContext}, if service does not have an\n-     *                             api to fetch final result and if final result is same as final poll response value\n-     *                             then implementer can choose to simply return value from provided final poll response.\n+     *     the long running operation if service support it. This parameter is required and operation will be called\n+     *     current {@link PollingContext}. If service does not have an api to fetch final result and if final result\n+     *     is same as final poll response value then implementer can choose to simply return value from provided\n+     *     final poll response.\n      */\n-    public PollerFlux(Duration defaultPollInterval,\n+    public PollerFlux(Duration pollInterval,\n                       Function<PollingContext<T>, Mono<T>> activationOperation,\n                       Function<PollingContext<T>, Mono<PollResponse<T>>> pollOperation,\n                       BiFunction<PollingContext<T>, PollResponse<T>, Mono<T>> cancelOperation,\n                       Function<PollingContext<T>, Mono<U>> fetchResultOperation) {\n-        Objects.requireNonNull(defaultPollInterval, \"'defaultPollInterval' cannot be null.\");\n-        if (defaultPollInterval.compareTo(Duration.ZERO) <= 0) {\n+        Objects.requireNonNull(pollInterval, \"'pollInterval' cannot be null.\");\n+        if (pollInterval.compareTo(Duration.ZERO) <= 0) {\n             throw logger.logExceptionAsWarning(new IllegalArgumentException(\n                 \"Negative or zero value for 'defaultPollInterval' is not allowed.\"));\n         }\n-        this.defaultPollInterval = defaultPollInterval;\n-        this.activationOperation = Objects.requireNonNull(activationOperation,\n-            \"'activationOperation' cannot be null.\");\n-        this.oneTimeActivationMono = oneTimeActivationMono(activationOperation);\n+        this.defaultPollInterval = pollInterval;\n+        Objects.requireNonNull(activationOperation, \"'activationOperation' cannot be null.\");\n         this.pollOperation = Objects.requireNonNull(pollOperation, \"'pollOperation' cannot be null.\");\n         this.cancelOperation = Objects.requireNonNull(cancelOperation, \"'cancelOperation' cannot be null.\");\n         this.fetchResultOperation = Objects.requireNonNull(fetchResultOperation,\n             \"'fetchResultOperation' cannot be null.\");\n+        this.oneTimeActivationMono = new OneTimeActivation<>(this.rootContext,\n+            activationOperation,\n+            // mapper\n+            activationResult -> new PollResponse<>(LongRunningOperationStatus.NOT_STARTED, activationResult)).getMono();\n+        this.syncActivationOperation =\n+            cxt -> new PollResponse<>(LongRunningOperationStatus.NOT_STARTED, activationOperation.apply(cxt).block());\n+    }\n+\n+    /**\n+     * Creates PollerFlux.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546ed5ebd15b74dd198bb487a1e06086ee5aacd8"}, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 474, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}