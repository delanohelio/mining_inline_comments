{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0MjM1MjU4", "number": 15049, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOToyMDowN1rOEiQmqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOTozMTo1M1rOEiQ1nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzU5MDgwOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/SamplesArguments.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOToyMDowN1rOHQCeqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOToyMDo0OVrOHQCgFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU3OTg4MA==", "bodyText": "I had to add this extra command line parameter because, in order to create an event route, you must have one pre-existing event route endpoint. Creating a new event route endpoint for the user would require the control plane SDK.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15049#discussion_r486579880", "createdAt": "2020-09-10T19:20:07Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/SamplesArguments.java", "diffHunk": "@@ -24,19 +26,22 @@ public SamplesArguments(String[] args) {\n         Option clientId = new Option(\"c\", CLIENT_ID, true, \"AAD Client Id\");\n         Option clientSecret = new Option(\"s\", CLIENT_SECRET, true, \"AAD Client Secret\");\n         Option logLevel = new Option(\"l\", LOG_DETAIL_LEVEL, true, \"Http logging detail level \\n 0 -> NONE \\n 1 -> BASIC \\n 2 -> HEADERS \\n 3 -> BODY \\n 4 -> BODY_AND_HEADERS\");\n+        Option eventRouteEndpointName = new Option(\"e\", EVENT_ROUTE_ENDPOINT_NAME, true, \"(Event route sample only) The name of an existing event route endpoint\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca396bf026e3e9083ef03389578b045c16f19b2f"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4MDI0NQ==", "bodyText": "It is marked as optional both because other samples don't need this value, but also because the event route sample can still do some operations without this value", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15049#discussion_r486580245", "createdAt": "2020-09-10T19:20:49Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/SamplesArguments.java", "diffHunk": "@@ -24,19 +26,22 @@ public SamplesArguments(String[] args) {\n         Option clientId = new Option(\"c\", CLIENT_ID, true, \"AAD Client Id\");\n         Option clientSecret = new Option(\"s\", CLIENT_SECRET, true, \"AAD Client Secret\");\n         Option logLevel = new Option(\"l\", LOG_DETAIL_LEVEL, true, \"Http logging detail level \\n 0 -> NONE \\n 1 -> BASIC \\n 2 -> HEADERS \\n 3 -> BODY \\n 4 -> BODY_AND_HEADERS\");\n+        Option eventRouteEndpointName = new Option(\"e\", EVENT_ROUTE_ENDPOINT_NAME, true, \"(Event route sample only) The name of an existing event route endpoint\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU3OTg4MA=="}, "originalCommit": {"oid": "ca396bf026e3e9083ef03389578b045c16f19b2f"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzYyNTE5OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOTozMTowM1rOHQC0Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOTozNDo0MlrOHQC7xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4NTQzNQ==", "bodyText": "This should take Context as a parameter no?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15049#discussion_r486585435", "createdAt": "2020-09-10T19:31:03Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -744,6 +744,27 @@ public EventRoute getEventRoute(String eventRouteId) {\n         return this.digitalTwinsAsyncClient.getEventRouteWithResponse(eventRouteId, context).block();\n     }\n \n+    /**\n+     * Delete an event route.\n+     * @param eventRouteId The Id of the event route to delete.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public void deleteEventRoute(String eventRouteId)\n+    {\n+        deleteEventRouteWithResponse(eventRouteId);\n+    }\n+\n+    /**\n+     * Delete an event route.\n+     * @param eventRouteId The Id of the event route to delete.\n+     * @return A {@link Response} containing no parsed value.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<Void> deleteEventRouteWithResponse(String eventRouteId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca396bf026e3e9083ef03389578b045c16f19b2f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4NzMzMg==", "bodyText": "Yes it should, good catch", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15049#discussion_r486587332", "createdAt": "2020-09-10T19:34:42Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -744,6 +744,27 @@ public EventRoute getEventRoute(String eventRouteId) {\n         return this.digitalTwinsAsyncClient.getEventRouteWithResponse(eventRouteId, context).block();\n     }\n \n+    /**\n+     * Delete an event route.\n+     * @param eventRouteId The Id of the event route to delete.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public void deleteEventRoute(String eventRouteId)\n+    {\n+        deleteEventRouteWithResponse(eventRouteId);\n+    }\n+\n+    /**\n+     * Delete an event route.\n+     * @param eventRouteId The Id of the event route to delete.\n+     * @return A {@link Response} containing no parsed value.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<Void> deleteEventRouteWithResponse(String eventRouteId)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4NTQzNQ=="}, "originalCommit": {"oid": "ca396bf026e3e9083ef03389578b045c16f19b2f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzYyOTA4OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/EventRoutesSyncSamples.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOTozMTo1M1rOHQC2bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOTozNDozMFrOHQC7Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4NTk2NQ==", "bodyText": "why the empty spaces? if you intend to tab in , use \\t ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15049#discussion_r486585965", "createdAt": "2020-09-10T19:31:53Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/EventRoutesSyncSamples.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.digitaltwins.core.helpers.ConsoleLogger;\n+import com.azure.digitaltwins.core.helpers.SamplesArguments;\n+import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+import com.azure.digitaltwins.core.models.EventRoute;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+\n+import java.util.UUID;\n+\n+/**\n+ * This sample will list all the current event routes in your Azure Digital Twins instance,\n+ * then it will retrieve a particular event route. If the parameter for an existing event\n+ * route endpoint name is provided then it will also create a new event route, and it will\n+ * delete that newly created event route.\n+ */\n+public class EventRoutesSyncSamples {\n+    private static DigitalTwinsClient client;\n+\n+    public static void main(String[] args) {\n+        SamplesArguments parsedArguments = new SamplesArguments(args);\n+\n+        client = new DigitalTwinsClientBuilder()\n+            .credential(\n+                new ClientSecretCredentialBuilder()\n+                    .tenantId(parsedArguments.getTenantId())\n+                    .clientId(parsedArguments.getClientId())\n+                    .clientSecret(parsedArguments.getClientSecret())\n+                    .build()\n+            )\n+            .endpoint(parsedArguments.getDigitalTwinEndpoint())\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(parsedArguments.getHttpLogDetailLevel()))\n+            .buildClient();\n+\n+        ConsoleLogger.printHeader(\"List event routes\");\n+        ConsoleLogger.print(\"Listing all current event routes in your Azure Digital Twins instance\");\n+        PagedIterable<EventRoute> eventRoutes = null;\n+        try {\n+            eventRoutes = client.listEventRoutes();\n+        } catch (ErrorResponseException ex) {\n+            ConsoleLogger.printFatal(\"Failed to list event routes\");\n+            ex.printStackTrace();\n+            System.exit(0);\n+        }\n+\n+        String existingEventRouteId = null;\n+        for (EventRoute eventRoute : eventRoutes) {\n+            existingEventRouteId = eventRoute.getId();\n+            ConsoleLogger.print(String.format(\"     EventRouteId: %s\", eventRoute.getId()));\n+            ConsoleLogger.print(String.format(\"     EventRouteEndpointName: %s\", eventRoute.getEndpointName()));\n+            if (eventRoute.getFilter() != null)\n+            {\n+                ConsoleLogger.print(String.format(\"     Filter: %s\", eventRoute.getFilter()));\n+            }\n+            ConsoleLogger.print(\"\");\n+        }\n+\n+        if (existingEventRouteId != null) {\n+            ConsoleLogger.printHeader(\"Get event route\");\n+            ConsoleLogger.print(String.format(\"Getting a single event route with Id %s\", existingEventRouteId));\n+            try {\n+                EventRoute existingEventRoute = client.getEventRoute(existingEventRouteId);\n+                ConsoleLogger.print(String.format(\"Successfully retrieved event route with Id %s\", existingEventRouteId));\n+                ConsoleLogger.print(String.format(\"     EventRouteId: %s\", existingEventRoute.getId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca396bf026e3e9083ef03389578b045c16f19b2f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4NzIxOA==", "bodyText": "Ah, good thinking. I'll just \\t instead", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15049#discussion_r486587218", "createdAt": "2020-09-10T19:34:30Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/EventRoutesSyncSamples.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.digitaltwins.core.helpers.ConsoleLogger;\n+import com.azure.digitaltwins.core.helpers.SamplesArguments;\n+import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+import com.azure.digitaltwins.core.models.EventRoute;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+\n+import java.util.UUID;\n+\n+/**\n+ * This sample will list all the current event routes in your Azure Digital Twins instance,\n+ * then it will retrieve a particular event route. If the parameter for an existing event\n+ * route endpoint name is provided then it will also create a new event route, and it will\n+ * delete that newly created event route.\n+ */\n+public class EventRoutesSyncSamples {\n+    private static DigitalTwinsClient client;\n+\n+    public static void main(String[] args) {\n+        SamplesArguments parsedArguments = new SamplesArguments(args);\n+\n+        client = new DigitalTwinsClientBuilder()\n+            .credential(\n+                new ClientSecretCredentialBuilder()\n+                    .tenantId(parsedArguments.getTenantId())\n+                    .clientId(parsedArguments.getClientId())\n+                    .clientSecret(parsedArguments.getClientSecret())\n+                    .build()\n+            )\n+            .endpoint(parsedArguments.getDigitalTwinEndpoint())\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(parsedArguments.getHttpLogDetailLevel()))\n+            .buildClient();\n+\n+        ConsoleLogger.printHeader(\"List event routes\");\n+        ConsoleLogger.print(\"Listing all current event routes in your Azure Digital Twins instance\");\n+        PagedIterable<EventRoute> eventRoutes = null;\n+        try {\n+            eventRoutes = client.listEventRoutes();\n+        } catch (ErrorResponseException ex) {\n+            ConsoleLogger.printFatal(\"Failed to list event routes\");\n+            ex.printStackTrace();\n+            System.exit(0);\n+        }\n+\n+        String existingEventRouteId = null;\n+        for (EventRoute eventRoute : eventRoutes) {\n+            existingEventRouteId = eventRoute.getId();\n+            ConsoleLogger.print(String.format(\"     EventRouteId: %s\", eventRoute.getId()));\n+            ConsoleLogger.print(String.format(\"     EventRouteEndpointName: %s\", eventRoute.getEndpointName()));\n+            if (eventRoute.getFilter() != null)\n+            {\n+                ConsoleLogger.print(String.format(\"     Filter: %s\", eventRoute.getFilter()));\n+            }\n+            ConsoleLogger.print(\"\");\n+        }\n+\n+        if (existingEventRouteId != null) {\n+            ConsoleLogger.printHeader(\"Get event route\");\n+            ConsoleLogger.print(String.format(\"Getting a single event route with Id %s\", existingEventRouteId));\n+            try {\n+                EventRoute existingEventRoute = client.getEventRoute(existingEventRouteId);\n+                ConsoleLogger.print(String.format(\"Successfully retrieved event route with Id %s\", existingEventRouteId));\n+                ConsoleLogger.print(String.format(\"     EventRouteId: %s\", existingEventRoute.getId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4NTk2NQ=="}, "originalCommit": {"oid": "ca396bf026e3e9083ef03389578b045c16f19b2f"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1179, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}