{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNTYwODc4", "number": 10597, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNDoyMDo1NlrOD3pmXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNjozMDoxNlrOD-qlfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5Njc5ODM3OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-secrets/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNDoyMDo1NlrOGOBOcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjoyNzo0MVrOGRFhjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM1MzMyOA==", "bodyText": "This should be current not dependency. The version of this gets updated when you set the version just prior to release.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10597#discussion_r417353328", "createdAt": "2020-04-29T14:20:56Z", "author": {"login": "JimSuplizio"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-secrets/README.md", "diffHunk": "@@ -0,0 +1,104 @@\n+## Azure Key Vault Secrets Spring boot starter client library for Java\n+Azure Key Vault Secrets Spring boot starter is Spring starter for [Azure Key Vault Secrets](https://docs.microsoft.com/rest/api/keyvault/about-keys--secrets-and-certificates#BKMK_WorkingWithSecrets). With this starter, Azure Key Vault is added as one of Spring PropertySource, so secrets stored in Azure Key Vault could be easily used and conveniently accessed like other externalized configuration property, e.g. properties in files.\n+\n+## Key concepts\n+\n+## Getting started\n+### Add the dependency\n+\n+`azure-spring-boot-starter-keyvault-secrets` is published on Maven Central Repository.  \n+If you are using Maven, add the following dependency.  \n+\n+[//]: # ({x-version-update-start;com.azure:azure-spring-boot-starter-keyvault-secrets;dependency})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3210b343dfa3b8c6750aec9259230f1371e265b6"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2OTQ4NQ==", "bodyText": "changed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10597#discussion_r420569485", "createdAt": "2020-05-06T06:27:41Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-secrets/README.md", "diffHunk": "@@ -0,0 +1,104 @@\n+## Azure Key Vault Secrets Spring boot starter client library for Java\n+Azure Key Vault Secrets Spring boot starter is Spring starter for [Azure Key Vault Secrets](https://docs.microsoft.com/rest/api/keyvault/about-keys--secrets-and-certificates#BKMK_WorkingWithSecrets). With this starter, Azure Key Vault is added as one of Spring PropertySource, so secrets stored in Azure Key Vault could be easily used and conveniently accessed like other externalized configuration property, e.g. properties in files.\n+\n+## Key concepts\n+\n+## Getting started\n+### Add the dependency\n+\n+`azure-spring-boot-starter-keyvault-secrets` is published on Maven Central Repository.  \n+If you are using Maven, add the following dependency.  \n+\n+[//]: # ({x-version-update-start;com.azure:azure-spring-boot-starter-keyvault-secrets;dependency})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM1MzMyOA=="}, "originalCommit": {"oid": "3210b343dfa3b8c6750aec9259230f1371e265b6"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzM3ODg1OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/keyvault/spring/KeyVaultEnvironmentPostProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoyNzozNVrOGOHAyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoyNzozNVrOGOHAyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0ODEzNw==", "bodyText": "Consider adding java doc for all  (this and other ) the the public API.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10597#discussion_r417448137", "createdAt": "2020-04-29T16:27:35Z", "author": {"login": "hemanttanwar"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/keyvault/spring/KeyVaultEnvironmentPostProcessor.java", "diffHunk": "@@ -0,0 +1,52 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.keyvault.spring;\n+\n+import com.microsoft.azure.utils.Constants;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.context.config.ConfigFileApplicationListener;\n+import org.springframework.boot.env.EnvironmentPostProcessor;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.util.ClassUtils;\n+\n+/**\n+ * Leverage {@link EnvironmentPostProcessor} to add Key Vault secrets as a property source.\n+ */\n+public class KeyVaultEnvironmentPostProcessor implements EnvironmentPostProcessor, Ordered {\n+    public static final int DEFAULT_ORDER = ConfigFileApplicationListener.DEFAULT_ORDER + 1;\n+    private int order = DEFAULT_ORDER;\n+\n+    @Override\n+    public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n+        if (isKeyVaultEnabled(environment)) {\n+            final KeyVaultEnvironmentPostProcessorHelper helper =\n+                new KeyVaultEnvironmentPostProcessorHelper(environment);\n+            helper.addKeyVaultPropertySource();\n+        }\n+    }\n+\n+    private boolean isKeyVaultEnabled(ConfigurableEnvironment environment) {\n+        if (environment.getProperty(Constants.AZURE_KEYVAULT_VAULT_URI) == null) {\n+            // User doesn't want to enable Key Vault property initializer.\n+            return false;\n+        }\n+        return environment.getProperty(Constants.AZURE_KEYVAULT_ENABLED, Boolean.class, true)\n+            && isKeyVaultClientAvailable();\n+    }\n+\n+    private boolean isKeyVaultClientAvailable() {\n+        return ClassUtils.isPresent(\"com.azure.security.keyvault.secrets.SecretClient\",\n+            KeyVaultEnvironmentPostProcessor.class.getClassLoader());\n+    }\n+\n+    @Override\n+    public int getOrder() {\n+        return order;\n+    }\n+\n+    public void setOrder(int order) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3210b343dfa3b8c6750aec9259230f1371e265b6"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzM5MjgyOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/keyvault/spring/KeyVaultEnvironmentPostProcessorHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjozMTowMVrOGOHJlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjozMTowMVrOGOHJlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1MDM5MQ==", "bodyText": "Where ever it make sense, Consider adding codesnippet in java doc. This helps user to see code example in IDE and improve java doc.\nExample : https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java#L25", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10597#discussion_r417450391", "createdAt": "2020-04-29T16:31:01Z", "author": {"login": "hemanttanwar"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/keyvault/spring/KeyVaultEnvironmentPostProcessorHelper.java", "diffHunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.keyvault.spring;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.identity.ClientCertificateCredentialBuilder;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+import com.azure.identity.ManagedIdentityCredentialBuilder;\n+import com.azure.security.keyvault.secrets.SecretClient;\n+import com.azure.security.keyvault.secrets.SecretClientBuilder;\n+import com.microsoft.azure.telemetry.TelemetrySender;\n+import com.microsoft.azure.utils.Constants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.boot.context.properties.bind.Bindable;\n+import org.springframework.boot.context.properties.bind.Binder;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.core.env.MutablePropertySources;\n+import org.springframework.core.env.StandardEnvironment;\n+import org.springframework.util.Assert;\n+import org.springframework.util.ClassUtils;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.microsoft.azure.telemetry.TelemetryData.SERVICE_NAME;\n+import static com.microsoft.azure.telemetry.TelemetryData.getClassPackageSimpleName;\n+import static com.microsoft.azure.utils.Constants.SPRINGBOOT_KEY_VAULT_APPLICATION_ID;\n+\n+/**\n+ * A helper class to initialize the key vault secret client depending on which authentication method users choose.\n+ * Then add key vault as a property source to the environment.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3210b343dfa3b8c6750aec9259230f1371e265b6"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTk1NzQyOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/keyvault/spring/KeyVaultOperation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNzozOTo1NVrOGOzoVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNTozNTozOVrOGREmPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE3OTE1Ng==", "bodyText": "Do you really need a lock? Can declaring propertyNamesArr as volatile be sufficient?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10597#discussion_r418179156", "createdAt": "2020-04-30T17:39:55Z", "author": {"login": "srnagar"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/keyvault/spring/KeyVaultOperation.java", "diffHunk": "@@ -0,0 +1,151 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.keyvault.spring;\n+\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.security.keyvault.secrets.SecretClient;\n+import com.azure.security.keyvault.secrets.models.KeyVaultSecret;\n+import com.azure.security.keyvault.secrets.models.SecretProperties;\n+import org.springframework.lang.NonNull;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * Encapsulate key vault secret client in this class to provide a delegate of key vault operations.\n+ */\n+public class KeyVaultOperation {\n+    private final long cacheRefreshIntervalInMs;\n+    private final List<String> secretKeys;\n+\n+    private final Object refreshLock = new Object();\n+    private final SecretClient keyVaultClient;\n+    private final String vaultUri;\n+\n+    private ArrayList<String> propertyNames = new ArrayList<>();\n+    private String[] propertyNamesArr;\n+\n+    private final AtomicLong lastUpdateTime = new AtomicLong();\n+    private final ReadWriteLock rwLock = new ReentrantReadWriteLock();\n+\n+    public KeyVaultOperation(final SecretClient keyVaultClient,\n+                             String vaultUri,\n+                             final long refreshInterval,\n+                             final List<String> secretKeys) {\n+        this.cacheRefreshIntervalInMs = refreshInterval;\n+        this.secretKeys = secretKeys;\n+        this.keyVaultClient = keyVaultClient;\n+        // TODO(pan): need to validate why last '/' need to be truncated.\n+        this.vaultUri = StringUtils.trimTrailingCharacter(vaultUri.trim(), '/');\n+        fillSecretsList();\n+    }\n+\n+    public String[] list() {\n+        try {\n+            this.rwLock.readLock().lock();\n+            return propertyNamesArr;\n+        } finally {\n+            this.rwLock.readLock().unlock();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3210b343dfa3b8c6750aec9259230f1371e265b6"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU1NDMwMA==", "bodyText": "Yes, the write method fillSecretsList could be called from multiple threads simultaneously when refreshing propertyNames.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10597#discussion_r420554300", "createdAt": "2020-05-06T05:35:39Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/keyvault/spring/KeyVaultOperation.java", "diffHunk": "@@ -0,0 +1,151 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.keyvault.spring;\n+\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.security.keyvault.secrets.SecretClient;\n+import com.azure.security.keyvault.secrets.models.KeyVaultSecret;\n+import com.azure.security.keyvault.secrets.models.SecretProperties;\n+import org.springframework.lang.NonNull;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * Encapsulate key vault secret client in this class to provide a delegate of key vault operations.\n+ */\n+public class KeyVaultOperation {\n+    private final long cacheRefreshIntervalInMs;\n+    private final List<String> secretKeys;\n+\n+    private final Object refreshLock = new Object();\n+    private final SecretClient keyVaultClient;\n+    private final String vaultUri;\n+\n+    private ArrayList<String> propertyNames = new ArrayList<>();\n+    private String[] propertyNamesArr;\n+\n+    private final AtomicLong lastUpdateTime = new AtomicLong();\n+    private final ReadWriteLock rwLock = new ReentrantReadWriteLock();\n+\n+    public KeyVaultOperation(final SecretClient keyVaultClient,\n+                             String vaultUri,\n+                             final long refreshInterval,\n+                             final List<String> secretKeys) {\n+        this.cacheRefreshIntervalInMs = refreshInterval;\n+        this.secretKeys = secretKeys;\n+        this.keyVaultClient = keyVaultClient;\n+        // TODO(pan): need to validate why last '/' need to be truncated.\n+        this.vaultUri = StringUtils.trimTrailingCharacter(vaultUri.trim(), '/');\n+        fillSecretsList();\n+    }\n+\n+    public String[] list() {\n+        try {\n+            this.rwLock.readLock().lock();\n+            return propertyNamesArr;\n+        } finally {\n+            this.rwLock.readLock().unlock();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE3OTE1Ng=="}, "originalCommit": {"oid": "3210b343dfa3b8c6750aec9259230f1371e265b6"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTk3OTM2OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/keyvault/spring/KeyVaultOperation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNzo0NjowMlrOGOz2ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjoyNDo0MFrOGRFdnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4Mjc2Mg==", "bodyText": "Use this consistently. Here one is using this and another is not: this.secretKeys and secretKeys", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10597#discussion_r418182762", "createdAt": "2020-04-30T17:46:02Z", "author": {"login": "srnagar"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/keyvault/spring/KeyVaultOperation.java", "diffHunk": "@@ -0,0 +1,151 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.keyvault.spring;\n+\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.security.keyvault.secrets.SecretClient;\n+import com.azure.security.keyvault.secrets.models.KeyVaultSecret;\n+import com.azure.security.keyvault.secrets.models.SecretProperties;\n+import org.springframework.lang.NonNull;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * Encapsulate key vault secret client in this class to provide a delegate of key vault operations.\n+ */\n+public class KeyVaultOperation {\n+    private final long cacheRefreshIntervalInMs;\n+    private final List<String> secretKeys;\n+\n+    private final Object refreshLock = new Object();\n+    private final SecretClient keyVaultClient;\n+    private final String vaultUri;\n+\n+    private ArrayList<String> propertyNames = new ArrayList<>();\n+    private String[] propertyNamesArr;\n+\n+    private final AtomicLong lastUpdateTime = new AtomicLong();\n+    private final ReadWriteLock rwLock = new ReentrantReadWriteLock();\n+\n+    public KeyVaultOperation(final SecretClient keyVaultClient,\n+                             String vaultUri,\n+                             final long refreshInterval,\n+                             final List<String> secretKeys) {\n+        this.cacheRefreshIntervalInMs = refreshInterval;\n+        this.secretKeys = secretKeys;\n+        this.keyVaultClient = keyVaultClient;\n+        // TODO(pan): need to validate why last '/' need to be truncated.\n+        this.vaultUri = StringUtils.trimTrailingCharacter(vaultUri.trim(), '/');\n+        fillSecretsList();\n+    }\n+\n+    public String[] list() {\n+        try {\n+            this.rwLock.readLock().lock();\n+            return propertyNamesArr;\n+        } finally {\n+            this.rwLock.readLock().unlock();\n+        }\n+    }\n+\n+    private String getKeyVaultSecretName(@NonNull String property) {\n+        if (property.matches(\"[a-z0-9A-Z-]+\")) {\n+            return property.toLowerCase(Locale.US);\n+        } else if (property.matches(\"[A-Z0-9_]+\")) {\n+            return property.toLowerCase(Locale.US).replaceAll(\"_\", \"-\");\n+        } else {\n+            return property.toLowerCase(Locale.US)\n+                    .replaceAll(\"-\", \"\")     // my-project -> myproject\n+                    .replaceAll(\"_\", \"\")     // my_project -> myproject\n+                    .replaceAll(\"\\\\.\", \"-\"); // acme.myproject -> acme-myproject\n+        }\n+    }\n+\n+    /**\n+     * For convention we need to support all relaxed binding format from spring, these may include:\n+     * <ul>\n+     * <li>Spring relaxed binding names</li>\n+     * <li>acme.my-project.person.first-name</li>\n+     * <li>acme.myProject.person.firstName</li>\n+     * <li>acme.my_project.person.first_name</li>\n+     * <li>ACME_MYPROJECT_PERSON_FIRSTNAME</li>\n+     * </ul>\n+     * But azure keyvault only allows ^[0-9a-zA-Z-]+$ and case insensitive, so there must be some conversion\n+     * between spring names and azure keyvault names.\n+     * For example, the 4 properties stated above should be convert to acme-myproject-person-firstname in keyvault.\n+     *\n+     * @param property of secret instance.\n+     * @return the value of secret with given name or null.\n+     */\n+    public String get(final String property) {\n+        Assert.hasText(property, \"property should contain text.\");\n+        final String secretName = getKeyVaultSecretName(property);\n+\n+        //if user don't set specific secret keys, then refresh token\n+        if (this.secretKeys == null || secretKeys.size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3210b343dfa3b8c6750aec9259230f1371e265b6"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2ODQ3OQ==", "bodyText": "done.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10597#discussion_r420568479", "createdAt": "2020-05-06T06:24:40Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/keyvault/spring/KeyVaultOperation.java", "diffHunk": "@@ -0,0 +1,151 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.keyvault.spring;\n+\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.security.keyvault.secrets.SecretClient;\n+import com.azure.security.keyvault.secrets.models.KeyVaultSecret;\n+import com.azure.security.keyvault.secrets.models.SecretProperties;\n+import org.springframework.lang.NonNull;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * Encapsulate key vault secret client in this class to provide a delegate of key vault operations.\n+ */\n+public class KeyVaultOperation {\n+    private final long cacheRefreshIntervalInMs;\n+    private final List<String> secretKeys;\n+\n+    private final Object refreshLock = new Object();\n+    private final SecretClient keyVaultClient;\n+    private final String vaultUri;\n+\n+    private ArrayList<String> propertyNames = new ArrayList<>();\n+    private String[] propertyNamesArr;\n+\n+    private final AtomicLong lastUpdateTime = new AtomicLong();\n+    private final ReadWriteLock rwLock = new ReentrantReadWriteLock();\n+\n+    public KeyVaultOperation(final SecretClient keyVaultClient,\n+                             String vaultUri,\n+                             final long refreshInterval,\n+                             final List<String> secretKeys) {\n+        this.cacheRefreshIntervalInMs = refreshInterval;\n+        this.secretKeys = secretKeys;\n+        this.keyVaultClient = keyVaultClient;\n+        // TODO(pan): need to validate why last '/' need to be truncated.\n+        this.vaultUri = StringUtils.trimTrailingCharacter(vaultUri.trim(), '/');\n+        fillSecretsList();\n+    }\n+\n+    public String[] list() {\n+        try {\n+            this.rwLock.readLock().lock();\n+            return propertyNamesArr;\n+        } finally {\n+            this.rwLock.readLock().unlock();\n+        }\n+    }\n+\n+    private String getKeyVaultSecretName(@NonNull String property) {\n+        if (property.matches(\"[a-z0-9A-Z-]+\")) {\n+            return property.toLowerCase(Locale.US);\n+        } else if (property.matches(\"[A-Z0-9_]+\")) {\n+            return property.toLowerCase(Locale.US).replaceAll(\"_\", \"-\");\n+        } else {\n+            return property.toLowerCase(Locale.US)\n+                    .replaceAll(\"-\", \"\")     // my-project -> myproject\n+                    .replaceAll(\"_\", \"\")     // my_project -> myproject\n+                    .replaceAll(\"\\\\.\", \"-\"); // acme.myproject -> acme-myproject\n+        }\n+    }\n+\n+    /**\n+     * For convention we need to support all relaxed binding format from spring, these may include:\n+     * <ul>\n+     * <li>Spring relaxed binding names</li>\n+     * <li>acme.my-project.person.first-name</li>\n+     * <li>acme.myProject.person.firstName</li>\n+     * <li>acme.my_project.person.first_name</li>\n+     * <li>ACME_MYPROJECT_PERSON_FIRSTNAME</li>\n+     * </ul>\n+     * But azure keyvault only allows ^[0-9a-zA-Z-]+$ and case insensitive, so there must be some conversion\n+     * between spring names and azure keyvault names.\n+     * For example, the 4 properties stated above should be convert to acme-myproject-person-firstname in keyvault.\n+     *\n+     * @param property of secret instance.\n+     * @return the value of secret with given name or null.\n+     */\n+    public String get(final String property) {\n+        Assert.hasText(property, \"property should contain text.\");\n+        final String secretName = getKeyVaultSecretName(property);\n+\n+        //if user don't set specific secret keys, then refresh token\n+        if (this.secretKeys == null || secretKeys.size() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4Mjc2Mg=="}, "originalCommit": {"oid": "3210b343dfa3b8c6750aec9259230f1371e265b6"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjAwNTM2OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/keyvault/spring/KeyVaultOperation.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNzo1MzowM1rOGO0G0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjoyNDo1NVrOGRFd3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4Njk2Mw==", "bodyText": "Is there a reason to not use async clients here? Also, name the variable as secretClient as KeyVault has 4 different types of clients.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10597#discussion_r418186963", "createdAt": "2020-04-30T17:53:03Z", "author": {"login": "srnagar"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/keyvault/spring/KeyVaultOperation.java", "diffHunk": "@@ -0,0 +1,151 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.keyvault.spring;\n+\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.security.keyvault.secrets.SecretClient;\n+import com.azure.security.keyvault.secrets.models.KeyVaultSecret;\n+import com.azure.security.keyvault.secrets.models.SecretProperties;\n+import org.springframework.lang.NonNull;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * Encapsulate key vault secret client in this class to provide a delegate of key vault operations.\n+ */\n+public class KeyVaultOperation {\n+    private final long cacheRefreshIntervalInMs;\n+    private final List<String> secretKeys;\n+\n+    private final Object refreshLock = new Object();\n+    private final SecretClient keyVaultClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3210b343dfa3b8c6750aec9259230f1371e265b6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU1NjQ3OQ==", "bodyText": "According to the nature of the Spring property source, it will block until all responses are returned, so we use the sync client.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10597#discussion_r420556479", "createdAt": "2020-05-06T05:44:01Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/keyvault/spring/KeyVaultOperation.java", "diffHunk": "@@ -0,0 +1,151 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.keyvault.spring;\n+\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.security.keyvault.secrets.SecretClient;\n+import com.azure.security.keyvault.secrets.models.KeyVaultSecret;\n+import com.azure.security.keyvault.secrets.models.SecretProperties;\n+import org.springframework.lang.NonNull;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * Encapsulate key vault secret client in this class to provide a delegate of key vault operations.\n+ */\n+public class KeyVaultOperation {\n+    private final long cacheRefreshIntervalInMs;\n+    private final List<String> secretKeys;\n+\n+    private final Object refreshLock = new Object();\n+    private final SecretClient keyVaultClient;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4Njk2Mw=="}, "originalCommit": {"oid": "3210b343dfa3b8c6750aec9259230f1371e265b6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2ODU0MA==", "bodyText": "Changed to secretClient.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10597#discussion_r420568540", "createdAt": "2020-05-06T06:24:55Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/keyvault/spring/KeyVaultOperation.java", "diffHunk": "@@ -0,0 +1,151 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.keyvault.spring;\n+\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.security.keyvault.secrets.SecretClient;\n+import com.azure.security.keyvault.secrets.models.KeyVaultSecret;\n+import com.azure.security.keyvault.secrets.models.SecretProperties;\n+import org.springframework.lang.NonNull;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * Encapsulate key vault secret client in this class to provide a delegate of key vault operations.\n+ */\n+public class KeyVaultOperation {\n+    private final long cacheRefreshIntervalInMs;\n+    private final List<String> secretKeys;\n+\n+    private final Object refreshLock = new Object();\n+    private final SecretClient keyVaultClient;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4Njk2Mw=="}, "originalCommit": {"oid": "3210b343dfa3b8c6750aec9259230f1371e265b6"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjAwOTYzOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/test/java/com/microsoft/azure/keyvault/spring/InitializerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNzo1NDoxMlrOGO0JmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjoyNTowNlrOGRFeEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4NzY3Mw==", "bodyText": "nit: extra empty line.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10597#discussion_r418187673", "createdAt": "2020-04-30T17:54:12Z", "author": {"login": "srnagar"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/microsoft/azure/keyvault/spring/InitializerTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.keyvault.spring;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3210b343dfa3b8c6750aec9259230f1371e265b6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2ODU5Mw==", "bodyText": "removed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10597#discussion_r420568593", "createdAt": "2020-05-06T06:25:06Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/microsoft/azure/keyvault/spring/InitializerTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.keyvault.spring;\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4NzY3Mw=="}, "originalCommit": {"oid": "3210b343dfa3b8c6750aec9259230f1371e265b6"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDMzOTcxOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNjoyNDo1M1rOGY5wxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoyNDo0N1rOGZSR6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc2NTM4MQ==", "bodyText": "This tag doesn't match the artifactId below.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10597#discussion_r428765381", "createdAt": "2020-05-21T16:24:53Z", "author": {"login": "JimSuplizio"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "diffHunk": "@@ -25,7 +25,7 @@ The authorization flow is composed of 3 phrases:\n `azure-spring-boot-starter-active-directory` is published on Maven Central Repository.\n If you are using Maven, add the following dependency.\n \n-[//]: # \"{x-version-update-start;com.azure:azure-spring-boot-starter-active-directory;dependency}\"\n+[//]: # \"{x-version-update-start;com.azure:azure-spring-boot-starter-active-directory;current}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4df875836c3510b8228a37471912975c84d98f9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2NzA4MQ==", "bodyText": "done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10597#discussion_r429167081", "createdAt": "2020-05-22T10:24:47Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "diffHunk": "@@ -25,7 +25,7 @@ The authorization flow is composed of 3 phrases:\n `azure-spring-boot-starter-active-directory` is published on Maven Central Repository.\n If you are using Maven, add the following dependency.\n \n-[//]: # \"{x-version-update-start;com.azure:azure-spring-boot-starter-active-directory;dependency}\"\n+[//]: # \"{x-version-update-start;com.azure:azure-spring-boot-starter-active-directory;current}\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc2NTM4MQ=="}, "originalCommit": {"oid": "c4df875836c3510b8228a37471912975c84d98f9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDM2MDMxOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-secrets/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNjozMDoxNlrOGY59aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoyNjo1NlrOGZSVSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc2ODYxOQ==", "bodyText": "The artifactId in the tag and the artifactId in the XML snippet don't match.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10597#discussion_r428768619", "createdAt": "2020-05-21T16:30:16Z", "author": {"login": "JimSuplizio"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-secrets/README.md", "diffHunk": "@@ -0,0 +1,104 @@\n+## Azure Key Vault Secrets Spring boot starter client library for Java\n+Azure Key Vault Secrets Spring boot starter is Spring starter for [Azure Key Vault Secrets](https://docs.microsoft.com/rest/api/keyvault/about-keys--secrets-and-certificates#BKMK_WorkingWithSecrets). With this starter, Azure Key Vault is added as one of Spring PropertySource, so secrets stored in Azure Key Vault could be easily used and conveniently accessed like other externalized configuration property, e.g. properties in files.\n+\n+## Key concepts\n+\n+## Getting started\n+### Add the dependency\n+\n+`azure-spring-boot-starter-keyvault-secrets` is published on Maven Central Repository.  \n+If you are using Maven, add the following dependency.  \n+\n+[//]: # ({x-version-update-start;com.azure:azure-spring-boot-starter-keyvault-secrets;current})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4df875836c3510b8228a37471912975c84d98f9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2Nzk0Nw==", "bodyText": "done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10597#discussion_r429167947", "createdAt": "2020-05-22T10:26:56Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-secrets/README.md", "diffHunk": "@@ -0,0 +1,104 @@\n+## Azure Key Vault Secrets Spring boot starter client library for Java\n+Azure Key Vault Secrets Spring boot starter is Spring starter for [Azure Key Vault Secrets](https://docs.microsoft.com/rest/api/keyvault/about-keys--secrets-and-certificates#BKMK_WorkingWithSecrets). With this starter, Azure Key Vault is added as one of Spring PropertySource, so secrets stored in Azure Key Vault could be easily used and conveniently accessed like other externalized configuration property, e.g. properties in files.\n+\n+## Key concepts\n+\n+## Getting started\n+### Add the dependency\n+\n+`azure-spring-boot-starter-keyvault-secrets` is published on Maven Central Repository.  \n+If you are using Maven, add the following dependency.  \n+\n+[//]: # ({x-version-update-start;com.azure:azure-spring-boot-starter-keyvault-secrets;current})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc2ODYxOQ=="}, "originalCommit": {"oid": "c4df875836c3510b8228a37471912975c84d98f9"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4520, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}