{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzOTk4NDg1", "number": 11474, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoyMzo0NlrOEAMzbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjozODowMlrOEA9f0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjQ1MjMwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoyMzo0NlrOGbVWJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDozMzo1M1rOGcfc6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMxNDQ2OQ==", "bodyText": "does ZonedDateTimeSerializer now how to serialize Instant?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11474#discussion_r431314469", "createdAt": "2020-05-27T17:23:46Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java", "diffHunk": "@@ -329,9 +327,9 @@ public void serialize(\n \n     private static class AddressResolutionStatistics {\n         @JsonSerialize(using = ZonedDateTimeSerializer.class)\n-        ZonedDateTime startTime;\n+        Instant startTime;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f56f17aafb7a03e5d1cc7f4b3d735c134f26ad49"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUyODYxOQ==", "bodyText": "Yes , however renamed the serializer to include instant in name and now it is extending InstantSerializer", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11474#discussion_r432528619", "createdAt": "2020-05-29T14:33:53Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java", "diffHunk": "@@ -329,9 +327,9 @@ public void serialize(\n \n     private static class AddressResolutionStatistics {\n         @JsonSerialize(using = ZonedDateTimeSerializer.class)\n-        ZonedDateTime startTime;\n+        Instant startTime;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMxNDQ2OQ=="}, "originalCommit": {"oid": "f56f17aafb7a03e5d1cc7f4b3d735c134f26ad49"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjQ3OTU3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ZonedDateTimeSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzozMDo1MFrOGbVnSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDo1MDoxNFrOGcgF_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMxODg1OA==", "bodyText": "why aren't we using existing library serializers?\nhttps://fasterxml.github.io/jackson-datatype-jsr310/javadoc/2.4/com/fasterxml/jackson/datatype/jsr310/ser/InstantSerializer.html", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11474#discussion_r431318858", "createdAt": "2020-05-27T17:30:50Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ZonedDateTimeSerializer.java", "diffHunk": "@@ -7,31 +7,32 @@\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n \n import java.io.IOException;\n-import java.time.ZonedDateTime;\n+import java.time.Instant;\n+import java.time.ZoneOffset;\n import java.time.format.DateTimeFormatter;\n import java.util.Locale;\n \n-public class ZonedDateTimeSerializer extends StdSerializer<ZonedDateTime> {\n+public class ZonedDateTimeSerializer extends StdSerializer<Instant> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f56f17aafb7a03e5d1cc7f4b3d735c134f26ad49"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzOTEzNQ==", "bodyText": "done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11474#discussion_r432539135", "createdAt": "2020-05-29T14:50:14Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ZonedDateTimeSerializer.java", "diffHunk": "@@ -7,31 +7,32 @@\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n \n import java.io.IOException;\n-import java.time.ZonedDateTime;\n+import java.time.Instant;\n+import java.time.ZoneOffset;\n import java.time.format.DateTimeFormatter;\n import java.util.Locale;\n \n-public class ZonedDateTimeSerializer extends StdSerializer<ZonedDateTime> {\n+public class ZonedDateTimeSerializer extends StdSerializer<Instant> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMxODg1OA=="}, "originalCommit": {"oid": "f56f17aafb7a03e5d1cc7f4b3d735c134f26ad49"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjQ5MjgzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ChangeFeedQueryImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzozNDozMVrOGbVvzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDo0OTo1NlrOGcgFKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMyMTAzNg==", "bodyText": "Instead of converting instant to OffsetDateTime, its better to add this helper method in Utils.java which directly takes Instant and formats it.\npublic static String instantAsUTCRFC1123(Instant instant){\n       return Utils.RFC_1123_DATE_TIME.format(instant);\n}", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11474#discussion_r431321036", "createdAt": "2020-05-27T17:34:31Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ChangeFeedQueryImpl.java", "diffHunk": "@@ -95,7 +96,7 @@ private RxDocumentServiceRequest createDocumentServiceRequest(String continuatio\n         }\n \n         if(options.getStartDateTime() != null){\n-            String dateTimeInHttpFormat = Utils.zonedDateTimeAsUTCRFC1123(options.getStartDateTime());\n+            String dateTimeInHttpFormat = Utils.zonedDateTimeAsUTCRFC1123(options.getStartDateTime().atOffset(ZoneOffset.UTC));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f56f17aafb7a03e5d1cc7f4b3d735c134f26ad49"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzODkyMQ==", "bodyText": "DateTime format cannot parse with Instant , we need zone time info , it will give runtime exception. Also we it cant be compatible with existing lease if we change the format.\nhttps://stackoverflow.com/questions/25229124/format-instant-to-string", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11474#discussion_r432538921", "createdAt": "2020-05-29T14:49:56Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ChangeFeedQueryImpl.java", "diffHunk": "@@ -95,7 +96,7 @@ private RxDocumentServiceRequest createDocumentServiceRequest(String continuatio\n         }\n \n         if(options.getStartDateTime() != null){\n-            String dateTimeInHttpFormat = Utils.zonedDateTimeAsUTCRFC1123(options.getStartDateTime());\n+            String dateTimeInHttpFormat = Utils.zonedDateTimeAsUTCRFC1123(options.getStartDateTime().atOffset(ZoneOffset.UTC));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMyMTAzNg=="}, "originalCommit": {"oid": "f56f17aafb7a03e5d1cc7f4b3d735c134f26ad49"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjQ5NTg5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzozNToyOFrOGbVx6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDo0NzowMlrOGcf-FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMyMTU3Ng==", "bodyText": "why are we doing translation from ZoneDateTime to Instant? can't we rely on Instant everywhere?\n@simplynaveen20 @milismsft", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11474#discussion_r431321576", "createdAt": "2020-05-27T17:35:28Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java", "diffHunk": "@@ -203,7 +200,7 @@ public static ServiceItemLease fromDocument(CosmosItemProperties document) {\n \n         String leaseTimestamp = ModelBridgeInternal.getStringFromJsonSerializable(document,PROPERTY_NAME_TIMESTAMP);\n         if (leaseTimestamp != null) {\n-            return lease.withTimestamp(ZonedDateTime.parse(leaseTimestamp));\n+            return lease.withTimestamp(ZonedDateTime.parse(leaseTimestamp).toInstant());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f56f17aafb7a03e5d1cc7f4b3d735c134f26ad49"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzNzEwOQ==", "bodyText": "Discussed with Milis, we are serializing and deserializing the same way it was happening before , also text coming from service is  in DateTime format which cant be parse with Instant, it will throw exception", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11474#discussion_r432537109", "createdAt": "2020-05-29T14:47:02Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java", "diffHunk": "@@ -203,7 +200,7 @@ public static ServiceItemLease fromDocument(CosmosItemProperties document) {\n \n         String leaseTimestamp = ModelBridgeInternal.getStringFromJsonSerializable(document,PROPERTY_NAME_TIMESTAMP);\n         if (leaseTimestamp != null) {\n-            return lease.withTimestamp(ZonedDateTime.parse(leaseTimestamp));\n+            return lease.withTimestamp(ZonedDateTime.parse(leaseTimestamp).toInstant());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMyMTU3Ng=="}, "originalCommit": {"oid": "f56f17aafb7a03e5d1cc7f4b3d735c134f26ad49"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjQ5NjEyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ZonedDateTimeSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzozNTozMlrOGbVyDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDo0NzowOVrOGcf-Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMyMTYxMg==", "bodyText": "We should rename this class to InstantSerializer", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11474#discussion_r431321612", "createdAt": "2020-05-27T17:35:32Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ZonedDateTimeSerializer.java", "diffHunk": "@@ -7,31 +7,32 @@\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n \n import java.io.IOException;\n-import java.time.ZonedDateTime;\n+import java.time.Instant;\n+import java.time.ZoneOffset;\n import java.time.format.DateTimeFormatter;\n import java.util.Locale;\n \n-public class ZonedDateTimeSerializer extends StdSerializer<ZonedDateTime> {\n+public class ZonedDateTimeSerializer extends StdSerializer<Instant> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f56f17aafb7a03e5d1cc7f4b3d735c134f26ad49"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzNzE5MQ==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11474#discussion_r432537191", "createdAt": "2020-05-29T14:47:09Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ZonedDateTimeSerializer.java", "diffHunk": "@@ -7,31 +7,32 @@\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n \n import java.io.IOException;\n-import java.time.ZonedDateTime;\n+import java.time.Instant;\n+import java.time.ZoneOffset;\n import java.time.format.DateTimeFormatter;\n import java.util.Locale;\n \n-public class ZonedDateTimeSerializer extends StdSerializer<ZonedDateTime> {\n+public class ZonedDateTimeSerializer extends StdSerializer<Instant> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMyMTYxMg=="}, "originalCommit": {"oid": "f56f17aafb7a03e5d1cc7f4b3d735c134f26ad49"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDQzMDI3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjozODowMlrOGckEAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjozODowMlrOGckEAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwNDE2Mw==", "bodyText": "Seems like we have few unused imports here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11474#discussion_r432604163", "createdAt": "2020-05-29T16:38:02Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java", "diffHunk": "@@ -38,7 +38,12 @@\n import reactor.core.scheduler.Schedulers;\n \n import java.time.Duration;\n-import java.time.OffsetDateTime;\n+import java.time.Instant;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.temporal.ChronoUnit;\n+import java.time.temporal.Temporal;\n+import java.time.temporal.TemporalUnit;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ecc1f53df21c40a811275d8fa911a52af106ba3"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4072, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}