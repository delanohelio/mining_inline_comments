{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4ODI5NjI5", "number": 7839, "title": "Cosmos Paged flux initial POC implementation v4", "bodyText": "CosmosPagedFlux initial POC implementation\nTo get early feedback and scope the changes to a small subset of files, this PR only covers one API -> queryItems()", "createdAt": "2020-01-30T00:16:21Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7839", "merged": true, "mergeCommit": {"oid": "a997bae55174aa6baaf664c6f3593b36eebaf67c"}, "closed": true, "closedAt": "2020-02-04T23:58:38Z", "author": {"login": "kushagraThapar"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9Ta6VAH2gAyMzY4ODI5NjI5OmQzN2JlYjIzZTFjYjE0NTczNjY3MGE4N2FiNWFkYWY0MjJiMjcxNTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBHnmqAH2gAyMzY4ODI5NjI5Ojc5NDM5MzU5ZGJhM2U3ZjZlOGNjODhkYzVmYzA5Yzk4M2RjMGQ1YWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d37beb23e1cb145736670a87ab5adaf422b27152", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d37beb23e1cb145736670a87ab5adaf422b27152", "committedDate": "2020-01-24T00:01:54Z", "message": "Updated pom files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dddcd35edb8d5e3e0774f697bbf8b1b0f9a1ccc", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4dddcd35edb8d5e3e0774f697bbf8b1b0f9a1ccc", "committedDate": "2020-01-24T22:18:52Z", "message": "Merge branch 'feature/cosmos/v4' into paged_flux_implementation_v4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f89a22b868c88a60de8822ce9b6eb6ad44ef61b4", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f89a22b868c88a60de8822ce9b6eb6ad44ef61b4", "committedDate": "2020-01-30T00:06:19Z", "message": "Added CosmosContinuablePagedFlux initial impelmentation and POC for query"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46dd6f2a02bf5ec7ee83e0ca99798deaa5ab578f", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/46dd6f2a02bf5ec7ee83e0ca99798deaa5ab578f", "committedDate": "2020-01-30T00:08:32Z", "message": "Merged latest feature/cosmos/v4 changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMjU2NDgw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7839#pullrequestreview-351256480", "createdAt": "2020-01-31T01:56:45Z", "commit": {"oid": "46dd6f2a02bf5ec7ee83e0ca99798deaa5ab578f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMTo1Njo0NVrOFj_hrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMjowNDowNlrOFj_nSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4NTI5NA==", "bodyText": "access should be package level not public.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7839#discussion_r373285294", "createdAt": "2020-01-31T01:56:45Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosContinuablePagedFlux.java", "diffHunk": "@@ -0,0 +1,85 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.paging.ContinuablePagedFlux;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.publisher.Flux;\n+\n+import java.util.function.Function;\n+\n+/**\n+ * Cosmos implementation of {@link ContinuablePagedFlux}.\n+ * <p>\n+ * This type is a Flux that provides the ability to operate on pages of type {@link FeedResponse}\n+ * and individual items in such pages. This type supports {@link String} type continuation tokens,\n+ * allowing for restarting from a previously-retrieved continuation token.\n+ * <p>\n+ * For more information on the base type, refer {@link ContinuablePagedFlux}\n+ *\n+ * @param <T> The type of elements in a {@link com.azure.core.util.paging.ContinuablePage}\n+ * @see com.azure.core.util.paging.ContinuablePage\n+ * @see CosmosPagedFluxOptions\n+ * @see FeedResponse\n+ */\n+public class CosmosContinuablePagedFlux<T> extends ContinuablePagedFlux<String, T, FeedResponse<T>> {\n+\n+    private final Function<CosmosPagedFluxOptions, Flux<FeedResponse<T>>> optionsFluxFunction;\n+\n+    public CosmosContinuablePagedFlux(Function<CosmosPagedFluxOptions, Flux<FeedResponse<T>>> optionsFluxFunction) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46dd6f2a02bf5ec7ee83e0ca99798deaa5ab578f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4NTczNQ==", "bodyText": "this constructor is not user facing right? then it should not be public.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7839#discussion_r373285735", "createdAt": "2020-01-31T01:58:43Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosPagedFluxOptions.java", "diffHunk": "@@ -0,0 +1,63 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+/**\n+ * Specifies paging options for Cosmos Paged Flux implementation.\n+ * @see CosmosContinuablePagedFlux\n+ */\n+public class CosmosPagedFluxOptions {\n+\n+    private String requestContinuation;\n+    private Integer maxItemCount;\n+\n+    public CosmosPagedFluxOptions(FeedOptions feedOptions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46dd6f2a02bf5ec7ee83e0ca99798deaa5ab578f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4NjcyOA==", "bodyText": "aren't we going to have two options class types? now it is not clear if continuationToken is set in FeedOption and also passed by 'CosmosContinuablePageFlux.byPage(continuationToken)' who overrides who.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7839#discussion_r373286728", "createdAt": "2020-01-31T02:04:06Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -329,22 +329,33 @@ public String getId() {\n      * <p>\n      * After subscription the operation will be performed. The {@link Flux} will\n      * contain one or several feed response of the obtained items. In case of\n-     * failure the {@link Flux} will error.\n+     * failure the {@link CosmosContinuablePagedFlux} will error.\n      *\n      * @param <T> the type parameter\n      * @param querySpec the SQL query specification.\n      * @param options the feed options.\n      * @param klass the class type\n-     * @return a {@link Flux} containing one or several feed response pages of the obtained items or an error.\n+     * @return a {@link CosmosContinuablePagedFlux} containing one or several feed response pages of the obtained items or an error.\n      */\n-    public <T> Flux<FeedResponse<T>> queryItems(SqlQuerySpec querySpec, FeedOptions options, Class<T> klass) {\n-        return getDatabase().getDocClientWrapper().queryDocuments(getLink(),\n-                                                                  querySpec, options)\n-                   .map(response -> BridgeInternal.createFeedResponseWithQueryMetrics(\n-                       (CosmosItemProperties\n-                            .getTypedResultsFromV2Results((List<Document>) (Object) response.getResults(),\n-                                                          klass)), response.getResponseHeaders(),\n-                       response.queryMetrics()));\n+    public <T> CosmosContinuablePagedFlux<T> queryItems(SqlQuerySpec querySpec, FeedOptions options, Class<T> klass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46dd6f2a02bf5ec7ee83e0ca99798deaa5ab578f"}, "originalPosition": 84}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ecd26a46adcabd6fc2554c7a4e6acba22a804ee", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3ecd26a46adcabd6fc2554c7a4e6acba22a804ee", "committedDate": "2020-01-31T20:43:12Z", "message": "Changed constructor to package level. Updated mixed benchmark to take maxItemCount in the API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b92edcd9d0e5101f47edadf9b9c8fd3e08faf9b", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4b92edcd9d0e5101f47edadf9b9c8fd3e08faf9b", "committedDate": "2020-02-01T21:58:52Z", "message": "Experimenting Schedulers for elastic pool"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d53d439486d53c2820bf1a5732fbd5fc1d2d5d12", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d53d439486d53c2820bf1a5732fbd5fc1d2d5d12", "committedDate": "2020-02-02T12:53:45Z", "message": "Reverted flux experiments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32a8539420af4d992fc2f3dd7d4920ee1446e907", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/32a8539420af4d992fc2f3dd7d4920ee1446e907", "committedDate": "2020-02-03T06:52:16Z", "message": "Removed azure-core unwanted dependencies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNDY1MjI0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7839#pullrequestreview-352465224", "createdAt": "2020-02-03T18:26:37Z", "commit": {"oid": "32a8539420af4d992fc2f3dd7d4920ee1446e907"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODoyNjozN1rOFk7SIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODoyNjozN1rOFk7SIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2NDM1NQ==", "bodyText": "each of the reactor transformation will have its own internal buffering, we need to make sure after the transformation, we fetch limited number of items/pages, and possibly configure how many pages should be pre-fetched.\nWe should have some tests similar to BackPressureCrossPartitionTest and BackpressureTest on the surface query API.\nNot necessarily in this PR. but we need to have that.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7839#discussion_r374264355", "createdAt": "2020-02-03T18:26:37Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosContinuablePagedFlux.java", "diffHunk": "@@ -0,0 +1,85 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.paging.ContinuablePagedFlux;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.publisher.Flux;\n+\n+import java.util.function.Function;\n+\n+/**\n+ * Cosmos implementation of {@link ContinuablePagedFlux}.\n+ * <p>\n+ * This type is a Flux that provides the ability to operate on pages of type {@link FeedResponse}\n+ * and individual items in such pages. This type supports {@link String} type continuation tokens,\n+ * allowing for restarting from a previously-retrieved continuation token.\n+ * <p>\n+ * For more information on the base type, refer {@link ContinuablePagedFlux}\n+ *\n+ * @param <T> The type of elements in a {@link com.azure.core.util.paging.ContinuablePage}\n+ * @see com.azure.core.util.paging.ContinuablePage\n+ * @see CosmosPagedFluxOptions\n+ * @see FeedResponse\n+ */\n+public class CosmosContinuablePagedFlux<T> extends ContinuablePagedFlux<String, T, FeedResponse<T>> {\n+\n+    private final Function<CosmosPagedFluxOptions, Flux<FeedResponse<T>>> optionsFluxFunction;\n+\n+    CosmosContinuablePagedFlux(Function<CosmosPagedFluxOptions, Flux<FeedResponse<T>>> optionsFluxFunction) {\n+        this.optionsFluxFunction = optionsFluxFunction;\n+    }\n+\n+    @Override\n+    public Flux<FeedResponse<T>> byPage() {\n+        CosmosPagedFluxOptions cosmosPagedFluxOptions = new CosmosPagedFluxOptions();\n+\n+        return this.optionsFluxFunction.apply(cosmosPagedFluxOptions);\n+    }\n+\n+    @Override\n+    public Flux<FeedResponse<T>> byPage(String continuationToken) {\n+        CosmosPagedFluxOptions cosmosPagedFluxOptions = new CosmosPagedFluxOptions();\n+        cosmosPagedFluxOptions.setRequestContinuation(continuationToken);\n+\n+        return this.optionsFluxFunction.apply(cosmosPagedFluxOptions);\n+    }\n+\n+    @Override\n+    public Flux<FeedResponse<T>> byPage(int preferredPageSize) {\n+        CosmosPagedFluxOptions cosmosPagedFluxOptions = new CosmosPagedFluxOptions();\n+        cosmosPagedFluxOptions.setMaxItemCount(preferredPageSize);\n+\n+        return this.optionsFluxFunction.apply(cosmosPagedFluxOptions);\n+    }\n+\n+    @Override\n+    public Flux<FeedResponse<T>> byPage(String continuationToken, int preferredPageSize) {\n+        CosmosPagedFluxOptions cosmosPagedFluxOptions = new CosmosPagedFluxOptions();\n+        cosmosPagedFluxOptions.setRequestContinuation(continuationToken);\n+        cosmosPagedFluxOptions.setMaxItemCount(preferredPageSize);\n+\n+        return this.optionsFluxFunction.apply(cosmosPagedFluxOptions);\n+    }\n+\n+    /**\n+     * Subscribe to consume all items of type {@code T} in the sequence respectively.\n+     * This is recommended for most common scenarios. This will seamlessly fetch next\n+     * page when required and provide with a {@link Flux} of items.\n+     *\n+     * @param coreSubscriber The subscriber for this {@link CosmosContinuablePagedFlux}\n+     */\n+    @Override\n+    public void subscribe(CoreSubscriber<? super T> coreSubscriber) {\n+        Flux<FeedResponse<T>> pagedResponse = this.byPage();\n+        pagedResponse.flatMap(tFeedResponse -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32a8539420af4d992fc2f3dd7d4920ee1446e907"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNDcwMjU4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7839#pullrequestreview-352470258", "createdAt": "2020-02-03T18:34:27Z", "commit": {"oid": "32a8539420af4d992fc2f3dd7d4920ee1446e907"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODozNDoyOFrOFk7ibQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODozNDoyOFrOFk7ibQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2ODUyNQ==", "bodyText": "I only see this is used in the implementation of CosmosContinuablePagedFlux but not exposed in the public surface area\nas it is in com.azure.cosmos is it used in the public surface area?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7839#discussion_r374268525", "createdAt": "2020-02-03T18:34:28Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosPagedFluxOptions.java", "diffHunk": "@@ -0,0 +1,63 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+/**\n+ * Specifies paging options for Cosmos Paged Flux implementation.\n+ * @see CosmosContinuablePagedFlux\n+ */\n+public class CosmosPagedFluxOptions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32a8539420af4d992fc2f3dd7d4920ee1446e907"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e4fb2d3cc9328710b855eba5d4476783a2535bd", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8e4fb2d3cc9328710b855eba5d4476783a2535bd", "committedDate": "2020-02-03T20:12:57Z", "message": "Moved azure-core dependency to parent pom and used same version in azure-cosmos, benchmark and examples pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a252830a15ab284f918949319edaf8f3e2ad52f", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9a252830a15ab284f918949319edaf8f3e2ad52f", "committedDate": "2020-02-03T20:27:24Z", "message": "Moved CosmosPagedFluxOptions to implementation package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "815b30864c83277bb4599d4475b36098ec9a3906", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/815b30864c83277bb4599d4475b36098ec9a3906", "committedDate": "2020-02-04T02:09:44Z", "message": "Added back pressure tests for CosmosContinuablePagedFlux subscribe call"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMTUxMTgz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7839#pullrequestreview-353151183", "createdAt": "2020-02-04T17:10:17Z", "commit": {"oid": "32a8539420af4d992fc2f3dd7d4920ee1446e907"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzoxMDoxN1rOFlcRDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzoxMDoxN1rOFlcRDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwNDc1MQ==", "bodyText": "This is still in the public package.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7839#discussion_r374804751", "createdAt": "2020-02-04T17:10:17Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosPagedFluxOptions.java", "diffHunk": "@@ -0,0 +1,63 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+/**\n+ * Specifies paging options for Cosmos Paged Flux implementation.\n+ * @see CosmosContinuablePagedFlux\n+ */\n+public class CosmosPagedFluxOptions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2ODUyNQ=="}, "originalCommit": {"oid": "32a8539420af4d992fc2f3dd7d4920ee1446e907"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b838224b658f310e1f8278123d2e8788c93226b", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1b838224b658f310e1f8278123d2e8788c93226b", "committedDate": "2020-02-04T18:13:17Z", "message": "Merged latest feature/cosmos/v4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79439359dba3e7f6e8cc88dc5fc09c983dc0d5aa", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/79439359dba3e7f6e8cc88dc5fc09c983dc0d5aa", "committedDate": "2020-02-04T20:32:36Z", "message": "Updated queryItems sync API to return IterableStream"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2545, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}