{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0NzM4MjE3", "number": 10310, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjozMDo1MFrODysrIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjowMzowMFrODyvQxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDg3MzMwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/FlatteningDeserializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjozMDo1MFrOGG5dIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzowMToxM1rOGHV8lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NTk4Ng==", "bodyText": "Given this is in a for loop could the failing if checks be inverted and continue? It'll flatten the indentation level and should me this easier to read.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10310#discussion_r409885986", "createdAt": "2020-04-16T22:30:50Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/FlatteningDeserializer.java", "diffHunk": "@@ -65,58 +68,185 @@ public static SimpleModule getModule(final ObjectMapper mapper) {\n         SimpleModule module = new SimpleModule();\n         module.setDeserializerModifier(new BeanDeserializerModifier() {\n             @Override\n-            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config, BeanDescription beanDesc,\n+            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config,\n+                                                          BeanDescription beanDesc,\n                                                           JsonDeserializer<?> deserializer) {\n-                if (beanDesc.getBeanClass().getAnnotation(JsonFlatten.class) != null) {\n+                if (BeanDeserializer.class.isAssignableFrom(deserializer.getClass())) {\n+                    // Register 'FlatteningDeserializer' for complex type so that 'deserializeWithType'\n+                    // will get called for complex types and it can analyze typeId discriminator.\n                     return new FlatteningDeserializer(beanDesc.getBeanClass(), deserializer, mapper);\n+                } else {\n+                    return deserializer;\n                 }\n-                return deserializer;\n             }\n         });\n         return module;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n-    public Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n-        JsonNode root = mapper.readTree(jp);\n+    public Object deserializeWithType(JsonParser jp,\n+                                      DeserializationContext cxt,\n+                                      TypeDeserializer tDeserializer) throws IOException {\n+        // This method will be called from Jackson for each \"Json object with TypeId\" as it\n+        // process the input data. This enable us to pre-process then give it to the next\n+        // deserializer in the Jackson pipeline.\n+        //\n+        // The parameter 'jp' is the reader to read \"Json object with TypeId\"\n+        //\n+        JsonNode currentJsonNode = mapper.readTree(jp);\n         final Class<?> tClass = this.defaultDeserializer.handledType();\n         for (Class<?> c : TypeUtil.getAllClasses(tClass)) {\n-            // Ignore checks for Object type.\n             if (c.isAssignableFrom(Object.class)) {\n                 continue;\n-            }\n-            for (Field field : c.getDeclaredFields()) {\n-                JsonNode node = root;\n-                JsonProperty property = field.getAnnotation(JsonProperty.class);\n-                if (property != null) {\n-                    String value = property.value();\n-                    if (value.matches(\".+[^\\\\\\\\]\\\\..+\")) {\n-                        String[] values = value.split(\"((?<!\\\\\\\\))\\\\.\");\n-                        for (String val : values) {\n-                            val = val.replace(\"\\\\.\", \".\");\n-                            node = node.get(val);\n-                            if (node == null) {\n-                                break;\n-                            }\n-                        }\n-                        // If additional properties have a conflicting key, escape the additional property's key\n-                        if (root.has(value)) {\n-                            String escapedValue = value.replace(\".\", \"\\\\.\");\n-                            ((ObjectNode) root).set(escapedValue, root.get(value));\n+            } else {\n+                final JsonTypeInfo typeInfo = c.getAnnotation(com.fasterxml.jackson.annotation.JsonTypeInfo.class);\n+                if (typeInfo != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f08fd5315cbe2fb1f8b7c14a3c30a01b64a36b2"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1Mjc4OQ==", "bodyText": "cool, yes we can invert this and make more readable.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10310#discussion_r410352789", "createdAt": "2020-04-17T17:01:13Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/FlatteningDeserializer.java", "diffHunk": "@@ -65,58 +68,185 @@ public static SimpleModule getModule(final ObjectMapper mapper) {\n         SimpleModule module = new SimpleModule();\n         module.setDeserializerModifier(new BeanDeserializerModifier() {\n             @Override\n-            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config, BeanDescription beanDesc,\n+            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config,\n+                                                          BeanDescription beanDesc,\n                                                           JsonDeserializer<?> deserializer) {\n-                if (beanDesc.getBeanClass().getAnnotation(JsonFlatten.class) != null) {\n+                if (BeanDeserializer.class.isAssignableFrom(deserializer.getClass())) {\n+                    // Register 'FlatteningDeserializer' for complex type so that 'deserializeWithType'\n+                    // will get called for complex types and it can analyze typeId discriminator.\n                     return new FlatteningDeserializer(beanDesc.getBeanClass(), deserializer, mapper);\n+                } else {\n+                    return deserializer;\n                 }\n-                return deserializer;\n             }\n         });\n         return module;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n-    public Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n-        JsonNode root = mapper.readTree(jp);\n+    public Object deserializeWithType(JsonParser jp,\n+                                      DeserializationContext cxt,\n+                                      TypeDeserializer tDeserializer) throws IOException {\n+        // This method will be called from Jackson for each \"Json object with TypeId\" as it\n+        // process the input data. This enable us to pre-process then give it to the next\n+        // deserializer in the Jackson pipeline.\n+        //\n+        // The parameter 'jp' is the reader to read \"Json object with TypeId\"\n+        //\n+        JsonNode currentJsonNode = mapper.readTree(jp);\n         final Class<?> tClass = this.defaultDeserializer.handledType();\n         for (Class<?> c : TypeUtil.getAllClasses(tClass)) {\n-            // Ignore checks for Object type.\n             if (c.isAssignableFrom(Object.class)) {\n                 continue;\n-            }\n-            for (Field field : c.getDeclaredFields()) {\n-                JsonNode node = root;\n-                JsonProperty property = field.getAnnotation(JsonProperty.class);\n-                if (property != null) {\n-                    String value = property.value();\n-                    if (value.matches(\".+[^\\\\\\\\]\\\\..+\")) {\n-                        String[] values = value.split(\"((?<!\\\\\\\\))\\\\.\");\n-                        for (String val : values) {\n-                            val = val.replace(\"\\\\.\", \".\");\n-                            node = node.get(val);\n-                            if (node == null) {\n-                                break;\n-                            }\n-                        }\n-                        // If additional properties have a conflicting key, escape the additional property's key\n-                        if (root.has(value)) {\n-                            String escapedValue = value.replace(\".\", \"\\\\.\");\n-                            ((ObjectNode) root).set(escapedValue, root.get(value));\n+            } else {\n+                final JsonTypeInfo typeInfo = c.getAnnotation(com.fasterxml.jackson.annotation.JsonTypeInfo.class);\n+                if (typeInfo != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NTk4Ng=="}, "originalCommit": {"oid": "9f08fd5315cbe2fb1f8b7c14a3c30a01b64a36b2"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTAyNTU4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/FlatteningDeserializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMzozNjo1MlrOGG62tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo1Nzo1OVrOGHV1rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwODkxNg==", "bodyText": "Should we just cast this to ObjectNode ahead of time so we don't need to cast all the time later in the method?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10310#discussion_r409908916", "createdAt": "2020-04-16T23:36:52Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/FlatteningDeserializer.java", "diffHunk": "@@ -65,58 +68,185 @@ public static SimpleModule getModule(final ObjectMapper mapper) {\n         SimpleModule module = new SimpleModule();\n         module.setDeserializerModifier(new BeanDeserializerModifier() {\n             @Override\n-            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config, BeanDescription beanDesc,\n+            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config,\n+                                                          BeanDescription beanDesc,\n                                                           JsonDeserializer<?> deserializer) {\n-                if (beanDesc.getBeanClass().getAnnotation(JsonFlatten.class) != null) {\n+                if (BeanDeserializer.class.isAssignableFrom(deserializer.getClass())) {\n+                    // Register 'FlatteningDeserializer' for complex type so that 'deserializeWithType'\n+                    // will get called for complex types and it can analyze typeId discriminator.\n                     return new FlatteningDeserializer(beanDesc.getBeanClass(), deserializer, mapper);\n+                } else {\n+                    return deserializer;\n                 }\n-                return deserializer;\n             }\n         });\n         return module;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n-    public Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n-        JsonNode root = mapper.readTree(jp);\n+    public Object deserializeWithType(JsonParser jp,\n+                                      DeserializationContext cxt,\n+                                      TypeDeserializer tDeserializer) throws IOException {\n+        // This method will be called from Jackson for each \"Json object with TypeId\" as it\n+        // process the input data. This enable us to pre-process then give it to the next\n+        // deserializer in the Jackson pipeline.\n+        //\n+        // The parameter 'jp' is the reader to read \"Json object with TypeId\"\n+        //\n+        JsonNode currentJsonNode = mapper.readTree(jp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f08fd5315cbe2fb1f8b7c14a3c30a01b64a36b2"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1MTAyMw==", "bodyText": "Please see the below comment on upcasting based on the presence of jsonProperty, similar constraint applied here but based on the presence of JsonTypeInfo.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10310#discussion_r410351023", "createdAt": "2020-04-17T16:57:59Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/FlatteningDeserializer.java", "diffHunk": "@@ -65,58 +68,185 @@ public static SimpleModule getModule(final ObjectMapper mapper) {\n         SimpleModule module = new SimpleModule();\n         module.setDeserializerModifier(new BeanDeserializerModifier() {\n             @Override\n-            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config, BeanDescription beanDesc,\n+            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config,\n+                                                          BeanDescription beanDesc,\n                                                           JsonDeserializer<?> deserializer) {\n-                if (beanDesc.getBeanClass().getAnnotation(JsonFlatten.class) != null) {\n+                if (BeanDeserializer.class.isAssignableFrom(deserializer.getClass())) {\n+                    // Register 'FlatteningDeserializer' for complex type so that 'deserializeWithType'\n+                    // will get called for complex types and it can analyze typeId discriminator.\n                     return new FlatteningDeserializer(beanDesc.getBeanClass(), deserializer, mapper);\n+                } else {\n+                    return deserializer;\n                 }\n-                return deserializer;\n             }\n         });\n         return module;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n-    public Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n-        JsonNode root = mapper.readTree(jp);\n+    public Object deserializeWithType(JsonParser jp,\n+                                      DeserializationContext cxt,\n+                                      TypeDeserializer tDeserializer) throws IOException {\n+        // This method will be called from Jackson for each \"Json object with TypeId\" as it\n+        // process the input data. This enable us to pre-process then give it to the next\n+        // deserializer in the Jackson pipeline.\n+        //\n+        // The parameter 'jp' is the reader to read \"Json object with TypeId\"\n+        //\n+        JsonNode currentJsonNode = mapper.readTree(jp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwODkxNg=="}, "originalCommit": {"oid": "9f08fd5315cbe2fb1f8b7c14a3c30a01b64a36b2"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTAzMjU2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/FlatteningDeserializer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMzo0MDoxNFrOGG666Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzowNDozM1rOGHWC1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwOTk5Mw==", "bodyText": "Should we just use ObjectNode?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10310#discussion_r409909993", "createdAt": "2020-04-16T23:40:14Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/FlatteningDeserializer.java", "diffHunk": "@@ -65,58 +68,185 @@ public static SimpleModule getModule(final ObjectMapper mapper) {\n         SimpleModule module = new SimpleModule();\n         module.setDeserializerModifier(new BeanDeserializerModifier() {\n             @Override\n-            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config, BeanDescription beanDesc,\n+            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config,\n+                                                          BeanDescription beanDesc,\n                                                           JsonDeserializer<?> deserializer) {\n-                if (beanDesc.getBeanClass().getAnnotation(JsonFlatten.class) != null) {\n+                if (BeanDeserializer.class.isAssignableFrom(deserializer.getClass())) {\n+                    // Register 'FlatteningDeserializer' for complex type so that 'deserializeWithType'\n+                    // will get called for complex types and it can analyze typeId discriminator.\n                     return new FlatteningDeserializer(beanDesc.getBeanClass(), deserializer, mapper);\n+                } else {\n+                    return deserializer;\n                 }\n-                return deserializer;\n             }\n         });\n         return module;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n-    public Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n-        JsonNode root = mapper.readTree(jp);\n+    public Object deserializeWithType(JsonParser jp,\n+                                      DeserializationContext cxt,\n+                                      TypeDeserializer tDeserializer) throws IOException {\n+        // This method will be called from Jackson for each \"Json object with TypeId\" as it\n+        // process the input data. This enable us to pre-process then give it to the next\n+        // deserializer in the Jackson pipeline.\n+        //\n+        // The parameter 'jp' is the reader to read \"Json object with TypeId\"\n+        //\n+        JsonNode currentJsonNode = mapper.readTree(jp);\n         final Class<?> tClass = this.defaultDeserializer.handledType();\n         for (Class<?> c : TypeUtil.getAllClasses(tClass)) {\n-            // Ignore checks for Object type.\n             if (c.isAssignableFrom(Object.class)) {\n                 continue;\n-            }\n-            for (Field field : c.getDeclaredFields()) {\n-                JsonNode node = root;\n-                JsonProperty property = field.getAnnotation(JsonProperty.class);\n-                if (property != null) {\n-                    String value = property.value();\n-                    if (value.matches(\".+[^\\\\\\\\]\\\\..+\")) {\n-                        String[] values = value.split(\"((?<!\\\\\\\\))\\\\.\");\n-                        for (String val : values) {\n-                            val = val.replace(\"\\\\.\", \".\");\n-                            node = node.get(val);\n-                            if (node == null) {\n-                                break;\n-                            }\n-                        }\n-                        // If additional properties have a conflicting key, escape the additional property's key\n-                        if (root.has(value)) {\n-                            String escapedValue = value.replace(\".\", \"\\\\.\");\n-                            ((ObjectNode) root).set(escapedValue, root.get(value));\n+            } else {\n+                final JsonTypeInfo typeInfo = c.getAnnotation(com.fasterxml.jackson.annotation.JsonTypeInfo.class);\n+                if (typeInfo != null) {\n+                    String typeId = typeInfo.property();\n+                    if (containsDot(typeId)) {\n+                        final String typeIdOnWire = unescapeEscapedDots(typeId);\n+                        JsonNode typeIdValue = ((ObjectNode) currentJsonNode).remove(typeIdOnWire);\n+                        if (typeIdValue != null) {\n+                            ((ObjectNode) currentJsonNode).put(typeId, typeIdValue);\n                         }\n-                        ((ObjectNode) root).set(value, node);\n                     }\n                 }\n             }\n         }\n-        JsonParser parser = new JsonFactory().createParser(root.toString());\n-        parser.nextToken();\n-        return defaultDeserializer.deserialize(parser, ctxt);\n+        return tDeserializer.deserializeTypedFromAny(newJsonParserForNode(currentJsonNode), cxt);\n+    }\n+\n+    @Override\n+    public Object deserialize(JsonParser jp, DeserializationContext cxt) throws IOException {\n+        // This method will be called by Jackson for each \"Json object\" in the input wire stream\n+        // it is trying to deserialize.\n+        //\n+        // The parameter 'jp' is the reader to read \"Json object with TypeId\"\n+        //\n+        JsonNode currentJsonNode = mapper.readTree(jp);\n+        if (currentJsonNode.isNull()) {\n+            currentJsonNode = mapper.getNodeFactory().objectNode();\n+        }\n+        final Class<?> tClass = this.defaultDeserializer.handledType();\n+        for (Class<?> c : TypeUtil.getAllClasses(tClass)) {\n+            if (c.isAssignableFrom(Object.class)) {\n+                continue;\n+            } else {\n+                for (Field classField : c.getDeclaredFields()) {\n+                    handleFlatteningForField(classField, currentJsonNode);\n+                }\n+            }\n+        }\n+        return this.defaultDeserializer.deserialize(newJsonParserForNode(currentJsonNode), cxt);\n     }\n \n     @Override\n-    public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n-        ((ResolvableDeserializer) defaultDeserializer).resolve(ctxt);\n+    public void resolve(DeserializationContext cxt) throws JsonMappingException {\n+        ((ResolvableDeserializer) this.defaultDeserializer).resolve(cxt);\n+    }\n+\n+    /**\n+     * Given a field of a POJO class and JsonNode corresponds to the same POJO class,\n+     * check field's {@link JsonProperty} has flattening dots in it if so\n+     * flatten the nested child JsonNode corresponds to the field in the given JsonNode.\n+     *\n+     * @param classField the field in a POJO class\n+     * @param jsonNode the json node corresponds to POJO class that field belongs to\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    private static void handleFlatteningForField(Field classField, JsonNode jsonNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f08fd5315cbe2fb1f8b7c14a3c30a01b64a36b2"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM0OTQ3MA==", "bodyText": "I'm not sure we should do the upcasting ahead - w.r.t jsonProperty lookup and modification in this method, we're trying not to move away from the current logic (in released versions) to mutate ObjectNode. The ObjectNode is type extending from JsonNode and today we do the upcasting only if we find it has jsonProperty, but if we have to take ObjectNode here then we have to do the upcasting for all nodes from the caller.\nAn example is - In calling side, when we attempted to assign the value of readTree to ObjectNode, there happened a runtime cast exception where readTree returned NullNode which is not an ObjectNode but JsonNode, and auto-casting based on receiving variable type failed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10310#discussion_r410349470", "createdAt": "2020-04-17T16:55:07Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/FlatteningDeserializer.java", "diffHunk": "@@ -65,58 +68,185 @@ public static SimpleModule getModule(final ObjectMapper mapper) {\n         SimpleModule module = new SimpleModule();\n         module.setDeserializerModifier(new BeanDeserializerModifier() {\n             @Override\n-            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config, BeanDescription beanDesc,\n+            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config,\n+                                                          BeanDescription beanDesc,\n                                                           JsonDeserializer<?> deserializer) {\n-                if (beanDesc.getBeanClass().getAnnotation(JsonFlatten.class) != null) {\n+                if (BeanDeserializer.class.isAssignableFrom(deserializer.getClass())) {\n+                    // Register 'FlatteningDeserializer' for complex type so that 'deserializeWithType'\n+                    // will get called for complex types and it can analyze typeId discriminator.\n                     return new FlatteningDeserializer(beanDesc.getBeanClass(), deserializer, mapper);\n+                } else {\n+                    return deserializer;\n                 }\n-                return deserializer;\n             }\n         });\n         return module;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n-    public Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n-        JsonNode root = mapper.readTree(jp);\n+    public Object deserializeWithType(JsonParser jp,\n+                                      DeserializationContext cxt,\n+                                      TypeDeserializer tDeserializer) throws IOException {\n+        // This method will be called from Jackson for each \"Json object with TypeId\" as it\n+        // process the input data. This enable us to pre-process then give it to the next\n+        // deserializer in the Jackson pipeline.\n+        //\n+        // The parameter 'jp' is the reader to read \"Json object with TypeId\"\n+        //\n+        JsonNode currentJsonNode = mapper.readTree(jp);\n         final Class<?> tClass = this.defaultDeserializer.handledType();\n         for (Class<?> c : TypeUtil.getAllClasses(tClass)) {\n-            // Ignore checks for Object type.\n             if (c.isAssignableFrom(Object.class)) {\n                 continue;\n-            }\n-            for (Field field : c.getDeclaredFields()) {\n-                JsonNode node = root;\n-                JsonProperty property = field.getAnnotation(JsonProperty.class);\n-                if (property != null) {\n-                    String value = property.value();\n-                    if (value.matches(\".+[^\\\\\\\\]\\\\..+\")) {\n-                        String[] values = value.split(\"((?<!\\\\\\\\))\\\\.\");\n-                        for (String val : values) {\n-                            val = val.replace(\"\\\\.\", \".\");\n-                            node = node.get(val);\n-                            if (node == null) {\n-                                break;\n-                            }\n-                        }\n-                        // If additional properties have a conflicting key, escape the additional property's key\n-                        if (root.has(value)) {\n-                            String escapedValue = value.replace(\".\", \"\\\\.\");\n-                            ((ObjectNode) root).set(escapedValue, root.get(value));\n+            } else {\n+                final JsonTypeInfo typeInfo = c.getAnnotation(com.fasterxml.jackson.annotation.JsonTypeInfo.class);\n+                if (typeInfo != null) {\n+                    String typeId = typeInfo.property();\n+                    if (containsDot(typeId)) {\n+                        final String typeIdOnWire = unescapeEscapedDots(typeId);\n+                        JsonNode typeIdValue = ((ObjectNode) currentJsonNode).remove(typeIdOnWire);\n+                        if (typeIdValue != null) {\n+                            ((ObjectNode) currentJsonNode).put(typeId, typeIdValue);\n                         }\n-                        ((ObjectNode) root).set(value, node);\n                     }\n                 }\n             }\n         }\n-        JsonParser parser = new JsonFactory().createParser(root.toString());\n-        parser.nextToken();\n-        return defaultDeserializer.deserialize(parser, ctxt);\n+        return tDeserializer.deserializeTypedFromAny(newJsonParserForNode(currentJsonNode), cxt);\n+    }\n+\n+    @Override\n+    public Object deserialize(JsonParser jp, DeserializationContext cxt) throws IOException {\n+        // This method will be called by Jackson for each \"Json object\" in the input wire stream\n+        // it is trying to deserialize.\n+        //\n+        // The parameter 'jp' is the reader to read \"Json object with TypeId\"\n+        //\n+        JsonNode currentJsonNode = mapper.readTree(jp);\n+        if (currentJsonNode.isNull()) {\n+            currentJsonNode = mapper.getNodeFactory().objectNode();\n+        }\n+        final Class<?> tClass = this.defaultDeserializer.handledType();\n+        for (Class<?> c : TypeUtil.getAllClasses(tClass)) {\n+            if (c.isAssignableFrom(Object.class)) {\n+                continue;\n+            } else {\n+                for (Field classField : c.getDeclaredFields()) {\n+                    handleFlatteningForField(classField, currentJsonNode);\n+                }\n+            }\n+        }\n+        return this.defaultDeserializer.deserialize(newJsonParserForNode(currentJsonNode), cxt);\n     }\n \n     @Override\n-    public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n-        ((ResolvableDeserializer) defaultDeserializer).resolve(ctxt);\n+    public void resolve(DeserializationContext cxt) throws JsonMappingException {\n+        ((ResolvableDeserializer) this.defaultDeserializer).resolve(cxt);\n+    }\n+\n+    /**\n+     * Given a field of a POJO class and JsonNode corresponds to the same POJO class,\n+     * check field's {@link JsonProperty} has flattening dots in it if so\n+     * flatten the nested child JsonNode corresponds to the field in the given JsonNode.\n+     *\n+     * @param classField the field in a POJO class\n+     * @param jsonNode the json node corresponds to POJO class that field belongs to\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    private static void handleFlatteningForField(Field classField, JsonNode jsonNode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwOTk5Mw=="}, "originalCommit": {"oid": "9f08fd5315cbe2fb1f8b7c14a3c30a01b64a36b2"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1NDM4OA==", "bodyText": "For reference: upcasting in released versions here, see line-91  where we do check for annotation presence before the upcast, the same pattern followed in this PR.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10310#discussion_r410354388", "createdAt": "2020-04-17T17:04:33Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/FlatteningDeserializer.java", "diffHunk": "@@ -65,58 +68,185 @@ public static SimpleModule getModule(final ObjectMapper mapper) {\n         SimpleModule module = new SimpleModule();\n         module.setDeserializerModifier(new BeanDeserializerModifier() {\n             @Override\n-            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config, BeanDescription beanDesc,\n+            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config,\n+                                                          BeanDescription beanDesc,\n                                                           JsonDeserializer<?> deserializer) {\n-                if (beanDesc.getBeanClass().getAnnotation(JsonFlatten.class) != null) {\n+                if (BeanDeserializer.class.isAssignableFrom(deserializer.getClass())) {\n+                    // Register 'FlatteningDeserializer' for complex type so that 'deserializeWithType'\n+                    // will get called for complex types and it can analyze typeId discriminator.\n                     return new FlatteningDeserializer(beanDesc.getBeanClass(), deserializer, mapper);\n+                } else {\n+                    return deserializer;\n                 }\n-                return deserializer;\n             }\n         });\n         return module;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n-    public Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n-        JsonNode root = mapper.readTree(jp);\n+    public Object deserializeWithType(JsonParser jp,\n+                                      DeserializationContext cxt,\n+                                      TypeDeserializer tDeserializer) throws IOException {\n+        // This method will be called from Jackson for each \"Json object with TypeId\" as it\n+        // process the input data. This enable us to pre-process then give it to the next\n+        // deserializer in the Jackson pipeline.\n+        //\n+        // The parameter 'jp' is the reader to read \"Json object with TypeId\"\n+        //\n+        JsonNode currentJsonNode = mapper.readTree(jp);\n         final Class<?> tClass = this.defaultDeserializer.handledType();\n         for (Class<?> c : TypeUtil.getAllClasses(tClass)) {\n-            // Ignore checks for Object type.\n             if (c.isAssignableFrom(Object.class)) {\n                 continue;\n-            }\n-            for (Field field : c.getDeclaredFields()) {\n-                JsonNode node = root;\n-                JsonProperty property = field.getAnnotation(JsonProperty.class);\n-                if (property != null) {\n-                    String value = property.value();\n-                    if (value.matches(\".+[^\\\\\\\\]\\\\..+\")) {\n-                        String[] values = value.split(\"((?<!\\\\\\\\))\\\\.\");\n-                        for (String val : values) {\n-                            val = val.replace(\"\\\\.\", \".\");\n-                            node = node.get(val);\n-                            if (node == null) {\n-                                break;\n-                            }\n-                        }\n-                        // If additional properties have a conflicting key, escape the additional property's key\n-                        if (root.has(value)) {\n-                            String escapedValue = value.replace(\".\", \"\\\\.\");\n-                            ((ObjectNode) root).set(escapedValue, root.get(value));\n+            } else {\n+                final JsonTypeInfo typeInfo = c.getAnnotation(com.fasterxml.jackson.annotation.JsonTypeInfo.class);\n+                if (typeInfo != null) {\n+                    String typeId = typeInfo.property();\n+                    if (containsDot(typeId)) {\n+                        final String typeIdOnWire = unescapeEscapedDots(typeId);\n+                        JsonNode typeIdValue = ((ObjectNode) currentJsonNode).remove(typeIdOnWire);\n+                        if (typeIdValue != null) {\n+                            ((ObjectNode) currentJsonNode).put(typeId, typeIdValue);\n                         }\n-                        ((ObjectNode) root).set(value, node);\n                     }\n                 }\n             }\n         }\n-        JsonParser parser = new JsonFactory().createParser(root.toString());\n-        parser.nextToken();\n-        return defaultDeserializer.deserialize(parser, ctxt);\n+        return tDeserializer.deserializeTypedFromAny(newJsonParserForNode(currentJsonNode), cxt);\n+    }\n+\n+    @Override\n+    public Object deserialize(JsonParser jp, DeserializationContext cxt) throws IOException {\n+        // This method will be called by Jackson for each \"Json object\" in the input wire stream\n+        // it is trying to deserialize.\n+        //\n+        // The parameter 'jp' is the reader to read \"Json object with TypeId\"\n+        //\n+        JsonNode currentJsonNode = mapper.readTree(jp);\n+        if (currentJsonNode.isNull()) {\n+            currentJsonNode = mapper.getNodeFactory().objectNode();\n+        }\n+        final Class<?> tClass = this.defaultDeserializer.handledType();\n+        for (Class<?> c : TypeUtil.getAllClasses(tClass)) {\n+            if (c.isAssignableFrom(Object.class)) {\n+                continue;\n+            } else {\n+                for (Field classField : c.getDeclaredFields()) {\n+                    handleFlatteningForField(classField, currentJsonNode);\n+                }\n+            }\n+        }\n+        return this.defaultDeserializer.deserialize(newJsonParserForNode(currentJsonNode), cxt);\n     }\n \n     @Override\n-    public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n-        ((ResolvableDeserializer) defaultDeserializer).resolve(ctxt);\n+    public void resolve(DeserializationContext cxt) throws JsonMappingException {\n+        ((ResolvableDeserializer) this.defaultDeserializer).resolve(cxt);\n+    }\n+\n+    /**\n+     * Given a field of a POJO class and JsonNode corresponds to the same POJO class,\n+     * check field's {@link JsonProperty} has flattening dots in it if so\n+     * flatten the nested child JsonNode corresponds to the field in the given JsonNode.\n+     *\n+     * @param classField the field in a POJO class\n+     * @param jsonNode the json node corresponds to POJO class that field belongs to\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    private static void handleFlatteningForField(Field classField, JsonNode jsonNode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwOTk5Mw=="}, "originalCommit": {"oid": "9f08fd5315cbe2fb1f8b7c14a3c30a01b64a36b2"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTI5NzMzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/FlatteningDeserializer.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjowMzowMFrOGG9V7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMTozNzo1NVrOGHhhFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0OTY3OQ==", "bodyText": "I am not sure if opening it up is good or bad at this point.\nHere is a bug in track1 that kind of caused by open-up (not really, but previous class not under \"@JsonFlatten\" will not be affected, but now it will, and hence the bug)\nAzure/autorest-clientruntime-for-java#663\nAnd we got this one there\n#8372\nJust saying it could be risky if there is unfixed or even unknown bug.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10310#discussion_r409949679", "createdAt": "2020-04-17T02:03:00Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/FlatteningDeserializer.java", "diffHunk": "@@ -65,58 +68,185 @@ public static SimpleModule getModule(final ObjectMapper mapper) {\n         SimpleModule module = new SimpleModule();\n         module.setDeserializerModifier(new BeanDeserializerModifier() {\n             @Override\n-            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config, BeanDescription beanDesc,\n+            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config,\n+                                                          BeanDescription beanDesc,\n                                                           JsonDeserializer<?> deserializer) {\n-                if (beanDesc.getBeanClass().getAnnotation(JsonFlatten.class) != null) {\n+                if (BeanDeserializer.class.isAssignableFrom(deserializer.getClass())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f08fd5315cbe2fb1f8b7c14a3c30a01b64a36b2"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk3MDIzMQ==", "bodyText": "I think we're safe to do this in \"deserializer\" because in deserialization path we always check for JsonProperty value and if it has un-escaped dots then it means \"do flatten\", right?\n\\cc @jianghaolu - please chime if this interpretation in \"deserialization\" context is wrong", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10310#discussion_r409970231", "createdAt": "2020-04-17T03:22:54Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/FlatteningDeserializer.java", "diffHunk": "@@ -65,58 +68,185 @@ public static SimpleModule getModule(final ObjectMapper mapper) {\n         SimpleModule module = new SimpleModule();\n         module.setDeserializerModifier(new BeanDeserializerModifier() {\n             @Override\n-            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config, BeanDescription beanDesc,\n+            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config,\n+                                                          BeanDescription beanDesc,\n                                                           JsonDeserializer<?> deserializer) {\n-                if (beanDesc.getBeanClass().getAnnotation(JsonFlatten.class) != null) {\n+                if (BeanDeserializer.class.isAssignableFrom(deserializer.getClass())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0OTY3OQ=="}, "originalCommit": {"oid": "9f08fd5315cbe2fb1f8b7c14a3c30a01b64a36b2"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4MjUxMg==", "bodyText": "Sorry, I think I mean the same place in FlatteningSerializer (it is opened-up as well). Both bug referred is happening in serialization stage.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10310#discussion_r409982512", "createdAt": "2020-04-17T04:13:13Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/FlatteningDeserializer.java", "diffHunk": "@@ -65,58 +68,185 @@ public static SimpleModule getModule(final ObjectMapper mapper) {\n         SimpleModule module = new SimpleModule();\n         module.setDeserializerModifier(new BeanDeserializerModifier() {\n             @Override\n-            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config, BeanDescription beanDesc,\n+            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config,\n+                                                          BeanDescription beanDesc,\n                                                           JsonDeserializer<?> deserializer) {\n-                if (beanDesc.getBeanClass().getAnnotation(JsonFlatten.class) != null) {\n+                if (BeanDeserializer.class.isAssignableFrom(deserializer.getClass())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0OTY3OQ=="}, "originalCommit": {"oid": "9f08fd5315cbe2fb1f8b7c14a3c30a01b64a36b2"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM5ODY0Mw==", "bodyText": "Right, this PR is to address the discriminated type \"deserialization\" issue, #10217.\nThanks for the heads-up on the \"serialization\" path. Reverted the  FlatteningSerializer, so there won't be any change in the FlatteningSerializer and \"serialization\" logic stay as it is. This means the track1 issue with template \"serialization\" \"663\" will not happen when using azure-core. The \"8372\" is a different issue, and this PR does not address it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10310#discussion_r410398643", "createdAt": "2020-04-17T18:29:03Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/FlatteningDeserializer.java", "diffHunk": "@@ -65,58 +68,185 @@ public static SimpleModule getModule(final ObjectMapper mapper) {\n         SimpleModule module = new SimpleModule();\n         module.setDeserializerModifier(new BeanDeserializerModifier() {\n             @Override\n-            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config, BeanDescription beanDesc,\n+            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config,\n+                                                          BeanDescription beanDesc,\n                                                           JsonDeserializer<?> deserializer) {\n-                if (beanDesc.getBeanClass().getAnnotation(JsonFlatten.class) != null) {\n+                if (BeanDeserializer.class.isAssignableFrom(deserializer.getClass())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0OTY3OQ=="}, "originalCommit": {"oid": "9f08fd5315cbe2fb1f8b7c14a3c30a01b64a36b2"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1NTQxOA==", "bodyText": "@weidongxu-microsoft  - reg -  I had a chat with Jinaghao on AutoRest logic associated with escaping dots in JsonProperty. Such escaping will be done only if the properties in the parent type have to include non-escaped dots, this means we should limit the application of Deserializer only to JsonFlatten annotated types.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10310#discussion_r410455418", "createdAt": "2020-04-17T20:31:44Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/FlatteningDeserializer.java", "diffHunk": "@@ -65,58 +68,185 @@ public static SimpleModule getModule(final ObjectMapper mapper) {\n         SimpleModule module = new SimpleModule();\n         module.setDeserializerModifier(new BeanDeserializerModifier() {\n             @Override\n-            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config, BeanDescription beanDesc,\n+            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config,\n+                                                          BeanDescription beanDesc,\n                                                           JsonDeserializer<?> deserializer) {\n-                if (beanDesc.getBeanClass().getAnnotation(JsonFlatten.class) != null) {\n+                if (BeanDeserializer.class.isAssignableFrom(deserializer.getClass())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0OTY3OQ=="}, "originalCommit": {"oid": "9f08fd5315cbe2fb1f8b7c14a3c30a01b64a36b2"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDU0MjM1OQ==", "bodyText": "@anuchandy Got it, as well as the required \"@JsonFlatten\" on there classes as well.\nOne question, at least for the ARM template (which should not have any flatten in there), should we always use readValue to convert json to an Object (as LinkedHashMap), instead of using readTree to ObjectNode, so that if FlattenSerializer got involved, it could still escape the \".\" as it is now a Map with nested Maps?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10310#discussion_r410542359", "createdAt": "2020-04-18T01:37:55Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/FlatteningDeserializer.java", "diffHunk": "@@ -65,58 +68,185 @@ public static SimpleModule getModule(final ObjectMapper mapper) {\n         SimpleModule module = new SimpleModule();\n         module.setDeserializerModifier(new BeanDeserializerModifier() {\n             @Override\n-            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config, BeanDescription beanDesc,\n+            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config,\n+                                                          BeanDescription beanDesc,\n                                                           JsonDeserializer<?> deserializer) {\n-                if (beanDesc.getBeanClass().getAnnotation(JsonFlatten.class) != null) {\n+                if (BeanDeserializer.class.isAssignableFrom(deserializer.getClass())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0OTY3OQ=="}, "originalCommit": {"oid": "9f08fd5315cbe2fb1f8b7c14a3c30a01b64a36b2"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1815, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}