{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0MTk3NTAy", "number": 15044, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODo0OTowOFrOEiP9Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDoyNToxOVrOEiR4TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzQ4NTE5OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/util/QueryChargeHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODo0OTowOFrOHQBdNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOToyNDowNlrOHQCmcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU2MzEyNA==", "bodyText": "Could you add a note about what a query charge is?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15044#discussion_r486563124", "createdAt": "2020-09-10T18:49:08Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/util/QueryChargeHelper.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package com.azure.digitaltwins.core.util;\n+\n+import com.azure.core.http.rest.PagedResponse;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A helper to extract the query charge from the query response.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b79a1d44dbc368517a8ea1a77b9a392825245d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4MTg3NQ==", "bodyText": "sure will do", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15044#discussion_r486581875", "createdAt": "2020-09-10T19:24:06Z", "author": {"login": "vinagesh"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/util/QueryChargeHelper.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package com.azure.digitaltwins.core.util;\n+\n+import com.azure.core.http.rest.PagedResponse;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A helper to extract the query charge from the query response.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU2MzEyNA=="}, "originalCommit": {"oid": "46b79a1d44dbc368517a8ea1a77b9a392825245d"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzQ5MTUyOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/DigitalTwinsLifecycleAsyncSample.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODo1MTowMFrOHQBhOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOToyNTo1OVrOHQCqTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU2NDE1Mw==", "bodyText": "Are IOExceptions actually thrown? I don't see any of our client methods declaring it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15044#discussion_r486564153", "createdAt": "2020-09-10T18:51:00Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/DigitalTwinsLifecycleAsyncSample.java", "diffHunk": "@@ -333,4 +332,48 @@ public static void connectTwinsTogether() throws IOException, InterruptedExcepti\n         // Wait until the latch count reaches zero, signifying that the async calls have completed successfully.\n         connectTwinsLatch.await(MAX_WAIT_TIME_ASYNC_OPERATIONS_IN_SECONDS, TimeUnit.SECONDS);\n     }\n+\n+    /**\n+     *\n+     * Queries for all the digital twins.\n+     * @throws IOException If an I/O error is thrown when accessing the starting file.\n+     * @throws InterruptedException If the current thread is interrupted while waiting to acquire latch.\n+     */\n+    public static void queryTwins() throws IOException, InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b79a1d44dbc368517a8ea1a77b9a392825245d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4Mjg2Mg==", "bodyText": "Nope. IOException is not needed for query. Will remove it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15044#discussion_r486582862", "createdAt": "2020-09-10T19:25:59Z", "author": {"login": "vinagesh"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/DigitalTwinsLifecycleAsyncSample.java", "diffHunk": "@@ -333,4 +332,48 @@ public static void connectTwinsTogether() throws IOException, InterruptedExcepti\n         // Wait until the latch count reaches zero, signifying that the async calls have completed successfully.\n         connectTwinsLatch.await(MAX_WAIT_TIME_ASYNC_OPERATIONS_IN_SECONDS, TimeUnit.SECONDS);\n     }\n+\n+    /**\n+     *\n+     * Queries for all the digital twins.\n+     * @throws IOException If an I/O error is thrown when accessing the starting file.\n+     * @throws InterruptedException If the current thread is interrupted while waiting to acquire latch.\n+     */\n+    public static void queryTwins() throws IOException, InterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU2NDE1Mw=="}, "originalCommit": {"oid": "46b79a1d44dbc368517a8ea1a77b9a392825245d"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Mzc4MDc3OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/util/QueryChargeHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDoyMDowM1rOHQETug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDoyMDowM1rOHQETug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwOTg1MA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15044#discussion_r486609850", "createdAt": "2020-09-10T20:20:03Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/util/QueryChargeHelper.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.azure.digitaltwins.core.util;\n+\n+import com.azure.core.http.rest.PagedResponse;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A helper to extract the query charge from the query response.\n+ * An Azure Digital Twins Query Unit (QU) is a unit of on-demand computation that's used to execute your Azure Digital Twins queries.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caa2538b00cff27fe795f2a1fc0ceed63588be14"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Mzc5NDg3OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/util/QueryChargeHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDoyNDowMlrOHQEb9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDozMDo1MFrOHQEqEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxMTk1Nw==", "bodyText": "should we return a primitive type float instead, with value 0? Or do you think that might be misleading?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15044#discussion_r486611957", "createdAt": "2020-09-10T20:24:02Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/util/QueryChargeHelper.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.azure.digitaltwins.core.util;\n+\n+import com.azure.core.http.rest.PagedResponse;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A helper to extract the query charge from the query response.\n+ * An Azure Digital Twins Query Unit (QU) is a unit of on-demand computation that's used to execute your Azure Digital Twins queries.\n+ */\n+public final class QueryChargeHelper {\n+    private static final String queryChargeHeader = \"query-charge\";\n+\n+    public static <T> Float getQueryCharge(PagedResponse<T> page) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caa2538b00cff27fe795f2a1fc0ceed63588be14"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxNTU3MA==", "bodyText": "I felt 0 would be misleading compared to null so did not use the primitive type.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15044#discussion_r486615570", "createdAt": "2020-09-10T20:30:50Z", "author": {"login": "vinagesh"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/util/QueryChargeHelper.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.azure.digitaltwins.core.util;\n+\n+import com.azure.core.http.rest.PagedResponse;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A helper to extract the query charge from the query response.\n+ * An Azure Digital Twins Query Unit (QU) is a unit of on-demand computation that's used to execute your Azure Digital Twins queries.\n+ */\n+public final class QueryChargeHelper {\n+    private static final String queryChargeHeader = \"query-charge\";\n+\n+    public static <T> Float getQueryCharge(PagedResponse<T> page) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxMTk1Nw=="}, "originalCommit": {"oid": "caa2538b00cff27fe795f2a1fc0ceed63588be14"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Mzc5Njc4OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/DigitalTwinsLifecycleAsyncSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDoyNDozMlrOHQEdBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDoyNDozMlrOHQEdBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxMjIzMQ==", "bodyText": "this \"throws\" comment can be removed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15044#discussion_r486612231", "createdAt": "2020-09-10T20:24:32Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/DigitalTwinsLifecycleAsyncSample.java", "diffHunk": "@@ -333,4 +332,48 @@ public static void connectTwinsTogether() throws IOException, InterruptedExcepti\n         // Wait until the latch count reaches zero, signifying that the async calls have completed successfully.\n         connectTwinsLatch.await(MAX_WAIT_TIME_ASYNC_OPERATIONS_IN_SECONDS, TimeUnit.SECONDS);\n     }\n+\n+    /**\n+     *\n+     * Queries for all the digital twins.\n+     * @throws IOException If an I/O error is thrown when accessing the starting file.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caa2538b00cff27fe795f2a1fc0ceed63588be14"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Mzc5OTgwOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/DigitalTwinsLifecycleAsyncSample.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDoyNToxOVrOHQEexQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDozMzoyNFrOHQEuyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxMjY3Nw==", "bodyText": "We've been using the ConsoleLogger helper class for printing console statements.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15044#discussion_r486612677", "createdAt": "2020-09-10T20:25:19Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/DigitalTwinsLifecycleAsyncSample.java", "diffHunk": "@@ -333,4 +332,48 @@ public static void connectTwinsTogether() throws IOException, InterruptedExcepti\n         // Wait until the latch count reaches zero, signifying that the async calls have completed successfully.\n         connectTwinsLatch.await(MAX_WAIT_TIME_ASYNC_OPERATIONS_IN_SECONDS, TimeUnit.SECONDS);\n     }\n+\n+    /**\n+     *\n+     * Queries for all the digital twins.\n+     * @throws IOException If an I/O error is thrown when accessing the starting file.\n+     * @throws InterruptedException If the current thread is interrupted while waiting to acquire latch.\n+     */\n+    public static void queryTwins() throws InterruptedException {\n+        System.out.println(\"QUERY DIGITAL TWINS\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caa2538b00cff27fe795f2a1fc0ceed63588be14"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxNTc3Mg==", "bodyText": "Are you sure? I say  System.out.println all across the file.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15044#discussion_r486615772", "createdAt": "2020-09-10T20:31:16Z", "author": {"login": "vinagesh"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/DigitalTwinsLifecycleAsyncSample.java", "diffHunk": "@@ -333,4 +332,48 @@ public static void connectTwinsTogether() throws IOException, InterruptedExcepti\n         // Wait until the latch count reaches zero, signifying that the async calls have completed successfully.\n         connectTwinsLatch.await(MAX_WAIT_TIME_ASYNC_OPERATIONS_IN_SECONDS, TimeUnit.SECONDS);\n     }\n+\n+    /**\n+     *\n+     * Queries for all the digital twins.\n+     * @throws IOException If an I/O error is thrown when accessing the starting file.\n+     * @throws InterruptedException If the current thread is interrupted while waiting to acquire latch.\n+     */\n+    public static void queryTwins() throws InterruptedException {\n+        System.out.println(\"QUERY DIGITAL TWINS\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxMjY3Nw=="}, "originalCommit": {"oid": "caa2538b00cff27fe795f2a1fc0ceed63588be14"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxNjczMA==", "bodyText": "That's weird, are you sure you have the latest code?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15044#discussion_r486616730", "createdAt": "2020-09-10T20:33:19Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/DigitalTwinsLifecycleAsyncSample.java", "diffHunk": "@@ -333,4 +332,48 @@ public static void connectTwinsTogether() throws IOException, InterruptedExcepti\n         // Wait until the latch count reaches zero, signifying that the async calls have completed successfully.\n         connectTwinsLatch.await(MAX_WAIT_TIME_ASYNC_OPERATIONS_IN_SECONDS, TimeUnit.SECONDS);\n     }\n+\n+    /**\n+     *\n+     * Queries for all the digital twins.\n+     * @throws IOException If an I/O error is thrown when accessing the starting file.\n+     * @throws InterruptedException If the current thread is interrupted while waiting to acquire latch.\n+     */\n+    public static void queryTwins() throws InterruptedException {\n+        System.out.println(\"QUERY DIGITAL TWINS\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxMjY3Nw=="}, "originalCommit": {"oid": "caa2538b00cff27fe795f2a1fc0ceed63588be14"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxNjc3Nw==", "bodyText": "Looks like it has changed after I rebased. Let me switch it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15044#discussion_r486616777", "createdAt": "2020-09-10T20:33:24Z", "author": {"login": "vinagesh"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/DigitalTwinsLifecycleAsyncSample.java", "diffHunk": "@@ -333,4 +332,48 @@ public static void connectTwinsTogether() throws IOException, InterruptedExcepti\n         // Wait until the latch count reaches zero, signifying that the async calls have completed successfully.\n         connectTwinsLatch.await(MAX_WAIT_TIME_ASYNC_OPERATIONS_IN_SECONDS, TimeUnit.SECONDS);\n     }\n+\n+    /**\n+     *\n+     * Queries for all the digital twins.\n+     * @throws IOException If an I/O error is thrown when accessing the starting file.\n+     * @throws InterruptedException If the current thread is interrupted while waiting to acquire latch.\n+     */\n+    public static void queryTwins() throws InterruptedException {\n+        System.out.println(\"QUERY DIGITAL TWINS\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxMjY3Nw=="}, "originalCommit": {"oid": "caa2538b00cff27fe795f2a1fc0ceed63588be14"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1174, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}