{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NDk1MzIz", "number": 10492, "title": "refactor mgmt rest client and integrate azure identity", "bodyText": "Fix Azure/azure-libraries-for-java#1111\nFix Azure/azure-libraries-for-java#1168\n\n refactor rest client\n integrate azure identity\n move auth file and related classes to test package\n resources - code changes, playback tests, living tests\n rest modules - code changes, playback tests, living tests\n for classes in package com.azure.management, delete the classes not required before merging this PR and move the other classes into expected location", "createdAt": "2020-04-24T11:28:21Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492", "merged": true, "mergeCommit": {"oid": "836349b4855714b41bf3d05a46963715ab9d65a5"}, "closed": true, "closedAt": "2020-04-28T06:13:40Z", "author": {"login": "xseeseesee"}, "timelineItems": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcatC4HgH2gAyNDA4NDk1MzIzOjJiN2JkN2ZkNGY4NjEwMDY1NjI5YTM2NjRkZjAyNmRiN2JiMzNlMzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcb9RPugH2gAyNDA4NDk1MzIzOjNjZjkwNDY1MjU0YTgyODMxYmNhNWNhYTc1OTU1MzUyODM1YjMxNjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2b7bd7fd4f8610065629a3664df026db7bb33e34", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2b7bd7fd4f8610065629a3664df026db7bb33e34", "committedDate": "2020-04-24T08:16:59Z", "message": "Refactor RestClient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "368f35706b09ced461ced72de053c1c7804b8763", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/368f35706b09ced461ced72de053c1c7804b8763", "committedDate": "2020-04-24T11:17:50Z", "message": "refactor http pipeline provider and fix javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNDQ3NTQz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#pullrequestreview-400447543", "createdAt": "2020-04-26T01:42:58Z", "commit": {"oid": "368f35706b09ced461ced72de053c1c7804b8763"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMTo0Mjo1OFrOGL9ASA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMjoyNToxMFrOGL9ZKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE4NzAxNg==", "bodyText": "Don't clone the global configuration. It need to be changed by user some times.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415187016", "createdAt": "2020-04-26T01:42:58Z", "author": {"login": "ChenTanyi"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/UserAgentPolicy.java", "diffHunk": "@@ -63,7 +63,7 @@ public UserAgentPolicy(HttpLogOptions httpLogOptions, Configuration configuratio\n         }\n \n         if (configuration == null) {\n-            this.configuration = Configuration.getGlobalConfiguration();\n+            this.configuration = Configuration.getGlobalConfiguration().clone();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "368f35706b09ced461ced72de053c1c7804b8763"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE4ODk5OQ==", "bodyText": "This needs to add policy.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415188999", "createdAt": "2020-04-26T01:56:23Z", "author": {"login": "ChenTanyi"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/arm/implementation/AzureConfigurableImpl.java", "diffHunk": "@@ -24,33 +32,46 @@\n  */\n public class AzureConfigurableImpl<T extends AzureConfigurable<T>>\n         implements AzureConfigurable<T> {\n-    protected RestClientBuilder restClientBuilder;\n+    private HttpClient httpClient;\n+    private HttpLogOptions httpLogOptions;\n+    private HttpLogDetailLevel httpLogDetailLevel;\n+    private List<HttpPipelinePolicy> policies;\n+    private List<String> scopes;\n+    private RetryPolicy retryPolicy;\n+    private Configuration configuration;\n+    private AzureEnvironment environment;\n \n     protected AzureConfigurableImpl() {\n-        this.restClientBuilder = new RestClientBuilder()\n-                .withSerializerAdapter(new AzureJacksonAdapter());\n+        policies = new ArrayList<>();\n+        scopes = new ArrayList<>();\n+        retryPolicy = new RetryPolicy();\n+        httpLogOptions = new HttpLogOptions().setLogLevel(HttpLogDetailLevel.NONE);\n+        environment = AzureEnvironment.AZURE;\n     }\n \n     @Override\n-    public T withLogOptions(HttpLogOptions level) {\n-        this.restClientBuilder = this.restClientBuilder.withHttpLogOptions(level);\n+    public T withLogOptions(HttpLogOptions httpLogOptions) {\n+        Objects.requireNonNull(httpLogOptions);\n+        this.httpLogOptions = httpLogOptions;\n         return (T) this;\n     }\n \n     @Override\n     public T withLogLevel(HttpLogDetailLevel logLevel) {\n-        this.restClientBuilder = this.restClientBuilder.withLogLevel(logLevel);\n+        Objects.requireNonNull(logLevel);\n+        this.httpLogOptions = httpLogOptions.setLogLevel(logLevel);\n         return (T) this;\n     }\n \n     @Override\n     public T withPolicy(HttpPipelinePolicy policy) {\n-        this.restClientBuilder = this.restClientBuilder.withPolicy(policy);\n+        Objects.requireNonNull(policy);\n+        policies.add(policy);\n         return (T) this;\n     }\n \n     @Override\n-    public T withAuxiliaryCredentials(AzureTokenCredential... tokens) {\n+    public T withAuxiliaryCredentials(TokenCredential... tokens) {\n         return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "368f35706b09ced461ced72de053c1c7804b8763"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE4OTI5NQ==", "bodyText": "Add Before retry policy provider and after retry policy provider. Meanwhile, add ReqeustIdPolicy and DatePolicy.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415189295", "createdAt": "2020-04-26T01:58:36Z", "author": {"login": "ChenTanyi"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/arm/implementation/AzureConfigurableImpl.java", "diffHunk": "@@ -92,21 +113,49 @@ public T withProxy(Proxy proxy) {\n         return null;\n     }\n \n-    protected RestClient buildRestClient(AzureTokenCredential credential, AzureEnvironment.Endpoint endpoint) {\n-        RestClient client = restClientBuilder\n-                .withBaseUrl(credential.getEnvironment(), endpoint)\n-                .withCredential(credential)\n-//                .withPolicy(new ProviderRegistrationPolicy())\n-//                .withPolicy(new ResourceManagerThrottlingPolicy())\n-                .buildClient();\n-        // TODO: Add proxy support\n-//        if (client.httpClient().proxy() != null) {\n-//            credentials.withProxy(client.httpClient().proxy());\n-//        }\n-        return client;\n+    @Override\n+    public T withScope(String scope) {\n+        Objects.requireNonNull(scope);\n+        this.scopes.add(scope);\n+        return (T) this;\n+    }\n+\n+    @Override\n+    public T withHttpClient(HttpClient httpClient) {\n+        Objects.requireNonNull(httpClient);\n+        this.httpClient = httpClient;\n+        return (T) this;\n+    }\n+\n+    @Override\n+    public T withConfiguration(Configuration configuration) {\n+        Objects.requireNonNull(configuration);\n+        this.configuration = configuration;\n+        return (T) this;\n+    }\n+\n+    @Override\n+    public T withEnvironment(AzureEnvironment environment) {\n+        Objects.requireNonNull(environment);\n+        this.environment = environment;\n+        return (T) this;\n+    }\n+\n+    protected HttpPipeline buildHttpPipeline(TokenCredential credential) {\n+        Objects.requireNonNull(credential);\n+\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+        policies.add(new UserAgentPolicy(httpLogOptions, configuration));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "368f35706b09ced461ced72de053c1c7804b8763"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE4OTU0Mw==", "bodyText": "Logging should be the last one. If we want user to see the network log.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415189543", "createdAt": "2020-04-26T02:00:23Z", "author": {"login": "ChenTanyi"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/arm/implementation/AzureConfigurableImpl.java", "diffHunk": "@@ -92,21 +113,49 @@ public T withProxy(Proxy proxy) {\n         return null;\n     }\n \n-    protected RestClient buildRestClient(AzureTokenCredential credential, AzureEnvironment.Endpoint endpoint) {\n-        RestClient client = restClientBuilder\n-                .withBaseUrl(credential.getEnvironment(), endpoint)\n-                .withCredential(credential)\n-//                .withPolicy(new ProviderRegistrationPolicy())\n-//                .withPolicy(new ResourceManagerThrottlingPolicy())\n-                .buildClient();\n-        // TODO: Add proxy support\n-//        if (client.httpClient().proxy() != null) {\n-//            credentials.withProxy(client.httpClient().proxy());\n-//        }\n-        return client;\n+    @Override\n+    public T withScope(String scope) {\n+        Objects.requireNonNull(scope);\n+        this.scopes.add(scope);\n+        return (T) this;\n+    }\n+\n+    @Override\n+    public T withHttpClient(HttpClient httpClient) {\n+        Objects.requireNonNull(httpClient);\n+        this.httpClient = httpClient;\n+        return (T) this;\n+    }\n+\n+    @Override\n+    public T withConfiguration(Configuration configuration) {\n+        Objects.requireNonNull(configuration);\n+        this.configuration = configuration;\n+        return (T) this;\n+    }\n+\n+    @Override\n+    public T withEnvironment(AzureEnvironment environment) {\n+        Objects.requireNonNull(environment);\n+        this.environment = environment;\n+        return (T) this;\n+    }\n+\n+    protected HttpPipeline buildHttpPipeline(TokenCredential credential) {\n+        Objects.requireNonNull(credential);\n+\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+        policies.add(new UserAgentPolicy(httpLogOptions, configuration));\n+\n+        List<HttpPipelinePolicy> retryPolicies = new ArrayList<>();\n+        retryPolicies.add(retryPolicy);\n+        retryPolicies.add(new AuthenticationPolicy(credential, environment, scopes()));\n+        retryPolicies.add(new HttpLoggingPolicy(httpLogOptions));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "368f35706b09ced461ced72de053c1c7804b8763"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE5MTIxMw==", "bodyText": "I think this todo could be removed, since the proxy is inside http client now.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415191213", "createdAt": "2020-04-26T02:10:55Z", "author": {"login": "ChenTanyi"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/policy/ProviderRegistrationPolicy.java", "diffHunk": "@@ -69,13 +67,8 @@ private boolean isResponseSuccessful(HttpResponse response) {\n                             if (cloudError != null && MISSING_SUBSCRIPTION_REGISTRATION.equals(cloudError.getCode())) {\n                                 String subscriptionId = ResourceUtils.extractFromResourceId(\n                                     request.getUrl().getPath(), \"subscriptions\");\n-                                RestClient restClient = new RestClientBuilder()\n-                                        .withBaseUrl(String.format(\"%s://%s\",\n-                                            request.getUrl().getProtocol(), request.getUrl().getHost()))\n-                                        .withCredential(credential)\n-                                        .withSerializerAdapter(jacksonAdapter).buildClient();\n                                 // TODO: add proxy in rest client", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "368f35706b09ced461ced72de053c1c7804b8763"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE5MTMzNw==", "bodyText": "Don't clone the global config.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415191337", "createdAt": "2020-04-26T02:11:23Z", "author": {"login": "ChenTanyi"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/profile/AzureProfile.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.management.resources.fluentcore.profile;\n+\n+import com.azure.core.management.AzureEnvironment;\n+import com.azure.core.util.Configuration;\n+\n+/**\n+ * Azure profile for client.\n+ */\n+public class AzureProfile {\n+\n+    private String tenantId;\n+    private String subscriptionId;\n+    private AzureEnvironment environment;\n+    private final Configuration configuration = Configuration.getGlobalConfiguration().clone();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "368f35706b09ced461ced72de053c1c7804b8763"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE5MTQ1MQ==", "bodyText": "Does it need withEnvironment?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415191451", "createdAt": "2020-04-26T02:12:17Z", "author": {"login": "ChenTanyi"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/profile/AzureProfile.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.management.resources.fluentcore.profile;\n+\n+import com.azure.core.management.AzureEnvironment;\n+import com.azure.core.util.Configuration;\n+\n+/**\n+ * Azure profile for client.\n+ */\n+public class AzureProfile {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "368f35706b09ced461ced72de053c1c7804b8763"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE5MjI0Mw==", "bodyText": "I think this name is little confused. You even add any retryPolicy in pipeline. Not sure we need such function or not.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415192243", "createdAt": "2020-04-26T02:17:36Z", "author": {"login": "ChenTanyi"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/utils/HttpPipelineProvider.java", "diffHunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.management.resources.fluentcore.utils;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.HttpPolicyProviders;\n+import com.azure.core.management.AzureEnvironment;\n+import com.azure.management.AuthenticationPolicy;\n+import com.azure.management.UserAgentPolicy;\n+import com.azure.management.resources.fluentcore.policy.ProviderRegistrationPolicy;\n+import com.azure.management.resources.fluentcore.policy.ResourceManagerThrottlingPolicy;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * A Http Pipeline Provider.\n+ */\n+public final class HttpPipelineProvider {\n+\n+    private HttpPipelineProvider() {\n+    }\n+\n+    /**\n+     * Creates http pipeline with token credential\n+     *\n+     * @param credential the token credential\n+     * @return the http pipeline\n+     */\n+    public static HttpPipeline buildHttpPipeline(TokenCredential credential) {\n+        // TODO: basic policies should be provided\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+        HttpLogOptions httpLogOptions = new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC);\n+        policies.add(new UserAgentPolicy(httpLogOptions, null));\n+\n+        List<HttpPipelinePolicy> retryPolicies = new ArrayList<>();\n+        retryPolicies.add(new ProviderRegistrationPolicy(credential));\n+        retryPolicies.add(new ResourceManagerThrottlingPolicy());\n+        retryPolicies.add(new AuthenticationPolicy(credential, AzureEnvironment.AZURE, null));\n+        retryPolicies.add(new HttpLoggingPolicy(httpLogOptions));\n+        return buildHttpPipeline(policies, retryPolicies, null);\n+    }\n+\n+    /**\n+     * Creates http pipeline with policies and http client.\n+     *\n+     * @param policies the policies not required in retry strategy\n+     * @param retryPolicies the policies required in retry strategy\n+     * @param httpClient the http client\n+     * @return the http pipeline\n+     */\n+    public static HttpPipeline buildHttpPipeline(\n+        List<HttpPipelinePolicy> policies,\n+        List<HttpPipelinePolicy> retryPolicies,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "368f35706b09ced461ced72de053c1c7804b8763"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE5MjYxMA==", "bodyText": "Most of user will use this simple authenticate, I think maybe AzureProfile is needed. Not sure whether they need to set tenantId or not.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415192610", "createdAt": "2020-04-26T02:19:49Z", "author": {"login": "ChenTanyi"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/implementation/ResourceManager.java", "diffHunk": "@@ -57,24 +55,19 @@\n      * @param credential the credentials to use\n      * @return the ResourceManager instance\n      */\n-    public static ResourceManager.Authenticated authenticate(AzureTokenCredential credential) {\n-        return new AuthenticatedImpl(new RestClientBuilder()\n-                .withBaseUrl(credential.getEnvironment(), AzureEnvironment.Endpoint.RESOURCE_MANAGER)\n-                .withCredential(credential)\n-                .withSerializerAdapter(new AzureJacksonAdapter())\n-                .withPolicy(new ProviderRegistrationPolicy(credential))\n-                .withPolicy(new ResourceManagerThrottlingPolicy())\n-                .buildClient());\n+    public static ResourceManager.Authenticated authenticate(TokenCredential credential) {\n+        return new AuthenticatedImpl(HttpPipelineProvider.buildHttpPipeline(credential),\n+            new AzureProfile(AzureEnvironment.AZURE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "368f35706b09ced461ced72de053c1c7804b8763"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE5MzM4Nw==", "bodyText": "I think pipeline builder is more clear", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415193387", "createdAt": "2020-04-26T02:25:10Z", "author": {"login": "ChenTanyi"}, "path": "sdk/resources/mgmt/src/test/java/com/azure/management/resources/core/TestBase.java", "diffHunk": "@@ -213,30 +240,39 @@ public void write(int b) throws IOException {\n                     throw new IllegalArgumentException(\"When running tests in record mode either 'AZURE_AUTH_LOCATION' or 'AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET and AZURE_SUBSCRIPTION_ID' needs to be set\");\n                 }\n \n-                credentials = new ApplicationTokenCredential(clientId, tenantId, clientSecret, AzureEnvironment.AZURE);\n-                credentials.defaultSubscriptionId(subscriptionId);\n+                credential = new ClientSecretCredentialBuilder()\n+                    .tenantId(tenantId)\n+                    .clientId(clientId)\n+                    .clientSecret(clientSecret)\n+                    .authorityHost(AzureEnvironment.AZURE.getActiveDirectoryEndpoint())\n+                    .build();\n+                profile = new AzureProfile(tenantId, subscriptionId, AzureEnvironment.AZURE);\n+\n             }\n-            RestClientBuilder builder = new RestClientBuilder()\n-                    .withBaseUrl(this.baseUri())\n-                    .withSerializerAdapter(new AzureJacksonAdapter())\n-                    .withCredential(credentials)\n-                    .withHttpClient(generateHttpClientWithProxy(null))\n-                    .withLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS)\n-                    .withPolicy(new ResourceGroupTaggingPolicy())\n-                    .withPolicy(new TimeoutPolicy(Duration.ofMinutes(1)))\n-                    .withPolicy(new CookiePolicy());\n+\n+            HttpLogOptions httpLogOptions = new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS);\n+            List<HttpPipelinePolicy> policies = new ArrayList<>();\n+            policies.add(new UserAgentPolicy(httpLogOptions, null));\n+            List<HttpPipelinePolicy> retryPolicies = new ArrayList<>();\n+            retryPolicies.add(new RetryPolicy());\n+            retryPolicies.add(new ResourceGroupTaggingPolicy());\n+            retryPolicies.add(new TimeoutPolicy(Duration.ofMinutes(1)));\n+            retryPolicies.add(new CookiePolicy());\n+            retryPolicies.add(new AuthenticationPolicy(credential, profile.environment(), null));\n+            retryPolicies.add(new HttpLoggingPolicy(httpLogOptions));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "368f35706b09ced461ced72de053c1c7804b8763"}, "originalPosition": 137}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f76c5205196d6dcc8901ea4925b75dca85137764", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f76c5205196d6dcc8901ea4925b75dca85137764", "committedDate": "2020-04-26T02:33:52Z", "message": "refactor GraphRbac"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "942fb7bebff6bb592386cff9adf4f437ff54e314", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/942fb7bebff6bb592386cff9adf4f437ff54e314", "committedDate": "2020-04-26T02:48:49Z", "message": "refactor msi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "490b34b7077b7ac4825d0fe1c0cbc98515477e64", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/490b34b7077b7ac4825d0fe1c0cbc98515477e64", "committedDate": "2020-04-26T02:58:35Z", "message": "refactor storage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "496ebf1c199fc8c7276dede0cba7eec609374294", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/496ebf1c199fc8c7276dede0cba7eec609374294", "committedDate": "2020-04-26T08:36:03Z", "message": "refactor network"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e116d140f6b65e5db626dd0d1078d24da6a312f", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5e116d140f6b65e5db626dd0d1078d24da6a312f", "committedDate": "2020-04-26T08:36:33Z", "message": "refactor monitor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aac49fb5651aff9d620f2dcdd5a73e99b14ce6e", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0aac49fb5651aff9d620f2dcdd5a73e99b14ce6e", "committedDate": "2020-04-26T08:37:05Z", "message": "refactor sql"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfdccb37aa9c8c2cb673fad26ccc48a2cfed0f72", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cfdccb37aa9c8c2cb673fad26ccc48a2cfed0f72", "committedDate": "2020-04-26T08:37:44Z", "message": "refactor sample"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b37201da5b03f461cb385196e7bdd451f81bfa98", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b37201da5b03f461cb385196e7bdd451f81bfa98", "committedDate": "2020-04-26T08:38:17Z", "message": "update resources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "122dbb62002fe67c913995af8957cbebe7eb9a9b", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/122dbb62002fe67c913995af8957cbebe7eb9a9b", "committedDate": "2020-04-26T08:39:02Z", "message": "refactor keyvault"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f39d583ed2533f879791e75adea53d0fc8d9011", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2f39d583ed2533f879791e75adea53d0fc8d9011", "committedDate": "2020-04-26T08:39:38Z", "message": "refactor compute"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86ebc0c6da12c32e3db7f1a8f06d7d5ed11c21cb", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/86ebc0c6da12c32e3db7f1a8f06d7d5ed11c21cb", "committedDate": "2020-04-26T08:40:27Z", "message": "refactor appservice"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80a04b02104e208e87b25fc18cae578749bbf71d", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/80a04b02104e208e87b25fc18cae578749bbf71d", "committedDate": "2020-04-26T08:40:57Z", "message": "refactor dns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02dfc8da29c4ff5a516452729d7410627d0482d8", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/02dfc8da29c4ff5a516452729d7410627d0482d8", "committedDate": "2020-04-26T08:41:38Z", "message": "refactor cosmos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60fe02dca1bec704325cf69f5ef87afa77568d00", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/60fe02dca1bec704325cf69f5ef87afa77568d00", "committedDate": "2020-04-26T08:42:28Z", "message": "refactor mgmt azure client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2202cc69ea5ac9ad4f4596a9f31201557d099b5e", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2202cc69ea5ac9ad4f4596a9f31201557d099b5e", "committedDate": "2020-04-26T08:43:09Z", "message": "refactor container service and container registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b4f4ba9ef59c3f3b4e90d7882d97ee7fdb8b021", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7b4f4ba9ef59c3f3b4e90d7882d97ee7fdb8b021", "committedDate": "2020-04-26T10:12:34Z", "message": "update http pipeline generation with envionment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNTAwMjA5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#pullrequestreview-400500209", "createdAt": "2020-04-26T12:42:53Z", "commit": {"oid": "7b4f4ba9ef59c3f3b4e90d7882d97ee7fdb8b021"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjo0Mjo1M1rOGMEBbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjo1MzozNlrOGMEJ7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwMTk5Nw==", "bodyText": "is this necessary?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415301997", "createdAt": "2020-04-26T12:42:53Z", "author": {"login": "yungezz"}, "path": "sdk/resources/mgmt/src/test/java/com/azure/management/resources/core/AuthFile.java", "diffHunk": "@@ -0,0 +1,227 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.management.resources.core;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.implementation.TypeUtil;\n+import com.azure.core.management.AzureEnvironment;\n+import com.azure.core.management.serializer.AzureJacksonAdapter;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+import com.azure.core.util.serializer.SerializerEncoding;\n+import com.azure.identity.ClientCertificateCredentialBuilder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b4f4ba9ef59c3f3b4e90d7882d97ee7fdb8b021"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwMjI0Ng==", "bodyText": "what's this?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415302246", "createdAt": "2020-04-26T12:44:12Z", "author": {"login": "yungezz"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/arm/AzureConfigurable.java", "diffHunk": "@@ -96,4 +99,28 @@\n      * @return the configurable object itself for chaining\n      */\n     T withProxy(Proxy proxy);\n+\n+    /**\n+     * Sets the credential scope.\n+     *\n+     * @param scope the credential scope\n+     * @return the configurable object itself for chaining\n+     */\n+    T withScope(String scope);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b4f4ba9ef59c3f3b4e90d7882d97ee7fdb8b021"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwMjg2NQ==", "bodyText": "what's scope used for", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415302865", "createdAt": "2020-04-26T12:47:05Z", "author": {"login": "yungezz"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/arm/implementation/AzureConfigurableImpl.java", "diffHunk": "@@ -92,21 +114,45 @@ public T withProxy(Proxy proxy) {\n         return null;\n     }\n \n-    protected RestClient buildRestClient(AzureTokenCredential credential, AzureEnvironment.Endpoint endpoint) {\n-        RestClient client = restClientBuilder\n-                .withBaseUrl(credential.getEnvironment(), endpoint)\n-                .withCredential(credential)\n-//                .withPolicy(new ProviderRegistrationPolicy())\n-//                .withPolicy(new ResourceManagerThrottlingPolicy())\n-                .buildClient();\n-        // TODO: Add proxy support\n-//        if (client.httpClient().proxy() != null) {\n-//            credentials.withProxy(client.httpClient().proxy());\n-//        }\n-        return client;\n+    @Override\n+    public T withScope(String scope) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b4f4ba9ef59c3f3b4e90d7882d97ee7fdb8b021"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwMzE1Mw==", "bodyText": "why resourcemanager use default subs, not profile.subsid?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415303153", "createdAt": "2020-04-26T12:48:28Z", "author": {"login": "yungezz"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/arm/implementation/ManagerBase.java", "diffHunk": "@@ -14,43 +16,52 @@\n \n     private ResourceManager resourceManager;\n     private final String subscriptionId;\n-    protected final RestClient restClient;\n+    private final AzureEnvironment environment;\n+    protected final HttpPipeline httpPipeline;\n     private SdkContext sdkContext;\n \n-    protected ManagerBase(RestClient restClient, String subscriptionId, SdkContext sdkContext) {\n-        this.restClient = restClient;\n-        if (restClient != null) {\n-            this.resourceManager = ResourceManager.authenticate(restClient)\n+    protected ManagerBase(HttpPipeline httpPipeline, AzureProfile profile, SdkContext sdkContext) {\n+        this.httpPipeline = httpPipeline;\n+        if (httpPipeline != null) {\n+            this.resourceManager = ResourceManager.authenticate(httpPipeline, profile)\n                     .withSdkContext(sdkContext)\n-                    .withSubscription(subscriptionId);\n+                    .withDefaultSubscription();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b4f4ba9ef59c3f3b4e90d7882d97ee7fdb8b021"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwMzI4OQ==", "bodyText": "what's this class used for? I think we don't need this anymore", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415303289", "createdAt": "2020-04-26T12:49:16Z", "author": {"login": "yungezz"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/policy/AuxiliaryAuthenticationPolicy.java", "diffHunk": "@@ -30,14 +31,17 @@\n     private static final String LINKED_AUTHORIZATION_FAILED = \"LinkedAuthorizationFailed\";\n     private static final String SCHEMA_FORMAT = \"Bearer %s\";\n \n-    private final AzureTokenCredential[] tokenCredentials;\n+    private final TokenCredential[] tokenCredentials;\n+    private final AzureEnvironment environment;\n \n     /**\n      * Initialize an auxiliary authentication policy with the list of AzureTokenCredentials.\n      *\n+     * @param environment the Azure environment\n      * @param credentials the AzureTokenCredentials list\n      */\n-    public AuxiliaryAuthenticationPolicy(AzureTokenCredential... credentials) {\n+    public AuxiliaryAuthenticationPolicy(AzureEnvironment environment, TokenCredential... credentials) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b4f4ba9ef59c3f3b4e90d7882d97ee7fdb8b021"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwMzQzNA==", "bodyText": "same as above, if profile, why defaultsubs? what's defaultsubs?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415303434", "createdAt": "2020-04-26T12:50:02Z", "author": {"login": "yungezz"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/policy/ProviderRegistrationPolicy.java", "diffHunk": "@@ -67,16 +69,9 @@ private boolean isResponseSuccessful(HttpResponse response) {\n                             }\n \n                             if (cloudError != null && MISSING_SUBSCRIPTION_REGISTRATION.equals(cloudError.getCode())) {\n-                                String subscriptionId = ResourceUtils.extractFromResourceId(\n-                                    request.getUrl().getPath(), \"subscriptions\");\n-                                RestClient restClient = new RestClientBuilder()\n-                                        .withBaseUrl(String.format(\"%s://%s\",\n-                                            request.getUrl().getProtocol(), request.getUrl().getHost()))\n-                                        .withCredential(credential)\n-                                        .withSerializerAdapter(jacksonAdapter).buildClient();\n                                 // TODO: add proxy in rest client\n-                                ResourceManager resourceManager = ResourceManager.authenticate(restClient)\n-                                        .withSubscription(subscriptionId);\n+                                ResourceManager resourceManager = ResourceManager.authenticate(credential, profile)\n+                                        .withDefaultSubscription();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b4f4ba9ef59c3f3b4e90d7882d97ee7fdb8b021"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNDA3OA==", "bodyText": "this file will be removed right?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415304078", "createdAt": "2020-04-26T12:53:06Z", "author": {"login": "yungezz"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/AzureTokenCredential.java", "diffHunk": "@@ -1,94 +1,94 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n-\n-package com.azure.management;\n-\n-import com.azure.core.credential.TokenCredential;\n-import com.azure.core.management.AzureEnvironment;\n-\n-import java.net.Proxy;\n-\n-/**\n- * AzureTokenCredential represents a credential object with access to Azure Resource management.\n- */\n-public abstract class AzureTokenCredential implements TokenCredential {\n-\n-    private final AzureEnvironment environment;\n-\n-    private final String domain;\n-\n-    private String defaultSubscription;\n-\n-    private Proxy proxy;\n-\n-    /**\n-     * Initializes a new instance of the AzureTokenCredential.\n-     *\n-     * @param environment the Azure environment to use\n-     * @param domain the tenant or domain the credential is authorized to\n-     */\n-    public AzureTokenCredential(AzureEnvironment environment, String domain) {\n-        this.environment = (environment == null) ? AzureEnvironment.AZURE : environment;\n-        this.domain = domain;\n-    }\n-\n-    /**\n-     * Set default subscription ID.\n-     *\n-     * @param subscriptionId the default subscription ID.\n-     * @return the credentials object itself.\n-     */\n-    public AzureTokenCredential defaultSubscriptionId(String subscriptionId) {\n-        this.defaultSubscription = subscriptionId;\n-        return this;\n-    }\n-\n-    /**\n-     * @param proxy the proxy being used for accessing Active Directory\n-     * @return the credential itself\n-     */\n-    public AzureTokenCredential proxy(Proxy proxy) {\n-        this.proxy = proxy;\n-        return this;\n-    }\n-\n-    /**\n-     * Get default scope of MSAL for ARM\n-     *\n-     * @return default scope in string\n-     */\n-    protected String getDefaultScope() {\n-        return this.getEnvironment().getResourceManagerEndpoint() + \"/.default\";\n-    }\n-\n-    /**\n-     * Override this method to provide the domain or tenant ID the token is valid in.\n-     *\n-     * @return the domain or tenant ID string\n-     */\n-    public String getDomain() {\n-        return domain;\n-    }\n-\n-    /**\n-     * @return the environment details the credential has access to.\n-     */\n-    public AzureEnvironment getEnvironment() {\n-        return environment;\n-    }\n-\n-    /**\n-     * @return The default subscription ID, if any\n-     */\n-    public String getDefaultSubscriptionId() {\n-        return defaultSubscription;\n-    }\n-\n-\n-    /**\n-     * @return the proxy being used for accessing Active Directory.\n-     */\n-    public Proxy getProxy() {\n-        return proxy;\n-    }\n-}\n+//", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b4f4ba9ef59c3f3b4e90d7882d97ee7fdb8b021"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNDE3Mg==", "bodyText": "this file will be removed right", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415304172", "createdAt": "2020-04-26T12:53:36Z", "author": {"login": "yungezz"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/ApplicationTokenCredential.java", "diffHunk": "@@ -1,140 +1,140 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n-\n-package com.azure.management;\n-\n-import com.azure.core.credential.AccessToken;\n-import com.azure.core.credential.SimpleTokenCache;\n-import com.azure.core.credential.TokenRequestContext;\n-import com.azure.core.management.AzureEnvironment;\n-import com.azure.identity.ClientSecretCredential;\n-import com.azure.identity.ClientSecretCredentialBuilder;\n-import reactor.core.publisher.Mono;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.List;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n-import java.util.function.Function;\n-\n-/**\n- * This class describes the credential for service principal.\n- */\n-public class ApplicationTokenCredential extends AzureTokenCredential {\n-\n-    private final ConcurrentMap<String, SimpleTokenCache> cache = new ConcurrentHashMap<>();\n-\n-    private final String clientId;\n-    private final String clientSecret;\n-    private final byte[] clientCertificate;\n-    private final String clientCertificatePassword;\n-    private final ClientSecretCredential clientSecretCredential;\n-\n-    /**\n-     * Initializes a new instance of the ApplicationTokenCredentials.\n-     *\n-     * @param clientId the active directory application client id. Also known as\n-     *                 Application Id which Identifies the application that is using the token.\n-     * @param domain the domain or tenant id containing this application.\n-     * @param secret the authentication secret for the application.\n-     * @param environment the Azure environment to authenticate with.\n-     *                    If null is provided, AzureEnvironment.AZURE will be used.\n-     */\n-    public ApplicationTokenCredential(String clientId, String domain, String secret, AzureEnvironment environment) {\n-        super(environment, domain);\n-        this.clientId = clientId;\n-        this.clientSecret = secret;\n-        this.clientCertificate = null;\n-        this.clientCertificatePassword = null;\n-        this.clientSecretCredential = new ClientSecretCredentialBuilder()\n-                .clientId(this.getClientId())\n-                .clientSecret(this.getClientSecret())\n-                .tenantId(getDomain())\n-                .build();\n-    }\n-\n-    /**\n-     * Initializes a new instance of the ApplicationTokenCredentials.\n-     *\n-     * @param clientId the active directory application client id. Also known as\n-     *                 Application Id which Identifies the application that is using the token.\n-     * @param domain the domain or tenant id containing this application.\n-     * @param certificate the PKCS12 certificate file content\n-     * @param password the password to the certificate file\n-     * @param environment the Azure environment to authenticate with.\n-     *                    If null is provided, AzureEnvironment.AZURE will be used.\n-     */\n-    public ApplicationTokenCredential(String clientId, String domain, byte[] certificate,\n-                                      String password, AzureEnvironment environment) {\n-        super(environment, domain);\n-        this.clientId = clientId;\n-        this.clientSecret = null;\n-        this.clientCertificate = certificate.clone();\n-        this.clientCertificatePassword = password;\n-        this.clientSecretCredential = null;\n-    }\n-\n-    /**\n-     * Initializes the credentials based on the provided credentials file.\n-     *\n-     * @param credentialFile A  file with credentials, using the standard Java properties format.\n-     * and the following keys:\n-     *     subscription=&lt;subscription-id&gt;\n-     *     tenant=&lt;tenant-id&gt;\n-     *     client=&lt;client-id&gt;\n-     *     key=&lt;client-key&gt;\n-     *     managementURI=&lt;management-URI&gt;\n-     *     baseURL=&lt;base-URL&gt;\n-     *     authURL=&lt;authentication-URL&gt;\n-     * or a JSON format and the following keys\n-     * {\n-     *     \"clientId\": \"&lt;client-id&gt;\",\n-     *     \"clientSecret\": \"&lt;client-key&gt;\",\n-     *     \"subscriptionId\": \"&lt;subscription-id&gt;\",\n-     *     \"tenantId\": \"&lt;tenant-id&gt;\",\n-     * }\n-     * and any custom endpoints listed in {@link AzureEnvironment}.\n-     *\n-     * @return The credentials based on the file.\n-     * @throws IOException exception thrown from file access errors.\n-     */\n-    public static ApplicationTokenCredential fromFile(File credentialFile) throws IOException {\n-        return AuthFile.parse(credentialFile).generateCredential();\n-    }\n-\n-    /**\n-     * Gets the active directory application client id. Also known as\n-     * Application Id which Identifies the application that is using the token.\n-     *\n-     * @return the active directory application client id.\n-     */\n-    public String getClientId() {\n-        return this.clientId;\n-    }\n-\n-    String getClientSecret() {\n-        return this.clientSecret;\n-    }\n-\n-    byte[] getClientCertificate() {\n-        return this.clientCertificate;\n-    }\n-\n-    String getClientCertificatePassword() {\n-        return this.clientCertificatePassword;\n-    }\n-\n-    @Override\n-    public Mono<AccessToken> getToken(TokenRequestContext request) {\n-        // TODO: Add client certificate token\n-        List<String> scopes = request.getScopes();\n-        String digest = String.join(\" \", scopes);\n-\n-        Function<String, SimpleTokenCache> computeSimpleTokenCache = key ->\n-                new SimpleTokenCache(() -> clientSecretCredential.getToken(request));\n-\n-        return Mono.just(cache.computeIfAbsent(digest, computeSimpleTokenCache))\n-                .flatMap(simpleTokenCache -> simpleTokenCache.getToken());\n-    }\n-}\n+//", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b4f4ba9ef59c3f3b4e90d7882d97ee7fdb8b021"}, "originalPosition": 141}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04d97d1f05230f358d764503ce77cc7ac3926215", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/04d97d1f05230f358d764503ce77cc7ac3926215", "committedDate": "2020-04-27T03:22:48Z", "message": "Merge branch 'master' into restclient-identity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b13d462321d9013834fd6c13f2b9359f55c109b6", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b13d462321d9013834fd6c13f2b9359f55c109b6", "committedDate": "2020-04-27T03:45:11Z", "message": "fix compile error after merging from master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b76f5e5eb04cd81b7e37d43dfdd2ed8ddb1f79c", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3b76f5e5eb04cd81b7e37d43dfdd2ed8ddb1f79c", "committedDate": "2020-04-27T04:22:47Z", "message": "fix errors catched in CI pipeline"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNjE2OTQ0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#pullrequestreview-400616944", "createdAt": "2020-04-27T04:21:02Z", "commit": {"oid": "04d97d1f05230f358d764503ce77cc7ac3926215"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNDoyMTowMlrOGMQD9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNDozNDo1OFrOGMQTsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ5OTI1NA==", "bodyText": "Maybe improve to either 1. document in javadoc that AzureEnvironment.AZURE can be used as azure global; 2. or an overloaded constructor\nPrefer Objects.requireNonNull", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415499254", "createdAt": "2020-04-27T04:21:02Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/profile/AzureProfile.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.management.resources.fluentcore.profile;\n+\n+import com.azure.core.management.AzureEnvironment;\n+import com.azure.core.util.Configuration;\n+\n+/**\n+ * Azure profile for client.\n+ */\n+public class AzureProfile {\n+\n+    private String tenantId;\n+    private String subscriptionId;\n+    private AzureEnvironment environment;\n+    private final Configuration configuration = Configuration.getGlobalConfiguration();\n+\n+    /**\n+     * Creates AzureProfile instance with Azure environment.\n+     *\n+     * @param environment the Azure environment\n+     */\n+    public AzureProfile(AzureEnvironment environment) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04d97d1f05230f358d764503ce77cc7ac3926215"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ5OTk2NA==", "bodyText": "Prefer not to have a null environment from start.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415499964", "createdAt": "2020-04-27T04:23:37Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/profile/AzureProfile.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.management.resources.fluentcore.profile;\n+\n+import com.azure.core.management.AzureEnvironment;\n+import com.azure.core.util.Configuration;\n+\n+/**\n+ * Azure profile for client.\n+ */\n+public class AzureProfile {\n+\n+    private String tenantId;\n+    private String subscriptionId;\n+    private AzureEnvironment environment;\n+    private final Configuration configuration = Configuration.getGlobalConfiguration();\n+\n+    /**\n+     * Creates AzureProfile instance with Azure environment.\n+     *\n+     * @param environment the Azure environment\n+     */\n+    public AzureProfile(AzureEnvironment environment) {\n+        this(null, null, environment);\n+    }\n+\n+    /**\n+     * Creates AzureProfile instance with tenant ID, subscription ID and Azure environment.\n+     *\n+     * @param tenantId the tenant ID required for Graph Rbac\n+     * @param subscriptionId the subscription ID required for resource management\n+     * @param environment the Azure environment\n+     */\n+    public AzureProfile(String tenantId, String subscriptionId, AzureEnvironment environment) {\n+        this.tenantId = tenantId;\n+        this.subscriptionId = subscriptionId;\n+        this.environment = environment;\n+    }\n+\n+    /**\n+     * Sets tenant ID to use related services within GraphRbac, AppService, KeyVault.\n+     *\n+     * @param tenantId the tenant ID required for Graph Rbac\n+     * @return the Azure profile\n+     */\n+    public AzureProfile withTenantId(String tenantId) {\n+        this.tenantId = tenantId;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets subscription ID for resource management.\n+     *\n+     * @param subscriptionId the subscription ID\n+     * @return the Azure profile\n+     */\n+    public AzureProfile withSubscriptionId(String subscriptionId) {\n+        this.subscriptionId = subscriptionId;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets tenant ID.\n+     *\n+     * @return the tenant ID\n+     */\n+    public String tenantId() {\n+        if (this.tenantId == null) {\n+            this.tenantId = configuration.get(Configuration.PROPERTY_AZURE_TENANT_ID);\n+        }\n+        return this.tenantId;\n+    }\n+\n+    /**\n+     * Gets subscription ID.\n+     *\n+     * @return the subscription ID\n+     */\n+    public String subscriptionId() {\n+        if (this.subscriptionId == null) {\n+            this.subscriptionId = configuration.get(Configuration.PROPERTY_AZURE_SUBSCRIPTION_ID);\n+        }\n+        return this.subscriptionId;\n+    }\n+\n+    /**\n+     * Gets Azure environment.\n+     *\n+     * @return the Azure environment\n+     */\n+    public AzureEnvironment environment() {\n+        if (this.environment == null) {\n+            this.environment = AzureEnvironment.AZURE;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04d97d1f05230f358d764503ce77cc7ac3926215"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUwMTMzNg==", "bodyText": "Prefer this be settable, so user can choose to use or not use the configuration.\nIn this code they do not have the choice at all.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415501336", "createdAt": "2020-04-27T04:28:21Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/profile/AzureProfile.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.management.resources.fluentcore.profile;\n+\n+import com.azure.core.management.AzureEnvironment;\n+import com.azure.core.util.Configuration;\n+\n+/**\n+ * Azure profile for client.\n+ */\n+public class AzureProfile {\n+\n+    private String tenantId;\n+    private String subscriptionId;\n+    private AzureEnvironment environment;\n+    private final Configuration configuration = Configuration.getGlobalConfiguration();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04d97d1f05230f358d764503ce77cc7ac3926215"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUwMzI4Mg==", "bodyText": "Should we use a Builder to make this class immutable? Do we expect user be able to change subscriptionId or tenantId in the middle of running the code.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415503282", "createdAt": "2020-04-27T04:34:58Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/profile/AzureProfile.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.management.resources.fluentcore.profile;\n+\n+import com.azure.core.management.AzureEnvironment;\n+import com.azure.core.util.Configuration;\n+\n+/**\n+ * Azure profile for client.\n+ */\n+public class AzureProfile {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE5MTQ1MQ=="}, "originalCommit": {"oid": "368f35706b09ced461ced72de053c1c7804b8763"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNjIxMzYx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#pullrequestreview-400621361", "createdAt": "2020-04-27T04:38:15Z", "commit": {"oid": "04d97d1f05230f358d764503ce77cc7ac3926215"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNDozODoxNVrOGMQYOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNDo0MDozNVrOGMQayg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUwNDQ0Mg==", "bodyText": "host url should be correct, same resource manager endpoint..\nPrefer re-run some live appservice sample tests before merge.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415504442", "createdAt": "2020-04-27T04:38:15Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/appservice/mgmt/src/main/java/com/azure/management/appservice/implementation/FunctionAppImpl.java", "diffHunk": "@@ -92,8 +96,9 @@\n         SiteLogsConfigInner logConfig,\n         AppServiceManager manager) {\n         super(name, innerObject, siteConfig, logConfig, manager);\n-        functionAppKeyServiceHost = manager.restClient().getBaseUrl().toString();\n-        functionAppKeyService = RestProxy.create(FunctionAppKeyService.class, manager.restClient().getHttpPipeline());\n+        // TODO: confirm host url", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04d97d1f05230f358d764503ce77cc7ac3926215"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUwNTA5OA==", "bodyText": "This is not correct. Should be the baseUrl above.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415505098", "createdAt": "2020-04-27T04:40:35Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/appservice/mgmt/src/main/java/com/azure/management/appservice/implementation/FunctionAppImpl.java", "diffHunk": "@@ -111,16 +116,20 @@ private void initializeFunctionService() {\n             } catch (MalformedURLException e) {\n                 throw logger.logExceptionAsError(new IllegalStateException(e));\n             }\n-            RestClient client =\n-                manager()\n-                    .restClient()\n-                    .newBuilder()\n-                    .withBaseUrl(baseUrl)\n-                    .withPolicy(new FunctionAuthenticationPolicy(this))\n-                    .buildClient();\n-            functionServiceHost = client.getBaseUrl().toString();\n+\n+            List<HttpPipelinePolicy> policies = new ArrayList<>();\n+            for (int i = 0, count = manager().httpPipeline().getPolicyCount(); i < count; ++i) {\n+                policies.add(manager().httpPipeline().getPolicy(i));\n+            }\n+            policies.add(new FunctionAuthenticationPolicy(this));\n+            HttpPipeline httpPipeline= new HttpPipelineBuilder()\n+                .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+                .httpClient(manager().httpPipeline().getHttpClient())\n+                .build();\n+            //TODO: confirm host url\n+            functionServiceHost = manager().environment().getResourceManagerEndpoint();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04d97d1f05230f358d764503ce77cc7ac3926215"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNjI0MTQ0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#pullrequestreview-400624144", "createdAt": "2020-04-27T04:49:02Z", "commit": {"oid": "3b76f5e5eb04cd81b7e37d43dfdd2ed8ddb1f79c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNDo0OTowMlrOGMQkvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNDo1MDo1NVrOGMQm9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUwNzY0Ng==", "bodyText": "Improve the javadoc before merge. Restate the class name is not very useful.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415507646", "createdAt": "2020-04-27T04:49:02Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/utils/HttpPipelineProvider.java", "diffHunk": "@@ -0,0 +1,77 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.management.resources.fluentcore.utils;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.HttpPolicyProviders;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.management.AuthenticationPolicy;\n+import com.azure.management.UserAgentPolicy;\n+import com.azure.management.resources.fluentcore.policy.ProviderRegistrationPolicy;\n+import com.azure.management.resources.fluentcore.policy.ResourceManagerThrottlingPolicy;\n+import com.azure.management.resources.fluentcore.profile.AzureProfile;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * A Http Pipeline Provider.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b76f5e5eb04cd81b7e37d43dfdd2ed8ddb1f79c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUwODIxNQ==", "bodyText": "policiesBeforeRetry policiesAfterRetry should be enough?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415508215", "createdAt": "2020-04-27T04:50:55Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/utils/HttpPipelineProvider.java", "diffHunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.management.resources.fluentcore.utils;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.HttpPolicyProviders;\n+import com.azure.core.management.AzureEnvironment;\n+import com.azure.management.AuthenticationPolicy;\n+import com.azure.management.UserAgentPolicy;\n+import com.azure.management.resources.fluentcore.policy.ProviderRegistrationPolicy;\n+import com.azure.management.resources.fluentcore.policy.ResourceManagerThrottlingPolicy;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * A Http Pipeline Provider.\n+ */\n+public final class HttpPipelineProvider {\n+\n+    private HttpPipelineProvider() {\n+    }\n+\n+    /**\n+     * Creates http pipeline with token credential\n+     *\n+     * @param credential the token credential\n+     * @return the http pipeline\n+     */\n+    public static HttpPipeline buildHttpPipeline(TokenCredential credential) {\n+        // TODO: basic policies should be provided\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+        HttpLogOptions httpLogOptions = new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC);\n+        policies.add(new UserAgentPolicy(httpLogOptions, null));\n+\n+        List<HttpPipelinePolicy> retryPolicies = new ArrayList<>();\n+        retryPolicies.add(new ProviderRegistrationPolicy(credential));\n+        retryPolicies.add(new ResourceManagerThrottlingPolicy());\n+        retryPolicies.add(new AuthenticationPolicy(credential, AzureEnvironment.AZURE, null));\n+        retryPolicies.add(new HttpLoggingPolicy(httpLogOptions));\n+        return buildHttpPipeline(policies, retryPolicies, null);\n+    }\n+\n+    /**\n+     * Creates http pipeline with policies and http client.\n+     *\n+     * @param policies the policies not required in retry strategy\n+     * @param retryPolicies the policies required in retry strategy\n+     * @param httpClient the http client\n+     * @return the http pipeline\n+     */\n+    public static HttpPipeline buildHttpPipeline(\n+        List<HttpPipelinePolicy> policies,\n+        List<HttpPipelinePolicy> retryPolicies,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE5MjI0Mw=="}, "originalCommit": {"oid": "368f35706b09ced461ced72de053c1c7804b8763"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNjI5MzQw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#pullrequestreview-400629340", "createdAt": "2020-04-27T05:08:08Z", "commit": {"oid": "3b76f5e5eb04cd81b7e37d43dfdd2ed8ddb1f79c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNTowODowOFrOGMQ8lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNTowODowOFrOGMQ8lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxMzc1MQ==", "bodyText": "Does this need to be in sync with HttpPipelineProvider.buildHttpPipeline(TokenCredential credential, AzureProfile profile)?\nProviderRegistrationPolicy and ResourceManagerThrottlingPolicy seems not here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415513751", "createdAt": "2020-04-27T05:08:08Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/arm/implementation/AzureConfigurableImpl.java", "diffHunk": "@@ -92,21 +114,45 @@ public T withProxy(Proxy proxy) {\n         return null;\n     }\n \n-    protected RestClient buildRestClient(AzureTokenCredential credential, AzureEnvironment.Endpoint endpoint) {\n-        RestClient client = restClientBuilder\n-                .withBaseUrl(credential.getEnvironment(), endpoint)\n-                .withCredential(credential)\n-//                .withPolicy(new ProviderRegistrationPolicy())\n-//                .withPolicy(new ResourceManagerThrottlingPolicy())\n-                .buildClient();\n-        // TODO: Add proxy support\n-//        if (client.httpClient().proxy() != null) {\n-//            credentials.withProxy(client.httpClient().proxy());\n-//        }\n-        return client;\n+    @Override\n+    public T withScope(String scope) {\n+        Objects.requireNonNull(scope);\n+        this.scopes.add(scope);\n+        return (T) this;\n+    }\n+\n+    @Override\n+    public T withHttpClient(HttpClient httpClient) {\n+        Objects.requireNonNull(httpClient);\n+        this.httpClient = httpClient;\n+        return (T) this;\n+    }\n+\n+    @Override\n+    public T withConfiguration(Configuration configuration) {\n+        Objects.requireNonNull(configuration);\n+        this.configuration = configuration;\n+        return (T) this;\n+    }\n+\n+    protected HttpPipeline buildHttpPipeline(TokenCredential credential, AzureProfile profile) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b76f5e5eb04cd81b7e37d43dfdd2ed8ddb1f79c"}, "originalPosition": 135}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNjMxMzM4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#pullrequestreview-400631338", "createdAt": "2020-04-27T05:14:52Z", "commit": {"oid": "3b76f5e5eb04cd81b7e37d43dfdd2ed8ddb1f79c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNToxNDo1MlrOGMRFMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNToxNjo0N1rOGMRHtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxNTk1Mw==", "bodyText": "You can delete it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415515953", "createdAt": "2020-04-27T05:14:52Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/management/azure/src/main/java/com/azure/management/Azure.java", "diffHunk": "@@ -124,76 +123,69 @@\n     private final SdkContext sdkContext;\n \n     /**\n-     * Authenticate to Azure using an Azure credentials object.\n+     * Authenticate to Azure using an Azure credential object.\n      *\n-     * @param credential the credentials object\n+     * @param credential the credential object\n+     * @param profile the profile to use\n      * @return the authenticated Azure client\n      */\n-    public static Authenticated authenticate(AzureTokenCredential credential) {\n-        return new AuthenticatedImpl(\n-            new RestClientBuilder()\n-                .withBaseUrl(credential.getEnvironment(), AzureEnvironment.Endpoint.RESOURCE_MANAGER)\n-                .withCredential(credential)\n-                .withSerializerAdapter(new AzureJacksonAdapter())\n-                .withPolicy(new ProviderRegistrationPolicy(credential))\n-                .withPolicy(new ResourceManagerThrottlingPolicy())\n-                .buildClient(),\n-            credential.getDomain());\n-    }\n-\n-    /**\n-     * Authenticates API access using a properties file containing the required credentials.\n-     *\n-     * @param credentialsFile the file containing the credentials in the standard Java properties file format, with the\n-     *     following keys:\n-     *     <p><code>\n-     *                        subscription= #subscription ID<br>\n-     *                        tenant= #tenant ID<br>\n-     *                        client= #client id<br>\n-     *                        key= #client key<br>\n-     *                        managementURI= #management URI<br>\n-     *                        baseURL= #base URL<br>\n-     *                        authURL= #authentication URL<br>\n-     *                        </code>\n-     * @return authenticated Azure client\n-     * @throws IOException exception thrown from file access\n-     */\n-    public static Authenticated authenticate(File credentialsFile) throws IOException {\n-        ApplicationTokenCredential credential = ApplicationTokenCredential.fromFile(credentialsFile);\n-        return new AuthenticatedImpl(\n-                new RestClientBuilder()\n-                    .withBaseUrl(credential.getEnvironment(), AzureEnvironment.Endpoint.RESOURCE_MANAGER)\n-                    .withCredential(credential)\n-                    .withSerializerAdapter(new AzureJacksonAdapter())\n-                    .withPolicy(new ProviderRegistrationPolicy(credential))\n-                    .withPolicy(new ResourceManagerThrottlingPolicy())\n-                    .buildClient(),\n-                credential.getDomain())\n-            .withDefaultSubscription(credential.getDefaultSubscriptionId());\n-    }\n+    public static Authenticated authenticate(TokenCredential credential, AzureProfile profile) {\n+        return new AuthenticatedImpl(HttpPipelineProvider.buildHttpPipeline(credential, profile), profile);\n+    }\n+\n+//    /**\n+//     * Authenticates API access using a properties file containing the required credential.\n+//     *\n+//     * @param credentialFile the file containing the credential in the standard Java properties file format, with the\n+//     *     following keys:\n+//     *     <p><code>\n+//     *                        subscription= #subscription ID<br>\n+//     *                        tenant= #tenant ID<br>\n+//     *                        client= #client id<br>\n+//     *                        key= #client key<br>\n+//     *                        managementURI= #management URI<br>\n+//     *                        baseURL= #base URL<br>\n+//     *                        authURL= #authentication URL<br>\n+//     *                        </code>\n+//     * @return authenticated Azure client\n+//     * @throws IOException exception thrown from file access\n+//     */\n+//    public static Authenticated authenticate(File credentialFile) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b76f5e5eb04cd81b7e37d43dfdd2ed8ddb1f79c"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxNjU5Ng==", "bodyText": "Maybe do a throw if subscriptionId is null in profile? If user really want to provide a null subscriptionId, we would like them to do it explicitly in withSubscription(String subscriptionId). (or we should not allow null subscriptionId at all?)\nAlso when will CloudException happen? It is scheduled to be deleted from core-mgmt.\nOK I see, it is this.subscriptions().list(). You no longer calls this, so I think you should remove it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415516596", "createdAt": "2020-04-27T05:16:47Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/management/azure/src/main/java/com/azure/management/Azure.java", "diffHunk": "@@ -384,51 +369,43 @@ public SdkContext sdkContext() {\n \n         @Override\n         public Azure withSubscription(String subscriptionId) {\n-            return new Azure(restClient, subscriptionId, tenantId, this);\n+            profile.withSubscriptionId(subscriptionId);\n+            return new Azure(httpPipeline, profile, this);\n         }\n \n         @Override\n-        public Azure withDefaultSubscription() throws CloudException, IOException {\n-            if (this.defaultSubscription != null) {\n-                return withSubscription(this.defaultSubscription);\n-            } else {\n-                PagedIterable<Subscription> subs = this.subscriptions().list();\n-                if (subs.iterator().hasNext()) {\n-                    return withSubscription(subs.iterator().next().subscriptionId());\n-                } else {\n-                    return withSubscription(null);\n-                }\n-            }\n+        public Azure withDefaultSubscription() throws CloudException {\n+            return new Azure(httpPipeline, profile, this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b76f5e5eb04cd81b7e37d43dfdd2ed8ddb1f79c"}, "originalPosition": 330}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04cbdc7200e93f469299a83ef554f98ef37d70bb", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/04cbdc7200e93f469299a83ef554f98ef37d70bb", "committedDate": "2020-04-27T05:37:49Z", "message": "fix checkstyle after merging"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNjQyNDA0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#pullrequestreview-400642404", "createdAt": "2020-04-27T05:50:21Z", "commit": {"oid": "04cbdc7200e93f469299a83ef554f98ef37d70bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNTo1MDoyMlrOGMR0pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNTo1MDoyMlrOGMR0pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUyODEwMg==", "bodyText": "Just delete it. You can have a backup on your forked repo if needed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r415528102", "createdAt": "2020-04-27T05:50:22Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/utils/Utils.java", "diffHunk": "@@ -193,34 +188,34 @@ public static void removeFromList(List<String> list, String value) {\n         }\n     }\n \n-    /**\n-     * Try to extract the environment the client is authenticated to based\n-     * on the information on the rest client.\n-     *\n-     * @param restClient the RestClient instance\n-     * @return the non-null AzureEnvironment\n-     */\n-    public static AzureEnvironment extractAzureEnvironment(RestClient restClient) {\n-        AzureEnvironment environment = null;\n-        if (restClient.getCredential() instanceof AzureTokenCredential) {\n-            environment = ((AzureTokenCredential) restClient.getCredential()).getEnvironment();\n-        } else {\n-            String baseUrl = restClient.getBaseUrl().toString();\n-            for (AzureEnvironment env : AzureEnvironment.knownEnvironments()) {\n-                if (env.getResourceManagerEndpoint().toLowerCase(Locale.ROOT)\n-                        .contains(baseUrl.toLowerCase(Locale.ROOT))) {\n-                    environment = env;\n-                    break;\n-                }\n-            }\n-            if (environment == null) {\n-                ClientLogger logger = new ClientLogger(Utils.class);\n-                throw logger.logExceptionAsError(\n-                    new IllegalArgumentException(\"Unknown resource manager endpoint \" + baseUrl));\n-            }\n-        }\n-        return environment;\n-    }\n+//    /**\n+//     * Try to extract the environment the client is authenticated to based\n+//     * on the information on the rest client.\n+//     *\n+//     * @param restClient the RestClient instance\n+//     * @return the non-null AzureEnvironment\n+//     */\n+//    public static AzureEnvironment extractAzureEnvironment(RestClient restClient) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04cbdc7200e93f469299a83ef554f98ef37d70bb"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb6b7ef66726bfb9760d15d0fe4520aa34d95ade", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cb6b7ef66726bfb9760d15d0fe4520aa34d95ade", "committedDate": "2020-04-27T10:16:42Z", "message": "update by review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1be81c62db2fe639ed45e66cf00c1a23afc326d5", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1be81c62db2fe639ed45e66cf00c1a23afc326d5", "committedDate": "2020-04-27T10:36:22Z", "message": "clean code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2fd96859e37e660f50545fdde28b878353f3367", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a2fd96859e37e660f50545fdde28b878353f3367", "committedDate": "2020-04-27T11:14:30Z", "message": "update configure APIs and javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNDgzMjc0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#pullrequestreview-401483274", "createdAt": "2020-04-28T04:08:02Z", "commit": {"oid": "a2fd96859e37e660f50545fdde28b878353f3367"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNDowODowMlrOGNBo3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNDowODowMlrOGNBo3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMxMTUxOQ==", "bodyText": "@weidongxu-microsoft The configuration is used when the user might prefer EnvironmentCredential. Instead of making configuration settable, I prefer following the way how environment credential handles configuration. At least for credential related, the user only need to set environment variables in their system.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r416311519", "createdAt": "2020-04-28T04:08:02Z", "author": {"login": "xseeseesee"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/profile/AzureProfile.java", "diffHunk": "@@ -20,6 +20,12 @@\n \n     /**\n      * Creates AzureProfile instance with Azure environment. The global environment is {@link AzureEnvironment#AZURE}.\n+     * The tenant ID and subscription ID can be set via environment variables. The environment variables are expected", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2fd96859e37e660f50545fdde28b878353f3367"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "326f7999ce776c81f0ac96f2141cdff9951eecf0", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/326f7999ce776c81f0ac96f2141cdff9951eecf0", "committedDate": "2020-04-28T04:44:53Z", "message": "support option to load from environment variables"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNDk0Njk0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#pullrequestreview-401494694", "createdAt": "2020-04-28T04:48:18Z", "commit": {"oid": "326f7999ce776c81f0ac96f2141cdff9951eecf0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNDo0ODoxOFrOGNCYzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNDo0ODoxOFrOGNCYzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMyMzc5MA==", "bodyText": "Seems no need to clone it?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r416323790", "createdAt": "2020-04-28T04:48:18Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/profile/AzureProfile.java", "diffHunk": "@@ -28,9 +27,15 @@\n      * </ul>\n      *\n      * @param environment the Azure environment\n+     * @param loadEnvironmentVariables the boolean flag indicates whether the environment variables are set\n      */\n-    public AzureProfile(AzureEnvironment environment) {\n-        this(null, null, environment);\n+    public AzureProfile(AzureEnvironment environment, boolean loadEnvironmentVariables) {\n+        Objects.requireNonNull(environment);\n+        if (loadEnvironmentVariables) {\n+            Configuration configuration = Configuration.getGlobalConfiguration().clone();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326f7999ce776c81f0ac96f2141cdff9951eecf0"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNDk1MTUx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#pullrequestreview-401495151", "createdAt": "2020-04-28T04:49:57Z", "commit": {"oid": "326f7999ce776c81f0ac96f2141cdff9951eecf0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNDg1NzMy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#pullrequestreview-401485732", "createdAt": "2020-04-28T04:16:48Z", "commit": {"oid": "a2fd96859e37e660f50545fdde28b878353f3367"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNDoxNjo0OVrOGNBzeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNDoyODo0OFrOGNCA6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMxNDIzMg==", "bodyText": "Where do you add subId and tenantId in samples?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r416314232", "createdAt": "2020-04-28T04:16:49Z", "author": {"login": "ChenTanyi"}, "path": "sdk/management/samples/src/main/java/com/azure/management/containerregistry/samples/ManageContainerRegistryWithWebhooks.java", "diffHunk": "@@ -201,11 +204,15 @@ public static void main(String[] args) {\n             //=============================================================\n             // Authenticate\n \n-            final File credFile = new File(System.getenv(\"AZURE_AUTH_LOCATION\"));\n+            final AzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2fd96859e37e660f50545fdde28b878353f3367"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMxNTE2MA==", "bodyText": "Keep this in order for default subs. Meanwhile add a with default tenant like it. Since these two could be null in profile. I think it more friendly than all need user to add.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r416315160", "createdAt": "2020-04-28T04:20:18Z", "author": {"login": "ChenTanyi"}, "path": "sdk/management/azure/src/main/java/com/azure/management/Azure.java", "diffHunk": "@@ -384,51 +301,47 @@ public SdkContext sdkContext() {\n \n         @Override\n         public Azure withSubscription(String subscriptionId) {\n-            return new Azure(restClient, subscriptionId, tenantId, this);\n+            profile.withSubscriptionId(subscriptionId);\n+            return new Azure(httpPipeline, profile, this);\n         }\n \n         @Override\n-        public Azure withDefaultSubscription() throws CloudException, IOException {\n-            if (this.defaultSubscription != null) {\n-                return withSubscription(this.defaultSubscription);\n-            } else {\n-                PagedIterable<Subscription> subs = this.subscriptions().list();\n-                if (subs.iterator().hasNext()) {\n-                    return withSubscription(subs.iterator().next().subscriptionId());\n-                } else {\n-                    return withSubscription(null);\n-                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2fd96859e37e660f50545fdde28b878353f3367"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMxNzY3Mg==", "bodyText": "I think addAll may be more reasonable? Like scopes", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10492#discussion_r416317672", "createdAt": "2020-04-28T04:28:48Z", "author": {"login": "ChenTanyi"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/arm/implementation/AzureConfigurableImpl.java", "diffHunk": "@@ -23,90 +27,88 @@\n  * @param <T> the type of the configurable interface\n  */\n public class AzureConfigurableImpl<T extends AzureConfigurable<T>>\n-        implements AzureConfigurable<T> {\n-    protected RestClientBuilder restClientBuilder;\n+    implements AzureConfigurable<T> {\n+    private HttpClient httpClient;\n+    private HttpLogOptions httpLogOptions;\n+    private List<HttpPipelinePolicy> policies;\n+    private List<String> scopes;\n+    private RetryPolicy retryPolicy;\n+    private Configuration configuration;\n+    private TokenCredential[] tokens;\n \n     protected AzureConfigurableImpl() {\n-        this.restClientBuilder = new RestClientBuilder()\n-                .withSerializerAdapter(new AzureJacksonAdapter());\n+        policies = new ArrayList<>();\n+        scopes = new ArrayList<>();\n+        retryPolicy = new RetryPolicy();\n+        httpLogOptions = new HttpLogOptions().setLogLevel(HttpLogDetailLevel.NONE);\n     }\n \n     @Override\n-    public T withLogOptions(HttpLogOptions level) {\n-        this.restClientBuilder = this.restClientBuilder.withHttpLogOptions(level);\n+    public T withLogOptions(HttpLogOptions httpLogOptions) {\n+        Objects.requireNonNull(httpLogOptions);\n+        this.httpLogOptions = httpLogOptions;\n         return (T) this;\n     }\n \n     @Override\n     public T withLogLevel(HttpLogDetailLevel logLevel) {\n-        this.restClientBuilder = this.restClientBuilder.withLogLevel(logLevel);\n+        Objects.requireNonNull(logLevel);\n+        this.httpLogOptions = httpLogOptions.setLogLevel(logLevel);\n         return (T) this;\n     }\n \n     @Override\n     public T withPolicy(HttpPipelinePolicy policy) {\n-        this.restClientBuilder = this.restClientBuilder.withPolicy(policy);\n+        Objects.requireNonNull(policy);\n+        policies.add(policy);\n         return (T) this;\n     }\n \n     @Override\n-    public T withAuxiliaryCredentials(AzureTokenCredential... tokens) {\n-        return null;\n-    }\n-\n-//    @Override\n-//    public T withAuxiliaryCredentials(AzureTokenCredentials... tokens) {\n-//        if (tokens != null) {\n-//            if (tokens.length > 3) {\n-//                throw new IllegalArgumentException(\"Only can hold up to three auxiliary tokens.\");\n-//            }\n-//            AuxiliaryCredentialsInterceptor interceptor = new AuxiliaryCredentialsInterceptor(tokens);\n-//            this.restClientBuilder = this.restClientBuilder.withInterceptor(interceptor);\n-//        }\n-//        return (T) this;\n-//    }\n-\n-    @Override\n-    public T withUserAgent(String userAgent) {\n-        this.restClientBuilder = this.restClientBuilder.withUserAgent(userAgent);\n+    public T withAuxiliaryCredentials(TokenCredential... tokens) {\n+        Objects.requireNonNull(tokens);\n+        this.tokens = tokens;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2fd96859e37e660f50545fdde28b878353f3367"}, "originalPosition": 101}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cf90465254a82831bca5caa75955352835b3168", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3cf90465254a82831bca5caa75955352835b3168", "committedDate": "2020-04-28T05:45:05Z", "message": "update sample with new AzureProfile constructor"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4580, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}