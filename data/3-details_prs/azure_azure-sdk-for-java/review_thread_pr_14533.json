{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0OTY2OTA4", "number": 14533, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMDo0Mjo1NlrOEdbzVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjowMDozNFrOEd5mLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Mjk5NjcxOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMDo0Mjo1NlrOHIlxHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjoxNToyMFrOHInMVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2OTQzNg==", "bodyText": "For the time being I am using List instead of Iterable as the protocol layer also accepts a List, not sure what the value add is for us to use Iterables", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r478769436", "createdAt": "2020-08-28T00:42:56Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -228,4 +233,126 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+\n+    //==================================================================================================================================================\n+    // Models APIs\n+    //==================================================================================================================================================\n+    \n+    /**\n+     * Creates one or many models.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A {@link PagedFlux} of created models.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> createModels(List<String> models) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5abc00fea8f016b8b4e4e1d839f194313e84391"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5Mjc5MQ==", "bodyText": "I agree, we should stick to List.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r478792791", "createdAt": "2020-08-28T02:15:20Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -228,4 +233,126 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+\n+    //==================================================================================================================================================\n+    // Models APIs\n+    //==================================================================================================================================================\n+    \n+    /**\n+     * Creates one or many models.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A {@link PagedFlux} of created models.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> createModels(List<String> models) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2OTQzNg=="}, "originalCommit": {"oid": "a5abc00fea8f016b8b4e4e1d839f194313e84391"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Mjk5NzUwOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMDo0MzoyOFrOHIlxlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMDo0MzoyOFrOHIlxlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2OTU1Nw==", "bodyText": "This will have to return a PagedFlux error. Working on it", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r478769557", "createdAt": "2020-08-28T00:43:28Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -228,4 +233,126 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+\n+    //==================================================================================================================================================\n+    // Models APIs\n+    //==================================================================================================================================================\n+    \n+    /**\n+     * Creates one or many models.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A {@link PagedFlux} of created models.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> createModels(List<String> models) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> createModelsSinglePageAsync(models, context)),\n+            nextLink -> withContext(context -> Mono.empty()));\n+    }\n+\n+    PagedFlux<ModelData> createModels(List<String> models, Context context){\n+        return new PagedFlux<>(\n+            () -> createModelsSinglePageAsync(models, context),\n+            nextLink -> Mono.empty());\n+    }\n+\n+    Mono<PagedResponse<ModelData>> createModelsSinglePageAsync(List<String> models, Context context)\n+    {\n+        List<Object> modelsPayload = new ArrayList<>();\n+        for (String model: models) {\n+            try {\n+                modelsPayload.add(mapper.readValue(model, Object.class));\n+            }\n+            catch (JsonProcessingException e) {\n+                logger.error(\"Could not parse the model payload [%s]: %s\", model, e);\n+                return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5abc00fea8f016b8b4e4e1d839f194313e84391"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzE1MTUyOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjoxMjoxNVrOHInJcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjoxMjoxNVrOHInJcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5MjA0OA==", "bodyText": "We should highlight that this API returns the Http response info as well", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r478792048", "createdAt": "2020-08-28T02:12:15Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -1178,18 +1178,10 @@ Async APIs\n     /**\n      * Creates one or many models.\n      * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return The list of created models\n+     * @return A {@link PagedFlux} of created models.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf7d079daf0592cda83b1530c10b02e58503c2cd"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzE1Mzg1OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjoxMzo0NVrOHInKyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjoxMzo0NVrOHInKyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5MjM5Mg==", "bodyText": "If the PL accepts a List, then there isn't much value in us accepting an Iterable.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r478792392", "createdAt": "2020-08-28T02:13:45Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -1178,18 +1178,10 @@ Async APIs\n     /**\n      * Creates one or many models.\n      * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return The list of created models\n+     * @return A {@link PagedFlux} of created models.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public Mono<List<ModelData>> createModels(List<String> models) { }\n-\n-    /**\n-     * Creates one or many models.\n-     * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return A REST response containing the list of created models.\n-     */\n-    @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public Mono<Response<List<ModelData>>> createModelsWithResponse(List<String> models) { }\n+    public PagedFlux<ModelData> createModels(Iterable<String> models) { }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf7d079daf0592cda83b1530c10b02e58503c2cd"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzE1NTg2OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjoxNDo1OVrOHInL6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjoyNToyNVrOHInV5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5MjY4Mg==", "bodyText": "Is supposed to be the java equivalent of #region? \ud83d\ude09", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r478792682", "createdAt": "2020-08-28T02:14:59Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -228,4 +234,126 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+\n+    //==================================================================================================================================================", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf7d079daf0592cda83b1530c10b02e58503c2cd"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5NTIzNg==", "bodyText": "I just wanted to have some API separation to ease locating different APIs, we will remove them once we are ready to ship, I don't feel strongly about this at all though, so if you guys hate it we can totally remove it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r478795236", "createdAt": "2020-08-28T02:25:25Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -228,4 +234,126 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+\n+    //==================================================================================================================================================", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5MjY4Mg=="}, "originalCommit": {"oid": "cf7d079daf0592cda83b1530c10b02e58503c2cd"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzE5NjE0OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjozOTowNVrOHInjHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjo0MTo0NlrOHInlzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5ODYyMw==", "bodyText": "The PL gives us Mono<Response<ModelData>>, so this should be sufficient:\nreturn protocolLayer.getDigitalTwinModels().getByIdWithResponseAsync(modelId, includeModelDefinition, context)\n            .flatMap(modelDataResponse -> Mono.just(modelDataResponse.getValue()));", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r478798623", "createdAt": "2020-08-28T02:39:05Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -228,4 +234,126 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+\n+    //==================================================================================================================================================\n+    // Models APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Creates one or many models.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A {@link PagedFlux} of created models.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> createModels(List<String> models) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> createModelsSinglePageAsync(models, context)),\n+            nextLink -> withContext(context -> Mono.empty()));\n+    }\n+\n+    PagedFlux<ModelData> createModels(List<String> models, Context context){\n+        return new PagedFlux<>(\n+            () -> createModelsSinglePageAsync(models, context),\n+            nextLink -> Mono.empty());\n+    }\n+\n+    Mono<PagedResponse<ModelData>> createModelsSinglePageAsync(List<String> models, Context context)\n+    {\n+        List<Object> modelsPayload = new ArrayList<>();\n+        for (String model: models) {\n+            try {\n+                modelsPayload.add(mapper.readValue(model, Object.class));\n+            }\n+            catch (JsonProcessingException e) {\n+                logger.error(\"Could not parse the model payload [%s]: %s\", model, e);\n+                return Mono.error(e);\n+            }\n+        }\n+\n+        return protocolLayer.getDigitalTwinModels().addWithResponseAsync(modelsPayload, context)\n+            .map(\n+                listResponse -> new PagedResponseBase<>(\n+                    listResponse.getRequest(),\n+                    listResponse.getStatusCode(),\n+                    listResponse.getHeaders(),\n+                    listResponse.getValue(),\n+                    null,\n+                    ((ResponseBase)listResponse).getDeserializedHeaders()));\n+    }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition.\n+     * @param modelId The Id of the model.\n+     * @return The application/json model\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<ModelData> getModel(String modelId) {\n+        return withContext(context -> getModel(modelId, context));\n+    }\n+\n+    Mono<ModelData> getModel(String modelId, Context context){\n+        return protocolLayer.getDigitalTwinModels().getByIdWithResponseAsync(modelId, includeModelDefinition, context)\n+            .flatMap(modelDataResponse -> Mono.just(mapper.convertValue(modelDataResponse.getValue(), ModelData.class)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf7d079daf0592cda83b1530c10b02e58503c2cd"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5OTI0NQ==", "bodyText": "You can actually have the API in line 290 updated to call Mono<Response<ModelData>> getModelWithResponse(String modelId, Context context), and get rid of 294-297 entirely", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r478799245", "createdAt": "2020-08-28T02:41:33Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -228,4 +234,126 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+\n+    //==================================================================================================================================================\n+    // Models APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Creates one or many models.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A {@link PagedFlux} of created models.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> createModels(List<String> models) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> createModelsSinglePageAsync(models, context)),\n+            nextLink -> withContext(context -> Mono.empty()));\n+    }\n+\n+    PagedFlux<ModelData> createModels(List<String> models, Context context){\n+        return new PagedFlux<>(\n+            () -> createModelsSinglePageAsync(models, context),\n+            nextLink -> Mono.empty());\n+    }\n+\n+    Mono<PagedResponse<ModelData>> createModelsSinglePageAsync(List<String> models, Context context)\n+    {\n+        List<Object> modelsPayload = new ArrayList<>();\n+        for (String model: models) {\n+            try {\n+                modelsPayload.add(mapper.readValue(model, Object.class));\n+            }\n+            catch (JsonProcessingException e) {\n+                logger.error(\"Could not parse the model payload [%s]: %s\", model, e);\n+                return Mono.error(e);\n+            }\n+        }\n+\n+        return protocolLayer.getDigitalTwinModels().addWithResponseAsync(modelsPayload, context)\n+            .map(\n+                listResponse -> new PagedResponseBase<>(\n+                    listResponse.getRequest(),\n+                    listResponse.getStatusCode(),\n+                    listResponse.getHeaders(),\n+                    listResponse.getValue(),\n+                    null,\n+                    ((ResponseBase)listResponse).getDeserializedHeaders()));\n+    }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition.\n+     * @param modelId The Id of the model.\n+     * @return The application/json model\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<ModelData> getModel(String modelId) {\n+        return withContext(context -> getModel(modelId, context));\n+    }\n+\n+    Mono<ModelData> getModel(String modelId, Context context){\n+        return protocolLayer.getDigitalTwinModels().getByIdWithResponseAsync(modelId, includeModelDefinition, context)\n+            .flatMap(modelDataResponse -> Mono.just(mapper.convertValue(modelDataResponse.getValue(), ModelData.class)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5ODYyMw=="}, "originalCommit": {"oid": "cf7d079daf0592cda83b1530c10b02e58503c2cd"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5OTMxMA==", "bodyText": "@ServiceMethod(returns = ReturnType.SINGLE)\n    public Mono<ModelData> getModel(String modelId) {\n        return withContext(context -> getModelWithResponse(modelId, context))\n            .flatMap(response -> Mono.just(response.getValue()));\n    }", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r478799310", "createdAt": "2020-08-28T02:41:46Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -228,4 +234,126 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+\n+    //==================================================================================================================================================\n+    // Models APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Creates one or many models.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A {@link PagedFlux} of created models.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> createModels(List<String> models) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> createModelsSinglePageAsync(models, context)),\n+            nextLink -> withContext(context -> Mono.empty()));\n+    }\n+\n+    PagedFlux<ModelData> createModels(List<String> models, Context context){\n+        return new PagedFlux<>(\n+            () -> createModelsSinglePageAsync(models, context),\n+            nextLink -> Mono.empty());\n+    }\n+\n+    Mono<PagedResponse<ModelData>> createModelsSinglePageAsync(List<String> models, Context context)\n+    {\n+        List<Object> modelsPayload = new ArrayList<>();\n+        for (String model: models) {\n+            try {\n+                modelsPayload.add(mapper.readValue(model, Object.class));\n+            }\n+            catch (JsonProcessingException e) {\n+                logger.error(\"Could not parse the model payload [%s]: %s\", model, e);\n+                return Mono.error(e);\n+            }\n+        }\n+\n+        return protocolLayer.getDigitalTwinModels().addWithResponseAsync(modelsPayload, context)\n+            .map(\n+                listResponse -> new PagedResponseBase<>(\n+                    listResponse.getRequest(),\n+                    listResponse.getStatusCode(),\n+                    listResponse.getHeaders(),\n+                    listResponse.getValue(),\n+                    null,\n+                    ((ResponseBase)listResponse).getDeserializedHeaders()));\n+    }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition.\n+     * @param modelId The Id of the model.\n+     * @return The application/json model\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<ModelData> getModel(String modelId) {\n+        return withContext(context -> getModel(modelId, context));\n+    }\n+\n+    Mono<ModelData> getModel(String modelId, Context context){\n+        return protocolLayer.getDigitalTwinModels().getByIdWithResponseAsync(modelId, includeModelDefinition, context)\n+            .flatMap(modelDataResponse -> Mono.just(mapper.convertValue(modelDataResponse.getValue(), ModelData.class)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5ODYyMw=="}, "originalCommit": {"oid": "cf7d079daf0592cda83b1530c10b02e58503c2cd"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzIxMDczOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjo0ODoxNVrOHInrsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjowNzo0N1rOHJMPVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgwMDgxNg==", "bodyText": "Why not define listModelOptions.getDependenciesFor as a List to begin with? If the PL is restrictive, then any advantage in the public API being flexible?\nIs there a risk of running into conversion errors by simply casting it to a List -> would a for-each loop be better: https://www.baeldung.com/java-iterable-to-collection?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r478800816", "createdAt": "2020-08-28T02:48:15Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -228,4 +234,126 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+\n+    //==================================================================================================================================================\n+    // Models APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Creates one or many models.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A {@link PagedFlux} of created models.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> createModels(List<String> models) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> createModelsSinglePageAsync(models, context)),\n+            nextLink -> withContext(context -> Mono.empty()));\n+    }\n+\n+    PagedFlux<ModelData> createModels(List<String> models, Context context){\n+        return new PagedFlux<>(\n+            () -> createModelsSinglePageAsync(models, context),\n+            nextLink -> Mono.empty());\n+    }\n+\n+    Mono<PagedResponse<ModelData>> createModelsSinglePageAsync(List<String> models, Context context)\n+    {\n+        List<Object> modelsPayload = new ArrayList<>();\n+        for (String model: models) {\n+            try {\n+                modelsPayload.add(mapper.readValue(model, Object.class));\n+            }\n+            catch (JsonProcessingException e) {\n+                logger.error(\"Could not parse the model payload [%s]: %s\", model, e);\n+                return Mono.error(e);\n+            }\n+        }\n+\n+        return protocolLayer.getDigitalTwinModels().addWithResponseAsync(modelsPayload, context)\n+            .map(\n+                listResponse -> new PagedResponseBase<>(\n+                    listResponse.getRequest(),\n+                    listResponse.getStatusCode(),\n+                    listResponse.getHeaders(),\n+                    listResponse.getValue(),\n+                    null,\n+                    ((ResponseBase)listResponse).getDeserializedHeaders()));\n+    }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition.\n+     * @param modelId The Id of the model.\n+     * @return The application/json model\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<ModelData> getModel(String modelId) {\n+        return withContext(context -> getModel(modelId, context));\n+    }\n+\n+    Mono<ModelData> getModel(String modelId, Context context){\n+        return protocolLayer.getDigitalTwinModels().getByIdWithResponseAsync(modelId, includeModelDefinition, context)\n+            .flatMap(modelDataResponse -> Mono.just(mapper.convertValue(modelDataResponse.getValue(), ModelData.class)));\n+    }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition.\n+     * @param modelId The Id of the model.\n+     * @return The application/json model\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<ModelData>> getModelWithResponse(String modelId) {\n+        return withContext(context -> getModelWithResponse(modelId, context));\n+    }\n+\n+    Mono<Response<ModelData>> getModelWithResponse(String modelId, Context context){\n+        return protocolLayer\n+            .getDigitalTwinModels()\n+            .getByIdWithResponseAsync(modelId, includeModelDefinition, context);\n+    }\n+\n+    /**\n+     * Gets the list of models by iterating through a collection.\n+     * @param listModelOptions The options for the list operation.\n+     * @return A {@link PagedFlux} of ModelData.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> listModels(ListModelOptions listModelOptions) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listModelsSinglePageAsync(listModelOptions, context)),\n+            nextLink -> withContext(context -> listModelsNextSinglePageAsync(nextLink, context)));\n+    }\n+\n+    PagedFlux<ModelData> listModels(ListModelOptions listModelOptions, Context context){\n+        return new PagedFlux<>(\n+            () -> listModelsSinglePageAsync(listModelOptions, context),\n+            nextLink -> listModelsNextSinglePageAsync(nextLink, context));\n+    }\n+\n+    Mono<PagedResponse<ModelData>> listModelsSinglePageAsync(ListModelOptions listModelOptions, Context context){\n+        return protocolLayer.getDigitalTwinModels().listSinglePageAsync(\n+            (List<String>) listModelOptions.getDependenciesFor(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf7d079daf0592cda83b1530c10b02e58503c2cd"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5OTc2Ng==", "bodyText": "I think so too, I will change all the types back to List since that is the input the protocol layer accepts and I don't see a point in going more generic than that", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r479399766", "createdAt": "2020-08-28T16:07:47Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -228,4 +234,126 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+\n+    //==================================================================================================================================================\n+    // Models APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Creates one or many models.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A {@link PagedFlux} of created models.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> createModels(List<String> models) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> createModelsSinglePageAsync(models, context)),\n+            nextLink -> withContext(context -> Mono.empty()));\n+    }\n+\n+    PagedFlux<ModelData> createModels(List<String> models, Context context){\n+        return new PagedFlux<>(\n+            () -> createModelsSinglePageAsync(models, context),\n+            nextLink -> Mono.empty());\n+    }\n+\n+    Mono<PagedResponse<ModelData>> createModelsSinglePageAsync(List<String> models, Context context)\n+    {\n+        List<Object> modelsPayload = new ArrayList<>();\n+        for (String model: models) {\n+            try {\n+                modelsPayload.add(mapper.readValue(model, Object.class));\n+            }\n+            catch (JsonProcessingException e) {\n+                logger.error(\"Could not parse the model payload [%s]: %s\", model, e);\n+                return Mono.error(e);\n+            }\n+        }\n+\n+        return protocolLayer.getDigitalTwinModels().addWithResponseAsync(modelsPayload, context)\n+            .map(\n+                listResponse -> new PagedResponseBase<>(\n+                    listResponse.getRequest(),\n+                    listResponse.getStatusCode(),\n+                    listResponse.getHeaders(),\n+                    listResponse.getValue(),\n+                    null,\n+                    ((ResponseBase)listResponse).getDeserializedHeaders()));\n+    }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition.\n+     * @param modelId The Id of the model.\n+     * @return The application/json model\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<ModelData> getModel(String modelId) {\n+        return withContext(context -> getModel(modelId, context));\n+    }\n+\n+    Mono<ModelData> getModel(String modelId, Context context){\n+        return protocolLayer.getDigitalTwinModels().getByIdWithResponseAsync(modelId, includeModelDefinition, context)\n+            .flatMap(modelDataResponse -> Mono.just(mapper.convertValue(modelDataResponse.getValue(), ModelData.class)));\n+    }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition.\n+     * @param modelId The Id of the model.\n+     * @return The application/json model\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<ModelData>> getModelWithResponse(String modelId) {\n+        return withContext(context -> getModelWithResponse(modelId, context));\n+    }\n+\n+    Mono<Response<ModelData>> getModelWithResponse(String modelId, Context context){\n+        return protocolLayer\n+            .getDigitalTwinModels()\n+            .getByIdWithResponseAsync(modelId, includeModelDefinition, context);\n+    }\n+\n+    /**\n+     * Gets the list of models by iterating through a collection.\n+     * @param listModelOptions The options for the list operation.\n+     * @return A {@link PagedFlux} of ModelData.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> listModels(ListModelOptions listModelOptions) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listModelsSinglePageAsync(listModelOptions, context)),\n+            nextLink -> withContext(context -> listModelsNextSinglePageAsync(nextLink, context)));\n+    }\n+\n+    PagedFlux<ModelData> listModels(ListModelOptions listModelOptions, Context context){\n+        return new PagedFlux<>(\n+            () -> listModelsSinglePageAsync(listModelOptions, context),\n+            nextLink -> listModelsNextSinglePageAsync(nextLink, context));\n+    }\n+\n+    Mono<PagedResponse<ModelData>> listModelsSinglePageAsync(ListModelOptions listModelOptions, Context context){\n+        return protocolLayer.getDigitalTwinModels().listSinglePageAsync(\n+            (List<String>) listModelOptions.getDependenciesFor(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgwMDgxNg=="}, "originalCommit": {"oid": "cf7d079daf0592cda83b1530c10b02e58503c2cd"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Nzc0MDgzOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMDo1ODo1NFrOHJUSiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMDo1ODo1NFrOHJUSiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzMTY1Ng==", "bodyText": "I have seen the format of \"The Http response containing modelData\"\nWe can decide one and use the same everywhere.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r479531656", "createdAt": "2020-08-28T20:58:54Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -1178,44 +1178,41 @@ Async APIs\n     /**\n      * Creates one or many models.\n      * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return The list of created models\n+     * @return A {@link PagedFlux} of created models and the http response.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public Mono<List<ModelData>> createModels(List<String> models) { }\n-\n-    /**\n-     * Creates one or many models.\n-     * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return A REST response containing the list of created models.\n-     */\n-    @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public Mono<Response<List<ModelData>>> createModelsWithResponse(List<String> models) { }\n+    public PagedFlux<ModelData> createModels(List<String> models) { }\n \n     /**\n      * Gets a model, including the model metadata and the model definition.\n      * @param modelId The Id of the model.\n-     * @return The application/json model\n+     * @return The ModelData\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<ModelData> getModel(String modelId) { }\n \n     /**\n      * Gets a model, including the model metadata and the model definition asynchronously.\n      * @param modelId The Id of the model.\n-     * @return A REST response containing the model.\n+     * @return The ModelData and the http response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8134cd35fa978dd34754717e2ae5695ffb4cf05"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Nzc0MzMzOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTowMDowM1rOHJUUSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTowMDowM1rOHJUUSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzMjEwNA==", "bodyText": "Unique Identifier?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r479532104", "createdAt": "2020-08-28T21:00:03Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -1178,44 +1178,41 @@ Async APIs\n     /**\n      * Creates one or many models.\n      * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return The list of created models\n+     * @return A {@link PagedFlux} of created models and the http response.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public Mono<List<ModelData>> createModels(List<String> models) { }\n-\n-    /**\n-     * Creates one or many models.\n-     * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return A REST response containing the list of created models.\n-     */\n-    @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public Mono<Response<List<ModelData>>> createModelsWithResponse(List<String> models) { }\n+    public PagedFlux<ModelData> createModels(List<String> models) { }\n \n     /**\n      * Gets a model, including the model metadata and the model definition.\n      * @param modelId The Id of the model.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8134cd35fa978dd34754717e2ae5695ffb4cf05"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Nzc0NDA4OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTowMDoyMlrOHJUUuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTowMDoyMlrOHJUUuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzMjIxNw==", "bodyText": "same here as above and other places", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r479532217", "createdAt": "2020-08-28T21:00:22Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -1178,44 +1178,41 @@ Async APIs\n     /**\n      * Creates one or many models.\n      * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return The list of created models\n+     * @return A {@link PagedFlux} of created models and the http response.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public Mono<List<ModelData>> createModels(List<String> models) { }\n-\n-    /**\n-     * Creates one or many models.\n-     * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return A REST response containing the list of created models.\n-     */\n-    @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public Mono<Response<List<ModelData>>> createModelsWithResponse(List<String> models) { }\n+    public PagedFlux<ModelData> createModels(List<String> models) { }\n \n     /**\n      * Gets a model, including the model metadata and the model definition.\n      * @param modelId The Id of the model.\n-     * @return The application/json model\n+     * @return The ModelData\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<ModelData> getModel(String modelId) { }\n \n     /**\n      * Gets a model, including the model metadata and the model definition asynchronously.\n      * @param modelId The Id of the model.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8134cd35fa978dd34754717e2ae5695ffb4cf05"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Nzc1MDA0OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTowMjo0OVrOHJUYZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwMDozODoyOVrOHJXiiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzMzE1Ng==", "bodyText": "Add a comment about context too?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r479533156", "createdAt": "2020-08-28T21:02:49Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -1254,18 +1251,10 @@ Sync APIs\n  /**\n      * Creates one or many models.\n      * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return The list of created models\n-     */\n-    @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public List<ModelData> createModels(List<String> models) { }\n-\n-    /**\n-     * Creates one or many models.\n-     * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return A REST response containing the list of created models.\n+     * @return A {@link PagedIterable} of created ModelData.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8134cd35fa978dd34754717e2ae5695ffb4cf05"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU0MDc5OQ==", "bodyText": "I will only update the actual implementation from now on", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r479540799", "createdAt": "2020-08-28T21:23:49Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -1254,18 +1251,10 @@ Sync APIs\n  /**\n      * Creates one or many models.\n      * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return The list of created models\n-     */\n-    @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public List<ModelData> createModels(List<String> models) { }\n-\n-    /**\n-     * Creates one or many models.\n-     * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return A REST response containing the list of created models.\n+     * @return A {@link PagedIterable} of created ModelData.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzMzE1Ng=="}, "originalCommit": {"oid": "f8134cd35fa978dd34754717e2ae5695ffb4cf05"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU4NDkwNw==", "bodyText": "What is part 2 suppose to contain?\nDecommision and rest of it?\n\nDecommission APIs and the Samples and tests.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r479584907", "createdAt": "2020-08-29T00:38:29Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -1254,18 +1251,10 @@ Sync APIs\n  /**\n      * Creates one or many models.\n      * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return The list of created models\n-     */\n-    @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public List<ModelData> createModels(List<String> models) { }\n-\n-    /**\n-     * Creates one or many models.\n-     * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return A REST response containing the list of created models.\n+     * @return A {@link PagedIterable} of created ModelData.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzMzE1Ng=="}, "originalCommit": {"oid": "f8134cd35fa978dd34754717e2ae5695ffb4cf05"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Nzc1NjYwOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTowNTo0N1rOHJUcZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMToxMzo0N1rOHJUoZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzNDE4MQ==", "bodyText": "don't you need createmodels with response?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r479534181", "createdAt": "2020-08-28T21:05:47Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -1178,44 +1178,41 @@ Async APIs\n     /**\n      * Creates one or many models.\n      * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return The list of created models\n+     * @return A {@link PagedFlux} of created models and the http response.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public Mono<List<ModelData>> createModels(List<String> models) { }\n-\n-    /**\n-     * Creates one or many models.\n-     * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return A REST response containing the list of created models.\n-     */\n-    @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public Mono<Response<List<ModelData>>> createModelsWithResponse(List<String> models) { }\n+    public PagedFlux<ModelData> createModels(List<String> models) { }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8134cd35fa978dd34754717e2ae5695ffb4cf05"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzNjA0OA==", "bodyText": "Also why not Iterable here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r479536048", "createdAt": "2020-08-28T21:10:27Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -1178,44 +1178,41 @@ Async APIs\n     /**\n      * Creates one or many models.\n      * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return The list of created models\n+     * @return A {@link PagedFlux} of created models and the http response.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public Mono<List<ModelData>> createModels(List<String> models) { }\n-\n-    /**\n-     * Creates one or many models.\n-     * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return A REST response containing the list of created models.\n-     */\n-    @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public Mono<Response<List<ModelData>>> createModelsWithResponse(List<String> models) { }\n+    public PagedFlux<ModelData> createModels(List<String> models) { }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzNDE4MQ=="}, "originalCommit": {"oid": "f8134cd35fa978dd34754717e2ae5695ffb4cf05"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzNzI1NA==", "bodyText": "This is the Async version, so it has to be PagedFlux\nAnd we don't need the one with response since PagedFlux will have the response in there.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r479537254", "createdAt": "2020-08-28T21:13:47Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -1178,44 +1178,41 @@ Async APIs\n     /**\n      * Creates one or many models.\n      * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return The list of created models\n+     * @return A {@link PagedFlux} of created models and the http response.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public Mono<List<ModelData>> createModels(List<String> models) { }\n-\n-    /**\n-     * Creates one or many models.\n-     * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return A REST response containing the list of created models.\n-     */\n-    @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public Mono<Response<List<ModelData>>> createModelsWithResponse(List<String> models) { }\n+    public PagedFlux<ModelData> createModels(List<String> models) { }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzNDE4MQ=="}, "originalCommit": {"oid": "f8134cd35fa978dd34754717e2ae5695ffb4cf05"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Nzc2MDE0OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTowNzowNVrOHJUeWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTowNzowNVrOHJUeWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzNDY4MQ==", "bodyText": "same here, with response?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r479534681", "createdAt": "2020-08-28T21:07:05Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -1178,44 +1178,41 @@ Async APIs\n     /**\n      * Creates one or many models.\n      * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return The list of created models\n+     * @return A {@link PagedFlux} of created models and the http response.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public Mono<List<ModelData>> createModels(List<String> models) { }\n-\n-    /**\n-     * Creates one or many models.\n-     * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return A REST response containing the list of created models.\n-     */\n-    @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public Mono<Response<List<ModelData>>> createModelsWithResponse(List<String> models) { }\n+    public PagedFlux<ModelData> createModels(List<String> models) { }\n \n     /**\n      * Gets a model, including the model metadata and the model definition.\n      * @param modelId The Id of the model.\n-     * @return The application/json model\n+     * @return The ModelData\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<ModelData> getModel(String modelId) { }\n \n     /**\n      * Gets a model, including the model metadata and the model definition asynchronously.\n      * @param modelId The Id of the model.\n-     * @return A REST response containing the model.\n+     * @return The ModelData and the http response\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<Response<ModelData>> getModelWithResponse(String modelId) { }\n-\n+   \n     /**\n      * Gets the list of models by iterating through a collection.\n-     * @param dependenciesFor The model Ids to have dependencies retrieved.\n-     * @param includeModelDefinition Whether to include the model definition in the result. If false, only the model metadata will be returned.\n-     * @param options The options to follow when listing the models. For example, the page size hint can be specified.\n-     * @return A {@link PagedFlux} of ModelData.\n+     * @return A {@link PagedFlux} of ModelData and the http response.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedFlux<ModelData> listModels(List<String> dependenciesFor, boolean includeModelDefinition, DigitalTwinModelsListOptions options) { }\n+    public PagedFlux<ModelData> listModels() { }\n+    \n+    /**\n+     * Gets the list of models by iterating through a collection.\n+     * @param listModelOptions The options to follow when listing the models. For example, the page size hint can be specified.\n+     * @return A {@link PagedFlux} of ModelData and the http response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> listModels(ListModelOptions listModelOptions) { }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8134cd35fa978dd34754717e2ae5695ffb4cf05"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Nzg3ODIwOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjowMDozNFrOHJVjiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjo0NzoxMFrOHKAdag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU1MjM5Mw==", "bodyText": "do we even need to mention this return?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r479552393", "createdAt": "2020-08-28T22:00:34Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -228,4 +234,149 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+\n+    //==================================================================================================================================================\n+    // Models APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Creates one or many models.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A {@link PagedFlux} of created models and the http response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> createModels(List<String> models) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> createModelsSinglePageAsync(models, context)),\n+            nextLink -> withContext(context -> Mono.empty()));\n+    }\n+\n+    PagedFlux<ModelData> createModels(List<String> models, Context context){\n+        return new PagedFlux<>(\n+            () -> createModelsSinglePageAsync(models, context),\n+            nextLink -> Mono.empty());\n+    }\n+\n+    Mono<PagedResponse<ModelData>> createModelsSinglePageAsync(List<String> models, Context context)\n+    {\n+        List<Object> modelsPayload = new ArrayList<>();\n+        for (String model: models) {\n+            try {\n+                modelsPayload.add(mapper.readValue(model, Object.class));\n+            }\n+            catch (JsonProcessingException e) {\n+                logger.error(\"Could not parse the model payload [%s]: %s\", model, e);\n+                return Mono.error(e);\n+            }\n+        }\n+\n+        return protocolLayer.getDigitalTwinModels().addWithResponseAsync(modelsPayload, context)\n+            .map(\n+                listResponse -> new PagedResponseBase<>(\n+                    listResponse.getRequest(),\n+                    listResponse.getStatusCode(),\n+                    listResponse.getHeaders(),\n+                    listResponse.getValue(),\n+                    null,\n+                    ((ResponseBase)listResponse).getDeserializedHeaders()));\n+    }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition.\n+     * @param modelId The Id of the model.\n+     * @return The ModelData\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<ModelData> getModel(String modelId) {\n+        return withContext(context -> getModelWithResponse(modelId, context))\n+            .flatMap(response -> Mono.just(response.getValue()));\n+    }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition.\n+     * @param modelId The Id of the model.\n+     * @return The ModelData and the http response\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<ModelData>> getModelWithResponse(String modelId) {\n+        return withContext(context -> getModelWithResponse(modelId, context));\n+    }\n+\n+    Mono<Response<ModelData>> getModelWithResponse(String modelId, Context context){\n+        return protocolLayer\n+            .getDigitalTwinModels()\n+            .getByIdWithResponseAsync(modelId, includeModelDefinition, context);\n+    }\n+\n+    /**\n+     * Gets the list of models by iterating through a collection.\n+     * @param listModelOptions The options to follow when listing the models. For example, the page size hint can be specified.\n+     * @return A {@link PagedFlux} of ModelData and the http response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> listModels(ListModelOptions listModelOptions) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listModelsSinglePageAsync(listModelOptions, context)),\n+            nextLink -> withContext(context -> listModelsNextSinglePageAsync(nextLink, context)));\n+    }\n+\n+    /**\n+     * Gets the list of models by iterating through a collection.\n+     * @return A {@link PagedFlux} of ModelData and the http response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> listModels() {\n+        return listModels(new ListModelOptions());\n+    }\n+\n+    PagedFlux<ModelData> listModels(Context context){\n+        return new PagedFlux<>(\n+            () -> listModelsSinglePageAsync(new ListModelOptions(), context),\n+            nextLink -> listModelsNextSinglePageAsync(nextLink, context));\n+    }\n+\n+    PagedFlux<ModelData> listModels(ListModelOptions listModelOptions, Context context){\n+        return new PagedFlux<>(\n+            () -> listModelsSinglePageAsync(listModelOptions, context),\n+            nextLink -> listModelsNextSinglePageAsync(nextLink, context));\n+    }\n+\n+    Mono<PagedResponse<ModelData>> listModelsSinglePageAsync(ListModelOptions listModelOptions, Context context){\n+        return protocolLayer.getDigitalTwinModels().listSinglePageAsync(\n+            listModelOptions.getDependenciesFor(),\n+            listModelOptions.getIncludeModelDefinition(),\n+            new DigitalTwinModelsListOptions().setMaxItemCount(listModelOptions.getMaxItemCount()),\n+            context);\n+    }\n+\n+    Mono<PagedResponse<ModelData>> listModelsNextSinglePageAsync(String nextLink, Context context){\n+        return protocolLayer.getDigitalTwinModels().listNextSinglePageAsync(nextLink, context);\n+    }\n+\n+    /**\n+     * Deletes a model.\n+     * @param modelId The id for the model. The id is globally unique and case sensitive.\n+     * @return An empty Mono", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36b8d0b78706ed663c4ac7683c54c341226136d8"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI1NTMzOA==", "bodyText": "Yes, we will get doc verification errors.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r480255338", "createdAt": "2020-08-31T16:47:10Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -228,4 +234,149 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+\n+    //==================================================================================================================================================\n+    // Models APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Creates one or many models.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A {@link PagedFlux} of created models and the http response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> createModels(List<String> models) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> createModelsSinglePageAsync(models, context)),\n+            nextLink -> withContext(context -> Mono.empty()));\n+    }\n+\n+    PagedFlux<ModelData> createModels(List<String> models, Context context){\n+        return new PagedFlux<>(\n+            () -> createModelsSinglePageAsync(models, context),\n+            nextLink -> Mono.empty());\n+    }\n+\n+    Mono<PagedResponse<ModelData>> createModelsSinglePageAsync(List<String> models, Context context)\n+    {\n+        List<Object> modelsPayload = new ArrayList<>();\n+        for (String model: models) {\n+            try {\n+                modelsPayload.add(mapper.readValue(model, Object.class));\n+            }\n+            catch (JsonProcessingException e) {\n+                logger.error(\"Could not parse the model payload [%s]: %s\", model, e);\n+                return Mono.error(e);\n+            }\n+        }\n+\n+        return protocolLayer.getDigitalTwinModels().addWithResponseAsync(modelsPayload, context)\n+            .map(\n+                listResponse -> new PagedResponseBase<>(\n+                    listResponse.getRequest(),\n+                    listResponse.getStatusCode(),\n+                    listResponse.getHeaders(),\n+                    listResponse.getValue(),\n+                    null,\n+                    ((ResponseBase)listResponse).getDeserializedHeaders()));\n+    }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition.\n+     * @param modelId The Id of the model.\n+     * @return The ModelData\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<ModelData> getModel(String modelId) {\n+        return withContext(context -> getModelWithResponse(modelId, context))\n+            .flatMap(response -> Mono.just(response.getValue()));\n+    }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition.\n+     * @param modelId The Id of the model.\n+     * @return The ModelData and the http response\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<ModelData>> getModelWithResponse(String modelId) {\n+        return withContext(context -> getModelWithResponse(modelId, context));\n+    }\n+\n+    Mono<Response<ModelData>> getModelWithResponse(String modelId, Context context){\n+        return protocolLayer\n+            .getDigitalTwinModels()\n+            .getByIdWithResponseAsync(modelId, includeModelDefinition, context);\n+    }\n+\n+    /**\n+     * Gets the list of models by iterating through a collection.\n+     * @param listModelOptions The options to follow when listing the models. For example, the page size hint can be specified.\n+     * @return A {@link PagedFlux} of ModelData and the http response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> listModels(ListModelOptions listModelOptions) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listModelsSinglePageAsync(listModelOptions, context)),\n+            nextLink -> withContext(context -> listModelsNextSinglePageAsync(nextLink, context)));\n+    }\n+\n+    /**\n+     * Gets the list of models by iterating through a collection.\n+     * @return A {@link PagedFlux} of ModelData and the http response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> listModels() {\n+        return listModels(new ListModelOptions());\n+    }\n+\n+    PagedFlux<ModelData> listModels(Context context){\n+        return new PagedFlux<>(\n+            () -> listModelsSinglePageAsync(new ListModelOptions(), context),\n+            nextLink -> listModelsNextSinglePageAsync(nextLink, context));\n+    }\n+\n+    PagedFlux<ModelData> listModels(ListModelOptions listModelOptions, Context context){\n+        return new PagedFlux<>(\n+            () -> listModelsSinglePageAsync(listModelOptions, context),\n+            nextLink -> listModelsNextSinglePageAsync(nextLink, context));\n+    }\n+\n+    Mono<PagedResponse<ModelData>> listModelsSinglePageAsync(ListModelOptions listModelOptions, Context context){\n+        return protocolLayer.getDigitalTwinModels().listSinglePageAsync(\n+            listModelOptions.getDependenciesFor(),\n+            listModelOptions.getIncludeModelDefinition(),\n+            new DigitalTwinModelsListOptions().setMaxItemCount(listModelOptions.getMaxItemCount()),\n+            context);\n+    }\n+\n+    Mono<PagedResponse<ModelData>> listModelsNextSinglePageAsync(String nextLink, Context context){\n+        return protocolLayer.getDigitalTwinModels().listNextSinglePageAsync(nextLink, context);\n+    }\n+\n+    /**\n+     * Deletes a model.\n+     * @param modelId The id for the model. The id is globally unique and case sensitive.\n+     * @return An empty Mono", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU1MjM5Mw=="}, "originalCommit": {"oid": "36b8d0b78706ed663c4ac7683c54c341226136d8"}, "originalPosition": 154}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1436, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}