{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMzU4OTEw", "number": 12524, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMzoyMzo1OFrOEI_Zxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoyNDo1MVrOEJwe7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODYyODU0OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledDataAsync.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMzoyMzo1OFrOGpSgMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNTowNTo0N1rOGpkYKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk0Nzk1Mw==", "bodyText": "nit: weird formatting here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12524#discussion_r445947953", "createdAt": "2020-06-26T03:23:58Z", "author": {"login": "kristapratico"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledDataAsync.java", "diffHunk": "@@ -79,21 +89,36 @@ public static void main(String[] args) throws IOException {\n                 }\n             });\n \n-        //  The main difference is found in the labels of its fields\n-        // The form recognized with a labeled model will have the labels it was trained with,\n-        // the unlabeled one will be denoted with indices\n         System.out.println(\"--------Recognizing forms with labeled custom model--------\");\n+        // With a form recognized by a model trained with labels, the `formField.getName()` key will be its label\n+        // given during\n+        // training\n+        // `value` will contain the typed field value and `valueText` will contain information about the field value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1870b7fa96975fa889a9719e7b0c652aeb8e2690"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAwMDM3Mg==", "bodyText": "Could be the diff mode, \n  \n    \n      azure-sdk-for-java/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledDataAsync.java\n    \n    \n         Line 94\n      in\n      4364c78\n    \n    \n    \n    \n\n        \n          \n           // given during training", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12524#discussion_r446000372", "createdAt": "2020-06-26T06:52:54Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledDataAsync.java", "diffHunk": "@@ -79,21 +89,36 @@ public static void main(String[] args) throws IOException {\n                 }\n             });\n \n-        //  The main difference is found in the labels of its fields\n-        // The form recognized with a labeled model will have the labels it was trained with,\n-        // the unlabeled one will be denoted with indices\n         System.out.println(\"--------Recognizing forms with labeled custom model--------\");\n+        // With a form recognized by a model trained with labels, the `formField.getName()` key will be its label\n+        // given during\n+        // training\n+        // `value` will contain the typed field value and `valueText` will contain information about the field value", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk0Nzk1Mw=="}, "originalCommit": {"oid": "1870b7fa96975fa889a9719e7b0c652aeb8e2690"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0MDgxMA==", "bodyText": "Weird! Okay ignore me :)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12524#discussion_r446240810", "createdAt": "2020-06-26T15:05:47Z", "author": {"login": "kristapratico"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledDataAsync.java", "diffHunk": "@@ -79,21 +89,36 @@ public static void main(String[] args) throws IOException {\n                 }\n             });\n \n-        //  The main difference is found in the labels of its fields\n-        // The form recognized with a labeled model will have the labels it was trained with,\n-        // the unlabeled one will be denoted with indices\n         System.out.println(\"--------Recognizing forms with labeled custom model--------\");\n+        // With a form recognized by a model trained with labels, the `formField.getName()` key will be its label\n+        // given during\n+        // training\n+        // `value` will contain the typed field value and `valueText` will contain information about the field value", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk0Nzk1Mw=="}, "originalCommit": {"oid": "1870b7fa96975fa889a9719e7b0c652aeb8e2690"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODYyOTExOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledDataAsync.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMzoyNDoyMlrOGpSgfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMzoyNDoyMlrOGpSgfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk0ODAzMQ==", "bodyText": "same here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12524#discussion_r445948031", "createdAt": "2020-06-26T03:24:22Z", "author": {"login": "kristapratico"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledDataAsync.java", "diffHunk": "@@ -112,23 +137,36 @@ public static void main(String[] args) throws IOException {\n             unLabeledForm.getFields().forEach((label, formField) -> {\n                 final StringBuilder boundingBoxStr = new StringBuilder();\n                 if (formField.getValueText().getBoundingBox() != null) {\n-                    formField.getValueText().getBoundingBox().getPoints().forEach(point ->\n-                        boundingBoxStr.append(String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())));\n+                    formField.getValueText().getBoundingBox().getPoints().stream().map(point ->\n+                        String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())).forEach(boundingBoxStr::append);\n                 }\n \n                 final StringBuilder boundingBoxLabelStr = new StringBuilder();\n                 if (formField.getLabelText() != null && formField.getLabelText().getBoundingBox() != null) {\n-                    formField.getLabelText().getBoundingBox().getPoints().forEach(point ->\n-                        boundingBoxLabelStr.append(String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())));\n+                    formField.getLabelText().getBoundingBox().getPoints().stream().map(point ->\n+                        String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())).forEach(boundingBoxStr::append);\n                 }\n                 System.out.printf(\"Field %s has label %s  within bounding box %s with a confidence score \"\n                         + \"of %.2f.%n\",\n                     label, formField.getLabelText().getText(), boundingBoxLabelStr, formField.getConfidence());\n \n-                System.out.printf(\"Field %s has value %s based on %s within bounding box %s with a confidence score \"\n-                        + \"of %.2f.%n\",\n+                System.out.printf(\"Field %s has value %s based on %s within bounding box %s with a confidence \"\n+                        + \"score of %.2f.%n\",\n                     label, formField.getFieldValue(), formField.getValueText().getText(), boundingBoxStr,\n                     formField.getConfidence());\n+\n+                // Find the value of a specific unlabeled field. The specific key \"Vendor Name:\" provided in the\n+                // example\n+                // will only be found if sample training forms used", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1870b7fa96975fa889a9719e7b0c652aeb8e2690"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODYzMTg3OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMzoyNjoyOVrOGpSiDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoyMzo1NFrOGqay5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk0ODQzMA==", "bodyText": "Just FYI in case you didn't see... Mariana is going to check with Ted to see if we can get the aka.ms link working - the redirection seems to be making the training fail.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12524#discussion_r445948430", "createdAt": "2020-06-26T03:26:29Z", "author": {"login": "kristapratico"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java", "diffHunk": "@@ -17,6 +18,14 @@\n /**\n  * Sample to show the differences in output that arise when RecognizeCustomForms\n  * is called with custom models trained with labeled and unlabeled data.\n+ * For this sample, you can use the training forms found in https://aka.ms/azsdk/formrecognizer/docs/trainingdocs for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1870b7fa96975fa889a9719e7b0c652aeb8e2690"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5NzE1OQ==", "bodyText": "yeah, looked at the other PR comments, will wait until this is figured out.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12524#discussion_r445997159", "createdAt": "2020-06-26T06:44:09Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java", "diffHunk": "@@ -17,6 +18,14 @@\n /**\n  * Sample to show the differences in output that arise when RecognizeCustomForms\n  * is called with custom models trained with labeled and unlabeled data.\n+ * For this sample, you can use the training forms found in https://aka.ms/azsdk/formrecognizer/docs/trainingdocs for", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk0ODQzMA=="}, "originalCommit": {"oid": "1870b7fa96975fa889a9719e7b0c652aeb8e2690"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI1NTM4NQ==", "bodyText": "We are good to go with the link. Ted fixed it :)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12524#discussion_r446255385", "createdAt": "2020-06-26T15:31:23Z", "author": {"login": "maririos"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java", "diffHunk": "@@ -17,6 +18,14 @@\n /**\n  * Sample to show the differences in output that arise when RecognizeCustomForms\n  * is called with custom models trained with labeled and unlabeled data.\n+ * For this sample, you can use the training forms found in https://aka.ms/azsdk/formrecognizer/docs/trainingdocs for", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk0ODQzMA=="}, "originalCommit": {"oid": "1870b7fa96975fa889a9719e7b0c652aeb8e2690"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzMjM4OA==", "bodyText": "I know.. sorry, I spoke too soon :(", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12524#discussion_r447132388", "createdAt": "2020-06-29T17:23:54Z", "author": {"login": "maririos"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java", "diffHunk": "@@ -17,6 +18,14 @@\n /**\n  * Sample to show the differences in output that arise when RecognizeCustomForms\n  * is called with custom models trained with labeled and unlabeled data.\n+ * For this sample, you can use the training forms found in https://aka.ms/azsdk/formrecognizer/docs/trainingdocs for", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk0ODQzMA=="}, "originalCommit": {"oid": "1870b7fa96975fa889a9719e7b0c652aeb8e2690"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjY2NDg5OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledDataAsync.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoyMzozM1rOGqayFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxODowMDo1OVrOGqcGMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzMjE4Mw==", "bodyText": "remove?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12524#discussion_r447132183", "createdAt": "2020-06-29T17:23:33Z", "author": {"login": "maririos"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledDataAsync.java", "diffHunk": "@@ -112,23 +137,37 @@ public static void main(String[] args) throws IOException {\n             unLabeledForm.getFields().forEach((label, formField) -> {\n                 final StringBuilder boundingBoxStr = new StringBuilder();\n                 if (formField.getValueText().getBoundingBox() != null) {\n-                    formField.getValueText().getBoundingBox().getPoints().forEach(point ->\n-                        boundingBoxStr.append(String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())));\n+                    formField.getValueText().getBoundingBox().getPoints().stream().map(point ->\n+                        String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())).forEach(boundingBoxStr::append);\n                 }\n \n                 final StringBuilder boundingBoxLabelStr = new StringBuilder();\n                 if (formField.getLabelText() != null && formField.getLabelText().getBoundingBox() != null) {\n-                    formField.getLabelText().getBoundingBox().getPoints().forEach(point ->\n-                        boundingBoxLabelStr.append(String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())));\n+                    formField.getLabelText().getBoundingBox().getPoints().stream().map(point ->\n+                        String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())).forEach(boundingBoxStr::append);\n                 }\n                 System.out.printf(\"Field %s has label %s  within bounding box %s with a confidence score \"\n                         + \"of %.2f.%n\",\n                     label, formField.getLabelText().getText(), boundingBoxLabelStr, formField.getConfidence());\n \n-                System.out.printf(\"Field %s has value %s based on %s within bounding box %s with a confidence score \"\n-                        + \"of %.2f.%n\",\n+                System.out.printf(\"Field %s has value %s based on %s within bounding box %s with a confidence \"\n+                        + \"score of %.2f.%n\",\n                     label, formField.getFieldValue(), formField.getValueText().getText(), boundingBoxStr,\n                     formField.getConfidence());\n+\n+                // Find the value of a specific unlabeled field. The specific key \"Vendor Name:\" provided in the\n+                // example will only be found if sample training forms used\n+                unLabeledForm.getFields().entrySet()\n+                    .stream()\n+                    //filter by label text\n+                    .filter(formFieldEntry -> \"Vendor Name:\".equals(formFieldEntry.getValue().getLabelText().getText()))\n+                    .findAny()\n+                    .ifPresent(formFieldEntry ->\n+                        System.out.printf(\"The Vendor name is: %s%n\", formFieldEntry.getValue()));\n+                    // @since 9\n+                    // .ifPresentOrElse(\n+                    //     formFieldEntry -> System.out.printf(\"The Vendor name is: %s%n\", formFieldEntry.getValue()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4217ac1cad071c81fcef897dc1484ed150a8022a"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE0NTI3NA==", "bodyText": "I think with Java samples we want to start showing the easier way of doing things which are usually with higher versions of the Java language. But since our support needs to be catered to atleast Java 8 we show the Java 8 way and the other way is commented.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12524#discussion_r447145274", "createdAt": "2020-06-29T17:46:32Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledDataAsync.java", "diffHunk": "@@ -112,23 +137,37 @@ public static void main(String[] args) throws IOException {\n             unLabeledForm.getFields().forEach((label, formField) -> {\n                 final StringBuilder boundingBoxStr = new StringBuilder();\n                 if (formField.getValueText().getBoundingBox() != null) {\n-                    formField.getValueText().getBoundingBox().getPoints().forEach(point ->\n-                        boundingBoxStr.append(String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())));\n+                    formField.getValueText().getBoundingBox().getPoints().stream().map(point ->\n+                        String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())).forEach(boundingBoxStr::append);\n                 }\n \n                 final StringBuilder boundingBoxLabelStr = new StringBuilder();\n                 if (formField.getLabelText() != null && formField.getLabelText().getBoundingBox() != null) {\n-                    formField.getLabelText().getBoundingBox().getPoints().forEach(point ->\n-                        boundingBoxLabelStr.append(String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())));\n+                    formField.getLabelText().getBoundingBox().getPoints().stream().map(point ->\n+                        String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())).forEach(boundingBoxStr::append);\n                 }\n                 System.out.printf(\"Field %s has label %s  within bounding box %s with a confidence score \"\n                         + \"of %.2f.%n\",\n                     label, formField.getLabelText().getText(), boundingBoxLabelStr, formField.getConfidence());\n \n-                System.out.printf(\"Field %s has value %s based on %s within bounding box %s with a confidence score \"\n-                        + \"of %.2f.%n\",\n+                System.out.printf(\"Field %s has value %s based on %s within bounding box %s with a confidence \"\n+                        + \"score of %.2f.%n\",\n                     label, formField.getFieldValue(), formField.getValueText().getText(), boundingBoxStr,\n                     formField.getConfidence());\n+\n+                // Find the value of a specific unlabeled field. The specific key \"Vendor Name:\" provided in the\n+                // example will only be found if sample training forms used\n+                unLabeledForm.getFields().entrySet()\n+                    .stream()\n+                    //filter by label text\n+                    .filter(formFieldEntry -> \"Vendor Name:\".equals(formFieldEntry.getValue().getLabelText().getText()))\n+                    .findAny()\n+                    .ifPresent(formFieldEntry ->\n+                        System.out.printf(\"The Vendor name is: %s%n\", formFieldEntry.getValue()));\n+                    // @since 9\n+                    // .ifPresentOrElse(\n+                    //     formFieldEntry -> System.out.printf(\"The Vendor name is: %s%n\", formFieldEntry.getValue()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzMjE4Mw=="}, "originalCommit": {"oid": "4217ac1cad071c81fcef897dc1484ed150a8022a"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE1MTg1NA==", "bodyText": "ohhh and does  @since 9 signals that? or should there be a comment with that info?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12524#discussion_r447151854", "createdAt": "2020-06-29T17:57:48Z", "author": {"login": "maririos"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledDataAsync.java", "diffHunk": "@@ -112,23 +137,37 @@ public static void main(String[] args) throws IOException {\n             unLabeledForm.getFields().forEach((label, formField) -> {\n                 final StringBuilder boundingBoxStr = new StringBuilder();\n                 if (formField.getValueText().getBoundingBox() != null) {\n-                    formField.getValueText().getBoundingBox().getPoints().forEach(point ->\n-                        boundingBoxStr.append(String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())));\n+                    formField.getValueText().getBoundingBox().getPoints().stream().map(point ->\n+                        String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())).forEach(boundingBoxStr::append);\n                 }\n \n                 final StringBuilder boundingBoxLabelStr = new StringBuilder();\n                 if (formField.getLabelText() != null && formField.getLabelText().getBoundingBox() != null) {\n-                    formField.getLabelText().getBoundingBox().getPoints().forEach(point ->\n-                        boundingBoxLabelStr.append(String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())));\n+                    formField.getLabelText().getBoundingBox().getPoints().stream().map(point ->\n+                        String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())).forEach(boundingBoxStr::append);\n                 }\n                 System.out.printf(\"Field %s has label %s  within bounding box %s with a confidence score \"\n                         + \"of %.2f.%n\",\n                     label, formField.getLabelText().getText(), boundingBoxLabelStr, formField.getConfidence());\n \n-                System.out.printf(\"Field %s has value %s based on %s within bounding box %s with a confidence score \"\n-                        + \"of %.2f.%n\",\n+                System.out.printf(\"Field %s has value %s based on %s within bounding box %s with a confidence \"\n+                        + \"score of %.2f.%n\",\n                     label, formField.getFieldValue(), formField.getValueText().getText(), boundingBoxStr,\n                     formField.getConfidence());\n+\n+                // Find the value of a specific unlabeled field. The specific key \"Vendor Name:\" provided in the\n+                // example will only be found if sample training forms used\n+                unLabeledForm.getFields().entrySet()\n+                    .stream()\n+                    //filter by label text\n+                    .filter(formFieldEntry -> \"Vendor Name:\".equals(formFieldEntry.getValue().getLabelText().getText()))\n+                    .findAny()\n+                    .ifPresent(formFieldEntry ->\n+                        System.out.printf(\"The Vendor name is: %s%n\", formFieldEntry.getValue()));\n+                    // @since 9\n+                    // .ifPresentOrElse(\n+                    //     formFieldEntry -> System.out.printf(\"The Vendor name is: %s%n\", formFieldEntry.getValue()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzMjE4Mw=="}, "originalCommit": {"oid": "4217ac1cad071c81fcef897dc1484ed150a8022a"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE1MzcxNQ==", "bodyText": "yes,  that's a common Javadoc that signals the Java version info.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12524#discussion_r447153715", "createdAt": "2020-06-29T18:00:59Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledDataAsync.java", "diffHunk": "@@ -112,23 +137,37 @@ public static void main(String[] args) throws IOException {\n             unLabeledForm.getFields().forEach((label, formField) -> {\n                 final StringBuilder boundingBoxStr = new StringBuilder();\n                 if (formField.getValueText().getBoundingBox() != null) {\n-                    formField.getValueText().getBoundingBox().getPoints().forEach(point ->\n-                        boundingBoxStr.append(String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())));\n+                    formField.getValueText().getBoundingBox().getPoints().stream().map(point ->\n+                        String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())).forEach(boundingBoxStr::append);\n                 }\n \n                 final StringBuilder boundingBoxLabelStr = new StringBuilder();\n                 if (formField.getLabelText() != null && formField.getLabelText().getBoundingBox() != null) {\n-                    formField.getLabelText().getBoundingBox().getPoints().forEach(point ->\n-                        boundingBoxLabelStr.append(String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())));\n+                    formField.getLabelText().getBoundingBox().getPoints().stream().map(point ->\n+                        String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())).forEach(boundingBoxStr::append);\n                 }\n                 System.out.printf(\"Field %s has label %s  within bounding box %s with a confidence score \"\n                         + \"of %.2f.%n\",\n                     label, formField.getLabelText().getText(), boundingBoxLabelStr, formField.getConfidence());\n \n-                System.out.printf(\"Field %s has value %s based on %s within bounding box %s with a confidence score \"\n-                        + \"of %.2f.%n\",\n+                System.out.printf(\"Field %s has value %s based on %s within bounding box %s with a confidence \"\n+                        + \"score of %.2f.%n\",\n                     label, formField.getFieldValue(), formField.getValueText().getText(), boundingBoxStr,\n                     formField.getConfidence());\n+\n+                // Find the value of a specific unlabeled field. The specific key \"Vendor Name:\" provided in the\n+                // example will only be found if sample training forms used\n+                unLabeledForm.getFields().entrySet()\n+                    .stream()\n+                    //filter by label text\n+                    .filter(formFieldEntry -> \"Vendor Name:\".equals(formFieldEntry.getValue().getLabelText().getText()))\n+                    .findAny()\n+                    .ifPresent(formFieldEntry ->\n+                        System.out.printf(\"The Vendor name is: %s%n\", formFieldEntry.getValue()));\n+                    // @since 9\n+                    // .ifPresentOrElse(\n+                    //     formFieldEntry -> System.out.printf(\"The Vendor name is: %s%n\", formFieldEntry.getValue()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzMjE4Mw=="}, "originalCommit": {"oid": "4217ac1cad071c81fcef897dc1484ed150a8022a"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjY2OTkxOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoyNDo1MVrOGqa1IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoyNDo1MVrOGqa1IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzMjk2MQ==", "bodyText": "same here ... not sure", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12524#discussion_r447132961", "createdAt": "2020-06-29T17:24:51Z", "author": {"login": "maririos"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java", "diffHunk": "@@ -36,51 +44,68 @@ public static void main(String[] args) throws IOException {\n             .buildClient();\n \n         File analyzeFile = new File(\"../formrecognizer/azure-ai-formrecognizer/src/samples/java/sample-forms/\"\n-            + \"forms/Invoice_6.pdf\");\n+            + \"forms/Form_1.jpg\");\n \n         List<RecognizedForm> formsWithLabeledModel =\n             client.beginRecognizeCustomForms(\n                 new RecognizeCustomFormsOptions(new FileInputStream(analyzeFile), analyzeFile.length(),\n-                \"{labeled_model_Id}\").setFormContentType(FormContentType.APPLICATION_PDF)\n+                    \"{labeled_model_Id}\").setFormContentType(FormContentType.APPLICATION_PDF)\n                     .setIncludeTextContent(true).setPollInterval(Duration.ofSeconds(5))).getFinalResult();\n         List<RecognizedForm> formsWithUnlabeledModel =\n-            client.beginRecognizeCustomForms(new FileInputStream(analyzeFile), analyzeFile.length(), \"{unlabeled_model_Id}\",\n-                    FormContentType.APPLICATION_PDF).getFinalResult();\n+            client.beginRecognizeCustomForms(new FileInputStream(analyzeFile), analyzeFile.length(),\n+                \"{unlabeled_model_Id}\",\n+                FormContentType.APPLICATION_PDF).getFinalResult();\n \n-        //  The main difference is found in the labels of its fields\n-        // The form recognized with a labeled model will have the labels it was trained with,\n-        // the unlabeled one will be denoted with indices\n         System.out.println(\"--------Recognizing forms with labeled custom model--------\");\n \n-        // With a form recognized by a model trained with labels, this 'name' key will be its\n-        // training-time label, otherwise it will be denoted by numeric indices.\n-        // Label data is not returned for model trained with labels.\n+        // With a form recognized by a model trained with labels, the `formField.getName()` key will be its label given\n+        // during training\n+        // `value` will contain the typed field value and `valueText` will contain information about the field value\n+        // `labelText` is not populated for a model trained with labels as this was the given label used to extract\n+        // the key\n         formsWithLabeledModel.forEach(labeledForm -> labeledForm.getFields().forEach((label, formField) -> {\n             final StringBuilder boundingBoxStr = new StringBuilder();\n             if (formField.getValueText().getBoundingBox() != null) {\n-                formField.getValueText().getBoundingBox().getPoints().forEach(point ->\n-                    boundingBoxStr.append(String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())));\n+                formField.getValueText().getBoundingBox().getPoints().stream().map(point ->\n+                    String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())).forEach(boundingBoxStr::append);\n             }\n             System.out.printf(\"Field %s has value %s based on %s within bounding box %s with a confidence score \"\n                     + \"of %.2f.%n\",\n                 label, formField.getFieldValue(), formField.getValueText().getText(), boundingBoxStr,\n                 formField.getConfidence());\n+\n+            // Find the value of a specific labeled field.\n+            System.out.println(\"Value for a specific labeled field using the training-time label:\");\n+            labeledForm.getFields().entrySet()\n+                .stream()\n+                .filter(formFieldEntry -> \"MerchantName\".equals(formFieldEntry.getKey())) // filter by form field key\n+                .findAny()\n+                .ifPresent(formFieldEntry ->\n+                    System.out.printf(\"The Merchant name is: %s%n\", formFieldEntry.getValue()));\n+                // @since 9\n+                // .ifPresentOrElse(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4217ac1cad071c81fcef897dc1484ed150a8022a"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3754, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}