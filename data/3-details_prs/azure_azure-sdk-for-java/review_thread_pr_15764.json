{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzODMzMTY5", "number": 15764, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwODoxODo0NlrOEsQwdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNDo0MTo1OFrOEtUAQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODQ3MzUwOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/autoconfigure/aad/AADAuthenticationAutoConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwODoxODo0NlrOHfePMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwOTozMDowMVrOHfeoPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc2MzMxNQ==", "bodyText": "Assertions.assertThat(endpoints).hasSize(4);\nassertThat(endpoints.get(\"cn\")).isNotNull()\n\ncan we use the same format?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15764#discussion_r502763315", "createdAt": "2020-10-10T08:18:46Z", "author": {"login": "backwind1233"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/autoconfigure/aad/AADAuthenticationAutoConfigurationTest.java", "diffHunk": "@@ -54,7 +55,7 @@ public void serviceEndpointsCanBeOverridden() {\n                 assertThat(serviceEndpointsProperties.getEndpoints()).isNotEmpty();\n \n                 final Map<String, ServiceEndpoints> endpoints = serviceEndpointsProperties.getEndpoints();\n-                assertThat(endpoints).hasSize(4);\n+                Assertions.assertThat(endpoints).hasSize(4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4de9ce7e6f7590b6b9e1b6380b409cc457da0c9b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc2OTcyNA==", "bodyText": "done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15764#discussion_r502769724", "createdAt": "2020-10-10T09:30:01Z", "author": {"login": "wujack778"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/autoconfigure/aad/AADAuthenticationAutoConfigurationTest.java", "diffHunk": "@@ -54,7 +55,7 @@ public void serviceEndpointsCanBeOverridden() {\n                 assertThat(serviceEndpointsProperties.getEndpoints()).isNotEmpty();\n \n                 final Map<String, ServiceEndpoints> endpoints = serviceEndpointsProperties.getEndpoints();\n-                assertThat(endpoints).hasSize(4);\n+                Assertions.assertThat(endpoints).hasSize(4);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc2MzMxNQ=="}, "originalCommit": {"oid": "4de9ce7e6f7590b6b9e1b6380b409cc457da0c9b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODQ3OTIyOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/telemetry/TelemetryEventData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwODoyNjoxNlrOHfeR6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwODoyNjoxNlrOHfeR6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc2NDAwOQ==", "bodyText": "can we remove the blank lines?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15764#discussion_r502764009", "createdAt": "2020-10-10T08:26:16Z", "author": {"login": "backwind1233"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/telemetry/TelemetryEventData.java", "diffHunk": "@@ -27,6 +27,7 @@\n \n     private final String time;\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4de9ce7e6f7590b6b9e1b6380b409cc457da0c9b"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODQ4MjA4OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/cloudfoundry/environment/VcapServiceConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwODoyOTozOVrOHfeTKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwODoyOTozOVrOHfeTKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc2NDMzMA==", "bodyText": "can we remove the blank lines here ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15764#discussion_r502764330", "createdAt": "2020-10-10T08:29:39Z", "author": {"login": "backwind1233"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/cloudfoundry/environment/VcapServiceConfig.java", "diffHunk": "@@ -25,66 +28,82 @@\n     @JsonProperty(\"volume_mounts\")\n     private String[] volumeMounts;\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4de9ce7e6f7590b6b9e1b6380b409cc457da0c9b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODQ5MTMyOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/keyvault/spring/KeyVaultEnvironmentPostProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwODo0MzoxMlrOHfeXew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwOToxNjo1NFrOHfejjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc2NTQzNQ==", "bodyText": "can we reformat the code here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15764#discussion_r502765435", "createdAt": "2020-10-10T08:43:12Z", "author": {"login": "backwind1233"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/keyvault/spring/KeyVaultEnvironmentPostProcessor.java", "diffHunk": "@@ -50,29 +50,28 @@ public void postProcessEnvironment(ConfigurableEnvironment environment, SpringAp\n \n     /**\n      * Is the key vault enabled.\n-     *\n-     * @param environment    the environment.\n+     * @param environment  the environment.\n      * @param normalizedName the normalized name used to differentiate between\n      *                       multiple key vaults.\n      * @return true if the key vault is enabled, false otherwise.\n      */\n     private boolean isKeyVaultEnabled(ConfigurableEnvironment environment, String normalizedName) {\n         return environment.getProperty(\n-                KeyVaultProperties.getPropertyName(normalizedName, Property.ENABLED),\n+                KeyVaultProperties.getPropertyName(normalizedName, KeyVaultProperties.Property.ENABLED),\n                 Boolean.class,\n                 true)\n-            && environment.getProperty(KeyVaultProperties.getPropertyName(normalizedName, Property.URI)) != null\n+            && environment.getProperty(KeyVaultProperties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4de9ce7e6f7590b6b9e1b6380b409cc457da0c9b"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc2ODUyNQ==", "bodyText": "there is a linelength check .", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15764#discussion_r502768525", "createdAt": "2020-10-10T09:16:54Z", "author": {"login": "wujack778"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/keyvault/spring/KeyVaultEnvironmentPostProcessor.java", "diffHunk": "@@ -50,29 +50,28 @@ public void postProcessEnvironment(ConfigurableEnvironment environment, SpringAp\n \n     /**\n      * Is the key vault enabled.\n-     *\n-     * @param environment    the environment.\n+     * @param environment  the environment.\n      * @param normalizedName the normalized name used to differentiate between\n      *                       multiple key vaults.\n      * @return true if the key vault is enabled, false otherwise.\n      */\n     private boolean isKeyVaultEnabled(ConfigurableEnvironment environment, String normalizedName) {\n         return environment.getProperty(\n-                KeyVaultProperties.getPropertyName(normalizedName, Property.ENABLED),\n+                KeyVaultProperties.getPropertyName(normalizedName, KeyVaultProperties.Property.ENABLED),\n                 Boolean.class,\n                 true)\n-            && environment.getProperty(KeyVaultProperties.getPropertyName(normalizedName, Property.URI)) != null\n+            && environment.getProperty(KeyVaultProperties", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc2NTQzNQ=="}, "originalCommit": {"oid": "4de9ce7e6f7590b6b9e1b6380b409cc457da0c9b"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTQ5MTIyOnYy", "diffSide": "LEFT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/autoconfigure/cosmos/CosmosHealthIndicator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNDo0MTo1OFrOHhB-vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNTowNDowN1rOHhCUhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM5NzUwMQ==", "bodyText": "Does the @Autowired annotation can be removed here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15764#discussion_r504397501", "createdAt": "2020-10-14T04:41:58Z", "author": {"login": "backwind1233"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/autoconfigure/cosmos/CosmosHealthIndicator.java", "diffHunk": "@@ -21,13 +20,14 @@\n public class CosmosHealthIndicator extends AbstractHealthIndicator {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(CosmosHealthIndicator.class);\n+\n     @Value(\"${azure.cosmos.database}\")\n     private String dbName;\n+\n     @Value(\"${azure.cosmos.uri}\")\n     private String uri;\n \n-    @Autowired", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "821f8530eff969770d11c18d5be5e53a4d49746d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQwMzA3Nw==", "bodyText": "Yes, the field is initialized by the constructor.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15764#discussion_r504403077", "createdAt": "2020-10-14T05:04:07Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/autoconfigure/cosmos/CosmosHealthIndicator.java", "diffHunk": "@@ -21,13 +20,14 @@\n public class CosmosHealthIndicator extends AbstractHealthIndicator {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(CosmosHealthIndicator.class);\n+\n     @Value(\"${azure.cosmos.database}\")\n     private String dbName;\n+\n     @Value(\"${azure.cosmos.uri}\")\n     private String uri;\n \n-    @Autowired", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM5NzUwMQ=="}, "originalCommit": {"oid": "821f8530eff969770d11c18d5be5e53a4d49746d"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 806, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}