{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNTU1MzM0", "number": 10022, "title": "Add support for receiving from Subscription", "bodyText": "Adds support for receiving from subscriptions.\nAdds a clean up phase for tests. In the case that they fail, we should clear the queue.. else subsequent tests will fail.\n\nFixes #9883", "createdAt": "2020-04-09T17:35:09Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10022", "merged": true, "mergeCommit": {"oid": "bba376b6fb6fa40ee82c3bfeeef1113f15c1a446"}, "closed": true, "closedAt": "2020-04-13T07:51:34Z", "author": {"login": "conniey"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWF13xgBqjMyMjAzODU2MDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXJ4i_gBqjMyMjYyMjg3ODg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "382cfab36ed1848d0d1f907535a3cea3ac3f0522", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/382cfab36ed1848d0d1f907535a3cea3ac3f0522", "committedDate": "2020-04-09T21:38:36Z", "message": "Remembering to clear receive queues."}, "afterCommit": {"oid": "79c670bede4b5c37c5c7a70bd66219ad8e792a2a", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/79c670bede4b5c37c5c7a70bd66219ad8e792a2a", "committedDate": "2020-04-10T00:20:39Z", "message": "Remembering to clear receive queues."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "79c670bede4b5c37c5c7a70bd66219ad8e792a2a", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/79c670bede4b5c37c5c7a70bd66219ad8e792a2a", "committedDate": "2020-04-10T00:20:39Z", "message": "Remembering to clear receive queues."}, "afterCommit": {"oid": "dc91291afd5d646a385d8d5126a7446f09831bb0", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/dc91291afd5d646a385d8d5126a7446f09831bb0", "committedDate": "2020-04-10T00:26:32Z", "message": "Fix tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNTI0Mzc4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10022#pullrequestreview-391524378", "createdAt": "2020-04-10T16:09:55Z", "commit": {"oid": "dc91291afd5d646a385d8d5126a7446f09831bb0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjowOTo1NVrOGD-vNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjowOTo1NVrOGD-vNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgyNjgwNg==", "bodyText": "It is confusing to call it SUBSCRIPTION in sender. But I understand why you have done it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10022#discussion_r406826806", "createdAt": "2020-04-10T16:09:55Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -432,7 +433,7 @@ public ServiceBusSenderAsyncClient buildAsyncClient() {\n                 case QUEUE:\n                     entityName = queueName;\n                     break;\n-                case TOPIC:\n+                case SUBSCRIPTION:\n                     entityName = topicName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc91291afd5d646a385d8d5126a7446f09831bb0"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNTI4MTU1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10022#pullrequestreview-391528155", "createdAt": "2020-04-10T16:17:22Z", "commit": {"oid": "dc91291afd5d646a385d8d5126a7446f09831bb0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjoxNzoyM1rOGD-7tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjozMTowOVrOGD_SHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMDAwNw==", "bodyText": "Did you miss using sendMessage(messageToSend) here  and  adding timeout?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10022#discussion_r406830007", "createdAt": "2020-04-10T16:17:23Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -476,11 +523,14 @@ void sendReceiveMessageWithVariousPropertyTypes() {\n         sentProperties.put(\"UUIDProperty\", UUID.randomUUID());\n         sentProperties.put(\"StringProperty\", \"string\");\n \n-        sender.send(messageToSend).block(TIMEOUT);\n+        sender.send(messageToSend);\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc91291afd5d646a385d8d5126a7446f09831bb0"}, "originalPosition": 607}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMzYxNg==", "bodyText": "I can see that quickly we will have to change this to include other input parameters, for example\nqueuename / topic names , sessionId for receivers . So instead of taking taking just one parameters entityType, it should take a bag of things and  use that  bag to create receivers.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10022#discussion_r406833616", "createdAt": "2020-04-10T16:25:58Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientIntegrationTest.java", "diffHunk": "@@ -62,6 +96,47 @@ void nonSessionMessageBatch() {\n         for (ServiceBusMessage message : messages) {\n             Assertions.assertTrue(batch.tryAdd(message));\n         }\n+\n         sender.send(batch);\n+\n+        for (int i = 0; i < messages.size(); i++) {\n+            messagesPending.incrementAndGet();\n+        }\n+    }\n+\n+    void setSenderAndReceiver(MessagingEntityType entityType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc91291afd5d646a385d8d5126a7446f09831bb0"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzNTc0MQ==", "bodyText": "Why we are not using TIMEOUT ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10022#discussion_r406835741", "createdAt": "2020-04-10T16:31:09Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -22,178 +24,165 @@\n import java.util.UUID;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n import java.util.stream.Stream;\n \n+import static com.azure.messaging.servicebus.TestUtils.MESSAGE_POSITION_ID;\n import static com.azure.messaging.servicebus.TestUtils.MESSAGE_TRACKING_ID;\n import static com.azure.messaging.servicebus.TestUtils.getServiceBusMessage;\n import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * Integration tests for {@link ServiceBusReceiverAsyncClient} from queues or subscriptions.\n+ */\n class ServiceBusReceiverAsyncClientIntegrationTest extends IntegrationTestBase {\n-    private static final String CONTENTS = \"Test-contents\";\n+    private static final byte[] CONTENTS_BYTES = \"Some-contents\".getBytes(StandardCharsets.UTF_8);\n     private final ClientLogger logger = new ClientLogger(ServiceBusReceiverAsyncClientIntegrationTest.class);\n+    private final AtomicInteger messagesPending = new AtomicInteger();\n \n     private ServiceBusReceiverAsyncClient receiver;\n-    private ServiceBusReceiverAsyncClient receiveDeleteModeReceiver;\n+    private ServiceBusReceiverAsyncClient receiveAndDeleteReceiver;\n     private ServiceBusSenderAsyncClient sender;\n \n     ServiceBusReceiverAsyncClientIntegrationTest() {\n         super(new ClientLogger(ServiceBusReceiverAsyncClientIntegrationTest.class));\n     }\n \n     @Override\n-    protected void beforeTest() {\n-        final String queueName = getQueueName();\n-        assertNotNull(queueName, \"'queueName' cannot be null.\");\n-\n-        sender = createBuilder().sender().queueName(queueName).buildAsyncClient();\n-        receiver = createBuilder()\n-            .receiver()\n-            .queueName(queueName)\n-            .buildAsyncClient();\n-\n-        receiveDeleteModeReceiver = createBuilder()\n-            .receiver()\n-            .queueName(queueName)\n-            .receiveMode(ReceiveMode.RECEIVE_AND_DELETE)\n-            .buildAsyncClient();\n+    protected void afterTest() {\n+        if (messagesPending.get() == 0) {\n+            dispose(receiver, sender, receiveAndDeleteReceiver);\n+            return;\n+        }\n+\n+        // In the case that this test failed... we're going to drain the queue or subscription.\n+        try {\n+            receiveAndDeleteReceiver.receive(new ReceiveAsyncOptions().setEnableAutoComplete(false))\n+                .take(messagesPending.get())\n+                .map(message -> {\n+                    logger.info(\"Message received: {}\", message.getSequenceNumber());\n+                    return message;\n+                })\n+                .timeout(Duration.ofSeconds(5), Mono.empty())\n+                .blockLast();\n+        } catch (Exception e) {\n+            logger.warning(\"Error occurred when draining queue.\", e);\n+        } finally {\n+            dispose(receiver, sender, receiveAndDeleteReceiver);\n+        }\n     }\n \n-    @Override\n-    protected void afterTest() {\n-        dispose(receiver, receiveDeleteModeReceiver, sender);\n+    static Stream<Arguments> receiverTypesProvider() {\n+        return Stream.of(\n+            Arguments.of(MessagingEntityType.QUEUE),\n+            Arguments.of(MessagingEntityType.SUBSCRIPTION)\n+        );\n     }\n \n     /**\n      * Verifies that we can send and receive two messages.\n      */\n     @Disabled(\"Problem when receiving two messages. Link is closed prematurely.\")\n-    @Test\n-    void receiveTwoMessagesAutoComplete() {\n+    @MethodSource(\"receiverTypesProvider\")\n+    @ParameterizedTest\n+    void receiveTwoMessagesAutoComplete(MessagingEntityType entityType) {\n         // Arrange\n+        setSenderAndReceiver(entityType);\n+\n         final String messageId = UUID.randomUUID().toString();\n-        final ServiceBusMessage message = TestUtils.getServiceBusMessage(CONTENTS, messageId, 0);\n-        final ReceiveAsyncOptions options = new ReceiveAsyncOptions().setEnableAutoComplete(false);\n+        final int position = 10;\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(CONTENTS_BYTES, messageId, position);\n+\n+        Mono.when(sendMessage(message), sendMessage(message)).block();\n \n         // Assert & Act\n-        StepVerifier.create(sender.send(message).then(sender.send(message))\n-            .thenMany(receiver.receive(options)))\n-            .assertNext(receivedMessage ->\n-                assertTrue(receivedMessage.getProperties().containsKey(MESSAGE_TRACKING_ID)))\n-            .assertNext(receivedMessage ->\n-                assertTrue(receivedMessage.getProperties().containsKey(MESSAGE_TRACKING_ID)))\n+        StepVerifier.create(receiver.receive())\n+            .assertNext(receivedMessage -> assertMessageEquals(receivedMessage, CONTENTS_BYTES, messageId, position))\n+            .assertNext(receivedMessage -> assertMessageEquals(receivedMessage, CONTENTS_BYTES, messageId, position))\n             .thenCancel()\n             .verify();\n     }\n \n     /**\n      * Verifies that we can send and receive a message.\n      */\n-    @Test\n-    void receiveMessageAutoComplete() {\n+    @MethodSource(\"receiverTypesProvider\")\n+    @ParameterizedTest\n+    void receiveMessageAutoComplete(MessagingEntityType entityType) {\n         // Arrange\n+        setSenderAndReceiver(entityType);\n+\n         final String messageId = UUID.randomUUID().toString();\n-        final ServiceBusMessage message = TestUtils.getServiceBusMessage(CONTENTS, messageId, 0);\n-        final ReceiveAsyncOptions options = new ReceiveAsyncOptions().setEnableAutoComplete(false);\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(CONTENTS_BYTES, messageId, 0);\n+\n+        sendMessage(message).block();\n \n         // Assert & Act\n-        StepVerifier.create(sender.send(message).thenMany(receiver.receive(options)))\n-            .assertNext(receivedMessage ->\n-                assertTrue(receivedMessage.getProperties().containsKey(MESSAGE_TRACKING_ID)))\n+        StepVerifier.create(receiver.receive())\n+            .assertNext(receivedMessage -> assertMessageEquals(receivedMessage, CONTENTS_BYTES, messageId, 0))\n             .thenCancel()\n             .verify();\n     }\n \n     /**\n      * Verifies that we can send and peek a message.\n      */\n-    @Test\n-    void peekMessage() {\n+    @MethodSource(\"receiverTypesProvider\")\n+    @ParameterizedTest\n+    void peekMessage(MessagingEntityType entityType) {\n         // Arrange\n+        setSenderAndReceiver(entityType);\n+\n         final String messageId = UUID.randomUUID().toString();\n-        final ServiceBusMessage message = TestUtils.getServiceBusMessage(CONTENTS, messageId, 0);\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(CONTENTS_BYTES, messageId, 0);\n+\n+        sendMessage(message).block();\n \n         // Assert & Act\n-        StepVerifier.create(sender.send(message).then(receiver.peek()))\n-            .assertNext(receivedMessage -> assertTrue(receivedMessage.getProperties().containsKey(MESSAGE_TRACKING_ID)))\n+        StepVerifier.create(receiver.peek())\n+            .assertNext(receivedMessage -> assertMessageEquals(receivedMessage, CONTENTS_BYTES, messageId, 0))\n             .verifyComplete();\n     }\n \n     /**\n      * Verifies that we can schedule and receive a message.\n      */\n-    @Test\n-    void sendScheduledMessageAndReceive() {\n+    @MethodSource(\"receiverTypesProvider\")\n+    @ParameterizedTest\n+    void sendScheduledMessageAndReceive(MessagingEntityType entityType) {\n         // Arrange\n+        setSenderAndReceiver(entityType);\n+\n         final String messageId = UUID.randomUUID().toString();\n-        final String contents = \"Some-contents\";\n-        final ServiceBusMessage message = TestUtils.getServiceBusMessage(contents, messageId, 0);\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(CONTENTS_BYTES, messageId, 0);\n         final Instant scheduledEnqueueTime = Instant.now().plusSeconds(2);\n-\n-        sender.scheduleMessage(message, scheduledEnqueueTime)\n-            .delaySubscription(Duration.ofSeconds(3))\n-            .block();\n-\n-        // Assert & Act\n-        StepVerifier.create(receiver.receive().take(1))\n-            .assertNext(receivedMessage -> {\n-                assertArrayEquals(contents.getBytes(), receivedMessage.getBody());\n-                assertTrue(receivedMessage.getProperties().containsKey(MESSAGE_TRACKING_ID));\n-            })\n-            .verifyComplete();\n-    }\n-\n-    /**\n-     * Verifies that we can schedule and receive multiple messages.\n-     */\n-    @Test\n-    void sendMultipleScheduledMessageAndReceive() {\n-        // Arrange\n-        final String messageId1 = UUID.randomUUID().toString();\n-        final String messageId2 = UUID.randomUUID().toString();\n-        final ServiceBusMessage message1 = TestUtils.getServiceBusMessage(CONTENTS, messageId1, 0);\n-        final ServiceBusMessage message2 = TestUtils.getServiceBusMessage(CONTENTS, messageId2, 0);\n-        final Duration duration = Duration.ofSeconds(10);\n-        final Instant scheduledEnqueueTime = Instant.now().plus(duration);\n         final ReceiveAsyncOptions options = new ReceiveAsyncOptions().setEnableAutoComplete(false);\n \n-        sender.scheduleMessage(message1, scheduledEnqueueTime)\n-            .block(TIMEOUT);\n-        sender.scheduleMessage(message2, scheduledEnqueueTime)\n-            .block(TIMEOUT);\n+        sender.scheduleMessage(message, scheduledEnqueueTime).block();\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc91291afd5d646a385d8d5126a7446f09831bb0"}, "originalPosition": 234}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNjc4MTcy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10022#pullrequestreview-391678172", "createdAt": "2020-04-10T21:44:03Z", "commit": {"oid": "30994b91f0f1d276793b306f0ba07159ca771419"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "315f0058e4ef0ee815d121bfbb9d33ee0675af3d", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/315f0058e4ef0ee815d121bfbb9d33ee0675af3d", "committedDate": "2020-04-11T03:47:42Z", "message": "Adding support for subscribing to a topic."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a2f3cf451d19c930dfe67db01a2ef6a674803cc", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3a2f3cf451d19c930dfe67db01a2ef6a674803cc", "committedDate": "2020-04-11T03:47:42Z", "message": "Adding test cases for topics."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0b59c5b501fddc39f2dde530f4ee78f66515b86", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a0b59c5b501fddc39f2dde530f4ee78f66515b86", "committedDate": "2020-04-11T03:48:54Z", "message": "Update tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bb2f6088c573766df2a9dac54b7e26444575f82", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6bb2f6088c573766df2a9dac54b7e26444575f82", "committedDate": "2020-04-11T03:49:21Z", "message": "Fixing integration tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08717ca45a6e30df76e2a4b43d70cc49d79f5fd4", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/08717ca45a6e30df76e2a4b43d70cc49d79f5fd4", "committedDate": "2020-04-11T03:49:22Z", "message": "Remembering to clear receive queues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad7c459eac5a702f48b1b2f9d2df63ab9791e1ac", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ad7c459eac5a702f48b1b2f9d2df63ab9791e1ac", "committedDate": "2020-04-11T03:49:22Z", "message": "Fix tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82a156c48e9257d2353d364428e76f70fe6e488f", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/82a156c48e9257d2353d364428e76f70fe6e488f", "committedDate": "2020-04-11T03:49:23Z", "message": "Clean up tests."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "30994b91f0f1d276793b306f0ba07159ca771419", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/30994b91f0f1d276793b306f0ba07159ca771419", "committedDate": "2020-04-10T17:33:53Z", "message": "Clean up tests."}, "afterCommit": {"oid": "82a156c48e9257d2353d364428e76f70fe6e488f", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/82a156c48e9257d2353d364428e76f70fe6e488f", "committedDate": "2020-04-11T03:49:23Z", "message": "Clean up tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83dfb41da3927af33e1d5fb71b196aa48afa00df", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/83dfb41da3927af33e1d5fb71b196aa48afa00df", "committedDate": "2020-04-11T05:10:01Z", "message": "Adding support for subscription sessions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28f5ed895524a1842036e5fdcd0c6578d4d52bb4", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/28f5ed895524a1842036e5fdcd0c6578d4d52bb4", "committedDate": "2020-04-11T05:10:10Z", "message": "Update tests.yml creation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb3ecabc57fa94809a9e319cbef4fd473750c3cb", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bb3ecabc57fa94809a9e319cbef4fd473750c3cb", "committedDate": "2020-04-12T18:43:15Z", "message": "Clean up test methods."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d66b9b7a953ba7816187264edd03f3bbbf54e70b", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d66b9b7a953ba7816187264edd03f3bbbf54e70b", "committedDate": "2020-04-12T21:44:00Z", "message": "Cleaning up receiver and sender tests."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "27f3f71cffd1f6963303e44302a583dac43f1872", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/27f3f71cffd1f6963303e44302a583dac43f1872", "committedDate": "2020-04-12T18:57:45Z", "message": "Cleaning up receiver and sender tests."}, "afterCommit": {"oid": "d66b9b7a953ba7816187264edd03f3bbbf54e70b", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d66b9b7a953ba7816187264edd03f3bbbf54e70b", "committedDate": "2020-04-12T21:44:00Z", "message": "Cleaning up receiver and sender tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29241fd222adfdd6b73e82121bb7a58bb24372eb", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/29241fd222adfdd6b73e82121bb7a58bb24372eb", "committedDate": "2020-04-13T04:37:11Z", "message": "Fixing session support."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4222da87a7081245b8a53cda07c4b1b354b323d0", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4222da87a7081245b8a53cda07c4b1b354b323d0", "committedDate": "2020-04-13T06:12:19Z", "message": "Clean up management constants and management channel methods."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f35df908a2d2c7afef2bcfac11fc9fd09cf8c100", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f35df908a2d2c7afef2bcfac11fc9fd09cf8c100", "committedDate": "2020-04-13T06:17:49Z", "message": "Fix renewMessageLock for a session message."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7550e6620c490ef6f0e4858e0752f8d231e105a", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a7550e6620c490ef6f0e4858e0752f8d231e105a", "committedDate": "2020-04-13T07:37:01Z", "message": "Fixing tests."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b4a9a5595837323c575c16290dbdbc3d391ea152", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b4a9a5595837323c575c16290dbdbc3d391ea152", "committedDate": "2020-04-13T06:41:29Z", "message": "Fixing tests."}, "afterCommit": {"oid": "a7550e6620c490ef6f0e4858e0752f8d231e105a", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a7550e6620c490ef6f0e4858e0752f8d231e105a", "committedDate": "2020-04-13T07:37:01Z", "message": "Fixing tests."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1120, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}