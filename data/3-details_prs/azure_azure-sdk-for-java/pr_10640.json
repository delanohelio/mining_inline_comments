{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExNzIwODk0", "number": 10640, "title": "Refactor Tests for Form Recognizer", "bodyText": "Update tests to compare test data with service returned models.\nFixed Receipt type bug to correctly select the valueString field via fieldValue.\nUse fixed storage account for live tests.", "createdAt": "2020-04-30T17:06:49Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10640", "merged": true, "mergeCommit": {"oid": "895bf6f96ca5926e6071f5055e95101e2cb133dc"}, "closed": true, "closedAt": "2020-05-01T10:19:44Z", "author": {"login": "samvaity"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccypZhAFqTQwMzgzMjk5Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcc-pgsgBqjMyOTI3NTc3MTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODMyOTky", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10640#pullrequestreview-403832992", "createdAt": "2020-04-30T19:56:26Z", "commit": {"oid": "6a98c0cd3128384382d81fd9d3a70e4a3d36a2c1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTo1NjoyNlrOGO4KkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTo1NjoyNlrOGO4KkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1MzQ1Nw==", "bodyText": "empty?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10640#discussion_r418253457", "createdAt": "2020-04-30T19:56:26Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerClientTestBase.java", "diffHunk": "@@ -60,77 +71,323 @@\n import java.util.function.BiConsumer;\n import java.util.function.Consumer;\n import java.util.function.Function;\n+import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n \n import static com.azure.ai.formrecognizer.FormRecognizerClientBuilder.OCP_APIM_SUBSCRIPTION_KEY;\n import static com.azure.ai.formrecognizer.TestUtils.LAYOUT_LOCAL_URL;\n import static com.azure.ai.formrecognizer.TestUtils.RECEIPT_LOCAL_URL;\n import static com.azure.ai.formrecognizer.TestUtils.getFileData;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n \n public abstract class FormRecognizerClientTestBase extends TestBase {\n     private static final String AZURE_FORM_RECOGNIZER_API_KEY = \"AZURE_FORM_RECOGNIZER_API_KEY\";\n     private static final String NAME = \"name\";\n     private static final String FORM_RECOGNIZER_PROPERTIES = \"azure-ai-formrecognizer.properties\";\n     private static final String VERSION = \"version\";\n+    private static final Pattern NON_DIGIT_PATTERN = Pattern.compile(\"[^0-9]+\");\n \n     private final HttpLogOptions httpLogOptions = new HttpLogOptions();\n     private final Map<String, String> properties = CoreUtils.getProperties(FORM_RECOGNIZER_PROPERTIES);\n     private final String clientName = properties.getOrDefault(NAME, \"UnknownName\");\n     private final String clientVersion = properties.getOrDefault(VERSION, \"UnknownVersion\");\n \n-    static void validateLayoutResult(IterableStream<FormPage> expectedFormPages,\n-        IterableStream<FormPage> actualFormPages) {\n-        List<FormPage> expectedPageList = expectedFormPages.stream().collect(Collectors.toList());\n-        List<FormPage> actualPageList = actualFormPages.stream().collect(Collectors.toList());\n-        assertEquals(expectedPageList.size(), actualPageList.size());\n-        for (int i = 0; i < actualPageList.size(); i++) {\n-            validateFormPage(expectedPageList.get(i), actualPageList.get(i));\n+    static void validateLayoutDataResults(IterableStream<FormPage> actualFormPages, List<ReadResult> readResults,\n+        List<PageResult> pageResults, boolean includeTextDetails) {\n+        List<FormPage> actualFormPageList = actualFormPages.stream().collect(Collectors.toList());\n+        for (int i = 0; i < actualFormPageList.size(); i++) {\n+            FormPage actualFormPage = actualFormPageList.get(i);\n+            ReadResult readResult = readResults.get(i);\n+\n+            assertEquals(readResult.getAngle(), actualFormPage.getTextAngle());\n+            assertEquals(readResult.getWidth(), actualFormPage.getWidth());\n+            assertEquals(readResult.getHeight(), actualFormPage.getHeight());\n+            assertEquals(readResult.getUnit().toString(), actualFormPage.getUnit().toString());\n+            if (includeTextDetails) {\n+                validateFormLineData(readResult.getLines(), actualFormPage.getLines());\n+            }\n+            if (pageResults != null) {\n+                validateFormTableData(pageResults.get(i).getTables(), actualFormPage.getTables(), readResults,\n+                    includeTextDetails);\n+            }\n+        }\n+    }\n+\n+    private static void validateReferenceElementsData(List<String> expectedElements,\n+        IterableStream<FormContent> actualElementStream, List<ReadResult> readResults) {\n+        if (expectedElements != null && actualElementStream != null) {\n+            List<FormContent> actualFormContentList = actualElementStream.stream().collect(Collectors.toList());\n+            assertEquals(expectedElements.size(), actualFormContentList.size());\n+            for (int i = 0; i < actualFormContentList.size(); i++) {\n+                String[] indices = NON_DIGIT_PATTERN.matcher(expectedElements.get(i)).replaceAll(\" \").trim().split(\" \");\n+\n+                if (indices.length < 2) {\n+                    return;\n+                }\n+\n+                int readResultIndex = Integer.parseInt(indices[0]);\n+                int lineIndex = Integer.parseInt(indices[1]);\n+                if (indices.length == 3) {\n+                    int wordIndex = Integer.parseInt(indices[2]);\n+                    TextWord expectedTextWord =\n+                        readResults.get(readResultIndex).getLines().get(lineIndex).getWords().get(wordIndex);\n+                    TextLine expectedTextLine = readResults.get(readResultIndex).getLines().get(lineIndex);\n+\n+                    if (actualFormContentList.get(i).getTextContentType().equals(TextContentType.LINE)) {\n+                        FormLine actualFormLine = (FormLine) actualFormContentList.get(i);\n+                        validateFormWordData(expectedTextLine.getWords(), actualFormLine.getFormWords());\n+                    }\n+                    FormWord actualFormContent = (FormWord) actualFormContentList.get(i);\n+                    assertEquals(expectedTextWord.getText(), actualFormContent.getText());\n+                    if (expectedTextWord.getConfidence() != null) {\n+                        assertEquals(expectedTextWord.getConfidence(), actualFormContent.getConfidence());\n+                    } else {\n+                        assertEquals(1.0f, actualFormContent.getConfidence());\n+                    }\n+                    validateBoundingBoxData(expectedTextWord.getBoundingBox(), actualFormContent.getBoundingBox());\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void validateFormTableData(List<DataTable> expectedFormTables,\n+        IterableStream<FormTable> actualFormTables, List<ReadResult> readResults, boolean includeTextDetails) {\n+        List<FormTable> actualFormTable = actualFormTables.stream().collect(Collectors.toList());\n+        assertEquals(expectedFormTables.size(), actualFormTable.size());\n+        for (int i = 0; i < actualFormTable.size(); i++) {\n+            DataTable expectedTable = expectedFormTables.get(i);\n+            FormTable actualTable = actualFormTable.get(i);\n+            assertEquals(expectedTable.getColumns(), actualTable.getColumnCount());\n+            validateCellData(expectedTable.getCells(), actualTable.getCells(), readResults, includeTextDetails);\n+            assertEquals(expectedTable.getRows(), actualTable.getRowCount());\n+        }\n+    }\n+\n+    private static void validateCellData(List<DataTableCell> expectedTableCells,\n+        IterableStream<FormTableCell> actualTableCells, List<ReadResult> readResults, boolean includeTextDetails) {\n+        List<FormTableCell> actualTableCellList = actualTableCells.stream().collect(Collectors.toList());\n+        assertEquals(expectedTableCells.size(), actualTableCellList.size());\n+        for (int i = 0; i < actualTableCellList.size(); i++) {\n+            DataTableCell expectedTableCell = expectedTableCells.get(i);\n+            FormTableCell actualTableCell = actualTableCellList.get(i);\n+            assertEquals(expectedTableCell.getColumnIndex(), actualTableCell.getColumnIndex());\n+            assertEquals(expectedTableCell.getColumnSpan(), actualTableCell.getColumnSpan());\n+            assertEquals(expectedTableCell.getRowIndex(), actualTableCell.getRowIndex());\n+            assertEquals(expectedTableCell.getRowSpan(), actualTableCell.getRowSpan());\n+            validateBoundingBoxData(expectedTableCell.getBoundingBox(), actualTableCell.getBoundingBox());\n+            if (includeTextDetails) {\n+                validateReferenceElementsData(expectedTableCell.getElements(), actualTableCell.getElements(),\n+                    readResults);\n+            }\n+        }\n+    }\n+\n+    private static void validateFormLineData(List<TextLine> expectedLines, IterableStream<FormLine> actualLines) {\n+        List<FormLine> actualLineList = actualLines.stream().collect(Collectors.toList());\n+        assertEquals(expectedLines.size(), actualLineList.size());\n+        for (int i = 0; i < actualLineList.size(); i++) {\n+            TextLine expectedLine = expectedLines.get(i);\n+            FormLine actualLine = actualLineList.get(i);\n+            assertEquals(expectedLine.getText(), actualLine.getText());\n+            validateBoundingBoxData(expectedLine.getBoundingBox(), actualLine.getBoundingBox());\n+            validateFormWordData(expectedLine.getWords(), actualLine.getFormWords());\n         }\n     }\n \n-    static void validateReceiptResult(IterableStream<RecognizedReceipt> expectedReceipts,\n-        IterableStream<RecognizedReceipt> actualResult) {\n-        List<RecognizedReceipt> expectedReceiptList = expectedReceipts.stream().collect(Collectors.toList());\n+    private static void validateFormWordData(List<TextWord> expectedFormWords,\n+        IterableStream<FormWord> actualFormWords) {\n+        List<FormWord> actualFormWordList = actualFormWords.stream().collect(Collectors.toList());\n+        assertEquals(expectedFormWords.size(), actualFormWordList.size());\n+        for (int i = 0; i < actualFormWordList.size(); i++) {\n+\n+            TextWord expectedWord = expectedFormWords.get(i);\n+            FormWord actualWord = actualFormWordList.get(i);\n+            assertEquals(expectedWord.getText(), actualWord.getText());\n+            validateBoundingBoxData(expectedWord.getBoundingBox(), actualWord.getBoundingBox());\n+            if (expectedWord.getConfidence() != null) {\n+                assertEquals(expectedWord.getConfidence(), actualWord.getConfidence());\n+            } else {\n+                assertEquals(1.0f, actualWord.getConfidence());\n+            }\n+        }\n+    }\n+\n+    private static void validateBoundingBoxData(List<Float> expectedBoundingBox, BoundingBox actualBoundingBox) {\n+        if (actualBoundingBox != null && actualBoundingBox.getPoints() != null) {\n+            int i = 0;\n+            for (Point point : actualBoundingBox.getPoints()) {\n+                assertEquals(expectedBoundingBox.get(i), point.getX());\n+                assertEquals(expectedBoundingBox.get(++i), point.getY());\n+                i++;\n+            }\n+        }\n+    }\n+\n+    static void validateReceiptResultData(IterableStream<RecognizedReceipt> actualResult, AnalyzeResult rawResponse,\n+        boolean includeTextDetails) {\n         List<RecognizedReceipt> actualReceiptList = actualResult.stream().collect(Collectors.toList());\n-        assertEquals(expectedReceiptList.size(), actualReceiptList.size());\n         for (int i = 0; i < actualReceiptList.size(); i++) {\n-            validateReceipt(expectedReceiptList.get(i), actualReceiptList.get(i));\n+            final RecognizedReceipt actualReceipt = actualReceiptList.get(i);\n+            assertEquals(\"en-US\", actualReceipt.getReceiptLocale());\n+            validateLabeledData(actualReceipt.getRecognizedForm(), includeTextDetails,\n+                rawResponse.getReadResults(), rawResponse.getDocumentResults().get(i));\n         }\n     }\n \n-    static void validateRecognizedFormResult(IterableStream<RecognizedForm> expectedForms,\n-        IterableStream<RecognizedForm> actualForms) {\n-        List<RecognizedForm> expectedFormList = expectedForms.stream().collect(Collectors.toList());\n+    static void validateRecognizedResult(IterableStream<RecognizedForm> actualForms,\n+        AnalyzeResult rawResponse, boolean includeTextDetails, boolean isLabeled) {\n+        List<ReadResult> readResults = rawResponse.getReadResults();\n+        List<PageResult> pageResults = rawResponse.getPageResults();\n+        List<DocumentResult> documentResults = rawResponse.getDocumentResults();\n         List<RecognizedForm> actualFormList = actualForms.stream().collect(Collectors.toList());\n \n-        assertEquals(expectedFormList.size(), actualFormList.size());\n         for (int i = 0; i < actualFormList.size(); i++) {\n-            validateRecognizedForm(expectedFormList.get(i), actualFormList.get(i));\n+            if (isLabeled) {\n+                validateLabeledData(actualFormList.get(i), includeTextDetails, readResults,\n+                    documentResults.get(i));\n+            } else {\n+                validateUnLabeledResult(actualFormList.get(i), includeTextDetails, readResults,\n+                    pageResults.get(i), pageResults);\n+            }\n         }\n     }\n \n-    static void validateUSReceipt(USReceipt expectedReceipt, USReceipt actualRecognizedReceipt,\n+    private static void validateUnLabeledResult(RecognizedForm actualForm, boolean includeTextDetails,\n+        List<ReadResult> readResults, PageResult expectedPage, List<PageResult> pageResults) {\n+        validateLayoutDataResults(actualForm.getPages(), readResults, pageResults, includeTextDetails);\n+        validatePageRangeData(expectedPage.getPage(), actualForm.getPageRange());\n+        for (int i = 0; i < expectedPage.getKeyValuePairs().size(); i++) {\n+            final KeyValuePair expectedFormField = expectedPage.getKeyValuePairs().get(i);\n+            final FormField<?> actualFormField = actualForm.getFields().get(\"field-\" + i);\n+            assertEquals(expectedFormField.getConfidence(), actualFormField.getConfidence());\n+            assertEquals(expectedFormField.getKey().getText(), actualFormField.getLabelText().getText());\n+            validateBoundingBoxData(expectedFormField.getKey().getBoundingBox(),\n+                actualFormField.getLabelText().getBoundingBox());\n+            if (includeTextDetails) {\n+                validateReferenceElementsData(expectedFormField.getKey().getElements(),\n+                    actualFormField.getLabelText().getTextContent(), readResults);\n+                validateReferenceElementsData(expectedFormField.getValue().getElements(),\n+                    actualFormField.getValueText().getTextContent(), readResults);\n+            }\n+            assertEquals(expectedFormField.getValue().getText(), actualFormField.getValueText().getText());\n+            validateBoundingBoxData(expectedFormField.getValue().getBoundingBox(),\n+                actualFormField.getValueText().getBoundingBox());\n+        }\n+    }\n+\n+    private static void validateLabeledData(RecognizedForm actualForm, boolean includeTextDetails,\n+        List<ReadResult> readResults, DocumentResult documentResult) {\n+\n+        validateLayoutDataResults(actualForm.getPages(), readResults, null, includeTextDetails);\n+        assertEquals(documentResult.getPageRange().get(0), actualForm.getPageRange().getStartPageNumber());\n+        assertEquals(documentResult.getPageRange().get(1), actualForm.getPageRange().getEndPageNumber());\n+        documentResult.getFields().forEach((label, expectedFieldValue) -> {\n+            final FormField<?> actualFormField = actualForm.getFields().get(label);\n+            assertEquals(label, actualFormField.getName());\n+            assertEquals(expectedFieldValue.getPage(), actualFormField.getPageNumber());\n+            if (expectedFieldValue.getConfidence() != null) {\n+                assertEquals(expectedFieldValue.getConfidence(), actualFormField.getConfidence());\n+            } else {\n+                assertEquals(1.0f, actualFormField.getConfidence());\n+            }\n+            validateFieldValueTransforms(expectedFieldValue, actualFormField, readResults, includeTextDetails);\n+        });\n+    }\n+\n+    private static void validateFieldValueTransforms(FieldValue expectedFieldValue, FormField<?> actualFormField,\n+        List<ReadResult> readResults, boolean includeTextDetails) {\n+        if (expectedFieldValue != null) {\n+            if (expectedFieldValue.getBoundingBox() != null) {\n+                validateBoundingBoxData(expectedFieldValue.getBoundingBox(),\n+                    actualFormField.getValueText().getBoundingBox());\n+            }\n+            if (includeTextDetails && expectedFieldValue.getElements() != null) {\n+                validateReferenceElementsData(expectedFieldValue.getElements(),\n+                    actualFormField.getValueText().getTextContent(), readResults);\n+            }\n+            switch (expectedFieldValue.getType()) {\n+                case NUMBER:\n+                    assertEquals(expectedFieldValue.getValueNumber(), actualFormField.getFieldValue());\n+                    break;\n+                case DATE:\n+                    assertEquals(expectedFieldValue.getValueDate(), actualFormField.getFieldValue());\n+                    break;\n+                case TIME:\n+                    assertEquals(expectedFieldValue.getValueTime(), actualFormField.getFieldValue());\n+                    break;\n+                case STRING:\n+                    assertEquals(expectedFieldValue.getValueString(), actualFormField.getFieldValue());\n+                    break;\n+                case INTEGER:\n+                    assertEquals(expectedFieldValue.getValueInteger(), actualFormField.getFieldValue());\n+                    break;\n+                case PHONE_NUMBER:\n+                    assertEquals(expectedFieldValue.getValuePhoneNumber(), actualFormField.getFieldValue());\n+                    break;\n+                case OBJECT:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a98c0cd3128384382d81fd9d3a70e4a3d36a2c1"}, "originalPosition": 301}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODMzNzQx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10640#pullrequestreview-403833741", "createdAt": "2020-04-30T19:57:34Z", "commit": {"oid": "6a98c0cd3128384382d81fd9d3a70e4a3d36a2c1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTo1NzozNFrOGO4Mwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTo1NzozNFrOGO4Mwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1NDAxOA==", "bodyText": "syncPoller? or syncPollers", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10640#discussion_r418254018", "createdAt": "2020-04-30T19:57:34Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerClientTest.java", "diffHunk": "@@ -272,7 +286,29 @@ void recognizeCustomFormUnlabeledData() {\n                     = client.beginRecognizeCustomForms(data, syncPoller.getFinalResult().getModelId(),\n                     CUSTOM_FORM_FILE_LENGTH, FormContentType.APPLICATION_PDF, false, null);\n                 syncPoller.waitForCompletion();\n-                validateRecognizedFormResult(getExpectedRecognizedForms(), syncPollers.getFinalResult());\n+                validateRecognizedResult(syncPollers.getFinalResult(),\n+                    getRawResponse(CUSTOM_FORM_DATA).getAnalyzeResult(), false, false);\n+            }));\n+    }\n+\n+    /**\n+     * Verifies custom form data for a document using source as input stream data and valid labeled model Id including\n+     * text detail content.\n+     */\n+    @Test\n+    void recognizeCustomFormUnlabeledDataIncludeTextDetails() {\n+        customFormDataRunner(data ->\n+            beginTrainingUnlabeledRunner((storageSASUrl, useLabelFile) -> {\n+                SyncPoller<OperationResult, CustomFormModel> syncPoller =\n+                    client.getFormTrainingClient().beginTraining(storageSASUrl, useLabelFile);\n+                syncPoller.waitForCompletion();\n+\n+                SyncPoller<OperationResult, IterableStream<RecognizedForm>> syncPollers\n+                    = client.beginRecognizeCustomForms(data, syncPoller.getFinalResult().getModelId(),\n+                    CUSTOM_FORM_FILE_LENGTH, FormContentType.APPLICATION_PDF, true, null);\n+                syncPoller.waitForCompletion();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a98c0cd3128384382d81fd9d3a70e4a3d36a2c1"}, "originalPosition": 211}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODM2MjU5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10640#pullrequestreview-403836259", "createdAt": "2020-04-30T20:01:22Z", "commit": {"oid": "6a98c0cd3128384382d81fd9d3a70e4a3d36a2c1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e11124f2cb08b7a41766d17799d0e64250732af9", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e11124f2cb08b7a41766d17799d0e64250732af9", "committedDate": "2020-05-01T03:09:07Z", "message": "update for layout tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3eed60a7ae930943861bd7026ff243aa13291dd", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f3eed60a7ae930943861bd7026ff243aa13291dd", "committedDate": "2020-05-01T03:09:09Z", "message": "update tests unlabeled custom forms"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2088fb3cb129545f3ce1d62a0df32c2dfe53afc1", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2088fb3cb129545f3ce1d62a0df32c2dfe53afc1", "committedDate": "2020-05-01T03:09:10Z", "message": "update to unified custom form testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2199616b666163e4d4aba350bfa664c25e75995", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f2199616b666163e4d4aba350bfa664c25e75995", "committedDate": "2020-05-01T03:09:11Z", "message": "update for receipt tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "127b286b1182c781290ebc6639ce57f0517f61e0", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/127b286b1182c781290ebc6639ce57f0517f61e0", "committedDate": "2020-05-01T03:09:12Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98a91d1d8db274c9a71d0c7a9683f9c9b8d726b2", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/98a91d1d8db274c9a71d0c7a9683f9c9b8d726b2", "committedDate": "2020-05-01T03:09:13Z", "message": "review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a9648bc64ddc37c734a246874d381c8125ecea36", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a9648bc64ddc37c734a246874d381c8125ecea36", "committedDate": "2020-05-01T00:18:09Z", "message": "review comments"}, "afterCommit": {"oid": "d91abaebe6ed4ba44d8f89f906addd9c166536eb", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d91abaebe6ed4ba44d8f89f906addd9c166536eb", "committedDate": "2020-05-01T07:59:24Z", "message": "rebase changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d91abaebe6ed4ba44d8f89f906addd9c166536eb", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d91abaebe6ed4ba44d8f89f906addd9c166536eb", "committedDate": "2020-05-01T07:59:24Z", "message": "rebase changes"}, "afterCommit": {"oid": "c1268f85383ab72549d105f048b9184bd7dc0ae4", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c1268f85383ab72549d105f048b9184bd7dc0ae4", "committedDate": "2020-05-01T08:08:58Z", "message": "rebase changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c1268f85383ab72549d105f048b9184bd7dc0ae4", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c1268f85383ab72549d105f048b9184bd7dc0ae4", "committedDate": "2020-05-01T08:08:58Z", "message": "rebase changes"}, "afterCommit": {"oid": "2bb382ccbab0dd6ad85b430c04e15b6012833603", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2bb382ccbab0dd6ad85b430c04e15b6012833603", "committedDate": "2020-05-01T08:33:18Z", "message": "rebase changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2bb382ccbab0dd6ad85b430c04e15b6012833603", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2bb382ccbab0dd6ad85b430c04e15b6012833603", "committedDate": "2020-05-01T08:33:18Z", "message": "rebase changes"}, "afterCommit": {"oid": "58853b03d2dcb1eea70357b3a605213302b6ba2b", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/58853b03d2dcb1eea70357b3a605213302b6ba2b", "committedDate": "2020-05-01T09:18:30Z", "message": "rebase changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "58853b03d2dcb1eea70357b3a605213302b6ba2b", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/58853b03d2dcb1eea70357b3a605213302b6ba2b", "committedDate": "2020-05-01T09:18:30Z", "message": "rebase changes"}, "afterCommit": {"oid": "a4d6baf9f535495392f99ade224d305ccbf29639", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a4d6baf9f535495392f99ade224d305ccbf29639", "committedDate": "2020-05-01T09:41:00Z", "message": "rebase changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4baed462c654eff5e915cef5aacca52224078191", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4baed462c654eff5e915cef5aacca52224078191", "committedDate": "2020-05-01T09:55:10Z", "message": "rebase changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a4d6baf9f535495392f99ade224d305ccbf29639", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a4d6baf9f535495392f99ade224d305ccbf29639", "committedDate": "2020-05-01T09:41:00Z", "message": "rebase changes"}, "afterCommit": {"oid": "4baed462c654eff5e915cef5aacca52224078191", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4baed462c654eff5e915cef5aacca52224078191", "committedDate": "2020-05-01T09:55:10Z", "message": "rebase changes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4472, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}