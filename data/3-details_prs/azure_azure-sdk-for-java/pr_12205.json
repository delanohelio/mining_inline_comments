{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0ODMzMDIy", "number": 12205, "title": "PR for EH + serializer integration", "bodyText": "", "createdAt": "2020-06-15T21:54:26Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205", "merged": true, "mergeCommit": {"oid": "7d211b4699e17156bca3ccb6a5e11b9b2644b75b"}, "closed": true, "closedAt": "2020-07-09T16:55:49Z", "author": {"login": "arerlend"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrn5C_AH2gAyNDM0ODMzMDIyOjZlODk1ZjIyOTBjN2I5NzkxZmMzNGQzMDM2NzZiZDVhM2JkMDdlMDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczDE0gAH2gAyNDM0ODMzMDIyOjQ0NzUyMmE1YTlmMTA1ZWQ1NWJlYmI4ZWQxMzI0YTE5NDJlZjA0M2Q=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6e895f2290c7b9791fc34d303676bd5a3bd07e04", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6e895f2290c7b9791fc34d303676bd5a3bd07e04", "committedDate": "2020-06-15T21:53:26Z", "message": "create draft PR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "544a6e77b9e7c8754801e645fa8924eed96f4c56", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/544a6e77b9e7c8754801e645fa8924eed96f4c56", "committedDate": "2020-06-16T23:27:07Z", "message": "fix object batch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e9ae15ea7c91c2aeb39ccab38021312240aebfe", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7e9ae15ea7c91c2aeb39ccab38021312240aebfe", "committedDate": "2020-07-01T22:29:24Z", "message": "temp object serializer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5a1decbc3f50b0bfc3b18e5c6f9775c1a7f9c15", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b5a1decbc3f50b0bfc3b18e5c6f9775c1a7f9c15", "committedDate": "2020-07-01T22:31:00Z", "message": "Merge branch 'master' into arerlend.schemaregistry.eh-integration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82eb0ff7a1cdf791fd4fa447e85400c0557b167d", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/82eb0ff7a1cdf791fd4fa447e85400c0557b167d", "committedDate": "2020-07-01T23:34:25Z", "message": "dep on core experimental"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eda212d0dda4351f68162b7eb70f984f945f3168", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/eda212d0dda4351f68162b7eb70f984f945f3168", "committedDate": "2020-07-01T23:36:02Z", "message": "temp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a1d7e7baf571d41a767c003a268bd4d65fc1640", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6a1d7e7baf571d41a767c003a268bd4d65fc1640", "committedDate": "2020-07-02T17:48:34Z", "message": "getDeserializedObject()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3560da282ad74b25adccbc15ef768975cffa6935", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3560da282ad74b25adccbc15ef768975cffa6935", "committedDate": "2020-07-02T21:46:32Z", "message": "null object in object batch test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a7bce3ba6747454325b9acc56cf474a5f9cd635", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7a7bce3ba6747454325b9acc56cf474a5f9cd635", "committedDate": "2020-07-02T21:52:01Z", "message": "remove old SR dep"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNzA1NzQ5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#pullrequestreview-442705749", "createdAt": "2020-07-05T20:54:37Z", "commit": {"oid": "7a7bce3ba6747454325b9acc56cf474a5f9cd635"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDo1NDozN1rOGtEzNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDo1NjoxMlrOGtEzzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNzc0OQ==", "bodyText": "I would have expected to call this serializer by default - keen to hear other peoples thoughts though.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r449917749", "createdAt": "2020-07-05T20:54:37Z", "author": {"login": "JonathanGiles"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubClientBuilder.java", "diffHunk": "@@ -361,6 +363,16 @@ public EventHubClientBuilder prefetchCount(int prefetchCount) {\n         return this;\n     }\n \n+    /**\n+     * Set registry serializer\n+     * @param objectSerializer serializer\n+     * @return updated builder instance\n+     */\n+    public EventHubClientBuilder objectSerializer(ObjectSerializer objectSerializer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a7bce3ba6747454325b9acc56cf474a5f9cd635"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNzkwMQ==", "bodyText": "Nit: Different indentation here (and also in previous files, there was needless changes to indentation)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r449917901", "createdAt": "2020-07-05T20:56:12Z", "author": {"login": "JonathanGiles"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/ObjectBatch.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.experimental.serializer.ObjectSerializer;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.OutputStream;\n+import java.util.Objects;\n+\n+public final class ObjectBatch<T> extends Batch {\n+    private final ClientLogger logger = new ClientLogger(ObjectBatch.class);\n+    private final Object lock = new Object();\n+    private final Class<T> batchType;\n+    private final ObjectSerializer objectSerializer;\n+\n+    /**\n+     *\n+     * @param maxMessageSize\n+     * @param partitionId\n+     * @param partitionKey\n+     * @param batchType\n+     * @param contextProvider\n+     * @param tracerProvider\n+     * @param objectSerializer\n+     * @param entityPath\n+     * @param hostname\n+     */\n+    ObjectBatch(int maxMessageSize, String partitionId, String partitionKey, Class<T> batchType,\n+                    ErrorContextProvider contextProvider, TracerProvider tracerProvider,\n+                ObjectSerializer objectSerializer, String entityPath, String hostname) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a7bce3ba6747454325b9acc56cf474a5f9cd635"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89e6cca3ba0110beb5707ce6d69d55fb8dcf9fc3", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/89e6cca3ba0110beb5707ce6d69d55fb8dcf9fc3", "committedDate": "2020-07-06T16:55:59Z", "message": "remove temporary interfaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f3acc8c9f72a0becbede6bae614c11e926c67803", "committedDate": "2020-07-06T17:12:28Z", "message": "rename objectSerializer builder method to serializer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMzE4MTI2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#pullrequestreview-443318126", "createdAt": "2020-07-06T18:35:11Z", "commit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODozNToxMVrOGtiwaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTowNToxNFrOGtjq3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwODU1Mg==", "bodyText": "Expand all imports instead of using *.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450408552", "createdAt": "2020-07-06T18:35:11Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/Batch.java", "diffHunk": "@@ -0,0 +1,266 @@\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.AmqpMessageConstant;\n+import com.azure.core.amqp.exception.AmqpErrorCondition;\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.amqp.implementation.AmqpConstants;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.tracing.ProcessKind;\n+import org.apache.qpid.proton.Proton;\n+import org.apache.qpid.proton.amqp.Binary;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;\n+import org.apache.qpid.proton.amqp.messaging.Data;\n+import org.apache.qpid.proton.amqp.messaging.MessageAnnotations;\n+import org.apache.qpid.proton.message.Message;\n+import reactor.core.publisher.Signal;\n+\n+import java.nio.BufferOverflowException;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwOTE0Mw==", "bodyText": "Add javadoc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450409143", "createdAt": "2020-07-06T18:36:24Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/Batch.java", "diffHunk": "@@ -0,0 +1,266 @@\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.AmqpMessageConstant;\n+import com.azure.core.amqp.exception.AmqpErrorCondition;\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.amqp.implementation.AmqpConstants;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.tracing.ProcessKind;\n+import org.apache.qpid.proton.Proton;\n+import org.apache.qpid.proton.amqp.Binary;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;\n+import org.apache.qpid.proton.amqp.messaging.Data;\n+import org.apache.qpid.proton.amqp.messaging.MessageAnnotations;\n+import org.apache.qpid.proton.message.Message;\n+import reactor.core.publisher.Signal;\n+\n+import java.nio.BufferOverflowException;\n+import java.util.*;\n+\n+import static com.azure.core.util.tracing.Tracer.*;\n+import static com.azure.messaging.eventhubs.implementation.ClientConstants.AZ_NAMESPACE_VALUE;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwOTY1Mw==", "bodyText": "Why protected?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450409653", "createdAt": "2020-07-06T18:37:33Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/Batch.java", "diffHunk": "@@ -0,0 +1,266 @@\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.AmqpMessageConstant;\n+import com.azure.core.amqp.exception.AmqpErrorCondition;\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.amqp.implementation.AmqpConstants;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.tracing.ProcessKind;\n+import org.apache.qpid.proton.Proton;\n+import org.apache.qpid.proton.amqp.Binary;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;\n+import org.apache.qpid.proton.amqp.messaging.Data;\n+import org.apache.qpid.proton.amqp.messaging.MessageAnnotations;\n+import org.apache.qpid.proton.message.Message;\n+import reactor.core.publisher.Signal;\n+\n+import java.nio.BufferOverflowException;\n+import java.util.*;\n+\n+import static com.azure.core.util.tracing.Tracer.*;\n+import static com.azure.messaging.eventhubs.implementation.ClientConstants.AZ_NAMESPACE_VALUE;\n+\n+public abstract class Batch {\n+    private final ClientLogger logger = new ClientLogger(this.getClass());\n+    private final Object lock = new Object();\n+    private final int maxMessageSize;\n+    private final String partitionKey;\n+    private final ErrorContextProvider contextProvider;\n+    private final List<EventData> events;\n+    private final byte[] eventBytes;\n+    private final String partitionId;\n+    private int sizeInBytes;\n+    protected final TracerProvider tracerProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQxNDk5MQ==", "bodyText": "The name Batch seems too generic. Since EventDataBatch is already taken, can't think of too many better alternatives. EventDataBatchBase maybe?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450414991", "createdAt": "2020-07-06T18:48:25Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/Batch.java", "diffHunk": "@@ -0,0 +1,266 @@\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.AmqpMessageConstant;\n+import com.azure.core.amqp.exception.AmqpErrorCondition;\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.amqp.implementation.AmqpConstants;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.tracing.ProcessKind;\n+import org.apache.qpid.proton.Proton;\n+import org.apache.qpid.proton.amqp.Binary;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;\n+import org.apache.qpid.proton.amqp.messaging.Data;\n+import org.apache.qpid.proton.amqp.messaging.MessageAnnotations;\n+import org.apache.qpid.proton.message.Message;\n+import reactor.core.publisher.Signal;\n+\n+import java.nio.BufferOverflowException;\n+import java.util.*;\n+\n+import static com.azure.core.util.tracing.Tracer.*;\n+import static com.azure.messaging.eventhubs.implementation.ClientConstants.AZ_NAMESPACE_VALUE;\n+\n+public abstract class Batch {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQxNTcyNQ==", "bodyText": "This doesn't have to be registry serializer. Any implementation of ObjectSerializer should work here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450415725", "createdAt": "2020-07-06T18:49:43Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubClientBuilder.java", "diffHunk": "@@ -361,6 +363,16 @@ public EventHubClientBuilder prefetchCount(int prefetchCount) {\n         return this;\n     }\n \n+    /**\n+     * Set registry serializer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQxODA4Nw==", "bodyText": "Setting a serializer on the builder should not force the producer to send ObjectBatch only.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450418087", "createdAt": "2020-07-06T18:54:02Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -510,6 +584,41 @@ private String getEntityPath(String partitionId) {\n             .flatMap(connection -> connection.createSendLink(linkName, entityPath, retryOptions));\n     }\n \n+    private <T> Mono<T> verifySendMode(SendMode mode) {\n+        switch (mode) {\n+            case EVENT_DATA:\n+                if (serializer != null) {\n+                    return monoError(logger, new IllegalStateException());\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMDM3NA==", "bodyText": "This is also used in createBatch() method for EventDataBatch. Update that method as well to call this method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450420374", "createdAt": "2020-07-06T18:58:39Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -510,6 +584,41 @@ private String getEntityPath(String partitionId) {\n             .flatMap(connection -> connection.createSendLink(linkName, entityPath, retryOptions));\n     }\n \n+    private <T> Mono<T> verifySendMode(SendMode mode) {\n+        switch (mode) {\n+            case EVENT_DATA:\n+                if (serializer != null) {\n+                    return monoError(logger, new IllegalStateException());\n+                }\n+                break;\n+            case OBJECT:\n+                if (serializer == null) {\n+                    return monoError(logger, new IllegalStateException());\n+                }\n+                break;\n+            default:\n+                break;\n+        }\n+\n+        return null;\n+    }\n+\n+    private <T> Mono<T> validateBatchOptions(CreateBatchOptions options) {\n+        if (!CoreUtils.isNullOrEmpty(options.getPartitionKey())\n+            && !CoreUtils.isNullOrEmpty(options.getPartitionId())) {\n+            return monoError(logger, new IllegalArgumentException(String.format(Locale.US,\n+                \"CreateBatchOptions.getPartitionKey() and CreateBatchOptions.getPartitionId() are both set. \"\n+                    + \"Only one or the other can be used. partitionKey: '%s'. partitionId: '%s'\",\n+                options.getPartitionKey(), options.getPartitionId())));\n+        } else if (!CoreUtils.isNullOrEmpty(options.getPartitionKey())\n+            && options.getPartitionKey().length() > MAX_PARTITION_KEY_LENGTH) {\n+            return monoError(logger, new IllegalArgumentException(String.format(Locale.US,\n+                \"Partition key '%s' exceeds the maximum allowed length: '%s'.\", options.getPartitionKey(),\n+                MAX_PARTITION_KEY_LENGTH)));\n+        }\n+        return null;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMDUxMw==", "bodyText": "add javadoc", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450420513", "createdAt": "2020-07-06T18:58:57Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/ObjectBatch.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.experimental.serializer.ObjectSerializer;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.OutputStream;\n+import java.util.Objects;\n+\n+public final class ObjectBatch<T> extends Batch {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMTQ1NA==", "bodyText": "Should this method return Mono<Boolean> instead to avoid blocking?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450421454", "createdAt": "2020-07-06T19:00:49Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/ObjectBatch.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.experimental.serializer.ObjectSerializer;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.OutputStream;\n+import java.util.Objects;\n+\n+public final class ObjectBatch<T> extends Batch {\n+    private final ClientLogger logger = new ClientLogger(ObjectBatch.class);\n+    private final Object lock = new Object();\n+    private final Class<T> batchType;\n+    private final ObjectSerializer objectSerializer;\n+\n+    /**\n+     *\n+     * @param maxMessageSize\n+     * @param partitionId\n+     * @param partitionKey\n+     * @param batchType\n+     * @param contextProvider\n+     * @param tracerProvider\n+     * @param objectSerializer\n+     * @param entityPath\n+     * @param hostname\n+     */\n+    ObjectBatch(int maxMessageSize, String partitionId, String partitionKey, Class<T> batchType,\n+                    ErrorContextProvider contextProvider, TracerProvider tracerProvider,\n+                ObjectSerializer objectSerializer, String entityPath, String hostname) {\n+        super(maxMessageSize, partitionId, partitionKey, contextProvider, tracerProvider, entityPath, hostname);\n+        this.batchType = Objects.requireNonNull(batchType, \"'batchType' cannot be null.\");\n+        this.objectSerializer = Objects.requireNonNull(objectSerializer, \"'objectSerializer' cannot be null.\");\n+    }\n+\n+    /**\n+     * Tries to add an object to the batch.\n+     *\n+     * @param object The object to add to the batch.\n+     * @return {@code true} if the object could be added to the batch; {@code false} if the serialized object\n+     *      was too large to fit in the batch.\n+     * @throws IllegalArgumentException if object is {@code null}.\n+     * @throws AmqpException if serialized object as {@link EventData} is larger than the maximum size\n+     *      of the {@link EventDataBatch}.\n+     */\n+    public Boolean tryAdd(final T object) {\n+        if (object == null) {\n+            throw logger.logExceptionAsWarning(new IllegalArgumentException(\"object cannot be null\"));\n+        }\n+\n+        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+        return objectSerializer.serialize(outputStream, object).map(s -> {\n+            EventData eventData = new EventData(s.toByteArray());\n+            EventData event = tracerProvider.isEnabled() ? traceMessageSpan(eventData) : eventData;\n+            return tryAdd(event);\n+        }).block();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMjUxOA==", "bodyText": "Should check objectType for null too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450422518", "createdAt": "2020-07-06T19:02:58Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/models/PartitionEvent.java", "diffHunk": "@@ -59,4 +66,19 @@ public EventData getData() {\n     public LastEnqueuedEventProperties getLastEnqueuedEventProperties() {\n         return lastEnqueuedEventProperties;\n     }\n+\n+    public <T> T getDeserializedObject(Class<T> objectType) {\n+        Objects.requireNonNull(objectSerializer, \"No serializer set for deserializing event data payload.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMjkwMQ==", "bodyText": "Same here - should not block in this method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450422901", "createdAt": "2020-07-06T19:03:53Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/models/PartitionEvent.java", "diffHunk": "@@ -59,4 +66,19 @@ public EventData getData() {\n     public LastEnqueuedEventProperties getLastEnqueuedEventProperties() {\n         return lastEnqueuedEventProperties;\n     }\n+\n+    public <T> T getDeserializedObject(Class<T> objectType) {\n+        Objects.requireNonNull(objectSerializer, \"No serializer set for deserializing event data payload.\");\n+\n+        if (deserialized != null) {\n+            if (objectType.isInstance(deserialized)) {\n+                return objectType.cast(deserialized);\n+            };\n+        }\n+\n+        T typedDeserializedObject =\n+            objectSerializer.deserialize(new ByteArrayInputStream(eventData.getBody()), objectType).block();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMzUxOQ==", "bodyText": "Since com.azure.core is always going to be there, we should keep this uncommented even though it's redundant when experimental is added for beta releases.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450423519", "createdAt": "2020-07-06T19:05:14Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/module-info.java", "diffHunk": "@@ -2,7 +2,8 @@\n // Licensed under the MIT License.\n \n module com.azure.messaging.eventhubs {\n-    requires transitive com.azure.core;\n+//    requires transitive com.azure.core;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c95145c0b1ead9c81139164bb9d95ba673cc294d", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c95145c0b1ead9c81139164bb9d95ba673cc294d", "committedDate": "2020-07-06T20:19:53Z", "message": "single class imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4eed6e03208926dd9a2b78502ccb5929f06399a6", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4eed6e03208926dd9a2b78502ccb5929f06399a6", "committedDate": "2020-07-06T20:20:17Z", "message": "fix serializer builder javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f78469a45f76e6d58afa3d3f18aadde64e6a6f25", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f78469a45f76e6d58afa3d3f18aadde64e6a6f25", "committedDate": "2020-07-06T20:23:06Z", "message": "rename abstract batch impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5d39fd91518226d6a1c0b98233d9c3c515b8bdb", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c5d39fd91518226d6a1c0b98233d9c3c515b8bdb", "committedDate": "2020-07-06T21:09:44Z", "message": "add EventDataBatchBase javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a0fc351d37e69958bd3f8dd032e24ea195a8ef2", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7a0fc351d37e69958bd3f8dd032e24ea195a8ef2", "committedDate": "2020-07-06T21:12:45Z", "message": "mono TryAdd"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9c1f295e395d3bf48e77efdff214a5b948c2251", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c9c1f295e395d3bf48e77efdff214a5b948c2251", "committedDate": "2020-07-06T22:18:30Z", "message": "fix modifiers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ea6bb61871ed659a1b13e4067e9183fd8681b7c", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6ea6bb61871ed659a1b13e4067e9183fd8681b7c", "committedDate": "2020-07-06T22:18:57Z", "message": "remove send mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fdfa93da80d135d7667052a19f8f5dfa24a2c6c", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4fdfa93da80d135d7667052a19f8f5dfa24a2c6c", "committedDate": "2020-07-06T22:19:21Z", "message": "fix object batch javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b976d2de3e787609f4579529395ed3498a1246bc", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b976d2de3e787609f4579529395ed3498a1246bc", "committedDate": "2020-07-06T22:19:49Z", "message": "partition event deserialize to async"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "114f68d5e512069c61c754c56810c88837aee4f6", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/114f68d5e512069c61c754c56810c88837aee4f6", "committedDate": "2020-07-06T22:20:02Z", "message": "uncomment azure core"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45c819ae7eb838eead933cb8d9f1e230c57f6a39", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/45c819ae7eb838eead933cb8d9f1e230c57f6a39", "committedDate": "2020-07-06T22:38:45Z", "message": "javadoc syntax"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "533df1eb1f98bbbfb95ba14788a84973b6bb50a9", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/533df1eb1f98bbbfb95ba14788a84973b6bb50a9", "committedDate": "2020-07-06T23:02:58Z", "message": "remove temp interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "570fbea85fcd84161de4a4f5ebefc2b9b22a19a1", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/570fbea85fcd84161de4a4f5ebefc2b9b22a19a1", "committedDate": "2020-07-07T01:52:40Z", "message": "Merge branch 'master' into arerlend.schemaregistry.eh-integration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d295b83b0bb6ecff5c6372115c6931b56318cf9c", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d295b83b0bb6ecff5c6372115c6931b56318cf9c", "committedDate": "2020-07-07T02:03:44Z", "message": "only core-experimental, not core"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28c5f63ea6f12674ad18b8635368df8fc6d8d669", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/28c5f63ea6f12674ad18b8635368df8fc6d8d669", "committedDate": "2020-07-07T07:23:20Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e66eb11ab6b56896e089e6128800fd4b7328f8b", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2e66eb11ab6b56896e089e6128800fd4b7328f8b", "committedDate": "2020-07-07T22:07:12Z", "message": "update partition event deserialize"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MzE4NzY3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#pullrequestreview-444318767", "createdAt": "2020-07-07T23:34:57Z", "commit": {"oid": "2e66eb11ab6b56896e089e6128800fd4b7328f8b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMzozNDo1N1rOGuTIWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMDo1MzoxNlrOGuUaew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIwMTExMg==", "bodyText": "What happens when the value is null at construction time?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r451201112", "createdAt": "2020-07-07T23:34:57Z", "author": {"login": "alzimmermsft"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubClientBuilder.java", "diffHunk": "@@ -361,6 +363,18 @@ public EventHubClientBuilder prefetchCount(int prefetchCount) {\n         return this;\n     }\n \n+    /**\n+     * Set ObjectSerializer implementation to be used for creating ObjectBatch.\n+     *\n+     * @param serializer ObjectSerializer implementation\n+     *\n+     * @return updated builder instance\n+     */\n+    public EventHubClientBuilder serializer(ObjectSerializer serializer) {\n+        this.serializer = serializer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e66eb11ab6b56896e089e6128800fd4b7328f8b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyMTY4Mg==", "bodyText": "Would it be better to check this is non-null when validating batch options or could this be created from other contexts?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r451221682", "createdAt": "2020-07-08T00:51:25Z", "author": {"login": "alzimmermsft"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/ObjectBatch.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.experimental.serializer.ObjectSerializer;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.util.Objects;\n+\n+/**\n+ * A class for aggregating Java objects into a single, size-limited, batch. Objects are serialized into EventData\n+ * objects and are added to the batch.  It is treated as a single message when sent to the Azure Event Hubs service.\n+ *\n+ * @param <T> type of objects in the batch.  Multi-type batches are not permitted.\n+ */\n+public final class ObjectBatch<T> extends EventDataBatchBase {\n+    private final ClientLogger logger = new ClientLogger(ObjectBatch.class);\n+    private final Class<T> batchType;\n+    private final ObjectSerializer objectSerializer;\n+\n+    ObjectBatch(int maxMessageSize, String partitionId, String partitionKey, Class<T> batchType,\n+                    ErrorContextProvider contextProvider, TracerProvider tracerProvider,\n+                    ObjectSerializer objectSerializer, String entityPath, String hostname) {\n+        super(maxMessageSize, partitionId, partitionKey, contextProvider, tracerProvider, entityPath, hostname);\n+        this.batchType = Objects.requireNonNull(batchType, \"'batchType' cannot be null.\");\n+        this.objectSerializer = Objects.requireNonNull(objectSerializer, \"'objectSerializer' cannot be null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e66eb11ab6b56896e089e6128800fd4b7328f8b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyMTc4Nw==", "bodyText": "Should this be using monoError?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r451221787", "createdAt": "2020-07-08T00:51:54Z", "author": {"login": "alzimmermsft"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/ObjectBatch.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.experimental.serializer.ObjectSerializer;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.util.Objects;\n+\n+/**\n+ * A class for aggregating Java objects into a single, size-limited, batch. Objects are serialized into EventData\n+ * objects and are added to the batch.  It is treated as a single message when sent to the Azure Event Hubs service.\n+ *\n+ * @param <T> type of objects in the batch.  Multi-type batches are not permitted.\n+ */\n+public final class ObjectBatch<T> extends EventDataBatchBase {\n+    private final ClientLogger logger = new ClientLogger(ObjectBatch.class);\n+    private final Class<T> batchType;\n+    private final ObjectSerializer objectSerializer;\n+\n+    ObjectBatch(int maxMessageSize, String partitionId, String partitionKey, Class<T> batchType,\n+                    ErrorContextProvider contextProvider, TracerProvider tracerProvider,\n+                    ObjectSerializer objectSerializer, String entityPath, String hostname) {\n+        super(maxMessageSize, partitionId, partitionKey, contextProvider, tracerProvider, entityPath, hostname);\n+        this.batchType = Objects.requireNonNull(batchType, \"'batchType' cannot be null.\");\n+        this.objectSerializer = Objects.requireNonNull(objectSerializer, \"'objectSerializer' cannot be null.\");\n+    }\n+\n+    /**\n+     * Tries to asynchronously serialize an object into an EventData payload and add the EventData to the batch.\n+     *\n+     * @param object The object to add to the batch.\n+     * @return {@code true} if the object could be added to the batch; {@code false} if the serialized\n+     * object was too large to fit in the batch.\n+     * @throws IllegalArgumentException if object is {@code null}.\n+     * @throws AmqpException if serialized object as {@link EventData} is larger than the maximum size\n+     *      of the {@link EventDataBatch}.\n+     */\n+    public Mono<Boolean> tryAdd(final T object) {\n+        if (object == null) {\n+            throw logger.logExceptionAsWarning(new IllegalArgumentException(\"object cannot be null\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e66eb11ab6b56896e089e6128800fd4b7328f8b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyMjEzOQ==", "bodyText": "Given that this is internal a cool optimization would be creating a private extension of ByteArrayOuputStream to access its backing byte[] directly. toByteArray will make a clone of the byte[].", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r451222139", "createdAt": "2020-07-08T00:53:16Z", "author": {"login": "alzimmermsft"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/ObjectBatch.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.experimental.serializer.ObjectSerializer;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.util.Objects;\n+\n+/**\n+ * A class for aggregating Java objects into a single, size-limited, batch. Objects are serialized into EventData\n+ * objects and are added to the batch.  It is treated as a single message when sent to the Azure Event Hubs service.\n+ *\n+ * @param <T> type of objects in the batch.  Multi-type batches are not permitted.\n+ */\n+public final class ObjectBatch<T> extends EventDataBatchBase {\n+    private final ClientLogger logger = new ClientLogger(ObjectBatch.class);\n+    private final Class<T> batchType;\n+    private final ObjectSerializer objectSerializer;\n+\n+    ObjectBatch(int maxMessageSize, String partitionId, String partitionKey, Class<T> batchType,\n+                    ErrorContextProvider contextProvider, TracerProvider tracerProvider,\n+                    ObjectSerializer objectSerializer, String entityPath, String hostname) {\n+        super(maxMessageSize, partitionId, partitionKey, contextProvider, tracerProvider, entityPath, hostname);\n+        this.batchType = Objects.requireNonNull(batchType, \"'batchType' cannot be null.\");\n+        this.objectSerializer = Objects.requireNonNull(objectSerializer, \"'objectSerializer' cannot be null.\");\n+    }\n+\n+    /**\n+     * Tries to asynchronously serialize an object into an EventData payload and add the EventData to the batch.\n+     *\n+     * @param object The object to add to the batch.\n+     * @return {@code true} if the object could be added to the batch; {@code false} if the serialized\n+     * object was too large to fit in the batch.\n+     * @throws IllegalArgumentException if object is {@code null}.\n+     * @throws AmqpException if serialized object as {@link EventData} is larger than the maximum size\n+     *      of the {@link EventDataBatch}.\n+     */\n+    public Mono<Boolean> tryAdd(final T object) {\n+        if (object == null) {\n+            throw logger.logExceptionAsWarning(new IllegalArgumentException(\"object cannot be null\"));\n+        }\n+\n+        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+        return objectSerializer.serialize(outputStream, object).map(s -> tryAdd(new EventData(s.toByteArray())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e66eb11ab6b56896e089e6128800fd4b7328f8b"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8947c09fbb7f3cdc2efa18ca9d27da998e95b0b5", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8947c09fbb7f3cdc2efa18ca9d27da998e95b0b5", "committedDate": "2020-07-08T16:47:45Z", "message": "monoError for object batch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7496de8745084b789a87b9289a3a41b4b7002df5", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7496de8745084b789a87b9289a3a41b4b7002df5", "committedDate": "2020-07-08T20:56:06Z", "message": "rename objectSerializer to serializer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03693c9fe6470ef28aebc6c179cbb088d326a8d2", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/03693c9fe6470ef28aebc6c179cbb088d326a8d2", "committedDate": "2020-07-08T20:59:56Z", "message": "add serializer null check in object batch creation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MTAyMzY4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#pullrequestreview-445102368", "createdAt": "2020-07-08T20:24:34Z", "commit": {"oid": "2e66eb11ab6b56896e089e6128800fd4b7328f8b"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMDoyNDozNFrOGu3-BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMTozNzoxN1rOGu6Giw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNDY3Ng==", "bodyText": "This enum is not used anywhere. This can be removed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r451804676", "createdAt": "2020-07-08T20:24:34Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -110,15 +111,23 @@\n     private final Scheduler scheduler;\n     private final boolean isSharedConnection;\n     private final Runnable onClientClose;\n+    private final ObjectSerializer serializer;\n+\n+    private enum SendMode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e66eb11ab6b56896e089e6128800fd4b7328f8b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzODM1Mg==", "bodyText": "Should this be in a single chain instead of nesting the flatMap operators?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r451838352", "createdAt": "2020-07-08T21:34:22Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -248,6 +263,71 @@ public String getEventHubName() {\n                 }));\n     }\n \n+    /**\n+     * Creates an {@link ObjectBatch} that can fit as many serialized objects as events as the transport allows.\n+     * @param objectType type of object in the batch\n+     * @param <T> object type\n+     *\n+     * @return A new {@link ObjectBatch} that can fit as many serialized objects as events as the transport allows.\n+     */\n+    public <T> Mono<ObjectBatch<T>> createBatch(Class<T> objectType) {\n+        return createBatch(objectType, DEFAULT_BATCH_OPTIONS);\n+    }\n+\n+    /**\n+     * Creates an {@link ObjectBatch} configured with the options specified.\n+     *\n+     * @param objectType type of object in the batch\n+     * @param <T> object type\n+     * @param options A set of options used to configure the {@link ObjectBatch}.\n+     * @return A new {@link ObjectBatch} that can fit as many events as the transport allows.\n+     * @throws NullPointerException if {@code options} is null.\n+     */\n+    public <T> Mono<ObjectBatch<T>> createBatch(Class<T> objectType, CreateBatchOptions options) {\n+        if (objectType == null) {\n+            return monoError(logger, new IllegalArgumentException(\"'objectType' cannot be null.\"));\n+        }\n+        if (serializer == null) {\n+            return monoError(logger,\n+                new NullPointerException(\"No serializer set for performing object serialization for ObjectBatch.\"));\n+        }\n+        if (options == null) {\n+            return monoError(logger, new NullPointerException(\"'options' cannot be null.\"));\n+        }\n+\n+        Mono<ObjectBatch<T>> optionsError = validateBatchOptions(options);\n+        if (optionsError != null) {\n+            return optionsError;\n+        }\n+\n+        final String partitionKey = options.getPartitionKey();\n+        final String partitionId = options.getPartitionId();\n+        final int batchMaxSize = options.getMaximumSizeInBytes();\n+\n+        return getSendLink(partitionId)\n+            .flatMap(link -> link.getLinkSize()\n+                .flatMap(size -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03693c9fe6470ef28aebc6c179cbb088d326a8d2"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzOTYyNw==", "bodyText": "This has to be transitive too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r451839627", "createdAt": "2020-07-08T21:37:17Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/module-info.java", "diffHunk": "@@ -3,6 +3,7 @@\n \n module com.azure.messaging.eventhubs {\n     requires transitive com.azure.core;\n+    requires com.azure.core.experimental;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03693c9fe6470ef28aebc6c179cbb088d326a8d2"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "447522a5a9f105ed55bebb8ed1324a1942ef043d", "author": {"user": {"login": "arerlend", "name": "Arthur Erlendsson"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/447522a5a9f105ed55bebb8ed1324a1942ef043d", "committedDate": "2020-07-08T23:31:12Z", "message": "cleanup"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3033, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}