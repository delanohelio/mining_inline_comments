{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNjIyMzQ2", "number": 16111, "title": "Optimize reads/queries to Gateway and only send SessionToken when applicable", "bodyText": "When using TransportMode==Gateway we always send the SessionToken today when the default consistency is Session even when on request level only Eventual consistency is requested. Because of the 16KB header size limitation this can make it impossible to execute queries/readFeed because the combined session token (across al pk ranges) is used. With this change the session token is only sent when appplicable - optimizing when customer opted-for lower consistency and unblocking queries with eventual consistency for accounts with large number of partitions.", "createdAt": "2020-10-09T14:17:44Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111", "merged": true, "mergeCommit": {"oid": "972163cf527cc1f227db76ac51d99a468e54b878"}, "closed": true, "closedAt": "2020-10-13T10:36:59Z", "author": {"login": "FabianMeiswinkel"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdP8jPrAH2gAyNTAwNjIyMzQ2OmZjNWUyMDQzZjIzZTEzMmYyMzg5OGRmY2I1MWE4ZTFkNzBhZWJjNDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdR8wI9AH2gAyNTAwNjIyMzQ2OjVlNDYzM2QxZTlhZjQyYjA3ODNjNjMyZWU2ZWFhYmMyMjI4MzI2Yzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fc5e2043f23e132f23898dfcb51a8e1d70aebc48", "author": {"user": {"login": "FabianMeiswinkel", "name": "Fabian Meiswinkel"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fc5e2043f23e132f23898dfcb51a8e1d70aebc48", "committedDate": "2020-10-06T18:18:54Z", "message": "Adding repro"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "888626bcdbeb63c9b56ef79aaf44653818419873", "author": {"user": {"login": "FabianMeiswinkel", "name": "Fabian Meiswinkel"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/888626bcdbeb63c9b56ef79aaf44653818419873", "committedDate": "2020-10-09T11:27:51Z", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into users/fabianm/MSCIInvestigation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e930c4ece230616f5214999d768a2c1bcfcc081", "author": {"user": {"login": "FabianMeiswinkel", "name": "Fabian Meiswinkel"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3e930c4ece230616f5214999d768a2c1bcfcc081", "committedDate": "2020-10-09T14:12:24Z", "message": "Only sending SessionToken to Gateway when applicable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1751dfcd48c13335b4147e1f646ca32ae578c0a8", "author": {"user": {"login": "FabianMeiswinkel", "name": "Fabian Meiswinkel"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1751dfcd48c13335b4147e1f646ca32ae578c0a8", "committedDate": "2020-10-09T14:12:57Z", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into users/fabianm/MSCIInvestigation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1NzI5ODM2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#pullrequestreview-505729836", "createdAt": "2020-10-09T14:34:12Z", "commit": {"oid": "1751dfcd48c13335b4147e1f646ca32ae578c0a8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDozNDoxMlrOHfMXEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDozNDoxMlrOHfMXEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ3MDQxNw==", "bodyText": "Are we now supporting request level consistency now?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r502470417", "createdAt": "2020-10-09T14:34:12Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosQueryRequestOptions.java", "diffHunk": "@@ -71,6 +75,31 @@ CosmosQueryRequestOptions setPartitionKeyRangeIdInternal(String partitionKeyRang\n         return this;\n     }\n \n+    /**\n+     * Gets the consistency level required for the request.\n+     *\n+     * @return the consistency level.\n+     */\n+\n+    public ConsistencyLevel getConsistencyLevel() {\n+        return consistencyLevel;\n+    }\n+\n+    /**\n+     * Sets the consistency level required for the request. The effective consistency level\n+     * can only be reduce for read/query requests. So when the Account's default consistency level\n+     * is for example Session you can specify on a request-by-request level for individual requests\n+     * that Eventual consistency is sufficient - which could reduce the latency and RU charges for this\n+     * request but will not guarantee session consistency (read-your-own-write) anymore\n+     *\n+     * @param consistencyLevel the consistency level.\n+     * @return the CosmosItemRequestOptions.\n+     */\n+    public CosmosQueryRequestOptions setConsistencyLevel(ConsistencyLevel consistencyLevel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1751dfcd48c13335b4147e1f646ca32ae578c0a8"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1NzMzNjcw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#pullrequestreview-505733670", "createdAt": "2020-10-09T14:38:08Z", "commit": {"oid": "1751dfcd48c13335b4147e1f646ca32ae578c0a8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDozODowOFrOHfMg6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDozODowOFrOHfMg6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ3MjkzNg==", "bodyText": "What are session-container semantics with request level overrides?\nex: With eventual and session SxS\n\nIs session expected to progress even with eventual requests context?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r502472936", "createdAt": "2020-10-09T14:38:08Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DocumentQueryExecutionContextBase.java", "diffHunk": "@@ -131,11 +131,23 @@ public CosmosQueryRequestOptions getFeedOptions(String continuationToken, Intege\n         Map<String, String> requestHeaders = new HashMap<>();\n \n         ConsistencyLevel defaultConsistencyLevel = this.client.getDefaultConsistencyLevelAsync();\n-        ConsistencyLevel desiredConsistencyLevel = this.client.getDesiredConsistencyLevelAsync();\n+        ConsistencyLevel desiredConsistencyLevel = cosmosQueryRequestOptions.getConsistencyLevel() != null ?\n+            cosmosQueryRequestOptions.getConsistencyLevel():\n+            this.client.getDesiredConsistencyLevelAsync();\n+\n+        boolean sessionTokenApplicable =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1751dfcd48c13335b4147e1f646ca32ae578c0a8"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1ODMwNDIy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#pullrequestreview-505830422", "createdAt": "2020-10-09T16:36:21Z", "commit": {"oid": "1751dfcd48c13335b4147e1f646ca32ae578c0a8"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNjozNjoyMVrOHfRF9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNjo0MDoyNVrOHfRO1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU0Nzk1OQ==", "bodyText": "Should it ignore case?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r502547959", "createdAt": "2020-10-09T16:36:21Z", "author": {"login": "j82w"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java", "diffHunk": "@@ -431,21 +431,28 @@ private void applySessionToken(RxDocumentServiceRequest request) {\n         Map<String, String> headers = request.getHeaders();\n         Objects.requireNonNull(headers, \"RxDocumentServiceRequest::headers is required and cannot be null\");\n \n+        String requestConsistencyLevel = headers.get(HttpConstants.HttpHeaders.CONSISTENCY_LEVEL);\n+\n+        boolean sessionTokenApplicable =\n+            Strings.areEqual(requestConsistencyLevel, ConsistencyLevel.SESSION.toString()) ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1751dfcd48c13335b4147e1f646ca32ae578c0a8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU1MDIyOA==", "bodyText": "Should execute stored procedure be included?\nWhat about get query plan? That never needs the session token.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r502550228", "createdAt": "2020-10-09T16:40:25Z", "author": {"login": "j82w"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java", "diffHunk": "@@ -431,21 +431,28 @@ private void applySessionToken(RxDocumentServiceRequest request) {\n         Map<String, String> headers = request.getHeaders();\n         Objects.requireNonNull(headers, \"RxDocumentServiceRequest::headers is required and cannot be null\");\n \n+        String requestConsistencyLevel = headers.get(HttpConstants.HttpHeaders.CONSISTENCY_LEVEL);\n+\n+        boolean sessionTokenApplicable =\n+            Strings.areEqual(requestConsistencyLevel, ConsistencyLevel.SESSION.toString()) ||\n+                (this.defaultConsistencyLevel == ConsistencyLevel.SESSION &&\n+                    // skip applying the session token when Eventual Consistency is explicitly requested\n+                    // on request-level for data plane operations.\n+                    // The session token is ignored on teh backend/gateway in this case anyway\n+                    // and the session token can be rather large (even run in the 16 KB header length problem\n+                    // on the gateway - so not worth sending when not needed\n+                    (!request.isReadOnlyRequest() ||\n+                        request.getResourceType() != ResourceType.Document ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1751dfcd48c13335b4147e1f646ca32ae578c0a8"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92287756336c91b4a1bce18b62a138acaf3cd103", "author": {"user": {"login": "FabianMeiswinkel", "name": "Fabian Meiswinkel"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/92287756336c91b4a1bce18b62a138acaf3cd103", "committedDate": "2020-10-09T17:20:37Z", "message": "Addressing code review feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1ODc4OTE3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#pullrequestreview-505878917", "createdAt": "2020-10-09T17:50:31Z", "commit": {"oid": "92287756336c91b4a1bce18b62a138acaf3cd103"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzo1MDozMVrOHfTY_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxODowNTowMFrOHfT1AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4NTU5OQ==", "bodyText": "they way query plan is constructed it will never have session token, so this is No-Op. please see QueryPlanRetriever. but I guess it doesn't hurt to be safe.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r502585599", "createdAt": "2020-10-09T17:50:31Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java", "diffHunk": "@@ -114,6 +114,11 @@ public RxGatewayStoreModel(\n     private Mono<RxDocumentServiceResponse> query(RxDocumentServiceRequest request) {\n         if(request.getOperationType() != OperationType.QueryPlan) {\n             request.getHeaders().put(HttpConstants.HttpHeaders.IS_QUERY, \"true\");\n+        } else {\n+            // Session token is irrelevant for query plan\n+            // Gateway can hit header limitation issues quickly so removing it here\n+            // to protect accounts with large number of partitions (big session tokens)\n+            request.getHeaders().remove(HttpConstants.HttpHeaders.SESSION_TOKEN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92287756336c91b4a1bce18b62a138acaf3cd103"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4NjYxOQ==", "bodyText": "the code which sets the consistency level in headers, uses ConsistencyLeve.toString(). hence the casing will be the same. ignore-case equality is not needed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r502586619", "createdAt": "2020-10-09T17:52:27Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java", "diffHunk": "@@ -431,21 +438,28 @@ private void applySessionToken(RxDocumentServiceRequest request) {\n         Map<String, String> headers = request.getHeaders();\n         Objects.requireNonNull(headers, \"RxDocumentServiceRequest::headers is required and cannot be null\");\n \n+        String requestConsistencyLevel = headers.get(HttpConstants.HttpHeaders.CONSISTENCY_LEVEL);\n+\n+        boolean sessionTokenApplicable =\n+            Strings.areEqualIgnoreCase(requestConsistencyLevel, ConsistencyLevel.SESSION.toString()) ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92287756336c91b4a1bce18b62a138acaf3cd103"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4Njk0MQ==", "bodyText": "the code which sets the consistency level in headers, uses ConsistencyLeve.toString(). hence the casing will be the same. ignore-case equality is not needed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r502586941", "createdAt": "2020-10-09T17:53:08Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java", "diffHunk": "@@ -431,21 +438,28 @@ private void applySessionToken(RxDocumentServiceRequest request) {\n         Map<String, String> headers = request.getHeaders();\n         Objects.requireNonNull(headers, \"RxDocumentServiceRequest::headers is required and cannot be null\");\n \n+        String requestConsistencyLevel = headers.get(HttpConstants.HttpHeaders.CONSISTENCY_LEVEL);\n+\n+        boolean sessionTokenApplicable =\n+            Strings.areEqualIgnoreCase(requestConsistencyLevel, ConsistencyLevel.SESSION.toString()) ||\n+                (this.defaultConsistencyLevel == ConsistencyLevel.SESSION &&\n+                    // skip applying the session token when Eventual Consistency is explicitly requested\n+                    // on request-level for data plane operations.\n+                    // The session token is ignored on teh backend/gateway in this case anyway\n+                    // and the session token can be rather large (even run in the 16 KB header length problem\n+                    // on the gateway - so not worth sending when not needed\n+                    (!request.isReadOnlyRequest() ||\n+                        request.getResourceType() != ResourceType.Document ||\n+                        !Strings.areEqualIgnoreCase(requestConsistencyLevel, ConsistencyLevel.EVENTUAL.toString())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92287756336c91b4a1bce18b62a138acaf3cd103"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5MTMzNA==", "bodyText": "If the account default consistency is session, client default consistency is set to be eventual, but for an individual request consistency is set to session, we will have a problem.\nBy default in java v4 we don't capture session tokens for non session consistency.\nwe should document that if the user wants to use this per request option, the user has to enable per request session capturing on the cosmos-client-builder and we should make the method for that public.\nsee CosmosClientBuilder:sessionCapturingOverrideEnabled()\nCosmosItemRequestOption.setConsistencyLevel() and CosmosClientBuilder:sessionCapturingOverrideEnabled() should go hand in hand.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r502591334", "createdAt": "2020-10-09T18:01:59Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosItemRequestOptions.java", "diffHunk": "@@ -101,17 +101,21 @@ public CosmosItemRequestOptions setIfNoneMatchETag(String ifNoneMatchETag) {\n      * @return the consistency level.\n      */\n \n-    ConsistencyLevel getConsistencyLevel() {\n+    public ConsistencyLevel getConsistencyLevel() {\n         return consistencyLevel;\n     }\n \n     /**\n-     * Sets the consistency level required for the request.\n+     * Sets the consistency level required for the request. The effective consistency level\n+     * can only be reduce for read/query requests. So when the Account's default consistency level\n+     * is for example Session you can specify on a request-by-request level for individual requests\n+     * that Eventual consistency is sufficient - which could reduce the latency and RU charges for this\n+     * request but will not guarantee session consistency (read-your-own-write) anymore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92287756336c91b4a1bce18b62a138acaf3cd103"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5MjQ4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    System.out.println(\"REQUEST DIAGNOSTICS: \" + readResponse1.getDiagnostics().toString());\n          \n          \n            \n                    logger.info(\"REQUEST DIAGNOSTICS: {}\" readResponse1.getDiagnostics());", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r502592486", "createdAt": "2020-10-09T18:04:24Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosItemTest.java", "diffHunk": "@@ -101,6 +102,30 @@ public void readItem() throws Exception {\n \n     }\n \n+    @Test(groups = { \"simple\" }, timeOut = TIMEOUT)\n+    public void readItemWithEventualConsistency() throws Exception {\n+\n+        CosmosAsyncContainer asyncContainer = getSharedMultiPartitionCosmosContainer(this.client.asyncClient());\n+        container = client.getDatabase(asyncContainer.getDatabase().getId()).getContainer(asyncContainer.getId());\n+\n+        String idAndPkValue = UUID.randomUUID().toString();\n+        ObjectNode properties = getDocumentDefinition(idAndPkValue, idAndPkValue);\n+        CosmosItemResponse<ObjectNode> itemResponse = container.createItem(properties);\n+\n+        CosmosItemResponse<ObjectNode> readResponse1 = container.readItem(\n+            idAndPkValue,\n+            new PartitionKey(idAndPkValue),\n+            new CosmosItemRequestOptions()\n+                // generate an invalid session token large enough to cause an error in Gateway\n+                // due to header being too long\n+                .setSessionToken(StringUtils.repeat(\"SomeManualInvalidSessionToken\", 2000))\n+                .setConsistencyLevel(ConsistencyLevel.EVENTUAL),\n+            ObjectNode.class);\n+\n+        System.out.println(\"REQUEST DIAGNOSTICS: \" + readResponse1.getDiagnostics().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92287756336c91b4a1bce18b62a138acaf3cd103"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5MjY2MA==", "bodyText": "please remove.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r502592660", "createdAt": "2020-10-09T18:04:49Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosItemTest.java", "diffHunk": "@@ -175,6 +199,41 @@ public void queryItems() throws Exception{\n         assertThat(feedResponseIterator3.iterator().hasNext()).isTrue();\n     }\n \n+    @Test(groups = { \"simple\" }, timeOut = TIMEOUT)\n+    public void queryItemsWithEventualConsistency() throws Exception{\n+\n+        CosmosAsyncContainer asyncContainer = getSharedMultiPartitionCosmosContainer(this.client.asyncClient());\n+        container = client.getDatabase(asyncContainer.getDatabase().getId()).getContainer(asyncContainer.getId());\n+\n+        String idAndPkValue = UUID.randomUUID().toString();\n+        ObjectNode properties = getDocumentDefinition(idAndPkValue, idAndPkValue);\n+        CosmosItemResponse<ObjectNode> itemResponse = container.createItem(properties);\n+\n+        String query = String.format(\"SELECT * from c where c.id = '%s'\", idAndPkValue);\n+        CosmosQueryRequestOptions cosmosQueryRequestOptions =\n+            new CosmosQueryRequestOptions()\n+                // generate an invalid session token large enough to cause an error in Gateway\n+                // due to header being too long\n+                .setSessionToken(StringUtils.repeat(\"SomeManualInvalidSessionToken\", 2000))\n+                .setConsistencyLevel(ConsistencyLevel.EVENTUAL);\n+\n+        CosmosPagedIterable<ObjectNode> feedResponseIterator1 =\n+            container.queryItems(query, cosmosQueryRequestOptions, ObjectNode.class);\n+        feedResponseIterator1.handle((r) -> System.out.println(\"Query RequestDiagnostics: \" + r.getCosmosDiagnostics().toString()));\n+        System.out.println(\"hello world\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92287756336c91b4a1bce18b62a138acaf3cd103"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5Mjc2OA==", "bodyText": "ditto on the System.out.println -> logger", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r502592768", "createdAt": "2020-10-09T18:05:00Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosItemTest.java", "diffHunk": "@@ -175,6 +199,41 @@ public void queryItems() throws Exception{\n         assertThat(feedResponseIterator3.iterator().hasNext()).isTrue();\n     }\n \n+    @Test(groups = { \"simple\" }, timeOut = TIMEOUT)\n+    public void queryItemsWithEventualConsistency() throws Exception{\n+\n+        CosmosAsyncContainer asyncContainer = getSharedMultiPartitionCosmosContainer(this.client.asyncClient());\n+        container = client.getDatabase(asyncContainer.getDatabase().getId()).getContainer(asyncContainer.getId());\n+\n+        String idAndPkValue = UUID.randomUUID().toString();\n+        ObjectNode properties = getDocumentDefinition(idAndPkValue, idAndPkValue);\n+        CosmosItemResponse<ObjectNode> itemResponse = container.createItem(properties);\n+\n+        String query = String.format(\"SELECT * from c where c.id = '%s'\", idAndPkValue);\n+        CosmosQueryRequestOptions cosmosQueryRequestOptions =\n+            new CosmosQueryRequestOptions()\n+                // generate an invalid session token large enough to cause an error in Gateway\n+                // due to header being too long\n+                .setSessionToken(StringUtils.repeat(\"SomeManualInvalidSessionToken\", 2000))\n+                .setConsistencyLevel(ConsistencyLevel.EVENTUAL);\n+\n+        CosmosPagedIterable<ObjectNode> feedResponseIterator1 =\n+            container.queryItems(query, cosmosQueryRequestOptions, ObjectNode.class);\n+        feedResponseIterator1.handle((r) -> System.out.println(\"Query RequestDiagnostics: \" + r.getCosmosDiagnostics().toString()));\n+        System.out.println(\"hello world\");\n+\n+        // Very basic validation\n+        assertThat(feedResponseIterator1.iterator().hasNext()).isTrue();\n+        assertThat(feedResponseIterator1.stream().count() == 1);\n+\n+        SqlQuerySpec querySpec = new SqlQuerySpec(query);\n+        CosmosPagedIterable<ObjectNode> feedResponseIterator3 =\n+            container.queryItems(querySpec, cosmosQueryRequestOptions, ObjectNode.class);\n+        feedResponseIterator3.handle((r) -> System.out.println(\"Query RequestDiagnostics: \" + r.getCosmosDiagnostics().toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92287756336c91b4a1bce18b62a138acaf3cd103"}, "originalPosition": 81}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e72e47809bd90cab4fad22b2a37d7ca5b945d7ee", "author": {"user": {"login": "FabianMeiswinkel", "name": "Fabian Meiswinkel"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e72e47809bd90cab4fad22b2a37d7ca5b945d7ee", "committedDate": "2020-10-12T21:23:06Z", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into users/fabianm/MSCIInvestigation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a524a36752f7f0e27215241fcc49deee29224817", "author": {"user": {"login": "FabianMeiswinkel", "name": "Fabian Meiswinkel"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a524a36752f7f0e27215241fcc49deee29224817", "committedDate": "2020-10-12T21:48:01Z", "message": "Addressing code review comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2OTczNDc1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#pullrequestreview-506973475", "createdAt": "2020-10-12T23:24:40Z", "commit": {"oid": "a524a36752f7f0e27215241fcc49deee29224817"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzoyNDo0MFrOHgQPHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzoyNDo0MFrOHgQPHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU4MjQ5Mw==", "bodyText": "CosmosClientBuilder:sessionCapturingOverrideEnabled(true) would only be needed when you set the request consistency to Session.\nIt is not needed if you set the request consistency to Strong nor for Bounded-Staleness.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r503582493", "createdAt": "2020-10-12T23:24:40Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosItemRequestOptions.java", "diffHunk": "@@ -100,18 +100,25 @@ public CosmosItemRequestOptions setIfNoneMatchETag(String ifNoneMatchETag) {\n      *\n      * @return the consistency level.\n      */\n-\n-    ConsistencyLevel getConsistencyLevel() {\n+    public ConsistencyLevel getConsistencyLevel() {\n         return consistencyLevel;\n     }\n \n     /**\n-     * Sets the consistency level required for the request.\n+     * Sets the consistency level required for the request. The effective consistency level\n+     * can only be reduce for read/query requests. So when the Account's default consistency level\n+     * is for example Session you can specify on a request-by-request level for individual requests\n+     * that Eventual consistency is sufficient - which could reduce the latency and RU charges for this\n+     * request but will not guarantee session consistency (read-your-own-write) anymore\n+     * NOTE: If the consistency-level set on a request level here is higher than the default consistency\n+     * level set when constructing the CosmosClient instance via CosmosClientBuilder.consistencyLevel\n+     * session token capturing also needs to be enabled by calling\n+     * CosmosClientBuilder:sessionCapturingOverrideEnabled(true).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a524a36752f7f0e27215241fcc49deee29224817"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2OTczNzYw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#pullrequestreview-506973760", "createdAt": "2020-10-12T23:25:32Z", "commit": {"oid": "a524a36752f7f0e27215241fcc49deee29224817"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e4633d1e9af42b0783c632ee6eaabc2228326c7", "author": {"user": {"login": "FabianMeiswinkel", "name": "Fabian Meiswinkel"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5e4633d1e9af42b0783c632ee6eaabc2228326c7", "committedDate": "2020-10-12T23:40:50Z", "message": "Fixing comment"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2217, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}