{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2Mzk5NDM3", "number": 10385, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMjoyMzozMlrOD0Alvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjowMToxMVrOD0hU0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODYyMjA3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/exception/AmqpResponseCode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMjoyMzozMlrOGIviTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMjoyMzozMlrOGIviTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyMDYyMw==", "bodyText": "Changed from hex to dec values for readability.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10385#discussion_r411820623", "createdAt": "2020-04-21T02:23:32Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/exception/AmqpResponseCode.java", "diffHunk": "@@ -10,13 +10,54 @@\n  * Error response codes returned from AMQP.\n  */\n public enum AmqpResponseCode {\n-    ACCEPTED(0xca),\n+    ACCEPTED(202),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bf2d935281e0b60800405013c4cb8c808ad2cf5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjA2NzQ2OnYy", "diffSide": "LEFT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzowNjozMFrOGJO6sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODoxNzowNFrOGJR_vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMzNDc2OA==", "bodyText": "How are we checking the error condition and throw error when service did not send OK status code ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10385#discussion_r412334768", "createdAt": "2020-04-21T17:06:30Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -86,19 +84,11 @@\n         return isAuthorized(ManagementConstants.OPERATION_CANCEL_SCHEDULED_MESSAGE)\n             .then(createChannel.flatMap(channel -> {\n                 final Message requestMessage = createManagementMessage(\n-                    ManagementConstants.OPERATION_CANCEL_SCHEDULED_MESSAGE, channel.getReceiveLinkName());\n+                    ManagementConstants.OPERATION_CANCEL_SCHEDULED_MESSAGE, null);\n \n                 requestMessage.setBody(new AmqpValue(Collections.singletonMap(ManagementConstants.SEQUENCE_NUMBERS,\n                     new Long[]{sequenceNumber})));\n                 return channel.sendWithAck(requestMessage);\n-            }).map(responseMessage -> {\n-                int statusCode = RequestResponseUtils.getResponseStatusCode(responseMessage);\n-\n-                if (statusCode == AmqpResponseCode.OK.getValue()) {\n-                    return Mono.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1368b371445a454fdefbfeee1ed4410fb998d8a1"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM4NTIxMg==", "bodyText": "Resolved", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10385#discussion_r412385212", "createdAt": "2020-04-21T18:17:04Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -86,19 +84,11 @@\n         return isAuthorized(ManagementConstants.OPERATION_CANCEL_SCHEDULED_MESSAGE)\n             .then(createChannel.flatMap(channel -> {\n                 final Message requestMessage = createManagementMessage(\n-                    ManagementConstants.OPERATION_CANCEL_SCHEDULED_MESSAGE, channel.getReceiveLinkName());\n+                    ManagementConstants.OPERATION_CANCEL_SCHEDULED_MESSAGE, null);\n \n                 requestMessage.setBody(new AmqpValue(Collections.singletonMap(ManagementConstants.SEQUENCE_NUMBERS,\n                     new Long[]{sequenceNumber})));\n                 return channel.sendWithAck(requestMessage);\n-            }).map(responseMessage -> {\n-                int statusCode = RequestResponseUtils.getResponseStatusCode(responseMessage);\n-\n-                if (statusCode == AmqpResponseCode.OK.getValue()) {\n-                    return Mono.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMzNDc2OA=="}, "originalCommit": {"oid": "1368b371445a454fdefbfeee1ed4410fb998d8a1"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjA4MDU1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzowOToxNlrOGJPCYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzowOToxNlrOGJPCYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMzNjczOA==", "bodyText": "Should we use CoreUtils.isNullOrEmpty(associatedLinkName) here ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10385#discussion_r412336738", "createdAt": "2020-04-21T17:09:16Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -417,17 +383,17 @@ private Message createDispositionMessage(UUID[] lockTokens, DispositionStatus di\n      * Creates an AMQP message with the required application properties.\n      *\n      * @param operation Management operation to perform (ie. peek, update-disposition, etc.)\n-     * @param linkName Name of receiver link associated with operation.\n+     * @param associatedLinkName Name of the open receive link that first received the message.\n      * @return An AMQP message with the required headers.\n      */\n-    private Message createManagementMessage(String operation, String linkName) {\n+    private Message createManagementMessage(String operation, String associatedLinkName) {\n         final Duration serverTimeout = MessageUtils.adjustServerTimeout(operationTimeout);\n         final Map<String, Object> applicationProperties = new HashMap<>();\n         applicationProperties.put(ManagementConstants.MANAGEMENT_OPERATION_KEY, operation);\n         applicationProperties.put(ManagementConstants.SERVER_TIMEOUT, serverTimeout.toMillis());\n \n-        if (linkName != null && !linkName.isEmpty()) {\n-            applicationProperties.put(ManagementConstants.ASSOCIATED_LINK_NAME_KEY, linkName);\n+        if (associatedLinkName != null && !associatedLinkName.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1368b371445a454fdefbfeee1ed4410fb998d8a1"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjU1NTUzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/RequestResponseChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODo1MjoyOVrOGJTbrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODo1MjoyOVrOGJTbrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwODc1MA==", "bodyText": "nit: FluxUtil in azure-core has monoError static helper log and return errors.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10385#discussion_r412408750", "createdAt": "2020-04-21T18:52:29Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/RequestResponseChannel.java", "diffHunk": "@@ -220,8 +196,7 @@ public boolean isDisposed() {\n         }\n \n         if (message == null) {\n-            return Mono.error(logger.logExceptionAsError(\n-                new IllegalArgumentException(\"message cannot be null\")));\n+            return Mono.error(logger.logExceptionAsError(new NullPointerException(\"message cannot be null\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bacc41fe0228453797145543e03c7ca347dc98a6"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Mzk3NjE5OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMTo1NzoyMVrOGJf3Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMTo1NzoyMVrOGJf3Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYxMjM1NA==", "bodyText": "Can this be configurable? Or at least made a constant?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10385#discussion_r412612354", "createdAt": "2020-04-22T01:57:21Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -118,9 +112,10 @@\n         this.receiveMode = receiverOptions.getReceiveMode();\n         this.sessionId = receiverOptions.getSessionId();\n         this.entityType = entityType;\n-        this.messageLockContainer = messageLockContainer;\n         this.onClientClose = onClientClose;\n \n+        this.linkName = StringUtil.getRandomString(entityPath);\n+        this.managementNodeLocks = new MessageLockContainer(Duration.ofSeconds(30));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58bb77e88b8f7970f34adc154f867f9060b4735e"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Mzk4NTQ3OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageLockContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjowMToxMVrOGJf8Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjoyMToyOFrOGJzaTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYxMzcwMg==", "bodyText": "Maybe worth making this log info as removing expired entries should be uncommon and users should be able to see it at info level? Also, consider adding a count of expired entries removed in the log.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10385#discussion_r412613702", "createdAt": "2020-04-22T02:01:11Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageLockContainer.java", "diffHunk": "@@ -3,14 +3,41 @@\n \n package com.azure.messaging.servicebus.implementation;\n \n+import com.azure.core.util.logging.ClientLogger;\n+import reactor.core.Disposable;\n+import reactor.core.publisher.Flux;\n+\n+import java.time.Duration;\n import java.time.Instant;\n import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n /**\n- * Container of Message lock and related metadata related.\n+ * Container for message locks that are cleaned up periodically.\n  */\n-public class MessageLockContainer {\n-    private final ConcurrentHashMap<String, Instant> lockTokenExpirationMap = new ConcurrentHashMap<>();\n+public class MessageLockContainer implements AutoCloseable {\n+    private final ClientLogger logger = new ClientLogger(MessageLockContainer.class);\n+    private final ConcurrentHashMap<String, Instant> lockTokens = new ConcurrentHashMap<>();\n+    private final AtomicBoolean isDisposed = new AtomicBoolean();\n+    private final Disposable cleanupOperation;\n+\n+    public MessageLockContainer(Duration cleanupInterval) {\n+        cleanupOperation = Flux.interval(cleanupInterval).subscribe(e -> {\n+            if (lockTokens.isEmpty()) {\n+                return;\n+            }\n+\n+            final Instant now = Instant.now();\n+            final boolean removed = lockTokens.entrySet().removeIf(entry -> {\n+                final Instant expiration = entry.getValue();\n+                return expiration != null && expiration.isBefore(now);\n+            });\n+\n+            if (removed) {\n+                logger.verbose(\"{}: Removed expired entries.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58bb77e88b8f7970f34adc154f867f9060b4735e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkzMjY4NA==", "bodyText": "makes sense. I updated it!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10385#discussion_r412932684", "createdAt": "2020-04-22T12:21:28Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageLockContainer.java", "diffHunk": "@@ -3,14 +3,41 @@\n \n package com.azure.messaging.servicebus.implementation;\n \n+import com.azure.core.util.logging.ClientLogger;\n+import reactor.core.Disposable;\n+import reactor.core.publisher.Flux;\n+\n+import java.time.Duration;\n import java.time.Instant;\n import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n /**\n- * Container of Message lock and related metadata related.\n+ * Container for message locks that are cleaned up periodically.\n  */\n-public class MessageLockContainer {\n-    private final ConcurrentHashMap<String, Instant> lockTokenExpirationMap = new ConcurrentHashMap<>();\n+public class MessageLockContainer implements AutoCloseable {\n+    private final ClientLogger logger = new ClientLogger(MessageLockContainer.class);\n+    private final ConcurrentHashMap<String, Instant> lockTokens = new ConcurrentHashMap<>();\n+    private final AtomicBoolean isDisposed = new AtomicBoolean();\n+    private final Disposable cleanupOperation;\n+\n+    public MessageLockContainer(Duration cleanupInterval) {\n+        cleanupOperation = Flux.interval(cleanupInterval).subscribe(e -> {\n+            if (lockTokens.isEmpty()) {\n+                return;\n+            }\n+\n+            final Instant now = Instant.now();\n+            final boolean removed = lockTokens.entrySet().removeIf(entry -> {\n+                final Instant expiration = entry.getValue();\n+                return expiration != null && expiration.isBefore(now);\n+            });\n+\n+            if (removed) {\n+                logger.verbose(\"{}: Removed expired entries.\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYxMzcwMg=="}, "originalCommit": {"oid": "58bb77e88b8f7970f34adc154f867f9060b4735e"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4556, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}