{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MTg3MDc2", "number": 10369, "title": "Intellij credential", "bodyText": "", "createdAt": "2020-04-20T17:05:04Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369", "merged": true, "mergeCommit": {"oid": "0162523f7c45df35e527a544693e36e58346d491"}, "closed": true, "closedAt": "2020-05-04T18:05:48Z", "author": {"login": "g2vinay"}, "timelineItems": {"totalCount": 44, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVMZ4GgH2gAyNDA2MTg3MDc2OjhmZjU0ZDRkMTBhYWM0OTA1ZjU2ZTRjZTA5OWNhMjdkYTE4ZDM1ZjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceCpRZAH2gAyNDA2MTg3MDc2OmRlMGQwZGMxYTRhMTRkOTVkYjM0ZDRlMDYyMjc5N2JmMTcxNjVmNTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8ff54d4d10aac4905f56e4ce099ca27da18d35f2", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8ff54d4d10aac4905f56e4ce099ca27da18d35f2", "committedDate": "2020-04-07T05:25:37Z", "message": "intelliJ credential changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8c5226da15e3e7ab2f9a2ef162753beaf84be02", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a8c5226da15e3e7ab2f9a2ef162753beaf84be02", "committedDate": "2020-04-14T08:53:49Z", "message": "use persistence"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "558a6e08aea673991a63ca06a4b071cbb373bd98", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/558a6e08aea673991a63ca06a4b071cbb373bd98", "committedDate": "2020-04-19T07:34:42Z", "message": "update credentials"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74a7a5388b6935422beac8811508967cda0f3929", "author": {"user": {"login": "g2vinay", "name": "Vinay Gera"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/74a7a5388b6935422beac8811508967cda0f3929", "committedDate": "2020-04-20T13:13:44Z", "message": "windows creds"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "389f64da0b8ec0d2168e565d556dde39b5ddbdf9", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/389f64da0b8ec0d2168e565d556dde39b5ddbdf9", "committedDate": "2020-04-20T17:03:34Z", "message": "update credentials"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NjUxOTkz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#pullrequestreview-396651993", "createdAt": "2020-04-20T17:13:01Z", "commit": {"oid": "389f64da0b8ec0d2168e565d556dde39b5ddbdf9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzoxMzowMVrOGIe9lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzoxMzowMVrOGIe9lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU0OTA3OA==", "bodyText": "I am not sure why this is required. Is this specific to an IDE? It would be good to add some description of why this change is needed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#discussion_r411549078", "createdAt": "2020-04-20T17:13:01Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/IntelliJCredential.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity;\n+\n+import com.azure.core.annotation.Immutable;\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.identity.implementation.IdentityClient;\n+import com.azure.identity.implementation.IdentityClientBuilder;\n+import com.azure.identity.implementation.IdentityClientOptions;\n+import com.azure.identity.implementation.MsalToken;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * A credential provider that provides token credentials based on Azure CLI\n+ * command.\n+ */\n+@Immutable\n+public class IntelliJCredential implements TokenCredential {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "389f64da0b8ec0d2168e565d556dde39b5ddbdf9"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bca088abf05c196123fd93d5e34a9e6ed6f6a2fa", "author": {"user": {"login": "g2vinay", "name": "Vinay Gera"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bca088abf05c196123fd93d5e34a9e6ed6f6a2fa", "committedDate": "2020-04-22T15:26:24Z", "message": "refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94db19ff3020291c0bccb2f2acf3aefb8af41203", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/94db19ff3020291c0bccb2f2acf3aefb8af41203", "committedDate": "2020-04-24T10:36:37Z", "message": "refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea1e85061d6a16c768168c860fbb2ccb660f02d9", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ea1e85061d6a16c768168c860fbb2ccb660f02d9", "committedDate": "2020-04-24T10:43:05Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e38a30ff2f93755af72ec4a5353093be4ced3e76", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e38a30ff2f93755af72ec4a5353093be4ced3e76", "committedDate": "2020-04-24T16:29:12Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c909caacc23ae82c3e505d5df73586ddbe83e416", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c909caacc23ae82c3e505d5df73586ddbe83e416", "committedDate": "2020-04-24T16:48:24Z", "message": "update docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d89ac4a331dc32c1d0c9a23b4b0737e94e4a92f", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4d89ac4a331dc32c1d0c9a23b4b0737e94e4a92f", "committedDate": "2020-04-24T16:51:31Z", "message": "update docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcc03a0518279de77f113f6a6344e10552d26e54", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/dcc03a0518279de77f113f6a6344e10552d26e54", "committedDate": "2020-04-24T17:13:02Z", "message": "update docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTU5MjIz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#pullrequestreview-400159223", "createdAt": "2020-04-24T17:59:16Z", "commit": {"oid": "dcc03a0518279de77f113f6a6344e10552d26e54"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzo1OToxNlrOGLjBpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzo1OToxNlrOGLjBpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2MTM4MQ==", "bodyText": "This class should not be public, we're just adding the IDE style credentials to the DefaultAzureCredential but not actually exposing the types directly.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#discussion_r414761381", "createdAt": "2020-04-24T17:59:16Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/IntelliJCredential.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity;\n+\n+import com.azure.core.annotation.Immutable;\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.identity.implementation.IdentityClient;\n+import com.azure.identity.implementation.IdentityClientBuilder;\n+import com.azure.identity.implementation.IdentityClientOptions;\n+import com.azure.identity.implementation.MsalToken;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * A credential provider that provides token credentials from Azure Tools for IntelliJ plugin credential cache.\n+ *\n+ * <p> If the developer has authenticated successfully with Azure Tools for IntelliJ plugin in the IntelliJ IDE then\n+ * this credential can be used in the development code to reuse the cached plugin credentials.</p>\n+ *\n+ * @see IntelliJCredentialBuilder\n+ */\n+@Immutable\n+public class IntelliJCredential implements TokenCredential {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcc03a0518279de77f113f6a6344e10552d26e54"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTU5OTEz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#pullrequestreview-400159913", "createdAt": "2020-04-24T18:00:17Z", "commit": {"oid": "dcc03a0518279de77f113f6a6344e10552d26e54"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODowMDoxN1rOGLjD6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODowMDoxN1rOGLjD6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2MTk2MQ==", "bodyText": "This should be removed when we hide the credential class. Any configuration from this builder will have to be added to the DefaultAzureCredentialBuilder.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#discussion_r414761961", "createdAt": "2020-04-24T18:00:17Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/IntelliJCredentialBuilder.java", "diffHunk": "@@ -0,0 +1,45 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity;\n+\n+import com.azure.core.util.CoreUtils;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Fluent credential builder for instantiating a {@link IntelliJCredential}.\n+ *\n+ * @see IntelliJCredential\n+ */\n+public class IntelliJCredentialBuilder extends CredentialBuilderBase<IntelliJCredentialBuilder> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcc03a0518279de77f113f6a6344e10552d26e54"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTY0Mjcx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#pullrequestreview-400164271", "createdAt": "2020-04-24T18:06:38Z", "commit": {"oid": "dcc03a0518279de77f113f6a6344e10552d26e54"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODowNjozOVrOGLjS-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODowNjozOVrOGLjS-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2NTgxNw==", "bodyText": "Looks like we're using msal extension library's KeyChainAccessor class  to access KeyChain on mac. Is no similar class available for Key Ring on linux?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#discussion_r414765817", "createdAt": "2020-04-24T18:06:39Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/LinuxKeyRingAccessor.java", "diffHunk": "@@ -0,0 +1,102 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.aad.msal4jextensions.persistence.linux.ISecurityLibrary;\n+import com.sun.jna.Pointer;\n+import com.sun.jna.Structure;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * This class exposes functions from Key Ring on Linux platform\n+ * via JNA.\n+ */\n+public class LinuxKeyRingAccessor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcc03a0518279de77f113f6a6344e10552d26e54"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTY0NzAy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#pullrequestreview-400164702", "createdAt": "2020-04-24T18:07:23Z", "commit": {"oid": "dcc03a0518279de77f113f6a6344e10552d26e54"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0133d4a6473ea69c59ab6317d18914b6860c34f5", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0133d4a6473ea69c59ab6317d18914b6860c34f5", "committedDate": "2020-04-24T18:45:07Z", "message": "code refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTc5OTA3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#pullrequestreview-400179907", "createdAt": "2020-04-24T18:30:59Z", "commit": {"oid": "dcc03a0518279de77f113f6a6344e10552d26e54"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODozMDo1OVrOGLkKuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODo0NjowOFrOGLktBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc4MDA5MQ==", "bodyText": "Are these approved external dependencies?\n@JonathanGiles", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#discussion_r414780091", "createdAt": "2020-04-24T18:30:59Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/pom.xml", "diffHunk": "@@ -93,6 +93,18 @@\n       <version>2.8.5</version> <!-- {x-version-update;com.google.code.gson:gson;external_dependency} -->\n       <scope>test</scope>\n     </dependency>\n+\n+    <dependency>\n+      <groupId>com.microsoft.azure</groupId>\n+      <artifactId>msal4j-persistence-extension</artifactId>\n+      <version>0.1</version> <!-- {x-version-update;com.microsoft.azure:msal4j-persistence-extension;external_dependency} -->\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.linguafranca.pwdb</groupId>\n+      <artifactId>KeePassJava2</artifactId>\n+      <version>2.1.4</version> <!-- {x-version-update;org.linguafranca.pwdb:KeePassJava2;external_dependency} -->\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcc03a0518279de77f113f6a6344e10552d26e54"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc4MTM5Ng==", "bodyText": "Consider making this a static array instead of creating it each time this method is called.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#discussion_r414781396", "createdAt": "2020-04-24T18:33:11Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IntelliJCacheAccessor.java", "diffHunk": "@@ -0,0 +1,216 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.microsoft.aad.msal4jextensions.persistence.mac.KeyChainAccessor;\n+import com.sun.jna.platform.win32.Crypt32Util;\n+import org.linguafranca.pwdb.Database;\n+import org.linguafranca.pwdb.Entry;\n+import org.linguafranca.pwdb.kdbx.KdbxCreds;\n+import org.linguafranca.pwdb.kdbx.simple.SimpleDatabase;\n+\n+import javax.crypto.BadPaddingException;\n+import javax.crypto.Cipher;\n+import javax.crypto.IllegalBlockSizeException;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.spec.IvParameterSpec;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.FileInputStream;\n+import java.nio.ByteBuffer;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+\n+/**\n+ * This class accesses IntelliJ Azure Tools credentials cache via JNA.\n+ */\n+public class IntelliJCacheAccessor {\n+    private final ClientLogger logger = new ClientLogger(IntelliJCacheAccessor.class);\n+    private String keepPassDatabasePath;\n+\n+    /**\n+     * Creates an instance of {@link IntelliJCacheAccessor}\n+     *\n+     * @param keepPassDatabasePath the keep pass database path.\n+     */\n+    public IntelliJCacheAccessor(String keepPassDatabasePath) {\n+        this.keepPassDatabasePath = keepPassDatabasePath;\n+    }\n+\n+    private String getAzureToolsforIntelliJPluginConfigPath() {\n+        return System.getProperty(\"user.home\") + String.format(\"%sAzureToolsForIntelliJ\", File.separator);\n+    }\n+\n+    /**\n+     * Get the current authentication method details of Azure Tools plugin in IntelliJ IDE.\n+     *\n+     * @return the {@link IntelliJAuthMethodDetails}\n+     * @throws IOException if an error is encountered while reading the auth details file.\n+     */\n+    public IntelliJAuthMethodDetails getIntelliJAuthDetails() throws IOException {\n+        StringBuilder authMethodDetailsPath = new StringBuilder(getAzureToolsforIntelliJPluginConfigPath());\n+        authMethodDetailsPath.append(String.format(\"%sAuthMethodDetails.json\", File.separator));\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        File file = new File(authMethodDetailsPath.toString());\n+        return objectMapper.readValue(file, IntelliJAuthMethodDetails.class);\n+    }\n+\n+    /**\n+     * Get the Device Code credential details of Azure Tools plugin in the IntelliJ IDE.\n+     *\n+     * @return the {@link JsonNode} holding the authentication details.\n+     * @throws IOException\n+     */\n+    public JsonNode getDeviceCodeCredentials() throws IOException {\n+        String os = System.getProperty(\"os.name\").toLowerCase(Locale.ROOT);\n+\n+        if (os.contains(\"mac\")) {\n+            KeyChainAccessor accessor = new KeyChainAccessor(null, \"ADAuthManager\",\n+                \"cachedAuthResult\");\n+\n+            String jsonCred  = new String(accessor.read());\n+\n+            ObjectMapper mapper = new ObjectMapper();\n+            return mapper.readTree(jsonCred);\n+\n+        } else if (os.contains(\"nix\") || os.contains(\"nux\")) {\n+            LinuxKeyRingAccessor accessor = new LinuxKeyRingAccessor(\n+                \"com.intellij.credentialStore.Credential\",\n+                \"service\", \"ADAuthManager\",\n+                \"account\", \"cachedAuthResult\");\n+\n+            String jsonCred  = new String(accessor.read());\n+            if (jsonCred.startsWith(\"cachedAuthResult@\")) {\n+                jsonCred = jsonCred.replaceFirst(\"cachedAuthResult@\", \"\");\n+            }\n+\n+            ObjectMapper mapper = new ObjectMapper();\n+            return mapper.readTree(jsonCred);\n+\n+        } else if (os.contains(\"win\")) {\n+            return getCredentialFromKdbx();\n+        } else {\n+            throw logger.logExceptionAsError(new RuntimeException(String.format(\"OS %s Platform not supported.\", os)));\n+        }\n+    }\n+\n+    /**\n+     * Get the Service Principal credential details of Azure Tools plugin in the IntelliJ IDE.\n+     *\n+     * @param credFilePath the file path holding authentication details\n+     * @return the {@link HashMap} holding auth details.\n+     * @throws IOException if an error is countered while reading the credential file.\n+     */\n+    public HashMap<String, String> getIntellijServicePrincipalDetails(String credFilePath) throws IOException {\n+        BufferedReader reader = null;\n+        HashMap<String, String> servicePrincipalDetails = new HashMap<>(8);\n+        try {\n+            reader = new BufferedReader(new FileReader(credFilePath));\n+            String line = reader.readLine();\n+            while (line != null) {\n+                String[] split = line.split(\"=\");\n+                split[1] = split[1].replace(\"\\\\\", \"\");\n+                servicePrincipalDetails.put(split[0], split[1]);\n+                // read next line\n+                line = reader.readLine();\n+            }\n+        } finally {\n+            if (reader != null) {\n+                reader.close();\n+            }\n+        }\n+        return servicePrincipalDetails;\n+    }\n+\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    private JsonNode getCredentialFromKdbx() throws IOException {\n+        String extractedpwd = getKdbxPassword();\n+\n+        byte[] cryptoKey = new byte[]{0x50, 0x72, 0x6f, 0x78, 0x79, 0x20, 0x43, 0x6f, 0x6e, 0x66,\n+            0x69, 0x67, 0x20, 0x53, 0x65, 0x63};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcc03a0518279de77f113f6a6344e10552d26e54"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc4Nzk2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                + \" Plese login with Azure Tools for IntelliJ plugin in the IDE.\"));\n          \n          \n            \n                                + \" Please login with Azure Tools for IntelliJ plugin in the IDE.\"));", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#discussion_r414787960", "createdAt": "2020-04-24T18:44:32Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -148,6 +151,65 @@\n         }\n     }\n \n+\n+    public Mono<MsalToken> authenticateWithIntelliJ(TokenRequestContext request) {\n+        try {\n+            IntelliJCacheAccessor cacheAccessor = new IntelliJCacheAccessor(options.getKeepPassDatabasePath());\n+            IntelliJAuthMethodDetails authDetails = cacheAccessor.getIntelliJAuthDetails();\n+            String authType = authDetails.getAuthMethod();\n+            if (CoreUtils.isNullOrEmpty(authType)) {\n+                throw logger.logExceptionAsError(new RuntimeException(\"IntelliJ Authentication not available.\"\n+                    + \" Plese login with Azure Tools for IntelliJ plugin in the IDE.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcc03a0518279de77f113f6a6344e10552d26e54"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc4ODg3MQ==", "bodyText": "Return a Map<String, String> instead.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#discussion_r414788871", "createdAt": "2020-04-24T18:46:08Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IntelliJCacheAccessor.java", "diffHunk": "@@ -0,0 +1,216 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.microsoft.aad.msal4jextensions.persistence.mac.KeyChainAccessor;\n+import com.sun.jna.platform.win32.Crypt32Util;\n+import org.linguafranca.pwdb.Database;\n+import org.linguafranca.pwdb.Entry;\n+import org.linguafranca.pwdb.kdbx.KdbxCreds;\n+import org.linguafranca.pwdb.kdbx.simple.SimpleDatabase;\n+\n+import javax.crypto.BadPaddingException;\n+import javax.crypto.Cipher;\n+import javax.crypto.IllegalBlockSizeException;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.spec.IvParameterSpec;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.FileInputStream;\n+import java.nio.ByteBuffer;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+\n+/**\n+ * This class accesses IntelliJ Azure Tools credentials cache via JNA.\n+ */\n+public class IntelliJCacheAccessor {\n+    private final ClientLogger logger = new ClientLogger(IntelliJCacheAccessor.class);\n+    private String keepPassDatabasePath;\n+\n+    /**\n+     * Creates an instance of {@link IntelliJCacheAccessor}\n+     *\n+     * @param keepPassDatabasePath the keep pass database path.\n+     */\n+    public IntelliJCacheAccessor(String keepPassDatabasePath) {\n+        this.keepPassDatabasePath = keepPassDatabasePath;\n+    }\n+\n+    private String getAzureToolsforIntelliJPluginConfigPath() {\n+        return System.getProperty(\"user.home\") + String.format(\"%sAzureToolsForIntelliJ\", File.separator);\n+    }\n+\n+    /**\n+     * Get the current authentication method details of Azure Tools plugin in IntelliJ IDE.\n+     *\n+     * @return the {@link IntelliJAuthMethodDetails}\n+     * @throws IOException if an error is encountered while reading the auth details file.\n+     */\n+    public IntelliJAuthMethodDetails getIntelliJAuthDetails() throws IOException {\n+        StringBuilder authMethodDetailsPath = new StringBuilder(getAzureToolsforIntelliJPluginConfigPath());\n+        authMethodDetailsPath.append(String.format(\"%sAuthMethodDetails.json\", File.separator));\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        File file = new File(authMethodDetailsPath.toString());\n+        return objectMapper.readValue(file, IntelliJAuthMethodDetails.class);\n+    }\n+\n+    /**\n+     * Get the Device Code credential details of Azure Tools plugin in the IntelliJ IDE.\n+     *\n+     * @return the {@link JsonNode} holding the authentication details.\n+     * @throws IOException\n+     */\n+    public JsonNode getDeviceCodeCredentials() throws IOException {\n+        String os = System.getProperty(\"os.name\").toLowerCase(Locale.ROOT);\n+\n+        if (os.contains(\"mac\")) {\n+            KeyChainAccessor accessor = new KeyChainAccessor(null, \"ADAuthManager\",\n+                \"cachedAuthResult\");\n+\n+            String jsonCred  = new String(accessor.read());\n+\n+            ObjectMapper mapper = new ObjectMapper();\n+            return mapper.readTree(jsonCred);\n+\n+        } else if (os.contains(\"nix\") || os.contains(\"nux\")) {\n+            LinuxKeyRingAccessor accessor = new LinuxKeyRingAccessor(\n+                \"com.intellij.credentialStore.Credential\",\n+                \"service\", \"ADAuthManager\",\n+                \"account\", \"cachedAuthResult\");\n+\n+            String jsonCred  = new String(accessor.read());\n+            if (jsonCred.startsWith(\"cachedAuthResult@\")) {\n+                jsonCred = jsonCred.replaceFirst(\"cachedAuthResult@\", \"\");\n+            }\n+\n+            ObjectMapper mapper = new ObjectMapper();\n+            return mapper.readTree(jsonCred);\n+\n+        } else if (os.contains(\"win\")) {\n+            return getCredentialFromKdbx();\n+        } else {\n+            throw logger.logExceptionAsError(new RuntimeException(String.format(\"OS %s Platform not supported.\", os)));\n+        }\n+    }\n+\n+    /**\n+     * Get the Service Principal credential details of Azure Tools plugin in the IntelliJ IDE.\n+     *\n+     * @param credFilePath the file path holding authentication details\n+     * @return the {@link HashMap} holding auth details.\n+     * @throws IOException if an error is countered while reading the credential file.\n+     */\n+    public HashMap<String, String> getIntellijServicePrincipalDetails(String credFilePath) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcc03a0518279de77f113f6a6344e10552d26e54"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9c7d16307f25d649aceb35daf36b9b848fd6c82", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b9c7d16307f25d649aceb35daf36b9b848fd6c82", "committedDate": "2020-04-27T16:40:35Z", "message": "address feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMzMzMjQx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#pullrequestreview-401333241", "createdAt": "2020-04-27T21:17:04Z", "commit": {"oid": "b9c7d16307f25d649aceb35daf36b9b848fd6c82"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMToxNzowNFrOGM4FSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMTozMjowNVrOGM4nRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1NDk1Mw==", "bodyText": "org.l comes before org.p", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#discussion_r416154953", "createdAt": "2020-04-27T21:17:04Z", "author": {"login": "JonathanGiles"}, "path": "eng/versioning/external_dependencies.txt", "diffHunk": "@@ -47,6 +47,7 @@ org.codehaus.groovy:groovy-eclipse-batch;2.5.8-01\n org.codehaus.groovy:groovy-eclipse-compiler;3.4.0-01\n org.powermock:powermock-api-mockito2;2.0.2\n org.powermock:powermock-module-junit4;2.0.2\n+org.linguafranca.pwdb:KeePassJava2;2.1.4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9c7d16307f25d649aceb35daf36b9b848fd6c82"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1NjEzOQ==", "bodyText": "I am ok with them, as long as @g2vinay has followed the requirements of the license.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#discussion_r416156139", "createdAt": "2020-04-27T21:19:13Z", "author": {"login": "JonathanGiles"}, "path": "sdk/identity/azure-identity/pom.xml", "diffHunk": "@@ -93,6 +93,18 @@\n       <version>2.8.5</version> <!-- {x-version-update;com.google.code.gson:gson;external_dependency} -->\n       <scope>test</scope>\n     </dependency>\n+\n+    <dependency>\n+      <groupId>com.microsoft.azure</groupId>\n+      <artifactId>msal4j-persistence-extension</artifactId>\n+      <version>0.1</version> <!-- {x-version-update;com.microsoft.azure:msal4j-persistence-extension;external_dependency} -->\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.linguafranca.pwdb</groupId>\n+      <artifactId>KeePassJava2</artifactId>\n+      <version>2.1.4</version> <!-- {x-version-update;org.linguafranca.pwdb:KeePassJava2;external_dependency} -->\n+    </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc4MDA5MQ=="}, "originalCommit": {"oid": "dcc03a0518279de77f113f6a6344e10552d26e54"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1NzQzNw==", "bodyText": "Is it not \"KeePass\"?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#discussion_r416157437", "createdAt": "2020-04-27T21:21:33Z", "author": {"login": "JonathanGiles"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DefaultAzureCredentialBuilder.java", "diffHunk": "@@ -34,6 +36,28 @@ public DefaultAzureCredentialBuilder authorityHost(String authorityHost) {\n     }\n \n \n+    /**\n+     * Specifies the keep pass database path to read IntelliJ credentials on windows platform. This is required", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9c7d16307f25d649aceb35daf36b9b848fd6c82"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1ODQ4Mw==", "bodyText": "Is there ever a possibility that there might be multiple databases on a users system that might need reading?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#discussion_r416158483", "createdAt": "2020-04-27T21:23:19Z", "author": {"login": "JonathanGiles"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DefaultAzureCredentialBuilder.java", "diffHunk": "@@ -34,6 +36,28 @@ public DefaultAzureCredentialBuilder authorityHost(String authorityHost) {\n     }\n \n \n+    /**\n+     * Specifies the keep pass database path to read IntelliJ credentials on windows platform. This is required\n+     * only on windows platform.\n+     *\n+     * <p>This path can be located in the IntelliJ IDE.\n+     * Windows: File -&gt; Settings -&gt; Appearance &amp; Behavior -&gt; System Settings -&gt; Passwords </p>\n+     *\n+     * @param databasePath the path to the keep pass database.\n+     * @throws IllegalArgumentException if {@code databasePath is either not specified or is empty}\n+     * @return An updated instance of this builder with the keep pass database path set as specified.\n+     */\n+    public DefaultAzureCredentialBuilder windowsKeepPassDatabasePath(String databasePath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9c7d16307f25d649aceb35daf36b9b848fd6c82"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1OTk4NQ==", "bodyText": "You might want to make it clear that on other platforms we still support IntelliJ lookup, but we use the standard locations on those platforms.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#discussion_r416159985", "createdAt": "2020-04-27T21:25:50Z", "author": {"login": "JonathanGiles"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DefaultAzureCredentialBuilder.java", "diffHunk": "@@ -34,6 +36,28 @@ public DefaultAzureCredentialBuilder authorityHost(String authorityHost) {\n     }\n \n \n+    /**\n+     * Specifies the keep pass database path to read IntelliJ credentials on windows platform. This is required\n+     * only on windows platform.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9c7d16307f25d649aceb35daf36b9b848fd6c82"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE2MjE4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                               + \" Plese login with Azure Tools for IntelliJ plugin in the IDE.\";\n          \n          \n            \n                                               + \" Please log in with Azure Tools for IntelliJ plugin in the IDE.\";", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#discussion_r416162188", "createdAt": "2020-04-27T21:29:31Z", "author": {"login": "JonathanGiles"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -91,6 +94,8 @@\n     private final String tenantId;\n     private final String clientId;\n     private HttpPipelineAdapter httpPipelineAdapter;\n+    private static final String INTELLIJ_CREDENTIAL_NOT_AVAILABLE_ERROR = \"IntelliJ Authentication not available.\"\n+                                   + \" Plese login with Azure Tools for IntelliJ plugin in the IDE.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9c7d16307f25d649aceb35daf36b9b848fd6c82"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE2MzA4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                + \" Plese login with Azure Tools for IntelliJ plugin in the IDE.\"));\n          \n          \n            \n                                + \" Please log in with Azure Tools for IntelliJ plugin in the IDE.\"));", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#discussion_r416163088", "createdAt": "2020-04-27T21:31:15Z", "author": {"login": "JonathanGiles"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -148,6 +153,80 @@\n         }\n     }\n \n+\n+    public Mono<MsalToken> authenticateWithIntelliJ(TokenRequestContext request) {\n+        try {\n+            IntelliJCacheAccessor cacheAccessor = new IntelliJCacheAccessor(options.getKeepPassDatabasePath());\n+            IntelliJAuthMethodDetails authDetails = cacheAccessor.getAuthDetailsIfAvailable();\n+            String authType = authDetails.getAuthMethod();\n+            if (authType.equalsIgnoreCase(\"SP\")) {\n+                Map<String, String> spDetails = cacheAccessor\n+                    .getIntellijServicePrincipalDetails(authDetails.getCredFilePath());\n+                String authorityUrl = spDetails.get(\"authURL\") + spDetails.get(\"tenant\");\n+                try {\n+                    ConfidentialClientApplication.Builder applicationBuilder =\n+                        ConfidentialClientApplication.builder(spDetails.get(\"client\"),\n+                            ClientCredentialFactory.createFromSecret(spDetails.get(\"key\")))\n+                            .authority(authorityUrl);\n+\n+                    // If http pipeline is available, then it should override the proxy options if any configured.\n+                    if (httpPipelineAdapter != null) {\n+                        applicationBuilder.httpClient(httpPipelineAdapter);\n+                    } else if (options.getProxyOptions() != null) {\n+                        applicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n+                    }\n+\n+                    if (options.getExecutorService() != null) {\n+                        applicationBuilder.executorService(options.getExecutorService());\n+                    }\n+\n+                    ConfidentialClientApplication application = applicationBuilder.build();\n+                    return Mono.fromFuture(application.acquireToken(\n+                        ClientCredentialParameters.builder(new HashSet<>(request.getScopes()))\n+                            .build()))\n+                               .map(ar -> new MsalToken(ar, options));\n+                } catch (MalformedURLException e) {\n+                    return Mono.error(e);\n+                }\n+            } else if (authType.equalsIgnoreCase(\"DC\")) {\n+                String authHost = cacheAccessor.getAzureAuthHost(authDetails.getAzureEnv())\n+                                      .replaceAll(\"/+$\", \"\") + \"/organizations/\" + tenantId;\n+\n+                PublicClientApplication.Builder applicationBuilder = PublicClientApplication.builder(clientId)\n+                    .authority(authHost);\n+\n+                if (httpPipelineAdapter != null) {\n+                    applicationBuilder.httpClient(httpPipelineAdapter);\n+                } else if (options.getProxyOptions() != null) {\n+                    applicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n+                }\n+\n+                if (options.getExecutorService() != null) {\n+                    applicationBuilder.executorService(options.getExecutorService());\n+                }\n+\n+                PublicClientApplication publicClientApplication = applicationBuilder\n+                                                                      .build();\n+\n+                JsonNode intelliJCredentials = cacheAccessor.getDeviceCodeCredentials();\n+                String refreshToken = intelliJCredentials.get(\"refreshToken\").textValue();\n+\n+                RefreshTokenParameters parameters = RefreshTokenParameters\n+                                                        .builder(new HashSet<>(request.getScopes()), refreshToken)\n+                                                        .build();\n+\n+                return Mono.defer(() -> Mono.fromFuture(publicClientApplication.acquireToken(parameters))\n+                                    .map(ar -> new MsalToken(ar, options)));\n+\n+            } else {\n+                throw logger.logExceptionAsError(new RuntimeException(\"IntelliJ Authentication not available.\"\n+                    + \" Plese login with Azure Tools for IntelliJ plugin in the IDE.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9c7d16307f25d649aceb35daf36b9b848fd6c82"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE2MzY1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          + \" Please login with Azure Tools for IntelliJ plugin in the IDE.\";\n          \n          \n            \n                          + \" Please log in with Azure Tools for IntelliJ plugin in the IDE.\";", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#discussion_r416163654", "createdAt": "2020-04-27T21:32:05Z", "author": {"login": "JonathanGiles"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IntelliJCacheAccessor.java", "diffHunk": "@@ -0,0 +1,261 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.identity.KnownAuthorityHosts;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.microsoft.aad.msal4jextensions.persistence.mac.KeyChainAccessor;\n+import com.sun.jna.Platform;\n+import com.sun.jna.platform.win32.Crypt32Util;\n+import org.linguafranca.pwdb.Database;\n+import org.linguafranca.pwdb.Entry;\n+import org.linguafranca.pwdb.kdbx.KdbxCreds;\n+import org.linguafranca.pwdb.kdbx.simple.SimpleDatabase;\n+\n+import javax.crypto.BadPaddingException;\n+import javax.crypto.Cipher;\n+import javax.crypto.IllegalBlockSizeException;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.spec.IvParameterSpec;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.FileInputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Paths;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * This class accesses IntelliJ Azure Tools credentials cache via JNA.\n+ */\n+public class IntelliJCacheAccessor {\n+    private final ClientLogger logger = new ClientLogger(IntelliJCacheAccessor.class);\n+    private String keepPassDatabasePath;\n+    private static final String INTELLIJ_CREDENTIAL_NOT_AVAILABLE_ERROR = \"IntelliJ Authentication not available.\"\n+              + \" Please login with Azure Tools for IntelliJ plugin in the IDE.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9c7d16307f25d649aceb35daf36b9b848fd6c82"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ae2d30b5c6ecfda5c2787df8aa872e3e1a394b0", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0ae2d30b5c6ecfda5c2787df8aa872e3e1a394b0", "committedDate": "2020-04-29T05:53:36Z", "message": "feedback updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31cd2e880bb593df05df526fbdc28ec1d465530b", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/31cd2e880bb593df05df526fbdc28ec1d465530b", "committedDate": "2020-04-29T06:07:35Z", "message": "remove jacoco"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8a0a0c43df3a5bede78bf2b912c970c9af3cb2e", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f8a0a0c43df3a5bede78bf2b912c970c9af3cb2e", "committedDate": "2020-04-29T06:24:22Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b8ca0e68c250c95e716ef42d139bb7bda94c94f", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0b8ca0e68c250c95e716ef42d139bb7bda94c94f", "committedDate": "2020-04-29T06:29:31Z", "message": "revert gitignore change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "008c60f15aa39c0b3189ef42bba370b656a41f63", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/008c60f15aa39c0b3189ef42bba370b656a41f63", "committedDate": "2020-04-29T15:40:32Z", "message": "fix spotbugs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMTM2MzU3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#pullrequestreview-403136357", "createdAt": "2020-04-30T00:51:47Z", "commit": {"oid": "008c60f15aa39c0b3189ef42bba370b656a41f63"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMDo1MTo0OFrOGOWHBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMDo1MTo0OFrOGOWHBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5NTQ5NA==", "bodyText": "Shouldn't it be referred to everywhere as 'KeePass', not 'kee pass'?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#discussion_r417695494", "createdAt": "2020-04-30T00:51:48Z", "author": {"login": "JonathanGiles"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DefaultAzureCredentialBuilder.java", "diffHunk": "@@ -34,6 +36,29 @@ public DefaultAzureCredentialBuilder authorityHost(String authorityHost) {\n     }\n \n \n+    /**\n+     * Specifies the kee pass database path to read the cached credentials of Azure toolkit for IntelliJ plugin.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008c60f15aa39c0b3189ef42bba370b656a41f63"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMTM2NTA1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#pullrequestreview-403136505", "createdAt": "2020-04-30T00:52:25Z", "commit": {"oid": "008c60f15aa39c0b3189ef42bba370b656a41f63"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMDo1MjoyNVrOGOWHfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMDo1MjoyNVrOGOWHfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5NTYxNA==", "bodyText": "Proper capitalisation of names: 'Windows', 'macOS' and 'Linux'", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#discussion_r417695614", "createdAt": "2020-04-30T00:52:25Z", "author": {"login": "JonathanGiles"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DefaultAzureCredentialBuilder.java", "diffHunk": "@@ -34,6 +36,29 @@ public DefaultAzureCredentialBuilder authorityHost(String authorityHost) {\n     }\n \n \n+    /**\n+     * Specifies the kee pass database path to read the cached credentials of Azure toolkit for IntelliJ plugin.\n+     * The {@code databasePath} is required on windows platform. For mac and linux platform native key chain /", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008c60f15aa39c0b3189ef42bba370b656a41f63"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMTM3Mjgz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#pullrequestreview-403137283", "createdAt": "2020-04-30T00:55:19Z", "commit": {"oid": "008c60f15aa39c0b3189ef42bba370b656a41f63"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMDo1NToxOVrOGOWKag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMDo1NToxOVrOGOWKag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5NjM2Mg==", "bodyText": "These are not named correctly - KeePass, not KeepPass", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#discussion_r417696362", "createdAt": "2020-04-30T00:55:19Z", "author": {"login": "JonathanGiles"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClientOptions.java", "diffHunk": "@@ -194,4 +195,22 @@ public IdentityClientOptions setHttpClient(HttpClient httpClient) {\n         this.httpClient = httpClient;\n         return this;\n     }\n+\n+    /**\n+     * Specifies the database to extract intellij cached credentials from.\n+     * @param keepPassDatabasePath the database to extract intellij credentials from.\n+     * @return IdentityClientOptions\n+     */\n+    public IdentityClientOptions setKeepPassDatabasePath(String keepPassDatabasePath) {\n+        this.keepPassDatabasePath = keepPassDatabasePath;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the kee pass database path.\n+     * @return the kee pass database path to extract inellij credentials from.\n+     */\n+    public String getKeepPassDatabasePath() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008c60f15aa39c0b3189ef42bba370b656a41f63"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNTcyNjc5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#pullrequestreview-403572679", "createdAt": "2020-04-30T14:25:22Z", "commit": {"oid": "008c60f15aa39c0b3189ef42bba370b656a41f63"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNzkwNDcy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#pullrequestreview-403790472", "createdAt": "2020-04-30T18:52:45Z", "commit": {"oid": "008c60f15aa39c0b3189ef42bba370b656a41f63"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo1Mjo0NVrOGO2IpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo1Mjo0NVrOGO2IpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMDE5Nw==", "bodyText": "Should this property denote that it's the KeePass database path for IntelliJ? intelliJKeyPassDatabasePath?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#discussion_r418220197", "createdAt": "2020-04-30T18:52:45Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DefaultAzureCredentialBuilder.java", "diffHunk": "@@ -34,6 +36,29 @@ public DefaultAzureCredentialBuilder authorityHost(String authorityHost) {\n     }\n \n \n+    /**\n+     * Specifies the kee pass database path to read the cached credentials of Azure toolkit for IntelliJ plugin.\n+     * The {@code databasePath} is required on windows platform. For mac and linux platform native key chain /\n+     * key ring will be accessed respectively to retrieve the cached credentials.\n+     *\n+     * <p>This path can be located in the IntelliJ IDE.\n+     * Windows: File -&gt; Settings -&gt; Appearance &amp; Behavior -&gt; System Settings -&gt; Passwords. </p>\n+     *\n+     * @param databasePath the path to the kee pass database.\n+     * @throws IllegalArgumentException if {@code databasePath is either not specified or is empty}\n+     * @return An updated instance of this builder with the kee pass database path set as specified.\n+     */\n+    public DefaultAzureCredentialBuilder keePassDatabasePath(String databasePath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008c60f15aa39c0b3189ef42bba370b656a41f63"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNzkxMzY5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#pullrequestreview-403791369", "createdAt": "2020-04-30T18:54:02Z", "commit": {"oid": "008c60f15aa39c0b3189ef42bba370b656a41f63"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo1NDowM1rOGO2Law==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo1NDowM1rOGO2Law==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMDkwNw==", "bodyText": "Just FYI both this PR and the VsCodeCredential PR increment this to 5. After you merge one you'll need to make sure to update the other PR.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#discussion_r418220907", "createdAt": "2020-04-30T18:54:03Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DefaultAzureCredentialBuilder.java", "diffHunk": "@@ -110,7 +145,7 @@ public DefaultAzureCredential build() {\n     }\n \n     private ArrayDeque<TokenCredential> getCredentialsChain() {\n-        ArrayDeque<TokenCredential> output = new ArrayDeque<>(4);\n+        ArrayDeque<TokenCredential> output = new ArrayDeque<>(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008c60f15aa39c0b3189ef42bba370b656a41f63"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNzkxNzE4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#pullrequestreview-403791718", "createdAt": "2020-04-30T18:54:33Z", "commit": {"oid": "008c60f15aa39c0b3189ef42bba370b656a41f63"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo1NDozM1rOGO2MiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo1NDozM1rOGO2MiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMTE5Mg==", "bodyText": "Should move this client id into a constant somewhere.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#discussion_r418221192", "createdAt": "2020-04-30T18:54:33Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/IntelliJCredential.java", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity;\n+\n+import com.azure.core.annotation.Immutable;\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.identity.implementation.IdentityClient;\n+import com.azure.identity.implementation.IdentityClientBuilder;\n+import com.azure.identity.implementation.IdentityClientOptions;\n+import com.azure.identity.implementation.MsalToken;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * A credential provider that provides token credentials from Azure Tools for IntelliJ plugin credential cache.\n+ *\n+ * <p> If the developer has authenticated successfully with Azure Tools for IntelliJ plugin in the IntelliJ IDE then\n+ * this credential can be used in the development code to reuse the cached plugin credentials.</p>\n+ */\n+@Immutable\n+class IntelliJCredential implements TokenCredential {\n+    private final IdentityClient identityClient;\n+    private final AtomicReference<MsalToken> cachedToken;\n+\n+    /**\n+     * Creates an {@link IntelliJCredential} with default identity client options.\n+     * @param identityClientOptions the options to configure the identity client\n+     */\n+    IntelliJCredential(IdentityClientOptions identityClientOptions) {\n+        identityClient = new IdentityClientBuilder().identityClientOptions(identityClientOptions)\n+                             .clientId(\"61d65f5a-6e3b-468b-af73-a033f5098c5c\").build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008c60f15aa39c0b3189ef42bba370b656a41f63"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNzk0MDM3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#pullrequestreview-403794037", "createdAt": "2020-04-30T18:57:43Z", "commit": {"oid": "008c60f15aa39c0b3189ef42bba370b656a41f63"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo1Nzo0M1rOGO2T0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo1Nzo0M1rOGO2T0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMzA1Nw==", "bodyText": "Same comment here as on the VsCodeCredential. You're creating a new PublicClientApplication (and a new ConfidentialClientApplication above) each time you try to get a token so there will be no caching. We don't necessarily have to fix this before merging it for our preview release but if not we should create an issue to track the work.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#discussion_r418223057", "createdAt": "2020-04-30T18:57:43Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -148,6 +150,81 @@\n         }\n     }\n \n+\n+    public Mono<MsalToken> authenticateWithIntelliJ(TokenRequestContext request) {\n+        try {\n+            IntelliJCacheAccessor cacheAccessor = new IntelliJCacheAccessor(options.getKeepPassDatabasePath());\n+            IntelliJAuthMethodDetails authDetails = cacheAccessor.getAuthDetailsIfAvailable();\n+            String authType = authDetails.getAuthMethod();\n+            if (authType.equalsIgnoreCase(\"SP\")) {\n+                Map<String, String> spDetails = cacheAccessor\n+                    .getIntellijServicePrincipalDetails(authDetails.getCredFilePath());\n+                String authorityUrl = spDetails.get(\"authURL\") + spDetails.get(\"tenant\");\n+                try {\n+                    ConfidentialClientApplication.Builder applicationBuilder =\n+                        ConfidentialClientApplication.builder(spDetails.get(\"client\"),\n+                            ClientCredentialFactory.createFromSecret(spDetails.get(\"key\")))\n+                            .authority(authorityUrl);\n+\n+                    // If http pipeline is available, then it should override the proxy options if any configured.\n+                    if (httpPipelineAdapter != null) {\n+                        applicationBuilder.httpClient(httpPipelineAdapter);\n+                    } else if (options.getProxyOptions() != null) {\n+                        applicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n+                    }\n+\n+                    if (options.getExecutorService() != null) {\n+                        applicationBuilder.executorService(options.getExecutorService());\n+                    }\n+\n+                    ConfidentialClientApplication application = applicationBuilder.build();\n+                    return Mono.fromFuture(application.acquireToken(\n+                        ClientCredentialParameters.builder(new HashSet<>(request.getScopes()))\n+                            .build()))\n+                               .map(ar -> new MsalToken(ar, options));\n+                } catch (MalformedURLException e) {\n+                    return Mono.error(e);\n+                }\n+            } else if (authType.equalsIgnoreCase(\"DC\")) {\n+                String authHost = cacheAccessor.getAzureAuthHost(authDetails.getAzureEnv())\n+                                      .replaceAll(\"/+$\", \"\") + \"/organizations/\" + tenantId;\n+\n+                PublicClientApplication.Builder applicationBuilder = PublicClientApplication.builder(clientId)\n+                    .authority(authHost);\n+\n+                if (httpPipelineAdapter != null) {\n+                    applicationBuilder.httpClient(httpPipelineAdapter);\n+                } else if (options.getProxyOptions() != null) {\n+                    applicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n+                }\n+\n+                if (options.getExecutorService() != null) {\n+                    applicationBuilder.executorService(options.getExecutorService());\n+                }\n+\n+                PublicClientApplication publicClientApplication = applicationBuilder\n+                                                                      .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008c60f15aa39c0b3189ef42bba370b656a41f63"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNzk1NDE1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#pullrequestreview-403795415", "createdAt": "2020-04-30T18:59:36Z", "commit": {"oid": "008c60f15aa39c0b3189ef42bba370b656a41f63"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo1OTozNlrOGO2X0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo1OTozNlrOGO2X0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyNDA4MQ==", "bodyText": "Why are we adding this to the IdentityClientOptions? isn't this the base options for all credentials? Are users ever expected to create the IdentityClientOptions themselves?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#discussion_r418224081", "createdAt": "2020-04-30T18:59:36Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClientOptions.java", "diffHunk": "@@ -194,4 +195,22 @@ public IdentityClientOptions setHttpClient(HttpClient httpClient) {\n         this.httpClient = httpClient;\n         return this;\n     }\n+\n+    /**\n+     * Specifies the database to extract intellij cached credentials from.\n+     * @param keepPassDatabasePath the database to extract intellij credentials from.\n+     * @return IdentityClientOptions\n+     */\n+    public IdentityClientOptions setKeepPassDatabasePath(String keepPassDatabasePath) {\n+        this.keepPassDatabasePath = keepPassDatabasePath;\n+        return this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008c60f15aa39c0b3189ef42bba370b656a41f63"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNzk3NzYz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#pullrequestreview-403797763", "createdAt": "2020-04-30T19:03:03Z", "commit": {"oid": "008c60f15aa39c0b3189ef42bba370b656a41f63"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODE5MTU3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#pullrequestreview-403819157", "createdAt": "2020-04-30T19:35:11Z", "commit": {"oid": "008c60f15aa39c0b3189ef42bba370b656a41f63"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTozNToxMVrOGO3gWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTozNToxMVrOGO3gWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI0MjY0OQ==", "bodyText": "Fix typo in javadoc, variable and method names. It should be keePass.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#discussion_r418242649", "createdAt": "2020-04-30T19:35:11Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClientOptions.java", "diffHunk": "@@ -194,4 +195,22 @@ public IdentityClientOptions setHttpClient(HttpClient httpClient) {\n         this.httpClient = httpClient;\n         return this;\n     }\n+\n+    /**\n+     * Specifies the database to extract intellij cached credentials from.\n+     * @param keepPassDatabasePath the database to extract intellij credentials from.\n+     * @return IdentityClientOptions\n+     */\n+    public IdentityClientOptions setKeepPassDatabasePath(String keepPassDatabasePath) {\n+        this.keepPassDatabasePath = keepPassDatabasePath;\n+        return this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008c60f15aa39c0b3189ef42bba370b656a41f63"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f9beffd965b88df44e3347b8ec37639eec69f68", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6f9beffd965b88df44e3347b8ec37639eec69f68", "committedDate": "2020-05-03T20:57:21Z", "message": "update docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0Njg4ODk5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#pullrequestreview-404688899", "createdAt": "2020-05-04T02:42:58Z", "commit": {"oid": "6f9beffd965b88df44e3347b8ec37639eec69f68"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMjo0Mjo1OFrOGPxoMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMjo0Mzo1NlrOGPxooQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5NDkzMQ==", "bodyText": "Naming mismatch between getter and setter should be resolved.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#discussion_r419194931", "createdAt": "2020-05-04T02:42:58Z", "author": {"login": "JonathanGiles"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClientOptions.java", "diffHunk": "@@ -194,4 +195,22 @@ public IdentityClientOptions setHttpClient(HttpClient httpClient) {\n         this.httpClient = httpClient;\n         return this;\n     }\n+\n+    /**\n+     * Specifies the database to extract IntelliJ cached credentials from.\n+     * @param keePassDatabasePath the database to extract intellij credentials from.\n+     * @return IdentityClientOptions\n+     */\n+    public IdentityClientOptions setKeePassDatabasePath(String keePassDatabasePath) {\n+        this.keePassDatabasePath = keePassDatabasePath;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the KeePass database path.\n+     * @return the keePass database path to extract inellij credentials from.\n+     */\n+    public String getIntelliJKeePassDatabasePath() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f9beffd965b88df44e3347b8ec37639eec69f68"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5NDk2NQ==", "bodyText": "KeePass", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#discussion_r419194965", "createdAt": "2020-05-04T02:43:22Z", "author": {"login": "JonathanGiles"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IntelliJCacheAccessor.java", "diffHunk": "@@ -0,0 +1,268 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.identity.CredentialUnavailableException;\n+import com.azure.identity.KnownAuthorityHosts;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.microsoft.aad.msal4jextensions.persistence.mac.KeyChainAccessor;\n+import com.sun.jna.Platform;\n+import com.sun.jna.platform.win32.Crypt32Util;\n+import org.linguafranca.pwdb.Database;\n+import org.linguafranca.pwdb.Entry;\n+import org.linguafranca.pwdb.kdbx.KdbxCreds;\n+import org.linguafranca.pwdb.kdbx.simple.SimpleDatabase;\n+\n+import javax.crypto.BadPaddingException;\n+import javax.crypto.Cipher;\n+import javax.crypto.IllegalBlockSizeException;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.spec.IvParameterSpec;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.FileInputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.file.Paths;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * This class accesses IntelliJ Azure Tools credentials cache via JNA.\n+ */\n+public class IntelliJCacheAccessor {\n+    private final ClientLogger logger = new ClientLogger(IntelliJCacheAccessor.class);\n+    private String keePassDatabasePath;\n+    private static final String INTELLIJ_CREDENTIAL_NOT_AVAILABLE_ERROR = \"IntelliJ Authentication not available.\"\n+              + \" Please log in with Azure Tools for IntelliJ plugin in the IDE.\";\n+    private static final byte[] CRYPTO_KEY = new byte[] {0x50, 0x72, 0x6f, 0x78, 0x79, 0x20, 0x43, 0x6f, 0x6e, 0x66,\n+        0x69, 0x67, 0x20, 0x53, 0x65, 0x63};\n+\n+\n+    /**\n+     * Creates an instance of {@link IntelliJCacheAccessor}\n+     *\n+     * @param keePassDatabasePath the KeePass database path.\n+     */\n+    public IntelliJCacheAccessor(String keePassDatabasePath) {\n+        this.keePassDatabasePath = keePassDatabasePath;\n+    }\n+\n+    private String getAzureToolsforIntelliJPluginConfigPath() {\n+        return Paths.get(System.getProperty(\"user.home\"), \"AzureToolsForIntelliJ\").toString();\n+    }\n+\n+    /**\n+     * Get the Device Code credential details of Azure Tools plugin in the IntelliJ IDE.\n+     *\n+     * @return the {@link JsonNode} holding the authentication details.\n+     * @throws IOException\n+     */\n+    public JsonNode getDeviceCodeCredentials() throws IOException {\n+        if (Platform.isMac()) {\n+            KeyChainAccessor accessor = new KeyChainAccessor(null, \"ADAuthManager\",\n+                \"cachedAuthResult\");\n+\n+            String jsonCred  = new String(accessor.read(), Charset.forName(\"UTF-8\"));\n+\n+            ObjectMapper mapper = new ObjectMapper();\n+            return mapper.readTree(jsonCred);\n+\n+        } else if (Platform.isLinux()) {\n+            LinuxKeyRingAccessor accessor = new LinuxKeyRingAccessor(\n+                \"com.intellij.credentialStore.Credential\",\n+                \"service\", \"ADAuthManager\",\n+                \"account\", \"cachedAuthResult\");\n+\n+            String jsonCred  = new String(accessor.read(), Charset.forName(\"UTF-8\"));\n+            if (jsonCred.startsWith(\"cachedAuthResult@\")) {\n+                jsonCred = jsonCred.replaceFirst(\"cachedAuthResult@\", \"\");\n+            }\n+\n+            ObjectMapper mapper = new ObjectMapper();\n+            return mapper.readTree(jsonCred);\n+\n+        } else if (Platform.isWindows()) {\n+            return getCredentialFromKdbx();\n+        } else {\n+            throw logger.logExceptionAsError(new RuntimeException(String.format(\"OS %s Platform not supported.\",\n+                    Platform.getOSType())));\n+        }\n+    }\n+\n+    /**\n+     * Get the Service Principal credential details of Azure Tools plugin in the IntelliJ IDE.\n+     *\n+     * @param credFilePath the file path holding authentication details\n+     * @return the {@link HashMap} holding auth details.\n+     * @throws IOException if an error is countered while reading the credential file.\n+     */\n+    public Map<String, String> getIntellijServicePrincipalDetails(String credFilePath) throws IOException {\n+        BufferedReader reader = null;\n+        HashMap<String, String> servicePrincipalDetails = new HashMap<>(8);\n+        try {\n+            reader = new BufferedReader(new FileReader(credFilePath));\n+            String line = reader.readLine();\n+            while (line != null) {\n+                String[] split = line.split(\"=\");\n+                split[1] = split[1].replace(\"\\\\\", \"\");\n+                servicePrincipalDetails.put(split[0], split[1]);\n+                // read next line\n+                line = reader.readLine();\n+            }\n+        } finally {\n+            if (reader != null) {\n+                reader.close();\n+            }\n+        }\n+        return servicePrincipalDetails;\n+    }\n+\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    private JsonNode getCredentialFromKdbx() throws IOException {\n+        if (CoreUtils.isNullOrEmpty(keePassDatabasePath)) {\n+            throw logger.logExceptionAsError(\n+                    new CredentialUnavailableException(\"The keePass database path is either empty or not configured.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f9beffd965b88df44e3347b8ec37639eec69f68"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5NTA0MQ==", "bodyText": "KeePass", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#discussion_r419195041", "createdAt": "2020-05-04T02:43:56Z", "author": {"login": "JonathanGiles"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IntelliJCacheAccessor.java", "diffHunk": "@@ -0,0 +1,268 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.identity.CredentialUnavailableException;\n+import com.azure.identity.KnownAuthorityHosts;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.microsoft.aad.msal4jextensions.persistence.mac.KeyChainAccessor;\n+import com.sun.jna.Platform;\n+import com.sun.jna.platform.win32.Crypt32Util;\n+import org.linguafranca.pwdb.Database;\n+import org.linguafranca.pwdb.Entry;\n+import org.linguafranca.pwdb.kdbx.KdbxCreds;\n+import org.linguafranca.pwdb.kdbx.simple.SimpleDatabase;\n+\n+import javax.crypto.BadPaddingException;\n+import javax.crypto.Cipher;\n+import javax.crypto.IllegalBlockSizeException;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.spec.IvParameterSpec;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.FileInputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.file.Paths;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * This class accesses IntelliJ Azure Tools credentials cache via JNA.\n+ */\n+public class IntelliJCacheAccessor {\n+    private final ClientLogger logger = new ClientLogger(IntelliJCacheAccessor.class);\n+    private String keePassDatabasePath;\n+    private static final String INTELLIJ_CREDENTIAL_NOT_AVAILABLE_ERROR = \"IntelliJ Authentication not available.\"\n+              + \" Please log in with Azure Tools for IntelliJ plugin in the IDE.\";\n+    private static final byte[] CRYPTO_KEY = new byte[] {0x50, 0x72, 0x6f, 0x78, 0x79, 0x20, 0x43, 0x6f, 0x6e, 0x66,\n+        0x69, 0x67, 0x20, 0x53, 0x65, 0x63};\n+\n+\n+    /**\n+     * Creates an instance of {@link IntelliJCacheAccessor}\n+     *\n+     * @param keePassDatabasePath the KeePass database path.\n+     */\n+    public IntelliJCacheAccessor(String keePassDatabasePath) {\n+        this.keePassDatabasePath = keePassDatabasePath;\n+    }\n+\n+    private String getAzureToolsforIntelliJPluginConfigPath() {\n+        return Paths.get(System.getProperty(\"user.home\"), \"AzureToolsForIntelliJ\").toString();\n+    }\n+\n+    /**\n+     * Get the Device Code credential details of Azure Tools plugin in the IntelliJ IDE.\n+     *\n+     * @return the {@link JsonNode} holding the authentication details.\n+     * @throws IOException\n+     */\n+    public JsonNode getDeviceCodeCredentials() throws IOException {\n+        if (Platform.isMac()) {\n+            KeyChainAccessor accessor = new KeyChainAccessor(null, \"ADAuthManager\",\n+                \"cachedAuthResult\");\n+\n+            String jsonCred  = new String(accessor.read(), Charset.forName(\"UTF-8\"));\n+\n+            ObjectMapper mapper = new ObjectMapper();\n+            return mapper.readTree(jsonCred);\n+\n+        } else if (Platform.isLinux()) {\n+            LinuxKeyRingAccessor accessor = new LinuxKeyRingAccessor(\n+                \"com.intellij.credentialStore.Credential\",\n+                \"service\", \"ADAuthManager\",\n+                \"account\", \"cachedAuthResult\");\n+\n+            String jsonCred  = new String(accessor.read(), Charset.forName(\"UTF-8\"));\n+            if (jsonCred.startsWith(\"cachedAuthResult@\")) {\n+                jsonCred = jsonCred.replaceFirst(\"cachedAuthResult@\", \"\");\n+            }\n+\n+            ObjectMapper mapper = new ObjectMapper();\n+            return mapper.readTree(jsonCred);\n+\n+        } else if (Platform.isWindows()) {\n+            return getCredentialFromKdbx();\n+        } else {\n+            throw logger.logExceptionAsError(new RuntimeException(String.format(\"OS %s Platform not supported.\",\n+                    Platform.getOSType())));\n+        }\n+    }\n+\n+    /**\n+     * Get the Service Principal credential details of Azure Tools plugin in the IntelliJ IDE.\n+     *\n+     * @param credFilePath the file path holding authentication details\n+     * @return the {@link HashMap} holding auth details.\n+     * @throws IOException if an error is countered while reading the credential file.\n+     */\n+    public Map<String, String> getIntellijServicePrincipalDetails(String credFilePath) throws IOException {\n+        BufferedReader reader = null;\n+        HashMap<String, String> servicePrincipalDetails = new HashMap<>(8);\n+        try {\n+            reader = new BufferedReader(new FileReader(credFilePath));\n+            String line = reader.readLine();\n+            while (line != null) {\n+                String[] split = line.split(\"=\");\n+                split[1] = split[1].replace(\"\\\\\", \"\");\n+                servicePrincipalDetails.put(split[0], split[1]);\n+                // read next line\n+                line = reader.readLine();\n+            }\n+        } finally {\n+            if (reader != null) {\n+                reader.close();\n+            }\n+        }\n+        return servicePrincipalDetails;\n+    }\n+\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    private JsonNode getCredentialFromKdbx() throws IOException {\n+        if (CoreUtils.isNullOrEmpty(keePassDatabasePath)) {\n+            throw logger.logExceptionAsError(\n+                    new CredentialUnavailableException(\"The keePass database path is either empty or not configured.\"\n+                           + \" Please configure it on the builder. It is required to use \"\n+                           + \"IntelliJ credential on the windows platform.\"));\n+        }\n+        String extractedpwd = getKdbxPassword();\n+\n+        SecretKeySpec key = new SecretKeySpec(CRYPTO_KEY, \"AES\");\n+        String password = \"\";\n+\n+        byte[] dataToDecrypt = Crypt32Util.cryptUnprotectData(Base64.getDecoder().decode(extractedpwd));\n+\n+        ByteBuffer decryptBuffer = ByteBuffer.wrap(dataToDecrypt);\n+        Cipher cipher = null;\n+        try {\n+            cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n+            int ivLen = decryptBuffer.getInt();\n+            cipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(dataToDecrypt, decryptBuffer.position(), ivLen));\n+            int dataOffset = decryptBuffer.position() + ivLen;\n+            byte[] decrypted = cipher.doFinal(dataToDecrypt, dataOffset, dataToDecrypt.length - dataOffset);\n+            password = new String(decrypted, Charset.forName(\"UTF-8\"));\n+        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException\n+                | InvalidAlgorithmParameterException | IllegalBlockSizeException | BadPaddingException e) {\n+            throw logger.logExceptionAsError(new RuntimeException(\"Unable to access cache.\", e));\n+        }\n+\n+        try {\n+            KdbxCreds creds = new KdbxCreds(password.getBytes(Charset.forName(\"UTF-8\")));\n+            InputStream inputStream = new FileInputStream(new File(keePassDatabasePath));\n+            Database database = SimpleDatabase.load(creds, inputStream);\n+\n+            List<Entry> entries = database.findEntries(\"ADAuthManager\");\n+            if (entries.size() == 0) {\n+                throw logger.logExceptionAsError(new CredentialUnavailableException(\"No credentials found in the cache.\"\n+                        + \" Please login with IntelliJ Azure Tools plugin in the IDE.\"));\n+            }\n+\n+            ObjectMapper mapper = new ObjectMapper();\n+            return mapper.readTree(entries.get(0).getPassword());\n+        } catch (Exception e) {\n+            throw logger.logExceptionAsError(new RuntimeException(\"Failed to read keePass database.\", e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f9beffd965b88df44e3347b8ec37639eec69f68"}, "originalPosition": 177}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbe0cde342cb9975207c4bd21b4b4ca507010708", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/dbe0cde342cb9975207c4bd21b4b4ca507010708", "committedDate": "2020-05-04T02:53:04Z", "message": "update casing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NjkwNjg2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10369#pullrequestreview-404690686", "createdAt": "2020-05-04T02:56:08Z", "commit": {"oid": "dbe0cde342cb9975207c4bd21b4b4ca507010708"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ed92f421f54b4ef291a0ebc2f0321453444ffc9", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2ed92f421f54b4ef291a0ebc2f0321453444ffc9", "committedDate": "2020-05-04T15:49:06Z", "message": "update post rebase with vscode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b6caac28007bca9a3d32cca9a21774622c4f6fa", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8b6caac28007bca9a3d32cca9a21774622c4f6fa", "committedDate": "2020-05-04T16:21:40Z", "message": "update test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de0d0dc1a4a14d95db34d4e0622797bf17165f56", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/de0d0dc1a4a14d95db34d4e0622797bf17165f56", "committedDate": "2020-05-04T17:08:42Z", "message": "fix spotbugs"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4701, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}