{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NTY0ODQ3", "number": 8774, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNjowMjoxN1rODlsBxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNjowMjoxN1rODlsBxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODQ1MjUzOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/ReliableDownload.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNjowMjoxN1rOFyt-Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzo0Njo0M1rOFzBtxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyNjM1MQ==", "bodyText": "So the retryCount is global for the Download not per read() invocation?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8774#discussion_r388726351", "createdAt": "2020-03-06T06:02:17Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/ReliableDownload.java", "diffHunk": "@@ -67,15 +70,16 @@ BlobDownloadHeaders getDeserializedHeaders() {\n         add 1 before calling into tryContinueFlux, we set the initial value to -1.\n          */\n         Flux<ByteBuffer> value = (options.getMaxRetryRequests() == 0)\n-            ? rawResponse.getValue()\n+            ? rawResponse.getValue().timeout(TIMEOUT_VALUE)\n             : applyReliableDownload(rawResponse.getValue(), -1, options);\n \n         return value.switchIfEmpty(Flux.just(ByteBuffer.wrap(new byte[0])));\n     }\n \n     private Flux<ByteBuffer> tryContinueFlux(Throwable t, int retryCount, DownloadRetryOptions options) {\n-        // If all the errors are exhausted, return this error to the user.\n-        if (retryCount > options.getMaxRetryRequests() || !(t instanceof IOException)) {\n+        // If all the errors are exhausted or the error is not retryable, return this error to the user.\n+        if (retryCount >= options.getMaxRetryRequests()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf6928a58b7789403545cbea21c0aee5211e9abe"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAyNzMxNA==", "bodyText": "It is as I've coded it here. I picked this a little bit arbitrarily. Since this was easier/faster and both of us seemed a little unsure that one option was strictly better than the other, I figured sticking with the existing plan would make it more likely to be ready to ship next week. We also see these stale streams pretty rarely, and I think even one retry per download operation is enough in the vast vast majority of cases. If you feel strongly that resetting the count on each successful item is better or if we see some Timeouts still trickling through, I can update it in a later release.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8774#discussion_r389027314", "createdAt": "2020-03-06T17:03:34Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/ReliableDownload.java", "diffHunk": "@@ -67,15 +70,16 @@ BlobDownloadHeaders getDeserializedHeaders() {\n         add 1 before calling into tryContinueFlux, we set the initial value to -1.\n          */\n         Flux<ByteBuffer> value = (options.getMaxRetryRequests() == 0)\n-            ? rawResponse.getValue()\n+            ? rawResponse.getValue().timeout(TIMEOUT_VALUE)\n             : applyReliableDownload(rawResponse.getValue(), -1, options);\n \n         return value.switchIfEmpty(Flux.just(ByteBuffer.wrap(new byte[0])));\n     }\n \n     private Flux<ByteBuffer> tryContinueFlux(Throwable t, int retryCount, DownloadRetryOptions options) {\n-        // If all the errors are exhausted, return this error to the user.\n-        if (retryCount > options.getMaxRetryRequests() || !(t instanceof IOException)) {\n+        // If all the errors are exhausted or the error is not retryable, return this error to the user.\n+        if (retryCount >= options.getMaxRetryRequests()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyNjM1MQ=="}, "originalCommit": {"oid": "bf6928a58b7789403545cbea21c0aee5211e9abe"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0OTc5OA==", "bodyText": "sounds good.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8774#discussion_r389049798", "createdAt": "2020-03-06T17:46:43Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/ReliableDownload.java", "diffHunk": "@@ -67,15 +70,16 @@ BlobDownloadHeaders getDeserializedHeaders() {\n         add 1 before calling into tryContinueFlux, we set the initial value to -1.\n          */\n         Flux<ByteBuffer> value = (options.getMaxRetryRequests() == 0)\n-            ? rawResponse.getValue()\n+            ? rawResponse.getValue().timeout(TIMEOUT_VALUE)\n             : applyReliableDownload(rawResponse.getValue(), -1, options);\n \n         return value.switchIfEmpty(Flux.just(ByteBuffer.wrap(new byte[0])));\n     }\n \n     private Flux<ByteBuffer> tryContinueFlux(Throwable t, int retryCount, DownloadRetryOptions options) {\n-        // If all the errors are exhausted, return this error to the user.\n-        if (retryCount > options.getMaxRetryRequests() || !(t instanceof IOException)) {\n+        // If all the errors are exhausted or the error is not retryable, return this error to the user.\n+        if (retryCount >= options.getMaxRetryRequests()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyNjM1MQ=="}, "originalCommit": {"oid": "bf6928a58b7789403545cbea21c0aee5211e9abe"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 262, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}