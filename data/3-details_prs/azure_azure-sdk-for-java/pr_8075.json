{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyOTgzNjM4", "number": 8075, "title": "Moving CosmosItemProperties to implementation", "bodyText": "Removing CosmosItemProperties from public surface of the SDK\nRefactored the ChangeFeedProcessor to use JsonNode instead of CosmosItemProperties\nRefactoring Item tests", "createdAt": "2020-02-10T07:41:28Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8075", "merged": true, "mergeCommit": {"oid": "be5e1b97dda68e36f53ec997e72ec5567e6ebf86"}, "closed": true, "closedAt": "2020-02-12T08:44:44Z", "author": {"login": "mbhaskar"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcCy7KGAH2gAyMzcyOTgzNjM4Ojc1NGZkZDM4YzljMDQ4OTUyYzNhZmY4YmJhNTdmODg0Zjk3YmQ0YTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDenqqAH2gAyMzcyOTgzNjM4OmRmOTczNmM5OTlhYTA2YzcyYmZjZTNjZDhjY2VhODQ1MTc2NzcwMzU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "754fdd38c9c048952c3aff8bba57f884f97bd4a1", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/754fdd38c9c048952c3aff8bba57f884f97bd4a1", "committedDate": "2020-02-10T01:33:48Z", "message": "Moving CosmosItemProperties to implementation\nRemoving CosmosItemProperties from public surface of the SDK\nMoved the ChangeFeedProcessor to use JsonNode instead of CosmosItemProperties\nRefactoring Item tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f110c19db1b1fd2407ba0f250a7220a5183be858", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f110c19db1b1fd2407ba0f250a7220a5183be858", "committedDate": "2020-02-10T01:34:55Z", "message": "Adding header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fc5c3efaa0397ceceb7b62fa58c70b6505e896a", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2fc5c3efaa0397ceceb7b62fa58c70b6505e896a", "committedDate": "2020-02-10T08:34:22Z", "message": "fixing test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MTEwMDk0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8075#pullrequestreview-356110094", "createdAt": "2020-02-10T17:07:35Z", "commit": {"oid": "2fc5c3efaa0397ceceb7b62fa58c70b6505e896a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MTQyMTgy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8075#pullrequestreview-356142182", "createdAt": "2020-02-10T17:55:20Z", "commit": {"oid": "2fc5c3efaa0397ceceb7b62fa58c70b6505e896a"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzo1NToyMFrOFnvy1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxODowNDozMlrOFnwEtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIyMTg0Ng==", "bodyText": "can we use slf4j for logger? instead of printStackTrace", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8075#discussion_r377221846", "createdAt": "2020-02-10T17:55:20Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos-examples/src/main/java/com/azure/cosmos/examples/ChangeFeed/SampleChangeFeedProcessor.java", "diffHunk": "@@ -88,11 +95,16 @@ public static ChangeFeedProcessor getChangeFeedProcessor(String hostName, Cosmos\n             .setHostName(hostName)\n             .setFeedContainer(feedContainer)\n             .setLeaseContainer(leaseContainer)\n-            .setHandleChanges(docs -> {\n+            .setHandleChanges((List<JsonNode> docs) -> {\n                 System.out.println(\"--->setHandleChanges() START\");\n \n-                for (CosmosItemProperties document : docs) {\n-                    System.out.println(\"---->DOCUMENT RECEIVED: \" + document.toJson(SerializationFormattingPolicy.INDENTED));\n+                for (JsonNode document : docs) {\n+                    try {\n+                        System.out.println(\"---->DOCUMENT RECEIVED: \" + OBJECT_MAPPER.writerWithDefaultPrettyPrinter()\n+                                                                            .writeValueAsString(document));\n+                    } catch (JsonProcessingException e) {\n+                        e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fc5c3efaa0397ceceb7b62fa58c70b6505e896a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIyMjQ0Mw==", "bodyText": "For query we are still doing double deserialization. am I right?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8075#discussion_r377222443", "createdAt": "2020-02-10T17:56:35Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -351,13 +349,18 @@ public String getId() {\n             setContinuationTokenAndMaxItemCount(pagedFluxOptions, feedOptions);\n             return getDatabase().getDocClientWrapper().queryDocuments(CosmosAsyncContainer.this.getLink(), sqlQuerySpec, feedOptions)\n                                             .map(response ->\n-                                                BridgeInternal.createFeedResponseWithQueryMetrics((\n-                                                    CosmosItemProperties.getTypedResultsFromV2Results((List<Document>)(Object)response.getResults(), klass)),\n-                                                    response.getResponseHeaders(),\n-                                                    response.queryMetrics()));\n+                                                     prepareFeedResponse(response, klass));\n         });\n     }\n \n+    private <T> FeedResponse<T> prepareFeedResponse(FeedResponse<Document> response, Class<T> klass){\n+        return BridgeInternal.createFeedResponseWithQueryMetrics(\n+            (response.getResults().stream().map(document -> document.toObject(klass))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fc5c3efaa0397ceceb7b62fa58c70b6505e896a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIyMzI4Mg==", "bodyText": "why are we adding these new methods?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8075#discussion_r377223282", "createdAt": "2020-02-10T17:58:11Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncItemResponse.java", "diffHunk": "@@ -51,21 +57,99 @@ public T getResource(){\n      */\n     public CosmosItemProperties getProperties() {\n         ensureCosmosItemPropertiesInitialized();\n-        return super.getProperties();\n+        return props;\n     }\n \n     private void ensureCosmosItemPropertiesInitialized() {\n-        if (super.getProperties() == null) {\n-            synchronized (this) {\n-                if (super.getProperties() == null) {\n-                    if (StringUtils.isEmpty(responseBodyString)){\n-                        super.setProperties(null);\n-                    } else {\n-                        CosmosItemProperties props = new CosmosItemProperties(responseBodyString);\n-                        super.setProperties(props);\n-                    }\n-                }\n+        synchronized (this) {\n+            if (StringUtils.isEmpty(responseBodyString)) {\n+                props = null;\n+            } else {\n+                props = new CosmosItemProperties(responseBodyString);\n             }\n+\n         }\n     }\n+\n+    /**\n+     * Gets the maximum size limit for this entity (in megabytes (MB) for server resources and in count for master\n+     * resources).\n+     *\n+     * @return the max resource quota.\n+     */\n+    public String getMaxResourceQuota() {\n+        return resourceResponse.getMaxResourceQuota();\n+    }\n+\n+    /**\n+     * Gets the current size of this entity (in megabytes (MB) for server resources and in count for master resources)\n+     *\n+     * @return the current resource quota usage.\n+     */\n+    public String getCurrentResourceQuotaUsage() {\n+        return resourceResponse.getCurrentResourceQuotaUsage();\n+    }\n+\n+    /**\n+     * Gets the Activity ID for the request.\n+     *\n+     * @return the activity getId.\n+     */\n+    public String getActivityId() {\n+        return resourceResponse.getActivityId();\n+    }\n+\n+    /**\n+     * Gets the number of index paths (terms) generated by the operation.\n+     *\n+     * @return the request charge.\n+     */\n+    public double getRequestCharge() {\n+        return resourceResponse.getRequestCharge();\n+    }\n+\n+    /**\n+     * Gets the HTTP status code associated with the response.\n+     *\n+     * @return the status code.\n+     */\n+    public int getStatusCode() {\n+        return resourceResponse.getStatusCode();\n+    }\n+\n+    /**\n+     * Gets the token used for managing client's consistency requirements.\n+     *\n+     * @return the session token.\n+     */\n+    public String getSessionToken() {\n+        return resourceResponse.getSessionToken();\n+    }\n+\n+    /**\n+     * Gets the headers associated with the response.\n+     *\n+     * @return the response headers.\n+     */\n+    public Map<String, String> getResponseHeaders() {\n+        return resourceResponse.getResponseHeaders();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fc5c3efaa0397ceceb7b62fa58c70b6505e896a"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIyMzU4Mg==", "bodyText": "same, why are we adding these new methods?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8075#discussion_r377223582", "createdAt": "2020-02-10T17:58:49Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosItemResponse.java", "diffHunk": "@@ -25,4 +29,86 @@ public CosmosItemProperties getProperties() {\n         return responseWrapper.getProperties();\n     }\n \n+    /**\n+     * Gets the maximum size limit for this entity (in megabytes (MB) for server resources and in count for master\n+     * resources).\n+     *\n+     * @return the max resource quota.\n+     */\n+    public String getMaxResourceQuota() {\n+        return responseWrapper.getMaxResourceQuota();\n+    }\n+\n+    /**\n+     * Gets the current size of this entity (in megabytes (MB) for server resources and in count for master resources)\n+     *\n+     * @return the current resource quota usage.\n+     */\n+    public String getCurrentResourceQuotaUsage() {\n+        return responseWrapper.getCurrentResourceQuotaUsage();\n+    }\n+\n+    /**\n+     * Gets the Activity ID for the request.\n+     *\n+     * @return the activity getId.\n+     */\n+    public String getActivityId() {\n+        return responseWrapper.getActivityId();\n+    }\n+\n+    /**\n+     * Gets the number of index paths (terms) generated by the operation.\n+     *\n+     * @return the request charge.\n+     */\n+    public double getRequestCharge() {\n+        return responseWrapper.getRequestCharge();\n+    }\n+\n+    /**\n+     * Gets the HTTP status code associated with the response.\n+     *\n+     * @return the status code.\n+     */\n+    public int getStatusCode() {\n+        return responseWrapper.getStatusCode();\n+    }\n+\n+    /**\n+     * Gets the token used for managing client's consistency requirements.\n+     *\n+     * @return the session token.\n+     */\n+    public String getSessionToken() {\n+        return responseWrapper.getSessionToken();\n+    }\n+\n+    /**\n+     * Gets the headers associated with the response.\n+     *\n+     * @return the response headers.\n+     */\n+    public Map<String, String> getResponseHeaders() {\n+        return responseWrapper.getResponseHeaders();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fc5c3efaa0397ceceb7b62fa58c70b6505e896a"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIyNTY4OQ==", "bodyText": "does document.toObject(JsonNode.class) return a reference to internal propertybag or does it copy data?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8075#discussion_r377225689", "createdAt": "2020-02-10T18:02:58Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedContextClientImpl.java", "diffHunk": "@@ -82,15 +84,16 @@ public ChangeFeedContextClientImpl(CosmosAsyncContainer cosmosContainer, Schedul\n     }\n \n     @Override\n-    public Flux<FeedResponse<CosmosItemProperties>> createDocumentChangeFeedQuery(CosmosAsyncContainer collectionLink, ChangeFeedOptions feedOptions) {\n+    public Flux<FeedResponse<JsonNode>> createDocumentChangeFeedQuery(CosmosAsyncContainer collectionLink,\n+                                                                      ChangeFeedOptions feedOptions) {\n         AsyncDocumentClient clientWrapper =\n             CosmosBridgeInternal.getAsyncDocumentClient(collectionLink.getDatabase());\n-        Flux<FeedResponse<CosmosItemProperties>> feedResponseFlux =\n+        Flux<FeedResponse<JsonNode>> feedResponseFlux =\n             clientWrapper.queryDocumentChangeFeed(BridgeInternal.extractContainerSelfLink(collectionLink), feedOptions)\n                                                                     .map(response -> {\n-                                                                        List<CosmosItemProperties> results = response.getResults()\n+                                                                        List<JsonNode> results = response.getResults()\n                                                                                                                      .stream()\n-                                                                                                                     .map(document -> new CosmosItemProperties(document.toJson()))\n+                                                                                                                     .map(document -> document.toObject(JsonNode.class))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fc5c3efaa0397ceceb7b62fa58c70b6505e896a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIyNjQyMA==", "bodyText": "jdk.nashorn.internal.ir.ObjectNode is this the correct ObjectNode type? shouldn't this be jackson?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8075#discussion_r377226420", "createdAt": "2020-02-10T18:04:32Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java", "diffHunk": "@@ -12,15 +12,20 @@\n import com.azure.cosmos.CosmosClientBuilder;\n import com.azure.cosmos.CosmosContainerProperties;\n import com.azure.cosmos.CosmosContainerRequestOptions;\n-import com.azure.cosmos.CosmosItemProperties;\n+import com.azure.cosmos.implementation.CosmosItemProperties;\n import com.azure.cosmos.CosmosItemRequestOptions;\n import com.azure.cosmos.FeedOptions;\n import com.azure.cosmos.PartitionKey;\n import com.azure.cosmos.SerializationFormattingPolicy;\n import com.azure.cosmos.SqlParameter;\n import com.azure.cosmos.SqlParameterList;\n import com.azure.cosmos.SqlQuerySpec;\n+import com.azure.cosmos.implementation.Utils;\n import com.azure.cosmos.implementation.changefeed.ServiceItemLease;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import jdk.nashorn.internal.ir.ObjectNode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fc5c3efaa0397ceceb7b62fa58c70b6505e896a"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f55c1feba7f5f198ef01c9d054f8cfb5bc8943dd", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f55c1feba7f5f198ef01c9d054f8cfb5bc8943dd", "committedDate": "2020-02-10T20:07:15Z", "message": "Addressing pr comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa2eaed3e03496409312eaf5b7d8118687c1f67f", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fa2eaed3e03496409312eaf5b7d8118687c1f67f", "committedDate": "2020-02-10T20:21:58Z", "message": "Merge branch 'feature/cosmos/upstream-v4' into v4/removing-cosmositemproperties\n\n# Conflicts:\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java\n#\tsdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosKeyCredentialTest.java\n#\tsdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPartitionKeyTests.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb73f40d6b526822c497103c233ee136c89960b4", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/eb73f40d6b526822c497103c233ee136c89960b4", "committedDate": "2020-02-10T21:35:27Z", "message": "Fixing issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MzAzNTM1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8075#pullrequestreview-356303535", "createdAt": "2020-02-10T22:13:07Z", "commit": {"oid": "2fc5c3efaa0397ceceb7b62fa58c70b6505e896a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjoxMzowN1rOFn3gJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjoxMzowN1rOFn3gJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM0ODEzMg==", "bodyText": "This is already available in cosmosResponseDiagnostics exposed above. duplicate ways of getting the same thing", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8075#discussion_r377348132", "createdAt": "2020-02-10T22:13:07Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncItemResponse.java", "diffHunk": "@@ -51,21 +57,99 @@ public T getResource(){\n      */\n     public CosmosItemProperties getProperties() {\n         ensureCosmosItemPropertiesInitialized();\n-        return super.getProperties();\n+        return props;\n     }\n \n     private void ensureCosmosItemPropertiesInitialized() {\n-        if (super.getProperties() == null) {\n-            synchronized (this) {\n-                if (super.getProperties() == null) {\n-                    if (StringUtils.isEmpty(responseBodyString)){\n-                        super.setProperties(null);\n-                    } else {\n-                        CosmosItemProperties props = new CosmosItemProperties(responseBodyString);\n-                        super.setProperties(props);\n-                    }\n-                }\n+        synchronized (this) {\n+            if (StringUtils.isEmpty(responseBodyString)) {\n+                props = null;\n+            } else {\n+                props = new CosmosItemProperties(responseBodyString);\n             }\n+\n         }\n     }\n+\n+    /**\n+     * Gets the maximum size limit for this entity (in megabytes (MB) for server resources and in count for master\n+     * resources).\n+     *\n+     * @return the max resource quota.\n+     */\n+    public String getMaxResourceQuota() {\n+        return resourceResponse.getMaxResourceQuota();\n+    }\n+\n+    /**\n+     * Gets the current size of this entity (in megabytes (MB) for server resources and in count for master resources)\n+     *\n+     * @return the current resource quota usage.\n+     */\n+    public String getCurrentResourceQuotaUsage() {\n+        return resourceResponse.getCurrentResourceQuotaUsage();\n+    }\n+\n+    /**\n+     * Gets the Activity ID for the request.\n+     *\n+     * @return the activity getId.\n+     */\n+    public String getActivityId() {\n+        return resourceResponse.getActivityId();\n+    }\n+\n+    /**\n+     * Gets the number of index paths (terms) generated by the operation.\n+     *\n+     * @return the request charge.\n+     */\n+    public double getRequestCharge() {\n+        return resourceResponse.getRequestCharge();\n+    }\n+\n+    /**\n+     * Gets the HTTP status code associated with the response.\n+     *\n+     * @return the status code.\n+     */\n+    public int getStatusCode() {\n+        return resourceResponse.getStatusCode();\n+    }\n+\n+    /**\n+     * Gets the token used for managing client's consistency requirements.\n+     *\n+     * @return the session token.\n+     */\n+    public String getSessionToken() {\n+        return resourceResponse.getSessionToken();\n+    }\n+\n+    /**\n+     * Gets the headers associated with the response.\n+     *\n+     * @return the response headers.\n+     */\n+    public Map<String, String> getResponseHeaders() {\n+        return resourceResponse.getResponseHeaders();\n+    }\n+\n+    /**\n+     * Gets the diagnostics information for the current request to Azure Cosmos DB service.\n+     *\n+     * @return diagnostics information for the current request to Azure Cosmos DB service.\n+     */\n+    public CosmosResponseDiagnostics getCosmosResponseDiagnostics() {\n+        return resourceResponse.getCosmosResponseDiagnostics();\n+    }\n+\n+    /**\n+     * Gets the end-to-end request latency for the current request to Azure Cosmos DB service.\n+     *\n+     * @return end-to-end request latency for the current request to Azure Cosmos DB service.\n+     */\n+    public Duration getRequestLatency() {\n+        return resourceResponse.getRequestLatency();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fc5c3efaa0397ceceb7b62fa58c70b6505e896a"}, "originalPosition": 137}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MzM5Njg2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8075#pullrequestreview-356339686", "createdAt": "2020-02-10T23:28:58Z", "commit": {"oid": "fa2eaed3e03496409312eaf5b7d8118687c1f67f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMzoyODo1OFrOFn5WxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMzoyODo1OFrOFn5WxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3ODUwMQ==", "bodyText": "This should not be public", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8075#discussion_r377378501", "createdAt": "2020-02-10T23:28:58Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncItemResponse.java", "diffHunk": "@@ -51,21 +57,99 @@ public T getResource(){\n      */\n     public CosmosItemProperties getProperties() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa2eaed3e03496409312eaf5b7d8118687c1f67f"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MzQwNzIx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8075#pullrequestreview-356340721", "createdAt": "2020-02-10T23:31:36Z", "commit": {"oid": "eb73f40d6b526822c497103c233ee136c89960b4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db39962c6076f089d93df27fd4d51b88847e3d1f", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/db39962c6076f089d93df27fd4d51b88847e3d1f", "committedDate": "2020-02-11T02:31:26Z", "message": "Fixing test failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "140e672380141e1d997e05084434d99bf60147a5", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/140e672380141e1d997e05084434d99bf60147a5", "committedDate": "2020-02-12T04:18:37Z", "message": "Merge branch 'feature/cosmos/upstream-v4' into v4/removing-cosmositemproperties\n\n# Conflicts:\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosContainer.java\n#\tsdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosItemTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df9736c999aa06c72bfce3cd8ccea84517677035", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/df9736c999aa06c72bfce3cd8ccea84517677035", "committedDate": "2020-02-12T04:28:20Z", "message": "Resolving merge conflicts\nMaking getProperties in Cosmos*ItemResponse package-private and\n refactoring calls related to it"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2396, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}