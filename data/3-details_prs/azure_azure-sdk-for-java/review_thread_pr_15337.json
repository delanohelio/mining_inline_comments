{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4ODg5MzU1", "number": 15337, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOTo0ODoyNVrOEks2dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjo0MToxNVrOElCrWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTE5MDI4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOTo0ODoyNVrOHTzAeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDoyNToxNVrOHT0OrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyMDY5OA==", "bodyText": "should this be <= ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15337#discussion_r490520698", "createdAt": "2020-09-17T19:48:25Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1470,33 +1470,27 @@ public final void run() {\n             long currentNanoTime = System.nanoTime();\n \n             while (true) {\n-                try {\n-                    AcquireListener removedTask = this.pool.pendingAcquisitions.poll();\n-                    if (removedTask == null) {\n-                        // queue is empty\n-                        break;\n-                    }\n+                AcquireListener removedTask = this.pool.pendingAcquisitions.poll();\n+                if (removedTask == null) {\n+                    // queue is empty\n+                    break;\n+                }\n \n-                    long expiryTime = removedTask.getAcquisitionTimeoutInNanos();\n+                long expiryTime = removedTask.getAcquisitionTimeoutInNanos();\n \n-                    // Compare nanoTime as described in the System.nanoTime documentation\n-                    // See:\n-                    // * https://docs.oracle.com/javase/7/docs/api/java/lang/System.html#nanoTime()\n-                    // * https://github.com/netty/netty/issues/3705\n-                    if (expiryTime - currentNanoTime < 0) {\n-                        this.onTimeout(removedTask);\n-                    } else {\n-                        if (!this.pool.pendingAcquisitions.offer(removedTask)) {\n-                            logger.error(\"Unexpected failure when returning the removed task\"\n-                                    + \" to pending acquisition queue. current size [{}]\",\n-                                this.pool.pendingAcquisitions.size());\n-                        }\n-                        break;\n+                // Compare nanoTime as described in the System.nanoTime documentation\n+                // See:\n+                // * https://docs.oracle.com/javase/7/docs/api/java/lang/System.html#nanoTime()\n+                // * https://github.com/netty/netty/issues/3705\n+                if (expiryTime - currentNanoTime < 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2363921078f6a50c461ccacd3a810a95e7c886c9"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0MDcxNg==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15337#discussion_r490540716", "createdAt": "2020-09-17T20:25:15Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1470,33 +1470,27 @@ public final void run() {\n             long currentNanoTime = System.nanoTime();\n \n             while (true) {\n-                try {\n-                    AcquireListener removedTask = this.pool.pendingAcquisitions.poll();\n-                    if (removedTask == null) {\n-                        // queue is empty\n-                        break;\n-                    }\n+                AcquireListener removedTask = this.pool.pendingAcquisitions.poll();\n+                if (removedTask == null) {\n+                    // queue is empty\n+                    break;\n+                }\n \n-                    long expiryTime = removedTask.getAcquisitionTimeoutInNanos();\n+                long expiryTime = removedTask.getAcquisitionTimeoutInNanos();\n \n-                    // Compare nanoTime as described in the System.nanoTime documentation\n-                    // See:\n-                    // * https://docs.oracle.com/javase/7/docs/api/java/lang/System.html#nanoTime()\n-                    // * https://github.com/netty/netty/issues/3705\n-                    if (expiryTime - currentNanoTime < 0) {\n-                        this.onTimeout(removedTask);\n-                    } else {\n-                        if (!this.pool.pendingAcquisitions.offer(removedTask)) {\n-                            logger.error(\"Unexpected failure when returning the removed task\"\n-                                    + \" to pending acquisition queue. current size [{}]\",\n-                                this.pool.pendingAcquisitions.size());\n-                        }\n-                        break;\n+                // Compare nanoTime as described in the System.nanoTime documentation\n+                // See:\n+                // * https://docs.oracle.com/javase/7/docs/api/java/lang/System.html#nanoTime()\n+                // * https://github.com/netty/netty/issues/3705\n+                if (expiryTime - currentNanoTime < 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyMDY5OA=="}, "originalCommit": {"oid": "2363921078f6a50c461ccacd3a810a95e7c886c9"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTIwNjQ1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOTo1MjoxN1rOHTzJzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDo1ODozOFrOHT1TlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyMzA4Ng==", "bodyText": "I think my biggest question is: if we can not offer this task back, what would happen for this task? we did not fail it or retry, so any possibility it will stuck somewhere?\nPriorityBlockingQueue will never return false for the offer method, then I guess it should be fine here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15337#discussion_r490523086", "createdAt": "2020-09-17T19:52:17Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1470,33 +1470,27 @@ public final void run() {\n             long currentNanoTime = System.nanoTime();\n \n             while (true) {\n-                try {\n-                    AcquireListener removedTask = this.pool.pendingAcquisitions.poll();\n-                    if (removedTask == null) {\n-                        // queue is empty\n-                        break;\n-                    }\n+                AcquireListener removedTask = this.pool.pendingAcquisitions.poll();\n+                if (removedTask == null) {\n+                    // queue is empty\n+                    break;\n+                }\n \n-                    long expiryTime = removedTask.getAcquisitionTimeoutInNanos();\n+                long expiryTime = removedTask.getAcquisitionTimeoutInNanos();\n \n-                    // Compare nanoTime as described in the System.nanoTime documentation\n-                    // See:\n-                    // * https://docs.oracle.com/javase/7/docs/api/java/lang/System.html#nanoTime()\n-                    // * https://github.com/netty/netty/issues/3705\n-                    if (expiryTime - currentNanoTime < 0) {\n-                        this.onTimeout(removedTask);\n-                    } else {\n-                        if (!this.pool.pendingAcquisitions.offer(removedTask)) {\n-                            logger.error(\"Unexpected failure when returning the removed task\"\n-                                    + \" to pending acquisition queue. current size [{}]\",\n-                                this.pool.pendingAcquisitions.size());\n-                        }\n-                        break;\n+                // Compare nanoTime as described in the System.nanoTime documentation\n+                // See:\n+                // * https://docs.oracle.com/javase/7/docs/api/java/lang/System.html#nanoTime()\n+                // * https://github.com/netty/netty/issues/3705\n+                if (expiryTime - currentNanoTime < 0) {\n+                    this.onTimeout(removedTask);\n+                } else {\n+                    if (!this.pool.pendingAcquisitions.offer(removedTask)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2363921078f6a50c461ccacd3a810a95e7c886c9"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0MTAyMw==", "bodyText": "Yes - it is fine. the queue has unlimited capcity", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15337#discussion_r490541023", "createdAt": "2020-09-17T20:25:47Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1470,33 +1470,27 @@ public final void run() {\n             long currentNanoTime = System.nanoTime();\n \n             while (true) {\n-                try {\n-                    AcquireListener removedTask = this.pool.pendingAcquisitions.poll();\n-                    if (removedTask == null) {\n-                        // queue is empty\n-                        break;\n-                    }\n+                AcquireListener removedTask = this.pool.pendingAcquisitions.poll();\n+                if (removedTask == null) {\n+                    // queue is empty\n+                    break;\n+                }\n \n-                    long expiryTime = removedTask.getAcquisitionTimeoutInNanos();\n+                long expiryTime = removedTask.getAcquisitionTimeoutInNanos();\n \n-                    // Compare nanoTime as described in the System.nanoTime documentation\n-                    // See:\n-                    // * https://docs.oracle.com/javase/7/docs/api/java/lang/System.html#nanoTime()\n-                    // * https://github.com/netty/netty/issues/3705\n-                    if (expiryTime - currentNanoTime < 0) {\n-                        this.onTimeout(removedTask);\n-                    } else {\n-                        if (!this.pool.pendingAcquisitions.offer(removedTask)) {\n-                            logger.error(\"Unexpected failure when returning the removed task\"\n-                                    + \" to pending acquisition queue. current size [{}]\",\n-                                this.pool.pendingAcquisitions.size());\n-                        }\n-                        break;\n+                // Compare nanoTime as described in the System.nanoTime documentation\n+                // See:\n+                // * https://docs.oracle.com/javase/7/docs/api/java/lang/System.html#nanoTime()\n+                // * https://github.com/netty/netty/issues/3705\n+                if (expiryTime - currentNanoTime < 0) {\n+                    this.onTimeout(removedTask);\n+                } else {\n+                    if (!this.pool.pendingAcquisitions.offer(removedTask)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyMzA4Ng=="}, "originalCommit": {"oid": "2363921078f6a50c461ccacd3a810a95e7c886c9"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0MTM5Ng==", "bodyText": "I mean limited only by resource constraints - and since admission control is in place there is no issue.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15337#discussion_r490541396", "createdAt": "2020-09-17T20:26:27Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1470,33 +1470,27 @@ public final void run() {\n             long currentNanoTime = System.nanoTime();\n \n             while (true) {\n-                try {\n-                    AcquireListener removedTask = this.pool.pendingAcquisitions.poll();\n-                    if (removedTask == null) {\n-                        // queue is empty\n-                        break;\n-                    }\n+                AcquireListener removedTask = this.pool.pendingAcquisitions.poll();\n+                if (removedTask == null) {\n+                    // queue is empty\n+                    break;\n+                }\n \n-                    long expiryTime = removedTask.getAcquisitionTimeoutInNanos();\n+                long expiryTime = removedTask.getAcquisitionTimeoutInNanos();\n \n-                    // Compare nanoTime as described in the System.nanoTime documentation\n-                    // See:\n-                    // * https://docs.oracle.com/javase/7/docs/api/java/lang/System.html#nanoTime()\n-                    // * https://github.com/netty/netty/issues/3705\n-                    if (expiryTime - currentNanoTime < 0) {\n-                        this.onTimeout(removedTask);\n-                    } else {\n-                        if (!this.pool.pendingAcquisitions.offer(removedTask)) {\n-                            logger.error(\"Unexpected failure when returning the removed task\"\n-                                    + \" to pending acquisition queue. current size [{}]\",\n-                                this.pool.pendingAcquisitions.size());\n-                        }\n-                        break;\n+                // Compare nanoTime as described in the System.nanoTime documentation\n+                // See:\n+                // * https://docs.oracle.com/javase/7/docs/api/java/lang/System.html#nanoTime()\n+                // * https://github.com/netty/netty/issues/3705\n+                if (expiryTime - currentNanoTime < 0) {\n+                    this.onTimeout(removedTask);\n+                } else {\n+                    if (!this.pool.pendingAcquisitions.offer(removedTask)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyMzA4Ng=="}, "originalCommit": {"oid": "2363921078f6a50c461ccacd3a810a95e7c886c9"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1ODM1Ng==", "bodyText": "got it, thanks for the explanation~", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15337#discussion_r490558356", "createdAt": "2020-09-17T20:58:38Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1470,33 +1470,27 @@ public final void run() {\n             long currentNanoTime = System.nanoTime();\n \n             while (true) {\n-                try {\n-                    AcquireListener removedTask = this.pool.pendingAcquisitions.poll();\n-                    if (removedTask == null) {\n-                        // queue is empty\n-                        break;\n-                    }\n+                AcquireListener removedTask = this.pool.pendingAcquisitions.poll();\n+                if (removedTask == null) {\n+                    // queue is empty\n+                    break;\n+                }\n \n-                    long expiryTime = removedTask.getAcquisitionTimeoutInNanos();\n+                long expiryTime = removedTask.getAcquisitionTimeoutInNanos();\n \n-                    // Compare nanoTime as described in the System.nanoTime documentation\n-                    // See:\n-                    // * https://docs.oracle.com/javase/7/docs/api/java/lang/System.html#nanoTime()\n-                    // * https://github.com/netty/netty/issues/3705\n-                    if (expiryTime - currentNanoTime < 0) {\n-                        this.onTimeout(removedTask);\n-                    } else {\n-                        if (!this.pool.pendingAcquisitions.offer(removedTask)) {\n-                            logger.error(\"Unexpected failure when returning the removed task\"\n-                                    + \" to pending acquisition queue. current size [{}]\",\n-                                this.pool.pendingAcquisitions.size());\n-                        }\n-                        break;\n+                // Compare nanoTime as described in the System.nanoTime documentation\n+                // See:\n+                // * https://docs.oracle.com/javase/7/docs/api/java/lang/System.html#nanoTime()\n+                // * https://github.com/netty/netty/issues/3705\n+                if (expiryTime - currentNanoTime < 0) {\n+                    this.onTimeout(removedTask);\n+                } else {\n+                    if (!this.pool.pendingAcquisitions.offer(removedTask)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyMzA4Ng=="}, "originalCommit": {"oid": "2363921078f6a50c461ccacd3a810a95e7c886c9"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTc4ODQzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzoxNzowMlrOHT4pEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzowNzowOVrOHUMWvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYxMzAwOA==", "bodyText": "NIT : This should be final", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15337#discussion_r490613008", "createdAt": "2020-09-17T23:17:02Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "diffHunk": "@@ -128,6 +151,8 @@ public long id() {\n         final RntbdEndpoint endpoint = this.endpointProvider.get(address);\n         final RntbdRequestRecord record = endpoint.request(requestArgs);\n \n+        Context reactorContext = Context.of(KEY_ON_ERROR_DROPPED, onErrorDropHookWithReduceLogLevel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1bbe24701d5e39c744512fa735fce7f6f8f2653"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkzNTk5Nw==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15337#discussion_r490935997", "createdAt": "2020-09-18T13:07:09Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "diffHunk": "@@ -128,6 +151,8 @@ public long id() {\n         final RntbdEndpoint endpoint = this.endpointProvider.get(address);\n         final RntbdRequestRecord record = endpoint.request(requestArgs);\n \n+        Context reactorContext = Context.of(KEY_ON_ERROR_DROPPED, onErrorDropHookWithReduceLogLevel);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYxMzAwOA=="}, "originalCommit": {"oid": "b1bbe24701d5e39c744512fa735fce7f6f8f2653"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3Mjc2NjM1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjo0MToxNVrOHUUbTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNzo0MDozMlrOHUWOcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA2ODIzNg==", "bodyText": "@FabianMeiswinkel Is this a feature of Reactor, if so is it documented somewhere? It's interesting.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15337#discussion_r491068236", "createdAt": "2020-09-18T16:41:15Z", "author": {"login": "allenhumphreys"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "diffHunk": "@@ -58,6 +61,26 @@\n     private static final AtomicLong instanceCount = new AtomicLong();\n     private static final Logger logger = LoggerFactory.getLogger(RntbdTransportClient.class);\n \n+    /**\n+     * A key that can be used to store a sequence-specific {@link Hooks#onErrorDropped(Consumer)}\n+     * hook in a {@link Context}, as a {@link Consumer Consumer&lt;Throwable&gt;}.\n+     */\n+    private static final String KEY_ON_ERROR_DROPPED = \"reactor.onErrorDropped.local\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "013482b6e2a561f05e68d652778eb689031f52fd"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA4NDIwMw==", "bodyText": "Yes - it is a Reactor feature - but I found it via source code inspection. This is the commit in which it was added: reactor/reactor-core@b576f7f", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15337#discussion_r491084203", "createdAt": "2020-09-18T17:13:03Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "diffHunk": "@@ -58,6 +61,26 @@\n     private static final AtomicLong instanceCount = new AtomicLong();\n     private static final Logger logger = LoggerFactory.getLogger(RntbdTransportClient.class);\n \n+    /**\n+     * A key that can be used to store a sequence-specific {@link Hooks#onErrorDropped(Consumer)}\n+     * hook in a {@link Context}, as a {@link Consumer Consumer&lt;Throwable&gt;}.\n+     */\n+    private static final String KEY_ON_ERROR_DROPPED = \"reactor.onErrorDropped.local\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA2ODIzNg=="}, "originalCommit": {"oid": "013482b6e2a561f05e68d652778eb689031f52fd"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA4NTc5Mg==", "bodyText": "The best features are always undocumented! My next question is why didn't you use Operators.KEY_ON_ERROR_DROPPED and/or provide a link to how it works? :-)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15337#discussion_r491085792", "createdAt": "2020-09-18T17:16:27Z", "author": {"login": "allenhumphreys"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "diffHunk": "@@ -58,6 +61,26 @@\n     private static final AtomicLong instanceCount = new AtomicLong();\n     private static final Logger logger = LoggerFactory.getLogger(RntbdTransportClient.class);\n \n+    /**\n+     * A key that can be used to store a sequence-specific {@link Hooks#onErrorDropped(Consumer)}\n+     * hook in a {@link Context}, as a {@link Consumer Consumer&lt;Throwable&gt;}.\n+     */\n+    private static final String KEY_ON_ERROR_DROPPED = \"reactor.onErrorDropped.local\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA2ODIzNg=="}, "originalCommit": {"oid": "013482b6e2a561f05e68d652778eb689031f52fd"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA5NDQ2NQ==", "bodyText": "Hooks.KEY_ON_ERROR_DROPPED is package internal. But fair point about comment. Will add it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15337#discussion_r491094465", "createdAt": "2020-09-18T17:34:14Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "diffHunk": "@@ -58,6 +61,26 @@\n     private static final AtomicLong instanceCount = new AtomicLong();\n     private static final Logger logger = LoggerFactory.getLogger(RntbdTransportClient.class);\n \n+    /**\n+     * A key that can be used to store a sequence-specific {@link Hooks#onErrorDropped(Consumer)}\n+     * hook in a {@link Context}, as a {@link Consumer Consumer&lt;Throwable&gt;}.\n+     */\n+    private static final String KEY_ON_ERROR_DROPPED = \"reactor.onErrorDropped.local\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA2ODIzNg=="}, "originalCommit": {"oid": "013482b6e2a561f05e68d652778eb689031f52fd"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA5NjU5NA==", "bodyText": "#15365", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15337#discussion_r491096594", "createdAt": "2020-09-18T17:38:25Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "diffHunk": "@@ -58,6 +61,26 @@\n     private static final AtomicLong instanceCount = new AtomicLong();\n     private static final Logger logger = LoggerFactory.getLogger(RntbdTransportClient.class);\n \n+    /**\n+     * A key that can be used to store a sequence-specific {@link Hooks#onErrorDropped(Consumer)}\n+     * hook in a {@link Context}, as a {@link Consumer Consumer&lt;Throwable&gt;}.\n+     */\n+    private static final String KEY_ON_ERROR_DROPPED = \"reactor.onErrorDropped.local\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA2ODIzNg=="}, "originalCommit": {"oid": "013482b6e2a561f05e68d652778eb689031f52fd"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA5NzcxMw==", "bodyText": "Ah! In the commit you posted they were public, but the actual source now is in Hooks and yes internal, I get it now! Thanks for adding the comment :-)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15337#discussion_r491097713", "createdAt": "2020-09-18T17:40:32Z", "author": {"login": "allenhumphreys"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "diffHunk": "@@ -58,6 +61,26 @@\n     private static final AtomicLong instanceCount = new AtomicLong();\n     private static final Logger logger = LoggerFactory.getLogger(RntbdTransportClient.class);\n \n+    /**\n+     * A key that can be used to store a sequence-specific {@link Hooks#onErrorDropped(Consumer)}\n+     * hook in a {@link Context}, as a {@link Consumer Consumer&lt;Throwable&gt;}.\n+     */\n+    private static final String KEY_ON_ERROR_DROPPED = \"reactor.onErrorDropped.local\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA2ODIzNg=="}, "originalCommit": {"oid": "013482b6e2a561f05e68d652778eb689031f52fd"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 940, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}