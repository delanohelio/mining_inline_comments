{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5OTI3MTY4", "number": 13230, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjoyMzozM1rOEO-qvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNzo1MDoyM1rOEPbv1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTQyMjcwOnYy", "diffSide": "LEFT", "path": "sdk/compute/mgmt/src/main/java/com/azure/resourcemanager/compute/implementation/WindowsVolumeNoAADEncryptionMonitorImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjoyMzozM1rOGybtcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjoyMzozM1rOGybtcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzNTk4Ng==", "bodyText": "Track1 does this\n    private Observable<VirtualMachineInner> retrieveVirtualMachineAsync() {\n        return this.computeManager\n                .inner()\n                .virtualMachines()\n                .getByResourceGroupAsync(rgName, vmName, InstanceViewTypes.INSTANCE_VIEW)\n                .flatMap(new Func1<VirtualMachineInner, Observable<VirtualMachineInner>>() {\n                    @Override\n                    public Observable<VirtualMachineInner> call(VirtualMachineInner virtualMachine) {\n                        if (virtualMachine == null) {\n                            return Observable.error(new Exception(String.format(\"VM with name '%s' not found (resource group '%s')\",\n                                    vmName, rgName)));\n                        }\n                        return Observable.just(virtualMachine);\n                    }\n                });\n    }\n\nBasically it convert null to Exception.\nSince we already has Exception here, no need for this code.\n\nI've added // Exception if vm not found comment in these locations, in case we need to switch back the GET 404 response to Mono.empty() without ManagementException.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13230#discussion_r455535986", "createdAt": "2020-07-16T06:23:33Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/compute/mgmt/src/main/java/com/azure/resourcemanager/compute/implementation/WindowsVolumeNoAADEncryptionMonitorImpl.java", "diffHunk": "@@ -155,13 +155,7 @@ public DiskVolumeEncryptionMonitor refresh() {\n             .computeManager\n             .inner()\n             .getVirtualMachines()\n-            .getByResourceGroupAsync(rgName, vmName)\n-            .onErrorResume(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04f6a7cd4517a3efb1e5a09df07caece95867d94"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjE3NDMzOnYy", "diffSide": "RIGHT", "path": "sdk/authorization/mgmt/src/main/java/com/azure/resourcemanager/authorization/implementation/ActiveDirectoryApplicationsImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNzo0NjowN1rOGzI5Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOTowNzowOFrOGzLeHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI3NjIzOQ==", "bodyText": "why does it need the try? When will it throw IllegalArgumentException?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13230#discussion_r456276239", "createdAt": "2020-07-17T07:46:07Z", "author": {"login": "ChenTanyi"}, "path": "sdk/authorization/mgmt/src/main/java/com/azure/resourcemanager/authorization/implementation/ActiveDirectoryApplicationsImpl.java", "diffHunk": "@@ -93,10 +91,13 @@ public ActiveDirectoryApplication getByName(String spn) {\n                 Mono\n                     .defer(\n                         () -> {\n-                            UUID.fromString(trimmed);\n-                            return inner().listAsync(String.format(\"appId eq '%s'\", trimmed)).singleOrEmpty();\n+                            try {\n+                                UUID.fromString(trimmed);\n+                                return inner().listAsync(String.format(\"appId eq '%s'\", trimmed)).singleOrEmpty();\n+                            } catch (IllegalArgumentException e) {\n+                                return Mono.empty();\n+                            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a0d0c751b32aa2d6e3503213e3b072916a49226"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxODQ5Mw==", "bodyText": "I think it is for UUID.fromString. The block tries to find Application by the appId. So if input is not UUID, this part will be skipped.\nI think try catch in the exact location would be better than previously .onErrorResume(IllegalArgumentException.class, e -> Mono.empty()) after this block.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13230#discussion_r456318493", "createdAt": "2020-07-17T09:07:08Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/authorization/mgmt/src/main/java/com/azure/resourcemanager/authorization/implementation/ActiveDirectoryApplicationsImpl.java", "diffHunk": "@@ -93,10 +91,13 @@ public ActiveDirectoryApplication getByName(String spn) {\n                 Mono\n                     .defer(\n                         () -> {\n-                            UUID.fromString(trimmed);\n-                            return inner().listAsync(String.format(\"appId eq '%s'\", trimmed)).singleOrEmpty();\n+                            try {\n+                                UUID.fromString(trimmed);\n+                                return inner().listAsync(String.format(\"appId eq '%s'\", trimmed)).singleOrEmpty();\n+                            } catch (IllegalArgumentException e) {\n+                                return Mono.empty();\n+                            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI3NjIzOQ=="}, "originalCommit": {"oid": "6a0d0c751b32aa2d6e3503213e3b072916a49226"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjE4NTg2OnYy", "diffSide": "RIGHT", "path": "sdk/compute/mgmt/src/main/java/com/azure/resourcemanager/compute/implementation/VirtualMachineExtensionImagesImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNzo1MDowNFrOGzJANw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOTowOTozNlrOGzLi0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI3ODA3MQ==", "bodyText": "I think it could just be removed, due to other list will not deal with 404.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13230#discussion_r456278071", "createdAt": "2020-07-17T07:50:04Z", "author": {"login": "ChenTanyi"}, "path": "sdk/compute/mgmt/src/main/java/com/azure/resourcemanager/compute/implementation/VirtualMachineExtensionImagesImpl.java", "diffHunk": "@@ -44,9 +45,10 @@ public VirtualMachineExtensionImagesImpl(VirtualMachinePublishers publishers) {\n                     virtualMachinePublisher\n                         .extensionTypes()\n                         .listAsync()\n-                        .onErrorResume(e -> Mono.empty())\n-                        .flatMap(\n-                            virtualMachineExtensionImageType -> virtualMachineExtensionImageType.versions().listAsync())\n+                        .onErrorResume(ManagementException.class,\n+                            e -> e.getResponse().getStatusCode() == 404 ? Flux.empty() : Flux.error(e))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a0d0c751b32aa2d6e3503213e3b072916a49226"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxOTY5Nw==", "bodyText": "This is because for 1 or 2 publisher, above list image type would fail with 404 (error on publisher not valid). But apparently we would still want to continue with the other publishers.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13230#discussion_r456319697", "createdAt": "2020-07-17T09:09:36Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/compute/mgmt/src/main/java/com/azure/resourcemanager/compute/implementation/VirtualMachineExtensionImagesImpl.java", "diffHunk": "@@ -44,9 +45,10 @@ public VirtualMachineExtensionImagesImpl(VirtualMachinePublishers publishers) {\n                     virtualMachinePublisher\n                         .extensionTypes()\n                         .listAsync()\n-                        .onErrorResume(e -> Mono.empty())\n-                        .flatMap(\n-                            virtualMachineExtensionImageType -> virtualMachineExtensionImageType.versions().listAsync())\n+                        .onErrorResume(ManagementException.class,\n+                            e -> e.getResponse().getStatusCode() == 404 ? Flux.empty() : Flux.error(e))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI3ODA3MQ=="}, "originalCommit": {"oid": "6a0d0c751b32aa2d6e3503213e3b072916a49226"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjE4NzA5OnYy", "diffSide": "RIGHT", "path": "sdk/compute/mgmt/src/main/java/com/azure/resourcemanager/compute/implementation/VirtualMachineImagesImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNzo1MDoyM1rOGzJA5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNzo1MDoyM1rOGzJA5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI3ODI0Nw==", "bodyText": "same as above", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13230#discussion_r456278247", "createdAt": "2020-07-17T07:50:23Z", "author": {"login": "ChenTanyi"}, "path": "sdk/compute/mgmt/src/main/java/com/azure/resourcemanager/compute/implementation/VirtualMachineImagesImpl.java", "diffHunk": "@@ -85,7 +87,8 @@ public VirtualMachineImage getImage(\n                     virtualMachinePublisher\n                         .offers()\n                         .listAsync()\n-                        .onErrorResume(e -> Mono.empty())\n+                        .onErrorResume(ManagementException.class,\n+                            e -> e.getResponse().getStatusCode() == 404 ? Flux.empty() : Flux.error(e))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a0d0c751b32aa2d6e3503213e3b072916a49226"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4976, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}