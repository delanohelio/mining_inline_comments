{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0OTI0Njc2", "number": 14529, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjowODowOFrOEdZ6qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjoxNzozNVrOEdaD1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MjY4Nzc2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/AzureKeyVaultKeyWrapProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjowODowOFrOHIi7ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjo1NToxOFrOHIj7zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyMjkxNw==", "bodyText": "NIT: Remove TODO comment?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14529#discussion_r478722917", "createdAt": "2020-08-27T22:08:08Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/AzureKeyVaultKeyWrapProvider.java", "diffHunk": "@@ -50,7 +50,7 @@ public AzureKeyVaultKeyWrapProvider(KeyVaultTokenCredentialFactory keyVaultToken\n \n     // TODO make this async", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e49447ab5f62d3c80180250aaf28509f793a51"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODczMDI2Mw==", "bodyText": "thanks will do.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14529#discussion_r478730263", "createdAt": "2020-08-27T22:28:09Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/AzureKeyVaultKeyWrapProvider.java", "diffHunk": "@@ -50,7 +50,7 @@ public AzureKeyVaultKeyWrapProvider(KeyVaultTokenCredentialFactory keyVaultToken\n \n     // TODO make this async", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyMjkxNw=="}, "originalCommit": {"oid": "89e49447ab5f62d3c80180250aaf28509f793a51"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODczOTQwNQ==", "bodyText": "done.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14529#discussion_r478739405", "createdAt": "2020-08-27T22:55:18Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/AzureKeyVaultKeyWrapProvider.java", "diffHunk": "@@ -50,7 +50,7 @@ public AzureKeyVaultKeyWrapProvider(KeyVaultTokenCredentialFactory keyVaultToken\n \n     // TODO make this async", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyMjkxNw=="}, "originalCommit": {"oid": "89e49447ab5f62d3c80180250aaf28509f793a51"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MjY5NzM3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/implementation/encryption/CachedDekProperties.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjoxMTo1N1rOHIjA7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjozNDoyN1rOHIjgYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyNDMzNA==", "bodyText": "NIT: wouldn't it make sense to do that in this PR vs. just adding TODO? Or is the work more involved than I naively assume?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14529#discussion_r478724334", "createdAt": "2020-08-27T22:11:57Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/implementation/encryption/CachedDekProperties.java", "diffHunk": "@@ -13,7 +13,7 @@ public CachedDekProperties(\n         DataEncryptionKeyProperties serverProperties,\n         Instant serverPropertiesExpiryUtc) {\n         assert(serverProperties != null);\n-\n+        // TODO: add NPE validation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e49447ab5f62d3c80180250aaf28509f793a51"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODczMDIyMg==", "bodyText": "TODO comment is not accurate. will update the TODO to capture the details.\non contentResponseOnWriteEnabled = false we get into NPE.\nI need to think on what to do on that case (for contentResponseOnWriteEnabled =false).\nJust NPE validation won't help here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14529#discussion_r478730222", "createdAt": "2020-08-27T22:28:01Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/implementation/encryption/CachedDekProperties.java", "diffHunk": "@@ -13,7 +13,7 @@ public CachedDekProperties(\n         DataEncryptionKeyProperties serverProperties,\n         Instant serverPropertiesExpiryUtc) {\n         assert(serverProperties != null);\n-\n+        // TODO: add NPE validation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyNDMzNA=="}, "originalCommit": {"oid": "89e49447ab5f62d3c80180250aaf28509f793a51"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODczMjM4Nw==", "bodyText": "Makes sense", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14529#discussion_r478732387", "createdAt": "2020-08-27T22:34:27Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/implementation/encryption/CachedDekProperties.java", "diffHunk": "@@ -13,7 +13,7 @@ public CachedDekProperties(\n         DataEncryptionKeyProperties serverProperties,\n         Instant serverPropertiesExpiryUtc) {\n         assert(serverProperties != null);\n-\n+        // TODO: add NPE validation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyNDMzNA=="}, "originalCommit": {"oid": "89e49447ab5f62d3c80180250aaf28509f793a51"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MjcxMTI2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/implementation/encryption/DataEncryptionKeyContainerCore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjoxNzozNVrOHIjI9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOTozMjo1MlrOHLFTDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyNjM4OQ==", "bodyText": "You are modifying the passed in request options here. Wouldn't it be better to create a deep copy instead?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14529#discussion_r478726389", "createdAt": "2020-08-27T22:17:35Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/implementation/encryption/DataEncryptionKeyContainerCore.java", "diffHunk": "@@ -96,39 +99,42 @@ public DataEncryptionKeyContainerCore(CosmosDataEncryptionKeyProvider dekProvide\n                 DataEncryptionKeyProperties dekProperties = result.getT1();\n                 InMemoryRawDek inMemoryRawDek = result.getT2();\n \n-                Tuple3<byte[], EncryptionKeyWrapMetadata, InMemoryRawDek> wrapResult =\n-                    this.wrapAsync(\n-                        id,\n-                        inMemoryRawDek.getDataEncryptionKey().getRawKey(),\n-                        dekProperties.encryptionAlgorithm,\n-                        newWrapMetadata);\n-\n-                byte[] wrappedDek = wrapResult.getLeft();\n-                EncryptionKeyWrapMetadata updatedMetadata = wrapResult.getMiddle();\n-                InMemoryRawDek updatedRawDek = wrapResult.getRight();\n-\n-                CosmosItemRequestOptions effectiveRequestOptions = requestOptions != null ? requestOptions : new CosmosItemRequestOptions();\n-\n-                effectiveRequestOptions.setIfMatchETag(dekProperties.eTag);\n-\n-                DataEncryptionKeyProperties newDekProperties = new DataEncryptionKeyProperties(dekProperties);\n-                newDekProperties.wrappedDataEncryptionKey = wrappedDek;\n-                newDekProperties.encryptionKeyWrapMetadata = updatedMetadata;\n-\n-                Mono<CosmosItemResponse<DataEncryptionKeyProperties>> responseMono = this.dekProvider.getContainer().replaceItem(\n-                    newDekProperties,\n-                    newDekProperties.id,\n-                    new PartitionKey(newDekProperties.id),\n-                    effectiveRequestOptions);\n-\n-                return responseMono.flatMap(\n-                    response -> {\n-                        DataEncryptionKeyProperties item = response.getItem();\n-\n-                        assert (item != null);\n-                        this.dekProvider.getDekCache().setDekProperties(id, item);\n-                        this.dekProvider.getDekCache().setRawDek(id, updatedRawDek);\n-                        return Mono.just(response);\n+                Mono<Tuple3<byte[], EncryptionKeyWrapMetadata, InMemoryRawDek>> wrapResultMono = this.wrapAsync(\n+                    id,\n+                    inMemoryRawDek.getDataEncryptionKey().getRawKey(),\n+                    dekProperties.encryptionAlgorithm,\n+                    newWrapMetadata);\n+\n+                return wrapResultMono.flatMap(\n+                    wrapResult -> {\n+                        byte[] wrappedDek = wrapResult.getLeft();\n+                        EncryptionKeyWrapMetadata updatedMetadata = wrapResult.getMiddle();\n+                        InMemoryRawDek updatedRawDek = wrapResult.getRight();\n+\n+                        CosmosItemRequestOptions effectiveRequestOptions = requestOptions != null ? requestOptions : new CosmosItemRequestOptions();\n+\n+                        effectiveRequestOptions.setIfMatchETag(dekProperties.eTag);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e49447ab5f62d3c80180250aaf28509f793a51"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM4MzE4MQ==", "bodyText": "addressed. good point. thank you.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14529#discussion_r481383181", "createdAt": "2020-09-01T19:32:52Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/implementation/encryption/DataEncryptionKeyContainerCore.java", "diffHunk": "@@ -96,39 +99,42 @@ public DataEncryptionKeyContainerCore(CosmosDataEncryptionKeyProvider dekProvide\n                 DataEncryptionKeyProperties dekProperties = result.getT1();\n                 InMemoryRawDek inMemoryRawDek = result.getT2();\n \n-                Tuple3<byte[], EncryptionKeyWrapMetadata, InMemoryRawDek> wrapResult =\n-                    this.wrapAsync(\n-                        id,\n-                        inMemoryRawDek.getDataEncryptionKey().getRawKey(),\n-                        dekProperties.encryptionAlgorithm,\n-                        newWrapMetadata);\n-\n-                byte[] wrappedDek = wrapResult.getLeft();\n-                EncryptionKeyWrapMetadata updatedMetadata = wrapResult.getMiddle();\n-                InMemoryRawDek updatedRawDek = wrapResult.getRight();\n-\n-                CosmosItemRequestOptions effectiveRequestOptions = requestOptions != null ? requestOptions : new CosmosItemRequestOptions();\n-\n-                effectiveRequestOptions.setIfMatchETag(dekProperties.eTag);\n-\n-                DataEncryptionKeyProperties newDekProperties = new DataEncryptionKeyProperties(dekProperties);\n-                newDekProperties.wrappedDataEncryptionKey = wrappedDek;\n-                newDekProperties.encryptionKeyWrapMetadata = updatedMetadata;\n-\n-                Mono<CosmosItemResponse<DataEncryptionKeyProperties>> responseMono = this.dekProvider.getContainer().replaceItem(\n-                    newDekProperties,\n-                    newDekProperties.id,\n-                    new PartitionKey(newDekProperties.id),\n-                    effectiveRequestOptions);\n-\n-                return responseMono.flatMap(\n-                    response -> {\n-                        DataEncryptionKeyProperties item = response.getItem();\n-\n-                        assert (item != null);\n-                        this.dekProvider.getDekCache().setDekProperties(id, item);\n-                        this.dekProvider.getDekCache().setRawDek(id, updatedRawDek);\n-                        return Mono.just(response);\n+                Mono<Tuple3<byte[], EncryptionKeyWrapMetadata, InMemoryRawDek>> wrapResultMono = this.wrapAsync(\n+                    id,\n+                    inMemoryRawDek.getDataEncryptionKey().getRawKey(),\n+                    dekProperties.encryptionAlgorithm,\n+                    newWrapMetadata);\n+\n+                return wrapResultMono.flatMap(\n+                    wrapResult -> {\n+                        byte[] wrappedDek = wrapResult.getLeft();\n+                        EncryptionKeyWrapMetadata updatedMetadata = wrapResult.getMiddle();\n+                        InMemoryRawDek updatedRawDek = wrapResult.getRight();\n+\n+                        CosmosItemRequestOptions effectiveRequestOptions = requestOptions != null ? requestOptions : new CosmosItemRequestOptions();\n+\n+                        effectiveRequestOptions.setIfMatchETag(dekProperties.eTag);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyNjM4OQ=="}, "originalCommit": {"oid": "89e49447ab5f62d3c80180250aaf28509f793a51"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1429, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}