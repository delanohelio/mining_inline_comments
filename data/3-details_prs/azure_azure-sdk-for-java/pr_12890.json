{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1ODAzNTY4", "number": 12890, "title": "Performance Improvements for Azure Core", "bodyText": "Fixes #11675 and #11686\nThis PR adds a handful of performance improvements to Azure Core. These range from how serialization and deserialization are handled to caching UrlBuilders to replacing string splitting with regexes.\nThe most notable change is due to serialization changes by leveraging InputStream and OutputStream instead of using String. This is called out in Jackson's documentation on how to improve performance, closer to raw bytes the better. Streams were chosen over byte[] as they allow for further extensibility in the future and that byte[] forces an entire response or request to be maintained in memory at once.\nImprovements\n\nUpdated serialization to use InputStream and OutputStream.\nChanged HttpHeaders backing Map from ConcurrentHashMap to HashMap.\nAdded caching to UrlBuilder to reduce the amount of String splitting. Cached instances return a clone so they don't mutate the global store.\nAdded API to TracerProxy to indicate if tracing is enabled to quickly no-op tracing tasks that would run.\nChanged maintaining valid response codes from a List to Set so checks are O(1).\nAdded caching to Type retrieval.\nReduced number of calls to String splitting by combining operations.", "createdAt": "2020-07-08T00:41:13Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890", "merged": true, "mergeCommit": {"oid": "76fc7e87143be4d5d0c7b2775997859820e889f2"}, "closed": true, "closedAt": "2020-08-20T16:47:06Z", "author": {"login": "JonathanGiles"}, "timelineItems": {"totalCount": 52, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcysMqcgH2gAyNDQ1ODAzNTY4OmI4MWM0MWVmMGFjOTA5NTg2MDczNjE3MDRhZmJiYTU3YTVjNWIyZDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHCbhzgFqTQ4NDYxMTkxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b81c41ef0ac90958607361704afbba57a5c5b2d3", "author": {"user": {"login": "JonathanGiles", "name": "Jonathan Giles"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b81c41ef0ac90958607361704afbba57a5c5b2d3", "committedDate": "2020-07-07T20:51:57Z", "message": "Miscellaneous small perf investigations in azure-core in draft form."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d27a30b9e63e19582816caa8121549c513d7618", "author": {"user": {"login": "srnagar", "name": "Srikanta"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8d27a30b9e63e19582816caa8121549c513d7618", "committedDate": "2020-07-08T00:30:36Z", "message": "Fix HttpResponseBodyDecoder unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c0fd5f5c214361436a3e1bb67e4d5977b17f4fc", "author": {"user": {"login": "JonathanGiles", "name": "Jonathan Giles"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0c0fd5f5c214361436a3e1bb67e4d5977b17f4fc", "committedDate": "2020-07-08T03:26:14Z", "message": "Revert error checking logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf60f1e36ef6160a95f8b83e9325d7dbc2e3d34d", "author": {"user": {"login": "JonathanGiles", "name": "Jonathan Giles"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bf60f1e36ef6160a95f8b83e9325d7dbc2e3d34d", "committedDate": "2020-07-08T04:06:47Z", "message": "Fix some checkstyle issues and a test failure."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8af1f8852767bc5fbb9cb0108fc161acdb67735", "author": {"user": {"login": "JonathanGiles", "name": "Jonathan Giles"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d8af1f8852767bc5fbb9cb0108fc161acdb67735", "committedDate": "2020-07-09T02:12:37Z", "message": "Compile two frequently parsed regex's into a Pattern to save CPU time"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "baa48ab05ddf4ea9731921d8c397e146be11885a", "author": {"user": {"login": "JonathanGiles", "name": "Jonathan Giles"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/baa48ab05ddf4ea9731921d8c397e146be11885a", "committedDate": "2020-07-09T03:24:32Z", "message": "Hack in some code that tries to minimise the amount of times we serialize / deserialize to / from String, instead trying to use byte[] for input and ByteArrayOutputStream for output."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "547c0042e4a1b73b33ddca077292156ce2dfdc6c", "author": {"user": {"login": "JonathanGiles", "name": "Jonathan Giles"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/547c0042e4a1b73b33ddca077292156ce2dfdc6c", "committedDate": "2020-07-09T03:35:50Z", "message": "Fix afterburner versioning"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8e116a6272a1e91b9c41ecf68eb3b16d7e38e55", "author": {"user": {"login": "srnagar", "name": "Srikanta"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b8e116a6272a1e91b9c41ecf68eb3b16d7e38e55", "committedDate": "2020-07-09T03:49:24Z", "message": "Convert object to byte array"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8dd768967bf4d7ce6a69d78ffbf8aef2d2a184a", "author": {"user": {"login": "srnagar", "name": "Srikanta"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c8dd768967bf4d7ce6a69d78ffbf8aef2d2a184a", "committedDate": "2020-07-09T03:54:05Z", "message": "Remove duplicate serializer methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "184522452033a8fab48ef90748ad90032e5ffee4", "author": {"user": {"login": "srnagar", "name": "Srikanta"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/184522452033a8fab48ef90748ad90032e5ffee4", "committedDate": "2020-07-09T03:55:36Z", "message": "Update references to old method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1ODc0Njky", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#pullrequestreview-445874692", "createdAt": "2020-07-09T18:39:49Z", "commit": {"oid": "184522452033a8fab48ef90748ad90032e5ffee4"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODozOTo0OVrOGvdTRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODo1ODo0MVrOGvd6qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxNjMyNw==", "bodyText": "This method appears to only be used in tests and in one case where we check if a status code is valid. Thoughts on removing this method since it is non-public API and making callers of this use the boolean isExpectedResponseStatusCode(int statusCode) method? This will be more performant as we can completely remove the int[] cloning.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r452416327", "createdAt": "2020-07-09T18:39:49Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/rest/SwaggerMethodParser.java", "diffHunk": "@@ -223,7 +234,8 @@ public HttpMethod getHttpMethod() {\n      */\n     @Override\n     public int[] getExpectedStatusCodes() {\n-        return CoreUtils.clone(expectedStatusCodes);\n+//        return expectedStatusCodes;\n+        return expectedStatusCodes == null ? null : expectedStatusCodes.stream().toArray();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "184522452033a8fab48ef90748ad90032e5ffee4"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxNjYzNQ==", "bodyText": "The only caller to this is HttpResponseBodyDecoder.isErrorStatus", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r452416635", "createdAt": "2020-07-09T18:40:22Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/rest/SwaggerMethodParser.java", "diffHunk": "@@ -223,7 +234,8 @@ public HttpMethod getHttpMethod() {\n      */\n     @Override\n     public int[] getExpectedStatusCodes() {\n-        return CoreUtils.clone(expectedStatusCodes);\n+//        return expectedStatusCodes;\n+        return expectedStatusCodes == null ? null : expectedStatusCodes.stream().toArray();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxNjMyNw=="}, "originalCommit": {"oid": "184522452033a8fab48ef90748ad90032e5ffee4"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyMTM3NQ==", "bodyText": "This interface is in implementation, so we should be able to remove it completely.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r452421375", "createdAt": "2020-07-09T18:49:25Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/serializer/HttpResponseDecodeData.java", "diffHunk": "@@ -59,11 +59,24 @@ default Type getHeadersType() {\n      * 2. If the returned int[] is not-null, only the codes in the array are considered as success code.\n      *\n      * @return the expected HTTP response status codes\n+     * @deprecated Use {@link #isExpectedResponseStatusCode(int)} instead.\n      */\n+    @Deprecated // This is only used in tests now - all uses should go via isExpectedResponseStatusCode instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "184522452033a8fab48ef90748ad90032e5ffee4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyMTk3Mg==", "bodyText": "In implementation so I don't think we need a default. If we want to keep a default we should check is the status code is in the 200 range.\nreturn (statusCode / 100) == 2;", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r452421972", "createdAt": "2020-07-09T18:50:30Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/serializer/HttpResponseDecodeData.java", "diffHunk": "@@ -59,11 +59,24 @@ default Type getHeadersType() {\n      * 2. If the returned int[] is not-null, only the codes in the array are considered as success code.\n      *\n      * @return the expected HTTP response status codes\n+     * @deprecated Use {@link #isExpectedResponseStatusCode(int)} instead.\n      */\n+    @Deprecated // This is only used in tests now - all uses should go via isExpectedResponseStatusCode instead\n     default int[] getExpectedStatusCodes() {\n         return null;\n     }\n \n+    /**\n+     * This method returns {@code true} if the given {@code statusCode} is in the list of expected HTTP resposne\n+     * codes returned by {@link #getExpectedStatusCodes()}, {@code false} otherwise.\n+     *\n+     * @param statusCode The HTTP response status code to evaluate.\n+     * @return {@code true} if the given status code is expected.\n+     */\n+    default boolean isExpectedResponseStatusCode(int statusCode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "184522452033a8fab48ef90748ad90032e5ffee4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyMzY1MA==", "bodyText": "Could this call createParameterizedType?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r452423650", "createdAt": "2020-07-09T18:53:27Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/TypeUtil.java", "diffHunk": "@@ -75,46 +79,52 @@ public static Type getTypeArgument(Type type) {\n      * @param type the input type\n      * @return the direct super type\n      */\n-    public static Type getSuperType(Type type) {\n-        if (type instanceof ParameterizedType) {\n-            ParameterizedType parameterizedType = (ParameterizedType) type;\n-            Type genericSuperClass = ((Class<?>) parameterizedType.getRawType()).getGenericSuperclass();\n-            if (genericSuperClass instanceof ParameterizedType) {\n-                /*\n-                 * Find erased generic types for the super class and replace\n-                 * with actual type arguments from the parameterized type\n-                 */\n-                Type[] superTypeArguments = getTypeArguments(genericSuperClass);\n-                List<Type> typeParameters =\n-                    Arrays.asList(((Class<?>) parameterizedType.getRawType()).getTypeParameters());\n-                int j = 0;\n-                for (int i = 0; i != superTypeArguments.length; i++) {\n-                    if (typeParameters.contains(superTypeArguments[i])) {\n-                        superTypeArguments[i] = parameterizedType.getActualTypeArguments()[j++];\n+    public static Type getSuperType(final Type type) {\n+        return SUPER_TYPE_MAP.computeIfAbsent(type, _type -> {\n+            if (type instanceof ParameterizedType) {\n+                ParameterizedType parameterizedType = (ParameterizedType) type;\n+                Type genericSuperClass = ((Class<?>) parameterizedType.getRawType()).getGenericSuperclass();\n+                if (genericSuperClass instanceof ParameterizedType) {\n+                    /*\n+                     * Find erased generic types for the super class and replace\n+                     * with actual type arguments from the parameterized type\n+                     */\n+                    final Type[] superTypeArguments = getTypeArguments(genericSuperClass);\n+                    final Type[] typeParameters =\n+                        ((GenericDeclaration) parameterizedType.getRawType()).getTypeParameters();\n+                    int k = 0;\n+                    outer:\n+                    for (int i = 0; i != superTypeArguments.length; i++) {\n+                        for (int j = 0; i < typeParameters.length; j++) {\n+                            if (typeParameters[j].equals(superTypeArguments[i])) {\n+                                superTypeArguments[i] = parameterizedType.getActualTypeArguments()[k++];\n+                                break outer;\n+                            }\n+                        }\n                     }\n+                    return new ParameterizedType() {\n+                        @Override\n+                        public Type[] getActualTypeArguments() {\n+                            return superTypeArguments;\n+                        }\n+\n+                        @Override\n+                        public Type getRawType() {\n+                            return ((ParameterizedType) genericSuperClass).getRawType();\n+                        }\n+\n+                        @Override\n+                        public Type getOwnerType() {\n+                            return null;\n+                        }\n+                    };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "184522452033a8fab48ef90748ad90032e5ffee4"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyNDI0Mw==", "bodyText": "Mind adding more Javadocs to this, having break labels isn't very common.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r452424243", "createdAt": "2020-07-09T18:54:34Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/TypeUtil.java", "diffHunk": "@@ -75,46 +79,52 @@ public static Type getTypeArgument(Type type) {\n      * @param type the input type\n      * @return the direct super type\n      */\n-    public static Type getSuperType(Type type) {\n-        if (type instanceof ParameterizedType) {\n-            ParameterizedType parameterizedType = (ParameterizedType) type;\n-            Type genericSuperClass = ((Class<?>) parameterizedType.getRawType()).getGenericSuperclass();\n-            if (genericSuperClass instanceof ParameterizedType) {\n-                /*\n-                 * Find erased generic types for the super class and replace\n-                 * with actual type arguments from the parameterized type\n-                 */\n-                Type[] superTypeArguments = getTypeArguments(genericSuperClass);\n-                List<Type> typeParameters =\n-                    Arrays.asList(((Class<?>) parameterizedType.getRawType()).getTypeParameters());\n-                int j = 0;\n-                for (int i = 0; i != superTypeArguments.length; i++) {\n-                    if (typeParameters.contains(superTypeArguments[i])) {\n-                        superTypeArguments[i] = parameterizedType.getActualTypeArguments()[j++];\n+    public static Type getSuperType(final Type type) {\n+        return SUPER_TYPE_MAP.computeIfAbsent(type, _type -> {\n+            if (type instanceof ParameterizedType) {\n+                ParameterizedType parameterizedType = (ParameterizedType) type;\n+                Type genericSuperClass = ((Class<?>) parameterizedType.getRawType()).getGenericSuperclass();\n+                if (genericSuperClass instanceof ParameterizedType) {\n+                    /*\n+                     * Find erased generic types for the super class and replace\n+                     * with actual type arguments from the parameterized type\n+                     */\n+                    final Type[] superTypeArguments = getTypeArguments(genericSuperClass);\n+                    final Type[] typeParameters =\n+                        ((GenericDeclaration) parameterizedType.getRawType()).getTypeParameters();\n+                    int k = 0;\n+                    outer:\n+                    for (int i = 0; i != superTypeArguments.length; i++) {\n+                        for (int j = 0; i < typeParameters.length; j++) {\n+                            if (typeParameters[j].equals(superTypeArguments[i])) {\n+                                superTypeArguments[i] = parameterizedType.getActualTypeArguments()[k++];\n+                                break outer;\n+                            }\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "184522452033a8fab48ef90748ad90032e5ffee4"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyNDY4Mg==", "bodyText": "We want to use WeakHashMap to evict from the cache once the Type key becomes null/garbage collected right?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r452424682", "createdAt": "2020-07-09T18:55:19Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/TypeUtil.java", "diffHunk": "@@ -3,16 +3,20 @@\n \n package com.azure.core.implementation;\n \n+import java.lang.reflect.GenericDeclaration;\n import java.lang.reflect.ParameterizedType;\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.List;\n+import java.util.Map;\n+import java.util.WeakHashMap;\n \n /**\n  * Utility type exposing methods to deal with {@link Type}.\n  */\n public final class TypeUtil {\n+    private static final Map<Type, Type> SUPER_TYPE_MAP = new WeakHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "184522452033a8fab48ef90748ad90032e5ffee4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyNTAxNw==", "bodyText": "Was this unused?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r452425017", "createdAt": "2020-07-09T18:55:56Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/UrlBuilder.java", "diffHunk": "@@ -3,18 +3,17 @@\n \n package com.azure.core.util;\n \n-import com.azure.core.util.logging.ClientLogger;\n-\n import java.net.MalformedURLException;\n import java.net.URL;\n+import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.Map;\n \n /**\n  * A builder class that is used to create URLs.\n  */\n public final class UrlBuilder {\n-    private final ClientLogger logger = new ClientLogger(UrlBuilder.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "184522452033a8fab48ef90748ad90032e5ffee4"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyNjQwOA==", "bodyText": "This is an API breaking change.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r452426408", "createdAt": "2020-07-09T18:58:41Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JacksonAdapter.java", "diffHunk": "@@ -153,8 +172,8 @@ public String serializeList(List<?> list, CollectionFormat format) {\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public <T> T deserialize(String value, final Type type, SerializerEncoding encoding) throws IOException {\n-        if (CoreUtils.isNullOrEmpty(value)) {\n+    public <T> T deserialize(byte[] value, final Type type, SerializerEncoding encoding) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "184522452033a8fab48ef90748ad90032e5ffee4"}, "originalPosition": 85}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42907b6a70a845a225b8e9d0fabae2aaa6a85a2c", "author": {"user": {"login": "JonathanGiles", "name": "Jonathan Giles"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/42907b6a70a845a225b8e9d0fabae2aaa6a85a2c", "committedDate": "2020-07-09T20:25:56Z", "message": "Add afterburner module to xml mapper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d1439238106d519dad163c629f3bfd1d244969e", "author": {"user": {"login": "JonathanGiles", "name": "Jonathan Giles"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4d1439238106d519dad163c629f3bfd1d244969e", "committedDate": "2020-07-09T21:32:37Z", "message": "Reuse same Jackson ObjectMappers for all swagger interface methods in a single RestProxy instance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec561dae0f5b20ede01ebe3d1e67fe03b3d0f41d", "author": {"user": {"login": "JonathanGiles", "name": "Jonathan Giles"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ec561dae0f5b20ede01ebe3d1e67fe03b3d0f41d", "committedDate": "2020-07-09T21:41:34Z", "message": "Improve code that enables object mapper reuse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3eceb7d1ae8a4f2708d35c521123f68f8893965f", "author": {"user": {"login": "JonathanGiles", "name": "Jonathan Giles"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3eceb7d1ae8a4f2708d35c521123f68f8893965f", "committedDate": "2020-07-10T00:29:02Z", "message": "Fix test and checkstyle issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c728a65dd74aff515a2c3a9db2a2d731ca4a06c", "author": {"user": {"login": "JonathanGiles", "name": "Jonathan Giles"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9c728a65dd74aff515a2c3a9db2a2d731ca4a06c", "committedDate": "2020-07-10T01:19:16Z", "message": "Remove unused jsonwrapper code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c35fa0d1bbe77372c9d5c3d0504ab2f5aa2c1de", "author": {"user": {"login": "srnagar", "name": "Srikanta"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1c35fa0d1bbe77372c9d5c3d0504ab2f5aa2c1de", "committedDate": "2020-07-10T02:02:58Z", "message": "Fix unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "305a0b26df0d3b8c63ad59ab04c6bcf8b25dcd89", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/305a0b26df0d3b8c63ad59ab04c6bcf8b25dcd89", "committedDate": "2020-07-10T02:14:10Z", "message": "Use HashMap instead of ConcurrentHashMap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b1e03e9d7af300eea5dbd26537ddae3174f3fb4", "author": {"user": {"login": "srnagar", "name": "Srikanta"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6b1e03e9d7af300eea5dbd26537ddae3174f3fb4", "committedDate": "2020-07-10T02:14:55Z", "message": "Remove references to jsonwrapper in module-info.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1756af53805552063f7bc1be1d5634da12fde29", "author": {"user": {"login": "JonathanGiles", "name": "Jonathan Giles"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c1756af53805552063f7bc1be1d5634da12fde29", "committedDate": "2020-07-10T04:26:18Z", "message": "Fixing spotbugs / checkstyle issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc35387b4d0d373c12f421bbb80de789dc04dfb0", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bc35387b4d0d373c12f421bbb80de789dc04dfb0", "committedDate": "2020-07-10T21:46:59Z", "message": "Merge branch 'master' into AzCore_UseHashMapForHttpHeaders"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d38ebd9341df3afb48f3d2880280dd277ab3fc10", "author": {"user": {"login": "JonathanGiles", "name": "Jonathan Giles"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d38ebd9341df3afb48f3d2880280dd277ab3fc10", "committedDate": "2020-07-12T20:44:17Z", "message": "Rename one newly introduced SerializerAdapter method to avoid incompatibilities."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a67affbe7aae8323b9d1cbb2f82fbc2493991505", "author": {"user": {"login": "JonathanGiles", "name": "Jonathan Giles"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a67affbe7aae8323b9d1cbb2f82fbc2493991505", "committedDate": "2020-07-12T21:05:48Z", "message": "More cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d707df5d3b4ef990d99c8eb5e653a9757dd4538", "author": {"user": {"login": "JonathanGiles", "name": "Jonathan Giles"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6d707df5d3b4ef990d99c8eb5e653a9757dd4538", "committedDate": "2020-07-12T23:08:08Z", "message": "Some code cleanups based on review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67df6073feb8229061578a008e31e8be20ef09ba", "author": {"user": {"login": "JonathanGiles", "name": "Jonathan Giles"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/67df6073feb8229061578a008e31e8be20ef09ba", "committedDate": "2020-07-12T23:36:05Z", "message": "Remove unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc7d8ba9df04fbe99b7a6894c6f038d34f3834b8", "author": {"user": {"login": "JonathanGiles", "name": "Jonathan Giles"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/dc7d8ba9df04fbe99b7a6894c6f038d34f3834b8", "committedDate": "2020-07-13T00:22:46Z", "message": "Removing an exception I added"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "420b0e5d63f21ece189dc7dc52d8b5d82add3f9b", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/420b0e5d63f21ece189dc7dc52d8b5d82add3f9b", "committedDate": "2020-07-13T21:07:07Z", "message": "Merge branch 'master' into AzCore_UseHashMapForHttpHeaders"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "633f5cfc8d9257675b34c1cced4619143bfc5b02", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/633f5cfc8d9257675b34c1cced4619143bfc5b02", "committedDate": "2020-07-13T22:40:23Z", "message": "Update code paths that were creating unnecessary container types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "518694bd63873f0df73899885ab63b981e952fc7", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/518694bd63873f0df73899885ab63b981e952fc7", "committedDate": "2020-07-13T22:42:32Z", "message": "Merge branch 'AzCore_UseHashMapForHttpHeaders' into core-perf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28719808bc7b4c6a823559937694e3be3a73eb4f", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/28719808bc7b4c6a823559937694e3be3a73eb4f", "committedDate": "2020-07-14T01:19:01Z", "message": "Merge setScheme and setHost into a single API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a659943e283d5fb0c54179a6092f45779e1d346a", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a659943e283d5fb0c54179a6092f45779e1d346a", "committedDate": "2020-07-14T23:01:46Z", "message": "Fixes for failing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae6182d3dc91650a64b44658fb82f230cad03f52", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ae6182d3dc91650a64b44658fb82f230cad03f52", "committedDate": "2020-07-15T03:46:45Z", "message": "Change interface defaults to fix ServiceBus test issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f17417bfb0f38989efd4d50dfb7d8af0d089ea63", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f17417bfb0f38989efd4d50dfb7d8af0d089ea63", "committedDate": "2020-07-15T18:43:26Z", "message": "Fix linting issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyODA0ODAw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#pullrequestreview-462804800", "createdAt": "2020-08-06T19:14:09Z", "commit": {"oid": "f17417bfb0f38989efd4d50dfb7d8af0d089ea63"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOToxNDoxMFrOG9A2AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOToxNDoxMFrOG9A2AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzMDE0NA==", "bodyText": "String.split(.) internally uses java regex which is CPU expensive.\nPlease ensure regex is not used:\nhttps://www.baeldung.com/java-string-performance#split", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r466630144", "createdAt": "2020-08-06T19:14:10Z", "author": {"login": "moderakh"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/rest/RestProxy.java", "diffHunk": "@@ -195,86 +198,86 @@ private Context startTracingSpan(Method method, Context context) {\n      * @throws IOException thrown if the body contents cannot be serialized\n      */\n     private HttpRequest createHttpRequest(SwaggerMethodParser methodParser, Object[] args) throws IOException {\n-        UrlBuilder urlBuilder;\n-\n         // Sometimes people pass in a full URL for the value of their PathParam annotated argument.\n         // This definitely happens in paging scenarios. In that case, just use the full URL and\n         // ignore the Host annotation.\n         final String path = methodParser.setPath(args);\n         final UrlBuilder pathUrlBuilder = UrlBuilder.parse(path);\n+\n+        final UrlBuilder urlBuilder;\n         if (pathUrlBuilder.getScheme() != null) {\n             urlBuilder = pathUrlBuilder;\n         } else {\n             urlBuilder = new UrlBuilder();\n \n-            final String scheme = methodParser.setScheme(args);\n-            urlBuilder.setScheme(scheme);\n-\n-            final String host = methodParser.setHost(args);\n-            urlBuilder.setHost(host);\n+            methodParser.setSchemeAndHost(args, urlBuilder);\n \n             // Set the path after host, concatenating the path\n             // segment in the host.\n-            if (path != null && !path.isEmpty() && !path.equals(\"/\")) {\n+            if (path != null && !path.isEmpty() && !\"/\".equals(path)) {\n                 String hostPath = urlBuilder.getPath();\n-                if (hostPath == null || hostPath.isEmpty() || hostPath.equals(\"/\") || path.contains(\"://\")) {\n+                if (hostPath == null || hostPath.isEmpty() || \"/\".equals(hostPath) || path.contains(\"://\")) {\n                     urlBuilder.setPath(path);\n                 } else {\n                     urlBuilder.setPath(hostPath + \"/\" + path);\n                 }\n             }\n         }\n \n-        for (final EncodedParameter queryParameter : methodParser.setEncodedQueryParameters(args)) {\n-            urlBuilder.setQueryParameter(queryParameter.getName(), queryParameter.getEncodedValue());\n-        }\n+        methodParser.setEncodedQueryParameters(args, urlBuilder);\n \n         final URL url = urlBuilder.toUrl();\n         final HttpRequest request = configRequest(new HttpRequest(methodParser.getHttpMethod(), url),\n             methodParser, args);\n \n         // Headers from Swagger method arguments always take precedence over inferred headers from body types\n-        for (final HttpHeader header : methodParser.setHeaders(args)) {\n-            request.setHeader(header.getName(), header.getValue());\n-        }\n+        HttpHeaders httpHeaders = request.getHeaders();\n+        methodParser.setHeaders(args, httpHeaders);\n \n         return request;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    private HttpRequest configRequest(HttpRequest request, SwaggerMethodParser methodParser, Object[] args)\n-        throws IOException {\n+    private HttpRequest configRequest(final HttpRequest request,\n+                                      final SwaggerMethodParser methodParser,\n+                                      final Object[] args) throws IOException {\n         final Object bodyContentObject = methodParser.setBody(args);\n         if (bodyContentObject == null) {\n             request.getHeaders().put(\"Content-Length\", \"0\");\n         } else {\n+            // We read the content type from the @BodyParam annotation\n             String contentType = methodParser.getBodyContentType();\n+\n+            // If this is null or empty, the service interface definition is incomplete and should\n+            // be fixed to ensure correct definitions are applied\n             if (contentType == null || contentType.isEmpty()) {\n                 if (bodyContentObject instanceof byte[] || bodyContentObject instanceof String) {\n                     contentType = ContentType.APPLICATION_OCTET_STREAM;\n                 } else {\n                     contentType = ContentType.APPLICATION_JSON;\n                 }\n+//                throw logger.logExceptionAsError(new IllegalStateException(\n+//                    \"The method \" + methodParser.getFullyQualifiedMethodName() + \" does does not have its content \"\n+//                        + \"type correctly specified in its service interface\"));\n             }\n \n             request.getHeaders().put(\"Content-Type\", contentType);\n \n+            // TODO(jogiles) this feels hacky\n             boolean isJson = false;\n             final String[] contentTypeParts = contentType.split(\";\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f17417bfb0f38989efd4d50dfb7d8af0d089ea63"}, "originalPosition": 134}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2300f7e0a3cb48acd6851ceb21f050f45d7f693", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a2300f7e0a3cb48acd6851ceb21f050f45d7f693", "committedDate": "2020-08-11T18:27:23Z", "message": "Merge in upstream and change APIs from byte[] to InputStream/OutputStream"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NDcxOTkw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#pullrequestreview-465471990", "createdAt": "2020-08-11T22:29:28Z", "commit": {"oid": "a2300f7e0a3cb48acd6851ceb21f050f45d7f693"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMjoyOToyOVrOG_LaAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMjoyOToyOVrOG_LaAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkwMDM1NA==", "bodyText": "I thought we decided to not use afterburner for now because we didn't see any perf wins. We should remove this now, correct?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r468900354", "createdAt": "2020-08-11T22:29:29Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/pom.xml", "diffHunk": "@@ -65,6 +65,11 @@\n       <artifactId>jackson-dataformat-xml</artifactId>\n       <version>2.10.1</version> <!-- {x-version-update;com.fasterxml.jackson.dataformat:jackson-dataformat-xml;external_dependency} -->\n     </dependency>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.module</groupId>\n+      <artifactId>jackson-module-afterburner</artifactId>\n+      <version>2.10.1</version> <!-- {x-version-update;com.fasterxml.jackson.module:jackson-module-afterburner;external_dependency} -->\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2300f7e0a3cb48acd6851ceb21f050f45d7f693"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d8e4e8c165998c175b8b3bf301bf590a4b4aefb", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4d8e4e8c165998c175b8b3bf301bf590a4b4aefb", "committedDate": "2020-08-11T22:39:56Z", "message": "Merge branch 'master' into core-perf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "540b876ff3167f74e6d8b38ea016c14e2ec2d957", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/540b876ff3167f74e6d8b38ea016c14e2ec2d957", "committedDate": "2020-08-12T00:29:08Z", "message": "Remove AfterBurner dependency from Azure Core"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NTI3MTQ4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#pullrequestreview-465527148", "createdAt": "2020-08-12T01:11:42Z", "commit": {"oid": "540b876ff3167f74e6d8b38ea016c14e2ec2d957"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4d3f94f279bc72df68e4cc864de009a861c65ab", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a4d3f94f279bc72df68e4cc864de009a861c65ab", "committedDate": "2020-08-12T17:40:16Z", "message": "Fixed Tables tests by updating its SerializerAdapter implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab745b7073757040bf78ee041229d9513e4f6d5d", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ab745b7073757040bf78ee041229d9513e4f6d5d", "committedDate": "2020-08-12T17:46:10Z", "message": "Add unreleased version tag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cd3055377df45c4348e3bee21ad3f80d46144f3", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0cd3055377df45c4348e3bee21ad3f80d46144f3", "committedDate": "2020-08-19T00:23:29Z", "message": "Update usage of String based serialization to OutputStream based, added new internal type of AccessibleByteArrayOutputStream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "756a916e6fc28ceed96663c264c2e8e31d512ae1", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/756a916e6fc28ceed96663c264c2e8e31d512ae1", "committedDate": "2020-08-19T00:26:50Z", "message": "Add missing ;"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a89e83ed8033a7cd40e7e9c9660ceb15b680a998", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a89e83ed8033a7cd40e7e9c9660ceb15b680a998", "committedDate": "2020-08-19T00:37:40Z", "message": "Update serializeRaw to use OutputStream serializer method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "daed45725d9cecc1109fce6e9b1cb4a669adf523", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/daed45725d9cecc1109fce6e9b1cb4a669adf523", "committedDate": "2020-08-19T01:24:23Z", "message": "Fix possible incorrect sizes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c0d02617e503e8f9b113b61bee8e881509603e2", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8c0d02617e503e8f9b113b61bee8e881509603e2", "committedDate": "2020-08-19T19:59:33Z", "message": "Fix Form Recognizer tests that were failing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4764f615b1fc15eb19b69f21aa081a609b6fab67", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4764f615b1fc15eb19b69f21aa081a609b6fab67", "committedDate": "2020-08-19T20:00:34Z", "message": "Revert Form Recognizer version changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5614ae5dc9232adef905bbfb51caadcd4a11ef4e", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5614ae5dc9232adef905bbfb51caadcd4a11ef4e", "committedDate": "2020-08-19T23:20:07Z", "message": "Merge branch 'master' into core-perf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "207e7c5a6dec40ae059b06382b184d7852b9c9b9", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/207e7c5a6dec40ae059b06382b184d7852b9c9b9", "committedDate": "2020-08-19T23:50:49Z", "message": "Fix CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abefdd5b4aade41de35956686a733c860b6ab96f", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/abefdd5b4aade41de35956686a733c860b6ab96f", "committedDate": "2020-08-20T00:00:44Z", "message": "Add accidentally deleted version tag"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxODA0MDgz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#pullrequestreview-471804083", "createdAt": "2020-08-20T16:46:19Z", "commit": {"oid": "abefdd5b4aade41de35956686a733c860b6ab96f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NjExOTE5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#pullrequestreview-484611919", "createdAt": "2020-09-09T02:04:34Z", "commit": {"oid": "abefdd5b4aade41de35956686a733c860b6ab96f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMjowNDozNFrOHOz_WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMjowNDozNFrOHOz_WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI5MzkxMw==", "bodyText": "There might be a potential concurrency issue here on the static Map.\nWe had a possible one on this line in UrlBuilder.parse (under Java 8)\nPARSED_URLS.put(url, ub);\n\nhttps://user-images.githubusercontent.com/15213781/92462976-c574af80-f1fd-11ea-8f19-33e0919913a5.png", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r485293913", "createdAt": "2020-09-09T02:04:34Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/UrlBuilder.java", "diffHunk": "@@ -3,18 +3,17 @@\n \n package com.azure.core.util;\n \n-import com.azure.core.util.logging.ClientLogger;\n-\n import java.net.MalformedURLException;\n import java.net.URL;\n+import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.Map;\n \n /**\n  * A builder class that is used to create URLs.\n  */\n public final class UrlBuilder {\n-    private final ClientLogger logger = new ClientLogger(UrlBuilder.class);\n+    private static final Map<String, UrlBuilder> PARSED_URLS = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abefdd5b4aade41de35956686a733c860b6ab96f"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2736, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}