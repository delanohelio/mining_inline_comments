{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNzU3MDI5", "number": 7500, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNjo0NDo1N1rODb-_mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNDozMzoyOFrODd6Pfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjcwMjMyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNjo0NDo1N1rOFjyCpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMDowNDowMlrOFlhsRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2NDM1Nw==", "bodyText": "do we have a specific format for request timeline? is it going to be json?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r373064357", "createdAt": "2020-01-30T16:44:57Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java", "diffHunk": "@@ -274,6 +280,17 @@ private void printSystemInformation(StringBuilder stringBuilder) {\n         }\n     }\n \n+    private void printTransportRequestTimeline(StringBuilder stringBuilder) {\n+        if (transportRequestTimeline != null) {\n+            stringBuilder.append(\"Transport request timeline -------\").append(System.lineSeparator());\n+            Iterator<RequestTimeline.Event> iterator = transportRequestTimeline.iterator();\n+            while (iterator.hasNext()) {\n+                RequestTimeline.Event event = iterator.next();\n+                stringBuilder.append(\"  eventName = \" + event.getName() + \",  startTime = \" + event.getStartTime() + \",  durationInMicrosec = \" + event.getDuration().toNanos()/1000L).append(System.lineSeparator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "368756cb2ffdebfeb2ae5986fd6802b269fb94cf"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg5MzYzNw==", "bodyText": "After the latest merge , it will be json , sample is in the PR description for both rntbd and http", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r374893637", "createdAt": "2020-02-04T20:04:02Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java", "diffHunk": "@@ -274,6 +280,17 @@ private void printSystemInformation(StringBuilder stringBuilder) {\n         }\n     }\n \n+    private void printTransportRequestTimeline(StringBuilder stringBuilder) {\n+        if (transportRequestTimeline != null) {\n+            stringBuilder.append(\"Transport request timeline -------\").append(System.lineSeparator());\n+            Iterator<RequestTimeline.Event> iterator = transportRequestTimeline.iterator();\n+            while (iterator.hasNext()) {\n+                RequestTimeline.Event event = iterator.next();\n+                stringBuilder.append(\"  eventName = \" + event.getName() + \",  startTime = \" + event.getStartTime() + \",  durationInMicrosec = \" + event.getDuration().toNanos()/1000L).append(System.lineSeparator());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2NDM1Nw=="}, "originalCommit": {"oid": "368756cb2ffdebfeb2ae5986fd6802b269fb94cf"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjcwNjU5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RequestTimeline.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNjo0NjowNVrOFjyFbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMDowNjoxOVrOFlhwTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2NTA2OA==", "bodyText": "I wonder why we have mixture of Duration and Long for representing time.\nIs there a specific reason we are not using the same type?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r373065068", "createdAt": "2020-01-30T16:46:05Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RequestTimeline.java", "diffHunk": "@@ -148,25 +149,33 @@ public String toString() {\n         return RntbdObjectMapper.toString(this);\n     }\n \n-    @JsonPropertyOrder({ \"name\", \"time\", \"duration\" })\n+    @JsonPropertyOrder({ \"name\", \"startTime\", \"durationInMicroSec\" })\n     public static final class Event {\n \n-        @JsonSerialize(using = ToStringSerializer.class)\n+        @JsonIgnore\n         private final Duration duration;\n \n+        @JsonSerialize(using = ToStringSerializer.class)\n+        private final long durationInMicroSec;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "368756cb2ffdebfeb2ae5986fd6802b269fb94cf"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg5NDY3MQ==", "bodyText": "Reason is  these numbers will be so small,  i want to show it in micro sec , and didn't want to introduce new serializer class for this one variable , however i am good with anything , please let me know.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r374894671", "createdAt": "2020-02-04T20:06:19Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RequestTimeline.java", "diffHunk": "@@ -148,25 +149,33 @@ public String toString() {\n         return RntbdObjectMapper.toString(this);\n     }\n \n-    @JsonPropertyOrder({ \"name\", \"time\", \"duration\" })\n+    @JsonPropertyOrder({ \"name\", \"startTime\", \"durationInMicroSec\" })\n     public static final class Event {\n \n-        @JsonSerialize(using = ToStringSerializer.class)\n+        @JsonIgnore\n         private final Duration duration;\n \n+        @JsonSerialize(using = ToStringSerializer.class)\n+        private final long durationInMicroSec;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2NTA2OA=="}, "originalCommit": {"oid": "368756cb2ffdebfeb2ae5986fd6802b269fb94cf"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjcxNjUwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNjo0ODo1NVrOFjyL1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjo0NjozOFrOFmJ0pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2NjcxMQ==", "bodyText": "shouldn't we capture the timeline inside the response instead of the request?\nWhy are capturing the timeline in the request not the response?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r373066711", "createdAt": "2020-01-30T16:48:55Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java", "diffHunk": "@@ -271,6 +276,14 @@ private String ensureSlashPrefixed(String path) {\n             return contentObservable\n                        .flatMap(content -> {\n                            try {\n+                               //Adding transport client request timeline to diagnostics\n+                               ReactorNettyRequestRecord reactorNettyRequestRecord = httpResponseTuple.getRight();\n+                               if (reactorNettyRequestRecord != null) {\n+                                   reactorNettyRequestRecord.setTimeCompleted(OffsetDateTime.now());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "368756cb2ffdebfeb2ae5986fd6802b269fb94cf"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NTc3NA==", "bodyText": "this is just a question, please provide the reason why this should go to request not response", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r373885774", "createdAt": "2020-02-02T23:45:21Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java", "diffHunk": "@@ -271,6 +276,14 @@ private String ensureSlashPrefixed(String path) {\n             return contentObservable\n                        .flatMap(content -> {\n                            try {\n+                               //Adding transport client request timeline to diagnostics\n+                               ReactorNettyRequestRecord reactorNettyRequestRecord = httpResponseTuple.getRight();\n+                               if (reactorNettyRequestRecord != null) {\n+                                   reactorNettyRequestRecord.setTimeCompleted(OffsetDateTime.now());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2NjcxMQ=="}, "originalCommit": {"oid": "368756cb2ffdebfeb2ae5986fd6802b269fb94cf"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg5NTI4Mg==", "bodyText": "All the diagnostic we capture in request , as it flows to different pipeline, retries , capturing different data , and once we have the response then we transfer the diagnostic from request to response.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r374895282", "createdAt": "2020-02-04T20:07:47Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java", "diffHunk": "@@ -271,6 +276,14 @@ private String ensureSlashPrefixed(String path) {\n             return contentObservable\n                        .flatMap(content -> {\n                            try {\n+                               //Adding transport client request timeline to diagnostics\n+                               ReactorNettyRequestRecord reactorNettyRequestRecord = httpResponseTuple.getRight();\n+                               if (reactorNettyRequestRecord != null) {\n+                                   reactorNettyRequestRecord.setTimeCompleted(OffsetDateTime.now());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2NjcxMQ=="}, "originalCommit": {"oid": "368756cb2ffdebfeb2ae5986fd6802b269fb94cf"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU1MTE0Mw==", "bodyText": "Moved ReactorNettyRequestRecord into HttpRequest", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r375551143", "createdAt": "2020-02-05T22:46:38Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java", "diffHunk": "@@ -271,6 +276,14 @@ private String ensureSlashPrefixed(String path) {\n             return contentObservable\n                        .flatMap(content -> {\n                            try {\n+                               //Adding transport client request timeline to diagnostics\n+                               ReactorNettyRequestRecord reactorNettyRequestRecord = httpResponseTuple.getRight();\n+                               if (reactorNettyRequestRecord != null) {\n+                                   reactorNettyRequestRecord.setTimeCompleted(OffsetDateTime.now());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2NjcxMQ=="}, "originalCommit": {"oid": "368756cb2ffdebfeb2ae5986fd6802b269fb94cf"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTgyNzAyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzo1ODozNVrOFmBgzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjo0NzozMVrOFmJ2Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxNDk5MA==", "bodyText": "this will be somewhat a cascading change.\ndue to changing Mono< HttpResponse> to Mono< ReactorNettyRequestRecord>\nHow about making ReactorNettyRequestRecord an entry of HttpResponse? Thought?\nso the method return signature will still be Mono but this HttpResponse will be subclass of HttpResponse which will have ReactorNettyRequestRecord\nthoughts?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r375414990", "createdAt": "2020-02-05T17:58:35Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java", "diffHunk": "@@ -106,6 +109,34 @@ private void configureChannelPipelineHandlers() {\n                 .single();\n     }\n \n+    @Override\n+    public Mono<Pair<HttpResponse, ReactorNettyRequestRecord>> send(HttpRequest request, ReactorNettyRequestRecord reactorNettyRequestRecord) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e33efb174588942202422423c5d92ec6484cd6bc"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU1MTQ5NQ==", "bodyText": "Moved ReactorNettyRequestRecord into HttpRequest , and HttpResponse have the reference of  ReactorNettyRequestRecord  via HttpRequest", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r375551495", "createdAt": "2020-02-05T22:47:31Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java", "diffHunk": "@@ -106,6 +109,34 @@ private void configureChannelPipelineHandlers() {\n                 .single();\n     }\n \n+    @Override\n+    public Mono<Pair<HttpResponse, ReactorNettyRequestRecord>> send(HttpRequest request, ReactorNettyRequestRecord reactorNettyRequestRecord) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxNDk5MA=="}, "originalCommit": {"oid": "e33efb174588942202422423c5d92ec6484cd6bc"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjY5NTQyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestRecord.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMjowMToxOVrOFmwPCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMDoxNjozOFrOFnJEJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE4MDQ5MQ==", "bodyText": "It is the duration of the sent event that represents the transit time.\nThis has me thinking that giving meaningful names to duration fields would be useful to us and end users in two ways:\n\nCommunicating the meaning of duration\nLabeling charts and graphs with event time on the x axis and duration on the y axis.\n\nExample:\nThe sent event follows message encoding and occurs once it is confirmed that the message is on the wire. The duration of the sent event is the time that it takes for a round-trip to the server to complete and the next event occurs: received. The time between these two events--sent and received-- is the transitTime.\nSomething like this JSON is what we should produce--perhaps word-smithed and simplified for brevity:\n{\n  \"event\": {\n    \"name\": \"sent\", \n    \"time\": \"<time-stamp>\"\n  }, \n  \"duration\": { \n    \"name\": \"transitTime\", \n    \"microseconds\": <microseconds> \n  }\n}\n\nI've discussed this with Naveen and Mo. We agreed that this work should be done on another PR. I've logged this issue to track the work which I will assign to myself for now: #8034", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r376180491", "createdAt": "2020-02-07T02:01:19Z", "author": {"login": "David-Noble-at-work"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestRecord.java", "diffHunk": "@@ -217,7 +217,7 @@ public RequestTimeline takeTimelineSnapshot() {\n                 timeQueued, timePipelined == null ? timeCompletedOrNow : timePipelined),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a09e096a084b6eac07d4441083446a40c0c51d1b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU4NzMwMQ==", "bodyText": "Thanks David", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r376587301", "createdAt": "2020-02-07T20:16:38Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestRecord.java", "diffHunk": "@@ -217,7 +217,7 @@ public RequestTimeline takeTimelineSnapshot() {\n                 timeQueued, timePipelined == null ? timeCompletedOrNow : timePipelined),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE4MDQ5MQ=="}, "originalCommit": {"oid": "a09e096a084b6eac07d4441083446a40c0c51d1b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjg5MzcwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNDozMjowOVrOFmyDuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMDoxNjo0NlrOFnJEWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxMDM2Mw==", "bodyText": "One argument per line.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r376210363", "createdAt": "2020-02-07T04:32:09Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java", "diffHunk": "@@ -418,6 +413,10 @@ public static CosmosResponseDiagnostics createCosmosResponseDiagnostics() {\n         return new CosmosResponseDiagnostics();\n     }\n \n+    public static void setTransportClientRequestTimelineOnDiagnostics(CosmosResponseDiagnostics cosmosResponseDiagnostics, RequestTimeline requestTimeline) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a09e096a084b6eac07d4441083446a40c0c51d1b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU4NzM1Mg==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r376587352", "createdAt": "2020-02-07T20:16:46Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java", "diffHunk": "@@ -418,6 +413,10 @@ public static CosmosResponseDiagnostics createCosmosResponseDiagnostics() {\n         return new CosmosResponseDiagnostics();\n     }\n \n+    public static void setTransportClientRequestTimelineOnDiagnostics(CosmosResponseDiagnostics cosmosResponseDiagnostics, RequestTimeline requestTimeline) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxMDM2Mw=="}, "originalCommit": {"oid": "a09e096a084b6eac07d4441083446a40c0c51d1b"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjg5NTM0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNDozMzoyOFrOFmyEmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMDoyMDoyM1rOFnJJ-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxMDU4Nw==", "bodyText": "What's the client stats context/scope?\nIn-case the request is retried will it override existing timeline?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r376210587", "createdAt": "2020-02-07T04:33:28Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java", "diffHunk": "@@ -418,6 +413,10 @@ public static CosmosResponseDiagnostics createCosmosResponseDiagnostics() {\n         return new CosmosResponseDiagnostics();\n     }\n \n+    public static void setTransportClientRequestTimelineOnDiagnostics(CosmosResponseDiagnostics cosmosResponseDiagnostics, RequestTimeline requestTimeline) {\n+        cosmosResponseDiagnostics.clientSideRequestStatistics().setTransportClientRequestTimeline(requestTimeline);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a09e096a084b6eac07d4441083446a40c0c51d1b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwMzMxNg==", "bodyText": "It will be the transportclient stats of successful response", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r376503316", "createdAt": "2020-02-07T17:05:42Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java", "diffHunk": "@@ -418,6 +413,10 @@ public static CosmosResponseDiagnostics createCosmosResponseDiagnostics() {\n         return new CosmosResponseDiagnostics();\n     }\n \n+    public static void setTransportClientRequestTimelineOnDiagnostics(CosmosResponseDiagnostics cosmosResponseDiagnostics, RequestTimeline requestTimeline) {\n+        cosmosResponseDiagnostics.clientSideRequestStatistics().setTransportClientRequestTimeline(requestTimeline);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxMDU4Nw=="}, "originalCommit": {"oid": "a09e096a084b6eac07d4441083446a40c0c51d1b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU4ODc5NQ==", "bodyText": "Handled the scenario where we create multiple sub requests for single  request in case of consistency check on other replica. Now transportRequestTimeline is moved from parent clientSideRequestStatistics to StoreResult", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r376588795", "createdAt": "2020-02-07T20:20:23Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java", "diffHunk": "@@ -418,6 +413,10 @@ public static CosmosResponseDiagnostics createCosmosResponseDiagnostics() {\n         return new CosmosResponseDiagnostics();\n     }\n \n+    public static void setTransportClientRequestTimelineOnDiagnostics(CosmosResponseDiagnostics cosmosResponseDiagnostics, RequestTimeline requestTimeline) {\n+        cosmosResponseDiagnostics.clientSideRequestStatistics().setTransportClientRequestTimeline(requestTimeline);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxMDU4Nw=="}, "originalCommit": {"oid": "a09e096a084b6eac07d4441083446a40c0c51d1b"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 430, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}