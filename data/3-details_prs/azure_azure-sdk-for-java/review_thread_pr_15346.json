{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4OTYyMjc2", "number": 15346, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMjoyNDoxN1rOEkvxEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxOTozOToyMFrOElGARQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTY2ODAzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/jsonpatch/JsonPatchDocument.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMjoyNDoxN1rOHT3jWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMjoyNDoxN1rOHT3jWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU5NTE2MA==", "bodyText": "Need to look into using Jackson to generate this String as we may need JSON escaping.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15346#discussion_r490595160", "createdAt": "2020-09-17T22:24:17Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/jsonpatch/JsonPatchDocument.java", "diffHunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.jsonpatch;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Represents a JSON Patch document.\n+ */\n+public class JsonPatchDocument {\n+    private final List<JsonPatchOperation> operations;\n+\n+    /**\n+     * Creates a new JSON Patch document.\n+     */\n+    public JsonPatchDocument() {\n+        this.operations = new ArrayList<>();\n+    }\n+\n+    /**\n+     * Appends an \"add\" operation to this JSON Patch document.\n+     *\n+     * @param path The path to apply the addition.\n+     * @param rawJsonValue The raw JSON value to add to the path.\n+     * @return The updated JsonPatchDocument object.\n+     */\n+    public JsonPatchDocument appendAdd(String path, String rawJsonValue) {\n+        operations.add(new JsonPatchOperation(JsonPatchOperationKind.ADD, path, null, rawJsonValue));\n+        return this;\n+    }\n+\n+    /**\n+     * Appends a \"replace\" operation to this JSON Patch document.\n+     *\n+     * @param path The path to replace.\n+     * @param rawJsonValue The raw JSON value to use as the replacement.\n+     * @return The updated JsonPatchDocument object.\n+     */\n+    public JsonPatchDocument appendReplace(String path, String rawJsonValue) {\n+        operations.add(new JsonPatchOperation(JsonPatchOperationKind.REPLACE, path, null, rawJsonValue));\n+        return this;\n+    }\n+\n+    /**\n+     * Appends a \"copy\" operation to this JSON Patch document.\n+     *\n+     * @param from The path to copy from.\n+     * @param path The path to copy to.\n+     * @return The updated JsonPatchDocument object.\n+     */\n+    public JsonPatchDocument appendCopy(String from, String path) {\n+        operations.add(new JsonPatchOperation(JsonPatchOperationKind.COPY, path, from, null));\n+        return this;\n+    }\n+\n+    /**\n+     * Appends a \"move\" operation to this JSON Patch document.\n+     *\n+     * @param from The path to move from.\n+     * @param path The path to move to.\n+     * @return The updated JsonPatchDocument object.\n+     */\n+    public JsonPatchDocument appendMove(String from, String path) {\n+        operations.add(new JsonPatchOperation(JsonPatchOperationKind.MOVE, path, from, null));\n+        return this;\n+    }\n+\n+    /**\n+     * Appends a \"remove\" operation to this JSON Patch document.\n+     *\n+     * @param path The path to remove.\n+     * @return The updated JsonPatchDocument object.\n+     */\n+    public JsonPatchDocument appendRemove(String path) {\n+        operations.add(new JsonPatchOperation(JsonPatchOperationKind.REMOVE, path, null, null));\n+        return this;\n+    }\n+\n+    /**\n+     * Appends a \"test\" operation to this JSON Patch document.\n+     *\n+     * @param path The path to test.\n+     * @param rawJsonValue The raw JSON value to test against.\n+     * @return The updated JsonPatchDocument object.\n+     */\n+    public JsonPatchDocument appendTest(String path, String rawJsonValue) {\n+        operations.add(new JsonPatchOperation(JsonPatchOperationKind.TEST, path, null, rawJsonValue));\n+        return this;\n+    }\n+\n+    /**\n+     * Gets a formatted JSON string representation of this JSON Patch document.\n+     *\n+     * @return The formatted JSON String representing this JSON Patch docuemnt.\n+     */\n+    @Override\n+    public String toString() {\n+        StringBuilder document = new StringBuilder().append(\"[\");\n+\n+        for (JsonPatchOperation operation : operations) {\n+            writeOperation(document, operation);\n+        }\n+\n+        return document.append(\"]\").toString();\n+    }\n+\n+    private static void writeOperation(StringBuilder document, JsonPatchOperation operation) {\n+        document.append(\"{\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64ddab39588b1fa9fb2e1f720f17ff635184c941"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTc1NTU4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/jsonpatch/JsonPatchDocument.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzowMToxNlrOHT4WQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzo0MDoyNVrOHT5ERw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYwODE5Mg==", "bodyText": "Can we add some tests and samples to show how this can be used?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15346#discussion_r490608192", "createdAt": "2020-09-17T23:01:16Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/jsonpatch/JsonPatchDocument.java", "diffHunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.jsonpatch;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Represents a JSON Patch document.\n+ */\n+public class JsonPatchDocument {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31e77b9534752c9881322a55fe87b132d3b45583"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYxOTk3NQ==", "bodyText": "Will add tests and samples in a subsequent commit.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15346#discussion_r490619975", "createdAt": "2020-09-17T23:40:25Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/jsonpatch/JsonPatchDocument.java", "diffHunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.jsonpatch;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Represents a JSON Patch document.\n+ */\n+public class JsonPatchDocument {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYwODE5Mg=="}, "originalCommit": {"oid": "31e77b9534752c9881322a55fe87b132d3b45583"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzMwNjIzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/jsonpatch/JsonPatchDocument.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxOTozNzoyM1rOHUZn4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMTowNTowMFrOHUb35A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MzM3Nw==", "bodyText": "Missing a closing double-quote here.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * See <a href=\"https://tools.ietf.org/html/rfc6902#section-4.5>JSON Patch copy</a> for more information.\n          \n          \n            \n                 * See <a href=\"https://tools.ietf.org/html/rfc6902#section-4.5\">JSON Patch copy</a> for more information.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15346#discussion_r491153377", "createdAt": "2020-09-18T19:37:23Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/jsonpatch/JsonPatchDocument.java", "diffHunk": "@@ -0,0 +1,210 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.jsonpatch;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.JacksonAdapter;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a JSON Patch document.\n+ */\n+public class JsonPatchDocument {\n+    private static final ObjectMapper MAPPER = ((JacksonAdapter) JacksonAdapter.createDefaultSerializerAdapter())\n+        .serializer();\n+\n+    private final ClientLogger logger = new ClientLogger(JsonPatchDocument.class);\n+\n+    private final List<JsonPatchOperation> operations;\n+\n+    /**\n+     * Creates a new JSON Patch document.\n+     */\n+    public JsonPatchDocument() {\n+        this.operations = new ArrayList<>();\n+    }\n+\n+    /**\n+     * Appends an \"add\" operation to this JSON Patch document.\n+     * <p>\n+     * If the {@code path} doesn't exist a new member is added to the object. If the {@code path} does exist the\n+     * previous value is replaced. If the {@code path} specifies an array index the value is inserted at the specified.\n+     * <p>\n+     * See <a href=\"https://tools.ietf.org/html/rfc6902#section-4.1\">JSON Patch Add</a> for more information.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.core.experimental.jsonpatch.JsonPatchDocument.appendAdd#String-String}\n+     *\n+     * @param path The path to apply the addition.\n+     * @param rawJsonValue The raw JSON value to add to the path.\n+     * @return The updated JsonPatchDocument object.\n+     * @throws NullPointerException If {@code path} or {@code rawJsonValue} is null.\n+     */\n+    public JsonPatchDocument appendAdd(String path, String rawJsonValue) {\n+        operations.add(new JsonPatchOperation(JsonPatchOperationKind.ADD,\n+            Objects.requireNonNull(path, \"'path' cannot be null.\"), null,\n+            Objects.requireNonNull(rawJsonValue, \"'rawJsonValue' cannot be null.\")));\n+        return this;\n+    }\n+\n+    /**\n+     * Appends a \"replace\" operation to this JSON Patch document.\n+     * <p>\n+     * See <a href=\"https://tools.ietf.org/html/rfc6902#section-4.3\">JSON Patch replace</a> for more information.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.core.experimental.jsonpatch.JsonPatchDocument.appendReplace#String-String}\n+     *\n+     * @param path The path to replace.\n+     * @param rawJsonValue The raw JSON value to use as the replacement.\n+     * @return The updated JsonPatchDocument object.\n+     * @throws NullPointerException If {@code path} or {@code rawJsonValue} is null.\n+     */\n+    public JsonPatchDocument appendReplace(String path, String rawJsonValue) {\n+        operations.add(new JsonPatchOperation(JsonPatchOperationKind.REPLACE,\n+            Objects.requireNonNull(path, \"'path' cannot be null.\"), null,\n+            Objects.requireNonNull(rawJsonValue, \"'rawJsonValue' cannot be null.\")));\n+        return this;\n+    }\n+\n+    /**\n+     * Appends a \"copy\" operation to this JSON Patch document.\n+     * <p>\n+     * See <a href=\"https://tools.ietf.org/html/rfc6902#section-4.5>JSON Patch copy</a> for more information.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4ce82ecc44922ce66080950260ac9e0c3593f7a"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE5MDI0NA==", "bodyText": "Fix in the last commit", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15346#discussion_r491190244", "createdAt": "2020-09-18T21:05:00Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/jsonpatch/JsonPatchDocument.java", "diffHunk": "@@ -0,0 +1,210 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.jsonpatch;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.JacksonAdapter;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a JSON Patch document.\n+ */\n+public class JsonPatchDocument {\n+    private static final ObjectMapper MAPPER = ((JacksonAdapter) JacksonAdapter.createDefaultSerializerAdapter())\n+        .serializer();\n+\n+    private final ClientLogger logger = new ClientLogger(JsonPatchDocument.class);\n+\n+    private final List<JsonPatchOperation> operations;\n+\n+    /**\n+     * Creates a new JSON Patch document.\n+     */\n+    public JsonPatchDocument() {\n+        this.operations = new ArrayList<>();\n+    }\n+\n+    /**\n+     * Appends an \"add\" operation to this JSON Patch document.\n+     * <p>\n+     * If the {@code path} doesn't exist a new member is added to the object. If the {@code path} does exist the\n+     * previous value is replaced. If the {@code path} specifies an array index the value is inserted at the specified.\n+     * <p>\n+     * See <a href=\"https://tools.ietf.org/html/rfc6902#section-4.1\">JSON Patch Add</a> for more information.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.core.experimental.jsonpatch.JsonPatchDocument.appendAdd#String-String}\n+     *\n+     * @param path The path to apply the addition.\n+     * @param rawJsonValue The raw JSON value to add to the path.\n+     * @return The updated JsonPatchDocument object.\n+     * @throws NullPointerException If {@code path} or {@code rawJsonValue} is null.\n+     */\n+    public JsonPatchDocument appendAdd(String path, String rawJsonValue) {\n+        operations.add(new JsonPatchOperation(JsonPatchOperationKind.ADD,\n+            Objects.requireNonNull(path, \"'path' cannot be null.\"), null,\n+            Objects.requireNonNull(rawJsonValue, \"'rawJsonValue' cannot be null.\")));\n+        return this;\n+    }\n+\n+    /**\n+     * Appends a \"replace\" operation to this JSON Patch document.\n+     * <p>\n+     * See <a href=\"https://tools.ietf.org/html/rfc6902#section-4.3\">JSON Patch replace</a> for more information.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.core.experimental.jsonpatch.JsonPatchDocument.appendReplace#String-String}\n+     *\n+     * @param path The path to replace.\n+     * @param rawJsonValue The raw JSON value to use as the replacement.\n+     * @return The updated JsonPatchDocument object.\n+     * @throws NullPointerException If {@code path} or {@code rawJsonValue} is null.\n+     */\n+    public JsonPatchDocument appendReplace(String path, String rawJsonValue) {\n+        operations.add(new JsonPatchOperation(JsonPatchOperationKind.REPLACE,\n+            Objects.requireNonNull(path, \"'path' cannot be null.\"), null,\n+            Objects.requireNonNull(rawJsonValue, \"'rawJsonValue' cannot be null.\")));\n+        return this;\n+    }\n+\n+    /**\n+     * Appends a \"copy\" operation to this JSON Patch document.\n+     * <p>\n+     * See <a href=\"https://tools.ietf.org/html/rfc6902#section-4.5>JSON Patch copy</a> for more information.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MzM3Nw=="}, "originalCommit": {"oid": "d4ce82ecc44922ce66080950260ac9e0c3593f7a"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzMxMTQxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/jsonpatch/JsonPatchDocument.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxOTozOToyMFrOHUZq6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMTowOToyNFrOHUb-dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NDE1NA==", "bodyText": "nit: too much happening in this 1 statement - add, new & null checks. Breaking it down probably makes it easier to read.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15346#discussion_r491154154", "createdAt": "2020-09-18T19:39:20Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/jsonpatch/JsonPatchDocument.java", "diffHunk": "@@ -0,0 +1,210 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.jsonpatch;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.JacksonAdapter;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a JSON Patch document.\n+ */\n+public class JsonPatchDocument {\n+    private static final ObjectMapper MAPPER = ((JacksonAdapter) JacksonAdapter.createDefaultSerializerAdapter())\n+        .serializer();\n+\n+    private final ClientLogger logger = new ClientLogger(JsonPatchDocument.class);\n+\n+    private final List<JsonPatchOperation> operations;\n+\n+    /**\n+     * Creates a new JSON Patch document.\n+     */\n+    public JsonPatchDocument() {\n+        this.operations = new ArrayList<>();\n+    }\n+\n+    /**\n+     * Appends an \"add\" operation to this JSON Patch document.\n+     * <p>\n+     * If the {@code path} doesn't exist a new member is added to the object. If the {@code path} does exist the\n+     * previous value is replaced. If the {@code path} specifies an array index the value is inserted at the specified.\n+     * <p>\n+     * See <a href=\"https://tools.ietf.org/html/rfc6902#section-4.1\">JSON Patch Add</a> for more information.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.core.experimental.jsonpatch.JsonPatchDocument.appendAdd#String-String}\n+     *\n+     * @param path The path to apply the addition.\n+     * @param rawJsonValue The raw JSON value to add to the path.\n+     * @return The updated JsonPatchDocument object.\n+     * @throws NullPointerException If {@code path} or {@code rawJsonValue} is null.\n+     */\n+    public JsonPatchDocument appendAdd(String path, String rawJsonValue) {\n+        operations.add(new JsonPatchOperation(JsonPatchOperationKind.ADD,\n+            Objects.requireNonNull(path, \"'path' cannot be null.\"), null,\n+            Objects.requireNonNull(rawJsonValue, \"'rawJsonValue' cannot be null.\")));\n+        return this;\n+    }\n+\n+    /**\n+     * Appends a \"replace\" operation to this JSON Patch document.\n+     * <p>\n+     * See <a href=\"https://tools.ietf.org/html/rfc6902#section-4.3\">JSON Patch replace</a> for more information.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.core.experimental.jsonpatch.JsonPatchDocument.appendReplace#String-String}\n+     *\n+     * @param path The path to replace.\n+     * @param rawJsonValue The raw JSON value to use as the replacement.\n+     * @return The updated JsonPatchDocument object.\n+     * @throws NullPointerException If {@code path} or {@code rawJsonValue} is null.\n+     */\n+    public JsonPatchDocument appendReplace(String path, String rawJsonValue) {\n+        operations.add(new JsonPatchOperation(JsonPatchOperationKind.REPLACE,\n+            Objects.requireNonNull(path, \"'path' cannot be null.\"), null,\n+            Objects.requireNonNull(rawJsonValue, \"'rawJsonValue' cannot be null.\")));\n+        return this;\n+    }\n+\n+    /**\n+     * Appends a \"copy\" operation to this JSON Patch document.\n+     * <p>\n+     * See <a href=\"https://tools.ietf.org/html/rfc6902#section-4.5>JSON Patch copy</a> for more information.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.core.experimental.jsonpatch.JsonPatchDocument.appendCopy#String-String}\n+     *\n+     * @param from The path to copy from.\n+     * @param path The path to copy to.\n+     * @return The updated JsonPatchDocument object.\n+     * @throws NullPointerException If {@code from} or {@code path} is null.\n+     */\n+    public JsonPatchDocument appendCopy(String from, String path) {\n+        operations.add(new JsonPatchOperation(JsonPatchOperationKind.COPY,\n+            Objects.requireNonNull(path, \"'path' cannot be null.\"),\n+            Objects.requireNonNull(from, \"'from' cannot be null.\"), null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4ce82ecc44922ce66080950260ac9e0c3593f7a"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE5MTkyNQ==", "bodyText": "Separated out all Objects.requireNonNull to their own lines.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15346#discussion_r491191925", "createdAt": "2020-09-18T21:09:24Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/jsonpatch/JsonPatchDocument.java", "diffHunk": "@@ -0,0 +1,210 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.jsonpatch;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.JacksonAdapter;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a JSON Patch document.\n+ */\n+public class JsonPatchDocument {\n+    private static final ObjectMapper MAPPER = ((JacksonAdapter) JacksonAdapter.createDefaultSerializerAdapter())\n+        .serializer();\n+\n+    private final ClientLogger logger = new ClientLogger(JsonPatchDocument.class);\n+\n+    private final List<JsonPatchOperation> operations;\n+\n+    /**\n+     * Creates a new JSON Patch document.\n+     */\n+    public JsonPatchDocument() {\n+        this.operations = new ArrayList<>();\n+    }\n+\n+    /**\n+     * Appends an \"add\" operation to this JSON Patch document.\n+     * <p>\n+     * If the {@code path} doesn't exist a new member is added to the object. If the {@code path} does exist the\n+     * previous value is replaced. If the {@code path} specifies an array index the value is inserted at the specified.\n+     * <p>\n+     * See <a href=\"https://tools.ietf.org/html/rfc6902#section-4.1\">JSON Patch Add</a> for more information.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.core.experimental.jsonpatch.JsonPatchDocument.appendAdd#String-String}\n+     *\n+     * @param path The path to apply the addition.\n+     * @param rawJsonValue The raw JSON value to add to the path.\n+     * @return The updated JsonPatchDocument object.\n+     * @throws NullPointerException If {@code path} or {@code rawJsonValue} is null.\n+     */\n+    public JsonPatchDocument appendAdd(String path, String rawJsonValue) {\n+        operations.add(new JsonPatchOperation(JsonPatchOperationKind.ADD,\n+            Objects.requireNonNull(path, \"'path' cannot be null.\"), null,\n+            Objects.requireNonNull(rawJsonValue, \"'rawJsonValue' cannot be null.\")));\n+        return this;\n+    }\n+\n+    /**\n+     * Appends a \"replace\" operation to this JSON Patch document.\n+     * <p>\n+     * See <a href=\"https://tools.ietf.org/html/rfc6902#section-4.3\">JSON Patch replace</a> for more information.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.core.experimental.jsonpatch.JsonPatchDocument.appendReplace#String-String}\n+     *\n+     * @param path The path to replace.\n+     * @param rawJsonValue The raw JSON value to use as the replacement.\n+     * @return The updated JsonPatchDocument object.\n+     * @throws NullPointerException If {@code path} or {@code rawJsonValue} is null.\n+     */\n+    public JsonPatchDocument appendReplace(String path, String rawJsonValue) {\n+        operations.add(new JsonPatchOperation(JsonPatchOperationKind.REPLACE,\n+            Objects.requireNonNull(path, \"'path' cannot be null.\"), null,\n+            Objects.requireNonNull(rawJsonValue, \"'rawJsonValue' cannot be null.\")));\n+        return this;\n+    }\n+\n+    /**\n+     * Appends a \"copy\" operation to this JSON Patch document.\n+     * <p>\n+     * See <a href=\"https://tools.ietf.org/html/rfc6902#section-4.5>JSON Patch copy</a> for more information.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.core.experimental.jsonpatch.JsonPatchDocument.appendCopy#String-String}\n+     *\n+     * @param from The path to copy from.\n+     * @param path The path to copy to.\n+     * @return The updated JsonPatchDocument object.\n+     * @throws NullPointerException If {@code from} or {@code path} is null.\n+     */\n+    public JsonPatchDocument appendCopy(String from, String path) {\n+        operations.add(new JsonPatchOperation(JsonPatchOperationKind.COPY,\n+            Objects.requireNonNull(path, \"'path' cannot be null.\"),\n+            Objects.requireNonNull(from, \"'from' cannot be null.\"), null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NDE1NA=="}, "originalCommit": {"oid": "d4ce82ecc44922ce66080950260ac9e0c3593f7a"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 951, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}