{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MDgyMTk4", "number": 11785, "title": "Identity synchronization fix", "bodyText": "", "createdAt": "2020-06-04T20:53:17Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785", "merged": true, "mergeCommit": {"oid": "855c44e03b604444d569a241662a82c85335b244"}, "closed": true, "closedAt": "2020-06-09T23:11:28Z", "author": {"login": "g2vinay"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcoGvwpgFqTQyNDkwNTc2Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpYULGAFqTQyNjY2ODU5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0OTA1NzY3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#pullrequestreview-424905767", "createdAt": "2020-06-04T23:34:39Z", "commit": {"oid": "4227c03298e6ad7581e381f44f6a2001a9cd78d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzozNDozOVrOGfbfdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzozNDozOVrOGfbfdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwOTQ2Mg==", "bodyText": "This setter probably better belongs in IdentityClientBuilder. After all, this is just an implementation detail instead of an \"option\" users can configure.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#discussion_r435609462", "createdAt": "2020-06-04T23:34:39Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClientOptions.java", "diffHunk": "@@ -286,4 +287,14 @@ public IdentityClientOptions enablePersistentCache(boolean enabled) {\n     public String getIntelliJKeePassDatabasePath() {\n         return keePassDatabasePath;\n     }\n+\n+\n+    public IdentityClientOptions sharedTokenCacheCredential(boolean isSharedTokenCacheCred) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4227c03298e6ad7581e381f44f6a2001a9cd78d5"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbb9e093c3b15bc9ff9d941da8296b8e2117d032", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fbb9e093c3b15bc9ff9d941da8296b8e2117d032", "committedDate": "2020-06-06T01:42:33Z", "message": "update synchronization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b161b836cacea3d48c481c62f7930dd6248f5c24", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b161b836cacea3d48c481c62f7930dd6248f5c24", "committedDate": "2020-06-05T17:46:16Z", "message": "test update"}, "afterCommit": {"oid": "fbb9e093c3b15bc9ff9d941da8296b8e2117d032", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fbb9e093c3b15bc9ff9d941da8296b8e2117d032", "committedDate": "2020-06-06T01:42:33Z", "message": "update synchronization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5dada00bf5905a7ba6d0c2328b3da421ab9b47b3", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5dada00bf5905a7ba6d0c2328b3da421ab9b47b3", "committedDate": "2020-06-06T02:21:26Z", "message": "test update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzA3NDk2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#pullrequestreview-425707496", "createdAt": "2020-06-06T02:52:31Z", "commit": {"oid": "5dada00bf5905a7ba6d0c2328b3da421ab9b47b3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzA4ODcy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#pullrequestreview-425708872", "createdAt": "2020-06-06T03:15:32Z", "commit": {"oid": "5dada00bf5905a7ba6d0c2328b3da421ab9b47b3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwMzoxNTozM1rOGgBhfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwMzoxNTozM1rOGgBhfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzMjU3NA==", "bodyText": "Should have default value \u201cfalse\u201d", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#discussion_r436232574", "createdAt": "2020-06-06T03:15:33Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClientBuilder.java", "diffHunk": "@@ -15,6 +17,7 @@\n     private String clientSecret;\n     private String certificatePath;\n     private String certificatePassword;\n+    private boolean sharedTokenCacheCred;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dada00bf5905a7ba6d0c2328b3da421ab9b47b3"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzE1NDM0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#pullrequestreview-425715434", "createdAt": "2020-06-06T05:24:01Z", "commit": {"oid": "5dada00bf5905a7ba6d0c2328b3da421ab9b47b3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1ODQ5Mjc3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#pullrequestreview-425849277", "createdAt": "2020-06-07T20:06:28Z", "commit": {"oid": "5dada00bf5905a7ba6d0c2328b3da421ab9b47b3"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMDowNjoyOFrOGgLkcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzowNjowNVrOGgRemg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM5NzE2OQ==", "bodyText": "Why is it called emitterProcessor? It should be replayProcessor. EmitterProcessor is different from ReplayProcessor.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#discussion_r436397169", "createdAt": "2020-06-07T20:06:28Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation;\n+\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ReplayProcessor;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Synchronizes reactor threads accessing/instantiating a common value {@code T}.\n+ *\n+ * @param <T> The value being instantiated / accessed.\n+ */\n+public class SynchronizedAccessor<T> {\n+    private final AtomicBoolean wip;\n+    private T cache;\n+    private final ReplayProcessor<T> emitterProcessor = ReplayProcessor.create(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dada00bf5905a7ba6d0c2328b3da421ab9b47b3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4OTk2Mg==", "bodyText": "If the first thread that runs supplier.get() throws an error, then all subsequent getValue() calls will return an error. Instead, if the first attempt failed, should the next call to getValue() again attempt to get from the supplier?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#discussion_r436489962", "createdAt": "2020-06-08T06:55:57Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation;\n+\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ReplayProcessor;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Synchronizes reactor threads accessing/instantiating a common value {@code T}.\n+ *\n+ * @param <T> The value being instantiated / accessed.\n+ */\n+public class SynchronizedAccessor<T> {\n+    private final AtomicBoolean wip;\n+    private T cache;\n+    private final ReplayProcessor<T> emitterProcessor = ReplayProcessor.create(1);\n+    private final FluxSink<T> sink = emitterProcessor.sink(FluxSink.OverflowStrategy.BUFFER);\n+    private final Supplier<T> supplier;\n+\n+    public SynchronizedAccessor(Supplier<T> supplier) {\n+        this.wip = new AtomicBoolean(false);\n+        this.supplier = supplier;\n+    }\n+\n+    /**\n+     * Get the value from the configured supplier.\n+     *\n+     * @return the output {@code T}\n+     */\n+    public Mono<T> getValue() {\n+        if (cache != null) {\n+            return Mono.just(cache);\n+        }\n+        return Mono.defer(() -> {\n+            if (!wip.getAndSet(true)) {\n+                try {\n+                    cache = supplier.get();\n+                    sink.next(cache);\n+                } catch (Exception e) {\n+                    sink.error(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dada00bf5905a7ba6d0c2328b3da421ab9b47b3"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5MDc1Mw==", "bodyText": "Add unit tests for this class.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#discussion_r436490753", "createdAt": "2020-06-08T06:57:57Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation;\n+\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ReplayProcessor;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Synchronizes reactor threads accessing/instantiating a common value {@code T}.\n+ *\n+ * @param <T> The value being instantiated / accessed.\n+ */\n+public class SynchronizedAccessor<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dada00bf5905a7ba6d0c2328b3da421ab9b47b3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5MzQzNQ==", "bodyText": "There's still a chance of race condition here when a thread marks wip as false and then another thread enters the if block and calls supplier.get() again updating the reference to cache. How critical is the need to call the supplier only once?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#discussion_r436493435", "createdAt": "2020-06-08T07:04:46Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation;\n+\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ReplayProcessor;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Synchronizes reactor threads accessing/instantiating a common value {@code T}.\n+ *\n+ * @param <T> The value being instantiated / accessed.\n+ */\n+public class SynchronizedAccessor<T> {\n+    private final AtomicBoolean wip;\n+    private T cache;\n+    private final ReplayProcessor<T> emitterProcessor = ReplayProcessor.create(1);\n+    private final FluxSink<T> sink = emitterProcessor.sink(FluxSink.OverflowStrategy.BUFFER);\n+    private final Supplier<T> supplier;\n+\n+    public SynchronizedAccessor(Supplier<T> supplier) {\n+        this.wip = new AtomicBoolean(false);\n+        this.supplier = supplier;\n+    }\n+\n+    /**\n+     * Get the value from the configured supplier.\n+     *\n+     * @return the output {@code T}\n+     */\n+    public Mono<T> getValue() {\n+        if (cache != null) {\n+            return Mono.just(cache);\n+        }\n+        return Mono.defer(() -> {\n+            if (!wip.getAndSet(true)) {\n+                try {\n+                    cache = supplier.get();\n+                    sink.next(cache);\n+                } catch (Exception e) {\n+                    sink.error(e);\n+                } finally {\n+                    wip.set(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dada00bf5905a7ba6d0c2328b3da421ab9b47b3"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5Mzk3OA==", "bodyText": "This should be volatile.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#discussion_r436493978", "createdAt": "2020-06-08T07:06:05Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation;\n+\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ReplayProcessor;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Synchronizes reactor threads accessing/instantiating a common value {@code T}.\n+ *\n+ * @param <T> The value being instantiated / accessed.\n+ */\n+public class SynchronizedAccessor<T> {\n+    private final AtomicBoolean wip;\n+    private T cache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dada00bf5905a7ba6d0c2328b3da421ab9b47b3"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1OTg2MDkx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#pullrequestreview-425986091", "createdAt": "2020-06-08T07:48:11Z", "commit": {"oid": "5dada00bf5905a7ba6d0c2328b3da421ab9b47b3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzo0ODoxMVrOGgSmnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzo0ODoxMVrOGgSmnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxMjQxNQ==", "bodyText": "This should also be inside defer(). The check should happen when there is a subscriber.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#discussion_r436512415", "createdAt": "2020-06-08T07:48:11Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation;\n+\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ReplayProcessor;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Synchronizes reactor threads accessing/instantiating a common value {@code T}.\n+ *\n+ * @param <T> The value being instantiated / accessed.\n+ */\n+public class SynchronizedAccessor<T> {\n+    private final AtomicBoolean wip;\n+    private T cache;\n+    private final ReplayProcessor<T> emitterProcessor = ReplayProcessor.create(1);\n+    private final FluxSink<T> sink = emitterProcessor.sink(FluxSink.OverflowStrategy.BUFFER);\n+    private final Supplier<T> supplier;\n+\n+    public SynchronizedAccessor(Supplier<T> supplier) {\n+        this.wip = new AtomicBoolean(false);\n+        this.supplier = supplier;\n+    }\n+\n+    /**\n+     * Get the value from the configured supplier.\n+     *\n+     * @return the output {@code T}\n+     */\n+    public Mono<T> getValue() {\n+        if (cache != null) {\n+            return Mono.just(cache);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dada00bf5905a7ba6d0c2328b3da421ab9b47b3"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9b88c5ebc059bc11c75a02629935f5045e8958b", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b9b88c5ebc059bc11c75a02629935f5045e8958b", "committedDate": "2020-06-08T14:56:31Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c2bc110378c9c9dfbae4b4d531ca37c86ed5e74", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4c2bc110378c9c9dfbae4b4d531ca37c86ed5e74", "committedDate": "2020-06-08T16:17:48Z", "message": "fix checkstyle isse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3048f923d0e5f2bb311ba22c0268b87d1ea072e3", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3048f923d0e5f2bb311ba22c0268b87d1ea072e3", "committedDate": "2020-06-08T22:16:41Z", "message": "update the accessor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NjY4NTk2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#pullrequestreview-426668596", "createdAt": "2020-06-08T22:36:44Z", "commit": {"oid": "3048f923d0e5f2bb311ba22c0268b87d1ea072e3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3814, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}