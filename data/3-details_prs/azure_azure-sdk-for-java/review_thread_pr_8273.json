{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2Nzc4OTEx", "number": 8273, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxODo1NToyMVrODhLqHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxODo1Nzo1OVrODhLtdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTIwNjA1OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/RangeFacetResult.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxODo1NToyMVrOFrzhPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxODo1NToyMVrOFrzhPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ3NzE4MA==", "bodyText": "The accessor methods getFrom and getTo should return type T as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8273#discussion_r381477180", "createdAt": "2020-02-19T18:55:21Z", "author": {"login": "brjohnstmsft"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/RangeFacetResult.java", "diffHunk": "@@ -10,20 +10,22 @@\n  * with a field value falling within a particular range.\n  */\n @Immutable\n-public class RangeFacetResult {\n+public class RangeFacetResult<T> {\n     private final Long count;\n-    private final Object from;\n-    private final Object to;\n+    private final T from;\n+    private final T to;\n \n     /**\n-     * Constructor\n+     * Constructor of RangeFacetResult.\n      *\n-     * @param facetResult facet result object\n+     * @param count The count of the result.\n+     * @param from Value indicates the lower bound of facet's range\n+     * @param to Value indicates the upper bound of facet's range\n      */\n-    public RangeFacetResult(FacetResult facetResult) {\n-        count = facetResult.getCount();\n-        from = facetResult.getDocument().get(\"from\");\n-        to = facetResult.getDocument().get(\"to\");\n+    public RangeFacetResult(Long count, T from, T to) {\n+        this.count = count;\n+        this.from = from;\n+        this.to = to;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65386598faeff6c4c7aa0a103acd8a0fe42d86a3"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTIwODYzOnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/ValueFacetResult.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxODo1NjoxMlrOFrzjAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxODo1NjoxMlrOFrzjAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ3NzYzMg==", "bodyText": "The accessor method getValue should return type T as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8273#discussion_r381477632", "createdAt": "2020-02-19T18:56:12Z", "author": {"login": "brjohnstmsft"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/ValueFacetResult.java", "diffHunk": "@@ -11,27 +11,17 @@\n  * falling within a particular interval or having a specific value.\n  */\n @Immutable\n-public class ValueFacetResult {\n+public class ValueFacetResult<T> {\n     private final Long count;\n-    private final Object value;\n+    private final T value;\n \n     /**\n      * Constructor\n      *\n-     * @param facetResult facet result object\n+     * @param count The approximate count of documents.\n+     * @param value The value of the facet.\n      */\n-    public ValueFacetResult(FacetResult facetResult) {\n-        this.count = facetResult.getCount();\n-        this.value = facetResult.getDocument().get(\"value\");\n-    }\n-\n-    /**\n-     * Constructor\n-     *\n-     * @param count count\n-     * @param value value\n-     */\n-    public ValueFacetResult(Long count, Object value) {\n+    public ValueFacetResult(Long count, T value) {\n         this.count = count;\n         this.value = value;\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65386598faeff6c4c7aa0a103acd8a0fe42d86a3"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTIxNDYwOnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search/src/test/java/com/azure/search/SearchTestBase.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxODo1Nzo1OVrOFrzmzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODo0Njo0M1rOF3Begg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ3ODYwNA==", "bodyText": "The logic to create RangeFacetResult and ValueFacetResult from a FacetResult should be part of the SDK, not just the tests. Every customer that uses facets will need to do this, so we might as well make it easy.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8273#discussion_r381478604", "createdAt": "2020-02-19T18:57:59Z", "author": {"login": "brjohnstmsft"}, "path": "sdk/search/azure-search/src/test/java/com/azure/search/SearchTestBase.java", "diffHunk": "@@ -121,17 +124,21 @@ void assertRangeFacets(List<RangeFacetResult> baseRateFacets, List<RangeFacetRes\n         Assert.assertEquals(2, lastRenovationDateFacets.get(1).getCount().intValue());\n     }\n \n-    List<RangeFacetResult> getRangeFacetsForField(\n+    @SuppressWarnings(\"unchecked\")\n+    <T> List<RangeFacetResult<T>> getRangeFacetsForField(\n         Map<String, List<FacetResult>> facets, String expectedField, int expectedCount) {\n         List<FacetResult> facetCollection = getFacetsForField(facets, expectedField, expectedCount);\n-        return facetCollection.stream().map(RangeFacetResult::new)\n+        return facetCollection.stream().map(facetResult -> new RangeFacetResult<T>(facetResult.getCount(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65386598faeff6c4c7aa0a103acd8a0fe42d86a3"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE1NzAzNg==", "bodyText": "FacetResult is auto-gen code. For the effort of getting RangeFacetResult/ValueFacetResult from FacetResult, we have to change the swagger definition which make FacetResult to non-final. Then we can have a subclass extend FacetResult.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8273#discussion_r382157036", "createdAt": "2020-02-20T17:45:33Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search/src/test/java/com/azure/search/SearchTestBase.java", "diffHunk": "@@ -121,17 +124,21 @@ void assertRangeFacets(List<RangeFacetResult> baseRateFacets, List<RangeFacetRes\n         Assert.assertEquals(2, lastRenovationDateFacets.get(1).getCount().intValue());\n     }\n \n-    List<RangeFacetResult> getRangeFacetsForField(\n+    @SuppressWarnings(\"unchecked\")\n+    <T> List<RangeFacetResult<T>> getRangeFacetsForField(\n         Map<String, List<FacetResult>> facets, String expectedField, int expectedCount) {\n         List<FacetResult> facetCollection = getFacetsForField(facets, expectedField, expectedCount);\n-        return facetCollection.stream().map(RangeFacetResult::new)\n+        return facetCollection.stream().map(facetResult -> new RangeFacetResult<T>(facetResult.getCount(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ3ODYwNA=="}, "originalCommit": {"oid": "65386598faeff6c4c7aa0a103acd8a0fe42d86a3"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE4ODE5Ng==", "bodyText": "By \"change the swagger definition\" I assume you mean use an AutoRest transform directive? Because there's no way to express local language-specific methods on a Swagger type. I'm assuming you will handle that, and our team will own the actual Swagger definition of the REST API.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8273#discussion_r382188196", "createdAt": "2020-02-20T18:46:25Z", "author": {"login": "brjohnstmsft"}, "path": "sdk/search/azure-search/src/test/java/com/azure/search/SearchTestBase.java", "diffHunk": "@@ -121,17 +124,21 @@ void assertRangeFacets(List<RangeFacetResult> baseRateFacets, List<RangeFacetRes\n         Assert.assertEquals(2, lastRenovationDateFacets.get(1).getCount().intValue());\n     }\n \n-    List<RangeFacetResult> getRangeFacetsForField(\n+    @SuppressWarnings(\"unchecked\")\n+    <T> List<RangeFacetResult<T>> getRangeFacetsForField(\n         Map<String, List<FacetResult>> facets, String expectedField, int expectedCount) {\n         List<FacetResult> facetCollection = getFacetsForField(facets, expectedField, expectedCount);\n-        return facetCollection.stream().map(RangeFacetResult::new)\n+        return facetCollection.stream().map(facetResult -> new RangeFacetResult<T>(facetResult.getCount(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ3ODYwNA=="}, "originalCommit": {"oid": "65386598faeff6c4c7aa0a103acd8a0fe42d86a3"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg1MTY5Mw==", "bodyText": "I might misunderstand your statement before.\nI currently added back the constructor of taking FacetResult inside of RangeFacetResult/ValueFacetResult.\nLet me know if furthermore functionalities needed here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8273#discussion_r391851693", "createdAt": "2020-03-12T19:45:04Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search/src/test/java/com/azure/search/SearchTestBase.java", "diffHunk": "@@ -121,17 +124,21 @@ void assertRangeFacets(List<RangeFacetResult> baseRateFacets, List<RangeFacetRes\n         Assert.assertEquals(2, lastRenovationDateFacets.get(1).getCount().intValue());\n     }\n \n-    List<RangeFacetResult> getRangeFacetsForField(\n+    @SuppressWarnings(\"unchecked\")\n+    <T> List<RangeFacetResult<T>> getRangeFacetsForField(\n         Map<String, List<FacetResult>> facets, String expectedField, int expectedCount) {\n         List<FacetResult> facetCollection = getFacetsForField(facets, expectedField, expectedCount);\n-        return facetCollection.stream().map(RangeFacetResult::new)\n+        return facetCollection.stream().map(facetResult -> new RangeFacetResult<T>(facetResult.getCount(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ3ODYwNA=="}, "originalCommit": {"oid": "65386598faeff6c4c7aa0a103acd8a0fe42d86a3"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk4OTcxNw==", "bodyText": "It's definitely a step in the right direction. I'm not sure what more we can do to make this more discoverable. @tg-msft had similar concerns about this pattern for the new .NET SDK. Maybe we can find a common solution for Preview 2.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8273#discussion_r391989717", "createdAt": "2020-03-13T01:48:41Z", "author": {"login": "brjohnstmsft"}, "path": "sdk/search/azure-search/src/test/java/com/azure/search/SearchTestBase.java", "diffHunk": "@@ -121,17 +124,21 @@ void assertRangeFacets(List<RangeFacetResult> baseRateFacets, List<RangeFacetRes\n         Assert.assertEquals(2, lastRenovationDateFacets.get(1).getCount().intValue());\n     }\n \n-    List<RangeFacetResult> getRangeFacetsForField(\n+    @SuppressWarnings(\"unchecked\")\n+    <T> List<RangeFacetResult<T>> getRangeFacetsForField(\n         Map<String, List<FacetResult>> facets, String expectedField, int expectedCount) {\n         List<FacetResult> facetCollection = getFacetsForField(facets, expectedField, expectedCount);\n-        return facetCollection.stream().map(RangeFacetResult::new)\n+        return facetCollection.stream().map(facetResult -> new RangeFacetResult<T>(facetResult.getCount(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ3ODYwNA=="}, "originalCommit": {"oid": "65386598faeff6c4c7aa0a103acd8a0fe42d86a3"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI0MDE5NA==", "bodyText": "Tracking with Azure/azure-sdk-for-net#10613", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8273#discussion_r393240194", "createdAt": "2020-03-16T18:46:43Z", "author": {"login": "tg-msft"}, "path": "sdk/search/azure-search/src/test/java/com/azure/search/SearchTestBase.java", "diffHunk": "@@ -121,17 +124,21 @@ void assertRangeFacets(List<RangeFacetResult> baseRateFacets, List<RangeFacetRes\n         Assert.assertEquals(2, lastRenovationDateFacets.get(1).getCount().intValue());\n     }\n \n-    List<RangeFacetResult> getRangeFacetsForField(\n+    @SuppressWarnings(\"unchecked\")\n+    <T> List<RangeFacetResult<T>> getRangeFacetsForField(\n         Map<String, List<FacetResult>> facets, String expectedField, int expectedCount) {\n         List<FacetResult> facetCollection = getFacetsForField(facets, expectedField, expectedCount);\n-        return facetCollection.stream().map(RangeFacetResult::new)\n+        return facetCollection.stream().map(facetResult -> new RangeFacetResult<T>(facetResult.getCount(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ3ODYwNA=="}, "originalCommit": {"oid": "65386598faeff6c4c7aa0a103acd8a0fe42d86a3"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3127, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}