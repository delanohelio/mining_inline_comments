{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0NDU4Mzg2", "number": 10886, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNToxODoyNFrOD6F-Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODo1MzoyOFrOD7AtYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjQxODY2OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientBuilderTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNToxODoyNFrOGRuwDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNjozMDo1MVrOGSGsDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0NDk0MA==", "bodyText": "just curious why call \"display name with arguments\" since there is no argument at the method input.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10886#discussion_r421244940", "createdAt": "2020-05-07T05:18:24Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientBuilderTest.java", "diffHunk": "@@ -45,7 +47,8 @@\n     /**\n      * Test client builder with valid API key\n      */\n-    @Test\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7905b1ac2dd2f4481fca65ccb1dc98d64ca9a7b4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYzNzEzNA==", "bodyText": "I am supposed to have a draft here. The PR is in progress.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10886#discussion_r421637134", "createdAt": "2020-05-07T16:30:51Z", "author": {"login": "sima-zhu"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientBuilderTest.java", "diffHunk": "@@ -45,7 +47,8 @@\n     /**\n      * Test client builder with valid API key\n      */\n-    @Test\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0NDk0MA=="}, "originalCommit": {"oid": "7905b1ac2dd2f4481fca65ccb1dc98d64ca9a7b4"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTExNzY0OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerClientTestBase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozNjo1MlrOGSJHvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzo0MDozM1rOGSJQfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3Njk5MQ==", "bodyText": "The indentation is off here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10886#discussion_r421676991", "createdAt": "2020-05-07T17:36:52Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerClientTestBase.java", "diffHunk": "@@ -261,91 +261,75 @@ private static void validateReceiptItemsData(List<FieldValue> expectedReceiptIte\n     }\n \n     @Test\n-    abstract void recognizeReceiptSourceUrl();\n+    abstract void recognizeReceiptSourceUrl(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeReceiptSourceUrlTextDetails();\n+    abstract void recognizeReceiptSourceUrlTextDetails(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeReceiptData();\n+    abstract void recognizeReceiptData(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeReceiptDataTextDetails();\n+    abstract void recognizeReceiptDataTextDetails(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeReceiptDataTextDetailsWithNullData();\n+    abstract void recognizeReceiptDataTextDetailsWithNullData(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeReceiptDataWithContentTypeAutoDetection();\n+    abstract void recognizeReceiptDataWithContentTypeAutoDetection(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeLayoutData();\n+    abstract void recognizeLayoutData(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeLayoutDataWithNullData();\n+    abstract void recognizeLayoutDataWithNullData(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeLayoutDataWithContentTypeAutoDetection();\n+    abstract void recognizeLayoutDataWithContentTypeAutoDetection(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeLayoutSourceUrl();\n+    abstract void recognizeLayoutSourceUrl(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeLayoutInvalidSourceUrl();\n+    abstract void recognizeLayoutInvalidSourceUrl(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeCustomFormLabeledData();\n+    abstract void recognizeCustomFormLabeledData(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeCustomFormUnlabeledData();\n+    abstract void recognizeCustomFormUnlabeledData(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeCustomFormLabeledDataWithNullValues();\n+    abstract void recognizeCustomFormLabeledDataWithNullValues(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeCustomFormLabeledDataWithContentTypeAutoDetection();\n+    abstract void recognizeCustomFormLabeledDataWithContentTypeAutoDetection(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeCustomFormInvalidSourceUrl();\n+    abstract void recognizeCustomFormInvalidSourceUrl(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n-    void validateUSReceiptData(USReceipt actualRecognizedReceipt,\n-        boolean includeTextDetails) {\n+    void validateUSReceiptData(USReceipt actualRecognizedReceipt, boolean includeTextDetails) {\n         final AnalyzeResult analyzeResult = getAnalyzeRawResponse().getAnalyzeResult();\n         List<ReadResult> readResults = analyzeResult.getReadResults();\n         DocumentResult documentResult = analyzeResult.getDocumentResults().get(0);\n         final Map<String, FieldValue> expectedReceiptFields = documentResult.getFields();\n-        validatePageRangeData(documentResult.getPageRange().get(0),\n-            actualRecognizedReceipt.getRecognizedForm().getPageRange());\n-        validatePageRangeData(documentResult.getPageRange().get(1),\n-            actualRecognizedReceipt.getRecognizedForm().getPageRange());\n-        assertEquals(expectedReceiptFields.get(\"ReceiptType\").getValueString(),\n-            actualRecognizedReceipt.getReceiptType().getType());\n-        assertEquals(expectedReceiptFields.get(\"ReceiptType\").getConfidence(),\n-            actualRecognizedReceipt.getReceiptType().getConfidence());\n-        validateFieldValueTransforms(expectedReceiptFields.get(\"MerchantName\"),\n-            actualRecognizedReceipt.getMerchantName(), readResults, includeTextDetails);\n-        validateFieldValueTransforms(expectedReceiptFields.get(\"MerchantPhoneNumber\"),\n-            actualRecognizedReceipt.getMerchantPhoneNumber(), readResults, includeTextDetails);\n-        validateFieldValueTransforms(expectedReceiptFields.get(\"MerchantAddress\"),\n-            actualRecognizedReceipt.getMerchantAddress(), readResults, includeTextDetails);\n-        validateFieldValueTransforms(expectedReceiptFields.get(\"Total\"),\n-            actualRecognizedReceipt.getTotal(), readResults, includeTextDetails);\n-        validateFieldValueTransforms(expectedReceiptFields.get(\"Subtotal\"),\n-            actualRecognizedReceipt.getSubtotal(), readResults, includeTextDetails);\n-        validateFieldValueTransforms(expectedReceiptFields.get(\"Tax\"),\n-            actualRecognizedReceipt.getTax(), readResults, includeTextDetails);\n-        validateFieldValueTransforms(expectedReceiptFields.get(\"TransactionDate\"),\n-            actualRecognizedReceipt.getTransactionDate(),\n-            readResults, includeTextDetails);\n-        validateFieldValueTransforms(expectedReceiptFields.get(\"TransactionTime\"),\n-            actualRecognizedReceipt.getTransactionTime(),\n-            readResults, includeTextDetails);\n-        validateReceiptItemsData(expectedReceiptFields.get(\"Items\").getValueArray(),\n-            actualRecognizedReceipt.getReceiptItems(), readResults, includeTextDetails);\n-    }\n-\n-    void validateLayoutDataResults(IterableStream<FormPage> actualFormPages,\n-        boolean includeTextDetails) {\n+        validatePageRangeData(documentResult.getPageRange().get(0), actualRecognizedReceipt.getRecognizedForm().getPageRange());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3956f754b1fe39ada321fd2dadb3aa1284a1f66b"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3OTIzMA==", "bodyText": "Will double check the indentation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10886#discussion_r421679230", "createdAt": "2020-05-07T17:40:33Z", "author": {"login": "sima-zhu"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerClientTestBase.java", "diffHunk": "@@ -261,91 +261,75 @@ private static void validateReceiptItemsData(List<FieldValue> expectedReceiptIte\n     }\n \n     @Test\n-    abstract void recognizeReceiptSourceUrl();\n+    abstract void recognizeReceiptSourceUrl(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeReceiptSourceUrlTextDetails();\n+    abstract void recognizeReceiptSourceUrlTextDetails(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeReceiptData();\n+    abstract void recognizeReceiptData(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeReceiptDataTextDetails();\n+    abstract void recognizeReceiptDataTextDetails(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeReceiptDataTextDetailsWithNullData();\n+    abstract void recognizeReceiptDataTextDetailsWithNullData(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeReceiptDataWithContentTypeAutoDetection();\n+    abstract void recognizeReceiptDataWithContentTypeAutoDetection(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeLayoutData();\n+    abstract void recognizeLayoutData(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeLayoutDataWithNullData();\n+    abstract void recognizeLayoutDataWithNullData(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeLayoutDataWithContentTypeAutoDetection();\n+    abstract void recognizeLayoutDataWithContentTypeAutoDetection(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeLayoutSourceUrl();\n+    abstract void recognizeLayoutSourceUrl(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeLayoutInvalidSourceUrl();\n+    abstract void recognizeLayoutInvalidSourceUrl(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeCustomFormLabeledData();\n+    abstract void recognizeCustomFormLabeledData(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeCustomFormUnlabeledData();\n+    abstract void recognizeCustomFormUnlabeledData(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeCustomFormLabeledDataWithNullValues();\n+    abstract void recognizeCustomFormLabeledDataWithNullValues(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeCustomFormLabeledDataWithContentTypeAutoDetection();\n+    abstract void recognizeCustomFormLabeledDataWithContentTypeAutoDetection(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeCustomFormInvalidSourceUrl();\n+    abstract void recognizeCustomFormInvalidSourceUrl(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n-    void validateUSReceiptData(USReceipt actualRecognizedReceipt,\n-        boolean includeTextDetails) {\n+    void validateUSReceiptData(USReceipt actualRecognizedReceipt, boolean includeTextDetails) {\n         final AnalyzeResult analyzeResult = getAnalyzeRawResponse().getAnalyzeResult();\n         List<ReadResult> readResults = analyzeResult.getReadResults();\n         DocumentResult documentResult = analyzeResult.getDocumentResults().get(0);\n         final Map<String, FieldValue> expectedReceiptFields = documentResult.getFields();\n-        validatePageRangeData(documentResult.getPageRange().get(0),\n-            actualRecognizedReceipt.getRecognizedForm().getPageRange());\n-        validatePageRangeData(documentResult.getPageRange().get(1),\n-            actualRecognizedReceipt.getRecognizedForm().getPageRange());\n-        assertEquals(expectedReceiptFields.get(\"ReceiptType\").getValueString(),\n-            actualRecognizedReceipt.getReceiptType().getType());\n-        assertEquals(expectedReceiptFields.get(\"ReceiptType\").getConfidence(),\n-            actualRecognizedReceipt.getReceiptType().getConfidence());\n-        validateFieldValueTransforms(expectedReceiptFields.get(\"MerchantName\"),\n-            actualRecognizedReceipt.getMerchantName(), readResults, includeTextDetails);\n-        validateFieldValueTransforms(expectedReceiptFields.get(\"MerchantPhoneNumber\"),\n-            actualRecognizedReceipt.getMerchantPhoneNumber(), readResults, includeTextDetails);\n-        validateFieldValueTransforms(expectedReceiptFields.get(\"MerchantAddress\"),\n-            actualRecognizedReceipt.getMerchantAddress(), readResults, includeTextDetails);\n-        validateFieldValueTransforms(expectedReceiptFields.get(\"Total\"),\n-            actualRecognizedReceipt.getTotal(), readResults, includeTextDetails);\n-        validateFieldValueTransforms(expectedReceiptFields.get(\"Subtotal\"),\n-            actualRecognizedReceipt.getSubtotal(), readResults, includeTextDetails);\n-        validateFieldValueTransforms(expectedReceiptFields.get(\"Tax\"),\n-            actualRecognizedReceipt.getTax(), readResults, includeTextDetails);\n-        validateFieldValueTransforms(expectedReceiptFields.get(\"TransactionDate\"),\n-            actualRecognizedReceipt.getTransactionDate(),\n-            readResults, includeTextDetails);\n-        validateFieldValueTransforms(expectedReceiptFields.get(\"TransactionTime\"),\n-            actualRecognizedReceipt.getTransactionTime(),\n-            readResults, includeTextDetails);\n-        validateReceiptItemsData(expectedReceiptFields.get(\"Items\").getValueArray(),\n-            actualRecognizedReceipt.getReceiptItems(), readResults, includeTextDetails);\n-    }\n-\n-    void validateLayoutDataResults(IterableStream<FormPage> actualFormPages,\n-        boolean includeTextDetails) {\n+        validatePageRangeData(documentResult.getPageRange().get(0), actualRecognizedReceipt.getRecognizedForm().getPageRange());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3Njk5MQ=="}, "originalCommit": {"oid": "3956f754b1fe39ada321fd2dadb3aa1284a1f66b"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTExOTcyOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerClientTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozNzoyNFrOGSJJBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzo0MDoxMVrOGSJPwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3NzMxNg==", "bodyText": "does this mean we will create a new client every time before a test?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10886#discussion_r421677316", "createdAt": "2020-05-07T17:37:24Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerClientTest.java", "diffHunk": "@@ -167,17 +198,21 @@ void recognizeLayoutSourceUrl() {\n     /**\n      * Verifies that an exception is thrown for invalid source url for recognizing content information.\n      */\n-    @Test\n-    void recognizeLayoutInvalidSourceUrl() {\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+     public void recognizeLayoutInvalidSourceUrl(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerClient(httpClient, serviceVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3956f754b1fe39ada321fd2dadb3aa1284a1f66b"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3OTA0Mg==", "bodyText": "Yes, it is a cheap operation and parameterized tests can only set on method level instead of @beforeAll and @before", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10886#discussion_r421679042", "createdAt": "2020-05-07T17:40:11Z", "author": {"login": "sima-zhu"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerClientTest.java", "diffHunk": "@@ -167,17 +198,21 @@ void recognizeLayoutSourceUrl() {\n     /**\n      * Verifies that an exception is thrown for invalid source url for recognizing content information.\n      */\n-    @Test\n-    void recognizeLayoutInvalidSourceUrl() {\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+     public void recognizeLayoutInvalidSourceUrl(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerClient(httpClient, serviceVersion);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3NzMxNg=="}, "originalCommit": {"oid": "3956f754b1fe39ada321fd2dadb3aa1284a1f66b"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTI5MDQzOnYy", "diffSide": "LEFT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoyMzo0N1rOGSK04w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoyMzo0N1rOGSK04w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcwNDkzMQ==", "bodyText": "Should we be good to delete clientSetup from FomRecognizerClientTestBase now .", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10886#discussion_r421704931", "createdAt": "2020-05-07T18:23:47Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientTest.java", "diffHunk": "@@ -46,20 +53,27 @@ static void afterAll() {\n         StepVerifier.resetDefaultTimeout();\n     }\n \n-    @Override\n-    protected void beforeTest() {\n-        client = clientSetup(httpPipeline -> new FormRecognizerClientBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0268845d5114f81db63af7289f5c8cb47653f7e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjA0MDMyOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerClientTestBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODo1MTo1MVrOGTGmnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODo1MTo1MVrOGTGmnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4NDMxOQ==", "bodyText": "indentation revert?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10886#discussion_r422684319", "createdAt": "2020-05-10T18:51:51Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerClientTestBase.java", "diffHunk": "@@ -328,24 +318,21 @@ void validateUSReceiptData(USReceipt actualRecognizedReceipt,\n             actualRecognizedReceipt.getMerchantPhoneNumber(), readResults, includeTextDetails);\n         validateFieldValueTransforms(expectedReceiptFields.get(\"MerchantAddress\"),\n             actualRecognizedReceipt.getMerchantAddress(), readResults, includeTextDetails);\n-        validateFieldValueTransforms(expectedReceiptFields.get(\"Total\"),\n-            actualRecognizedReceipt.getTotal(), readResults, includeTextDetails);\n-        validateFieldValueTransforms(expectedReceiptFields.get(\"Subtotal\"),\n-            actualRecognizedReceipt.getSubtotal(), readResults, includeTextDetails);\n-        validateFieldValueTransforms(expectedReceiptFields.get(\"Tax\"),\n-            actualRecognizedReceipt.getTax(), readResults, includeTextDetails);\n-        validateFieldValueTransforms(expectedReceiptFields.get(\"TransactionDate\"),\n-            actualRecognizedReceipt.getTransactionDate(),\n+        validateFieldValueTransforms(expectedReceiptFields.get(\"Total\"), actualRecognizedReceipt.getTotal(),\n             readResults, includeTextDetails);\n-        validateFieldValueTransforms(expectedReceiptFields.get(\"TransactionTime\"),\n-            actualRecognizedReceipt.getTransactionTime(),\n+        validateFieldValueTransforms(expectedReceiptFields.get(\"Subtotal\"), actualRecognizedReceipt.getSubtotal(),\n             readResults, includeTextDetails);\n+        validateFieldValueTransforms(expectedReceiptFields.get(\"Tax\"), actualRecognizedReceipt.getTax(), readResults,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2805c93e6f56b7e267a82abf6174ac0308e71d9"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjA0MTk1OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerClientTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODo1MzoyOVrOGTGnYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODo1MzoyOVrOGTGnYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4NDUxMw==", "bodyText": "This test seems to be failing in live mode.\nhttps://dev.azure.com/azure-sdk/internal/_build/results?buildId=386425&view=ms.vss-test-web.build-test-results-tab&runId=10847082&resultId=100047&paneView=debug", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10886#discussion_r422684513", "createdAt": "2020-05-10T18:53:29Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerClientTest.java", "diffHunk": "@@ -104,8 +127,10 @@ void recognizeReceiptDataWithContentTypeAutoDetection() {\n      * Verifies receipt data for a document using source as as input stream data and text content when\n      * includeTextDetails is true.\n      */\n-    @Test\n-    void recognizeReceiptDataTextDetails() {\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+     public void recognizeReceiptDataTextDetails(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2805c93e6f56b7e267a82abf6174ac0308e71d9"}, "originalPosition": 117}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4324, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}