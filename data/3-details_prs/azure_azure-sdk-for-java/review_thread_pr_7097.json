{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MTI3NTk0", "number": 7097, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMjowODoyMFrODVwvTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDoxNDozNVrODXpKCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MTQ1MjI5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-tracing-opentelemetry/src/main/java/com/azure/core/tracing/opentelemetry/implementation/HttpTraceUtil.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMjowODoyMFrOFaKYvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMTozODowMVrOFbo2Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk3NzQ2OA==", "bodyText": "How reliably can we determine whether the SwaggerInterfaceParser's serviceName will contain the expected names here? Instead within RestProxy could we retrieve the name of the package where the method exists and pass through an additional context value which will be a bit more robust compared to either a codegen name/hand-written name?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7097#discussion_r362977468", "createdAt": "2020-01-03T22:08:20Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-tracing-opentelemetry/src/main/java/com/azure/core/tracing/opentelemetry/implementation/HttpTraceUtil.java", "diffHunk": "@@ -121,5 +125,29 @@ public static Status parseResponseStatus(int statusCode, Throwable error) {\n                 return Status.UNKNOWN.withDescription(message);\n         }\n     }\n+\n+    /**\n+     * Parse the resource provider name from the user span name.\n+     *\n+     * @param userSpanName the span name populated in the RestProxy layer.\n+     *\n+     * @return the resource provider group name.\n+     */\n+    public static String parseNamespaceProvider(String userSpanName) {\n+        if (userSpanName.contains(\"KeyVault\")) {\n+            return \"Microsoft.KeyVault\";\n+        }\n+        if (userSpanName.contains(\"AppConfig\")) {\n+            return \"Microsoft.AppConfiguration\";\n+        }\n+        if (userSpanName.contains(\"Storage\")) {\n+            return \"Microsoft.Storage\";\n+        }\n+        if (userSpanName.contains(\"TextAnalytics\")) {\n+            return \"Microsoft.CognitiveServices\";\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f16a4eea4fc27d7f0bd9c2ac3024bfe51851201"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQyNTQ4Ng==", "bodyText": "I agree it does not seem like a reliable/easy to maintain way to determine resource provider namespace. Could each library set some common global variable? It should also be possible to fall back to default value (null ?) and don't set az.namespace attribute in this case eliminating libraries that don't support tracing", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7097#discussion_r363425486", "createdAt": "2020-01-06T18:41:34Z", "author": {"login": "lmolkova"}, "path": "sdk/core/azure-core-tracing-opentelemetry/src/main/java/com/azure/core/tracing/opentelemetry/implementation/HttpTraceUtil.java", "diffHunk": "@@ -121,5 +125,29 @@ public static Status parseResponseStatus(int statusCode, Throwable error) {\n                 return Status.UNKNOWN.withDescription(message);\n         }\n     }\n+\n+    /**\n+     * Parse the resource provider name from the user span name.\n+     *\n+     * @param userSpanName the span name populated in the RestProxy layer.\n+     *\n+     * @return the resource provider group name.\n+     */\n+    public static String parseNamespaceProvider(String userSpanName) {\n+        if (userSpanName.contains(\"KeyVault\")) {\n+            return \"Microsoft.KeyVault\";\n+        }\n+        if (userSpanName.contains(\"AppConfig\")) {\n+            return \"Microsoft.AppConfiguration\";\n+        }\n+        if (userSpanName.contains(\"Storage\")) {\n+            return \"Microsoft.Storage\";\n+        }\n+        if (userSpanName.contains(\"TextAnalytics\")) {\n+            return \"Microsoft.CognitiveServices\";\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk3NzQ2OA=="}, "originalCommit": {"oid": "6f16a4eea4fc27d7f0bd9c2ac3024bfe51851201"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ2NjA0Ng==", "bodyText": "I agree, this is fraught with danger. Let's find a better solution.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7097#discussion_r363466046", "createdAt": "2020-01-06T20:21:09Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-tracing-opentelemetry/src/main/java/com/azure/core/tracing/opentelemetry/implementation/HttpTraceUtil.java", "diffHunk": "@@ -121,5 +125,29 @@ public static Status parseResponseStatus(int statusCode, Throwable error) {\n                 return Status.UNKNOWN.withDescription(message);\n         }\n     }\n+\n+    /**\n+     * Parse the resource provider name from the user span name.\n+     *\n+     * @param userSpanName the span name populated in the RestProxy layer.\n+     *\n+     * @return the resource provider group name.\n+     */\n+    public static String parseNamespaceProvider(String userSpanName) {\n+        if (userSpanName.contains(\"KeyVault\")) {\n+            return \"Microsoft.KeyVault\";\n+        }\n+        if (userSpanName.contains(\"AppConfig\")) {\n+            return \"Microsoft.AppConfiguration\";\n+        }\n+        if (userSpanName.contains(\"Storage\")) {\n+            return \"Microsoft.Storage\";\n+        }\n+        if (userSpanName.contains(\"TextAnalytics\")) {\n+            return \"Microsoft.CognitiveServices\";\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk3NzQ2OA=="}, "originalCommit": {"oid": "6f16a4eea4fc27d7f0bd9c2ac3024bfe51851201"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUyNTExNA==", "bodyText": "Updated the approach to allow the client libraries to send in their respective Resource Provider Names to pass through the context object and skip the hand-written comparisons. Also, updated it to skip adding the attribute if az.namespace value isn't set.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7097#discussion_r364525114", "createdAt": "2020-01-09T01:38:01Z", "author": {"login": "samvaity"}, "path": "sdk/core/azure-core-tracing-opentelemetry/src/main/java/com/azure/core/tracing/opentelemetry/implementation/HttpTraceUtil.java", "diffHunk": "@@ -121,5 +125,29 @@ public static Status parseResponseStatus(int statusCode, Throwable error) {\n                 return Status.UNKNOWN.withDescription(message);\n         }\n     }\n+\n+    /**\n+     * Parse the resource provider name from the user span name.\n+     *\n+     * @param userSpanName the span name populated in the RestProxy layer.\n+     *\n+     * @return the resource provider group name.\n+     */\n+    public static String parseNamespaceProvider(String userSpanName) {\n+        if (userSpanName.contains(\"KeyVault\")) {\n+            return \"Microsoft.KeyVault\";\n+        }\n+        if (userSpanName.contains(\"AppConfig\")) {\n+            return \"Microsoft.AppConfiguration\";\n+        }\n+        if (userSpanName.contains(\"Storage\")) {\n+            return \"Microsoft.Storage\";\n+        }\n+        if (userSpanName.contains(\"TextAnalytics\")) {\n+            return \"Microsoft.CognitiveServices\";\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk3NzQ2OA=="}, "originalCommit": {"oid": "6f16a4eea4fc27d7f0bd9c2ac3024bfe51851201"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MTQ1NzU1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-tracing-opentelemetry/src/main/java/com/azure/core/tracing/opentelemetry/implementation/HttpTraceUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMjoxMTo0N1rOFaKcCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMjoxMTo0N1rOFaKcCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk3ODMxMw==", "bodyText": "Does this have to be hardcoded? Can this be made configurable instead?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7097#discussion_r362978313", "createdAt": "2020-01-03T22:11:47Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-tracing-opentelemetry/src/main/java/com/azure/core/tracing/opentelemetry/implementation/HttpTraceUtil.java", "diffHunk": "@@ -121,5 +125,28 @@ public static Status parseResponseStatus(int statusCode, Throwable error) {\n                 return Status.UNKNOWN.withDescription(message);\n         }\n     }\n+\n+    /**\n+     * Parse the resource provider name from the user span name.\n+     *\n+     * @param userSpanName the span name populated in the RestProxy layer.\n+     *\n+     * @return the resource provider group name.\n+     */\n+    public static String parseNamespaceProvider(String userSpanName) {\n+        if (userSpanName.contains(\"KeyVault\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ab295727c93832733f7507e6a8db2fa716cd808"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MTQ1OTUzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-tracing-opentelemetry/src/main/java/com/azure/core/tracing/opentelemetry/implementation/HttpTraceUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMjoxMzowM1rOFaKdTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMjoxMzowM1rOFaKdTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk3ODYzNw==", "bodyText": "This is the OpenTelemetry package, should revert the comment renames.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7097#discussion_r362978637", "createdAt": "2020-01-03T22:13:03Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-tracing-opentelemetry/src/main/java/com/azure/core/tracing/opentelemetry/implementation/HttpTraceUtil.java", "diffHunk": "@@ -25,21 +26,24 @@\n     private static final Status STATUS_502 = Status.UNKNOWN.withDescription(\"Bad Gateway\");\n     private static final Status STATUS_505 = Status.UNKNOWN.withDescription(\"HTTP Version not supported\");\n \n-    private HttpTraceUtil() { }\n+    private final ClientLogger logger = new ClientLogger(HttpTraceUtil.class);\n+\n+    private HttpTraceUtil() {\n+    }\n \n     /**\n-     * Parse OpenTelemetry Status from HTTP response status code.\n+     * Parse OpenCensus Status from HTTP response status code.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ab295727c93832733f7507e6a8db2fa716cd808"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MTQ2MDE2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/tracing/Tracer.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMjoxMzoyM1rOFaKdpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMTo0NDowNVrOFbo6tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk3ODcyNQ==", "bodyText": "Can we include tracing in the name of this context key? This will make it clear as to what this key is used for. AZ_NAMESPACE is too generic.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7097#discussion_r362978725", "createdAt": "2020-01-03T22:13:23Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/tracing/Tracer.java", "diffHunk": "@@ -57,6 +57,11 @@\n      */\n     String SPAN_BUILDER_KEY = \"builder\";\n \n+    /**\n+     * Key for {@link Context} which indicates that the context contains the Azure resource provider namespace.\n+     */\n+    String AZ_NAMESPACE_KEY = \"az.namespace\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ab295727c93832733f7507e6a8db2fa716cd808"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4MDQ4Ng==", "bodyText": "but wouldn't coming from Tracer class help to understand that it is coming from tracing concepts.\nI think it would repetitive to mention it in the variable name and class name too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7097#discussion_r362980486", "createdAt": "2020-01-03T22:20:43Z", "author": {"login": "samvaity"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/tracing/Tracer.java", "diffHunk": "@@ -57,6 +57,11 @@\n      */\n     String SPAN_BUILDER_KEY = \"builder\";\n \n+    /**\n+     * Key for {@link Context} which indicates that the context contains the Azure resource provider namespace.\n+     */\n+    String AZ_NAMESPACE_KEY = \"az.namespace\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk3ODcyNQ=="}, "originalCommit": {"oid": "9ab295727c93832733f7507e6a8db2fa716cd808"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4MjY5OQ==", "bodyText": "No, context is a property bag that is passed around quite a lot in all layers of our library. Having a key named az.namespace in context will not necessarily be clear as to what this namespace is and why it's used.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7097#discussion_r362982699", "createdAt": "2020-01-03T22:30:36Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/tracing/Tracer.java", "diffHunk": "@@ -57,6 +57,11 @@\n      */\n     String SPAN_BUILDER_KEY = \"builder\";\n \n+    /**\n+     * Key for {@link Context} which indicates that the context contains the Azure resource provider namespace.\n+     */\n+    String AZ_NAMESPACE_KEY = \"az.namespace\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk3ODcyNQ=="}, "originalCommit": {"oid": "9ab295727c93832733f7507e6a8db2fa716cd808"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ2NTY0OA==", "bodyText": "I think there is a slight mismatch in communication here. Srikanta is talking about the string \"az.namespace\", not the variable name \"AZ_NAMESPACE_KEY\" (despite the fact he used \"AZ_NAMESPACE\" in his comment). His argument is valid - imagine have a Map or a Context full of keys, one of which is \"az.namespace\" - it isn't clear where that came from or how it is relevant. If it had a more specific value then users might better infer that it is tracing related.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7097#discussion_r363465648", "createdAt": "2020-01-06T20:20:01Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/tracing/Tracer.java", "diffHunk": "@@ -57,6 +57,11 @@\n      */\n     String SPAN_BUILDER_KEY = \"builder\";\n \n+    /**\n+     * Key for {@link Context} which indicates that the context contains the Azure resource provider namespace.\n+     */\n+    String AZ_NAMESPACE_KEY = \"az.namespace\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk3ODcyNQ=="}, "originalCommit": {"oid": "9ab295727c93832733f7507e6a8db2fa716cd808"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUyNjI2Mw==", "bodyText": "Updated both the key and value to include tracing, i.e AZ_TRACING_NAMESPACE_KEY and az.tracing.namespace. The span attribute will still have the key az.namespace.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7097#discussion_r364526263", "createdAt": "2020-01-09T01:44:05Z", "author": {"login": "samvaity"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/tracing/Tracer.java", "diffHunk": "@@ -57,6 +57,11 @@\n      */\n     String SPAN_BUILDER_KEY = \"builder\";\n \n+    /**\n+     * Key for {@link Context} which indicates that the context contains the Azure resource provider namespace.\n+     */\n+    String AZ_NAMESPACE_KEY = \"az.namespace\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk3ODcyNQ=="}, "originalCommit": {"oid": "9ab295727c93832733f7507e6a8db2fa716cd808"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MTQ2MDcxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-tracing-opentelemetry/src/main/java/com/azure/core/tracing/opentelemetry/OpenTelemetryTracer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMjoxMzo0OVrOFaKeAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMTozNDoxOFrOFbozlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk3ODgxOQ==", "bodyText": "Should this add the attribute if the parsed name is \"\"? It appear in the policy it doesn't.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7097#discussion_r362978819", "createdAt": "2020-01-03T22:13:49Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-tracing-opentelemetry/src/main/java/com/azure/core/tracing/opentelemetry/OpenTelemetryTracer.java", "diffHunk": "@@ -48,7 +48,10 @@ public Context start(String spanName, Context context) {\n \n         Builder spanBuilder = getSpanBuilder(spanName, context);\n         Span span = spanBuilder.startSpan();\n-\n+        if (span.isRecording()) {\n+            span.setAttribute(AZ_NAMESPACE_KEY,\n+                AttributeValue.stringAttributeValue(HttpTraceUtil.parseNamespaceProvider(spanName)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ab295727c93832733f7507e6a8db2fa716cd808"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUyNDQzNw==", "bodyText": "updated it to not have the span attribute if it does not exist.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7097#discussion_r364524437", "createdAt": "2020-01-09T01:34:18Z", "author": {"login": "samvaity"}, "path": "sdk/core/azure-core-tracing-opentelemetry/src/main/java/com/azure/core/tracing/opentelemetry/OpenTelemetryTracer.java", "diffHunk": "@@ -48,7 +48,10 @@ public Context start(String spanName, Context context) {\n \n         Builder spanBuilder = getSpanBuilder(spanName, context);\n         Span span = spanBuilder.startSpan();\n-\n+        if (span.isRecording()) {\n+            span.setAttribute(AZ_NAMESPACE_KEY,\n+                AttributeValue.stringAttributeValue(HttpTraceUtil.parseNamespaceProvider(spanName)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk3ODgxOQ=="}, "originalCommit": {"oid": "9ab295727c93832733f7507e6a8db2fa716cd808"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTQ4MjQzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/rest/RestProxy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMTozNTowMFrOFbo0GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMTozNTowMFrOFbo0GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUyNDU2OA==", "bodyText": "call the other constructor from here instead of duplicating initialization code in both constructors.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7097#discussion_r364524568", "createdAt": "2020-01-09T01:35:00Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/rest/RestProxy.java", "diffHunk": "@@ -81,6 +85,27 @@ private RestProxy(HttpPipeline httpPipeline, SerializerAdapter serializer, Swagg\n         this.interfaceParser = interfaceParser;\n         this.decoder = new HttpResponseDecoder(this.serializer);\n         this.responseConstructorsCache = new ResponseConstructorsCache();\n+        this.tracerSpanAttributes = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75063750978b0c5f87aff893772d1d235fc2ce6a"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTQ4NDU2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/rest/RestProxy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMTozNzowN1rOFbo1hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMTozNzowN1rOFbo1hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUyNDkzNA==", "bodyText": "same here - call this create method from the other create overload method", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7097#discussion_r364524934", "createdAt": "2020-01-09T01:37:07Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/rest/RestProxy.java", "diffHunk": "@@ -685,4 +729,25 @@ private static HttpPipeline createDefaultPipeline(HttpPipelinePolicy credentials\n         return (A) Proxy.newProxyInstance(swaggerInterface.getClassLoader(), new Class<?>[]{swaggerInterface},\n             restProxy);\n     }\n+\n+    /**\n+     * Create a proxy implementation of the provided Swagger interface.\n+     *\n+     * @param swaggerInterface the Swagger interface to provide a proxy implementation for\n+     * @param httpPipeline the HttpPipelinePolicy and HttpClient pipeline that will be used to send Http\n+     *     requests\n+     * @param serializer the serializer that will be used to convert POJOs to and from request and\n+     *     response bodies\n+     * @param <A> the type of the Swagger interface.\n+     * @param tracerSpanAttributes the attributes to be set on the tracer spans.\n+     * @return a proxy implementation of the provided Swagger interface\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <A> A create(Class<A> swaggerInterface, HttpPipeline httpPipeline, SerializerAdapter serializer,\n+        TracerSpanAttributes tracerSpanAttributes) {\n+        final SwaggerInterfaceParser interfaceParser = new SwaggerInterfaceParser(swaggerInterface, serializer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75063750978b0c5f87aff893772d1d235fc2ce6a"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTQ4Nzc1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/tracing/TracerSpanAttributes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMTo0MDowNVrOFbo3mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMjoxMjo0OFrOFcE87g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUyNTQ2NQ==", "bodyText": "Since this has just one attribute now, I am assuming new attributes will be added later. If that's the intent, then shouldn't we make this a fluent API? A public constructor with just one attribute now will result in breaking changes if we need more attributes here later.\nAlternatively, do we need this attributes class, if all fields in here are going to be String types? Can we instead use Map<String, String> as properties bag?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7097#discussion_r364525465", "createdAt": "2020-01-09T01:40:05Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/tracing/TracerSpanAttributes.java", "diffHunk": "@@ -0,0 +1,29 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.tracing;\n+\n+/**\n+ * Class to hold the attributes for tracer spans.\n+ */\n+public class TracerSpanAttributes {\n+    private final String resourceProviderName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75063750978b0c5f87aff893772d1d235fc2ce6a"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk4NTU4Mg==", "bodyText": "Span attributes coming from clients would be expected to be strings and hence updating it to use a Map<String, String> instead.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7097#discussion_r364985582", "createdAt": "2020-01-09T22:12:48Z", "author": {"login": "samvaity"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/tracing/TracerSpanAttributes.java", "diffHunk": "@@ -0,0 +1,29 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.tracing;\n+\n+/**\n+ * Class to hold the attributes for tracer spans.\n+ */\n+public class TracerSpanAttributes {\n+    private final String resourceProviderName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUyNTQ2NQ=="}, "originalCommit": {"oid": "75063750978b0c5f87aff893772d1d235fc2ce6a"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTQ5MTk5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/tracing/TracerProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMTo0MzozMlrOFbo6Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMjoxMTozNVrOFcE7Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUyNjE0Nw==", "bodyText": "Can this be marked as a @FunctionalInterface? If yes, can we instead use Java's built-in Supplier?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7097#discussion_r364526147", "createdAt": "2020-01-09T01:43:32Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/tracing/TracerProperties.java", "diffHunk": "@@ -0,0 +1,17 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.tracing;\n+\n+/**\n+ * A generic interface for setting tracing properties on outgoing HTTP requests.\n+ */\n+public interface TracerProperties {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27c5372fd04a199085f6f742ec7eabe98fa8858b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk4NTExNQ==", "bodyText": "updated it to be  a supplier.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7097#discussion_r364985115", "createdAt": "2020-01-09T22:11:35Z", "author": {"login": "samvaity"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/tracing/TracerProperties.java", "diffHunk": "@@ -0,0 +1,17 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.tracing;\n+\n+/**\n+ * A generic interface for setting tracing properties on outgoing HTTP requests.\n+ */\n+public interface TracerProperties {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUyNjE0Nw=="}, "originalCommit": {"oid": "27c5372fd04a199085f6f742ec7eabe98fa8858b"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTQ5NjYwOnYy", "diffSide": "RIGHT", "path": "eng/versioning/version_client.txt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMTo0NzowNlrOFbo8-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxODoxNzoyMlrOFb_DCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUyNjg0MQ==", "bodyText": "I am not sure why we are using unreleased for this. There's also this on L8 - com.azure:azure-core;1.2.0;1.3.0-beta.1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7097#discussion_r364526841", "createdAt": "2020-01-09T01:47:06Z", "author": {"login": "srnagar"}, "path": "eng/versioning/version_client.txt", "diffHunk": "@@ -36,3 +36,4 @@ com.azure:azure-storage-queue;12.2.0-beta.1;12.2.0\n # Format;\n # unreleased_<groupId>:<artifactId>;dependency-version\n unreleased_com.azure:azure-core-amqp;1.0.1\n+unreleased_com.azure:azure-core;1.3.0-beta.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27c5372fd04a199085f6f742ec7eabe98fa8858b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4ODg0MA==", "bodyText": "Because with recent updates all libraries are now using the released version of core and not the dependency version. And for these changes we will need to use the current version which will have to be included this way.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7097#discussion_r364888840", "createdAt": "2020-01-09T18:17:22Z", "author": {"login": "samvaity"}, "path": "eng/versioning/version_client.txt", "diffHunk": "@@ -36,3 +36,4 @@ com.azure:azure-storage-queue;12.2.0-beta.1;12.2.0\n # Format;\n # unreleased_<groupId>:<artifactId>;dependency-version\n unreleased_com.azure:azure-core-amqp;1.0.1\n+unreleased_com.azure:azure-core;1.3.0-beta.1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUyNjg0MQ=="}, "originalCommit": {"oid": "27c5372fd04a199085f6f742ec7eabe98fa8858b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTE4MTU0OnYy", "diffSide": "RIGHT", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/main/java/com/azure/data/appconfiguration/ConfigurationAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDoxNDozNVrOFdDPSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDoxNDozNVrOFdDPSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwNjA4OA==", "bodyText": "This map should be immutable.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7097#discussion_r366006088", "createdAt": "2020-01-13T20:14:35Z", "author": {"login": "srnagar"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/main/java/com/azure/data/appconfiguration/ConfigurationAsyncClient.java", "diffHunk": "@@ -54,6 +58,8 @@\n     private final ClientLogger logger = new ClientLogger(ConfigurationAsyncClient.class);\n \n     private static final String ETAG_ANY = \"*\";\n+    private static final Supplier<Map<String, String>> APP_CONFIG_TRACING_PROPERTIES = () ->\n+        new HashMap<String, String>() {{ put(AZ_TRACING_NAMESPACE_KEY, \"Microsoft.AppConfiguration\"); }};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6bdf66ed60f4f30cc30e0211eb930864c08ccfb"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 645, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}