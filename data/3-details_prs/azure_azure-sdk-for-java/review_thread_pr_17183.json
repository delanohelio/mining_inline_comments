{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1NjgwNDEx", "number": 17183, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMjowNzozN1rOE16xOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMTo1Nzo0OVrOE2SehA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTcyODU2OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyRequestAttributes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMjowNzozN1rOHudnkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMjo1OTozMlrOHueeyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ4MTgxMQ==", "bodyText": "Was this missing from previous versions?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17183#discussion_r518481811", "createdAt": "2020-11-06T02:07:37Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyRequestAttributes.java", "diffHunk": "@@ -74,6 +76,12 @@\n     @JsonProperty(value = \"updated\", access = JsonProperty.Access.WRITE_ONLY)\n     private Long updated;\n \n+    /**\n+     * Indicates if the private key can be exported.\n+     */\n+    @JsonProperty(value = \"exportable\")\n+    private Boolean exportable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f594cb5994168c5264fa59521b12ea3f4a77bdd"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5NTk0NA==", "bodyText": "I added the exportable property to a few places based on the new swagger. I don't think it was supposed to be there before.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17183#discussion_r518495944", "createdAt": "2020-11-06T02:59:32Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyRequestAttributes.java", "diffHunk": "@@ -74,6 +76,12 @@\n     @JsonProperty(value = \"updated\", access = JsonProperty.Access.WRITE_ONLY)\n     private Long updated;\n \n+    /**\n+     * Indicates if the private key can be exported.\n+     */\n+    @JsonProperty(value = \"exportable\")\n+    private Boolean exportable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ4MTgxMQ=="}, "originalCommit": {"oid": "4f594cb5994168c5264fa59521b12ea3f4a77bdd"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzUzMzc4OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyAsyncClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMDo0MjoyNVrOHvBg3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxOToxNDozOVrOHvZpIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2OTkxOQ==", "bodyText": "Version is not actually required, but you send it as an empty string? Wouldn't null make more sense, or is that not idiomatic with Java? If null is okay, I wouldn't validate that it's non-null in the overload. If they use that one and still pass null, it should be as acceptable as calling this overload.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17183#discussion_r519069919", "createdAt": "2020-11-07T00:42:25Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyAsyncClient.java", "diffHunk": "@@ -492,14 +496,108 @@ Duration getDefaultPollingInterval() {\n         KeyImportRequestParameters parameters = new KeyImportRequestParameters()\n             .setKey(importKeyOptions.getKey())\n             .setHsm(importKeyOptions.isHardwareProtected())\n-            .setKeyAttributes(new KeyRequestAttributes(importKeyOptions));\n+            .setKeyAttributes(new KeyRequestAttributes(importKeyOptions))\n+            .setKeyReleasePolicy(importKeyOptions.getKeyReleasePolicy());\n         return service.importKey(vaultUrl, importKeyOptions.getName(), apiVersion, ACCEPT_LANGUAGE, parameters,\n             CONTENT_TYPE_HEADER_VALUE, context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n             .doOnRequest(ignored -> logger.info(\"Importing key - {}\", importKeyOptions.getName()))\n             .doOnSuccess(response -> logger.info(\"Imported key - {}\", response.getValue().getName()))\n             .doOnError(error -> logger.warning(\"Failed to import key - {}\", importKeyOptions.getName(), error));\n     }\n \n+    /**\n+     * Exports the latest version of a key from the key vault. The export key operation may be used to import any key\n+     * from the Azure Key Vault as long as it is marked as exportable and its release policy is satisfied.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     * <p>Exports a key from a key vault. Subscribes to the call asynchronously and prints out the newly exported key\n+     * details when a response has been received.</p>\n+     *\n+     * {@codesnippet com.azure.security.keyvault.keys.keyasyncclient.exportKey#String-String}\n+     *\n+     * @param name The name of the key to be exported.\n+     * @param environment The target environment assertion.\n+     * @return A {@link Mono} containing the {@link KeyVaultKey exported key}.\n+     * @throws NullPointerException If the specified {@code name} or {@code environment} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<KeyVaultKey> exportKey(String name, String environment) {\n+        try {\n+            return exportKeyWithResponse(name, \"\", environment).flatMap(FluxUtil::toMono);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f594cb5994168c5264fa59521b12ea3f4a77bdd"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA4Njc5OQ==", "bodyText": "Since it's a part of the path I thought it would be required. Is calling keys/{key-name}/export equivalent to calling keys/{key-name}/{key-version}/export with the latest key version?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17183#discussion_r519086799", "createdAt": "2020-11-07T03:00:28Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyAsyncClient.java", "diffHunk": "@@ -492,14 +496,108 @@ Duration getDefaultPollingInterval() {\n         KeyImportRequestParameters parameters = new KeyImportRequestParameters()\n             .setKey(importKeyOptions.getKey())\n             .setHsm(importKeyOptions.isHardwareProtected())\n-            .setKeyAttributes(new KeyRequestAttributes(importKeyOptions));\n+            .setKeyAttributes(new KeyRequestAttributes(importKeyOptions))\n+            .setKeyReleasePolicy(importKeyOptions.getKeyReleasePolicy());\n         return service.importKey(vaultUrl, importKeyOptions.getName(), apiVersion, ACCEPT_LANGUAGE, parameters,\n             CONTENT_TYPE_HEADER_VALUE, context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n             .doOnRequest(ignored -> logger.info(\"Importing key - {}\", importKeyOptions.getName()))\n             .doOnSuccess(response -> logger.info(\"Imported key - {}\", response.getValue().getName()))\n             .doOnError(error -> logger.warning(\"Failed to import key - {}\", importKeyOptions.getName(), error));\n     }\n \n+    /**\n+     * Exports the latest version of a key from the key vault. The export key operation may be used to import any key\n+     * from the Azure Key Vault as long as it is marked as exportable and its release policy is satisfied.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     * <p>Exports a key from a key vault. Subscribes to the call asynchronously and prints out the newly exported key\n+     * details when a response has been received.</p>\n+     *\n+     * {@codesnippet com.azure.security.keyvault.keys.keyasyncclient.exportKey#String-String}\n+     *\n+     * @param name The name of the key to be exported.\n+     * @param environment The target environment assertion.\n+     * @return A {@link Mono} containing the {@link KeyVaultKey exported key}.\n+     * @throws NullPointerException If the specified {@code name} or {@code environment} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<KeyVaultKey> exportKey(String name, String environment) {\n+        try {\n+            return exportKeyWithResponse(name, \"\", environment).flatMap(FluxUtil::toMono);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2OTkxOQ=="}, "originalCommit": {"oid": "4f594cb5994168c5264fa59521b12ea3f4a77bdd"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ2NTI0OQ==", "bodyText": "Yes. I asked about this even with the older APIs. Their resolver on the backend checks the operation against the last path part. All the other APIs with optional versions also list them as required in swagger. You could elide the double slash (e.g. \"/keys/{key-name}//export\") in the URL in that case, but in my experience with the KV APIs I haven't seen it make a difference.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17183#discussion_r519465249", "createdAt": "2020-11-08T19:14:39Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyAsyncClient.java", "diffHunk": "@@ -492,14 +496,108 @@ Duration getDefaultPollingInterval() {\n         KeyImportRequestParameters parameters = new KeyImportRequestParameters()\n             .setKey(importKeyOptions.getKey())\n             .setHsm(importKeyOptions.isHardwareProtected())\n-            .setKeyAttributes(new KeyRequestAttributes(importKeyOptions));\n+            .setKeyAttributes(new KeyRequestAttributes(importKeyOptions))\n+            .setKeyReleasePolicy(importKeyOptions.getKeyReleasePolicy());\n         return service.importKey(vaultUrl, importKeyOptions.getName(), apiVersion, ACCEPT_LANGUAGE, parameters,\n             CONTENT_TYPE_HEADER_VALUE, context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n             .doOnRequest(ignored -> logger.info(\"Importing key - {}\", importKeyOptions.getName()))\n             .doOnSuccess(response -> logger.info(\"Imported key - {}\", response.getValue().getName()))\n             .doOnError(error -> logger.warning(\"Failed to import key - {}\", importKeyOptions.getName(), error));\n     }\n \n+    /**\n+     * Exports the latest version of a key from the key vault. The export key operation may be used to import any key\n+     * from the Azure Key Vault as long as it is marked as exportable and its release policy is satisfied.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     * <p>Exports a key from a key vault. Subscribes to the call asynchronously and prints out the newly exported key\n+     * details when a response has been received.</p>\n+     *\n+     * {@codesnippet com.azure.security.keyvault.keys.keyasyncclient.exportKey#String-String}\n+     *\n+     * @param name The name of the key to be exported.\n+     * @param environment The target environment assertion.\n+     * @return A {@link Mono} containing the {@link KeyVaultKey exported key}.\n+     * @throws NullPointerException If the specified {@code name} or {@code environment} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<KeyVaultKey> exportKey(String name, String environment) {\n+        try {\n+            return exportKeyWithResponse(name, \"\", environment).flatMap(FluxUtil::toMono);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2OTkxOQ=="}, "originalCommit": {"oid": "4f594cb5994168c5264fa59521b12ea3f4a77bdd"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzU0Nzc1OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMDo1Mzo0MFrOHvBolA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMTowMzozN1rOHvBvCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA3MTg5Mg==", "bodyText": "Given the swagger is \"release_policy\", I think these should actually be ReleasePolicy instead of KeyReleasePolicy. That was in the original bug as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17183#discussion_r519071892", "createdAt": "2020-11-07T00:53:40Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyAsyncClient.java", "diffHunk": "@@ -213,7 +213,8 @@ Duration getDefaultPollingInterval() {\n         KeyRequestParameters parameters = new KeyRequestParameters()\n             .setKty(createKeyOptions.getKeyType())\n             .setKeyOps(createKeyOptions.getKeyOperations())\n-            .setKeyAttributes(new KeyRequestAttributes(createKeyOptions));\n+            .setKeyAttributes(new KeyRequestAttributes(createKeyOptions))\n+            .setKeyReleasePolicy(createKeyOptions.getKeyReleasePolicy());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f594cb5994168c5264fa59521b12ea3f4a77bdd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA3MzU0NQ==", "bodyText": "No problem, thanks for pointing it out.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17183#discussion_r519073545", "createdAt": "2020-11-07T01:03:37Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyAsyncClient.java", "diffHunk": "@@ -213,7 +213,8 @@ Duration getDefaultPollingInterval() {\n         KeyRequestParameters parameters = new KeyRequestParameters()\n             .setKty(createKeyOptions.getKeyType())\n             .setKeyOps(createKeyOptions.getKeyOperations())\n-            .setKeyAttributes(new KeyRequestAttributes(createKeyOptions));\n+            .setKeyAttributes(new KeyRequestAttributes(createKeyOptions))\n+            .setKeyReleasePolicy(createKeyOptions.getKeyReleasePolicy());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA3MTg5Mg=="}, "originalCommit": {"oid": "4f594cb5994168c5264fa59521b12ea3f4a77bdd"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzU2NDU0OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/models/KeyReleasePolicy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMTowODowOFrOHvBxlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMTowODowOFrOHvBxlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA3NDE5Ng==", "bodyText": "You also might not want to encode this. It's tight coupling. Sending null is fine (not required), in which case this is what the server should default to.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17183#discussion_r519074196", "createdAt": "2020-11-07T01:08:08Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/models/KeyReleasePolicy.java", "diffHunk": "@@ -0,0 +1,67 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * Class that contains the policy rules under which the key can be exported.\n+ */\n+@Fluent\n+public class KeyReleasePolicy {\n+    /**\n+     * Content type and version of key release policy. The default value is:\n+     * 'application/json; charset=utf-8; version=1.0'.\n+     */\n+    @JsonProperty(value = \"contentType\")\n+    private String contentType = \"application/json; charset=utf-8; version=1.0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f594cb5994168c5264fa59521b12ea3f4a77bdd"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzYxMjg0OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMTo1Nzo0OVrOHvCK7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMjozMjo1OFrOHvCY9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA4MDY4NQ==", "bodyText": "Given you're copying this around and because KeyProperties needs it anyway, perhaps we should just define it on KeyProperties, which means KeyVaultBundle.properties.releasePolicy is where'd you get it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17183#discussion_r519080685", "createdAt": "2020-11-07T01:57:49Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyAsyncClient.java", "diffHunk": "@@ -659,7 +757,8 @@ Duration getDefaultPollingInterval() {\n         context = context == null ? Context.NONE : context;\n         KeyRequestParameters parameters = new KeyRequestParameters()\n             .setTags(keyProperties.getTags())\n-            .setKeyAttributes(new KeyRequestAttributes(keyProperties));\n+            .setKeyAttributes(new KeyRequestAttributes(keyProperties))\n+            .setKeyReleasePolicy(keyProperties.getKeyReleasePolicy());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f594cb5994168c5264fa59521b12ea3f4a77bdd"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA4NDI3OQ==", "bodyText": "Agreed based on a separate conversation we had. Let's keep it only in KeyProperties.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17183#discussion_r519084279", "createdAt": "2020-11-07T02:32:58Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyAsyncClient.java", "diffHunk": "@@ -659,7 +757,8 @@ Duration getDefaultPollingInterval() {\n         context = context == null ? Context.NONE : context;\n         KeyRequestParameters parameters = new KeyRequestParameters()\n             .setTags(keyProperties.getTags())\n-            .setKeyAttributes(new KeyRequestAttributes(keyProperties));\n+            .setKeyAttributes(new KeyRequestAttributes(keyProperties))\n+            .setKeyReleasePolicy(keyProperties.getKeyReleasePolicy());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA4MDY4NQ=="}, "originalCommit": {"oid": "4f594cb5994168c5264fa59521b12ea3f4a77bdd"}, "originalPosition": 147}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3007, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}