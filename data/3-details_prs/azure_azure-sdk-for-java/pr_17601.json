{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyMDYyOTA5", "number": 17601, "title": "[service bus] Use ServiceBusException rather than AmqpException", "bodyText": "ServiceBusException is basically a friendly envelope around an AmqpException. It's primary purpose is to give the user something simple they can try/catch that has a 'reason' code so they can programatically react to certain kinds of failures.\n(as a bonus I'm also tossing in the rename that we want to do for ReceiveMode to ServiceBusReceiveMode).\nFixes #17500 (exception type), #17555 (receive mode)", "createdAt": "2020-11-17T00:41:39Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601", "merged": true, "mergeCommit": {"oid": "66eba6ce55b8b2110a601f09c741425a64ce7fe1"}, "closed": true, "closedAt": "2020-11-18T00:40:42Z", "author": {"login": "richardpark-msft"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddOv34AFqTUzMTk0MDY3MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABddo4MMgFqTUzMzE1ODM1NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxOTQwNjcw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#pullrequestreview-531940670", "createdAt": "2020-11-17T00:52:00Z", "commit": {"oid": "1b96dde81bc8abbd435b323072a984852b015817"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMDo1MjowMFrOH0gEbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMDo1MjowMFrOH0gEbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxMzQyMg==", "bodyText": "Interesting that this is on the exception itself. Is it the same in JS?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r524813422", "createdAt": "2020-11-17T00:52:00Z", "author": {"login": "JoshLove-msft"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusException.java", "diffHunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.amqp.exception.AmqpErrorCondition;\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.exception.AzureException;\n+\n+/**\n+ * Defines {@link ServiceBusException} which has additional information about the operation that caused the\n+ * error.\n+ * @see ServiceBusErrorSource\n+ */\n+public final class ServiceBusException extends AzureException {\n+    private final transient ServiceBusErrorSource errorSource;\n+    private final transient ServiceBusFailureReason reason;\n+    private final boolean isTransient;\n+\n+    /**\n+     * @param throwable   for the error happened.\n+     * @param errorSource indicating which api caused the error.\n+     */\n+    public ServiceBusException(Throwable throwable, ServiceBusErrorSource errorSource) {\n+        super(throwable.getMessage(), throwable);\n+        this.errorSource = errorSource;\n+\n+        if (throwable instanceof AmqpException) {\n+            AmqpException amqpException = (AmqpException) throwable;\n+            reason = getServiceBusFailureReasonFromException(amqpException);\n+            isTransient = amqpException.isTransient();\n+        } else {\n+            reason = ServiceBusFailureReason.GENERAL_ERROR;\n+            isTransient = false;\n+        }\n+    }\n+\n+    /**\n+     * Gets the {@link ServiceBusErrorSource} in case of any errors.\n+     * @return the {@link ServiceBusErrorSource}\n+     */\n+    public ServiceBusErrorSource getErrorSource() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b96dde81bc8abbd435b323072a984852b015817"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ebd1de5b0ec055219bf75b40539b0e047792cb3", "author": {"user": {"login": "richardpark-msft", "name": "Richard Park"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5ebd1de5b0ec055219bf75b40539b0e047792cb3", "committedDate": "2020-11-17T00:58:47Z", "message": "Changing over to using ServiceBusException\n\nServiceBusException summarizes the AmqpException excpetion so users\ncan switch off the .reason() field to handle common or user-handleable\nerrors."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1b96dde81bc8abbd435b323072a984852b015817", "author": {"user": {"login": "richardpark-msft", "name": "Richard Park"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1b96dde81bc8abbd435b323072a984852b015817", "committedDate": "2020-11-17T00:38:29Z", "message": "Removing some TODO items after some testing confirms the mappings work."}, "afterCommit": {"oid": "5ebd1de5b0ec055219bf75b40539b0e047792cb3", "author": {"user": {"login": "richardpark-msft", "name": "Richard Park"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5ebd1de5b0ec055219bf75b40539b0e047792cb3", "committedDate": "2020-11-17T00:58:47Z", "message": "Changing over to using ServiceBusException\n\nServiceBusException summarizes the AmqpException excpetion so users\ncan switch off the .reason() field to handle common or user-handleable\nerrors."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a2b7c13c94a8be215b402b96479ea314c38e828", "author": {"user": {"login": "richardpark-msft", "name": "Richard Park"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1a2b7c13c94a8be215b402b96479ea314c38e828", "committedDate": "2020-11-17T01:04:08Z", "message": "Removing import collapse."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcfd3012651bd64bac5612c2150a4aa1cf53ecb1", "author": {"user": {"login": "richardpark-msft", "name": "Richard Park"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/dcfd3012651bd64bac5612c2150a4aa1cf53ecb1", "committedDate": "2020-11-17T01:08:16Z", "message": "Fixing verify errors."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e965d9b69b2125ac68aaba5fb135105849eb67d", "author": {"user": {"login": "richardpark-msft", "name": "Richard Park"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8e965d9b69b2125ac68aaba5fb135105849eb67d", "committedDate": "2020-11-17T01:16:34Z", "message": "Fixing verify errors."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "810a107f1e8fd724e9c79646e5e6375a9224615a", "author": {"user": {"login": "richardpark-msft", "name": "Richard Park"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/810a107f1e8fd724e9c79646e5e6375a9224615a", "committedDate": "2020-11-17T01:58:23Z", "message": "Pass in an entire context object, rather than just the throwable."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1edca1ce085695988d29bdcbdaab5b537e67b11a", "author": {"user": {"login": "richardpark-msft", "name": "Richard Park"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1edca1ce085695988d29bdcbdaab5b537e67b11a", "committedDate": "2020-11-17T02:13:49Z", "message": "Fixing more verify issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxOTcxNTgy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#pullrequestreview-531971582", "createdAt": "2020-11-17T02:14:49Z", "commit": {"oid": "810a107f1e8fd724e9c79646e5e6375a9224615a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjoxNDo0OVrOH0htAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjoxNDo0OVrOH0htAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0MDE5NA==", "bodyText": "Assuming that the Error Source will be restricted to the processor only as per https://github.com/Azure/azure-sdk-for-java/pull/17601/files#r524813422, we dont need the above additions right?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r524840194", "createdAt": "2020-11-17T02:14:49Z", "author": {"login": "ramya-rao-a"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java", "diffHunk": "@@ -36,4 +36,12 @@\n     /** Error while session is closed.*/\n     public static final ServiceBusErrorSource CLOSE_SESSION = fromString(\"CLOSE_SESSION\",\n         ServiceBusErrorSource.class);\n+\n+    /** Error while sending a message.*/\n+    public static final ServiceBusErrorSource SENDING = fromString(\"SENDING\",\n+            ServiceBusErrorSource.class);\n+\n+    /** Error while trying to do an operation on the management link. */\n+    public static final ServiceBusErrorSource MANAGEMENT = fromString(\"MANAGEMENT\",\n+            ServiceBusErrorSource.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "810a107f1e8fd724e9c79646e5e6375a9224615a"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "185cd5935e6412004c189baa46e55632da23c38c", "author": {"user": {"login": "richardpark-msft", "name": "Richard Park"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/185cd5935e6412004c189baa46e55632da23c38c", "committedDate": "2020-11-17T02:16:17Z", "message": "Fixing more verify issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNjQ0Njcz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#pullrequestreview-532644673", "createdAt": "2020-11-17T17:58:34Z", "commit": {"oid": "810a107f1e8fd724e9c79646e5e6375a9224615a"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzo1ODozNFrOH1CHVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODozMToxOFrOH1Da8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3MTIyMw==", "bodyText": "Make this final. Also, should we just name this as ServiceBusErrorContext?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525371223", "createdAt": "2020-11-17T17:58:34Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusProcessErrorContext.java", "diffHunk": "@@ -0,0 +1,60 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+/**\n+ * Context for errors handled by the Service Bus processor.\n+ */\n+public class ServiceBusProcessErrorContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "810a107f1e8fd724e9c79646e5e6375a9224615a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3ODE2NQ==", "bodyText": "Why do we need fullyQualifiedNamespace and entityPath? If this is needed for the error context, we should consider adding it to the ServiceBusReceivedMessageContext too? I know Event Hubs had these properties on both event and error context. So, we should consider adding it to both places.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525378165", "createdAt": "2020-11-17T18:09:20Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusProcessErrorContext.java", "diffHunk": "@@ -0,0 +1,60 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+/**\n+ * Context for errors handled by the Service Bus processor.\n+ */\n+public class ServiceBusProcessErrorContext {\n+    private final Throwable exception;\n+    private final ServiceBusErrorSource errorSource;\n+    private final String fullyQualifiedNamespace;\n+    private final String entityPath;\n+\n+    ServiceBusProcessErrorContext(Throwable throwable, String fullyQualifiedNamespace, String entityPath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "810a107f1e8fd724e9c79646e5e6375a9224615a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4NDkzMw==", "bodyText": "Do we need the constructor to be public?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525384933", "createdAt": "2020-11-17T18:19:31Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusException.java", "diffHunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.amqp.exception.AmqpErrorCondition;\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.exception.AzureException;\n+\n+/**\n+ * Defines {@link ServiceBusException} which has additional information about the operation that caused the\n+ * error.\n+ * @see ServiceBusErrorSource\n+ */\n+public final class ServiceBusException extends AzureException {\n+    private final transient ServiceBusErrorSource errorSource;\n+    private final transient ServiceBusFailureReason reason;\n+    private final boolean isTransient;\n+\n+    /**\n+     * @param throwable for the error happened.\n+     * @param errorSource indicating which api caused the error.\n+     */\n+    public ServiceBusException(Throwable throwable, ServiceBusErrorSource errorSource) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185cd5935e6412004c189baa46e55632da23c38c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4Nzk1Ng==", "bodyText": "Now that the error context includes the error source, this method can be removed from this class.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525387956", "createdAt": "2020-11-17T18:24:13Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusException.java", "diffHunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.amqp.exception.AmqpErrorCondition;\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.exception.AzureException;\n+\n+/**\n+ * Defines {@link ServiceBusException} which has additional information about the operation that caused the\n+ * error.\n+ * @see ServiceBusErrorSource\n+ */\n+public final class ServiceBusException extends AzureException {\n+    private final transient ServiceBusErrorSource errorSource;\n+    private final transient ServiceBusFailureReason reason;\n+    private final boolean isTransient;\n+\n+    /**\n+     * @param throwable   for the error happened.\n+     * @param errorSource indicating which api caused the error.\n+     */\n+    public ServiceBusException(Throwable throwable, ServiceBusErrorSource errorSource) {\n+        super(throwable.getMessage(), throwable);\n+        this.errorSource = errorSource;\n+\n+        if (throwable instanceof AmqpException) {\n+            AmqpException amqpException = (AmqpException) throwable;\n+            reason = getServiceBusFailureReasonFromException(amqpException);\n+            isTransient = amqpException.isTransient();\n+        } else {\n+            reason = ServiceBusFailureReason.GENERAL_ERROR;\n+            isTransient = false;\n+        }\n+    }\n+\n+    /**\n+     * Gets the {@link ServiceBusErrorSource} in case of any errors.\n+     * @return the {@link ServiceBusErrorSource}\n+     */\n+    public ServiceBusErrorSource getErrorSource() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxMzQyMg=="}, "originalCommit": {"oid": "1b96dde81bc8abbd435b323072a984852b015817"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5MDE5Mg==", "bodyText": "nit: update the comment too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525390192", "createdAt": "2020-11-17T18:27:23Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1200,22 +1201,27 @@ private String getLinkName(String sessionId) {\n         } else if (!receiverOptions.isSessionReceiver()) {\n             return monoError(logger, new IllegalStateException(\"Cannot get session state on a non-session receiver.\"));\n         }\n+\n+        Mono<byte[]> result;\n+\n         if (sessionManager != null) {\n-            return sessionManager.getSessionState(sessionId);\n+            result =  sessionManager.getSessionState(sessionId);\n         } else {\n-            return connectionProcessor\n+            result =  connectionProcessor\n                 .flatMap(connection -> connection.getManagementNode(entityPath, entityType))\n                 .flatMap(channel -> channel.getSessionState(sessionId, getLinkName(sessionId)));\n         }\n+\n+        return result.onErrorMap((err) -> mapError(err, ServiceBusErrorSource.RECEIVE));\n     }\n \n     /**\n-     * Map the error to {@link ServiceBusReceiverException}\n+     * Map the error to {@link ServiceBusException}\n      */\n     private Throwable mapError(Throwable throwable, ServiceBusErrorSource errorSource) {\n         // If it is already `ServiceBusReceiverException`, we can just throw it.\n-        if (!(throwable instanceof ServiceBusReceiverException)) {\n-            return new ServiceBusReceiverException(throwable, errorSource);\n+        if (!(throwable instanceof ServiceBusException)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185cd5935e6412004c189baa46e55632da23c38c"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5MDY2Mg==", "bodyText": "nit: fix indentation", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525390662", "createdAt": "2020-11-17T18:28:07Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1190,7 +1190,8 @@ private String getLinkName(String sessionId) {\n \n         return connectionProcessor\n             .flatMap(connection -> connection.getManagementNode(entityPath, entityType))\n-            .flatMap(channel -> channel.setSessionState(sessionId, sessionState, linkName));\n+            .flatMap(channel -> channel.setSessionState(sessionId, sessionState, linkName))\n+                .onErrorMap((err) -> mapError(err, ServiceBusErrorSource.RECEIVE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185cd5935e6412004c189baa46e55632da23c38c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5MjYyNA==", "bodyText": "I don't think then() is needed here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525392624", "createdAt": "2020-11-17T18:31:18Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -499,21 +509,26 @@ public void close() {\n                 sink.error(throwable);\n             })\n             .switchIfEmpty(Mono.error(new AmqpException(true, \"No response received from management channel.\",\n-                channel.getErrorContext())));\n+                channel.getErrorContext())))\n+            .onErrorMap(this::mapError);\n     }\n \n     private Mono<Void> isAuthorized(String operation) {\n         return tokenManager.getAuthorizationResults()\n             .next()\n             .handle((response, sink) -> {\n                 if (response != AmqpResponseCode.ACCEPTED && response != AmqpResponseCode.OK) {\n-                    sink.error(new AmqpException(false, String.format(\n-                        \"User does not have authorization to perform operation [%s] on entity [%s]. Response: [%s]\",\n-                        operation, entityPath, response), getErrorContext()));\n+                    final String message = String.format(\"User does not have authorization to perform operation \"\n+                        + \"[%s] on entity [%s]. Response: [%s]\", operation, entityPath, response);\n+                    final Throwable exc = new AmqpException(false, AmqpErrorCondition.UNAUTHORIZED_ACCESS,\n+                        message, getErrorContext());\n+                    sink.error(new ServiceBusException(exc, ServiceBusErrorSource.MANAGEMENT));\n                 } else {\n                     sink.complete();\n                 }\n-            });\n+            })\n+            .onErrorMap(this::mapError)\n+            .then();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185cd5935e6412004c189baa46e55632da23c38c"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9459733e866249b7daea17c4e7322dd5e9453937", "author": {"user": {"login": "richardpark-msft", "name": "Richard Park"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9459733e866249b7daea17c4e7322dd5e9453937", "committedDate": "2020-11-17T19:27:11Z", "message": "Make errorSource a package private field and add in a helper to extract it for the tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32c48aa828637ecae34096f832d33f6381939574", "author": {"user": {"login": "richardpark-msft", "name": "Richard Park"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/32c48aa828637ecae34096f832d33f6381939574", "committedDate": "2020-11-17T19:29:39Z", "message": "Make the ServiceBusErrorContext final (and rename from ServiceBusProcesErrorContext)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44bcc36cf0fa715b42104daebbe44b41e095efbb", "author": {"user": {"login": "richardpark-msft", "name": "Richard Park"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/44bcc36cf0fa715b42104daebbe44b41e095efbb", "committedDate": "2020-11-17T19:35:12Z", "message": "Moving the location of the onErrorMap so I don't accidentally create a serialized execution order."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "654909cb66dcc8766506eb25c49b1586c7e07ad2", "author": {"user": {"login": "richardpark-msft", "name": "Richard Park"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/654909cb66dcc8766506eb25c49b1586c7e07ad2", "committedDate": "2020-11-17T19:40:52Z", "message": "Remove lame comment.\nFix lame indentation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "649179ca3049c8b9686635b595034bd8a2f21757", "author": {"user": {"login": "richardpark-msft", "name": "Richard Park"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/649179ca3049c8b9686635b595034bd8a2f21757", "committedDate": "2020-11-17T19:52:31Z", "message": "Rename ReceiveMode to ServiceBusReceiveMode\n\nFixes #17555"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNzk1MTc4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#pullrequestreview-532795178", "createdAt": "2020-11-17T20:42:07Z", "commit": {"oid": "649179ca3049c8b9686635b595034bd8a2f21757"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNzk3MjY0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#pullrequestreview-532797264", "createdAt": "2020-11-17T20:45:16Z", "commit": {"oid": "649179ca3049c8b9686635b595034bd8a2f21757"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMDo0NToxNlrOH1Kw-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMDo1MTowOFrOH1K9eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxMjk1Mg==", "bodyText": "To be consistent with the usage of other terms here, we should just call this SEND. Also, we should do the same for ABANDONED -> ABANDON (sorry, this was not part of your PR).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525512952", "createdAt": "2020-11-17T20:45:16Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java", "diffHunk": "@@ -36,4 +36,12 @@\n     /** Error while session is closed.*/\n     public static final ServiceBusErrorSource CLOSE_SESSION = fromString(\"CLOSE_SESSION\",\n         ServiceBusErrorSource.class);\n+\n+    /** Error while sending a message.*/\n+    public static final ServiceBusErrorSource SENDING = fromString(\"SENDING\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "649179ca3049c8b9686635b595034bd8a2f21757"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxMzk1MQ==", "bodyText": "PROTO_IO falls under SERVICE_COMMUNICATION_PROBLEM", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525513951", "createdAt": "2020-11-17T20:47:06Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusException.java", "diffHunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.amqp.exception.AmqpErrorCondition;\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.exception.AzureException;\n+\n+/**\n+ * Defines {@link ServiceBusException} which has additional information about the operation that caused the\n+ * error.\n+ * @see ServiceBusErrorSource\n+ */\n+public final class ServiceBusException extends AzureException {\n+    private final transient ServiceBusErrorSource errorSource;\n+    private final transient ServiceBusFailureReason reason;\n+    private final boolean isTransient;\n+\n+    /**\n+     * @param throwable for the error happened.\n+     * @param errorSource indicating which api caused the error.\n+     */\n+    public ServiceBusException(Throwable throwable, ServiceBusErrorSource errorSource) {\n+        super(throwable.getMessage(), throwable);\n+        this.errorSource = errorSource;\n+\n+        if (throwable instanceof AmqpException) {\n+            AmqpException amqpException = (AmqpException) throwable;\n+            reason = getServiceBusFailureReasonFromException(amqpException);\n+            isTransient = amqpException.isTransient();\n+        } else {\n+            reason = ServiceBusFailureReason.GENERAL_ERROR;\n+            isTransient = false;\n+        }\n+    }\n+\n+    /**\n+     * Gets the {@link ServiceBusErrorSource} in case of any errors.\n+     * @return the {@link ServiceBusErrorSource}\n+     */\n+    ServiceBusErrorSource getErrorSource() {\n+        return errorSource;\n+    }\n+\n+    /**\n+     * Gets the {@link ServiceBusFailureReason} in case of any errors.\n+     * @return the {@link ServiceBusFailureReason}\n+     */\n+    public ServiceBusFailureReason getReason() {\n+        return reason;\n+    }\n+\n+    /**\n+     * A boolean indicating if the exception is a transient error or not.\n+     *\n+     * @return returns true when user can retry the operation that generated the exception without additional\n+     * intervention.\n+     */\n+    public boolean isTransient() {\n+        return isTransient;\n+    }\n+\n+    private ServiceBusFailureReason getServiceBusFailureReasonFromException(AmqpException throwable) {\n+        final AmqpErrorCondition errorCondition = throwable.getErrorCondition();\n+\n+        if (errorCondition == null) {\n+            return ServiceBusFailureReason.GENERAL_ERROR;\n+        }\n+\n+        switch (errorCondition) {\n+            case NOT_FOUND:\n+                return ServiceBusFailureReason.MESSAGING_ENTITY_NOT_FOUND;\n+            case MESSAGE_LOCK_LOST:\n+                return ServiceBusFailureReason.MESSAGE_LOCK_LOST;\n+            case MESSAGE_NOT_FOUND:\n+                return ServiceBusFailureReason.MESSAGE_NOT_FOUND;\n+            case LINK_PAYLOAD_SIZE_EXCEEDED:\n+                return ServiceBusFailureReason.MESSAGE_SIZE_EXCEEDED;\n+            case ENTITY_ALREADY_EXISTS:\n+                return ServiceBusFailureReason.MESSAGING_ENTITY_ALREADY_EXISTS;\n+            case ENTITY_DISABLED_ERROR:\n+                return ServiceBusFailureReason.MESSAGING_ENTITY_DISABLED;\n+            case RESOURCE_LIMIT_EXCEEDED:\n+                return ServiceBusFailureReason.QUOTA_EXCEEDED;\n+            case SERVER_BUSY_ERROR:\n+                return ServiceBusFailureReason.SERVICE_BUSY;\n+            case TIMEOUT_ERROR:\n+                return ServiceBusFailureReason.SERVICE_TIMEOUT;\n+            case SESSION_CANNOT_BE_LOCKED:\n+                return ServiceBusFailureReason.SESSION_CANNOT_BE_LOCKED;\n+            case SESSION_LOCK_LOST:\n+                return ServiceBusFailureReason.SESSION_LOCK_LOST;\n+            case UNAUTHORIZED_ACCESS:\n+                return ServiceBusFailureReason.UNAUTHORIZED;\n+            case PROTON_IO:         // does this mapping make sense?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "649179ca3049c8b9686635b595034bd8a2f21757"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxNTI5OQ==", "bodyText": "Some alternate name proposals: SERVICE_COMMUNICATION_ERROR, SERVICE_CONNECTION_ERROR. Generally, we don't suffix PROBLEM. ERROR is the more commonly used term.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525515299", "createdAt": "2020-11-17T20:49:40Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusFailureReason.java", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.ExpandableStringEnum;\n+\n+/**\n+ * The set of well-known reasons for an Service Bus operation failure that was the cause of an exception.\n+ */\n+public final class ServiceBusFailureReason extends ExpandableStringEnum<ServiceBusFailureReason> {\n+    // NOTE: this list is intended to mirror the reasons we have in .net\n+    // https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/servicebus/Azure.Messaging\n+    // .ServiceBus/src/Primitives/ServiceBusFailureReason.cs\n+\n+    /** The exception was the result of a general error within the client library. */\n+    public static final ServiceBusFailureReason GENERAL_ERROR = fromString(\"GENERAL_ERROR\",\n+        ServiceBusFailureReason.class);\n+\n+    /** The lock on the message is lost. Callers should call attempt to receive and process the message again. */\n+    public static final ServiceBusFailureReason MESSAGE_LOCK_LOST = fromString(\"MESSAGE_LOCK_LOST\",\n+        ServiceBusFailureReason.class);\n+\n+    /** The requested message was not found. */\n+    public static final ServiceBusFailureReason MESSAGE_NOT_FOUND = fromString(\"MESSAGE_NOT_FOUND\",\n+        ServiceBusFailureReason.class);\n+\n+    /** A message is larger than the maximum size allowed for its transport. */\n+    public static final ServiceBusFailureReason MESSAGE_SIZE_EXCEEDED = fromString(\"MESSAGE_SIZE_EXCEEDED\",\n+        ServiceBusFailureReason.class);\n+\n+    /** An entity with the same name exists under the same namespace. */\n+    public static final ServiceBusFailureReason MESSAGING_ENTITY_ALREADY_EXISTS = fromString(\n+        \"MESSAGING_ENTITY_ALREADY_EXISTS\", ServiceBusFailureReason.class);\n+\n+    /** The Messaging Entity is disabled. Enable the entity again using Portal. */\n+    public static final ServiceBusFailureReason MESSAGING_ENTITY_DISABLED = fromString(\"MESSAGING_ENTITY_DISABLED\",\n+        ServiceBusFailureReason.class);\n+\n+    /** A Service Bus resource cannot be found by the Service Bus service. */\n+    public static final ServiceBusFailureReason MESSAGING_ENTITY_NOT_FOUND = fromString(\"MESSAGING_ENTITY_NOT_FOUND\",\n+        ServiceBusFailureReason.class);\n+\n+    /** The quota applied to an Service Bus resource has been exceeded while interacting with the Azure Service Bus\n+     * service. */\n+    public static final ServiceBusFailureReason QUOTA_EXCEEDED = fromString(\"QUOTA_EXCEEDED\",\n+        ServiceBusFailureReason.class);\n+\n+    /** The Azure Service Bus service reports that it is busy in response to a client request to perform an operation\n+     * . */\n+    public static final ServiceBusFailureReason SERVICE_BUSY = fromString(\"SERVICE_BUSY\",\n+        ServiceBusFailureReason.class);\n+\n+    /** An operation or other request timed out while interacting with the Azure Service Bus service. */\n+    public static final ServiceBusFailureReason SERVICE_TIMEOUT = fromString(\"SERVICE_TIMEOUT\",\n+        ServiceBusFailureReason.class);\n+\n+    /** There was a general communications error encountered when interacting with the Azure Service Bus service. */\n+    public static final ServiceBusFailureReason SERVICE_COMMUNICATION_PROBLEM = fromString(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "649179ca3049c8b9686635b595034bd8a2f21757"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxNjE1Mw==", "bodyText": "\ud83d\ude01", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525516153", "createdAt": "2020-11-17T20:51:08Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusExceptionTestHelper.java", "diffHunk": "@@ -0,0 +1,15 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+public class ServiceBusExceptionTestHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "649179ca3049c8b9686635b595034bd8a2f21757"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b51d5fa45afdb13ea8242dc1958ee119b1ff6241", "author": {"user": {"login": "richardpark-msft", "name": "Richard Park"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b51d5fa45afdb13ea8242dc1958ee119b1ff6241", "committedDate": "2020-11-17T21:18:50Z", "message": "* Doing some renames for consistency (SENDER -> SEND, ABANDONED -> ABANDON)\n* Map PROTON_IO to Service communication problem."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "962cc3282f2657115b26e256d7164a79e4c3eef6", "author": {"user": {"login": "richardpark-msft", "name": "Richard Park"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/962cc3282f2657115b26e256d7164a79e4c3eef6", "committedDate": "2020-11-17T21:32:26Z", "message": "* Be idiomatic with the naming of SERVICE_COMMUNICATION_PROBLEM and call it SERVICE_COMMUNICATION_ERROR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5be5cab9cffae467c69b0fba249aab9c05046171", "author": {"user": {"login": "richardpark-msft", "name": "Richard Park"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5be5cab9cffae467c69b0fba249aab9c05046171", "committedDate": "2020-11-17T22:20:52Z", "message": "Fixing formatting errors caught by verify"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a844327bf3144099d6ec7f7a3bb736670ee137f", "author": {"user": {"login": "richardpark-msft", "name": "Richard Park"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9a844327bf3144099d6ec7f7a3bb736670ee137f", "committedDate": "2020-11-17T22:41:14Z", "message": "Fixing compile errors with the perf tests from changing the receive mode."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6926d52072edce86a3e0af927cce590021af489", "author": {"user": {"login": "richardpark-msft", "name": "Richard Park"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a6926d52072edce86a3e0af927cce590021af489", "committedDate": "2020-11-17T22:49:26Z", "message": "Missed one."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de7ce7765e5078e049cc1a813e953bf911f6d9fa", "author": {"user": {"login": "richardpark-msft", "name": "Richard Park"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/de7ce7765e5078e049cc1a813e953bf911f6d9fa", "committedDate": "2020-11-17T23:16:00Z", "message": "Updating to use the new ServiceBusReceiveMode name rather than just ReceiveMode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4113891ce4ac2559b1523d3cc3e944f74ccf2bfc", "author": {"user": {"login": "richardpark-msft", "name": "Richard Park"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4113891ce4ac2559b1523d3cc3e944f74ccf2bfc", "committedDate": "2020-11-18T00:00:19Z", "message": "Missed one"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMTU4MzU0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#pullrequestreview-533158354", "createdAt": "2020-11-18T07:18:37Z", "commit": {"oid": "4113891ce4ac2559b1523d3cc3e944f74ccf2bfc"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 15, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}