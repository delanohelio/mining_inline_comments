{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5Njk0NDcx", "number": 14235, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjo1NDozOVrOEcqd-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODozMzoxM1rOEcspLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDkxMzg1OnYy", "diffSide": "RIGHT", "path": "eng/code-quality-reports/src/main/resources/revapi/revapi.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjo1NDozOVrOHHVHbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMToxNTozM1rOHKJgBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0ODA0Ng==", "bodyText": "@JonathanGiles @srnagar mind taking a look at this change. Models classes are having new annotations and new annotation attributes due to codegen being used instead of the hand-written layer. These annotation changes better represent how the model class should behave but may lead to functional difference.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14235#discussion_r477448046", "createdAt": "2020-08-26T16:54:39Z", "author": {"login": "alzimmermsft"}, "path": "eng/code-quality-reports/src/main/resources/revapi/revapi.json", "diffHunk": "@@ -165,6 +165,18 @@\n         \"code\": \"java.method.finalMethodAddedToNonFinalClass\",\n         \"new\": \"method <V> reactor.core.publisher.Flux<V> reactor.core.publisher.Flux<T>::switchOnFirst(java.util.function.BiFunction<reactor.core.publisher.Signal<? extends T>, reactor.core.publisher.Flux<T>, org.reactivestreams.Publisher<? extends V>>, boolean) @ com.azure.core.util.paging.ContinuablePagedFluxCore<C, T, P extends com.azure.core.util.paging.ContinuablePage<C extends java.lang.Object, T extends java.lang.Object>>\",\n         \"justification\": \"Reactor added new final APIs to Flux.\"\n+      },\n+      {\n+        \"regex\": true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47edf1ededaf048c46499bed82ff8a84a761233"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwMzQ2MQ==", "bodyText": "As discussed this is specific to Search, as of right now (and any newer SDKs will begin with this functionality). We are okay with making this change for Search as it is newly released but changes such as this in the future must be reviewed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14235#discussion_r480403461", "createdAt": "2020-08-31T21:15:33Z", "author": {"login": "alzimmermsft"}, "path": "eng/code-quality-reports/src/main/resources/revapi/revapi.json", "diffHunk": "@@ -165,6 +165,18 @@\n         \"code\": \"java.method.finalMethodAddedToNonFinalClass\",\n         \"new\": \"method <V> reactor.core.publisher.Flux<V> reactor.core.publisher.Flux<T>::switchOnFirst(java.util.function.BiFunction<reactor.core.publisher.Signal<? extends T>, reactor.core.publisher.Flux<T>, org.reactivestreams.Publisher<? extends V>>, boolean) @ com.azure.core.util.paging.ContinuablePagedFluxCore<C, T, P extends com.azure.core.util.paging.ContinuablePage<C extends java.lang.Object, T extends java.lang.Object>>\",\n         \"justification\": \"Reactor added new final APIs to Flux.\"\n+      },\n+      {\n+        \"regex\": true,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0ODA0Ng=="}, "originalCommit": {"oid": "f47edf1ededaf048c46499bed82ff8a84a761233"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTAyNzUyOnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/swagger/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzoyNDo0NlrOHHWOGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzozNToxMFrOHHWmbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2NjEzOQ==", "bodyText": "the only change is \"0bc7853cb4d824bb6c310344dcc1b5f77cbe6bdd\" to \"master\"?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14235#discussion_r477466139", "createdAt": "2020-08-26T17:24:46Z", "author": {"login": "mssfang"}, "path": "sdk/search/azure-search-documents/swagger/README.md", "diffHunk": "@@ -67,51 +70,10 @@ These settings apply only when `--tag=package-2020-06-searchindex` is specified\n ``` yaml $(tag) == 'package-2020-06-searchindex'\n namespace: com.azure.search.documents\n input-file:\n-- https://raw.githubusercontent.com/Azure/azure-rest-api-specs/0bc7853cb4d824bb6c310344dcc1b5f77cbe6bdd/specification/search/data-plane/Azure.Search/preview/2020-06-30/searchindex.json\n+- https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/search/data-plane/Azure.Search/preview/2020-06-30/searchindex.json", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47edf1ededaf048c46499bed82ff8a84a761233"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3MjM2Nw==", "bodyText": "This was changed as it should be targeting master instead of a specific commit. The other Swagger configuration is targeting a specific commit as the changes haven't been merged yet.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14235#discussion_r477472367", "createdAt": "2020-08-26T17:35:10Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/swagger/README.md", "diffHunk": "@@ -67,51 +70,10 @@ These settings apply only when `--tag=package-2020-06-searchindex` is specified\n ``` yaml $(tag) == 'package-2020-06-searchindex'\n namespace: com.azure.search.documents\n input-file:\n-- https://raw.githubusercontent.com/Azure/azure-rest-api-specs/0bc7853cb4d824bb6c310344dcc1b5f77cbe6bdd/specification/search/data-plane/Azure.Search/preview/2020-06-30/searchindex.json\n+- https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/search/data-plane/Azure.Search/preview/2020-06-30/searchindex.json", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2NjEzOQ=="}, "originalCommit": {"oid": "f47edf1ededaf048c46499bed82ff8a84a761233"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTExMTc0OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/FacetResult.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzo0ODoxMVrOHHXDKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMzo1MjowOVrOHJXGYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3OTcyMg==", "bodyText": "Is this class a facet query result? if so, we should only explore the getter to user but not the setter.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14235#discussion_r477479722", "createdAt": "2020-08-26T17:48:11Z", "author": {"login": "mssfang"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/FacetResult.java", "diffHunk": "@@ -1,61 +1,73 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+// Changes may cause incorrect behavior and will be lost if the code is\n+// regenerated.\n \n package com.azure.search.documents.models;\n \n import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.HashMap;\n import java.util.Map;\n \n-/**\n- * A single bucket of a facet query result. Reports the number of documents\n- * with a field value falling within a particular range or having a particular\n- * value or interval.\n- */\n+/** The FacetResult model. */\n @Fluent\n public final class FacetResult {\n-    /*\n-     * Unmatched properties from the message are deserialized this collection\n-     */\n-    @JsonProperty(value = \"\")\n-    private Map<String, Object> additionalProperties;\n-\n     /*\n      * The approximate count of documents falling within the bucket described\n      * by this facet.\n      */\n     @JsonProperty(value = \"count\", access = JsonProperty.Access.WRITE_ONLY)\n     private Long count;\n \n+    /*\n+     * A single bucket of a facet query result. Reports the number of documents\n+     * with a field value falling within a particular range or having a\n+     * particular value or interval.\n+     */\n+    @JsonIgnore private Map<String, Object> additionalProperties;\n+\n+    /**\n+     * Get the count property: The approximate count of documents falling within the bucket described by this facet.\n+     *\n+     * @return the count value.\n+     */\n+    public Long getCount() {\n+        return this.count;\n+    }\n+\n     /**\n-     * Get the additionalProperties property: Unmatched properties from the\n-     * message are deserialized this collection.\n+     * Get the additionalProperties property: A single bucket of a facet query result. Reports the number of documents\n+     * with a field value falling within a particular range or having a particular value or interval.\n      *\n      * @return the additionalProperties value.\n      */\n+    @JsonAnyGetter\n     public Map<String, Object> getAdditionalProperties() {\n         return this.additionalProperties;\n     }\n \n     /**\n-     * Set the additionalProperties property: Unmatched properties from the\n-     * message are deserialized this collection.\n+     * Set the additionalProperties property: A single bucket of a facet query result. Reports the number of documents\n+     * with a field value falling within a particular range or having a particular value or interval.\n      *\n      * @param additionalProperties the additionalProperties value to set.\n      * @return the FacetResult object itself.\n      */\n-    FacetResult setAdditionalProperties(Map<String, Object> additionalProperties) {\n+    public FacetResult setAdditionalProperties(Map<String, Object> additionalProperties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47edf1ededaf048c46499bed82ff8a84a761233"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4NjE0Mw==", "bodyText": "Good catch, I'll create an APIView for this change given the amount of code that is being moved around due to Swagger generation changes.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14235#discussion_r477486143", "createdAt": "2020-08-26T17:59:17Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/FacetResult.java", "diffHunk": "@@ -1,61 +1,73 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+// Changes may cause incorrect behavior and will be lost if the code is\n+// regenerated.\n \n package com.azure.search.documents.models;\n \n import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.HashMap;\n import java.util.Map;\n \n-/**\n- * A single bucket of a facet query result. Reports the number of documents\n- * with a field value falling within a particular range or having a particular\n- * value or interval.\n- */\n+/** The FacetResult model. */\n @Fluent\n public final class FacetResult {\n-    /*\n-     * Unmatched properties from the message are deserialized this collection\n-     */\n-    @JsonProperty(value = \"\")\n-    private Map<String, Object> additionalProperties;\n-\n     /*\n      * The approximate count of documents falling within the bucket described\n      * by this facet.\n      */\n     @JsonProperty(value = \"count\", access = JsonProperty.Access.WRITE_ONLY)\n     private Long count;\n \n+    /*\n+     * A single bucket of a facet query result. Reports the number of documents\n+     * with a field value falling within a particular range or having a\n+     * particular value or interval.\n+     */\n+    @JsonIgnore private Map<String, Object> additionalProperties;\n+\n+    /**\n+     * Get the count property: The approximate count of documents falling within the bucket described by this facet.\n+     *\n+     * @return the count value.\n+     */\n+    public Long getCount() {\n+        return this.count;\n+    }\n+\n     /**\n-     * Get the additionalProperties property: Unmatched properties from the\n-     * message are deserialized this collection.\n+     * Get the additionalProperties property: A single bucket of a facet query result. Reports the number of documents\n+     * with a field value falling within a particular range or having a particular value or interval.\n      *\n      * @return the additionalProperties value.\n      */\n+    @JsonAnyGetter\n     public Map<String, Object> getAdditionalProperties() {\n         return this.additionalProperties;\n     }\n \n     /**\n-     * Set the additionalProperties property: Unmatched properties from the\n-     * message are deserialized this collection.\n+     * Set the additionalProperties property: A single bucket of a facet query result. Reports the number of documents\n+     * with a field value falling within a particular range or having a particular value or interval.\n      *\n      * @param additionalProperties the additionalProperties value to set.\n      * @return the FacetResult object itself.\n      */\n-    FacetResult setAdditionalProperties(Map<String, Object> additionalProperties) {\n+    public FacetResult setAdditionalProperties(Map<String, Object> additionalProperties) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3OTcyMg=="}, "originalCommit": {"oid": "f47edf1ededaf048c46499bed82ff8a84a761233"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3NzY5Ng==", "bodyText": "Going to leave this as is as the Map is mutable using the getter so there is no big reason to hide the setter.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14235#discussion_r479577696", "createdAt": "2020-08-28T23:52:09Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/FacetResult.java", "diffHunk": "@@ -1,61 +1,73 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+// Changes may cause incorrect behavior and will be lost if the code is\n+// regenerated.\n \n package com.azure.search.documents.models;\n \n import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.HashMap;\n import java.util.Map;\n \n-/**\n- * A single bucket of a facet query result. Reports the number of documents\n- * with a field value falling within a particular range or having a particular\n- * value or interval.\n- */\n+/** The FacetResult model. */\n @Fluent\n public final class FacetResult {\n-    /*\n-     * Unmatched properties from the message are deserialized this collection\n-     */\n-    @JsonProperty(value = \"\")\n-    private Map<String, Object> additionalProperties;\n-\n     /*\n      * The approximate count of documents falling within the bucket described\n      * by this facet.\n      */\n     @JsonProperty(value = \"count\", access = JsonProperty.Access.WRITE_ONLY)\n     private Long count;\n \n+    /*\n+     * A single bucket of a facet query result. Reports the number of documents\n+     * with a field value falling within a particular range or having a\n+     * particular value or interval.\n+     */\n+    @JsonIgnore private Map<String, Object> additionalProperties;\n+\n+    /**\n+     * Get the count property: The approximate count of documents falling within the bucket described by this facet.\n+     *\n+     * @return the count value.\n+     */\n+    public Long getCount() {\n+        return this.count;\n+    }\n+\n     /**\n-     * Get the additionalProperties property: Unmatched properties from the\n-     * message are deserialized this collection.\n+     * Get the additionalProperties property: A single bucket of a facet query result. Reports the number of documents\n+     * with a field value falling within a particular range or having a particular value or interval.\n      *\n      * @return the additionalProperties value.\n      */\n+    @JsonAnyGetter\n     public Map<String, Object> getAdditionalProperties() {\n         return this.additionalProperties;\n     }\n \n     /**\n-     * Set the additionalProperties property: Unmatched properties from the\n-     * message are deserialized this collection.\n+     * Set the additionalProperties property: A single bucket of a facet query result. Reports the number of documents\n+     * with a field value falling within a particular range or having a particular value or interval.\n      *\n      * @param additionalProperties the additionalProperties value to set.\n      * @return the FacetResult object itself.\n      */\n-    FacetResult setAdditionalProperties(Map<String, Object> additionalProperties) {\n+    public FacetResult setAdditionalProperties(Map<String, Object> additionalProperties) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3OTcyMg=="}, "originalCommit": {"oid": "f47edf1ededaf048c46499bed82ff8a84a761233"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTI3MDIxOnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/converters/ClassicTokenizerConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODozMzoxM1rOHHYmOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODozNzo0MVrOHHYv1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwNTA4MA==", "bodyText": "Just curious, if these were autorest updates for client-side validations that were removed?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14235#discussion_r477505080", "createdAt": "2020-08-26T18:33:13Z", "author": {"login": "samvaity"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/converters/ClassicTokenizerConverter.java", "diffHunk": "@@ -37,7 +37,7 @@ public static ClassicTokenizer map(com.azure.search.documents.indexes.implementa\n \n         Integer maxTokenLength = obj.getMaxTokenLength();\n         classicTokenizer.setMaxTokenLength(maxTokenLength);\n-        classicTokenizer.validate();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47edf1ededaf048c46499bed82ff8a84a761233"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwNzU0Mg==", "bodyText": "Yes, client side validation generation was removed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14235#discussion_r477507542", "createdAt": "2020-08-26T18:37:41Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/converters/ClassicTokenizerConverter.java", "diffHunk": "@@ -37,7 +37,7 @@ public static ClassicTokenizer map(com.azure.search.documents.indexes.implementa\n \n         Integer maxTokenLength = obj.getMaxTokenLength();\n         classicTokenizer.setMaxTokenLength(maxTokenLength);\n-        classicTokenizer.validate();\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwNTA4MA=="}, "originalCommit": {"oid": "f47edf1ededaf048c46499bed82ff8a84a761233"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1649, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}