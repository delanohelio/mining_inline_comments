{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNDM1Mjk4", "number": 15742, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjozNDoyOVrOEoKz4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjo1Mzo0MVrOEoLPfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTU1NjE3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/CosmosPagedFlux.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjozNDoyOVrOHZGmPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMzozODo1NFrOHaHUrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4NDU0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Consumer<FeedResponse<T>> feedResponseConsumer;\n          \n          \n            \n                private final Consumer<FeedResponse<T>> feedResponseConsumer;", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r496084541", "createdAt": "2020-09-28T16:34:29Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/CosmosPagedFlux.java", "diffHunk": "@@ -36,10 +37,29 @@\n \n     private final Function<CosmosPagedFluxOptions, Flux<FeedResponse<T>>> optionsFluxFunction;\n \n+    private Consumer<FeedResponse<T>> feedResponseConsumer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df24d030f3536129da73f60444473ad145dddaa7"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE0MjIwNA==", "bodyText": "It can't be final as this is optional. We only set this in 1 constructor which is invoked by handle() API.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r497142204", "createdAt": "2020-09-29T23:34:50Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/CosmosPagedFlux.java", "diffHunk": "@@ -36,10 +37,29 @@\n \n     private final Function<CosmosPagedFluxOptions, Flux<FeedResponse<T>>> optionsFluxFunction;\n \n+    private Consumer<FeedResponse<T>> feedResponseConsumer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4NDU0MQ=="}, "originalCommit": {"oid": "df24d030f3536129da73f60444473ad145dddaa7"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE0MjczOQ==", "bodyText": "you can set it to null in the other constructor.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r497142739", "createdAt": "2020-09-29T23:35:33Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/CosmosPagedFlux.java", "diffHunk": "@@ -36,10 +37,29 @@\n \n     private final Function<CosmosPagedFluxOptions, Flux<FeedResponse<T>>> optionsFluxFunction;\n \n+    private Consumer<FeedResponse<T>> feedResponseConsumer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4NDU0MQ=="}, "originalCommit": {"oid": "df24d030f3536129da73f60444473ad145dddaa7"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE0NTAwNw==", "bodyText": "Yes, that is possible, we can do that.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r497145007", "createdAt": "2020-09-29T23:38:54Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/CosmosPagedFlux.java", "diffHunk": "@@ -36,10 +37,29 @@\n \n     private final Function<CosmosPagedFluxOptions, Flux<FeedResponse<T>>> optionsFluxFunction;\n \n+    private Consumer<FeedResponse<T>> feedResponseConsumer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4NDU0MQ=="}, "originalCommit": {"oid": "df24d030f3536129da73f60444473ad145dddaa7"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTU5MDYyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedFluxTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjo0MzozM1rOHZG7ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjo0MzozM1rOHZG7ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5MDA0Mg==", "bodyText": "you will need client builder for session consistency otherwise the test will become flaky.\nperhaps clientBuildersWithDirectSession ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r496090042", "createdAt": "2020-09-28T16:43:33Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedFluxTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ *\n+ */\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class CosmosPagedFluxTest extends TestSuiteBase {\n+\n+    private static final int NUM_OF_ITEMS = 10;\n+\n+    private CosmosAsyncClient cosmosAsyncClient;\n+    private CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @Factory(dataProvider = \"clientBuilders\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df24d030f3536129da73f60444473ad145dddaa7"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTU5NDAwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedIterableTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjo0NDoyNVrOHZG92A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjo0NDoyNVrOHZG92A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5MDU4NA==", "bodyText": "loggger.info is too noisy for the test.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r496090584", "createdAt": "2020-09-28T16:44:25Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedIterableTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ *\n+ */\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import com.azure.cosmos.util.CosmosPagedIterable;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class CosmosPagedIterableTest extends TestSuiteBase {\n+\n+    private static final int NUM_OF_ITEMS = 10;\n+\n+    private CosmosClient cosmosClient;\n+    private CosmosContainer cosmosContainer;\n+\n+    @Factory(dataProvider = \"clientBuilders\")\n+    public CosmosPagedIterableTest(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }\n+\n+    @BeforeClass(groups = { \"simple\" }, timeOut = SETUP_TIMEOUT)\n+    public void before_CosmosPagedIterableTest() {\n+        assertThat(this.cosmosClient).isNull();\n+        this.cosmosClient = getClientBuilder().buildClient();\n+        CosmosAsyncContainer asyncContainer = getSharedMultiPartitionCosmosContainer(this.cosmosClient.asyncClient());\n+        cosmosContainer =\n+            cosmosClient.getDatabase(asyncContainer.getDatabase().getId()).getContainer(asyncContainer.getId());\n+        createItems(NUM_OF_ITEMS);\n+    }\n+\n+    @AfterClass(groups = { \"simple\" }, timeOut = SHUTDOWN_TIMEOUT, alwaysRun = true)\n+    public void afterClass() {\n+        assertThat(this.cosmosClient).isNotNull();\n+        this.cosmosClient.close();\n+    }\n+\n+    @Test(groups = { \"simple\" }, timeOut = TIMEOUT)\n+    public void readAllItemsByPageWithCosmosPagedIterableHandler() throws Exception {\n+        CosmosQueryRequestOptions cosmosQueryRequestOptions = new CosmosQueryRequestOptions();\n+\n+        CosmosPagedIterable<InternalObjectNode> cosmosPagedIterable =\n+            cosmosContainer.readAllItems(cosmosQueryRequestOptions, InternalObjectNode.class);\n+\n+        AtomicInteger handleCount = new AtomicInteger();\n+        cosmosPagedIterable = cosmosPagedIterable.handle(feedResponse -> {\n+            CosmosDiagnostics cosmosDiagnostics = feedResponse.getCosmosDiagnostics();\n+            logger.info(\"Cosmos Diagnostics : {}\", cosmosDiagnostics);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df24d030f3536129da73f60444473ad145dddaa7"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTYxNTY5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedIterableTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjo1MDoyOFrOHZHLow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjo1MDoyOFrOHZHLow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NDExNQ==", "bodyText": "ditto we should use client builder with at least session, otherwise the test will be flaky.\nperhaps clientBuildersWithDirectSession", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r496094115", "createdAt": "2020-09-28T16:50:28Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedIterableTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ *\n+ */\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import com.azure.cosmos.util.CosmosPagedIterable;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class CosmosPagedIterableTest extends TestSuiteBase {\n+\n+    private static final int NUM_OF_ITEMS = 10;\n+\n+    private CosmosClient cosmosClient;\n+    private CosmosContainer cosmosContainer;\n+\n+    @Factory(dataProvider = \"clientBuilders\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df24d030f3536129da73f60444473ad145dddaa7"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTYyMzQ4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedFluxTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjo1Mjo0NlrOHZHQyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjo1Mjo0NlrOHZHQyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NTQzNA==", "bodyText": "for the new test please don't use InternalObjectNode this will be used by the end user.\nPlease rely on ObjectNode or a simple POJO.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r496095434", "createdAt": "2020-09-28T16:52:46Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedFluxTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ *\n+ */\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class CosmosPagedFluxTest extends TestSuiteBase {\n+\n+    private static final int NUM_OF_ITEMS = 10;\n+\n+    private CosmosAsyncClient cosmosAsyncClient;\n+    private CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @Factory(dataProvider = \"clientBuilders\")\n+    public CosmosPagedFluxTest(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }\n+\n+    @BeforeClass(groups = { \"simple\" }, timeOut = SETUP_TIMEOUT)\n+    public void before_CosmosPagedFluxTest() {\n+        assertThat(this.cosmosAsyncClient).isNull();\n+        this.cosmosAsyncClient = getClientBuilder().buildAsyncClient();\n+        CosmosAsyncContainer asyncContainer = getSharedMultiPartitionCosmosContainer(this.cosmosAsyncClient);\n+        cosmosAsyncContainer =\n+            cosmosAsyncClient.getDatabase(asyncContainer.getDatabase().getId()).getContainer(asyncContainer.getId());\n+        createItems(NUM_OF_ITEMS);\n+    }\n+\n+    @AfterClass(groups = { \"simple\" }, timeOut = SHUTDOWN_TIMEOUT, alwaysRun = true)\n+    public void afterClass() {\n+        assertThat(this.cosmosAsyncClient).isNotNull();\n+        this.cosmosAsyncClient.close();\n+    }\n+\n+    @Test(groups = { \"simple\" }, timeOut = TIMEOUT)\n+    public void readAllItemsByPageWithCosmosPagedFluxHandler() throws Exception {\n+        CosmosQueryRequestOptions cosmosQueryRequestOptions = new CosmosQueryRequestOptions();\n+\n+        CosmosPagedFlux<InternalObjectNode> cosmosPagedFlux =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df24d030f3536129da73f60444473ad145dddaa7"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTYyNDEwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedIterableTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjo1Mjo1NlrOHZHRMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjo1Mjo1NlrOHZHRMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NTUzNg==", "bodyText": "ditto.\nfor the new test please don't use InternalObjectNode this will be used by the end user.\nPlease rely on ObjectNode or a simple POJO.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r496095536", "createdAt": "2020-09-28T16:52:56Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedIterableTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ *\n+ */\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import com.azure.cosmos.util.CosmosPagedIterable;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class CosmosPagedIterableTest extends TestSuiteBase {\n+\n+    private static final int NUM_OF_ITEMS = 10;\n+\n+    private CosmosClient cosmosClient;\n+    private CosmosContainer cosmosContainer;\n+\n+    @Factory(dataProvider = \"clientBuilders\")\n+    public CosmosPagedIterableTest(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }\n+\n+    @BeforeClass(groups = { \"simple\" }, timeOut = SETUP_TIMEOUT)\n+    public void before_CosmosPagedIterableTest() {\n+        assertThat(this.cosmosClient).isNull();\n+        this.cosmosClient = getClientBuilder().buildClient();\n+        CosmosAsyncContainer asyncContainer = getSharedMultiPartitionCosmosContainer(this.cosmosClient.asyncClient());\n+        cosmosContainer =\n+            cosmosClient.getDatabase(asyncContainer.getDatabase().getId()).getContainer(asyncContainer.getId());\n+        createItems(NUM_OF_ITEMS);\n+    }\n+\n+    @AfterClass(groups = { \"simple\" }, timeOut = SHUTDOWN_TIMEOUT, alwaysRun = true)\n+    public void afterClass() {\n+        assertThat(this.cosmosClient).isNotNull();\n+        this.cosmosClient.close();\n+    }\n+\n+    @Test(groups = { \"simple\" }, timeOut = TIMEOUT)\n+    public void readAllItemsByPageWithCosmosPagedIterableHandler() throws Exception {\n+        CosmosQueryRequestOptions cosmosQueryRequestOptions = new CosmosQueryRequestOptions();\n+\n+        CosmosPagedIterable<InternalObjectNode> cosmosPagedIterable =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df24d030f3536129da73f60444473ad145dddaa7"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTYyNjg2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/CosmosPagedIterable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjo1Mzo0MVrOHZHS1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMzo0MjowNlrOHaHd0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NTk1OA==", "bodyText": "nit: final.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r496095958", "createdAt": "2020-09-28T16:53:41Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/CosmosPagedIterable.java", "diffHunk": "@@ -22,12 +22,27 @@\n  */\n public final class CosmosPagedIterable<T> extends ContinuablePagedIterable<String, T, FeedResponse<T>> {\n \n+    private CosmosPagedFlux<T> cosmosPagedFlux;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df24d030f3536129da73f60444473ad145dddaa7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE0NzM0Ng==", "bodyText": "This cannot be final, because this is mutable. However, we can change it to be immutable, will try that out.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r497147346", "createdAt": "2020-09-29T23:42:06Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/CosmosPagedIterable.java", "diffHunk": "@@ -22,12 +22,27 @@\n  */\n public final class CosmosPagedIterable<T> extends ContinuablePagedIterable<String, T, FeedResponse<T>> {\n \n+    private CosmosPagedFlux<T> cosmosPagedFlux;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NTk1OA=="}, "originalCommit": {"oid": "df24d030f3536129da73f60444473ad145dddaa7"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 794, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}