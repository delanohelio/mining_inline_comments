{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0Mjg5OTA0", "number": 13845, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODozOToxMlrOEW6d7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDowMzoxMVrOEXAUYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDYyMDYwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/implementation/ImplUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODozOToxMlrOG-atPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODo1MToyMlrOG-bGvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwMjQ2MQ==", "bodyText": "It might be good to set the defaults in the build() method of the builder as that's usually where we set all the defaults and when it's changed we'll remember to update the builder javadocs too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13845#discussion_r468102461", "createdAt": "2020-08-10T18:39:12Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/implementation/ImplUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.netty.implementation;\n+\n+import java.time.Duration;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Helper class containing utility methods for the implementation package.\n+ */\n+final class ImplUtils {\n+    private static final long MINIMUM_TIMEOUT = TimeUnit.MILLISECONDS.toMillis(1);\n+\n+    /*\n+     * Helper function to convert the timeout duration into MILLISECONDS. If the duration is null, 0, or negative there\n+     * is no timeout period, so return 0. Otherwise, return the maximum of the duration and the minimum timeout period.\n+     */\n+\n+    /**\n+     * Returns the timeout in milliseconds to use based on the passed {@link Duration}.\n+     * <p>\n+     * If the timeout is {@code null} a default of 60 seconds will be used. If the timeout is less than or equal to zero\n+     * no timeout will be used. If the timeout is less than one millisecond a timeout of one millisecond will be used.\n+     *\n+     * @param timeout The {@link Duration} to convert to timeout in milliseconds.\n+     * @return The timeout period in milliseconds, zero if no timeout.\n+     */\n+    static long getTimeoutMillis(Duration timeout) {\n+        // Timeout is null, use the 60 second default.\n+        if (timeout == null) {\n+            return TimeUnit.SECONDS.toMillis(60);\n+        }\n+\n+        // Timeout is less than or equal to zero, return no timeout.\n+        if (timeout.isZero() || timeout.isNegative()) {\n+            return 0;\n+        }\n+\n+        // Return the maximum of the timeout period and the minimum allowed timeout period.\n+        return Math.max(timeout.toMillis(), MINIMUM_TIMEOUT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8240c7b67bc0f0c8982bf3b3d19aa5a94281ba2c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwODk5MA==", "bodyText": "I can move this method into the builder and have it called during build.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13845#discussion_r468108990", "createdAt": "2020-08-10T18:51:22Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/implementation/ImplUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.netty.implementation;\n+\n+import java.time.Duration;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Helper class containing utility methods for the implementation package.\n+ */\n+final class ImplUtils {\n+    private static final long MINIMUM_TIMEOUT = TimeUnit.MILLISECONDS.toMillis(1);\n+\n+    /*\n+     * Helper function to convert the timeout duration into MILLISECONDS. If the duration is null, 0, or negative there\n+     * is no timeout period, so return 0. Otherwise, return the maximum of the duration and the minimum timeout period.\n+     */\n+\n+    /**\n+     * Returns the timeout in milliseconds to use based on the passed {@link Duration}.\n+     * <p>\n+     * If the timeout is {@code null} a default of 60 seconds will be used. If the timeout is less than or equal to zero\n+     * no timeout will be used. If the timeout is less than one millisecond a timeout of one millisecond will be used.\n+     *\n+     * @param timeout The {@link Duration} to convert to timeout in milliseconds.\n+     * @return The timeout period in milliseconds, zero if no timeout.\n+     */\n+    static long getTimeoutMillis(Duration timeout) {\n+        // Timeout is null, use the 60 second default.\n+        if (timeout == null) {\n+            return TimeUnit.SECONDS.toMillis(60);\n+        }\n+\n+        // Timeout is less than or equal to zero, return no timeout.\n+        if (timeout.isZero() || timeout.isNegative()) {\n+            return 0;\n+        }\n+\n+        // Return the maximum of the timeout period and the minimum allowed timeout period.\n+        return Math.max(timeout.toMillis(), MINIMUM_TIMEOUT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwMjQ2MQ=="}, "originalCommit": {"oid": "8240c7b67bc0f0c8982bf3b3d19aa5a94281ba2c"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTU3OTIxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-http-netty/src/test/java/com/azure/core/http/netty/implementation/WriteTimeoutHandlerTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDowMzoxMVrOG-jxqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDowMzozOVrOG-jyJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1MTA1MQ==", "bodyText": "I think this is more flaky than you expected. We have two builds on one commit that failed this test:\nhttps://dev.azure.com/azure-sdk/public/_build/results?buildId=489952&view=logs&j=3d7a0212-45d0-5080-1981-6d6ef159b344&t=14d7dc25-187c-516a-cf22-fdfcecf8f884&l=580", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13845#discussion_r468251051", "createdAt": "2020-08-11T00:03:11Z", "author": {"login": "jianghaolu"}, "path": "sdk/core/azure-core-http-netty/src/test/java/com/azure/core/http/netty/implementation/WriteTimeoutHandlerTests.java", "diffHunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.netty.implementation;\n+\n+import io.netty.channel.AbstractChannel;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.DefaultChannelPromise;\n+import io.netty.util.concurrent.DefaultEventExecutor;\n+import io.netty.util.concurrent.EventExecutor;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.atLeast;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.internal.verification.VerificationModeFactory.times;\n+\n+/**\n+ * Tests {@link WriteTimeoutHandler}.\n+ */\n+public class WriteTimeoutHandlerTests {\n+    @Test\n+    public void noTimeoutDoesNotAddWatcher() {\n+        WriteTimeoutHandler writeTimeoutHandler = new WriteTimeoutHandler(0);\n+\n+        EventExecutor eventExecutor = mock(EventExecutor.class);\n+        when(eventExecutor.scheduleAtFixedRate(any(), anyLong(), anyLong(), any())).thenReturn(null);\n+\n+        ChannelHandlerContext ctx = mock(ChannelHandlerContext.class);\n+        when(ctx.executor()).thenReturn(eventExecutor);\n+\n+        writeTimeoutHandler.handlerAdded(ctx);\n+\n+        verify(eventExecutor, never()).scheduleAtFixedRate(any(), anyLong(), anyLong(), any());\n+    }\n+\n+    @Test\n+    public void timeoutAddsWatcher() {\n+        WriteTimeoutHandler writeTimeoutHandler = new WriteTimeoutHandler(1);\n+\n+        EventExecutor eventExecutor = mock(EventExecutor.class);\n+        when(eventExecutor.scheduleAtFixedRate(any(), eq(1L), eq(1L), any())).thenReturn(null);\n+\n+        ChannelHandlerContext ctx = mock(ChannelHandlerContext.class);\n+        when(ctx.executor()).thenReturn(eventExecutor);\n+\n+        writeTimeoutHandler.handlerAdded(ctx);\n+\n+        verify(eventExecutor, times(1)).scheduleAtFixedRate(any(), eq(1L), eq(1L), any());\n+    }\n+\n+    @Test\n+    public void removingHandlerCancelsTimeout() throws InterruptedException {\n+        WriteTimeoutHandler writeTimeoutHandler = new WriteTimeoutHandler(100);\n+\n+        ChannelHandlerContext ctx = mock(ChannelHandlerContext.class);\n+        when(ctx.executor()).thenReturn(new DefaultEventExecutor());\n+\n+        writeTimeoutHandler.handlerAdded(ctx);\n+        writeTimeoutHandler.handlerRemoved(ctx);\n+\n+        Thread.sleep(100);\n+\n+        verify(ctx, never()).fireExceptionCaught(any());\n+    }\n+\n+    @Test\n+    public void writeTimesOut() throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c9943f16f850995f6535b61f168aa8f982c9587"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1MTE3Mg==", "bodyText": "Both are on Windows.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13845#discussion_r468251172", "createdAt": "2020-08-11T00:03:39Z", "author": {"login": "jianghaolu"}, "path": "sdk/core/azure-core-http-netty/src/test/java/com/azure/core/http/netty/implementation/WriteTimeoutHandlerTests.java", "diffHunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.netty.implementation;\n+\n+import io.netty.channel.AbstractChannel;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.DefaultChannelPromise;\n+import io.netty.util.concurrent.DefaultEventExecutor;\n+import io.netty.util.concurrent.EventExecutor;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.atLeast;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.internal.verification.VerificationModeFactory.times;\n+\n+/**\n+ * Tests {@link WriteTimeoutHandler}.\n+ */\n+public class WriteTimeoutHandlerTests {\n+    @Test\n+    public void noTimeoutDoesNotAddWatcher() {\n+        WriteTimeoutHandler writeTimeoutHandler = new WriteTimeoutHandler(0);\n+\n+        EventExecutor eventExecutor = mock(EventExecutor.class);\n+        when(eventExecutor.scheduleAtFixedRate(any(), anyLong(), anyLong(), any())).thenReturn(null);\n+\n+        ChannelHandlerContext ctx = mock(ChannelHandlerContext.class);\n+        when(ctx.executor()).thenReturn(eventExecutor);\n+\n+        writeTimeoutHandler.handlerAdded(ctx);\n+\n+        verify(eventExecutor, never()).scheduleAtFixedRate(any(), anyLong(), anyLong(), any());\n+    }\n+\n+    @Test\n+    public void timeoutAddsWatcher() {\n+        WriteTimeoutHandler writeTimeoutHandler = new WriteTimeoutHandler(1);\n+\n+        EventExecutor eventExecutor = mock(EventExecutor.class);\n+        when(eventExecutor.scheduleAtFixedRate(any(), eq(1L), eq(1L), any())).thenReturn(null);\n+\n+        ChannelHandlerContext ctx = mock(ChannelHandlerContext.class);\n+        when(ctx.executor()).thenReturn(eventExecutor);\n+\n+        writeTimeoutHandler.handlerAdded(ctx);\n+\n+        verify(eventExecutor, times(1)).scheduleAtFixedRate(any(), eq(1L), eq(1L), any());\n+    }\n+\n+    @Test\n+    public void removingHandlerCancelsTimeout() throws InterruptedException {\n+        WriteTimeoutHandler writeTimeoutHandler = new WriteTimeoutHandler(100);\n+\n+        ChannelHandlerContext ctx = mock(ChannelHandlerContext.class);\n+        when(ctx.executor()).thenReturn(new DefaultEventExecutor());\n+\n+        writeTimeoutHandler.handlerAdded(ctx);\n+        writeTimeoutHandler.handlerRemoved(ctx);\n+\n+        Thread.sleep(100);\n+\n+        verify(ctx, never()).fireExceptionCaught(any());\n+    }\n+\n+    @Test\n+    public void writeTimesOut() throws InterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1MTA1MQ=="}, "originalCommit": {"oid": "8c9943f16f850995f6535b61f168aa8f982c9587"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4659, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}