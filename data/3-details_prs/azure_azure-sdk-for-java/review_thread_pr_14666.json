{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NTQ2MDUw", "number": 14666, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMDoyNjozN1rOEeiOMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOToxMTowNFrOEfCycw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNDUzNDI3OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMDoyNjozN1rOHKPHlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMDoyNjozN1rOHKPHlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ5NTUxMA==", "bodyText": "This will not be needed since you have the one with maximal overload below.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14666#discussion_r480495510", "createdAt": "2020-09-01T00:26:37Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -676,16 +676,181 @@ When updating a component, the patch string follows the below format\n </details>\n \n \n-<details>\n-<summary><b>APIs</b></summary>\n+<details><summary><b>Async APIs</b></summary>\n \n+These APIs are invoked via DigitalTwinsAsyncClient.\n \n ```java\n-TODO:\n+/**\n+ * Get a component of a digital twin.\n+ * @param digitalTwinId The Id of the digital twin to get the component from.\n+ * @param componentPath The path of the component on the digital twin to retrieve.\n+ * @return The application/json string representing the component of the digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> getComponent(String digitalTwinId, String componentPath)\n+\n+/**\n+ * Get a component of a digital twin.\n+ * @param digitalTwinId The Id of the digital twin to get the component from.\n+ * @param componentPath The path of the component on the digital twin to retrieve.\n+ * @return A {@link DigitalTwinsResponse} containing the application/json string representing the component of the digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<DigitalTwinsResponse<String>> getComponentWithResponse(String digitalTwinId, String componentPath)\n+\n+/**\n+ * Get a component of a digital twin.\n+ * @param digitalTwinId The Id of the digital twin to get the component from.\n+ * @param componentPath The path of the component on the digital twin to retrieve.\n+ * @param clazz The class to deserialize the application/json component into.\n+ * @param <T> The generic type to deserialize the component to.\n+ * @return The deserialized application/json object representing the component of the digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getComponent(String digitalTwinId, String componentPath, Class<T> clazz)\n+\n+/**\n+ * Get a component of a digital twin.\n+ * @param digitalTwinId The Id of the digital twin to get the component from.\n+ * @param componentPath The path of the component on the digital twin to retrieve.\n+ * @param clazz The class to deserialize the application/json component into.\n+ * @param <T> The generic type to deserialize the component to.\n+ * @return A {@link DigitalTwinsResponse} containing the deserialized application/json object representing the component of the digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<DigitalTwinsResponse<T>> getComponentWithResponse(String digitalTwinId, String componentPath, Class<T> clazz)\n+\n+/**\n+ * Patch a component on a digital twin.\n+ * @param digitalTwinId The Id of the digital twin that has the component to patch.\n+ * @param componentPath The path of the component on the digital twin.\n+ * @param componentUpdateOperations The application json patch to apply to the component. See {@link com.azure.digitaltwins.core.util.UpdateOperationUtility} for building\n+ *                                  this argument.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> updateComponent(String digitalTwinId, String componentPath, List<Object> componentUpdateOperations)\n+\n+/**\n+ * Patch a component on a digital twin.\n+ * @param digitalTwinId The Id of the digital twin that has the component to patch.\n+ * @param componentPath The path of the component on the digital twin.\n+ * @param componentUpdateOperations The application json patch to apply to the component. See {@link com.azure.digitaltwins.core.util.UpdateOperationUtility} for building\n+ *                                  this argument.\n+ * @param requestOptions The optional parameters for this request.\n+ * @return An empty Mono.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> updateComponent(String digitalTwinId, String componentPath, List<Object> componentUpdateOperations, RequestOptions requestOptions)\n+\n+/**\n+ * Patch a component on a digital twin.\n+ * @param digitalTwinId The Id of the digital twin that has the component to patch.\n+ * @param componentPath The path of the component on the digital twin.\n+ * @param componentUpdateOperations The application json patch to apply to the component. See {@link com.azure.digitaltwins.core.util.UpdateOperationUtility} for building\n+ *                                  this argument.\n+ * @return A {@link DigitalTwinsResponse} containing an empty Mono.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<DigitalTwinsResponse<Void>> updateComponentWithResponse(String digitalTwinId, String componentPath, List<Object> componentUpdateOperations)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2a140fd8764a25d7fdabbbe65c9e705cc66b837"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTYyMDM2OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODowMTo0MFrOHLCK2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxMDoyMVrOHLCdCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzMTkzMQ==", "bodyText": "can be a map instead", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14666#discussion_r481331931", "createdAt": "2020-09-01T18:01:40Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -716,4 +717,118 @@ public HttpPipeline getHttpPipeline() {\n \n         return protocolLayer.getDigitalTwinModels().updateWithResponseAsync(modelId, updateOperation, context);\n     }\n+\n+    //==================================================================================================================================================\n+    // Component APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Get a component of a digital twin.\n+     * @param digitalTwinId The Id of the digital twin to get the component from.\n+     * @param componentPath The path of the component on the digital twin to retrieve.\n+     * @return The application/json string representing the component of the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getComponent(String digitalTwinId, String componentPath) {\n+        return getComponentWithResponse(digitalTwinId, componentPath)\n+            .flatMap(response -> Mono.justOrEmpty(response.getValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bff025a6aaf2f7577a21fb0668ddae626b54bf9"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzMjEyNA==", "bodyText": ".map(DigitalTwinsResponse::getValue);", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14666#discussion_r481332124", "createdAt": "2020-09-01T18:02:02Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -716,4 +717,118 @@ public HttpPipeline getHttpPipeline() {\n \n         return protocolLayer.getDigitalTwinModels().updateWithResponseAsync(modelId, updateOperation, context);\n     }\n+\n+    //==================================================================================================================================================\n+    // Component APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Get a component of a digital twin.\n+     * @param digitalTwinId The Id of the digital twin to get the component from.\n+     * @param componentPath The path of the component on the digital twin to retrieve.\n+     * @return The application/json string representing the component of the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getComponent(String digitalTwinId, String componentPath) {\n+        return getComponentWithResponse(digitalTwinId, componentPath)\n+            .flatMap(response -> Mono.justOrEmpty(response.getValue()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzMTkzMQ=="}, "originalCommit": {"oid": "2bff025a6aaf2f7577a21fb0668ddae626b54bf9"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzMjgxMQ==", "bodyText": "So are these two basically the same then?\n.map(response -> response.getValue());\n.flatMap(response -> Mono.justOrEmpty(response.getValue()));", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14666#discussion_r481332811", "createdAt": "2020-09-01T18:03:21Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -716,4 +717,118 @@ public HttpPipeline getHttpPipeline() {\n \n         return protocolLayer.getDigitalTwinModels().updateWithResponseAsync(modelId, updateOperation, context);\n     }\n+\n+    //==================================================================================================================================================\n+    // Component APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Get a component of a digital twin.\n+     * @param digitalTwinId The Id of the digital twin to get the component from.\n+     * @param componentPath The path of the component on the digital twin to retrieve.\n+     * @return The application/json string representing the component of the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getComponent(String digitalTwinId, String componentPath) {\n+        return getComponentWithResponse(digitalTwinId, componentPath)\n+            .flatMap(response -> Mono.justOrEmpty(response.getValue()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzMTkzMQ=="}, "originalCommit": {"oid": "2bff025a6aaf2f7577a21fb0668ddae626b54bf9"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNjA5Mw==", "bodyText": "Yes, they are the same.\nThe first one will take the response emitted by the previous Mono, transform it to .getValue() and emit the result.\nThe second one will take the response emitted by the previous Mono, transform it into .getValue(), put it into a Mono, flatten it and emit the result.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14666#discussion_r481336093", "createdAt": "2020-09-01T18:09:27Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -716,4 +717,118 @@ public HttpPipeline getHttpPipeline() {\n \n         return protocolLayer.getDigitalTwinModels().updateWithResponseAsync(modelId, updateOperation, context);\n     }\n+\n+    //==================================================================================================================================================\n+    // Component APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Get a component of a digital twin.\n+     * @param digitalTwinId The Id of the digital twin to get the component from.\n+     * @param componentPath The path of the component on the digital twin to retrieve.\n+     * @return The application/json string representing the component of the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getComponent(String digitalTwinId, String componentPath) {\n+        return getComponentWithResponse(digitalTwinId, componentPath)\n+            .flatMap(response -> Mono.justOrEmpty(response.getValue()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzMTkzMQ=="}, "originalCommit": {"oid": "2bff025a6aaf2f7577a21fb0668ddae626b54bf9"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNjU4Ng==", "bodyText": "So the end result from both of these transformed APIs will be the .getValue() items directly.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14666#discussion_r481336586", "createdAt": "2020-09-01T18:10:21Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -716,4 +717,118 @@ public HttpPipeline getHttpPipeline() {\n \n         return protocolLayer.getDigitalTwinModels().updateWithResponseAsync(modelId, updateOperation, context);\n     }\n+\n+    //==================================================================================================================================================\n+    // Component APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Get a component of a digital twin.\n+     * @param digitalTwinId The Id of the digital twin to get the component from.\n+     * @param componentPath The path of the component on the digital twin to retrieve.\n+     * @return The application/json string representing the component of the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getComponent(String digitalTwinId, String componentPath) {\n+        return getComponentWithResponse(digitalTwinId, componentPath)\n+            .flatMap(response -> Mono.justOrEmpty(response.getValue()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzMTkzMQ=="}, "originalCommit": {"oid": "2bff025a6aaf2f7577a21fb0668ddae626b54bf9"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTYyNTEwOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODowMzoxN1rOHLCOIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODowMzoxN1rOHLCOIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzMjc3MQ==", "bodyText": "We should add a log statement here, before returning the error.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14666#discussion_r481332771", "createdAt": "2020-09-01T18:03:17Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -716,4 +717,118 @@ public HttpPipeline getHttpPipeline() {\n \n         return protocolLayer.getDigitalTwinModels().updateWithResponseAsync(modelId, updateOperation, context);\n     }\n+\n+    //==================================================================================================================================================\n+    // Component APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Get a component of a digital twin.\n+     * @param digitalTwinId The Id of the digital twin to get the component from.\n+     * @param componentPath The path of the component on the digital twin to retrieve.\n+     * @return The application/json string representing the component of the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getComponent(String digitalTwinId, String componentPath) {\n+        return getComponentWithResponse(digitalTwinId, componentPath)\n+            .flatMap(response -> Mono.justOrEmpty(response.getValue()));\n+    }\n+\n+    /**\n+     * Get a component of a digital twin.\n+     * @param digitalTwinId The Id of the digital twin to get the component from.\n+     * @param componentPath The path of the component on the digital twin to retrieve.\n+     * @return A {@link DigitalTwinsResponse} containing the application/json string representing the component of the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getComponentWithResponse(String digitalTwinId, String componentPath) {\n+        return withContext(context -> getComponentWithResponse(digitalTwinId, componentPath, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getComponentWithResponse(String digitalTwinId, String componentPath, Context context) {\n+        return protocolLayer.getDigitalTwins().getComponentWithResponseAsync(digitalTwinId, componentPath, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bff025a6aaf2f7577a21fb0668ddae626b54bf9"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTYyNjg3OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODowMzo1M1rOHLCPXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODowMzo1M1rOHLCPXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzMzA4Nw==", "bodyText": "this can also be .map", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14666#discussion_r481333087", "createdAt": "2020-09-01T18:03:53Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -716,4 +717,118 @@ public HttpPipeline getHttpPipeline() {\n \n         return protocolLayer.getDigitalTwinModels().updateWithResponseAsync(modelId, updateOperation, context);\n     }\n+\n+    //==================================================================================================================================================\n+    // Component APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Get a component of a digital twin.\n+     * @param digitalTwinId The Id of the digital twin to get the component from.\n+     * @param componentPath The path of the component on the digital twin to retrieve.\n+     * @return The application/json string representing the component of the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getComponent(String digitalTwinId, String componentPath) {\n+        return getComponentWithResponse(digitalTwinId, componentPath)\n+            .flatMap(response -> Mono.justOrEmpty(response.getValue()));\n+    }\n+\n+    /**\n+     * Get a component of a digital twin.\n+     * @param digitalTwinId The Id of the digital twin to get the component from.\n+     * @param componentPath The path of the component on the digital twin to retrieve.\n+     * @return A {@link DigitalTwinsResponse} containing the application/json string representing the component of the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getComponentWithResponse(String digitalTwinId, String componentPath) {\n+        return withContext(context -> getComponentWithResponse(digitalTwinId, componentPath, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getComponentWithResponse(String digitalTwinId, String componentPath, Context context) {\n+        return protocolLayer.getDigitalTwins().getComponentWithResponseAsync(digitalTwinId, componentPath, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Get a component of a digital twin.\n+     * @param digitalTwinId The Id of the digital twin to get the component from.\n+     * @param componentPath The path of the component on the digital twin to retrieve.\n+     * @param clazz The class to deserialize the application/json component into.\n+     * @param <T> The generic type to deserialize the component to.\n+     * @return The deserialized application/json object representing the component of the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getComponent(String digitalTwinId, String componentPath, Class<T> clazz) {\n+        return getComponentWithResponse(digitalTwinId, componentPath, clazz)\n+            .flatMap(response -> Mono.justOrEmpty(response.getValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bff025a6aaf2f7577a21fb0668ddae626b54bf9"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTYzNDE1OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODowNjowMlrOHLCUHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODowNzo0MFrOHLCXcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNDMwMw==", "bodyText": "Good point, I believe I've missed this check in the update relationship API, would you mind adding this there as well?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14666#discussion_r481334303", "createdAt": "2020-09-01T18:06:02Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -716,4 +717,118 @@ public HttpPipeline getHttpPipeline() {\n \n         return protocolLayer.getDigitalTwinModels().updateWithResponseAsync(modelId, updateOperation, context);\n     }\n+\n+    //==================================================================================================================================================\n+    // Component APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Get a component of a digital twin.\n+     * @param digitalTwinId The Id of the digital twin to get the component from.\n+     * @param componentPath The path of the component on the digital twin to retrieve.\n+     * @return The application/json string representing the component of the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getComponent(String digitalTwinId, String componentPath) {\n+        return getComponentWithResponse(digitalTwinId, componentPath)\n+            .flatMap(response -> Mono.justOrEmpty(response.getValue()));\n+    }\n+\n+    /**\n+     * Get a component of a digital twin.\n+     * @param digitalTwinId The Id of the digital twin to get the component from.\n+     * @param componentPath The path of the component on the digital twin to retrieve.\n+     * @return A {@link DigitalTwinsResponse} containing the application/json string representing the component of the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getComponentWithResponse(String digitalTwinId, String componentPath) {\n+        return withContext(context -> getComponentWithResponse(digitalTwinId, componentPath, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getComponentWithResponse(String digitalTwinId, String componentPath, Context context) {\n+        return protocolLayer.getDigitalTwins().getComponentWithResponseAsync(digitalTwinId, componentPath, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Get a component of a digital twin.\n+     * @param digitalTwinId The Id of the digital twin to get the component from.\n+     * @param componentPath The path of the component on the digital twin to retrieve.\n+     * @param clazz The class to deserialize the application/json component into.\n+     * @param <T> The generic type to deserialize the component to.\n+     * @return The deserialized application/json object representing the component of the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getComponent(String digitalTwinId, String componentPath, Class<T> clazz) {\n+        return getComponentWithResponse(digitalTwinId, componentPath, clazz)\n+            .flatMap(response -> Mono.justOrEmpty(response.getValue()));\n+    }\n+\n+    /**\n+     * Get a component of a digital twin.\n+     * @param digitalTwinId The Id of the digital twin to get the component from.\n+     * @param componentPath The path of the component on the digital twin to retrieve.\n+     * @param clazz The class to deserialize the application/json component into.\n+     * @param <T> The generic type to deserialize the component to.\n+     * @return A {@link DigitalTwinsResponse} containing the deserialized application/json object representing the component of the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getComponentWithResponse(String digitalTwinId, String componentPath, Class<T> clazz) {\n+        return withContext(context -> getComponentWithResponse(digitalTwinId, componentPath, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getComponentWithResponse(String digitalTwinId, String componentPath, Class<T> clazz, Context context) {\n+        return protocolLayer.getDigitalTwins().getComponentWithResponseAsync(digitalTwinId, componentPath, context)\n+            .flatMap(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return Mono.just(new DigitalTwinsResponse<T>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders));\n+            });\n+    }\n+\n+    /**\n+     * Patch a component on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin that has the component to patch.\n+     * @param componentPath The path of the component on the digital twin.\n+     * @param componentUpdateOperations The application json patch to apply to the component. See {@link com.azure.digitaltwins.core.util.UpdateOperationUtility} for building\n+     *                                  this argument.\n+     * @return An empty Mono.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> updateComponent(String digitalTwinId, String componentPath, List<Object> componentUpdateOperations) {\n+        return updateComponentWithResponse(digitalTwinId, componentPath, componentUpdateOperations, new UpdateComponentRequestOptions())\n+            .flatMap(response -> Mono.justOrEmpty(response.getValue()));\n+    }\n+\n+    /**\n+     * Patch a component on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin that has the component to patch.\n+     * @param componentPath The path of the component on the digital twin.\n+     * @param componentUpdateOperations The application json patch to apply to the component. See {@link com.azure.digitaltwins.core.util.UpdateOperationUtility} for building\n+     *                                  this argument.\n+     * @param requestOptions The optional parameters for this request.\n+     * @return A {@link DigitalTwinsResponse} containing an empty Mono.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<Void>> updateComponentWithResponse(String digitalTwinId, String componentPath, List<Object> componentUpdateOperations, UpdateComponentRequestOptions requestOptions) {\n+        return withContext(context -> updateComponentWithResponse(digitalTwinId, componentPath, componentUpdateOperations, requestOptions, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<Void>> updateComponentWithResponse(String digitalTwinId, String componentPath, List<Object> componentUpdateOperations, UpdateComponentRequestOptions requestOptions, Context context) {\n+        String ifMatch = requestOptions != null ? requestOptions.getIfMatch() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bff025a6aaf2f7577a21fb0668ddae626b54bf9"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNDczMg==", "bodyText": "Sure thing", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14666#discussion_r481334732", "createdAt": "2020-09-01T18:06:51Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -716,4 +717,118 @@ public HttpPipeline getHttpPipeline() {\n \n         return protocolLayer.getDigitalTwinModels().updateWithResponseAsync(modelId, updateOperation, context);\n     }\n+\n+    //==================================================================================================================================================\n+    // Component APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Get a component of a digital twin.\n+     * @param digitalTwinId The Id of the digital twin to get the component from.\n+     * @param componentPath The path of the component on the digital twin to retrieve.\n+     * @return The application/json string representing the component of the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getComponent(String digitalTwinId, String componentPath) {\n+        return getComponentWithResponse(digitalTwinId, componentPath)\n+            .flatMap(response -> Mono.justOrEmpty(response.getValue()));\n+    }\n+\n+    /**\n+     * Get a component of a digital twin.\n+     * @param digitalTwinId The Id of the digital twin to get the component from.\n+     * @param componentPath The path of the component on the digital twin to retrieve.\n+     * @return A {@link DigitalTwinsResponse} containing the application/json string representing the component of the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getComponentWithResponse(String digitalTwinId, String componentPath) {\n+        return withContext(context -> getComponentWithResponse(digitalTwinId, componentPath, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getComponentWithResponse(String digitalTwinId, String componentPath, Context context) {\n+        return protocolLayer.getDigitalTwins().getComponentWithResponseAsync(digitalTwinId, componentPath, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Get a component of a digital twin.\n+     * @param digitalTwinId The Id of the digital twin to get the component from.\n+     * @param componentPath The path of the component on the digital twin to retrieve.\n+     * @param clazz The class to deserialize the application/json component into.\n+     * @param <T> The generic type to deserialize the component to.\n+     * @return The deserialized application/json object representing the component of the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getComponent(String digitalTwinId, String componentPath, Class<T> clazz) {\n+        return getComponentWithResponse(digitalTwinId, componentPath, clazz)\n+            .flatMap(response -> Mono.justOrEmpty(response.getValue()));\n+    }\n+\n+    /**\n+     * Get a component of a digital twin.\n+     * @param digitalTwinId The Id of the digital twin to get the component from.\n+     * @param componentPath The path of the component on the digital twin to retrieve.\n+     * @param clazz The class to deserialize the application/json component into.\n+     * @param <T> The generic type to deserialize the component to.\n+     * @return A {@link DigitalTwinsResponse} containing the deserialized application/json object representing the component of the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getComponentWithResponse(String digitalTwinId, String componentPath, Class<T> clazz) {\n+        return withContext(context -> getComponentWithResponse(digitalTwinId, componentPath, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getComponentWithResponse(String digitalTwinId, String componentPath, Class<T> clazz, Context context) {\n+        return protocolLayer.getDigitalTwins().getComponentWithResponseAsync(digitalTwinId, componentPath, context)\n+            .flatMap(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return Mono.just(new DigitalTwinsResponse<T>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders));\n+            });\n+    }\n+\n+    /**\n+     * Patch a component on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin that has the component to patch.\n+     * @param componentPath The path of the component on the digital twin.\n+     * @param componentUpdateOperations The application json patch to apply to the component. See {@link com.azure.digitaltwins.core.util.UpdateOperationUtility} for building\n+     *                                  this argument.\n+     * @return An empty Mono.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> updateComponent(String digitalTwinId, String componentPath, List<Object> componentUpdateOperations) {\n+        return updateComponentWithResponse(digitalTwinId, componentPath, componentUpdateOperations, new UpdateComponentRequestOptions())\n+            .flatMap(response -> Mono.justOrEmpty(response.getValue()));\n+    }\n+\n+    /**\n+     * Patch a component on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin that has the component to patch.\n+     * @param componentPath The path of the component on the digital twin.\n+     * @param componentUpdateOperations The application json patch to apply to the component. See {@link com.azure.digitaltwins.core.util.UpdateOperationUtility} for building\n+     *                                  this argument.\n+     * @param requestOptions The optional parameters for this request.\n+     * @return A {@link DigitalTwinsResponse} containing an empty Mono.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<Void>> updateComponentWithResponse(String digitalTwinId, String componentPath, List<Object> componentUpdateOperations, UpdateComponentRequestOptions requestOptions) {\n+        return withContext(context -> updateComponentWithResponse(digitalTwinId, componentPath, componentUpdateOperations, requestOptions, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<Void>> updateComponentWithResponse(String digitalTwinId, String componentPath, List<Object> componentUpdateOperations, UpdateComponentRequestOptions requestOptions, Context context) {\n+        String ifMatch = requestOptions != null ? requestOptions.getIfMatch() : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNDMwMw=="}, "originalCommit": {"oid": "2bff025a6aaf2f7577a21fb0668ddae626b54bf9"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNTE1NQ==", "bodyText": "I'll do the same for the deleteRelationship API as well, since it is missing there, too", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14666#discussion_r481335155", "createdAt": "2020-09-01T18:07:40Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -716,4 +717,118 @@ public HttpPipeline getHttpPipeline() {\n \n         return protocolLayer.getDigitalTwinModels().updateWithResponseAsync(modelId, updateOperation, context);\n     }\n+\n+    //==================================================================================================================================================\n+    // Component APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Get a component of a digital twin.\n+     * @param digitalTwinId The Id of the digital twin to get the component from.\n+     * @param componentPath The path of the component on the digital twin to retrieve.\n+     * @return The application/json string representing the component of the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getComponent(String digitalTwinId, String componentPath) {\n+        return getComponentWithResponse(digitalTwinId, componentPath)\n+            .flatMap(response -> Mono.justOrEmpty(response.getValue()));\n+    }\n+\n+    /**\n+     * Get a component of a digital twin.\n+     * @param digitalTwinId The Id of the digital twin to get the component from.\n+     * @param componentPath The path of the component on the digital twin to retrieve.\n+     * @return A {@link DigitalTwinsResponse} containing the application/json string representing the component of the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getComponentWithResponse(String digitalTwinId, String componentPath) {\n+        return withContext(context -> getComponentWithResponse(digitalTwinId, componentPath, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getComponentWithResponse(String digitalTwinId, String componentPath, Context context) {\n+        return protocolLayer.getDigitalTwins().getComponentWithResponseAsync(digitalTwinId, componentPath, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Get a component of a digital twin.\n+     * @param digitalTwinId The Id of the digital twin to get the component from.\n+     * @param componentPath The path of the component on the digital twin to retrieve.\n+     * @param clazz The class to deserialize the application/json component into.\n+     * @param <T> The generic type to deserialize the component to.\n+     * @return The deserialized application/json object representing the component of the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getComponent(String digitalTwinId, String componentPath, Class<T> clazz) {\n+        return getComponentWithResponse(digitalTwinId, componentPath, clazz)\n+            .flatMap(response -> Mono.justOrEmpty(response.getValue()));\n+    }\n+\n+    /**\n+     * Get a component of a digital twin.\n+     * @param digitalTwinId The Id of the digital twin to get the component from.\n+     * @param componentPath The path of the component on the digital twin to retrieve.\n+     * @param clazz The class to deserialize the application/json component into.\n+     * @param <T> The generic type to deserialize the component to.\n+     * @return A {@link DigitalTwinsResponse} containing the deserialized application/json object representing the component of the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getComponentWithResponse(String digitalTwinId, String componentPath, Class<T> clazz) {\n+        return withContext(context -> getComponentWithResponse(digitalTwinId, componentPath, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getComponentWithResponse(String digitalTwinId, String componentPath, Class<T> clazz, Context context) {\n+        return protocolLayer.getDigitalTwins().getComponentWithResponseAsync(digitalTwinId, componentPath, context)\n+            .flatMap(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return Mono.just(new DigitalTwinsResponse<T>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders));\n+            });\n+    }\n+\n+    /**\n+     * Patch a component on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin that has the component to patch.\n+     * @param componentPath The path of the component on the digital twin.\n+     * @param componentUpdateOperations The application json patch to apply to the component. See {@link com.azure.digitaltwins.core.util.UpdateOperationUtility} for building\n+     *                                  this argument.\n+     * @return An empty Mono.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> updateComponent(String digitalTwinId, String componentPath, List<Object> componentUpdateOperations) {\n+        return updateComponentWithResponse(digitalTwinId, componentPath, componentUpdateOperations, new UpdateComponentRequestOptions())\n+            .flatMap(response -> Mono.justOrEmpty(response.getValue()));\n+    }\n+\n+    /**\n+     * Patch a component on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin that has the component to patch.\n+     * @param componentPath The path of the component on the digital twin.\n+     * @param componentUpdateOperations The application json patch to apply to the component. See {@link com.azure.digitaltwins.core.util.UpdateOperationUtility} for building\n+     *                                  this argument.\n+     * @param requestOptions The optional parameters for this request.\n+     * @return A {@link DigitalTwinsResponse} containing an empty Mono.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<Void>> updateComponentWithResponse(String digitalTwinId, String componentPath, List<Object> componentUpdateOperations, UpdateComponentRequestOptions requestOptions) {\n+        return withContext(context -> updateComponentWithResponse(digitalTwinId, componentPath, componentUpdateOperations, requestOptions, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<Void>> updateComponentWithResponse(String digitalTwinId, String componentPath, List<Object> componentUpdateOperations, UpdateComponentRequestOptions requestOptions, Context context) {\n+        String ifMatch = requestOptions != null ? requestOptions.getIfMatch() : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNDMwMw=="}, "originalCommit": {"oid": "2bff025a6aaf2f7577a21fb0668ddae626b54bf9"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY2NzEyOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxNjowMFrOHLCovw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMDozOFrOHLCzFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzOTU4Mw==", "bodyText": "We've been following the format where the async APIs call the async overloads, and the max overload API calls the PL.\nSimilarly, the sync APIs call the sync overloads, and the max overload sync API calls  the async API.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14666#discussion_r481339583", "createdAt": "2020-09-01T18:16:00Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -381,4 +381,85 @@ public void decommissionModel(String modelId) {\n     public Response<Void> decommissionModelWithResponse(String modelId, Context context) {\n         return digitalTwinsAsyncClient.decommissionModelWithResponse(modelId, context).block();\n     }\n+\n+    //==================================================================================================================================================\n+    // Component APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Get a component of a digital twin.\n+     * @param digitalTwinId The Id of the digital twin to get the component from.\n+     * @param componentPath The path of the component on the digital twin to retrieve.\n+     * @return The application/json string representing the component of the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public String getComponent(String digitalTwinId, String componentPath) {\n+        return digitalTwinsAsyncClient.getComponent(digitalTwinId, componentPath).block();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c30ec743ff8983ce9043a0493af7ba18ce88c421"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MDk5MQ==", "bodyText": "Gotcha, I can chain it that way instead", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14666#discussion_r481340991", "createdAt": "2020-09-01T18:18:29Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -381,4 +381,85 @@ public void decommissionModel(String modelId) {\n     public Response<Void> decommissionModelWithResponse(String modelId, Context context) {\n         return digitalTwinsAsyncClient.decommissionModelWithResponse(modelId, context).block();\n     }\n+\n+    //==================================================================================================================================================\n+    // Component APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Get a component of a digital twin.\n+     * @param digitalTwinId The Id of the digital twin to get the component from.\n+     * @param componentPath The path of the component on the digital twin to retrieve.\n+     * @return The application/json string representing the component of the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public String getComponent(String digitalTwinId, String componentPath) {\n+        return digitalTwinsAsyncClient.getComponent(digitalTwinId, componentPath).block();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzOTU4Mw=="}, "originalCommit": {"oid": "c30ec743ff8983ce9043a0493af7ba18ce88c421"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MjIzMQ==", "bodyText": "Fiyi - for default context you can use Context.NONE.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14666#discussion_r481342231", "createdAt": "2020-09-01T18:20:38Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -381,4 +381,85 @@ public void decommissionModel(String modelId) {\n     public Response<Void> decommissionModelWithResponse(String modelId, Context context) {\n         return digitalTwinsAsyncClient.decommissionModelWithResponse(modelId, context).block();\n     }\n+\n+    //==================================================================================================================================================\n+    // Component APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Get a component of a digital twin.\n+     * @param digitalTwinId The Id of the digital twin to get the component from.\n+     * @param componentPath The path of the component on the digital twin to retrieve.\n+     * @return The application/json string representing the component of the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public String getComponent(String digitalTwinId, String componentPath) {\n+        return digitalTwinsAsyncClient.getComponent(digitalTwinId, componentPath).block();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzOTU4Mw=="}, "originalCommit": {"oid": "c30ec743ff8983ce9043a0493af7ba18ce88c421"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY3MDQ1OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxNzowM1rOHLCrCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxODowMFrOHLCtMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MDE3MA==", "bodyText": "nit: this can be replaced by a method reference .map(DigitalTwinsResponse::getValue).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14666#discussion_r481340170", "createdAt": "2020-09-01T18:17:03Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -716,4 +721,119 @@ public HttpPipeline getHttpPipeline() {\n \n         return protocolLayer.getDigitalTwinModels().updateWithResponseAsync(modelId, updateOperation, context);\n     }\n+\n+    //==================================================================================================================================================\n+    // Component APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Get a component of a digital twin.\n+     * @param digitalTwinId The Id of the digital twin to get the component from.\n+     * @param componentPath The path of the component on the digital twin to retrieve.\n+     * @return The application/json string representing the component of the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getComponent(String digitalTwinId, String componentPath) {\n+        return getComponentWithResponse(digitalTwinId, componentPath)\n+            .map(response -> response.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c30ec743ff8983ce9043a0493af7ba18ce88c421"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MDU4Nw==", "bodyText": "Ha, too slow. I just figured this out while looking at another PR", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14666#discussion_r481340587", "createdAt": "2020-09-01T18:17:47Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -716,4 +721,119 @@ public HttpPipeline getHttpPipeline() {\n \n         return protocolLayer.getDigitalTwinModels().updateWithResponseAsync(modelId, updateOperation, context);\n     }\n+\n+    //==================================================================================================================================================\n+    // Component APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Get a component of a digital twin.\n+     * @param digitalTwinId The Id of the digital twin to get the component from.\n+     * @param componentPath The path of the component on the digital twin to retrieve.\n+     * @return The application/json string representing the component of the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getComponent(String digitalTwinId, String componentPath) {\n+        return getComponentWithResponse(digitalTwinId, componentPath)\n+            .map(response -> response.getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MDE3MA=="}, "originalCommit": {"oid": "c30ec743ff8983ce9043a0493af7ba18ce88c421"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MDcyMg==", "bodyText": "So I made this change already", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14666#discussion_r481340722", "createdAt": "2020-09-01T18:18:00Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -716,4 +721,119 @@ public HttpPipeline getHttpPipeline() {\n \n         return protocolLayer.getDigitalTwinModels().updateWithResponseAsync(modelId, updateOperation, context);\n     }\n+\n+    //==================================================================================================================================================\n+    // Component APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Get a component of a digital twin.\n+     * @param digitalTwinId The Id of the digital twin to get the component from.\n+     * @param componentPath The path of the component on the digital twin to retrieve.\n+     * @return The application/json string representing the component of the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getComponent(String digitalTwinId, String componentPath) {\n+        return getComponentWithResponse(digitalTwinId, componentPath)\n+            .map(response -> response.getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MDE3MA=="}, "originalCommit": {"oid": "c30ec743ff8983ce9043a0493af7ba18ce88c421"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY3OTQ5OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/UpdateComponentRequestOptions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxOTozNVrOHLCwxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxOTo1NFrOHLCxlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MTYzNw==", "bodyText": "Would you mind adding a similar class for the update relationship request options as well, and changing the API signature to take in the new inherited type?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14666#discussion_r481341637", "createdAt": "2020-09-01T18:19:35Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/UpdateComponentRequestOptions.java", "diffHunk": "@@ -0,0 +1,16 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+\n+import java.util.List;\n+\n+/**\n+ * Optional settings that are specific to calls to {@link DigitalTwinsClient#updateComponent(String, String, List)} and its overloads.\n+ */\n+public class UpdateComponentRequestOptions extends RequestOptions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef022bb338b5e3660e310d2905691c357920ed67"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MTg0NA==", "bodyText": "Sure thing", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14666#discussion_r481341844", "createdAt": "2020-09-01T18:19:54Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/UpdateComponentRequestOptions.java", "diffHunk": "@@ -0,0 +1,16 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+\n+import java.util.List;\n+\n+/**\n+ * Optional settings that are specific to calls to {@link DigitalTwinsClient#updateComponent(String, String, List)} and its overloads.\n+ */\n+public class UpdateComponentRequestOptions extends RequestOptions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MTYzNw=="}, "originalCommit": {"oid": "ef022bb338b5e3660e310d2905691c357920ed67"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTg2OTk1OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DeleteRelationshipRequestOptions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOToxMTowNFrOHLEnXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOToxMjozN1rOHLEqqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3MTk5Nw==", "bodyText": "Ah, is this because of the need for fluent getters and setters?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14666#discussion_r481371997", "createdAt": "2020-09-01T19:11:04Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DeleteRelationshipRequestOptions.java", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+\n+import java.util.List;\n+\n+/**\n+ * Optional settings that are specific to calls to {@link DigitalTwinsClient#updateComponent(String, String, List)} and its overloads.\n+ */\n+public class DeleteRelationshipRequestOptions extends RequestOptions {\n+    // This class exists to be added to later if the deleteRelationship APIs get a new optional parameter in later service\n+    // API versions and so that we don't have to expose that new optional parameter for other APIs like deleteDigitalTwin\n+\n+    @Override\n+    public DeleteRelationshipRequestOptions setIfMatch(String ifMatch) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c8cf948a8321130e384c6c827820698404ecb6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3MjU1NQ==", "bodyText": "Yeah, without the override, the fluent return value will be of type RequestOption, not the inheriting class", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14666#discussion_r481372555", "createdAt": "2020-09-01T19:12:06Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DeleteRelationshipRequestOptions.java", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+\n+import java.util.List;\n+\n+/**\n+ * Optional settings that are specific to calls to {@link DigitalTwinsClient#updateComponent(String, String, List)} and its overloads.\n+ */\n+public class DeleteRelationshipRequestOptions extends RequestOptions {\n+    // This class exists to be added to later if the deleteRelationship APIs get a new optional parameter in later service\n+    // API versions and so that we don't have to expose that new optional parameter for other APIs like deleteDigitalTwin\n+\n+    @Override\n+    public DeleteRelationshipRequestOptions setIfMatch(String ifMatch) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3MTk5Nw=="}, "originalCommit": {"oid": "45c8cf948a8321130e384c6c827820698404ecb6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3Mjg0Mw==", "bodyText": "It's a bit of code duplication, but at least the javadocs are inherited correctly", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14666#discussion_r481372843", "createdAt": "2020-09-01T19:12:37Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DeleteRelationshipRequestOptions.java", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+\n+import java.util.List;\n+\n+/**\n+ * Optional settings that are specific to calls to {@link DigitalTwinsClient#updateComponent(String, String, List)} and its overloads.\n+ */\n+public class DeleteRelationshipRequestOptions extends RequestOptions {\n+    // This class exists to be added to later if the deleteRelationship APIs get a new optional parameter in later service\n+    // API versions and so that we don't have to expose that new optional parameter for other APIs like deleteDigitalTwin\n+\n+    @Override\n+    public DeleteRelationshipRequestOptions setIfMatch(String ifMatch) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3MTk5Nw=="}, "originalCommit": {"oid": "45c8cf948a8321130e384c6c827820698404ecb6"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1355, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}