{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2OTI1MDE5", "number": 16597, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjo0MDo0M1rOEv4YHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzo0MjoxOVrOEv528w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjQyMjA3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/jsonpatch/JsonPatchDocument.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjo0MDo0M1rOHlHXCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMjowMjoxMlrOHlSyWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY3OTk0Nw==", "bodyText": "wondering whether we really need a Supplier instance or just taking Option is good enough. We seem to invoke the supplier immediately.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16597#discussion_r508679947", "createdAt": "2020-10-20T16:40:43Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/jsonpatch/JsonPatchDocument.java", "diffHunk": "@@ -89,18 +90,18 @@ public JsonPatchDocument appendAdd(String path, Object value) {\n      *\n      * <p><strong>Code Samples</strong></p>\n      *\n-     * {@codesnippet com.azure.core.experimental.jsonpatch.JsonPatchDocument.appendAddRaw#String-String}\n+     * {@codesnippet com.azure.core.util.jsonpatch.JsonPatchDocument.appendAddRaw#String-String}\n      *\n      * @param path The path to apply the addition.\n      * @param rawJson The raw JSON value that will be added to the path.\n      * @return The updated JsonPatchDocument object.\n      * @throws NullPointerException If {@code path} is null.\n      */\n     public JsonPatchDocument appendAddRaw(String path, String rawJson) {\n-        return appendAddInternal(path, () -> Optional.ofNullable(rawJson));\n+        return appendAddInternal(path, () -> Option.of(rawJson));\n     }\n \n-    private JsonPatchDocument appendAddInternal(String path, Supplier<Optional<String>> jsonSupplier) {\n+    private JsonPatchDocument appendAddInternal(String path, Supplier<Option<String>> jsonSupplier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e636b4f58bc2184e30475177b997125eb22b7e36"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2NzE2MQ==", "bodyText": "Removed, this could be brought back in the future to defer serialization of the Object until serialization or toString is called.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16597#discussion_r508867161", "createdAt": "2020-10-20T22:02:12Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/jsonpatch/JsonPatchDocument.java", "diffHunk": "@@ -89,18 +90,18 @@ public JsonPatchDocument appendAdd(String path, Object value) {\n      *\n      * <p><strong>Code Samples</strong></p>\n      *\n-     * {@codesnippet com.azure.core.experimental.jsonpatch.JsonPatchDocument.appendAddRaw#String-String}\n+     * {@codesnippet com.azure.core.util.jsonpatch.JsonPatchDocument.appendAddRaw#String-String}\n      *\n      * @param path The path to apply the addition.\n      * @param rawJson The raw JSON value that will be added to the path.\n      * @return The updated JsonPatchDocument object.\n      * @throws NullPointerException If {@code path} is null.\n      */\n     public JsonPatchDocument appendAddRaw(String path, String rawJson) {\n-        return appendAddInternal(path, () -> Optional.ofNullable(rawJson));\n+        return appendAddInternal(path, () -> Option.of(rawJson));\n     }\n \n-    private JsonPatchDocument appendAddInternal(String path, Supplier<Optional<String>> jsonSupplier) {\n+    private JsonPatchDocument appendAddInternal(String path, Supplier<Option<String>> jsonSupplier) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY3OTk0Nw=="}, "originalCommit": {"oid": "e636b4f58bc2184e30475177b997125eb22b7e36"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjQ5NDg4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/jsonpatch/JsonPatchDocument.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjo1ODozN1rOHlIElw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMzoyNjowMFrOHlUp8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5MTYwNw==", "bodyText": "not sure but probably static + DCL is safe in latest version of java, I remember spot bug alerting DCL in the past. jfyi, there is also an init-on-demand-holder pattern for these cases which won't require an explicit lock.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16597#discussion_r508691607", "createdAt": "2020-10-20T16:58:37Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/jsonpatch/JsonPatchDocument.java", "diffHunk": "@@ -236,46 +237,56 @@ public JsonPatchDocument appendTest(String path, Object value) {\n      *\n      * <p><strong>Code Samples</strong></p>\n      *\n-     * {@codesnippet com.azure.core.experimental.jsonpatch.JsonPatchDocument.appendTestRaw#String-String}\n+     * {@codesnippet com.azure.core.util.jsonpatch.JsonPatchDocument.appendTestRaw#String-String}\n      *\n      * @param path The path to test.\n      * @param rawJson The raw JSON value that will be used to test against.\n      * @return The updated JsonPatchDocument object.\n      * @throws NullPointerException If {@code path} is null.\n      */\n     public JsonPatchDocument appendTestRaw(String path, String rawJson) {\n-        return appendTestInternal(path, () -> Optional.ofNullable(rawJson));\n+        return appendTestInternal(path, () -> Option.of(rawJson));\n     }\n \n-    private JsonPatchDocument appendTestInternal(String path, Supplier<Optional<String>> jsonSupplier) {\n+    private JsonPatchDocument appendTestInternal(String path, Supplier<Option<String>> jsonSupplier) {\n         Objects.requireNonNull(path, \"'path' cannot be null.\");\n \n         return appendOperation(JsonPatchOperationKind.TEST, null, path, jsonSupplier.get());\n     }\n \n-    private Optional<String> serializeValue(Object value) {\n+    private Option<String> serializeValue(Object value) {\n         if (value == null) {\n-            return Optional.empty();\n+            return Option.empty();\n         }\n \n         String rawValue;\n         try {\n+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+\n             if (serializer == null) {\n-                rawValue = MAPPER.writeValueAsString(value);\n+                if (DEFAULT_SERIALIZER == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e636b4f58bc2184e30475177b997125eb22b7e36"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyMTA3OA==", "bodyText": "Yeah, I agree that if we want lazy loading use holder pattern. DCL with static might not be safe. If this is a constant then, it should be initialized by the classloader in a static block.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16597#discussion_r508721078", "createdAt": "2020-10-20T17:46:18Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/jsonpatch/JsonPatchDocument.java", "diffHunk": "@@ -236,46 +237,56 @@ public JsonPatchDocument appendTest(String path, Object value) {\n      *\n      * <p><strong>Code Samples</strong></p>\n      *\n-     * {@codesnippet com.azure.core.experimental.jsonpatch.JsonPatchDocument.appendTestRaw#String-String}\n+     * {@codesnippet com.azure.core.util.jsonpatch.JsonPatchDocument.appendTestRaw#String-String}\n      *\n      * @param path The path to test.\n      * @param rawJson The raw JSON value that will be used to test against.\n      * @return The updated JsonPatchDocument object.\n      * @throws NullPointerException If {@code path} is null.\n      */\n     public JsonPatchDocument appendTestRaw(String path, String rawJson) {\n-        return appendTestInternal(path, () -> Optional.ofNullable(rawJson));\n+        return appendTestInternal(path, () -> Option.of(rawJson));\n     }\n \n-    private JsonPatchDocument appendTestInternal(String path, Supplier<Optional<String>> jsonSupplier) {\n+    private JsonPatchDocument appendTestInternal(String path, Supplier<Option<String>> jsonSupplier) {\n         Objects.requireNonNull(path, \"'path' cannot be null.\");\n \n         return appendOperation(JsonPatchOperationKind.TEST, null, path, jsonSupplier.get());\n     }\n \n-    private Optional<String> serializeValue(Object value) {\n+    private Option<String> serializeValue(Object value) {\n         if (value == null) {\n-            return Optional.empty();\n+            return Option.empty();\n         }\n \n         String rawValue;\n         try {\n+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+\n             if (serializer == null) {\n-                rawValue = MAPPER.writeValueAsString(value);\n+                if (DEFAULT_SERIALIZER == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5MTYwNw=="}, "originalCommit": {"oid": "e636b4f58bc2184e30475177b997125eb22b7e36"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2NjkxMA==", "bodyText": "Made the static violatile.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16597#discussion_r508866910", "createdAt": "2020-10-20T22:01:36Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/jsonpatch/JsonPatchDocument.java", "diffHunk": "@@ -236,46 +237,56 @@ public JsonPatchDocument appendTest(String path, Object value) {\n      *\n      * <p><strong>Code Samples</strong></p>\n      *\n-     * {@codesnippet com.azure.core.experimental.jsonpatch.JsonPatchDocument.appendTestRaw#String-String}\n+     * {@codesnippet com.azure.core.util.jsonpatch.JsonPatchDocument.appendTestRaw#String-String}\n      *\n      * @param path The path to test.\n      * @param rawJson The raw JSON value that will be used to test against.\n      * @return The updated JsonPatchDocument object.\n      * @throws NullPointerException If {@code path} is null.\n      */\n     public JsonPatchDocument appendTestRaw(String path, String rawJson) {\n-        return appendTestInternal(path, () -> Optional.ofNullable(rawJson));\n+        return appendTestInternal(path, () -> Option.of(rawJson));\n     }\n \n-    private JsonPatchDocument appendTestInternal(String path, Supplier<Optional<String>> jsonSupplier) {\n+    private JsonPatchDocument appendTestInternal(String path, Supplier<Option<String>> jsonSupplier) {\n         Objects.requireNonNull(path, \"'path' cannot be null.\");\n \n         return appendOperation(JsonPatchOperationKind.TEST, null, path, jsonSupplier.get());\n     }\n \n-    private Optional<String> serializeValue(Object value) {\n+    private Option<String> serializeValue(Object value) {\n         if (value == null) {\n-            return Optional.empty();\n+            return Option.empty();\n         }\n \n         String rawValue;\n         try {\n+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+\n             if (serializer == null) {\n-                rawValue = MAPPER.writeValueAsString(value);\n+                if (DEFAULT_SERIALIZER == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5MTYwNw=="}, "originalCommit": {"oid": "e636b4f58bc2184e30475177b997125eb22b7e36"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg5Nzc3OA==", "bodyText": "with volatile, happens-before is guaranteed, so DCL should be good now.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16597#discussion_r508897778", "createdAt": "2020-10-20T23:26:00Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/jsonpatch/JsonPatchDocument.java", "diffHunk": "@@ -236,46 +237,56 @@ public JsonPatchDocument appendTest(String path, Object value) {\n      *\n      * <p><strong>Code Samples</strong></p>\n      *\n-     * {@codesnippet com.azure.core.experimental.jsonpatch.JsonPatchDocument.appendTestRaw#String-String}\n+     * {@codesnippet com.azure.core.util.jsonpatch.JsonPatchDocument.appendTestRaw#String-String}\n      *\n      * @param path The path to test.\n      * @param rawJson The raw JSON value that will be used to test against.\n      * @return The updated JsonPatchDocument object.\n      * @throws NullPointerException If {@code path} is null.\n      */\n     public JsonPatchDocument appendTestRaw(String path, String rawJson) {\n-        return appendTestInternal(path, () -> Optional.ofNullable(rawJson));\n+        return appendTestInternal(path, () -> Option.of(rawJson));\n     }\n \n-    private JsonPatchDocument appendTestInternal(String path, Supplier<Optional<String>> jsonSupplier) {\n+    private JsonPatchDocument appendTestInternal(String path, Supplier<Option<String>> jsonSupplier) {\n         Objects.requireNonNull(path, \"'path' cannot be null.\");\n \n         return appendOperation(JsonPatchOperationKind.TEST, null, path, jsonSupplier.get());\n     }\n \n-    private Optional<String> serializeValue(Object value) {\n+    private Option<String> serializeValue(Object value) {\n         if (value == null) {\n-            return Optional.empty();\n+            return Option.empty();\n         }\n \n         String rawValue;\n         try {\n+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+\n             if (serializer == null) {\n-                rawValue = MAPPER.writeValueAsString(value);\n+                if (DEFAULT_SERIALIZER == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5MTYwNw=="}, "originalCommit": {"oid": "e636b4f58bc2184e30475177b997125eb22b7e36"}, "originalPosition": 224}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjY2MjY5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzo0MTo0NFrOHlJsxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozNzoyMFrOHlSEmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcxODI3OA==", "bodyText": "This is missing version tag.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16597#discussion_r508718278", "createdAt": "2020-10-20T17:41:44Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/pom.xml", "diffHunk": "@@ -97,6 +97,12 @@\n       <artifactId>netty-tcnative-boringssl-static</artifactId>\n       <version>2.0.31.Final</version> <!-- {x-version-update;io.netty:netty-tcnative-boringssl-static;external_dependency} -->\n     </dependency>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core-serializer-json-jackson</artifactId>\n+      <version>1.1.0-beta.1</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e636b4f58bc2184e30475177b997125eb22b7e36"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1NTQ0OQ==", "bodyText": "Removed as this causes a circular reference.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16597#discussion_r508855449", "createdAt": "2020-10-20T21:37:20Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/pom.xml", "diffHunk": "@@ -97,6 +97,12 @@\n       <artifactId>netty-tcnative-boringssl-static</artifactId>\n       <version>2.0.31.Final</version> <!-- {x-version-update;io.netty:netty-tcnative-boringssl-static;external_dependency} -->\n     </dependency>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core-serializer-json-jackson</artifactId>\n+      <version>1.1.0-beta.1</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcxODI3OA=="}, "originalCommit": {"oid": "e636b4f58bc2184e30475177b997125eb22b7e36"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjY2NDgzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzo0MjoxOVrOHlJuIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozODo0MlrOHlSG_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcxODYyNw==", "bodyText": "Why do we need resource manager dependency in azure-core?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16597#discussion_r508718627", "createdAt": "2020-10-20T17:42:19Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/pom.xml", "diffHunk": "@@ -145,6 +151,12 @@\n       <version>1.22</version> <!-- {x-version-update;org.openjdk.jmh:jmh-generator-annprocess;external_dependency} -->\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>com.azure.resourcemanager</groupId>\n+      <artifactId>azure-resourcemanager-resources</artifactId>\n+      <version>2.0.0</version>\n+      <scope>compile</scope>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e636b4f58bc2184e30475177b997125eb22b7e36"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1NjA2Mg==", "bodyText": "Looks like an accidental dependency added by IntelliJ's add dependency quick fix option. Removed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16597#discussion_r508856062", "createdAt": "2020-10-20T21:38:42Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/pom.xml", "diffHunk": "@@ -145,6 +151,12 @@\n       <version>1.22</version> <!-- {x-version-update;org.openjdk.jmh:jmh-generator-annprocess;external_dependency} -->\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>com.azure.resourcemanager</groupId>\n+      <artifactId>azure-resourcemanager-resources</artifactId>\n+      <version>2.0.0</version>\n+      <scope>compile</scope>\n+    </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcxODYyNw=="}, "originalCommit": {"oid": "e636b4f58bc2184e30475177b997125eb22b7e36"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3959, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}