{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3OTU0NzMx", "number": 15927, "title": "Adding diagnostic in CTL run for higher latency requests", "bodyText": "This pr will add diagnostics in CTL for the high latency requests. This will be controlled by thresholdForDiagnosticsInMs in configuration, default value is 60000 ms.\nAlso some minor improvements\n\nAdded throughput,read_write_query_pct,number_Of_collection  to configure during CTL run.\nFixed logging for pre populated documents after documents created", "createdAt": "2020-10-05T15:56:43Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15927", "merged": true, "mergeCommit": {"oid": "c404d2378b13c4aa3c2b3597e399b1b5efd2d58f"}, "closed": true, "closedAt": "2020-10-06T17:32:11Z", "author": {"login": "simplynaveen20"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdPl1ZxgH2gAyNDk3OTU0NzMxOmMyYzNiODY1YzJjZTEyNjU5MjI3MWM1NWFlMGM3YWMzZjliNzlhNmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdP7v0qAFqTUwMzE5NDU4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c2c3b865c2ce126592271c55ae0c7ac3f9b79a6b", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c2c3b865c2ce126592271c55ae0c7ac3f9b79a6b", "committedDate": "2020-10-05T15:50:55Z", "message": "Adding diagnostic for latency breached requests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjA5MzE4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15927#pullrequestreview-502209318", "createdAt": "2020-10-05T16:08:28Z", "commit": {"oid": "c2c3b865c2ce126592271c55ae0c7ac3f9b79a6b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjowODoyOFrOHckBNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjowODoyOFrOHckBNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxMjMwOQ==", "bodyText": "Isn't that way too high? I would think something around 3 seconds or so (maybe 10 to account for queries/FeedResponses with 1000 items( is a more realistic default threshold?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15927#discussion_r499712309", "createdAt": "2020-10-05T16:08:28Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/Configuration.java", "diffHunk": "@@ -61,6 +61,9 @@\n     @Parameter(names = \"-maxConnectionPoolSize\", description = \"Max Connection Pool Size\")\n     private Integer maxConnectionPoolSize = 1000;\n \n+    @Parameter(names = \"-thresholdForDiagnosticsInMs\", description = \"Latency threshold for printing diagnostics\")\n+    private Integer thresholdForDiagnosticsInMs = 60000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2c3b865c2ce126592271c55ae0c7ac3f9b79a6b"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjA5NTQz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15927#pullrequestreview-502209543", "createdAt": "2020-10-05T16:08:44Z", "commit": {"oid": "c2c3b865c2ce126592271c55ae0c7ac3f9b79a6b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjQ1MjA3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15927#pullrequestreview-502245207", "createdAt": "2020-10-05T16:53:48Z", "commit": {"oid": "c2c3b865c2ce126592271c55ae0c7ac3f9b79a6b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo1Mzo0OFrOHclrhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo1Mzo0OFrOHclrhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczOTUyNw==", "bodyText": "Could you please use Duration format instead of Milisecond here to be consistent with the existing configuration?\nsee this duration config:\nhttps://github.com/Azure/azure-sdk-for-java/blob/master/sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/Configuration.java#L129-L130\nWe will have more time configurations and some can be a few hours. It would be good to use a unified time format everywhere. Duration will be the most suitable format.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15927#discussion_r499739527", "createdAt": "2020-10-05T16:53:48Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/Configuration.java", "diffHunk": "@@ -61,6 +61,9 @@\n     @Parameter(names = \"-maxConnectionPoolSize\", description = \"Max Connection Pool Size\")\n     private Integer maxConnectionPoolSize = 1000;\n \n+    @Parameter(names = \"-thresholdForDiagnosticsInMs\", description = \"Latency threshold for printing diagnostics\")\n+    private Integer thresholdForDiagnosticsInMs = 60000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2c3b865c2ce126592271c55ae0c7ac3f9b79a6b"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjY2NzM2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15927#pullrequestreview-502266736", "createdAt": "2020-10-05T17:23:06Z", "commit": {"oid": "c2c3b865c2ce126592271c55ae0c7ac3f9b79a6b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoyMzowNlrOHcmrRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoyMzowNlrOHcmrRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1NTg0Nw==", "bodyText": "StopWatch can be accessed on different threads and it is not thread safe.\nPlease use a volatile long for measuring the checkpoint.\nprivate long startTimeInMs", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15927#discussion_r499755847", "createdAt": "2020-10-05T17:23:06Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/BenchmarkRequestSubscriber.java", "diffHunk": "@@ -15,26 +18,50 @@\n \n public class BenchmarkRequestSubscriber<T> extends BaseSubscriber<T> {\n     final static Logger logger = LoggerFactory.getLogger(BenchmarkRequestSubscriber.class);\n+    private final StopWatch durationTimer = new StopWatch();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2c3b865c2ce126592271c55ae0c7ac3f9b79a6b"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjY3NzA1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15927#pullrequestreview-502267705", "createdAt": "2020-10-05T17:24:31Z", "commit": {"oid": "c2c3b865c2ce126592271c55ae0c7ac3f9b79a6b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoyNDozMVrOHcmuHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoyNDozMVrOHcmuHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1NjU3NA==", "bodyText": "StopWatch can be used on different threads and it is not thread safe.\nPlease use a volatile long for measuring the checkpoint.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (durationTimer != null && durationTimer.getTime() > thresholdForDiagnosticsInMs) {\n          \n          \n            \n                    if (durationTimer != null && System.currentMilis() startTimeInMs-  > thresholdForDiagnosticsInMs) {", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15927#discussion_r499756574", "createdAt": "2020-10-05T17:24:31Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/BenchmarkRequestSubscriber.java", "diffHunk": "@@ -15,26 +18,50 @@\n \n public class BenchmarkRequestSubscriber<T> extends BaseSubscriber<T> {\n     final static Logger logger = LoggerFactory.getLogger(BenchmarkRequestSubscriber.class);\n+    private final StopWatch durationTimer = new StopWatch();\n     private Meter successMeter;\n     private Meter failureMeter;\n     private Semaphore concurrencyControlSemaphore;\n     private AtomicLong count;\n+    private int thresholdForDiagnosticsInMs;\n     public Timer.Context context;\n \n-    public BenchmarkRequestSubscriber(Meter successMeter, Meter failureMeter, Semaphore concurrencyControlSemaphore,  AtomicLong count) {\n+    public BenchmarkRequestSubscriber(Meter successMeter,\n+                                      Meter failureMeter,\n+                                      Semaphore concurrencyControlSemaphore,\n+                                      AtomicLong count,\n+                                      int thresholdForDiagnosticsInMs) {\n         this.successMeter = successMeter;\n         this.failureMeter = failureMeter;\n         this.concurrencyControlSemaphore = concurrencyControlSemaphore;\n         this.count = count;\n+        this.thresholdForDiagnosticsInMs = thresholdForDiagnosticsInMs;\n     }\n \n     @Override\n     protected void hookOnSubscribe(Subscription subscription) {\n         super.hookOnSubscribe(subscription);\n+        durationTimer.start();\n     }\n \n     @Override\n     protected void hookOnNext(T value) {\n+        if (durationTimer.isStarted()) {\n+            durationTimer.stop();\n+        }\n+\n+        if (durationTimer != null && durationTimer.getTime() > thresholdForDiagnosticsInMs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2c3b865c2ce126592271c55ae0c7ac3f9b79a6b"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc4ef5c8f20f42e52a4c8041cc3cd269f9bc905d", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cc4ef5c8f20f42e52a4c8041cc3cd269f9bc905d", "committedDate": "2020-10-05T21:26:12Z", "message": "resolving comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTk0NTg5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15927#pullrequestreview-503194589", "createdAt": "2020-10-06T17:22:44Z", "commit": {"oid": "cc4ef5c8f20f42e52a4c8041cc3cd269f9bc905d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2234, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}