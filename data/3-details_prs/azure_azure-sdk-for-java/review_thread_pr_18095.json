{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3NDM5OTAy", "number": 18095, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTo0MjoyMlrOFEN7UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMTowOTo0MFrOFFzq-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTY2ODAxOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTo0MjoyMlrOIEPx-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTozNDowMFrOIFjE8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyMzc2OQ==", "bodyText": "Could this also be ContainerNotFound?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r541323769", "createdAt": "2020-12-11T21:42:22Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "diffHunk": "@@ -798,7 +804,23 @@ public FileStore getFileStore(Path path) throws IOException {\n      */\n     @Override\n     public void checkAccess(Path path, AccessMode... accessModes) throws IOException {\n-        throw new UnsupportedOperationException();\n+        if (accessModes != null && accessModes.length != 0) {\n+            throw logger.logThrowableAsError(\n+                new AccessDeniedException(\"The access cannot be determined.\"));\n+        }\n+        AzurePath.ensureFileSystemOpen(path);\n+\n+        // Read attributes already wraps BlobStorageException in an IOException.\n+        try {\n+            readAttributes(path, BasicFileAttributes.class);\n+        } catch(IOException e) {\n+            if (e.getCause() != null && e.getCause() instanceof BlobStorageException\n+                && BlobErrorCode.BLOB_NOT_FOUND.equals(((BlobStorageException) e.getCause()).getErrorCode())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba912986e3855522176be248e4e83eb64c41149a"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY4ODQ5OA==", "bodyText": "Once I add support for containers, yes. A good reminder that I'll have to update a lot of error handling like that", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r542688498", "createdAt": "2020-12-14T19:34:00Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "diffHunk": "@@ -798,7 +804,23 @@ public FileStore getFileStore(Path path) throws IOException {\n      */\n     @Override\n     public void checkAccess(Path path, AccessMode... accessModes) throws IOException {\n-        throw new UnsupportedOperationException();\n+        if (accessModes != null && accessModes.length != 0) {\n+            throw logger.logThrowableAsError(\n+                new AccessDeniedException(\"The access cannot be determined.\"));\n+        }\n+        AzurePath.ensureFileSystemOpen(path);\n+\n+        // Read attributes already wraps BlobStorageException in an IOException.\n+        try {\n+            readAttributes(path, BasicFileAttributes.class);\n+        } catch(IOException e) {\n+            if (e.getCause() != null && e.getCause() instanceof BlobStorageException\n+                && BlobErrorCode.BLOB_NOT_FOUND.equals(((BlobStorageException) e.getCause()).getErrorCode())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyMzc2OQ=="}, "originalCommit": {"oid": "ba912986e3855522176be248e4e83eb64c41149a"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTY4MDM1OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob-nio/src/test/java/com/azure/storage/blob/nio/AzureFileSystemProviderTest.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTo0NDo1N1rOIEP6JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTo0NDo1N1rOIEP6JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyNTg2MA==", "bodyText": "nit: capitalize the C", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r541325860", "createdAt": "2020-12-11T21:44:57Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/test/java/com/azure/storage/blob/nio/AzureFileSystemProviderTest.groovy", "diffHunk": "@@ -1058,6 +1072,142 @@ class AzureFileSystemProviderTest extends APISpec {\n         thrown(IOException)\n     }\n \n+    def \"CheckAccess\"() {\n+        setup:\n+        def fs = createFS(config)\n+        def path = fs.getPath(generateBlobName())\n+        def os = fs.provider().newOutputStream(path)\n+        os.close()\n+\n+        when:\n+        fs.provider().checkAccess(path)\n+\n+        then:\n+        notThrown(Exception)\n+    }\n+\n+    @Unroll\n+    def \"CheckAccess AccessDenied\"() {\n+        setup:\n+        def fs = createFS(config)\n+        def path = fs.getPath(generateBlobName())\n+        def os = fs.provider().newOutputStream(path)\n+        os.close()\n+\n+        when:\n+        fs.provider().checkAccess(path, mode)\n+\n+        then:\n+        thrown(AccessDeniedException)\n+\n+        where:\n+        mode               | _\n+        AccessMode.READ    | _\n+        AccessMode.WRITE   | _\n+        AccessMode.EXECUTE | _\n+    }\n+\n+    def \"CheckAccess IOException\"() {\n+        setup:\n+        HttpPipelinePolicy[] policies = new HttpPipelinePolicy[1]\n+        policies[0] = new checkAccessIoExceptionPolicy()\n+        config.put(AzureFileSystem.AZURE_STORAGE_HTTP_POLICIES, policies)\n+        def fs = createFS(config)\n+        def path = fs.getPath(generateBlobName())\n+        def os = fs.provider().newOutputStream(path)\n+        os.close()\n+\n+        when:\n+        fs.provider().checkAccess(path)\n+\n+        then:\n+        def e = thrown(IOException)\n+        !(e instanceof NoSuchFileException)\n+    }\n+\n+    class checkAccessIoExceptionPolicy implements HttpPipelinePolicy {\n+        @Override\n+        Mono<HttpResponse> process(HttpPipelineCallContext httpPipelineCallContext, HttpPipelineNextPolicy httpPipelineNextPolicy) {\n+            HttpRequest request = httpPipelineCallContext.getHttpRequest()\n+            // GetProperties call to blob\n+            if (request.getUrl().getPath().split(\"/\").size() == 3 && request.getHttpMethod() == (HttpMethod.HEAD)) {\n+                return Mono.just(new checkAccessIoExceptionResponse(request))\n+            } else {\n+                return httpPipelineNextPolicy.process()\n+            }\n+        }\n+    }\n+\n+    class checkAccessIoExceptionResponse extends HttpResponse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba912986e3855522176be248e4e83eb64c41149a"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTY5NjMyOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob-nio/src/test/java/com/azure/storage/blob/nio/AzureFileSystemProviderTest.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTo0Nzo0NFrOIEQEGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMDo1Mzo0MlrOIFoOKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyODQxMQ==", "bodyText": "you could probably just do\nexpect:\nfs.provider().checkAccess(path)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r541328411", "createdAt": "2020-12-11T21:47:44Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/test/java/com/azure/storage/blob/nio/AzureFileSystemProviderTest.groovy", "diffHunk": "@@ -1058,6 +1072,142 @@ class AzureFileSystemProviderTest extends APISpec {\n         thrown(IOException)\n     }\n \n+    def \"CheckAccess\"() {\n+        setup:\n+        def fs = createFS(config)\n+        def path = fs.getPath(generateBlobName())\n+        def os = fs.provider().newOutputStream(path)\n+        os.close()\n+\n+        when:\n+        fs.provider().checkAccess(path)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba912986e3855522176be248e4e83eb64c41149a"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc3Mjc3OA==", "bodyText": "I think it's functionally the same. If all I'm doing is check the call succeeds, I usually like to make that explicit by saying I don't want an exception.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r542772778", "createdAt": "2020-12-14T20:53:42Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/test/java/com/azure/storage/blob/nio/AzureFileSystemProviderTest.groovy", "diffHunk": "@@ -1058,6 +1072,142 @@ class AzureFileSystemProviderTest extends APISpec {\n         thrown(IOException)\n     }\n \n+    def \"CheckAccess\"() {\n+        setup:\n+        def fs = createFS(config)\n+        def path = fs.getPath(generateBlobName())\n+        def os = fs.provider().newOutputStream(path)\n+        os.close()\n+\n+        when:\n+        fs.provider().checkAccess(path)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyODQxMQ=="}, "originalCommit": {"oid": "ba912986e3855522176be248e4e83eb64c41149a"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTcwMzg0OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTo0OTowOFrOIEQI3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMTo0NDowNVrOIFrhxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyOTYzMQ==", "bodyText": "Should this be UnsupportedOperationException or AccessDeniedException?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r541329631", "createdAt": "2020-12-11T21:49:08Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "diffHunk": "@@ -785,11 +788,14 @@ public FileStore getFileStore(Path path) throws IOException {\n     }\n \n     /**\n-     * Unsupported.\n+     * Checks the existence, and optionally the accessibility, of a file.\n+     * <p>\n+     * This method may only be used to check the existence of a file. It is not possible to determine the permissions\n+     * granted to a given client, so if any mode argument is specified, an {@link UnsupportedOperationException} will be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba912986e3855522176be248e4e83eb64c41149a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM5MDQ1Mw==", "bodyText": "AccessDenied", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r541390453", "createdAt": "2020-12-11T23:06:42Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "diffHunk": "@@ -785,11 +788,14 @@ public FileStore getFileStore(Path path) throws IOException {\n     }\n \n     /**\n-     * Unsupported.\n+     * Checks the existence, and optionally the accessibility, of a file.\n+     * <p>\n+     * This method may only be used to check the existence of a file. It is not possible to determine the permissions\n+     * granted to a given client, so if any mode argument is specified, an {@link UnsupportedOperationException} will be", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyOTYzMQ=="}, "originalCommit": {"oid": "ba912986e3855522176be248e4e83eb64c41149a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgyNjk0OA==", "bodyText": "(per the jdk docs for this method: \"the requested access would be denied or the access cannot be determined because the Java virtual machine has insufficient privileges or other reasons.\" I think it's reasonable to put this under access cannot be determined)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r542826948", "createdAt": "2020-12-14T21:44:05Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "diffHunk": "@@ -785,11 +788,14 @@ public FileStore getFileStore(Path path) throws IOException {\n     }\n \n     /**\n-     * Unsupported.\n+     * Checks the existence, and optionally the accessibility, of a file.\n+     * <p>\n+     * This method may only be used to check the existence of a file. It is not possible to determine the permissions\n+     * granted to a given client, so if any mode argument is specified, an {@link UnsupportedOperationException} will be", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyOTYzMQ=="}, "originalCommit": {"oid": "ba912986e3855522176be248e4e83eb64c41149a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTcyMjY3OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTo1MjoyNFrOIEQUnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMTo0NTowMVrOIFrlpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMzMjYzNw==", "bodyText": "Just a thought - should auth errors be wrapped into AccessDeniedExceptions?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r541332637", "createdAt": "2020-12-11T21:52:24Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "diffHunk": "@@ -798,7 +804,23 @@ public FileStore getFileStore(Path path) throws IOException {\n      */\n     @Override\n     public void checkAccess(Path path, AccessMode... accessModes) throws IOException {\n-        throw new UnsupportedOperationException();\n+        if (accessModes != null && accessModes.length != 0) {\n+            throw logger.logThrowableAsError(\n+                new AccessDeniedException(\"The access cannot be determined.\"));\n+        }\n+        AzurePath.ensureFileSystemOpen(path);\n+\n+        // Read attributes already wraps BlobStorageException in an IOException.\n+        try {\n+            readAttributes(path, BasicFileAttributes.class);\n+        } catch(IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba912986e3855522176be248e4e83eb64c41149a"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc3OTI3MQ==", "bodyText": "Good question. I tend to think that debugging will be easier if issues with underlying blob stuff is presented differently from nio stuff. I can see an argument where that kind of breaks the point of mapping one to the other, but an AccessDeniedException seems like it would have a response of \"well let me go grant access\" which is impossible in this case, and an IOException caused by a BlobStorageException kind of leads me down a path of something is wrong with my account or nio configs. What do you think?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r542779271", "createdAt": "2020-12-14T20:59:39Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "diffHunk": "@@ -798,7 +804,23 @@ public FileStore getFileStore(Path path) throws IOException {\n      */\n     @Override\n     public void checkAccess(Path path, AccessMode... accessModes) throws IOException {\n-        throw new UnsupportedOperationException();\n+        if (accessModes != null && accessModes.length != 0) {\n+            throw logger.logThrowableAsError(\n+                new AccessDeniedException(\"The access cannot be determined.\"));\n+        }\n+        AzurePath.ensureFileSystemOpen(path);\n+\n+        // Read attributes already wraps BlobStorageException in an IOException.\n+        try {\n+            readAttributes(path, BasicFileAttributes.class);\n+        } catch(IOException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMzMjYzNw=="}, "originalCommit": {"oid": "ba912986e3855522176be248e4e83eb64c41149a"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc4NTM4NA==", "bodyText": "If that's the general pattern we've aimed for with nio then I'm fine with that.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r542785384", "createdAt": "2020-12-14T21:05:32Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "diffHunk": "@@ -798,7 +804,23 @@ public FileStore getFileStore(Path path) throws IOException {\n      */\n     @Override\n     public void checkAccess(Path path, AccessMode... accessModes) throws IOException {\n-        throw new UnsupportedOperationException();\n+        if (accessModes != null && accessModes.length != 0) {\n+            throw logger.logThrowableAsError(\n+                new AccessDeniedException(\"The access cannot be determined.\"));\n+        }\n+        AzurePath.ensureFileSystemOpen(path);\n+\n+        // Read attributes already wraps BlobStorageException in an IOException.\n+        try {\n+            readAttributes(path, BasicFileAttributes.class);\n+        } catch(IOException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMzMjYzNw=="}, "originalCommit": {"oid": "ba912986e3855522176be248e4e83eb64c41149a"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgyNzk0Mg==", "bodyText": "I'm not sure if it's generalized yet haha. Still could change if you think otherwise. But we'd have to add that explicit check in a lot of different places, which I'm also not a fan of because I think we're likely to forget one.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r542827942", "createdAt": "2020-12-14T21:45:01Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "diffHunk": "@@ -798,7 +804,23 @@ public FileStore getFileStore(Path path) throws IOException {\n      */\n     @Override\n     public void checkAccess(Path path, AccessMode... accessModes) throws IOException {\n-        throw new UnsupportedOperationException();\n+        if (accessModes != null && accessModes.length != 0) {\n+            throw logger.logThrowableAsError(\n+                new AccessDeniedException(\"The access cannot be determined.\"));\n+        }\n+        AzurePath.ensureFileSystemOpen(path);\n+\n+        // Read attributes already wraps BlobStorageException in an IOException.\n+        try {\n+            readAttributes(path, BasicFileAttributes.class);\n+        } catch(IOException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMzMjYzNw=="}, "originalCommit": {"oid": "ba912986e3855522176be248e4e83eb64c41149a"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjMyNzI0OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMTowNjo1M1rOIGf_GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMTowNjo1M1rOIGf_GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY4NjQyNQ==", "bodyText": "We should update other locations to using LoggingUtility when throwing exceptions", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r543686425", "createdAt": "2020-12-15T21:06:53Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "diffHunk": "@@ -373,7 +374,8 @@ public OutputStream newOutputStream(Path path, OpenOption... options) throws IOE\n         // Write and truncate must be specified\n         if (!optionsList.contains(StandardOpenOption.WRITE)\n             || !optionsList.contains(StandardOpenOption.TRUNCATE_EXISTING)) {\n-            throw new IllegalArgumentException(\"Write and TruncateExisting must be specified to open an OutputStream\");\n+            throw LoggingUtility.logError(logger,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd31b45b9f48f878f2c2fced71ce55265016c133"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjMyOTY0OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMTowNzoyOFrOIGgAZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMTowNzoyOFrOIGgAZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY4Njc1Nw==", "bodyText": "We should log this throw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r543686757", "createdAt": "2020-12-15T21:07:28Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "diffHunk": "@@ -798,7 +803,23 @@ public FileStore getFileStore(Path path) throws IOException {\n      */\n     @Override\n     public void checkAccess(Path path, AccessMode... accessModes) throws IOException {\n-        throw new UnsupportedOperationException();\n+        if (accessModes != null && accessModes.length != 0) {\n+            throw LoggingUtility.logError(logger, new AccessDeniedException(\"The access cannot be determined.\"));\n+        }\n+        AzurePath.ensureFileSystemOpen(path);\n+\n+        // Read attributes already wraps BlobStorageException in an IOException.\n+        try {\n+            readAttributes(path, BasicFileAttributes.class);\n+        } catch (IOException e) {\n+            Throwable cause = e.getCause();\n+            if (cause instanceof BlobStorageException\n+                && BlobErrorCode.BLOB_NOT_FOUND.equals(((BlobStorageException) cause).getErrorCode())) {\n+                throw LoggingUtility.logError(logger, new NoSuchFileException(path.toString()));\n+            } else {\n+                throw e;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd31b45b9f48f878f2c2fced71ce55265016c133"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjMzNzg0OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob-nio/src/test/java/com/azure/storage/blob/nio/APISpec.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMTowOTo0MFrOIGgFIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMTowOTo0MFrOIGgFIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY4Nzk2OA==", "bodyText": "Should we initialize policyList using def policyList = [] as HttpPipelinePolicy[] instead of casting it later?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r543687968", "createdAt": "2020-12-15T21:09:40Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob-nio/src/test/java/com/azure/storage/blob/nio/APISpec.groovy", "diffHunk": "@@ -372,13 +372,17 @@ class APISpec extends Specification {\n         }\n     }\n \n-    Map<String, Object> initializeConfigMap() {\n+    Map<String, Object> initializeConfigMap(HttpPipelinePolicy... policies) {\n         def config = [:]\n         config[AzureFileSystem.AZURE_STORAGE_HTTP_CLIENT] = getHttpClient()\n+        def policyList = []", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd31b45b9f48f878f2c2fced71ce55265016c133"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2558, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}