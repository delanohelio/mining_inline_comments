{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2MjY3OTUy", "number": 18380, "title": "Add SAS credential and policy.", "bodyText": "In this PR:\n\nAdd AzureSasCredential per Azure/azure-sdk#1954\nAzureSasCredential is the name that has been settled on the end of discussion.\nAdd AzureSasCredentialPolicy that appends SAS to query\n\nRemarks:\n\nSome service (like storage in the Portal) present SAS with leading \"?\". This has to be stripped before appending\nThe validation if serviceUri already contain sas (mentioned here) will be responsibility of service clients:\n\nthe format varies between services (i.e. Event Grid SAS and Storage SAS are vastly different)\nit would be good to fail fast (at client creation) rather than late (at request send).\n\n\n\nReferences\n\n.NET PR", "createdAt": "2020-12-28T23:20:58Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18380", "merged": true, "mergeCommit": {"oid": "8de17b577ed34b57d3fa33cc517cd5312c0ece4b"}, "closed": true, "closedAt": "2020-12-30T05:06:16Z", "author": {"login": "kasobol-msft"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdqumDTgH2gAyNTQ2MjY3OTUyOjU0NmE4YzhjNzFhZGY0OWRkMjZkYzJmZjcwM2E5MTYyY2QxNjRjOGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdrDzt7gH2gAyNTQ2MjY3OTUyOjIxZTE5OTNkNzNlYWM2OTZkNjA1N2I3OTk5OGNjNzc1ODNjY2EzYjY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "546a8c8c71adf49dd26dc2ff703a9162cd164c8e", "author": {"user": {"login": "kasobol-msft", "name": "Kamil Sobol"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/546a8c8c71adf49dd26dc2ff703a9162cd164c8e", "committedDate": "2020-12-28T23:19:15Z", "message": "Add SAS credential and policy."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5MzMxOTIw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18380#pullrequestreview-559331920", "createdAt": "2020-12-28T23:22:54Z", "commit": {"oid": "546a8c8c71adf49dd26dc2ff703a9162cd164c8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMzoyMjo1NFrOIMDz4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMzoyMjo1NFrOIMDz4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUxNjI1OA==", "bodyText": "This check is to prevent multiple appends if request is retried. I.e. Storage scopes auth policy per each retry.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18380#discussion_r549516258", "createdAt": "2020-12-28T23:22:54Z", "author": {"login": "kasobol-msft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/AzureSasCredentialPolicy.java", "diffHunk": "@@ -0,0 +1,61 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.credential.AzureSasCredential;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.logging.ClientLogger;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Pipeline policy that uses an {@link AzureSasCredential} to set the shared access signature for a request.\n+ * <p>\n+ * Requests sent with this pipeline policy are required to use {@code HTTPS}. If the request isn't using {@code HTTPS}\n+ * an exception will be thrown to prevent leaking the shared access signature.\n+ */\n+public final class AzureSasCredentialPolicy implements HttpPipelinePolicy {\n+    private final AzureSasCredential credential;\n+\n+    /**\n+     * Creates a policy that uses the passed {@link AzureSasCredential} to append sas to query string.\n+     *\n+     * @param credential The {@link AzureSasCredential} containing the shared access signature to use.\n+     * @throws NullPointerException If {@code credential} is {@code null}.\n+     */\n+    public AzureSasCredentialPolicy(AzureSasCredential credential) {\n+        Objects.requireNonNull(credential, \"'credential' cannot be null.\");\n+\n+        this.credential = credential;\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        HttpRequest httpRequest = context.getHttpRequest();\n+        if (\"http\".equals(httpRequest.getUrl().getProtocol())) {\n+            return Mono.error(new IllegalStateException(\n+                \"Shared access signature credentials require HTTPS to prevent leaking the shared access signature.\"));\n+        }\n+\n+        String signature = credential.getSignature();\n+        if (signature.startsWith(\"?\")) {\n+            signature = signature.substring(1);\n+        }\n+\n+        String query = httpRequest.getUrl().getQuery();\n+        String url = httpRequest.getUrl().toString();\n+        if (query == null || query.isEmpty()) {\n+            url = url + \"?\" + signature;\n+        } else if (!query.contains(signature)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546a8c8c71adf49dd26dc2ff703a9162cd164c8e"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11f74d33965a3a56b5bec2ff62920debc9030c20", "author": {"user": {"login": "kasobol-msft", "name": "Kamil Sobol"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/11f74d33965a3a56b5bec2ff62920debc9030c20", "committedDate": "2020-12-28T23:32:20Z", "message": "fix checkstyle."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5MzM1NDgx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18380#pullrequestreview-559335481", "createdAt": "2020-12-28T23:47:00Z", "commit": {"oid": "11f74d33965a3a56b5bec2ff62920debc9030c20"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMzo0NzowMFrOIMEETg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMzo0NzowMFrOIMEETg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUyMDQ2Mg==", "bodyText": "Do we want to clean the signature on construction of the credential to reduce the number of times we need to substring?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18380#discussion_r549520462", "createdAt": "2020-12-28T23:47:00Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/AzureSasCredentialPolicy.java", "diffHunk": "@@ -0,0 +1,60 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.credential.AzureSasCredential;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Pipeline policy that uses an {@link AzureSasCredential} to set the shared access signature for a request.\n+ * <p>\n+ * Requests sent with this pipeline policy are required to use {@code HTTPS}. If the request isn't using {@code HTTPS}\n+ * an exception will be thrown to prevent leaking the shared access signature.\n+ */\n+public final class AzureSasCredentialPolicy implements HttpPipelinePolicy {\n+    private final AzureSasCredential credential;\n+\n+    /**\n+     * Creates a policy that uses the passed {@link AzureSasCredential} to append sas to query string.\n+     *\n+     * @param credential The {@link AzureSasCredential} containing the shared access signature to use.\n+     * @throws NullPointerException If {@code credential} is {@code null}.\n+     */\n+    public AzureSasCredentialPolicy(AzureSasCredential credential) {\n+        Objects.requireNonNull(credential, \"'credential' cannot be null.\");\n+\n+        this.credential = credential;\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        HttpRequest httpRequest = context.getHttpRequest();\n+        if (\"http\".equals(httpRequest.getUrl().getProtocol())) {\n+            return Mono.error(new IllegalStateException(\n+                \"Shared access signature credentials require HTTPS to prevent leaking the shared access signature.\"));\n+        }\n+\n+        String signature = credential.getSignature();\n+        if (signature.startsWith(\"?\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11f74d33965a3a56b5bec2ff62920debc9030c20"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5MzM1NzEx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18380#pullrequestreview-559335711", "createdAt": "2020-12-28T23:48:46Z", "commit": {"oid": "11f74d33965a3a56b5bec2ff62920debc9030c20"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMzo0ODo0NlrOIMEFWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMzo0ODo0NlrOIMEFWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUyMDczMQ==", "bodyText": "Is there a possible case where we have a URL with an empty query, such as https:://example.com?, where this condition passes and we end up with double ?s", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18380#discussion_r549520731", "createdAt": "2020-12-28T23:48:46Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/AzureSasCredentialPolicy.java", "diffHunk": "@@ -0,0 +1,60 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.credential.AzureSasCredential;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Pipeline policy that uses an {@link AzureSasCredential} to set the shared access signature for a request.\n+ * <p>\n+ * Requests sent with this pipeline policy are required to use {@code HTTPS}. If the request isn't using {@code HTTPS}\n+ * an exception will be thrown to prevent leaking the shared access signature.\n+ */\n+public final class AzureSasCredentialPolicy implements HttpPipelinePolicy {\n+    private final AzureSasCredential credential;\n+\n+    /**\n+     * Creates a policy that uses the passed {@link AzureSasCredential} to append sas to query string.\n+     *\n+     * @param credential The {@link AzureSasCredential} containing the shared access signature to use.\n+     * @throws NullPointerException If {@code credential} is {@code null}.\n+     */\n+    public AzureSasCredentialPolicy(AzureSasCredential credential) {\n+        Objects.requireNonNull(credential, \"'credential' cannot be null.\");\n+\n+        this.credential = credential;\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        HttpRequest httpRequest = context.getHttpRequest();\n+        if (\"http\".equals(httpRequest.getUrl().getProtocol())) {\n+            return Mono.error(new IllegalStateException(\n+                \"Shared access signature credentials require HTTPS to prevent leaking the shared access signature.\"));\n+        }\n+\n+        String signature = credential.getSignature();\n+        if (signature.startsWith(\"?\")) {\n+            signature = signature.substring(1);\n+        }\n+\n+        String query = httpRequest.getUrl().getQuery();\n+        String url = httpRequest.getUrl().toString();\n+        if (query == null || query.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11f74d33965a3a56b5bec2ff62920debc9030c20"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbea95638f93652372e009f1b58625fa9262ed4d", "author": {"user": {"login": "kasobol-msft", "name": "Kamil Sobol"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cbea95638f93652372e009f1b58625fa9262ed4d", "committedDate": "2020-12-29T00:11:08Z", "message": "pr feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c01c3190ed686516b357d8f15c2249e367ff57b5", "author": {"user": {"login": "kasobol-msft", "name": "Kamil Sobol"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c01c3190ed686516b357d8f15c2249e367ff57b5", "committedDate": "2020-12-29T17:20:27Z", "message": "poke ci"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42b9a1c4e76c9cb445b2e1fe6d20d3009138e654", "author": {"user": {"login": "kasobol-msft", "name": "Kamil Sobol"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/42b9a1c4e76c9cb445b2e1fe6d20d3009138e654", "committedDate": "2020-12-29T18:20:01Z", "message": "pr feedback."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NjQ5NDkx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18380#pullrequestreview-559649491", "createdAt": "2020-12-29T18:22:21Z", "commit": {"oid": "42b9a1c4e76c9cb445b2e1fe6d20d3009138e654"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NjY5Mzk4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18380#pullrequestreview-559669398", "createdAt": "2020-12-29T19:23:41Z", "commit": {"oid": "42b9a1c4e76c9cb445b2e1fe6d20d3009138e654"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxOToyMzo0MVrOIMWXLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxOTozNTo1MFrOIMWjgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgyMDIwNw==", "bodyText": "Stripping out the leading ? may work for storage but will there be other services where the leading ? would still be required?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18380#discussion_r549820207", "createdAt": "2020-12-29T19:23:41Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/AzureSasCredentialPolicy.java", "diffHunk": "@@ -0,0 +1,60 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.credential.AzureSasCredential;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Pipeline policy that uses an {@link AzureSasCredential} to set the shared access signature for a request.\n+ * <p>\n+ * Requests sent with this pipeline policy are required to use {@code HTTPS}. If the request isn't using {@code HTTPS}\n+ * an exception will be thrown to prevent leaking the shared access signature.\n+ */\n+public final class AzureSasCredentialPolicy implements HttpPipelinePolicy {\n+    private final AzureSasCredential credential;\n+\n+    /**\n+     * Creates a policy that uses the passed {@link AzureSasCredential} to append sas to query string.\n+     *\n+     * @param credential The {@link AzureSasCredential} containing the shared access signature to use.\n+     * @throws NullPointerException If {@code credential} is {@code null}.\n+     */\n+    public AzureSasCredentialPolicy(AzureSasCredential credential) {\n+        Objects.requireNonNull(credential, \"'credential' cannot be null.\");\n+\n+        this.credential = credential;\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        HttpRequest httpRequest = context.getHttpRequest();\n+        if (\"http\".equals(httpRequest.getUrl().getProtocol())) {\n+            return Mono.error(new IllegalStateException(\n+                \"Shared access signature credentials require HTTPS to prevent leaking the shared access signature.\"));\n+        }\n+\n+        String signature = credential.getSignature();\n+        if (signature.startsWith(\"?\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUyMDQ2Mg=="}, "originalCommit": {"oid": "11f74d33965a3a56b5bec2ff62920debc9030c20"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgyMjU5NQ==", "bodyText": "Shouldn't this be PER_RETRY? If the signature is updated during the course of retries, we would want to use the updated signature for the retry instead of the old signature. Also, AzureKeyCredentialPolicy uses PER_RETRY. So, we should make it consistent with that policy.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18380#discussion_r549822595", "createdAt": "2020-12-29T19:32:48Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/AzureSasCredentialPolicy.java", "diffHunk": "@@ -0,0 +1,70 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.credential.AzureSasCredential;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpPipelinePosition;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Pipeline policy that uses an {@link AzureSasCredential} to set the shared access signature for a request.\n+ * <p>\n+ * Requests sent with this pipeline policy are required to use {@code HTTPS}. If the request isn't using {@code HTTPS}\n+ * an exception will be thrown to prevent leaking the shared access signature.\n+ */\n+public final class AzureSasCredentialPolicy implements HttpPipelinePolicy {\n+    private final AzureSasCredential credential;\n+\n+    /**\n+     * Creates a policy that uses the passed {@link AzureSasCredential} to append sas to query string.\n+     *\n+     * @param credential The {@link AzureSasCredential} containing the shared access signature to use.\n+     * @throws NullPointerException If {@code credential} is {@code null}.\n+     */\n+    public AzureSasCredentialPolicy(AzureSasCredential credential) {\n+        Objects.requireNonNull(credential, \"'credential' cannot be null.\");\n+\n+        this.credential = credential;\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        HttpRequest httpRequest = context.getHttpRequest();\n+        if (\"http\".equals(httpRequest.getUrl().getProtocol())) {\n+            return Mono.error(new IllegalStateException(\n+                \"Shared access signature credentials require HTTPS to prevent leaking the shared access signature.\"));\n+        }\n+\n+        String signature = credential.getSignature();\n+        if (signature.startsWith(\"?\")) {\n+            signature = signature.substring(1);\n+        }\n+\n+        String query = httpRequest.getUrl().getQuery();\n+        String url = httpRequest.getUrl().toString();\n+        if (query == null || query.isEmpty()) {\n+            if (url.endsWith(\"?\")) {\n+                url = url + signature;\n+            } else {\n+                url = url + \"?\" + signature;\n+            }\n+        } else {\n+            url = url + \"&\" + signature;\n+        }\n+        httpRequest.setUrl(url);\n+\n+        return next.process();\n+    }\n+\n+    @Override\n+    public HttpPipelinePosition getPipelinePosition() {\n+        return HttpPipelinePosition.PER_CALL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b9a1c4e76c9cb445b2e1fe6d20d3009138e654"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgyMzM2MQ==", "bodyText": "nit: this line can be deleted", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18380#discussion_r549823361", "createdAt": "2020-12-29T19:35:50Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/test/java/com/azure/core/credential/CredentialsTests.java", "diffHunk": "@@ -82,4 +85,45 @@ public void tokenCredentialHttpSchemeTest() throws Exception {\n                 .expectErrorMessage(\"token credentials require a URL using the HTTPS protocol scheme\")\n                 .verify();\n     }\n+\n+    @ParameterizedTest\n+    @CsvSource(\n+        {   \"test_signature,https://localhost,https://localhost?test_signature\",\n+            \"?test_signature,https://localhost,https://localhost?test_signature\",\n+            \"test_signature,https://localhost?,https://localhost?test_signature\",\n+            \"?test_signature,https://localhost?,https://localhost?test_signature\",\n+            \"test_signature,https://localhost?foo=bar,https://localhost?foo=bar&test_signature\",\n+            \"?test_signature,https://localhost?foo=bar,https://localhost?foo=bar&test_signature\"})\n+    public void sasCredentialsTest(String signature, String url, String expectedUrl) throws Exception {\n+        AzureSasCredential credential = new AzureSasCredential(signature);\n+\n+        HttpPipelinePolicy auditorPolicy =  (context, next) -> {\n+            String actualUrl = context.getHttpRequest().getUrl().toString();\n+            Assertions.assertEquals(expectedUrl, actualUrl);\n+            return next.process();\n+        };\n+        //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b9a1c4e76c9cb445b2e1fe6d20d3009138e654"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc49eff2a46d2801991b1318abe09c8cc40fce87", "author": {"user": {"login": "kasobol-msft", "name": "Kamil Sobol"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bc49eff2a46d2801991b1318abe09c8cc40fce87", "committedDate": "2020-12-29T20:08:46Z", "message": "pr feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21e1993d73eac696d6057b79998cc77583cca3b6", "author": {"user": {"login": "kasobol-msft", "name": "Kamil Sobol"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/21e1993d73eac696d6057b79998cc77583cca3b6", "committedDate": "2020-12-30T00:02:11Z", "message": "Merge remote-tracking branch 'upstream/master' into sas-credential"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4209, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}