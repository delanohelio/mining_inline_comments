{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNDI4MDA5", "number": 13758, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMjo1OTo1NlrOEUyNjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMjo1OTo1NlrOEUyNjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjI5NjQ2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/JsonSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMjo1OTo1NlrOG7LWdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMzoyODowOFrOG7L4gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwNTE0MA==", "bodyText": "I was wondering if the comment in arch board was applicable for async and sync or just sync? Since the point you make about async is still valid when chaining async operators to have the reference to OutputStream.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13758#discussion_r464705140", "createdAt": "2020-08-03T22:59:56Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/JsonSerializer.java", "diffHunk": "@@ -38,20 +38,17 @@\n      *\n      * @param stream {@link OutputStream} where the JSON tree will be written.\n      * @param jsonNode The JSON tree.\n-     * @param <S> Type of the output stream.\n-     * @return The stream where the JSON tree was written.\n      */\n-    <S extends OutputStream> S serializeTree(S stream, JsonNode jsonNode);\n+    void serializeTree(OutputStream stream, JsonNode jsonNode);\n \n     /**\n      * Writes a JSON tree into a stream.\n      *\n      * @param stream {@link OutputStream} where the JSON tree will be written.\n      * @param jsonNode The JSON tree.\n-     * @param <S> Type of the output stream.\n-     * @return The stream where the JSON tree was written.\n+     * @return Reactive stream that will indicate operation completion.\n      */\n-    <S extends OutputStream> Mono<S> serializeTreeAsync(S stream, JsonNode jsonNode);\n+    Mono<Void> serializeTreeAsync(OutputStream stream, JsonNode jsonNode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8454ad55671e96571b2d8beae7ea8dc53f1b85d9"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxMzg1Ng==", "bodyText": "I think it is better to have sync and async return equivalent return types. Having serialize being void is fine as the OutputStream can be passed or newed before calling the API and then returned later.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13758#discussion_r464713856", "createdAt": "2020-08-03T23:28:08Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/JsonSerializer.java", "diffHunk": "@@ -38,20 +38,17 @@\n      *\n      * @param stream {@link OutputStream} where the JSON tree will be written.\n      * @param jsonNode The JSON tree.\n-     * @param <S> Type of the output stream.\n-     * @return The stream where the JSON tree was written.\n      */\n-    <S extends OutputStream> S serializeTree(S stream, JsonNode jsonNode);\n+    void serializeTree(OutputStream stream, JsonNode jsonNode);\n \n     /**\n      * Writes a JSON tree into a stream.\n      *\n      * @param stream {@link OutputStream} where the JSON tree will be written.\n      * @param jsonNode The JSON tree.\n-     * @param <S> Type of the output stream.\n-     * @return The stream where the JSON tree was written.\n+     * @return Reactive stream that will indicate operation completion.\n      */\n-    <S extends OutputStream> Mono<S> serializeTreeAsync(S stream, JsonNode jsonNode);\n+    Mono<Void> serializeTreeAsync(OutputStream stream, JsonNode jsonNode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwNTE0MA=="}, "originalCommit": {"oid": "8454ad55671e96571b2d8beae7ea8dc53f1b85d9"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4732, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}