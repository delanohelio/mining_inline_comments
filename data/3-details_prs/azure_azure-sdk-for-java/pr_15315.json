{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NTEwNjk3", "number": 15315, "title": "RNTBDChannelPool design notes", "bodyText": "RNTBDChannelPool design notes", "createdAt": "2020-09-17T08:51:18Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15315", "merged": true, "mergeCommit": {"oid": "7faea581b8793952c10b773051d5c541234a0a1a"}, "closed": true, "closedAt": "2020-09-21T20:00:08Z", "author": {"login": "kirankumarkolli"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJtAu-gH2gAyNDg4NTEwNjk3OjA5ZTRkMjc2OTg1NzljMDc0Y2Q3YzA1ZGNmM2M1NzkxNWYwNDkwZWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLI_1ZAH2gAyNDg4NTEwNjk3OjgyNWUxNzEzYTEzNmJiZTRkNzZiMTVkODQwZDJiZDVjMTk5MWY3YmQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "09e4d27698579c074cd7c05dcf3c57915f0490ee", "author": {"user": {"login": "kirankumarkolli", "name": "Kiran Kumar Kolli"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/09e4d27698579c074cd7c05dcf3c57915f0490ee", "committedDate": "2020-09-17T08:49:05Z", "message": "First draft of notes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMzgxMDc5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15315#pullrequestreview-490381079", "createdAt": "2020-09-17T08:53:37Z", "commit": {"oid": "09e4d27698579c074cd7c05dcf3c57915f0490ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwODo1MzozN1rOHTYKFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwODo1MzozN1rOHTYKFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA4MDc4OA==", "bodyText": "Guess these are IntelliJ style default style changes.\nPlease help on how to use the common style.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15315#discussion_r490080788", "createdAt": "2020-09-17T08:53:37Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -131,7 +169,7 @@\n         Comparator.comparingLong((task) -> task.originalPromise.getExpiryTimeInNanos()));\n \n     private final ScheduledFuture<?> pendingAcquisitionExpirationFuture;\n-    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09e4d27698579c074cd7c05dcf3c57915f0490ee"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMzgxNDM0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15315#pullrequestreview-490381434", "createdAt": "2020-09-17T08:54:01Z", "commit": {"oid": "09e4d27698579c074cd7c05dcf3c57915f0490ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwODo1NDowMVrOHTYLLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwODo1NDowMVrOHTYLLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA4MTA2OA==", "bodyText": "This is my understanding, lets please validate.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15315#discussion_r490081068", "createdAt": "2020-09-17T08:54:01Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -58,6 +58,44 @@\n \n /**\n  * A {@link ChannelPool} implementation that enforces a maximum number of concurrent direct TCP Cosmos connections.\n+ *\n+ * RntbdClientChannelPool: Actors\n+ * \t- acquire (RntbdServiceEndpoint): acquire a channel to use\n+ * \t- release (RntbdServiceEndpoint): channel usage is complete and returning it back to pool\n+ * \t- Channel.closeChannel() Future: Event handling notifying the channel termination to refresh bookkeeping\n+ * \t- acquisitionTimeoutTimer: channel acquisition wait-out handler\n+ * \t- monitoring (through RntbdServiceEndpoint): get monitoring metrics\n+ *\n+ * \tBehaviors/Expectations:\n+ * \t    - Bounds: MAX_CHANNELS_PER_ENDPOINT * MAX_REQUESTS_ENDPOINT (NOT A GUARANTEE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09e4d27698579c074cd7c05dcf3c57915f0490ee"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNDY1NzQx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15315#pullrequestreview-490465741", "createdAt": "2020-09-17T10:43:33Z", "commit": {"oid": "09e4d27698579c074cd7c05dcf3c57915f0490ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDo0MzozNFrOHTcKlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDo0MzozNFrOHTcKlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0NjQ1NA==", "bodyText": "timeout", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15315#discussion_r490146454", "createdAt": "2020-09-17T10:43:34Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -58,6 +58,44 @@\n \n /**\n  * A {@link ChannelPool} implementation that enforces a maximum number of concurrent direct TCP Cosmos connections.\n+ *\n+ * RntbdClientChannelPool: Actors\n+ * \t- acquire (RntbdServiceEndpoint): acquire a channel to use\n+ * \t- release (RntbdServiceEndpoint): channel usage is complete and returning it back to pool\n+ * \t- Channel.closeChannel() Future: Event handling notifying the channel termination to refresh bookkeeping\n+ * \t- acquisitionTimeoutTimer: channel acquisition wait-out handler", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09e4d27698579c074cd7c05dcf3c57915f0490ee"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNDcwMDg5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15315#pullrequestreview-490470089", "createdAt": "2020-09-17T10:50:24Z", "commit": {"oid": "09e4d27698579c074cd7c05dcf3c57915f0490ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDo1MDoyNFrOHTcXvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDo1MDoyNFrOHTcXvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0OTgyMw==", "bodyText": "I would argue this is by design - impossible to guarantee max TCP connections per endpoint without accepting that you might have to throw away newly created connections - establishing a connection is expensive - for both client and service. Usage scenarios don't need to be optimized for cold-start latency - CosmosDB prime time is for high load /throughput scenarios", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15315#discussion_r490149823", "createdAt": "2020-09-17T10:50:24Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -58,6 +58,44 @@\n \n /**\n  * A {@link ChannelPool} implementation that enforces a maximum number of concurrent direct TCP Cosmos connections.\n+ *\n+ * RntbdClientChannelPool: Actors\n+ * \t- acquire (RntbdServiceEndpoint): acquire a channel to use\n+ * \t- release (RntbdServiceEndpoint): channel usage is complete and returning it back to pool\n+ * \t- Channel.closeChannel() Future: Event handling notifying the channel termination to refresh bookkeeping\n+ * \t- acquisitionTimeoutTimer: channel acquisition wait-out handler\n+ * \t- monitoring (through RntbdServiceEndpoint): get monitoring metrics\n+ *\n+ * \tBehaviors/Expectations:\n+ * \t    - Bounds: MAX_CHANNELS_PER_ENDPOINT * MAX_REQUESTS_ENDPOINT (NOT A GUARANTEE)\n+ * \t    - NewChannel vs ReUseChannel:\n+ * \t        - NewChannels are serially created (current state NOT by-design)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09e4d27698579c074cd7c05dcf3c57915f0490ee"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNDcwODU5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15315#pullrequestreview-490470859", "createdAt": "2020-09-17T10:51:36Z", "commit": {"oid": "09e4d27698579c074cd7c05dcf3c57915f0490ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDo1MTozNlrOHTcaBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDo1MTozNlrOHTcaBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1MDQwNA==", "bodyText": "True if load factor < 90%. If LoadFactor > 90% we always choose the channel with the least number of pending requests - so fairness is attempted.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15315#discussion_r490150404", "createdAt": "2020-09-17T10:51:36Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -58,6 +58,44 @@\n \n /**\n  * A {@link ChannelPool} implementation that enforces a maximum number of concurrent direct TCP Cosmos connections.\n+ *\n+ * RntbdClientChannelPool: Actors\n+ * \t- acquire (RntbdServiceEndpoint): acquire a channel to use\n+ * \t- release (RntbdServiceEndpoint): channel usage is complete and returning it back to pool\n+ * \t- Channel.closeChannel() Future: Event handling notifying the channel termination to refresh bookkeeping\n+ * \t- acquisitionTimeoutTimer: channel acquisition wait-out handler\n+ * \t- monitoring (through RntbdServiceEndpoint): get monitoring metrics\n+ *\n+ * \tBehaviors/Expectations:\n+ * \t    - Bounds: MAX_CHANNELS_PER_ENDPOINT * MAX_REQUESTS_ENDPOINT (NOT A GUARANTEE)\n+ * \t    - NewChannel vs ReUseChannel:\n+ * \t        - NewChannels are serially created (current state NOT by-design)\n+ * \t        - Will re-use an existing channel when possible (with MAX_REQUESTS_ENDPOINT constraint)\n+ * \t        - No guarantees on fairness per channel with-in bounds of MAX_REQUESTS_ENDPOINT. I.e. some channel might have high request concurrency compared to others", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09e4d27698579c074cd7c05dcf3c57915f0490ee"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNDcxNTcy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15315#pullrequestreview-490471572", "createdAt": "2020-09-17T10:52:44Z", "commit": {"oid": "09e4d27698579c074cd7c05dcf3c57915f0490ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDo1Mjo0NFrOHTcb_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDo1Mjo0NFrOHTcb_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1MDkxMQ==", "bodyText": "pendingAcquisitions is a ConcurrentQueue - no need to constrain to evetLoop", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15315#discussion_r490150911", "createdAt": "2020-09-17T10:52:44Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -58,6 +58,44 @@\n \n /**\n  * A {@link ChannelPool} implementation that enforces a maximum number of concurrent direct TCP Cosmos connections.\n+ *\n+ * RntbdClientChannelPool: Actors\n+ * \t- acquire (RntbdServiceEndpoint): acquire a channel to use\n+ * \t- release (RntbdServiceEndpoint): channel usage is complete and returning it back to pool\n+ * \t- Channel.closeChannel() Future: Event handling notifying the channel termination to refresh bookkeeping\n+ * \t- acquisitionTimeoutTimer: channel acquisition wait-out handler\n+ * \t- monitoring (through RntbdServiceEndpoint): get monitoring metrics\n+ *\n+ * \tBehaviors/Expectations:\n+ * \t    - Bounds: MAX_CHANNELS_PER_ENDPOINT * MAX_REQUESTS_ENDPOINT (NOT A GUARANTEE)\n+ * \t    - NewChannel vs ReUseChannel:\n+ * \t        - NewChannels are serially created (current state NOT by-design)\n+ * \t        - Will re-use an existing channel when possible (with MAX_REQUESTS_ENDPOINT constraint)\n+ * \t        - No guarantees on fairness per channel with-in bounds of MAX_REQUESTS_ENDPOINT. I.e. some channel might have high request concurrency compared to others\n+ * \t    - Channel serving guarantees:\n+ * \t        - Ordered delivery is not guaranteed (by-design)\n+ * \t        - Fairness is attempted but not a guarantee\n+ * \t        - [UNRELATED TO CHANNEL-POOL] [CURRENT DESIGN]: RntbdServiceEndpoint.write releases Channel before its usage -> acquisition order and channel user order might differ.\n+ * \t    - AcquisitionTimeout: if not can't be served in an expected time, fails gracefully\n+ * \t    - Metrics: are approximations and might be in-consistent(by-design) as well\n+ *\n+ * \tDesign Notes:\n+ * \t    - channelPool.eventLoop{@Link executor}: (executes on a single & same thread, serially)\n+ * \t        - Schedule only when it can be served immediately\n+ * \t        - Updates to below data structures should be done only when inside eventLoop\n+ * \t            - {@Link acquiredChannels}\n+ * \t            - {@Link availableChannels}\n+ * \t            - {@Link pendingAcquisitions}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09e4d27698579c074cd7c05dcf3c57915f0490ee"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNDcyMDE3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15315#pullrequestreview-490472017", "createdAt": "2020-09-17T10:53:24Z", "commit": {"oid": "09e4d27698579c074cd7c05dcf3c57915f0490ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDo1MzoyNVrOHTcdOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDo1MzoyNVrOHTcdOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1MTIyNg==", "bodyText": "Updates and reads that depend on \"strong consistency\" - like whether to create a new connection or not.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15315#discussion_r490151226", "createdAt": "2020-09-17T10:53:25Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -58,6 +58,44 @@\n \n /**\n  * A {@link ChannelPool} implementation that enforces a maximum number of concurrent direct TCP Cosmos connections.\n+ *\n+ * RntbdClientChannelPool: Actors\n+ * \t- acquire (RntbdServiceEndpoint): acquire a channel to use\n+ * \t- release (RntbdServiceEndpoint): channel usage is complete and returning it back to pool\n+ * \t- Channel.closeChannel() Future: Event handling notifying the channel termination to refresh bookkeeping\n+ * \t- acquisitionTimeoutTimer: channel acquisition wait-out handler\n+ * \t- monitoring (through RntbdServiceEndpoint): get monitoring metrics\n+ *\n+ * \tBehaviors/Expectations:\n+ * \t    - Bounds: MAX_CHANNELS_PER_ENDPOINT * MAX_REQUESTS_ENDPOINT (NOT A GUARANTEE)\n+ * \t    - NewChannel vs ReUseChannel:\n+ * \t        - NewChannels are serially created (current state NOT by-design)\n+ * \t        - Will re-use an existing channel when possible (with MAX_REQUESTS_ENDPOINT constraint)\n+ * \t        - No guarantees on fairness per channel with-in bounds of MAX_REQUESTS_ENDPOINT. I.e. some channel might have high request concurrency compared to others\n+ * \t    - Channel serving guarantees:\n+ * \t        - Ordered delivery is not guaranteed (by-design)\n+ * \t        - Fairness is attempted but not a guarantee\n+ * \t        - [UNRELATED TO CHANNEL-POOL] [CURRENT DESIGN]: RntbdServiceEndpoint.write releases Channel before its usage -> acquisition order and channel user order might differ.\n+ * \t    - AcquisitionTimeout: if not can't be served in an expected time, fails gracefully\n+ * \t    - Metrics: are approximations and might be in-consistent(by-design) as well\n+ *\n+ * \tDesign Notes:\n+ * \t    - channelPool.eventLoop{@Link executor}: (executes on a single & same thread, serially)\n+ * \t        - Schedule only when it can be served immediately\n+ * \t        - Updates to below data structures should be done only when inside eventLoop", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09e4d27698579c074cd7c05dcf3c57915f0490ee"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNDcyODQ3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15315#pullrequestreview-490472847", "createdAt": "2020-09-17T10:54:40Z", "commit": {"oid": "09e4d27698579c074cd7c05dcf3c57915f0490ee"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee9eb66ddc45a25adf7c9d9814196f90d918961e", "author": {"user": {"login": "kirankumarkolli", "name": "Kiran Kumar Kolli"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ee9eb66ddc45a25adf7c9d9814196f90d918961e", "committedDate": "2020-09-19T11:46:15Z", "message": "Addressing the comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "248d110d53e000a60ce6cefd95c1ab4685cdd57d", "author": {"user": {"login": "kirankumarkolli", "name": "Kiran Kumar Kolli"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/248d110d53e000a60ce6cefd95c1ab4685cdd57d", "committedDate": "2020-09-19T12:15:56Z", "message": "Some more"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19dd4198a184ae4acf395599a62ab224b3b8c482", "author": {"user": {"login": "kirankumarkolli", "name": "Kiran Kumar Kolli"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/19dd4198a184ae4acf395599a62ab224b3b8c482", "committedDate": "2020-09-21T16:02:48Z", "message": "Some more freshed of the notes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyOTIxMzI4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15315#pullrequestreview-492921328", "createdAt": "2020-09-21T19:36:08Z", "commit": {"oid": "19dd4198a184ae4acf395599a62ab224b3b8c482"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyOTE5NTkx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15315#pullrequestreview-492919591", "createdAt": "2020-09-21T19:33:32Z", "commit": {"oid": "19dd4198a184ae4acf395599a62ab224b3b8c482"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTozMzozMlrOHVfhxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTo0MDozNlrOHVfwAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI5ODY5Mg==", "bodyText": "AvailableChannels.size() + AcquiredChannels.size() + (connections in connecting state, i.e., connecting.get())  <= MAX_CHANNELS_PER_ENDPOINT", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15315#discussion_r492298692", "createdAt": "2020-09-21T19:33:32Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -58,6 +58,58 @@\n \n /**\n  * A {@link ChannelPool} implementation that enforces a maximum number of concurrent direct TCP Cosmos connections.\n+ *\n+ * RntbdClientChannelPool: Actors\n+ * \t- acquire (RntbdServiceEndpoint): acquire a channel to use\n+ * \t- release (RntbdServiceEndpoint): channel usage is complete and returning it back to pool\n+ * \t- Channel.closeChannel() Future: Event handling notifying the channel termination to refresh bookkeeping\n+ * \t- acquisitionTimeoutTimer: channel acquisition time-out handler\n+ * \t- monitoring (through RntbdServiceEndpoint): get monitoring metrics\n+ *\n+ * \tBehaviors/Expectations:\n+ * \t    - Bounds:\n+ * \t        - max requests in-flight per channelPool: MAX_CHANNELS_PER_ENDPOINT * MAX_REQUESTS_ENDPOINT (NOT A GUARANTEE)\n+ * \t        - AvailableChannels.size() + AcquiredChannels.size() <= MAX_CHANNELS_PER_ENDPOINT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19dd4198a184ae4acf395599a62ab224b3b8c482"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI5OTM0NA==", "bodyText": "how did we come up with the math?\nI might be missing something not sure on the accuracy of this one, could you please validate?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15315#discussion_r492299344", "createdAt": "2020-09-21T19:34:52Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -58,6 +58,58 @@\n \n /**\n  * A {@link ChannelPool} implementation that enforces a maximum number of concurrent direct TCP Cosmos connections.\n+ *\n+ * RntbdClientChannelPool: Actors\n+ * \t- acquire (RntbdServiceEndpoint): acquire a channel to use\n+ * \t- release (RntbdServiceEndpoint): channel usage is complete and returning it back to pool\n+ * \t- Channel.closeChannel() Future: Event handling notifying the channel termination to refresh bookkeeping\n+ * \t- acquisitionTimeoutTimer: channel acquisition time-out handler\n+ * \t- monitoring (through RntbdServiceEndpoint): get monitoring metrics\n+ *\n+ * \tBehaviors/Expectations:\n+ * \t    - Bounds:\n+ * \t        - max requests in-flight per channelPool: MAX_CHANNELS_PER_ENDPOINT * MAX_REQUESTS_ENDPOINT (NOT A GUARANTEE)\n+ * \t        - AvailableChannels.size() + AcquiredChannels.size() <= MAX_CHANNELS_PER_ENDPOINT\n+ * \t        - PendingAcquisition queue default-size: Max(10_000, MAX_CHANNELS_PER_ENDPOINT * MAX_REQUESTS_ENDPOINT)\n+ * \t        - ChannelPool executor event-loop task queue length: MAX_CHANNELS_PER_ENDPOINT * MAX_REQUESTS_ENDPOINT + newInFlightAcquisitions (not yet in pendingAcquisitionQueue)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19dd4198a184ae4acf395599a62ab224b3b8c482"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwMjMzNg==", "bodyText": "strong consistency does this refer to cosmos db consistency?\nThe reason the access to internal fields need to happen on event-loop is to prevent race condition. I cannot see how \"cosmos strong consistency\" is relevant here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15315#discussion_r492302336", "createdAt": "2020-09-21T19:40:36Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -58,6 +58,58 @@\n \n /**\n  * A {@link ChannelPool} implementation that enforces a maximum number of concurrent direct TCP Cosmos connections.\n+ *\n+ * RntbdClientChannelPool: Actors\n+ * \t- acquire (RntbdServiceEndpoint): acquire a channel to use\n+ * \t- release (RntbdServiceEndpoint): channel usage is complete and returning it back to pool\n+ * \t- Channel.closeChannel() Future: Event handling notifying the channel termination to refresh bookkeeping\n+ * \t- acquisitionTimeoutTimer: channel acquisition time-out handler\n+ * \t- monitoring (through RntbdServiceEndpoint): get monitoring metrics\n+ *\n+ * \tBehaviors/Expectations:\n+ * \t    - Bounds:\n+ * \t        - max requests in-flight per channelPool: MAX_CHANNELS_PER_ENDPOINT * MAX_REQUESTS_ENDPOINT (NOT A GUARANTEE)\n+ * \t        - AvailableChannels.size() + AcquiredChannels.size() <= MAX_CHANNELS_PER_ENDPOINT\n+ * \t        - PendingAcquisition queue default-size: Max(10_000, MAX_CHANNELS_PER_ENDPOINT * MAX_REQUESTS_ENDPOINT)\n+ * \t        - ChannelPool executor event-loop task queue length: MAX_CHANNELS_PER_ENDPOINT * MAX_REQUESTS_ENDPOINT + newInFlightAcquisitions (not yet in pendingAcquisitionQueue)\n+ * \t            - newInFlightAcquisitions: is expected to very very short. Hard-bound to ADMINSSON_CONTROL (upstream in RntbdServiceEndpoint)\n+ * \t    - NewChannel vs ReUseChannel:\n+ * \t        - NewChannels are serially created (reasonable current state, possible future change, upstream please DON'T TAKE any dependency)\n+ * \t        - Will re-use an existing channel when possible (with MAX_REQUESTS_ENDPOINT attempt not GUARANTEED)\n+ * \t        - Channel usage fairness: fairness is attempted but not guaranteed\n+ * \t            - When loadFactor is > 90%, fairness is attempted by selecting Channel with less concurrency\n+ * \t            - Otherwise no guarantees on fairness per channel with-in bounds of MAX_REQUESTS_ENDPOINT. I.e. some channel might have high request concurrency compared to others\n+ * \t    - Channel serving guarantees:\n+ * \t        - Ordered delivery is not guaranteed (by-design)\n+ * \t        - Fairness is attempted but not a guarantee\n+ * \t        - [UNRELATED TO CHANNEL-POOL] [CURRENT DESIGN]: RntbdServiceEndpoint.write releases Channel before its usage -> acquisition order and channel user order might differ.\n+ * \t    - AcquisitionTimeout: if not can't be served in an expected time, fails gracefully\n+ * \t    - Metrics: are approximations and might be in-consistent(by-design) as well\n+ * \t    - EventLoop\n+ * \t        - ChannelPool executor might be shared across ChannelPools or Channel\n+ *\n+ * \tDesign Notes:\n+ * \t    - channelPool.eventLoop{@Link executor}: (executes on a single & same thread, serially)\n+ * \t        - Each channelPool gets an EventLoop (selection is round-robin)\n+ * \t        - Schedule only when it can be served immediately\n+ * \t        - Updates and reads that depend on \"strong consistency\" - like whether to create a new connection or not.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19dd4198a184ae4acf395599a62ab224b3b8c482"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "825e1713a136bbe4d76b15d840d2bd5c1991f7bd", "author": {"user": {"login": "kirankumarkolli", "name": "Kiran Kumar Kolli"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/825e1713a136bbe4d76b15d840d2bd5c1991f7bd", "committedDate": "2020-09-21T19:59:22Z", "message": "Refreshing it with comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3402, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}