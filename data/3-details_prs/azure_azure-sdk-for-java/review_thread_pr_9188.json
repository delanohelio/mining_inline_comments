{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMjY2MDY3", "number": 9188, "reviewThreads": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNzozNDoxOVrODo_wKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMTowNToyN1rOD4V3EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MzE0MTUyOnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DefaultAzureCredential.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNzozNDoxOVrOF35ELA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNzozNDoxOVrOF35ELA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1MDk1Ng==", "bodyText": "Keychain service & account names are consistent with Python ext at https://github.com/AzureAD/microsoft-authentication-extensions-for-python/blob/71b5301cb8c4768a9f439bde20750d448062944c/msal_extensions/token_cache.py#L141 and this test in .NET ext: https://github.com/AzureAD/microsoft-authentication-extensions-for-dotnet/blob/85c1e8ec283b940b1cc34eae44ac37fa645738ff/tests/Microsoft.Identity.Client.Extensions.Msal.UnitTests/MsalCacheStorageTests.cs", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r394150956", "createdAt": "2020-03-18T07:34:19Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DefaultAzureCredential.java", "diffHunk": "@@ -23,6 +27,18 @@\n  */\n @Immutable\n public final class DefaultAzureCredential extends ChainedTokenCredential {\n+    private static final String DEFAULT_CACHE_FILE_NAME = \"msal.cache\";\n+    private static final Path DEFAULT_CACHE_DIRECTORY = Platform.isWindows() ?\n+            Paths.get(System.getProperty(\"user.home\"), \"AppData\", \"Local\", \".IdentityService\", \"msal.cache\") :\n+            Paths.get(System.getProperty(\"user.home\"),\".IdentityService\", \"msal.cache\");\n+    private static final String DEFAULT_KEYCHAIN_SERVICE = \"Microsoft.Developer.IdentityService\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c034433635405cd77f8f5dd3a03f504e645a6e8"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MzE0MzgwOnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DefaultAzureCredential.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNzozNToxN1rOF35Flg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNzozNToxN1rOF35Flg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1MTMxOA==", "bodyText": "This is consistent with Visual Studio: https://github.com/microsoft/Git-Credential-Manager-Core/blob/master/src/shared/Microsoft.Git.CredentialManager/Authentication/MicrosoftAuthentication.cs#L228", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r394151318", "createdAt": "2020-03-18T07:35:17Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DefaultAzureCredential.java", "diffHunk": "@@ -23,6 +27,18 @@\n  */\n @Immutable\n public final class DefaultAzureCredential extends ChainedTokenCredential {\n+    private static final String DEFAULT_CACHE_FILE_NAME = \"msal.cache\";\n+    private static final Path DEFAULT_CACHE_DIRECTORY = Platform.isWindows() ?\n+            Paths.get(System.getProperty(\"user.home\"), \"AppData\", \"Local\", \".IdentityService\", \"msal.cache\") :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c034433635405cd77f8f5dd3a03f504e645a6e8"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MzE0NTAwOnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DefaultAzureCredential.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNzozNTo0M1rOF35GUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNzozNTo0M1rOF35GUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1MTUwNA==", "bodyText": "This is invented by me - open for discussion", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r394151504", "createdAt": "2020-03-18T07:35:43Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DefaultAzureCredential.java", "diffHunk": "@@ -23,6 +27,18 @@\n  */\n @Immutable\n public final class DefaultAzureCredential extends ChainedTokenCredential {\n+    private static final String DEFAULT_CACHE_FILE_NAME = \"msal.cache\";\n+    private static final Path DEFAULT_CACHE_DIRECTORY = Platform.isWindows() ?\n+            Paths.get(System.getProperty(\"user.home\"), \"AppData\", \"Local\", \".IdentityService\", \"msal.cache\") :\n+            Paths.get(System.getProperty(\"user.home\"),\".IdentityService\", \"msal.cache\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c034433635405cd77f8f5dd3a03f504e645a6e8"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MzE0NjM4OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DefaultAzureCredential.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNzozNjoxNVrOF35HNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNzozNjoxNVrOF35HNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1MTczNQ==", "bodyText": "Line 39 and 40 are also from the test https://github.com/AzureAD/microsoft-authentication-extensions-for-dotnet/blob/85c1e8ec283b940b1cc34eae44ac37fa645738ff/tests/Microsoft.Identity.Client.Extensions.Msal.UnitTests/MsalCacheStorageTests.cs", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r394151735", "createdAt": "2020-03-18T07:36:15Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DefaultAzureCredential.java", "diffHunk": "@@ -23,6 +27,18 @@\n  */\n @Immutable\n public final class DefaultAzureCredential extends ChainedTokenCredential {\n+    private static final String DEFAULT_CACHE_FILE_NAME = \"msal.cache\";\n+    private static final Path DEFAULT_CACHE_DIRECTORY = Platform.isWindows() ?\n+            Paths.get(System.getProperty(\"user.home\"), \"AppData\", \"Local\", \".IdentityService\", \"msal.cache\") :\n+            Paths.get(System.getProperty(\"user.home\"),\".IdentityService\", \"msal.cache\");\n+    private static final String DEFAULT_KEYCHAIN_SERVICE = \"Microsoft.Developer.IdentityService\";\n+    private static final String DEFAULT_KEYCHAIN_ACCOUNT = \"MSALCache\";\n+    private static final String DEFAULT_KEYRING_NAME = \"default\";\n+    private static final KeyRingItemSchema DEFAULT_KEYRING_SCHEMA = KeyRingItemSchema.GENERIC_SECRET;\n+    private static final String DEFAULT_KEYRING_ITEM_NAME = DEFAULT_KEYCHAIN_ACCOUNT;\n+    private static final String DEFAULT_KEYRING_ATTR_NAME = \"MsalClientID\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c034433635405cd77f8f5dd3a03f504e645a6e8"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2OTE4NDIzOnYy", "diffSide": "RIGHT", "path": "eng/versioning/version_client.txt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMzoyNjozMlrOGKP8jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMzo1MzoxMVrOGKQkkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQwMDIwNQ==", "bodyText": "Looks like a bad merge here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r413400205", "createdAt": "2020-04-22T23:26:32Z", "author": {"login": "weshaggard"}, "path": "eng/versioning/version_client.txt", "diffHunk": "@@ -19,8 +19,9 @@ com.azure:azure-cosmos-examples;4.0.1-beta.1;4.0.1-beta.1\n com.azure:azure-cosmos-benchmark;4.0.1-beta.1;4.0.1-beta.1\n com.azure:azure-data-appconfiguration;1.1.1;1.2.0-beta.1\n com.azure:azure-e2e;1.0.0-beta.1;1.0.0-beta.1\n-com.azure:azure-identity;1.0.4;1.1.0-beta.3\n+com.azure:azure-identity;1.0.5;1.1.0-beta.4\n com.azure:azure-identity-perf;1.0.0-beta.1;1.0.0-beta.1\n+>>>>>>> 3a255eb005748305722895bc50d3dd4ff5789bdb", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed6b0137e88e994d19dabf75263dd001404da094"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQxMDQ0OQ==", "bodyText": "Thanks! But you seem to be reviewing an outdated diff.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r413410449", "createdAt": "2020-04-22T23:53:11Z", "author": {"login": "jianghaolu"}, "path": "eng/versioning/version_client.txt", "diffHunk": "@@ -19,8 +19,9 @@ com.azure:azure-cosmos-examples;4.0.1-beta.1;4.0.1-beta.1\n com.azure:azure-cosmos-benchmark;4.0.1-beta.1;4.0.1-beta.1\n com.azure:azure-data-appconfiguration;1.1.1;1.2.0-beta.1\n com.azure:azure-e2e;1.0.0-beta.1;1.0.0-beta.1\n-com.azure:azure-identity;1.0.4;1.1.0-beta.3\n+com.azure:azure-identity;1.0.5;1.1.0-beta.4\n com.azure:azure-identity-perf;1.0.0-beta.1;1.0.0-beta.1\n+>>>>>>> 3a255eb005748305722895bc50d3dd4ff5789bdb", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQwMDIwNQ=="}, "originalCommit": {"oid": "ed6b0137e88e994d19dabf75263dd001404da094"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzE0OTM5OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/AadCredentialBuilderBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzozODo0M1rOGK0Krg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODowODo1MlrOGK1a6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5MzY0Ng==", "bodyText": "nit: to be consistent with the rest of the javadoc change this to\n@return An updated instance of this builder with useUnprotectedFileOnLinux set as specified.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r413993646", "createdAt": "2020-04-23T17:38:43Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/AadCredentialBuilderBase.java", "diffHunk": "@@ -70,4 +70,31 @@ public T executorService(ExecutorService executorService) {\n         this.identityClientOptions.setExecutorService(executorService);\n         return (T) this;\n     }\n+\n+    /**\n+     * Sets whether to use an unprotected file specified by <code>cacheFileLocation()</code> instead of\n+     * Gnome keyring on Linux. This is false by default.\n+     *\n+     * @param useUnprotectedFileOnLinux whether to use an unprotected file for cache storage.\n+     *\n+     * @return The updated T object.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006b191ee58398d9114cdab3625bd1a87ce36726"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxNDE4Ng==", "bodyText": "Updated", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r414014186", "createdAt": "2020-04-23T18:08:52Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/AadCredentialBuilderBase.java", "diffHunk": "@@ -70,4 +70,31 @@ public T executorService(ExecutorService executorService) {\n         this.identityClientOptions.setExecutorService(executorService);\n         return (T) this;\n     }\n+\n+    /**\n+     * Sets whether to use an unprotected file specified by <code>cacheFileLocation()</code> instead of\n+     * Gnome keyring on Linux. This is false by default.\n+     *\n+     * @param useUnprotectedFileOnLinux whether to use an unprotected file for cache storage.\n+     *\n+     * @return The updated T object.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5MzY0Ng=="}, "originalCommit": {"oid": "006b191ee58398d9114cdab3625bd1a87ce36726"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzE1MDYxOnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/AadCredentialBuilderBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzozOTowMFrOGK0LbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODowODo1OFrOGK1bLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5MzgzNw==", "bodyText": "same as above", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r413993837", "createdAt": "2020-04-23T17:39:00Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/AadCredentialBuilderBase.java", "diffHunk": "@@ -70,4 +70,31 @@ public T executorService(ExecutorService executorService) {\n         this.identityClientOptions.setExecutorService(executorService);\n         return (T) this;\n     }\n+\n+    /**\n+     * Sets whether to use an unprotected file specified by <code>cacheFileLocation()</code> instead of\n+     * Gnome keyring on Linux. This is false by default.\n+     *\n+     * @param useUnprotectedFileOnLinux whether to use an unprotected file for cache storage.\n+     *\n+     * @return The updated T object.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public T useUnprotectedTokenCacheFileOnLinux(boolean useUnprotectedFileOnLinux) {\n+        this.identityClientOptions.setUseUnprotectedTokenCacheFileOnLinux(useUnprotectedFileOnLinux);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Disable using the shared token cache.\n+     *\n+     * @param disabled whether to disable using the shared token cache.\n+     *\n+     * @return The updated identity client options.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006b191ee58398d9114cdab3625bd1a87ce36726"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxNDI1Mg==", "bodyText": "Updated", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r414014252", "createdAt": "2020-04-23T18:08:58Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/AadCredentialBuilderBase.java", "diffHunk": "@@ -70,4 +70,31 @@ public T executorService(ExecutorService executorService) {\n         this.identityClientOptions.setExecutorService(executorService);\n         return (T) this;\n     }\n+\n+    /**\n+     * Sets whether to use an unprotected file specified by <code>cacheFileLocation()</code> instead of\n+     * Gnome keyring on Linux. This is false by default.\n+     *\n+     * @param useUnprotectedFileOnLinux whether to use an unprotected file for cache storage.\n+     *\n+     * @return The updated T object.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public T useUnprotectedTokenCacheFileOnLinux(boolean useUnprotectedFileOnLinux) {\n+        this.identityClientOptions.setUseUnprotectedTokenCacheFileOnLinux(useUnprotectedFileOnLinux);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Disable using the shared token cache.\n+     *\n+     * @param disabled whether to disable using the shared token cache.\n+     *\n+     * @return The updated identity client options.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5MzgzNw=="}, "originalCommit": {"oid": "006b191ee58398d9114cdab3625bd1a87ce36726"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzE1NzY4OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/KeyringItemSchema.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzo0MDozN1rOGK0Pmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODowOToxMVrOGK1bqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5NDkwNw==", "bodyText": "Since the javadoc mentions that this is an expandable enum, should this class extend from ExpandableStringEnum?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r413994907", "createdAt": "2020-04-23T17:40:37Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/KeyringItemSchema.java", "diffHunk": "@@ -0,0 +1,35 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity;\n+\n+/**\n+ * An expandable enum for types of item schema in a Keyring.\n+ */\n+public final class KeyringItemSchema {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006b191ee58398d9114cdab3625bd1a87ce36726"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxNDM3OA==", "bodyText": "Changed to extend from ExpandableStringEnum", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r414014378", "createdAt": "2020-04-23T18:09:11Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/KeyringItemSchema.java", "diffHunk": "@@ -0,0 +1,35 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity;\n+\n+/**\n+ * An expandable enum for types of item schema in a Keyring.\n+ */\n+public final class KeyringItemSchema {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5NDkwNw=="}, "originalCommit": {"oid": "006b191ee58398d9114cdab3625bd1a87ce36726"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzE4NTA1OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzo0NjozMFrOGK0fig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMTo1OFrOGK6J9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5ODk4Ng==", "bodyText": "Use log instead of e.printStackTrace()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r413998986", "createdAt": "2020-04-23T17:46:30Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -490,6 +529,86 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n             });\n     }\n \n+    /**\n+     * Gets token from shared token cache\n+     * */\n+    public Mono<AccessToken> authenticateWithSharedTokenCache(TokenRequestContext request, String username) {\n+        String authorityUrl = options.getAuthorityHost().replaceAll(\"/+$\", \"\") + \"/\" + tenantId + \"/\";\n+        // find if the Public Client app with the requested username exists\n+        return Mono.fromFuture(() -> getPublicClientApplication(true).getAccounts())\n+                .onErrorResume(t -> Mono.error(new CredentialUnavailableException(\n+                        \"Cannot get accounts from token cache. Error: \" + t.getMessage(), t)))\n+                .flatMap(set -> {\n+                    IAccount requestedAccount;\n+                    Map<String, IAccount> accounts = new HashMap<>(); // home account id -> account\n+\n+                    for (IAccount cached : set) {\n+                        if (username == null || username.equals(cached.username())) {\n+                            if (!accounts.containsKey(cached.homeAccountId())) { // only put the first one\n+                                accounts.put(cached.homeAccountId(), cached);\n+                            }\n+                        }\n+                    }\n+\n+                    if (accounts.size() == 0) {\n+                        if (username == null) {\n+                            return Mono.error(new CredentialUnavailableException(\"No accounts were discovered in the \"\n+                                    + \"shared token cache. To fix, authenticate through tooling supporting azure \"\n+                                    + \"developer sign on.\"));\n+                        } else {\n+                            return Mono.error(new CredentialUnavailableException(String.format(\"User account '%s' was \"\n+                                    + \"not found in the shared token cache. Discovered Accounts: [ '%s' ]\", username,\n+                                    set.stream().map(IAccount::username).distinct()\n+                                            .collect(Collectors.joining(\", \")))));\n+                        }\n+                    } else if (accounts.size() > 1) {\n+                        if (username == null) {\n+                            return Mono.error(new CredentialUnavailableException(\"Multiple accounts were discovered \"\n+                                    + \"in the shared token cache. To fix, set the AZURE_USERNAME and AZURE_TENANT_ID \"\n+                                    + \"environment variable to the preferred username, or specify it when \"\n+                                    + \"constructing SharedTokenCacheCredential.\"));\n+                        } else {\n+                            return Mono.error(new CredentialUnavailableException(\"Multiple entries for the user \"\n+                                    + \"account \" + username + \" were found in the shared token cache. This is not \"\n+                                    + \"currently supported by the SharedTokenCacheCredential.\"));\n+                        }\n+                    } else {\n+                        requestedAccount = accounts.values().iterator().next();\n+                    }\n+\n+                    // if it does, then request the token\n+                    SilentParameters params = SilentParameters.builder(\n+                            new HashSet<>(request.getScopes()), requestedAccount)\n+                            .authorityUrl(authorityUrl)\n+                            .build();\n+\n+                    SilentParameters forceParams = SilentParameters.builder(\n+                            new HashSet<>(request.getScopes()), requestedAccount)\n+                            .authorityUrl(authorityUrl)\n+                            .forceRefresh(true)\n+                            .build();\n+\n+                    CompletableFuture<IAuthenticationResult> future;\n+                    try {\n+                        future = getPublicClientApplication(false).acquireTokenSilently(params);\n+                        return Mono.fromFuture(() -> future).map(result ->\n+                                    new MsalToken(result, options))\n+                                .filter(t -> !t.isExpired())\n+                                .switchIfEmpty(Mono.defer(() -> Mono.fromFuture(() -> {\n+                                        try {\n+                                            return getPublicClientApplication(false).acquireTokenSilently(forceParams);\n+                                        } catch (MalformedURLException e) {\n+                                            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+                                        }\n+                                    }\n+                                ).map(result -> new MsalToken(result, options))));\n+                    } catch (MalformedURLException e) {\n+                        e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006b191ee58398d9114cdab3625bd1a87ce36726"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MTc2Nw==", "bodyText": "Updated.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r414091767", "createdAt": "2020-04-23T20:11:58Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -490,6 +529,86 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n             });\n     }\n \n+    /**\n+     * Gets token from shared token cache\n+     * */\n+    public Mono<AccessToken> authenticateWithSharedTokenCache(TokenRequestContext request, String username) {\n+        String authorityUrl = options.getAuthorityHost().replaceAll(\"/+$\", \"\") + \"/\" + tenantId + \"/\";\n+        // find if the Public Client app with the requested username exists\n+        return Mono.fromFuture(() -> getPublicClientApplication(true).getAccounts())\n+                .onErrorResume(t -> Mono.error(new CredentialUnavailableException(\n+                        \"Cannot get accounts from token cache. Error: \" + t.getMessage(), t)))\n+                .flatMap(set -> {\n+                    IAccount requestedAccount;\n+                    Map<String, IAccount> accounts = new HashMap<>(); // home account id -> account\n+\n+                    for (IAccount cached : set) {\n+                        if (username == null || username.equals(cached.username())) {\n+                            if (!accounts.containsKey(cached.homeAccountId())) { // only put the first one\n+                                accounts.put(cached.homeAccountId(), cached);\n+                            }\n+                        }\n+                    }\n+\n+                    if (accounts.size() == 0) {\n+                        if (username == null) {\n+                            return Mono.error(new CredentialUnavailableException(\"No accounts were discovered in the \"\n+                                    + \"shared token cache. To fix, authenticate through tooling supporting azure \"\n+                                    + \"developer sign on.\"));\n+                        } else {\n+                            return Mono.error(new CredentialUnavailableException(String.format(\"User account '%s' was \"\n+                                    + \"not found in the shared token cache. Discovered Accounts: [ '%s' ]\", username,\n+                                    set.stream().map(IAccount::username).distinct()\n+                                            .collect(Collectors.joining(\", \")))));\n+                        }\n+                    } else if (accounts.size() > 1) {\n+                        if (username == null) {\n+                            return Mono.error(new CredentialUnavailableException(\"Multiple accounts were discovered \"\n+                                    + \"in the shared token cache. To fix, set the AZURE_USERNAME and AZURE_TENANT_ID \"\n+                                    + \"environment variable to the preferred username, or specify it when \"\n+                                    + \"constructing SharedTokenCacheCredential.\"));\n+                        } else {\n+                            return Mono.error(new CredentialUnavailableException(\"Multiple entries for the user \"\n+                                    + \"account \" + username + \" were found in the shared token cache. This is not \"\n+                                    + \"currently supported by the SharedTokenCacheCredential.\"));\n+                        }\n+                    } else {\n+                        requestedAccount = accounts.values().iterator().next();\n+                    }\n+\n+                    // if it does, then request the token\n+                    SilentParameters params = SilentParameters.builder(\n+                            new HashSet<>(request.getScopes()), requestedAccount)\n+                            .authorityUrl(authorityUrl)\n+                            .build();\n+\n+                    SilentParameters forceParams = SilentParameters.builder(\n+                            new HashSet<>(request.getScopes()), requestedAccount)\n+                            .authorityUrl(authorityUrl)\n+                            .forceRefresh(true)\n+                            .build();\n+\n+                    CompletableFuture<IAuthenticationResult> future;\n+                    try {\n+                        future = getPublicClientApplication(false).acquireTokenSilently(params);\n+                        return Mono.fromFuture(() -> future).map(result ->\n+                                    new MsalToken(result, options))\n+                                .filter(t -> !t.isExpired())\n+                                .switchIfEmpty(Mono.defer(() -> Mono.fromFuture(() -> {\n+                                        try {\n+                                            return getPublicClientApplication(false).acquireTokenSilently(forceParams);\n+                                        } catch (MalformedURLException e) {\n+                                            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+                                        }\n+                                    }\n+                                ).map(result -> new MsalToken(result, options))));\n+                    } catch (MalformedURLException e) {\n+                        e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5ODk4Ng=="}, "originalCommit": {"oid": "006b191ee58398d9114cdab3625bd1a87ce36726"}, "originalPosition": 245}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzIwMzAzOnYy", "diffSide": "RIGHT", "path": "sdk/identity/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzo1MDo0M1rOGK0qcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODowOToyOVrOGK1cag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwMTc3Ng==", "bodyText": "Use the artifact id here: azure-identity-perf", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r414001776", "createdAt": "2020-04-23T17:50:43Z", "author": {"login": "srnagar"}, "path": "sdk/identity/pom.xml", "diffHunk": "@@ -12,5 +12,6 @@\n     <!-- NOTE: Commenting out becuase we are now binary composed.\n     -->\n     <module>azure-identity</module>\n+    <module>perf-test</module>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006b191ee58398d9114cdab3625bd1a87ce36726"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxNDU3MA==", "bodyText": "Updated to azure-identity-perf", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r414014570", "createdAt": "2020-04-23T18:09:29Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/pom.xml", "diffHunk": "@@ -12,5 +12,6 @@\n     <!-- NOTE: Commenting out becuase we are now binary composed.\n     -->\n     <module>azure-identity</module>\n+    <module>perf-test</module>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwMTc3Ng=="}, "originalCommit": {"oid": "006b191ee58398d9114cdab3625bd1a87ce36726"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3Mzg3NjMyOnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/AadCredentialBuilderBase.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDozNDoxNlrOGK69fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMjoyNzozMFrOGK-pOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEwNDk1Nw==", "bodyText": "I think that persistence of the token cache should be opt-in rather than opt out. Also I'm not sure we can put this on the base builder for all credentials, for instance what does it mean to create a SharedTokenCachceCredential with the shared token cache disabled.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r414104957", "createdAt": "2020-04-23T20:34:16Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/AadCredentialBuilderBase.java", "diffHunk": "@@ -70,4 +70,31 @@ public T executorService(ExecutorService executorService) {\n         this.identityClientOptions.setExecutorService(executorService);\n         return (T) this;\n     }\n+\n+    /**\n+     * Sets whether to use an unprotected file specified by <code>cacheFileLocation()</code> instead of\n+     * Gnome keyring on Linux. This is false by default.\n+     *\n+     * @param useUnprotectedFileOnLinux whether to use an unprotected file for cache storage.\n+     *\n+     * @return An updated instance of this builder with the unprotected token cache setting set as specified.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public T useUnprotectedTokenCacheFileOnLinux(boolean useUnprotectedFileOnLinux) {\n+        this.identityClientOptions.setUseUnprotectedTokenCacheFileOnLinux(useUnprotectedFileOnLinux);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Disable using the shared token cache.\n+     *\n+     * @param disabled whether to disable using the shared token cache.\n+     *\n+     * @return An updated instance of this builder with if the shared token cache disabled specified.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public T disableSharedTokenCache(boolean disabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb9c6150b09493f5f45eebe6e563b428401edf51"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDExNTU0OQ==", "bodyText": "For SharedTokenCacheCredential, yes you can disable shared token cache, but assuming no one will do this does save us a ton of duplicate code.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r414115549", "createdAt": "2020-04-23T20:51:58Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/AadCredentialBuilderBase.java", "diffHunk": "@@ -70,4 +70,31 @@ public T executorService(ExecutorService executorService) {\n         this.identityClientOptions.setExecutorService(executorService);\n         return (T) this;\n     }\n+\n+    /**\n+     * Sets whether to use an unprotected file specified by <code>cacheFileLocation()</code> instead of\n+     * Gnome keyring on Linux. This is false by default.\n+     *\n+     * @param useUnprotectedFileOnLinux whether to use an unprotected file for cache storage.\n+     *\n+     * @return An updated instance of this builder with the unprotected token cache setting set as specified.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public T useUnprotectedTokenCacheFileOnLinux(boolean useUnprotectedFileOnLinux) {\n+        this.identityClientOptions.setUseUnprotectedTokenCacheFileOnLinux(useUnprotectedFileOnLinux);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Disable using the shared token cache.\n+     *\n+     * @param disabled whether to disable using the shared token cache.\n+     *\n+     * @return An updated instance of this builder with if the shared token cache disabled specified.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public T disableSharedTokenCache(boolean disabled) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEwNDk1Nw=="}, "originalCommit": {"oid": "eb9c6150b09493f5f45eebe6e563b428401edf51"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2NTMwNw==", "bodyText": "ManagedIdentityCredential and DefaultAzureCredential inherit from CredentialBuilderBase, so they will not inherit this setter currently.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r414165307", "createdAt": "2020-04-23T22:27:30Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/AadCredentialBuilderBase.java", "diffHunk": "@@ -70,4 +70,31 @@ public T executorService(ExecutorService executorService) {\n         this.identityClientOptions.setExecutorService(executorService);\n         return (T) this;\n     }\n+\n+    /**\n+     * Sets whether to use an unprotected file specified by <code>cacheFileLocation()</code> instead of\n+     * Gnome keyring on Linux. This is false by default.\n+     *\n+     * @param useUnprotectedFileOnLinux whether to use an unprotected file for cache storage.\n+     *\n+     * @return An updated instance of this builder with the unprotected token cache setting set as specified.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public T useUnprotectedTokenCacheFileOnLinux(boolean useUnprotectedFileOnLinux) {\n+        this.identityClientOptions.setUseUnprotectedTokenCacheFileOnLinux(useUnprotectedFileOnLinux);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Disable using the shared token cache.\n+     *\n+     * @param disabled whether to disable using the shared token cache.\n+     *\n+     * @return An updated instance of this builder with if the shared token cache disabled specified.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public T disableSharedTokenCache(boolean disabled) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEwNDk1Nw=="}, "originalCommit": {"oid": "eb9c6150b09493f5f45eebe6e563b428401edf51"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3Mzg4ODI4OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/KeyringItemSchema.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDozNzoyMVrOGK7E1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDo0ODoxNlrOGK7eZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEwNjgzOA==", "bodyText": "Is this meant to be part of the public API? I'd prefer to keep these details internal.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r414106838", "createdAt": "2020-04-23T20:37:21Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/KeyringItemSchema.java", "diffHunk": "@@ -0,0 +1,20 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity;\n+\n+import com.azure.core.util.ExpandableStringEnum;\n+\n+/**\n+ * An expandable enum for types of item schema in a Keyring.\n+ */\n+\n+public final class KeyringItemSchema extends ExpandableStringEnum<KeyringItemSchema> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb9c6150b09493f5f45eebe6e563b428401edf51"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDExMzM4MA==", "bodyText": "Good catch - It was made public to allow configurations - but since for now we are not allowing users to configure it I'll hide it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r414113380", "createdAt": "2020-04-23T20:48:16Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/KeyringItemSchema.java", "diffHunk": "@@ -0,0 +1,20 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity;\n+\n+import com.azure.core.util.ExpandableStringEnum;\n+\n+/**\n+ * An expandable enum for types of item schema in a Keyring.\n+ */\n+\n+public final class KeyringItemSchema extends ExpandableStringEnum<KeyringItemSchema> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEwNjgzOA=="}, "originalCommit": {"oid": "eb9c6150b09493f5f45eebe6e563b428401edf51"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDI3MTExOnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity-perf/src/main/java/com/azure/identity/perf/core/ServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMjoyMjoyNlrOGK-grA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNjoxOToyNFrOGNxGKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2MzExNg==", "bodyText": "do we need them to be static ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r414163116", "createdAt": "2020-04-23T22:22:26Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity-perf/src/main/java/com/azure/identity/perf/core/ServiceTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.perf.core;\n+\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.identity.InteractiveBrowserCredential;\n+import com.azure.identity.InteractiveBrowserCredentialBuilder;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.PerfStressTest;\n+import reactor.core.publisher.Mono;\n+\n+public abstract class ServiceTest<TOptions extends PerfStressOptions> extends PerfStressTest<TOptions> {\n+    protected static final String CLI_CLIENT_ID = \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb9c6150b09493f5f45eebe6e563b428401edf51"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA4OTA2NQ==", "bodyText": "I'm simply defining it as a constant: https://stackoverflow.com/questions/9639007/defining-constant-string-in-java", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417089065", "createdAt": "2020-04-29T06:19:24Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity-perf/src/main/java/com/azure/identity/perf/core/ServiceTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.perf.core;\n+\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.identity.InteractiveBrowserCredential;\n+import com.azure.identity.InteractiveBrowserCredentialBuilder;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.PerfStressTest;\n+import reactor.core.publisher.Mono;\n+\n+public abstract class ServiceTest<TOptions extends PerfStressOptions> extends PerfStressTest<TOptions> {\n+    protected static final String CLI_CLIENT_ID = \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2MzExNg=="}, "originalCommit": {"oid": "eb9c6150b09493f5f45eebe6e563b428401edf51"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzQ1ODA1OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjo0NzoyNlrOGOHzFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDo0ODo1NlrOGOQahg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2MTAxMg==", "bodyText": "Is this exception message meant to be the same as the one above?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417461012", "createdAt": "2020-04-29T16:47:26Z", "author": {"login": "alzimmermsft"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -144,7 +153,22 @@\n             if (options.getExecutorService() != null) {\n                 publicClientApplicationBuilder.executorService(options.getExecutorService());\n             }\n+            if (options.isSharedTokenCacheEnabled()) {\n+                try {\n+                    publicClientApplicationBuilder.setTokenCacheAccessAspect(\n+                            new PersistenceTokenCacheAccessAspect(options.getPersistenceSettings()));\n+                } catch (Throwable t) {\n+                    if (sharedTokenCacheCredential) {\n+                        throw logger.logExceptionAsError(new CredentialUnavailableException(\n+                            \"Shared token cache is unavailable in this environment.\", t));\n+                    } else {\n+                        throw logger.logExceptionAsError(new ClientAuthenticationException(\n+                            \"Shared token cache is unavailable in this environment.\", null, t));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYwMjE4Mg==", "bodyText": "They are indeed the same - just wrapping in different exceptions to be handled differently downstream.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417602182", "createdAt": "2020-04-29T20:48:56Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -144,7 +153,22 @@\n             if (options.getExecutorService() != null) {\n                 publicClientApplicationBuilder.executorService(options.getExecutorService());\n             }\n+            if (options.isSharedTokenCacheEnabled()) {\n+                try {\n+                    publicClientApplicationBuilder.setTokenCacheAccessAspect(\n+                            new PersistenceTokenCacheAccessAspect(options.getPersistenceSettings()));\n+                } catch (Throwable t) {\n+                    if (sharedTokenCacheCredential) {\n+                        throw logger.logExceptionAsError(new CredentialUnavailableException(\n+                            \"Shared token cache is unavailable in this environment.\", t));\n+                    } else {\n+                        throw logger.logExceptionAsError(new ClientAuthenticationException(\n+                            \"Shared token cache is unavailable in this environment.\", null, t));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2MTAxMg=="}, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzQ2NzY3OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjo0OTo1M1rOGOH5WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDoxMTowN1rOGOPKsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2MjYxNg==", "bodyText": "Should this be onErrorMap? This logic looks to be more of an error mapping than an alternate resume from an exception given this will propagate an error.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417462616", "createdAt": "2020-04-29T16:49:53Z", "author": {"login": "alzimmermsft"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -380,29 +404,44 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithUsernamePassword(TokenRequestContext request,\n                                                             String username, String password) {\n-        return Mono.fromFuture(publicClientApplication.acquireToken(\n+        return Mono.fromFuture(() -> getPublicClientApplication(false).acquireToken(\n             UserNamePasswordParameters.builder(new HashSet<>(request.getScopes()), username, password.toCharArray())\n                 .build()))\n-            .map(ar -> new MsalToken(ar, options));\n+            .onErrorResume(t -> Mono.error(new ClientAuthenticationException(\"Failed to acquire token with username \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4MTc0NQ==", "bodyText": "Yes - I'm not aware of this operator, changing them now", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417581745", "createdAt": "2020-04-29T20:11:07Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -380,29 +404,44 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithUsernamePassword(TokenRequestContext request,\n                                                             String username, String password) {\n-        return Mono.fromFuture(publicClientApplication.acquireToken(\n+        return Mono.fromFuture(() -> getPublicClientApplication(false).acquireToken(\n             UserNamePasswordParameters.builder(new HashSet<>(request.getScopes()), username, password.toCharArray())\n                 .build()))\n-            .map(ar -> new MsalToken(ar, options));\n+            .onErrorResume(t -> Mono.error(new ClientAuthenticationException(\"Failed to acquire token with username \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2MjYxNg=="}, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzQ3NzIwOnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjo1MjowMlrOGOH_Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMzozMjoxMVrOGPYOyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NDE2Mg==", "bodyText": "Do we ever want this future to be cancellable? If yes, we will need to add a doFinally operator that will check for cancelled to cancel the future.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417464162", "createdAt": "2020-04-29T16:52:02Z", "author": {"login": "alzimmermsft"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -380,29 +404,44 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithUsernamePassword(TokenRequestContext request,\n                                                             String username, String password) {\n-        return Mono.fromFuture(publicClientApplication.acquireToken(\n+        return Mono.fromFuture(() -> getPublicClientApplication(false).acquireToken(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYwMTk3Nw==", "bodyText": "Synced offline - due to the small cost of the getToken() call we will skip the hassle to cancel the future here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417601977", "createdAt": "2020-04-29T20:48:30Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -380,29 +404,44 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithUsernamePassword(TokenRequestContext request,\n                                                             String username, String password) {\n-        return Mono.fromFuture(publicClientApplication.acquireToken(\n+        return Mono.fromFuture(() -> getPublicClientApplication(false).acquireToken(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NDE2Mg=="}, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5NzI5Ng==", "bodyText": "acquireToken here will most likely make an HttpRequest, would this normally be cancellable in other service clients? If so we should probably do the same here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418497296", "createdAt": "2020-05-01T10:47:56Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -380,29 +404,44 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithUsernamePassword(TokenRequestContext request,\n                                                             String username, String password) {\n-        return Mono.fromFuture(publicClientApplication.acquireToken(\n+        return Mono.fromFuture(() -> getPublicClientApplication(false).acquireToken(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NDE2Mg=="}, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3ODgyNQ==", "bodyText": "As discussed, there's nothing much to gain to chain doOnCancel signal to CompletableFuture, as it gets triggered right away and not when subscribed to.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418778825", "createdAt": "2020-05-01T23:32:11Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -380,29 +404,44 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithUsernamePassword(TokenRequestContext request,\n                                                             String username, String password) {\n-        return Mono.fromFuture(publicClientApplication.acquireToken(\n+        return Mono.fromFuture(() -> getPublicClientApplication(false).acquireToken(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NDE2Mg=="}, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzQ3OTI2OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjo1MjozMFrOGOIAsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDoxMjowOVrOGOPM5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NDQ5Ng==", "bodyText": "The defer isn't needed here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417464496", "createdAt": "2020-04-29T16:52:30Z", "author": {"login": "alzimmermsft"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -380,29 +404,44 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithUsernamePassword(TokenRequestContext request,\n                                                             String username, String password) {\n-        return Mono.fromFuture(publicClientApplication.acquireToken(\n+        return Mono.fromFuture(() -> getPublicClientApplication(false).acquireToken(\n             UserNamePasswordParameters.builder(new HashSet<>(request.getScopes()), username, password.toCharArray())\n                 .build()))\n-            .map(ar -> new MsalToken(ar, options));\n+            .onErrorResume(t -> Mono.error(new ClientAuthenticationException(\"Failed to acquire token with username \"\n+                + \"and password\", null, t))).map(ar -> new MsalToken(ar, options));\n     }\n \n     /**\n      * Asynchronously acquire a token from the currently logged in client.\n      *\n      * @param request the details of the token request\n+     * @param account the account used to login to acquire the last token\n      * @return a Publisher that emits an AccessToken\n      */\n-    public Mono<MsalToken> authenticateWithUserRefreshToken(TokenRequestContext request, MsalToken msalToken) {\n+    public Mono<MsalToken> authenticateWithMsalAccount(TokenRequestContext request, IAccount account) {\n         SilentParameters parameters;\n-        if (msalToken.getAccount() != null) {\n-            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), msalToken.getAccount()).build();\n+        SilentParameters forceParameters;\n+        if (account != null) {\n+            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), account).build();\n+            forceParameters = SilentParameters.builder(new HashSet<>(request.getScopes()), account)\n+                    .forceRefresh(true).build();\n         } else {\n             parameters = SilentParameters.builder(new HashSet<>(request.getScopes())).build();\n+            forceParameters = SilentParameters.builder(new HashSet<>(request.getScopes())).forceRefresh(true).build();\n         }\n         return Mono.defer(() -> {\n             try {\n-                return Mono.fromFuture(publicClientApplication.acquireTokenSilently(parameters))\n-                        .map(ar -> new MsalToken(ar, options));\n+                return Mono.fromFuture(getPublicClientApplication(false).acquireTokenSilently(parameters))\n+                        .map(ar -> new MsalToken(ar, options))\n+                        .filter(t -> !t.isExpired())\n+                        .switchIfEmpty(Mono.defer(() -> Mono.fromFuture(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4MjMwOA==", "bodyText": "Removed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417582308", "createdAt": "2020-04-29T20:12:09Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -380,29 +404,44 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithUsernamePassword(TokenRequestContext request,\n                                                             String username, String password) {\n-        return Mono.fromFuture(publicClientApplication.acquireToken(\n+        return Mono.fromFuture(() -> getPublicClientApplication(false).acquireToken(\n             UserNamePasswordParameters.builder(new HashSet<>(request.getScopes()), username, password.toCharArray())\n                 .build()))\n-            .map(ar -> new MsalToken(ar, options));\n+            .onErrorResume(t -> Mono.error(new ClientAuthenticationException(\"Failed to acquire token with username \"\n+                + \"and password\", null, t))).map(ar -> new MsalToken(ar, options));\n     }\n \n     /**\n      * Asynchronously acquire a token from the currently logged in client.\n      *\n      * @param request the details of the token request\n+     * @param account the account used to login to acquire the last token\n      * @return a Publisher that emits an AccessToken\n      */\n-    public Mono<MsalToken> authenticateWithUserRefreshToken(TokenRequestContext request, MsalToken msalToken) {\n+    public Mono<MsalToken> authenticateWithMsalAccount(TokenRequestContext request, IAccount account) {\n         SilentParameters parameters;\n-        if (msalToken.getAccount() != null) {\n-            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), msalToken.getAccount()).build();\n+        SilentParameters forceParameters;\n+        if (account != null) {\n+            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), account).build();\n+            forceParameters = SilentParameters.builder(new HashSet<>(request.getScopes()), account)\n+                    .forceRefresh(true).build();\n         } else {\n             parameters = SilentParameters.builder(new HashSet<>(request.getScopes())).build();\n+            forceParameters = SilentParameters.builder(new HashSet<>(request.getScopes())).forceRefresh(true).build();\n         }\n         return Mono.defer(() -> {\n             try {\n-                return Mono.fromFuture(publicClientApplication.acquireTokenSilently(parameters))\n-                        .map(ar -> new MsalToken(ar, options));\n+                return Mono.fromFuture(getPublicClientApplication(false).acquireTokenSilently(parameters))\n+                        .map(ar -> new MsalToken(ar, options))\n+                        .filter(t -> !t.isExpired())\n+                        .switchIfEmpty(Mono.defer(() -> Mono.fromFuture(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NDQ5Ng=="}, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzQ4MTc1OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjo1MzowNlrOGOICQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDoxMjo0NVrOGOPOPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NDg5OQ==", "bodyText": "Should this use a future supplier as below?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417464899", "createdAt": "2020-04-29T16:53:06Z", "author": {"login": "alzimmermsft"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -380,29 +404,44 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithUsernamePassword(TokenRequestContext request,\n                                                             String username, String password) {\n-        return Mono.fromFuture(publicClientApplication.acquireToken(\n+        return Mono.fromFuture(() -> getPublicClientApplication(false).acquireToken(\n             UserNamePasswordParameters.builder(new HashSet<>(request.getScopes()), username, password.toCharArray())\n                 .build()))\n-            .map(ar -> new MsalToken(ar, options));\n+            .onErrorResume(t -> Mono.error(new ClientAuthenticationException(\"Failed to acquire token with username \"\n+                + \"and password\", null, t))).map(ar -> new MsalToken(ar, options));\n     }\n \n     /**\n      * Asynchronously acquire a token from the currently logged in client.\n      *\n      * @param request the details of the token request\n+     * @param account the account used to login to acquire the last token\n      * @return a Publisher that emits an AccessToken\n      */\n-    public Mono<MsalToken> authenticateWithUserRefreshToken(TokenRequestContext request, MsalToken msalToken) {\n+    public Mono<MsalToken> authenticateWithMsalAccount(TokenRequestContext request, IAccount account) {\n         SilentParameters parameters;\n-        if (msalToken.getAccount() != null) {\n-            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), msalToken.getAccount()).build();\n+        SilentParameters forceParameters;\n+        if (account != null) {\n+            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), account).build();\n+            forceParameters = SilentParameters.builder(new HashSet<>(request.getScopes()), account)\n+                    .forceRefresh(true).build();\n         } else {\n             parameters = SilentParameters.builder(new HashSet<>(request.getScopes())).build();\n+            forceParameters = SilentParameters.builder(new HashSet<>(request.getScopes())).forceRefresh(true).build();\n         }\n         return Mono.defer(() -> {\n             try {\n-                return Mono.fromFuture(publicClientApplication.acquireTokenSilently(parameters))\n-                        .map(ar -> new MsalToken(ar, options));\n+                return Mono.fromFuture(getPublicClientApplication(false).acquireTokenSilently(parameters))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4MjY1NA==", "bodyText": "Yeah we should", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417582654", "createdAt": "2020-04-29T20:12:45Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -380,29 +404,44 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithUsernamePassword(TokenRequestContext request,\n                                                             String username, String password) {\n-        return Mono.fromFuture(publicClientApplication.acquireToken(\n+        return Mono.fromFuture(() -> getPublicClientApplication(false).acquireToken(\n             UserNamePasswordParameters.builder(new HashSet<>(request.getScopes()), username, password.toCharArray())\n                 .build()))\n-            .map(ar -> new MsalToken(ar, options));\n+            .onErrorResume(t -> Mono.error(new ClientAuthenticationException(\"Failed to acquire token with username \"\n+                + \"and password\", null, t))).map(ar -> new MsalToken(ar, options));\n     }\n \n     /**\n      * Asynchronously acquire a token from the currently logged in client.\n      *\n      * @param request the details of the token request\n+     * @param account the account used to login to acquire the last token\n      * @return a Publisher that emits an AccessToken\n      */\n-    public Mono<MsalToken> authenticateWithUserRefreshToken(TokenRequestContext request, MsalToken msalToken) {\n+    public Mono<MsalToken> authenticateWithMsalAccount(TokenRequestContext request, IAccount account) {\n         SilentParameters parameters;\n-        if (msalToken.getAccount() != null) {\n-            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), msalToken.getAccount()).build();\n+        SilentParameters forceParameters;\n+        if (account != null) {\n+            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), account).build();\n+            forceParameters = SilentParameters.builder(new HashSet<>(request.getScopes()), account)\n+                    .forceRefresh(true).build();\n         } else {\n             parameters = SilentParameters.builder(new HashSet<>(request.getScopes())).build();\n+            forceParameters = SilentParameters.builder(new HashSet<>(request.getScopes())).forceRefresh(true).build();\n         }\n         return Mono.defer(() -> {\n             try {\n-                return Mono.fromFuture(publicClientApplication.acquireTokenSilently(parameters))\n-                        .map(ar -> new MsalToken(ar, options));\n+                return Mono.fromFuture(getPublicClientApplication(false).acquireTokenSilently(parameters))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NDg5OQ=="}, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzQ4OTA0OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjo1NDo0OFrOGOIG6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDo0Nzo0OVrOGOQYQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NjA5MQ==", "bodyText": "Does account here have to be non-null? If it can be null, could the if/else block be merged to always pass account?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417466091", "createdAt": "2020-04-29T16:54:48Z", "author": {"login": "alzimmermsft"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -380,29 +404,44 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithUsernamePassword(TokenRequestContext request,\n                                                             String username, String password) {\n-        return Mono.fromFuture(publicClientApplication.acquireToken(\n+        return Mono.fromFuture(() -> getPublicClientApplication(false).acquireToken(\n             UserNamePasswordParameters.builder(new HashSet<>(request.getScopes()), username, password.toCharArray())\n                 .build()))\n-            .map(ar -> new MsalToken(ar, options));\n+            .onErrorResume(t -> Mono.error(new ClientAuthenticationException(\"Failed to acquire token with username \"\n+                + \"and password\", null, t))).map(ar -> new MsalToken(ar, options));\n     }\n \n     /**\n      * Asynchronously acquire a token from the currently logged in client.\n      *\n      * @param request the details of the token request\n+     * @param account the account used to login to acquire the last token\n      * @return a Publisher that emits an AccessToken\n      */\n-    public Mono<MsalToken> authenticateWithUserRefreshToken(TokenRequestContext request, MsalToken msalToken) {\n+    public Mono<MsalToken> authenticateWithMsalAccount(TokenRequestContext request, IAccount account) {\n         SilentParameters parameters;\n-        if (msalToken.getAccount() != null) {\n-            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), msalToken.getAccount()).build();\n+        SilentParameters forceParameters;\n+        if (account != null) {\n+            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), account).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4NjcxMQ==", "bodyText": "Unfortunately in the first builder overload the account is required to be non-null.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417586711", "createdAt": "2020-04-29T20:20:11Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -380,29 +404,44 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithUsernamePassword(TokenRequestContext request,\n                                                             String username, String password) {\n-        return Mono.fromFuture(publicClientApplication.acquireToken(\n+        return Mono.fromFuture(() -> getPublicClientApplication(false).acquireToken(\n             UserNamePasswordParameters.builder(new HashSet<>(request.getScopes()), username, password.toCharArray())\n                 .build()))\n-            .map(ar -> new MsalToken(ar, options));\n+            .onErrorResume(t -> Mono.error(new ClientAuthenticationException(\"Failed to acquire token with username \"\n+                + \"and password\", null, t))).map(ar -> new MsalToken(ar, options));\n     }\n \n     /**\n      * Asynchronously acquire a token from the currently logged in client.\n      *\n      * @param request the details of the token request\n+     * @param account the account used to login to acquire the last token\n      * @return a Publisher that emits an AccessToken\n      */\n-    public Mono<MsalToken> authenticateWithUserRefreshToken(TokenRequestContext request, MsalToken msalToken) {\n+    public Mono<MsalToken> authenticateWithMsalAccount(TokenRequestContext request, IAccount account) {\n         SilentParameters parameters;\n-        if (msalToken.getAccount() != null) {\n-            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), msalToken.getAccount()).build();\n+        SilentParameters forceParameters;\n+        if (account != null) {\n+            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), account).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NjA5MQ=="}, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4Njk1MA==", "bodyText": "But it does seem like I can add account afterwards", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417586950", "createdAt": "2020-04-29T20:20:38Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -380,29 +404,44 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithUsernamePassword(TokenRequestContext request,\n                                                             String username, String password) {\n-        return Mono.fromFuture(publicClientApplication.acquireToken(\n+        return Mono.fromFuture(() -> getPublicClientApplication(false).acquireToken(\n             UserNamePasswordParameters.builder(new HashSet<>(request.getScopes()), username, password.toCharArray())\n                 .build()))\n-            .map(ar -> new MsalToken(ar, options));\n+            .onErrorResume(t -> Mono.error(new ClientAuthenticationException(\"Failed to acquire token with username \"\n+                + \"and password\", null, t))).map(ar -> new MsalToken(ar, options));\n     }\n \n     /**\n      * Asynchronously acquire a token from the currently logged in client.\n      *\n      * @param request the details of the token request\n+     * @param account the account used to login to acquire the last token\n      * @return a Publisher that emits an AccessToken\n      */\n-    public Mono<MsalToken> authenticateWithUserRefreshToken(TokenRequestContext request, MsalToken msalToken) {\n+    public Mono<MsalToken> authenticateWithMsalAccount(TokenRequestContext request, IAccount account) {\n         SilentParameters parameters;\n-        if (msalToken.getAccount() != null) {\n-            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), msalToken.getAccount()).build();\n+        SilentParameters forceParameters;\n+        if (account != null) {\n+            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), account).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NjA5MQ=="}, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYwMTYwMw==", "bodyText": "Reorganized a little bit to avoid creating 2 parameters upfront", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417601603", "createdAt": "2020-04-29T20:47:49Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -380,29 +404,44 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithUsernamePassword(TokenRequestContext request,\n                                                             String username, String password) {\n-        return Mono.fromFuture(publicClientApplication.acquireToken(\n+        return Mono.fromFuture(() -> getPublicClientApplication(false).acquireToken(\n             UserNamePasswordParameters.builder(new HashSet<>(request.getScopes()), username, password.toCharArray())\n                 .build()))\n-            .map(ar -> new MsalToken(ar, options));\n+            .onErrorResume(t -> Mono.error(new ClientAuthenticationException(\"Failed to acquire token with username \"\n+                + \"and password\", null, t))).map(ar -> new MsalToken(ar, options));\n     }\n \n     /**\n      * Asynchronously acquire a token from the currently logged in client.\n      *\n      * @param request the details of the token request\n+     * @param account the account used to login to acquire the last token\n      * @return a Publisher that emits an AccessToken\n      */\n-    public Mono<MsalToken> authenticateWithUserRefreshToken(TokenRequestContext request, MsalToken msalToken) {\n+    public Mono<MsalToken> authenticateWithMsalAccount(TokenRequestContext request, IAccount account) {\n         SilentParameters parameters;\n-        if (msalToken.getAccount() != null) {\n-            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), msalToken.getAccount()).build();\n+        SilentParameters forceParameters;\n+        if (account != null) {\n+            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), account).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NjA5MQ=="}, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzQ5MjkzOnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjo1NTo0M1rOGOIJUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjo1NTo0M1rOGOIJUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NjcwNA==", "bodyText": "Need to use Exceptions.propagate here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417466704", "createdAt": "2020-04-29T16:55:43Z", "author": {"login": "alzimmermsft"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -380,29 +404,44 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithUsernamePassword(TokenRequestContext request,\n                                                             String username, String password) {\n-        return Mono.fromFuture(publicClientApplication.acquireToken(\n+        return Mono.fromFuture(() -> getPublicClientApplication(false).acquireToken(\n             UserNamePasswordParameters.builder(new HashSet<>(request.getScopes()), username, password.toCharArray())\n                 .build()))\n-            .map(ar -> new MsalToken(ar, options));\n+            .onErrorResume(t -> Mono.error(new ClientAuthenticationException(\"Failed to acquire token with username \"\n+                + \"and password\", null, t))).map(ar -> new MsalToken(ar, options));\n     }\n \n     /**\n      * Asynchronously acquire a token from the currently logged in client.\n      *\n      * @param request the details of the token request\n+     * @param account the account used to login to acquire the last token\n      * @return a Publisher that emits an AccessToken\n      */\n-    public Mono<MsalToken> authenticateWithUserRefreshToken(TokenRequestContext request, MsalToken msalToken) {\n+    public Mono<MsalToken> authenticateWithMsalAccount(TokenRequestContext request, IAccount account) {\n         SilentParameters parameters;\n-        if (msalToken.getAccount() != null) {\n-            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), msalToken.getAccount()).build();\n+        SilentParameters forceParameters;\n+        if (account != null) {\n+            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), account).build();\n+            forceParameters = SilentParameters.builder(new HashSet<>(request.getScopes()), account)\n+                    .forceRefresh(true).build();\n         } else {\n             parameters = SilentParameters.builder(new HashSet<>(request.getScopes())).build();\n+            forceParameters = SilentParameters.builder(new HashSet<>(request.getScopes())).forceRefresh(true).build();\n         }\n         return Mono.defer(() -> {\n             try {\n-                return Mono.fromFuture(publicClientApplication.acquireTokenSilently(parameters))\n-                        .map(ar -> new MsalToken(ar, options));\n+                return Mono.fromFuture(getPublicClientApplication(false).acquireTokenSilently(parameters))\n+                        .map(ar -> new MsalToken(ar, options))\n+                        .filter(t -> !t.isExpired())\n+                        .switchIfEmpty(Mono.defer(() -> Mono.fromFuture(() -> {\n+                                try {\n+                                    return getPublicClientApplication(false).acquireTokenSilently(forceParameters);\n+                                } catch (MalformedURLException e) {\n+                                    throw logger.logExceptionAsWarning(new RuntimeException(e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzQ5NjA2OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjo1NjoxOVrOGOILNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjo1NjoxOVrOGOILNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NzE4OA==", "bodyText": "onErrorMap?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417467188", "createdAt": "2020-04-29T16:56:19Z", "author": {"login": "alzimmermsft"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -425,8 +464,9 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n             DeviceCodeFlowParameters parameters = DeviceCodeFlowParameters.builder(new HashSet<>(request.getScopes()),\n                 dc -> deviceCodeConsumer.accept(new DeviceCodeInfo(dc.userCode(), dc.deviceCode(),\n                     dc.verificationUri(), OffsetDateTime.now().plusSeconds(dc.expiresIn()), dc.message()))).build();\n-            return publicClientApplication.acquireToken(parameters);\n-        }).map(ar -> new MsalToken(ar, options));\n+            return getPublicClientApplication(false).acquireToken(parameters);\n+        }).onErrorResume(t -> Mono.error(new ClientAuthenticationException(\"Failed to acquire token with device code\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzQ5NjY2OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjo1NjozMFrOGOILmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjo1NjozMFrOGOILmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NzI4OQ==", "bodyText": "onErrorMap?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417467289", "createdAt": "2020-04-29T16:56:30Z", "author": {"login": "alzimmermsft"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -439,11 +479,12 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithAuthorizationCode(TokenRequestContext request, String authorizationCode,\n                                                              URI redirectUrl) {\n-        return Mono.fromFuture(() -> publicClientApplication.acquireToken(\n+        return Mono.fromFuture(() -> getPublicClientApplication(false).acquireToken(\n             AuthorizationCodeParameters.builder(authorizationCode, redirectUrl)\n                 .scopes(new HashSet<>(request.getScopes()))\n                 .build()))\n-            .map(ar -> new MsalToken(ar, options));\n+            .onErrorResume(t -> Mono.error(new ClientAuthenticationException(\"Failed to acquire token with \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzQ5NzkyOnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjo1Njo0OFrOGOIMZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjo1Njo0OFrOGOIMZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NzQ5NA==", "bodyText": "onErrorMap?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417467494", "createdAt": "2020-04-29T16:56:48Z", "author": {"login": "alzimmermsft"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -490,6 +531,56 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n             });\n     }\n \n+    /**\n+     * Gets token from shared token cache\n+     * */\n+    public Mono<AccessToken> authenticateWithSharedTokenCache(TokenRequestContext request, String username) {\n+        // find if the Public Client app with the requested username exists\n+        return Mono.fromFuture(() -> getPublicClientApplication(true).getAccounts())\n+                .onErrorResume(t -> Mono.error(new CredentialUnavailableException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ2NTI5OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxMzoyOVrOGO4rnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxMzoyOVrOGO4rnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2MTkxNg==", "bodyText": "This logic here and below was updated before. Please get the one from master.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418261916", "createdAt": "2020-04-30T20:13:29Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -490,6 +530,56 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n             });\n     }\n \n+    /**\n+     * Gets token from shared token cache\n+     * */\n+    public Mono<AccessToken> authenticateWithSharedTokenCache(TokenRequestContext request, String username) {\n+        // find if the Public Client app with the requested username exists\n+        return Mono.fromFuture(() -> getPublicClientApplication(true).getAccounts())\n+                .onErrorMap(t -> new CredentialUnavailableException(\n+                        \"Cannot get accounts from token cache. Error: \" + t.getMessage(), t))\n+                .flatMap(set -> {\n+                    IAccount requestedAccount;\n+                    Map<String, IAccount> accounts = new HashMap<>(); // home account id -> account\n+\n+                    for (IAccount cached : set) {\n+                        if (username == null || username.equals(cached.username())) {\n+                            if (!accounts.containsKey(cached.homeAccountId())) { // only put the first one\n+                                accounts.put(cached.homeAccountId(), cached);\n+                            }\n+                        }\n+                    }\n+\n+                    if (accounts.size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc8c1b60735420762714373444870c50eaed310"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ2ODE3OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxNDoxOFrOGO4taA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToxNzo1NVrOGO6rzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2MjM3Ng==", "bodyText": "Error messages and checks were changed here and below.  get the ones from master.\nThis one is PII exposure.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418262376", "createdAt": "2020-04-30T20:14:18Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -490,6 +530,56 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n             });\n     }\n \n+    /**\n+     * Gets token from shared token cache\n+     * */\n+    public Mono<AccessToken> authenticateWithSharedTokenCache(TokenRequestContext request, String username) {\n+        // find if the Public Client app with the requested username exists\n+        return Mono.fromFuture(() -> getPublicClientApplication(true).getAccounts())\n+                .onErrorMap(t -> new CredentialUnavailableException(\n+                        \"Cannot get accounts from token cache. Error: \" + t.getMessage(), t))\n+                .flatMap(set -> {\n+                    IAccount requestedAccount;\n+                    Map<String, IAccount> accounts = new HashMap<>(); // home account id -> account\n+\n+                    for (IAccount cached : set) {\n+                        if (username == null || username.equals(cached.username())) {\n+                            if (!accounts.containsKey(cached.homeAccountId())) { // only put the first one\n+                                accounts.put(cached.homeAccountId(), cached);\n+                            }\n+                        }\n+                    }\n+\n+                    if (accounts.size() == 0) {\n+                        if (username == null) {\n+                            return Mono.error(new CredentialUnavailableException(\"No accounts were discovered in the \"\n+                                    + \"shared token cache. To fix, authenticate through tooling supporting azure \"\n+                                    + \"developer sign on.\"));\n+                        } else {\n+                            return Mono.error(new CredentialUnavailableException(String.format(\"User account '%s' was \"\n+                                    + \"not found in the shared token cache. Discovered Accounts: [ '%s' ]\", username,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc8c1b60735420762714373444870c50eaed310"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NDczMw==", "bodyText": "Thanks! I lost the update during the merge.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418294733", "createdAt": "2020-04-30T21:17:55Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -490,6 +530,56 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n             });\n     }\n \n+    /**\n+     * Gets token from shared token cache\n+     * */\n+    public Mono<AccessToken> authenticateWithSharedTokenCache(TokenRequestContext request, String username) {\n+        // find if the Public Client app with the requested username exists\n+        return Mono.fromFuture(() -> getPublicClientApplication(true).getAccounts())\n+                .onErrorMap(t -> new CredentialUnavailableException(\n+                        \"Cannot get accounts from token cache. Error: \" + t.getMessage(), t))\n+                .flatMap(set -> {\n+                    IAccount requestedAccount;\n+                    Map<String, IAccount> accounts = new HashMap<>(); // home account id -> account\n+\n+                    for (IAccount cached : set) {\n+                        if (username == null || username.equals(cached.username())) {\n+                            if (!accounts.containsKey(cached.homeAccountId())) { // only put the first one\n+                                accounts.put(cached.homeAccountId(), cached);\n+                            }\n+                        }\n+                    }\n+\n+                    if (accounts.size() == 0) {\n+                        if (username == null) {\n+                            return Mono.error(new CredentialUnavailableException(\"No accounts were discovered in the \"\n+                                    + \"shared token cache. To fix, authenticate through tooling supporting azure \"\n+                                    + \"developer sign on.\"));\n+                        } else {\n+                            return Mono.error(new CredentialUnavailableException(String.format(\"User account '%s' was \"\n+                                    + \"not found in the shared token cache. Discovered Accounts: [ '%s' ]\", username,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2MjM3Ng=="}, "originalCommit": {"oid": "6cc8c1b60735420762714373444870c50eaed310"}, "originalPosition": 236}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzA1MTA1OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DeviceCodeCredential.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzo1NToxOVrOGO-OwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDowNDowMlrOGO-YHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1MjgzMg==", "bodyText": "Would you want this to resume on an error and return an empty Mono? I'd expect the error to be propagated downstream and allow downstream subscribers to do with that error what they will. In  globalSetupAsync this is call is chained with .then(), so it would hide the error.\nThere are similar instances in other credentials below.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418352832", "createdAt": "2020-04-30T23:55:19Z", "author": {"login": "conniey"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DeviceCodeCredential.java", "diffHunk": "@@ -51,7 +51,7 @@\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n         return Mono.defer(() -> {\n             if (cachedToken.get() != null) {\n-                return identityClient.authenticateWithUserRefreshToken(request, cachedToken.get())\n+                return identityClient.authenticateWithMsalAccount(request, cachedToken.get().getAccount())\n                     .onErrorResume(t -> Mono.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc8c1b60735420762714373444870c50eaed310"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1NTIyOA==", "bodyText": "Yeah it should be probably be handled downstream - it's out of the scope of this PR but I can see if it can be done with minimal footprint", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418355228", "createdAt": "2020-05-01T00:04:02Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DeviceCodeCredential.java", "diffHunk": "@@ -51,7 +51,7 @@\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n         return Mono.defer(() -> {\n             if (cachedToken.get() != null) {\n-                return identityClient.authenticateWithUserRefreshToken(request, cachedToken.get())\n+                return identityClient.authenticateWithMsalAccount(request, cachedToken.get().getAccount())\n                     .onErrorResume(t -> Mono.empty());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1MjgzMg=="}, "originalCommit": {"oid": "6cc8c1b60735420762714373444870c50eaed310"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzA2NTg0OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDowMzozNVrOGO-Xjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwODoyMjowM1rOGPEtqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1NTA4Nw==", "bodyText": "Since you're using futures, it may be easier to follow using:\nvar completableFuture = new CompletableFuture<MsalToken>();\ncompletableFuture.completeExceptionally(logger.logExceptionAsError(Exceptions.propagate(e));\nreturn completableFuture;", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418355087", "createdAt": "2020-05-01T00:03:35Z", "author": {"login": "conniey"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -380,33 +403,47 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithUsernamePassword(TokenRequestContext request,\n                                                             String username, String password) {\n-        return Mono.fromFuture(publicClientApplication.acquireToken(\n+        return Mono.fromFuture(() -> getPublicClientApplication(false).acquireToken(\n             UserNamePasswordParameters.builder(new HashSet<>(request.getScopes()), username, password.toCharArray())\n                 .build()))\n-            .map(ar -> new MsalToken(ar, options));\n+            .onErrorMap(t -> new ClientAuthenticationException(\"Failed to acquire token with username and password\",\n+                null, t)).map(ar -> new MsalToken(ar, options));\n     }\n \n     /**\n      * Asynchronously acquire a token from the currently logged in client.\n      *\n      * @param request the details of the token request\n+     * @param account the account used to login to acquire the last token\n      * @return a Publisher that emits an AccessToken\n      */\n-    public Mono<MsalToken> authenticateWithUserRefreshToken(TokenRequestContext request, MsalToken msalToken) {\n-        SilentParameters parameters;\n-        if (msalToken.getAccount() != null) {\n-            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), msalToken.getAccount()).build();\n-        } else {\n-            parameters = SilentParameters.builder(new HashSet<>(request.getScopes())).build();\n-        }\n-        return Mono.defer(() -> {\n+    public Mono<MsalToken> authenticateWithMsalAccount(TokenRequestContext request, IAccount account) {\n+        return Mono.defer(() -> Mono.fromFuture(() -> {\n+            SilentParameters.SilentParametersBuilder parametersBuilder = SilentParameters.builder(\n+                new HashSet<>(request.getScopes()));\n+            if (account != null) {\n+                parametersBuilder = parametersBuilder.account(account);\n+            }\n             try {\n-                return Mono.fromFuture(publicClientApplication.acquireTokenSilently(parameters))\n-                        .map(ar -> new MsalToken(ar, options));\n+                return getPublicClientApplication(false)\n+                    .acquireTokenSilently(parametersBuilder.build());\n             } catch (MalformedURLException e) {\n-                return Mono.error(e);\n+                throw logger.logExceptionAsError(Exceptions.propagate(e));\n             }\n-        });\n+        }).map(ar -> new MsalToken(ar, options))\n+        .filter(t -> !t.isExpired())\n+        .switchIfEmpty(Mono.fromFuture(() -> {\n+            SilentParameters.SilentParametersBuilder forceParametersBuilder = SilentParameters.builder(\n+                new HashSet<>(request.getScopes())).forceRefresh(true);\n+            if (account != null) {\n+                forceParametersBuilder = forceParametersBuilder.account(account);\n+            }\n+            try {\n+                return getPublicClientApplication(false).acquireTokenSilently(forceParametersBuilder.build());\n+            } catch (MalformedURLException e) {\n+                throw logger.logExceptionAsError(Exceptions.propagate(e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5c466269fe95ea6a729b15cca402cef4fbe0c49"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ1OTA1MQ==", "bodyText": "Thanks Connie for the tip but in this code the exception is thrown from creating the future, not from executing it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418459051", "createdAt": "2020-05-01T08:22:03Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -380,33 +403,47 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithUsernamePassword(TokenRequestContext request,\n                                                             String username, String password) {\n-        return Mono.fromFuture(publicClientApplication.acquireToken(\n+        return Mono.fromFuture(() -> getPublicClientApplication(false).acquireToken(\n             UserNamePasswordParameters.builder(new HashSet<>(request.getScopes()), username, password.toCharArray())\n                 .build()))\n-            .map(ar -> new MsalToken(ar, options));\n+            .onErrorMap(t -> new ClientAuthenticationException(\"Failed to acquire token with username and password\",\n+                null, t)).map(ar -> new MsalToken(ar, options));\n     }\n \n     /**\n      * Asynchronously acquire a token from the currently logged in client.\n      *\n      * @param request the details of the token request\n+     * @param account the account used to login to acquire the last token\n      * @return a Publisher that emits an AccessToken\n      */\n-    public Mono<MsalToken> authenticateWithUserRefreshToken(TokenRequestContext request, MsalToken msalToken) {\n-        SilentParameters parameters;\n-        if (msalToken.getAccount() != null) {\n-            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), msalToken.getAccount()).build();\n-        } else {\n-            parameters = SilentParameters.builder(new HashSet<>(request.getScopes())).build();\n-        }\n-        return Mono.defer(() -> {\n+    public Mono<MsalToken> authenticateWithMsalAccount(TokenRequestContext request, IAccount account) {\n+        return Mono.defer(() -> Mono.fromFuture(() -> {\n+            SilentParameters.SilentParametersBuilder parametersBuilder = SilentParameters.builder(\n+                new HashSet<>(request.getScopes()));\n+            if (account != null) {\n+                parametersBuilder = parametersBuilder.account(account);\n+            }\n             try {\n-                return Mono.fromFuture(publicClientApplication.acquireTokenSilently(parameters))\n-                        .map(ar -> new MsalToken(ar, options));\n+                return getPublicClientApplication(false)\n+                    .acquireTokenSilently(parametersBuilder.build());\n             } catch (MalformedURLException e) {\n-                return Mono.error(e);\n+                throw logger.logExceptionAsError(Exceptions.propagate(e));\n             }\n-        });\n+        }).map(ar -> new MsalToken(ar, options))\n+        .filter(t -> !t.isExpired())\n+        .switchIfEmpty(Mono.fromFuture(() -> {\n+            SilentParameters.SilentParametersBuilder forceParametersBuilder = SilentParameters.builder(\n+                new HashSet<>(request.getScopes())).forceRefresh(true);\n+            if (account != null) {\n+                forceParametersBuilder = forceParametersBuilder.account(account);\n+            }\n+            try {\n+                return getPublicClientApplication(false).acquireTokenSilently(forceParametersBuilder.build());\n+            } catch (MalformedURLException e) {\n+                throw logger.logExceptionAsError(Exceptions.propagate(e));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1NTA4Nw=="}, "originalCommit": {"oid": "d5c466269fe95ea6a729b15cca402cef4fbe0c49"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzA3MTM1OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDowNjozN1rOGO-azw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDowNjozN1rOGO-azw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1NTkxOQ==", "bodyText": "nit: set.isEmpty()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418355919", "createdAt": "2020-05-01T00:06:37Z", "author": {"login": "conniey"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -490,6 +529,56 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n             });\n     }\n \n+    /**\n+     * Gets token from shared token cache\n+     * */\n+    public Mono<AccessToken> authenticateWithSharedTokenCache(TokenRequestContext request, String username) {\n+        // find if the Public Client app with the requested username exists\n+        return Mono.fromFuture(() -> getPublicClientApplication(true).getAccounts())\n+                .onErrorMap(t -> new CredentialUnavailableException(\n+                        \"Cannot get accounts from token cache. Error: \" + t.getMessage(), t))\n+                .flatMap(set -> {\n+                    IAccount requestedAccount;\n+                    Map<String, IAccount> accounts = new HashMap<>(); // home account id -> account\n+\n+                    for (IAccount cached : set) {\n+                        if (username == null || username.equals(cached.username())) {\n+                            if (!accounts.containsKey(cached.homeAccountId())) { // only put the first one\n+                                accounts.put(cached.homeAccountId(), cached);\n+                            }\n+                        }\n+                    }\n+\n+                    if (set.size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5c466269fe95ea6a729b15cca402cef4fbe0c49"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzA3MjI5OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDowNzoxNFrOGO-bXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwODoyMzowMlrOGPEulA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1NjA2Mw==", "bodyText": "Should we use return FluxUtils.monoError(logger, new ....)? Or is it preferable not to log it", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418356063", "createdAt": "2020-05-01T00:07:14Z", "author": {"login": "conniey"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -490,6 +529,56 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n             });\n     }\n \n+    /**\n+     * Gets token from shared token cache\n+     * */\n+    public Mono<AccessToken> authenticateWithSharedTokenCache(TokenRequestContext request, String username) {\n+        // find if the Public Client app with the requested username exists\n+        return Mono.fromFuture(() -> getPublicClientApplication(true).getAccounts())\n+                .onErrorMap(t -> new CredentialUnavailableException(\n+                        \"Cannot get accounts from token cache. Error: \" + t.getMessage(), t))\n+                .flatMap(set -> {\n+                    IAccount requestedAccount;\n+                    Map<String, IAccount> accounts = new HashMap<>(); // home account id -> account\n+\n+                    for (IAccount cached : set) {\n+                        if (username == null || username.equals(cached.username())) {\n+                            if (!accounts.containsKey(cached.homeAccountId())) { // only put the first one\n+                                accounts.put(cached.homeAccountId(), cached);\n+                            }\n+                        }\n+                    }\n+\n+                    if (set.size() == 0) {\n+                        return Mono.error(new CredentialUnavailableException(\"SharedTokenCacheCredential \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5c466269fe95ea6a729b15cca402cef4fbe0c49"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ1OTI4NA==", "bodyText": "We talked to Jonathan and since this IdentityClient isn't used directly by customers and we have downstream credentials to do the logging - we shouldn't log here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418459284", "createdAt": "2020-05-01T08:23:02Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -490,6 +529,56 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n             });\n     }\n \n+    /**\n+     * Gets token from shared token cache\n+     * */\n+    public Mono<AccessToken> authenticateWithSharedTokenCache(TokenRequestContext request, String username) {\n+        // find if the Public Client app with the requested username exists\n+        return Mono.fromFuture(() -> getPublicClientApplication(true).getAccounts())\n+                .onErrorMap(t -> new CredentialUnavailableException(\n+                        \"Cannot get accounts from token cache. Error: \" + t.getMessage(), t))\n+                .flatMap(set -> {\n+                    IAccount requestedAccount;\n+                    Map<String, IAccount> accounts = new HashMap<>(); // home account id -> account\n+\n+                    for (IAccount cached : set) {\n+                        if (username == null || username.equals(cached.username())) {\n+                            if (!accounts.containsKey(cached.homeAccountId())) { // only put the first one\n+                                accounts.put(cached.homeAccountId(), cached);\n+                            }\n+                        }\n+                    }\n+\n+                    if (set.size() == 0) {\n+                        return Mono.error(new CredentialUnavailableException(\"SharedTokenCacheCredential \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1NjA2Mw=="}, "originalCommit": {"oid": "d5c466269fe95ea6a729b15cca402cef4fbe0c49"}, "originalPosition": 224}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzA3MzMzOnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDowNzo0NlrOGO-b9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDowNzo0NlrOGO-b9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1NjIxMw==", "bodyText": "nit: Same with .isEmpty() here. But I won't lose sleep. :)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418356213", "createdAt": "2020-05-01T00:07:46Z", "author": {"login": "conniey"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -490,6 +529,56 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n             });\n     }\n \n+    /**\n+     * Gets token from shared token cache\n+     * */\n+    public Mono<AccessToken> authenticateWithSharedTokenCache(TokenRequestContext request, String username) {\n+        // find if the Public Client app with the requested username exists\n+        return Mono.fromFuture(() -> getPublicClientApplication(true).getAccounts())\n+                .onErrorMap(t -> new CredentialUnavailableException(\n+                        \"Cannot get accounts from token cache. Error: \" + t.getMessage(), t))\n+                .flatMap(set -> {\n+                    IAccount requestedAccount;\n+                    Map<String, IAccount> accounts = new HashMap<>(); // home account id -> account\n+\n+                    for (IAccount cached : set) {\n+                        if (username == null || username.equals(cached.username())) {\n+                            if (!accounts.containsKey(cached.homeAccountId())) { // only put the first one\n+                                accounts.put(cached.homeAccountId(), cached);\n+                            }\n+                        }\n+                    }\n+\n+                    if (set.size() == 0) {\n+                        return Mono.error(new CredentialUnavailableException(\"SharedTokenCacheCredential \"\n+                                + \"authentication unavailable. No accounts were found in the cache.\"));\n+                    }\n+\n+                    if (CoreUtils.isNullOrEmpty(username)) {\n+                        return Mono.error(new CredentialUnavailableException(\"SharedTokenCacheCredential \"\n+                                + \"authentication unavailable. Multiple accounts were found in the cache. Use \"\n+                                + \"username and tenant id to disambiguate.\"));\n+                    }\n+\n+                    if (accounts.size() != 1) {\n+                        if (accounts.size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5c466269fe95ea6a729b15cca402cef4fbe0c49"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzUyNjQwOnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNToyODo0M1rOGPCf9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNToyODo0M1rOGPCf9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyMjc3Mg==", "bodyText": "providedfor -> provided for", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418422772", "createdAt": "2020-05-01T05:28:43Z", "author": {"login": "conniey"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -109,8 +113,14 @@\n         this.tenantId = tenantId;\n         this.clientId = clientId;\n         this.options = options;\n-        if (clientId == null) {\n-            this.publicClientApplication = null;\n+    }\n+\n+    private PublicClientApplication getPublicClientApplication(boolean sharedTokenCacheCredential) {\n+        if (publicClientApplication != null) {\n+            return publicClientApplication;\n+        } else if (clientId == null) {\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\n+                \"A non-null value for client ID must be providedfor user authentication.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5c466269fe95ea6a729b15cca402cef4fbe0c49"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzUzMjE5OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/test/java/com/azure/identity/implementation/IdentityClientIntegrationTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTozMjo1N1rOGPCjYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwODoyNzowM1rOGPEyiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyMzY1MA==", "bodyText": "These tests could be using StepVerifier rather than block.\n// Arrange\nvar context = new TokenRequestContext().addScopes(\"https://vault.azure.net/.default\");\n\n// Act & Assert\nStepVerifier.create(client.authenticateWithMsalAccount(context, token.getAccount()))\n    .assertNext(token -> {\n        assertNotNull(token.getToken());\n        assertNotNull(token.getExpiresAt());\n    })\n    .verifyComplete();", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418423650", "createdAt": "2020-05-01T05:32:57Z", "author": {"login": "conniey"}, "path": "sdk/identity/azure-identity/src/test/java/com/azure/identity/implementation/IdentityClientIntegrationTests.java", "diffHunk": "@@ -51,7 +51,7 @@ public void deviceCodeCanGetToken() {\n         Assert.assertNotNull(token.getToken());\n         Assert.assertNotNull(token.getExpiresAt());\n         Assert.assertFalse(token.isExpired());\n-        token = client.authenticateWithUserRefreshToken(new TokenRequestContext().addScopes(\"https://vault.azure.net/.default\"), token).block();\n+        token = client.authenticateWithMsalAccount(new TokenRequestContext().addScopes(\"https://vault.azure.net/.default\"), token.getAccount()).block();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5c466269fe95ea6a729b15cca402cef4fbe0c49"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ2MDI5Ng==", "bodyText": "This is out of scope - if this PR stays open next week I can fix these. But for now I'm planning to get some sleep and enjoy my day off \ud83d\ude38", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418460296", "createdAt": "2020-05-01T08:27:03Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/test/java/com/azure/identity/implementation/IdentityClientIntegrationTests.java", "diffHunk": "@@ -51,7 +51,7 @@ public void deviceCodeCanGetToken() {\n         Assert.assertNotNull(token.getToken());\n         Assert.assertNotNull(token.getExpiresAt());\n         Assert.assertFalse(token.isExpired());\n-        token = client.authenticateWithUserRefreshToken(new TokenRequestContext().addScopes(\"https://vault.azure.net/.default\"), token).block();\n+        token = client.authenticateWithMsalAccount(new TokenRequestContext().addScopes(\"https://vault.azure.net/.default\"), token.getAccount()).block();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyMzY1MA=="}, "originalCommit": {"oid": "d5c466269fe95ea6a729b15cca402cef4fbe0c49"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzk4NzcwOnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DeviceCodeCredentialBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDoyNjo1M1rOGPGuqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMzoxOTo0N1rOGPYFOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5MjA3Mg==", "bodyText": "In .NET and python we named this option EnablePersistentCache.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418492072", "createdAt": "2020-05-01T10:26:53Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DeviceCodeCredentialBuilder.java", "diffHunk": "@@ -29,6 +29,31 @@ public DeviceCodeCredentialBuilder challengeConsumer(\n         return this;\n     }\n \n+    /**\n+     * Sets whether to use an unprotected file specified by <code>cacheFileLocation()</code> instead of\n+     * Gnome keyring on Linux. This is false by default.\n+     *\n+     * @param allowUnencryptedCache whether to use an unprotected file for cache storage.\n+     *\n+     * @return An updated instance of this builder with the unprotected token cache setting set as specified.\n+     */\n+    public DeviceCodeCredentialBuilder allowUnencryptedCache(boolean allowUnencryptedCache) {\n+        this.identityClientOptions.allowUnencryptedCache(allowUnencryptedCache);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets whether to enable using the shared token cache. This is disabled by default.\n+     *\n+     * @param enabled whether to enabled using the shared token cache.\n+     *\n+     * @return An updated instance of this builder with if the shared token cache enabled specified.\n+     */\n+    public DeviceCodeCredentialBuilder enableSharedTokenCache(boolean enabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bf3f76bb45b910ff5bd7bdca807110665c1df44"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NjM3Ng==", "bodyText": "updated", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418776376", "createdAt": "2020-05-01T23:19:47Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DeviceCodeCredentialBuilder.java", "diffHunk": "@@ -29,6 +29,31 @@ public DeviceCodeCredentialBuilder challengeConsumer(\n         return this;\n     }\n \n+    /**\n+     * Sets whether to use an unprotected file specified by <code>cacheFileLocation()</code> instead of\n+     * Gnome keyring on Linux. This is false by default.\n+     *\n+     * @param allowUnencryptedCache whether to use an unprotected file for cache storage.\n+     *\n+     * @return An updated instance of this builder with the unprotected token cache setting set as specified.\n+     */\n+    public DeviceCodeCredentialBuilder allowUnencryptedCache(boolean allowUnencryptedCache) {\n+        this.identityClientOptions.allowUnencryptedCache(allowUnencryptedCache);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets whether to enable using the shared token cache. This is disabled by default.\n+     *\n+     * @param enabled whether to enabled using the shared token cache.\n+     *\n+     * @return An updated instance of this builder with if the shared token cache enabled specified.\n+     */\n+    public DeviceCodeCredentialBuilder enableSharedTokenCache(boolean enabled) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5MjA3Mg=="}, "originalCommit": {"oid": "0bf3f76bb45b910ff5bd7bdca807110665c1df44"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzk4Nzk2OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/InteractiveBrowserCredentialBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDoyNzowOFrOGPGu2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMzoxOTo1MlrOGPYFTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5MjEyMw==", "bodyText": "Same comment about EnablePersistentCache", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418492123", "createdAt": "2020-05-01T10:27:08Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/InteractiveBrowserCredentialBuilder.java", "diffHunk": "@@ -27,6 +27,31 @@ public InteractiveBrowserCredentialBuilder port(int port) {\n         return this;\n     }\n \n+    /**\n+     * Sets whether to use an unprotected file specified by <code>cacheFileLocation()</code> instead of\n+     * Gnome keyring on Linux. This is false by default.\n+     *\n+     * @param allowUnencryptedCache whether to use an unprotected file for cache storage.\n+     *\n+     * @return An updated instance of this builder with the unprotected token cache setting set as specified.\n+     */\n+    public InteractiveBrowserCredentialBuilder allowUnencryptedCache(boolean allowUnencryptedCache) {\n+        this.identityClientOptions.allowUnencryptedCache(allowUnencryptedCache);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets whether to enable using the shared token cache. This is disabled by default.\n+     *\n+     * @param enabled whether to enabled using the shared token cache.\n+     *\n+     * @return An updated instance of this builder with if the shared token cache enabled specified.\n+     */\n+    public InteractiveBrowserCredentialBuilder enableSharedTokenCache(boolean enabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bf3f76bb45b910ff5bd7bdca807110665c1df44"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NjM5Nw==", "bodyText": "updated", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418776397", "createdAt": "2020-05-01T23:19:52Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/InteractiveBrowserCredentialBuilder.java", "diffHunk": "@@ -27,6 +27,31 @@ public InteractiveBrowserCredentialBuilder port(int port) {\n         return this;\n     }\n \n+    /**\n+     * Sets whether to use an unprotected file specified by <code>cacheFileLocation()</code> instead of\n+     * Gnome keyring on Linux. This is false by default.\n+     *\n+     * @param allowUnencryptedCache whether to use an unprotected file for cache storage.\n+     *\n+     * @return An updated instance of this builder with the unprotected token cache setting set as specified.\n+     */\n+    public InteractiveBrowserCredentialBuilder allowUnencryptedCache(boolean allowUnencryptedCache) {\n+        this.identityClientOptions.allowUnencryptedCache(allowUnencryptedCache);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets whether to enable using the shared token cache. This is disabled by default.\n+     *\n+     * @param enabled whether to enabled using the shared token cache.\n+     *\n+     * @return An updated instance of this builder with if the shared token cache enabled specified.\n+     */\n+    public InteractiveBrowserCredentialBuilder enableSharedTokenCache(boolean enabled) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5MjEyMw=="}, "originalCommit": {"oid": "0bf3f76bb45b910ff5bd7bdca807110665c1df44"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDAxMDAzOnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDo0MDoxOFrOGPG7wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwNjoyNzozNVrOGPg3vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5NTQyNg==", "bodyText": "This method is called from numerous methods on the IdentityClient some which pass sharedTokenCacheCredential as true and some as false. Whichever calls this method first will cache the publicClientApplication and then all subsequent calls will effectively ignore the sharedTokenCacheCredential parameter. I'm guessing this doesn't matter in practice because certain credentials only call certain methods, and each credential has it's own instance of IdentityClient, and IdentityClient is internal. However, this makes the functionality of this class and the classes that use it interdependent in a non-obvious way which could easily be overlooked if we try to make optimizations like sharing an instance of IdentityClient. I think we should consider refactoring this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418495426", "createdAt": "2020-05-01T10:40:18Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -109,8 +113,14 @@\n         this.tenantId = tenantId;\n         this.clientId = clientId;\n         this.options = options;\n-        if (clientId == null) {\n-            this.publicClientApplication = null;\n+    }\n+\n+    private PublicClientApplication getPublicClientApplication(boolean sharedTokenCacheCredential) {\n+        if (publicClientApplication != null) {\n+            return publicClientApplication;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bf3f76bb45b910ff5bd7bdca807110665c1df44"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3ODUxMg==", "bodyText": "Opened an issue #10675", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418778512", "createdAt": "2020-05-01T23:30:43Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -109,8 +113,14 @@\n         this.tenantId = tenantId;\n         this.clientId = clientId;\n         this.options = options;\n-        if (clientId == null) {\n-            this.publicClientApplication = null;\n+    }\n+\n+    private PublicClientApplication getPublicClientApplication(boolean sharedTokenCacheCredential) {\n+        if (publicClientApplication != null) {\n+            return publicClientApplication;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5NTQyNg=="}, "originalCommit": {"oid": "0bf3f76bb45b910ff5bd7bdca807110665c1df44"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkyMDM4Mw==", "bodyText": "This method is only called once per IdentityClient and there's exactly one IdentityClient instance per credential.\nYes it can have nicer designs, as something we can do for #10675", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418920383", "createdAt": "2020-05-02T06:27:35Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -109,8 +113,14 @@\n         this.tenantId = tenantId;\n         this.clientId = clientId;\n         this.options = options;\n-        if (clientId == null) {\n-            this.publicClientApplication = null;\n+    }\n+\n+    private PublicClientApplication getPublicClientApplication(boolean sharedTokenCacheCredential) {\n+        if (publicClientApplication != null) {\n+            return publicClientApplication;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5NTQyNg=="}, "originalCommit": {"oid": "0bf3f76bb45b910ff5bd7bdca807110665c1df44"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDA0MDI2OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDo1OTowNlrOGPHNPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwNjoyNjo0OVrOGPg3iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5OTkwMg==", "bodyText": "This is not thread safe. If two clients using the same credential call get token at the same time it's possible that multiple threads attempt to initialize publicClientApplication at the same time. In this case they might each get different instances and any tokens cached on any instances other than the final one will be lost.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418499902", "createdAt": "2020-05-01T10:59:06Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -144,7 +154,21 @@\n             if (options.getExecutorService() != null) {\n                 publicClientApplicationBuilder.executorService(options.getExecutorService());\n             }\n+            if (options.isSharedTokenCacheEnabled()) {\n+                try {\n+                    publicClientApplicationBuilder.setTokenCacheAccessAspect(\n+                            new PersistenceTokenCacheAccessAspect(options.getPersistenceSettings()));\n+                } catch (Throwable t) {\n+                    String message = \"Shared token cache is unavailable in this environment.\";\n+                    if (sharedTokenCacheCredential) {\n+                        throw logger.logExceptionAsError(new CredentialUnavailableException(message, t));\n+                    } else {\n+                        throw logger.logExceptionAsError(new ClientAuthenticationException(message, null, t));\n+                    }\n+                }\n+            }\n             this.publicClientApplication = publicClientApplicationBuilder.build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bf3f76bb45b910ff5bd7bdca807110665c1df44"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3ODUwNA==", "bodyText": "Opened an issue #10675", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418778504", "createdAt": "2020-05-01T23:30:40Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -144,7 +154,21 @@\n             if (options.getExecutorService() != null) {\n                 publicClientApplicationBuilder.executorService(options.getExecutorService());\n             }\n+            if (options.isSharedTokenCacheEnabled()) {\n+                try {\n+                    publicClientApplicationBuilder.setTokenCacheAccessAspect(\n+                            new PersistenceTokenCacheAccessAspect(options.getPersistenceSettings()));\n+                } catch (Throwable t) {\n+                    String message = \"Shared token cache is unavailable in this environment.\";\n+                    if (sharedTokenCacheCredential) {\n+                        throw logger.logExceptionAsError(new CredentialUnavailableException(message, t));\n+                    } else {\n+                        throw logger.logExceptionAsError(new ClientAuthenticationException(message, null, t));\n+                    }\n+                }\n+            }\n             this.publicClientApplication = publicClientApplicationBuilder.build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5OTkwMg=="}, "originalCommit": {"oid": "0bf3f76bb45b910ff5bd7bdca807110665c1df44"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkyMDMyOQ==", "bodyText": "Resolving as separate issues opened", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418920329", "createdAt": "2020-05-02T06:26:49Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -144,7 +154,21 @@\n             if (options.getExecutorService() != null) {\n                 publicClientApplicationBuilder.executorService(options.getExecutorService());\n             }\n+            if (options.isSharedTokenCacheEnabled()) {\n+                try {\n+                    publicClientApplicationBuilder.setTokenCacheAccessAspect(\n+                            new PersistenceTokenCacheAccessAspect(options.getPersistenceSettings()));\n+                } catch (Throwable t) {\n+                    String message = \"Shared token cache is unavailable in this environment.\";\n+                    if (sharedTokenCacheCredential) {\n+                        throw logger.logExceptionAsError(new CredentialUnavailableException(message, t));\n+                    } else {\n+                        throw logger.logExceptionAsError(new ClientAuthenticationException(message, null, t));\n+                    }\n+                }\n+            }\n             this.publicClientApplication = publicClientApplicationBuilder.build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5OTkwMg=="}, "originalCommit": {"oid": "0bf3f76bb45b910ff5bd7bdca807110665c1df44"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDA0NTEzOnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/SharedTokenCacheCredential.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMTowMjoyN1rOGPHQHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMzoyMDo0NVrOGPYF9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUwMDYzOQ==", "bodyText": "authenticateWithSharedTokenCache searches the shared token cache for an account each time. Shouldn't the account be saved off after the first time this method is called so that authenticateWithMsalAccount can be called instead?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418500639", "createdAt": "2020-05-01T11:02:27Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/SharedTokenCacheCredential.java", "diffHunk": "@@ -63,92 +51,18 @@\n         } else {\n             this.tenantId = tenantId;\n         }\n-        this.options = identityClientOptions;\n+        this.identityClient = new IdentityClientBuilder()\n+                .tenantId(this.tenantId)\n+                .clientId(this.clientId)\n+                .identityClientOptions(identityClientOptions)\n+                .build();\n     }\n \n     /**\n      * Gets token from shared token cache\n      * */\n     @Override\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n-        String authorityUrl = options.getAuthorityHost().replaceAll(\"/+$\", \"\") + \"/\" + tenantId + \"/\";\n-        // Initialize here so that the constructor doesn't throw\n-        if (pubClient == null) {\n-            try {\n-                PersistentTokenCacheAccessAspect accessAspect = new PersistentTokenCacheAccessAspect();\n-                PublicClientApplication.Builder applicationBuilder =  PublicClientApplication.builder(this.clientId);\n-                if (options.getExecutorService() != null) {\n-                    applicationBuilder.executorService(options.getExecutorService());\n-                }\n-\n-                pubClient = applicationBuilder\n-                    .authority(authorityUrl)\n-                    .setTokenCacheAccessAspect(accessAspect)\n-                    .build();\n-            } catch (Exception e) {\n-                return Mono.error(new CredentialUnavailableException(\"SharedTokenCacheCredential authentication \"\n-                                                                         + \"unavailable.\" +  e.getMessage(), e));\n-            }\n-        }\n-\n-        // find if the Public Client app with the requested username exists\n-        return Mono.fromFuture(pubClient.getAccounts())\n-            .flatMap(set -> {\n-                IAccount requestedAccount;\n-                Map<String, IAccount> accounts = new HashMap<>(); // home account id -> account\n-\n-                for (IAccount cached : set) {\n-                    if (username == null || username.equals(cached.username())) {\n-                        if (!accounts.containsKey(cached.homeAccountId())) { // only put the first one\n-                            accounts.put(cached.homeAccountId(), cached);\n-                        }\n-                    }\n-                }\n-\n-                if (set.size() == 0) {\n-                    return Mono.error(new CredentialUnavailableException(\"SharedTokenCacheCredential authentication \"\n-                             + \"unavailable. No accounts were found in the cache.\"));\n-                }\n-\n-                if (CoreUtils.isNullOrEmpty(username)) {\n-                    return Mono.error(new CredentialUnavailableException(\"SharedTokenCacheCredential authentication \"\n-                             + \"unavailable. Multiple accounts were found in the cache. Use username and tenant id \"\n-                             + \"to disambiguate.\"));\n-                }\n-\n-                if (accounts.size() != 1) {\n-                    if (accounts.size() == 0) {\n-                        return Mono.error(new CredentialUnavailableException(\n-                            String.format(\"SharedTokenCacheCredential authentication \"\n-                             + \"unavailable. No account matching the specified username %s was found in \"\n-                             + \"the cache.\", username)));\n-                    } else {\n-                        return Mono.error(new CredentialUnavailableException(String.format(\"SharedTokenCacheCredential\"\n-                             + \" authentication unavailable. Multiple accounts matching the specified username %s were \"\n-                             + \"found in the cache.\", username)));\n-                    }\n-                }\n-\n-                requestedAccount = accounts.values().iterator().next();\n-\n-\n-                // if it does, then request the token\n-                SilentParameters params = SilentParameters.builder(\n-                        new HashSet<>(request.getScopes()), requestedAccount)\n-                    .authorityUrl(authorityUrl)\n-                    .build();\n-\n-                CompletableFuture<IAuthenticationResult> future;\n-                try {\n-                    future = pubClient.acquireTokenSilently(params);\n-                    return Mono.fromFuture(() -> future).map(result ->\n-                        new AccessToken(result.accessToken(),\n-                            result.expiresOnDate().toInstant().atOffset(ZoneOffset.UTC)));\n-\n-                } catch (MalformedURLException e) {\n-                    e.printStackTrace();\n-                    return Mono.error(new RuntimeException(\"Token was not found\"));\n-                }\n-            });\n+        return identityClient.authenticateWithSharedTokenCache(request, username);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bf3f76bb45b910ff5bd7bdca807110665c1df44"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NjU2Ng==", "bodyText": "added the logic.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418776566", "createdAt": "2020-05-01T23:20:45Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/SharedTokenCacheCredential.java", "diffHunk": "@@ -63,92 +51,18 @@\n         } else {\n             this.tenantId = tenantId;\n         }\n-        this.options = identityClientOptions;\n+        this.identityClient = new IdentityClientBuilder()\n+                .tenantId(this.tenantId)\n+                .clientId(this.clientId)\n+                .identityClientOptions(identityClientOptions)\n+                .build();\n     }\n \n     /**\n      * Gets token from shared token cache\n      * */\n     @Override\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n-        String authorityUrl = options.getAuthorityHost().replaceAll(\"/+$\", \"\") + \"/\" + tenantId + \"/\";\n-        // Initialize here so that the constructor doesn't throw\n-        if (pubClient == null) {\n-            try {\n-                PersistentTokenCacheAccessAspect accessAspect = new PersistentTokenCacheAccessAspect();\n-                PublicClientApplication.Builder applicationBuilder =  PublicClientApplication.builder(this.clientId);\n-                if (options.getExecutorService() != null) {\n-                    applicationBuilder.executorService(options.getExecutorService());\n-                }\n-\n-                pubClient = applicationBuilder\n-                    .authority(authorityUrl)\n-                    .setTokenCacheAccessAspect(accessAspect)\n-                    .build();\n-            } catch (Exception e) {\n-                return Mono.error(new CredentialUnavailableException(\"SharedTokenCacheCredential authentication \"\n-                                                                         + \"unavailable.\" +  e.getMessage(), e));\n-            }\n-        }\n-\n-        // find if the Public Client app with the requested username exists\n-        return Mono.fromFuture(pubClient.getAccounts())\n-            .flatMap(set -> {\n-                IAccount requestedAccount;\n-                Map<String, IAccount> accounts = new HashMap<>(); // home account id -> account\n-\n-                for (IAccount cached : set) {\n-                    if (username == null || username.equals(cached.username())) {\n-                        if (!accounts.containsKey(cached.homeAccountId())) { // only put the first one\n-                            accounts.put(cached.homeAccountId(), cached);\n-                        }\n-                    }\n-                }\n-\n-                if (set.size() == 0) {\n-                    return Mono.error(new CredentialUnavailableException(\"SharedTokenCacheCredential authentication \"\n-                             + \"unavailable. No accounts were found in the cache.\"));\n-                }\n-\n-                if (CoreUtils.isNullOrEmpty(username)) {\n-                    return Mono.error(new CredentialUnavailableException(\"SharedTokenCacheCredential authentication \"\n-                             + \"unavailable. Multiple accounts were found in the cache. Use username and tenant id \"\n-                             + \"to disambiguate.\"));\n-                }\n-\n-                if (accounts.size() != 1) {\n-                    if (accounts.size() == 0) {\n-                        return Mono.error(new CredentialUnavailableException(\n-                            String.format(\"SharedTokenCacheCredential authentication \"\n-                             + \"unavailable. No account matching the specified username %s was found in \"\n-                             + \"the cache.\", username)));\n-                    } else {\n-                        return Mono.error(new CredentialUnavailableException(String.format(\"SharedTokenCacheCredential\"\n-                             + \" authentication unavailable. Multiple accounts matching the specified username %s were \"\n-                             + \"found in the cache.\", username)));\n-                    }\n-                }\n-\n-                requestedAccount = accounts.values().iterator().next();\n-\n-\n-                // if it does, then request the token\n-                SilentParameters params = SilentParameters.builder(\n-                        new HashSet<>(request.getScopes()), requestedAccount)\n-                    .authorityUrl(authorityUrl)\n-                    .build();\n-\n-                CompletableFuture<IAuthenticationResult> future;\n-                try {\n-                    future = pubClient.acquireTokenSilently(params);\n-                    return Mono.fromFuture(() -> future).map(result ->\n-                        new AccessToken(result.accessToken(),\n-                            result.expiresOnDate().toInstant().atOffset(ZoneOffset.UTC)));\n-\n-                } catch (MalformedURLException e) {\n-                    e.printStackTrace();\n-                    return Mono.error(new RuntimeException(\"Token was not found\"));\n-                }\n-            });\n+        return identityClient.authenticateWithSharedTokenCache(request, username);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUwMDYzOQ=="}, "originalCommit": {"oid": "0bf3f76bb45b910ff5bd7bdca807110665c1df44"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDA1MDA5OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/UsernamePasswordCredentialBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMTowNToyN1rOGPHS-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMzoyMTowMFrOGPYGNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUwMTM2OA==", "bodyText": "We hadn't added the ability to use the shared token cache to the UsernamePasswordCredential in .NET and Python yet. I'm not totally against it, but I think it adds limited value since UsernamePasswordCredential has no user interaction.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418501368", "createdAt": "2020-05-01T11:05:27Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/UsernamePasswordCredentialBuilder.java", "diffHunk": "@@ -36,6 +36,31 @@ public UsernamePasswordCredentialBuilder password(String password) {\n         return this;\n     }\n \n+    /**\n+     * Sets whether to use an unprotected file specified by <code>cacheFileLocation()</code> instead of\n+     * Gnome keyring on Linux. This is false by default.\n+     *\n+     * @param allowUnencryptedCache whether to use an unprotected file for cache storage.\n+     *\n+     * @return An updated instance of this builder with the unprotected token cache setting set as specified.\n+     */\n+    public UsernamePasswordCredentialBuilder allowUnencryptedCache(boolean allowUnencryptedCache) {\n+        this.identityClientOptions.allowUnencryptedCache(allowUnencryptedCache);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets whether to enable using the shared token cache. This is disabled by default.\n+     *\n+     * @param enabled whether to enabled using the shared token cache.\n+     *\n+     * @return An updated instance of this builder with if the shared token cache enabled specified.\n+     */\n+    public UsernamePasswordCredentialBuilder enableSharedTokenCache(boolean enabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bf3f76bb45b910ff5bd7bdca807110665c1df44"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NjYzMA==", "bodyText": "we'll be keeping it for preview, as discussed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418776630", "createdAt": "2020-05-01T23:21:00Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/UsernamePasswordCredentialBuilder.java", "diffHunk": "@@ -36,6 +36,31 @@ public UsernamePasswordCredentialBuilder password(String password) {\n         return this;\n     }\n \n+    /**\n+     * Sets whether to use an unprotected file specified by <code>cacheFileLocation()</code> instead of\n+     * Gnome keyring on Linux. This is false by default.\n+     *\n+     * @param allowUnencryptedCache whether to use an unprotected file for cache storage.\n+     *\n+     * @return An updated instance of this builder with the unprotected token cache setting set as specified.\n+     */\n+    public UsernamePasswordCredentialBuilder allowUnencryptedCache(boolean allowUnencryptedCache) {\n+        this.identityClientOptions.allowUnencryptedCache(allowUnencryptedCache);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets whether to enable using the shared token cache. This is disabled by default.\n+     *\n+     * @param enabled whether to enabled using the shared token cache.\n+     *\n+     * @return An updated instance of this builder with if the shared token cache enabled specified.\n+     */\n+    public UsernamePasswordCredentialBuilder enableSharedTokenCache(boolean enabled) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUwMTM2OA=="}, "originalCommit": {"oid": "0bf3f76bb45b910ff5bd7bdca807110665c1df44"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 132, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}