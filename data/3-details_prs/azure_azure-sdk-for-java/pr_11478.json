{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MDcyODE5", "number": 11478, "title": "Max concurrency", "bodyText": "", "createdAt": "2020-05-27T19:34:17Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478", "merged": true, "mergeCommit": {"oid": "48fca21a1c41d25af95ece325fc980c4ccbff9bf"}, "closed": true, "closedAt": "2020-06-03T21:43:22Z", "author": {"login": "rickle-msft"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjNgSkAH2gAyNDI0MDcyODE5OjZkMDE2MmEyZWRhMjlmM2RhYWE1OTlmZGEzNTI5YjJjNDI3ZjNhNmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnvI9PgFqTQyMzg4ODgxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6d0162a2eda29f3daaa599fda3529b2c427f3a6a", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6d0162a2eda29f3daaa599fda3529b2c427f3a6a", "committedDate": "2020-05-20T18:37:28Z", "message": "Barely started"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f44b9601af8d8745c692c29d7434f0136bd6ae6f", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f44b9601af8d8745c692c29d7434f0136bd6ae6f", "committedDate": "2020-05-27T17:06:13Z", "message": "Added max concurrency parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1916abb161d9304c89075d5a14b239d9173df31", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a1916abb161d9304c89075d5a14b239d9173df31", "committedDate": "2020-05-27T19:32:59Z", "message": "spotbugs fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NTU5NzEy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#pullrequestreview-419559712", "createdAt": "2020-05-27T19:52:01Z", "commit": {"oid": "a1916abb161d9304c89075d5a14b239d9173df31"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOTo1MjowMVrOGba18w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOTo1MjowMVrOGba18w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwNDUzMQ==", "bodyText": "Does it helps if we add that the min concurrency user can set is 16 or reactor Queues.SMALL_BUFFER_SIZE\" https://projectreactor.io/docs/core/3.2.1.RELEASE/api/reactor/util/concurrent/Queues.html#SMALL_BUFFER_SIZE\nMay be it help customers trying to set a lower value and wonder why it's being ignored.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#discussion_r431404531", "createdAt": "2020-05-27T19:52:01Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/ParallelTransferOptions.java", "diffHunk": "@@ -62,7 +63,35 @@ public ParallelTransferOptions(Integer blockSize, Integer numBuffers, ProgressRe\n      * {@link BlockBlobAsyncClient#MAX_UPLOAD_BLOB_BYTES}.\n      */\n     public ParallelTransferOptions(Integer blockSize, Integer numBuffers, ProgressReceiver progressReceiver,\n-        Integer maxSingleUploadSize) {\n+            Integer maxSingleUploadSize) {\n+        this(blockSize, numBuffers, progressReceiver, maxSingleUploadSize, null);\n+    }\n+\n+    /**\n+     * Creates a new {@link ParallelTransferOptions} with default parameters applied.\n+     *\n+     * @param blockSize The block size.\n+     * For upload, The block size is the size of each block that will be staged. This value also determines the number\n+     * of requests that need to be made. If block size is large, upload will make fewer network calls, but each\n+     * individual call will send more data and will therefore take longer. This parameter also determines the size\n+     * that each buffer uses when buffering is required and consequently amount of memory consumed by such methods may\n+     * be up to blockSize * numBuffers.\n+     * @param numBuffers For buffered upload only, the number of buffers is the maximum number of buffers this method\n+     * should allocate. Memory will be allocated lazily as needed. Must be at least two. Typically, the larger the\n+     * number of buffers, the more parallel, and thus faster, the upload portion  of this operation will be.\n+     * The amount of memory consumed by methods using this value may be up to blockSize * numBuffers.\n+     * @param progressReceiver {@link ProgressReceiver}\n+     * @param maxSingleUploadSize If the size of the data is less than or equal to this value, it will be uploaded in a\n+     * single put rather than broken up into chunks. If the data is uploaded in a single shot, the block size will be\n+     * ignored. Some constraints to consider are that more requests cost more, but several small or mid-sized requests\n+     * may sometimes perform better. In the case of buffered upload, up to this amount of data may be buffered before\n+     * any data is sent. Must be greater than 0. May be null to accept default behavior, which is the maximum value the\n+     * service accepts for uploading in a single requests and is represented by\n+     * {@link BlockBlobAsyncClient#MAX_UPLOAD_BLOB_BYTES}.\n+     * @param maxConcurrency The maximum number of parallel requests that will be issued at any given time.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1916abb161d9304c89075d5a14b239d9173df31"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMjkwNjQ2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#pullrequestreview-420290646", "createdAt": "2020-05-28T16:31:35Z", "commit": {"oid": "a1916abb161d9304c89075d5a14b239d9173df31"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNjozMTozNlrOGb9Weg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNjozMjoyNFrOGb9YqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk2OTkxNA==", "bodyText": "Would we want to use a parallelization that is more idiomatic to the Storage service usage? I know Queues.SMALL_BUFFER_SIZE aligns more with Reactor's usage but could the higher level of parallelization get use into issues.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#discussion_r431969914", "createdAt": "2020-05-28T16:31:36Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/implementation/util/ModelHelper.java", "diffHunk": "@@ -57,6 +58,8 @@ public static ParallelTransferOptions populateAndApplyDefaults(ParallelTransferO\n                 : other.getNumBuffers(),\n             other.getProgressReceiver(),\n             other.getMaxSingleUploadSize() == null ? Integer.valueOf(MAX_APPEND_FILE_BYTES)\n-                : other.getMaxSingleUploadSize());\n+                : other.getMaxSingleUploadSize(),\n+            // Queues.SMALL_BUFFER_SIZE is the default used by reactor\n+            other.getMaxConcurrency() == null ? Integer.valueOf(Queues.SMALL_BUFFER_SIZE) : other.getMaxConcurrency());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1916abb161d9304c89075d5a14b239d9173df31"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk3MDQ3Mw==", "bodyText": "Same comment about what the default should be.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#discussion_r431970473", "createdAt": "2020-05-28T16:32:24Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/util/ModelHelper.java", "diffHunk": "@@ -44,7 +45,9 @@ public static ParallelTransferOptions populateAndApplyDefaults(ParallelTransferO\n                 : other.getNumBuffers(),\n             other.getProgressReceiver(),\n             other.getMaxSingleUploadSize() == null ? Integer.valueOf(BlockBlobAsyncClient.MAX_UPLOAD_BLOB_BYTES)\n-                : other.getMaxSingleUploadSize());\n+                : other.getMaxSingleUploadSize(),\n+            // Queues.SMALL_BUFFER_SIZE is the default used by reactor\n+            other.getMaxConcurrency() == null ? Integer.valueOf(Queues.SMALL_BUFFER_SIZE) : other.getMaxConcurrency());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1916abb161d9304c89075d5a14b239d9173df31"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMDA4OTU3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#pullrequestreview-422008957", "createdAt": "2020-06-01T16:46:10Z", "commit": {"oid": "a1916abb161d9304c89075d5a14b239d9173df31"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjo0NjoxMFrOGdSCig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjo0NjoxMFrOGdSCig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1NzQ1MA==", "bodyText": "One thing that isn't clear (from the notes) is what's the scope of this limit. I believe it's per upload request by looking at implementation. However, one might conclude it's global limit. We should make this clear.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#discussion_r433357450", "createdAt": "2020-06-01T16:46:10Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-blob/CHANGELOG.md", "diffHunk": "@@ -1,6 +1,7 @@\n # Release History\n \n ## 12.7.0-beta.1 (Unreleased)\n+- Added a maxConcurrency option on ParallelTransferOptions that allows the customer to limit how many concurrent network requests will be outstanding at once. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1916abb161d9304c89075d5a14b239d9173df31"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2be2aec1a84f126de528c0afd4e7d2b571a3829d", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2be2aec1a84f126de528c0afd4e7d2b571a3829d", "committedDate": "2020-06-02T19:24:59Z", "message": "Merged maxConcurrency and numBuffers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyOTk0NzM3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#pullrequestreview-422994737", "createdAt": "2020-06-02T19:30:54Z", "commit": {"oid": "2be2aec1a84f126de528c0afd4e7d2b571a3829d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTozMDo1NFrOGeBBmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTozMDo1NFrOGeBBmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyNzI1Nw==", "bodyText": "Or we can solve this problem by allocating maxConcurrency+1 buffers in the UploadbufferPool.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#discussion_r434127257", "createdAt": "2020-06-02T19:30:54Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/ParallelTransferOptions.java", "diffHunk": "@@ -61,17 +65,22 @@ public ParallelTransferOptions(Integer blockSize, Integer numBuffers, ProgressRe\n      * service accepts for uploading in a single requests and is represented by\n      * {@link BlockBlobAsyncClient#MAX_UPLOAD_BLOB_BYTES}.\n      */\n-    public ParallelTransferOptions(Integer blockSize, Integer numBuffers, ProgressReceiver progressReceiver,\n-        Integer maxSingleUploadSize) {\n+    public ParallelTransferOptions(Integer blockSize, Integer maxConcurrency, ProgressReceiver progressReceiver,\n+            Integer maxSingleUploadSize) {\n         if (blockSize != null) {\n             StorageImplUtils.assertInBounds(\"blockSize\", blockSize, 1, BlockBlobAsyncClient.MAX_STAGE_BLOCK_BYTES);\n         }\n         this.blockSize = blockSize;\n \n-        if (numBuffers != null) {\n-            StorageImplUtils.assertInBounds(\"numBuffers\", numBuffers, 2, Integer.MAX_VALUE);\n+        /*\n+        In buffered upload cases, maxConcurrency must be at least 2 as it also indicates the number of buffers we will\n+        allocate. That minimum is validated in the UploadBufferPool. Because this value is also used in file transfers\n+        which do not buffer, we only check the absolute minimum for this value here.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2be2aec1a84f126de528c0afd4e7d2b571a3829d"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyOTkzMzIz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#pullrequestreview-422993323", "createdAt": "2020-06-02T19:28:46Z", "commit": {"oid": "2be2aec1a84f126de528c0afd4e7d2b571a3829d"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOToyODo0N1rOGeA9Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTozMTowMFrOGeBBww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyNjE2Ng==", "bodyText": "Don't think this is used anymore.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#discussion_r434126166", "createdAt": "2020-06-02T19:28:47Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/util/ModelHelper.java", "diffHunk": "@@ -6,6 +6,7 @@\n import com.azure.storage.blob.BlobAsyncClient;\n import com.azure.storage.blob.models.ParallelTransferOptions;\n import com.azure.storage.blob.specialized.BlockBlobAsyncClient;\n+import reactor.util.concurrent.Queues;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2be2aec1a84f126de528c0afd4e7d2b571a3829d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyNjkwMQ==", "bodyText": "Should this change to maxConcurrency.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#discussion_r434126901", "createdAt": "2020-06-02T19:30:13Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/ParallelTransferOptions.java", "diffHunk": "@@ -40,13 +44,19 @@\n      * any data is sent. Must be greater than 0. May be null to accept default behavior, which is the maximum value the\n      * service accepts for uploading in a single requests, which varies depending on the service.\n      */\n-    public ParallelTransferOptions(Integer blockSize, Integer numBuffers, ProgressReceiver progressReceiver,\n+    public ParallelTransferOptions(Integer blockSize, Integer maxConcurrency, ProgressReceiver progressReceiver,\n         Integer maxSingleUploadSize) {\n+\n         this.blockSize = blockSize;\n-        if (numBuffers != null) {\n-            StorageImplUtils.assertInBounds(\"numBuffers\", numBuffers, 2, Integer.MAX_VALUE);\n+        /*\n+        In buffered upload cases, maxConcurrency must be at least 2 as it also indicates the number of buffers we will\n+        allocate. That minimum is validated in the UploadBufferPool. Because this value is also used in file transfers\n+        which do not buffer, we only check the absolute minimum for this value here.\n+         */\n+        this.maxConcurrency = maxConcurrency;\n+        if (maxConcurrency != null) {\n+            StorageImplUtils.assertInBounds(\"numBuffers\", maxConcurrency, 1, Integer.MAX_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2be2aec1a84f126de528c0afd4e7d2b571a3829d"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyNzI5OQ==", "bodyText": "Don't think this is used anymore.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#discussion_r434127299", "createdAt": "2020-06-02T19:31:00Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/implementation/util/ModelHelper.java", "diffHunk": "@@ -6,6 +6,7 @@\n import com.azure.storage.common.ParallelTransferOptions;\n import com.azure.storage.common.implementation.Constants;\n import com.azure.storage.common.implementation.StorageImplUtils;\n+import reactor.util.concurrent.Queues;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2be2aec1a84f126de528c0afd4e7d2b571a3829d"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d75791db14e45ffa2ca8cfbf05ab0f7e0c9b7c3c", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d75791db14e45ffa2ca8cfbf05ab0f7e0c9b7c3c", "committedDate": "2020-06-02T21:58:03Z", "message": "PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e88d371e955d52f59f063dcc29229b01b74f4f1", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8e88d371e955d52f59f063dcc29229b01b74f4f1", "committedDate": "2020-06-02T22:00:44Z", "message": "Pr feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMDg4MDcw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#pullrequestreview-423088070", "createdAt": "2020-06-02T22:01:34Z", "commit": {"oid": "8e88d371e955d52f59f063dcc29229b01b74f4f1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06b958268856564e7c05d0d0da0af9f89fb59edf", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/06b958268856564e7c05d0d0da0af9f89fb59edf", "committedDate": "2020-06-02T22:03:30Z", "message": "Merge remote-tracking branch 'upstream/master' into maxConcurrency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "310bbfb7e4a20c6445b960919f3632528aae4d0c", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/310bbfb7e4a20c6445b960919f3632528aae4d0c", "committedDate": "2020-06-02T23:14:11Z", "message": "CI fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68a5a192fe483618a1d636e2a49c3e771bd69274", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/68a5a192fe483618a1d636e2a49c3e771bd69274", "committedDate": "2020-06-03T19:31:37Z", "message": "CI fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzODg4ODEy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#pullrequestreview-423888812", "createdAt": "2020-06-03T20:04:27Z", "commit": {"oid": "68a5a192fe483618a1d636e2a49c3e771bd69274"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3963, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}