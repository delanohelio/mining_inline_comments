{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2MDg5NDY1", "number": 12909, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwODo1ODoxMVrOEMZYww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNTowODozNVrOEMvjKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDM0MzA3OnYy", "diffSide": "RIGHT", "path": "sdk/management/docs/MIGRATION_GUIDE.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwODo1ODoxMVrOGueuKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOToyNzo1NVrOGufylg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5MTAxNg==", "bodyText": "nit, lowercase withPolicy\nMay worth mentioning that the implementation of HttpPipelinePolicy will be different from that of Interceptor from okhttp.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12909#discussion_r451391016", "createdAt": "2020-07-08T08:58:11Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/management/docs/MIGRATION_GUIDE.md", "diffHunk": "@@ -0,0 +1,284 @@\n+## Guide for migrating to `com.azure.resourcemanager.**` from `com.microsoft.azure-mgmt-**`\n+\n+This document is intended for users that are familiar with an older version of the Java SDK for managment libraries (`com.microsoft.azure-mgmt-**`) ad wish to migrate their application \n+to the next version of Azure resource management libraries (`com.microsoft.azure-mgmt-**`)\n+\n+For users new to the Java SDK for resource management libraries, please see the [README for 'com.azure.resourcemanager.*`](http://aka.ms/azure-sdk-java-mgmt)\n+\n+## Table of contents\n+\n+* [Prerequisites](#prerequisites)\n+* [Updated Maven depedencies](#updated-maven-dependencies)\n+* [General Changes](#general-changes)\n+  * [Authentication](#authentication)\n+  * [Customized Policy](#customized-policy)\n+  * [Custom HTTP Client](#custom-http-client)\n+  * [Error Handling](#error-handling)\n+  * [rxJava -> Reactor](#rxjava-to-reactor)\n+* [Additional Samples](#additional-samples)\n+\n+## Prerequisites\n+\n+Java Development Kit (JDK) with version 8 or above.\n+\n+## Updated Maven dependencies\n+\n+The latest dependencies for resource management libraries are [available here](https://azure.github.io/azure-sdk/releases/latest/all/java.html). Please look for packages that contains \"azure-resourcemanager\" in the namespace.\n+\n+## General Changes\n+\n+The latest Azure Java SDK for management libraries is a result of our efforts to create a resource management client library that is user-friendly and idiomatic to the Java ecosystem.\n+\n+Apart from redesigns resulting from the [new Azure SDK Design Guidelines for Java](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/DESIGN.md), the latest version improves on several areas from old version.\n+\n+While conforming to the new guideline, we have tried our best to minimize the breaking changes. Most of the interfaces / classes / methods have stayed the same to offer user an easier migration experience.\n+\n+The important breaking changes are listed in the following sections:\n+\n+### Authentication\n+\n+In old version (`com.microsoft.azure-mgmt-**`), ApplicationTokenCredentials is created with all the credential parameters.\n+\n+In new version (`com.azure.resourcemanager.**`), in order to provide an unified authentication based on Azure Identity for all Azure Java SDKs, the authentication mechanism has been re-designed and improved to offer a simpler interface. \n+\n+To the show the code snippets for the change:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+ApplicationTokenCredentials = new ApplicationTokenCredentials(\"<ClientId>\", \"<TenantId>\", \"<ClientSecret>\", AzureEnvironment.AZURE)\n+    .withDefaultSubscriptionId(\"<SubscriptionId>\");\n+```        \n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+TokenCredential credential = new ClientSecretCredentialBuilder()\n+    .clientId(\"<ClientId>\")\n+    .clientSecret(\"<ClientSecret>\")\n+    .tenantId(\"<TenantId>\")\n+    .build();\n+AzureProfile profile = new AzureProfile(\"<TenantId>\", \"<SubscriptionId>\", AzureEnvironment.AZURE);\n+``` \n+\n+In addition to this change, the **support for using auth file has been removed**. In old version, the user can choose to authenticate via the auth file, like this:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+Azure azure = Azure.authenticate(new File(\"my.azureauth\")).withDefaultSubscription();\n+```\n+**In new version, this feature has been removed.** If this creates concern on your side, please file an issue to let us know.\n+\n+For detailed information on the benefits of using the new authentication classes, please refer to [this page](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/AUTH.md)\n+\n+## Customized Policy\n+\n+Because of adopting Azure Core which is a shared library across all Azure SDKs, there is also a minor change regarding how customized policy in configured. \n+\n+In old version (`com.microsoft.azure-mgmt-**`), we use `withInterceptor` and pass the customized interceptor class to the Azure object \n+\n+In new version (`com.azure.resourcemanager.**`), we use `WithPolicy` instead and pass the customized policy to the Azure object ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "149b62aa5050c81d3d0b6a21f3953461c977bc30"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwODUzNA==", "bodyText": "added", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12909#discussion_r451408534", "createdAt": "2020-07-08T09:27:55Z", "author": {"login": "nickzhums"}, "path": "sdk/management/docs/MIGRATION_GUIDE.md", "diffHunk": "@@ -0,0 +1,284 @@\n+## Guide for migrating to `com.azure.resourcemanager.**` from `com.microsoft.azure-mgmt-**`\n+\n+This document is intended for users that are familiar with an older version of the Java SDK for managment libraries (`com.microsoft.azure-mgmt-**`) ad wish to migrate their application \n+to the next version of Azure resource management libraries (`com.microsoft.azure-mgmt-**`)\n+\n+For users new to the Java SDK for resource management libraries, please see the [README for 'com.azure.resourcemanager.*`](http://aka.ms/azure-sdk-java-mgmt)\n+\n+## Table of contents\n+\n+* [Prerequisites](#prerequisites)\n+* [Updated Maven depedencies](#updated-maven-dependencies)\n+* [General Changes](#general-changes)\n+  * [Authentication](#authentication)\n+  * [Customized Policy](#customized-policy)\n+  * [Custom HTTP Client](#custom-http-client)\n+  * [Error Handling](#error-handling)\n+  * [rxJava -> Reactor](#rxjava-to-reactor)\n+* [Additional Samples](#additional-samples)\n+\n+## Prerequisites\n+\n+Java Development Kit (JDK) with version 8 or above.\n+\n+## Updated Maven dependencies\n+\n+The latest dependencies for resource management libraries are [available here](https://azure.github.io/azure-sdk/releases/latest/all/java.html). Please look for packages that contains \"azure-resourcemanager\" in the namespace.\n+\n+## General Changes\n+\n+The latest Azure Java SDK for management libraries is a result of our efforts to create a resource management client library that is user-friendly and idiomatic to the Java ecosystem.\n+\n+Apart from redesigns resulting from the [new Azure SDK Design Guidelines for Java](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/DESIGN.md), the latest version improves on several areas from old version.\n+\n+While conforming to the new guideline, we have tried our best to minimize the breaking changes. Most of the interfaces / classes / methods have stayed the same to offer user an easier migration experience.\n+\n+The important breaking changes are listed in the following sections:\n+\n+### Authentication\n+\n+In old version (`com.microsoft.azure-mgmt-**`), ApplicationTokenCredentials is created with all the credential parameters.\n+\n+In new version (`com.azure.resourcemanager.**`), in order to provide an unified authentication based on Azure Identity for all Azure Java SDKs, the authentication mechanism has been re-designed and improved to offer a simpler interface. \n+\n+To the show the code snippets for the change:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+ApplicationTokenCredentials = new ApplicationTokenCredentials(\"<ClientId>\", \"<TenantId>\", \"<ClientSecret>\", AzureEnvironment.AZURE)\n+    .withDefaultSubscriptionId(\"<SubscriptionId>\");\n+```        \n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+TokenCredential credential = new ClientSecretCredentialBuilder()\n+    .clientId(\"<ClientId>\")\n+    .clientSecret(\"<ClientSecret>\")\n+    .tenantId(\"<TenantId>\")\n+    .build();\n+AzureProfile profile = new AzureProfile(\"<TenantId>\", \"<SubscriptionId>\", AzureEnvironment.AZURE);\n+``` \n+\n+In addition to this change, the **support for using auth file has been removed**. In old version, the user can choose to authenticate via the auth file, like this:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+Azure azure = Azure.authenticate(new File(\"my.azureauth\")).withDefaultSubscription();\n+```\n+**In new version, this feature has been removed.** If this creates concern on your side, please file an issue to let us know.\n+\n+For detailed information on the benefits of using the new authentication classes, please refer to [this page](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/AUTH.md)\n+\n+## Customized Policy\n+\n+Because of adopting Azure Core which is a shared library across all Azure SDKs, there is also a minor change regarding how customized policy in configured. \n+\n+In old version (`com.microsoft.azure-mgmt-**`), we use `withInterceptor` and pass the customized interceptor class to the Azure object \n+\n+In new version (`com.azure.resourcemanager.**`), we use `WithPolicy` instead and pass the customized policy to the Azure object ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5MTAxNg=="}, "originalCommit": {"oid": "149b62aa5050c81d3d0b6a21f3953461c977bc30"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDM1NjE2OnYy", "diffSide": "RIGHT", "path": "sdk/management/docs/MIGRATION_GUIDE.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTowMTozM1rOGue2Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOToyNzoyMFrOGufxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5MzA3OA==", "bodyText": "I think this is refer to namespace, it should be com.microsoft.azure.management.** for track 1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12909#discussion_r451393078", "createdAt": "2020-07-08T09:01:33Z", "author": {"login": "ChenTanyi"}, "path": "sdk/management/docs/MIGRATION_GUIDE.md", "diffHunk": "@@ -0,0 +1,284 @@\n+## Guide for migrating to `com.azure.resourcemanager.**` from `com.microsoft.azure-mgmt-**`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "149b62aa5050c81d3d0b6a21f3953461c977bc30"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwODE4MA==", "bodyText": "fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12909#discussion_r451408180", "createdAt": "2020-07-08T09:27:20Z", "author": {"login": "nickzhums"}, "path": "sdk/management/docs/MIGRATION_GUIDE.md", "diffHunk": "@@ -0,0 +1,284 @@\n+## Guide for migrating to `com.azure.resourcemanager.**` from `com.microsoft.azure-mgmt-**`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5MzA3OA=="}, "originalCommit": {"oid": "149b62aa5050c81d3d0b6a21f3953461c977bc30"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDM1ODI2OnYy", "diffSide": "RIGHT", "path": "sdk/management/docs/MIGRATION_GUIDE.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTowMjoxM1rOGue3kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMjo0OTowOFrOGu_1fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5MzQyNA==", "bodyText": "ApplicationTokenCredentials credential =", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12909#discussion_r451393424", "createdAt": "2020-07-08T09:02:13Z", "author": {"login": "ChenTanyi"}, "path": "sdk/management/docs/MIGRATION_GUIDE.md", "diffHunk": "@@ -0,0 +1,284 @@\n+## Guide for migrating to `com.azure.resourcemanager.**` from `com.microsoft.azure-mgmt-**`\n+\n+This document is intended for users that are familiar with an older version of the Java SDK for managment libraries (`com.microsoft.azure-mgmt-**`) ad wish to migrate their application \n+to the next version of Azure resource management libraries (`com.microsoft.azure-mgmt-**`)\n+\n+For users new to the Java SDK for resource management libraries, please see the [README for 'com.azure.resourcemanager.*`](http://aka.ms/azure-sdk-java-mgmt)\n+\n+## Table of contents\n+\n+* [Prerequisites](#prerequisites)\n+* [Updated Maven depedencies](#updated-maven-dependencies)\n+* [General Changes](#general-changes)\n+  * [Authentication](#authentication)\n+  * [Customized Policy](#customized-policy)\n+  * [Custom HTTP Client](#custom-http-client)\n+  * [Error Handling](#error-handling)\n+  * [rxJava -> Reactor](#rxjava-to-reactor)\n+* [Additional Samples](#additional-samples)\n+\n+## Prerequisites\n+\n+Java Development Kit (JDK) with version 8 or above.\n+\n+## Updated Maven dependencies\n+\n+The latest dependencies for resource management libraries are [available here](https://azure.github.io/azure-sdk/releases/latest/all/java.html). Please look for packages that contains \"azure-resourcemanager\" in the namespace.\n+\n+## General Changes\n+\n+The latest Azure Java SDK for management libraries is a result of our efforts to create a resource management client library that is user-friendly and idiomatic to the Java ecosystem.\n+\n+Apart from redesigns resulting from the [new Azure SDK Design Guidelines for Java](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/DESIGN.md), the latest version improves on several areas from old version.\n+\n+While conforming to the new guideline, we have tried our best to minimize the breaking changes. Most of the interfaces / classes / methods have stayed the same to offer user an easier migration experience.\n+\n+The important breaking changes are listed in the following sections:\n+\n+### Authentication\n+\n+In old version (`com.microsoft.azure-mgmt-**`), ApplicationTokenCredentials is created with all the credential parameters.\n+\n+In new version (`com.azure.resourcemanager.**`), in order to provide an unified authentication based on Azure Identity for all Azure Java SDKs, the authentication mechanism has been re-designed and improved to offer a simpler interface. \n+\n+To the show the code snippets for the change:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+ApplicationTokenCredentials = new ApplicationTokenCredentials(\"<ClientId>\", \"<TenantId>\", \"<ClientSecret>\", AzureEnvironment.AZURE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "149b62aa5050c81d3d0b6a21f3953461c977bc30"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwODE0Mw==", "bodyText": "fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12909#discussion_r451408143", "createdAt": "2020-07-08T09:27:18Z", "author": {"login": "nickzhums"}, "path": "sdk/management/docs/MIGRATION_GUIDE.md", "diffHunk": "@@ -0,0 +1,284 @@\n+## Guide for migrating to `com.azure.resourcemanager.**` from `com.microsoft.azure-mgmt-**`\n+\n+This document is intended for users that are familiar with an older version of the Java SDK for managment libraries (`com.microsoft.azure-mgmt-**`) ad wish to migrate their application \n+to the next version of Azure resource management libraries (`com.microsoft.azure-mgmt-**`)\n+\n+For users new to the Java SDK for resource management libraries, please see the [README for 'com.azure.resourcemanager.*`](http://aka.ms/azure-sdk-java-mgmt)\n+\n+## Table of contents\n+\n+* [Prerequisites](#prerequisites)\n+* [Updated Maven depedencies](#updated-maven-dependencies)\n+* [General Changes](#general-changes)\n+  * [Authentication](#authentication)\n+  * [Customized Policy](#customized-policy)\n+  * [Custom HTTP Client](#custom-http-client)\n+  * [Error Handling](#error-handling)\n+  * [rxJava -> Reactor](#rxjava-to-reactor)\n+* [Additional Samples](#additional-samples)\n+\n+## Prerequisites\n+\n+Java Development Kit (JDK) with version 8 or above.\n+\n+## Updated Maven dependencies\n+\n+The latest dependencies for resource management libraries are [available here](https://azure.github.io/azure-sdk/releases/latest/all/java.html). Please look for packages that contains \"azure-resourcemanager\" in the namespace.\n+\n+## General Changes\n+\n+The latest Azure Java SDK for management libraries is a result of our efforts to create a resource management client library that is user-friendly and idiomatic to the Java ecosystem.\n+\n+Apart from redesigns resulting from the [new Azure SDK Design Guidelines for Java](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/DESIGN.md), the latest version improves on several areas from old version.\n+\n+While conforming to the new guideline, we have tried our best to minimize the breaking changes. Most of the interfaces / classes / methods have stayed the same to offer user an easier migration experience.\n+\n+The important breaking changes are listed in the following sections:\n+\n+### Authentication\n+\n+In old version (`com.microsoft.azure-mgmt-**`), ApplicationTokenCredentials is created with all the credential parameters.\n+\n+In new version (`com.azure.resourcemanager.**`), in order to provide an unified authentication based on Azure Identity for all Azure Java SDKs, the authentication mechanism has been re-designed and improved to offer a simpler interface. \n+\n+To the show the code snippets for the change:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+ApplicationTokenCredentials = new ApplicationTokenCredentials(\"<ClientId>\", \"<TenantId>\", \"<ClientSecret>\", AzureEnvironment.AZURE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5MzQyNA=="}, "originalCommit": {"oid": "149b62aa5050c81d3d0b6a21f3953461c977bc30"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkzMzU2Ng==", "bodyText": "It is still wrong, you should copy all before = to the code.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12909#discussion_r451933566", "createdAt": "2020-07-09T02:49:08Z", "author": {"login": "ChenTanyi"}, "path": "sdk/management/docs/MIGRATION_GUIDE.md", "diffHunk": "@@ -0,0 +1,284 @@\n+## Guide for migrating to `com.azure.resourcemanager.**` from `com.microsoft.azure-mgmt-**`\n+\n+This document is intended for users that are familiar with an older version of the Java SDK for managment libraries (`com.microsoft.azure-mgmt-**`) ad wish to migrate their application \n+to the next version of Azure resource management libraries (`com.microsoft.azure-mgmt-**`)\n+\n+For users new to the Java SDK for resource management libraries, please see the [README for 'com.azure.resourcemanager.*`](http://aka.ms/azure-sdk-java-mgmt)\n+\n+## Table of contents\n+\n+* [Prerequisites](#prerequisites)\n+* [Updated Maven depedencies](#updated-maven-dependencies)\n+* [General Changes](#general-changes)\n+  * [Authentication](#authentication)\n+  * [Customized Policy](#customized-policy)\n+  * [Custom HTTP Client](#custom-http-client)\n+  * [Error Handling](#error-handling)\n+  * [rxJava -> Reactor](#rxjava-to-reactor)\n+* [Additional Samples](#additional-samples)\n+\n+## Prerequisites\n+\n+Java Development Kit (JDK) with version 8 or above.\n+\n+## Updated Maven dependencies\n+\n+The latest dependencies for resource management libraries are [available here](https://azure.github.io/azure-sdk/releases/latest/all/java.html). Please look for packages that contains \"azure-resourcemanager\" in the namespace.\n+\n+## General Changes\n+\n+The latest Azure Java SDK for management libraries is a result of our efforts to create a resource management client library that is user-friendly and idiomatic to the Java ecosystem.\n+\n+Apart from redesigns resulting from the [new Azure SDK Design Guidelines for Java](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/DESIGN.md), the latest version improves on several areas from old version.\n+\n+While conforming to the new guideline, we have tried our best to minimize the breaking changes. Most of the interfaces / classes / methods have stayed the same to offer user an easier migration experience.\n+\n+The important breaking changes are listed in the following sections:\n+\n+### Authentication\n+\n+In old version (`com.microsoft.azure-mgmt-**`), ApplicationTokenCredentials is created with all the credential parameters.\n+\n+In new version (`com.azure.resourcemanager.**`), in order to provide an unified authentication based on Azure Identity for all Azure Java SDKs, the authentication mechanism has been re-designed and improved to offer a simpler interface. \n+\n+To the show the code snippets for the change:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+ApplicationTokenCredentials = new ApplicationTokenCredentials(\"<ClientId>\", \"<TenantId>\", \"<ClientSecret>\", AzureEnvironment.AZURE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5MzQyNA=="}, "originalCommit": {"oid": "149b62aa5050c81d3d0b6a21f3953461c977bc30"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDM2NDQwOnYy", "diffSide": "RIGHT", "path": "sdk/management/docs/MIGRATION_GUIDE.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTowNDowNFrOGue7aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMjo0OTo0NVrOGu_2Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5NDQwOQ==", "bodyText": "It is better to format this code. Same as below", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12909#discussion_r451394409", "createdAt": "2020-07-08T09:04:04Z", "author": {"login": "ChenTanyi"}, "path": "sdk/management/docs/MIGRATION_GUIDE.md", "diffHunk": "@@ -0,0 +1,284 @@\n+## Guide for migrating to `com.azure.resourcemanager.**` from `com.microsoft.azure-mgmt-**`\n+\n+This document is intended for users that are familiar with an older version of the Java SDK for managment libraries (`com.microsoft.azure-mgmt-**`) ad wish to migrate their application \n+to the next version of Azure resource management libraries (`com.microsoft.azure-mgmt-**`)\n+\n+For users new to the Java SDK for resource management libraries, please see the [README for 'com.azure.resourcemanager.*`](http://aka.ms/azure-sdk-java-mgmt)\n+\n+## Table of contents\n+\n+* [Prerequisites](#prerequisites)\n+* [Updated Maven depedencies](#updated-maven-dependencies)\n+* [General Changes](#general-changes)\n+  * [Authentication](#authentication)\n+  * [Customized Policy](#customized-policy)\n+  * [Custom HTTP Client](#custom-http-client)\n+  * [Error Handling](#error-handling)\n+  * [rxJava -> Reactor](#rxjava-to-reactor)\n+* [Additional Samples](#additional-samples)\n+\n+## Prerequisites\n+\n+Java Development Kit (JDK) with version 8 or above.\n+\n+## Updated Maven dependencies\n+\n+The latest dependencies for resource management libraries are [available here](https://azure.github.io/azure-sdk/releases/latest/all/java.html). Please look for packages that contains \"azure-resourcemanager\" in the namespace.\n+\n+## General Changes\n+\n+The latest Azure Java SDK for management libraries is a result of our efforts to create a resource management client library that is user-friendly and idiomatic to the Java ecosystem.\n+\n+Apart from redesigns resulting from the [new Azure SDK Design Guidelines for Java](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/DESIGN.md), the latest version improves on several areas from old version.\n+\n+While conforming to the new guideline, we have tried our best to minimize the breaking changes. Most of the interfaces / classes / methods have stayed the same to offer user an easier migration experience.\n+\n+The important breaking changes are listed in the following sections:\n+\n+### Authentication\n+\n+In old version (`com.microsoft.azure-mgmt-**`), ApplicationTokenCredentials is created with all the credential parameters.\n+\n+In new version (`com.azure.resourcemanager.**`), in order to provide an unified authentication based on Azure Identity for all Azure Java SDKs, the authentication mechanism has been re-designed and improved to offer a simpler interface. \n+\n+To the show the code snippets for the change:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+ApplicationTokenCredentials = new ApplicationTokenCredentials(\"<ClientId>\", \"<TenantId>\", \"<ClientSecret>\", AzureEnvironment.AZURE)\n+    .withDefaultSubscriptionId(\"<SubscriptionId>\");\n+```        \n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+TokenCredential credential = new ClientSecretCredentialBuilder()\n+    .clientId(\"<ClientId>\")\n+    .clientSecret(\"<ClientSecret>\")\n+    .tenantId(\"<TenantId>\")\n+    .build();\n+AzureProfile profile = new AzureProfile(\"<TenantId>\", \"<SubscriptionId>\", AzureEnvironment.AZURE);\n+``` \n+\n+In addition to this change, the **support for using auth file has been removed**. In old version, the user can choose to authenticate via the auth file, like this:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+Azure azure = Azure.authenticate(new File(\"my.azureauth\")).withDefaultSubscription();\n+```\n+**In new version, this feature has been removed.** If this creates concern on your side, please file an issue to let us know.\n+\n+For detailed information on the benefits of using the new authentication classes, please refer to [this page](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/AUTH.md)\n+\n+## Customized Policy\n+\n+Because of adopting Azure Core which is a shared library across all Azure SDKs, there is also a minor change regarding how customized policy in configured. \n+\n+In old version (`com.microsoft.azure-mgmt-**`), we use `withInterceptor` and pass the customized interceptor class to the Azure object \n+\n+In new version (`com.azure.resourcemanager.**`), we use `WithPolicy` instead and pass the customized policy to the Azure object \n+\n+So:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withInterceptor(new CustomizedInterceptor())\n+    .authenticate(credential)\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withPolicy(new CustomizedPolicy())\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```\n+\n+## Custom HTTP Client\n+\n+Similar to the customized policy, there are changes regarding how the custom HTTP client is configured as well. The re-designed HTTP client builder in the new version is more flexible and the user can choose their own implementation of HTTP client and plug in what they need into the configuration.\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+OkHttpClient.Builder builder = new OkHttpClient.Builder().proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)));\n+RestClient client = new RestClient.Builder(builder, new Retrofit.Builder())\n+    .withCredentials(credential)\n+    .build();\n+\n+Azure azure = Azure.authenticate(client, \"<TenantId>\")\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+HttpClient client = new OkHttpAsyncHttpClientBuilder()\n+    .proxy(new ProxyOptions(ProxyOptions.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)))\n+    .build();\n+\n+Azure azure = Azure.configure()\n+    .withHttpClient(client)\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```    \n+    \n+## Error Handling\n+\n+There is a minor namespace change in the exception class. To be specific, the previous `CloudException` has been re-named to `ManagementException`. \n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+final String resourceGroupName = random(8);\n+try {\n+    ResourceGroup resourceGroup = azure.resourceGroups().getByName(resourceGroupName);\n+} catch (CloudException e) {\n+    System.err.printf(\"Response code: %s%n\", e.body().code());\n+    System.err.printf(\"Response message: %s%n\", e.body().message());\n+}\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+final String resourceGroupName = randomString(\"rg\", 8);\n+try {\n+    ResourceGroup resourceGroup = azure.resourceGroups().getByName(resourceGroupName);\n+} catch (ManagementException e) {\n+    System.err.printf(\"Response code: %s%n\", e.getValue().getCode());\n+    System.err.printf(\"Response message: %s%n\", e.getValue().getMessage());\n+}\n+```\n+\n+## rxJava to Reactor\n+\n+In old version (`com.microsoft.azure-mgmt-**`), `rxJava` is used for non-blocking applications\n+\n+In new version (`com.azure.resourcemanager.**`), we have adopted `Reactor` as the main library in replacement of `rxJava` due to the Azure Core adoption.\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+azure.publicIPAddresses().define(publicIpName).withRegion(region).withExistingResourceGroup(rgName).withLeafDomainLabel(publicIpName).createAsync().flatMap(new Func1 < Indexable, Observable < Indexable >> () {@Override\n+\tpublic Observable < Indexable > call(Indexable indexable) {\n+\t\tif (indexable instanceof PublicIPAddress) {\n+\t\t\tPublicIPAddress publicIp = (PublicIPAddress) indexable;\n+\t\t\t//=============================================================\n+\t\t\t// Create an Internet facing load balancer with\n+\t\t\t// One frontend IP address\n+\t\t\t// Two backend address pools which contain network interfaces for the virtual\n+\t\t\t//  machines to receive HTTP and HTTPS network traffic from the load balancer\n+\t\t\t// Two load balancing rules for HTTP and HTTPS to map public ports on the load\n+\t\t\t//  balancer to ports in the backend address pool\n+\t\t\t// Two probes which contain HTTP and HTTPS health probes used to check availability\n+\t\t\t//  of virtual machines in the backend address pool\n+\t\t\t// Three inbound NAT rules which contain rules that map a public port on the load\n+\t\t\t//  balancer to a port for a specific virtual machine in the backend address pool\n+\t\t\t//  - this provides direct VM connectivity for SSH to port 22 and TELNET to port 23\n+\n+\t\t\tSystem.out.println(\"Creating a Internet facing load balancer with ...\");\n+\t\t\tSystem.out.println(\"- A frontend IP address\");\n+\t\t\tSystem.out.println(\"- Two backend address pools which contain network interfaces for the virtual\\n\" + \"  machines to receive HTTP and HTTPS network traffic from the load balancer\");\n+\t\t\tSystem.out.println(\"- Two load balancing rules for HTTP and HTTPS to map public ports on the load\\n\" + \"  balancer to ports in the backend address pool\");\n+\t\t\tSystem.out.println(\"- Two probes which contain HTTP and HTTPS health probes used to check availability\\n\" + \"  of virtual machines in the backend address pool\");\n+\t\t\tSystem.out.println(\"- Two inbound NAT rules which contain rules that map a public port on the load\\n\" + \"  balancer to a port for a specific virtual machine in the backend address pool\\n\" + \"  - this provides direct VM connectivity for SSH to port 22 and TELNET to port 23\");\n+\n+\t\t\treturn Observable.merge(\n+\t\t\tObservable.just(indexable), azure.loadBalancers().define(loadBalancerName1).withRegion(region).withExistingResourceGroup(rgName)\n+\t\t\t// Add two rules that uses above backend and probe\n+\t\t\t.defineLoadBalancingRule(httpLoadBalancingRule).withProtocol(TransportProtocol.TCP).fromFrontend(frontendName).fromFrontendPort(80).toBackend(backendPoolName1).withProbe(httpProbe).attach().defineLoadBalancingRule(httpsLoadBalancingRule).withProtocol(TransportProtocol.TCP).fromFrontend(frontendName).fromFrontendPort(443).toBackend(backendPoolName2).withProbe(httpsProbe).attach()\n+\t\t\t// Add nat pools to enable direct VM connectivity for\n+\t\t\t//  SSH to port 22 and TELNET to port 23\n+\t\t\t.defineInboundNatPool(natPool50XXto22).withProtocol(TransportProtocol.TCP).fromFrontend(frontendName).fromFrontendPortRange(5000, 5099).toBackendPort(22).attach().defineInboundNatPool(natPool60XXto23).withProtocol(TransportProtocol.TCP).fromFrontend(frontendName).fromFrontendPortRange(6000, 6099).toBackendPort(23).attach()\n+\n+\t\t\t// Explicitly define the frontend\n+\t\t\t.definePublicFrontend(frontendName).withExistingPublicIPAddress(publicIp).attach()\n+\n+\t\t\t// Add two probes one per rule\n+\t\t\t.defineHttpProbe(httpProbe).withRequestPath(\"/\").withPort(80).attach().defineHttpProbe(httpsProbe).withRequestPath(\"/\").withPort(443).attach()\n+\n+\t\t\t.createAsync());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "149b62aa5050c81d3d0b6a21f3953461c977bc30"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwODA5OQ==", "bodyText": "formatted using the editor", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12909#discussion_r451408099", "createdAt": "2020-07-08T09:27:14Z", "author": {"login": "nickzhums"}, "path": "sdk/management/docs/MIGRATION_GUIDE.md", "diffHunk": "@@ -0,0 +1,284 @@\n+## Guide for migrating to `com.azure.resourcemanager.**` from `com.microsoft.azure-mgmt-**`\n+\n+This document is intended for users that are familiar with an older version of the Java SDK for managment libraries (`com.microsoft.azure-mgmt-**`) ad wish to migrate their application \n+to the next version of Azure resource management libraries (`com.microsoft.azure-mgmt-**`)\n+\n+For users new to the Java SDK for resource management libraries, please see the [README for 'com.azure.resourcemanager.*`](http://aka.ms/azure-sdk-java-mgmt)\n+\n+## Table of contents\n+\n+* [Prerequisites](#prerequisites)\n+* [Updated Maven depedencies](#updated-maven-dependencies)\n+* [General Changes](#general-changes)\n+  * [Authentication](#authentication)\n+  * [Customized Policy](#customized-policy)\n+  * [Custom HTTP Client](#custom-http-client)\n+  * [Error Handling](#error-handling)\n+  * [rxJava -> Reactor](#rxjava-to-reactor)\n+* [Additional Samples](#additional-samples)\n+\n+## Prerequisites\n+\n+Java Development Kit (JDK) with version 8 or above.\n+\n+## Updated Maven dependencies\n+\n+The latest dependencies for resource management libraries are [available here](https://azure.github.io/azure-sdk/releases/latest/all/java.html). Please look for packages that contains \"azure-resourcemanager\" in the namespace.\n+\n+## General Changes\n+\n+The latest Azure Java SDK for management libraries is a result of our efforts to create a resource management client library that is user-friendly and idiomatic to the Java ecosystem.\n+\n+Apart from redesigns resulting from the [new Azure SDK Design Guidelines for Java](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/DESIGN.md), the latest version improves on several areas from old version.\n+\n+While conforming to the new guideline, we have tried our best to minimize the breaking changes. Most of the interfaces / classes / methods have stayed the same to offer user an easier migration experience.\n+\n+The important breaking changes are listed in the following sections:\n+\n+### Authentication\n+\n+In old version (`com.microsoft.azure-mgmt-**`), ApplicationTokenCredentials is created with all the credential parameters.\n+\n+In new version (`com.azure.resourcemanager.**`), in order to provide an unified authentication based on Azure Identity for all Azure Java SDKs, the authentication mechanism has been re-designed and improved to offer a simpler interface. \n+\n+To the show the code snippets for the change:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+ApplicationTokenCredentials = new ApplicationTokenCredentials(\"<ClientId>\", \"<TenantId>\", \"<ClientSecret>\", AzureEnvironment.AZURE)\n+    .withDefaultSubscriptionId(\"<SubscriptionId>\");\n+```        \n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+TokenCredential credential = new ClientSecretCredentialBuilder()\n+    .clientId(\"<ClientId>\")\n+    .clientSecret(\"<ClientSecret>\")\n+    .tenantId(\"<TenantId>\")\n+    .build();\n+AzureProfile profile = new AzureProfile(\"<TenantId>\", \"<SubscriptionId>\", AzureEnvironment.AZURE);\n+``` \n+\n+In addition to this change, the **support for using auth file has been removed**. In old version, the user can choose to authenticate via the auth file, like this:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+Azure azure = Azure.authenticate(new File(\"my.azureauth\")).withDefaultSubscription();\n+```\n+**In new version, this feature has been removed.** If this creates concern on your side, please file an issue to let us know.\n+\n+For detailed information on the benefits of using the new authentication classes, please refer to [this page](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/AUTH.md)\n+\n+## Customized Policy\n+\n+Because of adopting Azure Core which is a shared library across all Azure SDKs, there is also a minor change regarding how customized policy in configured. \n+\n+In old version (`com.microsoft.azure-mgmt-**`), we use `withInterceptor` and pass the customized interceptor class to the Azure object \n+\n+In new version (`com.azure.resourcemanager.**`), we use `WithPolicy` instead and pass the customized policy to the Azure object \n+\n+So:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withInterceptor(new CustomizedInterceptor())\n+    .authenticate(credential)\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withPolicy(new CustomizedPolicy())\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```\n+\n+## Custom HTTP Client\n+\n+Similar to the customized policy, there are changes regarding how the custom HTTP client is configured as well. The re-designed HTTP client builder in the new version is more flexible and the user can choose their own implementation of HTTP client and plug in what they need into the configuration.\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+OkHttpClient.Builder builder = new OkHttpClient.Builder().proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)));\n+RestClient client = new RestClient.Builder(builder, new Retrofit.Builder())\n+    .withCredentials(credential)\n+    .build();\n+\n+Azure azure = Azure.authenticate(client, \"<TenantId>\")\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+HttpClient client = new OkHttpAsyncHttpClientBuilder()\n+    .proxy(new ProxyOptions(ProxyOptions.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)))\n+    .build();\n+\n+Azure azure = Azure.configure()\n+    .withHttpClient(client)\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```    \n+    \n+## Error Handling\n+\n+There is a minor namespace change in the exception class. To be specific, the previous `CloudException` has been re-named to `ManagementException`. \n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+final String resourceGroupName = random(8);\n+try {\n+    ResourceGroup resourceGroup = azure.resourceGroups().getByName(resourceGroupName);\n+} catch (CloudException e) {\n+    System.err.printf(\"Response code: %s%n\", e.body().code());\n+    System.err.printf(\"Response message: %s%n\", e.body().message());\n+}\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+final String resourceGroupName = randomString(\"rg\", 8);\n+try {\n+    ResourceGroup resourceGroup = azure.resourceGroups().getByName(resourceGroupName);\n+} catch (ManagementException e) {\n+    System.err.printf(\"Response code: %s%n\", e.getValue().getCode());\n+    System.err.printf(\"Response message: %s%n\", e.getValue().getMessage());\n+}\n+```\n+\n+## rxJava to Reactor\n+\n+In old version (`com.microsoft.azure-mgmt-**`), `rxJava` is used for non-blocking applications\n+\n+In new version (`com.azure.resourcemanager.**`), we have adopted `Reactor` as the main library in replacement of `rxJava` due to the Azure Core adoption.\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+azure.publicIPAddresses().define(publicIpName).withRegion(region).withExistingResourceGroup(rgName).withLeafDomainLabel(publicIpName).createAsync().flatMap(new Func1 < Indexable, Observable < Indexable >> () {@Override\n+\tpublic Observable < Indexable > call(Indexable indexable) {\n+\t\tif (indexable instanceof PublicIPAddress) {\n+\t\t\tPublicIPAddress publicIp = (PublicIPAddress) indexable;\n+\t\t\t//=============================================================\n+\t\t\t// Create an Internet facing load balancer with\n+\t\t\t// One frontend IP address\n+\t\t\t// Two backend address pools which contain network interfaces for the virtual\n+\t\t\t//  machines to receive HTTP and HTTPS network traffic from the load balancer\n+\t\t\t// Two load balancing rules for HTTP and HTTPS to map public ports on the load\n+\t\t\t//  balancer to ports in the backend address pool\n+\t\t\t// Two probes which contain HTTP and HTTPS health probes used to check availability\n+\t\t\t//  of virtual machines in the backend address pool\n+\t\t\t// Three inbound NAT rules which contain rules that map a public port on the load\n+\t\t\t//  balancer to a port for a specific virtual machine in the backend address pool\n+\t\t\t//  - this provides direct VM connectivity for SSH to port 22 and TELNET to port 23\n+\n+\t\t\tSystem.out.println(\"Creating a Internet facing load balancer with ...\");\n+\t\t\tSystem.out.println(\"- A frontend IP address\");\n+\t\t\tSystem.out.println(\"- Two backend address pools which contain network interfaces for the virtual\\n\" + \"  machines to receive HTTP and HTTPS network traffic from the load balancer\");\n+\t\t\tSystem.out.println(\"- Two load balancing rules for HTTP and HTTPS to map public ports on the load\\n\" + \"  balancer to ports in the backend address pool\");\n+\t\t\tSystem.out.println(\"- Two probes which contain HTTP and HTTPS health probes used to check availability\\n\" + \"  of virtual machines in the backend address pool\");\n+\t\t\tSystem.out.println(\"- Two inbound NAT rules which contain rules that map a public port on the load\\n\" + \"  balancer to a port for a specific virtual machine in the backend address pool\\n\" + \"  - this provides direct VM connectivity for SSH to port 22 and TELNET to port 23\");\n+\n+\t\t\treturn Observable.merge(\n+\t\t\tObservable.just(indexable), azure.loadBalancers().define(loadBalancerName1).withRegion(region).withExistingResourceGroup(rgName)\n+\t\t\t// Add two rules that uses above backend and probe\n+\t\t\t.defineLoadBalancingRule(httpLoadBalancingRule).withProtocol(TransportProtocol.TCP).fromFrontend(frontendName).fromFrontendPort(80).toBackend(backendPoolName1).withProbe(httpProbe).attach().defineLoadBalancingRule(httpsLoadBalancingRule).withProtocol(TransportProtocol.TCP).fromFrontend(frontendName).fromFrontendPort(443).toBackend(backendPoolName2).withProbe(httpsProbe).attach()\n+\t\t\t// Add nat pools to enable direct VM connectivity for\n+\t\t\t//  SSH to port 22 and TELNET to port 23\n+\t\t\t.defineInboundNatPool(natPool50XXto22).withProtocol(TransportProtocol.TCP).fromFrontend(frontendName).fromFrontendPortRange(5000, 5099).toBackendPort(22).attach().defineInboundNatPool(natPool60XXto23).withProtocol(TransportProtocol.TCP).fromFrontend(frontendName).fromFrontendPortRange(6000, 6099).toBackendPort(23).attach()\n+\n+\t\t\t// Explicitly define the frontend\n+\t\t\t.definePublicFrontend(frontendName).withExistingPublicIPAddress(publicIp).attach()\n+\n+\t\t\t// Add two probes one per rule\n+\t\t\t.defineHttpProbe(httpProbe).withRequestPath(\"/\").withPort(80).attach().defineHttpProbe(httpsProbe).withRequestPath(\"/\").withPort(443).attach()\n+\n+\t\t\t.createAsync());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5NDQwOQ=="}, "originalCommit": {"oid": "149b62aa5050c81d3d0b6a21f3953461c977bc30"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkzMzc0Mw==", "bodyText": "the loadbalancer doesn't format, you could just copy the original code to here, I think", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12909#discussion_r451933743", "createdAt": "2020-07-09T02:49:45Z", "author": {"login": "ChenTanyi"}, "path": "sdk/management/docs/MIGRATION_GUIDE.md", "diffHunk": "@@ -0,0 +1,284 @@\n+## Guide for migrating to `com.azure.resourcemanager.**` from `com.microsoft.azure-mgmt-**`\n+\n+This document is intended for users that are familiar with an older version of the Java SDK for managment libraries (`com.microsoft.azure-mgmt-**`) ad wish to migrate their application \n+to the next version of Azure resource management libraries (`com.microsoft.azure-mgmt-**`)\n+\n+For users new to the Java SDK for resource management libraries, please see the [README for 'com.azure.resourcemanager.*`](http://aka.ms/azure-sdk-java-mgmt)\n+\n+## Table of contents\n+\n+* [Prerequisites](#prerequisites)\n+* [Updated Maven depedencies](#updated-maven-dependencies)\n+* [General Changes](#general-changes)\n+  * [Authentication](#authentication)\n+  * [Customized Policy](#customized-policy)\n+  * [Custom HTTP Client](#custom-http-client)\n+  * [Error Handling](#error-handling)\n+  * [rxJava -> Reactor](#rxjava-to-reactor)\n+* [Additional Samples](#additional-samples)\n+\n+## Prerequisites\n+\n+Java Development Kit (JDK) with version 8 or above.\n+\n+## Updated Maven dependencies\n+\n+The latest dependencies for resource management libraries are [available here](https://azure.github.io/azure-sdk/releases/latest/all/java.html). Please look for packages that contains \"azure-resourcemanager\" in the namespace.\n+\n+## General Changes\n+\n+The latest Azure Java SDK for management libraries is a result of our efforts to create a resource management client library that is user-friendly and idiomatic to the Java ecosystem.\n+\n+Apart from redesigns resulting from the [new Azure SDK Design Guidelines for Java](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/DESIGN.md), the latest version improves on several areas from old version.\n+\n+While conforming to the new guideline, we have tried our best to minimize the breaking changes. Most of the interfaces / classes / methods have stayed the same to offer user an easier migration experience.\n+\n+The important breaking changes are listed in the following sections:\n+\n+### Authentication\n+\n+In old version (`com.microsoft.azure-mgmt-**`), ApplicationTokenCredentials is created with all the credential parameters.\n+\n+In new version (`com.azure.resourcemanager.**`), in order to provide an unified authentication based on Azure Identity for all Azure Java SDKs, the authentication mechanism has been re-designed and improved to offer a simpler interface. \n+\n+To the show the code snippets for the change:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+ApplicationTokenCredentials = new ApplicationTokenCredentials(\"<ClientId>\", \"<TenantId>\", \"<ClientSecret>\", AzureEnvironment.AZURE)\n+    .withDefaultSubscriptionId(\"<SubscriptionId>\");\n+```        \n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+TokenCredential credential = new ClientSecretCredentialBuilder()\n+    .clientId(\"<ClientId>\")\n+    .clientSecret(\"<ClientSecret>\")\n+    .tenantId(\"<TenantId>\")\n+    .build();\n+AzureProfile profile = new AzureProfile(\"<TenantId>\", \"<SubscriptionId>\", AzureEnvironment.AZURE);\n+``` \n+\n+In addition to this change, the **support for using auth file has been removed**. In old version, the user can choose to authenticate via the auth file, like this:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+Azure azure = Azure.authenticate(new File(\"my.azureauth\")).withDefaultSubscription();\n+```\n+**In new version, this feature has been removed.** If this creates concern on your side, please file an issue to let us know.\n+\n+For detailed information on the benefits of using the new authentication classes, please refer to [this page](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/AUTH.md)\n+\n+## Customized Policy\n+\n+Because of adopting Azure Core which is a shared library across all Azure SDKs, there is also a minor change regarding how customized policy in configured. \n+\n+In old version (`com.microsoft.azure-mgmt-**`), we use `withInterceptor` and pass the customized interceptor class to the Azure object \n+\n+In new version (`com.azure.resourcemanager.**`), we use `WithPolicy` instead and pass the customized policy to the Azure object \n+\n+So:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withInterceptor(new CustomizedInterceptor())\n+    .authenticate(credential)\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withPolicy(new CustomizedPolicy())\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```\n+\n+## Custom HTTP Client\n+\n+Similar to the customized policy, there are changes regarding how the custom HTTP client is configured as well. The re-designed HTTP client builder in the new version is more flexible and the user can choose their own implementation of HTTP client and plug in what they need into the configuration.\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+OkHttpClient.Builder builder = new OkHttpClient.Builder().proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)));\n+RestClient client = new RestClient.Builder(builder, new Retrofit.Builder())\n+    .withCredentials(credential)\n+    .build();\n+\n+Azure azure = Azure.authenticate(client, \"<TenantId>\")\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+HttpClient client = new OkHttpAsyncHttpClientBuilder()\n+    .proxy(new ProxyOptions(ProxyOptions.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)))\n+    .build();\n+\n+Azure azure = Azure.configure()\n+    .withHttpClient(client)\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```    \n+    \n+## Error Handling\n+\n+There is a minor namespace change in the exception class. To be specific, the previous `CloudException` has been re-named to `ManagementException`. \n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+final String resourceGroupName = random(8);\n+try {\n+    ResourceGroup resourceGroup = azure.resourceGroups().getByName(resourceGroupName);\n+} catch (CloudException e) {\n+    System.err.printf(\"Response code: %s%n\", e.body().code());\n+    System.err.printf(\"Response message: %s%n\", e.body().message());\n+}\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+final String resourceGroupName = randomString(\"rg\", 8);\n+try {\n+    ResourceGroup resourceGroup = azure.resourceGroups().getByName(resourceGroupName);\n+} catch (ManagementException e) {\n+    System.err.printf(\"Response code: %s%n\", e.getValue().getCode());\n+    System.err.printf(\"Response message: %s%n\", e.getValue().getMessage());\n+}\n+```\n+\n+## rxJava to Reactor\n+\n+In old version (`com.microsoft.azure-mgmt-**`), `rxJava` is used for non-blocking applications\n+\n+In new version (`com.azure.resourcemanager.**`), we have adopted `Reactor` as the main library in replacement of `rxJava` due to the Azure Core adoption.\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+azure.publicIPAddresses().define(publicIpName).withRegion(region).withExistingResourceGroup(rgName).withLeafDomainLabel(publicIpName).createAsync().flatMap(new Func1 < Indexable, Observable < Indexable >> () {@Override\n+\tpublic Observable < Indexable > call(Indexable indexable) {\n+\t\tif (indexable instanceof PublicIPAddress) {\n+\t\t\tPublicIPAddress publicIp = (PublicIPAddress) indexable;\n+\t\t\t//=============================================================\n+\t\t\t// Create an Internet facing load balancer with\n+\t\t\t// One frontend IP address\n+\t\t\t// Two backend address pools which contain network interfaces for the virtual\n+\t\t\t//  machines to receive HTTP and HTTPS network traffic from the load balancer\n+\t\t\t// Two load balancing rules for HTTP and HTTPS to map public ports on the load\n+\t\t\t//  balancer to ports in the backend address pool\n+\t\t\t// Two probes which contain HTTP and HTTPS health probes used to check availability\n+\t\t\t//  of virtual machines in the backend address pool\n+\t\t\t// Three inbound NAT rules which contain rules that map a public port on the load\n+\t\t\t//  balancer to a port for a specific virtual machine in the backend address pool\n+\t\t\t//  - this provides direct VM connectivity for SSH to port 22 and TELNET to port 23\n+\n+\t\t\tSystem.out.println(\"Creating a Internet facing load balancer with ...\");\n+\t\t\tSystem.out.println(\"- A frontend IP address\");\n+\t\t\tSystem.out.println(\"- Two backend address pools which contain network interfaces for the virtual\\n\" + \"  machines to receive HTTP and HTTPS network traffic from the load balancer\");\n+\t\t\tSystem.out.println(\"- Two load balancing rules for HTTP and HTTPS to map public ports on the load\\n\" + \"  balancer to ports in the backend address pool\");\n+\t\t\tSystem.out.println(\"- Two probes which contain HTTP and HTTPS health probes used to check availability\\n\" + \"  of virtual machines in the backend address pool\");\n+\t\t\tSystem.out.println(\"- Two inbound NAT rules which contain rules that map a public port on the load\\n\" + \"  balancer to a port for a specific virtual machine in the backend address pool\\n\" + \"  - this provides direct VM connectivity for SSH to port 22 and TELNET to port 23\");\n+\n+\t\t\treturn Observable.merge(\n+\t\t\tObservable.just(indexable), azure.loadBalancers().define(loadBalancerName1).withRegion(region).withExistingResourceGroup(rgName)\n+\t\t\t// Add two rules that uses above backend and probe\n+\t\t\t.defineLoadBalancingRule(httpLoadBalancingRule).withProtocol(TransportProtocol.TCP).fromFrontend(frontendName).fromFrontendPort(80).toBackend(backendPoolName1).withProbe(httpProbe).attach().defineLoadBalancingRule(httpsLoadBalancingRule).withProtocol(TransportProtocol.TCP).fromFrontend(frontendName).fromFrontendPort(443).toBackend(backendPoolName2).withProbe(httpsProbe).attach()\n+\t\t\t// Add nat pools to enable direct VM connectivity for\n+\t\t\t//  SSH to port 22 and TELNET to port 23\n+\t\t\t.defineInboundNatPool(natPool50XXto22).withProtocol(TransportProtocol.TCP).fromFrontend(frontendName).fromFrontendPortRange(5000, 5099).toBackendPort(22).attach().defineInboundNatPool(natPool60XXto23).withProtocol(TransportProtocol.TCP).fromFrontend(frontendName).fromFrontendPortRange(6000, 6099).toBackendPort(23).attach()\n+\n+\t\t\t// Explicitly define the frontend\n+\t\t\t.definePublicFrontend(frontendName).withExistingPublicIPAddress(publicIp).attach()\n+\n+\t\t\t// Add two probes one per rule\n+\t\t\t.defineHttpProbe(httpProbe).withRequestPath(\"/\").withPort(80).attach().defineHttpProbe(httpsProbe).withRequestPath(\"/\").withPort(443).attach()\n+\n+\t\t\t.createAsync());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5NDQwOQ=="}, "originalCommit": {"oid": "149b62aa5050c81d3d0b6a21f3953461c977bc30"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDM3Njg5OnYy", "diffSide": "RIGHT", "path": "sdk/management/docs/MIGRATION_GUIDE.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTowNzozNVrOGufDOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOToyNjoxMVrOGufuZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5NjQwOQ==", "bodyText": "My fault, I think it would be better to use randomString(), same as below. Or just remove these two lines.\nIn addition, you have removed the network creation in track 1, which would not raise exception actually.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12909#discussion_r451396409", "createdAt": "2020-07-08T09:07:35Z", "author": {"login": "ChenTanyi"}, "path": "sdk/management/docs/MIGRATION_GUIDE.md", "diffHunk": "@@ -0,0 +1,284 @@\n+## Guide for migrating to `com.azure.resourcemanager.**` from `com.microsoft.azure-mgmt-**`\n+\n+This document is intended for users that are familiar with an older version of the Java SDK for managment libraries (`com.microsoft.azure-mgmt-**`) ad wish to migrate their application \n+to the next version of Azure resource management libraries (`com.microsoft.azure-mgmt-**`)\n+\n+For users new to the Java SDK for resource management libraries, please see the [README for 'com.azure.resourcemanager.*`](http://aka.ms/azure-sdk-java-mgmt)\n+\n+## Table of contents\n+\n+* [Prerequisites](#prerequisites)\n+* [Updated Maven depedencies](#updated-maven-dependencies)\n+* [General Changes](#general-changes)\n+  * [Authentication](#authentication)\n+  * [Customized Policy](#customized-policy)\n+  * [Custom HTTP Client](#custom-http-client)\n+  * [Error Handling](#error-handling)\n+  * [rxJava -> Reactor](#rxjava-to-reactor)\n+* [Additional Samples](#additional-samples)\n+\n+## Prerequisites\n+\n+Java Development Kit (JDK) with version 8 or above.\n+\n+## Updated Maven dependencies\n+\n+The latest dependencies for resource management libraries are [available here](https://azure.github.io/azure-sdk/releases/latest/all/java.html). Please look for packages that contains \"azure-resourcemanager\" in the namespace.\n+\n+## General Changes\n+\n+The latest Azure Java SDK for management libraries is a result of our efforts to create a resource management client library that is user-friendly and idiomatic to the Java ecosystem.\n+\n+Apart from redesigns resulting from the [new Azure SDK Design Guidelines for Java](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/DESIGN.md), the latest version improves on several areas from old version.\n+\n+While conforming to the new guideline, we have tried our best to minimize the breaking changes. Most of the interfaces / classes / methods have stayed the same to offer user an easier migration experience.\n+\n+The important breaking changes are listed in the following sections:\n+\n+### Authentication\n+\n+In old version (`com.microsoft.azure-mgmt-**`), ApplicationTokenCredentials is created with all the credential parameters.\n+\n+In new version (`com.azure.resourcemanager.**`), in order to provide an unified authentication based on Azure Identity for all Azure Java SDKs, the authentication mechanism has been re-designed and improved to offer a simpler interface. \n+\n+To the show the code snippets for the change:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+ApplicationTokenCredentials = new ApplicationTokenCredentials(\"<ClientId>\", \"<TenantId>\", \"<ClientSecret>\", AzureEnvironment.AZURE)\n+    .withDefaultSubscriptionId(\"<SubscriptionId>\");\n+```        \n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+TokenCredential credential = new ClientSecretCredentialBuilder()\n+    .clientId(\"<ClientId>\")\n+    .clientSecret(\"<ClientSecret>\")\n+    .tenantId(\"<TenantId>\")\n+    .build();\n+AzureProfile profile = new AzureProfile(\"<TenantId>\", \"<SubscriptionId>\", AzureEnvironment.AZURE);\n+``` \n+\n+In addition to this change, the **support for using auth file has been removed**. In old version, the user can choose to authenticate via the auth file, like this:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+Azure azure = Azure.authenticate(new File(\"my.azureauth\")).withDefaultSubscription();\n+```\n+**In new version, this feature has been removed.** If this creates concern on your side, please file an issue to let us know.\n+\n+For detailed information on the benefits of using the new authentication classes, please refer to [this page](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/AUTH.md)\n+\n+## Customized Policy\n+\n+Because of adopting Azure Core which is a shared library across all Azure SDKs, there is also a minor change regarding how customized policy in configured. \n+\n+In old version (`com.microsoft.azure-mgmt-**`), we use `withInterceptor` and pass the customized interceptor class to the Azure object \n+\n+In new version (`com.azure.resourcemanager.**`), we use `WithPolicy` instead and pass the customized policy to the Azure object \n+\n+So:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withInterceptor(new CustomizedInterceptor())\n+    .authenticate(credential)\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withPolicy(new CustomizedPolicy())\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```\n+\n+## Custom HTTP Client\n+\n+Similar to the customized policy, there are changes regarding how the custom HTTP client is configured as well. The re-designed HTTP client builder in the new version is more flexible and the user can choose their own implementation of HTTP client and plug in what they need into the configuration.\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+OkHttpClient.Builder builder = new OkHttpClient.Builder().proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)));\n+RestClient client = new RestClient.Builder(builder, new Retrofit.Builder())\n+    .withCredentials(credential)\n+    .build();\n+\n+Azure azure = Azure.authenticate(client, \"<TenantId>\")\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+HttpClient client = new OkHttpAsyncHttpClientBuilder()\n+    .proxy(new ProxyOptions(ProxyOptions.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)))\n+    .build();\n+\n+Azure azure = Azure.configure()\n+    .withHttpClient(client)\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```    \n+    \n+## Error Handling\n+\n+There is a minor namespace change in the exception class. To be specific, the previous `CloudException` has been re-named to `ManagementException`. \n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+final String resourceGroupName = random(8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "149b62aa5050c81d3d0b6a21f3953461c977bc30"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwNzQ2Mg==", "bodyText": "could you give an example where exception can occur using the same code for track 1 and track 2 ? otherwise this could cause misunderstanding and user might think track 1 and track 2 has different behavior", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12909#discussion_r451407462", "createdAt": "2020-07-08T09:26:11Z", "author": {"login": "nickzhums"}, "path": "sdk/management/docs/MIGRATION_GUIDE.md", "diffHunk": "@@ -0,0 +1,284 @@\n+## Guide for migrating to `com.azure.resourcemanager.**` from `com.microsoft.azure-mgmt-**`\n+\n+This document is intended for users that are familiar with an older version of the Java SDK for managment libraries (`com.microsoft.azure-mgmt-**`) ad wish to migrate their application \n+to the next version of Azure resource management libraries (`com.microsoft.azure-mgmt-**`)\n+\n+For users new to the Java SDK for resource management libraries, please see the [README for 'com.azure.resourcemanager.*`](http://aka.ms/azure-sdk-java-mgmt)\n+\n+## Table of contents\n+\n+* [Prerequisites](#prerequisites)\n+* [Updated Maven depedencies](#updated-maven-dependencies)\n+* [General Changes](#general-changes)\n+  * [Authentication](#authentication)\n+  * [Customized Policy](#customized-policy)\n+  * [Custom HTTP Client](#custom-http-client)\n+  * [Error Handling](#error-handling)\n+  * [rxJava -> Reactor](#rxjava-to-reactor)\n+* [Additional Samples](#additional-samples)\n+\n+## Prerequisites\n+\n+Java Development Kit (JDK) with version 8 or above.\n+\n+## Updated Maven dependencies\n+\n+The latest dependencies for resource management libraries are [available here](https://azure.github.io/azure-sdk/releases/latest/all/java.html). Please look for packages that contains \"azure-resourcemanager\" in the namespace.\n+\n+## General Changes\n+\n+The latest Azure Java SDK for management libraries is a result of our efforts to create a resource management client library that is user-friendly and idiomatic to the Java ecosystem.\n+\n+Apart from redesigns resulting from the [new Azure SDK Design Guidelines for Java](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/DESIGN.md), the latest version improves on several areas from old version.\n+\n+While conforming to the new guideline, we have tried our best to minimize the breaking changes. Most of the interfaces / classes / methods have stayed the same to offer user an easier migration experience.\n+\n+The important breaking changes are listed in the following sections:\n+\n+### Authentication\n+\n+In old version (`com.microsoft.azure-mgmt-**`), ApplicationTokenCredentials is created with all the credential parameters.\n+\n+In new version (`com.azure.resourcemanager.**`), in order to provide an unified authentication based on Azure Identity for all Azure Java SDKs, the authentication mechanism has been re-designed and improved to offer a simpler interface. \n+\n+To the show the code snippets for the change:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+ApplicationTokenCredentials = new ApplicationTokenCredentials(\"<ClientId>\", \"<TenantId>\", \"<ClientSecret>\", AzureEnvironment.AZURE)\n+    .withDefaultSubscriptionId(\"<SubscriptionId>\");\n+```        \n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+TokenCredential credential = new ClientSecretCredentialBuilder()\n+    .clientId(\"<ClientId>\")\n+    .clientSecret(\"<ClientSecret>\")\n+    .tenantId(\"<TenantId>\")\n+    .build();\n+AzureProfile profile = new AzureProfile(\"<TenantId>\", \"<SubscriptionId>\", AzureEnvironment.AZURE);\n+``` \n+\n+In addition to this change, the **support for using auth file has been removed**. In old version, the user can choose to authenticate via the auth file, like this:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+Azure azure = Azure.authenticate(new File(\"my.azureauth\")).withDefaultSubscription();\n+```\n+**In new version, this feature has been removed.** If this creates concern on your side, please file an issue to let us know.\n+\n+For detailed information on the benefits of using the new authentication classes, please refer to [this page](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/AUTH.md)\n+\n+## Customized Policy\n+\n+Because of adopting Azure Core which is a shared library across all Azure SDKs, there is also a minor change regarding how customized policy in configured. \n+\n+In old version (`com.microsoft.azure-mgmt-**`), we use `withInterceptor` and pass the customized interceptor class to the Azure object \n+\n+In new version (`com.azure.resourcemanager.**`), we use `WithPolicy` instead and pass the customized policy to the Azure object \n+\n+So:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withInterceptor(new CustomizedInterceptor())\n+    .authenticate(credential)\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withPolicy(new CustomizedPolicy())\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```\n+\n+## Custom HTTP Client\n+\n+Similar to the customized policy, there are changes regarding how the custom HTTP client is configured as well. The re-designed HTTP client builder in the new version is more flexible and the user can choose their own implementation of HTTP client and plug in what they need into the configuration.\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+OkHttpClient.Builder builder = new OkHttpClient.Builder().proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)));\n+RestClient client = new RestClient.Builder(builder, new Retrofit.Builder())\n+    .withCredentials(credential)\n+    .build();\n+\n+Azure azure = Azure.authenticate(client, \"<TenantId>\")\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+HttpClient client = new OkHttpAsyncHttpClientBuilder()\n+    .proxy(new ProxyOptions(ProxyOptions.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)))\n+    .build();\n+\n+Azure azure = Azure.configure()\n+    .withHttpClient(client)\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```    \n+    \n+## Error Handling\n+\n+There is a minor namespace change in the exception class. To be specific, the previous `CloudException` has been re-named to `ManagementException`. \n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+final String resourceGroupName = random(8);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5NjQwOQ=="}, "originalCommit": {"oid": "149b62aa5050c81d3d0b6a21f3953461c977bc30"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDM3ODQ4OnYy", "diffSide": "RIGHT", "path": "sdk/management/docs/MIGRATION_GUIDE.md", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTowODowMlrOGufENg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTo0NjowOFrOGugcCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5NjY2Mg==", "bodyText": "There could be an issue here.\nI think track1 will not have exception on this. There is a kind of hack in track1 runtime lib that will convert 404 to an empty response. So it will give a null instead of exception.\nTrack2 does not do this hack. So it will be an exception.\nAlmost all service will allow 200 for get method, 404 as error.\nHowever there is one service out there that doing things a bit differently. Appservice would actually allow 404 in their get method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12909#discussion_r451396662", "createdAt": "2020-07-08T09:08:02Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/management/docs/MIGRATION_GUIDE.md", "diffHunk": "@@ -0,0 +1,284 @@\n+## Guide for migrating to `com.azure.resourcemanager.**` from `com.microsoft.azure-mgmt-**`\n+\n+This document is intended for users that are familiar with an older version of the Java SDK for managment libraries (`com.microsoft.azure-mgmt-**`) ad wish to migrate their application \n+to the next version of Azure resource management libraries (`com.microsoft.azure-mgmt-**`)\n+\n+For users new to the Java SDK for resource management libraries, please see the [README for 'com.azure.resourcemanager.*`](http://aka.ms/azure-sdk-java-mgmt)\n+\n+## Table of contents\n+\n+* [Prerequisites](#prerequisites)\n+* [Updated Maven depedencies](#updated-maven-dependencies)\n+* [General Changes](#general-changes)\n+  * [Authentication](#authentication)\n+  * [Customized Policy](#customized-policy)\n+  * [Custom HTTP Client](#custom-http-client)\n+  * [Error Handling](#error-handling)\n+  * [rxJava -> Reactor](#rxjava-to-reactor)\n+* [Additional Samples](#additional-samples)\n+\n+## Prerequisites\n+\n+Java Development Kit (JDK) with version 8 or above.\n+\n+## Updated Maven dependencies\n+\n+The latest dependencies for resource management libraries are [available here](https://azure.github.io/azure-sdk/releases/latest/all/java.html). Please look for packages that contains \"azure-resourcemanager\" in the namespace.\n+\n+## General Changes\n+\n+The latest Azure Java SDK for management libraries is a result of our efforts to create a resource management client library that is user-friendly and idiomatic to the Java ecosystem.\n+\n+Apart from redesigns resulting from the [new Azure SDK Design Guidelines for Java](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/DESIGN.md), the latest version improves on several areas from old version.\n+\n+While conforming to the new guideline, we have tried our best to minimize the breaking changes. Most of the interfaces / classes / methods have stayed the same to offer user an easier migration experience.\n+\n+The important breaking changes are listed in the following sections:\n+\n+### Authentication\n+\n+In old version (`com.microsoft.azure-mgmt-**`), ApplicationTokenCredentials is created with all the credential parameters.\n+\n+In new version (`com.azure.resourcemanager.**`), in order to provide an unified authentication based on Azure Identity for all Azure Java SDKs, the authentication mechanism has been re-designed and improved to offer a simpler interface. \n+\n+To the show the code snippets for the change:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+ApplicationTokenCredentials = new ApplicationTokenCredentials(\"<ClientId>\", \"<TenantId>\", \"<ClientSecret>\", AzureEnvironment.AZURE)\n+    .withDefaultSubscriptionId(\"<SubscriptionId>\");\n+```        \n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+TokenCredential credential = new ClientSecretCredentialBuilder()\n+    .clientId(\"<ClientId>\")\n+    .clientSecret(\"<ClientSecret>\")\n+    .tenantId(\"<TenantId>\")\n+    .build();\n+AzureProfile profile = new AzureProfile(\"<TenantId>\", \"<SubscriptionId>\", AzureEnvironment.AZURE);\n+``` \n+\n+In addition to this change, the **support for using auth file has been removed**. In old version, the user can choose to authenticate via the auth file, like this:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+Azure azure = Azure.authenticate(new File(\"my.azureauth\")).withDefaultSubscription();\n+```\n+**In new version, this feature has been removed.** If this creates concern on your side, please file an issue to let us know.\n+\n+For detailed information on the benefits of using the new authentication classes, please refer to [this page](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/AUTH.md)\n+\n+## Customized Policy\n+\n+Because of adopting Azure Core which is a shared library across all Azure SDKs, there is also a minor change regarding how customized policy in configured. \n+\n+In old version (`com.microsoft.azure-mgmt-**`), we use `withInterceptor` and pass the customized interceptor class to the Azure object \n+\n+In new version (`com.azure.resourcemanager.**`), we use `WithPolicy` instead and pass the customized policy to the Azure object \n+\n+So:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withInterceptor(new CustomizedInterceptor())\n+    .authenticate(credential)\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withPolicy(new CustomizedPolicy())\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```\n+\n+## Custom HTTP Client\n+\n+Similar to the customized policy, there are changes regarding how the custom HTTP client is configured as well. The re-designed HTTP client builder in the new version is more flexible and the user can choose their own implementation of HTTP client and plug in what they need into the configuration.\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+OkHttpClient.Builder builder = new OkHttpClient.Builder().proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)));\n+RestClient client = new RestClient.Builder(builder, new Retrofit.Builder())\n+    .withCredentials(credential)\n+    .build();\n+\n+Azure azure = Azure.authenticate(client, \"<TenantId>\")\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+HttpClient client = new OkHttpAsyncHttpClientBuilder()\n+    .proxy(new ProxyOptions(ProxyOptions.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)))\n+    .build();\n+\n+Azure azure = Azure.configure()\n+    .withHttpClient(client)\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```    \n+    \n+## Error Handling\n+\n+There is a minor namespace change in the exception class. To be specific, the previous `CloudException` has been re-named to `ManagementException`. \n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+final String resourceGroupName = random(8);\n+try {\n+    ResourceGroup resourceGroup = azure.resourceGroups().getByName(resourceGroupName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "149b62aa5050c81d3d0b6a21f3953461c977bc30"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5ODM0OA==", "bodyText": "For one only need to get an exception, I think one can create a resource group with space in name, e.g. \"rg not valid\".", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12909#discussion_r451398348", "createdAt": "2020-07-08T09:11:06Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/management/docs/MIGRATION_GUIDE.md", "diffHunk": "@@ -0,0 +1,284 @@\n+## Guide for migrating to `com.azure.resourcemanager.**` from `com.microsoft.azure-mgmt-**`\n+\n+This document is intended for users that are familiar with an older version of the Java SDK for managment libraries (`com.microsoft.azure-mgmt-**`) ad wish to migrate their application \n+to the next version of Azure resource management libraries (`com.microsoft.azure-mgmt-**`)\n+\n+For users new to the Java SDK for resource management libraries, please see the [README for 'com.azure.resourcemanager.*`](http://aka.ms/azure-sdk-java-mgmt)\n+\n+## Table of contents\n+\n+* [Prerequisites](#prerequisites)\n+* [Updated Maven depedencies](#updated-maven-dependencies)\n+* [General Changes](#general-changes)\n+  * [Authentication](#authentication)\n+  * [Customized Policy](#customized-policy)\n+  * [Custom HTTP Client](#custom-http-client)\n+  * [Error Handling](#error-handling)\n+  * [rxJava -> Reactor](#rxjava-to-reactor)\n+* [Additional Samples](#additional-samples)\n+\n+## Prerequisites\n+\n+Java Development Kit (JDK) with version 8 or above.\n+\n+## Updated Maven dependencies\n+\n+The latest dependencies for resource management libraries are [available here](https://azure.github.io/azure-sdk/releases/latest/all/java.html). Please look for packages that contains \"azure-resourcemanager\" in the namespace.\n+\n+## General Changes\n+\n+The latest Azure Java SDK for management libraries is a result of our efforts to create a resource management client library that is user-friendly and idiomatic to the Java ecosystem.\n+\n+Apart from redesigns resulting from the [new Azure SDK Design Guidelines for Java](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/DESIGN.md), the latest version improves on several areas from old version.\n+\n+While conforming to the new guideline, we have tried our best to minimize the breaking changes. Most of the interfaces / classes / methods have stayed the same to offer user an easier migration experience.\n+\n+The important breaking changes are listed in the following sections:\n+\n+### Authentication\n+\n+In old version (`com.microsoft.azure-mgmt-**`), ApplicationTokenCredentials is created with all the credential parameters.\n+\n+In new version (`com.azure.resourcemanager.**`), in order to provide an unified authentication based on Azure Identity for all Azure Java SDKs, the authentication mechanism has been re-designed and improved to offer a simpler interface. \n+\n+To the show the code snippets for the change:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+ApplicationTokenCredentials = new ApplicationTokenCredentials(\"<ClientId>\", \"<TenantId>\", \"<ClientSecret>\", AzureEnvironment.AZURE)\n+    .withDefaultSubscriptionId(\"<SubscriptionId>\");\n+```        \n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+TokenCredential credential = new ClientSecretCredentialBuilder()\n+    .clientId(\"<ClientId>\")\n+    .clientSecret(\"<ClientSecret>\")\n+    .tenantId(\"<TenantId>\")\n+    .build();\n+AzureProfile profile = new AzureProfile(\"<TenantId>\", \"<SubscriptionId>\", AzureEnvironment.AZURE);\n+``` \n+\n+In addition to this change, the **support for using auth file has been removed**. In old version, the user can choose to authenticate via the auth file, like this:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+Azure azure = Azure.authenticate(new File(\"my.azureauth\")).withDefaultSubscription();\n+```\n+**In new version, this feature has been removed.** If this creates concern on your side, please file an issue to let us know.\n+\n+For detailed information on the benefits of using the new authentication classes, please refer to [this page](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/AUTH.md)\n+\n+## Customized Policy\n+\n+Because of adopting Azure Core which is a shared library across all Azure SDKs, there is also a minor change regarding how customized policy in configured. \n+\n+In old version (`com.microsoft.azure-mgmt-**`), we use `withInterceptor` and pass the customized interceptor class to the Azure object \n+\n+In new version (`com.azure.resourcemanager.**`), we use `WithPolicy` instead and pass the customized policy to the Azure object \n+\n+So:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withInterceptor(new CustomizedInterceptor())\n+    .authenticate(credential)\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withPolicy(new CustomizedPolicy())\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```\n+\n+## Custom HTTP Client\n+\n+Similar to the customized policy, there are changes regarding how the custom HTTP client is configured as well. The re-designed HTTP client builder in the new version is more flexible and the user can choose their own implementation of HTTP client and plug in what they need into the configuration.\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+OkHttpClient.Builder builder = new OkHttpClient.Builder().proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)));\n+RestClient client = new RestClient.Builder(builder, new Retrofit.Builder())\n+    .withCredentials(credential)\n+    .build();\n+\n+Azure azure = Azure.authenticate(client, \"<TenantId>\")\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+HttpClient client = new OkHttpAsyncHttpClientBuilder()\n+    .proxy(new ProxyOptions(ProxyOptions.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)))\n+    .build();\n+\n+Azure azure = Azure.configure()\n+    .withHttpClient(client)\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```    \n+    \n+## Error Handling\n+\n+There is a minor namespace change in the exception class. To be specific, the previous `CloudException` has been re-named to `ManagementException`. \n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+final String resourceGroupName = random(8);\n+try {\n+    ResourceGroup resourceGroup = azure.resourceGroups().getByName(resourceGroupName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5NjY2Mg=="}, "originalCommit": {"oid": "149b62aa5050c81d3d0b6a21f3953461c977bc30"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwMDA0NA==", "bodyText": "Oh, yes. I think it could be better.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12909#discussion_r451400044", "createdAt": "2020-07-08T09:13:59Z", "author": {"login": "ChenTanyi"}, "path": "sdk/management/docs/MIGRATION_GUIDE.md", "diffHunk": "@@ -0,0 +1,284 @@\n+## Guide for migrating to `com.azure.resourcemanager.**` from `com.microsoft.azure-mgmt-**`\n+\n+This document is intended for users that are familiar with an older version of the Java SDK for managment libraries (`com.microsoft.azure-mgmt-**`) ad wish to migrate their application \n+to the next version of Azure resource management libraries (`com.microsoft.azure-mgmt-**`)\n+\n+For users new to the Java SDK for resource management libraries, please see the [README for 'com.azure.resourcemanager.*`](http://aka.ms/azure-sdk-java-mgmt)\n+\n+## Table of contents\n+\n+* [Prerequisites](#prerequisites)\n+* [Updated Maven depedencies](#updated-maven-dependencies)\n+* [General Changes](#general-changes)\n+  * [Authentication](#authentication)\n+  * [Customized Policy](#customized-policy)\n+  * [Custom HTTP Client](#custom-http-client)\n+  * [Error Handling](#error-handling)\n+  * [rxJava -> Reactor](#rxjava-to-reactor)\n+* [Additional Samples](#additional-samples)\n+\n+## Prerequisites\n+\n+Java Development Kit (JDK) with version 8 or above.\n+\n+## Updated Maven dependencies\n+\n+The latest dependencies for resource management libraries are [available here](https://azure.github.io/azure-sdk/releases/latest/all/java.html). Please look for packages that contains \"azure-resourcemanager\" in the namespace.\n+\n+## General Changes\n+\n+The latest Azure Java SDK for management libraries is a result of our efforts to create a resource management client library that is user-friendly and idiomatic to the Java ecosystem.\n+\n+Apart from redesigns resulting from the [new Azure SDK Design Guidelines for Java](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/DESIGN.md), the latest version improves on several areas from old version.\n+\n+While conforming to the new guideline, we have tried our best to minimize the breaking changes. Most of the interfaces / classes / methods have stayed the same to offer user an easier migration experience.\n+\n+The important breaking changes are listed in the following sections:\n+\n+### Authentication\n+\n+In old version (`com.microsoft.azure-mgmt-**`), ApplicationTokenCredentials is created with all the credential parameters.\n+\n+In new version (`com.azure.resourcemanager.**`), in order to provide an unified authentication based on Azure Identity for all Azure Java SDKs, the authentication mechanism has been re-designed and improved to offer a simpler interface. \n+\n+To the show the code snippets for the change:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+ApplicationTokenCredentials = new ApplicationTokenCredentials(\"<ClientId>\", \"<TenantId>\", \"<ClientSecret>\", AzureEnvironment.AZURE)\n+    .withDefaultSubscriptionId(\"<SubscriptionId>\");\n+```        \n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+TokenCredential credential = new ClientSecretCredentialBuilder()\n+    .clientId(\"<ClientId>\")\n+    .clientSecret(\"<ClientSecret>\")\n+    .tenantId(\"<TenantId>\")\n+    .build();\n+AzureProfile profile = new AzureProfile(\"<TenantId>\", \"<SubscriptionId>\", AzureEnvironment.AZURE);\n+``` \n+\n+In addition to this change, the **support for using auth file has been removed**. In old version, the user can choose to authenticate via the auth file, like this:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+Azure azure = Azure.authenticate(new File(\"my.azureauth\")).withDefaultSubscription();\n+```\n+**In new version, this feature has been removed.** If this creates concern on your side, please file an issue to let us know.\n+\n+For detailed information on the benefits of using the new authentication classes, please refer to [this page](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/AUTH.md)\n+\n+## Customized Policy\n+\n+Because of adopting Azure Core which is a shared library across all Azure SDKs, there is also a minor change regarding how customized policy in configured. \n+\n+In old version (`com.microsoft.azure-mgmt-**`), we use `withInterceptor` and pass the customized interceptor class to the Azure object \n+\n+In new version (`com.azure.resourcemanager.**`), we use `WithPolicy` instead and pass the customized policy to the Azure object \n+\n+So:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withInterceptor(new CustomizedInterceptor())\n+    .authenticate(credential)\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withPolicy(new CustomizedPolicy())\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```\n+\n+## Custom HTTP Client\n+\n+Similar to the customized policy, there are changes regarding how the custom HTTP client is configured as well. The re-designed HTTP client builder in the new version is more flexible and the user can choose their own implementation of HTTP client and plug in what they need into the configuration.\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+OkHttpClient.Builder builder = new OkHttpClient.Builder().proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)));\n+RestClient client = new RestClient.Builder(builder, new Retrofit.Builder())\n+    .withCredentials(credential)\n+    .build();\n+\n+Azure azure = Azure.authenticate(client, \"<TenantId>\")\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+HttpClient client = new OkHttpAsyncHttpClientBuilder()\n+    .proxy(new ProxyOptions(ProxyOptions.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)))\n+    .build();\n+\n+Azure azure = Azure.configure()\n+    .withHttpClient(client)\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```    \n+    \n+## Error Handling\n+\n+There is a minor namespace change in the exception class. To be specific, the previous `CloudException` has been re-named to `ManagementException`. \n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+final String resourceGroupName = random(8);\n+try {\n+    ResourceGroup resourceGroup = azure.resourceGroups().getByName(resourceGroupName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5NjY2Mg=="}, "originalCommit": {"oid": "149b62aa5050c81d3d0b6a21f3953461c977bc30"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwMDMzNw==", "bodyText": "@nickzhums updated in sample", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12909#discussion_r451400337", "createdAt": "2020-07-08T09:14:28Z", "author": {"login": "ChenTanyi"}, "path": "sdk/management/docs/MIGRATION_GUIDE.md", "diffHunk": "@@ -0,0 +1,284 @@\n+## Guide for migrating to `com.azure.resourcemanager.**` from `com.microsoft.azure-mgmt-**`\n+\n+This document is intended for users that are familiar with an older version of the Java SDK for managment libraries (`com.microsoft.azure-mgmt-**`) ad wish to migrate their application \n+to the next version of Azure resource management libraries (`com.microsoft.azure-mgmt-**`)\n+\n+For users new to the Java SDK for resource management libraries, please see the [README for 'com.azure.resourcemanager.*`](http://aka.ms/azure-sdk-java-mgmt)\n+\n+## Table of contents\n+\n+* [Prerequisites](#prerequisites)\n+* [Updated Maven depedencies](#updated-maven-dependencies)\n+* [General Changes](#general-changes)\n+  * [Authentication](#authentication)\n+  * [Customized Policy](#customized-policy)\n+  * [Custom HTTP Client](#custom-http-client)\n+  * [Error Handling](#error-handling)\n+  * [rxJava -> Reactor](#rxjava-to-reactor)\n+* [Additional Samples](#additional-samples)\n+\n+## Prerequisites\n+\n+Java Development Kit (JDK) with version 8 or above.\n+\n+## Updated Maven dependencies\n+\n+The latest dependencies for resource management libraries are [available here](https://azure.github.io/azure-sdk/releases/latest/all/java.html). Please look for packages that contains \"azure-resourcemanager\" in the namespace.\n+\n+## General Changes\n+\n+The latest Azure Java SDK for management libraries is a result of our efforts to create a resource management client library that is user-friendly and idiomatic to the Java ecosystem.\n+\n+Apart from redesigns resulting from the [new Azure SDK Design Guidelines for Java](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/DESIGN.md), the latest version improves on several areas from old version.\n+\n+While conforming to the new guideline, we have tried our best to minimize the breaking changes. Most of the interfaces / classes / methods have stayed the same to offer user an easier migration experience.\n+\n+The important breaking changes are listed in the following sections:\n+\n+### Authentication\n+\n+In old version (`com.microsoft.azure-mgmt-**`), ApplicationTokenCredentials is created with all the credential parameters.\n+\n+In new version (`com.azure.resourcemanager.**`), in order to provide an unified authentication based on Azure Identity for all Azure Java SDKs, the authentication mechanism has been re-designed and improved to offer a simpler interface. \n+\n+To the show the code snippets for the change:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+ApplicationTokenCredentials = new ApplicationTokenCredentials(\"<ClientId>\", \"<TenantId>\", \"<ClientSecret>\", AzureEnvironment.AZURE)\n+    .withDefaultSubscriptionId(\"<SubscriptionId>\");\n+```        \n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+TokenCredential credential = new ClientSecretCredentialBuilder()\n+    .clientId(\"<ClientId>\")\n+    .clientSecret(\"<ClientSecret>\")\n+    .tenantId(\"<TenantId>\")\n+    .build();\n+AzureProfile profile = new AzureProfile(\"<TenantId>\", \"<SubscriptionId>\", AzureEnvironment.AZURE);\n+``` \n+\n+In addition to this change, the **support for using auth file has been removed**. In old version, the user can choose to authenticate via the auth file, like this:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+Azure azure = Azure.authenticate(new File(\"my.azureauth\")).withDefaultSubscription();\n+```\n+**In new version, this feature has been removed.** If this creates concern on your side, please file an issue to let us know.\n+\n+For detailed information on the benefits of using the new authentication classes, please refer to [this page](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/AUTH.md)\n+\n+## Customized Policy\n+\n+Because of adopting Azure Core which is a shared library across all Azure SDKs, there is also a minor change regarding how customized policy in configured. \n+\n+In old version (`com.microsoft.azure-mgmt-**`), we use `withInterceptor` and pass the customized interceptor class to the Azure object \n+\n+In new version (`com.azure.resourcemanager.**`), we use `WithPolicy` instead and pass the customized policy to the Azure object \n+\n+So:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withInterceptor(new CustomizedInterceptor())\n+    .authenticate(credential)\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withPolicy(new CustomizedPolicy())\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```\n+\n+## Custom HTTP Client\n+\n+Similar to the customized policy, there are changes regarding how the custom HTTP client is configured as well. The re-designed HTTP client builder in the new version is more flexible and the user can choose their own implementation of HTTP client and plug in what they need into the configuration.\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+OkHttpClient.Builder builder = new OkHttpClient.Builder().proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)));\n+RestClient client = new RestClient.Builder(builder, new Retrofit.Builder())\n+    .withCredentials(credential)\n+    .build();\n+\n+Azure azure = Azure.authenticate(client, \"<TenantId>\")\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+HttpClient client = new OkHttpAsyncHttpClientBuilder()\n+    .proxy(new ProxyOptions(ProxyOptions.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)))\n+    .build();\n+\n+Azure azure = Azure.configure()\n+    .withHttpClient(client)\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```    \n+    \n+## Error Handling\n+\n+There is a minor namespace change in the exception class. To be specific, the previous `CloudException` has been re-named to `ManagementException`. \n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+final String resourceGroupName = random(8);\n+try {\n+    ResourceGroup resourceGroup = azure.resourceGroups().getByName(resourceGroupName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5NjY2Mg=="}, "originalCommit": {"oid": "149b62aa5050c81d3d0b6a21f3953461c977bc30"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwODQ1Mg==", "bodyText": "this sounds more than just namespace change - maybe we could use a different example? or does this actually cause problem for customer?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12909#discussion_r451408452", "createdAt": "2020-07-08T09:27:49Z", "author": {"login": "nickzhums"}, "path": "sdk/management/docs/MIGRATION_GUIDE.md", "diffHunk": "@@ -0,0 +1,284 @@\n+## Guide for migrating to `com.azure.resourcemanager.**` from `com.microsoft.azure-mgmt-**`\n+\n+This document is intended for users that are familiar with an older version of the Java SDK for managment libraries (`com.microsoft.azure-mgmt-**`) ad wish to migrate their application \n+to the next version of Azure resource management libraries (`com.microsoft.azure-mgmt-**`)\n+\n+For users new to the Java SDK for resource management libraries, please see the [README for 'com.azure.resourcemanager.*`](http://aka.ms/azure-sdk-java-mgmt)\n+\n+## Table of contents\n+\n+* [Prerequisites](#prerequisites)\n+* [Updated Maven depedencies](#updated-maven-dependencies)\n+* [General Changes](#general-changes)\n+  * [Authentication](#authentication)\n+  * [Customized Policy](#customized-policy)\n+  * [Custom HTTP Client](#custom-http-client)\n+  * [Error Handling](#error-handling)\n+  * [rxJava -> Reactor](#rxjava-to-reactor)\n+* [Additional Samples](#additional-samples)\n+\n+## Prerequisites\n+\n+Java Development Kit (JDK) with version 8 or above.\n+\n+## Updated Maven dependencies\n+\n+The latest dependencies for resource management libraries are [available here](https://azure.github.io/azure-sdk/releases/latest/all/java.html). Please look for packages that contains \"azure-resourcemanager\" in the namespace.\n+\n+## General Changes\n+\n+The latest Azure Java SDK for management libraries is a result of our efforts to create a resource management client library that is user-friendly and idiomatic to the Java ecosystem.\n+\n+Apart from redesigns resulting from the [new Azure SDK Design Guidelines for Java](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/DESIGN.md), the latest version improves on several areas from old version.\n+\n+While conforming to the new guideline, we have tried our best to minimize the breaking changes. Most of the interfaces / classes / methods have stayed the same to offer user an easier migration experience.\n+\n+The important breaking changes are listed in the following sections:\n+\n+### Authentication\n+\n+In old version (`com.microsoft.azure-mgmt-**`), ApplicationTokenCredentials is created with all the credential parameters.\n+\n+In new version (`com.azure.resourcemanager.**`), in order to provide an unified authentication based on Azure Identity for all Azure Java SDKs, the authentication mechanism has been re-designed and improved to offer a simpler interface. \n+\n+To the show the code snippets for the change:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+ApplicationTokenCredentials = new ApplicationTokenCredentials(\"<ClientId>\", \"<TenantId>\", \"<ClientSecret>\", AzureEnvironment.AZURE)\n+    .withDefaultSubscriptionId(\"<SubscriptionId>\");\n+```        \n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+TokenCredential credential = new ClientSecretCredentialBuilder()\n+    .clientId(\"<ClientId>\")\n+    .clientSecret(\"<ClientSecret>\")\n+    .tenantId(\"<TenantId>\")\n+    .build();\n+AzureProfile profile = new AzureProfile(\"<TenantId>\", \"<SubscriptionId>\", AzureEnvironment.AZURE);\n+``` \n+\n+In addition to this change, the **support for using auth file has been removed**. In old version, the user can choose to authenticate via the auth file, like this:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+Azure azure = Azure.authenticate(new File(\"my.azureauth\")).withDefaultSubscription();\n+```\n+**In new version, this feature has been removed.** If this creates concern on your side, please file an issue to let us know.\n+\n+For detailed information on the benefits of using the new authentication classes, please refer to [this page](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/AUTH.md)\n+\n+## Customized Policy\n+\n+Because of adopting Azure Core which is a shared library across all Azure SDKs, there is also a minor change regarding how customized policy in configured. \n+\n+In old version (`com.microsoft.azure-mgmt-**`), we use `withInterceptor` and pass the customized interceptor class to the Azure object \n+\n+In new version (`com.azure.resourcemanager.**`), we use `WithPolicy` instead and pass the customized policy to the Azure object \n+\n+So:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withInterceptor(new CustomizedInterceptor())\n+    .authenticate(credential)\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withPolicy(new CustomizedPolicy())\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```\n+\n+## Custom HTTP Client\n+\n+Similar to the customized policy, there are changes regarding how the custom HTTP client is configured as well. The re-designed HTTP client builder in the new version is more flexible and the user can choose their own implementation of HTTP client and plug in what they need into the configuration.\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+OkHttpClient.Builder builder = new OkHttpClient.Builder().proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)));\n+RestClient client = new RestClient.Builder(builder, new Retrofit.Builder())\n+    .withCredentials(credential)\n+    .build();\n+\n+Azure azure = Azure.authenticate(client, \"<TenantId>\")\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+HttpClient client = new OkHttpAsyncHttpClientBuilder()\n+    .proxy(new ProxyOptions(ProxyOptions.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)))\n+    .build();\n+\n+Azure azure = Azure.configure()\n+    .withHttpClient(client)\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```    \n+    \n+## Error Handling\n+\n+There is a minor namespace change in the exception class. To be specific, the previous `CloudException` has been re-named to `ManagementException`. \n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+final String resourceGroupName = random(8);\n+try {\n+    ResourceGroup resourceGroup = azure.resourceGroups().getByName(resourceGroupName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5NjY2Mg=="}, "originalCommit": {"oid": "149b62aa5050c81d3d0b6a21f3953461c977bc30"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxMTA2Mg==", "bodyText": "It is a change on what is an error.\nTrack1 has a hack that if it is GET http method, and response is 404, it returns empty, but not take it as exception, even service specifies that 404 is error.\nTrack2 removed this (or, not adding this hack).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12909#discussion_r451411062", "createdAt": "2020-07-08T09:32:09Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/management/docs/MIGRATION_GUIDE.md", "diffHunk": "@@ -0,0 +1,284 @@\n+## Guide for migrating to `com.azure.resourcemanager.**` from `com.microsoft.azure-mgmt-**`\n+\n+This document is intended for users that are familiar with an older version of the Java SDK for managment libraries (`com.microsoft.azure-mgmt-**`) ad wish to migrate their application \n+to the next version of Azure resource management libraries (`com.microsoft.azure-mgmt-**`)\n+\n+For users new to the Java SDK for resource management libraries, please see the [README for 'com.azure.resourcemanager.*`](http://aka.ms/azure-sdk-java-mgmt)\n+\n+## Table of contents\n+\n+* [Prerequisites](#prerequisites)\n+* [Updated Maven depedencies](#updated-maven-dependencies)\n+* [General Changes](#general-changes)\n+  * [Authentication](#authentication)\n+  * [Customized Policy](#customized-policy)\n+  * [Custom HTTP Client](#custom-http-client)\n+  * [Error Handling](#error-handling)\n+  * [rxJava -> Reactor](#rxjava-to-reactor)\n+* [Additional Samples](#additional-samples)\n+\n+## Prerequisites\n+\n+Java Development Kit (JDK) with version 8 or above.\n+\n+## Updated Maven dependencies\n+\n+The latest dependencies for resource management libraries are [available here](https://azure.github.io/azure-sdk/releases/latest/all/java.html). Please look for packages that contains \"azure-resourcemanager\" in the namespace.\n+\n+## General Changes\n+\n+The latest Azure Java SDK for management libraries is a result of our efforts to create a resource management client library that is user-friendly and idiomatic to the Java ecosystem.\n+\n+Apart from redesigns resulting from the [new Azure SDK Design Guidelines for Java](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/DESIGN.md), the latest version improves on several areas from old version.\n+\n+While conforming to the new guideline, we have tried our best to minimize the breaking changes. Most of the interfaces / classes / methods have stayed the same to offer user an easier migration experience.\n+\n+The important breaking changes are listed in the following sections:\n+\n+### Authentication\n+\n+In old version (`com.microsoft.azure-mgmt-**`), ApplicationTokenCredentials is created with all the credential parameters.\n+\n+In new version (`com.azure.resourcemanager.**`), in order to provide an unified authentication based on Azure Identity for all Azure Java SDKs, the authentication mechanism has been re-designed and improved to offer a simpler interface. \n+\n+To the show the code snippets for the change:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+ApplicationTokenCredentials = new ApplicationTokenCredentials(\"<ClientId>\", \"<TenantId>\", \"<ClientSecret>\", AzureEnvironment.AZURE)\n+    .withDefaultSubscriptionId(\"<SubscriptionId>\");\n+```        \n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+TokenCredential credential = new ClientSecretCredentialBuilder()\n+    .clientId(\"<ClientId>\")\n+    .clientSecret(\"<ClientSecret>\")\n+    .tenantId(\"<TenantId>\")\n+    .build();\n+AzureProfile profile = new AzureProfile(\"<TenantId>\", \"<SubscriptionId>\", AzureEnvironment.AZURE);\n+``` \n+\n+In addition to this change, the **support for using auth file has been removed**. In old version, the user can choose to authenticate via the auth file, like this:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+Azure azure = Azure.authenticate(new File(\"my.azureauth\")).withDefaultSubscription();\n+```\n+**In new version, this feature has been removed.** If this creates concern on your side, please file an issue to let us know.\n+\n+For detailed information on the benefits of using the new authentication classes, please refer to [this page](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/AUTH.md)\n+\n+## Customized Policy\n+\n+Because of adopting Azure Core which is a shared library across all Azure SDKs, there is also a minor change regarding how customized policy in configured. \n+\n+In old version (`com.microsoft.azure-mgmt-**`), we use `withInterceptor` and pass the customized interceptor class to the Azure object \n+\n+In new version (`com.azure.resourcemanager.**`), we use `WithPolicy` instead and pass the customized policy to the Azure object \n+\n+So:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withInterceptor(new CustomizedInterceptor())\n+    .authenticate(credential)\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withPolicy(new CustomizedPolicy())\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```\n+\n+## Custom HTTP Client\n+\n+Similar to the customized policy, there are changes regarding how the custom HTTP client is configured as well. The re-designed HTTP client builder in the new version is more flexible and the user can choose their own implementation of HTTP client and plug in what they need into the configuration.\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+OkHttpClient.Builder builder = new OkHttpClient.Builder().proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)));\n+RestClient client = new RestClient.Builder(builder, new Retrofit.Builder())\n+    .withCredentials(credential)\n+    .build();\n+\n+Azure azure = Azure.authenticate(client, \"<TenantId>\")\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+HttpClient client = new OkHttpAsyncHttpClientBuilder()\n+    .proxy(new ProxyOptions(ProxyOptions.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)))\n+    .build();\n+\n+Azure azure = Azure.configure()\n+    .withHttpClient(client)\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```    \n+    \n+## Error Handling\n+\n+There is a minor namespace change in the exception class. To be specific, the previous `CloudException` has been re-named to `ManagementException`. \n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+final String resourceGroupName = random(8);\n+try {\n+    ResourceGroup resourceGroup = azure.resourceGroups().getByName(resourceGroupName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5NjY2Mg=="}, "originalCommit": {"oid": "149b62aa5050c81d3d0b6a21f3953461c977bc30"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxNDkwOQ==", "bodyText": "got it, can we use a different example then, e..g. creating a resource group that has invalid namespace or something like that", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12909#discussion_r451414909", "createdAt": "2020-07-08T09:38:42Z", "author": {"login": "nickzhums"}, "path": "sdk/management/docs/MIGRATION_GUIDE.md", "diffHunk": "@@ -0,0 +1,284 @@\n+## Guide for migrating to `com.azure.resourcemanager.**` from `com.microsoft.azure-mgmt-**`\n+\n+This document is intended for users that are familiar with an older version of the Java SDK for managment libraries (`com.microsoft.azure-mgmt-**`) ad wish to migrate their application \n+to the next version of Azure resource management libraries (`com.microsoft.azure-mgmt-**`)\n+\n+For users new to the Java SDK for resource management libraries, please see the [README for 'com.azure.resourcemanager.*`](http://aka.ms/azure-sdk-java-mgmt)\n+\n+## Table of contents\n+\n+* [Prerequisites](#prerequisites)\n+* [Updated Maven depedencies](#updated-maven-dependencies)\n+* [General Changes](#general-changes)\n+  * [Authentication](#authentication)\n+  * [Customized Policy](#customized-policy)\n+  * [Custom HTTP Client](#custom-http-client)\n+  * [Error Handling](#error-handling)\n+  * [rxJava -> Reactor](#rxjava-to-reactor)\n+* [Additional Samples](#additional-samples)\n+\n+## Prerequisites\n+\n+Java Development Kit (JDK) with version 8 or above.\n+\n+## Updated Maven dependencies\n+\n+The latest dependencies for resource management libraries are [available here](https://azure.github.io/azure-sdk/releases/latest/all/java.html). Please look for packages that contains \"azure-resourcemanager\" in the namespace.\n+\n+## General Changes\n+\n+The latest Azure Java SDK for management libraries is a result of our efforts to create a resource management client library that is user-friendly and idiomatic to the Java ecosystem.\n+\n+Apart from redesigns resulting from the [new Azure SDK Design Guidelines for Java](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/DESIGN.md), the latest version improves on several areas from old version.\n+\n+While conforming to the new guideline, we have tried our best to minimize the breaking changes. Most of the interfaces / classes / methods have stayed the same to offer user an easier migration experience.\n+\n+The important breaking changes are listed in the following sections:\n+\n+### Authentication\n+\n+In old version (`com.microsoft.azure-mgmt-**`), ApplicationTokenCredentials is created with all the credential parameters.\n+\n+In new version (`com.azure.resourcemanager.**`), in order to provide an unified authentication based on Azure Identity for all Azure Java SDKs, the authentication mechanism has been re-designed and improved to offer a simpler interface. \n+\n+To the show the code snippets for the change:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+ApplicationTokenCredentials = new ApplicationTokenCredentials(\"<ClientId>\", \"<TenantId>\", \"<ClientSecret>\", AzureEnvironment.AZURE)\n+    .withDefaultSubscriptionId(\"<SubscriptionId>\");\n+```        \n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+TokenCredential credential = new ClientSecretCredentialBuilder()\n+    .clientId(\"<ClientId>\")\n+    .clientSecret(\"<ClientSecret>\")\n+    .tenantId(\"<TenantId>\")\n+    .build();\n+AzureProfile profile = new AzureProfile(\"<TenantId>\", \"<SubscriptionId>\", AzureEnvironment.AZURE);\n+``` \n+\n+In addition to this change, the **support for using auth file has been removed**. In old version, the user can choose to authenticate via the auth file, like this:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+Azure azure = Azure.authenticate(new File(\"my.azureauth\")).withDefaultSubscription();\n+```\n+**In new version, this feature has been removed.** If this creates concern on your side, please file an issue to let us know.\n+\n+For detailed information on the benefits of using the new authentication classes, please refer to [this page](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/AUTH.md)\n+\n+## Customized Policy\n+\n+Because of adopting Azure Core which is a shared library across all Azure SDKs, there is also a minor change regarding how customized policy in configured. \n+\n+In old version (`com.microsoft.azure-mgmt-**`), we use `withInterceptor` and pass the customized interceptor class to the Azure object \n+\n+In new version (`com.azure.resourcemanager.**`), we use `WithPolicy` instead and pass the customized policy to the Azure object \n+\n+So:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withInterceptor(new CustomizedInterceptor())\n+    .authenticate(credential)\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withPolicy(new CustomizedPolicy())\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```\n+\n+## Custom HTTP Client\n+\n+Similar to the customized policy, there are changes regarding how the custom HTTP client is configured as well. The re-designed HTTP client builder in the new version is more flexible and the user can choose their own implementation of HTTP client and plug in what they need into the configuration.\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+OkHttpClient.Builder builder = new OkHttpClient.Builder().proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)));\n+RestClient client = new RestClient.Builder(builder, new Retrofit.Builder())\n+    .withCredentials(credential)\n+    .build();\n+\n+Azure azure = Azure.authenticate(client, \"<TenantId>\")\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+HttpClient client = new OkHttpAsyncHttpClientBuilder()\n+    .proxy(new ProxyOptions(ProxyOptions.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)))\n+    .build();\n+\n+Azure azure = Azure.configure()\n+    .withHttpClient(client)\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```    \n+    \n+## Error Handling\n+\n+There is a minor namespace change in the exception class. To be specific, the previous `CloudException` has been re-named to `ManagementException`. \n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+final String resourceGroupName = random(8);\n+try {\n+    ResourceGroup resourceGroup = azure.resourceGroups().getByName(resourceGroupName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5NjY2Mg=="}, "originalCommit": {"oid": "149b62aa5050c81d3d0b6a21f3953461c977bc30"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxOTE0NA==", "bodyText": "Tanyi already updated the sample:\nhttps://github.com/Azure-Samples/java-management/blob/migration-guide/src/main/java/com/azure/resourcemanager/samples/ResourceManager.java#L84-L93\nIgnore the assert line. It is code 400.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12909#discussion_r451419144", "createdAt": "2020-07-08T09:46:08Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/management/docs/MIGRATION_GUIDE.md", "diffHunk": "@@ -0,0 +1,284 @@\n+## Guide for migrating to `com.azure.resourcemanager.**` from `com.microsoft.azure-mgmt-**`\n+\n+This document is intended for users that are familiar with an older version of the Java SDK for managment libraries (`com.microsoft.azure-mgmt-**`) ad wish to migrate their application \n+to the next version of Azure resource management libraries (`com.microsoft.azure-mgmt-**`)\n+\n+For users new to the Java SDK for resource management libraries, please see the [README for 'com.azure.resourcemanager.*`](http://aka.ms/azure-sdk-java-mgmt)\n+\n+## Table of contents\n+\n+* [Prerequisites](#prerequisites)\n+* [Updated Maven depedencies](#updated-maven-dependencies)\n+* [General Changes](#general-changes)\n+  * [Authentication](#authentication)\n+  * [Customized Policy](#customized-policy)\n+  * [Custom HTTP Client](#custom-http-client)\n+  * [Error Handling](#error-handling)\n+  * [rxJava -> Reactor](#rxjava-to-reactor)\n+* [Additional Samples](#additional-samples)\n+\n+## Prerequisites\n+\n+Java Development Kit (JDK) with version 8 or above.\n+\n+## Updated Maven dependencies\n+\n+The latest dependencies for resource management libraries are [available here](https://azure.github.io/azure-sdk/releases/latest/all/java.html). Please look for packages that contains \"azure-resourcemanager\" in the namespace.\n+\n+## General Changes\n+\n+The latest Azure Java SDK for management libraries is a result of our efforts to create a resource management client library that is user-friendly and idiomatic to the Java ecosystem.\n+\n+Apart from redesigns resulting from the [new Azure SDK Design Guidelines for Java](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/DESIGN.md), the latest version improves on several areas from old version.\n+\n+While conforming to the new guideline, we have tried our best to minimize the breaking changes. Most of the interfaces / classes / methods have stayed the same to offer user an easier migration experience.\n+\n+The important breaking changes are listed in the following sections:\n+\n+### Authentication\n+\n+In old version (`com.microsoft.azure-mgmt-**`), ApplicationTokenCredentials is created with all the credential parameters.\n+\n+In new version (`com.azure.resourcemanager.**`), in order to provide an unified authentication based on Azure Identity for all Azure Java SDKs, the authentication mechanism has been re-designed and improved to offer a simpler interface. \n+\n+To the show the code snippets for the change:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+ApplicationTokenCredentials = new ApplicationTokenCredentials(\"<ClientId>\", \"<TenantId>\", \"<ClientSecret>\", AzureEnvironment.AZURE)\n+    .withDefaultSubscriptionId(\"<SubscriptionId>\");\n+```        \n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+TokenCredential credential = new ClientSecretCredentialBuilder()\n+    .clientId(\"<ClientId>\")\n+    .clientSecret(\"<ClientSecret>\")\n+    .tenantId(\"<TenantId>\")\n+    .build();\n+AzureProfile profile = new AzureProfile(\"<TenantId>\", \"<SubscriptionId>\", AzureEnvironment.AZURE);\n+``` \n+\n+In addition to this change, the **support for using auth file has been removed**. In old version, the user can choose to authenticate via the auth file, like this:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+Azure azure = Azure.authenticate(new File(\"my.azureauth\")).withDefaultSubscription();\n+```\n+**In new version, this feature has been removed.** If this creates concern on your side, please file an issue to let us know.\n+\n+For detailed information on the benefits of using the new authentication classes, please refer to [this page](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/AUTH.md)\n+\n+## Customized Policy\n+\n+Because of adopting Azure Core which is a shared library across all Azure SDKs, there is also a minor change regarding how customized policy in configured. \n+\n+In old version (`com.microsoft.azure-mgmt-**`), we use `withInterceptor` and pass the customized interceptor class to the Azure object \n+\n+In new version (`com.azure.resourcemanager.**`), we use `WithPolicy` instead and pass the customized policy to the Azure object \n+\n+So:\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withInterceptor(new CustomizedInterceptor())\n+    .authenticate(credential)\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withPolicy(new CustomizedPolicy())\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```\n+\n+## Custom HTTP Client\n+\n+Similar to the customized policy, there are changes regarding how the custom HTTP client is configured as well. The re-designed HTTP client builder in the new version is more flexible and the user can choose their own implementation of HTTP client and plug in what they need into the configuration.\n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+OkHttpClient.Builder builder = new OkHttpClient.Builder().proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)));\n+RestClient client = new RestClient.Builder(builder, new Retrofit.Builder())\n+    .withCredentials(credential)\n+    .build();\n+\n+Azure azure = Azure.authenticate(client, \"<TenantId>\")\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+HttpClient client = new OkHttpAsyncHttpClientBuilder()\n+    .proxy(new ProxyOptions(ProxyOptions.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)))\n+    .build();\n+\n+Azure azure = Azure.configure()\n+    .withHttpClient(client)\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```    \n+    \n+## Error Handling\n+\n+There is a minor namespace change in the exception class. To be specific, the previous `CloudException` has been re-named to `ManagementException`. \n+\n+**In old version (`com.microsoft.azure-mgmt-**`)**\n+\n+```java\n+final String resourceGroupName = random(8);\n+try {\n+    ResourceGroup resourceGroup = azure.resourceGroups().getByName(resourceGroupName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5NjY2Mg=="}, "originalCommit": {"oid": "149b62aa5050c81d3d0b6a21f3953461c977bc30"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzc3MTU1OnYy", "diffSide": "RIGHT", "path": "sdk/management/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMjo1ODowN1rOGu_-eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMjo1ODowN1rOGu_-eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkzNTg2NQ==", "bodyText": "Here is still one com.microsoft.azure-mgmt-**, if it is package it should be com.microsoft.azure:azure-mgmt-**", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12909#discussion_r451935865", "createdAt": "2020-07-09T02:58:07Z", "author": {"login": "ChenTanyi"}, "path": "sdk/management/README.md", "diffHunk": "@@ -3,9 +3,17 @@\n The Azure Management Libraries for Java is a higher-level, object-oriented API for *managing* Azure resources,\n that is optimized for ease of use, succinctness and consistency.\n \n-- [API reference documentation][docs]\n+## Documentation\n+\n+Various documentation is available to help you get started\n+\n+- **[API reference documentation][docs]**\n - **[Code snippets and samples][sample]**\n \n+## Migration from older version of Azure management library \n+\n+If you are an existing user of the older version of Azure management library for Java (the packages that contains ``com.microsoft.azure-mgmt-**``) and you are looking for a migration guide to the new version of the SDK, please refer to [this migration guide](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/MIGRATION_GUIDE.md)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74b21e57876fa3b6385869c4df41fec721ea6208"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzc4MjIyOnYy", "diffSide": "RIGHT", "path": "sdk/management/docs/MIGRATION_GUIDE.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMzowNDozOVrOGvAE8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMzowNDozOVrOGvAE8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkzNzUyMA==", "bodyText": "For README for 'com.azure.resourcemanager.*, should we align to .**?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12909#discussion_r451937520", "createdAt": "2020-07-09T03:04:39Z", "author": {"login": "xseeseesee"}, "path": "sdk/management/docs/MIGRATION_GUIDE.md", "diffHunk": "@@ -0,0 +1,306 @@\n+## Guide for migrating to `com.azure.resourcemanager.**` from `com.microsoft.azure.management.**`\n+\n+This document is intended for users that are familiar with an older version of the Java SDK for managment libraries (`com.microsoft.azure.management.**`) ad wish to migrate their application \n+to the next version of Azure resource management libraries (`com.azure.resourcemanager.**`)\n+\n+For users new to the Java SDK for resource management libraries, please see the [README for 'com.azure.resourcemanager.*`](http://aka.ms/azure-sdk-java-mgmt)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74b21e57876fa3b6385869c4df41fec721ea6208"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzk3NDE4OnYy", "diffSide": "RIGHT", "path": "sdk/management/docs/MIGRATION_GUIDE.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNTowODozNVrOGvB2bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNTo0MTowMVrOGvCY-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk2NjU3Mg==", "bodyText": "Do we need to keep the comments and lines of println() here? This section is to introduce how the conversion from rxJava to Reactor would be.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12909#discussion_r451966572", "createdAt": "2020-07-09T05:08:35Z", "author": {"login": "xseeseesee"}, "path": "sdk/management/docs/MIGRATION_GUIDE.md", "diffHunk": "@@ -0,0 +1,306 @@\n+## Guide for migrating to `com.azure.resourcemanager.**` from `com.microsoft.azure.management.**`\n+\n+This document is intended for users that are familiar with an older version of the Java SDK for managment libraries (`com.microsoft.azure.management.**`) ad wish to migrate their application \n+to the next version of Azure resource management libraries (`com.azure.resourcemanager.**`)\n+\n+For users new to the Java SDK for resource management libraries, please see the [README for 'com.azure.resourcemanager.*`](http://aka.ms/azure-sdk-java-mgmt)\n+\n+## Table of contents\n+\n+* [Prerequisites](#prerequisites)\n+* [Updated Maven depedencies](#updated-maven-dependencies)\n+* [General Changes](#general-changes)\n+  * [Authentication](#authentication)\n+  * [Customized Policy](#customized-policy)\n+  * [Custom HTTP Client](#custom-http-client)\n+  * [Error Handling](#error-handling)\n+  * [rxJava -> Reactor](#rxjava-to-reactor)\n+* [Additional Samples](#additional-samples)\n+\n+## Prerequisites\n+\n+Java Development Kit (JDK) with version 8 or above.\n+\n+## Updated Maven dependencies\n+\n+The latest dependencies for resource management libraries are [available here](https://azure.github.io/azure-sdk/releases/latest/all/java.html). Please look for packages that contains \"azure-resourcemanager\" in the namespace.\n+\n+## General Changes\n+\n+The latest Azure Java SDK for management libraries is a result of our efforts to create a resource management client library that is user-friendly and idiomatic to the Java ecosystem.\n+\n+Apart from redesigns resulting from the [new Azure SDK Design Guidelines for Java](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/DESIGN.md), the latest version improves on several areas from old version.\n+\n+While conforming to the new guideline, we have tried our best to minimize the breaking changes. Most of the interfaces / classes / methods have stayed the same to offer user an easier migration experience.\n+\n+The important breaking changes are listed in the following sections:\n+\n+### Authentication\n+\n+In old version (`com.microsoft.azure.management.**`), ApplicationTokenCredentials is created with all the credential parameters.\n+\n+In new version (`com.azure.resourcemanager.**`), in order to provide an unified authentication based on Azure Identity for all Azure Java SDKs, the authentication mechanism has been re-designed and improved to offer a simpler interface. \n+\n+To the show the code snippets for the change:\n+\n+**In old version (`com.microsoft.azure.management.**`)**\n+\n+```java\n+ApplicationTokenCredential = new ApplicationTokenCredentials(\"<ClientId>\", \"<TenantId>\", \"<ClientSecret>\", AzureEnvironment.AZURE)\n+    .withDefaultSubscriptionId(\"<SubscriptionId>\");\n+```        \n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+TokenCredential credential = new ClientSecretCredentialBuilder()\n+    .clientId(\"<ClientId>\")\n+    .clientSecret(\"<ClientSecret>\")\n+    .tenantId(\"<TenantId>\")\n+    .build();\n+AzureProfile profile = new AzureProfile(\"<TenantId>\", \"<SubscriptionId>\", AzureEnvironment.AZURE);\n+``` \n+\n+In addition to this change, the **support for using auth file has been removed**. In old version, the user can choose to authenticate via the auth file, like this:\n+\n+**In old version (`com.microsoft.azure.management.**`)**\n+\n+```java\n+Azure azure = Azure.authenticate(new File(\"my.azureauth\")).withDefaultSubscription();\n+```\n+**In new version, this feature has been removed.** If this creates concern on your side, please file an issue to let us know.\n+\n+For detailed information on the benefits of using the new authentication classes, please refer to [this page](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/AUTH.md)\n+\n+## Customized Policy\n+\n+Because of adopting Azure Core which is a shared library across all Azure SDKs, there is also a minor change regarding how customized policy in configured. \n+\n+In old version (`com.microsoft.azure.management.**`), we use `withInterceptor` and pass the customized interceptor class to the Azure object \n+\n+In new version (`com.azure.resourcemanager.**`), we use `WithPolicy` instead and pass the customized policy to the Azure object. It's also worth mentioning that the implementation of `HttpPipelinePolicy` is different from that of `Interceptor` from okhttp. \n+\n+So:\n+\n+**In old version (`com.microsoft.azure.management.**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withInterceptor(new CustomizedInterceptor())\n+    .authenticate(credential)\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withPolicy(new CustomizedPolicy())\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```\n+\n+## Custom HTTP Client\n+\n+Similar to the customized policy, there are changes regarding how the custom HTTP client is configured as well. The re-designed HTTP client builder in the new version is more flexible and the user can choose their own implementation of HTTP client and plug in what they need into the configuration.\n+\n+**In old version (`com.microsoft.azure.management.**`)**\n+\n+```java\n+OkHttpClient.Builder builder = new OkHttpClient.Builder().proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)));\n+RestClient client = new RestClient.Builder(builder, new Retrofit.Builder())\n+    .withCredentials(credential)\n+    .build();\n+\n+Azure azure = Azure.authenticate(client, \"<TenantId>\")\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+HttpClient client = new OkHttpAsyncHttpClientBuilder()\n+    .proxy(new ProxyOptions(ProxyOptions.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)))\n+    .build();\n+\n+Azure azure = Azure.configure()\n+    .withHttpClient(client)\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```    \n+    \n+## Error Handling\n+\n+There is a minor namespace change in the exception class. To be specific, the previous `CloudException` has been re-named to `ManagementException`. \n+\n+**In old version (`com.microsoft.azure.management.**`)**\n+\n+```java\n+final String resourceGroupName = \"invalid resource group name\";\n+try {\n+    azure.resourceGroups().define(resourceGroupName)\n+        .withRegion(Region.US_WEST2)\n+        .create();\n+} catch (CloudException e) {\n+    System.err.printf(\"Response code: %s%n\", e.body().code());\n+    System.err.printf(\"Response message: %s%n\", e.body().message());\n+}\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+final String resourceGroupName = \"invalid resource group name\";\n+try {\n+    azure.resourceGroups().define(resourceGroupName)\n+        .withRegion(Region.US_WEST2)\n+        .create();\n+} catch (ManagementException e) {\n+    System.err.printf(\"Response code: %s%n\", e.getValue().getCode());\n+    System.err.printf(\"Response message: %s%n\", e.getValue().getMessage());\n+}\n+```\n+\n+## rxJava to Reactor\n+\n+In old version (`com.microsoft.azure.management.**`), `rxJava` is used for non-blocking applications\n+\n+In new version (`com.azure.resourcemanager.**`), we have adopted `Reactor` as the main library in replacement of `rxJava` due to the Azure Core adoption.\n+\n+**In old version (`com.microsoft.azure.management.**`)**\n+\n+```java\n+azure.publicIPAddresses()\n+    .define(publicIpName)\n+    .withRegion(region)\n+    .withExistingResourceGroup(rgName)\n+    .withLeafDomainLabel(publicIpName)\n+    .createAsync().flatMap(new Func1 < Indexable, Observable < Indexable >> () {\n+        @Override\n+        public Observable < Indexable > call(Indexable indexable) {\n+            if (indexable instanceof PublicIPAddress) {\n+                PublicIPAddress publicIp = (PublicIPAddress) indexable;\n+                //=============================================================", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74b21e57876fa3b6385869c4df41fec721ea6208"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk3NTQxNg==", "bodyText": "good point", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12909#discussion_r451975416", "createdAt": "2020-07-09T05:41:01Z", "author": {"login": "nickzhums"}, "path": "sdk/management/docs/MIGRATION_GUIDE.md", "diffHunk": "@@ -0,0 +1,306 @@\n+## Guide for migrating to `com.azure.resourcemanager.**` from `com.microsoft.azure.management.**`\n+\n+This document is intended for users that are familiar with an older version of the Java SDK for managment libraries (`com.microsoft.azure.management.**`) ad wish to migrate their application \n+to the next version of Azure resource management libraries (`com.azure.resourcemanager.**`)\n+\n+For users new to the Java SDK for resource management libraries, please see the [README for 'com.azure.resourcemanager.*`](http://aka.ms/azure-sdk-java-mgmt)\n+\n+## Table of contents\n+\n+* [Prerequisites](#prerequisites)\n+* [Updated Maven depedencies](#updated-maven-dependencies)\n+* [General Changes](#general-changes)\n+  * [Authentication](#authentication)\n+  * [Customized Policy](#customized-policy)\n+  * [Custom HTTP Client](#custom-http-client)\n+  * [Error Handling](#error-handling)\n+  * [rxJava -> Reactor](#rxjava-to-reactor)\n+* [Additional Samples](#additional-samples)\n+\n+## Prerequisites\n+\n+Java Development Kit (JDK) with version 8 or above.\n+\n+## Updated Maven dependencies\n+\n+The latest dependencies for resource management libraries are [available here](https://azure.github.io/azure-sdk/releases/latest/all/java.html). Please look for packages that contains \"azure-resourcemanager\" in the namespace.\n+\n+## General Changes\n+\n+The latest Azure Java SDK for management libraries is a result of our efforts to create a resource management client library that is user-friendly and idiomatic to the Java ecosystem.\n+\n+Apart from redesigns resulting from the [new Azure SDK Design Guidelines for Java](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/DESIGN.md), the latest version improves on several areas from old version.\n+\n+While conforming to the new guideline, we have tried our best to minimize the breaking changes. Most of the interfaces / classes / methods have stayed the same to offer user an easier migration experience.\n+\n+The important breaking changes are listed in the following sections:\n+\n+### Authentication\n+\n+In old version (`com.microsoft.azure.management.**`), ApplicationTokenCredentials is created with all the credential parameters.\n+\n+In new version (`com.azure.resourcemanager.**`), in order to provide an unified authentication based on Azure Identity for all Azure Java SDKs, the authentication mechanism has been re-designed and improved to offer a simpler interface. \n+\n+To the show the code snippets for the change:\n+\n+**In old version (`com.microsoft.azure.management.**`)**\n+\n+```java\n+ApplicationTokenCredential = new ApplicationTokenCredentials(\"<ClientId>\", \"<TenantId>\", \"<ClientSecret>\", AzureEnvironment.AZURE)\n+    .withDefaultSubscriptionId(\"<SubscriptionId>\");\n+```        \n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+TokenCredential credential = new ClientSecretCredentialBuilder()\n+    .clientId(\"<ClientId>\")\n+    .clientSecret(\"<ClientSecret>\")\n+    .tenantId(\"<TenantId>\")\n+    .build();\n+AzureProfile profile = new AzureProfile(\"<TenantId>\", \"<SubscriptionId>\", AzureEnvironment.AZURE);\n+``` \n+\n+In addition to this change, the **support for using auth file has been removed**. In old version, the user can choose to authenticate via the auth file, like this:\n+\n+**In old version (`com.microsoft.azure.management.**`)**\n+\n+```java\n+Azure azure = Azure.authenticate(new File(\"my.azureauth\")).withDefaultSubscription();\n+```\n+**In new version, this feature has been removed.** If this creates concern on your side, please file an issue to let us know.\n+\n+For detailed information on the benefits of using the new authentication classes, please refer to [this page](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/docs/AUTH.md)\n+\n+## Customized Policy\n+\n+Because of adopting Azure Core which is a shared library across all Azure SDKs, there is also a minor change regarding how customized policy in configured. \n+\n+In old version (`com.microsoft.azure.management.**`), we use `withInterceptor` and pass the customized interceptor class to the Azure object \n+\n+In new version (`com.azure.resourcemanager.**`), we use `WithPolicy` instead and pass the customized policy to the Azure object. It's also worth mentioning that the implementation of `HttpPipelinePolicy` is different from that of `Interceptor` from okhttp. \n+\n+So:\n+\n+**In old version (`com.microsoft.azure.management.**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withInterceptor(new CustomizedInterceptor())\n+    .authenticate(credential)\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withPolicy(new CustomizedPolicy())\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```\n+\n+## Custom HTTP Client\n+\n+Similar to the customized policy, there are changes regarding how the custom HTTP client is configured as well. The re-designed HTTP client builder in the new version is more flexible and the user can choose their own implementation of HTTP client and plug in what they need into the configuration.\n+\n+**In old version (`com.microsoft.azure.management.**`)**\n+\n+```java\n+OkHttpClient.Builder builder = new OkHttpClient.Builder().proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)));\n+RestClient client = new RestClient.Builder(builder, new Retrofit.Builder())\n+    .withCredentials(credential)\n+    .build();\n+\n+Azure azure = Azure.authenticate(client, \"<TenantId>\")\n+    .withDefaultSubscription();\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+HttpClient client = new OkHttpAsyncHttpClientBuilder()\n+    .proxy(new ProxyOptions(ProxyOptions.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 8888)))\n+    .build();\n+\n+Azure azure = Azure.configure()\n+    .withHttpClient(client)\n+    .authenticate(credential, profile)\n+    .withDefaultSubscription();\n+```    \n+    \n+## Error Handling\n+\n+There is a minor namespace change in the exception class. To be specific, the previous `CloudException` has been re-named to `ManagementException`. \n+\n+**In old version (`com.microsoft.azure.management.**`)**\n+\n+```java\n+final String resourceGroupName = \"invalid resource group name\";\n+try {\n+    azure.resourceGroups().define(resourceGroupName)\n+        .withRegion(Region.US_WEST2)\n+        .create();\n+} catch (CloudException e) {\n+    System.err.printf(\"Response code: %s%n\", e.body().code());\n+    System.err.printf(\"Response message: %s%n\", e.body().message());\n+}\n+```\n+\n+**Equivalent in new version (`com.azure.resourcemanager.**`)**\n+\n+```java\n+final String resourceGroupName = \"invalid resource group name\";\n+try {\n+    azure.resourceGroups().define(resourceGroupName)\n+        .withRegion(Region.US_WEST2)\n+        .create();\n+} catch (ManagementException e) {\n+    System.err.printf(\"Response code: %s%n\", e.getValue().getCode());\n+    System.err.printf(\"Response message: %s%n\", e.getValue().getMessage());\n+}\n+```\n+\n+## rxJava to Reactor\n+\n+In old version (`com.microsoft.azure.management.**`), `rxJava` is used for non-blocking applications\n+\n+In new version (`com.azure.resourcemanager.**`), we have adopted `Reactor` as the main library in replacement of `rxJava` due to the Azure Core adoption.\n+\n+**In old version (`com.microsoft.azure.management.**`)**\n+\n+```java\n+azure.publicIPAddresses()\n+    .define(publicIpName)\n+    .withRegion(region)\n+    .withExistingResourceGroup(rgName)\n+    .withLeafDomainLabel(publicIpName)\n+    .createAsync().flatMap(new Func1 < Indexable, Observable < Indexable >> () {\n+        @Override\n+        public Observable < Indexable > call(Indexable indexable) {\n+            if (indexable instanceof PublicIPAddress) {\n+                PublicIPAddress publicIp = (PublicIPAddress) indexable;\n+                //=============================================================", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk2NjU3Mg=="}, "originalCommit": {"oid": "74b21e57876fa3b6385869c4df41fec721ea6208"}, "originalPosition": 183}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3657, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}