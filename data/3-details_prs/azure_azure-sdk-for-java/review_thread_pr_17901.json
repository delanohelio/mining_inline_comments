{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMTU4NjEz", "number": 17901, "reviewThreads": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMDozNDo0MlrOE_3s2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNToxODowMFrOFD0c4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDA4MzQ2OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/resource/server/AADOAuth2OboAuthorizedClientRepository.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMDozNDo0MlrOH90BCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMDozNDo0MlrOH90BCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU3NzQxOA==", "bodyText": "Hi, @sangonzal, @SomkaPe,\nWe are using msal to implement obo function in spring-framework.\nCould you please help to review this PR?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r534577418", "createdAt": "2020-12-03T00:34:42Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/resource/server/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.resource.server;\n+\n+import com.azure.spring.aad.implementation.AzureClientRegistrationRepository;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IClientSecret;\n+import com.microsoft.aad.msal4j.OnBehalfOfParameters;\n+import com.microsoft.aad.msal4j.UserAssertion;\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AbstractOAuth2Token;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.server.resource.authentication.AbstractOAuth2TokenAuthenticationToken;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.net.MalformedURLException;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedClientRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    private final AzureClientRegistrationRepository azureClientRegistrationRepository;\n+\n+    private Map<String, ConfidentialClientApplication> confidentialClientApplicationMap = new HashMap<>();\n+\n+    public AADOAuth2OboAuthorizedClientRepository(AzureClientRegistrationRepository azureClientRegistrationRepository) {\n+        this.azureClientRegistrationRepository = azureClientRegistrationRepository;\n+        Iterator<ClientRegistration> iterator = azureClientRegistrationRepository.iterator();\n+        while (iterator.hasNext()) {\n+            ClientRegistration next = iterator.next();\n+            this.confidentialClientApplicationMap.put(next.getClientId(), createApp(next));\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends OAuth2AuthorizedClient> T loadAuthorizedClient(String registrationId,\n+                                                                     Authentication authentication,\n+                                                                     HttpServletRequest request) {\n+        try {\n+            ClientRegistration clientRegistration = azureClientRegistrationRepository\n+                .findByRegistrationId(registrationId);\n+\n+            AbstractOAuth2TokenAuthenticationToken<AbstractOAuth2Token> authenticationToken =\n+                (AbstractOAuth2TokenAuthenticationToken)\n+                    authentication;\n+\n+            String accessToken = authenticationToken.getToken().getTokenValue();\n+\n+            OnBehalfOfParameters parameters = OnBehalfOfParameters\n+                .builder(clientRegistration.getScopes(), new UserAssertion(accessToken))\n+                .build();\n+\n+            ConfidentialClientApplication clientApplication = confidentialClientApplicationMap.get(clientRegistration\n+                .getClientId());\n+\n+            String oboAccessToken = clientApplication.acquireToken(parameters).get().accessToken();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d90887c34587322c2100d9fc888c503b2e54f79f"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTIxMzY1OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODo1MDozNFrOH_dmHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDoxNzowOVrOIHHbzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwNzIzMA==", "bodyText": "I'm not familiar with Spring Security - are you creating a ConfidentialClient application per request, or is one created at startup and then reused?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r536307230", "createdAt": "2020-12-04T18:50:34Z", "author": {"login": "sangonzal"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IClientSecret;\n+import com.microsoft.aad.msal4j.OnBehalfOfParameters;\n+import com.microsoft.aad.msal4j.UserAssertion;\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AbstractOAuth2Token;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.server.resource.authentication.AbstractOAuth2TokenAuthenticationToken;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.net.MalformedURLException;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedClientRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    private final AzureClientRegistrationRepository azureClientRegistrationRepository;\n+\n+    private Map<String, ConfidentialClientApplication> confidentialClientApplicationMap = new HashMap<>();\n+\n+    public AADOAuth2OboAuthorizedClientRepository(AzureClientRegistrationRepository azureClientRegistrationRepository) {\n+        this.azureClientRegistrationRepository = azureClientRegistrationRepository;\n+        Iterator<ClientRegistration> iterator = azureClientRegistrationRepository.iterator();\n+        while (iterator.hasNext()) {\n+            ClientRegistration next = iterator.next();\n+            this.confidentialClientApplicationMap.put(next.getClientId(), createApp(next));\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends OAuth2AuthorizedClient> T loadAuthorizedClient(String registrationId,\n+                                                                     Authentication authentication,\n+                                                                     HttpServletRequest request) {\n+        try {\n+            ClientRegistration clientRegistration = azureClientRegistrationRepository\n+                .findByRegistrationId(registrationId);\n+\n+            AbstractOAuth2TokenAuthenticationToken<AbstractOAuth2Token> authenticationToken =\n+                (AbstractOAuth2TokenAuthenticationToken)\n+                    authentication;\n+\n+            String accessToken = authenticationToken.getToken().getTokenValue();\n+\n+            OnBehalfOfParameters parameters = OnBehalfOfParameters\n+                .builder(clientRegistration.getScopes(), new UserAssertion(accessToken))\n+                .build();\n+\n+            ConfidentialClientApplication clientApplication = confidentialClientApplicationMap.get(clientRegistration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ceea5c59681497d7c2456ad1581b5514f4dd81e"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk5MDE2NQ==", "bodyText": "It's created at startup and cached in the map for reusing.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r537990165", "createdAt": "2020-12-08T02:43:08Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IClientSecret;\n+import com.microsoft.aad.msal4j.OnBehalfOfParameters;\n+import com.microsoft.aad.msal4j.UserAssertion;\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AbstractOAuth2Token;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.server.resource.authentication.AbstractOAuth2TokenAuthenticationToken;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.net.MalformedURLException;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedClientRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    private final AzureClientRegistrationRepository azureClientRegistrationRepository;\n+\n+    private Map<String, ConfidentialClientApplication> confidentialClientApplicationMap = new HashMap<>();\n+\n+    public AADOAuth2OboAuthorizedClientRepository(AzureClientRegistrationRepository azureClientRegistrationRepository) {\n+        this.azureClientRegistrationRepository = azureClientRegistrationRepository;\n+        Iterator<ClientRegistration> iterator = azureClientRegistrationRepository.iterator();\n+        while (iterator.hasNext()) {\n+            ClientRegistration next = iterator.next();\n+            this.confidentialClientApplicationMap.put(next.getClientId(), createApp(next));\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends OAuth2AuthorizedClient> T loadAuthorizedClient(String registrationId,\n+                                                                     Authentication authentication,\n+                                                                     HttpServletRequest request) {\n+        try {\n+            ClientRegistration clientRegistration = azureClientRegistrationRepository\n+                .findByRegistrationId(registrationId);\n+\n+            AbstractOAuth2TokenAuthenticationToken<AbstractOAuth2Token> authenticationToken =\n+                (AbstractOAuth2TokenAuthenticationToken)\n+                    authentication;\n+\n+            String accessToken = authenticationToken.getToken().getTokenValue();\n+\n+            OnBehalfOfParameters parameters = OnBehalfOfParameters\n+                .builder(clientRegistration.getScopes(), new UserAssertion(accessToken))\n+                .build();\n+\n+            ConfidentialClientApplication clientApplication = confidentialClientApplicationMap.get(clientRegistration", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwNzIzMA=="}, "originalCommit": {"oid": "9ceea5c59681497d7c2456ad1581b5514f4dd81e"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3MzM0Mw==", "bodyText": "Keep in mind that even though you are not using the token cache, MSAL stores tokens into an in-memory cache by default. If the ConfidentialClientApplication is reused across thousands of users (or more), the tokens for these users will be always be in the cache.\nIf you then actually plan on using the token cache, this will be a problem, as the look up logic for tokens runs in linear time. Therefore, it is recommended that you create a ConfidentialClientApplication (and therefore cache) per user.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r541273343", "createdAt": "2020-12-11T20:48:28Z", "author": {"login": "sangonzal"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IClientSecret;\n+import com.microsoft.aad.msal4j.OnBehalfOfParameters;\n+import com.microsoft.aad.msal4j.UserAssertion;\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AbstractOAuth2Token;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.server.resource.authentication.AbstractOAuth2TokenAuthenticationToken;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.net.MalformedURLException;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedClientRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    private final AzureClientRegistrationRepository azureClientRegistrationRepository;\n+\n+    private Map<String, ConfidentialClientApplication> confidentialClientApplicationMap = new HashMap<>();\n+\n+    public AADOAuth2OboAuthorizedClientRepository(AzureClientRegistrationRepository azureClientRegistrationRepository) {\n+        this.azureClientRegistrationRepository = azureClientRegistrationRepository;\n+        Iterator<ClientRegistration> iterator = azureClientRegistrationRepository.iterator();\n+        while (iterator.hasNext()) {\n+            ClientRegistration next = iterator.next();\n+            this.confidentialClientApplicationMap.put(next.getClientId(), createApp(next));\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends OAuth2AuthorizedClient> T loadAuthorizedClient(String registrationId,\n+                                                                     Authentication authentication,\n+                                                                     HttpServletRequest request) {\n+        try {\n+            ClientRegistration clientRegistration = azureClientRegistrationRepository\n+                .findByRegistrationId(registrationId);\n+\n+            AbstractOAuth2TokenAuthenticationToken<AbstractOAuth2Token> authenticationToken =\n+                (AbstractOAuth2TokenAuthenticationToken)\n+                    authentication;\n+\n+            String accessToken = authenticationToken.getToken().getTokenValue();\n+\n+            OnBehalfOfParameters parameters = OnBehalfOfParameters\n+                .builder(clientRegistration.getScopes(), new UserAssertion(accessToken))\n+                .build();\n+\n+            ConfidentialClientApplication clientApplication = confidentialClientApplicationMap.get(clientRegistration", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwNzIzMA=="}, "originalCommit": {"oid": "9ceea5c59681497d7c2456ad1581b5514f4dd81e"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIzNTkyMw==", "bodyText": "Thanks for the reminder, is there a way to disable the auto-creation of the MSAL token cache? As we're not going to use MSAL token cache, the action of caching the ConfidentialClientApplication could be a memory problem. Will the token stored in memory expire ever?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r542235923", "createdAt": "2020-12-14T09:32:07Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IClientSecret;\n+import com.microsoft.aad.msal4j.OnBehalfOfParameters;\n+import com.microsoft.aad.msal4j.UserAssertion;\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AbstractOAuth2Token;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.server.resource.authentication.AbstractOAuth2TokenAuthenticationToken;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.net.MalformedURLException;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedClientRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    private final AzureClientRegistrationRepository azureClientRegistrationRepository;\n+\n+    private Map<String, ConfidentialClientApplication> confidentialClientApplicationMap = new HashMap<>();\n+\n+    public AADOAuth2OboAuthorizedClientRepository(AzureClientRegistrationRepository azureClientRegistrationRepository) {\n+        this.azureClientRegistrationRepository = azureClientRegistrationRepository;\n+        Iterator<ClientRegistration> iterator = azureClientRegistrationRepository.iterator();\n+        while (iterator.hasNext()) {\n+            ClientRegistration next = iterator.next();\n+            this.confidentialClientApplicationMap.put(next.getClientId(), createApp(next));\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends OAuth2AuthorizedClient> T loadAuthorizedClient(String registrationId,\n+                                                                     Authentication authentication,\n+                                                                     HttpServletRequest request) {\n+        try {\n+            ClientRegistration clientRegistration = azureClientRegistrationRepository\n+                .findByRegistrationId(registrationId);\n+\n+            AbstractOAuth2TokenAuthenticationToken<AbstractOAuth2Token> authenticationToken =\n+                (AbstractOAuth2TokenAuthenticationToken)\n+                    authentication;\n+\n+            String accessToken = authenticationToken.getToken().getTokenValue();\n+\n+            OnBehalfOfParameters parameters = OnBehalfOfParameters\n+                .builder(clientRegistration.getScopes(), new UserAssertion(accessToken))\n+                .build();\n+\n+            ConfidentialClientApplication clientApplication = confidentialClientApplicationMap.get(clientRegistration", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwNzIzMA=="}, "originalCommit": {"oid": "9ceea5c59681497d7c2456ad1581b5514f4dd81e"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ4NTIxMA==", "bodyText": "@saragluna Unfortunately there is no way to disable auto-creation of the MSAL token cache. It is highly recommended that customers use cached tokens for many reasons, including end-user experience, developer experience, as well as to reduce load on AAD service.\nTokens stored in cache due expire, but are not evicted (expired tokens will remain in the cache, unless you remove them, by calling RemoveAccounts). If you use the acquireTokenSilent API, MSAL automatically takes care of refreshing the expired tokens for you.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r543485210", "createdAt": "2020-12-15T16:17:25Z", "author": {"login": "sangonzal"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IClientSecret;\n+import com.microsoft.aad.msal4j.OnBehalfOfParameters;\n+import com.microsoft.aad.msal4j.UserAssertion;\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AbstractOAuth2Token;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.server.resource.authentication.AbstractOAuth2TokenAuthenticationToken;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.net.MalformedURLException;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedClientRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    private final AzureClientRegistrationRepository azureClientRegistrationRepository;\n+\n+    private Map<String, ConfidentialClientApplication> confidentialClientApplicationMap = new HashMap<>();\n+\n+    public AADOAuth2OboAuthorizedClientRepository(AzureClientRegistrationRepository azureClientRegistrationRepository) {\n+        this.azureClientRegistrationRepository = azureClientRegistrationRepository;\n+        Iterator<ClientRegistration> iterator = azureClientRegistrationRepository.iterator();\n+        while (iterator.hasNext()) {\n+            ClientRegistration next = iterator.next();\n+            this.confidentialClientApplicationMap.put(next.getClientId(), createApp(next));\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends OAuth2AuthorizedClient> T loadAuthorizedClient(String registrationId,\n+                                                                     Authentication authentication,\n+                                                                     HttpServletRequest request) {\n+        try {\n+            ClientRegistration clientRegistration = azureClientRegistrationRepository\n+                .findByRegistrationId(registrationId);\n+\n+            AbstractOAuth2TokenAuthenticationToken<AbstractOAuth2Token> authenticationToken =\n+                (AbstractOAuth2TokenAuthenticationToken)\n+                    authentication;\n+\n+            String accessToken = authenticationToken.getToken().getTokenValue();\n+\n+            OnBehalfOfParameters parameters = OnBehalfOfParameters\n+                .builder(clientRegistration.getScopes(), new UserAssertion(accessToken))\n+                .build();\n+\n+            ConfidentialClientApplication clientApplication = confidentialClientApplicationMap.get(clientRegistration", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwNzIzMA=="}, "originalCommit": {"oid": "9ceea5c59681497d7c2456ad1581b5514f4dd81e"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMzMjc1MQ==", "bodyText": "@sangonzal thanks for the detailed explanation. Since in our web API case, the application would mostly be sessionless, so we're not using the session to cache token. With your explanation, I'm thinking of three ways to handle the MSAL token cache:\n\n\n\n\nPros\nCons\n\n\n\n\nCreate ConfidentialClientApplication for each request and call acquireToken()\n- No need to worry about the memory problem.\n- The cost of construct the object.  - The cost of acquiring a token each time.\n\n\nCache the ConfidentialClientApplication at the application level and call acquireToken()\n- Save the cost of constructing ConfidentialClientApplication  at each request.\n- All tokens acquired within the application lifecycle will be cached in the MSAL token cache\n\n\nCache the ConfidentialClientApplication at the application level and call acquireTokenSilent\n- Save the cost to acquire token each time. - Automatically refresh tokens.  - Save the cost of constructing ConfidentialClientApplication  at each request.\n- All tokens will be cached in memory  - Code is not self-explanatory (need to perform obo first, check this)\n\n\n\nBut one of my concerns is considering the distributing nature of Web API, what's the benefit of caching the token in the application? Which solution do you prefer among these three, or do you have other suggestions?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r544332751", "createdAt": "2020-12-16T14:17:09Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IClientSecret;\n+import com.microsoft.aad.msal4j.OnBehalfOfParameters;\n+import com.microsoft.aad.msal4j.UserAssertion;\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AbstractOAuth2Token;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.server.resource.authentication.AbstractOAuth2TokenAuthenticationToken;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.net.MalformedURLException;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedClientRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    private final AzureClientRegistrationRepository azureClientRegistrationRepository;\n+\n+    private Map<String, ConfidentialClientApplication> confidentialClientApplicationMap = new HashMap<>();\n+\n+    public AADOAuth2OboAuthorizedClientRepository(AzureClientRegistrationRepository azureClientRegistrationRepository) {\n+        this.azureClientRegistrationRepository = azureClientRegistrationRepository;\n+        Iterator<ClientRegistration> iterator = azureClientRegistrationRepository.iterator();\n+        while (iterator.hasNext()) {\n+            ClientRegistration next = iterator.next();\n+            this.confidentialClientApplicationMap.put(next.getClientId(), createApp(next));\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends OAuth2AuthorizedClient> T loadAuthorizedClient(String registrationId,\n+                                                                     Authentication authentication,\n+                                                                     HttpServletRequest request) {\n+        try {\n+            ClientRegistration clientRegistration = azureClientRegistrationRepository\n+                .findByRegistrationId(registrationId);\n+\n+            AbstractOAuth2TokenAuthenticationToken<AbstractOAuth2Token> authenticationToken =\n+                (AbstractOAuth2TokenAuthenticationToken)\n+                    authentication;\n+\n+            String accessToken = authenticationToken.getToken().getTokenValue();\n+\n+            OnBehalfOfParameters parameters = OnBehalfOfParameters\n+                .builder(clientRegistration.getScopes(), new UserAssertion(accessToken))\n+                .build();\n+\n+            ConfidentialClientApplication clientApplication = confidentialClientApplicationMap.get(clientRegistration", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwNzIzMA=="}, "originalCommit": {"oid": "9ceea5c59681497d7c2456ad1581b5514f4dd81e"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTI0MjQwOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODo1NzozMFrOH_d2Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDoxODo1MVrOIHHhLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxMTM1MA==", "bodyText": "You're not leveraging the MSAL Token cache here. Every time you need to get a token, you'll make a call to AAD, even if you have a valid cached token. If you want to use the MSAL token cache, we have a sample that shows how you can use the token cache with OBO:", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r536311350", "createdAt": "2020-12-04T18:57:30Z", "author": {"login": "sangonzal"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IClientSecret;\n+import com.microsoft.aad.msal4j.OnBehalfOfParameters;\n+import com.microsoft.aad.msal4j.UserAssertion;\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AbstractOAuth2Token;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.server.resource.authentication.AbstractOAuth2TokenAuthenticationToken;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.net.MalformedURLException;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedClientRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    private final AzureClientRegistrationRepository azureClientRegistrationRepository;\n+\n+    private Map<String, ConfidentialClientApplication> confidentialClientApplicationMap = new HashMap<>();\n+\n+    public AADOAuth2OboAuthorizedClientRepository(AzureClientRegistrationRepository azureClientRegistrationRepository) {\n+        this.azureClientRegistrationRepository = azureClientRegistrationRepository;\n+        Iterator<ClientRegistration> iterator = azureClientRegistrationRepository.iterator();\n+        while (iterator.hasNext()) {\n+            ClientRegistration next = iterator.next();\n+            this.confidentialClientApplicationMap.put(next.getClientId(), createApp(next));\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends OAuth2AuthorizedClient> T loadAuthorizedClient(String registrationId,\n+                                                                     Authentication authentication,\n+                                                                     HttpServletRequest request) {\n+        try {\n+            ClientRegistration clientRegistration = azureClientRegistrationRepository\n+                .findByRegistrationId(registrationId);\n+\n+            AbstractOAuth2TokenAuthenticationToken<AbstractOAuth2Token> authenticationToken =\n+                (AbstractOAuth2TokenAuthenticationToken)\n+                    authentication;\n+\n+            String accessToken = authenticationToken.getToken().getTokenValue();\n+\n+            OnBehalfOfParameters parameters = OnBehalfOfParameters\n+                .builder(clientRegistration.getScopes(), new UserAssertion(accessToken))\n+                .build();\n+\n+            ConfidentialClientApplication clientApplication = confidentialClientApplicationMap.get(clientRegistration\n+                .getClientId());\n+\n+            String oboAccessToken = clientApplication.acquireToken(parameters).get().accessToken();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ceea5c59681497d7c2456ad1581b5514f4dd81e"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk5MDkwMA==", "bodyText": "We'll not bring the MSAL token cache in this case, since the MSAL token cache is stored in the session. However, we're implementing this OBO function targeting resource servers, which could be stateless and disable session. We'll store the token in the request level, and it will be introduced in another PR.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r537990900", "createdAt": "2020-12-08T02:45:08Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IClientSecret;\n+import com.microsoft.aad.msal4j.OnBehalfOfParameters;\n+import com.microsoft.aad.msal4j.UserAssertion;\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AbstractOAuth2Token;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.server.resource.authentication.AbstractOAuth2TokenAuthenticationToken;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.net.MalformedURLException;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedClientRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    private final AzureClientRegistrationRepository azureClientRegistrationRepository;\n+\n+    private Map<String, ConfidentialClientApplication> confidentialClientApplicationMap = new HashMap<>();\n+\n+    public AADOAuth2OboAuthorizedClientRepository(AzureClientRegistrationRepository azureClientRegistrationRepository) {\n+        this.azureClientRegistrationRepository = azureClientRegistrationRepository;\n+        Iterator<ClientRegistration> iterator = azureClientRegistrationRepository.iterator();\n+        while (iterator.hasNext()) {\n+            ClientRegistration next = iterator.next();\n+            this.confidentialClientApplicationMap.put(next.getClientId(), createApp(next));\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends OAuth2AuthorizedClient> T loadAuthorizedClient(String registrationId,\n+                                                                     Authentication authentication,\n+                                                                     HttpServletRequest request) {\n+        try {\n+            ClientRegistration clientRegistration = azureClientRegistrationRepository\n+                .findByRegistrationId(registrationId);\n+\n+            AbstractOAuth2TokenAuthenticationToken<AbstractOAuth2Token> authenticationToken =\n+                (AbstractOAuth2TokenAuthenticationToken)\n+                    authentication;\n+\n+            String accessToken = authenticationToken.getToken().getTokenValue();\n+\n+            OnBehalfOfParameters parameters = OnBehalfOfParameters\n+                .builder(clientRegistration.getScopes(), new UserAssertion(accessToken))\n+                .build();\n+\n+            ConfidentialClientApplication clientApplication = confidentialClientApplicationMap.get(clientRegistration\n+                .getClientId());\n+\n+            String oboAccessToken = clientApplication.acquireToken(parameters).get().accessToken();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxMTM1MA=="}, "originalCommit": {"oid": "9ceea5c59681497d7c2456ad1581b5514f4dd81e"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ4MzQ0OA==", "bodyText": "@saragluna Can go a bit more into how you plan on storing the token at the request elvel? Are you storing both the access token and the refresh token?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r543483448", "createdAt": "2020-12-15T16:15:08Z", "author": {"login": "sangonzal"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IClientSecret;\n+import com.microsoft.aad.msal4j.OnBehalfOfParameters;\n+import com.microsoft.aad.msal4j.UserAssertion;\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AbstractOAuth2Token;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.server.resource.authentication.AbstractOAuth2TokenAuthenticationToken;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.net.MalformedURLException;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedClientRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    private final AzureClientRegistrationRepository azureClientRegistrationRepository;\n+\n+    private Map<String, ConfidentialClientApplication> confidentialClientApplicationMap = new HashMap<>();\n+\n+    public AADOAuth2OboAuthorizedClientRepository(AzureClientRegistrationRepository azureClientRegistrationRepository) {\n+        this.azureClientRegistrationRepository = azureClientRegistrationRepository;\n+        Iterator<ClientRegistration> iterator = azureClientRegistrationRepository.iterator();\n+        while (iterator.hasNext()) {\n+            ClientRegistration next = iterator.next();\n+            this.confidentialClientApplicationMap.put(next.getClientId(), createApp(next));\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends OAuth2AuthorizedClient> T loadAuthorizedClient(String registrationId,\n+                                                                     Authentication authentication,\n+                                                                     HttpServletRequest request) {\n+        try {\n+            ClientRegistration clientRegistration = azureClientRegistrationRepository\n+                .findByRegistrationId(registrationId);\n+\n+            AbstractOAuth2TokenAuthenticationToken<AbstractOAuth2Token> authenticationToken =\n+                (AbstractOAuth2TokenAuthenticationToken)\n+                    authentication;\n+\n+            String accessToken = authenticationToken.getToken().getTokenValue();\n+\n+            OnBehalfOfParameters parameters = OnBehalfOfParameters\n+                .builder(clientRegistration.getScopes(), new UserAssertion(accessToken))\n+                .build();\n+\n+            ConfidentialClientApplication clientApplication = confidentialClientApplicationMap.get(clientRegistration\n+                .getClientId());\n+\n+            String oboAccessToken = clientApplication.acquireToken(parameters).get().accessToken();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxMTM1MA=="}, "originalCommit": {"oid": "9ceea5c59681497d7c2456ad1581b5514f4dd81e"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMzNDEyNw==", "bodyText": "This is how we store the token in request level:\n\nSaving the token\nhttps://github.com/Azure/azure-sdk-for-java/blob/master/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java#L102\nRetrieving the token\nhttps://github.com/Azure/azure-sdk-for-java/blob/master/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java#L62-L64", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r544334127", "createdAt": "2020-12-16T14:18:51Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IClientSecret;\n+import com.microsoft.aad.msal4j.OnBehalfOfParameters;\n+import com.microsoft.aad.msal4j.UserAssertion;\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AbstractOAuth2Token;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.server.resource.authentication.AbstractOAuth2TokenAuthenticationToken;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.net.MalformedURLException;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedClientRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    private final AzureClientRegistrationRepository azureClientRegistrationRepository;\n+\n+    private Map<String, ConfidentialClientApplication> confidentialClientApplicationMap = new HashMap<>();\n+\n+    public AADOAuth2OboAuthorizedClientRepository(AzureClientRegistrationRepository azureClientRegistrationRepository) {\n+        this.azureClientRegistrationRepository = azureClientRegistrationRepository;\n+        Iterator<ClientRegistration> iterator = azureClientRegistrationRepository.iterator();\n+        while (iterator.hasNext()) {\n+            ClientRegistration next = iterator.next();\n+            this.confidentialClientApplicationMap.put(next.getClientId(), createApp(next));\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends OAuth2AuthorizedClient> T loadAuthorizedClient(String registrationId,\n+                                                                     Authentication authentication,\n+                                                                     HttpServletRequest request) {\n+        try {\n+            ClientRegistration clientRegistration = azureClientRegistrationRepository\n+                .findByRegistrationId(registrationId);\n+\n+            AbstractOAuth2TokenAuthenticationToken<AbstractOAuth2Token> authenticationToken =\n+                (AbstractOAuth2TokenAuthenticationToken)\n+                    authentication;\n+\n+            String accessToken = authenticationToken.getToken().getTokenValue();\n+\n+            OnBehalfOfParameters parameters = OnBehalfOfParameters\n+                .builder(clientRegistration.getScopes(), new UserAssertion(accessToken))\n+                .build();\n+\n+            ConfidentialClientApplication clientApplication = confidentialClientApplicationMap.get(clientRegistration\n+                .getClientId());\n+\n+            String oboAccessToken = clientApplication.acquireToken(parameters).get().accessToken();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxMTM1MA=="}, "originalCommit": {"oid": "9ceea5c59681497d7c2456ad1581b5514f4dd81e"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTI4NjAzOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMTo0OToyMFrOICxqSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMTo0OToyMFrOICxqSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4MTcwNA==", "bodyText": "Isn't this application name too long? Could we make it shorter and more concise.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539781704", "createdAt": "2020-12-10T01:49:20Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/README.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# OAuth 2.0 Sample for Azure AD Spring Boot Starter Resource Server library for Java\n+\n+## Key concepts\n+[Resource server access other resources usage][resource-server-access-other-resources-usage] is more common, this is an extension of the [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server]. Similarly, this sample illustrates how to protect a Java web API by restricting access to its resources to authorized accounts, and the restricted resource will access other restricted resource, such as Graph API and Custom API.\n+\n+\n+## Getting started\n+We will prepare two application to demonstrate the dependent calls of resources.\n+Another sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] will be as Custom API resource.\n+\n+### Environment checklist\n+We need to ensure that this [environment checklist][ready-to-run-checklist] is completed before the run.\n+\n+### Include the package\n+\n+```xml\n+<dependencies>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-web</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-security</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.azure.spring</groupId>\n+      <artifactId>azure-spring-boot-starter-active-directory</artifactId>\n+      <version>3.0.0-beta.2</version> <!-- {x-version-update;com.azure.spring:azure-spring-boot-starter-active-directory;current} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-resource-server</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-client</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.microsoft.azure</groupId>\n+      <artifactId>msal4j</artifactId>\n+      <version>1.8.0</version> <!-- {x-version-update;com.microsoft.azure:msal4j;external_dependency} -->\n+    </dependency>\n+</dependencies>\n+```\n+\n+### Register your Web API\n+You can follow [Register the Web API][register-the-web-api] to add `ResourceAccessGraph.read`, `ResourceAccessGraphCustomResources.read` scopes. \n+Convention current application id url is `api://sample-client-id`, application name is `azure-spring-boot-sample-active-directory-resource-server-access-other-resources`; the application id url of the sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] is `custom-client-id`, the application name is `azure-spring-boot-sample-active-directory-spring-security-resource-server`.  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTI4OTgyOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMTo1MDozOVrOICxsQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMTo1MDozOVrOICxsQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4MjIxMA==", "bodyText": "How about changing this to Add permissions or Add API permissions", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539782210", "createdAt": "2020-12-10T01:50:39Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/README.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# OAuth 2.0 Sample for Azure AD Spring Boot Starter Resource Server library for Java\n+\n+## Key concepts\n+[Resource server access other resources usage][resource-server-access-other-resources-usage] is more common, this is an extension of the [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server]. Similarly, this sample illustrates how to protect a Java web API by restricting access to its resources to authorized accounts, and the restricted resource will access other restricted resource, such as Graph API and Custom API.\n+\n+\n+## Getting started\n+We will prepare two application to demonstrate the dependent calls of resources.\n+Another sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] will be as Custom API resource.\n+\n+### Environment checklist\n+We need to ensure that this [environment checklist][ready-to-run-checklist] is completed before the run.\n+\n+### Include the package\n+\n+```xml\n+<dependencies>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-web</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-security</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.azure.spring</groupId>\n+      <artifactId>azure-spring-boot-starter-active-directory</artifactId>\n+      <version>3.0.0-beta.2</version> <!-- {x-version-update;com.azure.spring:azure-spring-boot-starter-active-directory;current} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-resource-server</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-client</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.microsoft.azure</groupId>\n+      <artifactId>msal4j</artifactId>\n+      <version>1.8.0</version> <!-- {x-version-update;com.microsoft.azure:msal4j;external_dependency} -->\n+    </dependency>\n+</dependencies>\n+```\n+\n+### Register your Web API\n+You can follow [Register the Web API][register-the-web-api] to add `ResourceAccessGraph.read`, `ResourceAccessGraphCustomResources.read` scopes. \n+Convention current application id url is `api://sample-client-id`, application name is `azure-spring-boot-sample-active-directory-resource-server-access-other-resources`; the application id url of the sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] is `custom-client-id`, the application name is `azure-spring-boot-sample-active-directory-spring-security-resource-server`.  \n+After adding as shown below:\n+\n+   ![API Permissions](resource/resource-access-other-resources-add-scope.png)\n+\n+### Add Custom API permissions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTI5MTYwOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/README.md", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMTo1MToyOFrOICxtSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNjoyMzo0MlrOIC3_Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4MjQ3NQ==", "bodyText": "Why do we need openid scope here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539782475", "createdAt": "2020-12-10T01:51:28Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/README.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# OAuth 2.0 Sample for Azure AD Spring Boot Starter Resource Server library for Java\n+\n+## Key concepts\n+[Resource server access other resources usage][resource-server-access-other-resources-usage] is more common, this is an extension of the [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server]. Similarly, this sample illustrates how to protect a Java web API by restricting access to its resources to authorized accounts, and the restricted resource will access other restricted resource, such as Graph API and Custom API.\n+\n+\n+## Getting started\n+We will prepare two application to demonstrate the dependent calls of resources.\n+Another sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] will be as Custom API resource.\n+\n+### Environment checklist\n+We need to ensure that this [environment checklist][ready-to-run-checklist] is completed before the run.\n+\n+### Include the package\n+\n+```xml\n+<dependencies>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-web</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-security</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.azure.spring</groupId>\n+      <artifactId>azure-spring-boot-starter-active-directory</artifactId>\n+      <version>3.0.0-beta.2</version> <!-- {x-version-update;com.azure.spring:azure-spring-boot-starter-active-directory;current} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-resource-server</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-client</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.microsoft.azure</groupId>\n+      <artifactId>msal4j</artifactId>\n+      <version>1.8.0</version> <!-- {x-version-update;com.microsoft.azure:msal4j;external_dependency} -->\n+    </dependency>\n+</dependencies>\n+```\n+\n+### Register your Web API\n+You can follow [Register the Web API][register-the-web-api] to add `ResourceAccessGraph.read`, `ResourceAccessGraphCustomResources.read` scopes. \n+Convention current application id url is `api://sample-client-id`, application name is `azure-spring-boot-sample-active-directory-resource-server-access-other-resources`; the application id url of the sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] is `custom-client-id`, the application name is `azure-spring-boot-sample-active-directory-spring-security-resource-server`.  \n+After adding as shown below:\n+\n+   ![API Permissions](resource/resource-access-other-resources-add-scope.png)\n+\n+### Add Custom API permissions\n+The current Web API will access Graph API and Custom API. \n+\n+Sign in to the [Azure portal][azure-portal]. If you have access to multiple tenants, use the **Directory + subscription** filter  in the top menu to select the tenant containing your client app's registration.\n+\n+#### Add Graph API Permission\n+1. Select **Azure Active Directory** > **App registrations**, and then select your current sample application (not your web API).\n+\n+2. Select **API permissions** > **Add a permission** > **Microsoft APIs** > **Microsoft Graph** > **Delegated permissions**, select **offline_access**, **openid**, **User.Read**, select **Add permission** to complete the process.\n+\n+#### Add Custom API Permission\n+\n+1. Select **Azure Active Directory** > **App registrations**, and then select your current sample application (not your web API).\n+\n+2. Select **API permissions** > **Add a permission** > **My APIs**, select *azure-spring-boot-sample-active-directory-spring-security-resource-server* application name.\n+\n+3. **Delegated permissions** is selected by default\uff0c Select **File** > **File.Read** permission, select **Add permission** to complete the process.\n+\n+### Grant consent for your tenant\n+Respectively grant admin consent to the Graph and Custom permissions. After adding as shown below:\n+   ![API Permissions](resource/resource-access-other-resources-add-permissions.png)\n+\n+## Examples\n+\n+### Configure application.yaml\n+\n+```yaml\n+azure:\n+  activedirectory:\n+    client-id: [resource-server-application-client-id]\n+    client-secret: [resource-server-application-client-secret]\n+    tenant-id: [teanant-id-registered-by-application]\n+    app-id-uri: api://sample-client-id\n+    authorization:\n+      graph:\n+        scopes:\n+          - openid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1MDY5Mw==", "bodyText": "some case depends on UserInfo endpoint, not required.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539850693", "createdAt": "2020-12-10T05:13:20Z", "author": {"login": "moarychan"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/README.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# OAuth 2.0 Sample for Azure AD Spring Boot Starter Resource Server library for Java\n+\n+## Key concepts\n+[Resource server access other resources usage][resource-server-access-other-resources-usage] is more common, this is an extension of the [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server]. Similarly, this sample illustrates how to protect a Java web API by restricting access to its resources to authorized accounts, and the restricted resource will access other restricted resource, such as Graph API and Custom API.\n+\n+\n+## Getting started\n+We will prepare two application to demonstrate the dependent calls of resources.\n+Another sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] will be as Custom API resource.\n+\n+### Environment checklist\n+We need to ensure that this [environment checklist][ready-to-run-checklist] is completed before the run.\n+\n+### Include the package\n+\n+```xml\n+<dependencies>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-web</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-security</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.azure.spring</groupId>\n+      <artifactId>azure-spring-boot-starter-active-directory</artifactId>\n+      <version>3.0.0-beta.2</version> <!-- {x-version-update;com.azure.spring:azure-spring-boot-starter-active-directory;current} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-resource-server</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-client</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.microsoft.azure</groupId>\n+      <artifactId>msal4j</artifactId>\n+      <version>1.8.0</version> <!-- {x-version-update;com.microsoft.azure:msal4j;external_dependency} -->\n+    </dependency>\n+</dependencies>\n+```\n+\n+### Register your Web API\n+You can follow [Register the Web API][register-the-web-api] to add `ResourceAccessGraph.read`, `ResourceAccessGraphCustomResources.read` scopes. \n+Convention current application id url is `api://sample-client-id`, application name is `azure-spring-boot-sample-active-directory-resource-server-access-other-resources`; the application id url of the sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] is `custom-client-id`, the application name is `azure-spring-boot-sample-active-directory-spring-security-resource-server`.  \n+After adding as shown below:\n+\n+   ![API Permissions](resource/resource-access-other-resources-add-scope.png)\n+\n+### Add Custom API permissions\n+The current Web API will access Graph API and Custom API. \n+\n+Sign in to the [Azure portal][azure-portal]. If you have access to multiple tenants, use the **Directory + subscription** filter  in the top menu to select the tenant containing your client app's registration.\n+\n+#### Add Graph API Permission\n+1. Select **Azure Active Directory** > **App registrations**, and then select your current sample application (not your web API).\n+\n+2. Select **API permissions** > **Add a permission** > **Microsoft APIs** > **Microsoft Graph** > **Delegated permissions**, select **offline_access**, **openid**, **User.Read**, select **Add permission** to complete the process.\n+\n+#### Add Custom API Permission\n+\n+1. Select **Azure Active Directory** > **App registrations**, and then select your current sample application (not your web API).\n+\n+2. Select **API permissions** > **Add a permission** > **My APIs**, select *azure-spring-boot-sample-active-directory-spring-security-resource-server* application name.\n+\n+3. **Delegated permissions** is selected by default\uff0c Select **File** > **File.Read** permission, select **Add permission** to complete the process.\n+\n+### Grant consent for your tenant\n+Respectively grant admin consent to the Graph and Custom permissions. After adding as shown below:\n+   ![API Permissions](resource/resource-access-other-resources-add-permissions.png)\n+\n+## Examples\n+\n+### Configure application.yaml\n+\n+```yaml\n+azure:\n+  activedirectory:\n+    client-id: [resource-server-application-client-id]\n+    client-secret: [resource-server-application-client-secret]\n+    tenant-id: [teanant-id-registered-by-application]\n+    app-id-uri: api://sample-client-id\n+    authorization:\n+      graph:\n+        scopes:\n+          - openid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4MjQ3NQ=="}, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg2MTA2OQ==", "bodyText": "For which cases will this depend on UserInfo endpoint?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539861069", "createdAt": "2020-12-10T05:44:15Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/README.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# OAuth 2.0 Sample for Azure AD Spring Boot Starter Resource Server library for Java\n+\n+## Key concepts\n+[Resource server access other resources usage][resource-server-access-other-resources-usage] is more common, this is an extension of the [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server]. Similarly, this sample illustrates how to protect a Java web API by restricting access to its resources to authorized accounts, and the restricted resource will access other restricted resource, such as Graph API and Custom API.\n+\n+\n+## Getting started\n+We will prepare two application to demonstrate the dependent calls of resources.\n+Another sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] will be as Custom API resource.\n+\n+### Environment checklist\n+We need to ensure that this [environment checklist][ready-to-run-checklist] is completed before the run.\n+\n+### Include the package\n+\n+```xml\n+<dependencies>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-web</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-security</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.azure.spring</groupId>\n+      <artifactId>azure-spring-boot-starter-active-directory</artifactId>\n+      <version>3.0.0-beta.2</version> <!-- {x-version-update;com.azure.spring:azure-spring-boot-starter-active-directory;current} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-resource-server</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-client</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.microsoft.azure</groupId>\n+      <artifactId>msal4j</artifactId>\n+      <version>1.8.0</version> <!-- {x-version-update;com.microsoft.azure:msal4j;external_dependency} -->\n+    </dependency>\n+</dependencies>\n+```\n+\n+### Register your Web API\n+You can follow [Register the Web API][register-the-web-api] to add `ResourceAccessGraph.read`, `ResourceAccessGraphCustomResources.read` scopes. \n+Convention current application id url is `api://sample-client-id`, application name is `azure-spring-boot-sample-active-directory-resource-server-access-other-resources`; the application id url of the sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] is `custom-client-id`, the application name is `azure-spring-boot-sample-active-directory-spring-security-resource-server`.  \n+After adding as shown below:\n+\n+   ![API Permissions](resource/resource-access-other-resources-add-scope.png)\n+\n+### Add Custom API permissions\n+The current Web API will access Graph API and Custom API. \n+\n+Sign in to the [Azure portal][azure-portal]. If you have access to multiple tenants, use the **Directory + subscription** filter  in the top menu to select the tenant containing your client app's registration.\n+\n+#### Add Graph API Permission\n+1. Select **Azure Active Directory** > **App registrations**, and then select your current sample application (not your web API).\n+\n+2. Select **API permissions** > **Add a permission** > **Microsoft APIs** > **Microsoft Graph** > **Delegated permissions**, select **offline_access**, **openid**, **User.Read**, select **Add permission** to complete the process.\n+\n+#### Add Custom API Permission\n+\n+1. Select **Azure Active Directory** > **App registrations**, and then select your current sample application (not your web API).\n+\n+2. Select **API permissions** > **Add a permission** > **My APIs**, select *azure-spring-boot-sample-active-directory-spring-security-resource-server* application name.\n+\n+3. **Delegated permissions** is selected by default\uff0c Select **File** > **File.Read** permission, select **Add permission** to complete the process.\n+\n+### Grant consent for your tenant\n+Respectively grant admin consent to the Graph and Custom permissions. After adding as shown below:\n+   ![API Permissions](resource/resource-access-other-resources-add-permissions.png)\n+\n+## Examples\n+\n+### Configure application.yaml\n+\n+```yaml\n+azure:\n+  activedirectory:\n+    client-id: [resource-server-application-client-id]\n+    client-secret: [resource-server-application-client-secret]\n+    tenant-id: [teanant-id-registered-by-application]\n+    app-id-uri: api://sample-client-id\n+    authorization:\n+      graph:\n+        scopes:\n+          - openid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4MjQ3NQ=="}, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg4NTM0Mg==", "bodyText": "Previous testing scenario, currently not required, I will remove it later.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539885342", "createdAt": "2020-12-10T06:23:42Z", "author": {"login": "moarychan"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/README.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# OAuth 2.0 Sample for Azure AD Spring Boot Starter Resource Server library for Java\n+\n+## Key concepts\n+[Resource server access other resources usage][resource-server-access-other-resources-usage] is more common, this is an extension of the [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server]. Similarly, this sample illustrates how to protect a Java web API by restricting access to its resources to authorized accounts, and the restricted resource will access other restricted resource, such as Graph API and Custom API.\n+\n+\n+## Getting started\n+We will prepare two application to demonstrate the dependent calls of resources.\n+Another sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] will be as Custom API resource.\n+\n+### Environment checklist\n+We need to ensure that this [environment checklist][ready-to-run-checklist] is completed before the run.\n+\n+### Include the package\n+\n+```xml\n+<dependencies>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-web</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-security</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.azure.spring</groupId>\n+      <artifactId>azure-spring-boot-starter-active-directory</artifactId>\n+      <version>3.0.0-beta.2</version> <!-- {x-version-update;com.azure.spring:azure-spring-boot-starter-active-directory;current} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-resource-server</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-client</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.microsoft.azure</groupId>\n+      <artifactId>msal4j</artifactId>\n+      <version>1.8.0</version> <!-- {x-version-update;com.microsoft.azure:msal4j;external_dependency} -->\n+    </dependency>\n+</dependencies>\n+```\n+\n+### Register your Web API\n+You can follow [Register the Web API][register-the-web-api] to add `ResourceAccessGraph.read`, `ResourceAccessGraphCustomResources.read` scopes. \n+Convention current application id url is `api://sample-client-id`, application name is `azure-spring-boot-sample-active-directory-resource-server-access-other-resources`; the application id url of the sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] is `custom-client-id`, the application name is `azure-spring-boot-sample-active-directory-spring-security-resource-server`.  \n+After adding as shown below:\n+\n+   ![API Permissions](resource/resource-access-other-resources-add-scope.png)\n+\n+### Add Custom API permissions\n+The current Web API will access Graph API and Custom API. \n+\n+Sign in to the [Azure portal][azure-portal]. If you have access to multiple tenants, use the **Directory + subscription** filter  in the top menu to select the tenant containing your client app's registration.\n+\n+#### Add Graph API Permission\n+1. Select **Azure Active Directory** > **App registrations**, and then select your current sample application (not your web API).\n+\n+2. Select **API permissions** > **Add a permission** > **Microsoft APIs** > **Microsoft Graph** > **Delegated permissions**, select **offline_access**, **openid**, **User.Read**, select **Add permission** to complete the process.\n+\n+#### Add Custom API Permission\n+\n+1. Select **Azure Active Directory** > **App registrations**, and then select your current sample application (not your web API).\n+\n+2. Select **API permissions** > **Add a permission** > **My APIs**, select *azure-spring-boot-sample-active-directory-spring-security-resource-server* application name.\n+\n+3. **Delegated permissions** is selected by default\uff0c Select **File** > **File.Read** permission, select **Add permission** to complete the process.\n+\n+### Grant consent for your tenant\n+Respectively grant admin consent to the Graph and Custom permissions. After adding as shown below:\n+   ![API Permissions](resource/resource-access-other-resources-add-permissions.png)\n+\n+## Examples\n+\n+### Configure application.yaml\n+\n+```yaml\n+azure:\n+  activedirectory:\n+    client-id: [resource-server-application-client-id]\n+    client-secret: [resource-server-application-client-secret]\n+    tenant-id: [teanant-id-registered-by-application]\n+    app-id-uri: api://sample-client-id\n+    authorization:\n+      graph:\n+        scopes:\n+          - openid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4MjQ3NQ=="}, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTI5NjgyOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMTo1MzozMFrOICxwMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMTo1MzozMFrOICxwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4MzIxNw==", "bodyText": "How about use xxx-sample-active-directory-resource-server-obo as the sample name?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539783217", "createdAt": "2020-12-10T01:53:30Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/README.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# OAuth 2.0 Sample for Azure AD Spring Boot Starter Resource Server library for Java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTQzOTUxOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMjo0NjozOFrOICy94w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNToxOTo1NFrOIC1_ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwMzEwNw==", "bodyText": "openid and offline_access are not scopes for custom, right?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539803107", "createdAt": "2020-12-10T02:46:38Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/README.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# OAuth 2.0 Sample for Azure AD Spring Boot Starter Resource Server library for Java\n+\n+## Key concepts\n+[Resource server access other resources usage][resource-server-access-other-resources-usage] is more common, this is an extension of the [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server]. Similarly, this sample illustrates how to protect a Java web API by restricting access to its resources to authorized accounts, and the restricted resource will access other restricted resource, such as Graph API and Custom API.\n+\n+\n+## Getting started\n+We will prepare two application to demonstrate the dependent calls of resources.\n+Another sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] will be as Custom API resource.\n+\n+### Environment checklist\n+We need to ensure that this [environment checklist][ready-to-run-checklist] is completed before the run.\n+\n+### Include the package\n+\n+```xml\n+<dependencies>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-web</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-security</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.azure.spring</groupId>\n+      <artifactId>azure-spring-boot-starter-active-directory</artifactId>\n+      <version>3.0.0-beta.2</version> <!-- {x-version-update;com.azure.spring:azure-spring-boot-starter-active-directory;current} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-resource-server</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-client</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.microsoft.azure</groupId>\n+      <artifactId>msal4j</artifactId>\n+      <version>1.8.0</version> <!-- {x-version-update;com.microsoft.azure:msal4j;external_dependency} -->\n+    </dependency>\n+</dependencies>\n+```\n+\n+### Register your Web API\n+You can follow [Register the Web API][register-the-web-api] to add `ResourceAccessGraph.read`, `ResourceAccessGraphCustomResources.read` scopes. \n+Convention current application id url is `api://sample-client-id`, application name is `azure-spring-boot-sample-active-directory-resource-server-access-other-resources`; the application id url of the sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] is `custom-client-id`, the application name is `azure-spring-boot-sample-active-directory-spring-security-resource-server`.  \n+After adding as shown below:\n+\n+   ![API Permissions](resource/resource-access-other-resources-add-scope.png)\n+\n+### Add Custom API permissions\n+The current Web API will access Graph API and Custom API. \n+\n+Sign in to the [Azure portal][azure-portal]. If you have access to multiple tenants, use the **Directory + subscription** filter  in the top menu to select the tenant containing your client app's registration.\n+\n+#### Add Graph API Permission\n+1. Select **Azure Active Directory** > **App registrations**, and then select your current sample application (not your web API).\n+\n+2. Select **API permissions** > **Add a permission** > **Microsoft APIs** > **Microsoft Graph** > **Delegated permissions**, select **offline_access**, **openid**, **User.Read**, select **Add permission** to complete the process.\n+\n+#### Add Custom API Permission\n+\n+1. Select **Azure Active Directory** > **App registrations**, and then select your current sample application (not your web API).\n+\n+2. Select **API permissions** > **Add a permission** > **My APIs**, select *azure-spring-boot-sample-active-directory-spring-security-resource-server* application name.\n+\n+3. **Delegated permissions** is selected by default\uff0c Select **File** > **File.Read** permission, select **Add permission** to complete the process.\n+\n+### Grant consent for your tenant\n+Respectively grant admin consent to the Graph and Custom permissions. After adding as shown below:\n+   ![API Permissions](resource/resource-access-other-resources-add-permissions.png)\n+\n+## Examples\n+\n+### Configure application.yaml\n+\n+```yaml\n+azure:\n+  activedirectory:\n+    client-id: [resource-server-application-client-id]\n+    client-secret: [resource-server-application-client-secret]\n+    tenant-id: [teanant-id-registered-by-application]\n+    app-id-uri: api://sample-client-id\n+    authorization:\n+      graph:\n+        scopes:\n+          - openid\n+          - offline_access\n+          - User.read\n+      custom:\n+        scopes:\n+          - openid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1MjcwNw==", "bodyText": "Yes, remove them later", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539852707", "createdAt": "2020-12-10T05:19:54Z", "author": {"login": "moarychan"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/README.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# OAuth 2.0 Sample for Azure AD Spring Boot Starter Resource Server library for Java\n+\n+## Key concepts\n+[Resource server access other resources usage][resource-server-access-other-resources-usage] is more common, this is an extension of the [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server]. Similarly, this sample illustrates how to protect a Java web API by restricting access to its resources to authorized accounts, and the restricted resource will access other restricted resource, such as Graph API and Custom API.\n+\n+\n+## Getting started\n+We will prepare two application to demonstrate the dependent calls of resources.\n+Another sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] will be as Custom API resource.\n+\n+### Environment checklist\n+We need to ensure that this [environment checklist][ready-to-run-checklist] is completed before the run.\n+\n+### Include the package\n+\n+```xml\n+<dependencies>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-web</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-security</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.azure.spring</groupId>\n+      <artifactId>azure-spring-boot-starter-active-directory</artifactId>\n+      <version>3.0.0-beta.2</version> <!-- {x-version-update;com.azure.spring:azure-spring-boot-starter-active-directory;current} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-resource-server</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-client</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.microsoft.azure</groupId>\n+      <artifactId>msal4j</artifactId>\n+      <version>1.8.0</version> <!-- {x-version-update;com.microsoft.azure:msal4j;external_dependency} -->\n+    </dependency>\n+</dependencies>\n+```\n+\n+### Register your Web API\n+You can follow [Register the Web API][register-the-web-api] to add `ResourceAccessGraph.read`, `ResourceAccessGraphCustomResources.read` scopes. \n+Convention current application id url is `api://sample-client-id`, application name is `azure-spring-boot-sample-active-directory-resource-server-access-other-resources`; the application id url of the sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] is `custom-client-id`, the application name is `azure-spring-boot-sample-active-directory-spring-security-resource-server`.  \n+After adding as shown below:\n+\n+   ![API Permissions](resource/resource-access-other-resources-add-scope.png)\n+\n+### Add Custom API permissions\n+The current Web API will access Graph API and Custom API. \n+\n+Sign in to the [Azure portal][azure-portal]. If you have access to multiple tenants, use the **Directory + subscription** filter  in the top menu to select the tenant containing your client app's registration.\n+\n+#### Add Graph API Permission\n+1. Select **Azure Active Directory** > **App registrations**, and then select your current sample application (not your web API).\n+\n+2. Select **API permissions** > **Add a permission** > **Microsoft APIs** > **Microsoft Graph** > **Delegated permissions**, select **offline_access**, **openid**, **User.Read**, select **Add permission** to complete the process.\n+\n+#### Add Custom API Permission\n+\n+1. Select **Azure Active Directory** > **App registrations**, and then select your current sample application (not your web API).\n+\n+2. Select **API permissions** > **Add a permission** > **My APIs**, select *azure-spring-boot-sample-active-directory-spring-security-resource-server* application name.\n+\n+3. **Delegated permissions** is selected by default\uff0c Select **File** > **File.Read** permission, select **Add permission** to complete the process.\n+\n+### Grant consent for your tenant\n+Respectively grant admin consent to the Graph and Custom permissions. After adding as shown below:\n+   ![API Permissions](resource/resource-access-other-resources-add-permissions.png)\n+\n+## Examples\n+\n+### Configure application.yaml\n+\n+```yaml\n+azure:\n+  activedirectory:\n+    client-id: [resource-server-application-client-id]\n+    client-secret: [resource-server-application-client-secret]\n+    tenant-id: [teanant-id-registered-by-application]\n+    app-id-uri: api://sample-client-id\n+    authorization:\n+      graph:\n+        scopes:\n+          - openid\n+          - offline_access\n+          - User.read\n+      custom:\n+        scopes:\n+          - openid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwMzEwNw=="}, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTQ0MzMxOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/src/main/java/com/azure/spring/sample/aad/configuration/AADSampleConfiguration.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMjo0ODowN1rOICy_8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNzoxMDoyN1rOIC6Wcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwMzYzMg==", "bodyText": "Why do we create this in the configuration?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539803632", "createdAt": "2020-12-10T02:48:07Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/src/main/java/com/azure/spring/sample/aad/configuration/AADSampleConfiguration.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.azure.spring.sample.aad.configuration;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientManager;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientProvider;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.reactive.function.client.ServletOAuth2AuthorizedClientExchangeFilterFunction;\n+import org.springframework.web.reactive.function.client.WebClient;\n+\n+@Configuration\n+public class AADSampleConfiguration {\n+\n+    @Bean\n+    public OAuth2AuthorizedClientManager authorizedClientManager(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1MzMwOQ==", "bodyText": "it's only for constructing WebClient bean, the web client is convenient to call the corresponding APIs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539853309", "createdAt": "2020-12-10T05:21:51Z", "author": {"login": "moarychan"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/src/main/java/com/azure/spring/sample/aad/configuration/AADSampleConfiguration.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.azure.spring.sample.aad.configuration;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientManager;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientProvider;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.reactive.function.client.ServletOAuth2AuthorizedClientExchangeFilterFunction;\n+import org.springframework.web.reactive.function.client.WebClient;\n+\n+@Configuration\n+public class AADSampleConfiguration {\n+\n+    @Bean\n+    public OAuth2AuthorizedClientManager authorizedClientManager(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwMzYzMg=="}, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg2MTc3Mg==", "bodyText": "Can we get this from the spring context?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539861772", "createdAt": "2020-12-10T05:46:15Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/src/main/java/com/azure/spring/sample/aad/configuration/AADSampleConfiguration.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.azure.spring.sample.aad.configuration;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientManager;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientProvider;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.reactive.function.client.ServletOAuth2AuthorizedClientExchangeFilterFunction;\n+import org.springframework.web.reactive.function.client.WebClient;\n+\n+@Configuration\n+public class AADSampleConfiguration {\n+\n+    @Bean\n+    public OAuth2AuthorizedClientManager authorizedClientManager(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwMzYzMg=="}, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTkyNDA4Mw==", "bodyText": "No,  there's no OAuth2AuthorizedClientManager bean in spring context, or we use ResTemplate instead.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539924083", "createdAt": "2020-12-10T07:10:27Z", "author": {"login": "moarychan"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/src/main/java/com/azure/spring/sample/aad/configuration/AADSampleConfiguration.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.azure.spring.sample.aad.configuration;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientManager;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientProvider;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.reactive.function.client.ServletOAuth2AuthorizedClientExchangeFilterFunction;\n+import org.springframework.web.reactive.function.client.WebClient;\n+\n+@Configuration\n+public class AADSampleConfiguration {\n+\n+    @Bean\n+    public OAuth2AuthorizedClientManager authorizedClientManager(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwMzYzMg=="}, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTQ0NjE1OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/src/main/java/com/azure/spring/sample/aad/controller/SampleController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMjo0OToyOFrOICzBeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMjo0OToyOFrOICzBeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNDAyNg==", "bodyText": "nit: refactor this to LOGGER", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539804026", "createdAt": "2020-12-10T02:49:28Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/src/main/java/com/azure/spring/sample/aad/controller/SampleController.java", "diffHunk": "@@ -0,0 +1,112 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.sample.aad.controller;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.annotation.RegisteredOAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.context.request.RequestAttributes;\n+import org.springframework.web.context.request.RequestContextHolder;\n+import org.springframework.web.context.request.ServletRequestAttributes;\n+import org.springframework.web.reactive.function.client.WebClient;\n+\n+import static org.springframework.security.oauth2.client.web.reactive.function.client.ServletOAuth2AuthorizedClientExchangeFilterFunction.oauth2AuthorizedClient;\n+\n+@RestController\n+public class SampleController {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SampleController.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTQ1MTcyOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/src/main/java/com/azure/spring/sample/aad/security/AADSampleSecurityConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMjo1MTo0M1rOICzEjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMjo1MTo0M1rOICzEjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNDgxMg==", "bodyText": "Is there a way to make this more concise?\nhttp.authorizeRequests()\n    .anyRequest().authenticated()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539804812", "createdAt": "2020-12-10T02:51:43Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/src/main/java/com/azure/spring/sample/aad/security/AADSampleSecurityConfiguration.java", "diffHunk": "@@ -0,0 +1,26 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.sample.aad.security;\n+\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer;\n+\n+@EnableWebSecurity(debug = false)\n+@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)\n+public class AADSampleSecurityConfiguration extends WebSecurityConfigurerAdapter {\n+\n+    @Override\n+    protected void configure(HttpSecurity http) throws Exception {\n+\t\thttp.authorizeRequests((authorizeRequests) ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTQ1MzU4OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/src/main/resources/application.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMjo1MjoyMFrOICzFjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNToyMzoxNlrOIC2D0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNTA2OQ==", "bodyText": "Why are we specifying this here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539805069", "createdAt": "2020-12-10T02:52:20Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/src/main/resources/application.yaml", "diffHunk": "@@ -0,0 +1,33 @@\n+server:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1Mzc3Ng==", "bodyText": "Just want to combine with xiaobin's sample, use different port to run together.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539853776", "createdAt": "2020-12-10T05:23:16Z", "author": {"login": "moarychan"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/src/main/resources/application.yaml", "diffHunk": "@@ -0,0 +1,33 @@\n+server:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNTA2OQ=="}, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTQ1NDY0OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/src/main/resources/application.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMjo1Mjo0MFrOICzGHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMjo1Mjo0MFrOICzGHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNTIxMw==", "bodyText": "Same here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539805213", "createdAt": "2020-12-10T02:52:40Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/src/main/resources/application.yaml", "diffHunk": "@@ -0,0 +1,33 @@\n+server:\n+  port: 8081\n+\n+azure:\n+  activedirectory:\n+    user-group:\n+      allowed-groups:\n+        - group1\n+        - group2\n+    client-id: [resource-server-application-client-id]\n+    client-secret: [resource-server-application-client-secret]\n+    tenant-id: [teanant-id-registered-by-application]\n+    app-id-uri: [current-expose-application-id-url]\n+    authorization:\n+      graph:\n+        scopes:\n+          - openid\n+          - offline_access\n+          - User.read\n+      custom:\n+        scopes:\n+          - openid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTQ1NTU3OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-active-directory/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMjo1MzoxMlrOICzGrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNToyNDo0NVrOIC2F4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNTM1OQ==", "bodyText": "Why is this needed?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539805359", "createdAt": "2020-12-10T02:53:12Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/pom.xml", "diffHunk": "@@ -70,6 +75,11 @@\n       <artifactId>nimbus-jose-jwt</artifactId>\n       <version>8.19</version> <!-- {x-version-update;com.nimbusds:nimbus-jose-jwt;external_dependency} -->\n     </dependency>\n+    <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNTkzMA==", "bodyText": "Do we need to bring another aad starter here? Designated for resource server case.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539805930", "createdAt": "2020-12-10T02:54:47Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/pom.xml", "diffHunk": "@@ -70,6 +75,11 @@\n       <artifactId>nimbus-jose-jwt</artifactId>\n       <version>8.19</version> <!-- {x-version-update;com.nimbusds:nimbus-jose-jwt;external_dependency} -->\n     </dependency>\n+    <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNTM1OQ=="}, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1NDMwNA==", "bodyText": "no, it will be moved to azure-spring-boot pom.xml.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539854304", "createdAt": "2020-12-10T05:24:45Z", "author": {"login": "moarychan"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/pom.xml", "diffHunk": "@@ -70,6 +75,11 @@\n       <artifactId>nimbus-jose-jwt</artifactId>\n       <version>8.19</version> <!-- {x-version-update;com.nimbusds:nimbus-jose-jwt;external_dependency} -->\n     </dependency>\n+    <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNTM1OQ=="}, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTQ2NTYxOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/ClientRegistrationInitialization.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMjo1NzoxNVrOICzMOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNToyNTo1NFrOIC2HgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNjc3OQ==", "bodyText": "Are we only using this for the resource server case?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539806779", "createdAt": "2020-12-10T02:57:15Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/ClientRegistrationInitialization.java", "diffHunk": "@@ -0,0 +1,113 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad;\n+\n+import com.azure.spring.aad.webapp.AuthorizationProperties;\n+import com.azure.spring.aad.webapp.AuthorizationServerEndpoints;\n+import com.azure.spring.aad.webapp.AzureClientRegistration;\n+import com.azure.spring.autoconfigure.aad.AADAuthenticationProperties;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Client registration initialization based on AAD properties. Web application and resource server will quote.\n+ */\n+public class ClientRegistrationInitialization {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef58b3fac0c1260c3851dca399c17c989ddd35bc"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0MzUwNw==", "bodyText": "If yes, we should move this to the webapi package.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539843507", "createdAt": "2020-12-10T04:51:20Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/ClientRegistrationInitialization.java", "diffHunk": "@@ -0,0 +1,113 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad;\n+\n+import com.azure.spring.aad.webapp.AuthorizationProperties;\n+import com.azure.spring.aad.webapp.AuthorizationServerEndpoints;\n+import com.azure.spring.aad.webapp.AzureClientRegistration;\n+import com.azure.spring.autoconfigure.aad.AADAuthenticationProperties;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Client registration initialization based on AAD properties. Web application and resource server will quote.\n+ */\n+public class ClientRegistrationInitialization {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNjc3OQ=="}, "originalCommit": {"oid": "ef58b3fac0c1260c3851dca399c17c989ddd35bc"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1NDcyMA==", "bodyText": "It will be a common component, not yet replace web app auto config side.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539854720", "createdAt": "2020-12-10T05:25:54Z", "author": {"login": "moarychan"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/ClientRegistrationInitialization.java", "diffHunk": "@@ -0,0 +1,113 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad;\n+\n+import com.azure.spring.aad.webapp.AuthorizationProperties;\n+import com.azure.spring.aad.webapp.AuthorizationServerEndpoints;\n+import com.azure.spring.aad.webapp.AzureClientRegistration;\n+import com.azure.spring.autoconfigure.aad.AADAuthenticationProperties;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Client registration initialization based on AAD properties. Web application and resource server will quote.\n+ */\n+public class ClientRegistrationInitialization {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNjc3OQ=="}, "originalCommit": {"oid": "ef58b3fac0c1260c3851dca399c17c989ddd35bc"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTQ2ODQzOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMjo1ODoyMVrOICzNug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDoxMzozMVrOIDBmvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNzE2Mg==", "bodyText": "Please refactor this to LOGGER", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539807162", "createdAt": "2020-12-10T02:58:21Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -0,0 +1,148 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IClientSecret;\n+import com.microsoft.aad.msal4j.OnBehalfOfParameters;\n+import com.microsoft.aad.msal4j.UserAssertion;\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AbstractOAuth2Token;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.server.resource.authentication.AbstractOAuth2TokenAuthenticationToken;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.net.MalformedURLException;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+/**\n+ * <p>\n+ * AADOAuth2OboAuthorizedClientRepository\n+ * </p>\n+ */\n+public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedClientRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef58b3fac0c1260c3851dca399c17c989ddd35bc"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA0Mjk0Mg==", "bodyText": "done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540042942", "createdAt": "2020-12-10T10:13:31Z", "author": {"login": "wujack778"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -0,0 +1,148 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IClientSecret;\n+import com.microsoft.aad.msal4j.OnBehalfOfParameters;\n+import com.microsoft.aad.msal4j.UserAssertion;\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AbstractOAuth2Token;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.server.resource.authentication.AbstractOAuth2TokenAuthenticationToken;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.net.MalformedURLException;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+/**\n+ * <p>\n+ * AADOAuth2OboAuthorizedClientRepository\n+ * </p>\n+ */\n+public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedClientRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNzE2Mg=="}, "originalCommit": {"oid": "ef58b3fac0c1260c3851dca399c17c989ddd35bc"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTczMTc0OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo0ODozOVrOIC1Ylw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMjo1MzoyOVrOIDmyjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0MjcxMQ==", "bodyText": "We should add more test cases for client registrations. We could run the context with more properties,\nxxx:\n  graph:\n     scopes: xxx\nto check whether does the graph client exist?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539842711", "createdAt": "2020-12-10T04:48:39Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import org.junit.Test;\n+import org.springframework.boot.test.context.FilteredClassLoader;\n+import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class AzureActiveDirectoryResourceServerClientConfigurationTest {\n+\n+    private static final String AAD_PROPERTY_PREFIX = \"azure.activedirectory.\";\n+\n+    private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()\n+        .withPropertyValues(AAD_PROPERTY_PREFIX + \"user-group.allowed-groups=group1\",\n+            AAD_PROPERTY_PREFIX + \"tenant-id=fake-tenant-id\",\n+            AAD_PROPERTY_PREFIX + \"client-id=fake-client-id\",\n+            AAD_PROPERTY_PREFIX + \"client-secret=fake-client-secret\",\n+            AAD_PROPERTY_PREFIX + \"web-application.enabled=false\");\n+\n+    @Test\n+    public void testNotExistBearerTokenAuthenticationToken() {\n+        this.contextRunner\n+            .withUserConfiguration(AzureActiveDirectoryResourceServerClientConfiguration.class)\n+            .withClassLoader(new FilteredClassLoader(BearerTokenAuthenticationToken.class))\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n+            });\n+    }\n+\n+    @Test\n+    public void testNotExistOAuth2LoginAuthenticationFilter() {\n+        this.contextRunner\n+            .withUserConfiguration(AzureActiveDirectoryResourceServerClientConfiguration.class)\n+            .withClassLoader(new FilteredClassLoader(OAuth2LoginAuthenticationFilter.class))\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n+            });\n+    }\n+\n+    @Test\n+    public void testOAuth2AuthorizedClientRepository() {\n+        this.contextRunner\n+            .withUserConfiguration(AzureActiveDirectoryResourceServerClientConfiguration.class)\n+            .run(context -> {\n+                final OAuth2AuthorizedClientRepository aadOboRepo = context.getBean(\n+                    AADOAuth2OboAuthorizedClientRepository.class);\n+                assertThat(aadOboRepo).isNotNull();\n+                assertThat(aadOboRepo).isExactlyInstanceOf(AADOAuth2OboAuthorizedClientRepository.class);\n+            });\n+    }\n+\n+    @Test\n+    public void testClientRegistrationRepository() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef58b3fac0c1260c3851dca399c17c989ddd35bc"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1NTQ1MQ==", "bodyText": "Means more resource dependencies to test in the sample?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539855451", "createdAt": "2020-12-10T05:28:08Z", "author": {"login": "moarychan"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import org.junit.Test;\n+import org.springframework.boot.test.context.FilteredClassLoader;\n+import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class AzureActiveDirectoryResourceServerClientConfigurationTest {\n+\n+    private static final String AAD_PROPERTY_PREFIX = \"azure.activedirectory.\";\n+\n+    private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()\n+        .withPropertyValues(AAD_PROPERTY_PREFIX + \"user-group.allowed-groups=group1\",\n+            AAD_PROPERTY_PREFIX + \"tenant-id=fake-tenant-id\",\n+            AAD_PROPERTY_PREFIX + \"client-id=fake-client-id\",\n+            AAD_PROPERTY_PREFIX + \"client-secret=fake-client-secret\",\n+            AAD_PROPERTY_PREFIX + \"web-application.enabled=false\");\n+\n+    @Test\n+    public void testNotExistBearerTokenAuthenticationToken() {\n+        this.contextRunner\n+            .withUserConfiguration(AzureActiveDirectoryResourceServerClientConfiguration.class)\n+            .withClassLoader(new FilteredClassLoader(BearerTokenAuthenticationToken.class))\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n+            });\n+    }\n+\n+    @Test\n+    public void testNotExistOAuth2LoginAuthenticationFilter() {\n+        this.contextRunner\n+            .withUserConfiguration(AzureActiveDirectoryResourceServerClientConfiguration.class)\n+            .withClassLoader(new FilteredClassLoader(OAuth2LoginAuthenticationFilter.class))\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n+            });\n+    }\n+\n+    @Test\n+    public void testOAuth2AuthorizedClientRepository() {\n+        this.contextRunner\n+            .withUserConfiguration(AzureActiveDirectoryResourceServerClientConfiguration.class)\n+            .run(context -> {\n+                final OAuth2AuthorizedClientRepository aadOboRepo = context.getBean(\n+                    AADOAuth2OboAuthorizedClientRepository.class);\n+                assertThat(aadOboRepo).isNotNull();\n+                assertThat(aadOboRepo).isExactlyInstanceOf(AADOAuth2OboAuthorizedClientRepository.class);\n+            });\n+    }\n+\n+    @Test\n+    public void testClientRegistrationRepository() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0MjcxMQ=="}, "originalCommit": {"oid": "ef58b3fac0c1260c3851dca399c17c989ddd35bc"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg2MTYxMw==", "bodyText": "I don't get this\n\nMeans more resource dependencies to test in the sample?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539861613", "createdAt": "2020-12-10T05:45:44Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import org.junit.Test;\n+import org.springframework.boot.test.context.FilteredClassLoader;\n+import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class AzureActiveDirectoryResourceServerClientConfigurationTest {\n+\n+    private static final String AAD_PROPERTY_PREFIX = \"azure.activedirectory.\";\n+\n+    private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()\n+        .withPropertyValues(AAD_PROPERTY_PREFIX + \"user-group.allowed-groups=group1\",\n+            AAD_PROPERTY_PREFIX + \"tenant-id=fake-tenant-id\",\n+            AAD_PROPERTY_PREFIX + \"client-id=fake-client-id\",\n+            AAD_PROPERTY_PREFIX + \"client-secret=fake-client-secret\",\n+            AAD_PROPERTY_PREFIX + \"web-application.enabled=false\");\n+\n+    @Test\n+    public void testNotExistBearerTokenAuthenticationToken() {\n+        this.contextRunner\n+            .withUserConfiguration(AzureActiveDirectoryResourceServerClientConfiguration.class)\n+            .withClassLoader(new FilteredClassLoader(BearerTokenAuthenticationToken.class))\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n+            });\n+    }\n+\n+    @Test\n+    public void testNotExistOAuth2LoginAuthenticationFilter() {\n+        this.contextRunner\n+            .withUserConfiguration(AzureActiveDirectoryResourceServerClientConfiguration.class)\n+            .withClassLoader(new FilteredClassLoader(OAuth2LoginAuthenticationFilter.class))\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n+            });\n+    }\n+\n+    @Test\n+    public void testOAuth2AuthorizedClientRepository() {\n+        this.contextRunner\n+            .withUserConfiguration(AzureActiveDirectoryResourceServerClientConfiguration.class)\n+            .run(context -> {\n+                final OAuth2AuthorizedClientRepository aadOboRepo = context.getBean(\n+                    AADOAuth2OboAuthorizedClientRepository.class);\n+                assertThat(aadOboRepo).isNotNull();\n+                assertThat(aadOboRepo).isExactlyInstanceOf(AADOAuth2OboAuthorizedClientRepository.class);\n+            });\n+    }\n+\n+    @Test\n+    public void testClientRegistrationRepository() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0MjcxMQ=="}, "originalCommit": {"oid": "ef58b3fac0c1260c3851dca399c17c989ddd35bc"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg4NjkzNw==", "bodyText": "I mean the sample should configure more clients to use more scopes scenario, right?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539886937", "createdAt": "2020-12-10T06:25:42Z", "author": {"login": "moarychan"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import org.junit.Test;\n+import org.springframework.boot.test.context.FilteredClassLoader;\n+import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class AzureActiveDirectoryResourceServerClientConfigurationTest {\n+\n+    private static final String AAD_PROPERTY_PREFIX = \"azure.activedirectory.\";\n+\n+    private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()\n+        .withPropertyValues(AAD_PROPERTY_PREFIX + \"user-group.allowed-groups=group1\",\n+            AAD_PROPERTY_PREFIX + \"tenant-id=fake-tenant-id\",\n+            AAD_PROPERTY_PREFIX + \"client-id=fake-client-id\",\n+            AAD_PROPERTY_PREFIX + \"client-secret=fake-client-secret\",\n+            AAD_PROPERTY_PREFIX + \"web-application.enabled=false\");\n+\n+    @Test\n+    public void testNotExistBearerTokenAuthenticationToken() {\n+        this.contextRunner\n+            .withUserConfiguration(AzureActiveDirectoryResourceServerClientConfiguration.class)\n+            .withClassLoader(new FilteredClassLoader(BearerTokenAuthenticationToken.class))\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n+            });\n+    }\n+\n+    @Test\n+    public void testNotExistOAuth2LoginAuthenticationFilter() {\n+        this.contextRunner\n+            .withUserConfiguration(AzureActiveDirectoryResourceServerClientConfiguration.class)\n+            .withClassLoader(new FilteredClassLoader(OAuth2LoginAuthenticationFilter.class))\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n+            });\n+    }\n+\n+    @Test\n+    public void testOAuth2AuthorizedClientRepository() {\n+        this.contextRunner\n+            .withUserConfiguration(AzureActiveDirectoryResourceServerClientConfiguration.class)\n+            .run(context -> {\n+                final OAuth2AuthorizedClientRepository aadOboRepo = context.getBean(\n+                    AADOAuth2OboAuthorizedClientRepository.class);\n+                assertThat(aadOboRepo).isNotNull();\n+                assertThat(aadOboRepo).isExactlyInstanceOf(AADOAuth2OboAuthorizedClientRepository.class);\n+            });\n+    }\n+\n+    @Test\n+    public void testClientRegistrationRepository() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0MjcxMQ=="}, "originalCommit": {"oid": "ef58b3fac0c1260c3851dca399c17c989ddd35bc"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY1MjE3NQ==", "bodyText": "No, I'm just talking about the test cases.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540652175", "createdAt": "2020-12-11T02:53:29Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import org.junit.Test;\n+import org.springframework.boot.test.context.FilteredClassLoader;\n+import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class AzureActiveDirectoryResourceServerClientConfigurationTest {\n+\n+    private static final String AAD_PROPERTY_PREFIX = \"azure.activedirectory.\";\n+\n+    private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()\n+        .withPropertyValues(AAD_PROPERTY_PREFIX + \"user-group.allowed-groups=group1\",\n+            AAD_PROPERTY_PREFIX + \"tenant-id=fake-tenant-id\",\n+            AAD_PROPERTY_PREFIX + \"client-id=fake-client-id\",\n+            AAD_PROPERTY_PREFIX + \"client-secret=fake-client-secret\",\n+            AAD_PROPERTY_PREFIX + \"web-application.enabled=false\");\n+\n+    @Test\n+    public void testNotExistBearerTokenAuthenticationToken() {\n+        this.contextRunner\n+            .withUserConfiguration(AzureActiveDirectoryResourceServerClientConfiguration.class)\n+            .withClassLoader(new FilteredClassLoader(BearerTokenAuthenticationToken.class))\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n+            });\n+    }\n+\n+    @Test\n+    public void testNotExistOAuth2LoginAuthenticationFilter() {\n+        this.contextRunner\n+            .withUserConfiguration(AzureActiveDirectoryResourceServerClientConfiguration.class)\n+            .withClassLoader(new FilteredClassLoader(OAuth2LoginAuthenticationFilter.class))\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n+            });\n+    }\n+\n+    @Test\n+    public void testOAuth2AuthorizedClientRepository() {\n+        this.contextRunner\n+            .withUserConfiguration(AzureActiveDirectoryResourceServerClientConfiguration.class)\n+            .run(context -> {\n+                final OAuth2AuthorizedClientRepository aadOboRepo = context.getBean(\n+                    AADOAuth2OboAuthorizedClientRepository.class);\n+                assertThat(aadOboRepo).isNotNull();\n+                assertThat(aadOboRepo).isExactlyInstanceOf(AADOAuth2OboAuthorizedClientRepository.class);\n+            });\n+    }\n+\n+    @Test\n+    public void testClientRegistrationRepository() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0MjcxMQ=="}, "originalCommit": {"oid": "ef58b3fac0c1260c3851dca399c17c989ddd35bc"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTQ0NDU0OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-obo/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDo1NDo0M1rOIDpHRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDo1NDo0M1rOIDpHRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5MDI0Nw==", "bodyText": "Why is the resource server accessing other resources usage more common?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540690247", "createdAt": "2020-12-11T04:54:43Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-obo/README.md", "diffHunk": "@@ -0,0 +1,164 @@\n+# OAuth 2.0 Sample for azure-spring-boot-sample-active-directory-resource-server-obo library for Java\n+\n+## Key concepts\n+[Resource server access other resources usage][resource-server-access-other-resources-usage] is more common, this is an extension of the [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server]. Similarly, this sample illustrates how to protect a Java web API by restricting access to its resources to authorized accounts, and the restricted resource will access other restricted resource, such as Graph API and Custom API.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTQ0NjUyOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-obo/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDo1NTo0OFrOIDpIXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDo1NTo0OFrOIDpIXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5MDUyNA==", "bodyText": "Why do we need this sdk?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540690524", "createdAt": "2020-12-11T04:55:48Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-obo/README.md", "diffHunk": "@@ -0,0 +1,164 @@\n+# OAuth 2.0 Sample for azure-spring-boot-sample-active-directory-resource-server-obo library for Java\n+\n+## Key concepts\n+[Resource server access other resources usage][resource-server-access-other-resources-usage] is more common, this is an extension of the [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server]. Similarly, this sample illustrates how to protect a Java web API by restricting access to its resources to authorized accounts, and the restricted resource will access other restricted resource, such as Graph API and Custom API.\n+\n+\n+## Getting started\n+We will prepare two application to demonstrate the dependent calls of resources.\n+Another sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] will be as Custom API resource.\n+\n+### Environment checklist\n+We need to ensure that this [environment checklist][ready-to-run-checklist] is completed before the run.\n+\n+### Include the package\n+\n+```xml\n+<dependencies>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-web</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-security</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.azure.spring</groupId>\n+      <artifactId>azure-spring-boot-starter-active-directory</artifactId>\n+      <version>3.0.0-beta.2</version> <!-- {x-version-update;com.azure.spring:azure-spring-boot-starter-active-directory;current} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-resource-server</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-client</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.microsoft.azure</groupId>\n+      <artifactId>msal4j</artifactId>\n+      <version>1.8.0</version> <!-- {x-version-update;com.microsoft.azure:msal4j;external_dependency} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>com.nimbusds</groupId>\n+      <artifactId>nimbus-jose-jwt</artifactId>\n+      <version>8.19</version> <!-- {x-version-update;com.nimbusds:nimbus-jose-jwt;external_dependency} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>com.nimbusds</groupId>\n+      <artifactId>oauth2-oidc-sdk</artifactId>\n+      <version>7.1.1</version> <!-- {x-version-update;com.nimbusds:oauth2-oidc-sdk;external_dependency} -->\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTQ1MjgwOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-obo/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDo1ODozNlrOIDpLqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDo1ODozNlrOIDpLqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5MTM3MA==", "bodyText": "Why do we need to list the application names here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540691370", "createdAt": "2020-12-11T04:58:36Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-obo/README.md", "diffHunk": "@@ -0,0 +1,164 @@\n+# OAuth 2.0 Sample for azure-spring-boot-sample-active-directory-resource-server-obo library for Java\n+\n+## Key concepts\n+[Resource server access other resources usage][resource-server-access-other-resources-usage] is more common, this is an extension of the [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server]. Similarly, this sample illustrates how to protect a Java web API by restricting access to its resources to authorized accounts, and the restricted resource will access other restricted resource, such as Graph API and Custom API.\n+\n+\n+## Getting started\n+We will prepare two application to demonstrate the dependent calls of resources.\n+Another sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] will be as Custom API resource.\n+\n+### Environment checklist\n+We need to ensure that this [environment checklist][ready-to-run-checklist] is completed before the run.\n+\n+### Include the package\n+\n+```xml\n+<dependencies>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-web</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-security</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.azure.spring</groupId>\n+      <artifactId>azure-spring-boot-starter-active-directory</artifactId>\n+      <version>3.0.0-beta.2</version> <!-- {x-version-update;com.azure.spring:azure-spring-boot-starter-active-directory;current} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-resource-server</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-client</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.microsoft.azure</groupId>\n+      <artifactId>msal4j</artifactId>\n+      <version>1.8.0</version> <!-- {x-version-update;com.microsoft.azure:msal4j;external_dependency} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>com.nimbusds</groupId>\n+      <artifactId>nimbus-jose-jwt</artifactId>\n+      <version>8.19</version> <!-- {x-version-update;com.nimbusds:nimbus-jose-jwt;external_dependency} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>com.nimbusds</groupId>\n+      <artifactId>oauth2-oidc-sdk</artifactId>\n+      <version>7.1.1</version> <!-- {x-version-update;com.nimbusds:oauth2-oidc-sdk;external_dependency} -->\n+    </dependency>\n+</dependencies>\n+```\n+\n+### Register your Web API\n+You can follow [Register the Web API][register-the-web-api] to add `ResourceAccessGraph.read`, `ResourceAccessGraphCustomResources.read` scopes. \n+Convention current application id url is `api://sample-client-id`, application name is `azure-spring-boot-sample-active-directory-resource-server-obo`; the application id url of the sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] is `custom-client-id`, the application name is `azure-spring-boot-sample-active-directory-spring-security-resource-server`.  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTQ2MTE3OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-obo/src/main/java/com/azure/spring/sample/aad/security/AADSampleSecurityConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNTowMjoyMlrOIDpQEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNTowMjoyMlrOIDpQEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5MjQ5OA==", "bodyText": "Format these as:\nhttp.authorizeRequests()\n    .anyRequest().authenticated()\n    .and()\n    .oauth2ResourceServer(OAuth2ResourceServerConfigurer::jwt);", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540692498", "createdAt": "2020-12-11T05:02:22Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-obo/src/main/java/com/azure/spring/sample/aad/security/AADSampleSecurityConfiguration.java", "diffHunk": "@@ -0,0 +1,23 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.sample.aad.security;\n+\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer;\n+\n+@EnableWebSecurity\n+@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)\n+public class AADSampleSecurityConfiguration extends WebSecurityConfigurerAdapter {\n+\n+    @Override\n+    protected void configure(HttpSecurity http) throws Exception {\n+\t\thttp.authorizeRequests().anyRequest().authenticated()\n+            .and().oauth2ResourceServer(OAuth2ResourceServerConfigurer::jwt);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTQ2NTc4OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-active-directory/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNTowNDozM1rOIDpShQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNTowNDozM1rOIDpShQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5MzEyNQ==", "bodyText": "Why do we include this in the starter?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540693125", "createdAt": "2020-12-11T05:04:33Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/pom.xml", "diffHunk": "@@ -61,14 +61,9 @@\n       <version>5.3.5.RELEASE</version> <!-- {x-version-update;org.springframework.security:spring-security-config;external_dependency} -->\n     </dependency>\n     <dependency>\n-      <groupId>com.microsoft.azure</groupId>\n-      <artifactId>msal4j</artifactId>\n-      <version>1.8.0</version> <!-- {x-version-update;com.microsoft.azure:msal4j;external_dependency} -->\n-    </dependency>\n-    <dependency>\n-      <groupId>com.nimbusds</groupId>\n-      <artifactId>nimbus-jose-jwt</artifactId>\n-      <version>8.19</version> <!-- {x-version-update;com.nimbusds:nimbus-jose-jwt;external_dependency} -->\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-jose</artifactId>\n+      <version>5.3.5.RELEASE</version> <!-- {x-version-update;org.springframework.security:spring-security-oauth2-jose;external_dependency} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTQ2NjY2OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNTowNTowMlrOIDpS_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNTowNTowMlrOIDpS_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5MzI0NQ==", "bodyText": "Why are we changing this?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540693245", "createdAt": "2020-12-11T05:05:02Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/pom.xml", "diffHunk": "@@ -101,8 +101,8 @@\n     </dependency>\n     <dependency>\n       <groupId>com.nimbusds</groupId>\n-      <artifactId>nimbus-jose-jwt</artifactId>\n-      <version>8.19</version> <!-- {x-version-update;com.nimbusds:nimbus-jose-jwt;external_dependency} -->\n+      <artifactId>oauth2-oidc-sdk</artifactId>\n+      <version>7.1.1</version> <!-- {x-version-update;com.nimbusds:oauth2-oidc-sdk;external_dependency} -->\n       <optional>true</optional>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTQ3MDkwOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNTowNjo1NVrOIDpVHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNTowNjo1NVrOIDpVHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5Mzc4OQ==", "bodyText": "Should we add the type of authentication in the error message?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540693789", "createdAt": "2020-12-11T05:06:55Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -0,0 +1,148 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IClientSecret;\n+import com.microsoft.aad.msal4j.OnBehalfOfParameters;\n+import com.microsoft.aad.msal4j.UserAssertion;\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AbstractOAuth2Token;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.server.resource.authentication.AbstractOAuth2TokenAuthenticationToken;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.net.MalformedURLException;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+/**\n+ * <p>\n+ * OAuth2AuthorizedClientRepository for obo flow\n+ * </p>\n+ */\n+public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedClientRepository {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    private static final String OBO_AUTHORIZEDCLIENT_PREFIX = \"obo_authorizedclient_\";\n+\n+    private final AzureClientRegistrationRepository azureClientRegistrationRepository;\n+\n+    private final Map<String, ConfidentialClientApplication> confidentialClientApplicationMap = new HashMap<>();\n+\n+    public AADOAuth2OboAuthorizedClientRepository(AzureClientRegistrationRepository azureClientRegistrationRepository) {\n+        this.azureClientRegistrationRepository = azureClientRegistrationRepository;\n+        Iterator<ClientRegistration> iterator = azureClientRegistrationRepository.iterator();\n+        while (iterator.hasNext()) {\n+            ClientRegistration next = iterator.next();\n+            this.confidentialClientApplicationMap.put(next.getRegistrationId(), createApp(next));\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    public <T extends OAuth2AuthorizedClient> T loadAuthorizedClient(String registrationId,\n+                                                                     Authentication authentication,\n+                                                                     HttpServletRequest request) {\n+        try {\n+            String oboAuthorizedClientAttributeName = OBO_AUTHORIZEDCLIENT_PREFIX + registrationId;\n+            if (request.getAttribute(oboAuthorizedClientAttributeName) != null) {\n+                return (T) request.getAttribute(oboAuthorizedClientAttributeName);\n+            }\n+\n+            if (!(authentication instanceof AbstractOAuth2TokenAuthenticationToken)) {\n+                throw new IllegalStateException(\"Not support token implementation\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTQ3ODQzOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNToxMDoxOFrOIDpY8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNToxMDoxOFrOIDpY8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5NDc3MA==", "bodyText": "change loadAuthorizedClient to load authorized client, better log the registrationId too in the error message", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540694770", "createdAt": "2020-12-11T05:10:18Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -0,0 +1,148 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IClientSecret;\n+import com.microsoft.aad.msal4j.OnBehalfOfParameters;\n+import com.microsoft.aad.msal4j.UserAssertion;\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AbstractOAuth2Token;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.server.resource.authentication.AbstractOAuth2TokenAuthenticationToken;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.net.MalformedURLException;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+/**\n+ * <p>\n+ * OAuth2AuthorizedClientRepository for obo flow\n+ * </p>\n+ */\n+public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedClientRepository {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    private static final String OBO_AUTHORIZEDCLIENT_PREFIX = \"obo_authorizedclient_\";\n+\n+    private final AzureClientRegistrationRepository azureClientRegistrationRepository;\n+\n+    private final Map<String, ConfidentialClientApplication> confidentialClientApplicationMap = new HashMap<>();\n+\n+    public AADOAuth2OboAuthorizedClientRepository(AzureClientRegistrationRepository azureClientRegistrationRepository) {\n+        this.azureClientRegistrationRepository = azureClientRegistrationRepository;\n+        Iterator<ClientRegistration> iterator = azureClientRegistrationRepository.iterator();\n+        while (iterator.hasNext()) {\n+            ClientRegistration next = iterator.next();\n+            this.confidentialClientApplicationMap.put(next.getRegistrationId(), createApp(next));\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    public <T extends OAuth2AuthorizedClient> T loadAuthorizedClient(String registrationId,\n+                                                                     Authentication authentication,\n+                                                                     HttpServletRequest request) {\n+        try {\n+            String oboAuthorizedClientAttributeName = OBO_AUTHORIZEDCLIENT_PREFIX + registrationId;\n+            if (request.getAttribute(oboAuthorizedClientAttributeName) != null) {\n+                return (T) request.getAttribute(oboAuthorizedClientAttributeName);\n+            }\n+\n+            if (!(authentication instanceof AbstractOAuth2TokenAuthenticationToken)) {\n+                throw new IllegalStateException(\"Not support token implementation\");\n+            }\n+            AbstractOAuth2TokenAuthenticationToken<AbstractOAuth2Token> authenticationToken =\n+                (AbstractOAuth2TokenAuthenticationToken) authentication;\n+            ClientRegistration clientRegistration =\n+                azureClientRegistrationRepository.findByRegistrationId(registrationId);\n+\n+            String accessToken = authenticationToken.getToken().getTokenValue();\n+            OnBehalfOfParameters parameters = OnBehalfOfParameters\n+                .builder(clientRegistration.getScopes(), new UserAssertion(accessToken))\n+                .build();\n+            ConfidentialClientApplication clientApplication =\n+                getClientApplication(clientRegistration.getRegistrationId());\n+            String oboAccessToken = clientApplication.acquireToken(parameters).get().accessToken();\n+\n+            JWT parser = JWTParser.parse(oboAccessToken);\n+            Date iat = (Date) parser.getJWTClaimsSet().getClaim(\"iat\");\n+            Date exp = (Date) parser.getJWTClaimsSet().getClaim(\"exp\");\n+            OAuth2AccessToken oAuth2AccessToken = new OAuth2AccessToken(OAuth2AccessToken.TokenType.BEARER,\n+                oboAccessToken,\n+                Instant.ofEpochMilli(iat.getTime()),\n+                Instant.ofEpochMilli(exp.getTime()));\n+\n+            OAuth2AuthorizedClient oAuth2AuthorizedClient = new OAuth2AuthorizedClient(clientRegistration,\n+                authenticationToken.getName(), oAuth2AccessToken);\n+\n+            request.setAttribute(oboAuthorizedClientAttributeName, (T) oAuth2AuthorizedClient);\n+            return (T) oAuth2AuthorizedClient;\n+        } catch (Throwable throwable) {\n+            LOGGER.error(\"Failed to loadAuthorizedClient\", throwable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTQ4MDg1OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNToxMToxOVrOIDpaJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNToxMToxOVrOIDpaJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5NTA3OQ==", "bodyText": "Please remove these empty lines.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540695079", "createdAt": "2020-12-11T05:11:19Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -0,0 +1,148 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IClientSecret;\n+import com.microsoft.aad.msal4j.OnBehalfOfParameters;\n+import com.microsoft.aad.msal4j.UserAssertion;\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AbstractOAuth2Token;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.server.resource.authentication.AbstractOAuth2TokenAuthenticationToken;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.net.MalformedURLException;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+/**\n+ * <p>\n+ * OAuth2AuthorizedClientRepository for obo flow\n+ * </p>\n+ */\n+public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedClientRepository {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    private static final String OBO_AUTHORIZEDCLIENT_PREFIX = \"obo_authorizedclient_\";\n+\n+    private final AzureClientRegistrationRepository azureClientRegistrationRepository;\n+\n+    private final Map<String, ConfidentialClientApplication> confidentialClientApplicationMap = new HashMap<>();\n+\n+    public AADOAuth2OboAuthorizedClientRepository(AzureClientRegistrationRepository azureClientRegistrationRepository) {\n+        this.azureClientRegistrationRepository = azureClientRegistrationRepository;\n+        Iterator<ClientRegistration> iterator = azureClientRegistrationRepository.iterator();\n+        while (iterator.hasNext()) {\n+            ClientRegistration next = iterator.next();\n+            this.confidentialClientApplicationMap.put(next.getRegistrationId(), createApp(next));\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    public <T extends OAuth2AuthorizedClient> T loadAuthorizedClient(String registrationId,\n+                                                                     Authentication authentication,\n+                                                                     HttpServletRequest request) {\n+        try {\n+            String oboAuthorizedClientAttributeName = OBO_AUTHORIZEDCLIENT_PREFIX + registrationId;\n+            if (request.getAttribute(oboAuthorizedClientAttributeName) != null) {\n+                return (T) request.getAttribute(oboAuthorizedClientAttributeName);\n+            }\n+\n+            if (!(authentication instanceof AbstractOAuth2TokenAuthenticationToken)) {\n+                throw new IllegalStateException(\"Not support token implementation\");\n+            }\n+            AbstractOAuth2TokenAuthenticationToken<AbstractOAuth2Token> authenticationToken =\n+                (AbstractOAuth2TokenAuthenticationToken) authentication;\n+            ClientRegistration clientRegistration =\n+                azureClientRegistrationRepository.findByRegistrationId(registrationId);\n+\n+            String accessToken = authenticationToken.getToken().getTokenValue();\n+            OnBehalfOfParameters parameters = OnBehalfOfParameters\n+                .builder(clientRegistration.getScopes(), new UserAssertion(accessToken))\n+                .build();\n+            ConfidentialClientApplication clientApplication =\n+                getClientApplication(clientRegistration.getRegistrationId());\n+            String oboAccessToken = clientApplication.acquireToken(parameters).get().accessToken();\n+\n+            JWT parser = JWTParser.parse(oboAccessToken);\n+            Date iat = (Date) parser.getJWTClaimsSet().getClaim(\"iat\");\n+            Date exp = (Date) parser.getJWTClaimsSet().getClaim(\"exp\");\n+            OAuth2AccessToken oAuth2AccessToken = new OAuth2AccessToken(OAuth2AccessToken.TokenType.BEARER,\n+                oboAccessToken,\n+                Instant.ofEpochMilli(iat.getTime()),\n+                Instant.ofEpochMilli(exp.getTime()));\n+\n+            OAuth2AuthorizedClient oAuth2AuthorizedClient = new OAuth2AuthorizedClient(clientRegistration,\n+                authenticationToken.getName(), oAuth2AccessToken);\n+\n+            request.setAttribute(oboAuthorizedClientAttributeName, (T) oAuth2AuthorizedClient);\n+            return (T) oAuth2AuthorizedClient;\n+        } catch (Throwable throwable) {\n+            LOGGER.error(\"Failed to loadAuthorizedClient\", throwable);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void saveAuthorizedClient(OAuth2AuthorizedClient oAuth2AuthorizedClient, Authentication authentication,\n+                                     HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {\n+    }\n+\n+    @Override\n+    public void removeAuthorizedClient(String s, Authentication authentication,\n+                                       HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {\n+    }\n+\n+    ConfidentialClientApplication getClientApplication(String registrationId) {\n+        return confidentialClientApplicationMap.get(registrationId);\n+    }\n+\n+    private ConfidentialClientApplication createApp(ClientRegistration clientRegistration) {\n+\n+        String authorizationUri = clientRegistration.getProviderDetails().getAuthorizationUri();\n+\n+        String authority = interceptAuthorizationUri(authorizationUri);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTQ4NzExOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNToxNDoyOFrOIDpdaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNToxNDoyOFrOIDpdaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5NTkxNQ==", "bodyText": "If the application happens to fail being created, it will cause NPE when load the authorized client. Maybe we should check whether the client is null in loadauthorizedclient method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540695915", "createdAt": "2020-12-11T05:14:28Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -0,0 +1,148 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IClientSecret;\n+import com.microsoft.aad.msal4j.OnBehalfOfParameters;\n+import com.microsoft.aad.msal4j.UserAssertion;\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AbstractOAuth2Token;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.server.resource.authentication.AbstractOAuth2TokenAuthenticationToken;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.net.MalformedURLException;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+/**\n+ * <p>\n+ * OAuth2AuthorizedClientRepository for obo flow\n+ * </p>\n+ */\n+public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedClientRepository {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    private static final String OBO_AUTHORIZEDCLIENT_PREFIX = \"obo_authorizedclient_\";\n+\n+    private final AzureClientRegistrationRepository azureClientRegistrationRepository;\n+\n+    private final Map<String, ConfidentialClientApplication> confidentialClientApplicationMap = new HashMap<>();\n+\n+    public AADOAuth2OboAuthorizedClientRepository(AzureClientRegistrationRepository azureClientRegistrationRepository) {\n+        this.azureClientRegistrationRepository = azureClientRegistrationRepository;\n+        Iterator<ClientRegistration> iterator = azureClientRegistrationRepository.iterator();\n+        while (iterator.hasNext()) {\n+            ClientRegistration next = iterator.next();\n+            this.confidentialClientApplicationMap.put(next.getRegistrationId(), createApp(next));\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    public <T extends OAuth2AuthorizedClient> T loadAuthorizedClient(String registrationId,\n+                                                                     Authentication authentication,\n+                                                                     HttpServletRequest request) {\n+        try {\n+            String oboAuthorizedClientAttributeName = OBO_AUTHORIZEDCLIENT_PREFIX + registrationId;\n+            if (request.getAttribute(oboAuthorizedClientAttributeName) != null) {\n+                return (T) request.getAttribute(oboAuthorizedClientAttributeName);\n+            }\n+\n+            if (!(authentication instanceof AbstractOAuth2TokenAuthenticationToken)) {\n+                throw new IllegalStateException(\"Not support token implementation\");\n+            }\n+            AbstractOAuth2TokenAuthenticationToken<AbstractOAuth2Token> authenticationToken =\n+                (AbstractOAuth2TokenAuthenticationToken) authentication;\n+            ClientRegistration clientRegistration =\n+                azureClientRegistrationRepository.findByRegistrationId(registrationId);\n+\n+            String accessToken = authenticationToken.getToken().getTokenValue();\n+            OnBehalfOfParameters parameters = OnBehalfOfParameters\n+                .builder(clientRegistration.getScopes(), new UserAssertion(accessToken))\n+                .build();\n+            ConfidentialClientApplication clientApplication =\n+                getClientApplication(clientRegistration.getRegistrationId());\n+            String oboAccessToken = clientApplication.acquireToken(parameters).get().accessToken();\n+\n+            JWT parser = JWTParser.parse(oboAccessToken);\n+            Date iat = (Date) parser.getJWTClaimsSet().getClaim(\"iat\");\n+            Date exp = (Date) parser.getJWTClaimsSet().getClaim(\"exp\");\n+            OAuth2AccessToken oAuth2AccessToken = new OAuth2AccessToken(OAuth2AccessToken.TokenType.BEARER,\n+                oboAccessToken,\n+                Instant.ofEpochMilli(iat.getTime()),\n+                Instant.ofEpochMilli(exp.getTime()));\n+\n+            OAuth2AuthorizedClient oAuth2AuthorizedClient = new OAuth2AuthorizedClient(clientRegistration,\n+                authenticationToken.getName(), oAuth2AccessToken);\n+\n+            request.setAttribute(oboAuthorizedClientAttributeName, (T) oAuth2AuthorizedClient);\n+            return (T) oAuth2AuthorizedClient;\n+        } catch (Throwable throwable) {\n+            LOGGER.error(\"Failed to loadAuthorizedClient\", throwable);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void saveAuthorizedClient(OAuth2AuthorizedClient oAuth2AuthorizedClient, Authentication authentication,\n+                                     HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {\n+    }\n+\n+    @Override\n+    public void removeAuthorizedClient(String s, Authentication authentication,\n+                                       HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {\n+    }\n+\n+    ConfidentialClientApplication getClientApplication(String registrationId) {\n+        return confidentialClientApplicationMap.get(registrationId);\n+    }\n+\n+    private ConfidentialClientApplication createApp(ClientRegistration clientRegistration) {\n+\n+        String authorizationUri = clientRegistration.getProviderDetails().getAuthorizationUri();\n+\n+        String authority = interceptAuthorizationUri(authorizationUri);\n+\n+        IClientSecret clientCredential = ClientCredentialFactory.createFromSecret(clientRegistration.getClientSecret());\n+        try {\n+            return ConfidentialClientApplication.builder(clientRegistration.getClientId(), clientCredential)\n+                                                .authority(authority)\n+                                                .build();\n+        } catch (MalformedURLException e) {\n+            LOGGER.error(\"Failed to create ConfidentialClientApplication\", e);\n+        }\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTQ4OTc4OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNToxNTo1OFrOIDpe9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNToxNTo1OFrOIDpe9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5NjMwOQ==", "bodyText": "Change back to use class detection as the condition here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540696309", "createdAt": "2020-12-11T05:15:58Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.ClientRegistrationInitialization;\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import com.azure.spring.autoconfigure.aad.AADAuthenticationProperties;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnResource;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+\n+/**\n+ * <p>\n+ * The configuration will not be activated if no {@link OAuth2LoginAuthenticationFilter} class provided.\n+ * </p>\n+ */\n+@Configuration(proxyBeanMethods = false)\n+@ConditionalOnResource(resources = \"classpath:aad.enable.config\")\n+@EnableConfigurationProperties({ AADAuthenticationProperties.class })\n+@ConditionalOnClass({BearerTokenAuthenticationToken.class, OAuth2LoginAuthenticationFilter.class})\n+@ConditionalOnProperty(prefix = \"azure.activedirectory.resource-server.obo\", name = \"enabled\", havingValue = \"true\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTQ5MDk5OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureActiveDirectoryConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNToxNjozM1rOIDpfqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNToxNjozM1rOIDpfqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5NjQ5MQ==", "bodyText": "same here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540696491", "createdAt": "2020-12-11T05:16:33Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureActiveDirectoryConfiguration.java", "diffHunk": "@@ -36,6 +36,8 @@\n @Configuration\n @ConditionalOnClass(ClientRegistrationRepository.class)\n @EnableConfigurationProperties(AADAuthenticationProperties.class)\n+@ConditionalOnProperty(prefix = \"azure.activedirectory.resource-server.obo\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTQ5MjI4OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepositoryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNToxNzoxNlrOIDpgaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNToxNzoxNlrOIDpgaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5NjY4MQ==", "bodyText": "Please add a test case for loading a non-existing client.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540696681", "createdAt": "2020-12-11T05:17:16Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepositoryTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IAuthenticationResult;\n+import com.microsoft.aad.msal4j.OnBehalfOfParameters;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationToken;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.test.context.support.TestPropertySourceUtils.addInlinedPropertiesToEnvironment;\n+\n+public class AADOAuth2OboAuthorizedClientRepositoryTest {\n+\n+    private static final String OBO_ACCESS_TOKEN =\n+        \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6ImtnMkxZczJUMENUaklmajRydDZKSXluZW4zOCIsImtpZCI6ImtnMkxZczJUMENUaklmajRydDZKSXluZW4zOCJ9.eyJhdWQiOiJhcGk6Ly9zYW1wbGUtY2xpZW50LWlkIiwiaXNzIjoiaHR0cHM6Ly9zdHMud2luZG93cy5uZXQvMWQxYTA2YTktYjIwYS00NTEzLThhNjQtZGFiMDhkMzJjOGI2LyIsImlhdCI6MTYwNzA3NTc1MiwibmJmIjoxNjA3MDc1NzUyLCJleHAiOjE2MDcwNzk2NTIsImFjciI6IjEiLCJhaW8iOiJBVFFBeS84UkFBQUFkSllKZkluaHhoWHBQTStVUVR0TmsrcnJnWG1FQmRpL0JhQWJUOGtQT2t1amJhQ2pBSTNBeUZWcnE0NGZHdHNOIiwiYW1yIjpbInB3ZCJdLCJhcHBpZCI6ImZmMzhjYjg2LTljMzgtNGUyMS1iZTY4LWM1ODFhNTVmYjVjMCIsImFwcGlkYWNyIjoiMSIsImZhbWlseV9uYW1lIjoiY2hlbiIsImdpdmVuX25hbWUiOiJhbXkiLCJpcGFkZHIiOiIxNjcuMjIwLjI1NS42OCIsIm5hbWUiOiJhbXkgY2hlbiIsIm9pZCI6ImFiZDI4ZGUxLTljMzctNDg5ZC04ZWVjLWZlZWVmNGQyNzRhMyIsInJoIjoiMC5BQUFBcVFZYUhRcXlFMFdLWk5xd2pUTEl0b2JMT1A4NG5DRk92bWpGZ2FWZnRjQjRBQUkuIiwic2NwIjoiUmVzb3VyY2VBY2Nlc3NDdXN0b21SZXNvdXJjZXMucmVhZCBSZXNvdXJjZUFjY2Vzc0dyYXBoLnJlYWQgUmVzb3VyY2VBY2Nlc3NPdGhlclJlc291cmNlcy5yZWFkIiwic3ViIjoiS0xyMXZFQTN3Wk1MdWFFZU1IUl80ZmdTdVVVVnNJWDhHREVlOWU5M1BPYyIsInRpZCI6IjFkMWEwNmE5LWIyMGEtNDUxMy04YTY0LWRhYjA4ZDMyYzhiNiIsInVuaXF1ZV9uYW1lIjoiYW15QG1vYXJ5Lm9ubWljcm9zb2Z0LmNvbSIsInVwbiI6ImFteUBtb2FyeS5vbm1pY3Jvc29mdC5jb20iLCJ1dGkiOiJFTG1xXzZVUkJFS19kN3I4ZlFJR0FBIiwidmVyIjoiMS4wIn0.fM_huHrr5M243oM3rMagGGckoxkLanFkurMJz4EBthrdQlFJzl6eo13pmU0Taq2ognAzsxUka0yihImrvhqzub9IGxRtCdQ3NAvD1fAiVdSUt_aBetIFCi5Pdc6I7KJDiGMQh8RTmduM7IOdxV_3-rug6dZXhW5TTmeq5PfLGYlrKOkC2za7M5G7gn7li1D5osh98HorFBWZoCDhe1iJPd_p_m0EffwTbKFwyvOGN-PKxyzOnoCOma_VYvRABUtBa8rNBFTaH5R9EAvsOmIZ_mI98Irl_8QNr9No-R0nXOrqKCFx5sMYkUuT7mvSaVPAlNr2X8eJjY3Wi-6ishufWQ\";\n+\n+    private static final String AAD_PROPERTY_PREFIX = \"azure.activedirectory.\";\n+\n+    private AzureClientRegistrationRepository clientRegistrationsRepo;\n+\n+    @BeforeEach\n+    public void setup() {\n+        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n+\n+        addInlinedPropertiesToEnvironment(\n+            context,\n+            AAD_PROPERTY_PREFIX + \"user-group.allowed-groups = group1\",\n+            AAD_PROPERTY_PREFIX + \"tenant-id = fake-tenant-id\",\n+            AAD_PROPERTY_PREFIX + \"client-id = fake-client-id\",\n+            AAD_PROPERTY_PREFIX + \"client-secret = fake-client-secret\",\n+            AAD_PROPERTY_PREFIX + \"authorization.fake-graph.scopes = https://graph.microsoft.com/.default\",\n+            AAD_PROPERTY_PREFIX + \"resource-server.obo.enabled = true\"\n+        );\n+        context.register(AzureActiveDirectoryResourceServerClientConfiguration.class);\n+        context.refresh();\n+\n+        clientRegistrationsRepo = context.getBean(AzureClientRegistrationRepository.class);\n+    }\n+\n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void testLoadAzureAuthorizedClient() throws ExecutionException, InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTQ5NDA4OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapp/AzureActiveDirectoryConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNToxODowMFrOIDphaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMjo1Nzo1MlrOIE92yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5NjkzNg==", "bodyText": "Why are we changing this?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540696936", "createdAt": "2020-12-11T05:18:00Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapp/AzureActiveDirectoryConfigurationTest.java", "diffHunk": "@@ -129,8 +129,9 @@ public void aadAwareClientRepository() {\n         assertTrue(clientRepo.isAuthzClient(\"graph\"));\n \n         List<ClientRegistration> clients = collectClients(clientRepo);\n-        assertEquals(1, clients.size());\n-        assertEquals(\"azure\", clients.get(0).getRegistrationId());\n+        assertEquals(2, clients.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5Njk5NA==", "bodyText": "Is it because we changed some logic?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540696994", "createdAt": "2020-12-11T05:18:16Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapp/AzureActiveDirectoryConfigurationTest.java", "diffHunk": "@@ -129,8 +129,9 @@ public void aadAwareClientRepository() {\n         assertTrue(clientRepo.isAuthzClient(\"graph\"));\n \n         List<ClientRegistration> clients = collectClients(clientRepo);\n-        assertEquals(1, clients.size());\n-        assertEquals(\"azure\", clients.get(0).getRegistrationId());\n+        assertEquals(2, clients.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5NjkzNg=="}, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3ODY2Ng==", "bodyText": "yes \uff0cthere are two clients now.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r542078666", "createdAt": "2020-12-14T02:57:52Z", "author": {"login": "wujack778"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapp/AzureActiveDirectoryConfigurationTest.java", "diffHunk": "@@ -129,8 +129,9 @@ public void aadAwareClientRepository() {\n         assertTrue(clientRepo.isAuthzClient(\"graph\"));\n \n         List<ClientRegistration> clients = collectClients(clientRepo);\n-        assertEquals(1, clients.size());\n-        assertEquals(\"azure\", clients.get(0).getRegistrationId());\n+        assertEquals(2, clients.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5NjkzNg=="}, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2748, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}