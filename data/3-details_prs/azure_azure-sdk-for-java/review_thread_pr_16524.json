{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MTg5MDkw", "number": 16524, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDo0NjoxNFrOEwjb-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMzo1NjozMVrOEymPFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzQ3NzA0OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDo0NjoxNFrOHmMpvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMzozOTo1MFrOHpU2EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxNTIzMA==", "bodyText": "Should this also include the queue name, topic name etc?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#discussion_r509815230", "createdAt": "2020-10-22T00:46:14Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -253,4 +275,75 @@ private static TransactionalState getTransactionState(ByteBuffer transactionId,\n         transactionalState.setOutcome(outcome);\n         return transactionalState;\n     }\n+\n+    public static ServiceBusMessage traceMessageSpan(ServiceBusMessage serviceBusMessage,\n+        Context messageContext, String hostname, String entityPath, TracerProvider tracerProvider) {\n+        Optional<Object> eventContextData = messageContext.getData(SPAN_CONTEXT_KEY);\n+        if (eventContextData.isPresent()) {\n+            // if message has context (in case of retries), don't start a message span or add a new context\n+            return serviceBusMessage;\n+        } else {\n+            // Starting the span makes the sampling decision (nothing is logged at this time)\n+            Context newMessageContext = messageContext\n+                .addData(AZ_TRACING_NAMESPACE_KEY, AZ_TRACING_NAMESPACE_VALUE)\n+                .addData(ENTITY_PATH_KEY, entityPath)\n+                .addData(HOST_NAME_KEY, hostname);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db48fe4e05e102832fb6a7bb7d846ac1ad48c92"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5NTE4NQ==", "bodyText": "So EntityPath can be either queue or topic.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#discussion_r513095185", "createdAt": "2020-10-27T23:39:50Z", "author": {"login": "YijunXieMS"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -253,4 +275,75 @@ private static TransactionalState getTransactionState(ByteBuffer transactionId,\n         transactionalState.setOutcome(outcome);\n         return transactionalState;\n     }\n+\n+    public static ServiceBusMessage traceMessageSpan(ServiceBusMessage serviceBusMessage,\n+        Context messageContext, String hostname, String entityPath, TracerProvider tracerProvider) {\n+        Optional<Object> eventContextData = messageContext.getData(SPAN_CONTEXT_KEY);\n+        if (eventContextData.isPresent()) {\n+            // if message has context (in case of retries), don't start a message span or add a new context\n+            return serviceBusMessage;\n+        } else {\n+            // Starting the span makes the sampling decision (nothing is logged at this time)\n+            Context newMessageContext = messageContext\n+                .addData(AZ_TRACING_NAMESPACE_KEY, AZ_TRACING_NAMESPACE_VALUE)\n+                .addData(ENTITY_PATH_KEY, entityPath)\n+                .addData(HOST_NAME_KEY, hostname);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxNTIzMA=="}, "originalCommit": {"oid": "4db48fe4e05e102832fb6a7bb7d846ac1ad48c92"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzQ4MDYwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDo0ODoxNlrOHmMr0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMzo0MDoyMlrOHpU2vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxNTc2MA==", "bodyText": "Where is this method called from?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#discussion_r509815760", "createdAt": "2020-10-22T00:48:16Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -253,4 +275,75 @@ private static TransactionalState getTransactionState(ByteBuffer transactionId,\n         transactionalState.setOutcome(outcome);\n         return transactionalState;\n     }\n+\n+    public static ServiceBusMessage traceMessageSpan(ServiceBusMessage serviceBusMessage,\n+        Context messageContext, String hostname, String entityPath, TracerProvider tracerProvider) {\n+        Optional<Object> eventContextData = messageContext.getData(SPAN_CONTEXT_KEY);\n+        if (eventContextData.isPresent()) {\n+            // if message has context (in case of retries), don't start a message span or add a new context\n+            return serviceBusMessage;\n+        } else {\n+            // Starting the span makes the sampling decision (nothing is logged at this time)\n+            Context newMessageContext = messageContext\n+                .addData(AZ_TRACING_NAMESPACE_KEY, AZ_TRACING_NAMESPACE_VALUE)\n+                .addData(ENTITY_PATH_KEY, entityPath)\n+                .addData(HOST_NAME_KEY, hostname);\n+            Context eventSpanContext = tracerProvider.startSpan(AZ_TRACING_SERVICE_NAME, newMessageContext,\n+                ProcessKind.MESSAGE);\n+            Optional<Object> eventDiagnosticIdOptional = eventSpanContext.getData(DIAGNOSTIC_ID_KEY);\n+            if (eventDiagnosticIdOptional.isPresent()) {\n+                serviceBusMessage.getApplicationProperties().put(DIAGNOSTIC_ID_KEY, eventDiagnosticIdOptional.get()\n+                    .toString());\n+                tracerProvider.endSpan(eventSpanContext, Signal.complete());\n+                serviceBusMessage.addContext(SPAN_CONTEXT_KEY, eventSpanContext);\n+            }\n+        }\n+        return serviceBusMessage;\n+    }\n+\n+    /*\n+     * Starts a new process tracing span and attaches the returned context to the EventData object for users.\n+     */\n+    public static Context startProcessTracingSpan(ServiceBusReceivedMessage receivedMessage,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db48fe4e05e102832fb6a7bb7d846ac1ad48c92"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5NTM1Nw==", "bodyText": "This is prepared for message processor.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#discussion_r513095357", "createdAt": "2020-10-27T23:40:22Z", "author": {"login": "YijunXieMS"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -253,4 +275,75 @@ private static TransactionalState getTransactionState(ByteBuffer transactionId,\n         transactionalState.setOutcome(outcome);\n         return transactionalState;\n     }\n+\n+    public static ServiceBusMessage traceMessageSpan(ServiceBusMessage serviceBusMessage,\n+        Context messageContext, String hostname, String entityPath, TracerProvider tracerProvider) {\n+        Optional<Object> eventContextData = messageContext.getData(SPAN_CONTEXT_KEY);\n+        if (eventContextData.isPresent()) {\n+            // if message has context (in case of retries), don't start a message span or add a new context\n+            return serviceBusMessage;\n+        } else {\n+            // Starting the span makes the sampling decision (nothing is logged at this time)\n+            Context newMessageContext = messageContext\n+                .addData(AZ_TRACING_NAMESPACE_KEY, AZ_TRACING_NAMESPACE_VALUE)\n+                .addData(ENTITY_PATH_KEY, entityPath)\n+                .addData(HOST_NAME_KEY, hostname);\n+            Context eventSpanContext = tracerProvider.startSpan(AZ_TRACING_SERVICE_NAME, newMessageContext,\n+                ProcessKind.MESSAGE);\n+            Optional<Object> eventDiagnosticIdOptional = eventSpanContext.getData(DIAGNOSTIC_ID_KEY);\n+            if (eventDiagnosticIdOptional.isPresent()) {\n+                serviceBusMessage.getApplicationProperties().put(DIAGNOSTIC_ID_KEY, eventDiagnosticIdOptional.get()\n+                    .toString());\n+                tracerProvider.endSpan(eventSpanContext, Signal.complete());\n+                serviceBusMessage.addContext(SPAN_CONTEXT_KEY, eventSpanContext);\n+            }\n+        }\n+        return serviceBusMessage;\n+    }\n+\n+    /*\n+     * Starts a new process tracing span and attaches the returned context to the EventData object for users.\n+     */\n+    public static Context startProcessTracingSpan(ServiceBusReceivedMessage receivedMessage,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxNTc2MA=="}, "originalCommit": {"oid": "4db48fe4e05e102832fb6a7bb7d846ac1ad48c92"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzQ4MDk2OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDo0ODoyNVrOHmMr_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMDowMjoxNVrOHpVQuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxNTgwNw==", "bodyText": "Same here. Where is this method called from? I guess this was added for the processor only but I think the async receiver should use them since the message processor is just a wrapper around the async receiver's receive method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#discussion_r509815807", "createdAt": "2020-10-22T00:48:25Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -253,4 +275,75 @@ private static TransactionalState getTransactionState(ByteBuffer transactionId,\n         transactionalState.setOutcome(outcome);\n         return transactionalState;\n     }\n+\n+    public static ServiceBusMessage traceMessageSpan(ServiceBusMessage serviceBusMessage,\n+        Context messageContext, String hostname, String entityPath, TracerProvider tracerProvider) {\n+        Optional<Object> eventContextData = messageContext.getData(SPAN_CONTEXT_KEY);\n+        if (eventContextData.isPresent()) {\n+            // if message has context (in case of retries), don't start a message span or add a new context\n+            return serviceBusMessage;\n+        } else {\n+            // Starting the span makes the sampling decision (nothing is logged at this time)\n+            Context newMessageContext = messageContext\n+                .addData(AZ_TRACING_NAMESPACE_KEY, AZ_TRACING_NAMESPACE_VALUE)\n+                .addData(ENTITY_PATH_KEY, entityPath)\n+                .addData(HOST_NAME_KEY, hostname);\n+            Context eventSpanContext = tracerProvider.startSpan(AZ_TRACING_SERVICE_NAME, newMessageContext,\n+                ProcessKind.MESSAGE);\n+            Optional<Object> eventDiagnosticIdOptional = eventSpanContext.getData(DIAGNOSTIC_ID_KEY);\n+            if (eventDiagnosticIdOptional.isPresent()) {\n+                serviceBusMessage.getApplicationProperties().put(DIAGNOSTIC_ID_KEY, eventDiagnosticIdOptional.get()\n+                    .toString());\n+                tracerProvider.endSpan(eventSpanContext, Signal.complete());\n+                serviceBusMessage.addContext(SPAN_CONTEXT_KEY, eventSpanContext);\n+            }\n+        }\n+        return serviceBusMessage;\n+    }\n+\n+    /*\n+     * Starts a new process tracing span and attaches the returned context to the EventData object for users.\n+     */\n+    public static Context startProcessTracingSpan(ServiceBusReceivedMessage receivedMessage,\n+        String hostname, String entityPath, TracerProvider tracerProvider, ProcessKind processKind) {\n+        Object diagnosticId = receivedMessage.getApplicationProperties().get(DIAGNOSTIC_ID_KEY);\n+        if (diagnosticId == null || !tracerProvider.isEnabled()) {\n+            return Context.NONE;\n+        }\n+\n+        Context spanContext = tracerProvider.extractContext(diagnosticId.toString(), Context.NONE)\n+            .addData(ENTITY_PATH_KEY, entityPath)\n+            .addData(HOST_NAME_KEY, hostname)\n+            .addData(AZ_TRACING_NAMESPACE_KEY, AZ_TRACING_NAMESPACE_VALUE);\n+        spanContext = receivedMessage.getEnqueuedTime() == null\n+            ? spanContext\n+            : spanContext.addData(MESSAGE_ENQUEUED_TIME, receivedMessage.getEnqueuedTime().toEpochSecond());\n+        return tracerProvider.startSpan(AZ_TRACING_SERVICE_NAME, spanContext, processKind);\n+    }\n+\n+    /*\n+     * Ends the process tracing span and the scope of that span.\n+     */\n+    public static void endProcessTracingSpan(Context processSpanContext, Signal<Void> signal,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db48fe4e05e102832fb6a7bb7d846ac1ad48c92"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY4ODg4NA==", "bodyText": "We probably do same  what .Net have done for their processor.. If we just have to do tracing for each receive message, we can do in async receiver. But if there is addition tracing for processor, which .Net is doing, we should also do.\nFYI-> for receive and processor would both would be kind.Consumer ? @samvaity", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#discussion_r510688884", "createdAt": "2020-10-23T07:30:28Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -253,4 +275,75 @@ private static TransactionalState getTransactionState(ByteBuffer transactionId,\n         transactionalState.setOutcome(outcome);\n         return transactionalState;\n     }\n+\n+    public static ServiceBusMessage traceMessageSpan(ServiceBusMessage serviceBusMessage,\n+        Context messageContext, String hostname, String entityPath, TracerProvider tracerProvider) {\n+        Optional<Object> eventContextData = messageContext.getData(SPAN_CONTEXT_KEY);\n+        if (eventContextData.isPresent()) {\n+            // if message has context (in case of retries), don't start a message span or add a new context\n+            return serviceBusMessage;\n+        } else {\n+            // Starting the span makes the sampling decision (nothing is logged at this time)\n+            Context newMessageContext = messageContext\n+                .addData(AZ_TRACING_NAMESPACE_KEY, AZ_TRACING_NAMESPACE_VALUE)\n+                .addData(ENTITY_PATH_KEY, entityPath)\n+                .addData(HOST_NAME_KEY, hostname);\n+            Context eventSpanContext = tracerProvider.startSpan(AZ_TRACING_SERVICE_NAME, newMessageContext,\n+                ProcessKind.MESSAGE);\n+            Optional<Object> eventDiagnosticIdOptional = eventSpanContext.getData(DIAGNOSTIC_ID_KEY);\n+            if (eventDiagnosticIdOptional.isPresent()) {\n+                serviceBusMessage.getApplicationProperties().put(DIAGNOSTIC_ID_KEY, eventDiagnosticIdOptional.get()\n+                    .toString());\n+                tracerProvider.endSpan(eventSpanContext, Signal.complete());\n+                serviceBusMessage.addContext(SPAN_CONTEXT_KEY, eventSpanContext);\n+            }\n+        }\n+        return serviceBusMessage;\n+    }\n+\n+    /*\n+     * Starts a new process tracing span and attaches the returned context to the EventData object for users.\n+     */\n+    public static Context startProcessTracingSpan(ServiceBusReceivedMessage receivedMessage,\n+        String hostname, String entityPath, TracerProvider tracerProvider, ProcessKind processKind) {\n+        Object diagnosticId = receivedMessage.getApplicationProperties().get(DIAGNOSTIC_ID_KEY);\n+        if (diagnosticId == null || !tracerProvider.isEnabled()) {\n+            return Context.NONE;\n+        }\n+\n+        Context spanContext = tracerProvider.extractContext(diagnosticId.toString(), Context.NONE)\n+            .addData(ENTITY_PATH_KEY, entityPath)\n+            .addData(HOST_NAME_KEY, hostname)\n+            .addData(AZ_TRACING_NAMESPACE_KEY, AZ_TRACING_NAMESPACE_VALUE);\n+        spanContext = receivedMessage.getEnqueuedTime() == null\n+            ? spanContext\n+            : spanContext.addData(MESSAGE_ENQUEUED_TIME, receivedMessage.getEnqueuedTime().toEpochSecond());\n+        return tracerProvider.startSpan(AZ_TRACING_SERVICE_NAME, spanContext, processKind);\n+    }\n+\n+    /*\n+     * Ends the process tracing span and the scope of that span.\n+     */\n+    public static void endProcessTracingSpan(Context processSpanContext, Signal<Void> signal,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxNTgwNw=="}, "originalCommit": {"oid": "4db48fe4e05e102832fb6a7bb7d846ac1ad48c92"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5NjM2MQ==", "bodyText": "Discussed with Srikanta. We only need to processor for GA and waiting for .Net to confirm with service team about tracing and then possibly add tracing to the receiver after GA. The minimum requirement is to have parity with EventHub, which has tracing for processor but not for consumer client.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#discussion_r513096361", "createdAt": "2020-10-27T23:43:44Z", "author": {"login": "YijunXieMS"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -253,4 +275,75 @@ private static TransactionalState getTransactionState(ByteBuffer transactionId,\n         transactionalState.setOutcome(outcome);\n         return transactionalState;\n     }\n+\n+    public static ServiceBusMessage traceMessageSpan(ServiceBusMessage serviceBusMessage,\n+        Context messageContext, String hostname, String entityPath, TracerProvider tracerProvider) {\n+        Optional<Object> eventContextData = messageContext.getData(SPAN_CONTEXT_KEY);\n+        if (eventContextData.isPresent()) {\n+            // if message has context (in case of retries), don't start a message span or add a new context\n+            return serviceBusMessage;\n+        } else {\n+            // Starting the span makes the sampling decision (nothing is logged at this time)\n+            Context newMessageContext = messageContext\n+                .addData(AZ_TRACING_NAMESPACE_KEY, AZ_TRACING_NAMESPACE_VALUE)\n+                .addData(ENTITY_PATH_KEY, entityPath)\n+                .addData(HOST_NAME_KEY, hostname);\n+            Context eventSpanContext = tracerProvider.startSpan(AZ_TRACING_SERVICE_NAME, newMessageContext,\n+                ProcessKind.MESSAGE);\n+            Optional<Object> eventDiagnosticIdOptional = eventSpanContext.getData(DIAGNOSTIC_ID_KEY);\n+            if (eventDiagnosticIdOptional.isPresent()) {\n+                serviceBusMessage.getApplicationProperties().put(DIAGNOSTIC_ID_KEY, eventDiagnosticIdOptional.get()\n+                    .toString());\n+                tracerProvider.endSpan(eventSpanContext, Signal.complete());\n+                serviceBusMessage.addContext(SPAN_CONTEXT_KEY, eventSpanContext);\n+            }\n+        }\n+        return serviceBusMessage;\n+    }\n+\n+    /*\n+     * Starts a new process tracing span and attaches the returned context to the EventData object for users.\n+     */\n+    public static Context startProcessTracingSpan(ServiceBusReceivedMessage receivedMessage,\n+        String hostname, String entityPath, TracerProvider tracerProvider, ProcessKind processKind) {\n+        Object diagnosticId = receivedMessage.getApplicationProperties().get(DIAGNOSTIC_ID_KEY);\n+        if (diagnosticId == null || !tracerProvider.isEnabled()) {\n+            return Context.NONE;\n+        }\n+\n+        Context spanContext = tracerProvider.extractContext(diagnosticId.toString(), Context.NONE)\n+            .addData(ENTITY_PATH_KEY, entityPath)\n+            .addData(HOST_NAME_KEY, hostname)\n+            .addData(AZ_TRACING_NAMESPACE_KEY, AZ_TRACING_NAMESPACE_VALUE);\n+        spanContext = receivedMessage.getEnqueuedTime() == null\n+            ? spanContext\n+            : spanContext.addData(MESSAGE_ENQUEUED_TIME, receivedMessage.getEnqueuedTime().toEpochSecond());\n+        return tracerProvider.startSpan(AZ_TRACING_SERVICE_NAME, spanContext, processKind);\n+    }\n+\n+    /*\n+     * Ends the process tracing span and the scope of that span.\n+     */\n+    public static void endProcessTracingSpan(Context processSpanContext, Signal<Void> signal,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxNTgwNw=="}, "originalCommit": {"oid": "4db48fe4e05e102832fb6a7bb7d846ac1ad48c92"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEwMjAwOA==", "bodyText": "@hemanttanwar Following what we have for eventhubs, processor spans should be consumer spans.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#discussion_r513102008", "createdAt": "2020-10-28T00:02:15Z", "author": {"login": "samvaity"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -253,4 +275,75 @@ private static TransactionalState getTransactionState(ByteBuffer transactionId,\n         transactionalState.setOutcome(outcome);\n         return transactionalState;\n     }\n+\n+    public static ServiceBusMessage traceMessageSpan(ServiceBusMessage serviceBusMessage,\n+        Context messageContext, String hostname, String entityPath, TracerProvider tracerProvider) {\n+        Optional<Object> eventContextData = messageContext.getData(SPAN_CONTEXT_KEY);\n+        if (eventContextData.isPresent()) {\n+            // if message has context (in case of retries), don't start a message span or add a new context\n+            return serviceBusMessage;\n+        } else {\n+            // Starting the span makes the sampling decision (nothing is logged at this time)\n+            Context newMessageContext = messageContext\n+                .addData(AZ_TRACING_NAMESPACE_KEY, AZ_TRACING_NAMESPACE_VALUE)\n+                .addData(ENTITY_PATH_KEY, entityPath)\n+                .addData(HOST_NAME_KEY, hostname);\n+            Context eventSpanContext = tracerProvider.startSpan(AZ_TRACING_SERVICE_NAME, newMessageContext,\n+                ProcessKind.MESSAGE);\n+            Optional<Object> eventDiagnosticIdOptional = eventSpanContext.getData(DIAGNOSTIC_ID_KEY);\n+            if (eventDiagnosticIdOptional.isPresent()) {\n+                serviceBusMessage.getApplicationProperties().put(DIAGNOSTIC_ID_KEY, eventDiagnosticIdOptional.get()\n+                    .toString());\n+                tracerProvider.endSpan(eventSpanContext, Signal.complete());\n+                serviceBusMessage.addContext(SPAN_CONTEXT_KEY, eventSpanContext);\n+            }\n+        }\n+        return serviceBusMessage;\n+    }\n+\n+    /*\n+     * Starts a new process tracing span and attaches the returned context to the EventData object for users.\n+     */\n+    public static Context startProcessTracingSpan(ServiceBusReceivedMessage receivedMessage,\n+        String hostname, String entityPath, TracerProvider tracerProvider, ProcessKind processKind) {\n+        Object diagnosticId = receivedMessage.getApplicationProperties().get(DIAGNOSTIC_ID_KEY);\n+        if (diagnosticId == null || !tracerProvider.isEnabled()) {\n+            return Context.NONE;\n+        }\n+\n+        Context spanContext = tracerProvider.extractContext(diagnosticId.toString(), Context.NONE)\n+            .addData(ENTITY_PATH_KEY, entityPath)\n+            .addData(HOST_NAME_KEY, hostname)\n+            .addData(AZ_TRACING_NAMESPACE_KEY, AZ_TRACING_NAMESPACE_VALUE);\n+        spanContext = receivedMessage.getEnqueuedTime() == null\n+            ? spanContext\n+            : spanContext.addData(MESSAGE_ENQUEUED_TIME, receivedMessage.getEnqueuedTime().toEpochSecond());\n+        return tracerProvider.startSpan(AZ_TRACING_SERVICE_NAME, spanContext, processKind);\n+    }\n+\n+    /*\n+     * Ends the process tracing span and the scope of that span.\n+     */\n+    public static void endProcessTracingSpan(Context processSpanContext, Signal<Void> signal,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxNTgwNw=="}, "originalCommit": {"oid": "4db48fe4e05e102832fb6a7bb7d846ac1ad48c92"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzQ4Njg4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDo1MTozMVrOHmMvmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDo1MTozMVrOHmMvmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxNjczMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Starts a new process tracing span and attaches the returned context to the EventData object for users.\n          \n          \n            \n                 * Starts a new process tracing span and attaches the returned context to the ServiceBusReceivedMessage object for users.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#discussion_r509816730", "createdAt": "2020-10-22T00:51:31Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -253,4 +275,75 @@ private static TransactionalState getTransactionState(ByteBuffer transactionId,\n         transactionalState.setOutcome(outcome);\n         return transactionalState;\n     }\n+\n+    public static ServiceBusMessage traceMessageSpan(ServiceBusMessage serviceBusMessage,\n+        Context messageContext, String hostname, String entityPath, TracerProvider tracerProvider) {\n+        Optional<Object> eventContextData = messageContext.getData(SPAN_CONTEXT_KEY);\n+        if (eventContextData.isPresent()) {\n+            // if message has context (in case of retries), don't start a message span or add a new context\n+            return serviceBusMessage;\n+        } else {\n+            // Starting the span makes the sampling decision (nothing is logged at this time)\n+            Context newMessageContext = messageContext\n+                .addData(AZ_TRACING_NAMESPACE_KEY, AZ_TRACING_NAMESPACE_VALUE)\n+                .addData(ENTITY_PATH_KEY, entityPath)\n+                .addData(HOST_NAME_KEY, hostname);\n+            Context eventSpanContext = tracerProvider.startSpan(AZ_TRACING_SERVICE_NAME, newMessageContext,\n+                ProcessKind.MESSAGE);\n+            Optional<Object> eventDiagnosticIdOptional = eventSpanContext.getData(DIAGNOSTIC_ID_KEY);\n+            if (eventDiagnosticIdOptional.isPresent()) {\n+                serviceBusMessage.getApplicationProperties().put(DIAGNOSTIC_ID_KEY, eventDiagnosticIdOptional.get()\n+                    .toString());\n+                tracerProvider.endSpan(eventSpanContext, Signal.complete());\n+                serviceBusMessage.addContext(SPAN_CONTEXT_KEY, eventSpanContext);\n+            }\n+        }\n+        return serviceBusMessage;\n+    }\n+\n+    /*\n+     * Starts a new process tracing span and attaches the returned context to the EventData object for users.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db48fe4e05e102832fb6a7bb7d846ac1ad48c92"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTAzMzQ5OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNzoyMTozM1rOHnBtKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMDowMTowNFrOHpVPOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY4NDQ1OA==", "bodyText": "How does Kind fits into this ?, should that be passed here ?\nhttps://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/util/tracing/ProcessKind.java\n@samvaity    Can you look into this PR ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#discussion_r510684458", "createdAt": "2020-10-23T07:21:33Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -253,4 +275,75 @@ private static TransactionalState getTransactionState(ByteBuffer transactionId,\n         transactionalState.setOutcome(outcome);\n         return transactionalState;\n     }\n+\n+    public static ServiceBusMessage traceMessageSpan(ServiceBusMessage serviceBusMessage,\n+        Context messageContext, String hostname, String entityPath, TracerProvider tracerProvider) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db48fe4e05e102832fb6a7bb7d846ac1ad48c92"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5NzI4Mg==", "bodyText": "ProcessKind.MESSAGE should be used to create a message. Just like in EventHubs. \n  \n    \n      azure-sdk-for-java/sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventDataBatch.java\n    \n    \n         Line 158\n      in\n      914ab8b\n    \n    \n    \n    \n\n        \n          \n           Context eventSpanContext = tracerProvider.startSpan(AZ_TRACING_SERVICE_NAME, eventContext,", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#discussion_r513097282", "createdAt": "2020-10-27T23:46:55Z", "author": {"login": "YijunXieMS"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -253,4 +275,75 @@ private static TransactionalState getTransactionState(ByteBuffer transactionId,\n         transactionalState.setOutcome(outcome);\n         return transactionalState;\n     }\n+\n+    public static ServiceBusMessage traceMessageSpan(ServiceBusMessage serviceBusMessage,\n+        Context messageContext, String hostname, String entityPath, TracerProvider tracerProvider) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY4NDQ1OA=="}, "originalCommit": {"oid": "4db48fe4e05e102832fb6a7bb7d846ac1ad48c92"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5ODE0Mg==", "bodyText": "The ProcessKind helps the tracer apply specific attributes on the span. For example, in the case of MESSAGE, the tracer will attribute the spanType=Producer, here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#discussion_r513098142", "createdAt": "2020-10-27T23:49:54Z", "author": {"login": "samvaity"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -253,4 +275,75 @@ private static TransactionalState getTransactionState(ByteBuffer transactionId,\n         transactionalState.setOutcome(outcome);\n         return transactionalState;\n     }\n+\n+    public static ServiceBusMessage traceMessageSpan(ServiceBusMessage serviceBusMessage,\n+        Context messageContext, String hostname, String entityPath, TracerProvider tracerProvider) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY4NDQ1OA=="}, "originalCommit": {"oid": "4db48fe4e05e102832fb6a7bb7d846ac1ad48c92"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5OTYxOQ==", "bodyText": "@samvaity is this javadoc misleading? It looks like MESSAGE is used for receiving.\n    /**\n     * Amqp message process call to receive data.\n     */\n    MESSAGE,", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#discussion_r513099619", "createdAt": "2020-10-27T23:54:32Z", "author": {"login": "YijunXieMS"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -253,4 +275,75 @@ private static TransactionalState getTransactionState(ByteBuffer transactionId,\n         transactionalState.setOutcome(outcome);\n         return transactionalState;\n     }\n+\n+    public static ServiceBusMessage traceMessageSpan(ServiceBusMessage serviceBusMessage,\n+        Context messageContext, String hostname, String entityPath, TracerProvider tracerProvider) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY4NDQ1OA=="}, "originalCommit": {"oid": "4db48fe4e05e102832fb6a7bb7d846ac1ad48c92"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEwMTYyNg==", "bodyText": "Yeah, I think we initially had this as RECEIVE and later updated to MESSAGE so the left over javadoc. But yes it should be updated to suit process kind \"message\". AMQP process kind for message spans.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#discussion_r513101626", "createdAt": "2020-10-28T00:01:04Z", "author": {"login": "samvaity"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -253,4 +275,75 @@ private static TransactionalState getTransactionState(ByteBuffer transactionId,\n         transactionalState.setOutcome(outcome);\n         return transactionalState;\n     }\n+\n+    public static ServiceBusMessage traceMessageSpan(ServiceBusMessage serviceBusMessage,\n+        Context messageContext, String hostname, String entityPath, TracerProvider tracerProvider) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY4NDQ1OA=="}, "originalCommit": {"oid": "4db48fe4e05e102832fb6a7bb7d846ac1ad48c92"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDkwNzA4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMzo1NjozMVrOHpVJ7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMzoxMjozOFrOHqA09A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEwMDI3MQ==", "bodyText": "Need to add javadoc for this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#discussion_r513100271", "createdAt": "2020-10-27T23:56:31Z", "author": {"login": "samvaity"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -253,4 +275,75 @@ private static TransactionalState getTransactionState(ByteBuffer transactionId,\n         transactionalState.setOutcome(outcome);\n         return transactionalState;\n     }\n+\n+    public static ServiceBusMessage traceMessageSpan(ServiceBusMessage serviceBusMessage,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab3908c55535858faa12348778637f9998c5ef4d"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgxNTc5Ng==", "bodyText": "Added a simple description.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#discussion_r513815796", "createdAt": "2020-10-28T23:12:38Z", "author": {"login": "YijunXieMS"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -253,4 +275,75 @@ private static TransactionalState getTransactionState(ByteBuffer transactionId,\n         transactionalState.setOutcome(outcome);\n         return transactionalState;\n     }\n+\n+    public static ServiceBusMessage traceMessageSpan(ServiceBusMessage serviceBusMessage,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEwMDI3MQ=="}, "originalCommit": {"oid": "ab3908c55535858faa12348778637f9998c5ef4d"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4022, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}