{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MjE0NDQx", "number": 15920, "title": "Sb BinaryData - Binary representation of data from different sources", "bodyText": "Binary representation of data from different sources\nSupport byte[], InputStream , ByteBuffer, Object\nSupport ObjectSerializer to serialize/deserialize Object\n\nJava: API View : https://apiview.dev/Assemblies/Review/22274ac987a04a7589b6d5e6ee6b7554#com.azure.core.experimental.util.BinaryData\n.Net API View : https://apiview.dev/Assemblies/Review/8f2e023e377f4627a4ec815f6e11d013#Azure.Core.BinaryData", "createdAt": "2020-10-03T04:46:53Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15920", "merged": true, "mergeCommit": {"oid": "42746800304df7532c06012e476691d24417c524"}, "closed": true, "closedAt": "2020-10-06T06:23:34Z", "author": {"login": "hemanttanwar"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOMJMugH2gAyNDk3MjE0NDQxOjgzZjM4NmZjYThjNDc3N2Q3NDBjMzNjMjFkMGE5ZjdlYjhmYmJkMTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdPxp7vgH2gAyNDk3MjE0NDQxOmY5MjA1YmMxYTg3MWQ5N2JkYjk3NzVkZWJiODNlNjQ5M2I5YjM4NDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "83f386fca8c4777d740c33c21d0a9f7eb8fbbd18", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/83f386fca8c4777d740c33c21d0a9f7eb8fbbd18", "committedDate": "2020-10-01T07:21:05Z", "message": "Adding BinaryData.."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba5a9cc14283762b50a4149c33c4dc52a6236493", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ba5a9cc14283762b50a4149c33c4dc52a6236493", "committedDate": "2020-10-01T19:45:38Z", "message": "Added test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "834f783862c0f68868ec9177dee1a9ddd5a21a6b", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/834f783862c0f68868ec9177dee1a9ddd5a21a6b", "committedDate": "2020-10-02T23:32:01Z", "message": "Adding BinaryData"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5eb7d7bc221b400043d50fec67ac9d8bbd708ca2", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5eb7d7bc221b400043d50fec67ac9d8bbd708ca2", "committedDate": "2020-10-03T04:45:15Z", "message": "Added samples/ codesnippet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18501eae5f453949c1200f9f5a67be85da6f1813", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/18501eae5f453949c1200f9f5a67be85da6f1813", "committedDate": "2020-10-03T05:37:23Z", "message": "fix checkstyle errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b674aa3a66bdfe346b6035ab6c16aa9d0062e3e5", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b674aa3a66bdfe346b6035ab6c16aa9d0062e3e5", "committedDate": "2020-10-03T16:02:48Z", "message": "check style fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37607119ae0acf48d127955ab538c9f9e63de81d", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/37607119ae0acf48d127955ab538c9f9e63de81d", "committedDate": "2020-10-03T16:05:32Z", "message": "merge master into branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01e869523ba66166dde9a5d14f1946eddcde29d9", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/01e869523ba66166dde9a5d14f1946eddcde29d9", "committedDate": "2020-10-04T06:18:29Z", "message": "Javadoc change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bebb6a4d734b084f708d4c1b4d201e18daa5953c", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bebb6a4d734b084f708d4c1b4d201e18daa5953c", "committedDate": "2020-10-05T17:33:50Z", "message": "updated java doc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMzk3MDU2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15920#pullrequestreview-502397056", "createdAt": "2020-10-05T20:29:56Z", "commit": {"oid": "bebb6a4d734b084f708d4c1b4d201e18daa5953c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDoyOTo1NlrOHcsrMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDozMzo0MlrOHcsybw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1NDEzMA==", "bodyText": "Should we clone this? In other APIs we usually make a copy of the byte[].", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15920#discussion_r499854130", "createdAt": "2020-10-05T20:29:56Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.util;\n+\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.ObjectSerializer;\n+import com.azure.core.util.serializer.TypeReference;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+/**\n+ * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n+ * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n+ * array. The data is collected from provided sources and stored into a byte array.\n+ * <p>\n+ * It also provides a way to serialize and deserialize an {@link Object} into {@link BinaryData} given an\n+ * {@link ObjectSerializer}. Code samples are explained below.\n+ *\n+ * <p><strong>Create an instance from Bytes</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#bytes}\n+ *\n+ * <p><strong>Create an instance from String</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#String}\n+ *\n+ * <p><strong>Create an instance from InputStream</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Stream}\n+ *\n+ * <p><strong>Get an Object from {@link BinaryData}</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#ObjectAsync}\n+ *\n+ * @see ObjectSerializer\n+ */\n+public final class BinaryData {\n+    private final byte[] data;\n+\n+    BinaryData() {\n+        // This exists, so no one is able to create instance, user need to use static function to create instances.\n+        this.data = null;\n+    }\n+\n+    /**\n+     * Create instance of {@link BinaryData} given the data.\n+     * @param data to represent as bytes.\n+     */\n+    BinaryData(byte[] data) {\n+        this.data = data;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bebb6a4d734b084f708d4c1b4d201e18daa5953c"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1NTM3MA==", "bodyText": "Once this moves into azure-core we have a specialized ByteArrayOutputStream type that allows access to its internal buffer without copying when toByteArray is called.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15920#discussion_r499855370", "createdAt": "2020-10-05T20:32:22Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.util;\n+\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.ObjectSerializer;\n+import com.azure.core.util.serializer.TypeReference;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+/**\n+ * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n+ * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n+ * array. The data is collected from provided sources and stored into a byte array.\n+ * <p>\n+ * It also provides a way to serialize and deserialize an {@link Object} into {@link BinaryData} given an\n+ * {@link ObjectSerializer}. Code samples are explained below.\n+ *\n+ * <p><strong>Create an instance from Bytes</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#bytes}\n+ *\n+ * <p><strong>Create an instance from String</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#String}\n+ *\n+ * <p><strong>Create an instance from InputStream</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Stream}\n+ *\n+ * <p><strong>Get an Object from {@link BinaryData}</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#ObjectAsync}\n+ *\n+ * @see ObjectSerializer\n+ */\n+public final class BinaryData {\n+    private final byte[] data;\n+\n+    BinaryData() {\n+        // This exists, so no one is able to create instance, user need to use static function to create instances.\n+        this.data = null;\n+    }\n+\n+    /**\n+     * Create instance of {@link BinaryData} given the data.\n+     * @param data to represent as bytes.\n+     */\n+    BinaryData(byte[] data) {\n+        this.data = data;\n+    }\n+\n+    /**\n+     * Provides {@link InputStream} for the data represented by this {@link BinaryData} object.\n+     *\n+     * <p><strong>Get InputStream from BinaryData</strong></p>\n+     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#Stream}\n+     *\n+     * @return {@link InputStream} representing the binary data.\n+     */\n+    public InputStream toStream() {\n+        return new ByteArrayInputStream(this.data);\n+    }\n+\n+    /**\n+     * Provides {@link Mono} of {@link InputStream} for the data represented by this {@link BinaryData} object.\n+     *\n+     * @return {@link InputStream} representation of the {@link BinaryData}.\n+     */\n+    public Mono<InputStream> toStreamAsync() {\n+        return Mono.fromCallable(() -> toStream());\n+    }\n+\n+    /**\n+     * Create {@link BinaryData} instance with given {@link InputStream} as source of data. The {@link InputStream} is\n+     * not closed by this function.\n+     *\n+     * <p><strong>Create an instance from InputStream</strong></p>\n+     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Stream}\n+     *\n+     * @param inputStream to read bytes from.\n+     * @throws UncheckedIOException If any error in reading from {@link InputStream}.\n+     * @throws NullPointerException if {@code inputStream} is null.\n+     * @return {@link BinaryData} representing the binary data.\n+     */\n+    public static BinaryData fromStream(InputStream inputStream) {\n+        Objects.requireNonNull(inputStream, \"'inputStream' cannot be null.\");\n+\n+        final int bufferSize = 1024;\n+        try {\n+            ByteArrayOutputStream dataOutputBuffer = new ByteArrayOutputStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bebb6a4d734b084f708d4c1b4d201e18daa5953c"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1NTk4Mw==", "bodyText": "Given this class only has static utility methods it should be fine to use a static logger and suppress the Checkstyle rule.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15920#discussion_r499855983", "createdAt": "2020-10-05T20:33:42Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.util;\n+\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.ObjectSerializer;\n+import com.azure.core.util.serializer.TypeReference;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+/**\n+ * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n+ * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n+ * array. The data is collected from provided sources and stored into a byte array.\n+ * <p>\n+ * It also provides a way to serialize and deserialize an {@link Object} into {@link BinaryData} given an\n+ * {@link ObjectSerializer}. Code samples are explained below.\n+ *\n+ * <p><strong>Create an instance from Bytes</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#bytes}\n+ *\n+ * <p><strong>Create an instance from String</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#String}\n+ *\n+ * <p><strong>Create an instance from InputStream</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Stream}\n+ *\n+ * <p><strong>Get an Object from {@link BinaryData}</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#ObjectAsync}\n+ *\n+ * @see ObjectSerializer\n+ */\n+public final class BinaryData {\n+    private final byte[] data;\n+\n+    BinaryData() {\n+        // This exists, so no one is able to create instance, user need to use static function to create instances.\n+        this.data = null;\n+    }\n+\n+    /**\n+     * Create instance of {@link BinaryData} given the data.\n+     * @param data to represent as bytes.\n+     */\n+    BinaryData(byte[] data) {\n+        this.data = data;\n+    }\n+\n+    /**\n+     * Provides {@link InputStream} for the data represented by this {@link BinaryData} object.\n+     *\n+     * <p><strong>Get InputStream from BinaryData</strong></p>\n+     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#Stream}\n+     *\n+     * @return {@link InputStream} representing the binary data.\n+     */\n+    public InputStream toStream() {\n+        return new ByteArrayInputStream(this.data);\n+    }\n+\n+    /**\n+     * Provides {@link Mono} of {@link InputStream} for the data represented by this {@link BinaryData} object.\n+     *\n+     * @return {@link InputStream} representation of the {@link BinaryData}.\n+     */\n+    public Mono<InputStream> toStreamAsync() {\n+        return Mono.fromCallable(() -> toStream());\n+    }\n+\n+    /**\n+     * Create {@link BinaryData} instance with given {@link InputStream} as source of data. The {@link InputStream} is\n+     * not closed by this function.\n+     *\n+     * <p><strong>Create an instance from InputStream</strong></p>\n+     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Stream}\n+     *\n+     * @param inputStream to read bytes from.\n+     * @throws UncheckedIOException If any error in reading from {@link InputStream}.\n+     * @throws NullPointerException if {@code inputStream} is null.\n+     * @return {@link BinaryData} representing the binary data.\n+     */\n+    public static BinaryData fromStream(InputStream inputStream) {\n+        Objects.requireNonNull(inputStream, \"'inputStream' cannot be null.\");\n+\n+        final int bufferSize = 1024;\n+        try {\n+            ByteArrayOutputStream dataOutputBuffer = new ByteArrayOutputStream();\n+            int nRead;\n+            byte[] data = new byte[bufferSize];\n+            while ((nRead = inputStream.read(data, 0, data.length)) != -1) {\n+                dataOutputBuffer.write(data, 0, nRead);\n+            }\n+\n+            return fromBytes(dataOutputBuffer.toByteArray());\n+        } catch (IOException ex) {\n+            ClientLogger logger = new ClientLogger(BinaryData.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bebb6a4d734b084f708d4c1b4d201e18daa5953c"}, "originalPosition": 109}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b86b557b75db74ab5bd912bd8b2d3d83739d2487", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b86b557b75db74ab5bd912bd8b2d3d83739d2487", "committedDate": "2020-10-05T21:03:03Z", "message": "Review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNDQyODY5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15920#pullrequestreview-502442869", "createdAt": "2020-10-05T21:44:13Z", "commit": {"oid": "b86b557b75db74ab5bd912bd8b2d3d83739d2487"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2686882b7bd925fff5d2f0a1fdb8c4e27436d8e", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b2686882b7bd925fff5d2f0a1fdb8c4e27436d8e", "committedDate": "2020-10-05T22:21:11Z", "message": "Removing unwanted contructor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNDE3NTU3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15920#pullrequestreview-502417557", "createdAt": "2020-10-05T21:01:15Z", "commit": {"oid": "bebb6a4d734b084f708d4c1b4d201e18daa5953c"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTowMToxNVrOHctp_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMToxMjowOVrOHct-CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg3MDIwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - Added : BinaryData, abstraction over many different ways that binary data can be represented. \n          \n          \n            \n            - Added `BinaryData` abstraction to represent binary data and supports serialization through `ObjectSerializer`.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15920#discussion_r499870206", "createdAt": "2020-10-05T21:01:15Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-experimental/CHANGELOG.md", "diffHunk": "@@ -2,6 +2,8 @@\n \n ## 1.0.0-beta.6 (Unreleased)\n \n+- Added : BinaryData, abstraction over many different ways that binary data can be represented. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bebb6a4d734b084f708d4c1b4d201e18daa5953c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg3MzAzNA==", "bodyText": "This ctor is not required. If a ctor with args is defined then automatically no-args ctor will be disabled unless explicitly added.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15920#discussion_r499873034", "createdAt": "2020-10-05T21:07:15Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.util;\n+\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.ObjectSerializer;\n+import com.azure.core.util.serializer.TypeReference;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+/**\n+ * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n+ * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n+ * array. The data is collected from provided sources and stored into a byte array.\n+ * <p>\n+ * It also provides a way to serialize and deserialize an {@link Object} into {@link BinaryData} given an\n+ * {@link ObjectSerializer}. Code samples are explained below.\n+ *\n+ * <p><strong>Create an instance from Bytes</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#bytes}\n+ *\n+ * <p><strong>Create an instance from String</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#String}\n+ *\n+ * <p><strong>Create an instance from InputStream</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Stream}\n+ *\n+ * <p><strong>Get an Object from {@link BinaryData}</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#ObjectAsync}\n+ *\n+ * @see ObjectSerializer\n+ */\n+public final class BinaryData {\n+    private final byte[] data;\n+\n+    BinaryData() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bebb6a4d734b084f708d4c1b4d201e18daa5953c"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg3NTMzNg==", "bodyText": "For methods that return Mono/Flux, use the error channel instead of throwing exception.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15920#discussion_r499875336", "createdAt": "2020-10-05T21:12:09Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -0,0 +1,286 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.util;\n+\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.ObjectSerializer;\n+import com.azure.core.util.serializer.TypeReference;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+/**\n+ * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n+ * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n+ * array. The data is collected from provided sources and stored into a byte array.\n+ * <p>\n+ * It also provides a way to serialize and deserialize an {@link Object} into {@link BinaryData} given an\n+ * {@link ObjectSerializer}. Code samples are explained below.\n+ *\n+ * <p><strong>Create an instance from Bytes</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#bytes}\n+ *\n+ * <p><strong>Create an instance from String</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#String}\n+ *\n+ * <p><strong>Create an instance from InputStream</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Stream}\n+ *\n+ * <p><strong>Get an Object from {@link BinaryData}</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#ObjectAsync}\n+ *\n+ * @see ObjectSerializer\n+ */\n+public final class BinaryData {\n+    private static final ClientLogger LOGGER = new ClientLogger(BinaryData.class);\n+    private final byte[] data;\n+\n+    BinaryData() {\n+        // This exists, so no one is able to create instance, user need to use static function to create instances.\n+        this.data = null;\n+    }\n+\n+    /**\n+     * Create instance of {@link BinaryData} given the data.\n+     * @param data to represent as bytes.\n+     * @throws NullPointerException If {@code data} is null.\n+     */\n+    BinaryData(byte[] data) {\n+        Objects.requireNonNull(data, \"'data' cannot be null.\");\n+        this.data = Arrays.copyOf(data, data.length);\n+    }\n+\n+    /**\n+     * Provides {@link InputStream} for the data represented by this {@link BinaryData} object.\n+     *\n+     * <p><strong>Get InputStream from BinaryData</strong></p>\n+     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#Stream}\n+     *\n+     * @return {@link InputStream} representing the binary data.\n+     */\n+    public InputStream toStream() {\n+        return new ByteArrayInputStream(this.data);\n+    }\n+\n+    /**\n+     * Provides {@link Mono} of {@link InputStream} for the data represented by this {@link BinaryData} object.\n+     *\n+     * @return {@link InputStream} representation of the {@link BinaryData}.\n+     */\n+    public Mono<InputStream> toStreamAsync() {\n+        return Mono.fromCallable(() -> toStream());\n+    }\n+\n+    /**\n+     * Create {@link BinaryData} instance with given {@link InputStream} as source of data. The {@link InputStream} is\n+     * not closed by this function.\n+     *\n+     * <p><strong>Create an instance from InputStream</strong></p>\n+     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Stream}\n+     *\n+     * @param inputStream to read bytes from.\n+     * @throws UncheckedIOException If any error in reading from {@link InputStream}.\n+     * @throws NullPointerException if {@code inputStream} is null.\n+     * @return {@link BinaryData} representing the binary data.\n+     */\n+    public static BinaryData fromStream(InputStream inputStream) {\n+        Objects.requireNonNull(inputStream, \"'inputStream' cannot be null.\");\n+\n+        final int bufferSize = 1024;\n+        try {\n+            ByteArrayOutputStream dataOutputBuffer = new ByteArrayOutputStream();\n+            int nRead;\n+            byte[] data = new byte[bufferSize];\n+            while ((nRead = inputStream.read(data, 0, data.length)) != -1) {\n+                dataOutputBuffer.write(data, 0, nRead);\n+            }\n+\n+            return fromBytes(dataOutputBuffer.toByteArray());\n+        } catch (IOException ex) {\n+            throw LOGGER.logExceptionAsError(new UncheckedIOException(ex));\n+        }\n+    }\n+\n+    /**\n+     * Asynchronously create {@link BinaryData} instance with given {@link InputStream} as source of data. The\n+     * {@link InputStream} is not closed by this function.\n+     *\n+     * @param inputStream to read bytes from.\n+     * @throws NullPointerException if {@code inputStream} is null.\n+     * @return {@link Mono} of {@link BinaryData} representing the binary data.\n+     */\n+    public static Mono<BinaryData> fromStreamAsync(InputStream inputStream) {\n+        Objects.requireNonNull(inputStream, \"'inputStream' cannot be null.\");\n+\n+        return Mono.fromCallable(() -> fromStream(inputStream));\n+    }\n+\n+    /**\n+     * Create {@link BinaryData} instance with given {@link Flux} of {@link ByteBuffer} as source of data. It will\n+     * collect all the bytes from {@link ByteBuffer} into {@link BinaryData}.\n+     *\n+     * <p><strong>Create an instance from String</strong></p>\n+     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Flux}\n+     *\n+     * @param data to use.\n+     * @throws NullPointerException if {@code inputStream} is null.\n+     * @return {@link Mono} of {@link BinaryData} representing binary data.\n+     */\n+    public static Mono<BinaryData> fromFlux(Flux<ByteBuffer> data) {\n+        Objects.requireNonNull(data, \"'data' cannot be null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b86b557b75db74ab5bd912bd8b2d3d83739d2487"}, "originalPosition": 142}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9205bc1a871d97bdb9775debb83e6493b9b3847", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f9205bc1a871d97bdb9775debb83e6493b9b3847", "committedDate": "2020-10-06T05:37:15Z", "message": "Review comment"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3201, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}