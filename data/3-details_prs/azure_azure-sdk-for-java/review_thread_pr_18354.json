{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1NDk3Nzg5", "number": 18354, "reviewThreads": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMTozOTozOVrOFNe-og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwMDoyNzoxNlrOFdU5Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjgzMzYyOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMTozOTozOVrOIRuUnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMTozOTozOVrOIRuUnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ1NTY0NQ==", "bodyText": "Delete <scope>compile</scope>, and add <optional>true</optional>.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555455645", "createdAt": "2021-01-12T01:39:39Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/pom.xml", "diffHunk": "@@ -270,6 +270,12 @@\n       <artifactId>spring-core</artifactId>\n       <version>5.2.10.RELEASE</version> <!-- {x-version-update;org.springframework:spring-core;external_dependency} -->\n     </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-webflux</artifactId>\n+      <version>5.2.10.RELEASE</version>\n+      <scope>compile</scope>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230ca9dca52f4ce63bab84e79f1dc4b48af81958"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5Njg0ODEyOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMTo0NjoxOVrOIRudCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMTo0NjoxOVrOIRudCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ1NzgwMA==", "bodyText": "It's better to write a util class like:\npublic class ContitionalAccessPolicyUtil {\n  public static String toConditionalAccessPolicyBody(String claims) {...}\n  public static boolean isConditionalAccessPolicyBody(String body) {...}\n  // other util methods\n}", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555457800", "createdAt": "2021-01-12T01:46:19Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -87,6 +95,28 @@ public AADOAuth2OboAuthorizedClientRepository(ClientRegistrationRepository repos\n             request.setAttribute(oboAuthorizedClientAttributeName, (T) oAuth2AuthorizedClient);\n             return (T) oAuth2AuthorizedClient;\n         } catch (Throwable throwable) {\n+            String claims = Optional.of(throwable)\n+                                    .map(Throwable::getCause)\n+                                    .filter(e -> e instanceof MsalInteractionRequiredException)\n+                                    .map(e -> (MsalInteractionRequiredException) e)\n+                                    .map(MsalInteractionRequiredException::claims)\n+                                    .orElse(null);\n+\n+            if (claims != null) {\n+                ServletRequestAttributes attr =\n+                    (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();\n+                HttpServletResponse response = attr.getResponse();\n+                response.setStatus(HttpStatus.FORBIDDEN.value());\n+                try {\n+                    ServletOutputStream outputStream = response.getOutputStream();\n+                    String result =\n+                        Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS + claims + Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230ca9dca52f4ce63bab84e79f1dc4b48af81958"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5Njg0OTE3OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMTo0Njo1MFrOIRudoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMTo0Njo1MFrOIRudoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ1Nzk1Mw==", "bodyText": "Use LOGGER.error(...) instead of e.printStackTrace()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555457953", "createdAt": "2021-01-12T01:46:50Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -87,6 +95,28 @@ public AADOAuth2OboAuthorizedClientRepository(ClientRegistrationRepository repos\n             request.setAttribute(oboAuthorizedClientAttributeName, (T) oAuth2AuthorizedClient);\n             return (T) oAuth2AuthorizedClient;\n         } catch (Throwable throwable) {\n+            String claims = Optional.of(throwable)\n+                                    .map(Throwable::getCause)\n+                                    .filter(e -> e instanceof MsalInteractionRequiredException)\n+                                    .map(e -> (MsalInteractionRequiredException) e)\n+                                    .map(MsalInteractionRequiredException::claims)\n+                                    .orElse(null);\n+\n+            if (claims != null) {\n+                ServletRequestAttributes attr =\n+                    (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();\n+                HttpServletResponse response = attr.getResponse();\n+                response.setStatus(HttpStatus.FORBIDDEN.value());\n+                try {\n+                    ServletOutputStream outputStream = response.getOutputStream();\n+                    String result =\n+                        Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS + claims + Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS;\n+                    outputStream.write(result.getBytes());\n+                    outputStream.flush();\n+                } catch (IOException e) {\n+                    e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230ca9dca52f4ce63bab84e79f1dc4b48af81958"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5Njg1Mjk5OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMTo0ODoyM1rOIRufoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMTo0ODoyM1rOIRufoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ1ODQ2NQ==", "bodyText": "Is this redundant because we already have @ExceptionHandler(AADConditionalAccessException.class).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555458465", "createdAt": "2021-01-12T01:48:23Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -121,6 +136,21 @@ public static int resourceServerCount(Set<String> scopes) {\n         return result;\n     }\n \n+    @ControllerAdvice\n+    public class GlobalExceptionAdvice {\n+        @ExceptionHandler(AADConditionalAccessException.class)\n+        public void handleUserNotFound(HttpServletRequest request, HttpServletResponse response, Exception e) throws IOException {\n+            if(e instanceof AADConditionalAccessException){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230ca9dca52f4ce63bab84e79f1dc4b48af81958"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5Njg1NjE2OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMTo0OTo1MVrOIRuhcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMTo0OTo1MVrOIRuhcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ1ODkzMA==", "bodyText": "As discussed, we do not provide this bean.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555458930", "createdAt": "2021-01-12T01:49:51Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -196,4 +226,76 @@ protected void configure(HttpSecurity http) throws Exception {\n         }\n     }\n \n+\n+    @Bean\n+    public OAuth2AuthorizedClientManager authorizedClientManager(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230ca9dca52f4ce63bab84e79f1dc4b48af81958"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5Njg1Njg2OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMTo1MDoxMFrOIRuh3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMTo1MDoxMFrOIRuh3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ1OTAzNg==", "bodyText": "Same here, we do not provide this bean.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555459036", "createdAt": "2021-01-12T01:50:10Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -196,4 +226,76 @@ protected void configure(HttpSecurity http) throws Exception {\n         }\n     }\n \n+\n+    @Bean\n+    public OAuth2AuthorizedClientManager authorizedClientManager(\n+        ClientRegistrationRepository clientRegistrationRepository,\n+        OAuth2AuthorizedClientRepository authorizedClientRepository) {\n+\n+        OAuth2AuthorizedClientProvider authorizedClientProvider =\n+            OAuth2AuthorizedClientProviderBuilder.builder()\n+                                                 .authorizationCode()\n+                                                 .refreshToken()\n+                                                 .clientCredentials()\n+                                                 .password()\n+                                                 .build();\n+\n+        DefaultOAuth2AuthorizedClientManager authorizedClientManager =\n+            new DefaultOAuth2AuthorizedClientManager(\n+                clientRegistrationRepository, authorizedClientRepository);\n+        authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);\n+\n+        return authorizedClientManager;\n+    }\n+\n+    @Bean", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230ca9dca52f4ce63bab84e79f1dc4b48af81958"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5Njg1OTI5OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMTo1MTozNVrOIRujZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMTo1MTozNVrOIRujZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ1OTQyOA==", "bodyText": "toAADConditionalAccessException", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555459428", "createdAt": "2021-01-12T01:51:35Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -196,4 +226,76 @@ protected void configure(HttpSecurity http) throws Exception {\n         }\n     }\n \n+\n+    @Bean\n+    public OAuth2AuthorizedClientManager authorizedClientManager(\n+        ClientRegistrationRepository clientRegistrationRepository,\n+        OAuth2AuthorizedClientRepository authorizedClientRepository) {\n+\n+        OAuth2AuthorizedClientProvider authorizedClientProvider =\n+            OAuth2AuthorizedClientProviderBuilder.builder()\n+                                                 .authorizationCode()\n+                                                 .refreshToken()\n+                                                 .clientCredentials()\n+                                                 .password()\n+                                                 .build();\n+\n+        DefaultOAuth2AuthorizedClientManager authorizedClientManager =\n+            new DefaultOAuth2AuthorizedClientManager(\n+                clientRegistrationRepository, authorizedClientRepository);\n+        authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);\n+\n+        return authorizedClientManager;\n+    }\n+\n+    @Bean\n+    public static WebClient webClient(OAuth2AuthorizedClientManager authorizedClientManager) {\n+        ServletOAuth2AuthorizedClientExchangeFilterFunction oauth2Client =\n+            new ServletOAuth2AuthorizedClientExchangeFilterFunction(authorizedClientManager);\n+        return WebClient.builder()\n+                        .apply(oauth2Client.oauth2Configuration())\n+                        .filter(errorHandlingFilter())\n+                        .build();\n+    }\n+\n+\n+    private static ExchangeFilterFunction errorHandlingFilter() {\n+        return ExchangeFilterFunction.ofResponseProcessor(clientResponse -> {\n+                if (clientResponse.statusCode().is4xxClientError()) {\n+                    return clientResponse.bodyToMono(String.class)\n+                                         .flatMap(errorBody -> {\n+                                             if (isConditionalAccessError(errorBody)) {\n+                                                 return Mono.error(convertToException(errorBody));\n+                                             }\n+                                             return Mono.just(clientResponse);\n+                                         });\n+                }\n+                return Mono.just(clientResponse);\n+            }\n+        );\n+    }\n+\n+\n+    private static boolean isConditionalAccessError(String body) {\n+        return body.startsWith(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS);\n+    }\n+\n+    private static AADConditionalAccessException convertToException(String body) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230ca9dca52f4ce63bab84e79f1dc4b48af81958"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5Njg2MTYzOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMTo1Mjo1MFrOIRuk1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMTo1Mjo1MFrOIRuk1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ1OTc5Ng==", "bodyText": "Can we set it to private, because it's not used outside.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555459796", "createdAt": "2021-01-12T01:52:50Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -196,4 +226,76 @@ protected void configure(HttpSecurity http) throws Exception {\n         }\n     }\n \n+\n+    @Bean\n+    public OAuth2AuthorizedClientManager authorizedClientManager(\n+        ClientRegistrationRepository clientRegistrationRepository,\n+        OAuth2AuthorizedClientRepository authorizedClientRepository) {\n+\n+        OAuth2AuthorizedClientProvider authorizedClientProvider =\n+            OAuth2AuthorizedClientProviderBuilder.builder()\n+                                                 .authorizationCode()\n+                                                 .refreshToken()\n+                                                 .clientCredentials()\n+                                                 .password()\n+                                                 .build();\n+\n+        DefaultOAuth2AuthorizedClientManager authorizedClientManager =\n+            new DefaultOAuth2AuthorizedClientManager(\n+                clientRegistrationRepository, authorizedClientRepository);\n+        authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);\n+\n+        return authorizedClientManager;\n+    }\n+\n+    @Bean\n+    public static WebClient webClient(OAuth2AuthorizedClientManager authorizedClientManager) {\n+        ServletOAuth2AuthorizedClientExchangeFilterFunction oauth2Client =\n+            new ServletOAuth2AuthorizedClientExchangeFilterFunction(authorizedClientManager);\n+        return WebClient.builder()\n+                        .apply(oauth2Client.oauth2Configuration())\n+                        .filter(errorHandlingFilter())\n+                        .build();\n+    }\n+\n+\n+    private static ExchangeFilterFunction errorHandlingFilter() {\n+        return ExchangeFilterFunction.ofResponseProcessor(clientResponse -> {\n+                if (clientResponse.statusCode().is4xxClientError()) {\n+                    return clientResponse.bodyToMono(String.class)\n+                                         .flatMap(errorBody -> {\n+                                             if (isConditionalAccessError(errorBody)) {\n+                                                 return Mono.error(convertToException(errorBody));\n+                                             }\n+                                             return Mono.just(clientResponse);\n+                                         });\n+                }\n+                return Mono.just(clientResponse);\n+            }\n+        );\n+    }\n+\n+\n+    private static boolean isConditionalAccessError(String body) {\n+        return body.startsWith(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS);\n+    }\n+\n+    private static AADConditionalAccessException convertToException(String body) {\n+        String claims = body.split(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS)[1];\n+        return new AADConditionalAccessException(claims);\n+    }\n+\n+    protected static class AADConditionalAccessException extends RuntimeException{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230ca9dca52f4ce63bab84e79f1dc4b48af81958"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5Njg2MTkxOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMTo1Mjo1OVrOIRuk_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMTo1Mjo1OVrOIRuk_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ1OTgzNg==", "bodyText": "private, too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555459836", "createdAt": "2021-01-12T01:52:59Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -196,4 +226,76 @@ protected void configure(HttpSecurity http) throws Exception {\n         }\n     }\n \n+\n+    @Bean\n+    public OAuth2AuthorizedClientManager authorizedClientManager(\n+        ClientRegistrationRepository clientRegistrationRepository,\n+        OAuth2AuthorizedClientRepository authorizedClientRepository) {\n+\n+        OAuth2AuthorizedClientProvider authorizedClientProvider =\n+            OAuth2AuthorizedClientProviderBuilder.builder()\n+                                                 .authorizationCode()\n+                                                 .refreshToken()\n+                                                 .clientCredentials()\n+                                                 .password()\n+                                                 .build();\n+\n+        DefaultOAuth2AuthorizedClientManager authorizedClientManager =\n+            new DefaultOAuth2AuthorizedClientManager(\n+                clientRegistrationRepository, authorizedClientRepository);\n+        authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);\n+\n+        return authorizedClientManager;\n+    }\n+\n+    @Bean\n+    public static WebClient webClient(OAuth2AuthorizedClientManager authorizedClientManager) {\n+        ServletOAuth2AuthorizedClientExchangeFilterFunction oauth2Client =\n+            new ServletOAuth2AuthorizedClientExchangeFilterFunction(authorizedClientManager);\n+        return WebClient.builder()\n+                        .apply(oauth2Client.oauth2Configuration())\n+                        .filter(errorHandlingFilter())\n+                        .build();\n+    }\n+\n+\n+    private static ExchangeFilterFunction errorHandlingFilter() {\n+        return ExchangeFilterFunction.ofResponseProcessor(clientResponse -> {\n+                if (clientResponse.statusCode().is4xxClientError()) {\n+                    return clientResponse.bodyToMono(String.class)\n+                                         .flatMap(errorBody -> {\n+                                             if (isConditionalAccessError(errorBody)) {\n+                                                 return Mono.error(convertToException(errorBody));\n+                                             }\n+                                             return Mono.just(clientResponse);\n+                                         });\n+                }\n+                return Mono.just(clientResponse);\n+            }\n+        );\n+    }\n+\n+\n+    private static boolean isConditionalAccessError(String body) {\n+        return body.startsWith(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS);\n+    }\n+\n+    private static AADConditionalAccessException convertToException(String body) {\n+        String claims = body.split(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS)[1];\n+        return new AADConditionalAccessException(claims);\n+    }\n+\n+    protected static class AADConditionalAccessException extends RuntimeException{\n+        String claims;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230ca9dca52f4ce63bab84e79f1dc4b48af81958"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5Njg2NjI4OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMTo1NDozNFrOIRunXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMTo1NDozNFrOIRunXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ2MDQ0NQ==", "bodyText": "Rename sharedObject to filter.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555460445", "createdAt": "2021-01-12T01:54:34Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java", "diffHunk": "@@ -87,4 +92,15 @@ protected OAuth2AuthorizationRequestResolver requestResolver() {\n     protected AuthenticationFailureHandler failureHandler() {\n         return new AADAuthenticationFailureHandler();\n     }\n+\n+    /**\n+     * Fix the default error info not displayed when the setting failureHandler in configure\n+     */\n+    private final static class AADHttpConfigurer extends AbstractHttpConfigurer<AADHttpConfigurer, HttpSecurity>{\n+        @Override\n+        public void init(HttpSecurity http) {\n+            DefaultLoginPageGeneratingFilter sharedObject = http.getSharedObject(DefaultLoginPageGeneratingFilter.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230ca9dca52f4ce63bab84e79f1dc4b48af81958"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5Njg2ODQwOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMTo1NTo0MlrOIRuotA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMTo1NTo0MlrOIRuotA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ2MDc4OA==", "bodyText": "Delete DEFAULT_FAILURE_URL, use \"/login?error\" directly, because it only used one time.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555460788", "createdAt": "2021-01-12T01:55:42Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java", "diffHunk": "@@ -31,6 +33,7 @@\n  */\n public abstract class AADWebSecurityConfigurerAdapter extends WebSecurityConfigurerAdapter {\n \n+    private static final String DEFAULT_FAILURE_URL = \"/login?error\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230ca9dca52f4ce63bab84e79f1dc4b48af81958"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMTkwNzg5OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-active-directory/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwMzowOTo0MFrOISd59w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwMzowOTo0MFrOISd59w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjIzNTI1NQ==", "bodyText": "We can not split this into 2 lines.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r556235255", "createdAt": "2021-01-13T03:09:40Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/pom.xml", "diffHunk": "@@ -96,12 +101,16 @@\n                 <include>com.microsoft.azure:msal4j:[1.8.0]</include> <!-- {x-include-update;com.microsoft.azure:msal4j;external_dependency} -->\n                 <include>com.nimbusds:nimbus-jose-jwt:[8.19]</include> <!-- {x-include-update;com.nimbusds:nimbus-jose-jwt;external_dependency} -->\n                 <include>io.projectreactor.netty:reactor-netty:[0.9.15.RELEASE]</include> <!-- {x-include-update;io.projectreactor.netty:reactor-netty;external_dependency} -->\n-                <include>org.springframework.boot:spring-boot-starter-validation:[2.3.5.RELEASE]</include> <!-- {x-include-update;org.springframework.boot:spring-boot-starter-validation;external_dependency} -->\n-                <include>org.springframework.boot:spring-boot-starter-webflux:[2.3.5.RELEASE]</include> <!-- {x-include-update;org.springframework.boot:spring-boot-starter-webflux;external_dependency} -->\n+                <include>org.springframework.boot:spring-boot-starter-validation:[2.3.5.RELEASE]\n+                </include> <!-- {x-include-update;org.springframework.boot:spring-boot-starter-validation;external_dependency} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24a7bfddba8a21a01175568bf36ec3328e75bf06"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMjc2MjA1OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwOTowMjo1NFrOISlpLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwOTowMjo1NFrOISlpLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM2MjAzMA==", "bodyText": "Can we use spring-boot-starter-webflux instead of spring-webflux?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r556362030", "createdAt": "2021-01-13T09:02:54Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/pom.xml", "diffHunk": "@@ -270,6 +270,12 @@\n       <artifactId>spring-core</artifactId>\n       <version>5.2.10.RELEASE</version> <!-- {x-version-update;org.springframework:spring-core;external_dependency} -->\n     </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-webflux</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694239305f9a4bae1604f665c45cef2a562284a6"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMjgyOTEyOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/ConditionalAccessException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwOToxOToyNVrOISmRdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwMDoxNDo0MFrOITKMEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM3MjM0Mg==", "bodyText": "I think we need more content in java doc to explain how we use ConditionalAccessException to handle condition access in obo flow.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r556372342", "createdAt": "2021-01-13T09:19:25Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/ConditionalAccessException.java", "diffHunk": "@@ -0,0 +1,36 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.aad.webapp;\n+\n+import com.azure.spring.autoconfigure.aad.Constants;\n+\n+/**\n+ * Create ConditionalAccessException to handle conditionalAccess in obo flow.\n+ */\n+public final class ConditionalAccessException extends RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694239305f9a4bae1604f665c45cef2a562284a6"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njk2MDc4Nw==", "bodyText": "Just like Flux:", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r556960787", "createdAt": "2021-01-14T00:14:40Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/ConditionalAccessException.java", "diffHunk": "@@ -0,0 +1,36 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.aad.webapp;\n+\n+import com.azure.spring.autoconfigure.aad.Constants;\n+\n+/**\n+ * Create ConditionalAccessException to handle conditionalAccess in obo flow.\n+ */\n+public final class ConditionalAccessException extends RuntimeException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM3MjM0Mg=="}, "originalCommit": {"oid": "694239305f9a4bae1604f665c45cef2a562284a6"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMjgzNzYyOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwOToyMTozOVrOISmWww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwOToyMTozOVrOISmWww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM3MzY5OQ==", "bodyText": "Use Assert.notNull() instead of assert. assert should not be used in production code.\nRefs: https://stackoverflow.com/questions/2758224/what-does-the-java-assert-keyword-do-and-when-should-it-be-used", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r556373699", "createdAt": "2021-01-13T09:21:39Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -87,6 +96,29 @@ public AADOAuth2OboAuthorizedClientRepository(ClientRegistrationRepository repos\n             request.setAttribute(oboAuthorizedClientAttributeName, (T) oAuth2AuthorizedClient);\n             return (T) oAuth2AuthorizedClient;\n         } catch (Throwable throwable) {\n+            // Handle conditional access policy for obo flow.\n+            String claims = Optional.of(throwable)\n+                                    .map(Throwable::getCause)\n+                                    .filter(e -> e instanceof MsalInteractionRequiredException)\n+                                    .map(e -> (MsalInteractionRequiredException) e)\n+                                    .map(MsalInteractionRequiredException::claims)\n+                                    .orElse(null);\n+\n+            if (claims != null) {\n+                ServletRequestAttributes attr =\n+                    (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();\n+                HttpServletResponse response = attr.getResponse();\n+                assert response != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694239305f9a4bae1604f665c45cef2a562284a6"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMjg1MTA0OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwOToyNDo1M1rOISme6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwOToyNDo1M1rOISme6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM3NTc4Ng==", "bodyText": "Please confirm there is no side-effect of clearContent.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r556375786", "createdAt": "2021-01-13T09:24:53Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -121,6 +135,30 @@ public static int resourceServerCount(Set<String> scopes) {\n         return result;\n     }\n \n+    /**\n+     * Handle conditional access error in obo flow.\n+     */\n+    @ControllerAdvice\n+    public static class GlobalExceptionAdvice {\n+        @ExceptionHandler(ConditionalAccessException.class)\n+        public void handleUserNotFound(HttpServletRequest request,\n+                                       HttpServletResponse response, Exception exception) {\n+            Optional.of(exception)\n+                    .map(e -> (ConditionalAccessException) e)\n+                    .ifPresent(aadConditionalAccessException -> {\n+                        response.setStatus(302);\n+                        SecurityContextHolder.clearContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694239305f9a4bae1604f665c45cef2a562284a6"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMjg1NjAxOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwOToyNTo1NVrOISmh3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwOToyNTo1NVrOISmh3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM3NjU0MA==", "bodyText": "This is not used now? I think we should update the webapp sample", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r556376540", "createdAt": "2021-01-13T09:25:55Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -196,4 +234,16 @@ protected void configure(HttpSecurity http) throws Exception {\n         }\n     }\n \n+\n+    public static ExchangeFilterFunction conditionalAccessExchangeFilterFunction() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694239305f9a4bae1604f665c45cef2a562284a6"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyMjA4NjAwOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwODoxMTowNVrOIVd1Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwODoxMTowNVrOIVd1Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTM3OTcxNA==", "bodyText": "Rename this method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r559379714", "createdAt": "2021-01-18T08:11:05Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -121,6 +135,30 @@ public static int resourceServerCount(Set<String> scopes) {\n         return result;\n     }\n \n+    /**\n+     * Handle conditional access error in obo flow.\n+     */\n+    @ControllerAdvice\n+    public static class GlobalExceptionAdvice {\n+        @ExceptionHandler(ConditionalAccessException.class)\n+        public void handleUserNotFound(HttpServletRequest request,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694239305f9a4bae1604f665c45cef2a562284a6"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNjMxMDI5OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwODo1OTozOVrOIWEbQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwODo1OTozOVrOIWEbQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDAxMjA5OA==", "bodyText": "Please do not catch throwable. Just catch the exception we care about.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r560012098", "createdAt": "2021-01-19T08:59:39Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -87,6 +96,29 @@ public AADOAuth2OboAuthorizedClientRepository(ClientRegistrationRepository repos\n             request.setAttribute(oboAuthorizedClientAttributeName, (T) oAuth2AuthorizedClient);\n             return (T) oAuth2AuthorizedClient;\n         } catch (Throwable throwable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34bd03ccf29f13da9e660c61e06ccd709d10fbaf"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1MTY0MDU3OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-webapp/src/main/resources/application.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQwOTowMDoyNFrOIoM_-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMFQxMDoyNzowMFrOIoyO-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAyNjkzOA==", "bodyText": "Add empty line at the end of this file.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579026938", "createdAt": "2021-02-19T09:00:24Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-webapp/src/main/resources/application.yml", "diffHunk": "@@ -13,9 +13,12 @@ azure:\n             - https://manage.office.com/ActivityFeed.Read\n             - https://manage.office.com/ActivityFeed.ReadDlp\n             - https://manage.office.com/ServiceHealth.Read\n+      obo:\n+        scopes:\n+          - <Web-API-A-app-id-url>/File.Read\n     client-id: <client-id>\n     client-secret: <client-secret>\n     tenant-id: <tenant-id>\n     user-group:\n       allowed-groups: group1, group2\n-    post-logout-redirect-uri: http://localhost:8080\n+    post-logout-redirect-uri: http://localhost:8080", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTYzNjk4NA==", "bodyText": "Done.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579636984", "createdAt": "2021-02-20T10:27:00Z", "author": {"login": "han-gao"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-webapp/src/main/resources/application.yml", "diffHunk": "@@ -13,9 +13,12 @@ azure:\n             - https://manage.office.com/ActivityFeed.Read\n             - https://manage.office.com/ActivityFeed.ReadDlp\n             - https://manage.office.com/ServiceHealth.Read\n+      obo:\n+        scopes:\n+          - <Web-API-A-app-id-url>/File.Read\n     client-id: <client-id>\n     client-secret: <client-secret>\n     tenant-id: <tenant-id>\n     user-group:\n       allowed-groups: group1, group2\n-    post-logout-redirect-uri: http://localhost:8080\n+    post-logout-redirect-uri: http://localhost:8080", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAyNjkzOA=="}, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1MTY1MjYyOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQwOTowMzo0MlrOIoNHzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMFQxMDoyNjo1OFrOIoyO4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAyODk0Mg==", "bodyText": "No need to break line.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579028942", "createdAt": "2021-02-19T09:03:42Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -130,4 +161,16 @@ private String interceptAuthorizationUri(String authorizationUri) {\n         }\n         return null;\n     }\n+\n+    void replyForbiddenWithWwwAuthenticateHeader(HttpServletResponse response,\n+                                                 MsalInteractionRequiredException exception) {\n+        Map<String, Object> parameters = new LinkedHashMap<>();\n+        response.setStatus(HttpStatus.FORBIDDEN.value());\n+        parameters.put(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS,\n+            exception.claims());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTYzNjk2Mg==", "bodyText": "Done.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579636962", "createdAt": "2021-02-20T10:26:58Z", "author": {"login": "han-gao"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -130,4 +161,16 @@ private String interceptAuthorizationUri(String authorizationUri) {\n         }\n         return null;\n     }\n+\n+    void replyForbiddenWithWwwAuthenticateHeader(HttpServletResponse response,\n+                                                 MsalInteractionRequiredException exception) {\n+        Map<String, Object> parameters = new LinkedHashMap<>();\n+        response.setStatus(HttpStatus.FORBIDDEN.value());\n+        parameters.put(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS,\n+            exception.claims());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAyODk0Mg=="}, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1MTY1NDQ4OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQwOTowNDoxNlrOIoNJBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMFQxMDoyNjo1NVrOIoyO1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAyOTI1Mg==", "bodyText": "Does MsalInteractionRequiredException  have error message? Maybe we can use the error message instead.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579029252", "createdAt": "2021-02-19T09:04:16Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -130,4 +161,16 @@ private String interceptAuthorizationUri(String authorizationUri) {\n         }\n         return null;\n     }\n+\n+    void replyForbiddenWithWwwAuthenticateHeader(HttpServletResponse response,\n+                                                 MsalInteractionRequiredException exception) {\n+        Map<String, Object> parameters = new LinkedHashMap<>();\n+        response.setStatus(HttpStatus.FORBIDDEN.value());\n+        parameters.put(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS,\n+            exception.claims());\n+        parameters.put(OAuth2ParameterNames.ERROR, OAuth2ErrorCodes.INVALID_TOKEN);\n+        parameters.put(OAuth2ParameterNames.ERROR_DESCRIPTION, \"The resource server requires higher privileges than \"\n+            + \"provided by the access token\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTYzNjk0OQ==", "bodyText": "I have tired this, but we need to put the error message in the response header, the error message of MsalInteractionRequiredException will fail in addHeader(String name, String value) API.\nI analyze the error message of MsalInteractionRequiredException and I think there's no useful information, so I customize a message as a description.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579636949", "createdAt": "2021-02-20T10:26:55Z", "author": {"login": "han-gao"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -130,4 +161,16 @@ private String interceptAuthorizationUri(String authorizationUri) {\n         }\n         return null;\n     }\n+\n+    void replyForbiddenWithWwwAuthenticateHeader(HttpServletResponse response,\n+                                                 MsalInteractionRequiredException exception) {\n+        Map<String, Object> parameters = new LinkedHashMap<>();\n+        response.setStatus(HttpStatus.FORBIDDEN.value());\n+        parameters.put(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS,\n+            exception.claims());\n+        parameters.put(OAuth2ParameterNames.ERROR, OAuth2ErrorCodes.INVALID_TOKEN);\n+        parameters.put(OAuth2ParameterNames.ERROR_DESCRIPTION, \"The resource server requires higher privileges than \"\n+            + \"provided by the access token\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAyOTI1Mg=="}, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1MTY1ODY3OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQwOTowNToxOFrOIoNLkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMFQxMDoyNjo1MlrOIoyOyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAyOTkwNQ==", "bodyText": "Web API -> resource-server", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579029905", "createdAt": "2021-02-19T09:05:18Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java", "diffHunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapp;\n+\n+import com.azure.spring.aad.webapi.AADOAuth2OboAuthorizedClientRepository;\n+import com.azure.spring.autoconfigure.aad.Constants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.reactive.function.client.WebClientResponseException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Handle the {@link WebClientResponseException} in On-Behalf-Of flow.\n+ *\n+ * <p>\n+ * When the Web API needs re-acquire token(The request requires higher privileges than provided by the access token in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTYzNjkzNg==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579636936", "createdAt": "2021-02-20T10:26:52Z", "author": {"login": "han-gao"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java", "diffHunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapp;\n+\n+import com.azure.spring.aad.webapi.AADOAuth2OboAuthorizedClientRepository;\n+import com.azure.spring.autoconfigure.aad.Constants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.reactive.function.client.WebClientResponseException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Handle the {@link WebClientResponseException} in On-Behalf-Of flow.\n+ *\n+ * <p>\n+ * When the Web API needs re-acquire token(The request requires higher privileges than provided by the access token in", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAyOTkwNQ=="}, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1MTY2Mzc3OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQwOTowNjoyOVrOIoNOdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMFQxMDoyNjo1MVrOIoyOxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzMDY0NQ==", "bodyText": "Web APP -> web-application.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579030645", "createdAt": "2021-02-19T09:06:29Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java", "diffHunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapp;\n+\n+import com.azure.spring.aad.webapi.AADOAuth2OboAuthorizedClientRepository;\n+import com.azure.spring.autoconfigure.aad.Constants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.reactive.function.client.WebClientResponseException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Handle the {@link WebClientResponseException} in On-Behalf-Of flow.\n+ *\n+ * <p>\n+ * When the Web API needs re-acquire token(The request requires higher privileges than provided by the access token in\n+ * On-Behalf-Of flow.), it can sent a 403 with information in the WWW-Authenticate header to web client ,web client\n+ * will throw {@link WebClientResponseException}, Web APP can handle this exception to challenge the user.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTYzNjkzMg==", "bodyText": "Done.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579636932", "createdAt": "2021-02-20T10:26:51Z", "author": {"login": "han-gao"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java", "diffHunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapp;\n+\n+import com.azure.spring.aad.webapi.AADOAuth2OboAuthorizedClientRepository;\n+import com.azure.spring.autoconfigure.aad.Constants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.reactive.function.client.WebClientResponseException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Handle the {@link WebClientResponseException} in On-Behalf-Of flow.\n+ *\n+ * <p>\n+ * When the Web API needs re-acquire token(The request requires higher privileges than provided by the access token in\n+ * On-Behalf-Of flow.), it can sent a 403 with information in the WWW-Authenticate header to web client ,web client\n+ * will throw {@link WebClientResponseException}, Web APP can handle this exception to challenge the user.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzMDY0NQ=="}, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1MTY4MzY2OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQwOToxMTowNlrOIoNaKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMFQxMDoyNjo0N1rOIoyOvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzMzY0Mw==", "bodyText": "The above 2 lines of code execute 2 times, could you please remove the duplicate?\nFor example:\nconditionalAccessClaims = ...;\nif (conditionalAccessClaims != null ) {\n  handleConditionalAccess(...);\n}", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579033643", "createdAt": "2021-02-19T09:11:06Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java", "diffHunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapp;\n+\n+import com.azure.spring.aad.webapi.AADOAuth2OboAuthorizedClientRepository;\n+import com.azure.spring.autoconfigure.aad.Constants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.reactive.function.client.WebClientResponseException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Handle the {@link WebClientResponseException} in On-Behalf-Of flow.\n+ *\n+ * <p>\n+ * When the Web API needs re-acquire token(The request requires higher privileges than provided by the access token in\n+ * On-Behalf-Of flow.), it can sent a 403 with information in the WWW-Authenticate header to web client ,web client\n+ * will throw {@link WebClientResponseException}, Web APP can handle this exception to challenge the user.\n+ */\n+public class AADHandleConditionalAccessFilter extends OncePerRequestFilter {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n+                                    FilterChain filterChain) throws IOException, ServletException {\n+        try {\n+            filterChain.doFilter(request, response);\n+        } catch (Exception exception) {\n+            WebClientResponseException webClientResponseException =\n+                Optional.of(exception)\n+                        .map(Throwable::getCause)\n+                        .filter(e -> e instanceof WebClientResponseException)\n+                        .map(e -> (WebClientResponseException) e)\n+                        .filter(AADHandleConditionalAccessFilter::isConditionalAccessExceptionFromObo)\n+                        .orElse(null);\n+            if (webClientResponseException != null) {\n+                handleConditionalAccess(webClientResponseException, request, response);\n+                return;\n+            }\n+            throw exception;\n+        }\n+    }\n+\n+    private static boolean isConditionalAccessExceptionFromObo(WebClientResponseException exception) {\n+        String result = Optional.of(exception)\n+                                .map(WebClientResponseException::getHeaders)\n+                                .map(httpHeaders -> httpHeaders.get(HttpHeaders.WWW_AUTHENTICATE))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTYzNjkyNA==", "bodyText": "Good idea, I will change the code to execute one time, thinks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579636924", "createdAt": "2021-02-20T10:26:47Z", "author": {"login": "han-gao"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java", "diffHunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapp;\n+\n+import com.azure.spring.aad.webapi.AADOAuth2OboAuthorizedClientRepository;\n+import com.azure.spring.autoconfigure.aad.Constants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.reactive.function.client.WebClientResponseException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Handle the {@link WebClientResponseException} in On-Behalf-Of flow.\n+ *\n+ * <p>\n+ * When the Web API needs re-acquire token(The request requires higher privileges than provided by the access token in\n+ * On-Behalf-Of flow.), it can sent a 403 with information in the WWW-Authenticate header to web client ,web client\n+ * will throw {@link WebClientResponseException}, Web APP can handle this exception to challenge the user.\n+ */\n+public class AADHandleConditionalAccessFilter extends OncePerRequestFilter {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n+                                    FilterChain filterChain) throws IOException, ServletException {\n+        try {\n+            filterChain.doFilter(request, response);\n+        } catch (Exception exception) {\n+            WebClientResponseException webClientResponseException =\n+                Optional.of(exception)\n+                        .map(Throwable::getCause)\n+                        .filter(e -> e instanceof WebClientResponseException)\n+                        .map(e -> (WebClientResponseException) e)\n+                        .filter(AADHandleConditionalAccessFilter::isConditionalAccessExceptionFromObo)\n+                        .orElse(null);\n+            if (webClientResponseException != null) {\n+                handleConditionalAccess(webClientResponseException, request, response);\n+                return;\n+            }\n+            throw exception;\n+        }\n+    }\n+\n+    private static boolean isConditionalAccessExceptionFromObo(WebClientResponseException exception) {\n+        String result = Optional.of(exception)\n+                                .map(WebClientResponseException::getHeaders)\n+                                .map(httpHeaders -> httpHeaders.get(HttpHeaders.WWW_AUTHENTICATE))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzMzY0Mw=="}, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1MTcwMTE5OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQwOToxNToyNlrOIoNk2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMFQxMDoyNjo0NFrOIoyOuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzNjM3OQ==", "bodyText": "Does this wwwAuthenticateHeader's format same to the format we discussed in Teams group? For example: starts with Bearer", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579036379", "createdAt": "2021-02-19T09:15:26Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java", "diffHunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapp;\n+\n+import com.azure.spring.aad.webapi.AADOAuth2OboAuthorizedClientRepository;\n+import com.azure.spring.autoconfigure.aad.Constants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.reactive.function.client.WebClientResponseException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Handle the {@link WebClientResponseException} in On-Behalf-Of flow.\n+ *\n+ * <p>\n+ * When the Web API needs re-acquire token(The request requires higher privileges than provided by the access token in\n+ * On-Behalf-Of flow.), it can sent a 403 with information in the WWW-Authenticate header to web client ,web client\n+ * will throw {@link WebClientResponseException}, Web APP can handle this exception to challenge the user.\n+ */\n+public class AADHandleConditionalAccessFilter extends OncePerRequestFilter {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n+                                    FilterChain filterChain) throws IOException, ServletException {\n+        try {\n+            filterChain.doFilter(request, response);\n+        } catch (Exception exception) {\n+            WebClientResponseException webClientResponseException =\n+                Optional.of(exception)\n+                        .map(Throwable::getCause)\n+                        .filter(e -> e instanceof WebClientResponseException)\n+                        .map(e -> (WebClientResponseException) e)\n+                        .filter(AADHandleConditionalAccessFilter::isConditionalAccessExceptionFromObo)\n+                        .orElse(null);\n+            if (webClientResponseException != null) {\n+                handleConditionalAccess(webClientResponseException, request, response);\n+                return;\n+            }\n+            throw exception;\n+        }\n+    }\n+\n+    private static boolean isConditionalAccessExceptionFromObo(WebClientResponseException exception) {\n+        String result = Optional.of(exception)\n+                                .map(WebClientResponseException::getHeaders)\n+                                .map(httpHeaders -> httpHeaders.get(HttpHeaders.WWW_AUTHENTICATE))\n+                                .map(list -> list.get(0))\n+                                .filter(value -> value.contains(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS))\n+                                .orElse(null);\n+        return result != null;\n+    }\n+\n+    static void handleConditionalAccess(WebClientResponseException exception, HttpServletRequest request,\n+                                        HttpServletResponse response) {\n+        Map<String, String> authParameters =\n+            Optional.of(exception)\n+                    .map(WebClientResponseException::getHeaders)\n+                    .map(httpHeaders -> httpHeaders.get(HttpHeaders.WWW_AUTHENTICATE))\n+                    .map(list -> list.get(0))\n+                    .map(AADHandleConditionalAccessFilter::parseAuthParameters)\n+                    .orElse(null);\n+        request.getSession().setAttribute(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS,\n+            authParameters.get(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS));\n+        response.setStatus(302);\n+        try {\n+            response.sendRedirect(Constants.DEFAULT_AUTHORITY_ENDPOINT_URI);\n+        } catch (IOException e) {\n+            LOGGER.error(\"Failed to redirect at this response.\", exception);\n+        }\n+    }\n+\n+    private static Map<String, String> parseAuthParameters(String wwwAuthenticateHeader) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTYzNjkyMA==", "bodyText": "Done.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579636920", "createdAt": "2021-02-20T10:26:44Z", "author": {"login": "han-gao"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java", "diffHunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapp;\n+\n+import com.azure.spring.aad.webapi.AADOAuth2OboAuthorizedClientRepository;\n+import com.azure.spring.autoconfigure.aad.Constants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.reactive.function.client.WebClientResponseException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Handle the {@link WebClientResponseException} in On-Behalf-Of flow.\n+ *\n+ * <p>\n+ * When the Web API needs re-acquire token(The request requires higher privileges than provided by the access token in\n+ * On-Behalf-Of flow.), it can sent a 403 with information in the WWW-Authenticate header to web client ,web client\n+ * will throw {@link WebClientResponseException}, Web APP can handle this exception to challenge the user.\n+ */\n+public class AADHandleConditionalAccessFilter extends OncePerRequestFilter {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n+                                    FilterChain filterChain) throws IOException, ServletException {\n+        try {\n+            filterChain.doFilter(request, response);\n+        } catch (Exception exception) {\n+            WebClientResponseException webClientResponseException =\n+                Optional.of(exception)\n+                        .map(Throwable::getCause)\n+                        .filter(e -> e instanceof WebClientResponseException)\n+                        .map(e -> (WebClientResponseException) e)\n+                        .filter(AADHandleConditionalAccessFilter::isConditionalAccessExceptionFromObo)\n+                        .orElse(null);\n+            if (webClientResponseException != null) {\n+                handleConditionalAccess(webClientResponseException, request, response);\n+                return;\n+            }\n+            throw exception;\n+        }\n+    }\n+\n+    private static boolean isConditionalAccessExceptionFromObo(WebClientResponseException exception) {\n+        String result = Optional.of(exception)\n+                                .map(WebClientResponseException::getHeaders)\n+                                .map(httpHeaders -> httpHeaders.get(HttpHeaders.WWW_AUTHENTICATE))\n+                                .map(list -> list.get(0))\n+                                .filter(value -> value.contains(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS))\n+                                .orElse(null);\n+        return result != null;\n+    }\n+\n+    static void handleConditionalAccess(WebClientResponseException exception, HttpServletRequest request,\n+                                        HttpServletResponse response) {\n+        Map<String, String> authParameters =\n+            Optional.of(exception)\n+                    .map(WebClientResponseException::getHeaders)\n+                    .map(httpHeaders -> httpHeaders.get(HttpHeaders.WWW_AUTHENTICATE))\n+                    .map(list -> list.get(0))\n+                    .map(AADHandleConditionalAccessFilter::parseAuthParameters)\n+                    .orElse(null);\n+        request.getSession().setAttribute(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS,\n+            authParameters.get(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS));\n+        response.setStatus(302);\n+        try {\n+            response.sendRedirect(Constants.DEFAULT_AUTHORITY_ENDPOINT_URI);\n+        } catch (IOException e) {\n+            LOGGER.error(\"Failed to redirect at this response.\", exception);\n+        }\n+    }\n+\n+    private static Map<String, String> parseAuthParameters(String wwwAuthenticateHeader) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzNjM3OQ=="}, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1MTcwODQ0OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQwOToxNzoxN1rOIoNpVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMFQxMDoyNjo0MlrOIoyOsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzNzUyNg==", "bodyText": "Recover this file.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579037526", "createdAt": "2021-02-19T09:17:17Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -48,6 +51,8 @@\n @EnableConfigurationProperties(AADAuthenticationProperties.class)\n public class AADWebAppConfiguration {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTYzNjkxNQ==", "bodyText": "Done.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579636915", "createdAt": "2021-02-20T10:26:42Z", "author": {"login": "han-gao"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -48,6 +51,8 @@\n @EnableConfigurationProperties(AADAuthenticationProperties.class)\n public class AADWebAppConfiguration {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzNzUyNg=="}, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1MTcxMjk0OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQwOToxODoxNlrOIoNr6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQwNjowNzoyM1rOIpIlLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzODE4NA==", "bodyText": "Any specific reason about WebAsyncManagerIntegrationFilter?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579038184", "createdAt": "2021-02-19T09:18:16Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java", "diffHunk": "@@ -51,7 +50,8 @@ protected void configure(HttpSecurity http) throws Exception {\n                 .and()\n             .logout()\n                 .logoutSuccessHandler(oidcLogoutSuccessHandler())\n-                .and();\n+                .and()\n+            .addFilterBefore(handleConditionalAccessFilter(), WebAsyncManagerIntegrationFilter.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTYzNjkwNw==", "bodyText": "When we need add a filter, spring security requires us to specify the registration order,.\nI didn't find that it should be added after a specific filter(it works after all filters), so I added our custom filter to the first(WebAsyncManagerIntegrationFilter is the first filter in filterChain).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579636907", "createdAt": "2021-02-20T10:26:35Z", "author": {"login": "han-gao"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java", "diffHunk": "@@ -51,7 +50,8 @@ protected void configure(HttpSecurity http) throws Exception {\n                 .and()\n             .logout()\n                 .logoutSuccessHandler(oidcLogoutSuccessHandler())\n-                .and();\n+                .and()\n+            .addFilterBefore(handleConditionalAccessFilter(), WebAsyncManagerIntegrationFilter.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzODE4NA=="}, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDAwMDk0NA==", "bodyText": "If there is no WebAsyncManagerIntegrationFilter in the context, will it throw exception? Can we make sure that WebAsyncManagerIntegrationFilter always exist?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r580000944", "createdAt": "2021-02-22T05:59:27Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java", "diffHunk": "@@ -51,7 +50,8 @@ protected void configure(HttpSecurity http) throws Exception {\n                 .and()\n             .logout()\n                 .logoutSuccessHandler(oidcLogoutSuccessHandler())\n-                .and();\n+                .and()\n+            .addFilterBefore(handleConditionalAccessFilter(), WebAsyncManagerIntegrationFilter.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzODE4NA=="}, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDAwMzExNw==", "bodyText": "Please add integration test for conditional access. It's OK to do it after this PR merged.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r580003117", "createdAt": "2021-02-22T06:07:23Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java", "diffHunk": "@@ -51,7 +50,8 @@ protected void configure(HttpSecurity http) throws Exception {\n                 .and()\n             .logout()\n                 .logoutSuccessHandler(oidcLogoutSuccessHandler())\n-                .and();\n+                .and()\n+            .addFilterBefore(handleConditionalAccessFilter(), WebAsyncManagerIntegrationFilter.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzODE4NA=="}, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1ODQ3MDEyOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQwNTo1MTo1N1rOIpIUUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQwNTo1MTo1N1rOIpIUUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTk5ODgwMQ==", "bodyText": "It should be in line 276 instead of line 277.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579998801", "createdAt": "2021-02-22T05:51:57Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/pom.xml", "diffHunk": "@@ -270,6 +270,12 @@\n       <artifactId>spring-core</artifactId>\n       <version>5.2.10.RELEASE</version> <!-- {x-version-update;org.springframework:spring-core;external_dependency} -->\n     </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-webflux</artifactId>\n+      <version>5.2.10.RELEASE</version>\n+      <optional>true</optional> <!-- {x-version-update;org.springframework:spring-webflux;external_dependency} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2259e8ab6ea02a05e7d8129c310fed65830a307"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1ODQ5MDE0OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQwNjowMjowN1rOIpIfpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQwNzo0MDoxNlrOIpKnLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDAwMTcwMg==", "bodyText": "Can we get response by RequestContextHolder in this method instead of pass it in?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r580001702", "createdAt": "2021-02-22T06:02:07Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -130,4 +161,15 @@ private String interceptAuthorizationUri(String authorizationUri) {\n         }\n         return null;\n     }\n+\n+    void replyForbiddenWithWwwAuthenticateHeader(HttpServletResponse response,\n+                                                 MsalInteractionRequiredException exception) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2259e8ab6ea02a05e7d8129c310fed65830a307"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDAzNjM5OQ==", "bodyText": "Maybe ExceptionTranslationFilter is better than WebAsyncManagerIntegrationFilter, ExceptionTranslationFilter handles AccessDeniedException and AuthenticationException. So ExceptionTranslationFilter always exists. It handles exceptions like our filter, so it\u2019s better to add ExceptionTranslationFilter.\nAbout replyForbiddenWithWwwAuthenticateHeader. Your idea is better, I have changed the code.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r580036399", "createdAt": "2021-02-22T07:40:16Z", "author": {"login": "han-gao"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -130,4 +161,15 @@ private String interceptAuthorizationUri(String authorizationUri) {\n         }\n         return null;\n     }\n+\n+    void replyForbiddenWithWwwAuthenticateHeader(HttpServletResponse response,\n+                                                 MsalInteractionRequiredException exception) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDAwMTcwMg=="}, "originalCommit": {"oid": "d2259e8ab6ea02a05e7d8129c310fed65830a307"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1ODQ5MjA5OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQwNjowMzoyM1rOIpIg7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQwNzo0MDozMlrOIpKnrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDAwMjAyOA==", "bodyText": "Does the toString() method get the same format compare co the C# code?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r580002028", "createdAt": "2021-02-22T06:03:23Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -130,4 +161,15 @@ private String interceptAuthorizationUri(String authorizationUri) {\n         }\n         return null;\n     }\n+\n+    void replyForbiddenWithWwwAuthenticateHeader(HttpServletResponse response,\n+                                                 MsalInteractionRequiredException exception) {\n+        Map<String, Object> parameters = new LinkedHashMap<>();\n+        response.setStatus(HttpStatus.FORBIDDEN.value());\n+        parameters.put(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS, exception.claims());\n+        parameters.put(OAuth2ParameterNames.ERROR, OAuth2ErrorCodes.INVALID_TOKEN);\n+        parameters.put(OAuth2ParameterNames.ERROR_DESCRIPTION, \"The resource server requires higher privileges than \"\n+            + \"provided by the access token\");\n+        response.addHeader(HttpHeaders.WWW_AUTHENTICATE, Constants.BEARER_PREFIX + parameters.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2259e8ab6ea02a05e7d8129c310fed65830a307"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDAzNjUyNQ==", "bodyText": "The structure of map.toString() is the same as  C#.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r580036525", "createdAt": "2021-02-22T07:40:32Z", "author": {"login": "han-gao"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -130,4 +161,15 @@ private String interceptAuthorizationUri(String authorizationUri) {\n         }\n         return null;\n     }\n+\n+    void replyForbiddenWithWwwAuthenticateHeader(HttpServletResponse response,\n+                                                 MsalInteractionRequiredException exception) {\n+        Map<String, Object> parameters = new LinkedHashMap<>();\n+        response.setStatus(HttpStatus.FORBIDDEN.value());\n+        parameters.put(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS, exception.claims());\n+        parameters.put(OAuth2ParameterNames.ERROR, OAuth2ErrorCodes.INVALID_TOKEN);\n+        parameters.put(OAuth2ParameterNames.ERROR_DESCRIPTION, \"The resource server requires higher privileges than \"\n+            + \"provided by the access token\");\n+        response.addHeader(HttpHeaders.WWW_AUTHENTICATE, Constants.BEARER_PREFIX + parameters.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDAwMjAyOA=="}, "originalCommit": {"oid": "d2259e8ab6ea02a05e7d8129c310fed65830a307"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1ODUwNDQ5OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQwNjowODo1NVrOIpIniw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQwNjowODo1NVrOIpIniw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDAwMzcyMw==", "bodyText": "Can we delete this method? Just use new AADHandleConditionalAccessFilter() instead.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r580003723", "createdAt": "2021-02-22T06:08:55Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java", "diffHunk": "@@ -81,7 +77,7 @@ protected OAuth2AuthorizationRequestResolver requestResolver() {\n         return new AADOAuth2AuthorizationRequestResolver(this.repo);\n     }\n \n-    protected AuthenticationFailureHandler failureHandler() {\n-        return new AADAuthenticationFailureHandler();\n+    protected AADHandleConditionalAccessFilter handleConditionalAccessFilter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2259e8ab6ea02a05e7d8129c310fed65830a307"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY2Mjk1Mzc0OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwMDoyNzoxNlrOIpydaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwNjowMTo1MFrOIp4ZVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDY4OTI1Nw==", "bodyText": "By doing this, do you mean ExceptionTranslationFilter will always exist in context?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r580689257", "createdAt": "2021-02-23T00:27:16Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java", "diffHunk": "@@ -51,7 +50,8 @@ protected void configure(HttpSecurity http) throws Exception {\n                 .and()\n             .logout()\n                 .logoutSuccessHandler(oidcLogoutSuccessHandler())\n-                .and();\n+                .and()\n+            .addFilterBefore(new AADHandleConditionalAccessFilter(), ExceptionTranslationFilter.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb52b57e5122c350ce60df1f0618091a052d87a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDc4NjUxNg==", "bodyText": "Yes, this filter handles most authorization failures and always loaded into the filterchain.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r580786516", "createdAt": "2021-02-23T06:01:50Z", "author": {"login": "han-gao"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java", "diffHunk": "@@ -51,7 +50,8 @@ protected void configure(HttpSecurity http) throws Exception {\n                 .and()\n             .logout()\n                 .logoutSuccessHandler(oidcLogoutSuccessHandler())\n-                .and();\n+                .and()\n+            .addFilterBefore(new AADHandleConditionalAccessFilter(), ExceptionTranslationFilter.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDY4OTI1Nw=="}, "originalCommit": {"oid": "bfb52b57e5122c350ce60df1f0618091a052d87a"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2523, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}