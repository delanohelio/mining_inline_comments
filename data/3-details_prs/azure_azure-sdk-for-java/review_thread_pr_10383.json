{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MzM5MzY0", "number": 10383, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzowNDoxM1rODz9fpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODoyOTo1NFrOD0X_8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODExNDkyOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/LargeBlobTest.groovy", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzowNDoxM1rOGIrMZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzoxMTozMFrOGI2JVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0OTQ3OQ==", "bodyText": "Is this TODO meant to be part of this PR?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10383#discussion_r411749479", "createdAt": "2020-04-20T23:04:13Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/LargeBlobTest.groovy", "diffHunk": "@@ -70,6 +77,84 @@ class LargeBlobTest extends APISpec {\n         blockList.committedBlocks.get(0).getSizeLong() == maxBlockSize\n     }\n \n+    @Requires({ liveMode() })\n+    @Ignore(\"Takes really long time\")\n+    // This test sends payload over the wire\n+    def \"Upload Real Large Blob in Single Upload\"() {\n+        given:\n+        // TODO (kasobol-msft) Bump this to 5000MB.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ded73b52c0c044bbe0500fe587b84b68c4d06a25"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0OTk1NQ==", "bodyText": "And do we need to modify the tests for datalake too? Could we add a test that somehow makes sure the default max size is adhered to?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10383#discussion_r411749955", "createdAt": "2020-04-20T23:05:25Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/LargeBlobTest.groovy", "diffHunk": "@@ -70,6 +77,84 @@ class LargeBlobTest extends APISpec {\n         blockList.committedBlocks.get(0).getSizeLong() == maxBlockSize\n     }\n \n+    @Requires({ liveMode() })\n+    @Ignore(\"Takes really long time\")\n+    // This test sends payload over the wire\n+    def \"Upload Real Large Blob in Single Upload\"() {\n+        given:\n+        // TODO (kasobol-msft) Bump this to 5000MB.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0OTQ3OQ=="}, "originalCommit": {"oid": "ded73b52c0c044bbe0500fe587b84b68c4d06a25"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1MDQ2OQ==", "bodyText": "It seems to be test account/server side issue. I'm following up on that, but I'd rather not block on this now.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10383#discussion_r411750469", "createdAt": "2020-04-20T23:06:45Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/LargeBlobTest.groovy", "diffHunk": "@@ -70,6 +77,84 @@ class LargeBlobTest extends APISpec {\n         blockList.committedBlocks.get(0).getSizeLong() == maxBlockSize\n     }\n \n+    @Requires({ liveMode() })\n+    @Ignore(\"Takes really long time\")\n+    // This test sends payload over the wire\n+    def \"Upload Real Large Blob in Single Upload\"() {\n+        given:\n+        // TODO (kasobol-msft) Bump this to 5000MB.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0OTQ3OQ=="}, "originalCommit": {"oid": "ded73b52c0c044bbe0500fe587b84b68c4d06a25"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1Mjg0OA==", "bodyText": "I'll take a look on datalake tests.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10383#discussion_r411752848", "createdAt": "2020-04-20T23:12:56Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/LargeBlobTest.groovy", "diffHunk": "@@ -70,6 +77,84 @@ class LargeBlobTest extends APISpec {\n         blockList.committedBlocks.get(0).getSizeLong() == maxBlockSize\n     }\n \n+    @Requires({ liveMode() })\n+    @Ignore(\"Takes really long time\")\n+    // This test sends payload over the wire\n+    def \"Upload Real Large Blob in Single Upload\"() {\n+        given:\n+        // TODO (kasobol-msft) Bump this to 5000MB.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0OTQ3OQ=="}, "originalCommit": {"oid": "ded73b52c0c044bbe0500fe587b84b68c4d06a25"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyODkxOQ==", "bodyText": "@gapra-msft  I added test to LargeFileTest.groovy where default single upload for data lake is triggerd.\nBTW. thank you for this suggestion. This prompted me to run full blown live tests on datalake file client and caught one nasty bug. I added fix for that in DataLakeFileAsyncClient. The confusing remaining method from BufferAggregator is also hidden and renamed to avoid this in the future.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10383#discussion_r411928919", "createdAt": "2020-04-21T07:11:30Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/LargeBlobTest.groovy", "diffHunk": "@@ -70,6 +77,84 @@ class LargeBlobTest extends APISpec {\n         blockList.committedBlocks.get(0).getSizeLong() == maxBlockSize\n     }\n \n+    @Requires({ liveMode() })\n+    @Ignore(\"Takes really long time\")\n+    // This test sends payload over the wire\n+    def \"Upload Real Large Blob in Single Upload\"() {\n+        given:\n+        // TODO (kasobol-msft) Bump this to 5000MB.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0OTQ3OQ=="}, "originalCommit": {"oid": "ded73b52c0c044bbe0500fe587b84b68c4d06a25"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTQwODkxOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakeFileAsyncClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzoxMjo1OFrOGI2M3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODowNzoxOFrOGJRlZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyOTgyMw==", "bodyText": "Should have used .lenght() everywhere in this  method after transition from ByteBuffer to BufferAggregator.\nConfusing method has been hidden and renamed...", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10383#discussion_r411929823", "createdAt": "2020-04-21T07:12:58Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakeFileAsyncClient.java", "diffHunk": "@@ -307,7 +307,7 @@ public String getFileName() {\n         return chunkedSource.concatMap(pool::write)\n             .concatWith(Flux.defer(pool::flush))\n             /* Map the data to a tuple 3, of buffer, buffer length, buffer offset */\n-            .map(buffer -> Tuples.of(buffer, buffer.remaining(), 0L))\n+            .map(bufferAggregator -> Tuples.of(bufferAggregator, bufferAggregator.length(), 0L))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf3b2ee230f6876929ab843905b148b3934b777b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM3ODQ2OA==", "bodyText": "Sweet great to hear we found something!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10383#discussion_r412378468", "createdAt": "2020-04-21T18:07:18Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakeFileAsyncClient.java", "diffHunk": "@@ -307,7 +307,7 @@ public String getFileName() {\n         return chunkedSource.concatMap(pool::write)\n             .concatWith(Flux.defer(pool::flush))\n             /* Map the data to a tuple 3, of buffer, buffer length, buffer offset */\n-            .map(buffer -> Tuples.of(buffer, buffer.remaining(), 0L))\n+            .map(bufferAggregator -> Tuples.of(bufferAggregator, bufferAggregator.length(), 0L))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyOTgyMw=="}, "originalCommit": {"oid": "cf3b2ee230f6876929ab843905b148b3934b777b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjM3NTYzOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/LargeBlobTest.groovy", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODoxMTo0OVrOGJRxOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDoxMjoyOFrOGJWhHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM4MTQ5Nw==", "bodyText": "Should these be test class level properties or be migrated into the pipeline policy being used to test this functionality? I don't know when in the test loop, if ever, these would be reset to the default value again.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10383#discussion_r412381497", "createdAt": "2020-04-21T18:11:49Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/LargeBlobTest.groovy", "diffHunk": "@@ -28,8 +32,11 @@ class LargeBlobTest extends APISpec {\n     BlobClient blobClient\n     BlobAsyncClient blobAsyncClient\n     String blobName\n-    List<Mono<Long>> putBlockPayloadSizes = Collections.synchronizedList(new ArrayList<>())\n-    AtomicLong count = new AtomicLong()\n+    List<Long> putBlockPayloadSizes = Collections.synchronizedList(new ArrayList<>())\n+    AtomicLong blocksCount = new AtomicLong()\n+    List<Long> putBlobPayloadSizes = Collections.synchronizedList(new ArrayList<>())\n+    AtomicLong singleUploadCount = new AtomicLong()\n+    ConcurrentHashMap<String, Boolean> retryTracker = new ConcurrentHashMap<>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "165658247ecc4023ffca708a676deb8ac181d1b1"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwMDA5OQ==", "bodyText": "Every test framework I worked with JUnit, TestNG (Java) or NUnit, XUnit, MSTest (.Net) instantiates new instance of test class for each test case. Therefore these are reset for each test.\nI could potentially put them into policy but then I'd need to keep reference to policy in test class.\nI'd rather keep them in test class (they represent test case state) rather than in policy (that is used to update test case state).\nReference: https://stackoverflow.com/questions/19381352/does-junit-reinitialize-the-class-with-each-test-method-invocation", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10383#discussion_r412400099", "createdAt": "2020-04-21T18:39:34Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/LargeBlobTest.groovy", "diffHunk": "@@ -28,8 +32,11 @@ class LargeBlobTest extends APISpec {\n     BlobClient blobClient\n     BlobAsyncClient blobAsyncClient\n     String blobName\n-    List<Mono<Long>> putBlockPayloadSizes = Collections.synchronizedList(new ArrayList<>())\n-    AtomicLong count = new AtomicLong()\n+    List<Long> putBlockPayloadSizes = Collections.synchronizedList(new ArrayList<>())\n+    AtomicLong blocksCount = new AtomicLong()\n+    List<Long> putBlobPayloadSizes = Collections.synchronizedList(new ArrayList<>())\n+    AtomicLong singleUploadCount = new AtomicLong()\n+    ConcurrentHashMap<String, Boolean> retryTracker = new ConcurrentHashMap<>()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM4MTQ5Nw=="}, "originalCommit": {"oid": "165658247ecc4023ffca708a676deb8ac181d1b1"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1OTI5NQ==", "bodyText": "Good with me, was verifying that no bad state would be reached with these in the class scope.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10383#discussion_r412459295", "createdAt": "2020-04-21T20:12:28Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/LargeBlobTest.groovy", "diffHunk": "@@ -28,8 +32,11 @@ class LargeBlobTest extends APISpec {\n     BlobClient blobClient\n     BlobAsyncClient blobAsyncClient\n     String blobName\n-    List<Mono<Long>> putBlockPayloadSizes = Collections.synchronizedList(new ArrayList<>())\n-    AtomicLong count = new AtomicLong()\n+    List<Long> putBlockPayloadSizes = Collections.synchronizedList(new ArrayList<>())\n+    AtomicLong blocksCount = new AtomicLong()\n+    List<Long> putBlobPayloadSizes = Collections.synchronizedList(new ArrayList<>())\n+    AtomicLong singleUploadCount = new AtomicLong()\n+    ConcurrentHashMap<String, Boolean> retryTracker = new ConcurrentHashMap<>()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM4MTQ5Nw=="}, "originalCommit": {"oid": "165658247ecc4023ffca708a676deb8ac181d1b1"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjQxNjMxOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-datalake/src/test/java/com/azure/storage/file/datalake/LargeFileTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODoyMDo0NFrOGJSJJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxOTowMDo0OFrOGJTw6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM4NzYyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    int reminder = (int) (size - numberOfSubBuffers * bufferSize)\n          \n          \n            \n                    int remainder = (int) (size - numberOfSubBuffers * bufferSize)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10383#discussion_r412387622", "createdAt": "2020-04-21T18:20:44Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-file-datalake/src/test/java/com/azure/storage/file/datalake/LargeFileTest.groovy", "diffHunk": "@@ -148,16 +152,44 @@ class LargeFileTest extends APISpec{\n         notThrown(DataLakeStorageException)\n     }\n \n+    @Unroll\n+    @Requires({ liveMode() })\n+    // This test does not send large payload over the wire\n+    def \"Should honor default single upload threshold\"() {\n+        given:\n+        def data = createLargeBuffer(dataSize)\n+        def transferOptions = new ParallelTransferOptions()\n+            .setBlockSizeLong(10L * Constants.MB) // set this much lower than default single upload size to make it tempting.\n+\n+        when:\n+        fcAsyncPayloadDropping.upload(data, transferOptions, true).block()\n+\n+        then:\n+        notThrown(DataLakeStorageException)\n+        count.get() == expectedAppendRequests\n+\n+        where:\n+        dataSize                         | expectedAppendRequests\n+        defaultSingleUploadThreshold     | 1\n+        defaultSingleUploadThreshold + 1 | 11\n+    }\n+\n     private Flux<ByteBuffer> createLargeBuffer(long size) {\n         return createLargeBuffer(size, Constants.MB)\n     }\n \n     private Flux<ByteBuffer> createLargeBuffer(long size, int bufferSize) {\n         def bytes = getRandomByteArray(bufferSize)\n         long numberOfSubBuffers = (long) (size / bufferSize)\n-        return Flux.just(ByteBuffer.wrap(bytes))\n+        int reminder = (int) (size - numberOfSubBuffers * bufferSize)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "165658247ecc4023ffca708a676deb8ac181d1b1"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxNDE4Nw==", "bodyText": "Ups.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10383#discussion_r412414187", "createdAt": "2020-04-21T19:00:48Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/test/java/com/azure/storage/file/datalake/LargeFileTest.groovy", "diffHunk": "@@ -148,16 +152,44 @@ class LargeFileTest extends APISpec{\n         notThrown(DataLakeStorageException)\n     }\n \n+    @Unroll\n+    @Requires({ liveMode() })\n+    // This test does not send large payload over the wire\n+    def \"Should honor default single upload threshold\"() {\n+        given:\n+        def data = createLargeBuffer(dataSize)\n+        def transferOptions = new ParallelTransferOptions()\n+            .setBlockSizeLong(10L * Constants.MB) // set this much lower than default single upload size to make it tempting.\n+\n+        when:\n+        fcAsyncPayloadDropping.upload(data, transferOptions, true).block()\n+\n+        then:\n+        notThrown(DataLakeStorageException)\n+        count.get() == expectedAppendRequests\n+\n+        where:\n+        dataSize                         | expectedAppendRequests\n+        defaultSingleUploadThreshold     | 1\n+        defaultSingleUploadThreshold + 1 | 11\n+    }\n+\n     private Flux<ByteBuffer> createLargeBuffer(long size) {\n         return createLargeBuffer(size, Constants.MB)\n     }\n \n     private Flux<ByteBuffer> createLargeBuffer(long size, int bufferSize) {\n         def bytes = getRandomByteArray(bufferSize)\n         long numberOfSubBuffers = (long) (size / bufferSize)\n-        return Flux.just(ByteBuffer.wrap(bytes))\n+        int reminder = (int) (size - numberOfSubBuffers * bufferSize)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM4NzYyMg=="}, "originalCommit": {"oid": "165658247ecc4023ffca708a676deb8ac181d1b1"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjQ0NTQxOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/LargeBlobTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODoyNzoxMFrOGJSaPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxOTowMDo1NFrOGJTxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM5MTk5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    int reminder = (int) (size - numberOfSubBuffers * bufferSize)\n          \n          \n            \n                    int remainder = (int) (size - numberOfSubBuffers * bufferSize)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10383#discussion_r412391999", "createdAt": "2020-04-21T18:27:10Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/LargeBlobTest.groovy", "diffHunk": "@@ -204,9 +286,15 @@ class LargeBlobTest extends APISpec {\n     private Flux<ByteBuffer> createLargeBuffer(long size, int bufferSize) {\n         def bytes = getRandomByteArray(bufferSize)\n         long numberOfSubBuffers = (long) (size / bufferSize)\n-        return Flux.just(ByteBuffer.wrap(bytes))\n+        int reminder = (int) (size - numberOfSubBuffers * bufferSize)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "165658247ecc4023ffca708a676deb8ac181d1b1"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxNDI1Ng==", "bodyText": "Ups.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10383#discussion_r412414256", "createdAt": "2020-04-21T19:00:54Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/LargeBlobTest.groovy", "diffHunk": "@@ -204,9 +286,15 @@ class LargeBlobTest extends APISpec {\n     private Flux<ByteBuffer> createLargeBuffer(long size, int bufferSize) {\n         def bytes = getRandomByteArray(bufferSize)\n         long numberOfSubBuffers = (long) (size / bufferSize)\n-        return Flux.just(ByteBuffer.wrap(bytes))\n+        int reminder = (int) (size - numberOfSubBuffers * bufferSize)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM5MTk5OQ=="}, "originalCommit": {"oid": "165658247ecc4023ffca708a676deb8ac181d1b1"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjQ1MzEyOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/LargeBlobTest.groovy", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODoyODo1NlrOGJSe6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDoxMjo1MFrOGJWh3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM5MzE5NA==", "bodyText": "Would it be better to check for certain parts of the query string being null in case this gets used by a client authorizing with a SAS token.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10383#discussion_r412393194", "createdAt": "2020-04-21T18:28:56Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/LargeBlobTest.groovy", "diffHunk": "@@ -232,20 +320,57 @@ class LargeBlobTest extends APISpec {\n         Mono<HttpResponse> process(HttpPipelineCallContext httpPipelineCallContext, HttpPipelineNextPolicy httpPipelineNextPolicy) {\n             def request = httpPipelineCallContext.httpRequest\n             // Substitute large body for put block requests and collect size of original body\n-            if (request.url.getQuery() != null && request.url.getQuery().endsWith(\"comp=block\")) {\n-                if (collectSize) {\n-                    def bytesReceived = request.getBody().reduce(0L, new BiFunction<Long, ByteBuffer, Long>() {\n-                        @Override\n-                        Long apply(Long a, ByteBuffer byteBuffer) {\n-                            return a + byteBuffer.remaining()\n-                        }\n-                    })\n-                    putBlockPayloadSizes.add(bytesReceived)\n+            def urlString = request.getUrl().toString()\n+            if (isPutBlockRequest(request)) {\n+                if (!retryTracker.get(urlString, false)) {\n+                    blocksCount.incrementAndGet()\n+                    retryTracker.put(urlString, true)\n+                }\n+                Mono<Long> count = interceptBody(request)\n+                if (count != null) {\n+                    return count.flatMap { bytes ->\n+                        putBlockPayloadSizes.add(bytes)\n+                        return httpPipelineNextPolicy.process()\n+                    }\n+                }\n+            } else if (isSinglePutBlobRequest(request)) {\n+                if (!retryTracker.get(urlString, false)) {\n+                    singleUploadCount.incrementAndGet()\n+                    retryTracker.put(urlString, true)\n+                }\n+                Mono<Long> count = interceptBody(request)\n+                if (count != null) {\n+                    return count.flatMap { bytes ->\n+                        putBlobPayloadSizes.add(bytes)\n+                        return httpPipelineNextPolicy.process()\n+                    }\n                 }\n-                count.incrementAndGet()\n-                request.setBody(\"dummyBody\")\n             }\n             return httpPipelineNextPolicy.process()\n         }\n+\n+        private Mono<Long> interceptBody(HttpRequest request) {\n+            Mono<Long> result = null\n+            if (collectSize) {\n+                result = request.getBody().reduce(0L, new BiFunction<Long, ByteBuffer, Long>() {\n+                    @Override\n+                    Long apply(Long a, ByteBuffer byteBuffer) {\n+                        return a + byteBuffer.remaining()\n+                    }\n+                })\n+            }\n+            request.setBody(\"dummyBody\")\n+            return result\n+        }\n+\n+        private boolean isPutBlockRequest(HttpRequest request) {\n+            return request.url.getQuery() != null && request.url.getQuery().endsWith(\"comp=block\");\n+        }\n+\n+        private boolean isSinglePutBlobRequest(HttpRequest request) {\n+            return request.getHttpMethod().equals(HttpMethod.PUT) &&\n+                request.getUrl().toString().endsWith(blobName) &&\n+                request.getUrl().getQuery() == null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "165658247ecc4023ffca708a676deb8ac181d1b1"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxNzI3NA==", "bodyText": "I agree. However, I don't expect adding SAS tokens scenarios here (orthogonal feature). This Policy is not intended to be used outside of large payload testing. Therefore, I'd rather keep it simple until we need more functionality here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10383#discussion_r412417274", "createdAt": "2020-04-21T19:05:30Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/LargeBlobTest.groovy", "diffHunk": "@@ -232,20 +320,57 @@ class LargeBlobTest extends APISpec {\n         Mono<HttpResponse> process(HttpPipelineCallContext httpPipelineCallContext, HttpPipelineNextPolicy httpPipelineNextPolicy) {\n             def request = httpPipelineCallContext.httpRequest\n             // Substitute large body for put block requests and collect size of original body\n-            if (request.url.getQuery() != null && request.url.getQuery().endsWith(\"comp=block\")) {\n-                if (collectSize) {\n-                    def bytesReceived = request.getBody().reduce(0L, new BiFunction<Long, ByteBuffer, Long>() {\n-                        @Override\n-                        Long apply(Long a, ByteBuffer byteBuffer) {\n-                            return a + byteBuffer.remaining()\n-                        }\n-                    })\n-                    putBlockPayloadSizes.add(bytesReceived)\n+            def urlString = request.getUrl().toString()\n+            if (isPutBlockRequest(request)) {\n+                if (!retryTracker.get(urlString, false)) {\n+                    blocksCount.incrementAndGet()\n+                    retryTracker.put(urlString, true)\n+                }\n+                Mono<Long> count = interceptBody(request)\n+                if (count != null) {\n+                    return count.flatMap { bytes ->\n+                        putBlockPayloadSizes.add(bytes)\n+                        return httpPipelineNextPolicy.process()\n+                    }\n+                }\n+            } else if (isSinglePutBlobRequest(request)) {\n+                if (!retryTracker.get(urlString, false)) {\n+                    singleUploadCount.incrementAndGet()\n+                    retryTracker.put(urlString, true)\n+                }\n+                Mono<Long> count = interceptBody(request)\n+                if (count != null) {\n+                    return count.flatMap { bytes ->\n+                        putBlobPayloadSizes.add(bytes)\n+                        return httpPipelineNextPolicy.process()\n+                    }\n                 }\n-                count.incrementAndGet()\n-                request.setBody(\"dummyBody\")\n             }\n             return httpPipelineNextPolicy.process()\n         }\n+\n+        private Mono<Long> interceptBody(HttpRequest request) {\n+            Mono<Long> result = null\n+            if (collectSize) {\n+                result = request.getBody().reduce(0L, new BiFunction<Long, ByteBuffer, Long>() {\n+                    @Override\n+                    Long apply(Long a, ByteBuffer byteBuffer) {\n+                        return a + byteBuffer.remaining()\n+                    }\n+                })\n+            }\n+            request.setBody(\"dummyBody\")\n+            return result\n+        }\n+\n+        private boolean isPutBlockRequest(HttpRequest request) {\n+            return request.url.getQuery() != null && request.url.getQuery().endsWith(\"comp=block\");\n+        }\n+\n+        private boolean isSinglePutBlobRequest(HttpRequest request) {\n+            return request.getHttpMethod().equals(HttpMethod.PUT) &&\n+                request.getUrl().toString().endsWith(blobName) &&\n+                request.getUrl().getQuery() == null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM5MzE5NA=="}, "originalCommit": {"oid": "165658247ecc4023ffca708a676deb8ac181d1b1"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1OTQ4Nw==", "bodyText": "Sounds good", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10383#discussion_r412459487", "createdAt": "2020-04-21T20:12:50Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/LargeBlobTest.groovy", "diffHunk": "@@ -232,20 +320,57 @@ class LargeBlobTest extends APISpec {\n         Mono<HttpResponse> process(HttpPipelineCallContext httpPipelineCallContext, HttpPipelineNextPolicy httpPipelineNextPolicy) {\n             def request = httpPipelineCallContext.httpRequest\n             // Substitute large body for put block requests and collect size of original body\n-            if (request.url.getQuery() != null && request.url.getQuery().endsWith(\"comp=block\")) {\n-                if (collectSize) {\n-                    def bytesReceived = request.getBody().reduce(0L, new BiFunction<Long, ByteBuffer, Long>() {\n-                        @Override\n-                        Long apply(Long a, ByteBuffer byteBuffer) {\n-                            return a + byteBuffer.remaining()\n-                        }\n-                    })\n-                    putBlockPayloadSizes.add(bytesReceived)\n+            def urlString = request.getUrl().toString()\n+            if (isPutBlockRequest(request)) {\n+                if (!retryTracker.get(urlString, false)) {\n+                    blocksCount.incrementAndGet()\n+                    retryTracker.put(urlString, true)\n+                }\n+                Mono<Long> count = interceptBody(request)\n+                if (count != null) {\n+                    return count.flatMap { bytes ->\n+                        putBlockPayloadSizes.add(bytes)\n+                        return httpPipelineNextPolicy.process()\n+                    }\n+                }\n+            } else if (isSinglePutBlobRequest(request)) {\n+                if (!retryTracker.get(urlString, false)) {\n+                    singleUploadCount.incrementAndGet()\n+                    retryTracker.put(urlString, true)\n+                }\n+                Mono<Long> count = interceptBody(request)\n+                if (count != null) {\n+                    return count.flatMap { bytes ->\n+                        putBlobPayloadSizes.add(bytes)\n+                        return httpPipelineNextPolicy.process()\n+                    }\n                 }\n-                count.incrementAndGet()\n-                request.setBody(\"dummyBody\")\n             }\n             return httpPipelineNextPolicy.process()\n         }\n+\n+        private Mono<Long> interceptBody(HttpRequest request) {\n+            Mono<Long> result = null\n+            if (collectSize) {\n+                result = request.getBody().reduce(0L, new BiFunction<Long, ByteBuffer, Long>() {\n+                    @Override\n+                    Long apply(Long a, ByteBuffer byteBuffer) {\n+                        return a + byteBuffer.remaining()\n+                    }\n+                })\n+            }\n+            request.setBody(\"dummyBody\")\n+            return result\n+        }\n+\n+        private boolean isPutBlockRequest(HttpRequest request) {\n+            return request.url.getQuery() != null && request.url.getQuery().endsWith(\"comp=block\");\n+        }\n+\n+        private boolean isSinglePutBlobRequest(HttpRequest request) {\n+            return request.getHttpMethod().equals(HttpMethod.PUT) &&\n+                request.getUrl().toString().endsWith(blobName) &&\n+                request.getUrl().getQuery() == null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM5MzE5NA=="}, "originalCommit": {"oid": "165658247ecc4023ffca708a676deb8ac181d1b1"}, "originalPosition": 264}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjQ1NTA0OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/LargeBlobTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODoyOToyM1rOGJSgHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxOTowNTo1M1rOGJT92Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM5MzUwMA==", "bodyText": "I think this should check that the path ends with the blob name.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10383#discussion_r412393500", "createdAt": "2020-04-21T18:29:23Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/LargeBlobTest.groovy", "diffHunk": "@@ -232,20 +320,57 @@ class LargeBlobTest extends APISpec {\n         Mono<HttpResponse> process(HttpPipelineCallContext httpPipelineCallContext, HttpPipelineNextPolicy httpPipelineNextPolicy) {\n             def request = httpPipelineCallContext.httpRequest\n             // Substitute large body for put block requests and collect size of original body\n-            if (request.url.getQuery() != null && request.url.getQuery().endsWith(\"comp=block\")) {\n-                if (collectSize) {\n-                    def bytesReceived = request.getBody().reduce(0L, new BiFunction<Long, ByteBuffer, Long>() {\n-                        @Override\n-                        Long apply(Long a, ByteBuffer byteBuffer) {\n-                            return a + byteBuffer.remaining()\n-                        }\n-                    })\n-                    putBlockPayloadSizes.add(bytesReceived)\n+            def urlString = request.getUrl().toString()\n+            if (isPutBlockRequest(request)) {\n+                if (!retryTracker.get(urlString, false)) {\n+                    blocksCount.incrementAndGet()\n+                    retryTracker.put(urlString, true)\n+                }\n+                Mono<Long> count = interceptBody(request)\n+                if (count != null) {\n+                    return count.flatMap { bytes ->\n+                        putBlockPayloadSizes.add(bytes)\n+                        return httpPipelineNextPolicy.process()\n+                    }\n+                }\n+            } else if (isSinglePutBlobRequest(request)) {\n+                if (!retryTracker.get(urlString, false)) {\n+                    singleUploadCount.incrementAndGet()\n+                    retryTracker.put(urlString, true)\n+                }\n+                Mono<Long> count = interceptBody(request)\n+                if (count != null) {\n+                    return count.flatMap { bytes ->\n+                        putBlobPayloadSizes.add(bytes)\n+                        return httpPipelineNextPolicy.process()\n+                    }\n                 }\n-                count.incrementAndGet()\n-                request.setBody(\"dummyBody\")\n             }\n             return httpPipelineNextPolicy.process()\n         }\n+\n+        private Mono<Long> interceptBody(HttpRequest request) {\n+            Mono<Long> result = null\n+            if (collectSize) {\n+                result = request.getBody().reduce(0L, new BiFunction<Long, ByteBuffer, Long>() {\n+                    @Override\n+                    Long apply(Long a, ByteBuffer byteBuffer) {\n+                        return a + byteBuffer.remaining()\n+                    }\n+                })\n+            }\n+            request.setBody(\"dummyBody\")\n+            return result\n+        }\n+\n+        private boolean isPutBlockRequest(HttpRequest request) {\n+            return request.url.getQuery() != null && request.url.getQuery().endsWith(\"comp=block\");\n+        }\n+\n+        private boolean isSinglePutBlobRequest(HttpRequest request) {\n+            return request.getHttpMethod().equals(HttpMethod.PUT) &&\n+                request.getUrl().toString().endsWith(blobName) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "165658247ecc4023ffca708a676deb8ac181d1b1"}, "originalPosition": 263}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxNzQ5Nw==", "bodyText": "Make sense. Thank you!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10383#discussion_r412417497", "createdAt": "2020-04-21T19:05:53Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/LargeBlobTest.groovy", "diffHunk": "@@ -232,20 +320,57 @@ class LargeBlobTest extends APISpec {\n         Mono<HttpResponse> process(HttpPipelineCallContext httpPipelineCallContext, HttpPipelineNextPolicy httpPipelineNextPolicy) {\n             def request = httpPipelineCallContext.httpRequest\n             // Substitute large body for put block requests and collect size of original body\n-            if (request.url.getQuery() != null && request.url.getQuery().endsWith(\"comp=block\")) {\n-                if (collectSize) {\n-                    def bytesReceived = request.getBody().reduce(0L, new BiFunction<Long, ByteBuffer, Long>() {\n-                        @Override\n-                        Long apply(Long a, ByteBuffer byteBuffer) {\n-                            return a + byteBuffer.remaining()\n-                        }\n-                    })\n-                    putBlockPayloadSizes.add(bytesReceived)\n+            def urlString = request.getUrl().toString()\n+            if (isPutBlockRequest(request)) {\n+                if (!retryTracker.get(urlString, false)) {\n+                    blocksCount.incrementAndGet()\n+                    retryTracker.put(urlString, true)\n+                }\n+                Mono<Long> count = interceptBody(request)\n+                if (count != null) {\n+                    return count.flatMap { bytes ->\n+                        putBlockPayloadSizes.add(bytes)\n+                        return httpPipelineNextPolicy.process()\n+                    }\n+                }\n+            } else if (isSinglePutBlobRequest(request)) {\n+                if (!retryTracker.get(urlString, false)) {\n+                    singleUploadCount.incrementAndGet()\n+                    retryTracker.put(urlString, true)\n+                }\n+                Mono<Long> count = interceptBody(request)\n+                if (count != null) {\n+                    return count.flatMap { bytes ->\n+                        putBlobPayloadSizes.add(bytes)\n+                        return httpPipelineNextPolicy.process()\n+                    }\n                 }\n-                count.incrementAndGet()\n-                request.setBody(\"dummyBody\")\n             }\n             return httpPipelineNextPolicy.process()\n         }\n+\n+        private Mono<Long> interceptBody(HttpRequest request) {\n+            Mono<Long> result = null\n+            if (collectSize) {\n+                result = request.getBody().reduce(0L, new BiFunction<Long, ByteBuffer, Long>() {\n+                    @Override\n+                    Long apply(Long a, ByteBuffer byteBuffer) {\n+                        return a + byteBuffer.remaining()\n+                    }\n+                })\n+            }\n+            request.setBody(\"dummyBody\")\n+            return result\n+        }\n+\n+        private boolean isPutBlockRequest(HttpRequest request) {\n+            return request.url.getQuery() != null && request.url.getQuery().endsWith(\"comp=block\");\n+        }\n+\n+        private boolean isSinglePutBlobRequest(HttpRequest request) {\n+            return request.getHttpMethod().equals(HttpMethod.PUT) &&\n+                request.getUrl().toString().endsWith(blobName) &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM5MzUwMA=="}, "originalCommit": {"oid": "165658247ecc4023ffca708a676deb8ac181d1b1"}, "originalPosition": 263}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjQ1NzQ0OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/LargeBlobTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODoyOTo1NFrOGJShgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxOTowNjowMlrOGJT-OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM5Mzg1OA==", "bodyText": "Should this check that the query contains comp=block.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10383#discussion_r412393858", "createdAt": "2020-04-21T18:29:54Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/LargeBlobTest.groovy", "diffHunk": "@@ -232,20 +320,57 @@ class LargeBlobTest extends APISpec {\n         Mono<HttpResponse> process(HttpPipelineCallContext httpPipelineCallContext, HttpPipelineNextPolicy httpPipelineNextPolicy) {\n             def request = httpPipelineCallContext.httpRequest\n             // Substitute large body for put block requests and collect size of original body\n-            if (request.url.getQuery() != null && request.url.getQuery().endsWith(\"comp=block\")) {\n-                if (collectSize) {\n-                    def bytesReceived = request.getBody().reduce(0L, new BiFunction<Long, ByteBuffer, Long>() {\n-                        @Override\n-                        Long apply(Long a, ByteBuffer byteBuffer) {\n-                            return a + byteBuffer.remaining()\n-                        }\n-                    })\n-                    putBlockPayloadSizes.add(bytesReceived)\n+            def urlString = request.getUrl().toString()\n+            if (isPutBlockRequest(request)) {\n+                if (!retryTracker.get(urlString, false)) {\n+                    blocksCount.incrementAndGet()\n+                    retryTracker.put(urlString, true)\n+                }\n+                Mono<Long> count = interceptBody(request)\n+                if (count != null) {\n+                    return count.flatMap { bytes ->\n+                        putBlockPayloadSizes.add(bytes)\n+                        return httpPipelineNextPolicy.process()\n+                    }\n+                }\n+            } else if (isSinglePutBlobRequest(request)) {\n+                if (!retryTracker.get(urlString, false)) {\n+                    singleUploadCount.incrementAndGet()\n+                    retryTracker.put(urlString, true)\n+                }\n+                Mono<Long> count = interceptBody(request)\n+                if (count != null) {\n+                    return count.flatMap { bytes ->\n+                        putBlobPayloadSizes.add(bytes)\n+                        return httpPipelineNextPolicy.process()\n+                    }\n                 }\n-                count.incrementAndGet()\n-                request.setBody(\"dummyBody\")\n             }\n             return httpPipelineNextPolicy.process()\n         }\n+\n+        private Mono<Long> interceptBody(HttpRequest request) {\n+            Mono<Long> result = null\n+            if (collectSize) {\n+                result = request.getBody().reduce(0L, new BiFunction<Long, ByteBuffer, Long>() {\n+                    @Override\n+                    Long apply(Long a, ByteBuffer byteBuffer) {\n+                        return a + byteBuffer.remaining()\n+                    }\n+                })\n+            }\n+            request.setBody(\"dummyBody\")\n+            return result\n+        }\n+\n+        private boolean isPutBlockRequest(HttpRequest request) {\n+            return request.url.getQuery() != null && request.url.getQuery().endsWith(\"comp=block\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "165658247ecc4023ffca708a676deb8ac181d1b1"}, "originalPosition": 258}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxNzU5Mg==", "bodyText": "Make sense. Thank you!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10383#discussion_r412417592", "createdAt": "2020-04-21T19:06:02Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/LargeBlobTest.groovy", "diffHunk": "@@ -232,20 +320,57 @@ class LargeBlobTest extends APISpec {\n         Mono<HttpResponse> process(HttpPipelineCallContext httpPipelineCallContext, HttpPipelineNextPolicy httpPipelineNextPolicy) {\n             def request = httpPipelineCallContext.httpRequest\n             // Substitute large body for put block requests and collect size of original body\n-            if (request.url.getQuery() != null && request.url.getQuery().endsWith(\"comp=block\")) {\n-                if (collectSize) {\n-                    def bytesReceived = request.getBody().reduce(0L, new BiFunction<Long, ByteBuffer, Long>() {\n-                        @Override\n-                        Long apply(Long a, ByteBuffer byteBuffer) {\n-                            return a + byteBuffer.remaining()\n-                        }\n-                    })\n-                    putBlockPayloadSizes.add(bytesReceived)\n+            def urlString = request.getUrl().toString()\n+            if (isPutBlockRequest(request)) {\n+                if (!retryTracker.get(urlString, false)) {\n+                    blocksCount.incrementAndGet()\n+                    retryTracker.put(urlString, true)\n+                }\n+                Mono<Long> count = interceptBody(request)\n+                if (count != null) {\n+                    return count.flatMap { bytes ->\n+                        putBlockPayloadSizes.add(bytes)\n+                        return httpPipelineNextPolicy.process()\n+                    }\n+                }\n+            } else if (isSinglePutBlobRequest(request)) {\n+                if (!retryTracker.get(urlString, false)) {\n+                    singleUploadCount.incrementAndGet()\n+                    retryTracker.put(urlString, true)\n+                }\n+                Mono<Long> count = interceptBody(request)\n+                if (count != null) {\n+                    return count.flatMap { bytes ->\n+                        putBlobPayloadSizes.add(bytes)\n+                        return httpPipelineNextPolicy.process()\n+                    }\n                 }\n-                count.incrementAndGet()\n-                request.setBody(\"dummyBody\")\n             }\n             return httpPipelineNextPolicy.process()\n         }\n+\n+        private Mono<Long> interceptBody(HttpRequest request) {\n+            Mono<Long> result = null\n+            if (collectSize) {\n+                result = request.getBody().reduce(0L, new BiFunction<Long, ByteBuffer, Long>() {\n+                    @Override\n+                    Long apply(Long a, ByteBuffer byteBuffer) {\n+                        return a + byteBuffer.remaining()\n+                    }\n+                })\n+            }\n+            request.setBody(\"dummyBody\")\n+            return result\n+        }\n+\n+        private boolean isPutBlockRequest(HttpRequest request) {\n+            return request.url.getQuery() != null && request.url.getQuery().endsWith(\"comp=block\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM5Mzg1OA=="}, "originalCommit": {"oid": "165658247ecc4023ffca708a676deb8ac181d1b1"}, "originalPosition": 258}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4552, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}