{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1ODc2Mzk0", "number": 15850, "title": "Add EventGrid distributed tracing", "bodyText": "Add distributed tracing to EventGridEvent, CloudEvent and system events.\nFor CloudEvent, If the tracestate/traceparent are not populated in the event, then we want to copy the traceparent/tracestate into the CloudEvent extensions. Closes #14851\nFixed NullPointerException bug for CloudEvent.getExtensionAttributes() and addExtensionAttributes().\nUpdate version number data type from Integer to Long for two classes AcsChatMessageEventBaseProperties and AcsChatThreadEventBaseProperties because the swagger file is changed. Closes #15848", "createdAt": "2020-10-01T00:40:42Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850", "merged": true, "mergeCommit": {"oid": "eaf0db9a7d387ed21a9e0476f25b543cf8a9bf02"}, "closed": true, "closedAt": "2020-10-02T03:43:33Z", "author": {"login": "YijunXieMS"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOFVi5AH2gAyNDk1ODc2Mzk0OjZjMDhiNGNmYzRlZTc4MTM0NjI3OWVjMmQ4MjQyMWUyYjVjZDMzYmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdObhZAgH2gAyNDk1ODc2Mzk0OjQyYmUxODg0M2JlYzQzZmU4MTU3MTc0NzlkZTBjMDI4NmUxMjdiNGQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6c08b4cfc4ee781346279ec2d82421e2b5cd33be", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6c08b4cfc4ee781346279ec2d82421e2b5cd33be", "committedDate": "2020-09-30T23:25:14Z", "message": "Add EventGrid distributed tracing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7749baf129d9ed6304415794e624ab04b232f2f", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c7749baf129d9ed6304415794e624ab04b232f2f", "committedDate": "2020-09-30T23:56:40Z", "message": "Change version number from Integer to Long"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/66070e9ecf19c2ac89710f588c7a5b9bfdf3087a", "committedDate": "2020-10-01T00:40:12Z", "message": "Test different headers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5OTQ1ODM5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#pullrequestreview-499945839", "createdAt": "2020-10-01T00:51:44Z", "commit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDo1MTo0NVrOHa06Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDo1NjowMlrOHa1FLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5MTg1MA==", "bodyText": "Make sure to check context for null on the calling function to avoid NPE when doing addData", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497891850", "createdAt": "2020-10-01T00:51:45Z", "author": {"login": "samvaity"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -85,10 +92,12 @@ public EventGridServiceVersion getServiceVersion() {\n     }\n \n     Mono<Void> sendCloudEvents(Iterable<CloudEvent> events, Context context) {\n+        this.addCloudEventTracePlaceHolder(events);\n         return Flux.fromIterable(events)\n             .map(CloudEvent::toImpl)\n             .collectList()\n-            .flatMap(list -> this.impl.publishCloudEventEventsAsync(this.hostname, list, context));\n+            .flatMap(list -> this.impl.publishCloudEventEventsAsync(this.hostname, list,\n+                context.addData(AZ_TRACING_NAMESPACE_KEY, Constants.EVENT_GRID_TRACING_NAMESPACE_VALUE)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5MjQ0NQ==", "bodyText": "Do we need both?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497892445", "createdAt": "2020-10-01T00:52:39Z", "author": {"login": "samvaity"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -158,6 +171,21 @@ public EventGridServiceVersion getServiceVersion() {\n     Mono<Response<Void>> sendCustomEventsWithResponse(Iterable<Object> events, Context context) {\n         return Flux.fromIterable(events)\n             .collectList()\n-            .flatMap(list -> this.impl.publishCustomEventEventsWithResponseAsync(this.hostname, list, context));\n+            .flatMap(list -> this.impl.publishCustomEventEventsWithResponseAsync(this.hostname, list,\n+                context.addData(AZ_TRACING_NAMESPACE_KEY, Constants.EVENT_GRID_TRACING_NAMESPACE_VALUE)));\n+    }\n+\n+    private void addCloudEventTracePlaceHolder(Iterable<CloudEvent> events) {\n+        if (TracerProxy.isTracingEnabled()) {\n+            for (CloudEvent event : events) {\n+                if (event.getExtensionAttributes() == null ||\n+                    (event.getExtensionAttributes().get(Constants.TRACE_PARENT) == null &&\n+                    event.getExtensionAttributes().get(Constants.TRACE_STATE) == null)) {\n+\n+                    event.addExtensionAttribute(Constants.TRACE_PARENT, Constants.TRACE_PARENT_PLACEHOLDER);\n+                    event.addExtensionAttribute(Constants.TRACE_STATE, Constants.TRACE_STATE_PLACEHOLDER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5MzgyMA==", "bodyText": "Add this to the Constants file where the value is declared.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497893820", "createdAt": "2020-10-01T00:54:47Z", "author": {"login": "samvaity"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -33,6 +36,9 @@\n \n     private final EventGridServiceVersion serviceVersion;\n \n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5NDcwMw==", "bodyText": "We shouldn't manually be updating a generated file?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497894703", "createdAt": "2020-10-01T00:56:02Z", "author": {"login": "samvaity"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/systemevents/AcsChatMessageEventBaseProperties.java", "diffHunk": "@@ -45,7 +45,7 @@\n      * The version of the message\n      */\n     @JsonProperty(value = \"version\")\n-    private Integer version;\n+    private Long version;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5OTQ2MjE5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#pullrequestreview-499946219", "createdAt": "2020-10-01T00:53:16Z", "commit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDo1MzoxN1rOHa0-BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMToxNDoyMVrOHa1zBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5Mjg2OQ==", "bodyText": "Not sure how this resource provide namespace link is relevant to the constructor.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497892869", "createdAt": "2020-10-01T00:53:17Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -33,6 +36,9 @@\n \n     private final EventGridServiceVersion serviceVersion;\n \n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5Mzk3MQ==", "bodyText": "Should have a null check for context before using it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497893971", "createdAt": "2020-10-01T00:54:58Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -70,7 +76,8 @@ public EventGridServiceVersion getServiceVersion() {\n         return Flux.fromIterable(events)\n             .map(EventGridEvent::toImpl)\n             .collectList()\n-            .flatMap(list -> this.impl.publishEventsAsync(this.hostname, list, context));\n+            .flatMap(list -> this.impl.publishEventsAsync(this.hostname,\n+                list, context.addData(AZ_TRACING_NAMESPACE_KEY, Constants.EVENT_GRID_TRACING_NAMESPACE_VALUE)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5NjUxNA==", "bodyText": "events can be null since the public APIs don't seem to check. It might be better to have the null check and include an error message to indicate that events cannot be null.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497896514", "createdAt": "2020-10-01T00:58:47Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -158,6 +171,21 @@ public EventGridServiceVersion getServiceVersion() {\n     Mono<Response<Void>> sendCustomEventsWithResponse(Iterable<Object> events, Context context) {\n         return Flux.fromIterable(events)\n             .collectList()\n-            .flatMap(list -> this.impl.publishCustomEventEventsWithResponseAsync(this.hostname, list, context));\n+            .flatMap(list -> this.impl.publishCustomEventEventsWithResponseAsync(this.hostname, list,\n+                context.addData(AZ_TRACING_NAMESPACE_KEY, Constants.EVENT_GRID_TRACING_NAMESPACE_VALUE)));\n+    }\n+\n+    private void addCloudEventTracePlaceHolder(Iterable<CloudEvent> events) {\n+        if (TracerProxy.isTracingEnabled()) {\n+            for (CloudEvent event : events) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5NzA2Mg==", "bodyText": "Add javadoc", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497897062", "createdAt": "2020-10-01T00:59:45Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.azure.messaging.eventgrid.implementation;\n+\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.tracing.TracerProxy;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+\n+\n+public class CloudEventTracingPipelinePolicy implements HttpPipelinePolicy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkwMjY2MQ==", "bodyText": "Can the Flux stream have strings that are split across multiple ByteBuffer boundaries?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497902661", "createdAt": "2020-10-01T01:08:36Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.azure.messaging.eventgrid.implementation;\n+\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.tracing.TracerProxy;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+\n+\n+public class CloudEventTracingPipelinePolicy implements HttpPipelinePolicy {\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        final HttpRequest request = context.getHttpRequest();\n+        final HttpHeader contentType = request.getHeaders().get(Constants.CONTENT_TYPE);\n+        if (TracerProxy.isTracingEnabled() && contentType != null &&\n+            Constants.CLOUD_EVENT_CONTENT_TYPE.equals(contentType.getValue())) {\n+            return request.getBody().map(byteBuffer ->\n+                replaceTracingPlaceHolder(request, byteBuffer)).then(next.process());\n+        }\n+        else {\n+            return next.process();\n+        }\n+    }\n+\n+    static String replaceTracingPlaceHolder(HttpRequest request, ByteBuffer byteBuffer) {\n+        String bodyString = new String(byteBuffer.array(), StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkwNjQzOQ==", "bodyText": "It is not very clear why we are replacing the trace names. It might be good to add some documentation for this method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497906439", "createdAt": "2020-10-01T01:14:21Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.azure.messaging.eventgrid.implementation;\n+\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.tracing.TracerProxy;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+\n+\n+public class CloudEventTracingPipelinePolicy implements HttpPipelinePolicy {\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        final HttpRequest request = context.getHttpRequest();\n+        final HttpHeader contentType = request.getHeaders().get(Constants.CONTENT_TYPE);\n+        if (TracerProxy.isTracingEnabled() && contentType != null &&\n+            Constants.CLOUD_EVENT_CONTENT_TYPE.equals(contentType.getValue())) {\n+            return request.getBody().map(byteBuffer ->\n+                replaceTracingPlaceHolder(request, byteBuffer)).then(next.process());\n+        }\n+        else {\n+            return next.process();\n+        }\n+    }\n+\n+    static String replaceTracingPlaceHolder(HttpRequest request, ByteBuffer byteBuffer) {\n+        String bodyString = new String(byteBuffer.array(), StandardCharsets.UTF_8);\n+        final HttpHeader traceparentHeader = request.getHeaders().get(Constants.TRACE_PARENT);\n+        final HttpHeader tracestateHeader = request.getHeaders().get(Constants.TRACE_STATE);\n+        bodyString = bodyString.replace(Constants.TRACE_PARENT_REPLACE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8f0686594b9fbd006b04db6303a8845754af878", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e8f0686594b9fbd006b04db6303a8845754af878", "committedDate": "2020-10-01T20:58:55Z", "message": "Update for code review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cf5d796c03e39094d509d4b06baea8784af7abd", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6cf5d796c03e39094d509d4b06baea8784af7abd", "committedDate": "2020-10-01T22:10:16Z", "message": "Add profiles"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzUwODgy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#pullrequestreview-500750882", "createdAt": "2020-10-01T22:07:40Z", "commit": {"oid": "e8f0686594b9fbd006b04db6303a8845754af878"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjowNzo0MFrOHbcQiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjowODoxOVrOHbcRQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzNjU4NA==", "bodyText": "@YijunXieMS - this method is also called from sync client and the user can pass a null context.\nUser can call sendEventsWithResponse(events, null)\n    public Response<Void> sendEventsWithResponse(Iterable<EventGridEvent> events, Context context) {\n        return asyncClient.sendEventsWithResponse(events, context).block();\n    }", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498536584", "createdAt": "2020-10-01T22:07:40Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -70,7 +76,8 @@ public EventGridServiceVersion getServiceVersion() {\n         return Flux.fromIterable(events)\n             .map(EventGridEvent::toImpl)\n             .collectList()\n-            .flatMap(list -> this.impl.publishEventsAsync(this.hostname, list, context));\n+            .flatMap(list -> this.impl.publishEventsAsync(this.hostname,\n+                list, context.addData(AZ_TRACING_NAMESPACE_KEY, Constants.EVENT_GRID_TRACING_NAMESPACE_VALUE)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5Mzk3MQ=="}, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzNjc2OQ==", "bodyText": "I think my comment about user passing null for context applies to this method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498536769", "createdAt": "2020-10-01T22:08:19Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -116,14 +137,18 @@ public EventGridServiceVersion getServiceVersion() {\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<Response<Void>> sendEventsWithResponse(Iterable<EventGridEvent> events) {\n+        if (events == null) {\n+            return monoError(logger, new NullPointerException(\"'events' cannot be null.\"));\n+        }\n         return withContext(context -> sendEventsWithResponse(events, context));\n     }\n \n     Mono<Response<Void>> sendEventsWithResponse(Iterable<EventGridEvent> events, Context context) {\n         return Flux.fromIterable(events)\n             .map(EventGridEvent::toImpl)\n             .collectList()\n-            .flatMap(list -> this.impl.publishEventsWithResponseAsync(this.hostname, list, context));\n+            .flatMap(list -> this.impl.publishEventsWithResponseAsync(this.hostname, list,\n+                context.addData(AZ_TRACING_NAMESPACE_KEY, Constants.EVENT_GRID_TRACING_NAMESPACE_VALUE)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8f0686594b9fbd006b04db6303a8845754af878"}, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzU2NDE1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#pullrequestreview-500756415", "createdAt": "2020-10-01T22:19:43Z", "commit": {"oid": "6cf5d796c03e39094d509d4b06baea8784af7abd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjoxOTo0M1rOHbcfng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjoxOTo0M1rOHbcfng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MDQ0Ng==", "bodyText": "Do we want the request headers to have the keys of tracestate and traceparent with empty values ?\n\ntraceparentHeader != null\n? String.format(\",\"%s\":\"%s\"\", Constants.TRACE_PARENT, traceparentHeader.getValue())\n: \"\")\n\nI think we should skip updating the key value if traceparentHeader == null.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498540446", "createdAt": "2020-10-01T22:19:43Z", "author": {"login": "samvaity"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.azure.messaging.eventgrid.implementation;\n+\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.tracing.TracerProxy;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+import com.azure.messaging.eventgrid.CloudEvent;\n+/**\n+ * This pipeline policy should be added after OpenTelemetryPolicy in the http pipeline.\n+ *\n+ * It checks whether the {@link HttpRequest} headers have \"traceparent\" or \"tracestate\" and whether the serialized\n+ * http body json string for a list of {@link CloudEvent} instances has place holders\n+ * {@link Constants#TRACE_PARENT_PLACEHOLDER} or {@link Constants#TRACE_STATE_PLACEHOLDER}.\n+ * The place holders will be replaced by the value from headers if the headers have \"traceparent\" or \"tracestate\",\n+ * or be removed if the headers don't have.\n+ *\n+ * The place holders won't exist in the json string if the {@link TracerProxy#isTracingEnabled()} returns false.\n+ */\n+public class CloudEventTracingPipelinePolicy implements HttpPipelinePolicy {\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        final HttpRequest request = context.getHttpRequest();\n+        final HttpHeader contentType = request.getHeaders().get(Constants.CONTENT_TYPE);\n+        StringBuilder bodyStringBuilder = new StringBuilder();\n+        if (TracerProxy.isTracingEnabled() && contentType != null &&\n+            Constants.CLOUD_EVENT_CONTENT_TYPE.equals(contentType.getValue())) {\n+            return request.getBody().map(byteBuffer -> bodyStringBuilder.append(new String(byteBuffer.array(),\n+                StandardCharsets.UTF_8)))\n+                .then(Mono.fromCallable(() -> replaceTracingPlaceHolder(request, bodyStringBuilder)))\n+                .then(next.process());\n+        }\n+        else {\n+            return next.process();\n+        }\n+    }\n+\n+    /**\n+     *\n+     * @param request The {@link HttpRequest}, whose body will be mutated by replacing traceparent and tracestate\n+     *                placeholders.\n+     * @param bodyStringBuilder The {@link StringBuilder} that contains the full HttpRequest body string.\n+     * @return The new body string with the place holders replaced (if header has tracing)\n+     * or removed (if header no tracing).\n+     */\n+    static String replaceTracingPlaceHolder(HttpRequest request, StringBuilder bodyStringBuilder) {\n+        final int traceParentPlaceHolderIndex = bodyStringBuilder.indexOf(Constants.TRACE_PARENT_PLACEHOLDER);\n+        if (traceParentPlaceHolderIndex >= 0) { // There is \"traceparent\" placeholder in body, replace it.\n+            final HttpHeader traceparentHeader = request.getHeaders().get(Constants.TRACE_PARENT);\n+            bodyStringBuilder.replace(traceParentPlaceHolderIndex,\n+                Constants.TRACE_PARENT_PLACEHOLDER.length() + traceParentPlaceHolderIndex,\n+                traceparentHeader != null\n+                    ? String.format(\",\\\"%s\\\":\\\"%s\\\"\", Constants.TRACE_PARENT, traceparentHeader.getValue())\n+                    : \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf5d796c03e39094d509d4b06baea8784af7abd"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "823f9e251fe0596c41f178d1508d23fef30a8dbf", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/823f9e251fe0596c41f178d1508d23fef30a8dbf", "committedDate": "2020-10-01T23:16:17Z", "message": "Correct package name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb6b320fea1f7acf62828851646051b4994251ef", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fb6b320fea1f7acf62828851646051b4994251ef", "committedDate": "2020-10-01T23:18:10Z", "message": "Add null check for context"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzc5Mzc4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#pullrequestreview-500779378", "createdAt": "2020-10-01T23:21:29Z", "commit": {"oid": "fb6b320fea1f7acf62828851646051b4994251ef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b52b7b59e5a3b943efc96dbd665f74cc0693d6b", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0b52b7b59e5a3b943efc96dbd665f74cc0693d6b", "committedDate": "2020-10-01T23:39:25Z", "message": "Disable maven-surefire-plugin parallel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb471525987cc08119f580c02751854367083690", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bb471525987cc08119f580c02751854367083690", "committedDate": "2020-10-02T01:05:41Z", "message": "Disable maven-surefire-plugin parallel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42be18843bec43fe815717479de0c0286e127b4d", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/42be18843bec43fe815717479de0c0286e127b4d", "committedDate": "2020-10-02T01:16:05Z", "message": "opens com.azure.messaging.eventgrid.implementation in module-info.java"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3146, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}