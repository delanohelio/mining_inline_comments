{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxOTQ0Mjc5", "number": 16213, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMDo0MzozMFrOEziCHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNzozNjo0MVrOE0e7cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDcwNDMxOnYy", "diffSide": "RIGHT", "path": "sdk/metricsadvisor/azure-ai-metricsadvisor/src/test/java/com/azure/ai/metricsadvisor/HookTestBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMDo0MzozMFrOHqzdTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMDo0MzozMFrOHqzdTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0NTMyNQ==", "bodyText": "remove", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16213#discussion_r514645325", "createdAt": "2020-10-30T00:43:30Z", "author": {"login": "samvaity"}, "path": "sdk/metricsadvisor/azure-ai-metricsadvisor/src/test/java/com/azure/ai/metricsadvisor/HookTestBase.java", "diffHunk": "@@ -97,6 +97,7 @@ protected void assertCreateWebHookOutput(Hook hook) {\n //        }\n     }\n \n+    // Track this with https://github.com/Azure/azure-sdk-for-java/issues/16932", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d1623e7d1ff2b64ecdaef9424c516a446db7d33"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDcwNTA3OnYy", "diffSide": "RIGHT", "path": "sdk/metricsadvisor/azure-ai-metricsadvisor/src/test/java/com/azure/ai/metricsadvisor/IncidentForAlertTestBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMDo0NDowMFrOHqzdwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMDo0NDowMFrOHqzdwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0NTQ0MQ==", "bodyText": "reported as service issue #_53", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16213#discussion_r514645441", "createdAt": "2020-10-30T00:44:00Z", "author": {"login": "samvaity"}, "path": "sdk/metricsadvisor/azure-ai-metricsadvisor/src/test/java/com/azure/ai/metricsadvisor/IncidentForAlertTestBase.java", "diffHunk": "@@ -19,22 +19,22 @@\n         static final ListIncidentsForAlertInput INSTANCE = new ListIncidentsForAlertInput();\n         final ListIncidentsAlertedOptions options = new ListIncidentsAlertedOptions()\n             .setTop(10);\n-        final String alertConfigurationId = \"ff3014a0-bbbb-41ec-a637-677e77b81299\";\n-        final String alertId = \"1746b031c00\";\n+        final String alertConfigurationId = ALERT_CONFIG_ID;\n+        final String alertId = \"175434e3400\";\n     }\n \n     protected static class ListIncidentsForAlertOutput {\n         static final ListIncidentsForAlertOutput INSTANCE = new ListIncidentsForAlertOutput();\n-        final int expectedIncidents = 3;\n+        final int expectedIncidents = 2;\n     }\n \n     protected void assertListIncidentsForAlertOutput(Incident incident) {\n         Assertions.assertNotNull(incident);\n         Assertions.assertNotNull(incident.getId());\n         Assertions.assertNotNull(incident.getMetricId());\n-        Assertions.assertNotNull(incident.getSeverity());\n+        // currently, returned as null?\n+        // Assertions.assertNotNull(incident.getSeverity());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d1623e7d1ff2b64ecdaef9424c516a446db7d33"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDEzODEyOnYy", "diffSide": "RIGHT", "path": "sdk/metricsadvisor/azure-ai-metricsadvisor/src/test/java/com/azure/ai/metricsadvisor/AnomalyAlertAsyncTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNTozOTo1NVrOHsJxGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNTo0MTowMFrOHsJ0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1OTQxNg==", "bodyText": "In finally should we attempt to clean up the resource only if the alertConfigurationId has a value (which means creation succeeded).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16213#discussion_r516059416", "createdAt": "2020-11-02T15:39:55Z", "author": {"login": "anuchandy"}, "path": "sdk/metricsadvisor/azure-ai-metricsadvisor/src/test/java/com/azure/ai/metricsadvisor/AnomalyAlertAsyncTest.java", "diffHunk": "@@ -160,20 +162,24 @@ public void getAnomalyAlertValidId(HttpClient httpClient, MetricsAdvisorServiceV\n     @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n     @MethodSource(\"com.azure.ai.metricsadvisor.TestUtils#getTestParameters\")\n     public void createAnomalyAlertConfiguration(HttpClient httpClient, MetricsAdvisorServiceVersion serviceVersion) {\n-        // Arrange\n-        client = getMetricsAdvisorAdministrationBuilder(httpClient, serviceVersion).buildAsyncClient();\n         final AtomicReference<String> alertConfigurationId = new AtomicReference<>();\n-        creatAnomalyAlertRunner(inputAnomalyAlert ->\n-\n-            // Act & Assert\n-            StepVerifier.create(client.createAnomalyAlertConfiguration(inputAnomalyAlert))\n-                .assertNext(createdAnomalyAlert -> {\n-                    alertConfigurationId.set(createdAnomalyAlert.getId());\n-                    validateAnomalyAlertResult(inputAnomalyAlert, createdAnomalyAlert);\n-                })\n-                .verifyComplete());\n-\n-        client.deleteAnomalyAlertConfiguration(alertConfigurationId.get()).block();\n+        try {\n+           // Arrange\n+            client = getMetricsAdvisorAdministrationBuilder(httpClient, serviceVersion).buildAsyncClient();\n+            creatAnomalyAlertRunner(inputAnomalyAlert ->\n+\n+                // Act & Assert\n+                StepVerifier.create(client.createAnomalyAlertConfiguration(inputAnomalyAlert))\n+                    .assertNext(createdAnomalyAlert -> {\n+                        alertConfigurationId.set(createdAnomalyAlert.getId());\n+                        validateAnomalyAlertResult(inputAnomalyAlert, createdAnomalyAlert);\n+                    })\n+                    .verifyComplete());\n+        } finally {\n+            Mono<Void> deleteAnomalyAlertConfiguration\n+                = client.deleteAnomalyAlertConfiguration(alertConfigurationId.get());\n+            StepVerifier.create(deleteAnomalyAlertConfiguration).verifyComplete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9ee9390a0c7d145b7de8ee6d9ce4b2d8cebd1eb"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA2MDIxMg==", "bodyText": "the same comment for other applicable places we do the cleanup in finally.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16213#discussion_r516060212", "createdAt": "2020-11-02T15:41:00Z", "author": {"login": "anuchandy"}, "path": "sdk/metricsadvisor/azure-ai-metricsadvisor/src/test/java/com/azure/ai/metricsadvisor/AnomalyAlertAsyncTest.java", "diffHunk": "@@ -160,20 +162,24 @@ public void getAnomalyAlertValidId(HttpClient httpClient, MetricsAdvisorServiceV\n     @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n     @MethodSource(\"com.azure.ai.metricsadvisor.TestUtils#getTestParameters\")\n     public void createAnomalyAlertConfiguration(HttpClient httpClient, MetricsAdvisorServiceVersion serviceVersion) {\n-        // Arrange\n-        client = getMetricsAdvisorAdministrationBuilder(httpClient, serviceVersion).buildAsyncClient();\n         final AtomicReference<String> alertConfigurationId = new AtomicReference<>();\n-        creatAnomalyAlertRunner(inputAnomalyAlert ->\n-\n-            // Act & Assert\n-            StepVerifier.create(client.createAnomalyAlertConfiguration(inputAnomalyAlert))\n-                .assertNext(createdAnomalyAlert -> {\n-                    alertConfigurationId.set(createdAnomalyAlert.getId());\n-                    validateAnomalyAlertResult(inputAnomalyAlert, createdAnomalyAlert);\n-                })\n-                .verifyComplete());\n-\n-        client.deleteAnomalyAlertConfiguration(alertConfigurationId.get()).block();\n+        try {\n+           // Arrange\n+            client = getMetricsAdvisorAdministrationBuilder(httpClient, serviceVersion).buildAsyncClient();\n+            creatAnomalyAlertRunner(inputAnomalyAlert ->\n+\n+                // Act & Assert\n+                StepVerifier.create(client.createAnomalyAlertConfiguration(inputAnomalyAlert))\n+                    .assertNext(createdAnomalyAlert -> {\n+                        alertConfigurationId.set(createdAnomalyAlert.getId());\n+                        validateAnomalyAlertResult(inputAnomalyAlert, createdAnomalyAlert);\n+                    })\n+                    .verifyComplete());\n+        } finally {\n+            Mono<Void> deleteAnomalyAlertConfiguration\n+                = client.deleteAnomalyAlertConfiguration(alertConfigurationId.get());\n+            StepVerifier.create(deleteAnomalyAlertConfiguration).verifyComplete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1OTQxNg=="}, "originalCommit": {"oid": "c9ee9390a0c7d145b7de8ee6d9ce4b2d8cebd1eb"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDY3MzY3OnYy", "diffSide": "RIGHT", "path": "sdk/metricsadvisor/azure-ai-metricsadvisor/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNzozNDozMFrOHsO47A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODoxNjo0M1rOHsQYZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE0MzM0MA==", "bodyText": "Should leave a TODO to determine the root cause and fix this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16213#discussion_r516143340", "createdAt": "2020-11-02T17:34:30Z", "author": {"login": "alzimmermsft"}, "path": "sdk/metricsadvisor/azure-ai-metricsadvisor/pom.xml", "diffHunk": "@@ -109,6 +109,17 @@\n               </argLine>\n             </configuration>\n           </plugin>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-surefire-plugin</artifactId>\n+            <version>3.0.0-M3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-surefire-plugin;external_dependency} -->\n+            <configuration>\n+              <systemPropertyVariables>\n+                <!-- Parallel runs disabled due to subscriber timeout issue causing failures in tests. -->\n+                <junit.jupiter.execution.parallel.enabled>false</junit.jupiter.execution.parallel.enabled>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9ee9390a0c7d145b7de8ee6d9ce4b2d8cebd1eb"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE2Nzc4MQ==", "bodyText": "#17069. Will add it to the code too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16213#discussion_r516167781", "createdAt": "2020-11-02T18:16:43Z", "author": {"login": "samvaity"}, "path": "sdk/metricsadvisor/azure-ai-metricsadvisor/pom.xml", "diffHunk": "@@ -109,6 +109,17 @@\n               </argLine>\n             </configuration>\n           </plugin>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-surefire-plugin</artifactId>\n+            <version>3.0.0-M3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-surefire-plugin;external_dependency} -->\n+            <configuration>\n+              <systemPropertyVariables>\n+                <!-- Parallel runs disabled due to subscriber timeout issue causing failures in tests. -->\n+                <junit.jupiter.execution.parallel.enabled>false</junit.jupiter.execution.parallel.enabled>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE0MzM0MA=="}, "originalCommit": {"oid": "c9ee9390a0c7d145b7de8ee6d9ce4b2d8cebd1eb"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDY4MTQ3OnYy", "diffSide": "RIGHT", "path": "sdk/metricsadvisor/tests.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNzozNjo0MVrOHsO9uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODowNjo0OVrOHsQDDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE0NDU3MQ==", "bodyText": "Are these static test configurations or dynamic each time the tests are ran?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16213#discussion_r516144571", "createdAt": "2020-11-02T17:36:41Z", "author": {"login": "alzimmermsft"}, "path": "sdk/metricsadvisor/tests.yml", "diffHunk": "@@ -10,3 +10,23 @@ jobs:\n           safeName: azureaimetricsadvisor\n       EnvVars:\n         AZURE_TEST_MODE: RECORD\n+        AZURE_METRICS_ADVISOR_ENDPOINT: $(metricsadvisor-test-service-endpoint)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9ee9390a0c7d145b7de8ee6d9ce4b2d8cebd1eb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE2MjMxOQ==", "bodyText": "They are static since the service has a restriction on resources per region and also the tests need ingested data which requires some prior preparation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16213#discussion_r516162319", "createdAt": "2020-11-02T18:06:49Z", "author": {"login": "samvaity"}, "path": "sdk/metricsadvisor/tests.yml", "diffHunk": "@@ -10,3 +10,23 @@ jobs:\n           safeName: azureaimetricsadvisor\n       EnvVars:\n         AZURE_TEST_MODE: RECORD\n+        AZURE_METRICS_ADVISOR_ENDPOINT: $(metricsadvisor-test-service-endpoint)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE0NDU3MQ=="}, "originalCommit": {"oid": "c9ee9390a0c7d145b7de8ee6d9ce4b2d8cebd1eb"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3530, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}