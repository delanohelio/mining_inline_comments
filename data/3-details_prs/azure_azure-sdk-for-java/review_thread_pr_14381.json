{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNzM3OTY5", "number": 14381, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMDoxNTozMlrOEbucqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMTozNDozN1rOEbv_6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTA4MDEwOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMDoxNTozMlrOHF0rXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMDoxNTozMlrOHF0rXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg2Nzk5OA==", "bodyText": "A PagedFlux is a collection returning async API, we don't need to wrap it inside a Mono (a Mono will emit a single item, or an error) \ud83d\ude03", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14381#discussion_r475867998", "createdAt": "2020-08-24T20:15:32Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -726,9 +726,159 @@ When updating a model, the payload for a multi-operation json patch follows the\n \n <details><summary><b>APIs</b></summary>\n \n+Async APIs\n+\n+```java\t\n+    /**\n+     * Creates one or many models synchronously.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return The list of created models\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public Mono<List<ModelData>> createModels(List<String> models) { }\n+\n+    /**\n+     * Creates one or many models synchronously.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A REST response containing the list of created models.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public Mono<Response<List<ModelData>>> createModelsWithResponse(List<String> models) { }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition asynchronously.\n+     * @param modelId The Id of the model.\n+     * @return The application/json model\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<ModelData> getModel(String modelId) { }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition asynchronously.\n+     * @param modelId The Id of the model.\n+     * @return A REST response containing the model.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<ModelData>> getModelWithResponse(String modelId) { }\n+\n+    /**\n+     * Gets the list of models by iterating through a collection asynchronously.\n+     * @param dependenciesFor The model Ids to have dependencies retrieved.\n+     * @param includeModelDefinition Whether to include the model definition in the result. If false, only the model metadata will be returned.\n+     * @param options The options to follow when listing the models. For example, the page size hint can be specified.\n+     * @return A {@link PagedFlux} of ModelData.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public Mono<PagedFlux<ModelData>> listModels(List<String> dependenciesFor, boolean includeModelDefinition, DigitalTwinModelsListOptions options) { }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd19b9980299cdeb3c02b2dd7197feea2b26d5c3"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTA4NTc4OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMDoxNzoxOFrOHF0u8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMDoxNzoxOFrOHF0u8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg2ODkxMg==", "bodyText": "small note: the max overload sync API will need to take in a Context arg as the last arg.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14381#discussion_r475868912", "createdAt": "2020-08-24T20:17:18Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -726,9 +726,159 @@ When updating a model, the payload for a multi-operation json patch follows the\n \n <details><summary><b>APIs</b></summary>\n \n+Async APIs\n+\n+```java\t\n+    /**\n+     * Creates one or many models synchronously.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return The list of created models\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public Mono<List<ModelData>> createModels(List<String> models) { }\n+\n+    /**\n+     * Creates one or many models synchronously.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A REST response containing the list of created models.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public Mono<Response<List<ModelData>>> createModelsWithResponse(List<String> models) { }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition asynchronously.\n+     * @param modelId The Id of the model.\n+     * @return The application/json model\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<ModelData> getModel(String modelId) { }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition asynchronously.\n+     * @param modelId The Id of the model.\n+     * @return A REST response containing the model.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<ModelData>> getModelWithResponse(String modelId) { }\n+\n+    /**\n+     * Gets the list of models by iterating through a collection asynchronously.\n+     * @param dependenciesFor The model Ids to have dependencies retrieved.\n+     * @param includeModelDefinition Whether to include the model definition in the result. If false, only the model metadata will be returned.\n+     * @param options The options to follow when listing the models. For example, the page size hint can be specified.\n+     * @return A {@link PagedFlux} of ModelData.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public Mono<PagedFlux<ModelData>> listModels(List<String> dependenciesFor, boolean includeModelDefinition, DigitalTwinModelsListOptions options) { }\n+\n+    /**\n+     * Deletes a model asynchronously.\n+     * @param modelId The id for the model. The id is globally unique and case sensitive.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> deleteModel(String modelId) { }\n+\n+    /**\n+     * Deletes a model asynchronously.\n+     * @param modelId The id for the model. The id is globally unique and case sensitive.\n+     * @return The http response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response> deleteModelWithResponse(String modelId) { }\n+\n+    /**\n+     * Decommissions a model asynchronously.\n+     * @param modelId The Id of the model to decommission.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> decommissionModel(String modelId) { }\n+\n+    /**\n+     * Decommissions a model asynchronously.\n+     * @param modelId The Id of the model to decommission.\n+     * @return The http response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response> decommissionModelWithResponse(String modelId) { }\n+\n+```\n+\n+Sync APIs\n ```java\n-TODO:\n+ /**\n+     * Creates one or many models synchronously.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return The list of created models\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public List<ModelData> createModels(List<String> models) { }\n+\n+    /**\n+     * Creates one or many models synchronously.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A REST response containing the list of created models.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public Response<List<ModelData>> createModelsWithResponse(List<String> models) { }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd19b9980299cdeb3c02b2dd7197feea2b26d5c3"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTMxMTIxOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMToyNjoyNVrOHF239g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo0Mjo0NVrOHGo_Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwMzk5MA==", "bodyText": "It would be easier to review if we have async sync version of API next to each other rather than a new section?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14381#discussion_r475903990", "createdAt": "2020-08-24T21:26:25Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -726,9 +726,159 @@ When updating a model, the payload for a multi-operation json patch follows the\n \n <details><summary><b>APIs</b></summary>\n \n+Async APIs\n+\n+```java\t\n+    /**\n+     * Creates one or many models synchronously.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return The list of created models\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public Mono<List<ModelData>> createModels(List<String> models) { }\n+\n+    /**\n+     * Creates one or many models synchronously.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A REST response containing the list of created models.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public Mono<Response<List<ModelData>>> createModelsWithResponse(List<String> models) { }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition asynchronously.\n+     * @param modelId The Id of the model.\n+     * @return The application/json model\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<ModelData> getModel(String modelId) { }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition asynchronously.\n+     * @param modelId The Id of the model.\n+     * @return A REST response containing the model.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<ModelData>> getModelWithResponse(String modelId) { }\n+\n+    /**\n+     * Gets the list of models by iterating through a collection asynchronously.\n+     * @param dependenciesFor The model Ids to have dependencies retrieved.\n+     * @param includeModelDefinition Whether to include the model definition in the result. If false, only the model metadata will be returned.\n+     * @param options The options to follow when listing the models. For example, the page size hint can be specified.\n+     * @return A {@link PagedFlux} of ModelData.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public Mono<PagedFlux<ModelData>> listModels(List<String> dependenciesFor, boolean includeModelDefinition, DigitalTwinModelsListOptions options) { }\n+\n+    /**\n+     * Deletes a model asynchronously.\n+     * @param modelId The id for the model. The id is globally unique and case sensitive.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> deleteModel(String modelId) { }\n+\n+    /**\n+     * Deletes a model asynchronously.\n+     * @param modelId The id for the model. The id is globally unique and case sensitive.\n+     * @return The http response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response> deleteModelWithResponse(String modelId) { }\n+\n+    /**\n+     * Decommissions a model asynchronously.\n+     * @param modelId The Id of the model to decommission.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> decommissionModel(String modelId) { }\n+\n+    /**\n+     * Decommissions a model asynchronously.\n+     * @param modelId The Id of the model to decommission.\n+     * @return The http response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response> decommissionModelWithResponse(String modelId) { }\n+\n+```\n+\n+Sync APIs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd19b9980299cdeb3c02b2dd7197feea2b26d5c3"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcyNTA3OA==", "bodyText": "We can explore that option for the following APIs and if we all liked it better we can move them", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14381#discussion_r476725078", "createdAt": "2020-08-25T20:42:45Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -726,9 +726,159 @@ When updating a model, the payload for a multi-operation json patch follows the\n \n <details><summary><b>APIs</b></summary>\n \n+Async APIs\n+\n+```java\t\n+    /**\n+     * Creates one or many models synchronously.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return The list of created models\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public Mono<List<ModelData>> createModels(List<String> models) { }\n+\n+    /**\n+     * Creates one or many models synchronously.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A REST response containing the list of created models.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public Mono<Response<List<ModelData>>> createModelsWithResponse(List<String> models) { }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition asynchronously.\n+     * @param modelId The Id of the model.\n+     * @return The application/json model\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<ModelData> getModel(String modelId) { }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition asynchronously.\n+     * @param modelId The Id of the model.\n+     * @return A REST response containing the model.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<ModelData>> getModelWithResponse(String modelId) { }\n+\n+    /**\n+     * Gets the list of models by iterating through a collection asynchronously.\n+     * @param dependenciesFor The model Ids to have dependencies retrieved.\n+     * @param includeModelDefinition Whether to include the model definition in the result. If false, only the model metadata will be returned.\n+     * @param options The options to follow when listing the models. For example, the page size hint can be specified.\n+     * @return A {@link PagedFlux} of ModelData.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public Mono<PagedFlux<ModelData>> listModels(List<String> dependenciesFor, boolean includeModelDefinition, DigitalTwinModelsListOptions options) { }\n+\n+    /**\n+     * Deletes a model asynchronously.\n+     * @param modelId The id for the model. The id is globally unique and case sensitive.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> deleteModel(String modelId) { }\n+\n+    /**\n+     * Deletes a model asynchronously.\n+     * @param modelId The id for the model. The id is globally unique and case sensitive.\n+     * @return The http response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response> deleteModelWithResponse(String modelId) { }\n+\n+    /**\n+     * Decommissions a model asynchronously.\n+     * @param modelId The Id of the model to decommission.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> decommissionModel(String modelId) { }\n+\n+    /**\n+     * Decommissions a model asynchronously.\n+     * @param modelId The Id of the model to decommission.\n+     * @return The http response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response> decommissionModelWithResponse(String modelId) { }\n+\n+```\n+\n+Sync APIs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwMzk5MA=="}, "originalCommit": {"oid": "fd19b9980299cdeb3c02b2dd7197feea2b26d5c3"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTMxMzk3OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMToyNzoxOVrOHF25lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo0MDo0OFrOHGo7cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwNDQwNg==", "bodyText": "Did you mean to say asynchronously here and below?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14381#discussion_r475904406", "createdAt": "2020-08-24T21:27:19Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -726,9 +726,159 @@ When updating a model, the payload for a multi-operation json patch follows the\n \n <details><summary><b>APIs</b></summary>\n \n+Async APIs\n+\n+```java\t\n+    /**\n+     * Creates one or many models synchronously.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd19b9980299cdeb3c02b2dd7197feea2b26d5c3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcyNDA4Mg==", "bodyText": "yes yes", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14381#discussion_r476724082", "createdAt": "2020-08-25T20:40:48Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -726,9 +726,159 @@ When updating a model, the payload for a multi-operation json patch follows the\n \n <details><summary><b>APIs</b></summary>\n \n+Async APIs\n+\n+```java\t\n+    /**\n+     * Creates one or many models synchronously.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwNDQwNg=="}, "originalCommit": {"oid": "fd19b9980299cdeb3c02b2dd7197feea2b26d5c3"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTMxNjk2OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMToyODoyNFrOHF27Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo0MDo1NFrOHGo7rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwNDg2Mg==", "bodyText": "Is it basically the HTTP response?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14381#discussion_r475904862", "createdAt": "2020-08-24T21:28:24Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -726,9 +726,159 @@ When updating a model, the payload for a multi-operation json patch follows the\n \n <details><summary><b>APIs</b></summary>\n \n+Async APIs\n+\n+```java\t\n+    /**\n+     * Creates one or many models synchronously.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return The list of created models\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public Mono<List<ModelData>> createModels(List<String> models) { }\n+\n+    /**\n+     * Creates one or many models synchronously.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A REST response containing the list of created models.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd19b9980299cdeb3c02b2dd7197feea2b26d5c3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcyNDE0MA==", "bodyText": "correct.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14381#discussion_r476724140", "createdAt": "2020-08-25T20:40:54Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -726,9 +726,159 @@ When updating a model, the payload for a multi-operation json patch follows the\n \n <details><summary><b>APIs</b></summary>\n \n+Async APIs\n+\n+```java\t\n+    /**\n+     * Creates one or many models synchronously.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return The list of created models\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public Mono<List<ModelData>> createModels(List<String> models) { }\n+\n+    /**\n+     * Creates one or many models synchronously.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A REST response containing the list of created models.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwNDg2Mg=="}, "originalCommit": {"oid": "fd19b9980299cdeb3c02b2dd7197feea2b26d5c3"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTMzNDE2OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMTozNDozN1rOHF3Fwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMTozNDozN1rOHF3Fwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwNzUyMg==", "bodyText": "returns a PagedIterable", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14381#discussion_r475907522", "createdAt": "2020-08-24T21:34:37Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -726,9 +726,159 @@ When updating a model, the payload for a multi-operation json patch follows the\n \n <details><summary><b>APIs</b></summary>\n \n+Async APIs\n+\n+```java\t\n+    /**\n+     * Creates one or many models synchronously.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return The list of created models\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public Mono<List<ModelData>> createModels(List<String> models) { }\n+\n+    /**\n+     * Creates one or many models synchronously.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A REST response containing the list of created models.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public Mono<Response<List<ModelData>>> createModelsWithResponse(List<String> models) { }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition asynchronously.\n+     * @param modelId The Id of the model.\n+     * @return The application/json model\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<ModelData> getModel(String modelId) { }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition asynchronously.\n+     * @param modelId The Id of the model.\n+     * @return A REST response containing the model.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<ModelData>> getModelWithResponse(String modelId) { }\n+\n+    /**\n+     * Gets the list of models by iterating through a collection asynchronously.\n+     * @param dependenciesFor The model Ids to have dependencies retrieved.\n+     * @param includeModelDefinition Whether to include the model definition in the result. If false, only the model metadata will be returned.\n+     * @param options The options to follow when listing the models. For example, the page size hint can be specified.\n+     * @return A {@link PagedFlux} of ModelData.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public Mono<PagedFlux<ModelData>> listModels(List<String> dependenciesFor, boolean includeModelDefinition, DigitalTwinModelsListOptions options) { }\n+\n+    /**\n+     * Deletes a model asynchronously.\n+     * @param modelId The id for the model. The id is globally unique and case sensitive.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> deleteModel(String modelId) { }\n+\n+    /**\n+     * Deletes a model asynchronously.\n+     * @param modelId The id for the model. The id is globally unique and case sensitive.\n+     * @return The http response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response> deleteModelWithResponse(String modelId) { }\n+\n+    /**\n+     * Decommissions a model asynchronously.\n+     * @param modelId The Id of the model to decommission.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> decommissionModel(String modelId) { }\n+\n+    /**\n+     * Decommissions a model asynchronously.\n+     * @param modelId The Id of the model to decommission.\n+     * @return The http response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response> decommissionModelWithResponse(String modelId) { }\n+\n+```\n+\n+Sync APIs\n ```java\n-TODO:\n+ /**\n+     * Creates one or many models synchronously.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return The list of created models\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public List<ModelData> createModels(List<String> models) { }\n+\n+    /**\n+     * Creates one or many models synchronously.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A REST response containing the list of created models.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public Response<List<ModelData>> createModelsWithResponse(List<String> models) { }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition synchronously.\n+     * @param modelId The Id of the model.\n+     * @return The application/json model\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public ModelData getModel(String modelId) { }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition synchronously.\n+     * @param modelId The Id of the model.\n+     * @return A REST response containing the model.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<ModelData> getModelWithResponse(String modelId) { }\n+\n+    /**\n+     * Gets the list of models by iterating through a collection synchronously.\n+     * @param dependenciesFor The model Ids to have dependencies retrieved.\n+     * @param includeModelDefinition Whether to include the model definition in the result. If false, only the model metadata will be returned.\n+     * @param options The options to follow when listing the models. For example, the page size hint can be specified.\n+     * @return A {@link PagedFlux} of ModelData.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd19b9980299cdeb3c02b2dd7197feea2b26d5c3"}, "originalPosition": 121}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1495, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}