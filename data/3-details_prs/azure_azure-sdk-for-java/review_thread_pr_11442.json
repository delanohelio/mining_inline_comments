{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNTI1NjUz", "number": 11442, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzozOToxNlrOD_-IUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjoyMDowN1rOEALR-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDA0ODE5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzozOToxNlrOGa9ECQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjozMjowOVrOGbTQ8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxNjYxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This a synchronous client and is used to perform operations in a synchronous way\n          \n          \n            \n             * Calls to client API's are blocked for completion.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11442#discussion_r430916617", "createdAt": "2020-05-27T07:39:16Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClient.java", "diffHunk": "@@ -22,7 +22,7 @@\n \n /**\n  * Provides a client-side logical representation of the Azure Cosmos DB service.\n- * SyncClient is used to perform operations in a synchronous way\n+ * This a synchronous client and is used to perform operations in a synchronous way", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67fb20faf9ff2f31083f0704897255d9d7301dd5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2MzY4Mg==", "bodyText": "suggestion makes sense.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11442#discussion_r431263682", "createdAt": "2020-05-27T16:07:00Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClient.java", "diffHunk": "@@ -22,7 +22,7 @@\n \n /**\n  * Provides a client-side logical representation of the Azure Cosmos DB service.\n- * SyncClient is used to perform operations in a synchronous way\n+ * This a synchronous client and is used to perform operations in a synchronous way", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxNjYxNw=="}, "originalCommit": {"oid": "67fb20faf9ff2f31083f0704897255d9d7301dd5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI4MDM2OQ==", "bodyText": "Done.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11442#discussion_r431280369", "createdAt": "2020-05-27T16:32:09Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClient.java", "diffHunk": "@@ -22,7 +22,7 @@\n \n /**\n  * Provides a client-side logical representation of the Azure Cosmos DB service.\n- * SyncClient is used to perform operations in a synchronous way\n+ * This a synchronous client and is used to perform operations in a synchronous way", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxNjYxNw=="}, "originalCommit": {"oid": "67fb20faf9ff2f31083f0704897255d9d7301dd5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDA1MTE3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzo0MDowOVrOGa9F8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjozMjozMVrOGbTRwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxNzEwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * By default, SESSION consistency level is used if none is provided.\n          \n          \n            \n             * By default, account consistency level is used if none is provided.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11442#discussion_r430917104", "createdAt": "2020-05-27T07:40:09Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "diffHunk": "@@ -16,12 +16,13 @@\n /**\n  * Helper class to build CosmosAsyncClient {@link CosmosAsyncClient} and CosmosClient {@link CosmosClient}\n  * instances as logical representation of the Azure Cosmos database service.\n- *\n+ * <p>\n  * When building client, endpoint() and key() are mandatory APIs, without these the initialization will fail.\n- *\n+ * <p>\n  * Though consistencyLevel is not mandatory, but we strongly suggest to pay attention to this API when building client.\n- * By default, database account level consistency level is used if none is provided.\n- *\n+ * By default, SESSION consistency level is used if none is provided.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67fb20faf9ff2f31083f0704897255d9d7301dd5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxNzQ0Mw==", "bodyText": "This will enable us treat it a as bug fix for later, otherwise its always required behavior.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11442#discussion_r430917443", "createdAt": "2020-05-27T07:40:48Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "diffHunk": "@@ -16,12 +16,13 @@\n /**\n  * Helper class to build CosmosAsyncClient {@link CosmosAsyncClient} and CosmosClient {@link CosmosClient}\n  * instances as logical representation of the Azure Cosmos database service.\n- *\n+ * <p>\n  * When building client, endpoint() and key() are mandatory APIs, without these the initialization will fail.\n- *\n+ * <p>\n  * Though consistencyLevel is not mandatory, but we strongly suggest to pay attention to this API when building client.\n- * By default, database account level consistency level is used if none is provided.\n- *\n+ * By default, SESSION consistency level is used if none is provided.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxNzEwNA=="}, "originalCommit": {"oid": "67fb20faf9ff2f31083f0704897255d9d7301dd5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2NDMyNg==", "bodyText": "Good point, but is it okay to represent false documentation when we know its a bug at first place ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11442#discussion_r431264326", "createdAt": "2020-05-27T16:07:54Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "diffHunk": "@@ -16,12 +16,13 @@\n /**\n  * Helper class to build CosmosAsyncClient {@link CosmosAsyncClient} and CosmosClient {@link CosmosClient}\n  * instances as logical representation of the Azure Cosmos database service.\n- *\n+ * <p>\n  * When building client, endpoint() and key() are mandatory APIs, without these the initialization will fail.\n- *\n+ * <p>\n  * Though consistencyLevel is not mandatory, but we strongly suggest to pay attention to this API when building client.\n- * By default, database account level consistency level is used if none is provided.\n- *\n+ * By default, SESSION consistency level is used if none is provided.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxNzEwNA=="}, "originalCommit": {"oid": "67fb20faf9ff2f31083f0704897255d9d7301dd5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI4MDU3Ng==", "bodyText": "Changes done. Will treat this as a bug in future.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11442#discussion_r431280576", "createdAt": "2020-05-27T16:32:31Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "diffHunk": "@@ -16,12 +16,13 @@\n /**\n  * Helper class to build CosmosAsyncClient {@link CosmosAsyncClient} and CosmosClient {@link CosmosClient}\n  * instances as logical representation of the Azure Cosmos database service.\n- *\n+ * <p>\n  * When building client, endpoint() and key() are mandatory APIs, without these the initialization will fail.\n- *\n+ * <p>\n  * Though consistencyLevel is not mandatory, but we strongly suggest to pay attention to this API when building client.\n- * By default, database account level consistency level is used if none is provided.\n- *\n+ * By default, SESSION consistency level is used if none is provided.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxNzEwNA=="}, "originalCommit": {"oid": "67fb20faf9ff2f31083f0704897255d9d7301dd5"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDA1NzE4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Conflict.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzo0MTo0OFrOGa9JgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjowODoxMlrOGbSTGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxODAxNw==", "bodyText": "Is it supposed to be non-public?\nIts in implementation, guess its okey.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11442#discussion_r430918017", "createdAt": "2020-05-27T07:41:48Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Conflict.java", "diffHunk": "@@ -42,7 +42,7 @@ public String getOperationKind() {\n      *\n      * @return the resource type.\n      */\n-    public String getResouceType() {\n+    public String getResourceType() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67fb20faf9ff2f31083f0704897255d9d7301dd5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2NDUzOA==", "bodyText": "Yes, implementation detail. Its fine if it is public.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11442#discussion_r431264538", "createdAt": "2020-05-27T16:08:12Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Conflict.java", "diffHunk": "@@ -42,7 +42,7 @@ public String getOperationKind() {\n      *\n      * @return the resource type.\n      */\n-    public String getResouceType() {\n+    public String getResourceType() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxODAxNw=="}, "originalCommit": {"oid": "67fb20faf9ff2f31083f0704897255d9d7301dd5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDA3MjYzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionTokenHelper.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzo0NjoxNVrOGa9TPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzo0NjoxOFrOGbWKxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyMDUwOQ==", "bodyText": "Wow, that was a bug?\nIs PKrangeID always guaranteed in this code path?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11442#discussion_r430920509", "createdAt": "2020-05-27T07:46:15Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionTokenHelper.java", "diffHunk": "@@ -154,7 +154,8 @@ static boolean tryParse(String sessionToken, ValueHolder<ISessionToken> parsedSe\n     public static void validateAndRemoveSessionToken(RxDocumentServiceRequest request) {\n         String sessionToken = request.getHeaders().get(HttpConstants.HttpHeaders.SESSION_TOKEN);\n         if (!Strings.isNullOrEmpty(sessionToken)) {\n-            getLocalSessionToken(request, sessionToken, StringUtils.EMPTY);\n+            String partitionKeyRangeId = request.requestContext.resolvedPartitionKeyRange.getId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67fb20faf9ff2f31083f0704897255d9d7301dd5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI3MjAyNw==", "bodyText": "this is for validation. Why this change is needed?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11442#discussion_r431272027", "createdAt": "2020-05-27T16:19:17Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionTokenHelper.java", "diffHunk": "@@ -154,7 +154,8 @@ static boolean tryParse(String sessionToken, ValueHolder<ISessionToken> parsedSe\n     public static void validateAndRemoveSessionToken(RxDocumentServiceRequest request) {\n         String sessionToken = request.getHeaders().get(HttpConstants.HttpHeaders.SESSION_TOKEN);\n         if (!Strings.isNullOrEmpty(sessionToken)) {\n-            getLocalSessionToken(request, sessionToken, StringUtils.EMPTY);\n+            String partitionKeyRangeId = request.requestContext.resolvedPartitionKeyRange.getId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyMDUwOQ=="}, "originalCommit": {"oid": "67fb20faf9ff2f31083f0704897255d9d7301dd5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI3MjM4Mg==", "bodyText": "Yes, this was a bug.\nIt is guaranteed, if not present, then it is a bug.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11442#discussion_r431272382", "createdAt": "2020-05-27T16:19:47Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionTokenHelper.java", "diffHunk": "@@ -154,7 +154,8 @@ static boolean tryParse(String sessionToken, ValueHolder<ISessionToken> parsedSe\n     public static void validateAndRemoveSessionToken(RxDocumentServiceRequest request) {\n         String sessionToken = request.getHeaders().get(HttpConstants.HttpHeaders.SESSION_TOKEN);\n         if (!Strings.isNullOrEmpty(sessionToken)) {\n-            getLocalSessionToken(request, sessionToken, StringUtils.EMPTY);\n+            String partitionKeyRangeId = request.requestContext.resolvedPartitionKeyRange.getId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyMDUwOQ=="}, "originalCommit": {"oid": "67fb20faf9ff2f31083f0704897255d9d7301dd5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI3NTAxMw==", "bodyText": "This code path will always throw IllegalStateException - because we are always passing empty string - here is the issue - #9053", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11442#discussion_r431275013", "createdAt": "2020-05-27T16:23:46Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionTokenHelper.java", "diffHunk": "@@ -154,7 +154,8 @@ static boolean tryParse(String sessionToken, ValueHolder<ISessionToken> parsedSe\n     public static void validateAndRemoveSessionToken(RxDocumentServiceRequest request) {\n         String sessionToken = request.getHeaders().get(HttpConstants.HttpHeaders.SESSION_TOKEN);\n         if (!Strings.isNullOrEmpty(sessionToken)) {\n-            getLocalSessionToken(request, sessionToken, StringUtils.EMPTY);\n+            String partitionKeyRangeId = request.requestContext.resolvedPartitionKeyRange.getId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyMDUwOQ=="}, "originalCommit": {"oid": "67fb20faf9ff2f31083f0704897255d9d7301dd5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI3OTU1MA==", "bodyText": "@kushagraThapar #9053 is for the PartitionKey.None is that right link?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11442#discussion_r431279550", "createdAt": "2020-05-27T16:30:48Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionTokenHelper.java", "diffHunk": "@@ -154,7 +154,8 @@ static boolean tryParse(String sessionToken, ValueHolder<ISessionToken> parsedSe\n     public static void validateAndRemoveSessionToken(RxDocumentServiceRequest request) {\n         String sessionToken = request.getHeaders().get(HttpConstants.HttpHeaders.SESSION_TOKEN);\n         if (!Strings.isNullOrEmpty(sessionToken)) {\n-            getLocalSessionToken(request, sessionToken, StringUtils.EMPTY);\n+            String partitionKeyRangeId = request.requestContext.resolvedPartitionKeyRange.getId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyMDUwOQ=="}, "originalCommit": {"oid": "67fb20faf9ff2f31083f0704897255d9d7301dd5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI4MDEwOA==", "bodyText": "Yes, my bad. Here is the right link - #10493", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11442#discussion_r431280108", "createdAt": "2020-05-27T16:31:43Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionTokenHelper.java", "diffHunk": "@@ -154,7 +154,8 @@ static boolean tryParse(String sessionToken, ValueHolder<ISessionToken> parsedSe\n     public static void validateAndRemoveSessionToken(RxDocumentServiceRequest request) {\n         String sessionToken = request.getHeaders().get(HttpConstants.HttpHeaders.SESSION_TOKEN);\n         if (!Strings.isNullOrEmpty(sessionToken)) {\n-            getLocalSessionToken(request, sessionToken, StringUtils.EMPTY);\n+            String partitionKeyRangeId = request.requestContext.resolvedPartitionKeyRange.getId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyMDUwOQ=="}, "originalCommit": {"oid": "67fb20faf9ff2f31083f0704897255d9d7301dd5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI4Mjc5OQ==", "bodyText": "@kirankumarkolli @kushagraThapar  .Net seem to be doing the same thing as we used to do here:\nSessionTokenHelper.cs:\npublic static void ValidateAndRemoveSessionToken(DocumentServiceRequest request)\n{\n    string sessionToken = request.Headers[HttpConstants.HttpHeaders.SessionToken];\n    if (!string.IsNullOrEmpty(sessionToken))\n    {\n        GetLocalSessionToken(request, sessionToken, string.Empty);\n         request.Headers.Remove(HttpConstants.HttpHeaders.SessionToken);\n    }\n}", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11442#discussion_r431282799", "createdAt": "2020-05-27T16:35:36Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionTokenHelper.java", "diffHunk": "@@ -154,7 +154,8 @@ static boolean tryParse(String sessionToken, ValueHolder<ISessionToken> parsedSe\n     public static void validateAndRemoveSessionToken(RxDocumentServiceRequest request) {\n         String sessionToken = request.getHeaders().get(HttpConstants.HttpHeaders.SESSION_TOKEN);\n         if (!Strings.isNullOrEmpty(sessionToken)) {\n-            getLocalSessionToken(request, sessionToken, StringUtils.EMPTY);\n+            String partitionKeyRangeId = request.requestContext.resolvedPartitionKeyRange.getId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyMDUwOQ=="}, "originalCommit": {"oid": "67fb20faf9ff2f31083f0704897255d9d7301dd5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI5MDIxNg==", "bodyText": "True, but .Net doesn't throw Exception on passing empty partition key range id. Like we do:\nif (partitionKeyRangeId == null || partitionKeyRangeId.isEmpty()) {\n            // AddressCache/address resolution didn't produce partition key range id.\n            // In this case it is a bug.\n            throw new IllegalStateException(\"Partition key range Id is absent in the context.\");\n        }\n\nMay be we should get rid of this exception clause then, instead of passing partitionId and keep passing empty string to be in parity with .Net ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11442#discussion_r431290216", "createdAt": "2020-05-27T16:45:59Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionTokenHelper.java", "diffHunk": "@@ -154,7 +154,8 @@ static boolean tryParse(String sessionToken, ValueHolder<ISessionToken> parsedSe\n     public static void validateAndRemoveSessionToken(RxDocumentServiceRequest request) {\n         String sessionToken = request.getHeaders().get(HttpConstants.HttpHeaders.SESSION_TOKEN);\n         if (!Strings.isNullOrEmpty(sessionToken)) {\n-            getLocalSessionToken(request, sessionToken, StringUtils.EMPTY);\n+            String partitionKeyRangeId = request.requestContext.resolvedPartitionKeyRange.getId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyMDUwOQ=="}, "originalCommit": {"oid": "67fb20faf9ff2f31083f0704897255d9d7301dd5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMyNzk0MQ==", "bodyText": "Discussed offline with @moderakh\nFinal logic is, we will just get rid of partitionKeyRangeId.isEmpty() check.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11442#discussion_r431327941", "createdAt": "2020-05-27T17:46:18Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionTokenHelper.java", "diffHunk": "@@ -154,7 +154,8 @@ static boolean tryParse(String sessionToken, ValueHolder<ISessionToken> parsedSe\n     public static void validateAndRemoveSessionToken(RxDocumentServiceRequest request) {\n         String sessionToken = request.getHeaders().get(HttpConstants.HttpHeaders.SESSION_TOKEN);\n         if (!Strings.isNullOrEmpty(sessionToken)) {\n-            getLocalSessionToken(request, sessionToken, StringUtils.EMPTY);\n+            String partitionKeyRangeId = request.requestContext.resolvedPartitionKeyRange.getId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyMDUwOQ=="}, "originalCommit": {"oid": "67fb20faf9ff2f31083f0704897255d9d7301dd5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjIwMjgyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/PartitionKeyInternal.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjoyMDowN1rOGbSyoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjozMTo1MFrOGbTQLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI3MjYwOQ==", "bodyText": "please add a unit test for the change. See PartitionKeyInternalTest for existing tests.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11442#discussion_r431272609", "createdAt": "2020-05-27T16:20:07Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/PartitionKeyInternal.java", "diffHunk": "@@ -259,11 +259,14 @@ public void serialize(PartitionKeyInternal partitionKey, JsonGenerator writer, S\n                     return;\n                 }\n \n-                writer.writeStartArray();\n-                for (IPartitionKeyComponent componentValue : partitionKey.getComponents()) {\n-                    componentValue.jsonEncode(writer);\n+                //  PartitionKey.None has null components - which returns a null list\n+                if (partitionKey.getComponents() != null) {\n+                    writer.writeStartArray();\n+                    for (IPartitionKeyComponent componentValue : partitionKey.getComponents()) {\n+                        componentValue.jsonEncode(writer);\n+                    }\n+                    writer.writeEndArray();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67fb20faf9ff2f31083f0704897255d9d7301dd5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI3NTE1MQ==", "bodyText": "Sure, will do.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11442#discussion_r431275151", "createdAt": "2020-05-27T16:23:57Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/PartitionKeyInternal.java", "diffHunk": "@@ -259,11 +259,14 @@ public void serialize(PartitionKeyInternal partitionKey, JsonGenerator writer, S\n                     return;\n                 }\n \n-                writer.writeStartArray();\n-                for (IPartitionKeyComponent componentValue : partitionKey.getComponents()) {\n-                    componentValue.jsonEncode(writer);\n+                //  PartitionKey.None has null components - which returns a null list\n+                if (partitionKey.getComponents() != null) {\n+                    writer.writeStartArray();\n+                    for (IPartitionKeyComponent componentValue : partitionKey.getComponents()) {\n+                        componentValue.jsonEncode(writer);\n+                    }\n+                    writer.writeEndArray();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI3MjYwOQ=="}, "originalCommit": {"oid": "67fb20faf9ff2f31083f0704897255d9d7301dd5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI4MDE3Mw==", "bodyText": "Added unit test.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11442#discussion_r431280173", "createdAt": "2020-05-27T16:31:50Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/PartitionKeyInternal.java", "diffHunk": "@@ -259,11 +259,14 @@ public void serialize(PartitionKeyInternal partitionKey, JsonGenerator writer, S\n                     return;\n                 }\n \n-                writer.writeStartArray();\n-                for (IPartitionKeyComponent componentValue : partitionKey.getComponents()) {\n-                    componentValue.jsonEncode(writer);\n+                //  PartitionKey.None has null components - which returns a null list\n+                if (partitionKey.getComponents() != null) {\n+                    writer.writeStartArray();\n+                    for (IPartitionKeyComponent componentValue : partitionKey.getComponents()) {\n+                        componentValue.jsonEncode(writer);\n+                    }\n+                    writer.writeEndArray();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI3MjYwOQ=="}, "originalCommit": {"oid": "67fb20faf9ff2f31083f0704897255d9d7301dd5"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4146, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}