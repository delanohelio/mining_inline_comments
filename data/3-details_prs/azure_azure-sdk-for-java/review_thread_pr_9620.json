{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NTAxNjEz", "number": 9620, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTozOTowNFrODsHpBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjoxMDo0NFrODsIelw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTg5MTI2OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/IndexAction.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTozOTowNFrOF82uqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODo0Mjo1OVrOF89tUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1NTU2Mw==", "bodyText": "Did you mean to make this public again?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9620#discussion_r399355563", "createdAt": "2020-03-27T15:39:04Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/IndexAction.java", "diffHunk": "@@ -29,7 +29,7 @@\n     private Map<String, Object> properties;\n \n     @JsonAnyGetter\n-    private Map<String, Object> getParamMap() {\n+    public Map<String, Object> getParamMap() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "324b114a859997543dc881e76c8c88fb204a5be6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM3MTU1OQ==", "bodyText": "For indexAction, we can define either a map (properties) or an object(document).\nIf we made this private, we cannot access properties only document.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9620#discussion_r399371559", "createdAt": "2020-03-27T16:01:52Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/IndexAction.java", "diffHunk": "@@ -29,7 +29,7 @@\n     private Map<String, Object> properties;\n \n     @JsonAnyGetter\n-    private Map<String, Object> getParamMap() {\n+    public Map<String, Object> getParamMap() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1NTU2Mw=="}, "originalCommit": {"oid": "324b114a859997543dc881e76c8c88fb204a5be6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM3NDAyNA==", "bodyText": "Could this be package private instead?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9620#discussion_r399374024", "createdAt": "2020-03-27T16:05:34Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/IndexAction.java", "diffHunk": "@@ -29,7 +29,7 @@\n     private Map<String, Object> properties;\n \n     @JsonAnyGetter\n-    private Map<String, Object> getParamMap() {\n+    public Map<String, Object> getParamMap() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1NTU2Mw=="}, "originalCommit": {"oid": "324b114a859997543dc881e76c8c88fb204a5be6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ0ODA5Mw==", "bodyText": "https://docs.microsoft.com/en-us/rest/api/searchservice/addupdate-or-delete-documents#response", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9620#discussion_r399448093", "createdAt": "2020-03-27T18:03:08Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/IndexAction.java", "diffHunk": "@@ -29,7 +29,7 @@\n     private Map<String, Object> properties;\n \n     @JsonAnyGetter\n-    private Map<String, Object> getParamMap() {\n+    public Map<String, Object> getParamMap() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1NTU2Mw=="}, "originalCommit": {"oid": "324b114a859997543dc881e76c8c88fb204a5be6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2NzU4OQ==", "bodyText": "It cannot be private as we the index batch operation is supported.\npublic Mono<IndexDocumentsResult> indexDocuments(IndexDocumentsBatch<?> batch)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9620#discussion_r399467589", "createdAt": "2020-03-27T18:38:45Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/IndexAction.java", "diffHunk": "@@ -29,7 +29,7 @@\n     private Map<String, Object> properties;\n \n     @JsonAnyGetter\n-    private Map<String, Object> getParamMap() {\n+    public Map<String, Object> getParamMap() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1NTU2Mw=="}, "originalCommit": {"oid": "324b114a859997543dc881e76c8c88fb204a5be6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2OTkwNQ==", "bodyText": "What we can do is to rename it to something make more sense", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9620#discussion_r399469905", "createdAt": "2020-03-27T18:42:59Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/IndexAction.java", "diffHunk": "@@ -29,7 +29,7 @@\n     private Map<String, Object> properties;\n \n     @JsonAnyGetter\n-    private Map<String, Object> getParamMap() {\n+    public Map<String, Object> getParamMap() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1NTU2Mw=="}, "originalCommit": {"oid": "324b114a859997543dc881e76c8c88fb204a5be6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTkwMTQzOnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/test/java/com/azure/search/documents/test/environment/setup/AzureSearchResources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo0MToyNlrOF820-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo0MToyNlrOF820-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1NzE3OA==", "bodyText": "Since there is a default hardcoded test resource group you can get rid of the null or empty check and just use the following here.\nString resourcegroupname = Configuration.getGlobalConfiguration().get(AZURE_RESOURCEGROUP_NAME, TEST_RESOURCE_GROUP);\nThis is effectively a get or default.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9620#discussion_r399357178", "createdAt": "2020-03-27T15:41:26Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/test/java/com/azure/search/documents/test/environment/setup/AzureSearchResources.java", "diffHunk": "@@ -121,7 +122,7 @@ public void createResourceGroup() {\n         String resourceGroupName = Configuration.getGlobalConfiguration().get(AZURE_RESOURCEGROUP_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "324b114a859997543dc881e76c8c88fb204a5be6"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTkyMjkzOnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/IndexBatchException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo0NjoxNVrOF83CVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjoxODo0OFrOF84ZAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2MDU5Ng==", "bodyText": "This could be simplified a lot.\nreturn statusCode == 422 || statusCode == 409 || statusCode == 503;\nDefinitely add a comment for why those status codes are considered for retry but others aren't, for example 503 is allow since the server failed to process the request properly, etc", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9620#discussion_r399360596", "createdAt": "2020-03-27T15:46:15Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/IndexBatchException.java", "diffHunk": "@@ -0,0 +1,122 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.models;\n+\n+import com.azure.core.exception.AzureException;\n+import com.azure.search.documents.SearchDocument;\n+import com.azure.search.documents.models.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * An {@code IndexBatchException} is thrown whenever Azure Cognitive Search index call was only partially successful.\n+ * Users can inspect the indexingResults to determine the operation(s) that have failed.\n+ */\n+public final class IndexBatchException extends AzureException {\n+    private static final long serialVersionUID = -3478124828996650248L;\n+    private static final String MESSAGE_FORMAT = \"%s of %s indexing actions in the batch failed. The remaining\"\n+        + \" actions succeeded and modified the index. Check indexingResults for the status of each index action.\";\n+\n+    private final ArrayList<IndexingResult> results;\n+\n+    /**\n+     * Constructs an {@code IndexBatchException} from the given {@link IndexDocumentsResult}.\n+     *\n+     * @param result The DocumentIndexResult returned from the service.\n+     */\n+    public IndexBatchException(IndexDocumentsResult result) {\n+        super(createMessage(result));\n+        this.results = new ArrayList<>(result.getResults());\n+    }\n+\n+    /**\n+     * Finds all index actions in the given batch that failed and need to be retried, and returns them in a new batch.\n+     *\n+     * @param originalBatch The batch that partially failed indexing.\n+     * @param keyFieldName The name of the key field from the index schema.\n+     * @return A new batch containing all the actions from the given batch that failed and should be retried.\n+     */\n+    public IndexBatchBase<SearchDocument> findFailedActionsToRetry(IndexBatchBase<SearchDocument> originalBatch,\n+        String keyFieldName) {\n+        return findFailedActionsToRetry(originalBatch, searchDocument -> searchDocument.get(keyFieldName).toString());\n+    }\n+\n+    /**\n+     * Finds all index actions in the given batch that failed and need to be retried, and returns them in a new batch.\n+     *\n+     * @param originBatch The batch that partially failed indexing.\n+     * @param keySelector A lambda that retrieves a key value from a given document of type T.\n+     * @param <T> The CLR type that maps to the index schema. Instances of this type can be stored as documents\n+     * in the index.\n+     * @return A new batch containing all the actions from the given batch that failed and should be retried.\n+     */\n+    public <T> IndexBatchBase<T> findFailedActionsToRetry(IndexBatchBase<T> originBatch,\n+        Function<T, String> keySelector) {\n+        List<IndexAction<T>> failedActions = doFindFailedActionsToRetry(originBatch, keySelector);\n+        return new IndexBatchBase<T>().setActions(failedActions);\n+    }\n+\n+    /**\n+     * @return The indexing results returned by the service.\n+     */\n+    public List<IndexingResult> getIndexingResults() {\n+        return this.results;\n+    }\n+\n+    private static String createMessage(IndexDocumentsResult result) {\n+        long failedResultCount = result.getResults().stream()\n+            .filter(r -> !r.isSucceeded())\n+            .count();\n+        return String.format(MESSAGE_FORMAT, failedResultCount, result.getResults().size());\n+    }\n+\n+    private <T> List<IndexAction<T>> doFindFailedActionsToRetry(IndexBatchBase<T> originBatch,\n+        Function<T, String> keySelector) {\n+        Set<String> uniqueRetriableKeys = getIndexingResults().stream().filter(result ->\n+            isRetriableStatusCode(result.getStatusCode())).map(IndexingResult::getKey).collect(Collectors.toSet());\n+        return originBatch.getActions().stream().filter(action -> isActionIncluded(action,\n+            uniqueRetriableKeys, keySelector))\n+            .collect(Collectors.toList());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private <T> boolean isActionIncluded(IndexAction<T> action, Set<String> uniqueRetriableKeys,\n+        Function<T, String> keySelector) {\n+        if (action.getDocument() != null) {\n+            return uniqueRetriableKeys.contains(keySelector.apply(action.getDocument()));\n+        } else if (action.getParamMap() != null) {\n+            return uniqueRetriableKeys.contains(keySelector.apply((T) action.getParamMap()));\n+        }\n+        return false;\n+    }\n+\n+    private static boolean isRetriableStatusCode(int statusCode) {\n+        switch (statusCode) {\n+            case 200:\n+            case 201:\n+                return false;   // Don't retry on success.\n+\n+            case 404:\n+            case 400:\n+                return false;   // Don't retry on user error.\n+\n+            case 500:\n+                return false;   // Don't retry when something unexpected happened.\n+\n+            case 422:\n+            case 409:\n+            case 503:\n+                return true;    // The above cases might succeed on a subsequent retry.\n+\n+            default:\n+                // If this happens, it's a bug. Safest to assume no retry.\n+                return false;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "324b114a859997543dc881e76c8c88fb204a5be6"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM4Mjc4NQ==", "bodyText": "This is copied from .net. Need to double check", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9620#discussion_r399382785", "createdAt": "2020-03-27T16:18:48Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/IndexBatchException.java", "diffHunk": "@@ -0,0 +1,122 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.models;\n+\n+import com.azure.core.exception.AzureException;\n+import com.azure.search.documents.SearchDocument;\n+import com.azure.search.documents.models.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * An {@code IndexBatchException} is thrown whenever Azure Cognitive Search index call was only partially successful.\n+ * Users can inspect the indexingResults to determine the operation(s) that have failed.\n+ */\n+public final class IndexBatchException extends AzureException {\n+    private static final long serialVersionUID = -3478124828996650248L;\n+    private static final String MESSAGE_FORMAT = \"%s of %s indexing actions in the batch failed. The remaining\"\n+        + \" actions succeeded and modified the index. Check indexingResults for the status of each index action.\";\n+\n+    private final ArrayList<IndexingResult> results;\n+\n+    /**\n+     * Constructs an {@code IndexBatchException} from the given {@link IndexDocumentsResult}.\n+     *\n+     * @param result The DocumentIndexResult returned from the service.\n+     */\n+    public IndexBatchException(IndexDocumentsResult result) {\n+        super(createMessage(result));\n+        this.results = new ArrayList<>(result.getResults());\n+    }\n+\n+    /**\n+     * Finds all index actions in the given batch that failed and need to be retried, and returns them in a new batch.\n+     *\n+     * @param originalBatch The batch that partially failed indexing.\n+     * @param keyFieldName The name of the key field from the index schema.\n+     * @return A new batch containing all the actions from the given batch that failed and should be retried.\n+     */\n+    public IndexBatchBase<SearchDocument> findFailedActionsToRetry(IndexBatchBase<SearchDocument> originalBatch,\n+        String keyFieldName) {\n+        return findFailedActionsToRetry(originalBatch, searchDocument -> searchDocument.get(keyFieldName).toString());\n+    }\n+\n+    /**\n+     * Finds all index actions in the given batch that failed and need to be retried, and returns them in a new batch.\n+     *\n+     * @param originBatch The batch that partially failed indexing.\n+     * @param keySelector A lambda that retrieves a key value from a given document of type T.\n+     * @param <T> The CLR type that maps to the index schema. Instances of this type can be stored as documents\n+     * in the index.\n+     * @return A new batch containing all the actions from the given batch that failed and should be retried.\n+     */\n+    public <T> IndexBatchBase<T> findFailedActionsToRetry(IndexBatchBase<T> originBatch,\n+        Function<T, String> keySelector) {\n+        List<IndexAction<T>> failedActions = doFindFailedActionsToRetry(originBatch, keySelector);\n+        return new IndexBatchBase<T>().setActions(failedActions);\n+    }\n+\n+    /**\n+     * @return The indexing results returned by the service.\n+     */\n+    public List<IndexingResult> getIndexingResults() {\n+        return this.results;\n+    }\n+\n+    private static String createMessage(IndexDocumentsResult result) {\n+        long failedResultCount = result.getResults().stream()\n+            .filter(r -> !r.isSucceeded())\n+            .count();\n+        return String.format(MESSAGE_FORMAT, failedResultCount, result.getResults().size());\n+    }\n+\n+    private <T> List<IndexAction<T>> doFindFailedActionsToRetry(IndexBatchBase<T> originBatch,\n+        Function<T, String> keySelector) {\n+        Set<String> uniqueRetriableKeys = getIndexingResults().stream().filter(result ->\n+            isRetriableStatusCode(result.getStatusCode())).map(IndexingResult::getKey).collect(Collectors.toSet());\n+        return originBatch.getActions().stream().filter(action -> isActionIncluded(action,\n+            uniqueRetriableKeys, keySelector))\n+            .collect(Collectors.toList());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private <T> boolean isActionIncluded(IndexAction<T> action, Set<String> uniqueRetriableKeys,\n+        Function<T, String> keySelector) {\n+        if (action.getDocument() != null) {\n+            return uniqueRetriableKeys.contains(keySelector.apply(action.getDocument()));\n+        } else if (action.getParamMap() != null) {\n+            return uniqueRetriableKeys.contains(keySelector.apply((T) action.getParamMap()));\n+        }\n+        return false;\n+    }\n+\n+    private static boolean isRetriableStatusCode(int statusCode) {\n+        switch (statusCode) {\n+            case 200:\n+            case 201:\n+                return false;   // Don't retry on success.\n+\n+            case 404:\n+            case 400:\n+                return false;   // Don't retry on user error.\n+\n+            case 500:\n+                return false;   // Don't retry when something unexpected happened.\n+\n+            case 422:\n+            case 409:\n+            case 503:\n+                return true;    // The above cases might succeed on a subsequent retry.\n+\n+            default:\n+                // If this happens, it's a bug. Safest to assume no retry.\n+                return false;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2MDU5Ng=="}, "originalCommit": {"oid": "324b114a859997543dc881e76c8c88fb204a5be6"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTk0ODY5OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/test/java/com/azure/search/documents/models/IndexBatchExceptionTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo1MjowM1rOF83SYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzoxMzowNlrOF86i_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2NDcwNw==", "bodyText": "You need to initialize mocking.\nMockitoAnnotations.initMocks(this);", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9620#discussion_r399364707", "createdAt": "2020-03-27T15:52:03Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/test/java/com/azure/search/documents/models/IndexBatchExceptionTests.java", "diffHunk": "@@ -0,0 +1,216 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.models;\n+\n+import com.azure.search.documents.SearchDocument;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.mockito.Mockito.mock;\n+\n+public class IndexBatchExceptionTests {\n+    private static final String KEY_FIELD_NAME = \"key\";\n+    private IndexDocumentsResult result;\n+\n+    @BeforeEach\n+    public void setup() {\n+        result = mock(IndexDocumentsResult.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "324b114a859997543dc881e76c8c88fb204a5be6"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQxODEwOA==", "bodyText": "Is this needed? As I do not initialize the mock through annotation.\nInitializes objects annotated with Mockito annotations for given testClass: @Mock, @Spy, @Captor, @InjectMocks", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9620#discussion_r399418108", "createdAt": "2020-03-27T17:13:06Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/src/test/java/com/azure/search/documents/models/IndexBatchExceptionTests.java", "diffHunk": "@@ -0,0 +1,216 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.models;\n+\n+import com.azure.search.documents.SearchDocument;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.mockito.Mockito.mock;\n+\n+public class IndexBatchExceptionTests {\n+    private static final String KEY_FIELD_NAME = \"key\";\n+    private IndexDocumentsResult result;\n+\n+    @BeforeEach\n+    public void setup() {\n+        result = mock(IndexDocumentsResult.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2NDcwNw=="}, "originalCommit": {"oid": "324b114a859997543dc881e76c8c88fb204a5be6"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTk1MDgwOnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/test/java/com/azure/search/documents/models/IndexBatchExceptionTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo1MjozN1rOF83TzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo1MjozN1rOF83TzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2NTA2OA==", "bodyText": "You also need to cleanup mocking.\n@AfterEach\n    public void clearMocks() {\n        Mockito.framework().clearInlineMocks();\n    }", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9620#discussion_r399365068", "createdAt": "2020-03-27T15:52:37Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/test/java/com/azure/search/documents/models/IndexBatchExceptionTests.java", "diffHunk": "@@ -0,0 +1,216 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.models;\n+\n+import com.azure.search.documents.SearchDocument;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.mockito.Mockito.mock;\n+\n+public class IndexBatchExceptionTests {\n+    private static final String KEY_FIELD_NAME = \"key\";\n+    private IndexDocumentsResult result;\n+\n+    @BeforeEach\n+    public void setup() {\n+        result = mock(IndexDocumentsResult.class);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "324b114a859997543dc881e76c8c88fb204a5be6"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTk2OTU0OnYy", "diffSide": "RIGHT", "path": "eng/pipelines/templates/jobs/archetype-sdk-tests.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo1Njo1OFrOF83fpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjowODoxMVrOF839fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2ODEwMg==", "bodyText": "Typo?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9620#discussion_r399368102", "createdAt": "2020-03-27T15:56:58Z", "author": {"login": "alzimmermsft"}, "path": "eng/pipelines/templates/jobs/archetype-sdk-tests.yml", "diffHunk": "@@ -15,7 +15,7 @@ parameters:\n       OSVmImage: 'macOS-10.15'\n       JavaVersion: '1.8'\n       DisplayName: 'macOS - Java 8'\n-    Windows - Java 8:\n+    Windows - Java 8:IndexingSyncTests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6238e67081bc19eecea00e9fd907f572673b436"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM3NTc0Mg==", "bodyText": "Removed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9620#discussion_r399375742", "createdAt": "2020-03-27T16:08:11Z", "author": {"login": "sima-zhu"}, "path": "eng/pipelines/templates/jobs/archetype-sdk-tests.yml", "diffHunk": "@@ -15,7 +15,7 @@ parameters:\n       OSVmImage: 'macOS-10.15'\n       JavaVersion: '1.8'\n       DisplayName: 'macOS - Java 8'\n-    Windows - Java 8:\n+    Windows - Java 8:IndexingSyncTests", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2ODEwMg=="}, "originalCommit": {"oid": "d6238e67081bc19eecea00e9fd907f572673b436"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjAyODM5OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/IndexBatchException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjoxMDo0NFrOF84EfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjoxOToyMFrOF84aaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM3NzUzMg==", "bodyText": "By any chance was this copied from .NET? Java doesn't have a CLR \ud83d\ude03", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9620#discussion_r399377532", "createdAt": "2020-03-27T16:10:44Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/IndexBatchException.java", "diffHunk": "@@ -0,0 +1,120 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.models;\n+\n+import com.azure.core.exception.AzureException;\n+import com.azure.search.documents.SearchDocument;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * An {@code IndexBatchException} is thrown whenever Azure Cognitive Search index call was only partially successful.\n+ * Users can inspect the indexingResults to determine the operation(s) that have failed.\n+ */\n+public final class IndexBatchException extends AzureException {\n+    private static final long serialVersionUID = -3478124828996650248L;\n+    private static final String MESSAGE_FORMAT = \"%s of %s indexing actions in the batch failed. The remaining\"\n+        + \" actions succeeded and modified the index. Check indexingResults for the status of each index action.\";\n+\n+    private final ArrayList<IndexingResult> results;\n+\n+    /**\n+     * Constructs an {@code IndexBatchException} from the given {@link IndexDocumentsResult}.\n+     *\n+     * @param result The DocumentIndexResult returned from the service.\n+     */\n+    public IndexBatchException(IndexDocumentsResult result) {\n+        super(createMessage(result));\n+        this.results = new ArrayList<>(result.getResults());\n+    }\n+\n+    /**\n+     * Finds all index actions in the given batch that failed and need to be retried, and returns them in a new batch.\n+     *\n+     * @param originalBatch The batch that partially failed indexing.\n+     * @param keyFieldName The name of the key field from the index schema.\n+     * @return A new batch containing all the actions from the given batch that failed and should be retried.\n+     */\n+    public IndexBatchBase<SearchDocument> findFailedActionsToRetry(IndexBatchBase<SearchDocument> originalBatch,\n+        String keyFieldName) {\n+        return findFailedActionsToRetry(originalBatch, searchDocument -> searchDocument.get(keyFieldName).toString());\n+    }\n+\n+    /**\n+     * Finds all index actions in the given batch that failed and need to be retried, and returns them in a new batch.\n+     *\n+     * @param originBatch The batch that partially failed indexing.\n+     * @param keySelector A lambda that retrieves a key value from a given document of type T.\n+     * @param <T> The CLR type that maps to the index schema. Instances of this type can be stored as documents", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9e5523c672f87cc1e475af286ffd8b72ba4cdb1"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM4MzE0NA==", "bodyText": "Yes, it is copied from .net. Will change.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9620#discussion_r399383144", "createdAt": "2020-03-27T16:19:20Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/IndexBatchException.java", "diffHunk": "@@ -0,0 +1,120 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.models;\n+\n+import com.azure.core.exception.AzureException;\n+import com.azure.search.documents.SearchDocument;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * An {@code IndexBatchException} is thrown whenever Azure Cognitive Search index call was only partially successful.\n+ * Users can inspect the indexingResults to determine the operation(s) that have failed.\n+ */\n+public final class IndexBatchException extends AzureException {\n+    private static final long serialVersionUID = -3478124828996650248L;\n+    private static final String MESSAGE_FORMAT = \"%s of %s indexing actions in the batch failed. The remaining\"\n+        + \" actions succeeded and modified the index. Check indexingResults for the status of each index action.\";\n+\n+    private final ArrayList<IndexingResult> results;\n+\n+    /**\n+     * Constructs an {@code IndexBatchException} from the given {@link IndexDocumentsResult}.\n+     *\n+     * @param result The DocumentIndexResult returned from the service.\n+     */\n+    public IndexBatchException(IndexDocumentsResult result) {\n+        super(createMessage(result));\n+        this.results = new ArrayList<>(result.getResults());\n+    }\n+\n+    /**\n+     * Finds all index actions in the given batch that failed and need to be retried, and returns them in a new batch.\n+     *\n+     * @param originalBatch The batch that partially failed indexing.\n+     * @param keyFieldName The name of the key field from the index schema.\n+     * @return A new batch containing all the actions from the given batch that failed and should be retried.\n+     */\n+    public IndexBatchBase<SearchDocument> findFailedActionsToRetry(IndexBatchBase<SearchDocument> originalBatch,\n+        String keyFieldName) {\n+        return findFailedActionsToRetry(originalBatch, searchDocument -> searchDocument.get(keyFieldName).toString());\n+    }\n+\n+    /**\n+     * Finds all index actions in the given batch that failed and need to be retried, and returns them in a new batch.\n+     *\n+     * @param originBatch The batch that partially failed indexing.\n+     * @param keySelector A lambda that retrieves a key value from a given document of type T.\n+     * @param <T> The CLR type that maps to the index schema. Instances of this type can be stored as documents", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM3NzUzMg=="}, "originalCommit": {"oid": "c9e5523c672f87cc1e475af286ffd8b72ba4cdb1"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2114, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}