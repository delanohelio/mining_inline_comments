{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyNjU0NDQx", "number": 16247, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODoxMToxNlrOEtKfSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOToxMToxM1rOEtL2sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzkzMjI2OnYy", "diffSide": "LEFT", "path": "sdk/digitaltwins/azure-digitaltwins-core/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODoxMToxNlrOHgzY0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODoxMToxNlrOHgzY0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE1ODQxNw==", "bodyText": "We deleted the local swagger copy, so we don't need this part of our readme anymore", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16247#discussion_r504158417", "createdAt": "2020-10-13T18:11:16Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/README.md", "diffHunk": "@@ -59,11 +59,14 @@ You can familiarize yourself with different APIs using [samples for Digital Twin\n - The Digital Twins public sync and async clients [`DigitalTwinsClient`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java), [`DigitalTwinsAsyncClient`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java)\n - [`models` package](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/models)\n \n-### /src/swagger", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b621e2042a6edcf1cfb4a80511c8f0b47b95269a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzk2ODY5OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/DigitalTwinsRelationshipAsyncTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODoxNzo0NVrOHgzwbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODoyNDozM1rOHg0Alw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE2NDQ2MA==", "bodyText": "pageSize++?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16247#discussion_r504164460", "createdAt": "2020-10-13T18:17:45Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/DigitalTwinsRelationshipAsyncTest.java", "diffHunk": "@@ -268,39 +269,77 @@ public void relationshipListOperationWithMultiplePages(HttpClient httpClient, Di\n \n             // Connect the created twins via relationships\n             String floorContainsRoomPayload = getRelationshipWithPropertyPayload(roomTwinId, CONTAINS_RELATIONSHIP, \"isAccessRestricted\", true);\n+            String roomContainedInFloorPayload = getRelationshipPayload(floorTwinId, CONTAINED_IN_RELATIONSHIP);\n \n             // Create large number of relationships to test paging functionality\n             // Relationship list api does not have max item count request option so we have to create a large number of them to trigger paging functionality from the service.\n             // Create relationships from Floor -> Room\n-            final CountDownLatch createRelationshipsLatch = new CountDownLatch(BULK_RELATIONSHIP_COUNT);\n-\n-            for (int i = 0 ; i< BULK_RELATIONSHIP_COUNT ; i++) {\n+            for (int i = 0; i < pageSize++; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "346e7422eb51794c88f825efd5e3f88e86e7094d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE2ODU5OQ==", "bodyText": "Good catch, that's not right", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16247#discussion_r504168599", "createdAt": "2020-10-13T18:24:33Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/DigitalTwinsRelationshipAsyncTest.java", "diffHunk": "@@ -268,39 +269,77 @@ public void relationshipListOperationWithMultiplePages(HttpClient httpClient, Di\n \n             // Connect the created twins via relationships\n             String floorContainsRoomPayload = getRelationshipWithPropertyPayload(roomTwinId, CONTAINS_RELATIONSHIP, \"isAccessRestricted\", true);\n+            String roomContainedInFloorPayload = getRelationshipPayload(floorTwinId, CONTAINED_IN_RELATIONSHIP);\n \n             // Create large number of relationships to test paging functionality\n             // Relationship list api does not have max item count request option so we have to create a large number of them to trigger paging functionality from the service.\n             // Create relationships from Floor -> Room\n-            final CountDownLatch createRelationshipsLatch = new CountDownLatch(BULK_RELATIONSHIP_COUNT);\n-\n-            for (int i = 0 ; i< BULK_RELATIONSHIP_COUNT ; i++) {\n+            for (int i = 0; i < pageSize++; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE2NDQ2MA=="}, "originalCommit": {"oid": "346e7422eb51794c88f825efd5e3f88e86e7094d"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzk4NTM1OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/DigitalTwinsRelationshipAsyncTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODoyMTo0N1rOHgz6kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODoyMTo0N1rOHgz6kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE2NzA1Ng==", "bodyText": "Can this be something more like:\n    assertThat(\"Number of pages must be more than 1\",\n           outgoingRelationshipsPagecount.get(),\n           greaterThan(1));\nIn .NET at least, doing a comparison rather than asserting true or false gets you better test failure output.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16247#discussion_r504167056", "createdAt": "2020-10-13T18:21:47Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/DigitalTwinsRelationshipAsyncTest.java", "diffHunk": "@@ -268,39 +269,77 @@ public void relationshipListOperationWithMultiplePages(HttpClient httpClient, Di\n \n             // Connect the created twins via relationships\n             String floorContainsRoomPayload = getRelationshipWithPropertyPayload(roomTwinId, CONTAINS_RELATIONSHIP, \"isAccessRestricted\", true);\n+            String roomContainedInFloorPayload = getRelationshipPayload(floorTwinId, CONTAINED_IN_RELATIONSHIP);\n \n             // Create large number of relationships to test paging functionality\n             // Relationship list api does not have max item count request option so we have to create a large number of them to trigger paging functionality from the service.\n             // Create relationships from Floor -> Room\n-            final CountDownLatch createRelationshipsLatch = new CountDownLatch(BULK_RELATIONSHIP_COUNT);\n-\n-            for (int i = 0 ; i< BULK_RELATIONSHIP_COUNT ; i++) {\n+            for (int i = 0; i < pageSize++; i++) {\n                 String relationshipId = FLOOR_CONTAINS_ROOM_RELATIONSHIP_ID + this.testResourceNamer.randomUuid();\n-                asyncClient.createRelationship(floorTwinId, relationshipId, deserializeJsonString(floorContainsRoomPayload, BasicRelationship.class), BasicRelationship.class)\n-                    .doOnSuccess(s -> createdRelationshipIds.add(relationshipId))\n-                    .doOnTerminate(createRelationshipsLatch::countDown)\n-                    .subscribe();\n+                StepVerifier.create(\n+                    asyncClient.createRelationship(\n+                        floorTwinId,\n+                        relationshipId,\n+                        deserializeJsonString(floorContainsRoomPayload, BasicRelationship.class),\n+                        BasicRelationship.class)).verifyComplete();\n+                createdRelationshipIds.add(relationshipId);\n             }\n \n-            createRelationshipsLatch.await(MAX_WAIT_TIME_ASYNC_OPERATIONS_IN_SECONDS, TimeUnit.SECONDS);\n+            // Create multiple incoming relationships to the floor. Typically a room would have relationships to multiple\n+            // different floors, but for the sake of test simplicity, we'll just add multiple relationships from the same room\n+            // to the same floor.\n+            for (int i = 0; i < pageSize + 1; i++) {\n+                String relationshipId = ROOM_CONTAINED_IN_FLOOR_RELATIONSHIP_ID + this.testResourceNamer.randomUuid();\n+                StepVerifier.create(\n+                    asyncClient.createRelationship(\n+                        roomTwinId,\n+                        relationshipId,\n+                        deserializeJsonString(roomContainedInFloorPayload, BasicRelationship.class),\n+                        BasicRelationship.class)).verifyComplete();\n+                createdRelationshipIds.add(relationshipId);\n+            }\n \n-            AtomicInteger pageCount = new AtomicInteger();\n+            AtomicInteger outgoingRelationshipsPageCount = new AtomicInteger();\n             // List models in multiple pages and verify more than one page was retrieved.\n             StepVerifier.create(asyncClient.listRelationships(floorTwinId, BasicRelationship.class).byPage())\n                 .thenConsumeWhile(\n                     page -> {\n-                        pageCount.getAndIncrement();\n-                        logger.info(\"content for this page \" + pageCount);\n+                        outgoingRelationshipsPageCount.getAndIncrement();\n+                        logger.info(\"content for this page \" + outgoingRelationshipsPageCount);\n                         for (BasicRelationship relationship : page.getValue()) {\n                             logger.info(relationship.getId());\n                         }\n+\n+                        if (page.getContinuationToken() != null) {\n+                            assertEquals(RELATIONSHIP_PAGE_SIZE_DEFAULT, page.getValue().size(), \"Unexpected page size for a non-terminal page\");\n+                        }\n+\n                         return true;\n                     })\n                 .verifyComplete();\n \n-            int finalPageCount = pageCount.get();\n+            assertTrue(outgoingRelationshipsPageCount.get() > 1, \"Number of pages must be more than one.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "346e7422eb51794c88f825efd5e3f88e86e7094d"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzk4NTgzOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/resources/session-records/QueryTests.validQuerySucceeds[1].json", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODoyMTo1M1rOHgz6yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODozMzo0OVrOHg0UfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE2NzExNA==", "bodyText": "The file names are strange aren't they? [1]? when did that happen? do you know why?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16247#discussion_r504167114", "createdAt": "2020-10-13T18:21:53Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/resources/session-records/QueryTests.validQuerySucceeds[1].json", "diffHunk": "@@ -1,179 +1,1593 @@\n {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "346e7422eb51794c88f825efd5e3f88e86e7094d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE2OTE4Ng==", "bodyText": "I'm not sure why its happening, but yeah I noticed that last week. They still seem to work fine though", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16247#discussion_r504169186", "createdAt": "2020-10-13T18:25:31Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/resources/session-records/QueryTests.validQuerySucceeds[1].json", "diffHunk": "@@ -1,179 +1,1593 @@\n {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE2NzExNA=="}, "originalCommit": {"oid": "346e7422eb51794c88f825efd5e3f88e86e7094d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3MzY5Mw==", "bodyText": "It is an array of files, duh.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16247#discussion_r504173693", "createdAt": "2020-10-13T18:33:49Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/resources/session-records/QueryTests.validQuerySucceeds[1].json", "diffHunk": "@@ -1,179 +1,1593 @@\n {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE2NzExNA=="}, "originalCommit": {"oid": "346e7422eb51794c88f825efd5e3f88e86e7094d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzk4NzAxOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/DigitalTwinsRelationshipTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODoyMjoxNVrOHgz7hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODoyMjoxNVrOHgz7hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE2NzMwMQ==", "bodyText": "weird spacing issues in this statement", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16247#discussion_r504167301", "createdAt": "2020-10-13T18:22:15Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/DigitalTwinsRelationshipTest.java", "diffHunk": "@@ -221,22 +223,50 @@ public void relationshipListOperationWithMultiplePages(HttpClient httpClient, Di\n                 createdRelationshipIds.add(relationshipId);\n             }\n \n+            // Create multiple incoming relationships to the floor. Typically a room would have relationships to multiple\n+            // different floors, but for the sake of test simplicity, we'll just add multiple relationships from the same room\n+            // to the same floor.\n+            for (int i = 0 ; i< BULK_RELATIONSHIP_COUNT ; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "346e7422eb51794c88f825efd5e3f88e86e7094d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzk5MDU3OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/DigitalTwinsRelationshipAsyncTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODoyMzoxOVrOHgz91g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODoyNjozNFrOHg0FMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE2Nzg5NA==", "bodyText": "hmm, I expected this to be the BULK_RELATIONSHIP_COUNT instead of pageSize", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16247#discussion_r504167894", "createdAt": "2020-10-13T18:23:19Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/DigitalTwinsRelationshipAsyncTest.java", "diffHunk": "@@ -268,39 +269,77 @@ public void relationshipListOperationWithMultiplePages(HttpClient httpClient, Di\n \n             // Connect the created twins via relationships\n             String floorContainsRoomPayload = getRelationshipWithPropertyPayload(roomTwinId, CONTAINS_RELATIONSHIP, \"isAccessRestricted\", true);\n+            String roomContainedInFloorPayload = getRelationshipPayload(floorTwinId, CONTAINED_IN_RELATIONSHIP);\n \n             // Create large number of relationships to test paging functionality\n             // Relationship list api does not have max item count request option so we have to create a large number of them to trigger paging functionality from the service.\n             // Create relationships from Floor -> Room\n-            final CountDownLatch createRelationshipsLatch = new CountDownLatch(BULK_RELATIONSHIP_COUNT);\n-\n-            for (int i = 0 ; i< BULK_RELATIONSHIP_COUNT ; i++) {\n+            for (int i = 0; i < pageSize++; i++) {\n                 String relationshipId = FLOOR_CONTAINS_ROOM_RELATIONSHIP_ID + this.testResourceNamer.randomUuid();\n-                asyncClient.createRelationship(floorTwinId, relationshipId, deserializeJsonString(floorContainsRoomPayload, BasicRelationship.class), BasicRelationship.class)\n-                    .doOnSuccess(s -> createdRelationshipIds.add(relationshipId))\n-                    .doOnTerminate(createRelationshipsLatch::countDown)\n-                    .subscribe();\n+                StepVerifier.create(\n+                    asyncClient.createRelationship(\n+                        floorTwinId,\n+                        relationshipId,\n+                        deserializeJsonString(floorContainsRoomPayload, BasicRelationship.class),\n+                        BasicRelationship.class)).verifyComplete();\n+                createdRelationshipIds.add(relationshipId);\n             }\n \n-            createRelationshipsLatch.await(MAX_WAIT_TIME_ASYNC_OPERATIONS_IN_SECONDS, TimeUnit.SECONDS);\n+            // Create multiple incoming relationships to the floor. Typically a room would have relationships to multiple\n+            // different floors, but for the sake of test simplicity, we'll just add multiple relationships from the same room\n+            // to the same floor.\n+            for (int i = 0; i < pageSize + 1; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "346e7422eb51794c88f825efd5e3f88e86e7094d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE2ODIzNA==", "bodyText": "I think in this case you are only creating 5 relationships no? that's smaller than the default page size of 10", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16247#discussion_r504168234", "createdAt": "2020-10-13T18:23:55Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/DigitalTwinsRelationshipAsyncTest.java", "diffHunk": "@@ -268,39 +269,77 @@ public void relationshipListOperationWithMultiplePages(HttpClient httpClient, Di\n \n             // Connect the created twins via relationships\n             String floorContainsRoomPayload = getRelationshipWithPropertyPayload(roomTwinId, CONTAINS_RELATIONSHIP, \"isAccessRestricted\", true);\n+            String roomContainedInFloorPayload = getRelationshipPayload(floorTwinId, CONTAINED_IN_RELATIONSHIP);\n \n             // Create large number of relationships to test paging functionality\n             // Relationship list api does not have max item count request option so we have to create a large number of them to trigger paging functionality from the service.\n             // Create relationships from Floor -> Room\n-            final CountDownLatch createRelationshipsLatch = new CountDownLatch(BULK_RELATIONSHIP_COUNT);\n-\n-            for (int i = 0 ; i< BULK_RELATIONSHIP_COUNT ; i++) {\n+            for (int i = 0; i < pageSize++; i++) {\n                 String relationshipId = FLOOR_CONTAINS_ROOM_RELATIONSHIP_ID + this.testResourceNamer.randomUuid();\n-                asyncClient.createRelationship(floorTwinId, relationshipId, deserializeJsonString(floorContainsRoomPayload, BasicRelationship.class), BasicRelationship.class)\n-                    .doOnSuccess(s -> createdRelationshipIds.add(relationshipId))\n-                    .doOnTerminate(createRelationshipsLatch::countDown)\n-                    .subscribe();\n+                StepVerifier.create(\n+                    asyncClient.createRelationship(\n+                        floorTwinId,\n+                        relationshipId,\n+                        deserializeJsonString(floorContainsRoomPayload, BasicRelationship.class),\n+                        BasicRelationship.class)).verifyComplete();\n+                createdRelationshipIds.add(relationshipId);\n             }\n \n-            createRelationshipsLatch.await(MAX_WAIT_TIME_ASYNC_OPERATIONS_IN_SECONDS, TimeUnit.SECONDS);\n+            // Create multiple incoming relationships to the floor. Typically a room would have relationships to multiple\n+            // different floors, but for the sake of test simplicity, we'll just add multiple relationships from the same room\n+            // to the same floor.\n+            for (int i = 0; i < pageSize + 1; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE2Nzg5NA=="}, "originalCommit": {"oid": "346e7422eb51794c88f825efd5e3f88e86e7094d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE2OTc3OQ==", "bodyText": "Correct, I made a small mistake here. I was going to write this test the same way as the other pagination tests, but then I discovered we can't choose the page size here. I must have forgotten to revert this part after I made that discovery", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16247#discussion_r504169779", "createdAt": "2020-10-13T18:26:34Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/DigitalTwinsRelationshipAsyncTest.java", "diffHunk": "@@ -268,39 +269,77 @@ public void relationshipListOperationWithMultiplePages(HttpClient httpClient, Di\n \n             // Connect the created twins via relationships\n             String floorContainsRoomPayload = getRelationshipWithPropertyPayload(roomTwinId, CONTAINS_RELATIONSHIP, \"isAccessRestricted\", true);\n+            String roomContainedInFloorPayload = getRelationshipPayload(floorTwinId, CONTAINED_IN_RELATIONSHIP);\n \n             // Create large number of relationships to test paging functionality\n             // Relationship list api does not have max item count request option so we have to create a large number of them to trigger paging functionality from the service.\n             // Create relationships from Floor -> Room\n-            final CountDownLatch createRelationshipsLatch = new CountDownLatch(BULK_RELATIONSHIP_COUNT);\n-\n-            for (int i = 0 ; i< BULK_RELATIONSHIP_COUNT ; i++) {\n+            for (int i = 0; i < pageSize++; i++) {\n                 String relationshipId = FLOOR_CONTAINS_ROOM_RELATIONSHIP_ID + this.testResourceNamer.randomUuid();\n-                asyncClient.createRelationship(floorTwinId, relationshipId, deserializeJsonString(floorContainsRoomPayload, BasicRelationship.class), BasicRelationship.class)\n-                    .doOnSuccess(s -> createdRelationshipIds.add(relationshipId))\n-                    .doOnTerminate(createRelationshipsLatch::countDown)\n-                    .subscribe();\n+                StepVerifier.create(\n+                    asyncClient.createRelationship(\n+                        floorTwinId,\n+                        relationshipId,\n+                        deserializeJsonString(floorContainsRoomPayload, BasicRelationship.class),\n+                        BasicRelationship.class)).verifyComplete();\n+                createdRelationshipIds.add(relationshipId);\n             }\n \n-            createRelationshipsLatch.await(MAX_WAIT_TIME_ASYNC_OPERATIONS_IN_SECONDS, TimeUnit.SECONDS);\n+            // Create multiple incoming relationships to the floor. Typically a room would have relationships to multiple\n+            // different floors, but for the sake of test simplicity, we'll just add multiple relationships from the same room\n+            // to the same floor.\n+            for (int i = 0; i < pageSize + 1; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE2Nzg5NA=="}, "originalCommit": {"oid": "346e7422eb51794c88f825efd5e3f88e86e7094d"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODE1NjAxOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/QueryAsyncTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOToxMToxM1rOHg1kHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOToxMToxM1rOHg1kHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5NDA3OA==", "bodyText": "nit: fluent assertion here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16247#discussion_r504194078", "createdAt": "2020-10-13T19:11:13Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/QueryAsyncTests.java", "diffHunk": "@@ -60,11 +69,26 @@ public void validQuerySucceeds(HttpClient httpClient, DigitalTwinsServiceVersion\n                     return true;\n                 })\n                 .verifyComplete();\n+\n+            // Test that page size hint works, and that all returned pages either have the page size hint amount of\n+            // elements, or have no continuation token (signaling that it is the last page)\n+            AtomicInteger pageCount = new AtomicInteger(0);\n+            StepVerifier.create(asyncClient.query(queryString, BasicDigitalTwin.class, new QueryTwinsOptions().setMaxItemsPerPage(pageSize)).byPage())\n+                .thenConsumeWhile(digitalTwinsPage ->  {\n+                    pageCount.incrementAndGet();\n+                    if (digitalTwinsPage.getContinuationToken() != null) {\n+                        assertFalse(digitalTwinsPage.getValue().size() < pageSize, \"Unexpected page size for a non-terminal page\");\n+                    }\n+                    return true;\n+                })\n+                .verifyComplete();\n+\n+            assertTrue(pageCount.get() > 1, \"Expected more than one page of query results\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7867d71ceb8b7125d55d242c5c7bbaa7b29f48e4"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4098, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}