{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NzI1NTMx", "number": 14671, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMDoyNDo0OVrOEeiLNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyNDoyMlrOEfERIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNDUyNjYwOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMDoyNDo0OVrOHKPCvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMDoyNDo0OVrOHKPCvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ5NDI2OA==", "bodyText": "No need to review these changes, I'll be removing it later.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r480494268", "createdAt": "2020-09-01T00:24:49Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -400,44 +400,21 @@ public Mono<Response<Void>> deleteDigitalTwinWithResponse(String digitalTwinId,\n  *\n  * @param digitalTwinId The Id of the digital twin.\n  * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n- * @return The updated application/json digital twin.\n  */\n @ServiceMethod(returns = ReturnType.SINGLE)\n-public Mono<String> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n-\n- /**\n- * Updates a digital twin.\n- *\n- * @param digitalTwinId The Id of the digital twin.\n- * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n- * @param classType The model class to convert the response to.\n- * @return The updated application/json digital twin.\n- */\n-@ServiceMethod(returns = ReturnType.SINGLE)\n-public <T> Mono<T> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations, Class<T> classType)\n+public Mono<Void> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY2NzI1OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxNjowMVrOHLCo0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOTo0Mjo0NlrOHLFnIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzOTYwMQ==", "bodyText": "How about \"The deserialized application/json object representing the digital twin\"?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481339601", "createdAt": "2020-09-01T18:16:01Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -112,8 +131,31 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is Object and output is Response<T>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin created.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MDMzMw==", "bodyText": "Here and everywhere for this comment and below. We need to avoid using the phrase \"convert\" when we should be saying \"deserialize\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481340333", "createdAt": "2020-09-01T18:17:21Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -112,8 +131,31 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is Object and output is Response<T>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin created.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzOTYwMQ=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1MTc2MA==", "bodyText": "a string representation of a json object isn't deserialized though, right? If anything, it is serialized from a class to this string.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481351760", "createdAt": "2020-09-01T18:38:08Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -112,8 +131,31 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is Object and output is Response<T>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin created.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzOTYwMQ=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM4ODMyMQ==", "bodyText": "correct, that would be string representation", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481388321", "createdAt": "2020-09-01T19:42:46Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -112,8 +131,31 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is Object and output is Response<T>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin created.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzOTYwMQ=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY2ODE5OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxNjoyMlrOHLCpgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOTo0MzoxM1rOHLFoAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzOTc3OQ==", "bodyText": "\"The generic type to serialize and deserialize the digital twin with\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481339779", "createdAt": "2020-09-01T18:16:22Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -112,8 +131,31 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is Object and output is Response<T>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM4ODU0Ng==", "bodyText": "just deserialize right?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481388546", "createdAt": "2020-09-01T19:43:13Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -112,8 +131,31 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is Object and output is Response<T>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzOTc3OQ=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY2ODk0OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxNjozOVrOHLCqCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOTo1OTozMVrOHLGIog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzOTkxNA==", "bodyText": "\"The model class to serialize and deserialize the digital twin with\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481339914", "createdAt": "2020-09-01T18:16:39Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -112,8 +131,31 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is Object and output is Response<T>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MzM5MA==", "bodyText": "I think we should create a task on the board to go through all doc comments and ensure they are in sync.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481343390", "createdAt": "2020-09-01T18:22:49Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -112,8 +131,31 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is Object and output is Response<T>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzOTkxNA=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1MjUwOA==", "bodyText": "If that is an attempt to not try to do it right now, I'd advise not to do that. You'll create a monster and unpleasant work item for someone later.\nTry to get it as right as possible now. A task later would be to sanity check it and all ensure consistency.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481352508", "createdAt": "2020-09-01T18:39:44Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -112,8 +131,31 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is Object and output is Response<T>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzOTkxNA=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NDUzNA==", "bodyText": "@timtay-microsoft this method isn't doing both serialization and deserialization, so why mention both?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481354534", "createdAt": "2020-09-01T18:43:48Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -112,8 +131,31 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is Object and output is Response<T>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzOTkxNA=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NDc4Mg==", "bodyText": "Yes, I meant the 2nd option, since we already have a bunch of implementations (with javadoc comments) merged in, which used a different wording.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481354782", "createdAt": "2020-09-01T18:44:11Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -112,8 +131,31 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is Object and output is Response<T>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzOTkxNA=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2ODYyMw==", "bodyText": "Sure. I don't want to lower the bar for initial commits for comments. They should be held to the same standard as the code, at least. Agreed?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481368623", "createdAt": "2020-09-01T19:04:43Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -112,8 +131,31 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is Object and output is Response<T>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzOTkxNA=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2OTAxMQ==", "bodyText": "In the create method, we serialize their parameter to send it over the wire, and then we deserialize the http response payload into the same type. But yeah, we can circle back on documentation consistency later", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481369011", "createdAt": "2020-09-01T19:05:26Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -112,8 +131,31 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is Object and output is Response<T>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzOTkxNA=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3ODE5Ng==", "bodyText": "@timtay-microsoft you are right. I'm on board.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481378196", "createdAt": "2020-09-01T19:23:09Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -112,8 +131,31 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is Object and output is Response<T>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzOTkxNA=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM5Njg5OA==", "bodyText": "We only desiralize the response as per the \"clazz\". digital Twin input is Object. Am I missing something?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481396898", "createdAt": "2020-09-01T19:59:31Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -112,8 +131,31 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is Object and output is Response<T>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzOTkxNA=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY3MzE0OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxNzo0OVrOHLCs0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxNzo0OVrOHLCs0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MDYyNQ==", "bodyText": "An", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481340625", "createdAt": "2020-09-01T18:17:49Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a relationship: \", e);\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return A Http response containing the application/json digital twin", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY3NDA1OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxODowNVrOHLCtYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxODowNVrOHLCtYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MDc2OA==", "bodyText": "Capital An?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481340768", "createdAt": "2020-09-01T18:18:05Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a relationship: \", e);\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @return an empty Mono", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY3NTI1OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxODoyNlrOHLCuIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOToyNjozN1rOHLFGKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MDk2Mg==", "bodyText": "Aren't these return values supposed to be void with a lowercase 'v'?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481340962", "createdAt": "2020-09-01T18:18:26Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a relationship: \", e);\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @return an empty Mono\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new RequestOptions())\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @param options The optional settings for this request\n+     * @return A Http response\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options)\n+    {\n+        return withContext(context -> updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, options, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options, Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0Nzc1Ng==", "bodyText": "Not in this case, no.\nHere we want the <T> in Response<T> to be the class representation of the lower case void, which is upper case Void.\nThis would be similar to the async API returning Mono<Integer>, which the sync version returns an int.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481347756", "createdAt": "2020-09-01T18:30:51Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a relationship: \", e);\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @return an empty Mono\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new RequestOptions())\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @param options The optional settings for this request\n+     * @return A Http response\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options)\n+    {\n+        return withContext(context -> updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, options, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options, Context context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MDk2Mg=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3MDc0Ng==", "bodyText": "I guess I don't get it then.\nhttps://stackoverflow.com/questions/15538219/java-lang-void-vs-void-vs-null#:~:text=void%20is%20a%20return%20type%20signifying%20no%20return.,rare%20instance%20where%20you%20need%20it%20for%20reflection.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481370746", "createdAt": "2020-09-01T19:08:42Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a relationship: \", e);\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @return an empty Mono\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new RequestOptions())\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @param options The optional settings for this request\n+     * @return A Http response\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options)\n+    {\n+        return withContext(context -> updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, options, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options, Context context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MDk2Mg=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3MTU4Mg==", "bodyText": "Seems every response in that stackoverflow thread had a different take on it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481371582", "createdAt": "2020-09-01T19:10:18Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a relationship: \", e);\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @return an empty Mono\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new RequestOptions())\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @param options The optional settings for this request\n+     * @return A Http response\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options)\n+    {\n+        return withContext(context -> updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, options, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options, Context context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MDk2Mg=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3OTg4MQ==", "bodyText": "The void keyword signifies that there is nothing returned from this method call. The type Void is the class representation of that -> it cannot be instantiated, so it cannot have any values.\nIn scenarios where we have to represent the class representation of void, we use Void. This is useful in scenarios where the method definition defines the return type to be a generic class <T>, and we cannot modify it to return nothing -> void. (eg: when implementing methods from interfaces that we do not control/ own, etc).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481379881", "createdAt": "2020-09-01T19:26:37Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a relationship: \", e);\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @return an empty Mono\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new RequestOptions())\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @param options The optional settings for this request\n+     * @return A Http response\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options)\n+    {\n+        return withContext(context -> updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, options, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options, Context context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MDk2Mg=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY3NzU2OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxOTowOFrOHLCvpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOToxOTowMlrOHLE3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MTM0OA==", "bodyText": "Sometimes you have \"an http response\" and sometimes \"the http response\". Let's be consistent.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481341348", "createdAt": "2020-09-01T18:19:08Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a relationship: \", e);\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @return an empty Mono\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new RequestOptions())\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @param options The optional settings for this request\n+     * @return A Http response\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options)\n+    {\n+        return withContext(context -> updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, options, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .updateWithResponseAsync(digitalTwinId, digitalTwinUpdateOperations, options.getIfMatch(), context)\n+            .map(response -> {\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), response.getValue(), twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return an empty Mono\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> deleteDigitalTwin(String digitalTwinId)\n+    {\n+        return deleteDigitalTwinWithResponse(digitalTwinId, new RequestOptions())\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param options The optional settings for this request\n+     * @return The Http response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3NjA1NQ==", "bodyText": "I am changing it to A {@link DigitalTwinsResponse} here and elsewhere :)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481376055", "createdAt": "2020-09-01T19:19:02Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a relationship: \", e);\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @return an empty Mono\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new RequestOptions())\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @param options The optional settings for this request\n+     * @return A Http response\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options)\n+    {\n+        return withContext(context -> updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, options, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .updateWithResponseAsync(digitalTwinId, digitalTwinUpdateOperations, options.getIfMatch(), context)\n+            .map(response -> {\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), response.getValue(), twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return an empty Mono\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> deleteDigitalTwin(String digitalTwinId)\n+    {\n+        return deleteDigitalTwinWithResponse(digitalTwinId, new RequestOptions())\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param options The optional settings for this request\n+     * @return The Http response", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MTM0OA=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY5MzUwOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMzo0OFrOHLC5kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMzo0OFrOHLC5kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0Mzg4OA==", "bodyText": "the log statement says \"relationship\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481343888", "createdAt": "2020-09-01T18:23:48Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a relationship: \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTcwNTg5OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyNzozNFrOHLDBgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOTowNzowNlrOHLEe9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0NTkyMw==", "bodyText": "Shouldn't Object digitalTwin be T digitalTwin in the parameter list?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481345923", "createdAt": "2020-09-01T18:27:34Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -112,8 +131,31 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is Object and output is Response<T>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> createDigitalTwin(String digitalTwinId, Object digitalTwin, Class<T> clazz)\n+    {\n+        return createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return A Http response containing application/json digital twin created.\n+     */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NjE4MA==", "bodyText": "The input digital twin object isn't being serialized or deserialized to any type, to the <T> type information doesn't lend any value. So we can take it in as an Object directly, just that it needs to be json serializable.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481356180", "createdAt": "2020-09-01T18:46:41Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -112,8 +131,31 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is Object and output is Response<T>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> createDigitalTwin(String digitalTwinId, Object digitalTwin, Class<T> clazz)\n+    {\n+        return createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return A Http response containing application/json digital twin created.\n+     */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0NTkyMw=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2OTM4Ng==", "bodyText": "I'd say that taking in T rather than Object forces the user to understand that they will be receiving the same type that they are providing though, right?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481369386", "createdAt": "2020-09-01T19:06:16Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -112,8 +131,31 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is Object and output is Response<T>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> createDigitalTwin(String digitalTwinId, Object digitalTwin, Class<T> clazz)\n+    {\n+        return createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return A Http response containing application/json digital twin created.\n+     */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0NTkyMw=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2OTg0Ng==", "bodyText": "It would be a confusing error to the user if they provided a non-T object as an input parameter here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481369846", "createdAt": "2020-09-01T19:07:06Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -112,8 +131,31 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is Object and output is Response<T>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> createDigitalTwin(String digitalTwinId, Object digitalTwin, Class<T> clazz)\n+    {\n+        return createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return A Http response containing application/json digital twin created.\n+     */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0NTkyMw=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTcwNjk5OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyNzo1MlrOHLDCIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyNzo1MlrOHLDCIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0NjA4MQ==", "bodyText": "FYI: using a map here would have given us:\n.map(voidDigitalTwinsResponse -> null)\nEven though Mono<Void> is the same as an empty Mono -> Mono that doesn't return anything, I feel Mono.empty() is a better representation of the transformation we are doing here.\nHowever, I want to point out that the end result from both would still be the same.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481346081", "createdAt": "2020-09-01T18:27:52Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a relationship: \", e);\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @return an empty Mono\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new RequestOptions())\n+            .flatMap(voidResponse -> Mono.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTcxMDgyOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyOTowM1rOHLDElg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyOTowM1rOHLDElg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0NjcxMA==", "bodyText": "copy paste error here. This API isn't retrieving a relationship. Make this more descriptive, too. Something like \"Failed to serialize retrieved digital twin to a string\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481346710", "createdAt": "2020-09-01T18:29:03Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a relationship: \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTcxOTI4OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODozMTozMVrOHLDKEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDowMTowM1rOHLGLyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0ODExNQ==", "bodyText": "Don't use the RequestOptions type directly. Each set of client side APIs should have their own request options implementation like \"UpdateDigitalTwinRequestOptions\" instead. That way we can add options to this API later without worrying about adding the same options to other APIs that share the same options type", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481348115", "createdAt": "2020-09-01T18:31:31Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a relationship: \", e);\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @return an empty Mono\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new RequestOptions())\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @param options The optional settings for this request\n+     * @return A Http response\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NjUyMg==", "bodyText": "I would start a thread with Srikanta to get some guidance here as we discussed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481356522", "createdAt": "2020-09-01T18:47:14Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a relationship: \", e);\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @return an empty Mono\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new RequestOptions())\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @param options The optional settings for this request\n+     * @return A Http response\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0ODExNQ=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3MDczNA==", "bodyText": "Feel free to start that thread then. My understanding is that they already document this style of optional parameter grouping here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481370734", "createdAt": "2020-09-01T19:08:41Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a relationship: \", e);\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @return an empty Mono\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new RequestOptions())\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @param options The optional settings for this request\n+     * @return A Http response\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0ODExNQ=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM5NzcwNw==", "bodyText": "I did chat with Abhipsa later and have better understanding. I'm working on adding optional param classes for update and delete.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481397707", "createdAt": "2020-09-01T20:01:03Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a relationship: \", e);\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @return an empty Mono\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new RequestOptions())\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @param options The optional settings for this request\n+     * @return A Http response\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0ODExNQ=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTczNjYyOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODozNjoyMFrOHLDUcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo0Nzo0NFrOHLDr7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1MDc2OA==", "bodyText": "I don't like referring to the Response as just an \"Http response\". How about \"A {@link DigitalTwinsResponse} containing the application/json digital twin created.\"?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481350768", "createdAt": "2020-09-01T18:36:20Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -89,8 +89,27 @@ public HttpPipeline getHttpPipeline() {\n         return this.protocolLayer.getHttpPipeline();\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is String and output is Response<String>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return The application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+    {\n+        return createDigitalTwinWithResponse(digitalTwinId, digitalTwin)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return A Http response containing application/json digital twin created.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1MTM4MQ==", "bodyText": "The DigitalTwinsResponse class has more info than just the http response, after all. It also has the http request", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481351381", "createdAt": "2020-09-01T18:37:28Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -89,8 +89,27 @@ public HttpPipeline getHttpPipeline() {\n         return this.protocolLayer.getHttpPipeline();\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is String and output is Response<String>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return The application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+    {\n+        return createDigitalTwinWithResponse(digitalTwinId, digitalTwin)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return A Http response containing application/json digital twin created.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1MDc2OA=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NjcwMw==", "bodyText": "Yes, I agree. I like \"A {@link DigitalTwinsResponse} containing the application/json digital twin created.\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481356703", "createdAt": "2020-09-01T18:47:35Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -89,8 +89,27 @@ public HttpPipeline getHttpPipeline() {\n         return this.protocolLayer.getHttpPipeline();\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is String and output is Response<String>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return The application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+    {\n+        return createDigitalTwinWithResponse(digitalTwinId, digitalTwin)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return A Http response containing application/json digital twin created.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1MDc2OA=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1Njc4Mg==", "bodyText": "yeah definitely sounds better, I'll make that change", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481356782", "createdAt": "2020-09-01T18:47:44Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -89,8 +89,27 @@ public HttpPipeline getHttpPipeline() {\n         return this.protocolLayer.getHttpPipeline();\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is String and output is Response<String>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return The application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+    {\n+        return createDigitalTwinWithResponse(digitalTwinId, digitalTwin)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return A Http response containing application/json digital twin created.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1MDc2OA=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTc0Mzk1OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODozODoyOFrOHLDY_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo0ODoyMFrOHLDtOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1MTkzNQ==", "bodyText": "We are now creating subclasses for request options for these update APIs. That way you can add a new request option tomorrow for the update digital twin API, without having to wonder if and how that would affect the update relationship API.\nWe will also avoid adding more optional param combinations to our API surface.\nYou can refer to #14666 for an example.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481351935", "createdAt": "2020-09-01T18:38:28Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a relationship: \", e);\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @return an empty Mono\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new RequestOptions())\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @param options The optional settings for this request\n+     * @return A Http response\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NzExMg==", "bodyText": "Let's sync on this offline.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481357112", "createdAt": "2020-09-01T18:48:20Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a relationship: \", e);\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @return an empty Mono\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new RequestOptions())\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @param options The optional settings for this request\n+     * @return A Http response\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1MTkzNQ=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTc0OTU5OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo0MDoyNlrOHLDcsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo0MDoyNlrOHLDcsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1Mjg4Mw==", "bodyText": "This needs the <T> param description in javadoc comments", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481352883", "createdAt": "2020-09-01T18:40:26Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -59,6 +59,165 @@ public DigitalTwinsServiceVersion getServiceVersion() {\n         return this.digitalTwinsAsyncClient.getServiceVersion();\n     }\n \n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return The application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public String createDigitalTwin(String digitalTwinId, String digitalTwin)\n+    {\n+        return createDigitalTwinWithResponse(digitalTwinId, digitalTwin, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<String> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context)\n+    {\n+        return digitalTwinsAsyncClient.createDigitalTwinWithResponse(digitalTwinId, digitalTwin, context).block();\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The model class to convert the response to.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return The application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> T createDigitalTwin(String digitalTwinId, Object digitalTwin, Class<T> clazz)\n+    {\n+        return createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Response<T> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz, Context context)\n+    {\n+        return digitalTwinsAsyncClient.createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, context).block();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public String getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<String> getDigitalTwinWithResponse(String digitalTwinId, Context context)\n+    {\n+        return digitalTwinsAsyncClient.getDigitalTwinWithResponse(digitalTwinId, context).block();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> T getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTc1NDAwOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo0MTo0N1rOHLDfYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOToxNjowNFrOHLExZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1MzU3MQ==", "bodyText": "You don't need to call .getValue() here, since the method neither does anything with the value, nor does it return it.\nYou can invoke the API and leave it at that.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481353571", "createdAt": "2020-09-01T18:41:47Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -59,6 +59,165 @@ public DigitalTwinsServiceVersion getServiceVersion() {\n         return this.digitalTwinsAsyncClient.getServiceVersion();\n     }\n \n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return The application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public String createDigitalTwin(String digitalTwinId, String digitalTwin)\n+    {\n+        return createDigitalTwinWithResponse(digitalTwinId, digitalTwin, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<String> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context)\n+    {\n+        return digitalTwinsAsyncClient.createDigitalTwinWithResponse(digitalTwinId, digitalTwin, context).block();\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The model class to convert the response to.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return The application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> T createDigitalTwin(String digitalTwinId, Object digitalTwin, Class<T> clazz)\n+    {\n+        return createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Response<T> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz, Context context)\n+    {\n+        return digitalTwinsAsyncClient.createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, context).block();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public String getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<String> getDigitalTwinWithResponse(String digitalTwinId, Context context)\n+    {\n+        return digitalTwinsAsyncClient.getDigitalTwinWithResponse(digitalTwinId, context).block();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> T getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Response<T> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context)\n+    {\n+        return digitalTwinsAsyncClient.getDigitalTwinWithResponse(digitalTwinId, clazz, context).block();\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public void updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new RequestOptions(), Context.NONE).getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NzMxMQ==", "bodyText": "Good point", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481357311", "createdAt": "2020-09-01T18:48:45Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -59,6 +59,165 @@ public DigitalTwinsServiceVersion getServiceVersion() {\n         return this.digitalTwinsAsyncClient.getServiceVersion();\n     }\n \n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return The application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public String createDigitalTwin(String digitalTwinId, String digitalTwin)\n+    {\n+        return createDigitalTwinWithResponse(digitalTwinId, digitalTwin, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<String> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context)\n+    {\n+        return digitalTwinsAsyncClient.createDigitalTwinWithResponse(digitalTwinId, digitalTwin, context).block();\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The model class to convert the response to.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return The application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> T createDigitalTwin(String digitalTwinId, Object digitalTwin, Class<T> clazz)\n+    {\n+        return createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Response<T> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz, Context context)\n+    {\n+        return digitalTwinsAsyncClient.createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, context).block();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public String getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<String> getDigitalTwinWithResponse(String digitalTwinId, Context context)\n+    {\n+        return digitalTwinsAsyncClient.getDigitalTwinWithResponse(digitalTwinId, context).block();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> T getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Response<T> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context)\n+    {\n+        return digitalTwinsAsyncClient.getDigitalTwinWithResponse(digitalTwinId, clazz, context).block();\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public void updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new RequestOptions(), Context.NONE).getValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1MzU3MQ=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3MTM0OQ==", "bodyText": "Interestingly, the build pipelines will fail if you were to leave this calling .getValue() since the bug detector thinks we are ignoring a return type when we use it like this. I ran into this on the component APIs as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481371349", "createdAt": "2020-09-01T19:09:55Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -59,6 +59,165 @@ public DigitalTwinsServiceVersion getServiceVersion() {\n         return this.digitalTwinsAsyncClient.getServiceVersion();\n     }\n \n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return The application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public String createDigitalTwin(String digitalTwinId, String digitalTwin)\n+    {\n+        return createDigitalTwinWithResponse(digitalTwinId, digitalTwin, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<String> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context)\n+    {\n+        return digitalTwinsAsyncClient.createDigitalTwinWithResponse(digitalTwinId, digitalTwin, context).block();\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The model class to convert the response to.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return The application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> T createDigitalTwin(String digitalTwinId, Object digitalTwin, Class<T> clazz)\n+    {\n+        return createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Response<T> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz, Context context)\n+    {\n+        return digitalTwinsAsyncClient.createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, context).block();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public String getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<String> getDigitalTwinWithResponse(String digitalTwinId, Context context)\n+    {\n+        return digitalTwinsAsyncClient.getDigitalTwinWithResponse(digitalTwinId, context).block();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> T getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Response<T> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context)\n+    {\n+        return digitalTwinsAsyncClient.getDigitalTwinWithResponse(digitalTwinId, clazz, context).block();\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public void updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new RequestOptions(), Context.NONE).getValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1MzU3MQ=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3NDU2NQ==", "bodyText": "They have very thorough checks at the gate!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481374565", "createdAt": "2020-09-01T19:16:04Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -59,6 +59,165 @@ public DigitalTwinsServiceVersion getServiceVersion() {\n         return this.digitalTwinsAsyncClient.getServiceVersion();\n     }\n \n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return The application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public String createDigitalTwin(String digitalTwinId, String digitalTwin)\n+    {\n+        return createDigitalTwinWithResponse(digitalTwinId, digitalTwin, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<String> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context)\n+    {\n+        return digitalTwinsAsyncClient.createDigitalTwinWithResponse(digitalTwinId, digitalTwin, context).block();\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The model class to convert the response to.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return The application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> T createDigitalTwin(String digitalTwinId, Object digitalTwin, Class<T> clazz)\n+    {\n+        return createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Response<T> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz, Context context)\n+    {\n+        return digitalTwinsAsyncClient.createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, context).block();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public String getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<String> getDigitalTwinWithResponse(String digitalTwinId, Context context)\n+    {\n+        return digitalTwinsAsyncClient.getDigitalTwinWithResponse(digitalTwinId, context).block();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> T getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Response<T> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context)\n+    {\n+        return digitalTwinsAsyncClient.getDigitalTwinWithResponse(digitalTwinId, clazz, context).block();\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public void updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new RequestOptions(), Context.NONE).getValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1MzU3MQ=="}, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTc1NjEzOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo0MjozM1rOHLDgtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo0MjozM1rOHLDgtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1MzkwOA==", "bodyText": "same here as well, no need to call .getValue() here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481353908", "createdAt": "2020-09-01T18:42:33Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -59,6 +59,165 @@ public DigitalTwinsServiceVersion getServiceVersion() {\n         return this.digitalTwinsAsyncClient.getServiceVersion();\n     }\n \n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return The application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public String createDigitalTwin(String digitalTwinId, String digitalTwin)\n+    {\n+        return createDigitalTwinWithResponse(digitalTwinId, digitalTwin, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<String> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context)\n+    {\n+        return digitalTwinsAsyncClient.createDigitalTwinWithResponse(digitalTwinId, digitalTwin, context).block();\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The model class to convert the response to.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return The application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> T createDigitalTwin(String digitalTwinId, Object digitalTwin, Class<T> clazz)\n+    {\n+        return createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Response<T> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz, Context context)\n+    {\n+        return digitalTwinsAsyncClient.createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, context).block();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public String getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<String> getDigitalTwinWithResponse(String digitalTwinId, Context context)\n+    {\n+        return digitalTwinsAsyncClient.getDigitalTwinWithResponse(digitalTwinId, context).block();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> T getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Response<T> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context)\n+    {\n+        return digitalTwinsAsyncClient.getDigitalTwinWithResponse(digitalTwinId, clazz, context).block();\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public void updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new RequestOptions(), Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @param options The optional settings for this request\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public DigitalTwinsResponse<Void> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options, Context context)\n+    {\n+        return digitalTwinsAsyncClient.updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, options, context).block();\n+    }\n+\n+    /**\n+     * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public void deleteDigitalTwin(String digitalTwinId)\n+    {\n+        deleteDigitalTwinWithResponse(digitalTwinId, new RequestOptions(), Context.NONE).getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDA5NDYzOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoxOToyMlrOHLGwKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoxOToyMlrOHLGwKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwNzAxOA==", "bodyText": "typo: \"The\" is used twice", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481407018", "createdAt": "2020-09-01T20:19:22Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -89,8 +89,27 @@ public HttpPipeline getHttpPipeline() {\n         return this.protocolLayer.getHttpPipeline();\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is String and output is Response<String>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return The the application/json string representing the digital twin created.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "403f4aeb27fb60a678bee9c15b3a111029b1d73a"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDEwMTQ2OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyMToxOFrOHLG0NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyMToxOFrOHLG0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwODA1Mw==", "bodyText": "How about we specify that the json processing exception occurred while serializing the response to string?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481408053", "createdAt": "2020-09-01T20:21:18Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json string representing the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A {@link DigitalTwinsResponse} containing the application/json string representing the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a digital twin: \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "403f4aeb27fb60a678bee9c15b3a111029b1d73a"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDEwMzYxOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/UpdateDigitalTwinRequestOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyMTo1MFrOHLG1cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDozMjo1M1rOHLHLkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwODM3MA==", "bodyText": "Copy/paste error in this comment. this is not used by the deleteDigitalTwin API", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481408370", "createdAt": "2020-09-01T20:21:50Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/UpdateDigitalTwinRequestOptions.java", "diffHunk": "@@ -0,0 +1,20 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import java.util.List;\n+\n+/**\n+ * Optional settings that are specific to calls to {@link DigitalTwinsClient#updateDigitalTwin(String, List)} and its overloads.\n+ */\n+public class UpdateDigitalTwinRequestOptions extends RequestOptions {\n+    // This class exists to be added to later if the deleteDigitalTwin APIs get a new optional parameter in later service", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "403f4aeb27fb60a678bee9c15b3a111029b1d73a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQxNDAzNQ==", "bodyText": "done done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481414035", "createdAt": "2020-09-01T20:32:53Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/UpdateDigitalTwinRequestOptions.java", "diffHunk": "@@ -0,0 +1,20 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import java.util.List;\n+\n+/**\n+ * Optional settings that are specific to calls to {@link DigitalTwinsClient#updateDigitalTwin(String, List)} and its overloads.\n+ */\n+public class UpdateDigitalTwinRequestOptions extends RequestOptions {\n+    // This class exists to be added to later if the deleteDigitalTwin APIs get a new optional parameter in later service", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwODM3MA=="}, "originalCommit": {"oid": "403f4aeb27fb60a678bee9c15b3a111029b1d73a"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDEwNzE0OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyMjo1M1rOHLG3fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyMjo1M1rOHLG3fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwODg5NQ==", "bodyText": "do add a null check for options before invoking the getter for ifMatch.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481408895", "createdAt": "2020-09-01T20:22:53Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json string representing the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A {@link DigitalTwinsResponse} containing the application/json string representing the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a digital twin: \", e);\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to deserialize the response with.\n+     * @param <T> The generic type to deserialize the digital twin with.\n+     * @return The deserialized application/json object representing the digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to deserialize the response with.\n+     * @param <T> The generic type to deserialize the digital twin with.\n+     * @return A {@link DigitalTwinsResponse} containing the deserialized application/json object representing the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @return An empty Mono\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new UpdateDigitalTwinRequestOptions())\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @param options The optional settings for this request\n+     * @return A {@link DigitalTwinsResponse}\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, UpdateDigitalTwinRequestOptions options)\n+    {\n+        return withContext(context -> updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, options, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, UpdateDigitalTwinRequestOptions options, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .updateWithResponseAsync(digitalTwinId, digitalTwinUpdateOperations, options.getIfMatch(), context)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "403f4aeb27fb60a678bee9c15b3a111029b1d73a"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDEwODEzOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyMzoxNVrOHLG4HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyMzoxNVrOHLG4HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwOTA1Mw==", "bodyText": "same here as well, null check for options", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481409053", "createdAt": "2020-09-01T20:23:15Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json string representing the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A {@link DigitalTwinsResponse} containing the application/json string representing the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a digital twin: \", e);\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to deserialize the response with.\n+     * @param <T> The generic type to deserialize the digital twin with.\n+     * @return The deserialized application/json object representing the digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to deserialize the response with.\n+     * @param <T> The generic type to deserialize the digital twin with.\n+     * @return A {@link DigitalTwinsResponse} containing the deserialized application/json object representing the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @return An empty Mono\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new UpdateDigitalTwinRequestOptions())\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @param options The optional settings for this request\n+     * @return A {@link DigitalTwinsResponse}\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, UpdateDigitalTwinRequestOptions options)\n+    {\n+        return withContext(context -> updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, options, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, UpdateDigitalTwinRequestOptions options, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .updateWithResponseAsync(digitalTwinId, digitalTwinUpdateOperations, options.getIfMatch(), context)\n+            .map(response -> {\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), response.getValue(), twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return An empty Mono\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> deleteDigitalTwin(String digitalTwinId)\n+    {\n+        return deleteDigitalTwinWithResponse(digitalTwinId, new DeleteDigitalTwinRequestOptions())\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param options The optional settings for this request\n+     * @return The Http response\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<Void>> deleteDigitalTwinWithResponse(String digitalTwinId, DeleteDigitalTwinRequestOptions options)\n+    {\n+        return withContext(context -> deleteDigitalTwinWithResponse(digitalTwinId, options, context));\n+    }\n+\n+    Mono<Response<Void>> deleteDigitalTwinWithResponse(String digitalTwinId, DeleteDigitalTwinRequestOptions options, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .deleteWithResponseAsync(digitalTwinId, options.getIfMatch(), context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "403f4aeb27fb60a678bee9c15b3a111029b1d73a"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDExMjMzOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/UpdateDigitalTwinRequestOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyNDoyMlrOHLG6ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyNDoyMlrOHLG6ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwOTY1OQ==", "bodyText": "this comment references the delete API, it needs to be updated.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481409659", "createdAt": "2020-09-01T20:24:22Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/UpdateDigitalTwinRequestOptions.java", "diffHunk": "@@ -0,0 +1,20 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import java.util.List;\n+\n+/**\n+ * Optional settings that are specific to calls to {@link DigitalTwinsClient#updateDigitalTwin(String, List)} and its overloads.\n+ */\n+public class UpdateDigitalTwinRequestOptions extends RequestOptions {\n+    // This class exists to be added to later if the deleteDigitalTwin APIs get a new optional parameter in later service", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "403f4aeb27fb60a678bee9c15b3a111029b1d73a"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1366, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}