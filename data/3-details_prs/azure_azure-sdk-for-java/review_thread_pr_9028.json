{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MzU4OTQ2", "number": 9028, "reviewThreads": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzo0MDoxMFrODnq5vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo1MDo1MlrODtpBXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTIzOTY3OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzo0MDoxMFrOF1zXAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzo0MDoxMFrOF1zXAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MDMyMQ==", "bodyText": ".map is sufficient since this is not an asynchronous operation. Also replace usage of System.out with logger", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r391960321", "createdAt": "2020-03-12T23:40:10Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -217,12 +217,17 @@ public String getEntityName() {\n      *\n      * @throws NullPointerException if {@code message} or {@code scheduledEnqueueTime} is {@code null}.\n      */\n-    public Mono<Long> schedule(ServiceBusMessage message, Instant scheduledEnqueueTime) {\n+    public Mono<Long> scheduleMessage(ServiceBusMessage message, Instant scheduledEnqueueTime) {\n         Objects.requireNonNull(message, \"'message' cannot be null.\");\n         Objects.requireNonNull(scheduledEnqueueTime, \"'scheduledEnqueueTime' cannot be null.\");\n \n-        //TODO (hemanttanwar): Implement session id feature.\n-        return Mono.error(new IllegalStateException(\"Not implemented.\"));\n+        return connectionProcessor\n+            .flatMap(connection -> connection.getManagementNode(entityName))\n+            .flatMap(x -> x.schedule(message, scheduledEnqueueTime))\n+            .flatMap(scheduleSequenceNumber -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51d07edca12068ac9cafe1a80e58b11e0e831b3a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTI0MDk4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzo0MDo1OVrOF1zX3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzo0MDo1OVrOF1zX3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MDU0Mg==", "bodyText": "Should these all go into ManagementConstants? There are two places where these strings live.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r391960542", "createdAt": "2020-03-12T23:40:59Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -40,17 +52,38 @@\n     public static final String MANAGEMENT_RESULT_LAST_ENQUEUED_TIME_UTC = \"last_enqueued_time_utc\";\n     public static final String MANAGEMENT_RESULT_RUNTIME_INFO_RETRIEVAL_TIME_UTC = \"runtime_info_retrieval_time_utc\";\n     public static final String MANAGEMENT_RESULT_PARTITION_IS_EMPTY = \"is_partition_empty\";\n-\n     // Well-known keys for management plane service requests.\n     private static final String MANAGEMENT_ENTITY_TYPE_KEY = \"type\";\n     private static final String MANAGEMENT_OPERATION_KEY = \"operation\";\n     private static final String MANAGEMENT_SECURITY_TOKEN_KEY = \"security_token\";\n \n+    public static final String REQUEST_RESPONSE_MESSAGES = \"messages\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51d07edca12068ac9cafe1a80e58b11e0e831b3a"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTI0MjcxOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzo0MTo1MFrOF1zY5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzo0MTo1MFrOF1zY5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MDgwNw==", "bodyText": "Why .flatMapMany? You can use .map.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r391960807", "createdAt": "2020-03-12T23:41:50Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -151,6 +202,113 @@\n             });\n     }\n \n+    private <T> Mono<Void> cancelSchedule( Long[] cancelScheduleNumbers) {\n+        return cbsAuthorizationOnce()\n+            .then(\n+                channelMono.flatMap(requestResponseChannel -> {\n+                    HashMap<String, Object> requestBodyMap = new HashMap<>();\n+                    requestBodyMap.put(REQUEST_RESPONSE_SEQUENCE_NUMBERS, cancelScheduleNumbers);\n+\n+                    Message requestMessage = createRequestMessageFromValueBody(\n+                        REQUEST_RESPONSE_CANCEL_SCHEDULED_MESSAGE_OPERATION, requestBodyMap,\n+                        MessageUtils.adjustServerTimeout(DEFAULT_REQUEST_RESPONSE_TIMEOUT));\n+                    return requestResponseChannel.sendWithAck(requestMessage);\n+\n+                }))\n+                .flatMapMany(responseMessage -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51d07edca12068ac9cafe1a80e58b11e0e831b3a"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTI0MzI5OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzo0MjoxN1rOF1zZRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzo0MjoxN1rOF1zZRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MDkwMQ==", "bodyText": "Is the responseType another class? Why the use of generics?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r391960901", "createdAt": "2020-03-12T23:42:17Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -151,6 +202,113 @@\n             });\n     }\n \n+    private <T> Mono<Void> cancelSchedule( Long[] cancelScheduleNumbers) {\n+        return cbsAuthorizationOnce()\n+            .then(\n+                channelMono.flatMap(requestResponseChannel -> {\n+                    HashMap<String, Object> requestBodyMap = new HashMap<>();\n+                    requestBodyMap.put(REQUEST_RESPONSE_SEQUENCE_NUMBERS, cancelScheduleNumbers);\n+\n+                    Message requestMessage = createRequestMessageFromValueBody(\n+                        REQUEST_RESPONSE_CANCEL_SCHEDULED_MESSAGE_OPERATION, requestBodyMap,\n+                        MessageUtils.adjustServerTimeout(DEFAULT_REQUEST_RESPONSE_TIMEOUT));\n+                    return requestResponseChannel.sendWithAck(requestMessage);\n+\n+                }))\n+                .flatMapMany(responseMessage -> {\n+                    int statusCode = RequestResponseUtils.getResponseStatusCode(responseMessage);\n+\n+                    if (statusCode ==  REQUEST_RESPONSE_OK_STATUS_CODE) {\n+                        return Mono.empty();\n+                    }\n+                    return Mono.error(new AmqpException(false, \"Could not cancel schedule message with sequence  \"\n+                        + cancelScheduleNumbers,\n+                        new AmqpErrorContext(\"namespace name\")));\n+                })\n+            .then();\n+\n+    }\n+\n+    private Mono<Void>  cbsAuthorizationOnce() {\n+        return Mono.defer(() -> {\n+            if (!cbsBasedTokenManagerCalled.get()) {\n+                return cbsBasedTokenManager\n+                    .authorize()\n+                    .doOnNext(refreshCBSTokenTime -> {\n+                        cbsBasedTokenManagerCalled.set(true);\n+                    })\n+                    .then();\n+            } else {\n+                return Mono.empty();\n+            }\n+        });\n+    }\n+\n+    private <T> Flux<T> schedule(ServiceBusMessage messageToSchedule, Instant scheduledEnqueueTime,\n+                                 Class<T> responseType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51d07edca12068ac9cafe1a80e58b11e0e831b3a"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTI0NDEwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzo0Mjo0NlrOF1zZww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzo0Mjo0NlrOF1zZww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MTAyNw==", "bodyText": "I don't like the use of Object. I'd prefer it be a strongly typed Map or something similar.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r391961027", "createdAt": "2020-03-12T23:42:46Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -151,6 +202,113 @@\n             });\n     }\n \n+    private <T> Mono<Void> cancelSchedule( Long[] cancelScheduleNumbers) {\n+        return cbsAuthorizationOnce()\n+            .then(\n+                channelMono.flatMap(requestResponseChannel -> {\n+                    HashMap<String, Object> requestBodyMap = new HashMap<>();\n+                    requestBodyMap.put(REQUEST_RESPONSE_SEQUENCE_NUMBERS, cancelScheduleNumbers);\n+\n+                    Message requestMessage = createRequestMessageFromValueBody(\n+                        REQUEST_RESPONSE_CANCEL_SCHEDULED_MESSAGE_OPERATION, requestBodyMap,\n+                        MessageUtils.adjustServerTimeout(DEFAULT_REQUEST_RESPONSE_TIMEOUT));\n+                    return requestResponseChannel.sendWithAck(requestMessage);\n+\n+                }))\n+                .flatMapMany(responseMessage -> {\n+                    int statusCode = RequestResponseUtils.getResponseStatusCode(responseMessage);\n+\n+                    if (statusCode ==  REQUEST_RESPONSE_OK_STATUS_CODE) {\n+                        return Mono.empty();\n+                    }\n+                    return Mono.error(new AmqpException(false, \"Could not cancel schedule message with sequence  \"\n+                        + cancelScheduleNumbers,\n+                        new AmqpErrorContext(\"namespace name\")));\n+                })\n+            .then();\n+\n+    }\n+\n+    private Mono<Void>  cbsAuthorizationOnce() {\n+        return Mono.defer(() -> {\n+            if (!cbsBasedTokenManagerCalled.get()) {\n+                return cbsBasedTokenManager\n+                    .authorize()\n+                    .doOnNext(refreshCBSTokenTime -> {\n+                        cbsBasedTokenManagerCalled.set(true);\n+                    })\n+                    .then();\n+            } else {\n+                return Mono.empty();\n+            }\n+        });\n+    }\n+\n+    private <T> Flux<T> schedule(ServiceBusMessage messageToSchedule, Instant scheduledEnqueueTime,\n+                                 Class<T> responseType) {\n+\n+        messageToSchedule.setScheduledEnqueueTime(scheduledEnqueueTime);\n+\n+        return cbsAuthorizationOnce()\n+            .then(\n+                channelMono.flatMap(requestResponseChannel -> {\n+                    List<Message> messagesToSchedule = new ArrayList<>();\n+                    messagesToSchedule.add(messageSerializer.serialize(messageToSchedule));\n+                    Map<String, Object> requestBodyMap = new HashMap<>();\n+                    Collection<HashMap<String, Object>> messageList = new LinkedList<>();\n+                    for (Message message : messagesToSchedule) {\n+                        HashMap<String, Object> messageEntry = new HashMap<>();\n+                        Pair<byte[], Integer> encodedPair;\n+                        encodedPair = MessageUtils.encodeMessageToOptimalSizeArray(message,\n+                            MAX_MESSAGE_LENGTH_SENDER_LINK_BYTES);\n+\n+                        messageEntry.put(REQUEST_RESPONSE_MESSAGE, new Binary(encodedPair.getFirstItem(),\n+                            0, encodedPair.getSecondItem()));\n+                        messageEntry.put(REQUEST_RESPONSE_MESSAGE_ID, message.getMessageId());\n+                        messageList.add(messageEntry);\n+                    }\n+                    requestBodyMap.put(REQUEST_RESPONSE_MESSAGES, messageList);\n+\n+                    Message requestMessage = createRequestMessageFromValueBody(\n+                        REQUEST_RESPONSE_SCHEDULE_MESSAGE_OPERATION, requestBodyMap,\n+                        MessageUtils.adjustServerTimeout(DEFAULT_REQUEST_RESPONSE_TIMEOUT));\n+                    return requestResponseChannel.sendWithAck(requestMessage);\n+                })\n+            )\n+             .map(responseMessage -> {\n+\n+                    int statusCode = RequestResponseUtils.getResponseStatusCode(responseMessage);\n+                    List<T> sequenceNumbers = null;\n+                    if (statusCode ==  REQUEST_RESPONSE_OK_STATUS_CODE) {\n+                        @SuppressWarnings(\"unchecked\")\n+                        Map<String, Object> responseBody = (Map<String, Object>) ((AmqpValue) responseMessage\n+                            .getBody()).getValue();\n+                        Object seqNumberListObj = responseBody.get(REQUEST_RESPONSE_SEQUENCE_NUMBERS);\n+\n+                        if (seqNumberListObj instanceof  long[]){\n+                            @SuppressWarnings(\"unchecked\")\n+                            List<T> seqNumbers  = (List<T>)Arrays.stream((long[])seqNumberListObj)\n+                                .boxed().collect(Collectors.toList());\n+                            sequenceNumbers = seqNumbers;\n+                        }\n+                    }\n+                    return sequenceNumbers;\n+                })\n+         .flatMapMany(Flux::fromIterable);\n+    }\n+\n+    private Message createRequestMessageFromValueBody(String operation, Object valueBody, Duration timeout) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51d07edca12068ac9cafe1a80e58b11e0e831b3a"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTI0NDkyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzo0MzoxOFrOF1zaRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzo0Nzo1MFrOF1ze9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MTE1Ng==", "bodyText": "iirc, this logic exists elsewhere.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r391961156", "createdAt": "2020-03-12T23:43:18Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -71,4 +98,195 @@ public static UUID convertDotNetBytesToUUID(byte[] dotNetBytes) {\n         long leastSignificantBits = buffer.getLong();\n         return new UUID(mostSignificantBits, leastSignificantBits);\n     }\n+\n+\n+\n+    private static int getPayloadSize(Message msg) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51d07edca12068ac9cafe1a80e58b11e0e831b3a"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MjM1Nw==", "bodyText": "check the serializer class.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r391962357", "createdAt": "2020-03-12T23:47:50Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -71,4 +98,195 @@ public static UUID convertDotNetBytesToUUID(byte[] dotNetBytes) {\n         long leastSignificantBits = buffer.getLong();\n         return new UUID(mostSignificantBits, leastSignificantBits);\n     }\n+\n+\n+\n+    private static int getPayloadSize(Message msg) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MTE1Ng=="}, "originalCommit": {"oid": "51d07edca12068ac9cafe1a80e58b11e0e831b3a"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTI0NTIyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/Pair.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzo0MzoyOFrOF1zabQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzo0NToxM1rOF1zcIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MTE5Nw==", "bodyText": "Why a pair?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r391961197", "createdAt": "2020-03-12T23:43:28Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/Pair.java", "diffHunk": "@@ -0,0 +1,66 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.implementation;\n+\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51d07edca12068ac9cafe1a80e58b11e0e831b3a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MTYzMw==", "bodyText": "In your usage of it, it feels like you can infer the size from the length of the bytes.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r391961633", "createdAt": "2020-03-12T23:45:13Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/Pair.java", "diffHunk": "@@ -0,0 +1,66 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.implementation;\n+\n+/**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MTE5Nw=="}, "originalCommit": {"oid": "51d07edca12068ac9cafe1a80e58b11e0e831b3a"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTI1MTUxOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzo0NzowOFrOF1zeSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzo0NzowOFrOF1zeSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MjE4NA==", "bodyText": "Its more specific you to create a mock of the message and then if the managementNode gets a schedule call with that instance to return the number. any() should be used in the case when the parameter can be variable things or its not specific to the test case you are checking.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r391962184", "createdAt": "2020-03-12T23:47:08Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "diffHunk": "@@ -185,4 +194,31 @@ void sendSingleMessage() {\n         final Message message = singleMessageCaptor.getValue();\n         Assertions.assertEquals(Section.SectionType.Data, message.getBody().getType());\n     }\n+\n+    @Test\n+    void scheduleMessage() {\n+        // Arrange\n+        long sequenceNumberReturned =10;\n+\n+        when(managementNode.schedule(any(ServiceBusMessage.class), any(Instant.class)))\n+            .thenReturn(just(sequenceNumberReturned));\n+\n+        // Act & Assert\n+        StepVerifier.create(sender.scheduleMessage(mock(ServiceBusMessage.class), mock(Instant.class)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51d07edca12068ac9cafe1a80e58b11e0e831b3a"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzkxMjk0OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo1ODo0MlrOF-l7qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo1ODo0MlrOF-l7qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NzUxMg==", "bodyText": "nit: unnecessary empty line.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401177512", "createdAt": "2020-03-31T19:58:42Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "diffHunk": "@@ -191,12 +192,34 @@ public int getSize(Message amqpMessage) {\n             return (List<T>) deserializeListOfMessages(message);\n         } else if (clazz == Instant.class) {\n             return (List<T>) deserializeListOfInstant(message);\n+        } else if (clazz == Long.class) {\n+            return (List<T>) deserializeListOfLong(message);\n         } else {\n             throw logger.logExceptionAsError(new IllegalArgumentException(\n                 \"Deserialization only supports ServiceBusReceivedMessage.\"));\n         }\n     }\n \n+    private List<Long> deserializeListOfLong(Message amqpMessage) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d0ec0a5e3ed4b8aa5af510b0ec0884b2681ed6"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzkxMzkyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo1ODo1NVrOF-l8RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo1ODo1NVrOF-l8RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NzY2OQ==", "bodyText": "nit: unnecessary new line", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401177669", "createdAt": "2020-03-31T19:58:55Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "diffHunk": "@@ -191,12 +192,34 @@ public int getSize(Message amqpMessage) {\n             return (List<T>) deserializeListOfMessages(message);\n         } else if (clazz == Instant.class) {\n             return (List<T>) deserializeListOfInstant(message);\n+        } else if (clazz == Long.class) {\n+            return (List<T>) deserializeListOfLong(message);\n         } else {\n             throw logger.logExceptionAsError(new IllegalArgumentException(\n                 \"Deserialization only supports ServiceBusReceivedMessage.\"));\n         }\n     }\n \n+    private List<Long> deserializeListOfLong(Message amqpMessage) {\n+\n+        if (amqpMessage.getBody() instanceof AmqpValue) {\n+            AmqpValue amqpValue = ((AmqpValue) amqpMessage.getBody());\n+            if (amqpValue.getValue() instanceof  Map) {\n+                @SuppressWarnings(\"unchecked\")\n+                Map<String, Object> responseBody = (Map<String, Object>) amqpValue.getValue();\n+                Object expirationListObj = responseBody.get(SEQUENCE_NUMBERS);\n+\n+                if (expirationListObj instanceof long[]) {\n+                    return Arrays.stream((long[]) expirationListObj)\n+                        .boxed()\n+                        .collect(Collectors.toList());\n+                }\n+            }\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d0ec0a5e3ed4b8aa5af510b0ec0884b2681ed6"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzkxNjYyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo1OTo0NFrOF-l94Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo1OTo0NFrOF-l94Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3ODA4MQ==", "bodyText": "cancelScheduledMessage", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401178081", "createdAt": "2020-03-31T19:59:44Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -101,6 +116,23 @@\n             .next();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Mono<Void> cancelSchedule(long sequenceNumber) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d0ec0a5e3ed4b8aa5af510b0ec0884b2681ed6"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzkyMTIyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDowMTowOVrOF-mApQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDowMTowOVrOF-mApQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3ODc4OQ==", "bodyText": "This doesn't need to be a method, it is only used in one place. Roll it up into the calling method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401178789", "createdAt": "2020-03-31T20:01:09Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -316,10 +348,95 @@ private Message createManagementMessage(String operation, String linkName) {\n         return message;\n     }\n \n+    /***\n+     * Create a Amqp key, value map to be used to create Amqp mesage for scheduling purpose.\n+     *\n+     * @param messageToSchedule The message which needs to be scheduled.\n+     * @return Map of key and value in Amqp format.\n+     * @throws AmqpException When payload exceeded maximum message allowed size.\n+     */\n+    private Map<String, Object> createScheduleMessgeAmqpValue(ServiceBusMessage messageToSchedule) {\n+        int maxMessageSize = MAX_MESSAGE_LENGTH_SENDER_LINK_BYTES;\n+        Map<String, Object> requestBodyMap = new HashMap<>();\n+        List<Message> messagesToSchedule = new ArrayList<>();\n+        messagesToSchedule.add(messageSerializer.serialize(messageToSchedule));\n+        Collection<HashMap<String, Object>> messageList = new LinkedList<>();\n+        for (Message message : messagesToSchedule) {\n+            final int payloadSize = messageSerializer.getSize(message);\n+            final int allocationSize =\n+                Math.min(payloadSize + MAX_MESSAGING_AMQP_HEADER_SIZE_BYTES, maxMessageSize);\n+            final byte[] bytes = new byte[allocationSize];\n+\n+            int encodedSize;\n+            try {\n+                encodedSize = message.encode(bytes, 0, allocationSize);\n+            } catch (BufferOverflowException exception) {\n+                final String errorMessage =\n+                    String.format(Locale.US,\n+                        \"Error sending. Size of the payload exceeded maximum message size: %s kb\",\n+                        maxMessageSize / 1024);\n+                throw logger.logExceptionAsWarning(new AmqpException(false,\n+                    AmqpErrorCondition.LINK_PAYLOAD_SIZE_EXCEEDED, errorMessage, exception, getErrorContext()));\n+            }\n+\n+            HashMap<String, Object> messageEntry = new HashMap<>();\n+\n+            messageEntry.put(MESSAGE, new Binary(bytes, 0, encodedSize));\n+            messageEntry.put(MESSAGE_ID, message.getMessageId());\n+            messageList.add(messageEntry);\n+        }\n+        requestBodyMap.put(MESSAGES, messageList);\n+\n+        return requestBodyMap;\n+    }\n+\n     private AmqpErrorContext getErrorContext() {\n         return new SessionErrorContext(fullyQualifiedNamespace, entityPath);\n     }\n \n+    private Mono<Void> cancelSchedule(Long[] cancelScheduleNumbers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d0ec0a5e3ed4b8aa5af510b0ec0884b2681ed6"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzkyNDYxOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDowMjoyMFrOF-mC6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDowMjoyMFrOF-mC6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3OTM3MA==", "bodyText": "You may need to reformat your code. There are double spaces where there shouldn't be.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401179370", "createdAt": "2020-03-31T20:02:20Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -316,10 +348,95 @@ private Message createManagementMessage(String operation, String linkName) {\n         return message;\n     }\n \n+    /***\n+     * Create a Amqp key, value map to be used to create Amqp mesage for scheduling purpose.\n+     *\n+     * @param messageToSchedule The message which needs to be scheduled.\n+     * @return Map of key and value in Amqp format.\n+     * @throws AmqpException When payload exceeded maximum message allowed size.\n+     */\n+    private Map<String, Object> createScheduleMessgeAmqpValue(ServiceBusMessage messageToSchedule) {\n+        int maxMessageSize = MAX_MESSAGE_LENGTH_SENDER_LINK_BYTES;\n+        Map<String, Object> requestBodyMap = new HashMap<>();\n+        List<Message> messagesToSchedule = new ArrayList<>();\n+        messagesToSchedule.add(messageSerializer.serialize(messageToSchedule));\n+        Collection<HashMap<String, Object>> messageList = new LinkedList<>();\n+        for (Message message : messagesToSchedule) {\n+            final int payloadSize = messageSerializer.getSize(message);\n+            final int allocationSize =\n+                Math.min(payloadSize + MAX_MESSAGING_AMQP_HEADER_SIZE_BYTES, maxMessageSize);\n+            final byte[] bytes = new byte[allocationSize];\n+\n+            int encodedSize;\n+            try {\n+                encodedSize = message.encode(bytes, 0, allocationSize);\n+            } catch (BufferOverflowException exception) {\n+                final String errorMessage =\n+                    String.format(Locale.US,\n+                        \"Error sending. Size of the payload exceeded maximum message size: %s kb\",\n+                        maxMessageSize / 1024);\n+                throw logger.logExceptionAsWarning(new AmqpException(false,\n+                    AmqpErrorCondition.LINK_PAYLOAD_SIZE_EXCEEDED, errorMessage, exception, getErrorContext()));\n+            }\n+\n+            HashMap<String, Object> messageEntry = new HashMap<>();\n+\n+            messageEntry.put(MESSAGE, new Binary(bytes, 0, encodedSize));\n+            messageEntry.put(MESSAGE_ID, message.getMessageId());\n+            messageList.add(messageEntry);\n+        }\n+        requestBodyMap.put(MESSAGES, messageList);\n+\n+        return requestBodyMap;\n+    }\n+\n     private AmqpErrorContext getErrorContext() {\n         return new SessionErrorContext(fullyQualifiedNamespace, entityPath);\n     }\n \n+    private Mono<Void> cancelSchedule(Long[] cancelScheduleNumbers) {\n+        return  isAuthorized(CANCEL_SCHEDULED_MESSAGE_OPERATION).thenMany(createRequestResponse.flatMap(channel -> {\n+\n+            Message requestMessage = createManagementMessage(CANCEL_SCHEDULED_MESSAGE_OPERATION,\n+                channel.getReceiveLinkName());\n+\n+            requestMessage.setBody(new AmqpValue(Collections.singletonMap(SEQUENCE_NUMBERS, cancelScheduleNumbers)));\n+            return channel.sendWithAck(requestMessage);\n+        }).map(responseMessage -> {\n+            int statusCode = RequestResponseUtils.getResponseStatusCode(responseMessage);\n+\n+            if (statusCode ==  AmqpResponseCode.OK.getValue()) {\n+                return Mono.empty();\n+            }\n+            return Mono.error(new AmqpException(false, \"Could not cancel schedule message with sequence \"\n+                + Arrays.toString(cancelScheduleNumbers), getErrorContext()));\n+\n+        })).then();\n+    }\n+\n+    private Flux<Long> scheduleMessage(ServiceBusMessage messageToSchedule, Instant scheduledEnqueueTime) {\n+\n+        messageToSchedule.setScheduledEnqueueTime(scheduledEnqueueTime);\n+\n+        return  isAuthorized(SCHEDULE_MESSAGE_OPERATION).thenMany(createRequestResponse.flatMap(channel -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d0ec0a5e3ed4b8aa5af510b0ec0884b2681ed6"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzkzMDYyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDowMzo0M1rOF-mGXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDowMzo0M1rOF-mGXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4MDI1NQ==", "bodyText": "Use monoError(logger, exception). It also logs the message. In addition to places you also return a mono error.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401180255", "createdAt": "2020-03-31T20:03:43Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -316,10 +348,95 @@ private Message createManagementMessage(String operation, String linkName) {\n         return message;\n     }\n \n+    /***\n+     * Create a Amqp key, value map to be used to create Amqp mesage for scheduling purpose.\n+     *\n+     * @param messageToSchedule The message which needs to be scheduled.\n+     * @return Map of key and value in Amqp format.\n+     * @throws AmqpException When payload exceeded maximum message allowed size.\n+     */\n+    private Map<String, Object> createScheduleMessgeAmqpValue(ServiceBusMessage messageToSchedule) {\n+        int maxMessageSize = MAX_MESSAGE_LENGTH_SENDER_LINK_BYTES;\n+        Map<String, Object> requestBodyMap = new HashMap<>();\n+        List<Message> messagesToSchedule = new ArrayList<>();\n+        messagesToSchedule.add(messageSerializer.serialize(messageToSchedule));\n+        Collection<HashMap<String, Object>> messageList = new LinkedList<>();\n+        for (Message message : messagesToSchedule) {\n+            final int payloadSize = messageSerializer.getSize(message);\n+            final int allocationSize =\n+                Math.min(payloadSize + MAX_MESSAGING_AMQP_HEADER_SIZE_BYTES, maxMessageSize);\n+            final byte[] bytes = new byte[allocationSize];\n+\n+            int encodedSize;\n+            try {\n+                encodedSize = message.encode(bytes, 0, allocationSize);\n+            } catch (BufferOverflowException exception) {\n+                final String errorMessage =\n+                    String.format(Locale.US,\n+                        \"Error sending. Size of the payload exceeded maximum message size: %s kb\",\n+                        maxMessageSize / 1024);\n+                throw logger.logExceptionAsWarning(new AmqpException(false,\n+                    AmqpErrorCondition.LINK_PAYLOAD_SIZE_EXCEEDED, errorMessage, exception, getErrorContext()));\n+            }\n+\n+            HashMap<String, Object> messageEntry = new HashMap<>();\n+\n+            messageEntry.put(MESSAGE, new Binary(bytes, 0, encodedSize));\n+            messageEntry.put(MESSAGE_ID, message.getMessageId());\n+            messageList.add(messageEntry);\n+        }\n+        requestBodyMap.put(MESSAGES, messageList);\n+\n+        return requestBodyMap;\n+    }\n+\n     private AmqpErrorContext getErrorContext() {\n         return new SessionErrorContext(fullyQualifiedNamespace, entityPath);\n     }\n \n+    private Mono<Void> cancelSchedule(Long[] cancelScheduleNumbers) {\n+        return  isAuthorized(CANCEL_SCHEDULED_MESSAGE_OPERATION).thenMany(createRequestResponse.flatMap(channel -> {\n+\n+            Message requestMessage = createManagementMessage(CANCEL_SCHEDULED_MESSAGE_OPERATION,\n+                channel.getReceiveLinkName());\n+\n+            requestMessage.setBody(new AmqpValue(Collections.singletonMap(SEQUENCE_NUMBERS, cancelScheduleNumbers)));\n+            return channel.sendWithAck(requestMessage);\n+        }).map(responseMessage -> {\n+            int statusCode = RequestResponseUtils.getResponseStatusCode(responseMessage);\n+\n+            if (statusCode ==  AmqpResponseCode.OK.getValue()) {\n+                return Mono.empty();\n+            }\n+            return Mono.error(new AmqpException(false, \"Could not cancel schedule message with sequence \"\n+                + Arrays.toString(cancelScheduleNumbers), getErrorContext()));\n+\n+        })).then();\n+    }\n+\n+    private Flux<Long> scheduleMessage(ServiceBusMessage messageToSchedule, Instant scheduledEnqueueTime) {\n+\n+        messageToSchedule.setScheduledEnqueueTime(scheduledEnqueueTime);\n+\n+        return  isAuthorized(SCHEDULE_MESSAGE_OPERATION).thenMany(createRequestResponse.flatMap(channel -> {\n+\n+            Message requestMessage = createManagementMessage(SCHEDULE_MESSAGE_OPERATION, channel.getReceiveLinkName());\n+            Map<String, Object> requestBodyMap;\n+            requestBodyMap = createScheduleMessgeAmqpValue(messageToSchedule);\n+\n+            requestMessage.setBody(new AmqpValue(requestBodyMap));\n+            return channel.sendWithAck(requestMessage);\n+        }).flatMapMany(responseMessage -> {\n+            int statusCode = RequestResponseUtils.getResponseStatusCode(responseMessage);\n+\n+            if (statusCode !=  AmqpResponseCode.OK.getValue()) {\n+                return Mono.error(ExceptionUtil.amqpResponseCodeToException(statusCode, \"Could not schedule message.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d0ec0a5e3ed4b8aa5af510b0ec0884b2681ed6"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzkzNTAwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDowNTowMFrOF-mJDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMTozNTo0N1rOF-t4XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4MDk0MA==", "bodyText": "I should have noticed it before, put the private renewMessageLock method into the public one. It is only used in one place. It saves another stack call.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401180940", "createdAt": "2020-03-31T20:05:00Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -316,10 +348,95 @@ private Message createManagementMessage(String operation, String linkName) {\n         return message;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d0ec0a5e3ed4b8aa5af510b0ec0884b2681ed6"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMwNzc0MQ==", "bodyText": "I was thinking of when we have to renew multiple lock Token in one go and need to expose that API,  this would be helpful.\nBut for now I have changed this like you said.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401307741", "createdAt": "2020-04-01T01:35:47Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -316,10 +348,95 @@ private Message createManagementMessage(String operation, String linkName) {\n         return message;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4MDk0MA=="}, "originalCommit": {"oid": "78d0ec0a5e3ed4b8aa5af510b0ec0884b2681ed6"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzk1Njg2OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoxMTowNFrOF-mWhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjo1NDoxNlrOF-rFQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NDM5MQ==", "bodyText": "Why are you creating a list and iterating through it for a single message?\nYou aren't taking into account the size of the send link. It is not always \"MAX_MESSAGE_LENGTH_SENDER_LINK_BYTES\".\nThis doesn't need to be a method. It is only used in a single place.\nDocument that the logic is from ReactorSender, so if we bug fix one place, it can also be done in another.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401184391", "createdAt": "2020-03-31T20:11:04Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -316,10 +348,95 @@ private Message createManagementMessage(String operation, String linkName) {\n         return message;\n     }\n \n+    /***\n+     * Create a Amqp key, value map to be used to create Amqp mesage for scheduling purpose.\n+     *\n+     * @param messageToSchedule The message which needs to be scheduled.\n+     * @return Map of key and value in Amqp format.\n+     * @throws AmqpException When payload exceeded maximum message allowed size.\n+     */\n+    private Map<String, Object> createScheduleMessgeAmqpValue(ServiceBusMessage messageToSchedule) {\n+        int maxMessageSize = MAX_MESSAGE_LENGTH_SENDER_LINK_BYTES;\n+        Map<String, Object> requestBodyMap = new HashMap<>();\n+        List<Message> messagesToSchedule = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d0ec0a5e3ed4b8aa5af510b0ec0884b2681ed6"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI2MTg5MA==", "bodyText": "A separate method will keep scheduleMessage succinct and readable. I can merge them together if you still want.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401261890", "createdAt": "2020-03-31T22:54:16Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -316,10 +348,95 @@ private Message createManagementMessage(String operation, String linkName) {\n         return message;\n     }\n \n+    /***\n+     * Create a Amqp key, value map to be used to create Amqp mesage for scheduling purpose.\n+     *\n+     * @param messageToSchedule The message which needs to be scheduled.\n+     * @return Map of key and value in Amqp format.\n+     * @throws AmqpException When payload exceeded maximum message allowed size.\n+     */\n+    private Map<String, Object> createScheduleMessgeAmqpValue(ServiceBusMessage messageToSchedule) {\n+        int maxMessageSize = MAX_MESSAGE_LENGTH_SENDER_LINK_BYTES;\n+        Map<String, Object> requestBodyMap = new HashMap<>();\n+        List<Message> messagesToSchedule = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NDM5MQ=="}, "originalCommit": {"oid": "78d0ec0a5e3ed4b8aa5af510b0ec0884b2681ed6"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzk2MDA0OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoxMTo1OFrOF-mYbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoxMzowNVrOF-ma6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NDg3Nw==", "bodyText": "This should be from the send link, not receive link.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401184877", "createdAt": "2020-03-31T20:11:58Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementConstants.java", "diffHunk": "@@ -34,4 +37,12 @@\n     static final String ASSOCIATED_LINK_NAME_KEY = \"associated-link-name\";\n     static final String SEQUENCE_NUMBERS = \"sequence-numbers\";\n     static final String RECEIVER_SETTLE_MODE = \"receiver-settle-mode\";\n+    static final String MESSAGES = \"messages\";\n+    static final String MESSAGE = \"message\";\n+    static final String MESSAGE_ID = \"message-id\";\n+\n+\n+    // TODO(Hemant) :This value should be read from Receive Link (Currently using track 1 default value)\n+    static final int MAX_MESSAGE_LENGTH_SENDER_LINK_BYTES = 1024 * 1024;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d0ec0a5e3ed4b8aa5af510b0ec0884b2681ed6"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NTUxNQ==", "bodyText": "This is different than the one in azure-core-amqp's ClientConstants.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401185515", "createdAt": "2020-03-31T20:13:05Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementConstants.java", "diffHunk": "@@ -34,4 +37,12 @@\n     static final String ASSOCIATED_LINK_NAME_KEY = \"associated-link-name\";\n     static final String SEQUENCE_NUMBERS = \"sequence-numbers\";\n     static final String RECEIVER_SETTLE_MODE = \"receiver-settle-mode\";\n+    static final String MESSAGES = \"messages\";\n+    static final String MESSAGE = \"message\";\n+    static final String MESSAGE_ID = \"message-id\";\n+\n+\n+    // TODO(Hemant) :This value should be read from Receive Link (Currently using track 1 default value)\n+    static final int MAX_MESSAGE_LENGTH_SENDER_LINK_BYTES = 1024 * 1024;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NDg3Nw=="}, "originalCommit": {"oid": "78d0ec0a5e3ed4b8aa5af510b0ec0884b2681ed6"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzk2ODMwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/MessageSendAsyncSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoxNDowN1rOF-mdXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoxNDowN1rOF-mdXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NjE0MA==", "bodyText": "<<queue-name>> for constency.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401186140", "createdAt": "2020-03-31T20:14:07Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/MessageSendAsyncSample.java", "diffHunk": "@@ -0,0 +1,146 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Sending message async.\n+ */\n+public class MessageSendAsyncSample {\n+    /**\n+     * Main method to invoke this demo on how to send a message to an Azure Service Bus.\n+     */\n+    @Test\n+    public void sendMessage() {\n+        // The connection string value can be obtained by:\n+        // 1. Going to your Service Bus namespace in Azure Portal.\n+        // 2. Go to \"Shared access policies\"\n+        // 3. Copy the connection string for the \"RootManageSharedAccessKey\" policy.\n+        String connectionString = System.getenv(\"AZURE_SERVICEBUS_CONNECTION_STRING\");\n+\n+        // Instantiate a client that will be used to call the service.\n+        ServiceBusSenderAsyncClient senderAsyncClient = new ServiceBusClientBuilder()\n+            .connectionString(connectionString)\n+            .sender()\n+            .queueName(\"<queue-name>\")\n+            .buildAsyncClient();\n+\n+        // Create an message to send.\n+        ServiceBusMessage message = new ServiceBusMessage(\"Hello world!\".getBytes(UTF_8));\n+\n+        // Send that message. This call returns a Mono<Void>, which we subscribe to. It completes successfully when the\n+        // message has been delivered to the Service Bus. It completes with an error if an exception occurred while\n+        // sending the message.\n+\n+        senderAsyncClient.send(message).subscribe();\n+\n+        // Subscribe is not a blocking call so we sleep here so the program does not end while finishing\n+        // the operation.\n+        try {\n+            Thread.sleep(Duration.ofSeconds(20).toMillis());\n+        } catch (InterruptedException ignored) {\n+        }\n+    }\n+\n+    /**\n+     * Main method to invoke this demo on how to send a message to an Azure Service Bus.\n+     */\n+    @Test\n+    public void scheduleMessage() {\n+        // The connection string value can be obtained by:\n+        // 1. Going to your Service Bus namespace in Azure Portal.\n+        // 2. Go to \"Shared access policies\"\n+        // 3. Copy the connection string for the \"RootManageSharedAccessKey\" policy.\n+        String connectionString = System.getenv(\"AZURE_SERVICEBUS_CONNECTION_STRING\");\n+\n+        // Instantiate a client that will be used to call the service.\n+        ServiceBusSenderAsyncClient senderAsyncClient = new ServiceBusClientBuilder()\n+            .connectionString(connectionString)\n+            .sender()\n+            .queueName(\"<queue-name\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d0ec0a5e3ed4b8aa5af510b0ec0884b2681ed6"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzk3NzU3OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoxNjo0M1rOF-mjGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoxNjo0M1rOF-mjGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NzYwOQ==", "bodyText": "The variable creations like Instant.now.plus.. and Duration.ofSeconds(enqeueDe...) are a part of your \"Arrange\" section. The Act part is usually, \"I set up all my things, now let me invoke it.\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401187609", "createdAt": "2020-03-31T20:16:43Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -110,6 +110,47 @@ void peekMessage() {\n             .verifyComplete();\n     }\n \n+    /**\n+     * Verifies that we can schedule and peek a message.\n+     */\n+    @Test\n+    void scheduleMessage() {\n+        // Arrange\n+        final String messageId = UUID.randomUUID().toString();\n+        final String contents = \"Some-contents\";\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(contents, messageId, 0);\n+        int enqueDelayInSec = 2;\n+        // Assert & Act\n+        StepVerifier.create(sender.scheduleMessage(message, Instant.now().plusSeconds(enqueDelayInSec))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d0ec0a5e3ed4b8aa5af510b0ec0884b2681ed6"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzk4MDI3OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoxNzozMFrOF-mkww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoxNzozMFrOF-mkww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4ODAzNQ==", "bodyText": "Scheduling a message isn't part of the scenario. Do that as part of your // Arrange.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401188035", "createdAt": "2020-03-31T20:17:30Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -110,6 +110,47 @@ void peekMessage() {\n             .verifyComplete();\n     }\n \n+    /**\n+     * Verifies that we can schedule and peek a message.\n+     */\n+    @Test\n+    void scheduleMessage() {\n+        // Arrange\n+        final String messageId = UUID.randomUUID().toString();\n+        final String contents = \"Some-contents\";\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(contents, messageId, 0);\n+        int enqueDelayInSec = 2;\n+        // Assert & Act\n+        StepVerifier.create(sender.scheduleMessage(message, Instant.now().plusSeconds(enqueDelayInSec))\n+            .delaySubscription(Duration.ofSeconds(enqueDelayInSec + 1))\n+            .thenMany(receiver.receive().take(1)))\n+            .assertNext(receivedMessage -> {\n+                Assertions.assertArrayEquals(contents.getBytes(), receivedMessage.getBody());\n+                Assertions.assertTrue(receivedMessage.getProperties().containsKey(MESSAGE_TRACKING_ID));\n+                Assertions.assertEquals(messageId, receivedMessage.getProperties().get(MESSAGE_TRACKING_ID));\n+            })\n+            .verifyComplete();\n+    }\n+\n+    /**\n+     * Verifies that we can cancel a scheduled message.\n+     */\n+    @Test\n+    void cancelScheduleMessage() {\n+        // Arrange\n+        final String messageId = UUID.randomUUID().toString();\n+        final String contents = \"Some-contents\";\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(contents, messageId, 0);\n+        int enqueDelayInSec = 3;\n+        // Assert & Act\n+        StepVerifier.create(sender.scheduleMessage(message, Instant.now().plusSeconds(enqueDelayInSec))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d0ec0a5e3ed4b8aa5af510b0ec0884b2681ed6"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODgxMjIwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjoxNzowM1rOF-ugOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjoxNzowM1rOF-ugOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMxNzk0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (amqpValue.getValue() instanceof  Map) {\n          \n          \n            \n                        if (amqpValue.getValue() instanceof Map) {", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401317946", "createdAt": "2020-04-01T02:17:03Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "diffHunk": "@@ -191,12 +192,32 @@ public int getSize(Message amqpMessage) {\n             return (List<T>) deserializeListOfMessages(message);\n         } else if (clazz == Instant.class) {\n             return (List<T>) deserializeListOfInstant(message);\n+        } else if (clazz == Long.class) {\n+            return (List<T>) deserializeListOfLong(message);\n         } else {\n             throw logger.logExceptionAsError(new IllegalArgumentException(\n                 \"Deserialization only supports ServiceBusReceivedMessage.\"));\n         }\n     }\n \n+    private List<Long> deserializeListOfLong(Message amqpMessage) {\n+        if (amqpMessage.getBody() instanceof AmqpValue) {\n+            AmqpValue amqpValue = ((AmqpValue) amqpMessage.getBody());\n+            if (amqpValue.getValue() instanceof  Map) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47b5ea234acabd851dabb9fd32657b00e1b42a3a"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODgxODkzOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjoyMDo0M1rOF-ukGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjoyMDo0M1rOF-ukGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMxODkzOA==", "bodyText": "Don't think this needs to be its own function. It's only used once. Same with your helper method to create a message. Functions are pieces of code that can be reused.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401318938", "createdAt": "2020-04-01T02:20:43Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -316,10 +334,98 @@ private Message createManagementMessage(String operation, String linkName) {\n         return message;\n     }\n \n+    /***\n+     * Create a Amqp key, value map to be used to create Amqp mesage for scheduling purpose.\n+     *\n+     * @param messageToSchedule The message which needs to be scheduled.\n+     * @param maxMessageSize The maximum size allowed on send link.\n+     * @return Map of key and value in Amqp format.\n+     * @throws AmqpException When payload exceeded maximum message allowed size.\n+     */\n+    private Map<String, Object> createScheduleMessgeAmqpValue(ServiceBusMessage messageToSchedule, int maxMessageSize) {\n+\n+        Message message = messageSerializer.serialize(messageToSchedule);\n+\n+        // The maxsize allowed logic is from ReactorSender, this logic should be kept in sync.\n+        final int payloadSize = messageSerializer.getSize(message);\n+        final int allocationSize =\n+            Math.min(payloadSize + MAX_MESSAGING_AMQP_HEADER_SIZE_BYTES, maxMessageSize);\n+        final byte[] bytes = new byte[allocationSize];\n+\n+        int encodedSize;\n+        try {\n+            encodedSize = message.encode(bytes, 0, allocationSize);\n+        } catch (BufferOverflowException exception) {\n+            final String errorMessage =\n+                String.format(Locale.US,\n+                    \"Error sending. Size of the payload exceeded maximum message size: %s kb\",\n+                    maxMessageSize / 1024);\n+            throw logger.logExceptionAsWarning(new AmqpException(false,\n+                AmqpErrorCondition.LINK_PAYLOAD_SIZE_EXCEEDED, errorMessage, exception, getErrorContext()));\n+        }\n+        HashMap<String, Object> messageEntry = new HashMap<>();\n+        messageEntry.put(MESSAGE, new Binary(bytes, 0, encodedSize));\n+        messageEntry.put(MESSAGE_ID, message.getMessageId());\n+\n+        Collection<HashMap<String, Object>> messageList = new LinkedList<>();\n+        messageList.add(messageEntry);\n+\n+        Map<String, Object> requestBodyMap = new HashMap<>();\n+        requestBodyMap.put(MESSAGES, messageList);\n+        return requestBodyMap;\n+    }\n+\n     private AmqpErrorContext getErrorContext() {\n         return new SessionErrorContext(fullyQualifiedNamespace, entityPath);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Mono<Void> cancelScheduledMessage(long sequenceNumber) {\n+        return isAuthorized(CANCEL_SCHEDULED_MESSAGE_OPERATION).thenMany(createRequestResponse.flatMap(channel -> {\n+\n+            Message requestMessage = createManagementMessage(CANCEL_SCHEDULED_MESSAGE_OPERATION,\n+                channel.getReceiveLinkName());\n+\n+            requestMessage.setBody(new AmqpValue(Collections.singletonMap(SEQUENCE_NUMBERS,\n+                new Long[]{sequenceNumber})));\n+            return channel.sendWithAck(requestMessage);\n+        }).map(responseMessage -> {\n+            int statusCode = RequestResponseUtils.getResponseStatusCode(responseMessage);\n+\n+            if (statusCode == AmqpResponseCode.OK.getValue()) {\n+                return Mono.empty();\n+            }\n+            return Mono.error(new AmqpException(false, \"Could not cancel scheduled message with sequence number \"\n+                + sequenceNumber, getErrorContext()));\n+        })).then();\n+    }\n+\n+    private Flux<Long> scheduleMessage(ServiceBusMessage messageToSchedule, Instant scheduledEnqueueTime,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47b5ea234acabd851dabb9fd32657b00e1b42a3a"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODgyMTY4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusManagementNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjoyMjo0M1rOF-ul6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjoyMjo0M1rOF-ul6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMxOTQwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Mono<Long> schedule(ServiceBusMessage message, Instant scheduledEnqueueTime,  int maxSendLinkSize);\n          \n          \n            \n                Mono<Long> schedule(ServiceBusMessage message, Instant scheduledEnqueueTime, int maxSendLinkSize);", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401319403", "createdAt": "2020-04-01T02:22:43Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusManagementNode.java", "diffHunk": "@@ -39,6 +40,28 @@\n      */\n     Mono<ServiceBusReceivedMessage> peek(long fromSequenceNumber);\n \n+    /**\n+     * Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is\n+     * enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method\n+     * returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture,\n+     * on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling\n+     * of the message.\n+     *\n+     * @param message The message to be sent to the entity.\n+     * @param scheduledEnqueueTime The {@link Instant} at which the message should be enqueued in the entity.\n+     * @return The sequence number representing the pending send, which returns the sequence number of\n+      * the scheduled message. This sequence number can be used to cancel the scheduling of the message.\n+     */\n+    Mono<Long> schedule(ServiceBusMessage message, Instant scheduledEnqueueTime,  int maxSendLinkSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47b5ea234acabd851dabb9fd32657b00e1b42a3a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODgyMjM3OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/MessageSendAsyncSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjoyMzowNVrOF-umSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjoyMzowNVrOF-umSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMxOTQ5OQ==", "bodyText": "nit: empty line. Same with the one below. there's an extra empty line.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401319499", "createdAt": "2020-04-01T02:23:05Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/MessageSendAsyncSample.java", "diffHunk": "@@ -0,0 +1,146 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Sending message async.\n+ */\n+public class MessageSendAsyncSample {\n+    /**\n+     * Main method to invoke this demo on how to send a message to an Azure Service Bus.\n+     */\n+    @Test\n+    public void sendMessage() {\n+        // The connection string value can be obtained by:\n+        // 1. Going to your Service Bus namespace in Azure Portal.\n+        // 2. Go to \"Shared access policies\"\n+        // 3. Copy the connection string for the \"RootManageSharedAccessKey\" policy.\n+        String connectionString = System.getenv(\"AZURE_SERVICEBUS_CONNECTION_STRING\");\n+\n+        // Instantiate a client that will be used to call the service.\n+        ServiceBusSenderAsyncClient senderAsyncClient = new ServiceBusClientBuilder()\n+            .connectionString(connectionString)\n+            .sender()\n+            .queueName(\"<queue-name>\")\n+            .buildAsyncClient();\n+\n+        // Create an message to send.\n+        ServiceBusMessage message = new ServiceBusMessage(\"Hello world!\".getBytes(UTF_8));\n+\n+        // Send that message. This call returns a Mono<Void>, which we subscribe to. It completes successfully when the\n+        // message has been delivered to the Service Bus. It completes with an error if an exception occurred while\n+        // sending the message.\n+\n+        senderAsyncClient.send(message).subscribe();\n+\n+        // Subscribe is not a blocking call so we sleep here so the program does not end while finishing\n+        // the operation.\n+        try {\n+            Thread.sleep(Duration.ofSeconds(20).toMillis());\n+        } catch (InterruptedException ignored) {\n+        }\n+    }\n+\n+    /**\n+     * Main method to invoke this demo on how to send a message to an Azure Service Bus.\n+     */\n+    @Test\n+    public void scheduleMessage() {\n+        // The connection string value can be obtained by:\n+        // 1. Going to your Service Bus namespace in Azure Portal.\n+        // 2. Go to \"Shared access policies\"\n+        // 3. Copy the connection string for the \"RootManageSharedAccessKey\" policy.\n+        String connectionString = System.getenv(\"AZURE_SERVICEBUS_CONNECTION_STRING\");\n+\n+        // Instantiate a client that will be used to call the service.\n+        ServiceBusSenderAsyncClient senderAsyncClient = new ServiceBusClientBuilder()\n+            .connectionString(connectionString)\n+            .sender()\n+            .queueName(\"<<queue-name>>\")\n+            .buildAsyncClient();\n+\n+        // Create an message to send.\n+        ServiceBusMessage message = new ServiceBusMessage(\"Hello World!!\".getBytes(UTF_8));\n+\n+        // Send that message. This call returns a Mono<Void>, which we subscribe to. It completes successfully when the\n+        // message has been delivered to the Service Bus. It completes with an error if an exception occurred while sending\n+        // the message.\n+\n+        senderAsyncClient.scheduleMessage(message, Instant.now().plusSeconds(1 * 60L))\n+            .subscribe(aLong -> {\n+                System.out.println(\"!! After schedule message  sequence : \" + aLong);\n+            });\n+\n+        // Subscribe is not a blocking call so we sleep here so the program does not end while finishing\n+        // the operation.\n+        try {\n+            Thread.sleep(Duration.ofSeconds(20).toMillis());\n+        } catch (InterruptedException ignored) {\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47b5ea234acabd851dabb9fd32657b00e1b42a3a"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODgyMzgyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/MessageSendAsyncSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjoyMzo1NlrOF-unOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjoyMzo1NlrOF-unOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMxOTczNw==", "bodyText": "Tests should be in the test folder.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401319737", "createdAt": "2020-04-01T02:23:56Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/MessageSendAsyncSample.java", "diffHunk": "@@ -0,0 +1,146 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Sending message async.\n+ */\n+public class MessageSendAsyncSample {\n+    /**\n+     * Main method to invoke this demo on how to send a message to an Azure Service Bus.\n+     */\n+    @Test\n+    public void sendMessage() {\n+        // The connection string value can be obtained by:\n+        // 1. Going to your Service Bus namespace in Azure Portal.\n+        // 2. Go to \"Shared access policies\"\n+        // 3. Copy the connection string for the \"RootManageSharedAccessKey\" policy.\n+        String connectionString = System.getenv(\"AZURE_SERVICEBUS_CONNECTION_STRING\");\n+\n+        // Instantiate a client that will be used to call the service.\n+        ServiceBusSenderAsyncClient senderAsyncClient = new ServiceBusClientBuilder()\n+            .connectionString(connectionString)\n+            .sender()\n+            .queueName(\"<queue-name>\")\n+            .buildAsyncClient();\n+\n+        // Create an message to send.\n+        ServiceBusMessage message = new ServiceBusMessage(\"Hello world!\".getBytes(UTF_8));\n+\n+        // Send that message. This call returns a Mono<Void>, which we subscribe to. It completes successfully when the\n+        // message has been delivered to the Service Bus. It completes with an error if an exception occurred while\n+        // sending the message.\n+\n+        senderAsyncClient.send(message).subscribe();\n+\n+        // Subscribe is not a blocking call so we sleep here so the program does not end while finishing\n+        // the operation.\n+        try {\n+            Thread.sleep(Duration.ofSeconds(20).toMillis());\n+        } catch (InterruptedException ignored) {\n+        }\n+    }\n+\n+    /**\n+     * Main method to invoke this demo on how to send a message to an Azure Service Bus.\n+     */\n+    @Test\n+    public void scheduleMessage() {\n+        // The connection string value can be obtained by:\n+        // 1. Going to your Service Bus namespace in Azure Portal.\n+        // 2. Go to \"Shared access policies\"\n+        // 3. Copy the connection string for the \"RootManageSharedAccessKey\" policy.\n+        String connectionString = System.getenv(\"AZURE_SERVICEBUS_CONNECTION_STRING\");\n+\n+        // Instantiate a client that will be used to call the service.\n+        ServiceBusSenderAsyncClient senderAsyncClient = new ServiceBusClientBuilder()\n+            .connectionString(connectionString)\n+            .sender()\n+            .queueName(\"<<queue-name>>\")\n+            .buildAsyncClient();\n+\n+        // Create an message to send.\n+        ServiceBusMessage message = new ServiceBusMessage(\"Hello World!!\".getBytes(UTF_8));\n+\n+        // Send that message. This call returns a Mono<Void>, which we subscribe to. It completes successfully when the\n+        // message has been delivered to the Service Bus. It completes with an error if an exception occurred while sending\n+        // the message.\n+\n+        senderAsyncClient.scheduleMessage(message, Instant.now().plusSeconds(1 * 60L))\n+            .subscribe(aLong -> {\n+                System.out.println(\"!! After schedule message  sequence : \" + aLong);\n+            });\n+\n+        // Subscribe is not a blocking call so we sleep here so the program does not end while finishing\n+        // the operation.\n+        try {\n+            Thread.sleep(Duration.ofSeconds(20).toMillis());\n+        } catch (InterruptedException ignored) {\n+        }\n+\n+    }\n+\n+\n+    /**\n+     * Main method to invoke this demo on how to cancle a scheduled  message to an Azure Service Bus.\n+     */\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47b5ea234acabd851dabb9fd32657b00e1b42a3a"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODgyNDY3OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjoyNDozM1rOF-unyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjoyNDozM1rOF-unyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMxOTg4Mw==", "bodyText": "Why delaySubscription vs Mono.delay(duration).then(cancelSubscription)?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401319883", "createdAt": "2020-04-01T02:24:33Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -110,6 +110,53 @@ void peekMessage() {\n             .verifyComplete();\n     }\n \n+    /**\n+     * Verifies that we can schedule and peek a message.\n+     */\n+    @Test\n+    void scheduleMessage() {\n+        // Arrange\n+        final String messageId = UUID.randomUUID().toString();\n+        final String contents = \"Some-contents\";\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(contents, messageId, 0);\n+        Instant scheduledEnqueueTime = Instant.now().plusSeconds(2);\n+        sender.scheduleMessage(message, scheduledEnqueueTime)\n+            .delaySubscription(Duration.ofSeconds(3))\n+            .block();\n+\n+        // Assert & Act\n+        StepVerifier.create(receiver.receive().take(1))\n+            .assertNext(receivedMessage -> {\n+                Assertions.assertArrayEquals(contents.getBytes(), receivedMessage.getBody());\n+                Assertions.assertTrue(receivedMessage.getProperties().containsKey(MESSAGE_TRACKING_ID));\n+                Assertions.assertEquals(messageId, receivedMessage.getProperties().get(MESSAGE_TRACKING_ID));\n+            })\n+            .verifyComplete();\n+    }\n+\n+    /**\n+     * Verifies that we can cancel a scheduled message.\n+     */\n+    @Test\n+    void cancelScheduleMessage() {\n+        // Arrange\n+        final String messageId = UUID.randomUUID().toString();\n+        final String contents = \"Some-contents\";\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(contents, messageId, 0);\n+        Instant scheduledEnqueueTime = Instant.now().plusSeconds(10);\n+        Duration delayDuration = Duration.ofSeconds(3);\n+        Long sequenceNumber = sender.scheduleMessage(message, scheduledEnqueueTime).block();\n+\n+        sender.cancelScheduledMessage(sequenceNumber.longValue())\n+            .delaySubscription(delayDuration)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47b5ea234acabd851dabb9fd32657b00e1b42a3a"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODgyNTEzOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjoyNDo0OFrOF-uoEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjoyNDo0OFrOF-uoEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMxOTk1Mw==", "bodyText": "consistency: use final for the rest of them", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401319953", "createdAt": "2020-04-01T02:24:48Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -110,6 +110,53 @@ void peekMessage() {\n             .verifyComplete();\n     }\n \n+    /**\n+     * Verifies that we can schedule and peek a message.\n+     */\n+    @Test\n+    void scheduleMessage() {\n+        // Arrange\n+        final String messageId = UUID.randomUUID().toString();\n+        final String contents = \"Some-contents\";\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(contents, messageId, 0);\n+        Instant scheduledEnqueueTime = Instant.now().plusSeconds(2);\n+        sender.scheduleMessage(message, scheduledEnqueueTime)\n+            .delaySubscription(Duration.ofSeconds(3))\n+            .block();\n+\n+        // Assert & Act\n+        StepVerifier.create(receiver.receive().take(1))\n+            .assertNext(receivedMessage -> {\n+                Assertions.assertArrayEquals(contents.getBytes(), receivedMessage.getBody());\n+                Assertions.assertTrue(receivedMessage.getProperties().containsKey(MESSAGE_TRACKING_ID));\n+                Assertions.assertEquals(messageId, receivedMessage.getProperties().get(MESSAGE_TRACKING_ID));\n+            })\n+            .verifyComplete();\n+    }\n+\n+    /**\n+     * Verifies that we can cancel a scheduled message.\n+     */\n+    @Test\n+    void cancelScheduleMessage() {\n+        // Arrange\n+        final String messageId = UUID.randomUUID().toString();\n+        final String contents = \"Some-contents\";\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(contents, messageId, 0);\n+        Instant scheduledEnqueueTime = Instant.now().plusSeconds(10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47b5ea234acabd851dabb9fd32657b00e1b42a3a"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODgyNjExOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjoyNToyNVrOF-uoqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMzozNjowMVrOF-vsOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMyMDEwNA==", "bodyText": "by default the mock runnable does nothing.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401320104", "createdAt": "2020-04-01T02:25:25Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "diffHunk": "@@ -113,8 +123,15 @@ void setup() {\n         connectionProcessor = Mono.fromCallable(() -> connection).repeat(10).subscribeWith(\n             new ServiceBusConnectionProcessor(connectionOptions.getFullyQualifiedNamespace(),\n                 connectionOptions.getRetry()));\n-        sender = new ServiceBusSenderAsyncClient(ENTITY_NAME, connectionProcessor, retryOptions,\n-            tracerProvider, messageSerializer, onClientClose);\n+\n+        sender = new ServiceBusSenderAsyncClient(ENTITY_NAME, MessagingEntityType.QUEUE, connectionProcessor,\n+            retryOptions, tracerProvider, messageSerializer, onClientClose);\n+\n+        when(connection.getManagementNode(anyString(), any(MessagingEntityType.class)))\n+            .thenReturn(just(managementNode));\n+\n+        when(sendLink.getLinkSize()).thenReturn(Mono.just(ServiceBusSenderAsyncClient.MAX_MESSAGE_LENGTH_BYTES));\n+        doNothing().when(onClientClose).run();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47b5ea234acabd851dabb9fd32657b00e1b42a3a"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzNzQwMQ==", "bodyText": "It was throwing NPE in test when it was invoked by client.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401337401", "createdAt": "2020-04-01T03:36:01Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "diffHunk": "@@ -113,8 +123,15 @@ void setup() {\n         connectionProcessor = Mono.fromCallable(() -> connection).repeat(10).subscribeWith(\n             new ServiceBusConnectionProcessor(connectionOptions.getFullyQualifiedNamespace(),\n                 connectionOptions.getRetry()));\n-        sender = new ServiceBusSenderAsyncClient(ENTITY_NAME, connectionProcessor, retryOptions,\n-            tracerProvider, messageSerializer, onClientClose);\n+\n+        sender = new ServiceBusSenderAsyncClient(ENTITY_NAME, MessagingEntityType.QUEUE, connectionProcessor,\n+            retryOptions, tracerProvider, messageSerializer, onClientClose);\n+\n+        when(connection.getManagementNode(anyString(), any(MessagingEntityType.class)))\n+            .thenReturn(just(managementNode));\n+\n+        when(sendLink.getLinkSize()).thenReturn(Mono.just(ServiceBusSenderAsyncClient.MAX_MESSAGE_LENGTH_BYTES));\n+        doNothing().when(onClientClose).run();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMyMDEwNA=="}, "originalCommit": {"oid": "47b5ea234acabd851dabb9fd32657b00e1b42a3a"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODgyNjcyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjoyNTo0OVrOF-upEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjoyNTo0OVrOF-upEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMyMDIwOQ==", "bodyText": "Should you verify that the management node operation was called?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401320209", "createdAt": "2020-04-01T02:25:49Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "diffHunk": "@@ -290,6 +307,33 @@ void sendSingleMessage() {\n         Assertions.assertEquals(Section.SectionType.Data, message.getBody().getType());\n     }\n \n+    @Test\n+    void scheduleMessage() {\n+        // Arrange\n+        long sequenceNumberReturned = 10;\n+\n+        when(managementNode.schedule(eq(message), any(Instant.class), any(Integer.class)))\n+            .thenReturn(just(sequenceNumberReturned));\n+\n+        // Act & Assert\n+        StepVerifier.create(sender.scheduleMessage(message, mock(Instant.class)))\n+            .expectNext(sequenceNumberReturned)\n+            .verifyComplete();\n+    }\n+\n+    @Test\n+    void cancelScheduleMessage() {\n+        // Arrange\n+        long sequenceNumberReturned = 10;\n+\n+        when(managementNode.cancelScheduledMessage(eq(sequenceNumberReturned)))\n+            .thenReturn(Mono.empty());\n+\n+        // Act & Assert\n+        StepVerifier.create(sender.cancelScheduledMessage(sequenceNumberReturned))\n+            .verifyComplete();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47b5ea234acabd851dabb9fd32657b00e1b42a3a"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODgyNzIwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/microsoft-azure-servicebus/src/test/java/com/microsoft/azure/servicebus/TestCommons.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjoyNjowM1rOF-upWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjoyNjowM1rOF-upWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMyMDI4Mg==", "bodyText": "Did you mean to change code in this library?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401320282", "createdAt": "2020-04-01T02:26:03Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/microsoft-azure-servicebus/src/test/java/com/microsoft/azure/servicebus/TestCommons.java", "diffHunk": "@@ -94,7 +93,7 @@ private static void testBasicReceiveAndDeleteWithBinaryData(IMessageSender sende\n         receivedMessage = receiver.receive(SHORT_WAIT_TIME);\n         Assert.assertNull(\"Message received again\", receivedMessage);\n     }\n-    \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47b5ea234acabd851dabb9fd32657b00e1b42a3a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTM1MjMzOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo0OToxOVrOF_HD_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo0OToxOVrOF_HD_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyMDMxOA==", "bodyText": "You already have access to the list here, why not return the first item in the list as a mono rather than wrapping it in a flux from iterable and only choosing one item from it?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401720318", "createdAt": "2020-04-01T15:49:19Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -289,7 +297,8 @@ private Message createDispositionMessage(UUID[] lockTokens, DispositionStatus di\n             }\n \n             return Flux.fromIterable(messageSerializer.deserializeList(responseMessage, Instant.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5667f3c60ea9e73e4ab1472d0fcfac44fc2a8afc"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTM1NDUxOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo0OTo1MFrOF_HFZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo0OTo1MFrOF_HFZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyMDY3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /***\n          \n          \n            \n                /**", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401720678", "createdAt": "2020-04-01T15:49:50Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -316,10 +325,102 @@ private Message createManagementMessage(String operation, String linkName) {\n         return message;\n     }\n \n+    /***", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5667f3c60ea9e73e4ab1472d0fcfac44fc2a8afc"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTM2NjMyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo1MjozNVrOF_HM7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo1MjozNVrOF_HM7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyMjYwNw==", "bodyText": "When .thenMany versus .then? You aren't returning a stream of items, just a Mono.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401722607", "createdAt": "2020-04-01T15:52:35Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -316,10 +325,102 @@ private Message createManagementMessage(String operation, String linkName) {\n         return message;\n     }\n \n+    /***\n+     * Create a Amqp key, value map to be used to create Amqp mesage for scheduling purpose.\n+     *\n+     * @param messageToSchedule The message which needs to be scheduled.\n+     * @param maxMessageSize The maximum size allowed on send link.\n+     * @return Map of key and value in Amqp format.\n+     * @throws AmqpException When payload exceeded maximum message allowed size.\n+     */\n+    private Map<String, Object> createScheduleMessgeAmqpValue(ServiceBusMessage messageToSchedule, int maxMessageSize) {\n+\n+        Message message = messageSerializer.serialize(messageToSchedule);\n+\n+        // The maxsize allowed logic is from ReactorSender, this logic should be kept in sync.\n+        final int payloadSize = messageSerializer.getSize(message);\n+        final int allocationSize =\n+            Math.min(payloadSize + MAX_MESSAGING_AMQP_HEADER_SIZE_BYTES, maxMessageSize);\n+        final byte[] bytes = new byte[allocationSize];\n+\n+        int encodedSize;\n+        try {\n+            encodedSize = message.encode(bytes, 0, allocationSize);\n+        } catch (BufferOverflowException exception) {\n+            final String errorMessage =\n+                String.format(Locale.US,\n+                    \"Error sending. Size of the payload exceeded maximum message size: %s kb\",\n+                    maxMessageSize / 1024);\n+            throw logger.logExceptionAsWarning(new AmqpException(false,\n+                AmqpErrorCondition.LINK_PAYLOAD_SIZE_EXCEEDED, errorMessage, exception, getErrorContext()));\n+        }\n+        HashMap<String, Object> messageEntry = new HashMap<>();\n+        messageEntry.put(MESSAGE, new Binary(bytes, 0, encodedSize));\n+        messageEntry.put(MESSAGE_ID, message.getMessageId());\n+\n+        Collection<HashMap<String, Object>> messageList = new LinkedList<>();\n+        messageList.add(messageEntry);\n+\n+        Map<String, Object> requestBodyMap = new HashMap<>();\n+        requestBodyMap.put(MESSAGES, messageList);\n+        return requestBodyMap;\n+    }\n+\n     private AmqpErrorContext getErrorContext() {\n         return new SessionErrorContext(fullyQualifiedNamespace, entityPath);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Mono<Void> cancelScheduledMessage(long sequenceNumber) {\n+        return isAuthorized(CANCEL_SCHEDULED_MESSAGE_OPERATION).thenMany(createRequestResponse.flatMap(channel -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5667f3c60ea9e73e4ab1472d0fcfac44fc2a8afc"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTM2ODMwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo1MzowMlrOF_HONg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo1Mzo1M1rOF_HQ1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyMjkzNA==", "bodyText": "Why .thenMany? Same comment as above.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401722934", "createdAt": "2020-04-01T15:53:02Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -316,10 +325,102 @@ private Message createManagementMessage(String operation, String linkName) {\n         return message;\n     }\n \n+    /***\n+     * Create a Amqp key, value map to be used to create Amqp mesage for scheduling purpose.\n+     *\n+     * @param messageToSchedule The message which needs to be scheduled.\n+     * @param maxMessageSize The maximum size allowed on send link.\n+     * @return Map of key and value in Amqp format.\n+     * @throws AmqpException When payload exceeded maximum message allowed size.\n+     */\n+    private Map<String, Object> createScheduleMessgeAmqpValue(ServiceBusMessage messageToSchedule, int maxMessageSize) {\n+\n+        Message message = messageSerializer.serialize(messageToSchedule);\n+\n+        // The maxsize allowed logic is from ReactorSender, this logic should be kept in sync.\n+        final int payloadSize = messageSerializer.getSize(message);\n+        final int allocationSize =\n+            Math.min(payloadSize + MAX_MESSAGING_AMQP_HEADER_SIZE_BYTES, maxMessageSize);\n+        final byte[] bytes = new byte[allocationSize];\n+\n+        int encodedSize;\n+        try {\n+            encodedSize = message.encode(bytes, 0, allocationSize);\n+        } catch (BufferOverflowException exception) {\n+            final String errorMessage =\n+                String.format(Locale.US,\n+                    \"Error sending. Size of the payload exceeded maximum message size: %s kb\",\n+                    maxMessageSize / 1024);\n+            throw logger.logExceptionAsWarning(new AmqpException(false,\n+                AmqpErrorCondition.LINK_PAYLOAD_SIZE_EXCEEDED, errorMessage, exception, getErrorContext()));\n+        }\n+        HashMap<String, Object> messageEntry = new HashMap<>();\n+        messageEntry.put(MESSAGE, new Binary(bytes, 0, encodedSize));\n+        messageEntry.put(MESSAGE_ID, message.getMessageId());\n+\n+        Collection<HashMap<String, Object>> messageList = new LinkedList<>();\n+        messageList.add(messageEntry);\n+\n+        Map<String, Object> requestBodyMap = new HashMap<>();\n+        requestBodyMap.put(MESSAGES, messageList);\n+        return requestBodyMap;\n+    }\n+\n     private AmqpErrorContext getErrorContext() {\n         return new SessionErrorContext(fullyQualifiedNamespace, entityPath);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Mono<Void> cancelScheduledMessage(long sequenceNumber) {\n+        return isAuthorized(CANCEL_SCHEDULED_MESSAGE_OPERATION).thenMany(createRequestResponse.flatMap(channel -> {\n+\n+            Message requestMessage = createManagementMessage(CANCEL_SCHEDULED_MESSAGE_OPERATION,\n+                channel.getReceiveLinkName());\n+\n+            requestMessage.setBody(new AmqpValue(Collections.singletonMap(SEQUENCE_NUMBERS,\n+                new Long[]{sequenceNumber})));\n+            return channel.sendWithAck(requestMessage);\n+        }).map(responseMessage -> {\n+            int statusCode = RequestResponseUtils.getResponseStatusCode(responseMessage);\n+\n+            if (statusCode == AmqpResponseCode.OK.getValue()) {\n+                return Mono.empty();\n+            }\n+            return Mono.error(new AmqpException(false, \"Could not cancel scheduled message with sequence number \"\n+                + sequenceNumber, getErrorContext()));\n+        })).then();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Mono<Long> schedule(ServiceBusMessage messageToSchedule, Instant scheduledEnqueueTime, int maxSendLinkSize) {\n+        messageToSchedule.setScheduledEnqueueTime(scheduledEnqueueTime);\n+        return  isAuthorized(SCHEDULE_MESSAGE_OPERATION).thenMany(createRequestResponse.flatMap(channel -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5667f3c60ea9e73e4ab1472d0fcfac44fc2a8afc"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyMzYwNQ==", "bodyText": "You only take the first item from the list.. I'd just return it as a mono instead of wrapping it in a flux.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401723605", "createdAt": "2020-04-01T15:53:53Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -316,10 +325,102 @@ private Message createManagementMessage(String operation, String linkName) {\n         return message;\n     }\n \n+    /***\n+     * Create a Amqp key, value map to be used to create Amqp mesage for scheduling purpose.\n+     *\n+     * @param messageToSchedule The message which needs to be scheduled.\n+     * @param maxMessageSize The maximum size allowed on send link.\n+     * @return Map of key and value in Amqp format.\n+     * @throws AmqpException When payload exceeded maximum message allowed size.\n+     */\n+    private Map<String, Object> createScheduleMessgeAmqpValue(ServiceBusMessage messageToSchedule, int maxMessageSize) {\n+\n+        Message message = messageSerializer.serialize(messageToSchedule);\n+\n+        // The maxsize allowed logic is from ReactorSender, this logic should be kept in sync.\n+        final int payloadSize = messageSerializer.getSize(message);\n+        final int allocationSize =\n+            Math.min(payloadSize + MAX_MESSAGING_AMQP_HEADER_SIZE_BYTES, maxMessageSize);\n+        final byte[] bytes = new byte[allocationSize];\n+\n+        int encodedSize;\n+        try {\n+            encodedSize = message.encode(bytes, 0, allocationSize);\n+        } catch (BufferOverflowException exception) {\n+            final String errorMessage =\n+                String.format(Locale.US,\n+                    \"Error sending. Size of the payload exceeded maximum message size: %s kb\",\n+                    maxMessageSize / 1024);\n+            throw logger.logExceptionAsWarning(new AmqpException(false,\n+                AmqpErrorCondition.LINK_PAYLOAD_SIZE_EXCEEDED, errorMessage, exception, getErrorContext()));\n+        }\n+        HashMap<String, Object> messageEntry = new HashMap<>();\n+        messageEntry.put(MESSAGE, new Binary(bytes, 0, encodedSize));\n+        messageEntry.put(MESSAGE_ID, message.getMessageId());\n+\n+        Collection<HashMap<String, Object>> messageList = new LinkedList<>();\n+        messageList.add(messageEntry);\n+\n+        Map<String, Object> requestBodyMap = new HashMap<>();\n+        requestBodyMap.put(MESSAGES, messageList);\n+        return requestBodyMap;\n+    }\n+\n     private AmqpErrorContext getErrorContext() {\n         return new SessionErrorContext(fullyQualifiedNamespace, entityPath);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Mono<Void> cancelScheduledMessage(long sequenceNumber) {\n+        return isAuthorized(CANCEL_SCHEDULED_MESSAGE_OPERATION).thenMany(createRequestResponse.flatMap(channel -> {\n+\n+            Message requestMessage = createManagementMessage(CANCEL_SCHEDULED_MESSAGE_OPERATION,\n+                channel.getReceiveLinkName());\n+\n+            requestMessage.setBody(new AmqpValue(Collections.singletonMap(SEQUENCE_NUMBERS,\n+                new Long[]{sequenceNumber})));\n+            return channel.sendWithAck(requestMessage);\n+        }).map(responseMessage -> {\n+            int statusCode = RequestResponseUtils.getResponseStatusCode(responseMessage);\n+\n+            if (statusCode == AmqpResponseCode.OK.getValue()) {\n+                return Mono.empty();\n+            }\n+            return Mono.error(new AmqpException(false, \"Could not cancel scheduled message with sequence number \"\n+                + sequenceNumber, getErrorContext()));\n+        })).then();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Mono<Long> schedule(ServiceBusMessage messageToSchedule, Instant scheduledEnqueueTime, int maxSendLinkSize) {\n+        messageToSchedule.setScheduledEnqueueTime(scheduledEnqueueTime);\n+        return  isAuthorized(SCHEDULE_MESSAGE_OPERATION).thenMany(createRequestResponse.flatMap(channel -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyMjkzNA=="}, "originalCommit": {"oid": "5667f3c60ea9e73e4ab1472d0fcfac44fc2a8afc"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTM3OTgwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/MessageScheduleAsyncSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo1NToyNlrOF_HVRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo1NToyNlrOF_HVRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNDc0MA==", "bodyText": "These printed messages should be cleaned up in both samples.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401724740", "createdAt": "2020-04-01T15:55:26Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/MessageScheduleAsyncSample.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Sample demonstrates how to schedule {@link ServiceBusMessage} to an Azure Service Bus queue or topic.\n+ */\n+public class MessageScheduleAsyncSample {\n+\n+    /**\n+     * Main method to invoke this demo on how to send a message to an Azure Service Bus.\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+        // The connection string value can be obtained by:\n+        // 1. Going to your Service Bus namespace in Azure Portal.\n+        // 2. Go to \"Shared access policies\"\n+        // 3. Copy the connection string for the \"RootManageSharedAccessKey\" policy.\n+        String connectionString = System.getenv(\"AZURE_SERVICEBUS_CONNECTION_STRING\");\n+\n+        // Instantiate a client that will be used to call the service.\n+        ServiceBusSenderAsyncClient senderAsyncClient = new ServiceBusClientBuilder()\n+            .connectionString(connectionString)\n+            .sender()\n+            .queueName(\"<< QUEUE NAME >>\")\n+            .buildAsyncClient();\n+\n+        // Create an message to send.\n+        ServiceBusMessage message = new ServiceBusMessage(\"Hello World!!\".getBytes(UTF_8));\n+\n+        // Send that message. This call returns a Mono<Void>, which we subscribe to. It completes successfully when the\n+        // message has been delivered to the Service Bus. It completes with an error if an exception occurred while sending\n+        // the message.\n+\n+        senderAsyncClient.scheduleMessage(message, Instant.now().plusSeconds(1 * 60L))\n+            .subscribe(aLong -> {\n+                System.out.println(\"!! After schedule message  sequence : \" + aLong);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5667f3c60ea9e73e4ab1472d0fcfac44fc2a8afc"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTM4MTU2OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/MessageScheduleAsyncSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo1NTo1M1rOF_HWhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo1NTo1M1rOF_HWhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNTA2Mg==", "bodyText": "Update the documentation to describe that schedule operation?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401725062", "createdAt": "2020-04-01T15:55:53Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/MessageScheduleAsyncSample.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Sample demonstrates how to schedule {@link ServiceBusMessage} to an Azure Service Bus queue or topic.\n+ */\n+public class MessageScheduleAsyncSample {\n+\n+    /**\n+     * Main method to invoke this demo on how to send a message to an Azure Service Bus.\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+        // The connection string value can be obtained by:\n+        // 1. Going to your Service Bus namespace in Azure Portal.\n+        // 2. Go to \"Shared access policies\"\n+        // 3. Copy the connection string for the \"RootManageSharedAccessKey\" policy.\n+        String connectionString = System.getenv(\"AZURE_SERVICEBUS_CONNECTION_STRING\");\n+\n+        // Instantiate a client that will be used to call the service.\n+        ServiceBusSenderAsyncClient senderAsyncClient = new ServiceBusClientBuilder()\n+            .connectionString(connectionString)\n+            .sender()\n+            .queueName(\"<< QUEUE NAME >>\")\n+            .buildAsyncClient();\n+\n+        // Create an message to send.\n+        ServiceBusMessage message = new ServiceBusMessage(\"Hello World!!\".getBytes(UTF_8));\n+\n+        // Send that message. This call returns a Mono<Void>, which we subscribe to. It completes successfully when the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5667f3c60ea9e73e4ab1472d0fcfac44fc2a8afc"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTM4MzM0OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/MessageScheduleAsyncSample.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo1NjoxN1rOF_HXng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoyMjoxNlrOF_IeWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNTM0Mg==", "bodyText": "Why not .plusSeconds(60) or plusMinute(1)?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401725342", "createdAt": "2020-04-01T15:56:17Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/MessageScheduleAsyncSample.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Sample demonstrates how to schedule {@link ServiceBusMessage} to an Azure Service Bus queue or topic.\n+ */\n+public class MessageScheduleAsyncSample {\n+\n+    /**\n+     * Main method to invoke this demo on how to send a message to an Azure Service Bus.\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+        // The connection string value can be obtained by:\n+        // 1. Going to your Service Bus namespace in Azure Portal.\n+        // 2. Go to \"Shared access policies\"\n+        // 3. Copy the connection string for the \"RootManageSharedAccessKey\" policy.\n+        String connectionString = System.getenv(\"AZURE_SERVICEBUS_CONNECTION_STRING\");\n+\n+        // Instantiate a client that will be used to call the service.\n+        ServiceBusSenderAsyncClient senderAsyncClient = new ServiceBusClientBuilder()\n+            .connectionString(connectionString)\n+            .sender()\n+            .queueName(\"<< QUEUE NAME >>\")\n+            .buildAsyncClient();\n+\n+        // Create an message to send.\n+        ServiceBusMessage message = new ServiceBusMessage(\"Hello World!!\".getBytes(UTF_8));\n+\n+        // Send that message. This call returns a Mono<Void>, which we subscribe to. It completes successfully when the\n+        // message has been delivered to the Service Bus. It completes with an error if an exception occurred while sending\n+        // the message.\n+\n+        senderAsyncClient.scheduleMessage(message, Instant.now().plusSeconds(1 * 60L))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5667f3c60ea9e73e4ab1472d0fcfac44fc2a8afc"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0MzQ1MQ==", "bodyText": "I did not see plusMinute() API .", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401743451", "createdAt": "2020-04-01T16:22:16Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/MessageScheduleAsyncSample.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Sample demonstrates how to schedule {@link ServiceBusMessage} to an Azure Service Bus queue or topic.\n+ */\n+public class MessageScheduleAsyncSample {\n+\n+    /**\n+     * Main method to invoke this demo on how to send a message to an Azure Service Bus.\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+        // The connection string value can be obtained by:\n+        // 1. Going to your Service Bus namespace in Azure Portal.\n+        // 2. Go to \"Shared access policies\"\n+        // 3. Copy the connection string for the \"RootManageSharedAccessKey\" policy.\n+        String connectionString = System.getenv(\"AZURE_SERVICEBUS_CONNECTION_STRING\");\n+\n+        // Instantiate a client that will be used to call the service.\n+        ServiceBusSenderAsyncClient senderAsyncClient = new ServiceBusClientBuilder()\n+            .connectionString(connectionString)\n+            .sender()\n+            .queueName(\"<< QUEUE NAME >>\")\n+            .buildAsyncClient();\n+\n+        // Create an message to send.\n+        ServiceBusMessage message = new ServiceBusMessage(\"Hello World!!\".getBytes(UTF_8));\n+\n+        // Send that message. This call returns a Mono<Void>, which we subscribe to. It completes successfully when the\n+        // message has been delivered to the Service Bus. It completes with an error if an exception occurred while sending\n+        // the message.\n+\n+        senderAsyncClient.scheduleMessage(message, Instant.now().plusSeconds(1 * 60L))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNTM0Mg=="}, "originalCommit": {"oid": "5667f3c60ea9e73e4ab1472d0fcfac44fc2a8afc"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTM4NTA2OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/MessageSendAsyncSample.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo1Njo0MFrOF_HYrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo1MjowM1rOF_L-OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNTYxMw==", "bodyText": "I thought you added this sample in another PR.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401725613", "createdAt": "2020-04-01T15:56:40Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/MessageSendAsyncSample.java", "diffHunk": "@@ -0,0 +1,50 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import java.time.Duration;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Sample demonstrates how to send {@link ServiceBusMessage} to an Azure Service Bus queue or topic.\n+ */\n+public class MessageSendAsyncSample {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5667f3c60ea9e73e4ab1472d0fcfac44fc2a8afc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0NDY4MA==", "bodyText": "Another PR I just had an update to it .", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401744680", "createdAt": "2020-04-01T16:24:03Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/MessageSendAsyncSample.java", "diffHunk": "@@ -0,0 +1,50 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import java.time.Duration;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Sample demonstrates how to send {@link ServiceBusMessage} to an Azure Service Bus queue or topic.\n+ */\n+public class MessageSendAsyncSample {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNTYxMw=="}, "originalCommit": {"oid": "5667f3c60ea9e73e4ab1472d0fcfac44fc2a8afc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgwMDc2MQ==", "bodyText": "This sample exists almost exactly: https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/SendMessageAsyncSample.java", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401800761", "createdAt": "2020-04-01T17:52:03Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/MessageSendAsyncSample.java", "diffHunk": "@@ -0,0 +1,50 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import java.time.Duration;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Sample demonstrates how to send {@link ServiceBusMessage} to an Azure Service Bus queue or topic.\n+ */\n+public class MessageSendAsyncSample {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNTYxMw=="}, "originalCommit": {"oid": "5667f3c60ea9e73e4ab1472d0fcfac44fc2a8afc"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTM5MDQ1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo1Nzo0OVrOF_HcCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo1Nzo0OVrOF_HcCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNjQ3Mw==", "bodyText": "use client logger.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401726473", "createdAt": "2020-04-01T15:57:49Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -110,6 +110,57 @@ void peekMessage() {\n             .verifyComplete();\n     }\n \n+    /**\n+     * Verifies that we can schedule and peek a message.\n+     */\n+    @Test\n+    void scheduleMessage() {\n+        // Arrange\n+        final String messageId = UUID.randomUUID().toString();\n+        final String contents = \"Some-contents\";\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(contents, messageId, 0);\n+        final Instant scheduledEnqueueTime = Instant.now().plusSeconds(2);\n+\n+        sender.scheduleMessage(message, scheduledEnqueueTime)\n+            .delaySubscription(Duration.ofSeconds(3))\n+            .block();\n+\n+        // Assert & Act\n+        StepVerifier.create(receiver.receive().take(1))\n+            .assertNext(receivedMessage -> {\n+                Assertions.assertArrayEquals(contents.getBytes(), receivedMessage.getBody());\n+                Assertions.assertTrue(receivedMessage.getProperties().containsKey(MESSAGE_TRACKING_ID));\n+                Assertions.assertEquals(messageId, receivedMessage.getProperties().get(MESSAGE_TRACKING_ID));\n+            })\n+            .verifyComplete();\n+    }\n+\n+    /**\n+     * Verifies that we can cancel a scheduled message.\n+     */\n+    @Test\n+    void cancelScheduleMessage() {\n+        // Arrange\n+        final String messageId = UUID.randomUUID().toString();\n+        final String contents = \"Some-contents\";\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(contents, messageId, 0);\n+        final Instant scheduledEnqueueTime = Instant.now().plusSeconds(10);\n+        final Duration delayDuration = Duration.ofSeconds(3);\n+\n+        final Long sequenceNumber = sender.scheduleMessage(message, scheduledEnqueueTime).block();\n+        System.out.println(\"Scheduled the message, sequence number: \" + sequenceNumber);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5667f3c60ea9e73e4ab1472d0fcfac44fc2a8afc"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTM5NzQyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo1OToxNFrOF_HgVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo1OToxNFrOF_HgVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNzU3NQ==", "bodyText": "I could have been more clear, the verification of management node operation should be here as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401727575", "createdAt": "2020-04-01T15:59:14Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "diffHunk": "@@ -290,6 +307,37 @@ void sendSingleMessage() {\n         Assertions.assertEquals(Section.SectionType.Data, message.getBody().getType());\n     }\n \n+    @Test\n+    void scheduleMessage() {\n+        // Arrange\n+        long sequenceNumberReturned = 10;\n+        Instant instant = mock(Instant.class);\n+\n+        when(connection.createSendLink(eq(ENTITY_NAME), eq(ENTITY_NAME), any(AmqpRetryOptions.class)))\n+            .thenReturn(Mono.just(sendLink));\n+        when(sendLink.getLinkSize()).thenReturn(Mono.just(MAX_MESSAGE_LENGTH_BYTES));\n+        when(managementNode.schedule(eq(message), eq(instant), any(Integer.class)))\n+            .thenReturn(just(sequenceNumberReturned));\n+\n+        // Act & Assert\n+        StepVerifier.create(sender.scheduleMessage(message, instant))\n+            .expectNext(sequenceNumberReturned)\n+            .verifyComplete();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5667f3c60ea9e73e4ab1472d0fcfac44fc2a8afc"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTg0MjU1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo0OTo1MVrOF_L5LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo0OTo1MVrOF_L5LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5OTQ2OQ==", "bodyText": "Nothing is this code is async, you can use .map.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401799469", "createdAt": "2020-04-01T17:49:51Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -272,23 +277,33 @@ private Message createDispositionMessage(UUID[] lockTokens, DispositionStatus di\n         return message;\n     }\n \n-    private Flux<Instant> renewMessageLock(UUID[] renewLockList) {\n-\n-        return  isAuthorized(PEEK_OPERATION).thenMany(createRequestResponse.flatMap(channel -> {\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Mono<Instant> renewMessageLock(UUID lockToken) {\n+        return  isAuthorized(PEEK_OPERATION).then(createRequestResponse.flatMap(channel -> {\n \n             Message requestMessage = createManagementMessage(RENEW_LOCK_OPERATION,\n                 channel.getReceiveLinkName());\n \n-            requestMessage.setBody(new AmqpValue(Collections.singletonMap(LOCK_TOKENS_KEY, renewLockList)));\n+            requestMessage.setBody(new AmqpValue(Collections.singletonMap(LOCK_TOKENS_KEY, new UUID[]{lockToken})));\n             return channel.sendWithAck(requestMessage);\n-        }).flatMapMany(responseMessage -> {\n+        }).flatMap(responseMessage -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99420905173fdbb7ec0afab54f7daa17c72c1eaf"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTg0NjA2OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo1MDo1MlrOF_L7cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo1MDo1MlrOF_L7cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgwMDA1MA==", "bodyText": "Similar to my first comment above. This can be .map rather than .flatMap.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9028#discussion_r401800050", "createdAt": "2020-04-01T17:50:52Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -316,10 +331,108 @@ private Message createManagementMessage(String operation, String linkName) {\n         return message;\n     }\n \n+    /**\n+     * Create a Amqp key, value map to be used to create Amqp mesage for scheduling purpose.\n+     *\n+     * @param messageToSchedule The message which needs to be scheduled.\n+     * @param maxMessageSize The maximum size allowed on send link.\n+     *\n+     * @return Map of key and value in Amqp format.\n+     * @throws AmqpException When payload exceeded maximum message allowed size.\n+     */\n+    private Map<String, Object> createScheduleMessgeAmqpValue(ServiceBusMessage messageToSchedule, int maxMessageSize) {\n+\n+        Message message = messageSerializer.serialize(messageToSchedule);\n+\n+        // The maxsize allowed logic is from ReactorSender, this logic should be kept in sync.\n+        final int payloadSize = messageSerializer.getSize(message);\n+        final int allocationSize =\n+            Math.min(payloadSize + MAX_MESSAGING_AMQP_HEADER_SIZE_BYTES, maxMessageSize);\n+        final byte[] bytes = new byte[allocationSize];\n+\n+        int encodedSize;\n+        try {\n+            encodedSize = message.encode(bytes, 0, allocationSize);\n+        } catch (BufferOverflowException exception) {\n+            final String errorMessage =\n+                String.format(Locale.US,\n+                    \"Error sending. Size of the payload exceeded maximum message size: %s kb\",\n+                    maxMessageSize / 1024);\n+            throw logger.logExceptionAsWarning(new AmqpException(false,\n+                AmqpErrorCondition.LINK_PAYLOAD_SIZE_EXCEEDED, errorMessage, exception, getErrorContext()));\n+        }\n+        HashMap<String, Object> messageEntry = new HashMap<>();\n+        messageEntry.put(MESSAGE, new Binary(bytes, 0, encodedSize));\n+        messageEntry.put(MESSAGE_ID, message.getMessageId());\n+\n+        Collection<HashMap<String, Object>> messageList = new LinkedList<>();\n+        messageList.add(messageEntry);\n+\n+        Map<String, Object> requestBodyMap = new HashMap<>();\n+        requestBodyMap.put(MESSAGES, messageList);\n+        return requestBodyMap;\n+    }\n+\n     private AmqpErrorContext getErrorContext() {\n         return new SessionErrorContext(fullyQualifiedNamespace, entityPath);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Mono<Void> cancelScheduledMessage(long sequenceNumber) {\n+        return isAuthorized(CANCEL_SCHEDULED_MESSAGE_OPERATION).then(createRequestResponse.flatMap(channel -> {\n+\n+            Message requestMessage = createManagementMessage(CANCEL_SCHEDULED_MESSAGE_OPERATION,\n+                channel.getReceiveLinkName());\n+\n+            requestMessage.setBody(new AmqpValue(Collections.singletonMap(SEQUENCE_NUMBERS,\n+                new Long[]{sequenceNumber})));\n+            return channel.sendWithAck(requestMessage);\n+        }).map(responseMessage -> {\n+            int statusCode = RequestResponseUtils.getResponseStatusCode(responseMessage);\n+\n+            if (statusCode == AmqpResponseCode.OK.getValue()) {\n+                return Mono.empty();\n+            }\n+            return Mono.error(new AmqpException(false, \"Could not cancel scheduled message with sequence number \"\n+                + sequenceNumber, getErrorContext()));\n+        })).then();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Mono<Long> schedule(ServiceBusMessage messageToSchedule, Instant scheduledEnqueueTime, int maxSendLinkSize) {\n+        messageToSchedule.setScheduledEnqueueTime(scheduledEnqueueTime);\n+        return  isAuthorized(SCHEDULE_MESSAGE_OPERATION).then(createRequestResponse.flatMap(channel -> {\n+\n+            Message requestMessage = createManagementMessage(SCHEDULE_MESSAGE_OPERATION, channel.getReceiveLinkName());\n+            Map<String, Object> requestBodyMap = createScheduleMessgeAmqpValue(messageToSchedule, maxSendLinkSize);\n+\n+            requestMessage.setBody(new AmqpValue(requestBodyMap));\n+            return channel.sendWithAck(requestMessage);\n+        }).flatMap(responseMessage -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99420905173fdbb7ec0afab54f7daa17c72c1eaf"}, "originalPosition": 203}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 188, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}