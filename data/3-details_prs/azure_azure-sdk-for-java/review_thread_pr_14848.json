{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwMTIxMjI0", "number": 14848, "reviewThreads": {"totalCount": 52, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjoyMTowOFrOEgiXzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDozMTo0NVrOEh53rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTUzMDM5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAnnotatedMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjoyMTowOFrOHNc3tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNDowNzowMFrOHNfYYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2NjU0OQ==", "bodyText": "Inconsistent use of this. Why do the instantiation here vs in the constructor and make it final. We always do .getDeliveryAnnotations() when serialising or deserialising, so weren't not saving any time.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r483866549", "createdAt": "2020-09-04T22:21:08Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAnnotatedMessage.java", "diffHunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Amqp representation of the message.\n+ */\n+public final class AmqpAnnotatedMessage {\n+    private final AmqpMessageBody amqpMessageBody;\n+    private Map<String, Object> applicationProperties;\n+    private Map<String, Object> deliveryAnnotations;\n+    private Map<String, Object> messageAnnotations;\n+    private Map<String, Object> footer;\n+    private AmqpMessageHeader header;\n+    private AmqpMessageProperties properties;\n+\n+    /**\n+     * Creates instance of {@link AmqpAnnotatedMessage} with given {@link AmqpMessageBody}.\n+     *\n+     * @param body to be set on amqp message.\n+     */\n+    public AmqpAnnotatedMessage(AmqpMessageBody body) {\n+        this.amqpMessageBody = Objects.requireNonNull(body, \"'body' cannot be null.\");\n+    }\n+\n+    /**\n+     * Creates instance of {@link AmqpAnnotatedMessage} with given {@link AmqpAnnotatedMessage}.\n+     *\n+     * @param message used to create another instance of {@link AmqpAnnotatedMessage}.\n+     */\n+    public AmqpAnnotatedMessage(AmqpAnnotatedMessage message) {\n+        Objects.requireNonNull(message, \"'message' cannot be null.\");\n+        this.amqpMessageBody = Objects.requireNonNull(message.getBody(), \"'message.body' cannot be null.\");\n+        this.applicationProperties = message.getApplicationProperties();\n+        this.deliveryAnnotations = message.getDeliveryAnnotations();\n+        this.messageAnnotations = message.getMessageAnnotations();\n+        this.header = message.getHeader();\n+        this.properties = message.getProperties();\n+    }\n+\n+    /**\n+     * Gets the {@link Map} of application properties.\n+     * @return The application properties.\n+     */\n+    public Map<String, Object> getApplicationProperties() {\n+        if (this.applicationProperties == null) {\n+            this.applicationProperties = new HashMap<>();\n+        }\n+        return applicationProperties;\n+    }\n+\n+    /**\n+     * Gets the {@link AmqpMessageBody}.\n+     *\n+     * @return the {@link AmqpMessageBody} object.\n+     */\n+    public AmqpMessageBody getBody() {\n+        return amqpMessageBody;\n+    }\n+\n+    /**\n+     * Gets the {@link Map} representation of delivery annotations.\n+     *\n+     * @return the {@link Map} representation of delivery annotations.\n+     */\n+    public Map<String, Object> getDeliveryAnnotations() {\n+        if (deliveryAnnotations == null) {\n+            this.deliveryAnnotations = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6614ebdb7d7c11eebf8c709d42386a6be0eeaece"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkwNzY4MQ==", "bodyText": "I took motivation from Amqp library implementation but ,you are right we are not saving any time. So I will put it back in constructor.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r483907681", "createdAt": "2020-09-05T04:07:00Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAnnotatedMessage.java", "diffHunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Amqp representation of the message.\n+ */\n+public final class AmqpAnnotatedMessage {\n+    private final AmqpMessageBody amqpMessageBody;\n+    private Map<String, Object> applicationProperties;\n+    private Map<String, Object> deliveryAnnotations;\n+    private Map<String, Object> messageAnnotations;\n+    private Map<String, Object> footer;\n+    private AmqpMessageHeader header;\n+    private AmqpMessageProperties properties;\n+\n+    /**\n+     * Creates instance of {@link AmqpAnnotatedMessage} with given {@link AmqpMessageBody}.\n+     *\n+     * @param body to be set on amqp message.\n+     */\n+    public AmqpAnnotatedMessage(AmqpMessageBody body) {\n+        this.amqpMessageBody = Objects.requireNonNull(body, \"'body' cannot be null.\");\n+    }\n+\n+    /**\n+     * Creates instance of {@link AmqpAnnotatedMessage} with given {@link AmqpAnnotatedMessage}.\n+     *\n+     * @param message used to create another instance of {@link AmqpAnnotatedMessage}.\n+     */\n+    public AmqpAnnotatedMessage(AmqpAnnotatedMessage message) {\n+        Objects.requireNonNull(message, \"'message' cannot be null.\");\n+        this.amqpMessageBody = Objects.requireNonNull(message.getBody(), \"'message.body' cannot be null.\");\n+        this.applicationProperties = message.getApplicationProperties();\n+        this.deliveryAnnotations = message.getDeliveryAnnotations();\n+        this.messageAnnotations = message.getMessageAnnotations();\n+        this.header = message.getHeader();\n+        this.properties = message.getProperties();\n+    }\n+\n+    /**\n+     * Gets the {@link Map} of application properties.\n+     * @return The application properties.\n+     */\n+    public Map<String, Object> getApplicationProperties() {\n+        if (this.applicationProperties == null) {\n+            this.applicationProperties = new HashMap<>();\n+        }\n+        return applicationProperties;\n+    }\n+\n+    /**\n+     * Gets the {@link AmqpMessageBody}.\n+     *\n+     * @return the {@link AmqpMessageBody} object.\n+     */\n+    public AmqpMessageBody getBody() {\n+        return amqpMessageBody;\n+    }\n+\n+    /**\n+     * Gets the {@link Map} representation of delivery annotations.\n+     *\n+     * @return the {@link Map} representation of delivery annotations.\n+     */\n+    public Map<String, Object> getDeliveryAnnotations() {\n+        if (deliveryAnnotations == null) {\n+            this.deliveryAnnotations = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2NjU0OQ=="}, "originalCommit": {"oid": "6614ebdb7d7c11eebf8c709d42386a6be0eeaece"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTUzMjM3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpBodyType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjoyMjoyNFrOHNc4zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjoyMjoyNFrOHNc4zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2NjgzMA==", "bodyText": "Is it necessary to have (\"Data\")? I think it would be just as informational to use .tostring on the enum value and get the value in all caps without adding complexity to this class..", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r483866830", "createdAt": "2020-09-04T22:22:24Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpBodyType.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import java.util.Locale;\n+\n+/**\n+ * All AmqpBodyType available for AMQP Message.\n+ */\n+public enum AmqpBodyType {\n+    /**\n+     * Represent Amqp Data type\n+     */\n+    DATA(\"Data\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6614ebdb7d7c11eebf8c709d42386a6be0eeaece"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTUzMjY4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpDataBody.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjoyMjozOFrOHNc4-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjoyMjozOFrOHNc4-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2Njg3Mg==", "bodyText": "Missing docs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r483866872", "createdAt": "2020-09-04T22:22:38Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpDataBody.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import com.azure.core.util.IterableStream;\n+\n+import java.util.Objects;\n+\n+/**\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6614ebdb7d7c11eebf8c709d42386a6be0eeaece"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTUzMzM1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpDataBody.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjoyMzowNVrOHNc5XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjoyMzowNVrOHNc5XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2Njk3Mg==", "bodyText": "The body type is always data, you can return the enum rather than creating a new field variable for it for every instance.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r483866972", "createdAt": "2020-09-04T22:23:05Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpDataBody.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import com.azure.core.util.IterableStream;\n+\n+import java.util.Objects;\n+\n+/**\n+ *\n+ */\n+public final class AmqpDataBody implements AmqpMessageBody {\n+    private final AmqpBodyType bodyType;\n+    private final IterableStream<BinaryData> data;\n+\n+    /**\n+     * @param data to be set.\n+     */\n+    public AmqpDataBody(Iterable<BinaryData> data) {\n+        Objects.requireNonNull(data, \"'data' cannot be null.\");\n+        this.data = new IterableStream<>(data);\n+        this.bodyType = AmqpBodyType.DATA;\n+    }\n+\n+    @Override\n+    public AmqpBodyType getBodyType() {\n+        return bodyType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6614ebdb7d7c11eebf8c709d42386a6be0eeaece"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTUzNDk5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjoyNDoxNVrOHNc6Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjoyNDoxNVrOHNc6Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2NzE5OQ==", "bodyText": "iirc, we didn't have a public constructor available for this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r483867199", "createdAt": "2020-09-04T22:24:15Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageProperties.java", "diffHunk": "@@ -0,0 +1,292 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.OffsetDateTime;\n+import java.util.Arrays;\n+\n+/**\n+ * Represents properties from Amqp message.\n+ */\n+@Fluent\n+public class AmqpMessageProperties {\n+\n+    private OffsetDateTime absoluteExpiryTime;\n+    private String contentEncoding;\n+    private String contentType;\n+    private String correlationId;\n+    private OffsetDateTime creationTime;\n+    private String groupId;\n+    private long groupSequence;\n+    private String messageId;\n+    private String replyToGroupId;\n+    private String replyTo;\n+    private String to;\n+    private String subject;\n+    private byte[] userId;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6614ebdb7d7c11eebf8c709d42386a6be0eeaece"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTUzNjk4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/test/java/com/azure/core/amqp/models/AmqpAnnotatedMessageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjoyNToxM1rOHNc7Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjoyNToxM1rOHNc7Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2NzQ2Mg==", "bodyText": "The arrangement should be the first set of new operators. And act would be the creation of the message.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r483867462", "createdAt": "2020-09-04T22:25:13Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/test/java/com/azure/core/amqp/models/AmqpAnnotatedMessageTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+/**\n+ * Test class for  {@link AmqpAnnotatedMessage}\n+ */\n+public class AmqpAnnotatedMessageTest {\n+\n+    private static final byte[] CONTENTS_BYTES = \"Some-contents\".getBytes(StandardCharsets.UTF_8);\n+\n+    /**\n+     * Verifies we correctly set values via constructor for {@link AmqpAnnotatedMessage}.\n+     */\n+    @Test\n+    public void constructorValidValues() {\n+        // Arrange & Act\n+        AmqpAnnotatedMessage actual = new AmqpAnnotatedMessage(new AmqpDataBody(Collections.singletonList(new BinaryData(CONTENTS_BYTES))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6614ebdb7d7c11eebf8c709d42386a6be0eeaece"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTYzMjgzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAnnotatedMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMzozNDoxOFrOHNdvrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNDoxOTozMFrOHNfb3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg4MDg3OQ==", "bodyText": "Maybe a stupid question. There is class AmqpMessageHeader but no AmqpMessageFooter. What's the reason behind?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r483880879", "createdAt": "2020-09-04T23:34:18Z", "author": {"login": "YijunXieMS"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAnnotatedMessage.java", "diffHunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Amqp representation of the message.\n+ */\n+public final class AmqpAnnotatedMessage {\n+    private final AmqpMessageBody amqpMessageBody;\n+    private Map<String, Object> applicationProperties;\n+    private Map<String, Object> deliveryAnnotations;\n+    private Map<String, Object> messageAnnotations;\n+    private Map<String, Object> footer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6614ebdb7d7c11eebf8c709d42386a6be0eeaece"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkwODU3Mg==", "bodyText": "It is because unlike AmqpMessageHeader , The footer could be represented by Map<String, Object>. So we do not need another type for this. We are exposing internal representation as it is.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r483908572", "createdAt": "2020-09-05T04:19:30Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAnnotatedMessage.java", "diffHunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Amqp representation of the message.\n+ */\n+public final class AmqpAnnotatedMessage {\n+    private final AmqpMessageBody amqpMessageBody;\n+    private Map<String, Object> applicationProperties;\n+    private Map<String, Object> deliveryAnnotations;\n+    private Map<String, Object> messageAnnotations;\n+    private Map<String, Object> footer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg4MDg3OQ=="}, "originalCommit": {"oid": "6614ebdb7d7c11eebf8c709d42386a6be0eeaece"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTYzODk5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageHeader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMzozOToxOFrOHNdy8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNDoyMDo1M1rOHNfcUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg4MTcxMw==", "bodyText": "isDurable, like what we discussed in issue #14139", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r483881713", "createdAt": "2020-09-04T23:39:18Z", "author": {"login": "YijunXieMS"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageHeader.java", "diffHunk": "@@ -0,0 +1,123 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Represents Header from Amqp message.\n+ */\n+@Fluent\n+public class AmqpMessageHeader {\n+\n+    private Long deliveryCount;\n+    private Boolean durable;\n+    private Boolean firstAcquirer;\n+    private Short priority;\n+    private Duration timeToLive;\n+\n+    AmqpMessageHeader() {\n+        // This class does not have any public constructors, and is not able to be instantiated using 'new'.\n+    }\n+\n+    /**\n+     * Gets delivery count.\n+     *\n+     * @return delivery count.\n+     */\n+    public Long getDeliveryCount() {\n+        return deliveryCount;\n+    }\n+\n+    /**\n+     * Sets the given {@code deliveryCount} value on {@link AmqpMessageHeader} object.\n+     *\n+     * @param deliveryCount to be set.\n+     * @return updated {@link AmqpMessageHeader} object.\n+     */\n+    public AmqpMessageHeader setDeliveryCount(Long deliveryCount) {\n+        this.deliveryCount = deliveryCount;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets durable boolean flag.\n+     *\n+     * @return The durable.\n+     */\n+    public Boolean getDurable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6614ebdb7d7c11eebf8c709d42386a6be0eeaece"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkwODY4OA==", "bodyText": "will change to isDurable.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r483908688", "createdAt": "2020-09-05T04:20:53Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageHeader.java", "diffHunk": "@@ -0,0 +1,123 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Represents Header from Amqp message.\n+ */\n+@Fluent\n+public class AmqpMessageHeader {\n+\n+    private Long deliveryCount;\n+    private Boolean durable;\n+    private Boolean firstAcquirer;\n+    private Short priority;\n+    private Duration timeToLive;\n+\n+    AmqpMessageHeader() {\n+        // This class does not have any public constructors, and is not able to be instantiated using 'new'.\n+    }\n+\n+    /**\n+     * Gets delivery count.\n+     *\n+     * @return delivery count.\n+     */\n+    public Long getDeliveryCount() {\n+        return deliveryCount;\n+    }\n+\n+    /**\n+     * Sets the given {@code deliveryCount} value on {@link AmqpMessageHeader} object.\n+     *\n+     * @param deliveryCount to be set.\n+     * @return updated {@link AmqpMessageHeader} object.\n+     */\n+    public AmqpMessageHeader setDeliveryCount(Long deliveryCount) {\n+        this.deliveryCount = deliveryCount;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets durable boolean flag.\n+     *\n+     * @return The durable.\n+     */\n+    public Boolean getDurable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg4MTcxMw=="}, "originalCommit": {"oid": "6614ebdb7d7c11eebf8c709d42386a6be0eeaece"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTYzOTY4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageHeader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMzozOTo0OVrOHNdzSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMzozOTo0OVrOHNdzSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg4MTgwMg==", "bodyText": "Similar to above, isFirstAcquirer", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r483881802", "createdAt": "2020-09-04T23:39:49Z", "author": {"login": "YijunXieMS"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageHeader.java", "diffHunk": "@@ -0,0 +1,123 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Represents Header from Amqp message.\n+ */\n+@Fluent\n+public class AmqpMessageHeader {\n+\n+    private Long deliveryCount;\n+    private Boolean durable;\n+    private Boolean firstAcquirer;\n+    private Short priority;\n+    private Duration timeToLive;\n+\n+    AmqpMessageHeader() {\n+        // This class does not have any public constructors, and is not able to be instantiated using 'new'.\n+    }\n+\n+    /**\n+     * Gets delivery count.\n+     *\n+     * @return delivery count.\n+     */\n+    public Long getDeliveryCount() {\n+        return deliveryCount;\n+    }\n+\n+    /**\n+     * Sets the given {@code deliveryCount} value on {@link AmqpMessageHeader} object.\n+     *\n+     * @param deliveryCount to be set.\n+     * @return updated {@link AmqpMessageHeader} object.\n+     */\n+    public AmqpMessageHeader setDeliveryCount(Long deliveryCount) {\n+        this.deliveryCount = deliveryCount;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets durable boolean flag.\n+     *\n+     * @return The durable.\n+     */\n+    public Boolean getDurable() {\n+        return this.durable;\n+    }\n+\n+    /**\n+     * Sets the given {@code durable} value on {@link AmqpMessageHeader} object.\n+     *\n+     * @param durable to set on {@link AmqpMessageHeader}.\n+     * @return updated {@link AmqpMessageHeader} object.\n+     */\n+    public AmqpMessageHeader setDurable(Boolean durable) {\n+        this.durable = durable;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets boolean flag for {@code firstAcquirer}\n+     *\n+     * @return The {@code firstAcquirer}.\n+     */\n+    public Boolean getFirstAcquirer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6614ebdb7d7c11eebf8c709d42386a6be0eeaece"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTcyNDM5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/BinaryData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwMTowNjoyMlrOHNeeCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNDozMTozMlrOHNffQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5Mjc0NA==", "bodyText": "Two questions for this class.\n\nWhy do we want to wrap the data of a byte array into a class if we don't provide extra functionality than a byte array?\nThe constructor and every call of getData copy the bytes. This might waste some memory.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r483892744", "createdAt": "2020-09-05T01:06:22Z", "author": {"login": "YijunXieMS"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/BinaryData.java", "diffHunk": "@@ -0,0 +1,32 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+/**\n+ * Binary representation of amqp message body.\n+ */\n+public final class BinaryData {\n+    private final byte[] data;\n+    /**\n+     *Create {@link BinaryData} instance with given byte array data.\n+     *\n+     * @param data to use.\n+     */\n+    public BinaryData(byte[] data) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6614ebdb7d7c11eebf8c709d42386a6be0eeaece"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkwOTQ0Mw==", "bodyText": "We will add serializer support but we need design/discussion around it, next month we will add more functionality in it. This will mimic how dotnet jave https://github.com/Azure/azure-sdk-for-net/tree/master/sdk/core/Azure.Core.Experimental#binary-data\nAnd for API completeness , we want to this type which will support similar feature like dotnet type.\n\n\nWe have a check which does not allow to return internal byte[] representation because it is mutable.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r483909443", "createdAt": "2020-09-05T04:31:32Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/BinaryData.java", "diffHunk": "@@ -0,0 +1,32 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+/**\n+ * Binary representation of amqp message body.\n+ */\n+public final class BinaryData {\n+    private final byte[] data;\n+    /**\n+     *Create {@link BinaryData} instance with given byte array data.\n+     *\n+     * @param data to use.\n+     */\n+    public BinaryData(byte[] data) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5Mjc0NA=="}, "originalCommit": {"oid": "6614ebdb7d7c11eebf8c709d42386a6be0eeaece"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzQyOTY5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageHeader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzo0MTozNVrOHNq4qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzoxNDoyOFrOHO5x0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5NjE2OA==", "bodyText": "Is there a reason the other setters are boxed types and this is a primitive?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r484096168", "createdAt": "2020-09-06T17:41:35Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageHeader.java", "diffHunk": "@@ -0,0 +1,132 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.Duration;\n+\n+/**\n+ * The representation of message header as defined by AMQP protocol.\n+ *\n+ * @see <a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-message-format\">\n+ *     Amqp Message Format.</a>\n+ */\n+@Fluent\n+public class AmqpMessageHeader {\n+\n+    private Long deliveryCount;\n+    private Boolean durable;\n+    private Boolean firstAcquirer;\n+    private Short priority;\n+    private Duration timeToLive;\n+\n+    AmqpMessageHeader() {\n+        // This class does not have any public constructors, and is not able to be instantiated using 'new'.\n+    }\n+\n+    /**\n+     * Gets the delivery count from amqp message header.\n+     *\n+     * @return the delivery count value.\n+     */\n+    public Long getDeliveryCount() {\n+        return deliveryCount;\n+    }\n+\n+    /**\n+     * Sets the given {@code deliveryCount} value on {@link AmqpMessageHeader} object.\n+     *\n+     * @param deliveryCount to be set.\n+     * @return updated {@link AmqpMessageHeader} object.\n+     */\n+    public AmqpMessageHeader setDeliveryCount(Long deliveryCount) {\n+        this.deliveryCount = deliveryCount;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets durable boolean flag from amqp message header.\n+     *\n+     * @return the durable flag.\n+     */\n+    public Boolean isDurable() {\n+        return durable;\n+    }\n+\n+    /**\n+     * Sets the given {@code durable} value on {@link AmqpMessageHeader} object.\n+     *\n+     * @param durable to set on {@link AmqpMessageHeader}.\n+     *\n+     * @return updated {@link AmqpMessageHeader} object.\n+     */\n+    public AmqpMessageHeader setDurable(Boolean durable) {\n+        this.durable = durable;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets boolean flag for {@code firstAcquirer} from amqp message header.\n+     *\n+     * @return the {@code firstAcquirer} value.\n+     */\n+    public Boolean isFirstAcquirer() {\n+        return this.firstAcquirer;\n+    }\n+\n+    /**\n+     * Sets the given {@code firstAcquirer} value on {@link AmqpMessageHeader} object.\n+     *\n+     * @param firstAcquirer to set on {@link AmqpMessageHeader}.\n+     *\n+     * @return updated {@link AmqpMessageHeader} object.\n+     */\n+    public AmqpMessageHeader setFirstAcquirer(Boolean firstAcquirer) {\n+        this.firstAcquirer = firstAcquirer;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the priority on {@code amqpMessage} from amqp message header.\n+     *\n+     * @return the {@code priority} value.\n+     */\n+    public Short getPriority() {\n+        return priority;\n+    }\n+\n+    /**\n+     * Sets the given {@code priority} value on {@link AmqpMessageHeader} object.\n+     *\n+     * @param priority to set on {@link AmqpMessageHeader}.\n+     *\n+     * @return updated {@link AmqpMessageHeader} object.\n+     */\n+    public AmqpMessageHeader setPriority(short priority) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00f7a829969ca332b201d32ebedf58c90dfc20a2"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MDk4Mw==", "bodyText": "This is not resolved. This one is still primitive, but all the other ones are boxed (ie. Boolean and Long). We should consolidate.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485280983", "createdAt": "2020-09-09T01:19:53Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageHeader.java", "diffHunk": "@@ -0,0 +1,132 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.Duration;\n+\n+/**\n+ * The representation of message header as defined by AMQP protocol.\n+ *\n+ * @see <a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-message-format\">\n+ *     Amqp Message Format.</a>\n+ */\n+@Fluent\n+public class AmqpMessageHeader {\n+\n+    private Long deliveryCount;\n+    private Boolean durable;\n+    private Boolean firstAcquirer;\n+    private Short priority;\n+    private Duration timeToLive;\n+\n+    AmqpMessageHeader() {\n+        // This class does not have any public constructors, and is not able to be instantiated using 'new'.\n+    }\n+\n+    /**\n+     * Gets the delivery count from amqp message header.\n+     *\n+     * @return the delivery count value.\n+     */\n+    public Long getDeliveryCount() {\n+        return deliveryCount;\n+    }\n+\n+    /**\n+     * Sets the given {@code deliveryCount} value on {@link AmqpMessageHeader} object.\n+     *\n+     * @param deliveryCount to be set.\n+     * @return updated {@link AmqpMessageHeader} object.\n+     */\n+    public AmqpMessageHeader setDeliveryCount(Long deliveryCount) {\n+        this.deliveryCount = deliveryCount;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets durable boolean flag from amqp message header.\n+     *\n+     * @return the durable flag.\n+     */\n+    public Boolean isDurable() {\n+        return durable;\n+    }\n+\n+    /**\n+     * Sets the given {@code durable} value on {@link AmqpMessageHeader} object.\n+     *\n+     * @param durable to set on {@link AmqpMessageHeader}.\n+     *\n+     * @return updated {@link AmqpMessageHeader} object.\n+     */\n+    public AmqpMessageHeader setDurable(Boolean durable) {\n+        this.durable = durable;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets boolean flag for {@code firstAcquirer} from amqp message header.\n+     *\n+     * @return the {@code firstAcquirer} value.\n+     */\n+    public Boolean isFirstAcquirer() {\n+        return this.firstAcquirer;\n+    }\n+\n+    /**\n+     * Sets the given {@code firstAcquirer} value on {@link AmqpMessageHeader} object.\n+     *\n+     * @param firstAcquirer to set on {@link AmqpMessageHeader}.\n+     *\n+     * @return updated {@link AmqpMessageHeader} object.\n+     */\n+    public AmqpMessageHeader setFirstAcquirer(Boolean firstAcquirer) {\n+        this.firstAcquirer = firstAcquirer;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the priority on {@code amqpMessage} from amqp message header.\n+     *\n+     * @return the {@code priority} value.\n+     */\n+    public Short getPriority() {\n+        return priority;\n+    }\n+\n+    /**\n+     * Sets the given {@code priority} value on {@link AmqpMessageHeader} object.\n+     *\n+     * @param priority to set on {@link AmqpMessageHeader}.\n+     *\n+     * @return updated {@link AmqpMessageHeader} object.\n+     */\n+    public AmqpMessageHeader setPriority(short priority) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5NjE2OA=="}, "originalCommit": {"oid": "00f7a829969ca332b201d32ebedf58c90dfc20a2"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4ODc1Mw==", "bodyText": "It is resolved now.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485388753", "createdAt": "2020-09-09T07:14:28Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageHeader.java", "diffHunk": "@@ -0,0 +1,132 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.Duration;\n+\n+/**\n+ * The representation of message header as defined by AMQP protocol.\n+ *\n+ * @see <a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-message-format\">\n+ *     Amqp Message Format.</a>\n+ */\n+@Fluent\n+public class AmqpMessageHeader {\n+\n+    private Long deliveryCount;\n+    private Boolean durable;\n+    private Boolean firstAcquirer;\n+    private Short priority;\n+    private Duration timeToLive;\n+\n+    AmqpMessageHeader() {\n+        // This class does not have any public constructors, and is not able to be instantiated using 'new'.\n+    }\n+\n+    /**\n+     * Gets the delivery count from amqp message header.\n+     *\n+     * @return the delivery count value.\n+     */\n+    public Long getDeliveryCount() {\n+        return deliveryCount;\n+    }\n+\n+    /**\n+     * Sets the given {@code deliveryCount} value on {@link AmqpMessageHeader} object.\n+     *\n+     * @param deliveryCount to be set.\n+     * @return updated {@link AmqpMessageHeader} object.\n+     */\n+    public AmqpMessageHeader setDeliveryCount(Long deliveryCount) {\n+        this.deliveryCount = deliveryCount;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets durable boolean flag from amqp message header.\n+     *\n+     * @return the durable flag.\n+     */\n+    public Boolean isDurable() {\n+        return durable;\n+    }\n+\n+    /**\n+     * Sets the given {@code durable} value on {@link AmqpMessageHeader} object.\n+     *\n+     * @param durable to set on {@link AmqpMessageHeader}.\n+     *\n+     * @return updated {@link AmqpMessageHeader} object.\n+     */\n+    public AmqpMessageHeader setDurable(Boolean durable) {\n+        this.durable = durable;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets boolean flag for {@code firstAcquirer} from amqp message header.\n+     *\n+     * @return the {@code firstAcquirer} value.\n+     */\n+    public Boolean isFirstAcquirer() {\n+        return this.firstAcquirer;\n+    }\n+\n+    /**\n+     * Sets the given {@code firstAcquirer} value on {@link AmqpMessageHeader} object.\n+     *\n+     * @param firstAcquirer to set on {@link AmqpMessageHeader}.\n+     *\n+     * @return updated {@link AmqpMessageHeader} object.\n+     */\n+    public AmqpMessageHeader setFirstAcquirer(Boolean firstAcquirer) {\n+        this.firstAcquirer = firstAcquirer;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the priority on {@code amqpMessage} from amqp message header.\n+     *\n+     * @return the {@code priority} value.\n+     */\n+    public Short getPriority() {\n+        return priority;\n+    }\n+\n+    /**\n+     * Sets the given {@code priority} value on {@link AmqpMessageHeader} object.\n+     *\n+     * @param priority to set on {@link AmqpMessageHeader}.\n+     *\n+     * @return updated {@link AmqpMessageHeader} object.\n+     */\n+    public AmqpMessageHeader setPriority(short priority) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5NjE2OA=="}, "originalCommit": {"oid": "00f7a829969ca332b201d32ebedf58c90dfc20a2"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzQzMjU2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzo0NToxM1rOHNq6BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzo0NToxM1rOHNq6BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5NjUxNg==", "bodyText": "Similar question, you use boxed types on some of the other ones.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r484096516", "createdAt": "2020-09-06T17:45:13Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageProperties.java", "diffHunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.OffsetDateTime;\n+import java.util.Arrays;\n+\n+/**\n+ * The representation of message properties as defined by AMQP protocol.\n+ *\n+ * @see <a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-message-format\">\n+ *     Amqp Message Format.</a>\n+ */\n+@Fluent\n+public class AmqpMessageProperties {\n+\n+    private OffsetDateTime absoluteExpiryTime;\n+    private String contentEncoding;\n+    private String contentType;\n+    private String correlationId;\n+    private OffsetDateTime creationTime;\n+    private String groupId;\n+    private long groupSequence;\n+    private String messageId;\n+    private String replyToGroupId;\n+    private String replyTo;\n+    private String to;\n+    private String subject;\n+    private byte[] userId;\n+\n+    AmqpMessageProperties() {\n+        // This class does not have any public constructors, and is not able to be instantiated using 'new'.\n+    }\n+    /**\n+     * Gets {@code absoluteExpiryTime} from amqp message properties.\n+     *\n+     * @return the {@code absoluteExpiryTime} value.\n+     */\n+    public OffsetDateTime getAbsoluteExpiryTime() {\n+        return absoluteExpiryTime;\n+    }\n+\n+    /**\n+     * Sets the given {@code absoluteExpiryTime} value on {@link AmqpMessageProperties} object.\n+     *\n+     * @param absoluteExpiryTime to be set.\n+     * @return updated {@link AmqpMessageProperties} object.\n+     */\n+    public AmqpMessageProperties setAbsoluteExpiryTime(OffsetDateTime absoluteExpiryTime) {\n+        this.absoluteExpiryTime = absoluteExpiryTime;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets AbsoluteExpiryTime from amqp message properties.\n+     *\n+     * @return the {@code absoluteExpiryTime} value.\n+     */\n+    public String getContentEncoding() {\n+        return contentEncoding;\n+    }\n+\n+    /**\n+     * Sets the given {@code contentEncoding} value on {@link AmqpMessageProperties} object.\n+     *\n+     * @param contentEncoding to be set.\n+     *\n+     * @return updated {@link AmqpMessageProperties} object.\n+     */\n+    public AmqpMessageProperties setContentEncoding(String contentEncoding) {\n+        this.contentEncoding = contentEncoding;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets {@code contentType} from amqp message properties.\n+     *\n+     * @return the {@code contentType} value.\n+     */\n+    public String getContentType() {\n+        return contentType;\n+    }\n+\n+    /**\n+     * Sets the given {@code contentType} value on {@link AmqpMessageProperties} object.\n+     *\n+     * @param contentType to be set.\n+     *\n+     * @return updated {@link AmqpMessageProperties} object.\n+     */\n+    public AmqpMessageProperties setContentType(String contentType) {\n+        this.contentType = contentType;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets {@code correlationId} from amqp message properties.\n+     *\n+     * @return the {@code correlationId} value.\n+     */\n+    public String getCorrelationId() {\n+        return correlationId;\n+    }\n+\n+    /**\n+     * Sets the given {@code correlationId} value on {@link AmqpMessageProperties} object.\n+     *\n+     * @param correlationId to be set.\n+     *\n+     * @return updated {@link AmqpMessageProperties} object.\n+     */\n+    public AmqpMessageProperties setCorrelationId(String correlationId) {\n+        this.correlationId = correlationId;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets {@code creationTime} from amqp message properties.\n+     *\n+     * @return the {@code creationTime} value.\n+     */\n+    public OffsetDateTime getCreationTime() {\n+        return creationTime;\n+    }\n+\n+    /**\n+     * Sets the given {@code creationTime} value on {@link AmqpMessageProperties} object.\n+     *\n+     * @param creationTime to be set.\n+     *\n+     * @return updated {@link AmqpMessageProperties} object.\n+     */\n+    public AmqpMessageProperties setCreationTime(OffsetDateTime creationTime) {\n+        this.creationTime = creationTime;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets {@code groupId} from amqp message properties.\n+     *\n+     * @return the {@code groupId} value.\n+     */\n+    public String getGroupId() {\n+        return groupId;\n+    }\n+\n+    /**\n+     * Sets the given {@code groupId} value on {@link AmqpMessageProperties} object.\n+     *\n+     * @param groupId to be set.\n+     *\n+     * @return updated {@link AmqpMessageProperties} object.\n+     */\n+    public AmqpMessageProperties setGroupId(String groupId) {\n+        this.groupId = groupId;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets {@code groupSequence} from amqp message properties.\n+     *\n+     * @return the {@code groupSequence} value.\n+     */\n+    public long getGroupSequence() {\n+        return groupSequence;\n+    }\n+\n+    /**\n+     * Sets the given {@code groupSequence} value on {@link AmqpMessageProperties} object.\n+     *\n+     * @param groupSequence to be set.\n+     *\n+     * @return updated {@link AmqpMessageProperties} object.\n+     */\n+    public AmqpMessageProperties setGroupSequence(long groupSequence) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00f7a829969ca332b201d32ebedf58c90dfc20a2"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzQzMzAzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/BinaryData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzo0NTo1MFrOHNq6Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzo0NTo1MFrOHNq6Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5NjU3MQ==", "bodyText": "nit: new line", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r484096571", "createdAt": "2020-09-06T17:45:50Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/BinaryData.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+/**\n+ * Binary representation of amqp message body.\n+ */\n+public final class BinaryData {\n+    private final byte[] data;\n+\n+    /**\n+     *Create {@link BinaryData} instance with given byte array data.\n+     *\n+     * @param data to use.\n+     */\n+    public BinaryData(byte[] data) {\n+        Objects.requireNonNull(data, \"'data' cannot be null.\");\n+        this.data = Arrays.copyOf(data, data.length);\n+    }\n+\n+    /**\n+     * Gets the data.\n+     *\n+     * @return byte array representing {@link BinaryData}.\n+     */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00f7a829969ca332b201d32ebedf58c90dfc20a2"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzQzMzE3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/BinaryData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzo0NjowMFrOHNq6TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzo0NjowMFrOHNq6TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5NjU4OA==", "bodyText": "nit: space", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r484096588", "createdAt": "2020-09-06T17:46:00Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/BinaryData.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+/**\n+ * Binary representation of amqp message body.\n+ */\n+public final class BinaryData {\n+    private final byte[] data;\n+\n+    /**\n+     *Create {@link BinaryData} instance with given byte array data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00f7a829969ca332b201d32ebedf58c90dfc20a2"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzQzMzU1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/test/java/com/azure/core/amqp/models/AmqpAnnotatedMessageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzo0NjozNlrOHNq6dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzo0NjozNlrOHNq6dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5NjYzMQ==", "bodyText": "in general, I'd be consistent about when you're using \"final\" or not. This applies to all other areas of your code.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r484096631", "createdAt": "2020-09-06T17:46:36Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/test/java/com/azure/core/amqp/models/AmqpAnnotatedMessageTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+/**\n+ * Test class for  {@link AmqpAnnotatedMessage}\n+ */\n+public class AmqpAnnotatedMessageTest {\n+\n+    private static final byte[] CONTENTS_BYTES = \"Some-contents\".getBytes(StandardCharsets.UTF_8);\n+    private static final BinaryData DATA_BYTES = new BinaryData(CONTENTS_BYTES);\n+\n+    /**\n+     * Verifies we correctly set values via constructor for {@link AmqpAnnotatedMessage}.\n+     */\n+    @Test\n+    public void constructorValidValues() {\n+        // Arrange\n+        final List<BinaryData> binaryDataList = Collections.singletonList(DATA_BYTES);\n+        final AmqpDataBody amqpDataBody = new AmqpDataBody(binaryDataList);\n+\n+        // Act\n+        AmqpAnnotatedMessage actual = new AmqpAnnotatedMessage(amqpDataBody);\n+\n+        // Assert\n+        assertMessageCreation(actual, AmqpBodyType.DATA, binaryDataList.size());\n+    }\n+\n+    /**\n+     * Verifies we correctly set values via constructor for {@link AmqpAnnotatedMessage}.\n+     */\n+    @Test\n+    public void constructorAmqpValidValues() {\n+        // Arrange\n+        final List<BinaryData> listBinaryData = Collections.singletonList(DATA_BYTES);\n+        final AmqpDataBody amqpDataBody = new AmqpDataBody(listBinaryData);\n+        AmqpAnnotatedMessage expected = new AmqpAnnotatedMessage(amqpDataBody);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00f7a829969ca332b201d32ebedf58c90dfc20a2"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzQzNDQyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/test/java/com/azure/core/amqp/models/AmqpAnnotatedMessageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzo0ODowNFrOHNq64w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzo0ODowNFrOHNq64w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5NjczOQ==", "bodyText": "AmqpBodyType can be any of the three values, but here you are strict casting it to AmqpDataBody. This will fail for body types not AmqpBodyType.DATA.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r484096739", "createdAt": "2020-09-06T17:48:04Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/test/java/com/azure/core/amqp/models/AmqpAnnotatedMessageTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+/**\n+ * Test class for  {@link AmqpAnnotatedMessage}\n+ */\n+public class AmqpAnnotatedMessageTest {\n+\n+    private static final byte[] CONTENTS_BYTES = \"Some-contents\".getBytes(StandardCharsets.UTF_8);\n+    private static final BinaryData DATA_BYTES = new BinaryData(CONTENTS_BYTES);\n+\n+    /**\n+     * Verifies we correctly set values via constructor for {@link AmqpAnnotatedMessage}.\n+     */\n+    @Test\n+    public void constructorValidValues() {\n+        // Arrange\n+        final List<BinaryData> binaryDataList = Collections.singletonList(DATA_BYTES);\n+        final AmqpDataBody amqpDataBody = new AmqpDataBody(binaryDataList);\n+\n+        // Act\n+        AmqpAnnotatedMessage actual = new AmqpAnnotatedMessage(amqpDataBody);\n+\n+        // Assert\n+        assertMessageCreation(actual, AmqpBodyType.DATA, binaryDataList.size());\n+    }\n+\n+    /**\n+     * Verifies we correctly set values via constructor for {@link AmqpAnnotatedMessage}.\n+     */\n+    @Test\n+    public void constructorAmqpValidValues() {\n+        // Arrange\n+        final List<BinaryData> listBinaryData = Collections.singletonList(DATA_BYTES);\n+        final AmqpDataBody amqpDataBody = new AmqpDataBody(listBinaryData);\n+        AmqpAnnotatedMessage expected = new AmqpAnnotatedMessage(amqpDataBody);\n+        // Act\n+        AmqpAnnotatedMessage actual = new AmqpAnnotatedMessage(expected);\n+\n+        // Assert\n+        assertMessageCreation(actual, AmqpBodyType.DATA, listBinaryData.size());\n+    }\n+\n+    /**\n+     * Verifies {@link AmqpAnnotatedMessage} constructor for null values.\n+     */\n+    @Test\n+    public void constructorNullValidValues() {\n+        // Arrange\n+        AmqpDataBody body = null;\n+\n+        // Act & Assert\n+        Assertions.assertThrows(NullPointerException.class, () -> new AmqpAnnotatedMessage(body));\n+    }\n+\n+    private void assertMessageCreation(AmqpAnnotatedMessage actual, AmqpBodyType expectedType,\n+        int messageSizeExpected) {\n+        assertEquals(expectedType, actual.getBody().getBodyType());\n+        assertNotNull(actual.getProperties());\n+        assertNotNull(actual.getHeader());\n+        assertNotNull(actual.getFooter());\n+        assertNotNull(actual.getApplicationProperties());\n+        assertNotNull(actual.getDeliveryAnnotations());\n+        assertNotNull(actual.getMessageAnnotations());\n+        assertNotNull(actual.getApplicationProperties());\n+\n+        // Validate Message Body\n+        assertNotNull(actual.getBody());\n+        List<BinaryData> dataList = ((AmqpDataBody) actual.getBody()).getData().stream().collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00f7a829969ca332b201d32ebedf58c90dfc20a2"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzQzNTE3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/test/java/com/azure/core/amqp/models/AmqpDataBodyTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzo0OTo0NFrOHNq7Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzo0OTo0NFrOHNq7Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5NjgzOA==", "bodyText": "It's always a single item collection. Why not add another one even though our current implementation layer does not support it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r484096838", "createdAt": "2020-09-06T17:49:44Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/test/java/com/azure/core/amqp/models/AmqpDataBodyTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+/**\n+ * Test for {@link AmqpDataBody}.\n+ */\n+public class AmqpDataBodyTest {\n+    private static final byte[] CONTENTS_BYTES = \"Some-contents\".getBytes(StandardCharsets.UTF_8);\n+    private static final BinaryData DATA_BYTES = new BinaryData(CONTENTS_BYTES);\n+\n+    /**\n+     * Verifies we correctly set values via constructor for {@link AmqpAnnotatedMessage}.\n+     */\n+    @Test\n+    public void constructorValidValues() {\n+        // Arrange\n+        final List<BinaryData> binaryDataList = Collections.singletonList(DATA_BYTES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00f7a829969ca332b201d32ebedf58c90dfc20a2"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzQzNjE1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/test/java/com/azure/core/amqp/models/AmqpDataBodyTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzo1MDozM1rOHNq7sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzo1MDozM1rOHNq7sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5Njk0NQ==", "bodyText": "This is only used once. You can move it into a method scope rather than having this global static live for the entire jvm lifetime. same with other instances where it is used once.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r484096945", "createdAt": "2020-09-06T17:50:33Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/test/java/com/azure/core/amqp/models/AmqpDataBodyTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+/**\n+ * Test for {@link AmqpDataBody}.\n+ */\n+public class AmqpDataBodyTest {\n+    private static final byte[] CONTENTS_BYTES = \"Some-contents\".getBytes(StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00f7a829969ca332b201d32ebedf58c90dfc20a2"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzQzNjY3OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzo1MToyMlrOHNq79w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzo1MToyMlrOHNq79w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5NzAxNQ==", "bodyText": "Why are these defined again? Don't we have a class with these.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r484097015", "createdAt": "2020-09-06T17:51:22Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "diffHunk": "@@ -34,21 +43,13 @@\n  * @see ServiceBusMessageBatch\n  */\n public class ServiceBusMessage {\n-    private final Map<String, Object> properties = new HashMap<>();\n-    private final byte[] body;\n+    private static final String SCHEDULED_ENQUEUE_TIME_NAME = \"x-opt-scheduled-enqueue-time\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00f7a829969ca332b201d32ebedf58c90dfc20a2"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzQzNjkxOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzo1MTozM1rOHNq8FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzo1MTozM1rOHNq8FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5NzA0NA==", "bodyText": "TODO here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r484097044", "createdAt": "2020-09-06T17:51:33Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "diffHunk": "@@ -82,47 +83,76 @@ public ServiceBusMessage(byte[] body) {\n      * @throws NullPointerException if {@code receivedMessage} is {@code null}.\n      */\n     public ServiceBusMessage(ServiceBusReceivedMessage receivedMessage) {\n-        this.body = receivedMessage.getBody();\n+        this.amqpAnnotatedMessage = new AmqpAnnotatedMessage(receivedMessage.getAmqpAnnotatedMessage());\n         this.context = Context.NONE;\n         setMessageId(receivedMessage.getMessageId());\n         setScheduledEnqueueTime(receivedMessage.getScheduledEnqueueTime());\n         setContentType(receivedMessage.getContentType());\n         setCorrelationId(receivedMessage.getCorrelationId());\n-        setLabel(receivedMessage.getLabel());\n+        setSubject(receivedMessage.getLabel());\n         setPartitionKey(receivedMessage.getPartitionKey());\n         setReplyTo(receivedMessage.getReplyTo());\n         setReplyToSessionId(receivedMessage.getReplyToSessionId());\n         setTimeToLive(receivedMessage.getTimeToLive());\n         setTo(receivedMessage.getTo());\n         setSessionId(receivedMessage.getSessionId());\n         setViaPartitionKey(receivedMessage.getViaPartitionKey());\n+\n+        //TODO (Hemant): Cleanup the values from AmqpAnnotatedMessage which should never be set by user.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00f7a829969ca332b201d32ebedf58c90dfc20a2"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzQzNzI3OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzo1MTo1NFrOHNq8RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzo1Mjo0OVrOHNq8hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5NzA5Mg==", "bodyText": "You need to format this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r484097092", "createdAt": "2020-09-06T17:51:54Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "diffHunk": "@@ -82,47 +83,76 @@ public ServiceBusMessage(byte[] body) {\n      * @throws NullPointerException if {@code receivedMessage} is {@code null}.\n      */\n     public ServiceBusMessage(ServiceBusReceivedMessage receivedMessage) {\n-        this.body = receivedMessage.getBody();\n+        this.amqpAnnotatedMessage = new AmqpAnnotatedMessage(receivedMessage.getAmqpAnnotatedMessage());\n         this.context = Context.NONE;\n         setMessageId(receivedMessage.getMessageId());\n         setScheduledEnqueueTime(receivedMessage.getScheduledEnqueueTime());\n         setContentType(receivedMessage.getContentType());\n         setCorrelationId(receivedMessage.getCorrelationId());\n-        setLabel(receivedMessage.getLabel());\n+        setSubject(receivedMessage.getLabel());\n         setPartitionKey(receivedMessage.getPartitionKey());\n         setReplyTo(receivedMessage.getReplyTo());\n         setReplyToSessionId(receivedMessage.getReplyToSessionId());\n         setTimeToLive(receivedMessage.getTimeToLive());\n         setTo(receivedMessage.getTo());\n         setSessionId(receivedMessage.getSessionId());\n         setViaPartitionKey(receivedMessage.getViaPartitionKey());\n+\n+        //TODO (Hemant): Cleanup the values from AmqpAnnotatedMessage which should never be set by user.\n+        // Some values of MessageAnnotations , Header.deliveryCount etc\n+    }\n+\n+    /**\n+     *\n+     * @return\n+     */\n+    public AmqpAnnotatedMessage getAmqpAnnotatedMessage() {\n+        return amqpAnnotatedMessage;\n     }\n \n     /**\n      * Gets the set of free-form {@link ServiceBusMessage} properties which may be used for passing metadata associated\n-     * with the {@link ServiceBusMessage} during Service Bus operations. A common use-case for {@code properties()} is\n-     * to associate serialization hints for the {@link #getBody()} as an aid to consumers who wish to deserialize the\n-     * binary data.\n+     * with the {@link ServiceBusMessage} during Service Bus operations. A common use-case for\n+     * {@code applicationProperties()} is to associate serialization hints for the {@link #getBody()} as an aid to\n+     * consumers who wish to deserialize the binary data.\n      *\n      * @return Application properties associated with this {@link ServiceBusMessage}.\n      */\n-    public Map<String, Object> getProperties() {\n-        return properties;\n+    public Map<String, Object> getApplicationProperties() {\n+        return amqpAnnotatedMessage.getApplicationProperties();\n     }\n \n     /**\n      * Gets the actual payload/data wrapped by the {@link ServiceBusMessage}.\n      *\n      * <p>\n      * If the means for deserializing the raw data is not apparent to consumers, a common technique is to make use of\n-     * {@link #getProperties()} when creating the event, to associate serialization hints as an aid to consumers who\n+     * {@link #getApplicationProperties()} when creating the event, to associate serialization hints as an aid to consumers who\n      * wish to deserialize the binary data.\n      * </p>\n      *\n      * @return A byte array representing the data.\n      */\n     public byte[] getBody() {\n-        return Arrays.copyOf(body, body.length);\n+        byte[] body = null;\n+        switch(amqpAnnotatedMessage.getBody().getBodyType()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00f7a829969ca332b201d32ebedf58c90dfc20a2"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5NzE1OA==", "bodyText": "This is an expensive operation. Every time we get the body, you're creating a new list with amqpdatabody then doing an array copy.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r484097158", "createdAt": "2020-09-06T17:52:49Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "diffHunk": "@@ -82,47 +83,76 @@ public ServiceBusMessage(byte[] body) {\n      * @throws NullPointerException if {@code receivedMessage} is {@code null}.\n      */\n     public ServiceBusMessage(ServiceBusReceivedMessage receivedMessage) {\n-        this.body = receivedMessage.getBody();\n+        this.amqpAnnotatedMessage = new AmqpAnnotatedMessage(receivedMessage.getAmqpAnnotatedMessage());\n         this.context = Context.NONE;\n         setMessageId(receivedMessage.getMessageId());\n         setScheduledEnqueueTime(receivedMessage.getScheduledEnqueueTime());\n         setContentType(receivedMessage.getContentType());\n         setCorrelationId(receivedMessage.getCorrelationId());\n-        setLabel(receivedMessage.getLabel());\n+        setSubject(receivedMessage.getLabel());\n         setPartitionKey(receivedMessage.getPartitionKey());\n         setReplyTo(receivedMessage.getReplyTo());\n         setReplyToSessionId(receivedMessage.getReplyToSessionId());\n         setTimeToLive(receivedMessage.getTimeToLive());\n         setTo(receivedMessage.getTo());\n         setSessionId(receivedMessage.getSessionId());\n         setViaPartitionKey(receivedMessage.getViaPartitionKey());\n+\n+        //TODO (Hemant): Cleanup the values from AmqpAnnotatedMessage which should never be set by user.\n+        // Some values of MessageAnnotations , Header.deliveryCount etc\n+    }\n+\n+    /**\n+     *\n+     * @return\n+     */\n+    public AmqpAnnotatedMessage getAmqpAnnotatedMessage() {\n+        return amqpAnnotatedMessage;\n     }\n \n     /**\n      * Gets the set of free-form {@link ServiceBusMessage} properties which may be used for passing metadata associated\n-     * with the {@link ServiceBusMessage} during Service Bus operations. A common use-case for {@code properties()} is\n-     * to associate serialization hints for the {@link #getBody()} as an aid to consumers who wish to deserialize the\n-     * binary data.\n+     * with the {@link ServiceBusMessage} during Service Bus operations. A common use-case for\n+     * {@code applicationProperties()} is to associate serialization hints for the {@link #getBody()} as an aid to\n+     * consumers who wish to deserialize the binary data.\n      *\n      * @return Application properties associated with this {@link ServiceBusMessage}.\n      */\n-    public Map<String, Object> getProperties() {\n-        return properties;\n+    public Map<String, Object> getApplicationProperties() {\n+        return amqpAnnotatedMessage.getApplicationProperties();\n     }\n \n     /**\n      * Gets the actual payload/data wrapped by the {@link ServiceBusMessage}.\n      *\n      * <p>\n      * If the means for deserializing the raw data is not apparent to consumers, a common technique is to make use of\n-     * {@link #getProperties()} when creating the event, to associate serialization hints as an aid to consumers who\n+     * {@link #getApplicationProperties()} when creating the event, to associate serialization hints as an aid to consumers who\n      * wish to deserialize the binary data.\n      * </p>\n      *\n      * @return A byte array representing the data.\n      */\n     public byte[] getBody() {\n-        return Arrays.copyOf(body, body.length);\n+        byte[] body = null;\n+        switch(amqpAnnotatedMessage.getBody().getBodyType()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5NzA5Mg=="}, "originalCommit": {"oid": "00f7a829969ca332b201d32ebedf58c90dfc20a2"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzQzODAzOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzo1MzozN1rOHNq8sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzo1MzozN1rOHNq8sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5NzIwMA==", "bodyText": "Why not assign (amqpMessage.getBody().getBodyType()) to a local variable? This will make it easier to read.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r484097200", "createdAt": "2020-09-06T17:53:37Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "diffHunk": "@@ -82,47 +83,76 @@ public ServiceBusMessage(byte[] body) {\n      * @throws NullPointerException if {@code receivedMessage} is {@code null}.\n      */\n     public ServiceBusMessage(ServiceBusReceivedMessage receivedMessage) {\n-        this.body = receivedMessage.getBody();\n+        this.amqpAnnotatedMessage = new AmqpAnnotatedMessage(receivedMessage.getAmqpAnnotatedMessage());\n         this.context = Context.NONE;\n         setMessageId(receivedMessage.getMessageId());\n         setScheduledEnqueueTime(receivedMessage.getScheduledEnqueueTime());\n         setContentType(receivedMessage.getContentType());\n         setCorrelationId(receivedMessage.getCorrelationId());\n-        setLabel(receivedMessage.getLabel());\n+        setSubject(receivedMessage.getLabel());\n         setPartitionKey(receivedMessage.getPartitionKey());\n         setReplyTo(receivedMessage.getReplyTo());\n         setReplyToSessionId(receivedMessage.getReplyToSessionId());\n         setTimeToLive(receivedMessage.getTimeToLive());\n         setTo(receivedMessage.getTo());\n         setSessionId(receivedMessage.getSessionId());\n         setViaPartitionKey(receivedMessage.getViaPartitionKey());\n+\n+        //TODO (Hemant): Cleanup the values from AmqpAnnotatedMessage which should never be set by user.\n+        // Some values of MessageAnnotations , Header.deliveryCount etc\n+    }\n+\n+    /**\n+     *\n+     * @return\n+     */\n+    public AmqpAnnotatedMessage getAmqpAnnotatedMessage() {\n+        return amqpAnnotatedMessage;\n     }\n \n     /**\n      * Gets the set of free-form {@link ServiceBusMessage} properties which may be used for passing metadata associated\n-     * with the {@link ServiceBusMessage} during Service Bus operations. A common use-case for {@code properties()} is\n-     * to associate serialization hints for the {@link #getBody()} as an aid to consumers who wish to deserialize the\n-     * binary data.\n+     * with the {@link ServiceBusMessage} during Service Bus operations. A common use-case for\n+     * {@code applicationProperties()} is to associate serialization hints for the {@link #getBody()} as an aid to\n+     * consumers who wish to deserialize the binary data.\n      *\n      * @return Application properties associated with this {@link ServiceBusMessage}.\n      */\n-    public Map<String, Object> getProperties() {\n-        return properties;\n+    public Map<String, Object> getApplicationProperties() {\n+        return amqpAnnotatedMessage.getApplicationProperties();\n     }\n \n     /**\n      * Gets the actual payload/data wrapped by the {@link ServiceBusMessage}.\n      *\n      * <p>\n      * If the means for deserializing the raw data is not apparent to consumers, a common technique is to make use of\n-     * {@link #getProperties()} when creating the event, to associate serialization hints as an aid to consumers who\n+     * {@link #getApplicationProperties()} when creating the event, to associate serialization hints as an aid to consumers who\n      * wish to deserialize the binary data.\n      * </p>\n      *\n      * @return A byte array representing the data.\n      */\n     public byte[] getBody() {\n-        return Arrays.copyOf(body, body.length);\n+        byte[] body = null;\n+        switch(amqpAnnotatedMessage.getBody().getBodyType()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00f7a829969ca332b201d32ebedf58c90dfc20a2"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzQzOTkyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzo1NjowMVrOHNq9jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzo1NjoxN1rOHNq9pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5NzQyMw==", "bodyText": "We already have a constants class.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r484097423", "createdAt": "2020-09-06T17:56:01Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java", "diffHunk": "@@ -3,63 +3,93 @@\n \n package com.azure.messaging.servicebus;\n \n+import com.azure.core.amqp.models.AmqpAnnotatedMessage;\n+import com.azure.core.amqp.models.AmqpBodyType;\n+import com.azure.core.amqp.models.AmqpDataBody;\n+import com.azure.core.amqp.models.BinaryData;\n+import com.azure.core.util.logging.ClientLogger;\n import com.azure.messaging.servicebus.models.ReceiveMode;\n \n import java.time.Duration;\n import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n import java.util.Arrays;\n-import java.util.HashMap;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n import java.util.Map;\n-import java.util.Objects;\n import java.util.UUID;\n+import java.util.stream.Collectors;\n \n /**\n  * This class represents a received message from Service Bus.\n  */\n public final class ServiceBusReceivedMessage {\n+    private final ClientLogger logger = new ClientLogger(ServiceBusReceivedMessage.class);\n+\n+    private static final String ENQUEUED_TIME_UTC_NAME = \"x-opt-enqueued-time\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00f7a829969ca332b201d32ebedf58c90dfc20a2"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5NzQ0NQ==", "bodyText": "This is going to be really hard to manage random static strings copied in 5 places.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r484097445", "createdAt": "2020-09-06T17:56:17Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java", "diffHunk": "@@ -3,63 +3,93 @@\n \n package com.azure.messaging.servicebus;\n \n+import com.azure.core.amqp.models.AmqpAnnotatedMessage;\n+import com.azure.core.amqp.models.AmqpBodyType;\n+import com.azure.core.amqp.models.AmqpDataBody;\n+import com.azure.core.amqp.models.BinaryData;\n+import com.azure.core.util.logging.ClientLogger;\n import com.azure.messaging.servicebus.models.ReceiveMode;\n \n import java.time.Duration;\n import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n import java.util.Arrays;\n-import java.util.HashMap;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n import java.util.Map;\n-import java.util.Objects;\n import java.util.UUID;\n+import java.util.stream.Collectors;\n \n /**\n  * This class represents a received message from Service Bus.\n  */\n public final class ServiceBusReceivedMessage {\n+    private final ClientLogger logger = new ClientLogger(ServiceBusReceivedMessage.class);\n+\n+    private static final String ENQUEUED_TIME_UTC_NAME = \"x-opt-enqueued-time\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5NzQyMw=="}, "originalCommit": {"oid": "00f7a829969ca332b201d32ebedf58c90dfc20a2"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODQ5NDgwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNzo0NzozMFrOHNz-9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNzo0NzozMFrOHNz-9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI0NTIzNw==", "bodyText": "I realised this constants are already defined in: AmqpMessageConstant in azure-core-amqp.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r484245237", "createdAt": "2020-09-07T07:47:30Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "diffHunk": "@@ -53,18 +59,9 @@\n  */\n class ServiceBusMessageSerializer implements MessageSerializer {\n     private static final byte[] EMPTY_BYTE_ARRAY = new byte[0];\n-    private static final String ENQUEUED_TIME_UTC_NAME = \"x-opt-enqueued-time\";\n     private static final String SCHEDULED_ENQUEUE_TIME_NAME = \"x-opt-scheduled-enqueue-time\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00f7a829969ca332b201d32ebedf58c90dfc20a2"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzk5MzA1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoyMTo0NVrOHOm6wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoyMTo0NVrOHOm6wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3OTc0NQ==", "bodyText": "This is common, you can create a private method to aggregate these copied lines.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485079745", "createdAt": "2020-09-08T17:21:45Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java", "diffHunk": "@@ -102,7 +134,11 @@ public String getDeadLetterErrorDescription() {\n      * @return The reason for a message that has been dead-lettered.\n      */\n     public String getDeadLetterReason() {\n-        return deadLetterReason;\n+        final Map<String, Object> properties = amqpAnnotatedMessage.getApplicationProperties();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c38185976f637d9e76bd24742ce53b3f3f0c2b"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzk5OTgzOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoyMzoyOVrOHOm-wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoyMzoyOVrOHOm-wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4MDc3MA==", "bodyText": "The point I was trying to make is that you know this data in the constructor. You can do this logic in the constructor and simply return a copy of the binary data.\nBefore, you were iterating through the Iterable of BinaryData each time, creating a new List object and then throwing it away to get the first item before copying it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485080770", "createdAt": "2020-09-08T17:23:29Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java", "diffHunk": "@@ -17,49 +29,65 @@\n  * This class represents a received message from Service Bus.\n  */\n public final class ServiceBusReceivedMessage {\n+    private final ClientLogger logger = new ClientLogger(ServiceBusReceivedMessage.class);\n+\n+    private static final String DEAD_LETTER_DESCRIPTION = \"DeadLetterErrorDescription\";\n+    private static final String DEAD_LETTER_REASON = \"DeadLetterReason\";\n+\n+    // This one appears to always be 0, but is always returned with each message.\n+    private static final String ENQUEUED_SEQUENCE_NUMBER = \"x-opt-enqueue-sequence-number\";\n+\n+    private final AmqpAnnotatedMessage amqpAnnotatedMessage;\n     private UUID lockToken;\n-    private long sequenceNumber;\n-    private long enqueuedSequenceNumber;\n-    private long deliveryCount;\n-    private OffsetDateTime enqueuedTime;\n-    private OffsetDateTime lockedUntil;\n-    private String deadLetterSource;\n-\n-    private final Map<String, Object> properties;\n-    private final byte[] body;\n-    private String contentType;\n-    private String correlationId;\n-    private String label;\n-    private String messageId;\n-    private String partitionKey;\n-    private String replyTo;\n-    private String replyToSessionId;\n-    private OffsetDateTime scheduledEnqueueTime;\n-    private String sessionId;\n-    private Duration timeToLive;\n-    private String to;\n-    private String viaPartitionKey;\n-    private String deadLetterReason;\n-    private String deadLetterErrorDescription;\n+\n+    /**\n+     * The representation of message as defined by AMQP protocol.\n+     *\n+     * @see <a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-message-format\">\n+     *     Amqp Message Format.</a>\n+     *\n+     * @return the {@link AmqpAnnotatedMessage} representing amqp message.\n+     */\n+    public AmqpAnnotatedMessage getAmqpAnnotatedMessage() {\n+        return amqpAnnotatedMessage;\n+    }\n \n     ServiceBusReceivedMessage(byte[] body) {\n-        this.body = Objects.requireNonNull(body, \"'body' cannot be null.\");\n-        this.properties = new HashMap<>();\n+        Objects.requireNonNull(body, \"'body' cannot be null.\");\n+        amqpAnnotatedMessage = new AmqpAnnotatedMessage(new AmqpDataBody(new BinaryData(body)));\n     }\n \n     /**\n      * Gets the actual payload/data wrapped by the {@link ServiceBusReceivedMessage}.\n      *\n      * <p>\n      * If the means for deserializing the raw data is not apparent to consumers, a common technique is to make use of\n-     * {@link #getProperties()} when creating the event, to associate serialization hints as an aid to consumers who\n-     * wish to deserialize the binary data.\n+     * {@link #getApplicationProperties()} ()} when creating the event, to associate serialization hints as an aid to\n+     * consumers who wish to deserialize the binary data.\n      * </p>\n      *\n      * @return A byte array representing the data.\n      */\n     public byte[] getBody() {\n-        return Arrays.copyOf(body, body.length);\n+        byte[] body = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c38185976f637d9e76bd24742ce53b3f3f0c2b"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDAwMTY1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoyNDowMlrOHOm_8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoyNDowMlrOHOm_8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4MTA3NQ==", "bodyText": "This incorrect.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485081075", "createdAt": "2020-09-08T17:24:02Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java", "diffHunk": "@@ -17,49 +29,65 @@\n  * This class represents a received message from Service Bus.\n  */\n public final class ServiceBusReceivedMessage {\n+    private final ClientLogger logger = new ClientLogger(ServiceBusReceivedMessage.class);\n+\n+    private static final String DEAD_LETTER_DESCRIPTION = \"DeadLetterErrorDescription\";\n+    private static final String DEAD_LETTER_REASON = \"DeadLetterReason\";\n+\n+    // This one appears to always be 0, but is always returned with each message.\n+    private static final String ENQUEUED_SEQUENCE_NUMBER = \"x-opt-enqueue-sequence-number\";\n+\n+    private final AmqpAnnotatedMessage amqpAnnotatedMessage;\n     private UUID lockToken;\n-    private long sequenceNumber;\n-    private long enqueuedSequenceNumber;\n-    private long deliveryCount;\n-    private OffsetDateTime enqueuedTime;\n-    private OffsetDateTime lockedUntil;\n-    private String deadLetterSource;\n-\n-    private final Map<String, Object> properties;\n-    private final byte[] body;\n-    private String contentType;\n-    private String correlationId;\n-    private String label;\n-    private String messageId;\n-    private String partitionKey;\n-    private String replyTo;\n-    private String replyToSessionId;\n-    private OffsetDateTime scheduledEnqueueTime;\n-    private String sessionId;\n-    private Duration timeToLive;\n-    private String to;\n-    private String viaPartitionKey;\n-    private String deadLetterReason;\n-    private String deadLetterErrorDescription;\n+\n+    /**\n+     * The representation of message as defined by AMQP protocol.\n+     *\n+     * @see <a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-message-format\">\n+     *     Amqp Message Format.</a>\n+     *\n+     * @return the {@link AmqpAnnotatedMessage} representing amqp message.\n+     */\n+    public AmqpAnnotatedMessage getAmqpAnnotatedMessage() {\n+        return amqpAnnotatedMessage;\n+    }\n \n     ServiceBusReceivedMessage(byte[] body) {\n-        this.body = Objects.requireNonNull(body, \"'body' cannot be null.\");\n-        this.properties = new HashMap<>();\n+        Objects.requireNonNull(body, \"'body' cannot be null.\");\n+        amqpAnnotatedMessage = new AmqpAnnotatedMessage(new AmqpDataBody(new BinaryData(body)));\n     }\n \n     /**\n      * Gets the actual payload/data wrapped by the {@link ServiceBusReceivedMessage}.\n      *\n      * <p>\n      * If the means for deserializing the raw data is not apparent to consumers, a common technique is to make use of\n-     * {@link #getProperties()} when creating the event, to associate serialization hints as an aid to consumers who\n-     * wish to deserialize the binary data.\n+     * {@link #getApplicationProperties()} ()} when creating the event, to associate serialization hints as an aid to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c38185976f637d9e76bd24742ce53b3f3f0c2b"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDAwNjM4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpDataBody.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoyNToyMFrOHOnC8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMTozMzoxNlrOHOuwyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4MTg0Mw==", "bodyText": "I didn't mean to add to the public surface area so it fits our scenario. azure-core-amqp is generic to AMQP protocol. The support for a single BinaryData is an implementation detail because we use proton-j.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485081843", "createdAt": "2020-09-08T17:25:20Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpDataBody.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import com.azure.core.util.IterableStream;\n+\n+import java.util.Objects;\n+\n+/**\n+ * This is amqp message body which represents {@link AmqpBodyType#DATA} type.\n+ */\n+public final class AmqpDataBody implements AmqpMessageBody {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c38185976f637d9e76bd24742ce53b3f3f0c2b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIwODI2Nw==", "bodyText": "Okay moving it back to SBM.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485208267", "createdAt": "2020-09-08T21:33:16Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpDataBody.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import com.azure.core.util.IterableStream;\n+\n+import java.util.Objects;\n+\n+/**\n+ * This is amqp message body which represents {@link AmqpBodyType#DATA} type.\n+ */\n+public final class AmqpDataBody implements AmqpMessageBody {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4MTg0Mw=="}, "originalCommit": {"oid": "72c38185976f637d9e76bd24742ce53b3f3f0c2b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTAyMTQ2OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMjo1NTowMlrOHOwqWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODoxNjo0NVrOHO79Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzOTM4Nw==", "bodyText": "This overhead of supporting amqp annotated message", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485239387", "createdAt": "2020-09-08T22:55:02Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "diffHunk": "@@ -235,7 +235,7 @@ void createsMessageBatchWithSize() {\n         int batchSize = 1024;\n \n         // Overhead when serializing an event, to figure out what the maximum size we can use for an event payload.\n-        int eventOverhead = 46;\n+        int eventOverhead = 75;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d680f15c24ce2065624403df6161ce752b944ec"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4NzQyNg==", "bodyText": "Do we use this in our Batch size calculation as well?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485287426", "createdAt": "2020-09-09T01:41:12Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "diffHunk": "@@ -235,7 +235,7 @@ void createsMessageBatchWithSize() {\n         int batchSize = 1024;\n \n         // Overhead when serializing an event, to figure out what the maximum size we can use for an event payload.\n-        int eventOverhead = 46;\n+        int eventOverhead = 75;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzOTM4Nw=="}, "originalCommit": {"oid": "2d680f15c24ce2065624403df6161ce752b944ec"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyNDQyNg==", "bodyText": "will create issue to ask SB team.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485424426", "createdAt": "2020-09-09T08:16:45Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "diffHunk": "@@ -235,7 +235,7 @@ void createsMessageBatchWithSize() {\n         int batchSize = 1024;\n \n         // Overhead when serializing an event, to figure out what the maximum size we can use for an event payload.\n-        int eventOverhead = 46;\n+        int eventOverhead = 75;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzOTM4Nw=="}, "originalCommit": {"oid": "2d680f15c24ce2065624403df6161ce752b944ec"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTMwNzg1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/test/java/com/azure/core/amqp/models/AmqpAnnotatedMessageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMToyMTo1M1rOHOzO9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMToyMTo1M1rOHOzO9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MTUyNw==", "bodyText": "format document", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485281527", "createdAt": "2020-09-09T01:21:53Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/test/java/com/azure/core/amqp/models/AmqpAnnotatedMessageTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+/**\n+ * Test class for  {@link AmqpAnnotatedMessage}\n+ */\n+public class AmqpAnnotatedMessageTest {\n+\n+    private static final byte[] CONTENTS_BYTES = \"Some-contents\".getBytes(StandardCharsets.UTF_8);\n+    private static final BinaryData DATA_BYTES = new BinaryData(CONTENTS_BYTES);\n+    private final ClientLogger logger = new ClientLogger(AmqpAnnotatedMessageTest.class);\n+\n+    /**\n+     * Verifies we correctly set values via constructor for {@link AmqpAnnotatedMessage}.\n+     */\n+    @Test\n+    public void constructorValidValues() {\n+        // Arrange\n+        final List<BinaryData> binaryDataList = Collections.singletonList(DATA_BYTES);\n+        final AmqpDataBody amqpDataBody = new AmqpDataBody(binaryDataList);\n+\n+        // Act\n+        final AmqpAnnotatedMessage actual = new AmqpAnnotatedMessage(amqpDataBody);\n+\n+        // Assert\n+        assertMessageCreation(actual, AmqpBodyType.DATA, binaryDataList.size());\n+    }\n+\n+    /**\n+     * Verifies we correctly set values via constructor for {@link AmqpAnnotatedMessage}.\n+     */\n+    @Test\n+    public void constructorAmqpValidValues() {\n+        // Arrange\n+        final List<BinaryData> listBinaryData = Collections.singletonList(DATA_BYTES);\n+        final AmqpDataBody amqpDataBody = new AmqpDataBody(listBinaryData);\n+        final AmqpAnnotatedMessage expected = new AmqpAnnotatedMessage(amqpDataBody);\n+\n+        // Act\n+        final AmqpAnnotatedMessage actual = new AmqpAnnotatedMessage(expected);\n+\n+        // Assert\n+        assertMessageCreation(actual, AmqpBodyType.DATA, listBinaryData.size());\n+    }\n+\n+    /**\n+     * Verifies {@link AmqpAnnotatedMessage} constructor for null values.\n+     */\n+    @Test\n+    public void constructorNullValidValues() {\n+        // Arrange\n+        final AmqpDataBody body = null;\n+\n+        // Act & Assert\n+        Assertions.assertThrows(NullPointerException.class, () -> new AmqpAnnotatedMessage(body));\n+    }\n+\n+    private void assertMessageCreation(AmqpAnnotatedMessage actual, AmqpBodyType expectedType,\n+        int messageSizeExpected) {\n+        assertEquals(expectedType, actual.getBody().getBodyType());\n+        assertNotNull(actual.getProperties());\n+        assertNotNull(actual.getHeader());\n+        assertNotNull(actual.getFooter());\n+        assertNotNull(actual.getApplicationProperties());\n+        assertNotNull(actual.getDeliveryAnnotations());\n+        assertNotNull(actual.getMessageAnnotations());\n+        assertNotNull(actual.getApplicationProperties());\n+\n+        // Validate Message Body\n+        assertNotNull(actual.getBody());\n+        switch (expectedType) {\n+            case DATA:\n+                List<BinaryData> dataList = ((AmqpDataBody) actual.getBody()).getData().stream().collect(Collectors.toList());\n+                assertEquals(messageSizeExpected, dataList.size());\n+                assertArrayEquals(CONTENTS_BYTES, dataList.get(0).getData());\n+                break;\n+            case VALUE:\n+            case SEQUENCE:\n+                throw  logger.logExceptionAsError(new UnsupportedOperationException(\"type not supported yet :\" + expectedType));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf5072510a5437a5ba8b03929a0c3333ede0ecf"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTMxMDM5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/test/java/com/azure/core/amqp/models/AmqpAnnotatedMessageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMToyMzoyMlrOHOzQag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMToyMzoyMlrOHOzQag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MTg5OA==", "bodyText": "nit: empty lines.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485281898", "createdAt": "2020-09-09T01:23:22Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/test/java/com/azure/core/amqp/models/AmqpAnnotatedMessageTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+/**\n+ * Test class for  {@link AmqpAnnotatedMessage}\n+ */\n+public class AmqpAnnotatedMessageTest {\n+\n+    private static final byte[] CONTENTS_BYTES = \"Some-contents\".getBytes(StandardCharsets.UTF_8);\n+    private static final BinaryData DATA_BYTES = new BinaryData(CONTENTS_BYTES);\n+    private final ClientLogger logger = new ClientLogger(AmqpAnnotatedMessageTest.class);\n+\n+    /**\n+     * Verifies we correctly set values via constructor for {@link AmqpAnnotatedMessage}.\n+     */\n+    @Test\n+    public void constructorValidValues() {\n+        // Arrange\n+        final List<BinaryData> binaryDataList = Collections.singletonList(DATA_BYTES);\n+        final AmqpDataBody amqpDataBody = new AmqpDataBody(binaryDataList);\n+\n+        // Act\n+        final AmqpAnnotatedMessage actual = new AmqpAnnotatedMessage(amqpDataBody);\n+\n+        // Assert\n+        assertMessageCreation(actual, AmqpBodyType.DATA, binaryDataList.size());\n+    }\n+\n+    /**\n+     * Verifies we correctly set values via constructor for {@link AmqpAnnotatedMessage}.\n+     */\n+    @Test\n+    public void constructorAmqpValidValues() {\n+        // Arrange\n+        final List<BinaryData> listBinaryData = Collections.singletonList(DATA_BYTES);\n+        final AmqpDataBody amqpDataBody = new AmqpDataBody(listBinaryData);\n+        final AmqpAnnotatedMessage expected = new AmqpAnnotatedMessage(amqpDataBody);\n+\n+        // Act\n+        final AmqpAnnotatedMessage actual = new AmqpAnnotatedMessage(expected);\n+\n+        // Assert\n+        assertMessageCreation(actual, AmqpBodyType.DATA, listBinaryData.size());\n+    }\n+\n+    /**\n+     * Verifies {@link AmqpAnnotatedMessage} constructor for null values.\n+     */\n+    @Test\n+    public void constructorNullValidValues() {\n+        // Arrange\n+        final AmqpDataBody body = null;\n+\n+        // Act & Assert\n+        Assertions.assertThrows(NullPointerException.class, () -> new AmqpAnnotatedMessage(body));\n+    }\n+\n+    private void assertMessageCreation(AmqpAnnotatedMessage actual, AmqpBodyType expectedType,\n+        int messageSizeExpected) {\n+        assertEquals(expectedType, actual.getBody().getBodyType());\n+        assertNotNull(actual.getProperties());\n+        assertNotNull(actual.getHeader());\n+        assertNotNull(actual.getFooter());\n+        assertNotNull(actual.getApplicationProperties());\n+        assertNotNull(actual.getDeliveryAnnotations());\n+        assertNotNull(actual.getMessageAnnotations());\n+        assertNotNull(actual.getApplicationProperties());\n+\n+        // Validate Message Body\n+        assertNotNull(actual.getBody());\n+        switch (expectedType) {\n+            case DATA:\n+                List<BinaryData> dataList = ((AmqpDataBody) actual.getBody()).getData().stream().collect(Collectors.toList());\n+                assertEquals(messageSizeExpected, dataList.size());\n+                assertArrayEquals(CONTENTS_BYTES, dataList.get(0).getData());\n+                break;\n+            case VALUE:\n+            case SEQUENCE:\n+                throw  logger.logExceptionAsError(new UnsupportedOperationException(\"type not supported yet :\" + expectedType));\n+            default:\n+                throw  logger.logExceptionAsError(new IllegalStateException(\"Invalid type :\" + expectedType));\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf5072510a5437a5ba8b03929a0c3333ede0ecf"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTMxMTM2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/test/java/com/azure/core/amqp/models/AmqpDataBodyTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMToyNDowMVrOHOzRBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMToyNDowMVrOHOzRBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MjA1Mw==", "bodyText": "nit: empty lines", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485282053", "createdAt": "2020-09-09T01:24:01Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/test/java/com/azure/core/amqp/models/AmqpDataBodyTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+/**\n+ * Test for {@link AmqpDataBody}.\n+ */\n+public class AmqpDataBodyTest {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf5072510a5437a5ba8b03929a0c3333ede0ecf"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTMxNDAzOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMToyNToxN1rOHOzSdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMToyNToxN1rOHOzSdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MjQyMQ==", "bodyText": "this.amqpAnnotatedMessage", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485282421", "createdAt": "2020-09-09T01:25:17Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "diffHunk": "@@ -69,8 +82,10 @@ public ServiceBusMessage(String body) {\n      * @throws NullPointerException if {@code body} is {@code null}.\n      */\n     public ServiceBusMessage(byte[] body) {\n-        this.body = Objects.requireNonNull(body, \"'body' cannot be null.\");\n+        this.binaryData = Objects.requireNonNull(body, \"'body' cannot be null.\");\n         this.context = Context.NONE;\n+        amqpAnnotatedMessage = new AmqpAnnotatedMessage(new AmqpDataBody(Collections.singletonList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf5072510a5437a5ba8b03929a0c3333ede0ecf"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTMxNTEyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMToyNTo0OVrOHOzTEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMToyNTo0OVrOHOzTEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MjU3OQ==", "bodyText": "We should test the actual BodyType of this. We may miss this which will result in a runtime exception when we move to support multiple types.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485282579", "createdAt": "2020-09-09T01:25:49Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "diffHunk": "@@ -82,47 +97,76 @@ public ServiceBusMessage(byte[] body) {\n      * @throws NullPointerException if {@code receivedMessage} is {@code null}.\n      */\n     public ServiceBusMessage(ServiceBusReceivedMessage receivedMessage) {\n-        this.body = receivedMessage.getBody();\n+        Objects.requireNonNull(receivedMessage, \"'receivedMessage' cannot be null.\");\n+\n+        this.amqpAnnotatedMessage = new AmqpAnnotatedMessage(receivedMessage.getAmqpAnnotatedMessage());\n         this.context = Context.NONE;\n-        setMessageId(receivedMessage.getMessageId());\n-        setScheduledEnqueueTime(receivedMessage.getScheduledEnqueueTime());\n-        setContentType(receivedMessage.getContentType());\n-        setCorrelationId(receivedMessage.getCorrelationId());\n-        setLabel(receivedMessage.getLabel());\n-        setPartitionKey(receivedMessage.getPartitionKey());\n-        setReplyTo(receivedMessage.getReplyTo());\n-        setReplyToSessionId(receivedMessage.getReplyToSessionId());\n-        setTimeToLive(receivedMessage.getTimeToLive());\n-        setTo(receivedMessage.getTo());\n-        setSessionId(receivedMessage.getSessionId());\n-        setViaPartitionKey(receivedMessage.getViaPartitionKey());\n+\n+        final AmqpDataBody amqpDataBody = ((AmqpDataBody) receivedMessage.getAmqpAnnotatedMessage().getBody());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf5072510a5437a5ba8b03929a0c3333ede0ecf"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTMxODAzOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMToyNzoyOFrOHOzUtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMToyNzoyOFrOHOzUtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4Mjk5Nw==", "bodyText": "We should also make a copy of the annotated message rather than passing a reference to it or else they may change parts of the annotated message which affect other references of it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485282997", "createdAt": "2020-09-09T01:27:28Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "diffHunk": "@@ -82,47 +97,76 @@ public ServiceBusMessage(byte[] body) {\n      * @throws NullPointerException if {@code receivedMessage} is {@code null}.\n      */\n     public ServiceBusMessage(ServiceBusReceivedMessage receivedMessage) {\n-        this.body = receivedMessage.getBody();\n+        Objects.requireNonNull(receivedMessage, \"'receivedMessage' cannot be null.\");\n+\n+        this.amqpAnnotatedMessage = new AmqpAnnotatedMessage(receivedMessage.getAmqpAnnotatedMessage());\n         this.context = Context.NONE;\n-        setMessageId(receivedMessage.getMessageId());\n-        setScheduledEnqueueTime(receivedMessage.getScheduledEnqueueTime());\n-        setContentType(receivedMessage.getContentType());\n-        setCorrelationId(receivedMessage.getCorrelationId());\n-        setLabel(receivedMessage.getLabel());\n-        setPartitionKey(receivedMessage.getPartitionKey());\n-        setReplyTo(receivedMessage.getReplyTo());\n-        setReplyToSessionId(receivedMessage.getReplyToSessionId());\n-        setTimeToLive(receivedMessage.getTimeToLive());\n-        setTo(receivedMessage.getTo());\n-        setSessionId(receivedMessage.getSessionId());\n-        setViaPartitionKey(receivedMessage.getViaPartitionKey());\n+\n+        final AmqpDataBody amqpDataBody = ((AmqpDataBody) receivedMessage.getAmqpAnnotatedMessage().getBody());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf5072510a5437a5ba8b03929a0c3333ede0ecf"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTMxOTU3OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMToyNzo1NVrOHOzVeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODoyOTo0MFrOHPUm4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MzE5Mw==", "bodyText": "This may be dealt with in a copy constructor for AmqpAnnotatedMessage.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485283193", "createdAt": "2020-09-09T01:27:55Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "diffHunk": "@@ -82,47 +97,76 @@ public ServiceBusMessage(byte[] body) {\n      * @throws NullPointerException if {@code receivedMessage} is {@code null}.\n      */\n     public ServiceBusMessage(ServiceBusReceivedMessage receivedMessage) {\n-        this.body = receivedMessage.getBody();\n+        Objects.requireNonNull(receivedMessage, \"'receivedMessage' cannot be null.\");\n+\n+        this.amqpAnnotatedMessage = new AmqpAnnotatedMessage(receivedMessage.getAmqpAnnotatedMessage());\n         this.context = Context.NONE;\n-        setMessageId(receivedMessage.getMessageId());\n-        setScheduledEnqueueTime(receivedMessage.getScheduledEnqueueTime());\n-        setContentType(receivedMessage.getContentType());\n-        setCorrelationId(receivedMessage.getCorrelationId());\n-        setLabel(receivedMessage.getLabel());\n-        setPartitionKey(receivedMessage.getPartitionKey());\n-        setReplyTo(receivedMessage.getReplyTo());\n-        setReplyToSessionId(receivedMessage.getReplyToSessionId());\n-        setTimeToLive(receivedMessage.getTimeToLive());\n-        setTo(receivedMessage.getTo());\n-        setSessionId(receivedMessage.getSessionId());\n-        setViaPartitionKey(receivedMessage.getViaPartitionKey());\n+\n+        final AmqpDataBody amqpDataBody = ((AmqpDataBody) receivedMessage.getAmqpAnnotatedMessage().getBody());\n+        final List<BinaryData> binaryDataList = amqpDataBody.getData().stream().collect(Collectors.toList());\n+        if (binaryDataList.size() > 0) {\n+            binaryData = binaryDataList.get(0).getData();\n+        } else {\n+            binaryData = EMPTY_BYTE_ARRAY;\n+        }\n+\n+        // clean up data which user is not allowed to set.\n+        amqpAnnotatedMessage.getHeader().setDeliveryCount(null);\n+\n+        removeValues(amqpAnnotatedMessage.getMessageAnnotations(), LOCKED_UNTIL_KEY_ANNOTATION_NAME,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf5072510a5437a5ba8b03929a0c3333ede0ecf"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgyODMyMg==", "bodyText": "Like we spoke in teams, I will leave it here because  it seems weird a copy constructor wouldn't copy everything.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485828322", "createdAt": "2020-09-09T18:29:40Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "diffHunk": "@@ -82,47 +97,76 @@ public ServiceBusMessage(byte[] body) {\n      * @throws NullPointerException if {@code receivedMessage} is {@code null}.\n      */\n     public ServiceBusMessage(ServiceBusReceivedMessage receivedMessage) {\n-        this.body = receivedMessage.getBody();\n+        Objects.requireNonNull(receivedMessage, \"'receivedMessage' cannot be null.\");\n+\n+        this.amqpAnnotatedMessage = new AmqpAnnotatedMessage(receivedMessage.getAmqpAnnotatedMessage());\n         this.context = Context.NONE;\n-        setMessageId(receivedMessage.getMessageId());\n-        setScheduledEnqueueTime(receivedMessage.getScheduledEnqueueTime());\n-        setContentType(receivedMessage.getContentType());\n-        setCorrelationId(receivedMessage.getCorrelationId());\n-        setLabel(receivedMessage.getLabel());\n-        setPartitionKey(receivedMessage.getPartitionKey());\n-        setReplyTo(receivedMessage.getReplyTo());\n-        setReplyToSessionId(receivedMessage.getReplyToSessionId());\n-        setTimeToLive(receivedMessage.getTimeToLive());\n-        setTo(receivedMessage.getTo());\n-        setSessionId(receivedMessage.getSessionId());\n-        setViaPartitionKey(receivedMessage.getViaPartitionKey());\n+\n+        final AmqpDataBody amqpDataBody = ((AmqpDataBody) receivedMessage.getAmqpAnnotatedMessage().getBody());\n+        final List<BinaryData> binaryDataList = amqpDataBody.getData().stream().collect(Collectors.toList());\n+        if (binaryDataList.size() > 0) {\n+            binaryData = binaryDataList.get(0).getData();\n+        } else {\n+            binaryData = EMPTY_BYTE_ARRAY;\n+        }\n+\n+        // clean up data which user is not allowed to set.\n+        amqpAnnotatedMessage.getHeader().setDeliveryCount(null);\n+\n+        removeValues(amqpAnnotatedMessage.getMessageAnnotations(), LOCKED_UNTIL_KEY_ANNOTATION_NAME,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MzE5Mw=="}, "originalCommit": {"oid": "6cf5072510a5437a5ba8b03929a0c3333ede0ecf"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTMyMDc3OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMToyODozOVrOHOzWMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMToyODozOVrOHOzWMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MzM3Nw==", "bodyText": "for {@code getApplicationProperties()}", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485283377", "createdAt": "2020-09-09T01:28:39Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "diffHunk": "@@ -82,47 +97,76 @@ public ServiceBusMessage(byte[] body) {\n      * @throws NullPointerException if {@code receivedMessage} is {@code null}.\n      */\n     public ServiceBusMessage(ServiceBusReceivedMessage receivedMessage) {\n-        this.body = receivedMessage.getBody();\n+        Objects.requireNonNull(receivedMessage, \"'receivedMessage' cannot be null.\");\n+\n+        this.amqpAnnotatedMessage = new AmqpAnnotatedMessage(receivedMessage.getAmqpAnnotatedMessage());\n         this.context = Context.NONE;\n-        setMessageId(receivedMessage.getMessageId());\n-        setScheduledEnqueueTime(receivedMessage.getScheduledEnqueueTime());\n-        setContentType(receivedMessage.getContentType());\n-        setCorrelationId(receivedMessage.getCorrelationId());\n-        setLabel(receivedMessage.getLabel());\n-        setPartitionKey(receivedMessage.getPartitionKey());\n-        setReplyTo(receivedMessage.getReplyTo());\n-        setReplyToSessionId(receivedMessage.getReplyToSessionId());\n-        setTimeToLive(receivedMessage.getTimeToLive());\n-        setTo(receivedMessage.getTo());\n-        setSessionId(receivedMessage.getSessionId());\n-        setViaPartitionKey(receivedMessage.getViaPartitionKey());\n+\n+        final AmqpDataBody amqpDataBody = ((AmqpDataBody) receivedMessage.getAmqpAnnotatedMessage().getBody());\n+        final List<BinaryData> binaryDataList = amqpDataBody.getData().stream().collect(Collectors.toList());\n+        if (binaryDataList.size() > 0) {\n+            binaryData = binaryDataList.get(0).getData();\n+        } else {\n+            binaryData = EMPTY_BYTE_ARRAY;\n+        }\n+\n+        // clean up data which user is not allowed to set.\n+        amqpAnnotatedMessage.getHeader().setDeliveryCount(null);\n+\n+        removeValues(amqpAnnotatedMessage.getMessageAnnotations(), LOCKED_UNTIL_KEY_ANNOTATION_NAME,\n+            SEQUENCE_NUMBER_ANNOTATION_NAME, DEAD_LETTER_SOURCE_KEY_ANNOTATION_NAME,\n+            ENQUEUED_SEQUENCE_NUMBER_ANNOTATION_NAME, ENQUEUED_TIME_UTC_ANNOTATION_NAME);\n+\n+        removeValues(amqpAnnotatedMessage.getApplicationProperties(), DEAD_LETTER_DESCRIPTION_ANNOTATION_NAME,\n+            DEAD_LETTER_REASON_ANNOTATION_NAME);\n+\n+    }\n+\n+    /**\n+     * Gets the {@link AmqpAnnotatedMessage}.\n+     *\n+     * @return the amqp message.\n+     */\n+    public AmqpAnnotatedMessage getAmqpAnnotatedMessage() {\n+        return amqpAnnotatedMessage;\n     }\n \n     /**\n      * Gets the set of free-form {@link ServiceBusMessage} properties which may be used for passing metadata associated\n-     * with the {@link ServiceBusMessage} during Service Bus operations. A common use-case for {@code properties()} is\n-     * to associate serialization hints for the {@link #getBody()} as an aid to consumers who wish to deserialize the\n-     * binary data.\n+     * with the {@link ServiceBusMessage} during Service Bus operations. A common use-case for\n+     * {@code applicationProperties()} is to associate serialization hints for the {@link #getBody()} as an aid to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf5072510a5437a5ba8b03929a0c3333ede0ecf"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTMyMjQzOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMToyOToyNlrOHOzXIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMToyOToyNlrOHOzXIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MzYxNw==", "bodyText": "You already have a variable type, you don't need to reach in again and get it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485283617", "createdAt": "2020-09-09T01:29:26Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "diffHunk": "@@ -82,47 +97,76 @@ public ServiceBusMessage(byte[] body) {\n      * @throws NullPointerException if {@code receivedMessage} is {@code null}.\n      */\n     public ServiceBusMessage(ServiceBusReceivedMessage receivedMessage) {\n-        this.body = receivedMessage.getBody();\n+        Objects.requireNonNull(receivedMessage, \"'receivedMessage' cannot be null.\");\n+\n+        this.amqpAnnotatedMessage = new AmqpAnnotatedMessage(receivedMessage.getAmqpAnnotatedMessage());\n         this.context = Context.NONE;\n-        setMessageId(receivedMessage.getMessageId());\n-        setScheduledEnqueueTime(receivedMessage.getScheduledEnqueueTime());\n-        setContentType(receivedMessage.getContentType());\n-        setCorrelationId(receivedMessage.getCorrelationId());\n-        setLabel(receivedMessage.getLabel());\n-        setPartitionKey(receivedMessage.getPartitionKey());\n-        setReplyTo(receivedMessage.getReplyTo());\n-        setReplyToSessionId(receivedMessage.getReplyToSessionId());\n-        setTimeToLive(receivedMessage.getTimeToLive());\n-        setTo(receivedMessage.getTo());\n-        setSessionId(receivedMessage.getSessionId());\n-        setViaPartitionKey(receivedMessage.getViaPartitionKey());\n+\n+        final AmqpDataBody amqpDataBody = ((AmqpDataBody) receivedMessage.getAmqpAnnotatedMessage().getBody());\n+        final List<BinaryData> binaryDataList = amqpDataBody.getData().stream().collect(Collectors.toList());\n+        if (binaryDataList.size() > 0) {\n+            binaryData = binaryDataList.get(0).getData();\n+        } else {\n+            binaryData = EMPTY_BYTE_ARRAY;\n+        }\n+\n+        // clean up data which user is not allowed to set.\n+        amqpAnnotatedMessage.getHeader().setDeliveryCount(null);\n+\n+        removeValues(amqpAnnotatedMessage.getMessageAnnotations(), LOCKED_UNTIL_KEY_ANNOTATION_NAME,\n+            SEQUENCE_NUMBER_ANNOTATION_NAME, DEAD_LETTER_SOURCE_KEY_ANNOTATION_NAME,\n+            ENQUEUED_SEQUENCE_NUMBER_ANNOTATION_NAME, ENQUEUED_TIME_UTC_ANNOTATION_NAME);\n+\n+        removeValues(amqpAnnotatedMessage.getApplicationProperties(), DEAD_LETTER_DESCRIPTION_ANNOTATION_NAME,\n+            DEAD_LETTER_REASON_ANNOTATION_NAME);\n+\n+    }\n+\n+    /**\n+     * Gets the {@link AmqpAnnotatedMessage}.\n+     *\n+     * @return the amqp message.\n+     */\n+    public AmqpAnnotatedMessage getAmqpAnnotatedMessage() {\n+        return amqpAnnotatedMessage;\n     }\n \n     /**\n      * Gets the set of free-form {@link ServiceBusMessage} properties which may be used for passing metadata associated\n-     * with the {@link ServiceBusMessage} during Service Bus operations. A common use-case for {@code properties()} is\n-     * to associate serialization hints for the {@link #getBody()} as an aid to consumers who wish to deserialize the\n-     * binary data.\n+     * with the {@link ServiceBusMessage} during Service Bus operations. A common use-case for\n+     * {@code applicationProperties()} is to associate serialization hints for the {@link #getBody()} as an aid to\n+     * consumers who wish to deserialize the binary data.\n      *\n      * @return Application properties associated with this {@link ServiceBusMessage}.\n      */\n-    public Map<String, Object> getProperties() {\n-        return properties;\n+    public Map<String, Object> getApplicationProperties() {\n+        return amqpAnnotatedMessage.getApplicationProperties();\n     }\n \n     /**\n      * Gets the actual payload/data wrapped by the {@link ServiceBusMessage}.\n      *\n      * <p>\n      * If the means for deserializing the raw data is not apparent to consumers, a common technique is to make use of\n-     * {@link #getProperties()} when creating the event, to associate serialization hints as an aid to consumers who\n-     * wish to deserialize the binary data.\n+     * {@link #getApplicationProperties()} when creating the event, to associate serialization hints as an aid to\n+     * consumers who wish to deserialize the binary data.\n      * </p>\n      *\n      * @return A byte array representing the data.\n      */\n     public byte[] getBody() {\n-        return Arrays.copyOf(body, body.length);\n+        final AmqpBodyType type = amqpAnnotatedMessage.getBody().getBodyType();\n+        switch (type) {\n+            case DATA:\n+                return Arrays.copyOf(binaryData, binaryData.length);\n+            case SEQUENCE:\n+            case VALUE:\n+                throw logger.logExceptionAsError(new UnsupportedOperationException(\"Not supported AmqpBodyType: \"\n+                    + amqpAnnotatedMessage.getBody().getBodyType().toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf5072510a5437a5ba8b03929a0c3333ede0ecf"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTMyNjg5OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMTozMTozNFrOHOzZlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMTozMTozNFrOHOzZlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4NDI0NA==", "bodyText": "You can use a foreach loop instead of this?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485284244", "createdAt": "2020-09-09T01:31:34Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "diffHunk": "@@ -143,34 +140,84 @@ public int getSize(Message amqpMessage) {\n         if (amqpMessage.getProperties() == null) {\n             amqpMessage.setProperties(new Properties());\n         }\n-\n         amqpMessage.setMessageId(brokeredMessage.getMessageId());\n         amqpMessage.setContentType(brokeredMessage.getContentType());\n         amqpMessage.setCorrelationId(brokeredMessage.getCorrelationId());\n-        amqpMessage.setSubject(brokeredMessage.getLabel());\n-        amqpMessage.getProperties().setTo(brokeredMessage.getTo());\n+        amqpMessage.setSubject(brokeredMessage.getSubject());\n         amqpMessage.setReplyTo(brokeredMessage.getReplyTo());\n         amqpMessage.setReplyToGroupId(brokeredMessage.getReplyToSessionId());\n         amqpMessage.setGroupId(brokeredMessage.getSessionId());\n \n+        final AmqpMessageProperties brokeredProperties = brokeredMessage.getAmqpAnnotatedMessage().getProperties();\n+\n+        amqpMessage.setContentEncoding(brokeredProperties.getContentEncoding());\n+        if (brokeredProperties.getGroupSequence() != null) {\n+            amqpMessage.setGroupSequence(brokeredProperties.getGroupSequence());\n+        }\n+        amqpMessage.getProperties().setTo(brokeredMessage.getTo());\n+        amqpMessage.getProperties().setUserId(new Binary(brokeredProperties.getUserId()));\n+\n+        if (brokeredProperties.getAbsoluteExpiryTime() != null) {\n+            amqpMessage.getProperties().setAbsoluteExpiryTime(Date.from(brokeredProperties.getAbsoluteExpiryTime().\n+                toInstant()));\n+        }\n+        if (brokeredProperties.getCreationTime() != null) {\n+            amqpMessage.getProperties().setCreationTime(Date.from(brokeredProperties.getCreationTime().toInstant()));\n+        }\n+\n+        //set footer\n+        amqpMessage.setFooter(new Footer(brokeredMessage.getAmqpAnnotatedMessage().getFooter()));\n+\n+        //set header\n+        AmqpMessageHeader header = brokeredMessage.getAmqpAnnotatedMessage().getHeader();\n+        if (header.getDeliveryCount() != null) {\n+            amqpMessage.setDeliveryCount(brokeredMessage.getAmqpAnnotatedMessage().getHeader().getDeliveryCount());\n+        }\n+        if (header.getPriority() != null) {\n+            amqpMessage.setPriority(header.getPriority());\n+        }\n+        if (header.isDurable() != null) {\n+            amqpMessage.setDurable(brokeredMessage.getAmqpAnnotatedMessage().getHeader().isDurable());\n+        }\n+        if (header.isFirstAcquirer() != null) {\n+            amqpMessage.setFirstAcquirer(brokeredMessage.getAmqpAnnotatedMessage().getHeader().isFirstAcquirer());\n+        }\n+        if (header.getTimeToLive() != null) {\n+            amqpMessage.setTtl(brokeredMessage.getAmqpAnnotatedMessage().getHeader().getTimeToLive().toMillis());\n+        }\n+\n         final Map<Symbol, Object> messageAnnotationsMap = new HashMap<>();\n         if (brokeredMessage.getScheduledEnqueueTime() != null) {\n-            messageAnnotationsMap.put(Symbol.valueOf(SCHEDULED_ENQUEUE_TIME_NAME),\n+            messageAnnotationsMap.put(Symbol.valueOf(SCHEDULED_ENQUEUE_UTC_TIME_NAME.getValue()),\n                 Date.from(brokeredMessage.getScheduledEnqueueTime().toInstant()));\n         }\n \n         final String partitionKey = brokeredMessage.getPartitionKey();\n         if (partitionKey != null && !partitionKey.isEmpty()) {\n-            messageAnnotationsMap.put(Symbol.valueOf(PARTITION_KEY_NAME), brokeredMessage.getPartitionKey());\n+            messageAnnotationsMap.put(Symbol.valueOf(PARTITION_KEY_ANNOTATION_NAME.getValue()),\n+                brokeredMessage.getPartitionKey());\n         }\n \n         final String viaPartitionKey = brokeredMessage.getViaPartitionKey();\n         if (viaPartitionKey != null && !viaPartitionKey.isEmpty()) {\n-            messageAnnotationsMap.put(Symbol.valueOf(VIA_PARTITION_KEY_NAME), viaPartitionKey);\n+            messageAnnotationsMap.put(Symbol.valueOf(VIA_PARTITION_KEY_ANNOTATION_NAME.getValue()), viaPartitionKey);\n         }\n \n         amqpMessage.setMessageAnnotations(new MessageAnnotations(messageAnnotationsMap));\n \n+        // Set Delivery Annotations.\n+        final Map<Symbol, Object> deliveryAnnotationsMap = new HashMap<>();\n+\n+        final Map<String, Object> deliveryAnnotations = brokeredMessage.getAmqpAnnotatedMessage()\n+            .getDeliveryAnnotations();\n+        Iterator<Map.Entry<String, Object>> deliveryEntries = deliveryAnnotations.entrySet().iterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf5072510a5437a5ba8b03929a0c3333ede0ecf"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTMyODIwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMTozMjoxOFrOHOzaSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMTozMjoxOFrOHOzaSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4NDQyNw==", "bodyText": "Why not use final for this?\nfinal byte[] bytes;\n...", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485284427", "createdAt": "2020-09-09T01:32:18Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "diffHunk": "@@ -317,106 +364,96 @@ public int getSize(Message amqpMessage) {\n     }\n \n     private ServiceBusReceivedMessage deserializeMessage(Message amqpMessage) {\n-        final ServiceBusReceivedMessage brokeredMessage;\n+        byte[] bytes = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf5072510a5437a5ba8b03929a0c3333ede0ecf"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTMyODg1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMTozMjo0MlrOHOzarg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjo0NjowOFrOHPczrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4NDUyNg==", "bodyText": "Is there a reason we can't use a foreach loop for this?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485284526", "createdAt": "2020-09-09T01:32:42Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "diffHunk": "@@ -317,106 +364,96 @@ public int getSize(Message amqpMessage) {\n     }\n \n     private ServiceBusReceivedMessage deserializeMessage(Message amqpMessage) {\n-        final ServiceBusReceivedMessage brokeredMessage;\n+        byte[] bytes = null;\n         final Section body = amqpMessage.getBody();\n         if (body != null) {\n             //TODO (conniey): Support other AMQP types like AmqpValue and AmqpSequence.\n             if (body instanceof Data) {\n                 final Binary messageData = ((Data) body).getValue();\n-                final byte[] bytes = messageData.getArray();\n-                brokeredMessage = new ServiceBusReceivedMessage(bytes);\n+                bytes = messageData.getArray();\n             } else {\n                 logger.warning(String.format(Messages.MESSAGE_NOT_OF_TYPE, body.getType()));\n-                brokeredMessage = new ServiceBusReceivedMessage(EMPTY_BYTE_ARRAY);\n+                bytes = EMPTY_BYTE_ARRAY;\n             }\n         } else {\n             logger.warning(String.format(Messages.MESSAGE_NOT_OF_TYPE, \"null\"));\n-            brokeredMessage = new ServiceBusReceivedMessage(EMPTY_BYTE_ARRAY);\n+            bytes = EMPTY_BYTE_ARRAY;\n         }\n+        final ServiceBusReceivedMessage brokeredMessage = new ServiceBusReceivedMessage(bytes);\n+        AmqpAnnotatedMessage brokeredAmqpAnnotatedMessage = brokeredMessage.getAmqpAnnotatedMessage();\n \n         // Application properties\n         ApplicationProperties applicationProperties = amqpMessage.getApplicationProperties();\n         if (applicationProperties != null) {\n             final Map<String, Object> propertiesValue = applicationProperties.getValue();\n-            brokeredMessage.getProperties().putAll(propertiesValue);\n-\n-            if (propertiesValue.containsKey(DEAD_LETTER_REASON)) {\n-                brokeredMessage.setDeadLetterReason(String.valueOf(propertiesValue.get(DEAD_LETTER_REASON)));\n-            }\n-            if (propertiesValue.containsKey(DEAD_LETTER_DESCRIPTION)) {\n-                brokeredMessage.setDeadLetterErrorDescription(String.valueOf(\n-                    propertiesValue.get(DEAD_LETTER_DESCRIPTION)));\n-            }\n+            brokeredAmqpAnnotatedMessage.getApplicationProperties().putAll(propertiesValue);\n         }\n \n         // Header\n-        brokeredMessage.setTimeToLive(Duration.ofMillis(amqpMessage.getTtl()));\n-        brokeredMessage.setDeliveryCount(amqpMessage.getDeliveryCount());\n+        final AmqpMessageHeader brokeredHeader = brokeredAmqpAnnotatedMessage.getHeader();\n+        brokeredHeader.setTimeToLive(Duration.ofMillis(amqpMessage.getTtl()));\n+        brokeredHeader.setDeliveryCount(amqpMessage.getDeliveryCount());\n+        brokeredHeader.setDurable(amqpMessage.getHeader().getDurable());\n+        brokeredHeader.setFirstAcquirer(amqpMessage.getHeader().getFirstAcquirer());\n+        brokeredHeader.setPriority(amqpMessage.getPriority());\n+\n+        // Footer\n+        final Footer footer = amqpMessage.getFooter();\n+        if (footer != null && footer.getValue() != null) {\n+            @SuppressWarnings(\"unchecked\") final Map<Symbol, Object> footerValue = footer.getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf5072510a5437a5ba8b03929a0c3333ede0ecf"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2MjY3MA==", "bodyText": "I am using setValues(Map<Symbol, Object> sourceMap, Map<String, Object> targetMap) which is using foreach loop.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485962670", "createdAt": "2020-09-09T22:46:08Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "diffHunk": "@@ -317,106 +364,96 @@ public int getSize(Message amqpMessage) {\n     }\n \n     private ServiceBusReceivedMessage deserializeMessage(Message amqpMessage) {\n-        final ServiceBusReceivedMessage brokeredMessage;\n+        byte[] bytes = null;\n         final Section body = amqpMessage.getBody();\n         if (body != null) {\n             //TODO (conniey): Support other AMQP types like AmqpValue and AmqpSequence.\n             if (body instanceof Data) {\n                 final Binary messageData = ((Data) body).getValue();\n-                final byte[] bytes = messageData.getArray();\n-                brokeredMessage = new ServiceBusReceivedMessage(bytes);\n+                bytes = messageData.getArray();\n             } else {\n                 logger.warning(String.format(Messages.MESSAGE_NOT_OF_TYPE, body.getType()));\n-                brokeredMessage = new ServiceBusReceivedMessage(EMPTY_BYTE_ARRAY);\n+                bytes = EMPTY_BYTE_ARRAY;\n             }\n         } else {\n             logger.warning(String.format(Messages.MESSAGE_NOT_OF_TYPE, \"null\"));\n-            brokeredMessage = new ServiceBusReceivedMessage(EMPTY_BYTE_ARRAY);\n+            bytes = EMPTY_BYTE_ARRAY;\n         }\n+        final ServiceBusReceivedMessage brokeredMessage = new ServiceBusReceivedMessage(bytes);\n+        AmqpAnnotatedMessage brokeredAmqpAnnotatedMessage = brokeredMessage.getAmqpAnnotatedMessage();\n \n         // Application properties\n         ApplicationProperties applicationProperties = amqpMessage.getApplicationProperties();\n         if (applicationProperties != null) {\n             final Map<String, Object> propertiesValue = applicationProperties.getValue();\n-            brokeredMessage.getProperties().putAll(propertiesValue);\n-\n-            if (propertiesValue.containsKey(DEAD_LETTER_REASON)) {\n-                brokeredMessage.setDeadLetterReason(String.valueOf(propertiesValue.get(DEAD_LETTER_REASON)));\n-            }\n-            if (propertiesValue.containsKey(DEAD_LETTER_DESCRIPTION)) {\n-                brokeredMessage.setDeadLetterErrorDescription(String.valueOf(\n-                    propertiesValue.get(DEAD_LETTER_DESCRIPTION)));\n-            }\n+            brokeredAmqpAnnotatedMessage.getApplicationProperties().putAll(propertiesValue);\n         }\n \n         // Header\n-        brokeredMessage.setTimeToLive(Duration.ofMillis(amqpMessage.getTtl()));\n-        brokeredMessage.setDeliveryCount(amqpMessage.getDeliveryCount());\n+        final AmqpMessageHeader brokeredHeader = brokeredAmqpAnnotatedMessage.getHeader();\n+        brokeredHeader.setTimeToLive(Duration.ofMillis(amqpMessage.getTtl()));\n+        brokeredHeader.setDeliveryCount(amqpMessage.getDeliveryCount());\n+        brokeredHeader.setDurable(amqpMessage.getHeader().getDurable());\n+        brokeredHeader.setFirstAcquirer(amqpMessage.getHeader().getFirstAcquirer());\n+        brokeredHeader.setPriority(amqpMessage.getPriority());\n+\n+        // Footer\n+        final Footer footer = amqpMessage.getFooter();\n+        if (footer != null && footer.getValue() != null) {\n+            @SuppressWarnings(\"unchecked\") final Map<Symbol, Object> footerValue = footer.getValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4NDUyNg=="}, "originalCommit": {"oid": "6cf5072510a5437a5ba8b03929a0c3333ede0ecf"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTMzNDk3OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMTozNTo1OFrOHOzePw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMTozNTo1OFrOHOzePw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4NTQzOQ==", "bodyText": "You can just get it instead of doing two map accesses, doesn't work? Same with below.\nreturn (String) dataMap.get(key);", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485285439", "createdAt": "2020-09-09T01:35:58Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java", "diffHunk": "@@ -588,6 +628,34 @@ void setTo(String to) {\n      * @see #getViaPartitionKey()\n      */\n     void setViaPartitionKey(String viaPartitionKey) {\n-        this.viaPartitionKey = viaPartitionKey;\n+        amqpAnnotatedMessage.getMessageAnnotations().put(VIA_PARTITION_KEY_ANNOTATION_NAME.getValue(), viaPartitionKey);\n+    }\n+\n+    /*\n+     * Gets String value from given map and null if key does not exists.\n+     */\n+    private String getStringValue(Map<String, Object> dataMap, String key) {\n+        return dataMap.containsKey(key) ? (String) dataMap.get(key) : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf5072510a5437a5ba8b03929a0c3333ede0ecf"}, "originalPosition": 512}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTM0MTE4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusMessageTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMTozNzozNVrOHOziBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTo1MTo1MVrOHPXwPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4NjQwNg==", "bodyText": "do you have a test for that copy constructor? I have a feeling if you have a SBRMessage and start modifying annotated properties (ie. Subject), the original one will be modifed. (which isn't what you want).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485286406", "createdAt": "2020-09-09T01:37:35Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusMessageTest.java", "diffHunk": "@@ -48,7 +48,7 @@ void messagePropertiesShouldNotBeNull() {\n         // Assert\n         Assertions.assertNotNull(serviceBusMessageData.getBody());\n         Assertions.assertNotNull(serviceBusMessageData.getContext());\n-        Assertions.assertNotNull(serviceBusMessageData.getProperties());\n+        Assertions.assertNotNull(serviceBusMessageData.getApplicationProperties());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf5072510a5437a5ba8b03929a0c3333ede0ecf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3NTU5NA==", "bodyText": "I have written test for it now.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485775594", "createdAt": "2020-09-09T16:56:56Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusMessageTest.java", "diffHunk": "@@ -48,7 +48,7 @@ void messagePropertiesShouldNotBeNull() {\n         // Assert\n         Assertions.assertNotNull(serviceBusMessageData.getBody());\n         Assertions.assertNotNull(serviceBusMessageData.getContext());\n-        Assertions.assertNotNull(serviceBusMessageData.getProperties());\n+        Assertions.assertNotNull(serviceBusMessageData.getApplicationProperties());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4NjQwNg=="}, "originalCommit": {"oid": "6cf5072510a5437a5ba8b03929a0c3333ede0ecf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxOTIyNQ==", "bodyText": "In the test you should modify and expect the values are different.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485819225", "createdAt": "2020-09-09T18:13:15Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusMessageTest.java", "diffHunk": "@@ -48,7 +48,7 @@ void messagePropertiesShouldNotBeNull() {\n         // Assert\n         Assertions.assertNotNull(serviceBusMessageData.getBody());\n         Assertions.assertNotNull(serviceBusMessageData.getContext());\n-        Assertions.assertNotNull(serviceBusMessageData.getProperties());\n+        Assertions.assertNotNull(serviceBusMessageData.getApplicationProperties());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4NjQwNg=="}, "originalCommit": {"oid": "6cf5072510a5437a5ba8b03929a0c3333ede0ecf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg3OTg2OQ==", "bodyText": "AmqpAnnotatedMessage: Since this copy constructor will copy values, We have test in AmqpAnnotatedMessageTest which check for values.\nBut I have added additional test in ServiceBusMessageTest which will user setters on ServiceBusMessage to change the properties and do assersions.\nI hope both will cover all the cases.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485879869", "createdAt": "2020-09-09T19:51:51Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusMessageTest.java", "diffHunk": "@@ -48,7 +48,7 @@ void messagePropertiesShouldNotBeNull() {\n         // Assert\n         Assertions.assertNotNull(serviceBusMessageData.getBody());\n         Assertions.assertNotNull(serviceBusMessageData.getContext());\n-        Assertions.assertNotNull(serviceBusMessageData.getProperties());\n+        Assertions.assertNotNull(serviceBusMessageData.getApplicationProperties());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4NjQwNg=="}, "originalCommit": {"oid": "6cf5072510a5437a5ba8b03929a0c3333ede0ecf"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTM0MzYwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceivedMessageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMTozODo1MFrOHOzjaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMTozODo1MFrOHOzjaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4Njc2Mw==", "bodyText": "Do we need a method for this? if we do assertNull, we won't understand which key failed, just that one of the keys was null when we did not want it to be. If we can split it out and reason about the lines", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485286763", "createdAt": "2020-09-09T01:38:50Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceivedMessageTest.java", "diffHunk": "@@ -75,24 +96,53 @@ public void toServiceBusMessageTest() {\n         originalMessage.setViaPartitionKey(\"something\");\n         originalMessage.setTimeToLive(Duration.ofSeconds(10));\n         originalMessage.setReplyToSessionId(\"rsessionid\");\n-        originalMessage.setLabel(\"label\");\n+        originalMessage.setSubject(\"subject\");\n         originalMessage.setTo(\"to\");\n+        final Map<String, Object> originalMessageAnnotations = originalMessage.getAmqpAnnotatedMessage().getMessageAnnotations();\n+        originalMessageAnnotations.put(DEAD_LETTER_SOURCE_KEY_ANNOTATION_NAME.getValue(), \"message annotations\");\n+        originalMessageAnnotations.put(ENQUEUED_SEQUENCE_NUMBER_ANNOTATION_NAME.getValue(), Long.valueOf(3));\n+        originalMessageAnnotations.put(LOCKED_UNTIL_KEY_ANNOTATION_NAME.getValue(), new Date(Instant.now().toEpochMilli()));\n+        originalMessageAnnotations.put(ENQUEUED_TIME_UTC_ANNOTATION_NAME.getValue(), new Date(Instant.now().toEpochMilli()));\n+\n+        originalMessageAnnotations.put(SEQUENCE_NUMBER_ANNOTATION_NAME.getValue(), Long.valueOf(3));\n+\n+        final Map<String, Object> originalApplicationProperties = originalMessage.getAmqpAnnotatedMessage().getApplicationProperties();\n+        originalApplicationProperties.put(DEAD_LETTER_DESCRIPTION_ANNOTATION_NAME.getValue(), \"description\");\n+        originalApplicationProperties.put(DEAD_LETTER_REASON_ANNOTATION_NAME.getValue(), \"description\");\n+\n+        originalMessage.getAmqpAnnotatedMessage().getHeader().setDeliveryCount(Long.valueOf(5));\n \n         // Act\n-        final ServiceBusMessage messageToSend = new ServiceBusMessage(originalMessage);\n+        final ServiceBusMessage actual = new ServiceBusMessage(originalMessage);\n \n         // Assert\n-        Assertions.assertNotNull(messageToSend);\n-        Assertions.assertNotNull(messageToSend.getBody());\n-        Assertions.assertEquals(PAYLOAD, new String(messageToSend.getBody(), UTF_8));\n-        Assertions.assertEquals(originalMessage.getMessageId(), messageToSend.getMessageId());\n-        Assertions.assertEquals(originalMessage.getContentType(), messageToSend.getContentType());\n-        Assertions.assertEquals(originalMessage.getCorrelationId(), messageToSend.getCorrelationId());\n-        Assertions.assertEquals(originalMessage.getReplyTo(), messageToSend.getReplyTo());\n-        Assertions.assertEquals(originalMessage.getViaPartitionKey(), messageToSend.getViaPartitionKey());\n-        Assertions.assertEquals(originalMessage.getTimeToLive().toMillis(), messageToSend.getTimeToLive().toMillis());\n-        Assertions.assertEquals(originalMessage.getLabel(), messageToSend.getLabel());\n-        Assertions.assertEquals(originalMessage.getReplyToSessionId(), messageToSend.getReplyToSessionId());\n-        Assertions.assertEquals(originalMessage.getTo(), messageToSend.getTo());\n+        assertNotNull(actual);\n+        assertNotNull(actual.getBody());\n+        assertEquals(PAYLOAD, new String(actual.getBody(), UTF_8));\n+        assertEquals(originalMessage.getMessageId(), actual.getMessageId());\n+        assertEquals(originalMessage.getContentType(), actual.getContentType());\n+        assertEquals(originalMessage.getCorrelationId(), actual.getCorrelationId());\n+        assertEquals(originalMessage.getReplyTo(), actual.getReplyTo());\n+        assertEquals(originalMessage.getViaPartitionKey(), actual.getViaPartitionKey());\n+        assertEquals(originalMessage.getTimeToLive().toMillis(), actual.getTimeToLive().toMillis());\n+        assertEquals(originalMessage.getLabel(), actual.getSubject());\n+        assertEquals(originalMessage.getReplyToSessionId(), actual.getReplyToSessionId());\n+        assertEquals(originalMessage.getTo(), actual.getTo());\n+\n+        // Following values should be cleaned up.\n+        assertNullValues(actual.getAmqpAnnotatedMessage().getMessageAnnotations(), DEAD_LETTER_SOURCE_KEY_ANNOTATION_NAME,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf5072510a5437a5ba8b03929a0c3333ede0ecf"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTM0NTM1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMTozOTo0NFrOHOzkaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMTozOTo0NFrOHOzkaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4NzAxOQ==", "bodyText": "The extra message is not necessary. If this fails, we'll know the line that it failed at.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485287019", "createdAt": "2020-09-09T01:39:44Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -953,6 +960,105 @@ void renewMessageLock(MessagingEntityType entityType) throws InterruptedExceptio\n             .verify(Duration.ofMinutes(3));\n     }\n \n+    /**\n+     * Verifies that we can receive a message which have different section set (i.e header, footer, annotations,\n+     * application properties etc).\n+     */\n+    @MethodSource(\"com.azure.messaging.servicebus.IntegrationTestBase#messagingEntityProvider\")\n+    @ParameterizedTest\n+    void receiveAndValidateProperties(MessagingEntityType entityType) {\n+        // Arrange\n+        final boolean isSessionEnabled = false;\n+        final String subject = \"subject\";\n+        final Map<String, Object> footer = new HashMap<>();\n+        footer.put(\"footer-key-1\", \"footer-value-1\");\n+        footer.put(\"footer-key-2\", \"footer-value-2\");\n+\n+        final Map<String, Object> aplicaitonProperties = new HashMap<>();\n+        aplicaitonProperties.put(\"ap-key-1\", \"ap-value-1\");\n+        aplicaitonProperties.put(\"ap-key-2\", \"ap-value-2\");\n+\n+        final Map<String, Object> deliveryAnnotation = new HashMap<>();\n+        deliveryAnnotation.put(\"delivery-annotations-key-1\", \"delivery-annotations-value-1\");\n+        deliveryAnnotation.put(\"delivery-annotations-key-2\", \"delivery-annotations-value-2\");\n+\n+        setSenderAndReceiver(entityType, TestUtils.USE_CASE_VALIDATE_AMQP_PROPERTIES, isSessionEnabled);\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final AmqpAnnotatedMessage expectedAmqpProperties = new AmqpAnnotatedMessage(new AmqpDataBody(Collections.singletonList(new BinaryData(CONTENTS_BYTES))));\n+        expectedAmqpProperties.getProperties().setSubject(subject);\n+        expectedAmqpProperties.getProperties().setReplyToGroupId(\"r-gid\");\n+        expectedAmqpProperties.getProperties().setReplyTo(\"replyto\");\n+        expectedAmqpProperties.getProperties().setContentType(\"content-type\");\n+        expectedAmqpProperties.getProperties().setCorrelationId(\"corelation-id\");\n+        expectedAmqpProperties.getProperties().setTo(\"to\");\n+        expectedAmqpProperties.getProperties().setAbsoluteExpiryTime(OffsetDateTime.now().plusSeconds(60));\n+        expectedAmqpProperties.getProperties().setUserId(\"user-id-1\".getBytes());\n+        expectedAmqpProperties.getProperties().setContentEncoding(\"string\");\n+        expectedAmqpProperties.getProperties().setGroupSequence(Long.valueOf(2));\n+        expectedAmqpProperties.getProperties().setCreationTime(OffsetDateTime.now().plusSeconds(30));\n+\n+        expectedAmqpProperties.getHeader().setPriority(Short.valueOf((short) 2));\n+        expectedAmqpProperties.getHeader().setFirstAcquirer(true);\n+        expectedAmqpProperties.getHeader().setDurable(true);\n+\n+        expectedAmqpProperties.getFooter().putAll(footer);\n+        expectedAmqpProperties.getDeliveryAnnotations().putAll(deliveryAnnotation);\n+        expectedAmqpProperties.getApplicationProperties().putAll(aplicaitonProperties);\n+\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled, expectedAmqpProperties);\n+\n+        sendMessage(message).block(TIMEOUT);\n+\n+        StepVerifier.create(receiver.receiveMessages().map(ServiceBusReceivedMessageContext::getMessage))\n+            .assertNext(received -> {\n+                assertNotNull(received.getLockToken());\n+                AmqpAnnotatedMessage actual = received.getAmqpAnnotatedMessage();\n+                try {\n+                    assertArrayEquals(CONTENTS_BYTES, message.getBody());\n+                    assertEquals(expectedAmqpProperties.getHeader().getPriority(), actual.getHeader().getPriority(), \"Header.priority is not equal.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf5072510a5437a5ba8b03929a0c3333ede0ecf"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTM0NzE4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMTo0MDo0MlrOHOzldw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMTo0MDo0MlrOHOzldw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4NzI4Nw==", "bodyText": "We don't need a protected method for this. It is only used once. Just put it in the arrangement.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485287287", "createdAt": "2020-09-09T01:40:42Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -1048,4 +1154,40 @@ private void completeDeferredMessages(ServiceBusReceiverAsyncClient client, Serv\n         }\n \n     }\n+\n+    protected ServiceBusMessage getMessage(String messageId, boolean isSessionEnabled, AmqpAnnotatedMessage amqpPropertiesToSet) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf5072510a5437a5ba8b03929a0c3333ede0ecf"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTUyMjA0OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMTo1MDo1NlrOHPbjng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMTo1MToyNFrOHPbkZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0MjE3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<String, Object> messageAnnotationMap = amqpAnnotatedMessage.getMessageAnnotations();\n          \n          \n            \n            var value = amqpAnnotatedMessage.getMessageAnnotations().get(SCHEDULED_ENQUEUE_UTC_TIME_NAME.getValue());\n          \n          \n            \n            return value != null\n          \n          \n            \n                ? ((Date) value).toInstant().atOffset(ZoneOffset.UTC)\n          \n          \n            \n                : null;", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485942174", "createdAt": "2020-09-09T21:50:56Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "diffHunk": "@@ -341,6 +374,12 @@ public ServiceBusMessage setTimeToLive(Duration timeToLive) {\n      *     Timestamps</a>\n      */\n     public OffsetDateTime getScheduledEnqueueTime() {\n+        OffsetDateTime scheduledEnqueueTime = null;\n+        Map<String, Object> messageAnnotationMap = amqpAnnotatedMessage.getMessageAnnotations();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52434625c2f43c4bc58f67a13857129b1dc9e18f"}, "originalPosition": 335}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0MjM3NQ==", "bodyText": "The local variable declaration is unnecessary.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485942375", "createdAt": "2020-09-09T21:51:24Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "diffHunk": "@@ -341,6 +374,12 @@ public ServiceBusMessage setTimeToLive(Duration timeToLive) {\n      *     Timestamps</a>\n      */\n     public OffsetDateTime getScheduledEnqueueTime() {\n+        OffsetDateTime scheduledEnqueueTime = null;\n+        Map<String, Object> messageAnnotationMap = amqpAnnotatedMessage.getMessageAnnotations();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0MjE3NA=="}, "originalCommit": {"oid": "52434625c2f43c4bc58f67a13857129b1dc9e18f"}, "originalPosition": 335}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTUyOTM1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMTo1MzozNlrOHPboCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDozMzo0MFrOHPewoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0MzMwNQ==", "bodyText": "What if they're trying to clear the scheduledEnqueueTime? Isn't null a value option to pass? Same with other instances.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485943305", "createdAt": "2020-09-09T21:53:36Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "diffHunk": "@@ -353,7 +392,10 @@ public OffsetDateTime getScheduledEnqueueTime() {\n      * @see #getScheduledEnqueueTime()\n      */\n     public ServiceBusMessage setScheduledEnqueueTime(OffsetDateTime scheduledEnqueueTime) {\n-        this.scheduledEnqueueTime = scheduledEnqueueTime;\n+        if (scheduledEnqueueTime != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52434625c2f43c4bc58f67a13857129b1dc9e18f"}, "originalPosition": 348}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk1MzA4Mg==", "bodyText": "Internally these key,value pair is stored in Map and  Null value is not allowed.\nThe code on master is also checking for null  and not putting in map is user provided null value.\nUser can get Map using amqpAnnotatedMessage.getMessageAnnotations() and remove a key if they do not want it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485953082", "createdAt": "2020-09-09T22:18:42Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "diffHunk": "@@ -353,7 +392,10 @@ public OffsetDateTime getScheduledEnqueueTime() {\n      * @see #getScheduledEnqueueTime()\n      */\n     public ServiceBusMessage setScheduledEnqueueTime(OffsetDateTime scheduledEnqueueTime) {\n-        this.scheduledEnqueueTime = scheduledEnqueueTime;\n+        if (scheduledEnqueueTime != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0MzMwNQ=="}, "originalCommit": {"oid": "52434625c2f43c4bc58f67a13857129b1dc9e18f"}, "originalPosition": 348}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5NDY1Nw==", "bodyText": "May be worthwhile to document here. it's odd having one method do one thing and then the other do something else.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485994657", "createdAt": "2020-09-10T00:33:40Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "diffHunk": "@@ -353,7 +392,10 @@ public OffsetDateTime getScheduledEnqueueTime() {\n      * @see #getScheduledEnqueueTime()\n      */\n     public ServiceBusMessage setScheduledEnqueueTime(OffsetDateTime scheduledEnqueueTime) {\n-        this.scheduledEnqueueTime = scheduledEnqueueTime;\n+        if (scheduledEnqueueTime != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0MzMwNQ=="}, "originalCommit": {"oid": "52434625c2f43c4bc58f67a13857129b1dc9e18f"}, "originalPosition": 348}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTUzMzU0OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMTo1NTowNFrOHPbqlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMTo1NTowNFrOHPbqlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0Mzk1Nw==", "bodyText": "You already have a local reference to the header, you can use that and go header.getDeliveryCount(). Same with other instances.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485943957", "createdAt": "2020-09-09T21:55:04Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "diffHunk": "@@ -143,34 +140,84 @@ public int getSize(Message amqpMessage) {\n         if (amqpMessage.getProperties() == null) {\n             amqpMessage.setProperties(new Properties());\n         }\n-\n         amqpMessage.setMessageId(brokeredMessage.getMessageId());\n         amqpMessage.setContentType(brokeredMessage.getContentType());\n         amqpMessage.setCorrelationId(brokeredMessage.getCorrelationId());\n-        amqpMessage.setSubject(brokeredMessage.getLabel());\n-        amqpMessage.getProperties().setTo(brokeredMessage.getTo());\n+        amqpMessage.setSubject(brokeredMessage.getSubject());\n         amqpMessage.setReplyTo(brokeredMessage.getReplyTo());\n         amqpMessage.setReplyToGroupId(brokeredMessage.getReplyToSessionId());\n         amqpMessage.setGroupId(brokeredMessage.getSessionId());\n \n+        final AmqpMessageProperties brokeredProperties = brokeredMessage.getAmqpAnnotatedMessage().getProperties();\n+\n+        amqpMessage.setContentEncoding(brokeredProperties.getContentEncoding());\n+        if (brokeredProperties.getGroupSequence() != null) {\n+            amqpMessage.setGroupSequence(brokeredProperties.getGroupSequence());\n+        }\n+        amqpMessage.getProperties().setTo(brokeredMessage.getTo());\n+        amqpMessage.getProperties().setUserId(new Binary(brokeredProperties.getUserId()));\n+\n+        if (brokeredProperties.getAbsoluteExpiryTime() != null) {\n+            amqpMessage.getProperties().setAbsoluteExpiryTime(Date.from(brokeredProperties.getAbsoluteExpiryTime().\n+                toInstant()));\n+        }\n+        if (brokeredProperties.getCreationTime() != null) {\n+            amqpMessage.getProperties().setCreationTime(Date.from(brokeredProperties.getCreationTime().toInstant()));\n+        }\n+\n+        //set footer\n+        amqpMessage.setFooter(new Footer(brokeredMessage.getAmqpAnnotatedMessage().getFooter()));\n+\n+        //set header\n+        AmqpMessageHeader header = brokeredMessage.getAmqpAnnotatedMessage().getHeader();\n+        if (header.getDeliveryCount() != null) {\n+            amqpMessage.setDeliveryCount(brokeredMessage.getAmqpAnnotatedMessage().getHeader().getDeliveryCount());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52434625c2f43c4bc58f67a13857129b1dc9e18f"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTUzNDUxOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMTo1NToyNFrOHPbrNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMTo1NToyNFrOHPbrNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0NDExOQ==", "bodyText": "the period should be on the next line", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485944119", "createdAt": "2020-09-09T21:55:24Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "diffHunk": "@@ -143,34 +140,84 @@ public int getSize(Message amqpMessage) {\n         if (amqpMessage.getProperties() == null) {\n             amqpMessage.setProperties(new Properties());\n         }\n-\n         amqpMessage.setMessageId(brokeredMessage.getMessageId());\n         amqpMessage.setContentType(brokeredMessage.getContentType());\n         amqpMessage.setCorrelationId(brokeredMessage.getCorrelationId());\n-        amqpMessage.setSubject(brokeredMessage.getLabel());\n-        amqpMessage.getProperties().setTo(brokeredMessage.getTo());\n+        amqpMessage.setSubject(brokeredMessage.getSubject());\n         amqpMessage.setReplyTo(brokeredMessage.getReplyTo());\n         amqpMessage.setReplyToGroupId(brokeredMessage.getReplyToSessionId());\n         amqpMessage.setGroupId(brokeredMessage.getSessionId());\n \n+        final AmqpMessageProperties brokeredProperties = brokeredMessage.getAmqpAnnotatedMessage().getProperties();\n+\n+        amqpMessage.setContentEncoding(brokeredProperties.getContentEncoding());\n+        if (brokeredProperties.getGroupSequence() != null) {\n+            amqpMessage.setGroupSequence(brokeredProperties.getGroupSequence());\n+        }\n+        amqpMessage.getProperties().setTo(brokeredMessage.getTo());\n+        amqpMessage.getProperties().setUserId(new Binary(brokeredProperties.getUserId()));\n+\n+        if (brokeredProperties.getAbsoluteExpiryTime() != null) {\n+            amqpMessage.getProperties().setAbsoluteExpiryTime(Date.from(brokeredProperties.getAbsoluteExpiryTime().", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52434625c2f43c4bc58f67a13857129b1dc9e18f"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTUzODk0OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMTo1NzowOVrOHPbuBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMTo1NzowOVrOHPbuBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0NDgzNg==", "bodyText": "this logic seems duplicated from lines 403", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485944836", "createdAt": "2020-09-09T21:57:09Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "diffHunk": "@@ -445,6 +482,16 @@ private static int getPayloadSize(Message msg) {\n         }\n     }\n \n+    private void setValues(Map<Symbol, Object> sourceMap, Map<String, Object> targetMap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52434625c2f43c4bc58f67a13857129b1dc9e18f"}, "originalPosition": 320}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTg2NjA2OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDozMTo0NVrOHPeugg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDozMTo0NVrOHPeugg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5NDExNA==", "bodyText": "Did you update the changelog for azure-core-amqp", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14848#discussion_r485994114", "createdAt": "2020-09-10T00:31:45Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/CHANGELOG.md", "diffHunk": "@@ -1,11 +1,13 @@\n # Release History\n ## 7.0.0-beta.6 (Unreleased)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fe4224b199e7c89e987b3db6ee17a0565843d80"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1309, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}