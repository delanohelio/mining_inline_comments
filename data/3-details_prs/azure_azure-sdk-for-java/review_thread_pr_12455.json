{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NzU0MDIz", "number": 12455, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOTo0MTo1M1rOEIG91g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozMDozMVrOEIcQVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTM4MTk4OnYy", "diffSide": "RIGHT", "path": "eng/versioning/version_client.txt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOTo0MTo1M1rOGn36Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOTo0MTo1M1rOGn36Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2MzY1NQ==", "bodyText": "Missing dependency version. Should be unreleased_com.azure:azure-core;1.6.0-beta.1.\nSame comment for the other unreleased tags.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r444463655", "createdAt": "2020-06-23T19:41:53Z", "author": {"login": "alzimmermsft"}, "path": "eng/versioning/version_client.txt", "diffHunk": "@@ -62,7 +62,9 @@ com.microsoft.azure:azure-spring-boot-test-core;2.3.2;2.3.3-beta.1\n # Format;\n # unreleased_<groupId>:<artifactId>;dependency-version\n # note: The unreleased dependencies will not be manipulated with the automatic PR creation code.\n-\n+unreleased_com.azure:azure-core;dependency", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69b2ef545de909c0a0da84ec04e9fae548b65eb7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTM4NzQ3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/module-info.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOTo0MzoyN1rOGn39gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDoxMjo1MlrOGn44Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2NDUxMw==", "bodyText": "I don't believe this is needed, opening to databind is only needed when using reflective code to serialize and deserialize objects. The spatial models use custom serialization and deserialization which doesn't perform any reflect accesses.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r444464513", "createdAt": "2020-06-23T19:43:27Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/module-info.java", "diffHunk": "@@ -34,6 +34,7 @@\n     opens com.azure.core.util to com.fasterxml.jackson.databind;\n     opens com.azure.core.util.logging to com.fasterxml.jackson.databind;\n     opens com.azure.core.util.serializer to com.fasterxml.jackson.databind;\n+    opens com.azure.core.models.spatial to com.fasterxml.jackson.databind;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69b2ef545de909c0a0da84ec04e9fae548b65eb7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ3OTU4Ng==", "bodyText": "I am having for tests. Forgot to remove. Thanks for catching this!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r444479586", "createdAt": "2020-06-23T20:12:52Z", "author": {"login": "sima-zhu"}, "path": "sdk/core/azure-core/src/main/java/module-info.java", "diffHunk": "@@ -34,6 +34,7 @@\n     opens com.azure.core.util to com.fasterxml.jackson.databind;\n     opens com.azure.core.util.logging to com.fasterxml.jackson.databind;\n     opens com.azure.core.util.serializer to com.fasterxml.jackson.databind;\n+    opens com.azure.core.models.spatial to com.fasterxml.jackson.databind;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2NDUxMw=="}, "originalCommit": {"oid": "69b2ef545de909c0a0da84ec04e9fae548b65eb7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTM5MzE0OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOTo0NToxNFrOGn4BIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDozNjoyMFrOGn5miQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2NTQ0MQ==", "bodyText": "This won't be thread-safe.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r444465441", "createdAt": "2020-06-23T19:45:14Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java", "diffHunk": "@@ -769,4 +779,18 @@ private static AutocompleteRequest createAutoCompleteRequest(String searchText,\n             .setDocument(d)));\n         return batch;\n     }\n+\n+    private static class SearchObjectMapper {\n+        private static ObjectMapper MAPPER = null;\n+        private SearchObjectMapper() {\n+        }\n+\n+        static ObjectMapper getInstance() {\n+            if (MAPPER == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69b2ef545de909c0a0da84ec04e9fae548b65eb7"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ3OTI1Mg==", "bodyText": "This is exactly the same setting sharing by threads. Even thread writes the MAPPER, it will not throw error but update with new one.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r444479252", "createdAt": "2020-06-23T20:12:18Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java", "diffHunk": "@@ -769,4 +779,18 @@ private static AutocompleteRequest createAutoCompleteRequest(String searchText,\n             .setDocument(d)));\n         return batch;\n     }\n+\n+    private static class SearchObjectMapper {\n+        private static ObjectMapper MAPPER = null;\n+        private SearchObjectMapper() {\n+        }\n+\n+        static ObjectMapper getInstance() {\n+            if (MAPPER == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2NTQ0MQ=="}, "originalCommit": {"oid": "69b2ef545de909c0a0da84ec04e9fae548b65eb7"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5MTQwMQ==", "bodyText": "Suppress spotbugs for best practice. Remove singleton and put it property", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r444491401", "createdAt": "2020-06-23T20:36:20Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java", "diffHunk": "@@ -769,4 +779,18 @@ private static AutocompleteRequest createAutoCompleteRequest(String searchText,\n             .setDocument(d)));\n         return batch;\n     }\n+\n+    private static class SearchObjectMapper {\n+        private static ObjectMapper MAPPER = null;\n+        private SearchObjectMapper() {\n+        }\n+\n+        static ObjectMapper getInstance() {\n+            if (MAPPER == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2NTQ0MQ=="}, "originalCommit": {"oid": "69b2ef545de909c0a0da84ec04e9fae548b65eb7"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTM5NTc3OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOTo0NjowN1rOGn4C1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDoxNToyNFrOGn49Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2NTg3Nw==", "bodyText": "Given that this ObjectMapper is static and will be shared across instances I don't see an issue with removing the inner class and making this a property on SearchAsyncClient.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r444465877", "createdAt": "2020-06-23T19:46:07Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java", "diffHunk": "@@ -769,4 +779,18 @@ private static AutocompleteRequest createAutoCompleteRequest(String searchText,\n             .setDocument(d)));\n         return batch;\n     }\n+\n+    private static class SearchObjectMapper {\n+        private static ObjectMapper MAPPER = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69b2ef545de909c0a0da84ec04e9fae548b65eb7"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4MDg1MA==", "bodyText": "Spotbugs complains the annonymous inner class. I am also flexible to suppress spotbugs and have it in property.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r444480850", "createdAt": "2020-06-23T20:15:24Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java", "diffHunk": "@@ -769,4 +779,18 @@ private static AutocompleteRequest createAutoCompleteRequest(String searchText,\n             .setDocument(d)));\n         return batch;\n     }\n+\n+    private static class SearchObjectMapper {\n+        private static ObjectMapper MAPPER = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2NTg3Nw=="}, "originalCommit": {"oid": "69b2ef545de909c0a0da84ec04e9fae548b65eb7"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTQwMDIwOnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOTo0NzozMFrOGn4Fpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDoxNjozOFrOGn4_uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2NjU5OA==", "bodyText": "Any reason we aren't setting the setSerializationInclusion property when we are constructing the mapper instance? This may lead to a race condition if it is being mutated while being used.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r444466598", "createdAt": "2020-06-23T19:47:30Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java", "diffHunk": "@@ -475,20 +476,29 @@ SearchPagedFlux search(String searchText, SearchOptions searchOptions, RequestOp\n      * @see <a href=\"https://docs.microsoft.com/rest/api/searchservice/Lookup-Document\">Lookup document</a>\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<Response<SearchDocument>> getDocumentWithResponse(String key, List<String> selectedFields,\n-        RequestOptions requestOptions) {\n-        return withContext(context -> getDocumentWithResponse(key, selectedFields, requestOptions, context));\n+    public <T> Mono<Response<T>> getDocumentWithResponse(String key, Class<T> modelClass,\n+        List<String> selectedFields, RequestOptions requestOptions) {\n+        return withContext(context -> getDocumentWithResponse(key, modelClass,\n+            selectedFields, requestOptions, context));\n     }\n \n-    Mono<Response<SearchDocument>> getDocumentWithResponse(String key, List<String> selectedFields,\n-        RequestOptions requestOptions, Context context) {\n+    @SuppressWarnings(\"unchecked\")\n+    <T> Mono<Response<T>> getDocumentWithResponse(String key, Class<T> modelClass,\n+        List<String> selectedFields, RequestOptions requestOptions, Context context) {\n         try {\n \n             return restClient.documents()\n                 .getWithRestResponseAsync(key, selectedFields, RequestOptionsConverter.map(requestOptions), context)\n                 .onErrorMap(DocumentResponseConversions::exceptionMapper)\n                 .map(res -> {\n-                    SearchDocument document = MAPPER.convertValue(res.getValue(), SearchDocument.class);\n+                    SearchObjectMapper.getInstance().setSerializationInclusion(JsonInclude.Include.ALWAYS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69b2ef545de909c0a0da84ec04e9fae548b65eb7"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4MTQ2NA==", "bodyText": "Good catch. This can be put in property when construct.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r444481464", "createdAt": "2020-06-23T20:16:38Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java", "diffHunk": "@@ -475,20 +476,29 @@ SearchPagedFlux search(String searchText, SearchOptions searchOptions, RequestOp\n      * @see <a href=\"https://docs.microsoft.com/rest/api/searchservice/Lookup-Document\">Lookup document</a>\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<Response<SearchDocument>> getDocumentWithResponse(String key, List<String> selectedFields,\n-        RequestOptions requestOptions) {\n-        return withContext(context -> getDocumentWithResponse(key, selectedFields, requestOptions, context));\n+    public <T> Mono<Response<T>> getDocumentWithResponse(String key, Class<T> modelClass,\n+        List<String> selectedFields, RequestOptions requestOptions) {\n+        return withContext(context -> getDocumentWithResponse(key, modelClass,\n+            selectedFields, requestOptions, context));\n     }\n \n-    Mono<Response<SearchDocument>> getDocumentWithResponse(String key, List<String> selectedFields,\n-        RequestOptions requestOptions, Context context) {\n+    @SuppressWarnings(\"unchecked\")\n+    <T> Mono<Response<T>> getDocumentWithResponse(String key, Class<T> modelClass,\n+        List<String> selectedFields, RequestOptions requestOptions, Context context) {\n         try {\n \n             return restClient.documents()\n                 .getWithRestResponseAsync(key, selectedFields, RequestOptionsConverter.map(requestOptions), context)\n                 .onErrorMap(DocumentResponseConversions::exceptionMapper)\n                 .map(res -> {\n-                    SearchDocument document = MAPPER.convertValue(res.getValue(), SearchDocument.class);\n+                    SearchObjectMapper.getInstance().setSerializationInclusion(JsonInclude.Include.ALWAYS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2NjU5OA=="}, "originalCommit": {"oid": "69b2ef545de909c0a0da84ec04e9fae548b65eb7"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTQwMzI0OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOTo0ODoyN1rOGn4Hlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOTo0ODoyN1rOGn4Hlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2NzA5NQ==", "bodyText": "Why do we call SearchObjectMapper.getInstance() twice instead of keeping a reference to it the first time its called?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r444467095", "createdAt": "2020-06-23T19:48:27Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java", "diffHunk": "@@ -475,20 +476,29 @@ SearchPagedFlux search(String searchText, SearchOptions searchOptions, RequestOp\n      * @see <a href=\"https://docs.microsoft.com/rest/api/searchservice/Lookup-Document\">Lookup document</a>\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<Response<SearchDocument>> getDocumentWithResponse(String key, List<String> selectedFields,\n-        RequestOptions requestOptions) {\n-        return withContext(context -> getDocumentWithResponse(key, selectedFields, requestOptions, context));\n+    public <T> Mono<Response<T>> getDocumentWithResponse(String key, Class<T> modelClass,\n+        List<String> selectedFields, RequestOptions requestOptions) {\n+        return withContext(context -> getDocumentWithResponse(key, modelClass,\n+            selectedFields, requestOptions, context));\n     }\n \n-    Mono<Response<SearchDocument>> getDocumentWithResponse(String key, List<String> selectedFields,\n-        RequestOptions requestOptions, Context context) {\n+    @SuppressWarnings(\"unchecked\")\n+    <T> Mono<Response<T>> getDocumentWithResponse(String key, Class<T> modelClass,\n+        List<String> selectedFields, RequestOptions requestOptions, Context context) {\n         try {\n \n             return restClient.documents()\n                 .getWithRestResponseAsync(key, selectedFields, RequestOptionsConverter.map(requestOptions), context)\n                 .onErrorMap(DocumentResponseConversions::exceptionMapper)\n                 .map(res -> {\n-                    SearchDocument document = MAPPER.convertValue(res.getValue(), SearchDocument.class);\n+                    SearchObjectMapper.getInstance().setSerializationInclusion(JsonInclude.Include.ALWAYS);\n+                    if (SearchDocument.class.getTypeName().equals(modelClass.getTypeName())) {\n+                        TypeReference<Map<String, Object>> typeReference = new TypeReference<Map<String, Object>>() { };\n+                        SearchDocument doc = new SearchDocument(SearchObjectMapper.getInstance()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69b2ef545de909c0a0da84ec04e9fae548b65eb7"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTQxOTczOnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOTo1NDowNFrOGn4S0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOTo1NDowNFrOGn4S0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2OTk3MQ==", "bodyText": "Could we just check SeachDocument.class == modelClass?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r444469971", "createdAt": "2020-06-23T19:54:04Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java", "diffHunk": "@@ -475,20 +476,29 @@ SearchPagedFlux search(String searchText, SearchOptions searchOptions, RequestOp\n      * @see <a href=\"https://docs.microsoft.com/rest/api/searchservice/Lookup-Document\">Lookup document</a>\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<Response<SearchDocument>> getDocumentWithResponse(String key, List<String> selectedFields,\n-        RequestOptions requestOptions) {\n-        return withContext(context -> getDocumentWithResponse(key, selectedFields, requestOptions, context));\n+    public <T> Mono<Response<T>> getDocumentWithResponse(String key, Class<T> modelClass,\n+        List<String> selectedFields, RequestOptions requestOptions) {\n+        return withContext(context -> getDocumentWithResponse(key, modelClass,\n+            selectedFields, requestOptions, context));\n     }\n \n-    Mono<Response<SearchDocument>> getDocumentWithResponse(String key, List<String> selectedFields,\n-        RequestOptions requestOptions, Context context) {\n+    @SuppressWarnings(\"unchecked\")\n+    <T> Mono<Response<T>> getDocumentWithResponse(String key, Class<T> modelClass,\n+        List<String> selectedFields, RequestOptions requestOptions, Context context) {\n         try {\n \n             return restClient.documents()\n                 .getWithRestResponseAsync(key, selectedFields, RequestOptionsConverter.map(requestOptions), context)\n                 .onErrorMap(DocumentResponseConversions::exceptionMapper)\n                 .map(res -> {\n-                    SearchDocument document = MAPPER.convertValue(res.getValue(), SearchDocument.class);\n+                    SearchObjectMapper.getInstance().setSerializationInclusion(JsonInclude.Include.ALWAYS);\n+                    if (SearchDocument.class.getTypeName().equals(modelClass.getTypeName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69b2ef545de909c0a0da84ec04e9fae548b65eb7"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTQyODc2OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/converters/IndexActionConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOTo1Njo1MFrOGn4Y1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDoxODo0NVrOGn5D3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ3MTUwOQ==", "bodyText": "Possible chance for race conditions here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r444471509", "createdAt": "2020-06-23T19:56:50Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/converters/IndexActionConverter.java", "diffHunk": "@@ -56,19 +61,16 @@\n             indexAction.setActionType(actionType);\n         }\n \n-        ObjectMapper mapper = new JacksonAdapter().serializer();\n-        SerializationUtil.configureMapper(mapper);\n-\n         Map<String, Object> additionalProperties;\n         TypeReference<Map<String, Object>> typeRef = new TypeReference<Map<String, Object>>() {};\n         if (obj.getParamMap() != null) {\n             Map<String, Object> properties = obj.getParamMap();\n-\n-            mapper.setSerializationInclusion(JsonInclude.Include.ALWAYS);\n-            additionalProperties = mapper.convertValue(properties, typeRef);\n+            MAPPER.setSerializationInclusion(JsonInclude.Include.ALWAYS);\n+            additionalProperties = MAPPER.convertValue(properties, typeRef);\n         } else {\n             T properties = obj.getDocument();\n-            additionalProperties = mapper.convertValue(properties, typeRef);\n+            MAPPER.setSerializationInclusion(JsonInclude.Include.NON_DEFAULT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69b2ef545de909c0a0da84ec04e9fae548b65eb7"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4MjUyNA==", "bodyText": "Good catch. Will have local ObjectMapper here in case other thread set something else.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r444482524", "createdAt": "2020-06-23T20:18:45Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/converters/IndexActionConverter.java", "diffHunk": "@@ -56,19 +61,16 @@\n             indexAction.setActionType(actionType);\n         }\n \n-        ObjectMapper mapper = new JacksonAdapter().serializer();\n-        SerializationUtil.configureMapper(mapper);\n-\n         Map<String, Object> additionalProperties;\n         TypeReference<Map<String, Object>> typeRef = new TypeReference<Map<String, Object>>() {};\n         if (obj.getParamMap() != null) {\n             Map<String, Object> properties = obj.getParamMap();\n-\n-            mapper.setSerializationInclusion(JsonInclude.Include.ALWAYS);\n-            additionalProperties = mapper.convertValue(properties, typeRef);\n+            MAPPER.setSerializationInclusion(JsonInclude.Include.ALWAYS);\n+            additionalProperties = MAPPER.convertValue(properties, typeRef);\n         } else {\n             T properties = obj.getDocument();\n-            additionalProperties = mapper.convertValue(properties, typeRef);\n+            MAPPER.setSerializationInclusion(JsonInclude.Include.NON_DEFAULT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ3MTUwOQ=="}, "originalCommit": {"oid": "69b2ef545de909c0a0da84ec04e9fae548b65eb7"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjgyOTk5OnYy", "diffSide": "RIGHT", "path": "eng/code-quality-reports/src/main/resources/spotbugs/spotbugs-exclude.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjoxOTo1OFrOGoZliw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozNzo0MVrOGoaPzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAxNTQzNQ==", "bodyText": "Don't think this is required any longer as SearchAsyncClient no longer has an inner anonymous class, right?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r445015435", "createdAt": "2020-06-24T16:19:58Z", "author": {"login": "alzimmermsft"}, "path": "eng/code-quality-reports/src/main/resources/spotbugs/spotbugs-exclude.xml", "diffHunk": "@@ -1992,4 +1992,10 @@\n       <Class name=\"~com\\.azure\\.search\\.documents\\.indexes\\.models\\.(EdgeNGramTokenFilter|KeywordTokenizer|LuceneStandardTokenizer|NGramTokenFilter)\"/>\n       <Bug pattern=\"URF_UNREAD_FIELD\"/>\n   </Match>\n+\n+  <!-- Use static final ObjectMapper property to save the cost of ObjectMapper initialization. -->\n+  <Match>\n+    <Class name=\"com.azure.search.documents.SearchAsyncClient\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "113a3bf121e1c9a24ea6a978000b7d66f2c5536c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyNjI1Mg==", "bodyText": "Spotbugs complaints about the inner static fields operation as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r445026252", "createdAt": "2020-06-24T16:37:41Z", "author": {"login": "sima-zhu"}, "path": "eng/code-quality-reports/src/main/resources/spotbugs/spotbugs-exclude.xml", "diffHunk": "@@ -1992,4 +1992,10 @@\n       <Class name=\"~com\\.azure\\.search\\.documents\\.indexes\\.models\\.(EdgeNGramTokenFilter|KeywordTokenizer|LuceneStandardTokenizer|NGramTokenFilter)\"/>\n       <Bug pattern=\"URF_UNREAD_FIELD\"/>\n   </Match>\n+\n+  <!-- Use static final ObjectMapper property to save the cost of ObjectMapper initialization. -->\n+  <Match>\n+    <Class name=\"com.azure.search.documents.SearchAsyncClient\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAxNTQzNQ=="}, "originalCommit": {"oid": "113a3bf121e1c9a24ea6a978000b7d66f2c5536c"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Mjg2OTk4OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/converters/IndexActionConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozMDozMVrOGoZ_Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozNzo1OFrOGoaQfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyMTk5NQ==", "bodyText": "Given creating an ObjectMapper can be a heavy operation, thoughts on this class caching two mappers? One using the default configuration and the other setting inclusion to Include.ALWAYS.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r445021995", "createdAt": "2020-06-24T16:30:31Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/converters/IndexActionConverter.java", "diffHunk": "@@ -56,14 +57,13 @@\n             indexAction.setActionType(actionType);\n         }\n \n-        ObjectMapper mapper = new JacksonAdapter().serializer();\n-        SerializationUtil.configureMapper(mapper);\n-\n         Map<String, Object> additionalProperties;\n         TypeReference<Map<String, Object>> typeRef = new TypeReference<Map<String, Object>>() {};\n+\n+        ObjectMapper mapper = new JacksonAdapter().serializer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "113a3bf121e1c9a24ea6a978000b7d66f2c5536c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyNjQyOA==", "bodyText": "Will have two ObjectMapper as suggested.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r445026428", "createdAt": "2020-06-24T16:37:58Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/converters/IndexActionConverter.java", "diffHunk": "@@ -56,14 +57,13 @@\n             indexAction.setActionType(actionType);\n         }\n \n-        ObjectMapper mapper = new JacksonAdapter().serializer();\n-        SerializationUtil.configureMapper(mapper);\n-\n         Map<String, Object> additionalProperties;\n         TypeReference<Map<String, Object>> typeRef = new TypeReference<Map<String, Object>>() {};\n+\n+        ObjectMapper mapper = new JacksonAdapter().serializer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyMTk5NQ=="}, "originalCommit": {"oid": "113a3bf121e1c9a24ea6a978000b7d66f2c5536c"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3725, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}