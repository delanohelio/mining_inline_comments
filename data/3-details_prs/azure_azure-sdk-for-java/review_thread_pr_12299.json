{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MTM5NTAx", "number": 12299, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoyMTozOFrOEJwakg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzoxMTowMlrOEKMmpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjY1ODc0OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoyMTozOVrOGqauBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoyMTozOVrOGqauBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzMTE0MQ==", "bodyText": "format this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447131141", "createdAt": "2020-06-29T17:21:39Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -441,6 +451,12 @@ private static String getEntityPath(ClientLogger logger, MessagingEntityType ent\n         return entityPath;\n     }\n \n+    private static String getDeadLetterEntityPath(ClientLogger logger, MessagingEntityType entityType, String queueName,\n+        String topicName, String subscriptionName) {\n+        String entityPath = getEntityPath(logger, entityType, queueName, topicName, subscriptionName);\n+        return  entityPath + \"/$deadletterqueue\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb5dff8b5f4797b6621119c2c87970c75094840c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjY2MjA0OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoyMjozN1rOGqawJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoyMjozN1rOGqawJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzMTY4NQ==", "bodyText": "I don't think this matches what it does. It doesn't just read messages from a queue or topic.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447131685", "createdAt": "2020-06-29T17:22:37Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -897,4 +913,162 @@ public ServiceBusReceiverClient buildClient() {\n             return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n         }\n     }\n+\n+    /**\n+     * Azure Service Bus queues and topic subscriptions provide a secondary subqueue, called a dead-letter queue (DLQ).\n+     * The dead-letter queue doesn't need to be explicitly created and can't be deleted or otherwise managed\n+     * independent of the main entity.\n+     *\n+     * This is builder for creating {@link ServiceBusReceiverClient} and {@link ServiceBusReceiverAsyncClient} to\n+     * consume dead-letter messages from Service Bus entity.\n+     *\n+     * @see ServiceBusReceiverAsyncClient\n+     * @see ServiceBusReceiverClient\n+     */\n+    @ServiceClientBuilder(serviceClients = {ServiceBusReceiverClient.class, ServiceBusReceiverAsyncClient.class})\n+    public final class ServiceBusDeadLetterReceiverClientBuilder {\n+        private int prefetchCount = DEFAULT_PREFETCH_COUNT;\n+        private String queueName;\n+        private ReceiveMode receiveMode = ReceiveMode.PEEK_LOCK;\n+        private String subscriptionName;\n+        private String topicName;\n+        private Duration maxAutoLockRenewalDuration;\n+\n+        private ServiceBusDeadLetterReceiverClientBuilder() {\n+        }\n+\n+        /**\n+         * Enables auto-lock renewal by renewing each message lock renewal until the {@code maxAutoLockRenewalDuration}\n+         * has elapsed.\n+         *\n+         * @param maxAutoLockRenewalDuration Maximum amount of time to renew the session lock.\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder maxAutoLockRenewalDuration(\n+            Duration maxAutoLockRenewalDuration) {\n+            this.maxAutoLockRenewalDuration = maxAutoLockRenewalDuration;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the prefetch count of the receiver. For both {@link ReceiveMode#PEEK_LOCK PEEK_LOCK} and {@link\n+         * ReceiveMode#RECEIVE_AND_DELETE RECEIVE_AND_DELETE} modes the default value is 1.\n+         *\n+         * Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when\n+         * and before the application asks for one using {@link ServiceBusReceiverAsyncClient#receive()}. Setting a\n+         * non-zero value will prefetch that number of messages. Setting the value to zero turns prefetch off.\n+         *\n+         * @param prefetchCount The prefetch count.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder prefetchCount(int prefetchCount) {\n+            this.prefetchCount = prefetchCount;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the queue to create a receiver for.\n+         *\n+         * @param queueName Name of the queue.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder queueName(String queueName) {\n+            this.queueName = queueName;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the receive mode for the receiver.\n+         *\n+         * @param receiveMode Mode for receiving messages.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder receiveMode(ReceiveMode receiveMode) {\n+            this.receiveMode = receiveMode;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the subscription in the topic to listen to. <b>{@link #topicName(String)} must also be set.\n+         * </b>\n+         *\n+         * @param subscriptionName Name of the subscription.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         * @see #topicName A topic name should be set as well.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder subscriptionName(String subscriptionName) {\n+            this.subscriptionName = subscriptionName;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the topic. <b>{@link #subscriptionName(String)} must also be set.</b>\n+         *\n+         * @param topicName Name of the topic.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         * @see #subscriptionName A subscription name should be set as well.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder topicName(String topicName) {\n+            this.topicName = topicName;\n+            return this;\n+        }\n+\n+        /**\n+         * Creates an <b>asynchronous</b> Service Bus receiver responsible for reading {@link ServiceBusMessage", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb5dff8b5f4797b6621119c2c87970c75094840c"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjY2NTQ1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoyMzo0M1rOGqayfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoyMzo0M1rOGqayfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzMjI4Ng==", "bodyText": "We're cluttering IntegrationTestBase. I was hoping it was a space where every test case needed logic, so it goes here. Not where one or two required this. It can live in the actual class itself.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447132286", "createdAt": "2020-06-29T17:23:43Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java", "diffHunk": "@@ -273,6 +273,31 @@ protected ServiceBusSenderClientBuilder getSenderBuilder(boolean useCredentials,\n \n     }\n \n+    protected ServiceBusClientBuilder.ServiceBusDeadLetterReceiverClientBuilder getDeadLetterReceiverBuilder(boolean useCredentials, MessagingEntityType entityType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb5dff8b5f4797b6621119c2c87970c75094840c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjY2OTAxOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoyNDozOFrOGqa0kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoyNDozOFrOGqa0kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzMjgxOQ==", "bodyText": "The amount of duplicated logic we're amassing is concerning. This is going to be painful from a maintenance standpoint.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447132819", "createdAt": "2020-06-29T17:24:38Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -897,4 +913,162 @@ public ServiceBusReceiverClient buildClient() {\n             return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n         }\n     }\n+\n+    /**\n+     * Azure Service Bus queues and topic subscriptions provide a secondary subqueue, called a dead-letter queue (DLQ).\n+     * The dead-letter queue doesn't need to be explicitly created and can't be deleted or otherwise managed\n+     * independent of the main entity.\n+     *\n+     * This is builder for creating {@link ServiceBusReceiverClient} and {@link ServiceBusReceiverAsyncClient} to\n+     * consume dead-letter messages from Service Bus entity.\n+     *\n+     * @see ServiceBusReceiverAsyncClient\n+     * @see ServiceBusReceiverClient\n+     */\n+    @ServiceClientBuilder(serviceClients = {ServiceBusReceiverClient.class, ServiceBusReceiverAsyncClient.class})\n+    public final class ServiceBusDeadLetterReceiverClientBuilder {\n+        private int prefetchCount = DEFAULT_PREFETCH_COUNT;\n+        private String queueName;\n+        private ReceiveMode receiveMode = ReceiveMode.PEEK_LOCK;\n+        private String subscriptionName;\n+        private String topicName;\n+        private Duration maxAutoLockRenewalDuration;\n+\n+        private ServiceBusDeadLetterReceiverClientBuilder() {\n+        }\n+\n+        /**\n+         * Enables auto-lock renewal by renewing each message lock renewal until the {@code maxAutoLockRenewalDuration}\n+         * has elapsed.\n+         *\n+         * @param maxAutoLockRenewalDuration Maximum amount of time to renew the session lock.\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder maxAutoLockRenewalDuration(\n+            Duration maxAutoLockRenewalDuration) {\n+            this.maxAutoLockRenewalDuration = maxAutoLockRenewalDuration;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the prefetch count of the receiver. For both {@link ReceiveMode#PEEK_LOCK PEEK_LOCK} and {@link\n+         * ReceiveMode#RECEIVE_AND_DELETE RECEIVE_AND_DELETE} modes the default value is 1.\n+         *\n+         * Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when\n+         * and before the application asks for one using {@link ServiceBusReceiverAsyncClient#receive()}. Setting a\n+         * non-zero value will prefetch that number of messages. Setting the value to zero turns prefetch off.\n+         *\n+         * @param prefetchCount The prefetch count.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder prefetchCount(int prefetchCount) {\n+            this.prefetchCount = prefetchCount;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the queue to create a receiver for.\n+         *\n+         * @param queueName Name of the queue.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder queueName(String queueName) {\n+            this.queueName = queueName;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the receive mode for the receiver.\n+         *\n+         * @param receiveMode Mode for receiving messages.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder receiveMode(ReceiveMode receiveMode) {\n+            this.receiveMode = receiveMode;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the subscription in the topic to listen to. <b>{@link #topicName(String)} must also be set.\n+         * </b>\n+         *\n+         * @param subscriptionName Name of the subscription.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         * @see #topicName A topic name should be set as well.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder subscriptionName(String subscriptionName) {\n+            this.subscriptionName = subscriptionName;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the topic. <b>{@link #subscriptionName(String)} must also be set.</b>\n+         *\n+         * @param topicName Name of the topic.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         * @see #subscriptionName A subscription name should be set as well.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder topicName(String topicName) {\n+            this.topicName = topicName;\n+            return this;\n+        }\n+\n+        /**\n+         * Creates an <b>asynchronous</b> Service Bus receiver responsible for reading {@link ServiceBusMessage\n+         * messages} from a specific queue or topic.\n+         *\n+         * @return An new {@link ServiceBusReceiverAsyncClient} that receives messages from a queue or topic.\n+         * @throws IllegalStateException if {@link #queueName(String) queueName} or {@link #topicName(String)\n+         *     topicName} are not set or, both of these fields are set. It is also thrown if the Service Bus {@link\n+         *     #connectionString(String) connectionString} contains an {@code EntityPath} that does not match one set in\n+         *     {@link #queueName(String) queueName} or {@link #topicName(String) topicName}. Lastly, if a {@link\n+         *     #topicName(String) topicName} is set, but {@link #subscriptionName(String) subscriptionName} is not.\n+         * @throws IllegalArgumentException Queue or topic name are not set via {@link #queueName(String)\n+         *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n+         */\n+        public ServiceBusReceiverAsyncClient buildAsyncClient() {\n+            final MessagingEntityType entityType = validateEntityPaths(logger, connectionStringEntityName, topicName,\n+                queueName);\n+            final String entityPath = getDeadLetterEntityPath(logger, entityType, queueName, topicName,\n+                subscriptionName);\n+\n+            if (prefetchCount < 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb5dff8b5f4797b6621119c2c87970c75094840c"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Nzg1OTE3OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMzozNToyM1rOGqmJcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo1NDoxNVrOGrAXug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxODM4NA==", "bodyText": "This documentation is incorrect.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447318384", "createdAt": "2020-06-29T23:35:23Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -897,4 +913,162 @@ public ServiceBusReceiverClient buildClient() {\n             return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n         }\n     }\n+\n+    /**\n+     * Azure Service Bus queues and topic subscriptions provide a secondary subqueue, called a dead-letter queue (DLQ).\n+     * The dead-letter queue doesn't need to be explicitly created and can't be deleted or otherwise managed\n+     * independent of the main entity.\n+     *\n+     * This is builder for creating {@link ServiceBusReceiverClient} and {@link ServiceBusReceiverAsyncClient} to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb5dff8b5f4797b6621119c2c87970c75094840c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0ODAyNg==", "bodyText": "How do you want to change it ? The end of this sentence indicate consume dead-letter messages from Service Bus entity . That's what we do here, we create these client which point to dead letter queue.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447748026", "createdAt": "2020-06-30T14:54:15Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -897,4 +913,162 @@ public ServiceBusReceiverClient buildClient() {\n             return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n         }\n     }\n+\n+    /**\n+     * Azure Service Bus queues and topic subscriptions provide a secondary subqueue, called a dead-letter queue (DLQ).\n+     * The dead-letter queue doesn't need to be explicitly created and can't be deleted or otherwise managed\n+     * independent of the main entity.\n+     *\n+     * This is builder for creating {@link ServiceBusReceiverClient} and {@link ServiceBusReceiverAsyncClient} to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxODM4NA=="}, "originalCommit": {"oid": "fb5dff8b5f4797b6621119c2c87970c75094840c"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTI1OTQxOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzowNjo0OVrOGrGPSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzowNjo0OVrOGrGPSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0NDE2OQ==", "bodyText": "Does this need to be a method? It is only used once.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447844169", "createdAt": "2020-06-30T17:06:49Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -441,6 +450,12 @@ private static String getEntityPath(ClientLogger logger, MessagingEntityType ent\n         return entityPath;\n     }\n \n+    private static String getDeadLetterEntityPath(ClientLogger logger, MessagingEntityType entityType, String queueName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0587e34ee0e1b3633a7626775e6987919f6637c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTI2NjQzOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzowODoxMVrOGrGTLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzowODoxMVrOGrGTLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0NTE2NA==", "bodyText": "Does this link work? The see seems wrong.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447845164", "createdAt": "2020-06-30T17:08:11Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -897,4 +899,161 @@ public ServiceBusReceiverClient buildClient() {\n             return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n         }\n     }\n+\n+    /**\n+     * Azure Service Bus queues and topic subscriptions provide a secondary subqueue, called a dead-letter queue (DLQ).\n+     * The dead-letter queue doesn't need to be explicitly created and can't be deleted or otherwise managed\n+     * independent of the main entity.\n+     * <p>\n+     * This is builder for creating  {@link ServiceBusReceiverClient} and {@link ServiceBusReceiverAsyncClient} to\n+     * consume dead-letter messages from Service Bus entity.\n+     * @see ServiceBusReceiverAsyncClient\n+     * @see ServiceBusReceiverClient\n+     */\n+    @ServiceClientBuilder(serviceClients = {ServiceBusReceiverClient.class, ServiceBusReceiverAsyncClient.class})\n+    public final class ServiceBusDeadLetterReceiverClientBuilder {\n+        private int prefetchCount = DEFAULT_PREFETCH_COUNT;\n+        private String queueName;\n+        private ReceiveMode receiveMode = ReceiveMode.PEEK_LOCK;\n+        private String subscriptionName;\n+        private String topicName;\n+        private Duration maxAutoLockRenewalDuration;\n+\n+        private ServiceBusDeadLetterReceiverClientBuilder() {\n+        }\n+\n+        /**\n+         * Enables auto-lock renewal by renewing each message lock renewal until the {@code maxAutoLockRenewalDuration}\n+         * has elapsed.\n+         * @param maxAutoLockRenewalDuration Maximum amount of time to renew the session lock.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder maxAutoLockRenewalDuration(\n+            Duration maxAutoLockRenewalDuration) {\n+            this.maxAutoLockRenewalDuration = maxAutoLockRenewalDuration;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the prefetch count of the receiver. For both {@link ReceiveMode#PEEK_LOCK PEEK_LOCK} and {@link\n+         * ReceiveMode#RECEIVE_AND_DELETE RECEIVE_AND_DELETE} modes the default value is 1.\n+         * <p>\n+         * Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when\n+         * and before the application asks for one using {@link ServiceBusReceiverAsyncClient#receive()}. Setting a\n+         * non-zero value will prefetch that number of messages. Setting the value to zero turns prefetch off.\n+         * @param prefetchCount The prefetch count.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder prefetchCount(int prefetchCount) {\n+            this.prefetchCount = prefetchCount;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the queue to create a receiver for.\n+         * @param queueName Name of the queue.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder queueName(String queueName) {\n+            this.queueName = queueName;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the receive mode for the receiver.\n+         * @param receiveMode Mode for receiving messages.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder receiveMode(ReceiveMode receiveMode) {\n+            this.receiveMode = receiveMode;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the subscription in the topic to listen to. <b>{@link #topicName(String)} must also be set.\n+         * </b>\n+         * @param subscriptionName Name of the subscription.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         * @see #topicName A topic name should be set as well.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0587e34ee0e1b3633a7626775e6987919f6637c"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTI2Nzg4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzowODozMFrOGrGUAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzowODozMFrOGrGUAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0NTM3OQ==", "bodyText": "Does this work? the see", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447845379", "createdAt": "2020-06-30T17:08:30Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -897,4 +899,161 @@ public ServiceBusReceiverClient buildClient() {\n             return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n         }\n     }\n+\n+    /**\n+     * Azure Service Bus queues and topic subscriptions provide a secondary subqueue, called a dead-letter queue (DLQ).\n+     * The dead-letter queue doesn't need to be explicitly created and can't be deleted or otherwise managed\n+     * independent of the main entity.\n+     * <p>\n+     * This is builder for creating  {@link ServiceBusReceiverClient} and {@link ServiceBusReceiverAsyncClient} to\n+     * consume dead-letter messages from Service Bus entity.\n+     * @see ServiceBusReceiverAsyncClient\n+     * @see ServiceBusReceiverClient\n+     */\n+    @ServiceClientBuilder(serviceClients = {ServiceBusReceiverClient.class, ServiceBusReceiverAsyncClient.class})\n+    public final class ServiceBusDeadLetterReceiverClientBuilder {\n+        private int prefetchCount = DEFAULT_PREFETCH_COUNT;\n+        private String queueName;\n+        private ReceiveMode receiveMode = ReceiveMode.PEEK_LOCK;\n+        private String subscriptionName;\n+        private String topicName;\n+        private Duration maxAutoLockRenewalDuration;\n+\n+        private ServiceBusDeadLetterReceiverClientBuilder() {\n+        }\n+\n+        /**\n+         * Enables auto-lock renewal by renewing each message lock renewal until the {@code maxAutoLockRenewalDuration}\n+         * has elapsed.\n+         * @param maxAutoLockRenewalDuration Maximum amount of time to renew the session lock.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder maxAutoLockRenewalDuration(\n+            Duration maxAutoLockRenewalDuration) {\n+            this.maxAutoLockRenewalDuration = maxAutoLockRenewalDuration;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the prefetch count of the receiver. For both {@link ReceiveMode#PEEK_LOCK PEEK_LOCK} and {@link\n+         * ReceiveMode#RECEIVE_AND_DELETE RECEIVE_AND_DELETE} modes the default value is 1.\n+         * <p>\n+         * Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when\n+         * and before the application asks for one using {@link ServiceBusReceiverAsyncClient#receive()}. Setting a\n+         * non-zero value will prefetch that number of messages. Setting the value to zero turns prefetch off.\n+         * @param prefetchCount The prefetch count.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder prefetchCount(int prefetchCount) {\n+            this.prefetchCount = prefetchCount;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the queue to create a receiver for.\n+         * @param queueName Name of the queue.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder queueName(String queueName) {\n+            this.queueName = queueName;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the receive mode for the receiver.\n+         * @param receiveMode Mode for receiving messages.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder receiveMode(ReceiveMode receiveMode) {\n+            this.receiveMode = receiveMode;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the subscription in the topic to listen to. <b>{@link #topicName(String)} must also be set.\n+         * </b>\n+         * @param subscriptionName Name of the subscription.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         * @see #topicName A topic name should be set as well.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder subscriptionName(String subscriptionName) {\n+            this.subscriptionName = subscriptionName;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the topic. <b>{@link #subscriptionName(String)} must also be set.</b>\n+         * @param topicName Name of the topic.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         * @see #subscriptionName A subscription name should be set as well.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0587e34ee0e1b3633a7626775e6987919f6637c"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTI3NzE2OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzoxMTowMlrOGrGZ9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzoxMTowMlrOGrGZ9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0NjkwMQ==", "bodyText": "This doesn't need to be a function. We use this once.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447846901", "createdAt": "2020-06-30T17:11:02Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -1035,4 +1079,28 @@ private void completeDeferredMessages(ServiceBusReceiverAsyncClient client, Serv\n         receiver.complete(receivedDeferredMessage).block(TIMEOUT);\n     }\n \n+    private ServiceBusClientBuilder.ServiceBusDeadLetterReceiverClientBuilder getDeadLetterReceiverBuilder(boolean useCredentials,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0587e34ee0e1b3633a7626775e6987919f6637c"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3768, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}