{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwODM4NzEw", "number": 15481, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDoyOToxNVrOEmBUXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDoyOToxNVrOEmBUXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzAyOTQwOnYy", "diffSide": "RIGHT", "path": "sdk/resourcemanager/azure-resourcemanager-resources/src/main/java/com/azure/resourcemanager/resources/fluentcore/utils/ResourceManagerUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDoyOToxNVrOHVzwnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDoyOToxNVrOHVzwnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjYzMDE3NQ==", "bodyText": "Maybe name it getDefaultSubscription?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15481#discussion_r492630175", "createdAt": "2020-09-22T10:29:15Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resourcemanager/azure-resourcemanager-resources/src/main/java/com/azure/resourcemanager/resources/fluentcore/utils/ResourceManagerUtils.java", "diffHunk": "@@ -0,0 +1,195 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.resourcemanager.resources.fluentcore.utils;\n+\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.management.AzureEnvironment;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.resourcemanager.resources.models.Subscription;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+/**\n+ * Defines a few utilities.\n+ */\n+public final class ResourceManagerUtils {\n+    private ResourceManagerUtils() {\n+    }\n+\n+    /**\n+     * Converts an object Boolean to a primitive boolean.\n+     *\n+     * @param value the Boolean value\n+     * @return false if the given Boolean value is null or false else true\n+     */\n+    public static boolean toPrimitiveBoolean(Boolean value) {\n+        if (value == null) {\n+            return false;\n+        }\n+        return value.booleanValue();\n+    }\n+\n+    /**\n+     * Converts an object Integer to a primitive int.\n+     *\n+     * @param value the Integer value\n+     * @return 0 if the given Integer value is null else integer value\n+     */\n+    public static int toPrimitiveInt(Integer value) {\n+        if (value == null) {\n+            return 0;\n+        }\n+        return value.intValue();\n+    }\n+\n+    /**\n+     * Converts an object Long to a primitive int.\n+     *\n+     * @param value the Long value\n+     * @return 0 if the given Long value is null else integer value\n+     */\n+    public static int toPrimitiveInt(Long value) {\n+        if (value == null) {\n+            return 0;\n+        }\n+        return Math.toIntExact(value);\n+    }\n+\n+    /**\n+     * Converts an object Long to a primitive long.\n+     *\n+     * @param value the Long value\n+     * @return 0 if the given Long value is null else long value\n+     */\n+    public static long toPrimitiveLong(Long value) {\n+        if (value == null) {\n+            return 0;\n+        }\n+        return value;\n+    }\n+\n+    /**\n+     * Creates an Odata filter string that can be used for filtering list results by tags.\n+     *\n+     * @param tagName the name of the tag. If not provided, all resources will be returned.\n+     * @param tagValue the value of the tag. If not provided, only tag name will be filtered.\n+     * @return the Odata filter to pass into list methods\n+     */\n+    public static String createOdataFilterForTags(String tagName, String tagValue) {\n+        if (tagName == null) {\n+            return null;\n+        } else if (tagValue == null) {\n+            return String.format(\"tagname eq '%s'\", tagName);\n+        } else {\n+            return String.format(\"tagname eq '%s' and tagvalue eq '%s'\", tagName, tagValue);\n+        }\n+    }\n+\n+    /**\n+     * Gets the only subscription as the default one in the tenant if applicable.\n+     *\n+     * @param subscriptions the list of subscriptions\n+     * @throws IllegalStateException when no subscription or more than one subscription found\n+     * @return the only subscription existing in the tenant\n+     */\n+    public static String defaultSubscription(PagedIterable<Subscription> subscriptions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbae82175b48d50bd0e849b3093e97412dcf7f5e"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 908, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}