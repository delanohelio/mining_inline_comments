{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNjMzNjU4", "number": 7932, "title": "http client pluggability in Identity", "bodyText": "Adds Http Client pluggability support to Identity.\nEnables Distributed tracing.\nFixes #4548", "createdAt": "2020-02-04T03:52:24Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932", "merged": true, "mergeCommit": {"oid": "e1559adcb7d17336f0774158b3ac46715047f14e"}, "closed": true, "closedAt": "2020-03-05T16:09:18Z", "author": {"login": "g2vinay"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcA4gIsAH2gAyMzcwNjMzNjU4OjY1YmVlYzA5ZWJlNDg4MjViYTkyZTQ5NjU5ODM5OWFlOTE5NWQ0ZWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJoHBCAH2gAyMzcwNjMzNjU4OmQyMGQwNzIyNmQ5YWRlOGExYThkMjkwMGRhZTQ0NzczOTU0ZmIyNDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "65beec09ebe48825ba92e496598399ae9195d4ea", "author": {"user": {"login": "g2vinay", "name": "Vinay Gera"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/65beec09ebe48825ba92e496598399ae9195d4ea", "committedDate": "2020-02-04T02:55:52Z", "message": "http client pluggability in Identity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adbd4c66d730780b2a2d69018c3688e1be7fb99d", "author": {"user": {"login": "g2vinay", "name": "Vinay Gera"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/adbd4c66d730780b2a2d69018c3688e1be7fb99d", "committedDate": "2020-02-04T04:12:59Z", "message": "Add Retry policy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47246d158a765fc55d4271f7a292f9eae522869f", "author": {"user": {"login": "g2vinay", "name": "Vinay Gera"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/47246d158a765fc55d4271f7a292f9eae522869f", "committedDate": "2020-02-04T04:19:09Z", "message": "update options"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMjY3MzQ1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#pullrequestreview-353267345", "createdAt": "2020-02-04T20:09:45Z", "commit": {"oid": "47246d158a765fc55d4271f7a292f9eae522869f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMDowOTo0NVrOFlh2Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMDowOTo0NVrOFlh2Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg5NjIyNg==", "bodyText": "Have something clearer than 'itself', e.g. \"An updated instance of this builder with the HttpClient set as specified.\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r374896226", "createdAt": "2020-02-04T20:09:45Z", "author": {"login": "JonathanGiles"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/CredentialBuilderBase.java", "diffHunk": "@@ -68,4 +70,18 @@ public T httpPipeline(HttpPipeline httpPipeline) {\n         this.identityClientOptions.setHttpPipeline(httpPipeline);\n         return (T) this;\n     }\n+\n+    /**\n+     * Sets the HTTP client to use for sending and receiving requests to and from the service.\n+     *\n+     * @param client The HTTP client to use for requests.\n+     * @return itself", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47246d158a765fc55d4271f7a292f9eae522869f"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMzU3NzYw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#pullrequestreview-353357760", "createdAt": "2020-02-04T22:47:18Z", "commit": {"oid": "47246d158a765fc55d4271f7a292f9eae522869f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa06ca608a3976c31a45945beec9415dc87534a9", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fa06ca608a3976c31a45945beec9415dc87534a9", "committedDate": "2020-02-22T17:51:17Z", "message": "Merge remote-tracking branch 'upstream/master' into add-http-client-identity"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzODkwMjMw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#pullrequestreview-363890230", "createdAt": "2020-02-25T06:10:02Z", "commit": {"oid": "29d01fe65df630a518d05f4249d546075bb0913d"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjoxMDowMlrOFt5teA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjozODowOFrOFt6LZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3NTc2OA==", "bodyText": "This is not necessary.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r383675768", "createdAt": "2020-02-25T06:10:02Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/credential/TokenRequestContext.java", "diffHunk": "@@ -13,12 +17,16 @@\n  */\n public class TokenRequestContext {\n     private final List<String> scopes;\n+    private HttpClient httpClient;\n+    private HttpLogOptions logOptions;\n \n     /**\n      * Creates a token request instance.\n      */\n     public TokenRequestContext() {\n         this.scopes = new ArrayList<>();\n+        this.httpClient = null;\n+        this.logOptions = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29d01fe65df630a518d05f4249d546075bb0913d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3Nzg1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public KeyVaultCredentialPolicy(TokenCredential credential, HttpClient httpCLient, HttpLogOptions logOptions) {\n          \n          \n            \n                public KeyVaultCredentialPolicy(TokenCredential credential, HttpClient httpClient, HttpLogOptions logOptions) {", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r383677856", "createdAt": "2020-02-25T06:18:07Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/implementation/KeyVaultCredentialPolicy.java", "diffHunk": "@@ -37,8 +41,24 @@\n     public KeyVaultCredentialPolicy(TokenCredential credential) {\n         Objects.requireNonNull(credential);\n         this.cache = new ScopeTokenCache((request) -> credential.getToken(request));\n+        this.httpClient = null;\n+        this.logOptions = null;\n     }\n \n+    /**\n+     * Creates KeyVaultCredentialPolicy.\n+     *\n+     * @param credential the token credential to authenticate the request\n+     */\n+    public KeyVaultCredentialPolicy(TokenCredential credential, HttpClient httpCLient, HttpLogOptions logOptions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29d01fe65df630a518d05f4249d546075bb0913d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY4MDAwMA==", "bodyText": "There are other policies that we are not including like retry policy, timeout policy etc. Any reason why only HttpLogOptions is included here? Can this be deferred, so we can think of all other policies that might be needed and add it when required?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r383680000", "createdAt": "2020-02-25T06:25:45Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/credential/TokenRequestContext.java", "diffHunk": "@@ -50,4 +58,46 @@ public TokenRequestContext addScopes(String... scopes) {\n         this.scopes.addAll(Arrays.asList(scopes));\n         return this;\n     }\n+\n+    /**\n+     * Get the configured Http Client.\n+     * @return the Http Client.\n+     */\n+    public HttpClient getHttpClient() {\n+        return httpClient;\n+    }\n+\n+    /**\n+     * Get the configured log options.\n+     * @return the log options.\n+     */\n+    public HttpLogOptions getLogOptions() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29d01fe65df630a518d05f4249d546075bb0913d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY4Mjg1NQ==", "bodyText": "If options.getHttpPipeline() is not null, the client provided in TokenRequestContext is overwritten. Can you please add comments on why this is done? Also, it would be better to check if options.getHttpPipeline() is not null first instead of setting up the pipeline which might get overwritten immediately after.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r383682855", "createdAt": "2020-02-25T06:35:55Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -113,21 +123,40 @@\n                     .authority(authorityUrl);\n             if (options.getProxyOptions() != null) {\n                 applicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n+            } else {\n+                HttpPipeline pipeline = setupPipeline(request.getHttpClient(), request.getLogOptions());\n+                applicationBuilder.httpClient(new HttpPipelineAdapter(pipeline));\n             }\n+\n             if (options.getHttpPipeline() != null) {\n                 applicationBuilder.httpClient(new HttpPipelineAdapter(options.getHttpPipeline()));\n             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29d01fe65df630a518d05f4249d546075bb0913d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY4MzI3NA==", "bodyText": "This ctr should call the other overload.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r383683274", "createdAt": "2020-02-25T06:37:34Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/implementation/KeyVaultCredentialPolicy.java", "diffHunk": "@@ -37,8 +41,24 @@\n     public KeyVaultCredentialPolicy(TokenCredential credential) {\n         Objects.requireNonNull(credential);\n         this.cache = new ScopeTokenCache((request) -> credential.getToken(request));\n+        this.httpClient = null;\n+        this.logOptions = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29d01fe65df630a518d05f4249d546075bb0913d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY4MzQyOQ==", "bodyText": "Do we need logOptions?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r383683429", "createdAt": "2020-02-25T06:38:08Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/implementation/KeyVaultCredentialPolicy.java", "diffHunk": "@@ -37,8 +41,24 @@\n     public KeyVaultCredentialPolicy(TokenCredential credential) {\n         Objects.requireNonNull(credential);\n         this.cache = new ScopeTokenCache((request) -> credential.getToken(request));\n+        this.httpClient = null;\n+        this.logOptions = null;\n     }\n \n+    /**\n+     * Creates KeyVaultCredentialPolicy.\n+     *\n+     * @param credential the token credential to authenticate the request\n+     */\n+    public KeyVaultCredentialPolicy(TokenCredential credential, HttpClient httpCLient, HttpLogOptions logOptions) {\n+        Objects.requireNonNull(credential);\n+        this.cache = new ScopeTokenCache((request) -> credential.getToken(request));\n+        this.httpClient = httpCLient;\n+        this.logOptions = logOptions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29d01fe65df630a518d05f4249d546075bb0913d"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MTk2NzQz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#pullrequestreview-365196743", "createdAt": "2020-02-26T19:54:17Z", "commit": {"oid": "2c5bca2de2f10f721f62a93712eeb9000cbba03e"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTo1NDoxN1rOFu5_PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTo1NjowNFrOFu6DnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcyODg5Mw==", "bodyText": "I don't see this being used in this class. Since you are allowing users to set the HttpPipline, httpClient can be removed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r384728893", "createdAt": "2020-02-26T19:54:17Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClientOptions.java", "diffHunk": "@@ -21,6 +22,7 @@\n     private Function<Duration, Duration> retryTimeout;\n     private ProxyOptions proxyOptions;\n     private HttpPipeline httpPipeline;\n+    private HttpClient httpClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c5bca2de2f10f721f62a93712eeb9000cbba03e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczMDAxMw==", "bodyText": "Add some unit tests to cover the changes in this PR.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r384730013", "createdAt": "2020-02-26T19:56:04Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/implementation/KeyVaultCredentialPolicy.java", "diffHunk": "@@ -28,17 +29,29 @@\n     private static final String BEARER_TOKEN_PREFIX = \"Bearer \";\n     private static final String AUTHORIZATION = \"Authorization\";\n     private final ScopeTokenCache cache;\n+    private final HttpClient httpClient;\n \n     /**\n      * Creates KeyVaultCredentialPolicy.\n      *\n      * @param credential the token credential to authenticate the request\n      */\n     public KeyVaultCredentialPolicy(TokenCredential credential) {\n+        this(credential, null);\n+    }\n+\n+    /**\n+     * Creates KeyVaultCredentialPolicy.\n+     *\n+     * @param credential the token credential to authenticate the request\n+     */\n+    public KeyVaultCredentialPolicy(TokenCredential credential, HttpClient httpClient) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c5bca2de2f10f721f62a93712eeb9000cbba03e"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67241b7e2d677f4122424a5eafb7c7fff70c9574", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/67241b7e2d677f4122424a5eafb7c7fff70c9574", "committedDate": "2020-02-27T17:40:31Z", "message": "update identity client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa0587e29c5b1470f84b1f79241dbcaf5f8f829a", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/aa0587e29c5b1470f84b1f79241dbcaf5f8f829a", "committedDate": "2020-02-27T17:41:56Z", "message": "checkstyle fix"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c5bca2de2f10f721f62a93712eeb9000cbba03e", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2c5bca2de2f10f721f62a93712eeb9000cbba03e", "committedDate": "2020-02-26T19:33:44Z", "message": "remove unused var"}, "afterCommit": {"oid": "aa0587e29c5b1470f84b1f79241dbcaf5f8f829a", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/aa0587e29c5b1470f84b1f79241dbcaf5f8f829a", "committedDate": "2020-02-27T17:41:56Z", "message": "checkstyle fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1OTc5NTM3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#pullrequestreview-365979537", "createdAt": "2020-02-27T20:35:55Z", "commit": {"oid": "aa0587e29c5b1470f84b1f79241dbcaf5f8f829a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMDozNTo1NlrOFvgU1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMDozNTo1NlrOFvgU1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1NzAxMw==", "bodyText": "should we use the same pipeline that we create for the publicApplicationClient in the constructor so we don't have to create a new pipeline for every call to authenticate through the confidential client?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r385357013", "createdAt": "2020-02-27T20:35:56Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -111,23 +128,45 @@\n             ConfidentialClientApplication.Builder applicationBuilder =\n                 ConfidentialClientApplication.builder(clientId, ClientCredentialFactory.createFromSecret(clientSecret))\n                     .authority(authorityUrl);\n-            if (options.getProxyOptions() != null) {\n-                applicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n-            }\n+\n+            // If user supplies the pipeline, then it should override all other properties\n+            // as they should directly be set on the pipeline.\n             if (options.getHttpPipeline() != null) {\n                 applicationBuilder.httpClient(new HttpPipelineAdapter(options.getHttpPipeline()));\n+            } else {\n+                // If http client is set on the credential, then it should override the proxy options if any configured.\n+                if (options.getHttpClient() != null) {\n+                    HttpPipeline pipeline = setupPipeline(options.getHttpClient());\n+                    applicationBuilder.httpClient(new HttpPipelineAdapter(pipeline));\n+                } else if (options.getProxyOptions() != null) {\n+                    applicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa0587e29c5b1470f84b1f79241dbcaf5f8f829a"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfd1f3f1c335ad78192e8ea9396ed213570f8a86", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cfd1f3f1c335ad78192e8ea9396ed213570f8a86", "committedDate": "2020-02-27T23:08:54Z", "message": "build pipeline during client construciton"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f549300cdcaf3369b69d149ef958f1a9d4b4117", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4f549300cdcaf3369b69d149ef958f1a9d4b4117", "committedDate": "2020-02-27T23:17:05Z", "message": "update javadocs for builder base"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MDg4OTYz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#pullrequestreview-366088963", "createdAt": "2020-02-28T00:17:31Z", "commit": {"oid": "4f549300cdcaf3369b69d149ef958f1a9d4b4117"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMDoxNzozMVrOFvlrPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMDoxNzozMVrOFvlrPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0NDY3MQ==", "bodyText": "I believe this should be applicationBuilder.httpClient(new HttpPipelineAdapter(httpPipeline)); rather than applicationBuilder.httpClient(new HttpPipelineAdapter(options.getHttpPipeline())); because httpPipeline could have been set directly from the options or constructed in the ctor, so I think it's possible that options.getHttpPipeline() is null when httpPipeline is not.\nAlso, the client creates new HttpPipelineAdapter instances for each msal client it creates. Does each msal client need it's own adapter? If not I would suggest caching the HttpPipelineAdapter rather than just the HttpPipeline", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r385444671", "createdAt": "2020-02-28T00:17:31Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -111,23 +130,38 @@\n             ConfidentialClientApplication.Builder applicationBuilder =\n                 ConfidentialClientApplication.builder(clientId, ClientCredentialFactory.createFromSecret(clientSecret))\n                     .authority(authorityUrl);\n-            if (options.getProxyOptions() != null) {\n-                applicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n-            }\n-            if (options.getHttpPipeline() != null) {\n+\n+            // If http pipeline is available, then it should override the proxy options if any configured.\n+            if (httpPipeline != null) {\n                 applicationBuilder.httpClient(new HttpPipelineAdapter(options.getHttpPipeline()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f549300cdcaf3369b69d149ef958f1a9d4b4117"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "708e8b2a1a218ad7b8252fcd3e5696b44c57ac7d", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/708e8b2a1a218ad7b8252fcd3e5696b44c57ac7d", "committedDate": "2020-02-28T00:53:46Z", "message": "cache http pipeline adapter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MTE0Njc3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#pullrequestreview-366114677", "createdAt": "2020-02-28T01:40:59Z", "commit": {"oid": "708e8b2a1a218ad7b8252fcd3e5696b44c57ac7d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8ce8008e95449f5036d577423f31c67ce16a494", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e8ce8008e95449f5036d577423f31c67ce16a494", "committedDate": "2020-02-28T01:50:06Z", "message": "handle null case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2Njg0NDcz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#pullrequestreview-366684473", "createdAt": "2020-02-28T21:04:58Z", "commit": {"oid": "e8ce8008e95449f5036d577423f31c67ce16a494"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMTowNDo1OFrOFwCx8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMTowNToyOFrOFwCywQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkyMTUyMw==", "bodyText": "Instead of passing httpClient here, you can as well use HttpClient.createDefault() since you know httpClient is null.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r385921523", "createdAt": "2020-02-28T21:04:58Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -82,17 +93,31 @@\n         } else {\n             String authorityUrl = options.getAuthorityHost().replaceAll(\"/+$\", \"\") + \"/organizations/\" + tenantId;\n             PublicClientApplication.Builder publicClientApplicationBuilder = PublicClientApplication.builder(clientId);\n-            if (options.getHttpPipeline() != null) {\n-                publicClientApplicationBuilder = publicClientApplicationBuilder\n-                        .httpClient(new HttpPipelineAdapter(options.getHttpPipeline()));\n-            }\n             try {\n                 publicClientApplicationBuilder = publicClientApplicationBuilder.authority(authorityUrl);\n             } catch (MalformedURLException e) {\n                 throw logger.logExceptionAsWarning(new IllegalStateException(e));\n             }\n-            if (options.getProxyOptions() != null) {\n-                publicClientApplicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n+\n+            // If user supplies the pipeline, then it should override all other properties\n+            // as they should directly be set on the pipeline.\n+            HttpPipeline httpPipeline = options.getHttpPipeline();\n+            if (httpPipeline != null) {\n+                httpPipelineAdapter = new HttpPipelineAdapter(httpPipeline);\n+                publicClientApplicationBuilder.httpClient(httpPipelineAdapter);\n+            } else {\n+                // If http client is set on the credential, then it should override the proxy options if any configured.\n+                HttpClient httpClient = options.getHttpClient();\n+                if (httpClient != null) {\n+                    httpPipelineAdapter = new HttpPipelineAdapter(setupPipeline(httpClient));\n+                    publicClientApplicationBuilder.httpClient(httpPipelineAdapter);\n+                } else if (options.getProxyOptions() != null) {\n+                    publicClientApplicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n+                } else {\n+                    //Http Client is null, proxy options are not set, use the default client and build the pipeline.\n+                    httpPipelineAdapter = new HttpPipelineAdapter(setupPipeline(httpClient));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8ce8008e95449f5036d577423f31c67ce16a494"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkyMTcyOQ==", "bodyText": "This line can be removed if you pass the default client as suggested above.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r385921729", "createdAt": "2020-02-28T21:05:28Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -111,23 +136,38 @@\n             ConfidentialClientApplication.Builder applicationBuilder =\n                 ConfidentialClientApplication.builder(clientId, ClientCredentialFactory.createFromSecret(clientSecret))\n                     .authority(authorityUrl);\n-            if (options.getProxyOptions() != null) {\n+\n+            // If http pipeline is available, then it should override the proxy options if any configured.\n+            if (httpPipelineAdapter != null) {\n+                applicationBuilder.httpClient(httpPipelineAdapter);\n+            } else if (options.getProxyOptions() != null) {\n                 applicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n             }\n-            if (options.getHttpPipeline() != null) {\n-                applicationBuilder.httpClient(new HttpPipelineAdapter(options.getHttpPipeline()));\n-            }\n+\n             ConfidentialClientApplication application = applicationBuilder.build();\n             return Mono.fromFuture(application.acquireToken(\n                 ClientCredentialParameters.builder(new HashSet<>(request.getScopes()))\n-                    .build()))\n-                .map(ar -> new AccessToken(ar.accessToken(), OffsetDateTime.ofInstant(ar.expiresOnDate().toInstant(),\n-                    ZoneOffset.UTC)));\n+                   .build()))\n+                   .map(ar -> new AccessToken(ar.accessToken(), OffsetDateTime.ofInstant(ar.expiresOnDate().toInstant(),\n+                               ZoneOffset.UTC)));\n+\n         } catch (MalformedURLException e) {\n             return Mono.error(e);\n         }\n     }\n \n+    private HttpPipeline setupPipeline(HttpClient httpClient) {\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+        HttpLogOptions httpLogOptions = new HttpLogOptions();\n+        HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+        policies.add(new RetryPolicy());\n+        HttpPolicyProviders.addAfterRetryPolicies(policies);\n+        policies.add(new HttpLoggingPolicy(httpLogOptions));\n+        HttpClient client = httpClient != null ? httpClient : HttpClient.createDefault();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8ce8008e95449f5036d577423f31c67ce16a494"}, "originalPosition": 110}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d20d07226d9ade8a1a8d2900dae44773954fb245", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d20d07226d9ade8a1a8d2900dae44773954fb245", "committedDate": "2020-03-02T06:55:16Z", "message": "fix spotbug"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2478, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}