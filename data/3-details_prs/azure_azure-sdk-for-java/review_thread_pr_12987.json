{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MTQ3MjM4", "number": 12987, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjo1Mjo0OVrOENWEXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMDowMjozMVrOEODD3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDI4NTEwOnYy", "diffSide": "LEFT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjo1Mjo0OVrOGv-eJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjo1Njo0NFrOGv-l0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1OTc4Mg==", "bodyText": "is that because FieldValueType.STRING is static value, so you intend to comparing values by mem address value?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r452959782", "createdAt": "2020-07-10T16:52:49Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -264,7 +264,7 @@ for (int i = 0; i < receiptPageResults.size(); i++) {\n     System.out.printf(\"----------- Recognized Receipt page %d -----------%n\", i);\n     FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n     if (merchantNameField != null) {\n-        if (FieldValueType.STRING.equals(merchantNameField.getValueType())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41bc8b212239f187f79ffe971fcec742a0926005"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2MTc0Ng==", "bodyText": "Both work actually. But equals will just go and do == anyway so updates. Also, == will be null safe.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r452961746", "createdAt": "2020-07-10T16:56:44Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -264,7 +264,7 @@ for (int i = 0; i < receiptPageResults.size(); i++) {\n     System.out.printf(\"----------- Recognized Receipt page %d -----------%n\", i);\n     FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n     if (merchantNameField != null) {\n-        if (FieldValueType.STRING.equals(merchantNameField.getValueType())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1OTc4Mg=="}, "originalCommit": {"oid": "41bc8b212239f187f79ffe971fcec742a0926005"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDUyMDczOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxODoxMjoxMlrOGwAy4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxODoxMjo1OFrOGwA0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5Nzg1OA==", "bodyText": "using == instead of .equals()?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r452997858", "createdAt": "2020-07-10T18:12:12Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -430,64 +426,65 @@ public void beginRecognizeReceipts() throws IOException {\n         File receipt = new File(\"{file_source_url}\");\n         Flux<ByteBuffer> buffer = toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(receipt.toPath())));\n         formRecognizerAsyncClient.beginRecognizeReceipts(buffer, receipt.length())\n-            .subscribe(recognizePollingOperation ->\n+            .flatMap(recognizePollingOperation ->\n                 // if training polling operation completed, retrieve the final result.\n-                recognizePollingOperation.getFinalResult().subscribe(recognizedReceipts -> {\n-                    for (int i = 0; i < recognizedReceipts.size(); i++) {\n-                        RecognizedForm recognizedForm = recognizedReceipts.get(i);\n-                        Map<String, FormField<?>> recognizedFields = recognizedForm.getFields();\n-                        System.out.printf(\"----------- Recognized Receipt page %d -----------%n\", i);\n-                        FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n-                        if (merchantNameField != null) {\n-                            if (FieldValueType.STRING.equals(merchantNameField.getValueType())) {\n-                                String merchantName = FieldValueType.STRING.cast(merchantNameField);\n-                                System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n-                                    merchantName, merchantNameField.getConfidence());\n+                recognizePollingOperation.getFinalResult())\n+                    .subscribe(recognizedReceipts -> {\n+                        for (int i = 0; i < recognizedReceipts.size(); i++) {\n+                            RecognizedForm recognizedForm = recognizedReceipts.get(i);\n+                            Map<String, FormField<?>> recognizedFields = recognizedForm.getFields();\n+                            System.out.printf(\"----------- Recognized Receipt page %d -----------%n\", i);\n+                            FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n+                            if (merchantNameField != null) {\n+                                if (FieldValueType.STRING.equals(merchantNameField.getValueType())) {\n+                                    String merchantName = FieldValueType.STRING.cast(merchantNameField);\n+                                    System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n+                                        merchantName, merchantNameField.getConfidence());\n+                                }\n                             }\n-                        }\n \n-                        FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n-                        if (merchantPhoneNumberField != null) {\n-                            if (FieldValueType.PHONE_NUMBER.equals(merchantNameField.getValueType())) {\n-                                String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n-                                System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n-                                    merchantAddress, merchantPhoneNumberField.getConfidence());\n+                            FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n+                            if (merchantPhoneNumberField != null) {\n+                                if (FieldValueType.PHONE_NUMBER.equals(merchantNameField.getValueType())) {\n+                                    String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n+                                    System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n+                                        merchantAddress, merchantPhoneNumberField.getConfidence());\n+                                }\n                             }\n-                        }\n \n-                        FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n-                        if (transactionDateField != null) {\n-                            if (FieldValueType.DATE.equals(transactionDateField.getValueType())) {\n-                                LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n-                                System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n-                                    transactionDate, transactionDateField.getConfidence());\n+                            FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n+                            if (transactionDateField != null) {\n+                                if (FieldValueType.DATE.equals(transactionDateField.getValueType())) {\n+                                    LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n+                                    System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n+                                        transactionDate, transactionDateField.getConfidence());\n+                                }\n                             }\n-                        }\n \n-                        FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n-                        if (receiptItemsField != null) {\n-                            System.out.printf(\"Receipt Items: %n\");\n-                            if (FieldValueType.LIST.equals(receiptItemsField.getValueType())) {\n-                                List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n-                                receiptItems.forEach(receiptItem -> {\n-                                    if (FieldValueType.MAP.equals(receiptItem.getValueType())) {\n-\n-                                        Map<String, FormField<?>> formFieldMap = FieldValueType.MAP.cast(receiptItem);\n-                                        formFieldMap.forEach((key, formField) -> {\n-                                            if (\"Quantity\".equals(key)) {\n-                                                if (FieldValueType.DOUBLE.equals(formField.getValueType())) {\n-                                                    Float quantity = FieldValueType.DOUBLE.cast(formField);\n-                                                    System.out.printf(\"Quantity: %f, confidence: %.2f%n\",\n-                                                        quantity, formField.getConfidence());\n+                            FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n+                            if (receiptItemsField != null) {\n+                                System.out.printf(\"Receipt Items: %n\");\n+                                if (FieldValueType.LIST.equals(receiptItemsField.getValueType())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41bc8b212239f187f79ffe971fcec742a0926005"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5ODE5OQ==", "bodyText": "same to rest of files. Might be need to revisit CodeSnippets files again", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r452998199", "createdAt": "2020-07-10T18:12:58Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -430,64 +426,65 @@ public void beginRecognizeReceipts() throws IOException {\n         File receipt = new File(\"{file_source_url}\");\n         Flux<ByteBuffer> buffer = toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(receipt.toPath())));\n         formRecognizerAsyncClient.beginRecognizeReceipts(buffer, receipt.length())\n-            .subscribe(recognizePollingOperation ->\n+            .flatMap(recognizePollingOperation ->\n                 // if training polling operation completed, retrieve the final result.\n-                recognizePollingOperation.getFinalResult().subscribe(recognizedReceipts -> {\n-                    for (int i = 0; i < recognizedReceipts.size(); i++) {\n-                        RecognizedForm recognizedForm = recognizedReceipts.get(i);\n-                        Map<String, FormField<?>> recognizedFields = recognizedForm.getFields();\n-                        System.out.printf(\"----------- Recognized Receipt page %d -----------%n\", i);\n-                        FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n-                        if (merchantNameField != null) {\n-                            if (FieldValueType.STRING.equals(merchantNameField.getValueType())) {\n-                                String merchantName = FieldValueType.STRING.cast(merchantNameField);\n-                                System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n-                                    merchantName, merchantNameField.getConfidence());\n+                recognizePollingOperation.getFinalResult())\n+                    .subscribe(recognizedReceipts -> {\n+                        for (int i = 0; i < recognizedReceipts.size(); i++) {\n+                            RecognizedForm recognizedForm = recognizedReceipts.get(i);\n+                            Map<String, FormField<?>> recognizedFields = recognizedForm.getFields();\n+                            System.out.printf(\"----------- Recognized Receipt page %d -----------%n\", i);\n+                            FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n+                            if (merchantNameField != null) {\n+                                if (FieldValueType.STRING.equals(merchantNameField.getValueType())) {\n+                                    String merchantName = FieldValueType.STRING.cast(merchantNameField);\n+                                    System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n+                                        merchantName, merchantNameField.getConfidence());\n+                                }\n                             }\n-                        }\n \n-                        FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n-                        if (merchantPhoneNumberField != null) {\n-                            if (FieldValueType.PHONE_NUMBER.equals(merchantNameField.getValueType())) {\n-                                String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n-                                System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n-                                    merchantAddress, merchantPhoneNumberField.getConfidence());\n+                            FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n+                            if (merchantPhoneNumberField != null) {\n+                                if (FieldValueType.PHONE_NUMBER.equals(merchantNameField.getValueType())) {\n+                                    String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n+                                    System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n+                                        merchantAddress, merchantPhoneNumberField.getConfidence());\n+                                }\n                             }\n-                        }\n \n-                        FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n-                        if (transactionDateField != null) {\n-                            if (FieldValueType.DATE.equals(transactionDateField.getValueType())) {\n-                                LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n-                                System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n-                                    transactionDate, transactionDateField.getConfidence());\n+                            FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n+                            if (transactionDateField != null) {\n+                                if (FieldValueType.DATE.equals(transactionDateField.getValueType())) {\n+                                    LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n+                                    System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n+                                        transactionDate, transactionDateField.getConfidence());\n+                                }\n                             }\n-                        }\n \n-                        FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n-                        if (receiptItemsField != null) {\n-                            System.out.printf(\"Receipt Items: %n\");\n-                            if (FieldValueType.LIST.equals(receiptItemsField.getValueType())) {\n-                                List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n-                                receiptItems.forEach(receiptItem -> {\n-                                    if (FieldValueType.MAP.equals(receiptItem.getValueType())) {\n-\n-                                        Map<String, FormField<?>> formFieldMap = FieldValueType.MAP.cast(receiptItem);\n-                                        formFieldMap.forEach((key, formField) -> {\n-                                            if (\"Quantity\".equals(key)) {\n-                                                if (FieldValueType.DOUBLE.equals(formField.getValueType())) {\n-                                                    Float quantity = FieldValueType.DOUBLE.cast(formField);\n-                                                    System.out.printf(\"Quantity: %f, confidence: %.2f%n\",\n-                                                        quantity, formField.getConfidence());\n+                            FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n+                            if (receiptItemsField != null) {\n+                                System.out.printf(\"Receipt Items: %n\");\n+                                if (FieldValueType.LIST.equals(receiptItemsField.getValueType())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5Nzg1OA=="}, "originalCommit": {"oid": "41bc8b212239f187f79ffe971fcec742a0926005"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDU2NTQ3OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxODoyODowNFrOGwBPkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxODoyODowNFrOGwBPkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNTIwMQ==", "bodyText": "perfect place to use stream() method here. Great.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r453005201", "createdAt": "2020-07-10T18:28:04Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java", "diffHunk": "@@ -443,62 +443,57 @@ public void beginRecognizeReceiptsWithOptions() throws IOException {\n         boolean includeFieldElements = true;\n         byte[] fileContent = Files.readAllBytes(receipt.toPath());\n         InputStream targetStream = new ByteArrayInputStream(fileContent);\n-        formRecognizerClient.beginRecognizeReceipts(targetStream, receipt.length(),\n+        for (RecognizedForm recognizedForm : formRecognizerClient.beginRecognizeReceipts(targetStream, receipt.length(),\n             new RecognizeOptions()\n                 .setContentType(FormContentType.IMAGE_JPEG)\n                 .setIncludeFieldElements(includeFieldElements)\n                 .setPollInterval(Duration.ofSeconds(5)))\n-            .getFinalResult().forEach(recognizedReceipt -> {\n-                Map<String, FormField<?>> recognizedFields = recognizedReceipt.getFields();\n-                FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n-                if (merchantNameField != null) {\n-                    if (FieldValueType.STRING.equals(merchantNameField.getValueType())) {\n-                        String merchantName = FieldValueType.STRING.cast(merchantNameField);\n-                        System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n-                            merchantName, merchantNameField.getConfidence());\n-                    }\n+            .getFinalResult()) {\n+            Map<String, FormField<?>> recognizedFields = recognizedForm.getFields();\n+            FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n+            if (merchantNameField != null) {\n+                if (FieldValueType.STRING == merchantNameField.getValueType()) {\n+                    String merchantName = FieldValueType.STRING.cast(merchantNameField);\n+                    System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n+                        merchantName, merchantNameField.getConfidence());\n                 }\n-\n-                FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n-                if (merchantPhoneNumberField != null) {\n-                    if (FieldValueType.PHONE_NUMBER.equals(merchantNameField.getValueType())) {\n-                        String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n-                        System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n-                            merchantAddress, merchantPhoneNumberField.getConfidence());\n-                    }\n+            }\n+            FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n+            if (merchantPhoneNumberField != null) {\n+                if (FieldValueType.PHONE_NUMBER == merchantNameField.getValueType()) {\n+                    String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n+                    System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n+                        merchantAddress, merchantPhoneNumberField.getConfidence());\n                 }\n-\n-                FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n-                if (transactionDateField != null) {\n-                    if (FieldValueType.DATE.equals(transactionDateField.getValueType())) {\n-                        LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n-                        System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n-                            transactionDate, transactionDateField.getConfidence());\n-                    }\n+            }\n+            FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n+            if (transactionDateField != null) {\n+                if (FieldValueType.DATE == transactionDateField.getValueType()) {\n+                    LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n+                    System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n+                        transactionDate, transactionDateField.getConfidence());\n                 }\n-\n-                FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n-                if (receiptItemsField != null) {\n-                    System.out.printf(\"Receipt Items: %n\");\n-                    if (FieldValueType.LIST.equals(receiptItemsField.getValueType())) {\n-                        List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n-                        receiptItems.forEach(receiptItem -> {\n-                            if (FieldValueType.MAP.equals(receiptItem.getValueType())) {\n-                                Map<String, FormField<?>> formFieldMap = FieldValueType.MAP.cast(receiptItem);\n-                                formFieldMap.forEach((key, formField) -> {\n-                                    if (\"Quantity\".equals(key)) {\n-                                        if (FieldValueType.DOUBLE.equals(formField.getValueType())) {\n-                                            Float quantity = FieldValueType.DOUBLE.cast(formField);\n-                                            System.out.printf(\"Quantity: %d, confidence: %.2f%n\",\n-                                                quantity, formField.getConfidence());\n-                                        }\n-                                    }\n-                                });\n+            }\n+            FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n+            if (receiptItemsField != null) {\n+                System.out.printf(\"Receipt Items: %n\");\n+                if (FieldValueType.LIST == receiptItemsField.getValueType()) {\n+                    List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n+                    receiptItems.stream()\n+                        .filter(receiptItem -> FieldValueType.MAP == receiptItem.getValueType())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41bc8b212239f187f79ffe971fcec742a0926005"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDU2ODAwOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxODoyOTowMlrOGwBRPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjo0NDoxN1rOGww3xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNTYzMQ==", "bodyText": "is possible to use stream again and filter here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r453005631", "createdAt": "2020-07-10T18:29:02Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java", "diffHunk": "@@ -443,62 +443,57 @@ public void beginRecognizeReceiptsWithOptions() throws IOException {\n         boolean includeFieldElements = true;\n         byte[] fileContent = Files.readAllBytes(receipt.toPath());\n         InputStream targetStream = new ByteArrayInputStream(fileContent);\n-        formRecognizerClient.beginRecognizeReceipts(targetStream, receipt.length(),\n+        for (RecognizedForm recognizedForm : formRecognizerClient.beginRecognizeReceipts(targetStream, receipt.length(),\n             new RecognizeOptions()\n                 .setContentType(FormContentType.IMAGE_JPEG)\n                 .setIncludeFieldElements(includeFieldElements)\n                 .setPollInterval(Duration.ofSeconds(5)))\n-            .getFinalResult().forEach(recognizedReceipt -> {\n-                Map<String, FormField<?>> recognizedFields = recognizedReceipt.getFields();\n-                FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n-                if (merchantNameField != null) {\n-                    if (FieldValueType.STRING.equals(merchantNameField.getValueType())) {\n-                        String merchantName = FieldValueType.STRING.cast(merchantNameField);\n-                        System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n-                            merchantName, merchantNameField.getConfidence());\n-                    }\n+            .getFinalResult()) {\n+            Map<String, FormField<?>> recognizedFields = recognizedForm.getFields();\n+            FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n+            if (merchantNameField != null) {\n+                if (FieldValueType.STRING == merchantNameField.getValueType()) {\n+                    String merchantName = FieldValueType.STRING.cast(merchantNameField);\n+                    System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n+                        merchantName, merchantNameField.getConfidence());\n                 }\n-\n-                FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n-                if (merchantPhoneNumberField != null) {\n-                    if (FieldValueType.PHONE_NUMBER.equals(merchantNameField.getValueType())) {\n-                        String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n-                        System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n-                            merchantAddress, merchantPhoneNumberField.getConfidence());\n-                    }\n+            }\n+            FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n+            if (merchantPhoneNumberField != null) {\n+                if (FieldValueType.PHONE_NUMBER == merchantNameField.getValueType()) {\n+                    String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n+                    System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n+                        merchantAddress, merchantPhoneNumberField.getConfidence());\n                 }\n-\n-                FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n-                if (transactionDateField != null) {\n-                    if (FieldValueType.DATE.equals(transactionDateField.getValueType())) {\n-                        LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n-                        System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n-                            transactionDate, transactionDateField.getConfidence());\n-                    }\n+            }\n+            FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n+            if (transactionDateField != null) {\n+                if (FieldValueType.DATE == transactionDateField.getValueType()) {\n+                    LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n+                    System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n+                        transactionDate, transactionDateField.getConfidence());\n                 }\n-\n-                FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n-                if (receiptItemsField != null) {\n-                    System.out.printf(\"Receipt Items: %n\");\n-                    if (FieldValueType.LIST.equals(receiptItemsField.getValueType())) {\n-                        List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n-                        receiptItems.forEach(receiptItem -> {\n-                            if (FieldValueType.MAP.equals(receiptItem.getValueType())) {\n-                                Map<String, FormField<?>> formFieldMap = FieldValueType.MAP.cast(receiptItem);\n-                                formFieldMap.forEach((key, formField) -> {\n-                                    if (\"Quantity\".equals(key)) {\n-                                        if (FieldValueType.DOUBLE.equals(formField.getValueType())) {\n-                                            Float quantity = FieldValueType.DOUBLE.cast(formField);\n-                                            System.out.printf(\"Quantity: %d, confidence: %.2f%n\",\n-                                                quantity, formField.getConfidence());\n-                                        }\n-                                    }\n-                                });\n+            }\n+            FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n+            if (receiptItemsField != null) {\n+                System.out.printf(\"Receipt Items: %n\");\n+                if (FieldValueType.LIST == receiptItemsField.getValueType()) {\n+                    List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n+                    receiptItems.stream()\n+                        .filter(receiptItem -> FieldValueType.MAP == receiptItem.getValueType())\n+                        .<Map<String, FormField<?>>>map(FieldValueType.MAP::cast)\n+                        .forEach(formFieldMap -> formFieldMap.forEach((key, formField) -> {\n+                            if (\"Quantity\".equals(key)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41bc8b212239f187f79ffe971fcec742a0926005"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAzNTY1OA==", "bodyText": "I guess I can. Just wanted to keep a method showing the non-stream way but thought that would be inconsistent. So kept all the sample files using forEach.\nI don't have a strong preference, what do you think, update all of them?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r453035658", "createdAt": "2020-07-10T19:21:30Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java", "diffHunk": "@@ -443,62 +443,57 @@ public void beginRecognizeReceiptsWithOptions() throws IOException {\n         boolean includeFieldElements = true;\n         byte[] fileContent = Files.readAllBytes(receipt.toPath());\n         InputStream targetStream = new ByteArrayInputStream(fileContent);\n-        formRecognizerClient.beginRecognizeReceipts(targetStream, receipt.length(),\n+        for (RecognizedForm recognizedForm : formRecognizerClient.beginRecognizeReceipts(targetStream, receipt.length(),\n             new RecognizeOptions()\n                 .setContentType(FormContentType.IMAGE_JPEG)\n                 .setIncludeFieldElements(includeFieldElements)\n                 .setPollInterval(Duration.ofSeconds(5)))\n-            .getFinalResult().forEach(recognizedReceipt -> {\n-                Map<String, FormField<?>> recognizedFields = recognizedReceipt.getFields();\n-                FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n-                if (merchantNameField != null) {\n-                    if (FieldValueType.STRING.equals(merchantNameField.getValueType())) {\n-                        String merchantName = FieldValueType.STRING.cast(merchantNameField);\n-                        System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n-                            merchantName, merchantNameField.getConfidence());\n-                    }\n+            .getFinalResult()) {\n+            Map<String, FormField<?>> recognizedFields = recognizedForm.getFields();\n+            FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n+            if (merchantNameField != null) {\n+                if (FieldValueType.STRING == merchantNameField.getValueType()) {\n+                    String merchantName = FieldValueType.STRING.cast(merchantNameField);\n+                    System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n+                        merchantName, merchantNameField.getConfidence());\n                 }\n-\n-                FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n-                if (merchantPhoneNumberField != null) {\n-                    if (FieldValueType.PHONE_NUMBER.equals(merchantNameField.getValueType())) {\n-                        String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n-                        System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n-                            merchantAddress, merchantPhoneNumberField.getConfidence());\n-                    }\n+            }\n+            FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n+            if (merchantPhoneNumberField != null) {\n+                if (FieldValueType.PHONE_NUMBER == merchantNameField.getValueType()) {\n+                    String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n+                    System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n+                        merchantAddress, merchantPhoneNumberField.getConfidence());\n                 }\n-\n-                FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n-                if (transactionDateField != null) {\n-                    if (FieldValueType.DATE.equals(transactionDateField.getValueType())) {\n-                        LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n-                        System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n-                            transactionDate, transactionDateField.getConfidence());\n-                    }\n+            }\n+            FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n+            if (transactionDateField != null) {\n+                if (FieldValueType.DATE == transactionDateField.getValueType()) {\n+                    LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n+                    System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n+                        transactionDate, transactionDateField.getConfidence());\n                 }\n-\n-                FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n-                if (receiptItemsField != null) {\n-                    System.out.printf(\"Receipt Items: %n\");\n-                    if (FieldValueType.LIST.equals(receiptItemsField.getValueType())) {\n-                        List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n-                        receiptItems.forEach(receiptItem -> {\n-                            if (FieldValueType.MAP.equals(receiptItem.getValueType())) {\n-                                Map<String, FormField<?>> formFieldMap = FieldValueType.MAP.cast(receiptItem);\n-                                formFieldMap.forEach((key, formField) -> {\n-                                    if (\"Quantity\".equals(key)) {\n-                                        if (FieldValueType.DOUBLE.equals(formField.getValueType())) {\n-                                            Float quantity = FieldValueType.DOUBLE.cast(formField);\n-                                            System.out.printf(\"Quantity: %d, confidence: %.2f%n\",\n-                                                quantity, formField.getConfidence());\n-                                        }\n-                                    }\n-                                });\n+            }\n+            FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n+            if (receiptItemsField != null) {\n+                System.out.printf(\"Receipt Items: %n\");\n+                if (FieldValueType.LIST == receiptItemsField.getValueType()) {\n+                    List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n+                    receiptItems.stream()\n+                        .filter(receiptItem -> FieldValueType.MAP == receiptItem.getValueType())\n+                        .<Map<String, FormField<?>>>map(FieldValueType.MAP::cast)\n+                        .forEach(formFieldMap -> formFieldMap.forEach((key, formField) -> {\n+                            if (\"Quantity\".equals(key)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNTYzMQ=="}, "originalCommit": {"oid": "41bc8b212239f187f79ffe971fcec742a0926005"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc4NTU0MQ==", "bodyText": "Personally I like to using stream() if possible.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r453785541", "createdAt": "2020-07-13T16:44:17Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java", "diffHunk": "@@ -443,62 +443,57 @@ public void beginRecognizeReceiptsWithOptions() throws IOException {\n         boolean includeFieldElements = true;\n         byte[] fileContent = Files.readAllBytes(receipt.toPath());\n         InputStream targetStream = new ByteArrayInputStream(fileContent);\n-        formRecognizerClient.beginRecognizeReceipts(targetStream, receipt.length(),\n+        for (RecognizedForm recognizedForm : formRecognizerClient.beginRecognizeReceipts(targetStream, receipt.length(),\n             new RecognizeOptions()\n                 .setContentType(FormContentType.IMAGE_JPEG)\n                 .setIncludeFieldElements(includeFieldElements)\n                 .setPollInterval(Duration.ofSeconds(5)))\n-            .getFinalResult().forEach(recognizedReceipt -> {\n-                Map<String, FormField<?>> recognizedFields = recognizedReceipt.getFields();\n-                FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n-                if (merchantNameField != null) {\n-                    if (FieldValueType.STRING.equals(merchantNameField.getValueType())) {\n-                        String merchantName = FieldValueType.STRING.cast(merchantNameField);\n-                        System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n-                            merchantName, merchantNameField.getConfidence());\n-                    }\n+            .getFinalResult()) {\n+            Map<String, FormField<?>> recognizedFields = recognizedForm.getFields();\n+            FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n+            if (merchantNameField != null) {\n+                if (FieldValueType.STRING == merchantNameField.getValueType()) {\n+                    String merchantName = FieldValueType.STRING.cast(merchantNameField);\n+                    System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n+                        merchantName, merchantNameField.getConfidence());\n                 }\n-\n-                FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n-                if (merchantPhoneNumberField != null) {\n-                    if (FieldValueType.PHONE_NUMBER.equals(merchantNameField.getValueType())) {\n-                        String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n-                        System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n-                            merchantAddress, merchantPhoneNumberField.getConfidence());\n-                    }\n+            }\n+            FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n+            if (merchantPhoneNumberField != null) {\n+                if (FieldValueType.PHONE_NUMBER == merchantNameField.getValueType()) {\n+                    String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n+                    System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n+                        merchantAddress, merchantPhoneNumberField.getConfidence());\n                 }\n-\n-                FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n-                if (transactionDateField != null) {\n-                    if (FieldValueType.DATE.equals(transactionDateField.getValueType())) {\n-                        LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n-                        System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n-                            transactionDate, transactionDateField.getConfidence());\n-                    }\n+            }\n+            FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n+            if (transactionDateField != null) {\n+                if (FieldValueType.DATE == transactionDateField.getValueType()) {\n+                    LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n+                    System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n+                        transactionDate, transactionDateField.getConfidence());\n                 }\n-\n-                FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n-                if (receiptItemsField != null) {\n-                    System.out.printf(\"Receipt Items: %n\");\n-                    if (FieldValueType.LIST.equals(receiptItemsField.getValueType())) {\n-                        List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n-                        receiptItems.forEach(receiptItem -> {\n-                            if (FieldValueType.MAP.equals(receiptItem.getValueType())) {\n-                                Map<String, FormField<?>> formFieldMap = FieldValueType.MAP.cast(receiptItem);\n-                                formFieldMap.forEach((key, formField) -> {\n-                                    if (\"Quantity\".equals(key)) {\n-                                        if (FieldValueType.DOUBLE.equals(formField.getValueType())) {\n-                                            Float quantity = FieldValueType.DOUBLE.cast(formField);\n-                                            System.out.printf(\"Quantity: %d, confidence: %.2f%n\",\n-                                                quantity, formField.getConfidence());\n-                                        }\n-                                    }\n-                                });\n+            }\n+            FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n+            if (receiptItemsField != null) {\n+                System.out.printf(\"Receipt Items: %n\");\n+                if (FieldValueType.LIST == receiptItemsField.getValueType()) {\n+                    List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n+                    receiptItems.stream()\n+                        .filter(receiptItem -> FieldValueType.MAP == receiptItem.getValueType())\n+                        .<Map<String, FormField<?>>>map(FieldValueType.MAP::cast)\n+                        .forEach(formFieldMap -> formFieldMap.forEach((key, formField) -> {\n+                            if (\"Quantity\".equals(key)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNTYzMQ=="}, "originalCommit": {"oid": "41bc8b212239f187f79ffe971fcec742a0926005"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDc0MDQ2OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOTozMjoxOFrOGw21oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOTozMjoxOFrOGw21oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MzI5Ng==", "bodyText": "good catch", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r453883296", "createdAt": "2020-07-13T19:32:18Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -304,7 +302,7 @@ public void beginRecognizeReceiptsFromUrl() {\n \n                     FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n                     if (merchantPhoneNumberField != null) {\n-                        if (FieldValueType.PHONE_NUMBER.equals(merchantNameField.getValueType())) {\n+                        if (FieldValueType.PHONE_NUMBER == merchantPhoneNumberField.getValueType()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352b5593fffdbb3d00964affc9b685077c457e9a"}, "originalPosition": 284}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTYwODQ0OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzo0MDo0MlrOGw-mkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzo0MDo0MlrOGw-mkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxMDUxNA==", "bodyText": "NIT:  you are using two space here, but should be one.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r454010514", "createdAt": "2020-07-13T23:40:42Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java", "diffHunk": "@@ -109,15 +111,14 @@ public static void main(String[] args) throws IOException {\n                     String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())).forEach(boundingBoxStr::append);\n             }\n \n-            final StringBuilder boundingBoxLabelStr = new StringBuilder();\n             if (formField.getLabelData() != null && formField.getLabelData().getBoundingBox() != null) {\n                 formField.getLabelData().getBoundingBox().getPoints().stream().map(point ->\n                     String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())).forEach(boundingBoxStr::append);\n-            }\n-            System.out.printf(\"Field %s has label %s  within bounding box %s with a confidence score \"\n-                    + \"of %.2f.%n\",\n-                label, formField.getLabelData().getText(), boundingBoxLabelStr, formField.getConfidence());\n \n+                System.out.printf(\"Field %s has label %s  within bounding box %s with a confidence score \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352b5593fffdbb3d00964affc9b685077c457e9a"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTYxNTEwOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledDataAsync.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzo0MjowOFrOGw-ptQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzo0MjowOFrOGw-ptQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxMTMxNw==", "bodyText": "nit: same here. extra space", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r454011317", "createdAt": "2020-07-13T23:42:08Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledDataAsync.java", "diffHunk": "@@ -146,14 +146,14 @@ public static void main(String[] args) throws IOException {\n                         String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())).forEach(boundingBoxStr::append);\n                 }\n \n-                final StringBuilder boundingBoxLabelStr = new StringBuilder();\n                 if (formField.getLabelData() != null && formField.getLabelData().getBoundingBox() != null) {\n                     formField.getLabelData().getBoundingBox().getPoints().stream().map(point ->\n                         String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())).forEach(boundingBoxStr::append);\n+\n+                    System.out.printf(\"Field %s has label %s  within bounding box %s with a confidence score \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352b5593fffdbb3d00964affc9b685077c457e9a"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTYzNDE3OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzo1MTozM1rOGw-08Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzo1Mzo1M1rOGw-3mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxNDE5Mw==", "bodyText": "like other change, change to flatMap()?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r454014193", "createdAt": "2020-07-13T23:51:33Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -54,16 +55,17 @@ public void beginTraining() {\n         // BEGIN: com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.beginTraining#string-boolean\n         String trainingFilesUrl = \"{SAS-URL-of-your-container-in-blob-storage}\";\n         boolean useTrainingLabels = true;\n-        formTrainingAsyncClient.beginTraining(trainingFilesUrl, useTrainingLabels).subscribe(\n-            trainingPollingOperation -> {\n+        formTrainingAsyncClient.beginTraining(trainingFilesUrl, useTrainingLabels)\n+            .subscribe(trainingPollingOperation -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352b5593fffdbb3d00964affc9b685077c457e9a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxNDg3NQ==", "bodyText": "We din't want two subscribes nested so changed for others.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r454014875", "createdAt": "2020-07-13T23:53:53Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -54,16 +55,17 @@ public void beginTraining() {\n         // BEGIN: com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.beginTraining#string-boolean\n         String trainingFilesUrl = \"{SAS-URL-of-your-container-in-blob-storage}\";\n         boolean useTrainingLabels = true;\n-        formTrainingAsyncClient.beginTraining(trainingFilesUrl, useTrainingLabels).subscribe(\n-            trainingPollingOperation -> {\n+        formTrainingAsyncClient.beginTraining(trainingFilesUrl, useTrainingLabels)\n+            .subscribe(trainingPollingOperation -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxNDE5Mw=="}, "originalCommit": {"oid": "352b5593fffdbb3d00964affc9b685077c457e9a"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTY0NDQ5OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeCustomFormsAsync.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzo1NjozOFrOGw-63A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMDowNDozN1rOGw_ENw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxNTcwOA==", "bodyText": "what is the purpose of using try() but without catch()?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r454015708", "createdAt": "2020-07-13T23:56:38Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeCustomFormsAsync.java", "diffHunk": "@@ -43,21 +43,23 @@ public static void main(String[] args) throws IOException {\n         File sourceFile = new File(\"../formrecognizer/azure-ai-formrecognizer/src/samples/java/sample-forms/\"\n             + \"forms/Invoice_6.pdf\");\n         byte[] fileContent = Files.readAllBytes(sourceFile.toPath());\n-        InputStream targetStream = new ByteArrayInputStream(fileContent);\n-        String modelId = \"{modelId}\";\n+        PollerFlux<OperationResult, List<RecognizedForm>> recognizeFormPoller;\n+        try (InputStream targetStream = new ByteArrayInputStream(fileContent)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352b5593fffdbb3d00964affc9b685077c457e9a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxODEwMw==", "bodyText": "This is an auto closeable try block. This will make sure the stream is closed out of the block.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r454018103", "createdAt": "2020-07-14T00:04:37Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeCustomFormsAsync.java", "diffHunk": "@@ -43,21 +43,23 @@ public static void main(String[] args) throws IOException {\n         File sourceFile = new File(\"../formrecognizer/azure-ai-formrecognizer/src/samples/java/sample-forms/\"\n             + \"forms/Invoice_6.pdf\");\n         byte[] fileContent = Files.readAllBytes(sourceFile.toPath());\n-        InputStream targetStream = new ByteArrayInputStream(fileContent);\n-        String modelId = \"{modelId}\";\n+        PollerFlux<OperationResult, List<RecognizedForm>> recognizeFormPoller;\n+        try (InputStream targetStream = new ByteArrayInputStream(fileContent)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxNTcwOA=="}, "originalCommit": {"oid": "352b5593fffdbb3d00964affc9b685077c457e9a"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTY1NTkwOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/GetBoundingBoxesAsync.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMDowMjowOFrOGw_Bmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMDowMjowOFrOGw_Bmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxNzQzNA==", "bodyText": "NIT: merge to one sentence:\nnew RecognizeOption().setIncludeFieldElements(true));", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r454017434", "createdAt": "2020-07-14T00:02:08Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/GetBoundingBoxesAsync.java", "diffHunk": "@@ -37,35 +37,34 @@ public static void main(String[] args) {\n         String modelId = \"{model_Id}\";\n         String formUrl = \"{form_url}\";\n         PollerFlux<OperationResult, List<RecognizedForm>> recognizeFormPoller =\n-            client.beginRecognizeCustomFormsFromUrl(formUrl, modelId, new RecognizeOptions()\n-                .setIncludeFieldElements(true));\n+            client.beginRecognizeCustomFormsFromUrl(formUrl, modelId,\n+                new RecognizeOptions()\n+                    .setIncludeFieldElements(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352b5593fffdbb3d00964affc9b685077c457e9a"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTY1NjYzOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/GetBoundingBoxes.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMDowMjozMlrOGw_B_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMDowNTowOVrOGw_E5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxNzUzNA==", "bodyText": "checkstyle issue? line too long?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r454017534", "createdAt": "2020-07-14T00:02:32Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/GetBoundingBoxes.java", "diffHunk": "@@ -77,10 +77,8 @@ public static void main(String[] args) {\n                                 FormWord formWordElement = (FormWord) (formContent);\n                                 StringBuilder boundingBoxStr = new StringBuilder();\n                                 if (formWordElement.getBoundingBox() != null) {\n-                                    formWordElement.getBoundingBox().getPoints().forEach(point -> {\n-                                        boundingBoxStr.append(String.format(\"[%.2f, %.2f]\", point.getX(),\n-                                            point.getY()));\n-                                    });\n+                                    formWordElement.getBoundingBox().getPoints().forEach(point -> boundingBoxStr.append(String.format(\"[%.2f, %.2f]\", point.getX(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352b5593fffdbb3d00964affc9b685077c457e9a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxNzY3Mg==", "bodyText": "it is in sample, should be fine", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r454017672", "createdAt": "2020-07-14T00:02:58Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/GetBoundingBoxes.java", "diffHunk": "@@ -77,10 +77,8 @@ public static void main(String[] args) {\n                                 FormWord formWordElement = (FormWord) (formContent);\n                                 StringBuilder boundingBoxStr = new StringBuilder();\n                                 if (formWordElement.getBoundingBox() != null) {\n-                                    formWordElement.getBoundingBox().getPoints().forEach(point -> {\n-                                        boundingBoxStr.append(String.format(\"[%.2f, %.2f]\", point.getX(),\n-                                            point.getY()));\n-                                    });\n+                                    formWordElement.getBoundingBox().getPoints().forEach(point -> boundingBoxStr.append(String.format(\"[%.2f, %.2f]\", point.getX(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxNzUzNA=="}, "originalCommit": {"oid": "352b5593fffdbb3d00964affc9b685077c457e9a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxODI3Nw==", "bodyText": "I think we skip checkstyles on samples.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r454018277", "createdAt": "2020-07-14T00:05:09Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/GetBoundingBoxes.java", "diffHunk": "@@ -77,10 +77,8 @@ public static void main(String[] args) {\n                                 FormWord formWordElement = (FormWord) (formContent);\n                                 StringBuilder boundingBoxStr = new StringBuilder();\n                                 if (formWordElement.getBoundingBox() != null) {\n-                                    formWordElement.getBoundingBox().getPoints().forEach(point -> {\n-                                        boundingBoxStr.append(String.format(\"[%.2f, %.2f]\", point.getX(),\n-                                            point.getY()));\n-                                    });\n+                                    formWordElement.getBoundingBox().getPoints().forEach(point -> boundingBoxStr.append(String.format(\"[%.2f, %.2f]\", point.getX(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxNzUzNA=="}, "originalCommit": {"oid": "352b5593fffdbb3d00964affc9b685077c457e9a"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3611, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}