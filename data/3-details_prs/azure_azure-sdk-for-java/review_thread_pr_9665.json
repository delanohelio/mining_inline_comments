{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MzcwNTMy", "number": 9665, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMjozMzoyMlrODsfecA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNDoyNToxOFrODsgZMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTc5NjMyOnYy", "diffSide": "RIGHT", "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/utils/PagedList.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMjozMzoyMlrOF9X1YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNDoyMjoyMlrOF9ZKKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5Nzk1Mw==", "bodyText": "Annotate as deprecated.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9665#discussion_r399897953", "createdAt": "2020-03-30T02:33:22Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/utils/PagedList.java", "diffHunk": "@@ -0,0 +1,364 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.management.resources.fluentcore.utils;\n+\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.PagedResponse;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.ConcurrentModificationException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * Defines a list response from a paging operation. The pages are\n+ * lazy initialized when an instance of this class is iterated.\n+ *\n+ * @deprecated Use {@link PagedIterable} instead.\n+ *\n+ * @param <E> the element type.\n+ */\n+@Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "133721a4de6210edbaa7a129bd88a0a5dbe8d844"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkxOTY1Nw==", "bodyText": "what's the deprecation mean? Should v2 still use PagedList or should not?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9665#discussion_r399919657", "createdAt": "2020-03-30T04:22:22Z", "author": {"login": "yungezz"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/utils/PagedList.java", "diffHunk": "@@ -0,0 +1,364 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.management.resources.fluentcore.utils;\n+\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.PagedResponse;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.ConcurrentModificationException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * Defines a list response from a paging operation. The pages are\n+ * lazy initialized when an instance of this class is iterated.\n+ *\n+ * @deprecated Use {@link PagedIterable} instead.\n+ *\n+ * @param <E> the element type.\n+ */\n+@Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5Nzk1Mw=="}, "originalCommit": {"oid": "133721a4de6210edbaa7a129bd88a0a5dbe8d844"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTc5Njg5OnYy", "diffSide": "RIGHT", "path": "sdk/resources/mgmt/src/test/java/com/azure/management/resources/fluentcore/utils/PagedListTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMjozMzo0M1rOF9X1tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMjozMzo0M1rOF9X1tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5ODAzNw==", "bodyText": "Expect user to create it via the standard PagedIterable.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9665#discussion_r399898037", "createdAt": "2020-03-30T02:33:43Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resources/mgmt/src/test/java/com/azure/management/resources/fluentcore/utils/PagedListTests.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.management.resources.fluentcore.utils;\n+\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.PagedResponseBase;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class PagedListTests {\n+\n+    private PagedList<Integer> list;\n+\n+    @BeforeEach\n+    public void setupList() {\n+        final int pageSize = 10;\n+        final int lastFullPageInt = 50;\n+        final int lastPageSize = 5;\n+\n+        final PagedFlux<Integer> mockedPagedFlux = new PagedFlux<>(\n+            // 1st page 0-9\n+            () -> Mono.just(new PagedResponseBase<>(null, 200, null,\n+                IntStream.range(0, pageSize).boxed().collect(Collectors.toList()), Integer.toString(pageSize),\n+                (Object)null)),\n+            // 2nd page 10-19\n+            // 3rd page 20-29\n+            // ...\n+            // last page 50-55\n+            (continuationToken) -> {\n+                int nextInt = Integer.parseInt(continuationToken);\n+                String nextToken = Integer.toString(nextInt + pageSize);\n+                if (nextInt < lastFullPageInt) {\n+                    return Mono.just(new PagedResponseBase<>(null, 200, null,\n+                        IntStream.range(nextInt, nextInt + pageSize).boxed().collect(Collectors.toList()), nextToken,\n+                        (Object) null));\n+                } else {\n+                    return Mono.just(new PagedResponseBase<>(null, 200, null,\n+                        IntStream.range(nextInt, nextInt + lastPageSize).boxed().collect(Collectors.toList()), null,\n+                        (Object) null));\n+                }\n+            }\n+        );\n+        final PagedIterable<Integer> pagedIterable = new PagedIterable<>(mockedPagedFlux);\n+\n+        list = new PagedList<>(pagedIterable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "133721a4de6210edbaa7a129bd88a0a5dbe8d844"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTk0Njc1OnYy", "diffSide": "RIGHT", "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/utils/PagedList.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNDoyNToxOFrOF9ZMmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo1MTo0NlrOF-25NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyMDI4Mw==", "bodyText": "seems cachedpage removed, any concern on performance etc when original cachedpage adding? Or we may revisit it later when there's complain", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9665#discussion_r399920283", "createdAt": "2020-03-30T04:25:18Z", "author": {"login": "yungezz"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/utils/PagedList.java", "diffHunk": "@@ -0,0 +1,367 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.management.resources.fluentcore.utils;\n+\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.PagedResponse;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.ConcurrentModificationException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * Defines a list response from a paging operation. The pages are\n+ * lazy initialized when an instance of this class is iterated.\n+ *\n+ * @deprecated Use {@link PagedIterable} instead.\n+ *\n+ * @param <E> the element type.\n+ */\n+@Deprecated\n+public final class PagedList<E> implements List<E> {\n+\n+    // The invariant is that before / after read-only method, items + pagedResponseIterator is the complete pagedIterable.\n+\n+    /** The items retrieved. */\n+    private final List<E> items;\n+\n+    /** The paged response iterator for not retrieved items. */\n+    private Iterator<PagedResponse<E>> pagedResponseIterator;\n+\n+    /**\n+     * Creates an instance of PagedList.\n+     */\n+    public PagedList() {\n+        items = new ArrayList<>();\n+        pagedResponseIterator = Collections.emptyIterator();\n+    }\n+\n+    /**\n+     * Creates an instance of PagedList from a {@link PagedIterable}.\n+     *\n+     * @param pagedIterable the {@link PagedIterable} object.\n+     */\n+    public PagedList(PagedIterable<E> pagedIterable) {\n+        items = new ArrayList<>();\n+        Objects.requireNonNull(pagedIterable, \"'pagedIterable' cannot be null.\");\n+        this.pagedResponseIterator = pagedIterable.iterableByPage().iterator();\n+    }\n+\n+    /**\n+     * If there are more pages available.\n+     *\n+     * @return true if there are more pages to load. False otherwise.\n+     */\n+    protected boolean hasNextPage() {\n+        return pagedResponseIterator.hasNext();\n+    }\n+\n+    /**\n+     * Loads a page from next page link.\n+     * The exceptions are wrapped into Java Runtime exceptions.\n+     */\n+    protected void loadNextPage() {\n+        this.items.addAll(pagedResponseIterator.next().getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a16fc22b201120949839b04b92e6e3a5d023a34c"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyMDgxOQ==", "bodyText": "v2 should not use PagedList. This class is provided since return type in v2 is PagedIterable, which is not compatibly with v1 PagedList.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9665#discussion_r399920819", "createdAt": "2020-03-30T04:27:56Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/utils/PagedList.java", "diffHunk": "@@ -0,0 +1,367 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.management.resources.fluentcore.utils;\n+\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.PagedResponse;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.ConcurrentModificationException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * Defines a list response from a paging operation. The pages are\n+ * lazy initialized when an instance of this class is iterated.\n+ *\n+ * @deprecated Use {@link PagedIterable} instead.\n+ *\n+ * @param <E> the element type.\n+ */\n+@Deprecated\n+public final class PagedList<E> implements List<E> {\n+\n+    // The invariant is that before / after read-only method, items + pagedResponseIterator is the complete pagedIterable.\n+\n+    /** The items retrieved. */\n+    private final List<E> items;\n+\n+    /** The paged response iterator for not retrieved items. */\n+    private Iterator<PagedResponse<E>> pagedResponseIterator;\n+\n+    /**\n+     * Creates an instance of PagedList.\n+     */\n+    public PagedList() {\n+        items = new ArrayList<>();\n+        pagedResponseIterator = Collections.emptyIterator();\n+    }\n+\n+    /**\n+     * Creates an instance of PagedList from a {@link PagedIterable}.\n+     *\n+     * @param pagedIterable the {@link PagedIterable} object.\n+     */\n+    public PagedList(PagedIterable<E> pagedIterable) {\n+        items = new ArrayList<>();\n+        Objects.requireNonNull(pagedIterable, \"'pagedIterable' cannot be null.\");\n+        this.pagedResponseIterator = pagedIterable.iterableByPage().iterator();\n+    }\n+\n+    /**\n+     * If there are more pages available.\n+     *\n+     * @return true if there are more pages to load. False otherwise.\n+     */\n+    protected boolean hasNextPage() {\n+        return pagedResponseIterator.hasNext();\n+    }\n+\n+    /**\n+     * Loads a page from next page link.\n+     * The exceptions are wrapped into Java Runtime exceptions.\n+     */\n+    protected void loadNextPage() {\n+        this.items.addAll(pagedResponseIterator.next().getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyMDI4Mw=="}, "originalCommit": {"oid": "a16fc22b201120949839b04b92e6e3a5d023a34c"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyMDk4NQ==", "bodyText": "PagedIterable/PagedFlux is already doing what need to be done on paged response. This class is only a wrapper to provide interface compatible with v1.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9665#discussion_r399920985", "createdAt": "2020-03-30T04:28:42Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/utils/PagedList.java", "diffHunk": "@@ -0,0 +1,367 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.management.resources.fluentcore.utils;\n+\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.PagedResponse;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.ConcurrentModificationException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * Defines a list response from a paging operation. The pages are\n+ * lazy initialized when an instance of this class is iterated.\n+ *\n+ * @deprecated Use {@link PagedIterable} instead.\n+ *\n+ * @param <E> the element type.\n+ */\n+@Deprecated\n+public final class PagedList<E> implements List<E> {\n+\n+    // The invariant is that before / after read-only method, items + pagedResponseIterator is the complete pagedIterable.\n+\n+    /** The items retrieved. */\n+    private final List<E> items;\n+\n+    /** The paged response iterator for not retrieved items. */\n+    private Iterator<PagedResponse<E>> pagedResponseIterator;\n+\n+    /**\n+     * Creates an instance of PagedList.\n+     */\n+    public PagedList() {\n+        items = new ArrayList<>();\n+        pagedResponseIterator = Collections.emptyIterator();\n+    }\n+\n+    /**\n+     * Creates an instance of PagedList from a {@link PagedIterable}.\n+     *\n+     * @param pagedIterable the {@link PagedIterable} object.\n+     */\n+    public PagedList(PagedIterable<E> pagedIterable) {\n+        items = new ArrayList<>();\n+        Objects.requireNonNull(pagedIterable, \"'pagedIterable' cannot be null.\");\n+        this.pagedResponseIterator = pagedIterable.iterableByPage().iterator();\n+    }\n+\n+    /**\n+     * If there are more pages available.\n+     *\n+     * @return true if there are more pages to load. False otherwise.\n+     */\n+    protected boolean hasNextPage() {\n+        return pagedResponseIterator.hasNext();\n+    }\n+\n+    /**\n+     * Loads a page from next page link.\n+     * The exceptions are wrapped into Java Runtime exceptions.\n+     */\n+    protected void loadNextPage() {\n+        this.items.addAll(pagedResponseIterator.next().getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyMDI4Mw=="}, "originalCommit": {"oid": "a16fc22b201120949839b04b92e6e3a5d023a34c"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyMTI2Nw==", "bodyText": "With this, user now have 2 choice when migrate.\n\nUse PagedIterable, and refactor any code that handling it.\nUse PagedList, use it to wrap PagedIterable. Find time later to do all refactor needed in 1.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9665#discussion_r399921267", "createdAt": "2020-03-30T04:30:06Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/utils/PagedList.java", "diffHunk": "@@ -0,0 +1,367 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.management.resources.fluentcore.utils;\n+\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.PagedResponse;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.ConcurrentModificationException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * Defines a list response from a paging operation. The pages are\n+ * lazy initialized when an instance of this class is iterated.\n+ *\n+ * @deprecated Use {@link PagedIterable} instead.\n+ *\n+ * @param <E> the element type.\n+ */\n+@Deprecated\n+public final class PagedList<E> implements List<E> {\n+\n+    // The invariant is that before / after read-only method, items + pagedResponseIterator is the complete pagedIterable.\n+\n+    /** The items retrieved. */\n+    private final List<E> items;\n+\n+    /** The paged response iterator for not retrieved items. */\n+    private Iterator<PagedResponse<E>> pagedResponseIterator;\n+\n+    /**\n+     * Creates an instance of PagedList.\n+     */\n+    public PagedList() {\n+        items = new ArrayList<>();\n+        pagedResponseIterator = Collections.emptyIterator();\n+    }\n+\n+    /**\n+     * Creates an instance of PagedList from a {@link PagedIterable}.\n+     *\n+     * @param pagedIterable the {@link PagedIterable} object.\n+     */\n+    public PagedList(PagedIterable<E> pagedIterable) {\n+        items = new ArrayList<>();\n+        Objects.requireNonNull(pagedIterable, \"'pagedIterable' cannot be null.\");\n+        this.pagedResponseIterator = pagedIterable.iterableByPage().iterator();\n+    }\n+\n+    /**\n+     * If there are more pages available.\n+     *\n+     * @return true if there are more pages to load. False otherwise.\n+     */\n+    protected boolean hasNextPage() {\n+        return pagedResponseIterator.hasNext();\n+    }\n+\n+    /**\n+     * Loads a page from next page link.\n+     * The exceptions are wrapped into Java Runtime exceptions.\n+     */\n+    protected void loadNextPage() {\n+        this.items.addAll(pagedResponseIterator.next().getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyMDI4Mw=="}, "originalCommit": {"oid": "a16fc22b201120949839b04b92e6e3a5d023a34c"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ1NTQxMw==", "bodyText": "thanks for clarification. Then in our sample or migration guide, pls use PagedIterable as right and long term way for paging operation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9665#discussion_r401455413", "createdAt": "2020-04-01T08:51:46Z", "author": {"login": "yungezz"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/utils/PagedList.java", "diffHunk": "@@ -0,0 +1,367 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.management.resources.fluentcore.utils;\n+\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.PagedResponse;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.ConcurrentModificationException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * Defines a list response from a paging operation. The pages are\n+ * lazy initialized when an instance of this class is iterated.\n+ *\n+ * @deprecated Use {@link PagedIterable} instead.\n+ *\n+ * @param <E> the element type.\n+ */\n+@Deprecated\n+public final class PagedList<E> implements List<E> {\n+\n+    // The invariant is that before / after read-only method, items + pagedResponseIterator is the complete pagedIterable.\n+\n+    /** The items retrieved. */\n+    private final List<E> items;\n+\n+    /** The paged response iterator for not retrieved items. */\n+    private Iterator<PagedResponse<E>> pagedResponseIterator;\n+\n+    /**\n+     * Creates an instance of PagedList.\n+     */\n+    public PagedList() {\n+        items = new ArrayList<>();\n+        pagedResponseIterator = Collections.emptyIterator();\n+    }\n+\n+    /**\n+     * Creates an instance of PagedList from a {@link PagedIterable}.\n+     *\n+     * @param pagedIterable the {@link PagedIterable} object.\n+     */\n+    public PagedList(PagedIterable<E> pagedIterable) {\n+        items = new ArrayList<>();\n+        Objects.requireNonNull(pagedIterable, \"'pagedIterable' cannot be null.\");\n+        this.pagedResponseIterator = pagedIterable.iterableByPage().iterator();\n+    }\n+\n+    /**\n+     * If there are more pages available.\n+     *\n+     * @return true if there are more pages to load. False otherwise.\n+     */\n+    protected boolean hasNextPage() {\n+        return pagedResponseIterator.hasNext();\n+    }\n+\n+    /**\n+     * Loads a page from next page link.\n+     * The exceptions are wrapped into Java Runtime exceptions.\n+     */\n+    protected void loadNextPage() {\n+        this.items.addAll(pagedResponseIterator.next().getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyMDI4Mw=="}, "originalCommit": {"oid": "a16fc22b201120949839b04b92e6e3a5d023a34c"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2141, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}