{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MjUyMDA5", "number": 9758, "title": "add local crypto client", "bodyText": "Fixes #8006", "createdAt": "2020-04-01T21:56:15Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9758", "merged": true, "mergeCommit": {"oid": "36b563887ead06f357b1e9ef1a633c6f7b5fcf51"}, "closed": true, "closedAt": "2020-04-09T16:05:30Z", "author": {"login": "g2vinay"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTezOmgH2gAyMzk3MjUyMDA5OmQzOTM3OTBjNTAwZDE3NmEwMWZjMTZiNTVhYmVmNTAxMzE1NzgwYmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcV-UjFgH2gAyMzk3MjUyMDA5OjUxOTgyYzM4ZWMyOTBiZGJlYTRmZWY5NjFkODk2YTI0ODg3YmRjM2E=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d393790c500d176a01fc16b55abef501315780ba", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d393790c500d176a01fc16b55abef501315780ba", "committedDate": "2020-04-01T21:43:45Z", "message": "add local crypto client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02a3a90dfdb1a6a98a610e237ac9d3f12d8bb122", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/02a3a90dfdb1a6a98a610e237ac9d3f12d8bb122", "committedDate": "2020-04-01T23:26:03Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b0408735d29b0c9dde26e287a2232f9a9a86f4c", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6b0408735d29b0c9dde26e287a2232f9a9a86f4c", "committedDate": "2020-04-02T01:43:54Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MTM1MDU5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9758#pullrequestreview-386135059", "createdAt": "2020-04-02T06:23:29Z", "commit": {"oid": "6b0408735d29b0c9dde26e287a2232f9a9a86f4c"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoyMzozMFrOF_c0DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjo0NzoxMlrOF_dYnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NjY4NA==", "bodyText": "Since this is a local client, this annotation may not be applicable. If this is added for checkstyle, then sync and async clients should also have service method and service client annotation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9758#discussion_r402076684", "createdAt": "2020-04-02T06:23:30Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/LocalCryptographyClientBuilder.java", "diffHunk": "@@ -0,0 +1,74 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.keys.models.JsonWebKey;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of the {@link\n+ * LocalCryptographyAsyncClient cryptography async client} and {@link LocalCryptographyClient cryptography sync client},\n+ * by calling {@link LocalCryptographyClientBuilder#buildAsyncClient() buildAsyncClient} and {@link\n+ * LocalCryptographyClientBuilder#buildClient() buildClient} respectively\n+ * It constructs an instance of the desired client.\n+ *\n+ * <p> The minimal configuration options required by {@link LocalCryptographyClientBuilder cryptographyClientBuilder} to\n+ * build {@link LocalCryptographyAsyncClient} is ({@link JsonWebKey jsonWebKey}.\n+ * </p>\n+ *\n+ * {@codesnippet com.azure.security.keyvault.keys.cryptography.async.LocalCryptographyAsyncClient.instantiation}\n+ *\n+ * @see LocalCryptographyAsyncClient\n+ * @see LocalCryptographyClient\n+ */\n+@ServiceClientBuilder(serviceClients = LocalKeyCryptographyClient.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b0408735d29b0c9dde26e287a2232f9a9a86f4c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3ODc2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Creates a KeyClient that uses {@code pipeline} to service requests\n          \n          \n            \n                 * Creates a LocalCryptographyClient that uses {@code pipeline} to service requests", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9758#discussion_r402078766", "createdAt": "2020-04-02T06:28:46Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/LocalCryptographyClient.java", "diffHunk": "@@ -0,0 +1,249 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import com.azure.security.keyvault.keys.cryptography.models.DecryptResult;\n+import com.azure.security.keyvault.keys.cryptography.models.EncryptResult;\n+import com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm;\n+import com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm;\n+import com.azure.security.keyvault.keys.cryptography.models.SignResult;\n+import com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm;\n+import com.azure.security.keyvault.keys.cryptography.models.UnwrapResult;\n+import com.azure.security.keyvault.keys.cryptography.models.VerifyResult;\n+import com.azure.security.keyvault.keys.cryptography.models.WrapResult;\n+\n+\n+/**\n+ * The LocalCryptographyClient provides synchronous methods to perform cryptographic operations using asymmetric and\n+ * symmetric keys. The client supports encrypt, decrypt, wrap key, unwrap key, sign and verify operations using the\n+ * configured key.\n+ *\n+ * <p><strong>Samples to construct the sync client</strong></p>\n+ * {@codesnippet com.azure.security.keyvault.keys.cryptography.LocalCryptographyClient.instantiation}\n+ *\n+ * @see LocalCryptographyClientBuilder\n+ */\n+public class LocalCryptographyClient {\n+    private final LocalCryptographyAsyncClient client;\n+\n+    /**\n+     * Creates a KeyClient that uses {@code pipeline} to service requests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b0408735d29b0c9dde26e287a2232f9a9a86f4c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3OTEzNQ==", "bodyText": "Since this is local client, it shouldn't be using the pipeline right?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9758#discussion_r402079135", "createdAt": "2020-04-02T06:29:42Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/LocalCryptographyClient.java", "diffHunk": "@@ -0,0 +1,249 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import com.azure.security.keyvault.keys.cryptography.models.DecryptResult;\n+import com.azure.security.keyvault.keys.cryptography.models.EncryptResult;\n+import com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm;\n+import com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm;\n+import com.azure.security.keyvault.keys.cryptography.models.SignResult;\n+import com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm;\n+import com.azure.security.keyvault.keys.cryptography.models.UnwrapResult;\n+import com.azure.security.keyvault.keys.cryptography.models.VerifyResult;\n+import com.azure.security.keyvault.keys.cryptography.models.WrapResult;\n+\n+\n+/**\n+ * The LocalCryptographyClient provides synchronous methods to perform cryptographic operations using asymmetric and\n+ * symmetric keys. The client supports encrypt, decrypt, wrap key, unwrap key, sign and verify operations using the\n+ * configured key.\n+ *\n+ * <p><strong>Samples to construct the sync client</strong></p>\n+ * {@codesnippet com.azure.security.keyvault.keys.cryptography.LocalCryptographyClient.instantiation}\n+ *\n+ * @see LocalCryptographyClientBuilder\n+ */\n+public class LocalCryptographyClient {\n+    private final LocalCryptographyAsyncClient client;\n+\n+    /**\n+     * Creates a KeyClient that uses {@code pipeline} to service requests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b0408735d29b0c9dde26e287a2232f9a9a86f4c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4MDYzNA==", "bodyText": "Why doesn't this sync client extend from LocalCryptographyClient like the async client does?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9758#discussion_r402080634", "createdAt": "2020-04-02T06:33:48Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/LocalKeyEncryptionKeyClient.java", "diffHunk": "@@ -0,0 +1,48 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import com.azure.core.cryptography.KeyEncryptionKey;\n+\n+/**\n+ * A key client which is used to synchronously encrypt, or wrap, another key.\n+ */\n+public final class LocalKeyEncryptionKeyClient implements KeyEncryptionKey {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b0408735d29b0c9dde26e287a2232f9a9a86f4c"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4MTk3Ng==", "bodyText": "The build methods build KeyEncryptionKey and not the LocalKeyEncryptionKeyClient. Should this builder name be updated to reflect that?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9758#discussion_r402081976", "createdAt": "2020-04-02T06:37:05Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/LocalKeyEncryptionKeyClientBuilder.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import com.azure.core.cryptography.AsyncKeyEncryptionKey;\n+import com.azure.core.cryptography.KeyEncryptionKey;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.keys.models.JsonWebKey;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of the {@link\n+ * LocalKeyEncryptionKeyAsyncClient AsyncKeyEncryptionKey} and {@link LocalKeyEncryptionKeyClient KeyEncryptionKey},\n+ * by calling {@link LocalKeyEncryptionKeyClientBuilder#buildAsyncKeyEncryptionKey(JsonWebKey)} and {@link\n+ * LocalKeyEncryptionKeyClientBuilder#buildKeyEncryptionKey(JsonWebKey)} respectively.\n+ * It constructs an instance of the desired client.\n+ *\n+ * <p> The minimal configuration options required by {@link LocalKeyEncryptionKeyClientBuilder} to\n+ * build {@link LocalKeyEncryptionKeyAsyncClient} or {@link LocalKeyEncryptionKeyClient} is\n+ * {@link JsonWebKey json web key}).</p>\n+ *\n+ * @see LocalKeyEncryptionKeyAsyncClient\n+ * @see LocalKeyEncryptionKeyClient\n+ */\n+public final class LocalKeyEncryptionKeyClientBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b0408735d29b0c9dde26e287a2232f9a9a86f4c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4MjgxOQ==", "bodyText": "Use monoError() in FluxUtil  which will also log the error. Do the same in other places too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9758#discussion_r402082819", "createdAt": "2020-04-02T06:39:16Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/RsaKeyCryptographyClient.java", "diffHunk": "@@ -132,16 +132,23 @@ private KeyPair getKeyPair(JsonWebKey key) {\n \n     @Override\n     Mono<SignResult> signAsync(SignatureAlgorithm algorithm, byte[] digest, Context context, JsonWebKey key) {\n-\n-        return serviceClient.sign(algorithm, digest, context);\n+        if (serviceCryptoAvailable()) {\n+            return serviceClient.sign(algorithm, digest, context);\n+        } else {\n+            return Mono.error(new UnsupportedOperationException(\"Sign operation on Local RSA key\"\n+                                                                    + \" is not supported currently.\"));\n+        }\n     }\n \n     @Override\n     Mono<VerifyResult> verifyAsync(SignatureAlgorithm algorithm, byte[] digest, byte[] signature, Context context,\n                                    JsonWebKey key) {\n-\n-        return serviceClient.verify(algorithm, digest, signature, context);\n-        // do a service call for now.\n+        if (serviceCryptoAvailable()) {\n+            return serviceClient.verify(algorithm, digest, signature, context);\n+        } else {\n+            return Mono.error(new UnsupportedOperationException(\"Verify operation on Local RSA key is not\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b0408735d29b0c9dde26e287a2232f9a9a86f4c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4NDIzNQ==", "bodyText": "Since this is going to be a public API now, update the javadoc.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param keyId The kid value to set\n          \n          \n            \n                 * @param keyId The keyId value to set", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9758#discussion_r402084235", "createdAt": "2020-04-02T06:42:55Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/models/JsonWebKey.java", "diffHunk": "@@ -169,7 +169,7 @@ public String getId() {\n      * @param keyId The kid value to set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b0408735d29b0c9dde26e287a2232f9a9a86f4c"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4NDk3OQ==", "bodyText": "Removing public methods from a public package is a breaking change. Why are we removing these methods?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9758#discussion_r402084979", "createdAt": "2020-04-02T06:44:41Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/models/KeyVaultKey.java", "diffHunk": "@@ -98,32 +96,6 @@ public KeyType getKeyType() {\n         return key.getKeyOps();\n     }\n \n-    /**\n-     * Creates an instance of KeyVaultKey\n-     * @param keyId the identifier of the key\n-     * @param jsonWebKey the json web key to be used for crypto operations\n-     * @return The Key Vault Key object.\n-     */\n-    public static KeyVaultKey fromKeyId(String keyId, JsonWebKey jsonWebKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b0408735d29b0c9dde26e287a2232f9a9a86f4c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4NTczOA==", "bodyText": "This is a breaking change. These public methods should not be removed from the builder.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9758#discussion_r402085738", "createdAt": "2020-04-02T06:46:31Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/KeyEncryptionKeyClientBuilder.java", "diffHunk": "@@ -136,50 +114,6 @@ public KeyEncryptionKey buildKeyEncryptionKey(KeyVaultKey key) {\n         return Mono.defer(() -> Mono.just(new KeyEncryptionKeyAsyncClient(keyId, pipeline, serviceVersion)));\n     }\n \n-    /**\n-     * Creates a {@link KeyEncryptionKeyAsyncClient} based on options set in the builder.\n-     * Every time {@code buildAsyncKeyEncryptionKey(String)} is called, a new instance of\n-     * {@link KeyEncryptionKeyAsyncClient} is created.\n-     *\n-     * <p>If {@link KeyEncryptionKeyClientBuilder#pipeline(HttpPipeline) pipeline} is set, then the {@code pipeline}\n-     * and {@code keyId} are used to create the {@link KeyEncryptionKeyAsyncClient async client}.\n-     * All other builder settings are ignored. If {@code pipeline} is not set, then\n-     * ({@link KeyEncryptionKeyClientBuilder#credential(TokenCredential) jsonWebKey vault credential} and\n-     * {@code keyId} are required to build the {@link KeyEncryptionKeyAsyncClient async client}.</p>\n-     *\n-     * @param key the key to be used for crypto operations.\n-     *\n-     * @return A {@link KeyEncryptionKeyAsyncClient} with the options set from the builder.\n-     * @throws IllegalStateException If {@link KeyEncryptionKeyClientBuilder#credential(TokenCredential)} or\n-     * {@code key} have not been set.\n-     */\n-    public Mono<? extends AsyncKeyEncryptionKey> buildAsyncKeyEncryptionKey(KeyVaultKey key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b0408735d29b0c9dde26e287a2232f9a9a86f4c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4NjA0Nw==", "bodyText": "Why does the local client need a http pipeline?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9758#discussion_r402086047", "createdAt": "2020-04-02T06:47:12Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/LocalCryptographyClientTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.security.keyvault.keys.KeyClient;\n+import com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm;\n+import com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm;\n+import com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm;\n+import com.azure.security.keyvault.keys.models.JsonWebKey;\n+import com.azure.security.keyvault.keys.models.KeyCurveName;\n+import com.azure.security.keyvault.keys.models.KeyOperation;\n+import org.junit.jupiter.api.Test;\n+\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.Provider;\n+import java.security.Security;\n+import java.security.spec.ECGenParameterSpec;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class LocalCryptographyClientTest extends LocalCryptographyClientTestBase {\n+\n+    private KeyClient client;\n+    private HttpPipeline pipeline;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b0408735d29b0c9dde26e287a2232f9a9a86f4c"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0db6ccc8d80c108c68c5a19a96262382d690b89a", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0db6ccc8d80c108c68c5a19a96262382d690b89a", "committedDate": "2020-04-03T06:34:39Z", "message": "address feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjI1MTE5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9758#pullrequestreview-387625119", "createdAt": "2020-04-03T22:59:27Z", "commit": {"oid": "0db6ccc8d80c108c68c5a19a96262382d690b89a"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjo1OToyN1rOGAsE1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMzowNjoyNFrOGAsLvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3NTMxNw==", "bodyText": "\"JSON\" (it's an acronym).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9758#discussion_r403375317", "createdAt": "2020-04-03T22:59:27Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java", "diffHunk": "@@ -74,13 +74,11 @@\n     /**\n      * Creates a CryptographyAsyncClient that uses {@code pipeline} to service requests\n      *\n-     * @param key the key to use for cryptography operations.\n+     * @param jsonWebKey the json web key to use for cryptography operations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0db6ccc8d80c108c68c5a19a96262382d690b89a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3NTg2Nw==", "bodyText": "Nit: \"JSON\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9758#discussion_r403375867", "createdAt": "2020-04-03T23:01:27Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientBuilder.java", "diffHunk": "@@ -127,18 +125,14 @@ public CryptographyClient buildClient() {\n      * CryptographyClientBuilder#keyIdentifier(String)} have not been set.\n      */\n     public CryptographyAsyncClient buildAsyncClient() {\n-        if (keyVaultKey == null && Strings.isNullOrEmpty(keyId)) {\n+        if (Strings.isNullOrEmpty(keyId)) {\n             throw logger.logExceptionAsError(new IllegalStateException(\n                 \"Json Web Key or jsonWebKey identifier are required to create cryptography client\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0db6ccc8d80c108c68c5a19a96262382d690b89a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3NzA4NA==", "bodyText": "\"Signs\" not \"sings\".", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9758#discussion_r403377084", "createdAt": "2020-04-03T23:06:24Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/LocalCryptographyAsyncClient.java", "diffHunk": "@@ -0,0 +1,253 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import com.azure.security.keyvault.keys.cryptography.models.DecryptResult;\n+import com.azure.security.keyvault.keys.cryptography.models.EncryptResult;\n+import com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm;\n+import com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm;\n+import com.azure.security.keyvault.keys.cryptography.models.SignResult;\n+import com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm;\n+import com.azure.security.keyvault.keys.cryptography.models.UnwrapResult;\n+import com.azure.security.keyvault.keys.cryptography.models.VerifyResult;\n+import com.azure.security.keyvault.keys.cryptography.models.WrapResult;\n+import com.azure.security.keyvault.keys.models.JsonWebKey;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * The LocalCryptographyAsyncClient provides asynchronous methods to perform cryptographic operations locally using\n+ * asymmetric and symmetric keys. The client supports encrypt, decrypt, wrap key, unwrap key, sign and verify\n+ * operations using the configured key.\n+ *\n+ * <p><strong>Samples to construct the sync client</strong></p>\n+ * {@codesnippet com.azure.security.keyvault.keys.cryptography.async.LocalCryptographyAsyncClient.instantiation}\n+ *\n+ * @see LocalCryptographyClientBuilder\n+ */\n+public class LocalCryptographyAsyncClient {\n+    private final CryptographyAsyncClient cryptographyAsyncClient;\n+\n+    /**\n+     * Creates a LocalCryptographyAsyncClient for local cryptography operations.\n+     *\n+     * @param jsonWebKey the json web key to use for cryptography operations.\n+     */\n+    LocalCryptographyAsyncClient(JsonWebKey jsonWebKey) {\n+        cryptographyAsyncClient = new CryptographyAsyncClient(jsonWebKey, null, null);\n+    }\n+\n+    Mono<String> getKeyId() {\n+        return cryptographyAsyncClient.getKeyId();\n+    }\n+\n+    /**\n+     * Encrypts an arbitrary sequence of bytes using the configured key. Note that the encrypt operation only supports a\n+     * single block of data, the size of which is dependent on the target key and the encryption algorithm to be used.\n+     * The encrypt operation is supported for both symmetric keys and asymmetric keys. In case of asymmetric keys public\n+     * portion of the key is used for encryption. This operation requires the keys/encrypt permission.\n+     *\n+     * <p>The {@link EncryptionAlgorithm encryption algorithm} indicates the type of algorithm to use for encrypting the\n+     * specified {@code plaintext}. Possible values for assymetric keys include:\n+     * {@link EncryptionAlgorithm#RSA1_5 RSA1_5} and {@link EncryptionAlgorithm#RSA_OAEP RSA_OAEP}. </p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     * <p>Encrypts the content. Subscribes to the call asynchronously and prints out the encrypted content details when\n+     * a response has been received.</p>\n+     * {@codesnippet com.azure.security.keyvault.keys.cryptography.LocalCryptographyAsyncClient.encrypt#EncryptionAlgorithm-byte}\n+     *\n+     * @param algorithm The algorithm to be used for encryption.\n+     * @param plaintext The content to be encrypted.\n+     * @return A {@link Mono} containing a {@link EncryptResult} whose {@link EncryptResult#getCipherText() cipher text}\n+     * contains the encrypted content.\n+     * @throws UnsupportedOperationException if the encrypt operation is not supported or configured on the key.\n+     * @throws NullPointerException if {@code algorithm} or  {@code plainText} is null.\n+     */\n+    public Mono<EncryptResult> encrypt(EncryptionAlgorithm algorithm, byte[] plaintext) {\n+        return cryptographyAsyncClient.encrypt(algorithm, plaintext);\n+    }\n+\n+\n+    /**\n+     * Decrypts a single block of encrypted data using the configured key and specified algorithm. Note that only a\n+     * single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to\n+     * be used. The decrypt operation is supported for both asymmetric and symmetric keys. This operation requires the\n+     * keys/decrypt permission.\n+     *\n+     * <p>The {@link EncryptionAlgorithm encryption algorithm} indicates the type of algorithm to use for decrypting the\n+     * specified encrypted content. Possible values for assymetric keys include:\n+     * {@link EncryptionAlgorithm#RSA1_5 RSA1_5} and {@link EncryptionAlgorithm#RSA_OAEP RSA_OAEP}.</p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     * <p>Decrypts the encrypted content. Subscribes to the call asynchronously and prints out the decrypted content\n+     * details when a response has been received.</p>\n+     * {@codesnippet com.azure.security.keyvault.keys.cryptography.LocalCryptographyAsyncClient.decrypt#EncryptionAlgorithm-byte}\n+     *\n+     * @param algorithm The algorithm to be used for decryption.\n+     * @param cipherText The content to be decrypted.\n+     * @return A {@link Mono} containing the decrypted blob.\n+     * @throws UnsupportedOperationException if the decrypt operation is not supported or configured on the key.\n+     * @throws NullPointerException if {@code algorithm} or {@code cipherText} is null.\n+     */\n+    public Mono<DecryptResult> decrypt(EncryptionAlgorithm algorithm, byte[] cipherText) {\n+        return cryptographyAsyncClient.decrypt(algorithm, cipherText);\n+    }\n+\n+\n+    /**\n+     * Creates a signature from a digest using the configured key. The sign operation supports both asymmetric and\n+     * symmetric keys. This operation requires the keys/sign permission.\n+     *\n+     * <p>The {@link SignatureAlgorithm signature algorithm} indicates the type of algorithm to use to create the\n+     * signature from the digest. Possible values include:\n+     * {@link SignatureAlgorithm#ES256 ES256}, {@link SignatureAlgorithm#ES384 E384},\n+     * {@link SignatureAlgorithm#ES512 ES512} and {@link SignatureAlgorithm#ES256K ES256K}.</p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     * <p>Sings the digest. Subscribes to the call asynchronously and prints out the signature details when a response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0db6ccc8d80c108c68c5a19a96262382d690b89a"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NDgyODA0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9758#pullrequestreview-388482804", "createdAt": "2020-04-06T17:50:40Z", "commit": {"oid": "0db6ccc8d80c108c68c5a19a96262382d690b89a"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo1MDo0MVrOGBjMJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo1NDoxMFrOGBjUmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3ODMwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <p><strong>Samples to construct the sync client</strong></p>\n          \n          \n            \n             * <p><strong>Samples to construct the async client</strong></p>", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9758#discussion_r404278308", "createdAt": "2020-04-06T17:50:41Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/LocalCryptographyAsyncClient.java", "diffHunk": "@@ -0,0 +1,253 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import com.azure.security.keyvault.keys.cryptography.models.DecryptResult;\n+import com.azure.security.keyvault.keys.cryptography.models.EncryptResult;\n+import com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm;\n+import com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm;\n+import com.azure.security.keyvault.keys.cryptography.models.SignResult;\n+import com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm;\n+import com.azure.security.keyvault.keys.cryptography.models.UnwrapResult;\n+import com.azure.security.keyvault.keys.cryptography.models.VerifyResult;\n+import com.azure.security.keyvault.keys.cryptography.models.WrapResult;\n+import com.azure.security.keyvault.keys.models.JsonWebKey;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * The LocalCryptographyAsyncClient provides asynchronous methods to perform cryptographic operations locally using\n+ * asymmetric and symmetric keys. The client supports encrypt, decrypt, wrap key, unwrap key, sign and verify\n+ * operations using the configured key.\n+ *\n+ * <p><strong>Samples to construct the sync client</strong></p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0db6ccc8d80c108c68c5a19a96262382d690b89a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3OTczMA==", "bodyText": "Does the sync client require more configurations? If not, the document should include both async and sync client.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9758#discussion_r404279730", "createdAt": "2020-04-06T17:53:00Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/LocalCryptographyClientBuilder.java", "diffHunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.keys.models.JsonWebKey;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of the {@link\n+ * LocalCryptographyAsyncClient cryptography async client} and {@link LocalCryptographyClient cryptography sync client},\n+ * by calling {@link LocalCryptographyClientBuilder#buildAsyncClient() buildAsyncClient} and {@link\n+ * LocalCryptographyClientBuilder#buildClient() buildClient} respectively\n+ * It constructs an instance of the desired client.\n+ *\n+ * <p> The minimal configuration options required by {@link LocalCryptographyClientBuilder cryptographyClientBuilder} to\n+ * build {@link LocalCryptographyAsyncClient} is ({@link JsonWebKey jsonWebKey}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0db6ccc8d80c108c68c5a19a96262382d690b89a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4MDQ3NQ==", "bodyText": "If an input is null and is expected to be non-null, we throw NullPointerException as per Java guidelines.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9758#discussion_r404280475", "createdAt": "2020-04-06T17:54:10Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/LocalCryptographyClientBuilder.java", "diffHunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.keys.models.JsonWebKey;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of the {@link\n+ * LocalCryptographyAsyncClient cryptography async client} and {@link LocalCryptographyClient cryptography sync client},\n+ * by calling {@link LocalCryptographyClientBuilder#buildAsyncClient() buildAsyncClient} and {@link\n+ * LocalCryptographyClientBuilder#buildClient() buildClient} respectively\n+ * It constructs an instance of the desired client.\n+ *\n+ * <p> The minimal configuration options required by {@link LocalCryptographyClientBuilder cryptographyClientBuilder} to\n+ * build {@link LocalCryptographyAsyncClient} is ({@link JsonWebKey jsonWebKey}.\n+ * </p>\n+ *\n+ * {@codesnippet com.azure.security.keyvault.keys.cryptography.async.LocalCryptographyAsyncClient.instantiation}\n+ *\n+ * @see LocalCryptographyAsyncClient\n+ * @see LocalCryptographyClient\n+ */\n+public final class LocalCryptographyClientBuilder {\n+    private final ClientLogger logger = new ClientLogger(LocalCryptographyClientBuilder.class);\n+    private JsonWebKey jsonWebKey;\n+\n+    /**\n+     * Creates a {@link LocalCryptographyClient} based on options set in the builder.\n+     * Every time {@code buildClient()} is called, a new instance of {@link LocalCryptographyClient} is created.\n+     *\n+     * <p> The LocalCryptographyClientBuilder#key(JsonWebKey) jsonWebKey identifier} is required to build the {@link\n+     * LocalCryptographyClient async client}.</p>\n+     *\n+     * @return A {@link LocalCryptographyClient} with the options set from the builder.\n+     * @throws IllegalStateException If ({@link LocalCryptographyClientBuilder#key(JsonWebKey)} is not set.\n+     */\n+    public LocalCryptographyClient buildClient() {\n+        return new LocalCryptographyClient(buildAsyncClient());\n+    }\n+\n+    /**\n+     * Creates a {@link LocalCryptographyAsyncClient} based on options set in the builder. Every time\n+     * {@link #buildAsyncClient()} is called, a new instance of {@link LocalCryptographyAsyncClient} is created.\n+     *\n+     * <p> The LocalCryptographyClientBuilder#key(JsonWebKey) jsonWebKey} is required to build the {@link\n+     * LocalCryptographyAsyncClient async client}.</p>\n+     *\n+     * @return A {@link LocalCryptographyAsyncClient} with the options set from the builder.\n+     * @throws IllegalStateException If {@link LocalCryptographyClientBuilder#key(JsonWebKey)} is not set.\n+     */\n+    public LocalCryptographyAsyncClient buildAsyncClient() {\n+        if (jsonWebKey == null) {\n+            throw logger.logExceptionAsError(new IllegalStateException(\n+                \"Json Web Key is required to create local cryptography client\"));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0db6ccc8d80c108c68c5a19a96262382d690b89a"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8e93146c5e78f34bc6b8301e5bd641361a2daad", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c8e93146c5e78f34bc6b8301e5bd641361a2daad", "committedDate": "2020-04-09T02:22:32Z", "message": "address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22a0e6b6d19795fb494038e175731459322db2e3", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/22a0e6b6d19795fb494038e175731459322db2e3", "committedDate": "2020-04-09T02:54:30Z", "message": "Merge remote-tracking branch 'upstream/master' into localCryptoclient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51982c38ec290bdbea4fef961d896a24887bdc3a", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/51982c38ec290bdbea4fef961d896a24887bdc3a", "committedDate": "2020-04-09T15:35:03Z", "message": "fix checkstyle"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1326, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}