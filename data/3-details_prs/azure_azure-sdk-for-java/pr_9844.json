{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3OTY4NzE1", "number": 9844, "title": "Servicebus track2 change LockToken from UUID to string ", "bodyText": "", "createdAt": "2020-04-03T06:32:50Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9844", "merged": true, "mergeCommit": {"oid": "f4c01371144218f3f2e2f9d7df2d4bc65ef103e2"}, "closed": true, "closedAt": "2020-04-04T07:02:48Z", "author": {"login": "hemanttanwar"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcT6TVFgH2gAyMzk3OTY4NzE1OjdiNjAwZjIzMTUxZGQyZjNlMjI0ZWVmY2U4NjM2N2VhNjVjMWViNmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcUPYsdgH2gAyMzk3OTY4NzE1OmZiMDc3MzliMThjYmZiYmQ3MmY4ZGZjYjVmMWM4ZTFlNTI4NzAyMTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7b600f23151dd2f3e224eefce86367ea65c1eb6e", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7b600f23151dd2f3e224eefce86367ea65c1eb6e", "committedDate": "2020-04-03T05:46:15Z", "message": "Initial design option for Locktoken as String"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e09382ff748b0e1c1312e21200ae64eaab174f2", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3e09382ff748b0e1c1312e21200ae64eaab174f2", "committedDate": "2020-04-03T06:29:36Z", "message": "Updated test with string for uuid"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "747532725a17a006de62cb3fb116d2c24d581757", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/747532725a17a006de62cb3fb116d2c24d581757", "committedDate": "2020-04-03T15:41:46Z", "message": "changing docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8204b99a0985ede2dc39aa18dc5d368d47d4a4ff", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8204b99a0985ede2dc39aa18dc5d368d47d4a4ff", "committedDate": "2020-04-03T15:43:31Z", "message": "changing docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MzcwNjIw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9844#pullrequestreview-387370620", "createdAt": "2020-04-03T15:41:46Z", "commit": {"oid": "3e09382ff748b0e1c1312e21200ae64eaab174f2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTo0MTo0NlrOGAbAYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTo0MzoyM1rOGAbEZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NTY1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return {@link String} representation of {@link UUID}, which represents the lock-token.\n          \n          \n            \n            @return Lock token for the message.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9844#discussion_r403095651", "createdAt": "2020-04-03T15:41:46Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/MessageLockToken.java", "diffHunk": "@@ -5,26 +5,28 @@\n \n import java.util.UUID;\n \n+import com.azure.messaging.servicebus.models.ReceiveMode;\n /**\n- * Type representing the lock-token.\n+ * Type representing the lock-token. The lock token is a reference to the lock that is being held by the Service Bus in\n+ * {@link ReceiveMode#PEEK_LOCK} mode.\n  */\n public interface MessageLockToken {\n \n     /**\n      * Gets the lock token.\n      *\n-     * @return {@link UUID} representing the lock-token.\n+     * @return {@link String} representation of {@link UUID}, which represents the lock-token.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e09382ff748b0e1c1312e21200ae64eaab174f2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NjY3Ng==", "bodyText": "The fact that it is a UUID is an implementation detail. External customers wouldn't care; they want to know that if they pass this string into our functions, it'll do the operation for that message. Remove it from the comments.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9844#discussion_r403096676", "createdAt": "2020-04-03T15:43:23Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/MessageLockToken.java", "diffHunk": "@@ -5,26 +5,28 @@\n \n import java.util.UUID;\n \n+import com.azure.messaging.servicebus.models.ReceiveMode;\n /**\n- * Type representing the lock-token.\n+ * Type representing the lock-token. The lock token is a reference to the lock that is being held by the Service Bus in\n+ * {@link ReceiveMode#PEEK_LOCK} mode.\n  */\n public interface MessageLockToken {\n \n     /**\n      * Gets the lock token.\n      *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e09382ff748b0e1c1312e21200ae64eaab174f2"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54e5b43f90a6905678a3a0d00d4f08182a6dda73", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/54e5b43f90a6905678a3a0d00d4f08182a6dda73", "committedDate": "2020-04-03T21:14:29Z", "message": "test change for complete"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5be089a6ba9a6c8ae474cf721601e98705de13f0", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5be089a6ba9a6c8ae474cf721601e98705de13f0", "committedDate": "2020-04-03T21:19:37Z", "message": "test change for complete"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "688f927332afb876e945e816bc3cdddb03e71f23", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/688f927332afb876e945e816bc3cdddb03e71f23", "committedDate": "2020-04-03T21:24:27Z", "message": "added property"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a8cfb24ed5739a161337dd7a41d27a457587798", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7a8cfb24ed5739a161337dd7a41d27a457587798", "committedDate": "2020-04-03T21:27:37Z", "message": "added check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8f7955f481266baa0d6da634f330ca904a17dce", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f8f7955f481266baa0d6da634f330ca904a17dce", "committedDate": "2020-04-03T21:29:23Z", "message": "added check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NTk1Nzgx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9844#pullrequestreview-387595781", "createdAt": "2020-04-03T21:37:52Z", "commit": {"oid": "f8f7955f481266baa0d6da634f330ca904a17dce"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTozNzo1MlrOGAqdow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTo0MToyNFrOGAqiUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0ODg5OQ==", "bodyText": "Return type shows it's a string. \"The lock token of this message\" is enough.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9844#discussion_r403348899", "createdAt": "2020-04-03T21:37:52Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java", "diffHunk": "@@ -172,14 +172,14 @@ public String getLabel() {\n      * href=\"https://docs.microsoft.com/azure/service-bus-messaging/message-deferral\">Deferral API</a> and, with that,\n      * take the message out of the regular delivery state flow. This property is read-only.\n      *\n-     * @return lock token of this message.\n+     * @return {@link String} representing the lock-token for this message.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8f7955f481266baa0d6da634f330ca904a17dce"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0OTI5OQ==", "bodyText": "Null or empty is two checks. NullPointer for when getLockToken() == null and if it is empty, illegal argument exception.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9844#discussion_r403349299", "createdAt": "2020-04-03T21:39:03Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -436,12 +438,22 @@ public String getEntityPath() {\n                 String.format(INVALID_OPERATION_DISPOSED_RECEIVER, \"renewMessageLock\")));\n         } else if (Objects.isNull(lockToken)) {\n             return monoError(logger, new NullPointerException(\"'receivedMessage' cannot be null.\"));\n+        } else if (CoreUtils.isNullOrEmpty(lockToken.getLockToken())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8f7955f481266baa0d6da634f330ca904a17dce"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0OTU2MA==", "bodyText": "shouldn't we propagate the same error back? It is an illegalargument exception because it couldn't be converted to a UUID. It's not dependent on the state of this receiver.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9844#discussion_r403349560", "createdAt": "2020-04-03T21:39:47Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -436,12 +438,22 @@ public String getEntityPath() {\n                 String.format(INVALID_OPERATION_DISPOSED_RECEIVER, \"renewMessageLock\")));\n         } else if (Objects.isNull(lockToken)) {\n             return monoError(logger, new NullPointerException(\"'receivedMessage' cannot be null.\"));\n+        } else if (CoreUtils.isNullOrEmpty(lockToken.getLockToken())) {\n+            return monoError(logger, new NullPointerException(\"'receivedMessage.lockToken' cannot be null.\"));\n+        }\n+\n+        UUID lockTokenUUID;\n+        try {\n+            lockTokenUUID = UUID.fromString(lockToken.getLockToken());\n+        } catch (IllegalArgumentException ex) {\n+            return monoError(logger, new IllegalStateException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8f7955f481266baa0d6da634f330ca904a17dce"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0OTY2NA==", "bodyText": "Same. null and empty are two different checks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9844#discussion_r403349664", "createdAt": "2020-04-03T21:40:06Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -501,15 +513,16 @@ public void close() {\n             return monoError(logger, new NullPointerException(\"'message' cannot be null.\"));\n         }\n \n-        final UUID lockToken = message.getLockToken();\n+\n         if (receiveMode != ReceiveMode.PEEK_LOCK) {\n             return Mono.error(logger.logExceptionAsError(new UnsupportedOperationException(String.format(\n                 \"'%s' is not supported on a receiver opened in ReceiveMode.RECEIVE_AND_DELETE.\", dispositionStatus))));\n-        } else if (lockToken == null) {\n+        } else if (CoreUtils.isNullOrEmpty(message.getLockToken())) {\n             return Mono.error(logger.logExceptionAsError(new IllegalArgumentException(\n-                \"'message.getLockToken()' cannot be null.\")));\n+                \"'message.lockToken' cannot be null.\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8f7955f481266baa0d6da634f330ca904a17dce"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0OTg0Nw==", "bodyText": "Remove these debug statements and dofinally.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9844#discussion_r403349847", "createdAt": "2020-04-03T21:40:36Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleAsyncSample.java", "diffHunk": "@@ -45,18 +45,22 @@ public static void main(String[] args) {\n             .buildAsyncClient();\n \n         Disposable subscription = receiverAsyncClient.receive()\n-            .map(message -> {\n+            .flatMap(message -> {\n                 boolean messageProcessed =  false;\n                 // Process the message here.\n                 // Change the `messageProcessed` according to you business logic and if you are able to process the\n                 // message successfully.\n \n                 if (messageProcessed) {\n-                    System.out.println(\"Completing message ...\");\n-                    return receiverAsyncClient.complete(message).then();\n+                    return receiverAsyncClient.complete(message)\n+                        .doFinally(signalType -> {\n+                            System.out.println(\"Message completed.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8f7955f481266baa0d6da634f330ca904a17dce"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0OTkyOQ==", "bodyText": "why flatmap?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9844#discussion_r403349929", "createdAt": "2020-04-03T21:40:51Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleAsyncSample.java", "diffHunk": "@@ -45,18 +45,22 @@ public static void main(String[] args) {\n             .buildAsyncClient();\n \n         Disposable subscription = receiverAsyncClient.receive()\n-            .map(message -> {\n+            .flatMap(message -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8f7955f481266baa0d6da634f330ca904a17dce"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1MDA5OQ==", "bodyText": "fromString is a better fit. When you're doing this conversion, I'd check that this is a valid UUID and if not, throw an exception.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9844#discussion_r403350099", "createdAt": "2020-04-03T21:41:24Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/MessageLockToken.java", "diffHunk": "@@ -3,28 +3,28 @@\n \n package com.azure.messaging.servicebus;\n \n-import java.util.UUID;\n-\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n /**\n- * Type representing the lock-token.\n+ * Type representing the lock-token. The lock token is a reference to the lock that is being held by the Service Bus in\n+ * {@link ReceiveMode#PEEK_LOCK} mode.\n  */\n public interface MessageLockToken {\n \n     /**\n      * Gets the lock token.\n      *\n-     * @return {@link UUID} representing the lock-token.\n+     * @return Lock token for the message.\n      */\n-    UUID getLockToken();\n+    String getLockToken();\n \n     /**\n-     * Created the {@link MessageLockToken} given a {@link UUID}.\n+     * Created the {@link MessageLockToken} given a {@link String}.\n      *\n-     * @param uuid to use for creating {@link MessageLockToken} instance;\n+     * @param token {@link String} for creating {@link MessageLockToken} instance;\n      *\n      * @return The created {@link MessageLockToken} object.\n      */\n-    static MessageLockToken fromUuid(UUID uuid) {\n-        return () -> uuid;\n+    static MessageLockToken fromToken(String token) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8f7955f481266baa0d6da634f330ca904a17dce"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d28aeb874b13b01cf11e49c0b06c60a0f70b7cbf", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d28aeb874b13b01cf11e49c0b06c60a0f70b7cbf", "committedDate": "2020-04-03T22:47:23Z", "message": "review comments and added checks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjI3MTgw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9844#pullrequestreview-387627180", "createdAt": "2020-04-03T23:06:54Z", "commit": {"oid": "d28aeb874b13b01cf11e49c0b06c60a0f70b7cbf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMzowNjo1NFrOGAsMSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMzowNjo1NFrOGAsMSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3NzIyNQ==", "bodyText": "You'll get a warning to use logger.logErrorAsException then throw.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9844#discussion_r403377225", "createdAt": "2020-04-03T23:06:54Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -428,20 +429,31 @@ public String getEntityPath() {\n      * @throws NullPointerException if {@code lockToken} is null.\n      * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n      *     mode.\n-     * @throws IllegalArgumentException if {@link MessageLockToken#getLockToken()} returns a null lock token.\n+     * @throws IllegalArgumentException if {@link MessageLockToken#getLockToken()} returns an empty value.\n      */\n     public Mono<Instant> renewMessageLock(MessageLockToken lockToken) {\n         if (isDisposed.get()) {\n             return monoError(logger, new IllegalStateException(\n                 String.format(INVALID_OPERATION_DISPOSED_RECEIVER, \"renewMessageLock\")));\n         } else if (Objects.isNull(lockToken)) {\n             return monoError(logger, new NullPointerException(\"'receivedMessage' cannot be null.\"));\n+        } else if (Objects.isNull(lockToken.getLockToken())) {\n+            return monoError(logger, new NullPointerException(\"'receivedMessage.lockToken' cannot be null.\"));\n+        } else if (lockToken.getLockToken().isEmpty()) {\n+            return monoError(logger, new IllegalArgumentException(\"'message.lockToken' cannot be empty.\"));\n+        }\n+\n+        UUID lockTokenUUID;\n+        try {\n+            lockTokenUUID = UUID.fromString(lockToken.getLockToken());\n+        } catch (IllegalArgumentException ex) {\n+            throw ex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d28aeb874b13b01cf11e49c0b06c60a0f70b7cbf"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjI3MjUz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9844#pullrequestreview-387627253", "createdAt": "2020-04-03T23:07:11Z", "commit": {"oid": "d28aeb874b13b01cf11e49c0b06c60a0f70b7cbf"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMzowNzoxMVrOGAsMgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMzowNzoxMVrOGAsMgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3NzI4MA==", "bodyText": "lockTokenUUID -> lockTokenUuid", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9844#discussion_r403377280", "createdAt": "2020-04-03T23:07:11Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -428,20 +429,31 @@ public String getEntityPath() {\n      * @throws NullPointerException if {@code lockToken} is null.\n      * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n      *     mode.\n-     * @throws IllegalArgumentException if {@link MessageLockToken#getLockToken()} returns a null lock token.\n+     * @throws IllegalArgumentException if {@link MessageLockToken#getLockToken()} returns an empty value.\n      */\n     public Mono<Instant> renewMessageLock(MessageLockToken lockToken) {\n         if (isDisposed.get()) {\n             return monoError(logger, new IllegalStateException(\n                 String.format(INVALID_OPERATION_DISPOSED_RECEIVER, \"renewMessageLock\")));\n         } else if (Objects.isNull(lockToken)) {\n             return monoError(logger, new NullPointerException(\"'receivedMessage' cannot be null.\"));\n+        } else if (Objects.isNull(lockToken.getLockToken())) {\n+            return monoError(logger, new NullPointerException(\"'receivedMessage.lockToken' cannot be null.\"));\n+        } else if (lockToken.getLockToken().isEmpty()) {\n+            return monoError(logger, new IllegalArgumentException(\"'message.lockToken' cannot be empty.\"));\n+        }\n+\n+        UUID lockTokenUUID;\n+        try {\n+            lockTokenUUID = UUID.fromString(lockToken.getLockToken());\n+        } catch (IllegalArgumentException ex) {\n+            throw ex;\n         }\n \n         return connectionProcessor\n             .flatMap(connection -> connection.getManagementNode(entityPath, entityType))\n             .flatMap(serviceBusManagementNode ->\n-                serviceBusManagementNode.renewMessageLock(lockToken.getLockToken()))\n+                serviceBusManagementNode.renewMessageLock(lockTokenUUID))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d28aeb874b13b01cf11e49c0b06c60a0f70b7cbf"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6089f992c0d86c5a66070a609634eea1f6423cb3", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6089f992c0d86c5a66070a609634eea1f6423cb3", "committedDate": "2020-04-04T00:17:47Z", "message": "Review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f0da0f03114bfeb6a2f20d936936f1b92b119f5", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6f0da0f03114bfeb6a2f20d936936f1b92b119f5", "committedDate": "2020-04-04T05:32:48Z", "message": "unit test changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb07739b18cbfbbd72f8dfcb5f1c8e1e52870212", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fb07739b18cbfbbd72f8dfcb5f1c8e1e52870212", "committedDate": "2020-04-04T06:20:07Z", "message": "unit test fix"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1161, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}