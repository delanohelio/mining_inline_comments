{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MzE1MzIx", "number": 14696, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOToyMzoyMVrOEfXnPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODowNToyOFrOEfkhxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzI4MTkwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOToyMzoyMVrOHLmoKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOToyMzoyMVrOHLmoKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkyOTI1OQ==", "bodyText": "There is no longer a lock token that's accepted. This probably applies to all the other docs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14696#discussion_r481929259", "createdAt": "2020-09-02T09:23:21Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -187,54 +187,38 @@ public String getEntityPath() {\n     }\n \n     /**\n-     * Abandon a {@link ServiceBusReceivedMessage message} with its lock token. This will make the message available\n+     * Abandon a {@link ServiceBusReceivedMessage message}. This will make the message available\n      * again for processing. Abandoning a message will increase the delivery count on the message.\n      *\n-     * @param lockToken Lock token of the message.\n-     *\n-     * @return A {@link Mono} that completes when the Service Bus abandon operation completes.\n-     * @throws NullPointerException if {@code lockToken} is null.\n-     * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n-     *     mode.\n-     * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n-     */\n-    public Mono<Void> abandon(String lockToken) {\n-        return abandon(lockToken, receiverOptions.getSessionId());\n-    }\n-\n-    /**\n-     * Abandon a {@link ServiceBusReceivedMessage message} with its lock token. This will make the message available\n-     * again for processing. Abandoning a message will increase the delivery count on the message.\n-     *\n-     * @param lockToken Lock token of the message.\n-     * @param sessionId Session id of the message to abandon. {@code null} if there is no session.\n+     * @param message The {@link ServiceBusReceivedMessage} message.\n      *\n      * @return A {@link Mono} that completes when the Service Bus abandon operation completes.\n      * @throws NullPointerException if {@code lockToken} is null.\n      * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n      *     mode.\n      * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n      */\n-    public Mono<Void> abandon(String lockToken, String sessionId) {\n-        return abandon(lockToken, null, sessionId);\n+    public Mono<Void> abandon(ServiceBusReceivedMessage message) {\n+        return abandon(message, null);\n     }\n \n     /**\n-     * Abandon a {@link ServiceBusReceivedMessage message} with its lock token and updates the message's properties.\n+     * Abandon a {@link ServiceBusReceivedMessage message} updates the message's properties.\n      * This will make the message available again for processing. Abandoning a message will increase the delivery count\n      * on the message.\n      *\n-     * @param lockToken Lock token of the message.\n+     * @param message The {@link ServiceBusReceivedMessage} message.\n      * @param propertiesToModify Properties to modify on the message.\n      *\n      * @return A {@link Mono} that completes when the Service Bus operation finishes.\n-     * @throws NullPointerException if {@code lockToken} is null.\n+     * @throws NullPointerException if {@code lockToken} or {@code message} is null.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb5a7fa0815b93a5a3a36962e69db32c1c19973"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzMxNTIwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTozMTo0NlrOHLm8rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTozMTo0NlrOHLm8rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkzNDUwOA==", "bodyText": "It's not possible for lock token to be null because they cannot create a ServiceBusReceivedMessage instance on their own. Same with other instances of this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14696#discussion_r481934508", "createdAt": "2020-09-02T09:31:46Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -244,164 +228,78 @@ public String getEntityPath() {\n      * <p><strong>Complete a message with a transaction</strong></p>\n      * {@codesnippet com.azure.messaging.servicebus.servicebusasyncreceiverclient.abandonMessageWithTransaction}\n      *\n-     * @param lockToken Lock token of the message.\n+     * @param message The {@link ServiceBusReceivedMessage} message.\n      * @param propertiesToModify Properties to modify on the message.\n      * @param transactionContext in which this operation is taking part in. The transaction should be created first by\n      * {@link ServiceBusReceiverAsyncClient#createTransaction()} or\n      * {@link ServiceBusSenderAsyncClient#createTransaction()}.\n      *\n      * @return A {@link Mono} that completes when the Service Bus operation finishes.\n-     * @throws NullPointerException if {@code lockToken}, {@code transactionContext} or\n-     * {@code transactionContext.transactionId} is null.\n+     * @throws NullPointerException if {@code transactionContext}, {@code message},\n+     * {@link ServiceBusReceivedMessage#getLockToken()} or {@code transactionContext.transactionId} is null.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb5a7fa0815b93a5a3a36962e69db32c1c19973"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzM2MTgxOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTo0NDoyNlrOHLnZdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTo0NDoyNlrOHLnZdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk0MTg3Ng==", "bodyText": "The docs will be odd to read. It'll show up as The ServiceBusReceivedMessage messge.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14696#discussion_r481941876", "createdAt": "2020-09-02T09:44:26Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -446,64 +327,21 @@ public String getEntityPath() {\n      * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n      * @see <a href=\"https://docs.microsoft.com/azure/service-bus-messaging/message-deferral\">Message deferral</a>\n      */\n-    public Mono<Void> defer(String lockToken, Map<String, Object> propertiesToModify) {\n-        return defer(lockToken, propertiesToModify, receiverOptions.getSessionId());\n+    public Mono<Void> defer(ServiceBusReceivedMessage message, Map<String, Object> propertiesToModify) {\n+        return updateDisposition(message, DispositionStatus.DEFERRED, null, null,\n+            propertiesToModify, null);\n     }\n \n     /**\n-     * Defers a {@link ServiceBusReceivedMessage message} using its lock token with modified message property. This will\n+     * Defers a {@link ServiceBusReceivedMessage message} with modified message property. This will\n      * move message into the deferred subqueue.\n      *\n-     * @param lockToken Lock token of the message.\n+     * @param message The {@link ServiceBusReceivedMessage} message.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb5a7fa0815b93a5a3a36962e69db32c1c19973"}, "originalPosition": 305}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzM2NjE3OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTo0NToyOVrOHLncAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTo0NToyOVrOHLncAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk0MjUzMA==", "bodyText": "You don't need these checks because SBRM is instantiated by us.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14696#discussion_r481942530", "createdAt": "2020-09-02T09:45:29Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1264,17 +1041,23 @@ private boolean isManagementToken(String lockToken) {\n         return managementNodeLocks.containsUnexpired(lockToken);\n     }\n \n-    private Mono<Void> updateDisposition(String lockToken, DispositionStatus dispositionStatus,\n+    private Mono<Void> updateDisposition(ServiceBusReceivedMessage message, DispositionStatus dispositionStatus,\n         String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify,\n-        String sessionId, ServiceBusTransactionContext transactionContext) {\n-\n+        ServiceBusTransactionContext transactionContext) {\n         if (isDisposed.get()) {\n             return monoError(logger, new IllegalStateException(\n                 String.format(INVALID_OPERATION_DISPOSED_RECEIVER, dispositionStatus.getValue())));\n-        } else if (Objects.isNull(lockToken)) {\n-            return monoError(logger, new NullPointerException(\"'lockToken' cannot be null.\"));\n+        } else if (Objects.isNull(message)) {\n+            return monoError(logger, new NullPointerException(\"'message' cannot be null.\"));\n+        }\n+\n+        final String lockToken = message.getLockToken();\n+        final String sessionId = message.getSessionId();\n+\n+        if (Objects.isNull(lockToken)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb5a7fa0815b93a5a3a36962e69db32c1c19973"}, "originalPosition": 551}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzM2ODU1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleAsyncSample.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTo0NjowM1rOHLndYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjo0MTo1MVrOHL336A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk0Mjg4Mg==", "bodyText": "These javadocs are not correct.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14696#discussion_r481942882", "createdAt": "2020-09-02T09:46:03Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleAsyncSample.java", "diffHunk": "@@ -9,10 +9,10 @@\n \n /**\n  * Sample demonstrates how to receive an {@link ServiceBusReceivedMessage} from an Azure Service Bus Queue and settle\n- * it. Settling of message include {@link ServiceBusReceiverAsyncClient#complete(String) complete()}, {@link\n- * ServiceBusReceiverAsyncClient#defer(String) defer()},\n- * {@link ServiceBusReceiverAsyncClient#abandon(String) abandon}, or\n- * {@link ServiceBusReceiverAsyncClient#deadLetter(String) dead-letter} a message.\n+ * it. Settling of message include {@link ServiceBusReceiverAsyncClient#complete(ServiceBusReceivedMessage)} complete()}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb5a7fa0815b93a5a3a36962e69db32c1c19973"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIxMTgxNg==", "bodyText": "you mean it has extra } . I removed it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14696#discussion_r482211816", "createdAt": "2020-09-02T16:41:51Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleAsyncSample.java", "diffHunk": "@@ -9,10 +9,10 @@\n \n /**\n  * Sample demonstrates how to receive an {@link ServiceBusReceivedMessage} from an Azure Service Bus Queue and settle\n- * it. Settling of message include {@link ServiceBusReceiverAsyncClient#complete(String) complete()}, {@link\n- * ServiceBusReceiverAsyncClient#defer(String) defer()},\n- * {@link ServiceBusReceiverAsyncClient#abandon(String) abandon}, or\n- * {@link ServiceBusReceiverAsyncClient#deadLetter(String) dead-letter} a message.\n+ * it. Settling of message include {@link ServiceBusReceiverAsyncClient#complete(ServiceBusReceivedMessage)} complete()}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk0Mjg4Mg=="}, "originalCommit": {"oid": "acb5a7fa0815b93a5a3a36962e69db32c1c19973"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTM3MjkwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzo1ODoyOFrOHL640Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzo1ODoyOFrOHL640Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2MTIwMQ==", "bodyText": "There is no lock token.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14696#discussion_r482261201", "createdAt": "2020-09-02T17:58:28Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -69,385 +69,195 @@ public String getEntityPath() {\n     }\n \n     /**\n-     * Abandon a {@link ServiceBusReceivedMessage message} with its lock token. This will make the message available\n+     * Abandon a {@link ServiceBusReceivedMessage message}. This will make the message available\n      * again for processing. Abandoning a message will increase the delivery count on the message.\n      *\n-     * @param lockToken Lock token of the message.\n-     *\n-     * @throws NullPointerException if {@code lockToken} is null.\n-     * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n-     *     mode.\n-     * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n-     */\n-    public void abandon(String lockToken) {\n-        asyncClient.abandon(lockToken).block(operationTimeout);\n-    }\n-\n-    /**\n-     * Abandon a {@link ServiceBusReceivedMessage message} with its lock token and updates the message's properties.\n-     * This will make the message available again for processing. Abandoning a message will increase the delivery count\n-     * on the message.\n-     *\n-     * @param lockToken Lock token of the message.\n-     * @param propertiesToModify Properties to modify on the message.\n-     *\n-     * @throws NullPointerException if {@code lockToken} is null.\n-     * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n-     *     mode.\n-     * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n-     */\n-    public void abandon(String lockToken, Map<String, Object> propertiesToModify) {\n-        asyncClient.abandon(lockToken, propertiesToModify).block(operationTimeout);\n-    }\n-\n-    /**\n-     * Abandon a {@link ServiceBusReceivedMessage message} with its lock token and updates the message's properties.\n-     * This will make the message available again for processing. Abandoning a message will increase the delivery count\n-     * on the message.\n+     * @param message The {@link ServiceBusReceivedMessage} to perform this operation.\n      *\n-     * @param lockToken Lock token of the message.\n-     * @param propertiesToModify Properties to modify on the message.\n-     * @param transactionContext in which this operation is taking part in. The transaction should be created first by\n-     * {@link ServiceBusReceiverClient#createTransaction()} or {@link ServiceBusSenderClient#createTransaction()}.\n-     *\n-     * @throws NullPointerException if {@code lockToken}, {@code transactionContext} or\n-     * {@code transactionContext.transactionId} is null.\n+     * @throws NullPointerException if {@code message} is null.\n      * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n      *     mode.\n      * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n      */\n-    public void abandon(String lockToken, Map<String, Object> propertiesToModify,\n-        ServiceBusTransactionContext transactionContext) {\n-\n-        asyncClient.abandon(lockToken, propertiesToModify, transactionContext).block(operationTimeout);\n+    public void abandon(ServiceBusReceivedMessage message) {\n+        asyncClient.abandon(message).block(operationTimeout);\n     }\n \n     /**\n-     * Abandon a {@link ServiceBusReceivedMessage message} with its lock token and updates the message's properties.\n+     * Abandon a {@link ServiceBusReceivedMessage message} updates the message's properties.\n      * This will make the message available again for processing. Abandoning a message will increase the delivery count\n      * on the message.\n      *\n-     * @param lockToken Lock token of the message.\n+     * @param message The {@link ServiceBusReceivedMessage} to perform this operation.\n      * @param propertiesToModify Properties to modify on the message.\n-     * @param sessionId Session id of the message to abandon. {@code null} if there is no session.\n      *\n-     * @throws NullPointerException if {@code lockToken} is null.\n+     * @throws NullPointerException if {@code message} is null.\n      * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n      *     mode.\n      * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n      */\n-    public void abandon(String lockToken, Map<String, Object> propertiesToModify, String sessionId) {\n-        asyncClient.abandon(lockToken, propertiesToModify, sessionId).block(operationTimeout);\n+    public void abandon(ServiceBusReceivedMessage message, Map<String, Object> propertiesToModify) {\n+        asyncClient.abandon(message, propertiesToModify).block(operationTimeout);\n     }\n \n     /**\n-     * Abandon a {@link ServiceBusReceivedMessage message} with its lock token and updates the message's properties.\n+     * Abandon a {@link ServiceBusReceivedMessage message} updates the message's properties.\n      * This will make the message available again for processing. Abandoning a message will increase the delivery count\n      * on the message.\n      *\n-     * @param lockToken Lock token of the message.\n+     * @param message The {@link ServiceBusReceivedMessage} to perform this operation.\n      * @param propertiesToModify Properties to modify on the message.\n-     * @param sessionId Session id of the message to abandon. {@code null} if there is no session.\n      * @param transactionContext in which this operation is taking part in. The transaction should be created first by\n      * {@link ServiceBusReceiverClient#createTransaction()} or {@link ServiceBusSenderClient#createTransaction()}.\n      *\n-     * @throws NullPointerException if {@code lockToken}, {@code transactionContext} or\n+     * @throws NullPointerException if {@code message}, {@code transactionContext} or\n      * {@code transactionContext.transactionId} is null.\n      * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n      *     mode.\n      * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n      */\n-    public void abandon(String lockToken, Map<String, Object> propertiesToModify, String sessionId,\n+    public void abandon(ServiceBusReceivedMessage message, Map<String, Object> propertiesToModify,\n         ServiceBusTransactionContext transactionContext) {\n-        asyncClient.abandon(lockToken, propertiesToModify, sessionId, transactionContext).block(operationTimeout);\n-    }\n-\n-    /**\n-     * Completes a {@link ServiceBusReceivedMessage message} using its lock token. This will delete the message from the\n-     * service.\n-     *\n-     * @param lockToken Lock token of the message.\n-     *\n-     * @throws NullPointerException if {@code lockToken} is null.\n-     * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n-     *     mode.\n-     * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n-     */\n-    public void complete(String lockToken) {\n-        asyncClient.complete(lockToken).block(operationTimeout);\n-    }\n \n-    /**\n-     * Completes a {@link ServiceBusReceivedMessage message} using its lock token. This will delete the message from the\n-     * service.\n-     *\n-     * @param lockToken Lock token of the message.\n-     * @param transactionContext in which this operation is taking part in. The transaction should be created first by\n-     * {@link ServiceBusReceiverClient#createTransaction()} or {@link ServiceBusSenderClient#createTransaction()}.\n-     *\n-     * @throws NullPointerException if {@code lockToken}, {@code transactionContext} or\n-     * {@code transactionContext.transactionId} is null.\n-     * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n-     *     mode.\n-     * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n-     */\n-    public void complete(String lockToken, ServiceBusTransactionContext transactionContext) {\n-        asyncClient.complete(lockToken, transactionContext).block(operationTimeout);\n+        asyncClient.abandon(message, propertiesToModify, transactionContext).block(operationTimeout);\n     }\n \n     /**\n-     * Completes a {@link ServiceBusReceivedMessage message} using its lock token. This will delete the message from the\n-     * service.\n+     * Completes a {@link ServiceBusReceivedMessage message}. This will delete the message from the service.\n      *\n-     * @param lockToken Lock token of the message.\n-     * @param sessionId Session id of the message to complete. {@code null} if there is no session.\n+     * @param message The {@link ServiceBusReceivedMessage} to perform this operation.\n      *\n-     * @throws NullPointerException if {@code lockToken} is null.\n+     * @throws NullPointerException if {@code message} is null.\n      * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n      *     mode.\n      * @throws IllegalArgumentException if {@code lockToken} is an empty value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcbd4909c93cc727e7c4f6ab2ef0c6fb819a44dc"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTM3NDEwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzo1ODo1MFrOHL65mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzo1ODo1MFrOHL65mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2MTQwMQ==", "bodyText": "There is no lock token. And it should be updated for all other instances.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14696#discussion_r482261401", "createdAt": "2020-09-02T17:58:50Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -69,385 +69,195 @@ public String getEntityPath() {\n     }\n \n     /**\n-     * Abandon a {@link ServiceBusReceivedMessage message} with its lock token. This will make the message available\n+     * Abandon a {@link ServiceBusReceivedMessage message}. This will make the message available\n      * again for processing. Abandoning a message will increase the delivery count on the message.\n      *\n-     * @param lockToken Lock token of the message.\n-     *\n-     * @throws NullPointerException if {@code lockToken} is null.\n-     * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n-     *     mode.\n-     * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n-     */\n-    public void abandon(String lockToken) {\n-        asyncClient.abandon(lockToken).block(operationTimeout);\n-    }\n-\n-    /**\n-     * Abandon a {@link ServiceBusReceivedMessage message} with its lock token and updates the message's properties.\n-     * This will make the message available again for processing. Abandoning a message will increase the delivery count\n-     * on the message.\n-     *\n-     * @param lockToken Lock token of the message.\n-     * @param propertiesToModify Properties to modify on the message.\n-     *\n-     * @throws NullPointerException if {@code lockToken} is null.\n-     * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n-     *     mode.\n-     * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n-     */\n-    public void abandon(String lockToken, Map<String, Object> propertiesToModify) {\n-        asyncClient.abandon(lockToken, propertiesToModify).block(operationTimeout);\n-    }\n-\n-    /**\n-     * Abandon a {@link ServiceBusReceivedMessage message} with its lock token and updates the message's properties.\n-     * This will make the message available again for processing. Abandoning a message will increase the delivery count\n-     * on the message.\n+     * @param message The {@link ServiceBusReceivedMessage} to perform this operation.\n      *\n-     * @param lockToken Lock token of the message.\n-     * @param propertiesToModify Properties to modify on the message.\n-     * @param transactionContext in which this operation is taking part in. The transaction should be created first by\n-     * {@link ServiceBusReceiverClient#createTransaction()} or {@link ServiceBusSenderClient#createTransaction()}.\n-     *\n-     * @throws NullPointerException if {@code lockToken}, {@code transactionContext} or\n-     * {@code transactionContext.transactionId} is null.\n+     * @throws NullPointerException if {@code message} is null.\n      * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n      *     mode.\n      * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n      */\n-    public void abandon(String lockToken, Map<String, Object> propertiesToModify,\n-        ServiceBusTransactionContext transactionContext) {\n-\n-        asyncClient.abandon(lockToken, propertiesToModify, transactionContext).block(operationTimeout);\n+    public void abandon(ServiceBusReceivedMessage message) {\n+        asyncClient.abandon(message).block(operationTimeout);\n     }\n \n     /**\n-     * Abandon a {@link ServiceBusReceivedMessage message} with its lock token and updates the message's properties.\n+     * Abandon a {@link ServiceBusReceivedMessage message} updates the message's properties.\n      * This will make the message available again for processing. Abandoning a message will increase the delivery count\n      * on the message.\n      *\n-     * @param lockToken Lock token of the message.\n+     * @param message The {@link ServiceBusReceivedMessage} to perform this operation.\n      * @param propertiesToModify Properties to modify on the message.\n-     * @param sessionId Session id of the message to abandon. {@code null} if there is no session.\n      *\n-     * @throws NullPointerException if {@code lockToken} is null.\n+     * @throws NullPointerException if {@code message} is null.\n      * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n      *     mode.\n      * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n      */\n-    public void abandon(String lockToken, Map<String, Object> propertiesToModify, String sessionId) {\n-        asyncClient.abandon(lockToken, propertiesToModify, sessionId).block(operationTimeout);\n+    public void abandon(ServiceBusReceivedMessage message, Map<String, Object> propertiesToModify) {\n+        asyncClient.abandon(message, propertiesToModify).block(operationTimeout);\n     }\n \n     /**\n-     * Abandon a {@link ServiceBusReceivedMessage message} with its lock token and updates the message's properties.\n+     * Abandon a {@link ServiceBusReceivedMessage message} updates the message's properties.\n      * This will make the message available again for processing. Abandoning a message will increase the delivery count\n      * on the message.\n      *\n-     * @param lockToken Lock token of the message.\n+     * @param message The {@link ServiceBusReceivedMessage} to perform this operation.\n      * @param propertiesToModify Properties to modify on the message.\n-     * @param sessionId Session id of the message to abandon. {@code null} if there is no session.\n      * @param transactionContext in which this operation is taking part in. The transaction should be created first by\n      * {@link ServiceBusReceiverClient#createTransaction()} or {@link ServiceBusSenderClient#createTransaction()}.\n      *\n-     * @throws NullPointerException if {@code lockToken}, {@code transactionContext} or\n+     * @throws NullPointerException if {@code message}, {@code transactionContext} or\n      * {@code transactionContext.transactionId} is null.\n      * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n      *     mode.\n      * @throws IllegalArgumentException if {@code lockToken} is an empty value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcbd4909c93cc727e7c4f6ab2ef0c6fb819a44dc"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTM4NDA5OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODowMTo0MlrOHL7ALA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODowMTo0MlrOHL7ALA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2MzA4NA==", "bodyText": "Do we need this? All it does is assert that the message is equal", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14696#discussion_r482263084", "createdAt": "2020-09-02T18:01:42Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientTest.java", "diffHunk": "@@ -62,10 +60,13 @@\n     @Mock\n     ServiceBusTransactionContext transactionContext;\n \n+    @Mock\n+    private ServiceBusReceivedMessage message;\n+\n     @BeforeEach\n     void setup() {\n         MockitoAnnotations.initMocks(this);\n-\n+        when(message.getLockToken()).thenReturn(LOCK_TOKEN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcbd4909c93cc727e7c4f6ab2ef0c6fb819a44dc"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTM4NDQ5OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODowMTo0N1rOHL7AYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODowMTo0N1rOHL7AYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2MzEzNg==", "bodyText": "private", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14696#discussion_r482263136", "createdAt": "2020-09-02T18:01:47Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientTest.java", "diffHunk": "@@ -62,10 +60,13 @@\n     @Mock\n     ServiceBusTransactionContext transactionContext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcbd4909c93cc727e7c4f6ab2ef0c6fb819a44dc"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTM5MDc4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODowMzoyOVrOHL7EmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODowMzoyOVrOHL7EmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2NDIxNg==", "bodyText": "This test case is already covered below.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14696#discussion_r482264216", "createdAt": "2020-09-02T18:03:29Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java", "diffHunk": "@@ -343,7 +343,7 @@ void settleWithNullTransactionId(DispositionStatus dispositionStatus) {\n     }\n \n     /**\n-     * Verifies that we error if we try to complete a message without a lock token.\n+     * Verifies that we error if we try to complete a message with null value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcbd4909c93cc727e7c4f6ab2ef0c6fb819a44dc"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTM5NzgyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODowNToyOFrOHL7JIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODowNToyOFrOHL7JIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2NTM3OQ==", "bodyText": "Doesn't look like there exists a test where we settle with a sessionId.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14696#discussion_r482265379", "createdAt": "2020-09-02T18:05:28Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java", "diffHunk": "@@ -279,16 +279,16 @@ void settleWithNullTransaction(DispositionStatus dispositionStatus) {\n         final Mono<Void> operation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcbd4909c93cc727e7c4f6ab2ef0c6fb819a44dc"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1374, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}