{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2MDE1Njk2", "number": 17764, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMDozOTowOVrOE9YpYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMDo0MDoyMlrOE9Yqxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODAyNDAxOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobClientBuilder.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMDozOTowOVrOH6DMFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzoyNDo0MFrOH9l9mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYzMTcwMA==", "bodyText": "In other SDKs I've gone with allowing ClientOptions to be null with having a static default instance when null is passed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17764#discussion_r530631700", "createdAt": "2020-11-25T20:39:09Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobClientBuilder.java", "diffHunk": "@@ -536,6 +549,18 @@ public EncryptedBlobClientBuilder pipeline(HttpPipeline httpPipeline) {\n         return this;\n     }\n \n+    /**\n+     * Sets the client options for all the requests made through the client.\n+     *\n+     * @param clientOptions {@link ClientOptions}.\n+     * @return the updated EncryptedBlobClientBuilder object\n+     * @throws NullPointerException If {@code clientOptions} is {@code null}.\n+     */\n+    public EncryptedBlobClientBuilder clientOptions(ClientOptions clientOptions) {\n+        this.clientOptions = Objects.requireNonNull(clientOptions, \"'clientOptions' cannot be null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7bb02d6e4170251f4e22b03cfb5029866708423"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1MjU5NA==", "bodyText": "I think the other options on the storage builders enforce non null just like this even though we have a default instance. Should we try to be consistent within storage or with the rest of the libraries?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17764#discussion_r532852594", "createdAt": "2020-11-30T19:41:16Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobClientBuilder.java", "diffHunk": "@@ -536,6 +549,18 @@ public EncryptedBlobClientBuilder pipeline(HttpPipeline httpPipeline) {\n         return this;\n     }\n \n+    /**\n+     * Sets the client options for all the requests made through the client.\n+     *\n+     * @param clientOptions {@link ClientOptions}.\n+     * @return the updated EncryptedBlobClientBuilder object\n+     * @throws NullPointerException If {@code clientOptions} is {@code null}.\n+     */\n+    public EncryptedBlobClientBuilder clientOptions(ClientOptions clientOptions) {\n+        this.clientOptions = Objects.requireNonNull(clientOptions, \"'clientOptions' cannot be null.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYzMTcwMA=="}, "originalCommit": {"oid": "f7bb02d6e4170251f4e22b03cfb5029866708423"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0NDk4Ng==", "bodyText": "@alzimmermsft Any thoughts?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17764#discussion_r534344986", "createdAt": "2020-12-02T17:21:41Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobClientBuilder.java", "diffHunk": "@@ -536,6 +549,18 @@ public EncryptedBlobClientBuilder pipeline(HttpPipeline httpPipeline) {\n         return this;\n     }\n \n+    /**\n+     * Sets the client options for all the requests made through the client.\n+     *\n+     * @param clientOptions {@link ClientOptions}.\n+     * @return the updated EncryptedBlobClientBuilder object\n+     * @throws NullPointerException If {@code clientOptions} is {@code null}.\n+     */\n+    public EncryptedBlobClientBuilder clientOptions(ClientOptions clientOptions) {\n+        this.clientOptions = Objects.requireNonNull(clientOptions, \"'clientOptions' cannot be null.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYzMTcwMA=="}, "originalCommit": {"oid": "f7bb02d6e4170251f4e22b03cfb5029866708423"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0NzE2Mg==", "bodyText": "I would go consistency within Storage over consistency across other SDKs in this case.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17764#discussion_r534347162", "createdAt": "2020-12-02T17:24:40Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobClientBuilder.java", "diffHunk": "@@ -536,6 +549,18 @@ public EncryptedBlobClientBuilder pipeline(HttpPipeline httpPipeline) {\n         return this;\n     }\n \n+    /**\n+     * Sets the client options for all the requests made through the client.\n+     *\n+     * @param clientOptions {@link ClientOptions}.\n+     * @return the updated EncryptedBlobClientBuilder object\n+     * @throws NullPointerException If {@code clientOptions} is {@code null}.\n+     */\n+    public EncryptedBlobClientBuilder clientOptions(ClientOptions clientOptions) {\n+        this.clientOptions = Objects.requireNonNull(clientOptions, \"'clientOptions' cannot be null.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYzMTcwMA=="}, "originalCommit": {"oid": "f7bb02d6e4170251f4e22b03cfb5029866708423"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODAyNzU4OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobClientBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMDo0MDoyMlrOH6DOJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMDo0MDoyMlrOH6DOJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYzMjIyOQ==", "bodyText": "I would agree with this assessment, it would be possible to add x-ms-* or other headers involved in the string to sign.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17764#discussion_r530632229", "createdAt": "2020-11-25T20:40:22Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobClientBuilder.java", "diffHunk": "@@ -202,6 +207,14 @@ private HttpPipeline getHttpPipeline() {\n \n         policies.add(new AddDatePolicy());\n \n+        // We need to place this policy right before the credential policy since headers may affect the string to sign", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7bb02d6e4170251f4e22b03cfb5029866708423"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2809, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}