{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0OTY2OTA4", "number": 14533, "title": "Implement Models API Part #1", "bodyText": "", "createdAt": "2020-08-27T21:41:43Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533", "merged": true, "mergeCommit": {"oid": "1317e077e5149238c349c72849842d33bd10ccf6"}, "closed": true, "closedAt": "2020-08-31T16:47:24Z", "author": {"login": "azabbasi"}, "timelineItems": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdDJkohAH2gAyNDc0OTY2OTA4OjQ2NTU0M2M2ZGIwOTYwNzAzODY2Zjk4N2Q5NWYyN2ZmZTRmOTYyODg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdDcbPLAFqTQ3ODA0ODkzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "465543c6db0960703866f987d95f27ffe4f96288", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/465543c6db0960703866f987d95f27ffe4f96288", "committedDate": "2020-08-28T00:08:10Z", "message": "Implement ListModels API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd664bca8c439b5212b7fb9fee50692bff407e4b", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cd664bca8c439b5212b7fb9fee50692bff407e4b", "committedDate": "2020-08-28T00:08:10Z", "message": "Update API design.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73ff14cf546c344aedc289620ff51ef2b925a575", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/73ff14cf546c344aedc289620ff51ef2b925a575", "committedDate": "2020-08-28T00:08:10Z", "message": "Update DigitalTwinsAsyncClient.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5468f61e5df61a235f56b6ba0eb2d582328f3d5c", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5468f61e5df61a235f56b6ba0eb2d582328f3d5c", "committedDate": "2020-08-28T00:08:10Z", "message": "Add createModels API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7835323364123b3c4c39a3e7ef5444cd71fbf6f3", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7835323364123b3c4c39a3e7ef5444cd71fbf6f3", "committedDate": "2020-08-28T00:08:11Z", "message": "Minor fix to the next link"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68a49c1dc7987b034adcc1c4a9a1d4f48b6c694a", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/68a49c1dc7987b034adcc1c4a9a1d4f48b6c694a", "committedDate": "2020-08-28T00:08:11Z", "message": "Implement Async getModel apis"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3ae9dbad4405a488f8a6e0e744198d3a301178d0", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3ae9dbad4405a488f8a6e0e744198d3a301178d0", "committedDate": "2020-08-28T00:01:18Z", "message": "Implement Async getModel apis"}, "afterCommit": {"oid": "68a49c1dc7987b034adcc1c4a9a1d4f48b6c694a", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/68a49c1dc7987b034adcc1c4a9a1d4f48b6c694a", "committedDate": "2020-08-28T00:08:11Z", "message": "Implement Async getModel apis"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5abc00fea8f016b8b4e4e1d839f194313e84391", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a5abc00fea8f016b8b4e4e1d839f194313e84391", "committedDate": "2020-08-28T00:41:19Z", "message": "Rebase master, implement context"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTcxMDMx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#pullrequestreview-477171031", "createdAt": "2020-08-28T00:42:56Z", "commit": {"oid": "a5abc00fea8f016b8b4e4e1d839f194313e84391"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMDo0Mjo1NlrOHIlxHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMDo0Mjo1NlrOHIlxHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2OTQzNg==", "bodyText": "For the time being I am using List instead of Iterable as the protocol layer also accepts a List, not sure what the value add is for us to use Iterables", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r478769436", "createdAt": "2020-08-28T00:42:56Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -228,4 +233,126 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+\n+    //==================================================================================================================================================\n+    // Models APIs\n+    //==================================================================================================================================================\n+    \n+    /**\n+     * Creates one or many models.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A {@link PagedFlux} of created models.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> createModels(List<String> models) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5abc00fea8f016b8b4e4e1d839f194313e84391"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTcxMTgw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#pullrequestreview-477171180", "createdAt": "2020-08-28T00:43:28Z", "commit": {"oid": "a5abc00fea8f016b8b4e4e1d839f194313e84391"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMDo0MzoyOFrOHIlxlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMDo0MzoyOFrOHIlxlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2OTU1Nw==", "bodyText": "This will have to return a PagedFlux error. Working on it", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r478769557", "createdAt": "2020-08-28T00:43:28Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -228,4 +233,126 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+\n+    //==================================================================================================================================================\n+    // Models APIs\n+    //==================================================================================================================================================\n+    \n+    /**\n+     * Creates one or many models.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A {@link PagedFlux} of created models.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> createModels(List<String> models) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> createModelsSinglePageAsync(models, context)),\n+            nextLink -> withContext(context -> Mono.empty()));\n+    }\n+\n+    PagedFlux<ModelData> createModels(List<String> models, Context context){\n+        return new PagedFlux<>(\n+            () -> createModelsSinglePageAsync(models, context),\n+            nextLink -> Mono.empty());\n+    }\n+\n+    Mono<PagedResponse<ModelData>> createModelsSinglePageAsync(List<String> models, Context context)\n+    {\n+        List<Object> modelsPayload = new ArrayList<>();\n+        for (String model: models) {\n+            try {\n+                modelsPayload.add(mapper.readValue(model, Object.class));\n+            }\n+            catch (JsonProcessingException e) {\n+                logger.error(\"Could not parse the model payload [%s]: %s\", model, e);\n+                return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5abc00fea8f016b8b4e4e1d839f194313e84391"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf7d079daf0592cda83b1530c10b02e58503c2cd", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cf7d079daf0592cda83b1530c10b02e58503c2cd", "committedDate": "2020-08-28T00:48:23Z", "message": "Update DigitalTwinsAsyncClient.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTk2Njc2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#pullrequestreview-477196676", "createdAt": "2020-08-28T02:12:15Z", "commit": {"oid": "cf7d079daf0592cda83b1530c10b02e58503c2cd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjoxMjoxNVrOHInJcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjoxMjoxNVrOHInJcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5MjA0OA==", "bodyText": "We should highlight that this API returns the Http response info as well", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r478792048", "createdAt": "2020-08-28T02:12:15Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -1178,18 +1178,10 @@ Async APIs\n     /**\n      * Creates one or many models.\n      * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return The list of created models\n+     * @return A {@link PagedFlux} of created models.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf7d079daf0592cda83b1530c10b02e58503c2cd"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTk3MDc3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#pullrequestreview-477197077", "createdAt": "2020-08-28T02:13:45Z", "commit": {"oid": "cf7d079daf0592cda83b1530c10b02e58503c2cd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjoxMzo0NVrOHInKyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjoxMzo0NVrOHInKyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5MjM5Mg==", "bodyText": "If the PL accepts a List, then there isn't much value in us accepting an Iterable.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r478792392", "createdAt": "2020-08-28T02:13:45Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -1178,18 +1178,10 @@ Async APIs\n     /**\n      * Creates one or many models.\n      * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return The list of created models\n+     * @return A {@link PagedFlux} of created models.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public Mono<List<ModelData>> createModels(List<String> models) { }\n-\n-    /**\n-     * Creates one or many models.\n-     * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return A REST response containing the list of created models.\n-     */\n-    @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public Mono<Response<List<ModelData>>> createModelsWithResponse(List<String> models) { }\n+    public PagedFlux<ModelData> createModels(Iterable<String> models) { }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf7d079daf0592cda83b1530c10b02e58503c2cd"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTk3MzY2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#pullrequestreview-477197366", "createdAt": "2020-08-28T02:14:59Z", "commit": {"oid": "cf7d079daf0592cda83b1530c10b02e58503c2cd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjoxNDo1OVrOHInL6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjoxNDo1OVrOHInL6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5MjY4Mg==", "bodyText": "Is supposed to be the java equivalent of #region? \ud83d\ude09", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r478792682", "createdAt": "2020-08-28T02:14:59Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -228,4 +234,126 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+\n+    //==================================================================================================================================================", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf7d079daf0592cda83b1530c10b02e58503c2cd"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MjA0MTQx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#pullrequestreview-477204141", "createdAt": "2020-08-28T02:39:04Z", "commit": {"oid": "cf7d079daf0592cda83b1530c10b02e58503c2cd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjozOTowNVrOHInjHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjozOTowNVrOHInjHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5ODYyMw==", "bodyText": "The PL gives us Mono<Response<ModelData>>, so this should be sufficient:\nreturn protocolLayer.getDigitalTwinModels().getByIdWithResponseAsync(modelId, includeModelDefinition, context)\n            .flatMap(modelDataResponse -> Mono.just(modelDataResponse.getValue()));", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r478798623", "createdAt": "2020-08-28T02:39:05Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -228,4 +234,126 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+\n+    //==================================================================================================================================================\n+    // Models APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Creates one or many models.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A {@link PagedFlux} of created models.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> createModels(List<String> models) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> createModelsSinglePageAsync(models, context)),\n+            nextLink -> withContext(context -> Mono.empty()));\n+    }\n+\n+    PagedFlux<ModelData> createModels(List<String> models, Context context){\n+        return new PagedFlux<>(\n+            () -> createModelsSinglePageAsync(models, context),\n+            nextLink -> Mono.empty());\n+    }\n+\n+    Mono<PagedResponse<ModelData>> createModelsSinglePageAsync(List<String> models, Context context)\n+    {\n+        List<Object> modelsPayload = new ArrayList<>();\n+        for (String model: models) {\n+            try {\n+                modelsPayload.add(mapper.readValue(model, Object.class));\n+            }\n+            catch (JsonProcessingException e) {\n+                logger.error(\"Could not parse the model payload [%s]: %s\", model, e);\n+                return Mono.error(e);\n+            }\n+        }\n+\n+        return protocolLayer.getDigitalTwinModels().addWithResponseAsync(modelsPayload, context)\n+            .map(\n+                listResponse -> new PagedResponseBase<>(\n+                    listResponse.getRequest(),\n+                    listResponse.getStatusCode(),\n+                    listResponse.getHeaders(),\n+                    listResponse.getValue(),\n+                    null,\n+                    ((ResponseBase)listResponse).getDeserializedHeaders()));\n+    }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition.\n+     * @param modelId The Id of the model.\n+     * @return The application/json model\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<ModelData> getModel(String modelId) {\n+        return withContext(context -> getModel(modelId, context));\n+    }\n+\n+    Mono<ModelData> getModel(String modelId, Context context){\n+        return protocolLayer.getDigitalTwinModels().getByIdWithResponseAsync(modelId, includeModelDefinition, context)\n+            .flatMap(modelDataResponse -> Mono.just(mapper.convertValue(modelDataResponse.getValue(), ModelData.class)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf7d079daf0592cda83b1530c10b02e58503c2cd"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MjA2NTcw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#pullrequestreview-477206570", "createdAt": "2020-08-28T02:48:14Z", "commit": {"oid": "cf7d079daf0592cda83b1530c10b02e58503c2cd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjo0ODoxNVrOHInrsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjo0ODoxNVrOHInrsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgwMDgxNg==", "bodyText": "Why not define listModelOptions.getDependenciesFor as a List to begin with? If the PL is restrictive, then any advantage in the public API being flexible?\nIs there a risk of running into conversion errors by simply casting it to a List -> would a for-each loop be better: https://www.baeldung.com/java-iterable-to-collection?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r478800816", "createdAt": "2020-08-28T02:48:15Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -228,4 +234,126 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+\n+    //==================================================================================================================================================\n+    // Models APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Creates one or many models.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A {@link PagedFlux} of created models.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> createModels(List<String> models) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> createModelsSinglePageAsync(models, context)),\n+            nextLink -> withContext(context -> Mono.empty()));\n+    }\n+\n+    PagedFlux<ModelData> createModels(List<String> models, Context context){\n+        return new PagedFlux<>(\n+            () -> createModelsSinglePageAsync(models, context),\n+            nextLink -> Mono.empty());\n+    }\n+\n+    Mono<PagedResponse<ModelData>> createModelsSinglePageAsync(List<String> models, Context context)\n+    {\n+        List<Object> modelsPayload = new ArrayList<>();\n+        for (String model: models) {\n+            try {\n+                modelsPayload.add(mapper.readValue(model, Object.class));\n+            }\n+            catch (JsonProcessingException e) {\n+                logger.error(\"Could not parse the model payload [%s]: %s\", model, e);\n+                return Mono.error(e);\n+            }\n+        }\n+\n+        return protocolLayer.getDigitalTwinModels().addWithResponseAsync(modelsPayload, context)\n+            .map(\n+                listResponse -> new PagedResponseBase<>(\n+                    listResponse.getRequest(),\n+                    listResponse.getStatusCode(),\n+                    listResponse.getHeaders(),\n+                    listResponse.getValue(),\n+                    null,\n+                    ((ResponseBase)listResponse).getDeserializedHeaders()));\n+    }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition.\n+     * @param modelId The Id of the model.\n+     * @return The application/json model\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<ModelData> getModel(String modelId) {\n+        return withContext(context -> getModel(modelId, context));\n+    }\n+\n+    Mono<ModelData> getModel(String modelId, Context context){\n+        return protocolLayer.getDigitalTwinModels().getByIdWithResponseAsync(modelId, includeModelDefinition, context)\n+            .flatMap(modelDataResponse -> Mono.just(mapper.convertValue(modelDataResponse.getValue(), ModelData.class)));\n+    }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition.\n+     * @param modelId The Id of the model.\n+     * @return The application/json model\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<ModelData>> getModelWithResponse(String modelId) {\n+        return withContext(context -> getModelWithResponse(modelId, context));\n+    }\n+\n+    Mono<Response<ModelData>> getModelWithResponse(String modelId, Context context){\n+        return protocolLayer\n+            .getDigitalTwinModels()\n+            .getByIdWithResponseAsync(modelId, includeModelDefinition, context);\n+    }\n+\n+    /**\n+     * Gets the list of models by iterating through a collection.\n+     * @param listModelOptions The options for the list operation.\n+     * @return A {@link PagedFlux} of ModelData.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> listModels(ListModelOptions listModelOptions) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listModelsSinglePageAsync(listModelOptions, context)),\n+            nextLink -> withContext(context -> listModelsNextSinglePageAsync(nextLink, context)));\n+    }\n+\n+    PagedFlux<ModelData> listModels(ListModelOptions listModelOptions, Context context){\n+        return new PagedFlux<>(\n+            () -> listModelsSinglePageAsync(listModelOptions, context),\n+            nextLink -> listModelsNextSinglePageAsync(nextLink, context));\n+    }\n+\n+    Mono<PagedResponse<ModelData>> listModelsSinglePageAsync(ListModelOptions listModelOptions, Context context){\n+        return protocolLayer.getDigitalTwinModels().listSinglePageAsync(\n+            (List<String>) listModelOptions.getDependenciesFor(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf7d079daf0592cda83b1530c10b02e58503c2cd"}, "originalPosition": 130}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6954b7b7c58a096c1bbc58440444e72dd8db0abb", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6954b7b7c58a096c1bbc58440444e72dd8db0abb", "committedDate": "2020-08-28T16:29:05Z", "message": "Address comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f0dd6798540a26962775677ce7686b9c8549e96", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9f0dd6798540a26962775677ce7686b9c8549e96", "committedDate": "2020-08-28T16:34:34Z", "message": "Update comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6efdd3acc26c5b46c3894aec029730eb05457aea", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6efdd3acc26c5b46c3894aec029730eb05457aea", "committedDate": "2020-08-28T20:04:38Z", "message": "Implement deleteModels"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8134cd35fa978dd34754717e2ae5695ffb4cf05", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f8134cd35fa978dd34754717e2ae5695ffb4cf05", "committedDate": "2020-08-28T20:08:06Z", "message": "fix comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MDIyMjU0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#pullrequestreview-478022254", "createdAt": "2020-08-28T20:58:54Z", "commit": {"oid": "f8134cd35fa978dd34754717e2ae5695ffb4cf05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMDo1ODo1NFrOHJUSiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMDo1ODo1NFrOHJUSiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzMTY1Ng==", "bodyText": "I have seen the format of \"The Http response containing modelData\"\nWe can decide one and use the same everywhere.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r479531656", "createdAt": "2020-08-28T20:58:54Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -1178,44 +1178,41 @@ Async APIs\n     /**\n      * Creates one or many models.\n      * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return The list of created models\n+     * @return A {@link PagedFlux} of created models and the http response.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public Mono<List<ModelData>> createModels(List<String> models) { }\n-\n-    /**\n-     * Creates one or many models.\n-     * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return A REST response containing the list of created models.\n-     */\n-    @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public Mono<Response<List<ModelData>>> createModelsWithResponse(List<String> models) { }\n+    public PagedFlux<ModelData> createModels(List<String> models) { }\n \n     /**\n      * Gets a model, including the model metadata and the model definition.\n      * @param modelId The Id of the model.\n-     * @return The application/json model\n+     * @return The ModelData\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<ModelData> getModel(String modelId) { }\n \n     /**\n      * Gets a model, including the model metadata and the model definition asynchronously.\n      * @param modelId The Id of the model.\n-     * @return A REST response containing the model.\n+     * @return The ModelData and the http response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8134cd35fa978dd34754717e2ae5695ffb4cf05"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MDIyODAx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#pullrequestreview-478022801", "createdAt": "2020-08-28T21:00:03Z", "commit": {"oid": "f8134cd35fa978dd34754717e2ae5695ffb4cf05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTowMDowM1rOHJUUSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTowMDowM1rOHJUUSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzMjEwNA==", "bodyText": "Unique Identifier?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r479532104", "createdAt": "2020-08-28T21:00:03Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -1178,44 +1178,41 @@ Async APIs\n     /**\n      * Creates one or many models.\n      * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return The list of created models\n+     * @return A {@link PagedFlux} of created models and the http response.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public Mono<List<ModelData>> createModels(List<String> models) { }\n-\n-    /**\n-     * Creates one or many models.\n-     * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return A REST response containing the list of created models.\n-     */\n-    @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public Mono<Response<List<ModelData>>> createModelsWithResponse(List<String> models) { }\n+    public PagedFlux<ModelData> createModels(List<String> models) { }\n \n     /**\n      * Gets a model, including the model metadata and the model definition.\n      * @param modelId The Id of the model.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8134cd35fa978dd34754717e2ae5695ffb4cf05"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MDIyOTUw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#pullrequestreview-478022950", "createdAt": "2020-08-28T21:00:21Z", "commit": {"oid": "f8134cd35fa978dd34754717e2ae5695ffb4cf05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTowMDoyMlrOHJUUuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTowMDoyMlrOHJUUuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzMjIxNw==", "bodyText": "same here as above and other places", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r479532217", "createdAt": "2020-08-28T21:00:22Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -1178,44 +1178,41 @@ Async APIs\n     /**\n      * Creates one or many models.\n      * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return The list of created models\n+     * @return A {@link PagedFlux} of created models and the http response.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public Mono<List<ModelData>> createModels(List<String> models) { }\n-\n-    /**\n-     * Creates one or many models.\n-     * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return A REST response containing the list of created models.\n-     */\n-    @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public Mono<Response<List<ModelData>>> createModelsWithResponse(List<String> models) { }\n+    public PagedFlux<ModelData> createModels(List<String> models) { }\n \n     /**\n      * Gets a model, including the model metadata and the model definition.\n      * @param modelId The Id of the model.\n-     * @return The application/json model\n+     * @return The ModelData\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<ModelData> getModel(String modelId) { }\n \n     /**\n      * Gets a model, including the model metadata and the model definition asynchronously.\n      * @param modelId The Id of the model.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8134cd35fa978dd34754717e2ae5695ffb4cf05"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0736884fcf1ebbd73b61579eb0791f4eff49604", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c0736884fcf1ebbd73b61579eb0791f4eff49604", "committedDate": "2020-08-28T21:02:37Z", "message": "Implement Sync APIs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MDI0MjE2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#pullrequestreview-478024216", "createdAt": "2020-08-28T21:02:49Z", "commit": {"oid": "f8134cd35fa978dd34754717e2ae5695ffb4cf05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTowMjo0OVrOHJUYZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTowMjo0OVrOHJUYZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzMzE1Ng==", "bodyText": "Add a comment about context too?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r479533156", "createdAt": "2020-08-28T21:02:49Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -1254,18 +1251,10 @@ Sync APIs\n  /**\n      * Creates one or many models.\n      * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return The list of created models\n-     */\n-    @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public List<ModelData> createModels(List<String> models) { }\n-\n-    /**\n-     * Creates one or many models.\n-     * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return A REST response containing the list of created models.\n+     * @return A {@link PagedIterable} of created ModelData.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8134cd35fa978dd34754717e2ae5695ffb4cf05"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MDI1NTU1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#pullrequestreview-478025555", "createdAt": "2020-08-28T21:05:47Z", "commit": {"oid": "f8134cd35fa978dd34754717e2ae5695ffb4cf05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTowNTo0N1rOHJUcZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTowNTo0N1rOHJUcZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzNDE4MQ==", "bodyText": "don't you need createmodels with response?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r479534181", "createdAt": "2020-08-28T21:05:47Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -1178,44 +1178,41 @@ Async APIs\n     /**\n      * Creates one or many models.\n      * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return The list of created models\n+     * @return A {@link PagedFlux} of created models and the http response.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public Mono<List<ModelData>> createModels(List<String> models) { }\n-\n-    /**\n-     * Creates one or many models.\n-     * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return A REST response containing the list of created models.\n-     */\n-    @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public Mono<Response<List<ModelData>>> createModelsWithResponse(List<String> models) { }\n+    public PagedFlux<ModelData> createModels(List<String> models) { }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8134cd35fa978dd34754717e2ae5695ffb4cf05"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MDI2MTc2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#pullrequestreview-478026176", "createdAt": "2020-08-28T21:07:05Z", "commit": {"oid": "f8134cd35fa978dd34754717e2ae5695ffb4cf05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTowNzowNVrOHJUeWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTowNzowNVrOHJUeWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzNDY4MQ==", "bodyText": "same here, with response?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r479534681", "createdAt": "2020-08-28T21:07:05Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -1178,44 +1178,41 @@ Async APIs\n     /**\n      * Creates one or many models.\n      * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return The list of created models\n+     * @return A {@link PagedFlux} of created models and the http response.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public Mono<List<ModelData>> createModels(List<String> models) { }\n-\n-    /**\n-     * Creates one or many models.\n-     * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return A REST response containing the list of created models.\n-     */\n-    @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public Mono<Response<List<ModelData>>> createModelsWithResponse(List<String> models) { }\n+    public PagedFlux<ModelData> createModels(List<String> models) { }\n \n     /**\n      * Gets a model, including the model metadata and the model definition.\n      * @param modelId The Id of the model.\n-     * @return The application/json model\n+     * @return The ModelData\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<ModelData> getModel(String modelId) { }\n \n     /**\n      * Gets a model, including the model metadata and the model definition asynchronously.\n      * @param modelId The Id of the model.\n-     * @return A REST response containing the model.\n+     * @return The ModelData and the http response\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<Response<ModelData>> getModelWithResponse(String modelId) { }\n-\n+   \n     /**\n      * Gets the list of models by iterating through a collection.\n-     * @param dependenciesFor The model Ids to have dependencies retrieved.\n-     * @param includeModelDefinition Whether to include the model definition in the result. If false, only the model metadata will be returned.\n-     * @param options The options to follow when listing the models. For example, the page size hint can be specified.\n-     * @return A {@link PagedFlux} of ModelData.\n+     * @return A {@link PagedFlux} of ModelData and the http response.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedFlux<ModelData> listModels(List<String> dependenciesFor, boolean includeModelDefinition, DigitalTwinModelsListOptions options) { }\n+    public PagedFlux<ModelData> listModels() { }\n+    \n+    /**\n+     * Gets the list of models by iterating through a collection.\n+     * @param listModelOptions The options to follow when listing the models. For example, the page size hint can be specified.\n+     * @return A {@link PagedFlux} of ModelData and the http response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> listModels(ListModelOptions listModelOptions) { }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8134cd35fa978dd34754717e2ae5695ffb4cf05"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36b8d0b78706ed663c4ac7683c54c341226136d8", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/36b8d0b78706ed663c4ac7683c54c341226136d8", "committedDate": "2020-08-28T21:11:07Z", "message": "Implement contexts for sync client."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acb56b2cbe0719c1d5d7f2031b072394f50c14b5", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/acb56b2cbe0719c1d5d7f2031b072394f50c14b5", "committedDate": "2020-08-28T21:40:48Z", "message": "Update comments. Remove API design doc for methods that have been implemented."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MDQ3MTI2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#pullrequestreview-478047126", "createdAt": "2020-08-28T22:00:34Z", "commit": {"oid": "36b8d0b78706ed663c4ac7683c54c341226136d8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjowMDozNFrOHJVjiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjowMDozNFrOHJVjiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU1MjM5Mw==", "bodyText": "do we even need to mention this return?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r479552393", "createdAt": "2020-08-28T22:00:34Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -228,4 +234,149 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+\n+    //==================================================================================================================================================\n+    // Models APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Creates one or many models.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A {@link PagedFlux} of created models and the http response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> createModels(List<String> models) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> createModelsSinglePageAsync(models, context)),\n+            nextLink -> withContext(context -> Mono.empty()));\n+    }\n+\n+    PagedFlux<ModelData> createModels(List<String> models, Context context){\n+        return new PagedFlux<>(\n+            () -> createModelsSinglePageAsync(models, context),\n+            nextLink -> Mono.empty());\n+    }\n+\n+    Mono<PagedResponse<ModelData>> createModelsSinglePageAsync(List<String> models, Context context)\n+    {\n+        List<Object> modelsPayload = new ArrayList<>();\n+        for (String model: models) {\n+            try {\n+                modelsPayload.add(mapper.readValue(model, Object.class));\n+            }\n+            catch (JsonProcessingException e) {\n+                logger.error(\"Could not parse the model payload [%s]: %s\", model, e);\n+                return Mono.error(e);\n+            }\n+        }\n+\n+        return protocolLayer.getDigitalTwinModels().addWithResponseAsync(modelsPayload, context)\n+            .map(\n+                listResponse -> new PagedResponseBase<>(\n+                    listResponse.getRequest(),\n+                    listResponse.getStatusCode(),\n+                    listResponse.getHeaders(),\n+                    listResponse.getValue(),\n+                    null,\n+                    ((ResponseBase)listResponse).getDeserializedHeaders()));\n+    }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition.\n+     * @param modelId The Id of the model.\n+     * @return The ModelData\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<ModelData> getModel(String modelId) {\n+        return withContext(context -> getModelWithResponse(modelId, context))\n+            .flatMap(response -> Mono.just(response.getValue()));\n+    }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition.\n+     * @param modelId The Id of the model.\n+     * @return The ModelData and the http response\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<ModelData>> getModelWithResponse(String modelId) {\n+        return withContext(context -> getModelWithResponse(modelId, context));\n+    }\n+\n+    Mono<Response<ModelData>> getModelWithResponse(String modelId, Context context){\n+        return protocolLayer\n+            .getDigitalTwinModels()\n+            .getByIdWithResponseAsync(modelId, includeModelDefinition, context);\n+    }\n+\n+    /**\n+     * Gets the list of models by iterating through a collection.\n+     * @param listModelOptions The options to follow when listing the models. For example, the page size hint can be specified.\n+     * @return A {@link PagedFlux} of ModelData and the http response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> listModels(ListModelOptions listModelOptions) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listModelsSinglePageAsync(listModelOptions, context)),\n+            nextLink -> withContext(context -> listModelsNextSinglePageAsync(nextLink, context)));\n+    }\n+\n+    /**\n+     * Gets the list of models by iterating through a collection.\n+     * @return A {@link PagedFlux} of ModelData and the http response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> listModels() {\n+        return listModels(new ListModelOptions());\n+    }\n+\n+    PagedFlux<ModelData> listModels(Context context){\n+        return new PagedFlux<>(\n+            () -> listModelsSinglePageAsync(new ListModelOptions(), context),\n+            nextLink -> listModelsNextSinglePageAsync(nextLink, context));\n+    }\n+\n+    PagedFlux<ModelData> listModels(ListModelOptions listModelOptions, Context context){\n+        return new PagedFlux<>(\n+            () -> listModelsSinglePageAsync(listModelOptions, context),\n+            nextLink -> listModelsNextSinglePageAsync(nextLink, context));\n+    }\n+\n+    Mono<PagedResponse<ModelData>> listModelsSinglePageAsync(ListModelOptions listModelOptions, Context context){\n+        return protocolLayer.getDigitalTwinModels().listSinglePageAsync(\n+            listModelOptions.getDependenciesFor(),\n+            listModelOptions.getIncludeModelDefinition(),\n+            new DigitalTwinModelsListOptions().setMaxItemCount(listModelOptions.getMaxItemCount()),\n+            context);\n+    }\n+\n+    Mono<PagedResponse<ModelData>> listModelsNextSinglePageAsync(String nextLink, Context context){\n+        return protocolLayer.getDigitalTwinModels().listNextSinglePageAsync(nextLink, context);\n+    }\n+\n+    /**\n+     * Deletes a model.\n+     * @param modelId The id for the model. The id is globally unique and case sensitive.\n+     * @return An empty Mono", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36b8d0b78706ed663c4ac7683c54c341226136d8"}, "originalPosition": 154}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MDQ4OTMx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#pullrequestreview-478048931", "createdAt": "2020-08-28T22:06:06Z", "commit": {"oid": "c0736884fcf1ebbd73b61579eb0791f4eff49604"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 124, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}