{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NTEwMjI4", "number": 14661, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNzozMzo0MFrOEfUHiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwODoxMDo0NlrOEg1N7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjcwOTIwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNzozMzo0MFrOHLg3eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo0NToxNFrOHMaO4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgzNDg3Mg==", "bodyText": "Do we need .publishOn(Schedulers.parallel()) here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r481834872", "createdAt": "2020-09-02T07:33:40Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java", "diffHunk": "@@ -578,6 +578,25 @@ public MappingCosmosConverter getConverter() {\n         return mappingCosmosConverter;\n     }\n \n+    @Override\n+    public <T> Flux<T> runQuery(SqlQuerySpec querySpec, Class<?> domainType, Class<T> returnType) {\n+        String containerName = domainType.getSimpleName();\n+        CosmosQueryRequestOptions options = new CosmosQueryRequestOptions();\n+        return cosmosAsyncClient.getDatabase(this.databaseName)\n+                   .getContainer(containerName)\n+                   .queryItems(querySpec, options, returnType)\n+                   .byPage()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3NDc1NQ==", "bodyText": "We are not doing much there on the thread, but added a Scheduler", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r482774755", "createdAt": "2020-09-03T07:45:14Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java", "diffHunk": "@@ -578,6 +578,25 @@ public MappingCosmosConverter getConverter() {\n         return mappingCosmosConverter;\n     }\n \n+    @Override\n+    public <T> Flux<T> runQuery(SqlQuerySpec querySpec, Class<?> domainType, Class<T> returnType) {\n+        String containerName = domainType.getSimpleName();\n+        CosmosQueryRequestOptions options = new CosmosQueryRequestOptions();\n+        return cosmosAsyncClient.getDatabase(this.databaseName)\n+                   .getContainer(containerName)\n+                   .queryItems(querySpec, options, returnType)\n+                   .byPage()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgzNDg3Mg=="}, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjc1MTA2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/query/AbstractReactiveCosmosQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNzo0MTo1MVrOHLhSsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo0NjozNFrOHMaR-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg0MTg0Mw==", "bodyText": "Do we need @Override in before line 38?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r481841843", "createdAt": "2020-09-02T07:41:51Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/query/AbstractReactiveCosmosQuery.java", "diffHunk": "@@ -15,7 +15,7 @@\n public abstract class AbstractReactiveCosmosQuery implements RepositoryQuery {\n \n     private final ReactiveCosmosQueryMethod method;\n-    private final ReactiveCosmosOperations operations;\n+    protected final ReactiveCosmosOperations operations;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3NTU0Ng==", "bodyText": "Yes, it should be there. Its a good practice to annotate ovverriden methods. Generally I would prefer not to touch areas beyond the ones specific to current changes, but added override in this case", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r482775546", "createdAt": "2020-09-03T07:46:34Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/query/AbstractReactiveCosmosQuery.java", "diffHunk": "@@ -15,7 +15,7 @@\n public abstract class AbstractReactiveCosmosQuery implements RepositoryQuery {\n \n     private final ReactiveCosmosQueryMethod method;\n-    private final ReactiveCosmosOperations operations;\n+    protected final ReactiveCosmosOperations operations;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg0MTg0Mw=="}, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjk1NzI3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/query/CosmosQueryMethod.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwODoyMDo1N1rOHLjYrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwODowNzo1MVrOHND8IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg3NjE0MQ==", "bodyText": "The following code will look better:\nreturn (Optional<A>) this.annotationCache.computeIfAbsent(\n    annotationType,\n    type -> Optional.ofNullable(AnnotatedElementUtils.findMergedAnnotation(method, type))\n);", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r481876141", "createdAt": "2020-09-02T08:20:57Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/query/CosmosQueryMethod.java", "diffHunk": "@@ -39,4 +51,42 @@ public CosmosQueryMethod(Method method, RepositoryMetadata metadata, ProjectionF\n         this.metadata = new SimpleCosmosEntityMetadata<Object>(domainType, entityInformation);\n         return this.metadata;\n     }\n+\n+    /**\n+     * Returns whether the method has an annotated query.\n+     * @return if the query method has an annotated query\n+     */\n+    public boolean hasAnnotatedQuery() {\n+        return findAnnotatedQuery().isPresent();\n+    }\n+\n+    /**\n+     * Returns the query string declared in a {@link Query} annotation or {@literal null} if neither the annotation\n+     * found\n+     * nor the attribute was specified.\n+     *\n+     * @return the query string or null\n+     */\n+    @Nullable\n+    public String getQueryAnnotation() {\n+        return findAnnotatedQuery().orElse(null);\n+    }\n+\n+    private Optional<String> findAnnotatedQuery() {\n+\n+        return lookupQueryAnnotation()\n+                   .map(Query::value)\n+                   .filter(StringUtils::hasText);\n+    }\n+\n+    Optional<Query> lookupQueryAnnotation() {\n+        return doFindAnnotation(Query.class);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private <A extends Annotation> Optional<A> doFindAnnotation(Class<A> annotationType) {\n+        return (Optional<A>) this.annotationCache\n+                                 .computeIfAbsent(annotationType, it -> Optional.ofNullable(AnnotatedElementUtils\n+                                                                                .findMergedAnnotation(method, it)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg4MjIyNQ==", "bodyText": "The parameter annotationType is always Query.class, can we remove the parameter?\nFurther more, can we delete annotationCache and method, just use the following field instead:\nprivate final String annotatedQuery;\n\nInitialize annotatedQuery in constructor.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r481882225", "createdAt": "2020-09-02T08:27:25Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/query/CosmosQueryMethod.java", "diffHunk": "@@ -39,4 +51,42 @@ public CosmosQueryMethod(Method method, RepositoryMetadata metadata, ProjectionF\n         this.metadata = new SimpleCosmosEntityMetadata<Object>(domainType, entityInformation);\n         return this.metadata;\n     }\n+\n+    /**\n+     * Returns whether the method has an annotated query.\n+     * @return if the query method has an annotated query\n+     */\n+    public boolean hasAnnotatedQuery() {\n+        return findAnnotatedQuery().isPresent();\n+    }\n+\n+    /**\n+     * Returns the query string declared in a {@link Query} annotation or {@literal null} if neither the annotation\n+     * found\n+     * nor the attribute was specified.\n+     *\n+     * @return the query string or null\n+     */\n+    @Nullable\n+    public String getQueryAnnotation() {\n+        return findAnnotatedQuery().orElse(null);\n+    }\n+\n+    private Optional<String> findAnnotatedQuery() {\n+\n+        return lookupQueryAnnotation()\n+                   .map(Query::value)\n+                   .filter(StringUtils::hasText);\n+    }\n+\n+    Optional<Query> lookupQueryAnnotation() {\n+        return doFindAnnotation(Query.class);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private <A extends Annotation> Optional<A> doFindAnnotation(Class<A> annotationType) {\n+        return (Optional<A>) this.annotationCache\n+                                 .computeIfAbsent(annotationType, it -> Optional.ofNullable(AnnotatedElementUtils\n+                                                                                .findMergedAnnotation(method, it)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg3NjE0MQ=="}, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3NjQ4OQ==", "bodyText": "Annotation cache would improve performance. Also, I got this idea from existing annotation spring data implementations, so I believe its good to have.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r482776489", "createdAt": "2020-09-03T07:48:05Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/query/CosmosQueryMethod.java", "diffHunk": "@@ -39,4 +51,42 @@ public CosmosQueryMethod(Method method, RepositoryMetadata metadata, ProjectionF\n         this.metadata = new SimpleCosmosEntityMetadata<Object>(domainType, entityInformation);\n         return this.metadata;\n     }\n+\n+    /**\n+     * Returns whether the method has an annotated query.\n+     * @return if the query method has an annotated query\n+     */\n+    public boolean hasAnnotatedQuery() {\n+        return findAnnotatedQuery().isPresent();\n+    }\n+\n+    /**\n+     * Returns the query string declared in a {@link Query} annotation or {@literal null} if neither the annotation\n+     * found\n+     * nor the attribute was specified.\n+     *\n+     * @return the query string or null\n+     */\n+    @Nullable\n+    public String getQueryAnnotation() {\n+        return findAnnotatedQuery().orElse(null);\n+    }\n+\n+    private Optional<String> findAnnotatedQuery() {\n+\n+        return lookupQueryAnnotation()\n+                   .map(Query::value)\n+                   .filter(StringUtils::hasText);\n+    }\n+\n+    Optional<Query> lookupQueryAnnotation() {\n+        return doFindAnnotation(Query.class);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private <A extends Annotation> Optional<A> doFindAnnotation(Class<A> annotationType) {\n+        return (Optional<A>) this.annotationCache\n+                                 .computeIfAbsent(annotationType, it -> Optional.ofNullable(AnnotatedElementUtils\n+                                                                                .findMergedAnnotation(method, it)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg3NjE0MQ=="}, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM5MTQ2Nw==", "bodyText": "Annotation cache would improve performance.\n\nIMU, even if we need cache the Annotation, we should set method as key, not annotationType as key.\n\nI got this idea from existing annotation spring data implementations\n\nCould you please share the link to related code?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r483391467", "createdAt": "2020-09-04T05:15:41Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/query/CosmosQueryMethod.java", "diffHunk": "@@ -39,4 +51,42 @@ public CosmosQueryMethod(Method method, RepositoryMetadata metadata, ProjectionF\n         this.metadata = new SimpleCosmosEntityMetadata<Object>(domainType, entityInformation);\n         return this.metadata;\n     }\n+\n+    /**\n+     * Returns whether the method has an annotated query.\n+     * @return if the query method has an annotated query\n+     */\n+    public boolean hasAnnotatedQuery() {\n+        return findAnnotatedQuery().isPresent();\n+    }\n+\n+    /**\n+     * Returns the query string declared in a {@link Query} annotation or {@literal null} if neither the annotation\n+     * found\n+     * nor the attribute was specified.\n+     *\n+     * @return the query string or null\n+     */\n+    @Nullable\n+    public String getQueryAnnotation() {\n+        return findAnnotatedQuery().orElse(null);\n+    }\n+\n+    private Optional<String> findAnnotatedQuery() {\n+\n+        return lookupQueryAnnotation()\n+                   .map(Query::value)\n+                   .filter(StringUtils::hasText);\n+    }\n+\n+    Optional<Query> lookupQueryAnnotation() {\n+        return doFindAnnotation(Query.class);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private <A extends Annotation> Optional<A> doFindAnnotation(Class<A> annotationType) {\n+        return (Optional<A>) this.annotationCache\n+                                 .computeIfAbsent(annotationType, it -> Optional.ofNullable(AnnotatedElementUtils\n+                                                                                .findMergedAnnotation(method, it)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg3NjE0MQ=="}, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ1ODA4MQ==", "bodyText": "As discussed offline, cleaned it up!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r483458081", "createdAt": "2020-09-04T08:07:51Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/query/CosmosQueryMethod.java", "diffHunk": "@@ -39,4 +51,42 @@ public CosmosQueryMethod(Method method, RepositoryMetadata metadata, ProjectionF\n         this.metadata = new SimpleCosmosEntityMetadata<Object>(domainType, entityInformation);\n         return this.metadata;\n     }\n+\n+    /**\n+     * Returns whether the method has an annotated query.\n+     * @return if the query method has an annotated query\n+     */\n+    public boolean hasAnnotatedQuery() {\n+        return findAnnotatedQuery().isPresent();\n+    }\n+\n+    /**\n+     * Returns the query string declared in a {@link Query} annotation or {@literal null} if neither the annotation\n+     * found\n+     * nor the attribute was specified.\n+     *\n+     * @return the query string or null\n+     */\n+    @Nullable\n+    public String getQueryAnnotation() {\n+        return findAnnotatedQuery().orElse(null);\n+    }\n+\n+    private Optional<String> findAnnotatedQuery() {\n+\n+        return lookupQueryAnnotation()\n+                   .map(Query::value)\n+                   .filter(StringUtils::hasText);\n+    }\n+\n+    Optional<Query> lookupQueryAnnotation() {\n+        return doFindAnnotation(Query.class);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private <A extends Annotation> Optional<A> doFindAnnotation(Class<A> annotationType) {\n+        return (Optional<A>) this.annotationCache\n+                                 .computeIfAbsent(annotationType, it -> Optional.ofNullable(AnnotatedElementUtils\n+                                                                                .findMergedAnnotation(method, it)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg3NjE0MQ=="}, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzAwMDMwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/query/ReactiveCosmosQueryMethod.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwODoyODo0MlrOHLj05A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwODowODoxOVrOHND9Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg4MzM2NA==", "bodyText": "Same to CosmosQueryMethod.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r481883364", "createdAt": "2020-09-02T08:28:42Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/query/ReactiveCosmosQueryMethod.java", "diffHunk": "@@ -56,4 +66,41 @@ public ReactiveCosmosQueryMethod(Method method, RepositoryMetadata metadata, Pro\n     private static boolean isReactiveWrapperClass(Class<?> clazz) {\n         return clazz.equals(Flux.class) || clazz.equals(Mono.class);\n     }\n+\n+    /**\n+     * Returns whether the method has an annotated query.\n+     * @return if the query method has an annotated query\n+     */\n+    public boolean hasAnnotatedQuery() {\n+        return findAnnotatedQuery().isPresent();\n+    }\n+\n+    /**\n+     * Gets the annotated query or returns null\n+     * @return the annotated query String or null\n+     */\n+    @Nullable\n+    public String getQueryAnnotatation() {\n+        return findAnnotatedQuery().orElse(null);\n+    }\n+\n+    private Optional<String> findAnnotatedQuery() {\n+\n+        return lookupQueryAnnotation()\n+                   .map(Query::value)\n+                   .filter(StringUtils::hasText);\n+    }\n+\n+    Optional<Query> lookupQueryAnnotation() {\n+        return doFindAnnotation(Query.class);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private <A extends Annotation> Optional<A> doFindAnnotation(Class<A> annotationType) {\n+\n+        return (Optional<A>) this.annotationCache\n+                                 .computeIfAbsent(annotationType, it -> Optional.ofNullable(AnnotatedElementUtils\n+                                                                                .findMergedAnnotation(method, it)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3NjU0Nw==", "bodyText": "Annotation cache would improve performance. Also, I got this idea from existing annotation spring data implementations, so I believe its good to have.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r482776547", "createdAt": "2020-09-03T07:48:11Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/query/ReactiveCosmosQueryMethod.java", "diffHunk": "@@ -56,4 +66,41 @@ public ReactiveCosmosQueryMethod(Method method, RepositoryMetadata metadata, Pro\n     private static boolean isReactiveWrapperClass(Class<?> clazz) {\n         return clazz.equals(Flux.class) || clazz.equals(Mono.class);\n     }\n+\n+    /**\n+     * Returns whether the method has an annotated query.\n+     * @return if the query method has an annotated query\n+     */\n+    public boolean hasAnnotatedQuery() {\n+        return findAnnotatedQuery().isPresent();\n+    }\n+\n+    /**\n+     * Gets the annotated query or returns null\n+     * @return the annotated query String or null\n+     */\n+    @Nullable\n+    public String getQueryAnnotatation() {\n+        return findAnnotatedQuery().orElse(null);\n+    }\n+\n+    private Optional<String> findAnnotatedQuery() {\n+\n+        return lookupQueryAnnotation()\n+                   .map(Query::value)\n+                   .filter(StringUtils::hasText);\n+    }\n+\n+    Optional<Query> lookupQueryAnnotation() {\n+        return doFindAnnotation(Query.class);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private <A extends Annotation> Optional<A> doFindAnnotation(Class<A> annotationType) {\n+\n+        return (Optional<A>) this.annotationCache\n+                                 .computeIfAbsent(annotationType, it -> Optional.ofNullable(AnnotatedElementUtils\n+                                                                                .findMergedAnnotation(method, it)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg4MzM2NA=="}, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ1ODMwNg==", "bodyText": "As discussed offline, cleaned it up", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r483458306", "createdAt": "2020-09-04T08:08:19Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/query/ReactiveCosmosQueryMethod.java", "diffHunk": "@@ -56,4 +66,41 @@ public ReactiveCosmosQueryMethod(Method method, RepositoryMetadata metadata, Pro\n     private static boolean isReactiveWrapperClass(Class<?> clazz) {\n         return clazz.equals(Flux.class) || clazz.equals(Mono.class);\n     }\n+\n+    /**\n+     * Returns whether the method has an annotated query.\n+     * @return if the query method has an annotated query\n+     */\n+    public boolean hasAnnotatedQuery() {\n+        return findAnnotatedQuery().isPresent();\n+    }\n+\n+    /**\n+     * Gets the annotated query or returns null\n+     * @return the annotated query String or null\n+     */\n+    @Nullable\n+    public String getQueryAnnotatation() {\n+        return findAnnotatedQuery().orElse(null);\n+    }\n+\n+    private Optional<String> findAnnotatedQuery() {\n+\n+        return lookupQueryAnnotation()\n+                   .map(Query::value)\n+                   .filter(StringUtils::hasText);\n+    }\n+\n+    Optional<Query> lookupQueryAnnotation() {\n+        return doFindAnnotation(Query.class);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private <A extends Annotation> Optional<A> doFindAnnotation(Class<A> annotationType) {\n+\n+        return (Optional<A>) this.annotationCache\n+                                 .computeIfAbsent(annotationType, it -> Optional.ofNullable(AnnotatedElementUtils\n+                                                                                .findMergedAnnotation(method, it)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg4MzM2NA=="}, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzAyOTI4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/query/CosmosQueryMethod.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwODozMzo1MlrOHLkHWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNTozMjoxMlrOHNAJLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg4ODA5MA==", "bodyText": "Use getAnnotatedQuery instead of getQueryAnnotation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r481888090", "createdAt": "2020-09-02T08:33:52Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/query/CosmosQueryMethod.java", "diffHunk": "@@ -39,4 +51,42 @@ public CosmosQueryMethod(Method method, RepositoryMetadata metadata, ProjectionF\n         this.metadata = new SimpleCosmosEntityMetadata<Object>(domainType, entityInformation);\n         return this.metadata;\n     }\n+\n+    /**\n+     * Returns whether the method has an annotated query.\n+     * @return if the query method has an annotated query\n+     */\n+    public boolean hasAnnotatedQuery() {\n+        return findAnnotatedQuery().isPresent();\n+    }\n+\n+    /**\n+     * Returns the query string declared in a {@link Query} annotation or {@literal null} if neither the annotation\n+     * found\n+     * nor the attribute was specified.\n+     *\n+     * @return the query string or null\n+     */\n+    @Nullable\n+    public String getQueryAnnotation() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3Njg0Nw==", "bodyText": "We are getting the query annotation here, so IMHO getQueryAnnotation would make more sense.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r482776847", "createdAt": "2020-09-03T07:48:38Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/query/CosmosQueryMethod.java", "diffHunk": "@@ -39,4 +51,42 @@ public CosmosQueryMethod(Method method, RepositoryMetadata metadata, ProjectionF\n         this.metadata = new SimpleCosmosEntityMetadata<Object>(domainType, entityInformation);\n         return this.metadata;\n     }\n+\n+    /**\n+     * Returns whether the method has an annotated query.\n+     * @return if the query method has an annotated query\n+     */\n+    public boolean hasAnnotatedQuery() {\n+        return findAnnotatedQuery().isPresent();\n+    }\n+\n+    /**\n+     * Returns the query string declared in a {@link Query} annotation or {@literal null} if neither the annotation\n+     * found\n+     * nor the attribute was specified.\n+     *\n+     * @return the query string or null\n+     */\n+    @Nullable\n+    public String getQueryAnnotation() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg4ODA5MA=="}, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM5MTc3Ng==", "bodyText": "But the return value is String, not Annotation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r483391776", "createdAt": "2020-09-04T05:17:00Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/query/CosmosQueryMethod.java", "diffHunk": "@@ -39,4 +51,42 @@ public CosmosQueryMethod(Method method, RepositoryMetadata metadata, ProjectionF\n         this.metadata = new SimpleCosmosEntityMetadata<Object>(domainType, entityInformation);\n         return this.metadata;\n     }\n+\n+    /**\n+     * Returns whether the method has an annotated query.\n+     * @return if the query method has an annotated query\n+     */\n+    public boolean hasAnnotatedQuery() {\n+        return findAnnotatedQuery().isPresent();\n+    }\n+\n+    /**\n+     * Returns the query string declared in a {@link Query} annotation or {@literal null} if neither the annotation\n+     * found\n+     * nor the attribute was specified.\n+     *\n+     * @return the query string or null\n+     */\n+    @Nullable\n+    public String getQueryAnnotation() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg4ODA5MA=="}, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM5NTg4NA==", "bodyText": "Yes the string value of the annotation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r483395884", "createdAt": "2020-09-04T05:32:12Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/query/CosmosQueryMethod.java", "diffHunk": "@@ -39,4 +51,42 @@ public CosmosQueryMethod(Method method, RepositoryMetadata metadata, ProjectionF\n         this.metadata = new SimpleCosmosEntityMetadata<Object>(domainType, entityInformation);\n         return this.metadata;\n     }\n+\n+    /**\n+     * Returns whether the method has an annotated query.\n+     * @return if the query method has an annotated query\n+     */\n+    public boolean hasAnnotatedQuery() {\n+        return findAnnotatedQuery().isPresent();\n+    }\n+\n+    /**\n+     * Returns the query string declared in a {@link Query} annotation or {@literal null} if neither the annotation\n+     * found\n+     * nor the attribute was specified.\n+     *\n+     * @return the query string or null\n+     */\n+    @Nullable\n+    public String getQueryAnnotation() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg4ODA5MA=="}, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzA5MDAxOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/support/StringBasedCosmosQuery.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwODo0NTowM1rOHLkuuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo0ODo0M1rOHMaXPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg5ODE3MQ==", "bodyText": "Use p.getName().orElse(\"\") instead of p.getName().get() to avoid NPE.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r481898171", "createdAt": "2020-09-02T08:45:03Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/support/StringBasedCosmosQuery.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.data.cosmos.repository.support;\n+\n+import com.azure.cosmos.models.SqlParameter;\n+import com.azure.cosmos.models.SqlQuerySpec;\n+import com.azure.spring.data.cosmos.core.CosmosOperations;\n+import com.azure.spring.data.cosmos.core.query.CosmosQuery;\n+import com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery;\n+import com.azure.spring.data.cosmos.repository.query.CosmosParameterAccessor;\n+import com.azure.spring.data.cosmos.repository.query.CosmosParameterParameterAccessor;\n+import com.azure.spring.data.cosmos.repository.query.CosmosQueryMethod;\n+import org.springframework.data.repository.query.ResultProcessor;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter.toCosmosDbValue;\n+\n+/**\n+ * Cosmos query class to handle the annotated queries. This overrides the execution and runs the query directly\n+ */\n+public class StringBasedCosmosQuery extends AbstractCosmosQuery {\n+    private final String query;\n+\n+    /**\n+     * Constructor\n+     * @param queryMethod the CosmosQueryMethod\n+     * @param dbOperations the CosmosOperations\n+     */\n+    public StringBasedCosmosQuery(CosmosQueryMethod queryMethod, CosmosOperations dbOperations) {\n+        super(queryMethod, dbOperations);\n+        this.query = queryMethod.getQueryAnnotation();\n+    }\n+\n+    @Override\n+    protected CosmosQuery createQuery(CosmosParameterAccessor accessor) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object execute(final Object[] parameters) {\n+        final CosmosParameterAccessor accessor = new CosmosParameterParameterAccessor(getQueryMethod(), parameters);\n+        final ResultProcessor processor = getQueryMethod().getResultProcessor().withDynamicProjection(accessor);\n+\n+        List<SqlParameter> sqlParameters = getQueryMethod().getParameters().stream()\n+                            .map(p -> new SqlParameter(\"@\" + p.getName().get(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3Njg5NQ==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r482776895", "createdAt": "2020-09-03T07:48:43Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/support/StringBasedCosmosQuery.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.data.cosmos.repository.support;\n+\n+import com.azure.cosmos.models.SqlParameter;\n+import com.azure.cosmos.models.SqlQuerySpec;\n+import com.azure.spring.data.cosmos.core.CosmosOperations;\n+import com.azure.spring.data.cosmos.core.query.CosmosQuery;\n+import com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery;\n+import com.azure.spring.data.cosmos.repository.query.CosmosParameterAccessor;\n+import com.azure.spring.data.cosmos.repository.query.CosmosParameterParameterAccessor;\n+import com.azure.spring.data.cosmos.repository.query.CosmosQueryMethod;\n+import org.springframework.data.repository.query.ResultProcessor;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter.toCosmosDbValue;\n+\n+/**\n+ * Cosmos query class to handle the annotated queries. This overrides the execution and runs the query directly\n+ */\n+public class StringBasedCosmosQuery extends AbstractCosmosQuery {\n+    private final String query;\n+\n+    /**\n+     * Constructor\n+     * @param queryMethod the CosmosQueryMethod\n+     * @param dbOperations the CosmosOperations\n+     */\n+    public StringBasedCosmosQuery(CosmosQueryMethod queryMethod, CosmosOperations dbOperations) {\n+        super(queryMethod, dbOperations);\n+        this.query = queryMethod.getQueryAnnotation();\n+    }\n+\n+    @Override\n+    protected CosmosQuery createQuery(CosmosParameterAccessor accessor) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object execute(final Object[] parameters) {\n+        final CosmosParameterAccessor accessor = new CosmosParameterParameterAccessor(getQueryMethod(), parameters);\n+        final ResultProcessor processor = getQueryMethod().getResultProcessor().withDynamicProjection(accessor);\n+\n+        List<SqlParameter> sqlParameters = getQueryMethod().getParameters().stream()\n+                            .map(p -> new SqlParameter(\"@\" + p.getName().get(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg5ODE3MQ=="}, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzA5MDc5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/support/StringBasedReactiveCosmosQuery.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwODo0NToxMlrOHLkvQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo0ODo0OFrOHMaXag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg5ODMwNQ==", "bodyText": "Use p.getName().orElse(\"\") instead of p.getName().get() to avoid NPE.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r481898305", "createdAt": "2020-09-02T08:45:12Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/support/StringBasedReactiveCosmosQuery.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.data.cosmos.repository.support;\n+\n+import com.azure.cosmos.models.SqlParameter;\n+import com.azure.cosmos.models.SqlQuerySpec;\n+import com.azure.spring.data.cosmos.core.ReactiveCosmosOperations;\n+import com.azure.spring.data.cosmos.core.query.CosmosQuery;\n+import com.azure.spring.data.cosmos.repository.query.AbstractReactiveCosmosQuery;\n+import com.azure.spring.data.cosmos.repository.query.ReactiveCosmosParameterAccessor;\n+import com.azure.spring.data.cosmos.repository.query.ReactiveCosmosParameterParameterAccessor;\n+import com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryMethod;\n+import org.springframework.data.repository.query.ResultProcessor;\n+import reactor.core.publisher.Flux;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter.toCosmosDbValue;\n+\n+/**\n+ * Cosmos query class to handle the annotated queries. This overrides the execution and runs the query directly\n+ */\n+public class StringBasedReactiveCosmosQuery extends AbstractReactiveCosmosQuery {\n+    private final String query;\n+\n+    /**\n+     * Constructor\n+     * @param queryMethod the query method\n+     * @param dbOperations the reactive cosmos operations\n+     */\n+    public StringBasedReactiveCosmosQuery(ReactiveCosmosQueryMethod queryMethod,\n+                                          ReactiveCosmosOperations dbOperations) {\n+        super(queryMethod, dbOperations);\n+        this.query = queryMethod.getQueryAnnotatation();\n+    }\n+\n+    @Override\n+    protected CosmosQuery createQuery(ReactiveCosmosParameterAccessor accessor) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object execute(final Object[] parameters) {\n+        final ReactiveCosmosParameterAccessor accessor = new ReactiveCosmosParameterParameterAccessor(getQueryMethod(),\n+                                                                                              parameters);\n+        final ResultProcessor processor = getQueryMethod().getResultProcessor().withDynamicProjection(accessor);\n+\n+        List<SqlParameter> sqlParameters = getQueryMethod().getParameters().stream()\n+                            .map(p -> new SqlParameter(\"@\" + p.getName().get(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3NjkzOA==", "bodyText": "done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r482776938", "createdAt": "2020-09-03T07:48:48Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/support/StringBasedReactiveCosmosQuery.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.data.cosmos.repository.support;\n+\n+import com.azure.cosmos.models.SqlParameter;\n+import com.azure.cosmos.models.SqlQuerySpec;\n+import com.azure.spring.data.cosmos.core.ReactiveCosmosOperations;\n+import com.azure.spring.data.cosmos.core.query.CosmosQuery;\n+import com.azure.spring.data.cosmos.repository.query.AbstractReactiveCosmosQuery;\n+import com.azure.spring.data.cosmos.repository.query.ReactiveCosmosParameterAccessor;\n+import com.azure.spring.data.cosmos.repository.query.ReactiveCosmosParameterParameterAccessor;\n+import com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryMethod;\n+import org.springframework.data.repository.query.ResultProcessor;\n+import reactor.core.publisher.Flux;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter.toCosmosDbValue;\n+\n+/**\n+ * Cosmos query class to handle the annotated queries. This overrides the execution and runs the query directly\n+ */\n+public class StringBasedReactiveCosmosQuery extends AbstractReactiveCosmosQuery {\n+    private final String query;\n+\n+    /**\n+     * Constructor\n+     * @param queryMethod the query method\n+     * @param dbOperations the reactive cosmos operations\n+     */\n+    public StringBasedReactiveCosmosQuery(ReactiveCosmosQueryMethod queryMethod,\n+                                          ReactiveCosmosOperations dbOperations) {\n+        super(queryMethod, dbOperations);\n+        this.query = queryMethod.getQueryAnnotatation();\n+    }\n+\n+    @Override\n+    protected CosmosQuery createQuery(ReactiveCosmosParameterAccessor accessor) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object execute(final Object[] parameters) {\n+        final ReactiveCosmosParameterAccessor accessor = new ReactiveCosmosParameterParameterAccessor(getQueryMethod(),\n+                                                                                              parameters);\n+        final ResultProcessor processor = getQueryMethod().getResultProcessor().withDynamicProjection(accessor);\n+\n+        List<SqlParameter> sqlParameters = getQueryMethod().getParameters().stream()\n+                            .map(p -> new SqlParameter(\"@\" + p.getName().get(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg5ODMwNQ=="}, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzExMjMxOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/domain/Contact.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwODo0ODo1OFrOHLk86A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo0ODo1NVrOHMaXpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkwMTgwMA==", "bodyText": "Rename status to active.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r481901800", "createdAt": "2020-09-02T08:48:58Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/domain/Contact.java", "diffHunk": "@@ -14,6 +14,10 @@\n \n     private String title;\n \n+    private int intValue;\n+\n+    private boolean status;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3Njk5OQ==", "bodyText": "changed to isActive.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r482776999", "createdAt": "2020-09-03T07:48:55Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/domain/Contact.java", "diffHunk": "@@ -14,6 +14,10 @@\n \n     private String title;\n \n+    private int intValue;\n+\n+    private boolean status;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkwMTgwMA=="}, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzE0MzQxOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/repository/ContactRepository.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwODo1NDozNVrOHLlRTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo1MDowN1rOHMaahg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkwNzAyMQ==", "bodyText": "getContactsByTitleAndValue", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r481907021", "createdAt": "2020-09-02T08:54:35Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/repository/ContactRepository.java", "diffHunk": "@@ -17,4 +21,17 @@\n     Contact findOneByTitle(String title);\n \n     Optional<Contact> findOptionallyByTitle(String title);\n+\n+    @Query(value = \"select * from c where c.title = @title and c.intValue = @value\")\n+    List<Contact> contactWithValueTitle(@Param(\"value\") int value, @Param(\"title\") String name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3NzczNA==", "bodyText": "Done.\n(I wanted name to not be mistaken for derived queries and want to showcase that name doesn't matter when you have a query annotation)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r482777734", "createdAt": "2020-09-03T07:50:07Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/repository/ContactRepository.java", "diffHunk": "@@ -17,4 +21,17 @@\n     Contact findOneByTitle(String title);\n \n     Optional<Contact> findOptionallyByTitle(String title);\n+\n+    @Query(value = \"select * from c where c.title = @title and c.intValue = @value\")\n+    List<Contact> contactWithValueTitle(@Param(\"value\") int value, @Param(\"title\") String name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkwNzAyMQ=="}, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzE1MjAxOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/repository/ContactRepository.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwODo1NjowNFrOHLlWug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo1MDoxMlrOHMaarg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkwODQxMA==", "bodyText": "getContactsWithOffsetAndLimit", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r481908410", "createdAt": "2020-09-02T08:56:04Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/repository/ContactRepository.java", "diffHunk": "@@ -17,4 +21,17 @@\n     Contact findOneByTitle(String title);\n \n     Optional<Contact> findOptionallyByTitle(String title);\n+\n+    @Query(value = \"select * from c where c.title = @title and c.intValue = @value\")\n+    List<Contact> contactWithValueTitle(@Param(\"value\") int value, @Param(\"title\") String name);\n+\n+    @Query(value = \"select * from c offset @offset limit @limit\")\n+    List<Contact> contactsWithOffsetLimit(@Param(\"offset\") int offset, @Param(\"limit\") int limit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3Nzc3NA==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r482777774", "createdAt": "2020-09-03T07:50:12Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/repository/ContactRepository.java", "diffHunk": "@@ -17,4 +21,17 @@\n     Contact findOneByTitle(String title);\n \n     Optional<Contact> findOptionallyByTitle(String title);\n+\n+    @Query(value = \"select * from c where c.title = @title and c.intValue = @value\")\n+    List<Contact> contactWithValueTitle(@Param(\"value\") int value, @Param(\"title\") String name);\n+\n+    @Query(value = \"select * from c offset @offset limit @limit\")\n+    List<Contact> contactsWithOffsetLimit(@Param(\"offset\") int offset, @Param(\"limit\") int limit);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkwODQxMA=="}, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzE1ODIyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/repository/ContactRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwODo1NzowNFrOHLla1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo1MDoxOFrOHMaa6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkwOTQ2MA==", "bodyText": "Rename num_ids to id_count", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r481909460", "createdAt": "2020-09-02T08:57:04Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/repository/ContactRepository.java", "diffHunk": "@@ -17,4 +21,17 @@\n     Contact findOneByTitle(String title);\n \n     Optional<Contact> findOptionallyByTitle(String title);\n+\n+    @Query(value = \"select * from c where c.title = @title and c.intValue = @value\")\n+    List<Contact> contactWithValueTitle(@Param(\"value\") int value, @Param(\"title\") String name);\n+\n+    @Query(value = \"select * from c offset @offset limit @limit\")\n+    List<Contact> contactsWithOffsetLimit(@Param(\"offset\") int offset, @Param(\"limit\") int limit);\n+\n+    @Query(value = \"select * from c where c.status= true\")\n+    List<Contact> findActiveContacts();\n+\n+    @Query(value = \"SELECT count(c.id) as num_ids, c.intValue FROM c group by c.intValue\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3NzgzMw==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r482777833", "createdAt": "2020-09-03T07:50:18Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/repository/ContactRepository.java", "diffHunk": "@@ -17,4 +21,17 @@\n     Contact findOneByTitle(String title);\n \n     Optional<Contact> findOptionallyByTitle(String title);\n+\n+    @Query(value = \"select * from c where c.title = @title and c.intValue = @value\")\n+    List<Contact> contactWithValueTitle(@Param(\"value\") int value, @Param(\"title\") String name);\n+\n+    @Query(value = \"select * from c offset @offset limit @limit\")\n+    List<Contact> contactsWithOffsetLimit(@Param(\"offset\") int offset, @Param(\"limit\") int limit);\n+\n+    @Query(value = \"select * from c where c.status= true\")\n+    List<Contact> findActiveContacts();\n+\n+    @Query(value = \"SELECT count(c.id) as num_ids, c.intValue FROM c group by c.intValue\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkwOTQ2MA=="}, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzE5Nzg3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/integration/ContactRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTowNDozM1rOHLl0yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNTozNjozMFrOHNAN4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxNjEwNg==", "bodyText": "To make test code easier to read, could you please:\n\nDelete Contact.Contact() and Contact.Contact(String logicId, String title), only keep Contact(final String logicId, final String title, final int intValue, boolean status).\nDelete all contects create in unit tests, define them as static field, just like TEST_CONTACT1 to TEST_CONTACT5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r481916106", "createdAt": "2020-09-02T09:04:33Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/integration/ContactRepositoryIT.java", "diffHunk": "@@ -33,7 +35,11 @@\n @ContextConfiguration(classes = TestRepositoryConfig.class)\n public class ContactRepositoryIT {\n \n-    private static final Contact TEST_CONTACT = new Contact(\"testId\", \"faketitle\");\n+    private static final Contact TEST_CONTACT = new Contact(\"testId\", \"faketitle\", 25, true);\n+    private static final Contact TEST_CONTACT2 = new Contact(\"testId2\", \"faketitle2\",  32, false);\n+    private static final Contact TEST_CONTACT3 = new Contact(\"testId3\", \"faketitle3\", 25, false);\n+    private static final Contact TEST_CONTACT4 = new Contact(\"testId4\", \"faketitle4\", 43, true);\n+    private static final Contact TEST_CONTACT5 = new Contact(\"testId5\", \"faketitle3\", 43, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3ODI0OA==", "bodyText": "Again, wan to keep the changes minimal and relevant to query annotation in this PR. I can clean the other tests in another PR", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r482778248", "createdAt": "2020-09-03T07:50:54Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/integration/ContactRepositoryIT.java", "diffHunk": "@@ -33,7 +35,11 @@\n @ContextConfiguration(classes = TestRepositoryConfig.class)\n public class ContactRepositoryIT {\n \n-    private static final Contact TEST_CONTACT = new Contact(\"testId\", \"faketitle\");\n+    private static final Contact TEST_CONTACT = new Contact(\"testId\", \"faketitle\", 25, true);\n+    private static final Contact TEST_CONTACT2 = new Contact(\"testId2\", \"faketitle2\",  32, false);\n+    private static final Contact TEST_CONTACT3 = new Contact(\"testId3\", \"faketitle3\", 25, false);\n+    private static final Contact TEST_CONTACT4 = new Contact(\"testId4\", \"faketitle4\", 43, true);\n+    private static final Contact TEST_CONTACT5 = new Contact(\"testId5\", \"faketitle3\", 43, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxNjEwNg=="}, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM5MjEzMw==", "bodyText": "OK, Thank you. Please create an issue, and put a link here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r483392133", "createdAt": "2020-09-04T05:18:24Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/integration/ContactRepositoryIT.java", "diffHunk": "@@ -33,7 +35,11 @@\n @ContextConfiguration(classes = TestRepositoryConfig.class)\n public class ContactRepositoryIT {\n \n-    private static final Contact TEST_CONTACT = new Contact(\"testId\", \"faketitle\");\n+    private static final Contact TEST_CONTACT = new Contact(\"testId\", \"faketitle\", 25, true);\n+    private static final Contact TEST_CONTACT2 = new Contact(\"testId2\", \"faketitle2\",  32, false);\n+    private static final Contact TEST_CONTACT3 = new Contact(\"testId3\", \"faketitle3\", 25, false);\n+    private static final Contact TEST_CONTACT4 = new Contact(\"testId4\", \"faketitle4\", 43, true);\n+    private static final Contact TEST_CONTACT5 = new Contact(\"testId5\", \"faketitle3\", 43, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxNjEwNg=="}, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM5NzA5MQ==", "bodyText": "#14828", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r483397091", "createdAt": "2020-09-04T05:36:30Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/integration/ContactRepositoryIT.java", "diffHunk": "@@ -33,7 +35,11 @@\n @ContextConfiguration(classes = TestRepositoryConfig.class)\n public class ContactRepositoryIT {\n \n-    private static final Contact TEST_CONTACT = new Contact(\"testId\", \"faketitle\");\n+    private static final Contact TEST_CONTACT = new Contact(\"testId\", \"faketitle\", 25, true);\n+    private static final Contact TEST_CONTACT2 = new Contact(\"testId2\", \"faketitle2\",  32, false);\n+    private static final Contact TEST_CONTACT3 = new Contact(\"testId3\", \"faketitle3\", 25, false);\n+    private static final Contact TEST_CONTACT4 = new Contact(\"testId4\", \"faketitle4\", 43, true);\n+    private static final Contact TEST_CONTACT5 = new Contact(\"testId5\", \"faketitle3\", 43, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxNjEwNg=="}, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzE5OTE5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/integration/ContactRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTowNDo0OFrOHLl1iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo1MDo1OFrOHMacqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxNjI5Nw==", "bodyText": "Rename to TEST_CONTACT1.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r481916297", "createdAt": "2020-09-02T09:04:48Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/integration/ContactRepositoryIT.java", "diffHunk": "@@ -33,7 +35,11 @@\n @ContextConfiguration(classes = TestRepositoryConfig.class)\n public class ContactRepositoryIT {\n \n-    private static final Contact TEST_CONTACT = new Contact(\"testId\", \"faketitle\");\n+    private static final Contact TEST_CONTACT = new Contact(\"testId\", \"faketitle\", 25, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3ODI4MA==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r482778280", "createdAt": "2020-09-03T07:50:58Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/integration/ContactRepositoryIT.java", "diffHunk": "@@ -33,7 +35,11 @@\n @ContextConfiguration(classes = TestRepositoryConfig.class)\n public class ContactRepositoryIT {\n \n-    private static final Contact TEST_CONTACT = new Contact(\"testId\", \"faketitle\");\n+    private static final Contact TEST_CONTACT = new Contact(\"testId\", \"faketitle\", 25, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxNjI5Nw=="}, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzIxNjQ0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/repository/ReactiveCourseRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTowODowMVrOHLmAiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo1MTowNVrOHMadAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxOTExMw==", "bodyText": "getCoursesByNameAndDepartment", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r481919113", "createdAt": "2020-09-02T09:08:01Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/repository/ReactiveCourseRepository.java", "diffHunk": "@@ -43,4 +46,10 @@\n      */\n     Mono<Course> findOneByName(String name);\n \n+    @Query(value = \"select * from c where c.name = @name and c.department = @department\")\n+    Flux<Course> coursesWithNameDepartment(@Param(\"name\") String name, @Param(\"department\") String department);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3ODM2OQ==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r482778369", "createdAt": "2020-09-03T07:51:05Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/repository/ReactiveCourseRepository.java", "diffHunk": "@@ -43,4 +46,10 @@\n      */\n     Mono<Course> findOneByName(String name);\n \n+    @Query(value = \"select * from c where c.name = @name and c.department = @department\")\n+    Flux<Course> coursesWithNameDepartment(@Param(\"name\") String name, @Param(\"department\") String department);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxOTExMw=="}, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzIxOTE2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/repository/ReactiveCourseRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTowODozMVrOHLmCIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo1NjoyNVrOHMapoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxOTUyMA==", "bodyText": "getCoursesGroupByDepartment.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r481919520", "createdAt": "2020-09-02T09:08:31Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/repository/ReactiveCourseRepository.java", "diffHunk": "@@ -43,4 +46,10 @@\n      */\n     Mono<Course> findOneByName(String name);\n \n+    @Query(value = \"select * from c where c.name = @name and c.department = @department\")\n+    Flux<Course> coursesWithNameDepartment(@Param(\"name\") String name, @Param(\"department\") String department);\n+\n+    @Query(value = \"select count(c.id) as num_ids, c.department from c group by c.department\")\n+    Flux<ObjectNode> coursesGroupBy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc4MTYwMA==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r482781600", "createdAt": "2020-09-03T07:56:25Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/repository/ReactiveCourseRepository.java", "diffHunk": "@@ -43,4 +46,10 @@\n      */\n     Mono<Course> findOneByName(String name);\n \n+    @Query(value = \"select * from c where c.name = @name and c.department = @department\")\n+    Flux<Course> coursesWithNameDepartment(@Param(\"name\") String name, @Param(\"department\") String department);\n+\n+    @Query(value = \"select count(c.id) as num_ids, c.department from c group by c.department\")\n+    Flux<ObjectNode> coursesGroupBy();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxOTUyMA=="}, "originalCommit": {"oid": "9c8897c86cac147ac46118be15b47859528c8f26"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzg5Nzk1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/query/CosmosQueryMethod.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjo0MDoxN1rOHNuifQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwODowODoxNVrOHN1CDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1NjAyOQ==", "bodyText": "Can we just delete field method, use stringInQueryAnnotation instead?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r484156029", "createdAt": "2020-09-07T02:40:17Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/query/CosmosQueryMethod.java", "diffHunk": "@@ -27,6 +33,7 @@\n      */\n     public CosmosQueryMethod(Method method, RepositoryMetadata metadata, ProjectionFactory factory) {\n         super(method, metadata, factory);\n+        this.method = method;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82bc456d19c71b49e4a01db3850622ed2560a12e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI2MjQxNA==", "bodyText": "Refactored", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r484262414", "createdAt": "2020-09-07T08:08:15Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/query/CosmosQueryMethod.java", "diffHunk": "@@ -27,6 +33,7 @@\n      */\n     public CosmosQueryMethod(Method method, RepositoryMetadata metadata, ProjectionFactory factory) {\n         super(method, metadata, factory);\n+        this.method = method;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1NjAyOQ=="}, "originalCommit": {"oid": "82bc456d19c71b49e4a01db3850622ed2560a12e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzkwMDQyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/query/ReactiveCosmosQueryMethod.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjo0MjoxNVrOHNuj6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwODowODoyM1rOHN1CWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1NjM5Mg==", "bodyText": "Same here, we can use a field stringInQueryAnnotation  instead of calculate it  every time.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r484156392", "createdAt": "2020-09-07T02:42:15Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/query/ReactiveCosmosQueryMethod.java", "diffHunk": "@@ -56,4 +61,33 @@ public ReactiveCosmosQueryMethod(Method method, RepositoryMetadata metadata, Pro\n     private static boolean isReactiveWrapperClass(Class<?> clazz) {\n         return clazz.equals(Flux.class) || clazz.equals(Mono.class);\n     }\n+\n+    /**\n+     * Returns whether the method has an annotated query.\n+     * @return if the query method has an annotated query\n+     */\n+    public boolean hasAnnotatedQuery() {\n+        return findAnnotatedQuery().isPresent();\n+    }\n+\n+    /**\n+     * Gets the annotated query or returns null\n+     * @return the annotated query String or null\n+     */\n+    @Nullable\n+    public String getQueryAnnotation() {\n+        return findAnnotatedQuery().orElse(null);\n+    }\n+\n+    private Optional<String> findAnnotatedQuery() {\n+\n+        return lookupQueryAnnotation()\n+                   .map(Query::value)\n+                   .filter(StringUtils::hasText);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82bc456d19c71b49e4a01db3850622ed2560a12e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI2MjQ5MQ==", "bodyText": "Refactored", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r484262491", "createdAt": "2020-09-07T08:08:23Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/query/ReactiveCosmosQueryMethod.java", "diffHunk": "@@ -56,4 +61,33 @@ public ReactiveCosmosQueryMethod(Method method, RepositoryMetadata metadata, Pro\n     private static boolean isReactiveWrapperClass(Class<?> clazz) {\n         return clazz.equals(Flux.class) || clazz.equals(Mono.class);\n     }\n+\n+    /**\n+     * Returns whether the method has an annotated query.\n+     * @return if the query method has an annotated query\n+     */\n+    public boolean hasAnnotatedQuery() {\n+        return findAnnotatedQuery().isPresent();\n+    }\n+\n+    /**\n+     * Gets the annotated query or returns null\n+     * @return the annotated query String or null\n+     */\n+    @Nullable\n+    public String getQueryAnnotation() {\n+        return findAnnotatedQuery().orElse(null);\n+    }\n+\n+    private Optional<String> findAnnotatedQuery() {\n+\n+        return lookupQueryAnnotation()\n+                   .map(Query::value)\n+                   .filter(StringUtils::hasText);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1NjM5Mg=="}, "originalCommit": {"oid": "82bc456d19c71b49e4a01db3850622ed2560a12e"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODYxODA0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/query/CosmosQueryMethod.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwODoxMDo0NlrOHN1HSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwODoxMzo1NFrOHN1N-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI2Mzc1Mw==", "bodyText": "Can we just delete method findAnnotatedQuery, and write the code directory in constructor?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r484263753", "createdAt": "2020-09-07T08:10:46Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/query/CosmosQueryMethod.java", "diffHunk": "@@ -64,18 +65,13 @@ public boolean hasAnnotatedQuery() {\n      */\n     @Nullable\n     public String getQueryAnnotation() {\n-        return findAnnotatedQuery().orElse(null);\n+        return annotatedQueryValue;\n     }\n \n-    private Optional<String> findAnnotatedQuery() {\n-\n-        return lookupQueryAnnotation()\n+    private Optional<String> findAnnotatedQuery(Method method) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4722fbe0672a3cf6d6f03a197a78aa57a7a5feea"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI2NTQ2Ng==", "bodyText": "Good to have it in a function to keep the constructor clean", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14661#discussion_r484265466", "createdAt": "2020-09-07T08:13:54Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/query/CosmosQueryMethod.java", "diffHunk": "@@ -64,18 +65,13 @@ public boolean hasAnnotatedQuery() {\n      */\n     @Nullable\n     public String getQueryAnnotation() {\n-        return findAnnotatedQuery().orElse(null);\n+        return annotatedQueryValue;\n     }\n \n-    private Optional<String> findAnnotatedQuery() {\n-\n-        return lookupQueryAnnotation()\n+    private Optional<String> findAnnotatedQuery(Method method) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI2Mzc1Mw=="}, "originalCommit": {"oid": "4722fbe0672a3cf6d6f03a197a78aa57a7a5feea"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1346, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}