{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMTc5Nzgy", "number": 10696, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMToyMDoxOVrOD5K1QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMToyMjoyMVrOD5K3vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjcyODk2OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMToyMDoyMFrOGQSoPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMjowODoyM1rOGQUAkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTczNTYxMw==", "bodyText": "I gave some of the comment in PR  #10680  about this and some documentation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10696#discussion_r419735613", "createdAt": "2020-05-04T21:20:20Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -570,20 +631,158 @@ public ServiceBusReceiverClientBuilder subscriptionName(String subscriptionName)\n          * @return The modified {@link ServiceBusReceiverClientBuilder} object.\n          * @see #subscriptionName A subscription name should be set as well.\n          */\n-        public ServiceBusReceiverClientBuilder topicName(String topicName) {\n+        public ServiceBusSessionReceiverClientBuilder topicName(String topicName) {\n             this.topicName = topicName;\n             return this;\n         }\n \n         /**\n-         * Sets the session id.\n+         * Creates an <b>asynchronous</b>, <b>session-aware</b> Service Bus receiver responsible for reading\n+         * {@link ServiceBusMessage messages} from a specific queue or topic.\n          *\n-         * @param sessionId session id.\n+         * @return An new {@link ServiceBusReceiverAsyncClient} that receives messages from a queue or topic.\n+         * @throws IllegalStateException if {@link #queueName(String) queueName} or {@link #topicName(String)\n+         *     topicName} are not set or, both of these fields are set. It is also thrown if the Service Bus {@link\n+         *     #connectionString(String) connectionString} contains an {@code EntityPath} that does not match one set in\n+         *     {@link #queueName(String) queueName} or {@link #topicName(String) topicName}. Lastly, if a {@link\n+         *     #topicName(String) topicName} is set, but {@link #subscriptionName(String) subscriptionName} is not.\n+         * @throws IllegalArgumentException Queue or topic name are not set via {@link #queueName(String)\n+         *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n+         */\n+        public ServiceBusReceiverAsyncClient buildAsyncClient() {\n+            final MessagingEntityType entityType = validateEntityPaths(logger, connectionStringEntityName, topicName,\n+                queueName);\n+            final String entityPath = getEntityPath(logger, entityType, queueName, topicName, subscriptionName);\n+\n+            if (prefetchCount < 1) {\n+                throw logger.logExceptionAsError(new IllegalArgumentException(String.format(\n+                    \"prefetchCount (%s) cannot be less than 1.\", prefetchCount)));\n+            }\n+\n+            final ServiceBusConnectionProcessor connectionProcessor = getOrCreateConnectionProcessor(messageSerializer);\n+            final ReceiverOptions receiverOptions = new ReceiverOptions(receiveMode, prefetchCount, sessionId,\n+                isRollingSessionReceiver(), maxConcurrentSessions);\n+\n+            return new ServiceBusReceiverAsyncClient(connectionProcessor.getFullyQualifiedNamespace(), entityPath,\n+                entityType, receiverOptions, connectionProcessor, ServiceBusConstants.OPERATION_TIMEOUT,\n+                tracerProvider, messageSerializer, ServiceBusClientBuilder.this::onClientClose);\n+        }\n+\n+        /**\n+         * Creates a <b>synchronous</b>, <b>session-aware</b> Service Bus receiver responsible for reading\n+         * {@link ServiceBusMessage messages} from a specific queue or topic.\n+         *\n+         * @return An new {@link ServiceBusReceiverClient} that receives messages from a queue or topic.\n+         * @throws IllegalStateException if {@link #queueName(String) queueName} or {@link #topicName(String)\n+         *     topicName} are not set or, both of these fields are set. It is also thrown if the Service Bus {@link\n+         *     #connectionString(String) connectionString} contains an {@code EntityPath} that does not match one set in\n+         *     {@link #queueName(String) queueName} or {@link #topicName(String) topicName}. Lastly, if a {@link\n+         *     #topicName(String) topicName} is set, but {@link #subscriptionName(String) subscriptionName} is not.\n+         * @throws IllegalArgumentException Queue or topic name are not set via {@link #queueName(String)\n+         *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n+         */\n+        public ServiceBusReceiverClient buildClient() {\n+            return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n+        }\n+\n+        /**\n+         * This is a rolling session receiver only if maxConcurrentSessions is > 0 AND sessionId is null or empty. If\n+         * there is a sessionId, this is going to be a single, named session receiver.\n+         *\n+         * @return {@code true} if this is an unnamed rolling session receiver; {@code false} otherwise.\n+         */\n+        private boolean isRollingSessionReceiver() {\n+            if (maxConcurrentSessions == null) {\n+                return false;\n+            }\n+\n+            if (maxConcurrentSessions < 1) {\n+                throw logger.logExceptionAsError(\n+                    new IllegalArgumentException(\"Maximum number of concurrent sessions must be positive.\"));\n+            }\n+\n+            return CoreUtils.isNullOrEmpty(sessionId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2034aca6a2a6a6b0f78bd30087c9996a34a38e6f"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1ODIyNA==", "bodyText": "Resolved from my response. #10687 (comment)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10696#discussion_r419758224", "createdAt": "2020-05-04T22:08:23Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -570,20 +631,158 @@ public ServiceBusReceiverClientBuilder subscriptionName(String subscriptionName)\n          * @return The modified {@link ServiceBusReceiverClientBuilder} object.\n          * @see #subscriptionName A subscription name should be set as well.\n          */\n-        public ServiceBusReceiverClientBuilder topicName(String topicName) {\n+        public ServiceBusSessionReceiverClientBuilder topicName(String topicName) {\n             this.topicName = topicName;\n             return this;\n         }\n \n         /**\n-         * Sets the session id.\n+         * Creates an <b>asynchronous</b>, <b>session-aware</b> Service Bus receiver responsible for reading\n+         * {@link ServiceBusMessage messages} from a specific queue or topic.\n          *\n-         * @param sessionId session id.\n+         * @return An new {@link ServiceBusReceiverAsyncClient} that receives messages from a queue or topic.\n+         * @throws IllegalStateException if {@link #queueName(String) queueName} or {@link #topicName(String)\n+         *     topicName} are not set or, both of these fields are set. It is also thrown if the Service Bus {@link\n+         *     #connectionString(String) connectionString} contains an {@code EntityPath} that does not match one set in\n+         *     {@link #queueName(String) queueName} or {@link #topicName(String) topicName}. Lastly, if a {@link\n+         *     #topicName(String) topicName} is set, but {@link #subscriptionName(String) subscriptionName} is not.\n+         * @throws IllegalArgumentException Queue or topic name are not set via {@link #queueName(String)\n+         *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n+         */\n+        public ServiceBusReceiverAsyncClient buildAsyncClient() {\n+            final MessagingEntityType entityType = validateEntityPaths(logger, connectionStringEntityName, topicName,\n+                queueName);\n+            final String entityPath = getEntityPath(logger, entityType, queueName, topicName, subscriptionName);\n+\n+            if (prefetchCount < 1) {\n+                throw logger.logExceptionAsError(new IllegalArgumentException(String.format(\n+                    \"prefetchCount (%s) cannot be less than 1.\", prefetchCount)));\n+            }\n+\n+            final ServiceBusConnectionProcessor connectionProcessor = getOrCreateConnectionProcessor(messageSerializer);\n+            final ReceiverOptions receiverOptions = new ReceiverOptions(receiveMode, prefetchCount, sessionId,\n+                isRollingSessionReceiver(), maxConcurrentSessions);\n+\n+            return new ServiceBusReceiverAsyncClient(connectionProcessor.getFullyQualifiedNamespace(), entityPath,\n+                entityType, receiverOptions, connectionProcessor, ServiceBusConstants.OPERATION_TIMEOUT,\n+                tracerProvider, messageSerializer, ServiceBusClientBuilder.this::onClientClose);\n+        }\n+\n+        /**\n+         * Creates a <b>synchronous</b>, <b>session-aware</b> Service Bus receiver responsible for reading\n+         * {@link ServiceBusMessage messages} from a specific queue or topic.\n+         *\n+         * @return An new {@link ServiceBusReceiverClient} that receives messages from a queue or topic.\n+         * @throws IllegalStateException if {@link #queueName(String) queueName} or {@link #topicName(String)\n+         *     topicName} are not set or, both of these fields are set. It is also thrown if the Service Bus {@link\n+         *     #connectionString(String) connectionString} contains an {@code EntityPath} that does not match one set in\n+         *     {@link #queueName(String) queueName} or {@link #topicName(String) topicName}. Lastly, if a {@link\n+         *     #topicName(String) topicName} is set, but {@link #subscriptionName(String) subscriptionName} is not.\n+         * @throws IllegalArgumentException Queue or topic name are not set via {@link #queueName(String)\n+         *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n+         */\n+        public ServiceBusReceiverClient buildClient() {\n+            return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n+        }\n+\n+        /**\n+         * This is a rolling session receiver only if maxConcurrentSessions is > 0 AND sessionId is null or empty. If\n+         * there is a sessionId, this is going to be a single, named session receiver.\n+         *\n+         * @return {@code true} if this is an unnamed rolling session receiver; {@code false} otherwise.\n+         */\n+        private boolean isRollingSessionReceiver() {\n+            if (maxConcurrentSessions == null) {\n+                return false;\n+            }\n+\n+            if (maxConcurrentSessions < 1) {\n+                throw logger.logExceptionAsError(\n+                    new IllegalArgumentException(\"Maximum number of concurrent sessions must be positive.\"));\n+            }\n+\n+            return CoreUtils.isNullOrEmpty(sessionId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTczNTYxMw=="}, "originalCommit": {"oid": "2034aca6a2a6a6b0f78bd30087c9996a34a38e6f"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjczNTM1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMToyMjoyMVrOGQSsOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMToyMjoyMVrOGQSsOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTczNjYzNA==", "bodyText": "To avoid using doing mistake and not setting session id :  Sets the name of the subscription in the topic to listen to. You must also set {@code subscriptionName}.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10696#discussion_r419736634", "createdAt": "2020-05-04T21:22:21Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -570,20 +631,158 @@ public ServiceBusReceiverClientBuilder subscriptionName(String subscriptionName)\n          * @return The modified {@link ServiceBusReceiverClientBuilder} object.\n          * @see #subscriptionName A subscription name should be set as well.\n          */\n-        public ServiceBusReceiverClientBuilder topicName(String topicName) {\n+        public ServiceBusSessionReceiverClientBuilder topicName(String topicName) {\n             this.topicName = topicName;\n             return this;\n         }\n \n         /**\n-         * Sets the session id.\n+         * Creates an <b>asynchronous</b>, <b>session-aware</b> Service Bus receiver responsible for reading\n+         * {@link ServiceBusMessage messages} from a specific queue or topic.\n          *\n-         * @param sessionId session id.\n+         * @return An new {@link ServiceBusReceiverAsyncClient} that receives messages from a queue or topic.\n+         * @throws IllegalStateException if {@link #queueName(String) queueName} or {@link #topicName(String)\n+         *     topicName} are not set or, both of these fields are set. It is also thrown if the Service Bus {@link\n+         *     #connectionString(String) connectionString} contains an {@code EntityPath} that does not match one set in\n+         *     {@link #queueName(String) queueName} or {@link #topicName(String) topicName}. Lastly, if a {@link\n+         *     #topicName(String) topicName} is set, but {@link #subscriptionName(String) subscriptionName} is not.\n+         * @throws IllegalArgumentException Queue or topic name are not set via {@link #queueName(String)\n+         *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n+         */\n+        public ServiceBusReceiverAsyncClient buildAsyncClient() {\n+            final MessagingEntityType entityType = validateEntityPaths(logger, connectionStringEntityName, topicName,\n+                queueName);\n+            final String entityPath = getEntityPath(logger, entityType, queueName, topicName, subscriptionName);\n+\n+            if (prefetchCount < 1) {\n+                throw logger.logExceptionAsError(new IllegalArgumentException(String.format(\n+                    \"prefetchCount (%s) cannot be less than 1.\", prefetchCount)));\n+            }\n+\n+            final ServiceBusConnectionProcessor connectionProcessor = getOrCreateConnectionProcessor(messageSerializer);\n+            final ReceiverOptions receiverOptions = new ReceiverOptions(receiveMode, prefetchCount, sessionId,\n+                isRollingSessionReceiver(), maxConcurrentSessions);\n+\n+            return new ServiceBusReceiverAsyncClient(connectionProcessor.getFullyQualifiedNamespace(), entityPath,\n+                entityType, receiverOptions, connectionProcessor, ServiceBusConstants.OPERATION_TIMEOUT,\n+                tracerProvider, messageSerializer, ServiceBusClientBuilder.this::onClientClose);\n+        }\n+\n+        /**\n+         * Creates a <b>synchronous</b>, <b>session-aware</b> Service Bus receiver responsible for reading\n+         * {@link ServiceBusMessage messages} from a specific queue or topic.\n+         *\n+         * @return An new {@link ServiceBusReceiverClient} that receives messages from a queue or topic.\n+         * @throws IllegalStateException if {@link #queueName(String) queueName} or {@link #topicName(String)\n+         *     topicName} are not set or, both of these fields are set. It is also thrown if the Service Bus {@link\n+         *     #connectionString(String) connectionString} contains an {@code EntityPath} that does not match one set in\n+         *     {@link #queueName(String) queueName} or {@link #topicName(String) topicName}. Lastly, if a {@link\n+         *     #topicName(String) topicName} is set, but {@link #subscriptionName(String) subscriptionName} is not.\n+         * @throws IllegalArgumentException Queue or topic name are not set via {@link #queueName(String)\n+         *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n+         */\n+        public ServiceBusReceiverClient buildClient() {\n+            return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n+        }\n+\n+        /**\n+         * This is a rolling session receiver only if maxConcurrentSessions is > 0 AND sessionId is null or empty. If\n+         * there is a sessionId, this is going to be a single, named session receiver.\n+         *\n+         * @return {@code true} if this is an unnamed rolling session receiver; {@code false} otherwise.\n+         */\n+        private boolean isRollingSessionReceiver() {\n+            if (maxConcurrentSessions == null) {\n+                return false;\n+            }\n+\n+            if (maxConcurrentSessions < 1) {\n+                throw logger.logExceptionAsError(\n+                    new IllegalArgumentException(\"Maximum number of concurrent sessions must be positive.\"));\n+            }\n+\n+            return CoreUtils.isNullOrEmpty(sessionId);\n+        }\n+    }\n+\n+    /**\n+     * Builder for creating {@link ServiceBusReceiverClient} and {@link ServiceBusReceiverAsyncClient} to consume\n+     * messages from Service Bus.\n+     */\n+    @ServiceClientBuilder(serviceClients = {ServiceBusReceiverClient.class, ServiceBusReceiverAsyncClient.class})\n+    public final class ServiceBusReceiverClientBuilder {\n+        private int prefetchCount = DEFAULT_PREFETCH_COUNT;\n+        private String queueName;\n+        private ReceiveMode receiveMode = ReceiveMode.PEEK_LOCK;\n+        private String subscriptionName;\n+        private String topicName;\n+\n+        private ServiceBusReceiverClientBuilder() {\n+        }\n+\n+        /**\n+         * Sets the prefetch count of the receiver. Prefetch speeds up the message flow by aiming to have a message\n+         * readily available for local retrieval when and before the application asks for one using {@link\n+         * ServiceBusReceiverAsyncClient#receive()}. Setting a non-zero value will prefetch that number of messages.\n+         * Setting the value to zero turns prefetch off. For both {@link ReceiveMode#PEEK_LOCK PEEK_LOCK} and {@link\n+         * ReceiveMode#RECEIVE_AND_DELETE RECEIVE_AND_DELETE} modes the default value is 1.\n+         *\n+         * @param prefetchCount The prefetch count.\n          *\n          * @return The modified {@link ServiceBusReceiverClientBuilder} object.\n          */\n-        public ServiceBusReceiverClientBuilder sessionId(String sessionId) {\n-            this.sessionId = sessionId;\n+        public ServiceBusReceiverClientBuilder prefetchCount(int prefetchCount) {\n+            this.prefetchCount = prefetchCount;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the queue to create a receiver for.\n+         *\n+         * @param queueName Name of the queue.\n+         *\n+         * @return The modified {@link ServiceBusReceiverClientBuilder} object.\n+         */\n+        public ServiceBusReceiverClientBuilder queueName(String queueName) {\n+            this.queueName = queueName;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the receive mode for the receiver.\n+         *\n+         * @param receiveMode Mode for receiving messages.\n+         *\n+         * @return The modified {@link ServiceBusReceiverClientBuilder} object.\n+         */\n+        public ServiceBusReceiverClientBuilder receiveMode(ReceiveMode receiveMode) {\n+            this.receiveMode = receiveMode;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the subscription in the topic to listen to.\n+         *\n+         * @param subscriptionName Name of the subscription.\n+         *\n+         * @return The modified {@link ServiceBusReceiverClientBuilder} object.\n+         * @see #topicName A topic name should be set as well.\n+         */\n+        public ServiceBusReceiverClientBuilder subscriptionName(String subscriptionName) {\n+            this.subscriptionName = subscriptionName;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the topic.\n+         *\n+         * @param topicName Name of the topic.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2034aca6a2a6a6b0f78bd30087c9996a34a38e6f"}, "originalPosition": 309}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4450, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}