{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExOTI2MjA1", "number": 10649, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMTo0OTo0MlrOD5Odbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMjowMjo0MlrOD5Oksg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzMyMzM0OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormTrainingClientTestBase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMTo0OTo0MlrOGQYEDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMjowMDoxN1rOGQYMeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyNDY1NA==", "bodyText": "These two methods can simplify to be one generic method.\nprivate String getSasUri(String sasUrl) {}", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10649#discussion_r419824654", "createdAt": "2020-05-05T01:49:42Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormTrainingClientTestBase.java", "diffHunk": "@@ -306,15 +277,18 @@ String getApiKey() {\n     String getEndpoint() {\n         return interceptorManager.isPlaybackMode()\n             ? \"https://localhost:8080\"\n-            : Configuration.getGlobalConfiguration().get(\"AZURE_FORM_RECOGNIZER_ENDPOINT\");\n+            : Configuration.getGlobalConfiguration().get(AZURE_FORM_RECOGNIZER_ENDPOINT);\n     }\n \n-    private String createStorageAndGenerateSas(String folderPath) {\n-        if (interceptorManager.isPlaybackMode()) {\n-            return \"https://isPlaybackmode\";\n-        } else {\n-            return Configuration.getGlobalConfiguration().get(FORM_RECOGNIZER_TRAINING_BLOB_CONTAINER_SAS_URL);\n+    private String getTrainingSasUri() {\n+        return interceptorManager.isPlaybackMode()\n+            ? \"https://isPlaybackmode\"\n+            : Configuration.getGlobalConfiguration().get(FORM_RECOGNIZER_TRAINING_BLOB_CONTAINER_SAS_URL);\n+    }\n \n-        }\n+    private String getTestingSasUri() {\n+        return interceptorManager.isPlaybackMode()\n+            ? \"https://isPlaybackmode\"\n+            : Configuration.getGlobalConfiguration().get(FORM_RECOGNIZER_TESTING_BLOB_CONTAINER_SAS_URL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71684319f42e30997c02b5b9b3a611498fa3da5e"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyNjgwOA==", "bodyText": "they are returning different configurations", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10649#discussion_r419826808", "createdAt": "2020-05-05T02:00:17Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormTrainingClientTestBase.java", "diffHunk": "@@ -306,15 +277,18 @@ String getApiKey() {\n     String getEndpoint() {\n         return interceptorManager.isPlaybackMode()\n             ? \"https://localhost:8080\"\n-            : Configuration.getGlobalConfiguration().get(\"AZURE_FORM_RECOGNIZER_ENDPOINT\");\n+            : Configuration.getGlobalConfiguration().get(AZURE_FORM_RECOGNIZER_ENDPOINT);\n     }\n \n-    private String createStorageAndGenerateSas(String folderPath) {\n-        if (interceptorManager.isPlaybackMode()) {\n-            return \"https://isPlaybackmode\";\n-        } else {\n-            return Configuration.getGlobalConfiguration().get(FORM_RECOGNIZER_TRAINING_BLOB_CONTAINER_SAS_URL);\n+    private String getTrainingSasUri() {\n+        return interceptorManager.isPlaybackMode()\n+            ? \"https://isPlaybackmode\"\n+            : Configuration.getGlobalConfiguration().get(FORM_RECOGNIZER_TRAINING_BLOB_CONTAINER_SAS_URL);\n+    }\n \n-        }\n+    private String getTestingSasUri() {\n+        return interceptorManager.isPlaybackMode()\n+            ? \"https://isPlaybackmode\"\n+            : Configuration.getGlobalConfiguration().get(FORM_RECOGNIZER_TESTING_BLOB_CONTAINER_SAS_URL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyNDY1NA=="}, "originalCommit": {"oid": "71684319f42e30997c02b5b9b3a611498fa3da5e"}, "originalPosition": 264}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzMzNzQyOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormTrainingClientTestBase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMTo1OTozOFrOGQYL9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMjowMDozMFrOGQYMoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyNjY3Nw==", "bodyText": "do you want to user logger? or is that fine to throw it directly in test?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10649#discussion_r419826677", "createdAt": "2020-05-05T01:59:38Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormTrainingClientTestBase.java", "diffHunk": "@@ -124,72 +95,72 @@ private static void validateErrorData(List<ErrorInformation> expectedErrors,\n         }\n     }\n \n-    static void validateCustomModel(CustomFormModel expectedModel, CustomFormModel actualCustomModel) {\n-        assertNotNull(actualCustomModel.getModelId());\n-        assertEquals(expectedModel.getModelStatus(), actualCustomModel.getModelStatus());\n-        validateErrors(expectedModel.getModelError(), actualCustomModel.getModelError());\n-        assertNotNull(actualCustomModel.getCreatedOn());\n-        assertNotNull(actualCustomModel.getLastUpdatedOn());\n-        validateSubModels(expectedModel.getSubModels(), actualCustomModel.getSubModels());\n-        validateTrainingDocuments(expectedModel.getTrainingDocuments(), actualCustomModel.getTrainingDocuments());\n-    }\n-\n     static void validateAccountProperties(AccountProperties expectedAccountProperties,\n         AccountProperties actualAccountProperties) {\n         assertEquals(expectedAccountProperties.getLimit(), actualAccountProperties.getLimit());\n         assertNotNull(actualAccountProperties.getCount());\n     }\n \n-    private static void validateTrainingDocuments(List<TrainingDocumentInfo> expectedTrainingDocuments,\n-        List<TrainingDocumentInfo> actualTrainingDocuments) {\n-        List<TrainingDocumentInfo> actualTrainingList = new ArrayList<>(actualTrainingDocuments);\n-        List<TrainingDocumentInfo> expectedTrainingList =\n-            new ArrayList<>(expectedTrainingDocuments);\n-        assertEquals(expectedTrainingList.size(), actualTrainingList.size());\n-        for (int i = 0; i < actualTrainingList.size(); i++) {\n-            TrainingDocumentInfo expectedTrainingDocument = expectedTrainingList.get(i);\n-            TrainingDocumentInfo actualTrainingDocument = actualTrainingList.get(i);\n-            assertEquals(expectedTrainingDocument.getName(), actualTrainingDocument.getName());\n-            assertEquals(expectedTrainingDocument.getPageCount(), actualTrainingDocument.getPageCount());\n-            assertEquals(expectedTrainingDocument.getTrainingStatus(), actualTrainingDocument.getTrainingStatus());\n-            validateErrors(expectedTrainingDocument.getDocumentErrors(), actualTrainingDocument.getDocumentErrors());\n+    /**\n+     * Deserialize test data from service.\n+     *\n+     * @return the deserialized raw response test data\n+     */\n+    static <T> T deserializeRawResponse(SerializerAdapter serializerAdapter, NetworkCallRecord record, Class<T> clazz) {\n+        try {\n+            return serializerAdapter.deserialize(record.getResponse().get(\"Body\"),\n+                clazz, SerializerEncoding.JSON);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to deserialize service response.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71684319f42e30997c02b5b9b3a611498fa3da5e"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyNjg0OA==", "bodyText": "I think it is fine to just throw so that the test fails.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10649#discussion_r419826848", "createdAt": "2020-05-05T02:00:30Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormTrainingClientTestBase.java", "diffHunk": "@@ -124,72 +95,72 @@ private static void validateErrorData(List<ErrorInformation> expectedErrors,\n         }\n     }\n \n-    static void validateCustomModel(CustomFormModel expectedModel, CustomFormModel actualCustomModel) {\n-        assertNotNull(actualCustomModel.getModelId());\n-        assertEquals(expectedModel.getModelStatus(), actualCustomModel.getModelStatus());\n-        validateErrors(expectedModel.getModelError(), actualCustomModel.getModelError());\n-        assertNotNull(actualCustomModel.getCreatedOn());\n-        assertNotNull(actualCustomModel.getLastUpdatedOn());\n-        validateSubModels(expectedModel.getSubModels(), actualCustomModel.getSubModels());\n-        validateTrainingDocuments(expectedModel.getTrainingDocuments(), actualCustomModel.getTrainingDocuments());\n-    }\n-\n     static void validateAccountProperties(AccountProperties expectedAccountProperties,\n         AccountProperties actualAccountProperties) {\n         assertEquals(expectedAccountProperties.getLimit(), actualAccountProperties.getLimit());\n         assertNotNull(actualAccountProperties.getCount());\n     }\n \n-    private static void validateTrainingDocuments(List<TrainingDocumentInfo> expectedTrainingDocuments,\n-        List<TrainingDocumentInfo> actualTrainingDocuments) {\n-        List<TrainingDocumentInfo> actualTrainingList = new ArrayList<>(actualTrainingDocuments);\n-        List<TrainingDocumentInfo> expectedTrainingList =\n-            new ArrayList<>(expectedTrainingDocuments);\n-        assertEquals(expectedTrainingList.size(), actualTrainingList.size());\n-        for (int i = 0; i < actualTrainingList.size(); i++) {\n-            TrainingDocumentInfo expectedTrainingDocument = expectedTrainingList.get(i);\n-            TrainingDocumentInfo actualTrainingDocument = actualTrainingList.get(i);\n-            assertEquals(expectedTrainingDocument.getName(), actualTrainingDocument.getName());\n-            assertEquals(expectedTrainingDocument.getPageCount(), actualTrainingDocument.getPageCount());\n-            assertEquals(expectedTrainingDocument.getTrainingStatus(), actualTrainingDocument.getTrainingStatus());\n-            validateErrors(expectedTrainingDocument.getDocumentErrors(), actualTrainingDocument.getDocumentErrors());\n+    /**\n+     * Deserialize test data from service.\n+     *\n+     * @return the deserialized raw response test data\n+     */\n+    static <T> T deserializeRawResponse(SerializerAdapter serializerAdapter, NetworkCallRecord record, Class<T> clazz) {\n+        try {\n+            return serializerAdapter.deserialize(record.getResponse().get(\"Body\"),\n+                clazz, SerializerEncoding.JSON);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to deserialize service response.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyNjY3Nw=="}, "originalCommit": {"oid": "71684319f42e30997c02b5b9b3a611498fa3da5e"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzM0MTk0OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerClientTestBase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMjowMjo0MlrOGQYOXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNzoyNjo1N1rOGQz9qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyNzI5NA==", "bodyText": "I saw this method twice in this PR.  Do we want to put it in TestUtil?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10649#discussion_r419827294", "createdAt": "2020-05-05T02:02:42Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerClientTestBase.java", "diffHunk": "@@ -527,14 +557,63 @@ String getApiKey() {\n     protected String getEndpoint() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71684319f42e30997c02b5b9b3a611498fa3da5e"}, "originalPosition": 448}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI4MTc3MA==", "bodyText": "Cannot move them outside of the TestBase classes as they the interceptorManager class instance to find the corresponding configurations.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10649#discussion_r420281770", "createdAt": "2020-05-05T17:26:57Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerClientTestBase.java", "diffHunk": "@@ -527,14 +557,63 @@ String getApiKey() {\n     protected String getEndpoint() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyNzI5NA=="}, "originalCommit": {"oid": "71684319f42e30997c02b5b9b3a611498fa3da5e"}, "originalPosition": 448}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4412, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}