{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNjYzNDQy", "number": 12625, "title": "Update RecognizeOptions to take only optional params", "bodyText": "", "createdAt": "2020-06-29T21:38:30Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625", "merged": true, "mergeCommit": {"oid": "f794b2cf7b48584181e7da5f66ca7f0deb1a5ded"}, "closed": true, "closedAt": "2020-07-02T23:17:10Z", "author": {"login": "samvaity"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwI0VXgFqTQzOTUyMjMyMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcxGydZgH2gAyNDQxNjYzNDQyOjExMGFiMTJlOTQyYmJiN2ZjZjcxNzNmZjc4ZDQ0OWZhNzExNzNlMGQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NTIyMzIx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#pullrequestreview-439522321", "createdAt": "2020-06-29T21:44:13Z", "commit": {"oid": "a5e13b90389d9abfa857967ee7e75089f4089600"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMTo0NDoxM1rOGqjTdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjoyNTo1MVrOGqkntg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3MTc5Nw==", "bodyText": "why do we make a copy of the user-provided options here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r447271797", "createdAt": "2020-06-29T21:44:13Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -687,13 +726,14 @@ private void throwIfAnalyzeStatusInvalid(AnalyzeOperationResult analyzeResponse)\n         return Mono.just(new PollResponse<>(status, operationResultPollResponse.getValue()));\n     }\n \n-    private static Flux<ByteBuffer> getByteBufferFlux(InputStream form, Flux<ByteBuffer> formData) {\n-        Flux<ByteBuffer> buffer;\n-        if (form != null) {\n-            buffer = Utility.toFluxByteBuffer(form);\n+    private RecognizeOptions getRecognizeOptionsProperties(RecognizeOptions userProvidedOptions) {\n+        if (userProvidedOptions != null) {\n+            return new RecognizeOptions()\n+                .setPollInterval(userProvidedOptions.getPollInterval())\n+                .setFormContentType(userProvidedOptions.getFormContentType())\n+                .setIncludeTextContent(userProvidedOptions.isIncludeTextContent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5e13b90389d9abfa857967ee7e75089f4089600"}, "originalPosition": 380}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3Nzk1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param length The exact length of the data. Size of the file must be less than 50 MB.\n          \n          \n            \n                 * @param length The exact length of the data. Size of the bytebuffer flux must be less than 50 MB.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r447277952", "createdAt": "2020-06-29T21:58:27Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -271,10 +299,12 @@\n      * {@code Flux} must produce the same data each time it is subscribed to.\n      *\n      * <p><strong>Code sample</strong></p>\n-     * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent#recognizeOptions}\n+     * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent#Flux-long-recognizeOptions}\n      *\n-     * @param recognizeOptions The configurable {@code RecognizeOptions options} that may be passed when recognizing\n-     * content on a form.\n+     * @param form The data of the form to recognize content information from.\n+     * @param length The exact length of the data. Size of the file must be less than 50 MB.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5e13b90389d9abfa857967ee7e75089f4089600"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3ODY1NA==", "bodyText": "Actually, we should just remove this limit from the javadoc as the limit is controlled by the service and an error will be thrown from the service if the limit exceeds. This allows service to increase or decrease the limit dynamically.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r447278654", "createdAt": "2020-06-29T22:00:13Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -271,10 +299,12 @@\n      * {@code Flux} must produce the same data each time it is subscribed to.\n      *\n      * <p><strong>Code sample</strong></p>\n-     * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent#recognizeOptions}\n+     * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent#Flux-long-recognizeOptions}\n      *\n-     * @param recognizeOptions The configurable {@code RecognizeOptions options} that may be passed when recognizing\n-     * content on a form.\n+     * @param form The data of the form to recognize content information from.\n+     * @param length The exact length of the data. Size of the file must be less than 50 MB.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3Nzk1Mg=="}, "originalCommit": {"oid": "a5e13b90389d9abfa857967ee7e75089f4089600"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MDM4Nw==", "bodyText": "Change file to flux of bytebuffer.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r447280387", "createdAt": "2020-06-29T22:04:12Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -383,10 +425,12 @@\n      * {@code Flux} must produce the same data each time it is subscribed to.\n      *\n      * <p><strong>Code sample</strong></p>\n-     * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts#recognizeOptions}\n+     * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts#Flux-long-recognizeOptions}\n      *\n-     * @param recognizeOptions The configurable {@code RecognizeOptions options} that may be passed when recognizing\n-     * receipt data on the provided receipt document.\n+     * @param receipt The data of the document to recognize receipt information from.\n+     * @param length The exact length of the data. Size of the file must be less than 50 MB", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5e13b90389d9abfa857967ee7e75089f4089600"}, "originalPosition": 338}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI5MzM2Ng==", "bodyText": "subscribe inside another subscribe looks a bit odd. Can we instead use reactor pattern here?\nformRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(...)\n        .flatMap(recognizePollingOperation -> recognizePollingOperation.getFinalResult())\n        .subscribe(recognizedReceipts -> {...});", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r447293366", "createdAt": "2020-06-29T22:25:51Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -274,16 +329,68 @@ public void beginRecognizeReceiptsFromUrl() {\n     }\n \n     /**\n-     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeReceipts(Flux, long, FormContentType)}\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeReceiptsFromUrl(String, RecognizeOptions)}\n+     */\n+    public void beginRecognizeReceiptsFromUrlWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl#string-recognizeOptions\n+        String receiptUrl = \"{file_source_url}\";\n+        boolean includeTextContent = true;\n+        formRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(receiptUrl,\n+            new RecognizeOptions()\n+                .setIncludeTextContent(includeTextContent)\n+                .setPollInterval(Duration.ofSeconds(5)))\n+            .subscribe(recognizePollingOperation -> {\n+                // if training polling operation completed, retrieve the final result.\n+                recognizePollingOperation.getFinalResult().subscribe(recognizedReceipts -> {\n+                    for (int i = 0; i < recognizedReceipts.size(); i++) {\n+                        RecognizedReceipt recognizedReceipt = recognizedReceipts.get(i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5e13b90389d9abfa857967ee7e75089f4089600"}, "originalPosition": 230}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMTgyMjUz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#pullrequestreview-440182253", "createdAt": "2020-06-30T16:20:46Z", "commit": {"oid": "f577718a56cdb0c08c186632cd02004cec6fa2f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjoyMDo0NlrOGrESEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjoyMDo0NlrOGrESEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgxMjExNQ==", "bodyText": "In .NET we call this field ContentType only (without the Form prefix). Are we concerned about consistency in fields names? If formContentType feels more idiomatic to Java, I believe that's not a big concern on the .NET side and can be easily updated.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r447812115", "createdAt": "2020-06-30T16:20:46Z", "author": {"login": "kinelski"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/RecognizeOptions.java", "diffHunk": "@@ -3,64 +3,19 @@\n package com.azure.ai.formrecognizer.models;\n \n import com.azure.core.annotation.Fluent;\n-import reactor.core.publisher.Flux;\n \n-import java.io.InputStream;\n-import java.nio.ByteBuffer;\n import java.time.Duration;\n \n /**\n  * Options that may be passed when using recognize APIs on Form Recognizer client.\n  */\n @Fluent\n public class RecognizeOptions {\n-    private final InputStream form;\n-    private final Flux<ByteBuffer> formData;\n-    private final long length;\n-    private final String formUrl;\n     private FormContentType formContentType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f577718a56cdb0c08c186632cd02004cec6fa2f1"}, "originalPosition": 19}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f577718a56cdb0c08c186632cd02004cec6fa2f1", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f577718a56cdb0c08c186632cd02004cec6fa2f1", "committedDate": "2020-06-29T23:06:26Z", "message": "review comments"}, "afterCommit": {"oid": "6e408233821e1a7a0504ae5976ab78fffea16d22", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6e408233821e1a7a0504ae5976ab78fffea16d22", "committedDate": "2020-07-01T00:39:30Z", "message": "review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e408233821e1a7a0504ae5976ab78fffea16d22", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6e408233821e1a7a0504ae5976ab78fffea16d22", "committedDate": "2020-07-01T00:39:30Z", "message": "review comments"}, "afterCommit": {"oid": "135dd4c46f61dc516099a0e9183f6349f541aac9", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/135dd4c46f61dc516099a0e9183f6349f541aac9", "committedDate": "2020-07-01T21:26:11Z", "message": "review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "135dd4c46f61dc516099a0e9183f6349f541aac9", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/135dd4c46f61dc516099a0e9183f6349f541aac9", "committedDate": "2020-07-01T21:26:11Z", "message": "review comments"}, "afterCommit": {"oid": "3a328d17f91dd1e682c2591d926d8b980ee37694", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3a328d17f91dd1e682c2591d926d8b980ee37694", "committedDate": "2020-07-01T21:32:26Z", "message": "review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd30d74e367b57cd12ea938d1980e1e216d65165", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/dd30d74e367b57cd12ea938d1980e1e216d65165", "committedDate": "2020-07-02T02:48:28Z", "message": "update options to take optional params"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "392d12999fb4a0100d4818f134311ef719552931", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/392d12999fb4a0100d4818f134311ef719552931", "committedDate": "2020-07-02T02:48:59Z", "message": "review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e93d5fff08151176765039411f066c87ccffd6e6", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e93d5fff08151176765039411f066c87ccffd6e6", "committedDate": "2020-07-02T03:46:45Z", "message": "rebase changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a328d17f91dd1e682c2591d926d8b980ee37694", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3a328d17f91dd1e682c2591d926d8b980ee37694", "committedDate": "2020-07-01T21:32:26Z", "message": "review comments"}, "afterCommit": {"oid": "e93d5fff08151176765039411f066c87ccffd6e6", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e93d5fff08151176765039411f066c87ccffd6e6", "committedDate": "2020-07-02T03:46:45Z", "message": "rebase changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxOTI5MjUw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#pullrequestreview-441929250", "createdAt": "2020-07-02T18:25:01Z", "commit": {"oid": "e93d5fff08151176765039411f066c87ccffd6e6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8af7125bed7abbc115af554f4cd7677a29e0ad0c", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8af7125bed7abbc115af554f4cd7677a29e0ad0c", "committedDate": "2020-07-02T18:27:39Z", "message": "rename formContentType"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxOTc2Mjcx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#pullrequestreview-441976271", "createdAt": "2020-07-02T19:46:15Z", "commit": {"oid": "8af7125bed7abbc115af554f4cd7677a29e0ad0c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOTo0NjoxNVrOGsa_-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOTo0NjoxNVrOGsa_-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzMjg5MA==", "bodyText": "Use forEach() instead or you can also show the reactor pattern here:\nformRecognizerAsyncClient.beginRecognizeReceipts(buffer, receipt.length())\n     .flatMap(recognizePollingOperation -> recognizePollingOperation.getFinalResult())\n     .flatMap(recognizedReceipts -> Flux.fromIterable(recognizedReceipts))\n     .subscribe(recognizedReceipt -> {...});", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r449232890", "createdAt": "2020-07-02T19:46:15Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -264,115 +323,170 @@ public void beginRecognizeReceiptsFromUrl() {\n                     }\n                 }\n             });\n-        });\n         // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl#string\n     }\n \n     /**\n-     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeReceipts(Flux, long, FormContentType)}\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeReceiptsFromUrl(String, RecognizeOptions)}\n+     */\n+    public void beginRecognizeReceiptsFromUrlWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl#string-recognizeOptions\n+        String receiptUrl = \"{receiptUrl}\";\n+        boolean includeTextContent = true;\n+        formRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(receiptUrl,\n+            new RecognizeOptions()\n+                .setIncludeFieldElements(includeTextContent)\n+                .setPollInterval(Duration.ofSeconds(5)))\n+            .flatMap(recognizePollingOperation ->\n+                // if training polling operation completed, retrieve the final result.\n+                recognizePollingOperation.getFinalResult())\n+            .subscribe(recognizedReceipts -> {\n+                for (int i = 0; i < recognizedReceipts.size(); i++) {\n+                    RecognizedReceipt recognizedReceipt = recognizedReceipts.get(i);\n+                    Map<String, FormField> recognizedFields = recognizedReceipt.getRecognizedForm().getFields();\n+                    System.out.printf(\"----------- Recognized Receipt page %s -----------%n\", i);\n+                    FormField merchantNameField = recognizedFields.get(\"MerchantName\");\n+                    if (merchantNameField.getFieldValue().getType() == FieldValueType.STRING) {\n+                        System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n+                            merchantNameField.getFieldValue().asString(),\n+                            merchantNameField.getConfidence());\n+                    }\n+                    FormField transactionDateField = recognizedFields.get(\"TransactionDate\");\n+                    if (transactionDateField.getFieldValue().getType() == FieldValueType.DATE) {\n+                        System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n+                            transactionDateField.getFieldValue().asDate(),\n+                            transactionDateField.getConfidence());\n+                    }\n+                    FormField receiptItemsField = recognizedFields.get(\"Items\");\n+                    System.out.printf(\"Receipt Items: %n\");\n+                    if (receiptItemsField.getFieldValue().getType() == FieldValueType.LIST) {\n+                        List<FormField> receiptItems = receiptItemsField.getFieldValue().asList();\n+                        receiptItems.forEach(receiptItem -> {\n+                            if (receiptItem.getFieldValue().getType() == FieldValueType.MAP) {\n+                                receiptItem.getFieldValue().asMap().forEach((key, formField) -> {\n+                                    if (key.equals(\"Quantity\")) {\n+                                        if (formField.getFieldValue().getType() == FieldValueType.INTEGER) {\n+                                            System.out.printf(\"Quantity: %s, confidence: %.2f%n\",\n+                                                formField.getFieldValue().asInteger(), formField.getConfidence());\n+                                        }\n+                                    }\n+                                });\n+                            }\n+                        });\n+                    }\n+                }\n+            });\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl#string-recognizeOptions\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeReceipts(Flux, long)}\n      *\n      * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n      */\n     public void beginRecognizeReceipts() throws IOException {\n-        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts#Flux-long-FormContentType\n-        File receipt = new File(\"{local/file_path/fileName.jpg}\");\n-        // Utility method to convert input stream to Byte buffer\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts#Flux-long\n+        File receipt = new File(\"{file_source_url}\");\n         Flux<ByteBuffer> buffer = toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(receipt.toPath())));\n-        formRecognizerAsyncClient.beginRecognizeReceipts(buffer, receipt.length(), FormContentType.IMAGE_JPEG)\n-            .subscribe(recognizePollingOperation -> {\n+        formRecognizerAsyncClient.beginRecognizeReceipts(buffer, receipt.length())\n+            .flatMap(recognizePollingOperation ->\n                 // if training polling operation completed, retrieve the final result.\n-                recognizePollingOperation.getFinalResult().subscribe(recognizedReceipts -> {\n-                    for (int i = 0; i < recognizedReceipts.size(); i++) {\n-                        RecognizedReceipt recognizedReceipt = recognizedReceipts.get(i);\n-                        Map<String, FormField> recognizedFields = recognizedReceipt.getRecognizedForm().getFields();\n-                        System.out.printf(\"----------- Recognized Receipt page %s -----------%n\", i);\n-                        FormField merchantNameField = recognizedFields.get(\"MerchantName\");\n-                        if (merchantNameField.getFieldValue().getType() == FieldValueType.STRING) {\n-                            System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n-                                merchantNameField.getFieldValue().asString(),\n-                                merchantNameField.getConfidence());\n-                        }\n-                        FormField transactionDateField = recognizedFields.get(\"TransactionDate\");\n-                        if (transactionDateField.getFieldValue().getType() == FieldValueType.DATE) {\n-                            System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n-                                transactionDateField.getFieldValue().asDate(),\n-                                transactionDateField.getConfidence());\n-                        }\n-                        FormField receiptItemsField = recognizedFields.get(\"Items\");\n-                        System.out.printf(\"Receipt Items: %n\");\n-                        if (receiptItemsField.getFieldValue().getType() == FieldValueType.LIST) {\n-                            List<FormField> receiptItems = receiptItemsField.getFieldValue().asList();\n-                            receiptItems.forEach(receiptItem -> {\n-                                if (receiptItem.getFieldValue().getType() == FieldValueType.MAP) {\n-                                    receiptItem.getFieldValue().asMap().forEach((key, formField) -> {\n-                                        if (key.equals(\"Quantity\")) {\n-                                            if (formField.getFieldValue().getType() == FieldValueType.INTEGER) {\n-                                                System.out.printf(\"Quantity: %s, confidence: %.2f%n\",\n-                                                    formField.getFieldValue().asInteger(), formField.getConfidence());\n-                                            }\n+                recognizePollingOperation.getFinalResult())\n+            .subscribe(recognizedReceipts -> {\n+                for (int i = 0; i < recognizedReceipts.size(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8af7125bed7abbc115af554f4cd7677a29e0ad0c"}, "originalPosition": 414}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "110ab12e942bbb7fcf7173ff78d449fa71173e0d", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/110ab12e942bbb7fcf7173ff78d449fa71173e0d", "committedDate": "2020-07-02T22:42:55Z", "message": "checkstyle update"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2863, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}