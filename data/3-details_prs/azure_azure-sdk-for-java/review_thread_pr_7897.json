{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5ODI5NDE3", "number": 7897, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMTo1MjowMVrODcZZGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODoyMzoyNlrODdFI3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTAyNzQ1OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMTo1MjowMVrOFkb1Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMTo1MjowMVrOFkb1Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0OTA5NA==", "bodyText": "Should this be getCategorizedEntities()?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7897#discussion_r373749094", "createdAt": "2020-02-01T01:52:01Z", "author": {"login": "kristapratico"}, "path": "sdk/textanalytics/azure-ai-textanalytics/README.md", "diffHunk": "@@ -232,12 +232,12 @@ for (DetectedLanguage detectedLanguage : textAnalyticsClient.detectLanguage(inpu\n ```java\n String text = \"Satya Nadella is the CEO of Microsoft\";\n \n-for (NamedEntity entity : textAnalyticsClient.recognizeEntities(text).getNamedEntities()) {\n+for (CategorizedEntity entity : textAnalyticsClient.recognizeEntities(text).getNamedEntities()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d03dd533c6b0f3f5378685f11a08b8fac5f4870"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDIyNTc0OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTestBase.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjo1MjoxMVrOFk4akA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTozMjo1NlrOFlYikA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzM2MA==", "bodyText": "I know we talked about this, but could you remind me why we decided on creating a new Pii type?\nSo far, it looks like a lot of duplication code, only for the name. No new property, functionality, or anything\n@kristapratico", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7897#discussion_r374217360", "createdAt": "2020-02-03T16:52:11Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTestBase.java", "diffHunk": "@@ -505,29 +523,48 @@ static void validateKeyPhrases(List<String> expectedKeyPhrases, List<String> act\n     }\n \n     /**\n-     * Helper method to validate the list of named entities.\n+     * Helper method to validate the list of categorized entities.\n+     *\n+     *  @param expectedCategorizedEntityList categorizedEntities returned by the service.\n+     * @param actualCategorizedEntityList categorizedEntities returned by the API.\n+     */\n+    static void validateCategorizedEntities(List<CategorizedEntity> expectedCategorizedEntityList,\n+        List<CategorizedEntity> actualCategorizedEntityList) {\n+        assertEquals(expectedCategorizedEntityList.size(), actualCategorizedEntityList.size());\n+        expectedCategorizedEntityList.sort(Comparator.comparing(CategorizedEntity::getText));\n+        actualCategorizedEntityList.sort(Comparator.comparing(CategorizedEntity::getText));\n+\n+        for (int i = 0; i < expectedCategorizedEntityList.size(); i++) {\n+            CategorizedEntity expectedCategorizedEntity = expectedCategorizedEntityList.get(i);\n+            CategorizedEntity actualCategorizedEntity = actualCategorizedEntityList.get(i);\n+            validateCategorizedEntity(expectedCategorizedEntity, actualCategorizedEntity);\n+        }\n+    }\n+\n+    /**\n+     * Helper method to validate the list of PII entities.\n      *\n-     * @param expectedNamedEntityList namedEntities returned by the service.\n-     * @param actualNamedEntityList namedEntities returned by the API.\n+     * @param expectedPiiEntityList piiEntities returned by the service.\n+     * @param actualPiiEntityList piiEntities returned by the API.\n      */\n-    static void validateNamedEntities(List<NamedEntity> expectedNamedEntityList,\n-        List<NamedEntity> actualNamedEntityList) {\n-        assertEquals(expectedNamedEntityList.size(), actualNamedEntityList.size());\n-        expectedNamedEntityList.sort(Comparator.comparing(NamedEntity::getText));\n-        actualNamedEntityList.sort(Comparator.comparing(NamedEntity::getText));\n-\n-        for (int i = 0; i < expectedNamedEntityList.size(); i++) {\n-            NamedEntity expectedNamedEntity = expectedNamedEntityList.get(i);\n-            NamedEntity actualNamedEntity = actualNamedEntityList.get(i);\n-            validateNamedEntity(expectedNamedEntity, actualNamedEntity);\n+    static void validatePiiEntities(List<PiiEntity> expectedPiiEntityList,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bab617fcd904f23c1f5138f4d3ac9287eb021e18"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyNzgzNA==", "bodyText": "My context on this comes from the discussion on Teams:\n\n...that reminds me that users in our study were a little confused that RecognizePiiEntities returned a NamedEntity.  It's worth considering adding a new PiiEntity (or other name) type.  When the healthcare endpoint is up, the shape of the return type will be different for healthcare entities. It's also possible that PiiEntity will evolve differently from NamedEntity", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7897#discussion_r374227834", "createdAt": "2020-02-03T17:11:53Z", "author": {"login": "kristapratico"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTestBase.java", "diffHunk": "@@ -505,29 +523,48 @@ static void validateKeyPhrases(List<String> expectedKeyPhrases, List<String> act\n     }\n \n     /**\n-     * Helper method to validate the list of named entities.\n+     * Helper method to validate the list of categorized entities.\n+     *\n+     *  @param expectedCategorizedEntityList categorizedEntities returned by the service.\n+     * @param actualCategorizedEntityList categorizedEntities returned by the API.\n+     */\n+    static void validateCategorizedEntities(List<CategorizedEntity> expectedCategorizedEntityList,\n+        List<CategorizedEntity> actualCategorizedEntityList) {\n+        assertEquals(expectedCategorizedEntityList.size(), actualCategorizedEntityList.size());\n+        expectedCategorizedEntityList.sort(Comparator.comparing(CategorizedEntity::getText));\n+        actualCategorizedEntityList.sort(Comparator.comparing(CategorizedEntity::getText));\n+\n+        for (int i = 0; i < expectedCategorizedEntityList.size(); i++) {\n+            CategorizedEntity expectedCategorizedEntity = expectedCategorizedEntityList.get(i);\n+            CategorizedEntity actualCategorizedEntity = actualCategorizedEntityList.get(i);\n+            validateCategorizedEntity(expectedCategorizedEntity, actualCategorizedEntity);\n+        }\n+    }\n+\n+    /**\n+     * Helper method to validate the list of PII entities.\n      *\n-     * @param expectedNamedEntityList namedEntities returned by the service.\n-     * @param actualNamedEntityList namedEntities returned by the API.\n+     * @param expectedPiiEntityList piiEntities returned by the service.\n+     * @param actualPiiEntityList piiEntities returned by the API.\n      */\n-    static void validateNamedEntities(List<NamedEntity> expectedNamedEntityList,\n-        List<NamedEntity> actualNamedEntityList) {\n-        assertEquals(expectedNamedEntityList.size(), actualNamedEntityList.size());\n-        expectedNamedEntityList.sort(Comparator.comparing(NamedEntity::getText));\n-        actualNamedEntityList.sort(Comparator.comparing(NamedEntity::getText));\n-\n-        for (int i = 0; i < expectedNamedEntityList.size(); i++) {\n-            NamedEntity expectedNamedEntity = expectedNamedEntityList.get(i);\n-            NamedEntity actualNamedEntity = actualNamedEntityList.get(i);\n-            validateNamedEntity(expectedNamedEntity, actualNamedEntity);\n+    static void validatePiiEntities(List<PiiEntity> expectedPiiEntityList,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzM2MA=="}, "originalCommit": {"oid": "bab617fcd904f23c1f5138f4d3ac9287eb021e18"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI0NDU0MA==", "bodyText": "Thanks!\nIt makes me wonder if we should change it now, instead of waiting/asking for more information to the service team.\nAlso, if we end up going this route, implementation wise, .. should we then just create an Entity base class and then CategoryEntity and PiiEntity inherit from it? and whatever other future Entities? That way we can add new content to it, but the core is the same and for now it will save all the duplicated code", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7897#discussion_r374244540", "createdAt": "2020-02-03T17:45:15Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTestBase.java", "diffHunk": "@@ -505,29 +523,48 @@ static void validateKeyPhrases(List<String> expectedKeyPhrases, List<String> act\n     }\n \n     /**\n-     * Helper method to validate the list of named entities.\n+     * Helper method to validate the list of categorized entities.\n+     *\n+     *  @param expectedCategorizedEntityList categorizedEntities returned by the service.\n+     * @param actualCategorizedEntityList categorizedEntities returned by the API.\n+     */\n+    static void validateCategorizedEntities(List<CategorizedEntity> expectedCategorizedEntityList,\n+        List<CategorizedEntity> actualCategorizedEntityList) {\n+        assertEquals(expectedCategorizedEntityList.size(), actualCategorizedEntityList.size());\n+        expectedCategorizedEntityList.sort(Comparator.comparing(CategorizedEntity::getText));\n+        actualCategorizedEntityList.sort(Comparator.comparing(CategorizedEntity::getText));\n+\n+        for (int i = 0; i < expectedCategorizedEntityList.size(); i++) {\n+            CategorizedEntity expectedCategorizedEntity = expectedCategorizedEntityList.get(i);\n+            CategorizedEntity actualCategorizedEntity = actualCategorizedEntityList.get(i);\n+            validateCategorizedEntity(expectedCategorizedEntity, actualCategorizedEntity);\n+        }\n+    }\n+\n+    /**\n+     * Helper method to validate the list of PII entities.\n      *\n-     * @param expectedNamedEntityList namedEntities returned by the service.\n-     * @param actualNamedEntityList namedEntities returned by the API.\n+     * @param expectedPiiEntityList piiEntities returned by the service.\n+     * @param actualPiiEntityList piiEntities returned by the API.\n      */\n-    static void validateNamedEntities(List<NamedEntity> expectedNamedEntityList,\n-        List<NamedEntity> actualNamedEntityList) {\n-        assertEquals(expectedNamedEntityList.size(), actualNamedEntityList.size());\n-        expectedNamedEntityList.sort(Comparator.comparing(NamedEntity::getText));\n-        actualNamedEntityList.sort(Comparator.comparing(NamedEntity::getText));\n-\n-        for (int i = 0; i < expectedNamedEntityList.size(); i++) {\n-            NamedEntity expectedNamedEntity = expectedNamedEntityList.get(i);\n-            NamedEntity actualNamedEntity = actualNamedEntityList.get(i);\n-            validateNamedEntity(expectedNamedEntity, actualNamedEntity);\n+    static void validatePiiEntities(List<PiiEntity> expectedPiiEntityList,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzM2MA=="}, "originalCommit": {"oid": "bab617fcd904f23c1f5138f4d3ac9287eb021e18"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI0ODQ3NQ==", "bodyText": "I think we are making the change now (at least it seems Java/Python did at this moment). Entity base class makes sense to me.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7897#discussion_r374248475", "createdAt": "2020-02-03T17:53:13Z", "author": {"login": "kristapratico"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTestBase.java", "diffHunk": "@@ -505,29 +523,48 @@ static void validateKeyPhrases(List<String> expectedKeyPhrases, List<String> act\n     }\n \n     /**\n-     * Helper method to validate the list of named entities.\n+     * Helper method to validate the list of categorized entities.\n+     *\n+     *  @param expectedCategorizedEntityList categorizedEntities returned by the service.\n+     * @param actualCategorizedEntityList categorizedEntities returned by the API.\n+     */\n+    static void validateCategorizedEntities(List<CategorizedEntity> expectedCategorizedEntityList,\n+        List<CategorizedEntity> actualCategorizedEntityList) {\n+        assertEquals(expectedCategorizedEntityList.size(), actualCategorizedEntityList.size());\n+        expectedCategorizedEntityList.sort(Comparator.comparing(CategorizedEntity::getText));\n+        actualCategorizedEntityList.sort(Comparator.comparing(CategorizedEntity::getText));\n+\n+        for (int i = 0; i < expectedCategorizedEntityList.size(); i++) {\n+            CategorizedEntity expectedCategorizedEntity = expectedCategorizedEntityList.get(i);\n+            CategorizedEntity actualCategorizedEntity = actualCategorizedEntityList.get(i);\n+            validateCategorizedEntity(expectedCategorizedEntity, actualCategorizedEntity);\n+        }\n+    }\n+\n+    /**\n+     * Helper method to validate the list of PII entities.\n      *\n-     * @param expectedNamedEntityList namedEntities returned by the service.\n-     * @param actualNamedEntityList namedEntities returned by the API.\n+     * @param expectedPiiEntityList piiEntities returned by the service.\n+     * @param actualPiiEntityList piiEntities returned by the API.\n      */\n-    static void validateNamedEntities(List<NamedEntity> expectedNamedEntityList,\n-        List<NamedEntity> actualNamedEntityList) {\n-        assertEquals(expectedNamedEntityList.size(), actualNamedEntityList.size());\n-        expectedNamedEntityList.sort(Comparator.comparing(NamedEntity::getText));\n-        actualNamedEntityList.sort(Comparator.comparing(NamedEntity::getText));\n-\n-        for (int i = 0; i < expectedNamedEntityList.size(); i++) {\n-            NamedEntity expectedNamedEntity = expectedNamedEntityList.get(i);\n-            NamedEntity actualNamedEntity = actualNamedEntityList.get(i);\n-            validateNamedEntity(expectedNamedEntity, actualNamedEntity);\n+    static void validatePiiEntities(List<PiiEntity> expectedPiiEntityList,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzM2MA=="}, "originalCommit": {"oid": "bab617fcd904f23c1f5138f4d3ac9287eb021e18"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwMTk2MA==", "bodyText": "Although, we would have to come up with a better name as Entity would be too generic?\nHow about calling it NamedEntity as that is how even the service derives CategorizedEntity and PiiEntity from?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7897#discussion_r374301960", "createdAt": "2020-02-03T19:43:11Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTestBase.java", "diffHunk": "@@ -505,29 +523,48 @@ static void validateKeyPhrases(List<String> expectedKeyPhrases, List<String> act\n     }\n \n     /**\n-     * Helper method to validate the list of named entities.\n+     * Helper method to validate the list of categorized entities.\n+     *\n+     *  @param expectedCategorizedEntityList categorizedEntities returned by the service.\n+     * @param actualCategorizedEntityList categorizedEntities returned by the API.\n+     */\n+    static void validateCategorizedEntities(List<CategorizedEntity> expectedCategorizedEntityList,\n+        List<CategorizedEntity> actualCategorizedEntityList) {\n+        assertEquals(expectedCategorizedEntityList.size(), actualCategorizedEntityList.size());\n+        expectedCategorizedEntityList.sort(Comparator.comparing(CategorizedEntity::getText));\n+        actualCategorizedEntityList.sort(Comparator.comparing(CategorizedEntity::getText));\n+\n+        for (int i = 0; i < expectedCategorizedEntityList.size(); i++) {\n+            CategorizedEntity expectedCategorizedEntity = expectedCategorizedEntityList.get(i);\n+            CategorizedEntity actualCategorizedEntity = actualCategorizedEntityList.get(i);\n+            validateCategorizedEntity(expectedCategorizedEntity, actualCategorizedEntity);\n+        }\n+    }\n+\n+    /**\n+     * Helper method to validate the list of PII entities.\n      *\n-     * @param expectedNamedEntityList namedEntities returned by the service.\n-     * @param actualNamedEntityList namedEntities returned by the API.\n+     * @param expectedPiiEntityList piiEntities returned by the service.\n+     * @param actualPiiEntityList piiEntities returned by the API.\n      */\n-    static void validateNamedEntities(List<NamedEntity> expectedNamedEntityList,\n-        List<NamedEntity> actualNamedEntityList) {\n-        assertEquals(expectedNamedEntityList.size(), actualNamedEntityList.size());\n-        expectedNamedEntityList.sort(Comparator.comparing(NamedEntity::getText));\n-        actualNamedEntityList.sort(Comparator.comparing(NamedEntity::getText));\n-\n-        for (int i = 0; i < expectedNamedEntityList.size(); i++) {\n-            NamedEntity expectedNamedEntity = expectedNamedEntityList.get(i);\n-            NamedEntity actualNamedEntity = actualNamedEntityList.get(i);\n-            validateNamedEntity(expectedNamedEntity, actualNamedEntity);\n+    static void validatePiiEntities(List<PiiEntity> expectedPiiEntityList,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzM2MA=="}, "originalCommit": {"oid": "bab617fcd904f23c1f5138f4d3ac9287eb021e18"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM0OTYzOQ==", "bodyText": "NamedEntity sounds good to me :)\n@annelo-msft what do you think?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7897#discussion_r374349639", "createdAt": "2020-02-03T21:26:02Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTestBase.java", "diffHunk": "@@ -505,29 +523,48 @@ static void validateKeyPhrases(List<String> expectedKeyPhrases, List<String> act\n     }\n \n     /**\n-     * Helper method to validate the list of named entities.\n+     * Helper method to validate the list of categorized entities.\n+     *\n+     *  @param expectedCategorizedEntityList categorizedEntities returned by the service.\n+     * @param actualCategorizedEntityList categorizedEntities returned by the API.\n+     */\n+    static void validateCategorizedEntities(List<CategorizedEntity> expectedCategorizedEntityList,\n+        List<CategorizedEntity> actualCategorizedEntityList) {\n+        assertEquals(expectedCategorizedEntityList.size(), actualCategorizedEntityList.size());\n+        expectedCategorizedEntityList.sort(Comparator.comparing(CategorizedEntity::getText));\n+        actualCategorizedEntityList.sort(Comparator.comparing(CategorizedEntity::getText));\n+\n+        for (int i = 0; i < expectedCategorizedEntityList.size(); i++) {\n+            CategorizedEntity expectedCategorizedEntity = expectedCategorizedEntityList.get(i);\n+            CategorizedEntity actualCategorizedEntity = actualCategorizedEntityList.get(i);\n+            validateCategorizedEntity(expectedCategorizedEntity, actualCategorizedEntity);\n+        }\n+    }\n+\n+    /**\n+     * Helper method to validate the list of PII entities.\n      *\n-     * @param expectedNamedEntityList namedEntities returned by the service.\n-     * @param actualNamedEntityList namedEntities returned by the API.\n+     * @param expectedPiiEntityList piiEntities returned by the service.\n+     * @param actualPiiEntityList piiEntities returned by the API.\n      */\n-    static void validateNamedEntities(List<NamedEntity> expectedNamedEntityList,\n-        List<NamedEntity> actualNamedEntityList) {\n-        assertEquals(expectedNamedEntityList.size(), actualNamedEntityList.size());\n-        expectedNamedEntityList.sort(Comparator.comparing(NamedEntity::getText));\n-        actualNamedEntityList.sort(Comparator.comparing(NamedEntity::getText));\n-\n-        for (int i = 0; i < expectedNamedEntityList.size(); i++) {\n-            NamedEntity expectedNamedEntity = expectedNamedEntityList.get(i);\n-            NamedEntity actualNamedEntity = actualNamedEntityList.get(i);\n-            validateNamedEntity(expectedNamedEntity, actualNamedEntity);\n+    static void validatePiiEntities(List<PiiEntity> expectedPiiEntityList,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzM2MA=="}, "originalCommit": {"oid": "bab617fcd904f23c1f5138f4d3ac9287eb021e18"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM1NTMzOA==", "bodyText": "The concern with NamedEntity is that it's confusing to have this type without a Name property on it.  I'd ask what we gain by having a base class here.  Is it in the public API?  I feel like I remember Krzysztof pushing back on my introducing type hierarchies where there isn't a strong need for customers to learn the base type.  We don't know what other entities for other domains will necessarily look like yet, and is it possible that they wouldn't need Category and Subcategory?  If they don't, should they not derive from Entity?  (Do we need Subcategory for PiiEntity, for example?)  Would adding a base class be a breaking change here?  I think it's not (please correct me if I'm wrong!), and if not, we could add it later when we've seen more examples that would derive from it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7897#discussion_r374355338", "createdAt": "2020-02-03T21:37:46Z", "author": {"login": "annelo-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTestBase.java", "diffHunk": "@@ -505,29 +523,48 @@ static void validateKeyPhrases(List<String> expectedKeyPhrases, List<String> act\n     }\n \n     /**\n-     * Helper method to validate the list of named entities.\n+     * Helper method to validate the list of categorized entities.\n+     *\n+     *  @param expectedCategorizedEntityList categorizedEntities returned by the service.\n+     * @param actualCategorizedEntityList categorizedEntities returned by the API.\n+     */\n+    static void validateCategorizedEntities(List<CategorizedEntity> expectedCategorizedEntityList,\n+        List<CategorizedEntity> actualCategorizedEntityList) {\n+        assertEquals(expectedCategorizedEntityList.size(), actualCategorizedEntityList.size());\n+        expectedCategorizedEntityList.sort(Comparator.comparing(CategorizedEntity::getText));\n+        actualCategorizedEntityList.sort(Comparator.comparing(CategorizedEntity::getText));\n+\n+        for (int i = 0; i < expectedCategorizedEntityList.size(); i++) {\n+            CategorizedEntity expectedCategorizedEntity = expectedCategorizedEntityList.get(i);\n+            CategorizedEntity actualCategorizedEntity = actualCategorizedEntityList.get(i);\n+            validateCategorizedEntity(expectedCategorizedEntity, actualCategorizedEntity);\n+        }\n+    }\n+\n+    /**\n+     * Helper method to validate the list of PII entities.\n      *\n-     * @param expectedNamedEntityList namedEntities returned by the service.\n-     * @param actualNamedEntityList namedEntities returned by the API.\n+     * @param expectedPiiEntityList piiEntities returned by the service.\n+     * @param actualPiiEntityList piiEntities returned by the API.\n      */\n-    static void validateNamedEntities(List<NamedEntity> expectedNamedEntityList,\n-        List<NamedEntity> actualNamedEntityList) {\n-        assertEquals(expectedNamedEntityList.size(), actualNamedEntityList.size());\n-        expectedNamedEntityList.sort(Comparator.comparing(NamedEntity::getText));\n-        actualNamedEntityList.sort(Comparator.comparing(NamedEntity::getText));\n-\n-        for (int i = 0; i < expectedNamedEntityList.size(); i++) {\n-            NamedEntity expectedNamedEntity = expectedNamedEntityList.get(i);\n-            NamedEntity actualNamedEntity = actualNamedEntityList.get(i);\n-            validateNamedEntity(expectedNamedEntity, actualNamedEntity);\n+    static void validatePiiEntities(List<PiiEntity> expectedPiiEntityList,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzM2MA=="}, "originalCommit": {"oid": "bab617fcd904f23c1f5138f4d3ac9287eb021e18"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM3NTM3Nw==", "bodyText": "I wouldn't see the base class as a public API, more an internal to the API to avoid redundancy.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7897#discussion_r374375377", "createdAt": "2020-02-03T22:22:37Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTestBase.java", "diffHunk": "@@ -505,29 +523,48 @@ static void validateKeyPhrases(List<String> expectedKeyPhrases, List<String> act\n     }\n \n     /**\n-     * Helper method to validate the list of named entities.\n+     * Helper method to validate the list of categorized entities.\n+     *\n+     *  @param expectedCategorizedEntityList categorizedEntities returned by the service.\n+     * @param actualCategorizedEntityList categorizedEntities returned by the API.\n+     */\n+    static void validateCategorizedEntities(List<CategorizedEntity> expectedCategorizedEntityList,\n+        List<CategorizedEntity> actualCategorizedEntityList) {\n+        assertEquals(expectedCategorizedEntityList.size(), actualCategorizedEntityList.size());\n+        expectedCategorizedEntityList.sort(Comparator.comparing(CategorizedEntity::getText));\n+        actualCategorizedEntityList.sort(Comparator.comparing(CategorizedEntity::getText));\n+\n+        for (int i = 0; i < expectedCategorizedEntityList.size(); i++) {\n+            CategorizedEntity expectedCategorizedEntity = expectedCategorizedEntityList.get(i);\n+            CategorizedEntity actualCategorizedEntity = actualCategorizedEntityList.get(i);\n+            validateCategorizedEntity(expectedCategorizedEntity, actualCategorizedEntity);\n+        }\n+    }\n+\n+    /**\n+     * Helper method to validate the list of PII entities.\n      *\n-     * @param expectedNamedEntityList namedEntities returned by the service.\n-     * @param actualNamedEntityList namedEntities returned by the API.\n+     * @param expectedPiiEntityList piiEntities returned by the service.\n+     * @param actualPiiEntityList piiEntities returned by the API.\n      */\n-    static void validateNamedEntities(List<NamedEntity> expectedNamedEntityList,\n-        List<NamedEntity> actualNamedEntityList) {\n-        assertEquals(expectedNamedEntityList.size(), actualNamedEntityList.size());\n-        expectedNamedEntityList.sort(Comparator.comparing(NamedEntity::getText));\n-        actualNamedEntityList.sort(Comparator.comparing(NamedEntity::getText));\n-\n-        for (int i = 0; i < expectedNamedEntityList.size(); i++) {\n-            NamedEntity expectedNamedEntity = expectedNamedEntityList.get(i);\n-            NamedEntity actualNamedEntity = actualNamedEntityList.get(i);\n-            validateNamedEntity(expectedNamedEntity, actualNamedEntity);\n+    static void validatePiiEntities(List<PiiEntity> expectedPiiEntityList,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzM2MA=="}, "originalCommit": {"oid": "bab617fcd904f23c1f5138f4d3ac9287eb021e18"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc0MzY5Ng==", "bodyText": "to close here, yeah we can always do this later.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7897#discussion_r374743696", "createdAt": "2020-02-04T15:32:56Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTestBase.java", "diffHunk": "@@ -505,29 +523,48 @@ static void validateKeyPhrases(List<String> expectedKeyPhrases, List<String> act\n     }\n \n     /**\n-     * Helper method to validate the list of named entities.\n+     * Helper method to validate the list of categorized entities.\n+     *\n+     *  @param expectedCategorizedEntityList categorizedEntities returned by the service.\n+     * @param actualCategorizedEntityList categorizedEntities returned by the API.\n+     */\n+    static void validateCategorizedEntities(List<CategorizedEntity> expectedCategorizedEntityList,\n+        List<CategorizedEntity> actualCategorizedEntityList) {\n+        assertEquals(expectedCategorizedEntityList.size(), actualCategorizedEntityList.size());\n+        expectedCategorizedEntityList.sort(Comparator.comparing(CategorizedEntity::getText));\n+        actualCategorizedEntityList.sort(Comparator.comparing(CategorizedEntity::getText));\n+\n+        for (int i = 0; i < expectedCategorizedEntityList.size(); i++) {\n+            CategorizedEntity expectedCategorizedEntity = expectedCategorizedEntityList.get(i);\n+            CategorizedEntity actualCategorizedEntity = actualCategorizedEntityList.get(i);\n+            validateCategorizedEntity(expectedCategorizedEntity, actualCategorizedEntity);\n+        }\n+    }\n+\n+    /**\n+     * Helper method to validate the list of PII entities.\n      *\n-     * @param expectedNamedEntityList namedEntities returned by the service.\n-     * @param actualNamedEntityList namedEntities returned by the API.\n+     * @param expectedPiiEntityList piiEntities returned by the service.\n+     * @param actualPiiEntityList piiEntities returned by the API.\n      */\n-    static void validateNamedEntities(List<NamedEntity> expectedNamedEntityList,\n-        List<NamedEntity> actualNamedEntityList) {\n-        assertEquals(expectedNamedEntityList.size(), actualNamedEntityList.size());\n-        expectedNamedEntityList.sort(Comparator.comparing(NamedEntity::getText));\n-        actualNamedEntityList.sort(Comparator.comparing(NamedEntity::getText));\n-\n-        for (int i = 0; i < expectedNamedEntityList.size(); i++) {\n-            NamedEntity expectedNamedEntity = expectedNamedEntityList.get(i);\n-            NamedEntity actualNamedEntity = actualNamedEntityList.get(i);\n-            validateNamedEntity(expectedNamedEntity, actualNamedEntity);\n+    static void validatePiiEntities(List<PiiEntity> expectedPiiEntityList,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzM2MA=="}, "originalCommit": {"oid": "bab617fcd904f23c1f5138f4d3ac9287eb021e18"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDMyMzEzOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzoyMTozN1rOFk5W7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzoyMTo1OFrOFk5XuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIzMjgxNA==", "bodyText": "Categorized", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7897#discussion_r374232814", "createdAt": "2020-02-03T17:21:37Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -275,7 +275,7 @@ public TextAnalyticsServiceVersion getServiceVersion() {\n \n     // Named Entity", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bab617fcd904f23c1f5138f4d3ac9287eb021e18"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIzMzAxNw==", "bodyText": "or Entity Category... not sure what this comment is though", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7897#discussion_r374233017", "createdAt": "2020-02-03T17:21:58Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -275,7 +275,7 @@ public TextAnalyticsServiceVersion getServiceVersion() {\n \n     // Named Entity", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIzMjgxNA=="}, "originalCommit": {"oid": "bab617fcd904f23c1f5138f4d3ac9287eb021e18"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDM4MDM5OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzozOTo1MlrOFk56YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzozOTo1MlrOFk56YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI0MTg4OA==", "bodyText": "same here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7897#discussion_r374241888", "createdAt": "2020-02-03T17:39:52Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsClient.java", "diffHunk": "@@ -166,7 +166,7 @@ public DetectLanguageResult detectLanguage(String text) {\n \n     // Named Entity", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bab617fcd904f23c1f5138f4d3ac9287eb021e18"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDM4NDMwOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTestBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzo0MToxMFrOFk58yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzo0MToxMFrOFk58yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI0MjUwNQ==", "bodyText": "Named", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7897#discussion_r374242505", "createdAt": "2020-02-03T17:41:10Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTestBase.java", "diffHunk": "@@ -286,20 +287,20 @@ void detectLanguageRunner(Consumer<List<DetectLanguageInput>> testRunner) {\n     }\n \n     // Named Entity runner", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bab617fcd904f23c1f5138f4d3ac9287eb021e18"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDM4NDYwOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTestBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzo0MToxNlrOFk58-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzo0MToxNlrOFk58-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI0MjU1NQ==", "bodyText": "Named", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7897#discussion_r374242555", "createdAt": "2020-02-03T17:41:16Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTestBase.java", "diffHunk": "@@ -286,20 +287,20 @@ void detectLanguageRunner(Consumer<List<DetectLanguageInput>> testRunner) {\n     }\n \n     // Named Entity runner\n-    void recognizeNamedEntityStringInputRunner(Consumer<List<String>> testRunner) {\n+    void recognizeCategorizedEntityStringInputRunner(Consumer<List<String>> testRunner) {\n         testRunner.accept(NAMED_ENTITY_INPUTS);\n     }\n \n     void recognizeNamedEntitiesLanguageHintRunner(BiConsumer<List<String>, String> testRunner) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bab617fcd904f23c1f5138f4d3ac9287eb021e18"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODE5MTQwOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/RecognizeEntityAsyncClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODoyMjoyM1rOFleijw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODozMjowNFrOFle25Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0MTk5OQ==", "bodyText": "Should these be entity.getCategory() and entity.getSubCategory()?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7897#discussion_r374841999", "createdAt": "2020-02-04T18:22:23Z", "author": {"login": "kristapratico"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/RecognizeEntityAsyncClient.java", "diffHunk": "@@ -97,7 +98,7 @@\n                 documentEntities.getStatistics() == null ? null\n                     : toTextDocumentStatistics(documentEntities.getStatistics()),\n                 null, documentEntities.getEntities().stream().map(entity ->\n-                new NamedEntity(entity.getText(), entity.getType(), entity.getSubtype(), entity.getOffset(),\n+                new CategorizedEntity(entity.getText(), entity.getType(), entity.getSubtype(), entity.getOffset(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c05d00ab14ae50ccfc12563a17b22834ac76555"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0NjgwOQ==", "bodyText": "So this the service entity (generated code) model class that we are converting to CategorizedEntity, hence the getType()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7897#discussion_r374846809", "createdAt": "2020-02-04T18:31:17Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/RecognizeEntityAsyncClient.java", "diffHunk": "@@ -97,7 +98,7 @@\n                 documentEntities.getStatistics() == null ? null\n                     : toTextDocumentStatistics(documentEntities.getStatistics()),\n                 null, documentEntities.getEntities().stream().map(entity ->\n-                new NamedEntity(entity.getText(), entity.getType(), entity.getSubtype(), entity.getOffset(),\n+                new CategorizedEntity(entity.getText(), entity.getType(), entity.getSubtype(), entity.getOffset(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0MTk5OQ=="}, "originalCommit": {"oid": "9c05d00ab14ae50ccfc12563a17b22834ac76555"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0NzIwNQ==", "bodyText": "Got it, figured it was fine, but just wanted to make sure", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7897#discussion_r374847205", "createdAt": "2020-02-04T18:32:04Z", "author": {"login": "kristapratico"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/RecognizeEntityAsyncClient.java", "diffHunk": "@@ -97,7 +98,7 @@\n                 documentEntities.getStatistics() == null ? null\n                     : toTextDocumentStatistics(documentEntities.getStatistics()),\n                 null, documentEntities.getEntities().stream().map(entity ->\n-                new NamedEntity(entity.getText(), entity.getType(), entity.getSubtype(), entity.getOffset(),\n+                new CategorizedEntity(entity.getText(), entity.getType(), entity.getSubtype(), entity.getOffset(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0MTk5OQ=="}, "originalCommit": {"oid": "9c05d00ab14ae50ccfc12563a17b22834ac76555"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODE5NDg2OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/RecognizePiiEntityAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODoyMzoyNlrOFlek1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODoyMzoyNlrOFlek1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0MjU4Mw==", "bodyText": "same question here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7897#discussion_r374842583", "createdAt": "2020-02-04T18:23:26Z", "author": {"login": "kristapratico"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/RecognizePiiEntityAsyncClient.java", "diffHunk": "@@ -96,7 +96,7 @@\n                 documentEntities.getStatistics() == null ? null\n                     : toTextDocumentStatistics(documentEntities.getStatistics()),\n                 null, documentEntities.getEntities().stream().map(entity ->\n-                new NamedEntity(entity.getText(), entity.getType(), entity.getSubtype(), entity.getOffset(),\n+                new PiiEntity(entity.getText(), entity.getType(), entity.getSubtype(), entity.getOffset(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c05d00ab14ae50ccfc12563a17b22834ac76555"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3282, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}