{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MDcyMDkx", "number": 12484, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOToxNjo1M1rOEISTlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOToxNjo1M1rOEISTlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTIzOTkwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-management/src/test/java/com/azure/core/management/implementation/polling/LROPollerTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOToxNjo1M1rOGoJ7JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOToxNjo1M1rOGoJ7JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1ODgyMA==", "bodyText": "Here last AsyncPollResponse  will be in FAILED state with error in PollResult. Unlike track1 client-runtime, it will not throw CloudException during the polling.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12484#discussion_r444758820", "createdAt": "2020-06-24T09:16:53Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/core/azure-core-management/src/test/java/com/azure/core/management/implementation/polling/LROPollerTests.java", "diffHunk": "@@ -126,6 +126,211 @@ public void lroBasedOnProvisioningState() {\n         }\n     }\n \n+    @Test\n+    public void lroBasedOnAsyncOperation() {\n+        ServerConfigure serverConfigure = new ServerConfigure();\n+\n+        final String resourceEndpoint = \"/resource/1\";\n+        final String operationEndpoint = \"/operations/1\";\n+        ResponseTransformer provisioningStateLroService = new ResponseTransformer() {\n+            private final int[] getCallCount = new int[1];\n+\n+            @Override\n+            public com.github.tomakehurst.wiremock.http.Response transform(Request request,\n+                                                                           com.github.tomakehurst.wiremock.http.Response response,\n+                                                                           FileSource fileSource,\n+                                                                           Parameters parameters) {\n+\n+                if (!request.getUrl().endsWith(resourceEndpoint) && !request.getUrl().endsWith(operationEndpoint)) {\n+                    return new com.github.tomakehurst.wiremock.http.Response.Builder()\n+                        .status(500)\n+                        .body(\"Unsupported path:\" + request.getUrl())\n+                        .build();\n+                }\n+                if (request.getMethod().isOneOf(RequestMethod.PUT)) {\n+                    // accept response\n+                    return new com.github.tomakehurst.wiremock.http.Response.Builder()\n+                        .headers(new HttpHeaders(\n+                            new HttpHeader(\"Azure-AsyncOperation\", request.getAbsoluteUrl().replace(resourceEndpoint, operationEndpoint))))\n+                        .body(toJson(new FooWithProvisioningState(\"Creating\")))\n+                        .status(201)\n+                        .build();\n+                }\n+                if (request.getMethod().isOneOf(RequestMethod.GET)) {\n+                    if (request.getUrl().endsWith(operationEndpoint)) {\n+                        getCallCount[0]++;\n+                        if (getCallCount[0] < serverConfigure.pollingCountTillSuccess) {\n+                            return new com.github.tomakehurst.wiremock.http.Response.Builder()\n+                                .body(\"{\\\"status\\\": \\\"InProgress\\\"}\")\n+                                .build();\n+                        } else if (getCallCount[0] == serverConfigure.pollingCountTillSuccess) {\n+                            return new com.github.tomakehurst.wiremock.http.Response.Builder()\n+                                .body(\"{\\\"status\\\": \\\"Succeeded\\\"}\")\n+                                .build();\n+                        }\n+                    } else if (request.getUrl().endsWith(resourceEndpoint) && getCallCount[0] == serverConfigure.pollingCountTillSuccess) {\n+                        // final resource\n+                        return new com.github.tomakehurst.wiremock.http.Response.Builder()\n+                            .body(toJson(new FooWithProvisioningState(\"Succeeded\", UUID.randomUUID().toString())))\n+                            .build();\n+                    } else {\n+                        return new com.github.tomakehurst.wiremock.http.Response.Builder()\n+                            .status(400)\n+                            .body(\"Invalid state:\" + request.getUrl())\n+                            .build();\n+                    }\n+                }\n+                return response;\n+            }\n+\n+            @Override\n+            public String getName() {\n+                return \"LroService\";\n+            }\n+        };\n+\n+        WireMockServer lroServer = createServer(provisioningStateLroService, resourceEndpoint, operationEndpoint);\n+        lroServer.start();\n+\n+        try {\n+            final ProvisioningStateLroServiceClient client = RestProxy.create(ProvisioningStateLroServiceClient.class,\n+                createHttpPipeline(lroServer.port()),\n+                SERIALIZER);\n+\n+            PollerFlux<PollResult<FooWithProvisioningState>, FooWithProvisioningState> lroFlux\n+                = PollerFactory.create(SERIALIZER,\n+                new HttpPipelineBuilder().build(),\n+                FooWithProvisioningState.class,\n+                FooWithProvisioningState.class,\n+                POLLING_DURATION,\n+                newLroInitFunction(client));\n+\n+            int[] onNextCallCount = new int[1];\n+            AsyncPollResponse<PollResult<FooWithProvisioningState>, FooWithProvisioningState> pollResponse = lroFlux.doOnNext(response -> {\n+                PollResult<FooWithProvisioningState> pollResult = response.getValue();\n+                Assertions.assertNotNull(pollResult);\n+                Assertions.assertNotNull(pollResult.getValue());\n+                onNextCallCount[0]++;\n+                if (onNextCallCount[0] == 1) {\n+                    Assertions.assertEquals(LongRunningOperationStatus.IN_PROGRESS,\n+                        response.getStatus());\n+                } else if (onNextCallCount[0] == 2) {\n+                    Assertions.assertEquals(LongRunningOperationStatus.SUCCESSFULLY_COMPLETED,\n+                        response.getStatus());\n+                } else {\n+                    throw new IllegalStateException(\"Poller emitted more than expected value.\");\n+                }\n+            }).blockLast();\n+\n+            FooWithProvisioningState foo = pollResponse.getFinalResult().block();\n+            Assertions.assertNotNull(foo.getResourceId());\n+            Assertions.assertEquals(\"Succeeded\", foo.getProvisioningState());\n+        } finally {\n+            if (lroServer.isRunning()) {\n+                lroServer.shutdown();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void lroBasedOnAsyncOperationFailed() {\n+        ServerConfigure serverConfigure = new ServerConfigure();\n+\n+        final String resourceEndpoint = \"/resource/1\";\n+        final String operationEndpoint = \"/operations/1\";\n+        ResponseTransformer provisioningStateLroService = new ResponseTransformer() {\n+            private final int[] getCallCount = new int[1];\n+\n+            @Override\n+            public com.github.tomakehurst.wiremock.http.Response transform(Request request,\n+                                                                           com.github.tomakehurst.wiremock.http.Response response,\n+                                                                           FileSource fileSource,\n+                                                                           Parameters parameters) {\n+\n+                if (!request.getUrl().endsWith(resourceEndpoint) && !request.getUrl().endsWith(operationEndpoint)) {\n+                    return new com.github.tomakehurst.wiremock.http.Response.Builder()\n+                        .status(500)\n+                        .body(\"Unsupported path:\" + request.getUrl())\n+                        .build();\n+                }\n+                if (request.getMethod().isOneOf(RequestMethod.PUT)) {\n+                    // accept response\n+                    return new com.github.tomakehurst.wiremock.http.Response.Builder()\n+                        .headers(new HttpHeaders(\n+                            new HttpHeader(\"Azure-AsyncOperation\", request.getAbsoluteUrl().replace(resourceEndpoint, operationEndpoint))))\n+                        .body(toJson(new FooWithProvisioningState(\"Creating\")))\n+                        .status(201)\n+                        .build();\n+                }\n+                if (request.getMethod().isOneOf(RequestMethod.GET)) {\n+                    if (request.getUrl().endsWith(operationEndpoint)) {\n+                        getCallCount[0]++;\n+                        if (getCallCount[0] < serverConfigure.pollingCountTillSuccess) {\n+                            return new com.github.tomakehurst.wiremock.http.Response.Builder()\n+                                .body(\"{\\\"status\\\": \\\"InProgress\\\"}\")\n+                                .build();\n+                        } else if (getCallCount[0] == serverConfigure.pollingCountTillSuccess) {\n+                            return new com.github.tomakehurst.wiremock.http.Response.Builder()\n+                                .body(\"{\\\"status\\\": \\\"Failed\\\"}\")\n+                                .build();\n+                        }\n+                    } else {\n+                        return new com.github.tomakehurst.wiremock.http.Response.Builder()\n+                            .status(400)\n+                            .body(\"Invalid state:\" + request.getUrl())\n+                            .build();\n+                    }\n+                }\n+                return response;\n+            }\n+\n+            @Override\n+            public String getName() {\n+                return \"LroService\";\n+            }\n+        };\n+\n+        WireMockServer lroServer = createServer(provisioningStateLroService, resourceEndpoint, operationEndpoint);\n+        lroServer.start();\n+\n+        try {\n+            final ProvisioningStateLroServiceClient client = RestProxy.create(ProvisioningStateLroServiceClient.class,\n+                createHttpPipeline(lroServer.port()),\n+                SERIALIZER);\n+\n+            PollerFlux<PollResult<FooWithProvisioningState>, FooWithProvisioningState> lroFlux\n+                = PollerFactory.create(SERIALIZER,\n+                new HttpPipelineBuilder().build(),\n+                FooWithProvisioningState.class,\n+                FooWithProvisioningState.class,\n+                POLLING_DURATION,\n+                newLroInitFunction(client));\n+\n+            int[] onNextCallCount = new int[1];\n+            AsyncPollResponse<PollResult<FooWithProvisioningState>, FooWithProvisioningState> pollResponse = lroFlux.doOnNext(response -> {\n+                PollResult<FooWithProvisioningState> pollResult = response.getValue();\n+                Assertions.assertNotNull(pollResult);\n+                onNextCallCount[0]++;\n+                if (onNextCallCount[0] == 1) {\n+                    Assertions.assertNotNull(pollResult.getValue());\n+                    Assertions.assertEquals(LongRunningOperationStatus.IN_PROGRESS,\n+                        response.getStatus());\n+                } else if (onNextCallCount[0] == 2) {\n+                    Assertions.assertEquals(LongRunningOperationStatus.FAILED,\n+                        response.getStatus());\n+                } else {\n+                    throw new IllegalStateException(\"Poller emitted more than expected value.\");\n+                }\n+            }).blockLast();\n+\n+            Assertions.assertEquals(LongRunningOperationStatus.FAILED, pollResponse.getStatus());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39896ae5ac87ab1345e25c7508c85de460e1922e"}, "originalPosition": 201}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3731, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}