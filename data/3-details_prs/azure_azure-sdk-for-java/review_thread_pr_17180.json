{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1NjcwNTgw", "number": 17180, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjoyMzowNFrOE1ax_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjo0NDo0MFrOE1bJSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDQ4NzY2OnYy", "diffSide": "RIGHT", "path": "eng/precommit_local_build.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjoyMzowNFrOHtr1TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjoyMzowNFrOHtr1TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2NjEyNA==", "bodyText": "nit: use snake_case for method names and var names to make it look more pythonic", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17180#discussion_r517666124", "createdAt": "2020-11-04T22:23:04Z", "author": {"login": "srnagar"}, "path": "eng/precommit_local_build.py", "diffHunk": "@@ -0,0 +1,99 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+# Python version 3.4 or higher is required to run this script.\n+\n+# Use case: Runs compilation, testing, and linting for the passed artifacts and POM artifacts.\n+#\n+# The artifacts must exist in the module list of pom.xml in the root of azure-sdk-for-java. Artifacts may be passed in two ways:\n+#\n+# 1. Comma separated list of relative POM paths.\n+# 2. Comma separated list of groupId:artifactId identifiers.\n+#\n+# The script must be run at the root of azure-sdk-for-java.\n+\n+import argparse\n+import os\n+import xml.etree.ElementTree as ET\n+\n+baseCommand = 'mvn clean install -f pom.xml -pl \"{}\" -am {}'\n+xmlNamespace = '{http://maven.apache.org/POM/4.0.0}'\n+\n+def getArtifactsFromPOM(pomPath: str, artifacts: list, debug: bool):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "509cc97c5b0ff434b4e4a906e66174f2b836986b"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDQ5NTk2OnYy", "diffSide": "RIGHT", "path": "eng/precommit_local_build.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjoyNjowN1rOHtr6aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjo1Mjo1NVrOHtsmpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2NzQzMg==", "bodyText": "Does maven allow passing multiple pom files?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17180#discussion_r517667432", "createdAt": "2020-11-04T22:26:07Z", "author": {"login": "srnagar"}, "path": "eng/precommit_local_build.py", "diffHunk": "@@ -0,0 +1,99 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+# Python version 3.4 or higher is required to run this script.\n+\n+# Use case: Runs compilation, testing, and linting for the passed artifacts and POM artifacts.\n+#\n+# The artifacts must exist in the module list of pom.xml in the root of azure-sdk-for-java. Artifacts may be passed in two ways:\n+#\n+# 1. Comma separated list of relative POM paths.\n+# 2. Comma separated list of groupId:artifactId identifiers.\n+#\n+# The script must be run at the root of azure-sdk-for-java.\n+\n+import argparse\n+import os\n+import xml.etree.ElementTree as ET\n+\n+baseCommand = 'mvn clean install -f pom.xml -pl \"{}\" -am {}'\n+xmlNamespace = '{http://maven.apache.org/POM/4.0.0}'\n+\n+def getArtifactsFromPOM(pomPath: str, artifacts: list, debug: bool):\n+    if not os.path.exists(pomPath):\n+        if debug:\n+            print(\"POM {} doesn't exist, skipping\".format(pomPath))\n+        return\n+\n+    tree = ET.parse(pomPath)\n+    modulesElement = tree.getroot().find(xmlNamespace + 'modules')\n+    if modulesElement != None:\n+        pomBasedir = os.path.dirname(pomPath)\n+        for modulePomElement in modulesElement.iterfind(xmlNamespace + 'module'):\n+            moduleName = modulePomElement.text\n+            modulePomPath = os.path.normpath(os.path.join(pomBasedir, moduleName, 'pom.xml'))\n+\n+            if debug:\n+                print('Getting module artifact for {} from aggregator POM {}'.format(moduleName.split('/')[-1], pomPath))\n+\n+            getArtifactsFromPOM(modulePomPath, artifacts, debug)\n+\n+    else:\n+        groupId = tree.getroot().findtext(xmlNamespace + \"groupId\")\n+        artifactId = tree.getroot().findtext(xmlNamespace + \"artifactId\")\n+        artifactIdentifier = '{}:{}'.format(groupId, artifactId)\n+\n+        if debug:\n+            print('Adding artifact {} for POM file {}'.format(artifactIdentifier, pomPath))\n+\n+        artifacts.append(artifactIdentifier)\n+\n+def main():\n+    parser = argparse.ArgumentParser(description='Runs compilation, testing, and linting for the passed artifacts.')\n+    parser.add_argument('--artifacts', '--a', type=str, default=None, help='Comma separated list of groupId:artifactId identifiers')\n+    parser.add_argument('--poms', '--p', type=str, default=None, help='Comma separated list of POM paths')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "509cc97c5b0ff434b4e4a906e66174f2b836986b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY3ODc1OQ==", "bodyText": "This script will \"crack\" the POM, so if you pass multiple it will grab the groupId:artifactId identifier and put it into the -pl property. It will also \"crack\" aggregate POMs into their sub-modules.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17180#discussion_r517678759", "createdAt": "2020-11-04T22:52:55Z", "author": {"login": "alzimmermsft"}, "path": "eng/precommit_local_build.py", "diffHunk": "@@ -0,0 +1,99 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+# Python version 3.4 or higher is required to run this script.\n+\n+# Use case: Runs compilation, testing, and linting for the passed artifacts and POM artifacts.\n+#\n+# The artifacts must exist in the module list of pom.xml in the root of azure-sdk-for-java. Artifacts may be passed in two ways:\n+#\n+# 1. Comma separated list of relative POM paths.\n+# 2. Comma separated list of groupId:artifactId identifiers.\n+#\n+# The script must be run at the root of azure-sdk-for-java.\n+\n+import argparse\n+import os\n+import xml.etree.ElementTree as ET\n+\n+baseCommand = 'mvn clean install -f pom.xml -pl \"{}\" -am {}'\n+xmlNamespace = '{http://maven.apache.org/POM/4.0.0}'\n+\n+def getArtifactsFromPOM(pomPath: str, artifacts: list, debug: bool):\n+    if not os.path.exists(pomPath):\n+        if debug:\n+            print(\"POM {} doesn't exist, skipping\".format(pomPath))\n+        return\n+\n+    tree = ET.parse(pomPath)\n+    modulesElement = tree.getroot().find(xmlNamespace + 'modules')\n+    if modulesElement != None:\n+        pomBasedir = os.path.dirname(pomPath)\n+        for modulePomElement in modulesElement.iterfind(xmlNamespace + 'module'):\n+            moduleName = modulePomElement.text\n+            modulePomPath = os.path.normpath(os.path.join(pomBasedir, moduleName, 'pom.xml'))\n+\n+            if debug:\n+                print('Getting module artifact for {} from aggregator POM {}'.format(moduleName.split('/')[-1], pomPath))\n+\n+            getArtifactsFromPOM(modulePomPath, artifacts, debug)\n+\n+    else:\n+        groupId = tree.getroot().findtext(xmlNamespace + \"groupId\")\n+        artifactId = tree.getroot().findtext(xmlNamespace + \"artifactId\")\n+        artifactIdentifier = '{}:{}'.format(groupId, artifactId)\n+\n+        if debug:\n+            print('Adding artifact {} for POM file {}'.format(artifactIdentifier, pomPath))\n+\n+        artifacts.append(artifactIdentifier)\n+\n+def main():\n+    parser = argparse.ArgumentParser(description='Runs compilation, testing, and linting for the passed artifacts.')\n+    parser.add_argument('--artifacts', '--a', type=str, default=None, help='Comma separated list of groupId:artifactId identifiers')\n+    parser.add_argument('--poms', '--p', type=str, default=None, help='Comma separated list of POM paths')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2NzQzMg=="}, "originalCommit": {"oid": "509cc97c5b0ff434b4e4a906e66174f2b836986b"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDUwMDAwOnYy", "diffSide": "RIGHT", "path": "eng/precommit_local_build.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjoyNzo0MFrOHtr85g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjo1MzowNFrOHtsm4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2ODA3MA==", "bodyText": "I think we should just disable gpg by default. I don't think we need to run gpg check locally.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17180#discussion_r517668070", "createdAt": "2020-11-04T22:27:40Z", "author": {"login": "srnagar"}, "path": "eng/precommit_local_build.py", "diffHunk": "@@ -0,0 +1,99 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+# Python version 3.4 or higher is required to run this script.\n+\n+# Use case: Runs compilation, testing, and linting for the passed artifacts and POM artifacts.\n+#\n+# The artifacts must exist in the module list of pom.xml in the root of azure-sdk-for-java. Artifacts may be passed in two ways:\n+#\n+# 1. Comma separated list of relative POM paths.\n+# 2. Comma separated list of groupId:artifactId identifiers.\n+#\n+# The script must be run at the root of azure-sdk-for-java.\n+\n+import argparse\n+import os\n+import xml.etree.ElementTree as ET\n+\n+baseCommand = 'mvn clean install -f pom.xml -pl \"{}\" -am {}'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "509cc97c5b0ff434b4e4a906e66174f2b836986b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY3ODgxOA==", "bodyText": "Good catch", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17180#discussion_r517678818", "createdAt": "2020-11-04T22:53:04Z", "author": {"login": "alzimmermsft"}, "path": "eng/precommit_local_build.py", "diffHunk": "@@ -0,0 +1,99 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+# Python version 3.4 or higher is required to run this script.\n+\n+# Use case: Runs compilation, testing, and linting for the passed artifacts and POM artifacts.\n+#\n+# The artifacts must exist in the module list of pom.xml in the root of azure-sdk-for-java. Artifacts may be passed in two ways:\n+#\n+# 1. Comma separated list of relative POM paths.\n+# 2. Comma separated list of groupId:artifactId identifiers.\n+#\n+# The script must be run at the root of azure-sdk-for-java.\n+\n+import argparse\n+import os\n+import xml.etree.ElementTree as ET\n+\n+baseCommand = 'mvn clean install -f pom.xml -pl \"{}\" -am {}'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2ODA3MA=="}, "originalCommit": {"oid": "509cc97c5b0ff434b4e4a906e66174f2b836986b"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDUyMjA3OnYy", "diffSide": "RIGHT", "path": "eng/precommit_local_build.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjozNTo0MFrOHtsKTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjo1NDoyNVrOHtso8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY3MTUwMQ==", "bodyText": "We should also have an option to do a dry-run which just prints the maven command and not run it. Useful if I want to just copy the generated maven command and give it to someone else to run.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17180#discussion_r517671501", "createdAt": "2020-11-04T22:35:40Z", "author": {"login": "srnagar"}, "path": "eng/precommit_local_build.py", "diffHunk": "@@ -0,0 +1,99 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+# Python version 3.4 or higher is required to run this script.\n+\n+# Use case: Runs compilation, testing, and linting for the passed artifacts and POM artifacts.\n+#\n+# The artifacts must exist in the module list of pom.xml in the root of azure-sdk-for-java. Artifacts may be passed in two ways:\n+#\n+# 1. Comma separated list of relative POM paths.\n+# 2. Comma separated list of groupId:artifactId identifiers.\n+#\n+# The script must be run at the root of azure-sdk-for-java.\n+\n+import argparse\n+import os\n+import xml.etree.ElementTree as ET\n+\n+baseCommand = 'mvn clean install -f pom.xml -pl \"{}\" -am {}'\n+xmlNamespace = '{http://maven.apache.org/POM/4.0.0}'\n+\n+def getArtifactsFromPOM(pomPath: str, artifacts: list, debug: bool):\n+    if not os.path.exists(pomPath):\n+        if debug:\n+            print(\"POM {} doesn't exist, skipping\".format(pomPath))\n+        return\n+\n+    tree = ET.parse(pomPath)\n+    modulesElement = tree.getroot().find(xmlNamespace + 'modules')\n+    if modulesElement != None:\n+        pomBasedir = os.path.dirname(pomPath)\n+        for modulePomElement in modulesElement.iterfind(xmlNamespace + 'module'):\n+            moduleName = modulePomElement.text\n+            modulePomPath = os.path.normpath(os.path.join(pomBasedir, moduleName, 'pom.xml'))\n+\n+            if debug:\n+                print('Getting module artifact for {} from aggregator POM {}'.format(moduleName.split('/')[-1], pomPath))\n+\n+            getArtifactsFromPOM(modulePomPath, artifacts, debug)\n+\n+    else:\n+        groupId = tree.getroot().findtext(xmlNamespace + \"groupId\")\n+        artifactId = tree.getroot().findtext(xmlNamespace + \"artifactId\")\n+        artifactIdentifier = '{}:{}'.format(groupId, artifactId)\n+\n+        if debug:\n+            print('Adding artifact {} for POM file {}'.format(artifactIdentifier, pomPath))\n+\n+        artifacts.append(artifactIdentifier)\n+\n+def main():\n+    parser = argparse.ArgumentParser(description='Runs compilation, testing, and linting for the passed artifacts.')\n+    parser.add_argument('--artifacts', '--a', type=str, default=None, help='Comma separated list of groupId:artifactId identifiers')\n+    parser.add_argument('--poms', '--p', type=str, default=None, help='Comma separated list of POM paths')\n+    parser.add_argument('--skip-tests', '--st', action='store_true', help='Skips running tests')\n+    parser.add_argument('--skip-javadocs', '--sj', action='store_true', help='Skips javadoc generation')\n+    parser.add_argument('--skip-checkstyle', '--sc', action='store_true', help='Skips checkstyle linting')\n+    parser.add_argument('--skip-spotbugs', '--ss', action='store_true', help='Skips spotbugs linting')\n+    parser.add_argument('--skip-revapi', '--sr', action='store_true', help='Skips revapi linting')\n+    parser.add_argument('--debug', '--d', action='store_true', help='Runs the script with debug logging')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "509cc97c5b0ff434b4e4a906e66174f2b836986b"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY3OTM0NQ==", "bodyText": "Good idea", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17180#discussion_r517679345", "createdAt": "2020-11-04T22:54:25Z", "author": {"login": "alzimmermsft"}, "path": "eng/precommit_local_build.py", "diffHunk": "@@ -0,0 +1,99 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+# Python version 3.4 or higher is required to run this script.\n+\n+# Use case: Runs compilation, testing, and linting for the passed artifacts and POM artifacts.\n+#\n+# The artifacts must exist in the module list of pom.xml in the root of azure-sdk-for-java. Artifacts may be passed in two ways:\n+#\n+# 1. Comma separated list of relative POM paths.\n+# 2. Comma separated list of groupId:artifactId identifiers.\n+#\n+# The script must be run at the root of azure-sdk-for-java.\n+\n+import argparse\n+import os\n+import xml.etree.ElementTree as ET\n+\n+baseCommand = 'mvn clean install -f pom.xml -pl \"{}\" -am {}'\n+xmlNamespace = '{http://maven.apache.org/POM/4.0.0}'\n+\n+def getArtifactsFromPOM(pomPath: str, artifacts: list, debug: bool):\n+    if not os.path.exists(pomPath):\n+        if debug:\n+            print(\"POM {} doesn't exist, skipping\".format(pomPath))\n+        return\n+\n+    tree = ET.parse(pomPath)\n+    modulesElement = tree.getroot().find(xmlNamespace + 'modules')\n+    if modulesElement != None:\n+        pomBasedir = os.path.dirname(pomPath)\n+        for modulePomElement in modulesElement.iterfind(xmlNamespace + 'module'):\n+            moduleName = modulePomElement.text\n+            modulePomPath = os.path.normpath(os.path.join(pomBasedir, moduleName, 'pom.xml'))\n+\n+            if debug:\n+                print('Getting module artifact for {} from aggregator POM {}'.format(moduleName.split('/')[-1], pomPath))\n+\n+            getArtifactsFromPOM(modulePomPath, artifacts, debug)\n+\n+    else:\n+        groupId = tree.getroot().findtext(xmlNamespace + \"groupId\")\n+        artifactId = tree.getroot().findtext(xmlNamespace + \"artifactId\")\n+        artifactIdentifier = '{}:{}'.format(groupId, artifactId)\n+\n+        if debug:\n+            print('Adding artifact {} for POM file {}'.format(artifactIdentifier, pomPath))\n+\n+        artifacts.append(artifactIdentifier)\n+\n+def main():\n+    parser = argparse.ArgumentParser(description='Runs compilation, testing, and linting for the passed artifacts.')\n+    parser.add_argument('--artifacts', '--a', type=str, default=None, help='Comma separated list of groupId:artifactId identifiers')\n+    parser.add_argument('--poms', '--p', type=str, default=None, help='Comma separated list of POM paths')\n+    parser.add_argument('--skip-tests', '--st', action='store_true', help='Skips running tests')\n+    parser.add_argument('--skip-javadocs', '--sj', action='store_true', help='Skips javadoc generation')\n+    parser.add_argument('--skip-checkstyle', '--sc', action='store_true', help='Skips checkstyle linting')\n+    parser.add_argument('--skip-spotbugs', '--ss', action='store_true', help='Skips spotbugs linting')\n+    parser.add_argument('--skip-revapi', '--sr', action='store_true', help='Skips revapi linting')\n+    parser.add_argument('--debug', '--d', action='store_true', help='Runs the script with debug logging')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY3MTUwMQ=="}, "originalCommit": {"oid": "509cc97c5b0ff434b4e4a906e66174f2b836986b"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDUyNzQ5OnYy", "diffSide": "RIGHT", "path": "eng/precommit_local_build.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjozNzozMlrOHtsNgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjozNzozMlrOHtsNgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY3MjMyMQ==", "bodyText": "Might be worth including the exact command to use to run this script and the options that can be passed to this script.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17180#discussion_r517672321", "createdAt": "2020-11-04T22:37:32Z", "author": {"login": "srnagar"}, "path": "eng/precommit_local_build.py", "diffHunk": "@@ -0,0 +1,99 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+# Python version 3.4 or higher is required to run this script.\n+\n+# Use case: Runs compilation, testing, and linting for the passed artifacts and POM artifacts.\n+#\n+# The artifacts must exist in the module list of pom.xml in the root of azure-sdk-for-java. Artifacts may be passed in two ways:\n+#\n+# 1. Comma separated list of relative POM paths.\n+# 2. Comma separated list of groupId:artifactId identifiers.\n+#\n+# The script must be run at the root of azure-sdk-for-java.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "509cc97c5b0ff434b4e4a906e66174f2b836986b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDUyOTk2OnYy", "diffSide": "RIGHT", "path": "eng/precommit_local_build.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjozODozOFrOHtsO9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjozODozOFrOHtsO9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY3MjY5NQ==", "bodyText": "Let's wrap this with double-quotes as well and explicitly set this to true to be consistent with other options below.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17180#discussion_r517672695", "createdAt": "2020-11-04T22:38:38Z", "author": {"login": "srnagar"}, "path": "eng/precommit_local_build.py", "diffHunk": "@@ -0,0 +1,99 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+# Python version 3.4 or higher is required to run this script.\n+\n+# Use case: Runs compilation, testing, and linting for the passed artifacts and POM artifacts.\n+#\n+# The artifacts must exist in the module list of pom.xml in the root of azure-sdk-for-java. Artifacts may be passed in two ways:\n+#\n+# 1. Comma separated list of relative POM paths.\n+# 2. Comma separated list of groupId:artifactId identifiers.\n+#\n+# The script must be run at the root of azure-sdk-for-java.\n+\n+import argparse\n+import os\n+import xml.etree.ElementTree as ET\n+\n+baseCommand = 'mvn clean install -f pom.xml -pl \"{}\" -am {}'\n+xmlNamespace = '{http://maven.apache.org/POM/4.0.0}'\n+\n+def getArtifactsFromPOM(pomPath: str, artifacts: list, debug: bool):\n+    if not os.path.exists(pomPath):\n+        if debug:\n+            print(\"POM {} doesn't exist, skipping\".format(pomPath))\n+        return\n+\n+    tree = ET.parse(pomPath)\n+    modulesElement = tree.getroot().find(xmlNamespace + 'modules')\n+    if modulesElement != None:\n+        pomBasedir = os.path.dirname(pomPath)\n+        for modulePomElement in modulesElement.iterfind(xmlNamespace + 'module'):\n+            moduleName = modulePomElement.text\n+            modulePomPath = os.path.normpath(os.path.join(pomBasedir, moduleName, 'pom.xml'))\n+\n+            if debug:\n+                print('Getting module artifact for {} from aggregator POM {}'.format(moduleName.split('/')[-1], pomPath))\n+\n+            getArtifactsFromPOM(modulePomPath, artifacts, debug)\n+\n+    else:\n+        groupId = tree.getroot().findtext(xmlNamespace + \"groupId\")\n+        artifactId = tree.getroot().findtext(xmlNamespace + \"artifactId\")\n+        artifactIdentifier = '{}:{}'.format(groupId, artifactId)\n+\n+        if debug:\n+            print('Adding artifact {} for POM file {}'.format(artifactIdentifier, pomPath))\n+\n+        artifacts.append(artifactIdentifier)\n+\n+def main():\n+    parser = argparse.ArgumentParser(description='Runs compilation, testing, and linting for the passed artifacts.')\n+    parser.add_argument('--artifacts', '--a', type=str, default=None, help='Comma separated list of groupId:artifactId identifiers')\n+    parser.add_argument('--poms', '--p', type=str, default=None, help='Comma separated list of POM paths')\n+    parser.add_argument('--skip-tests', '--st', action='store_true', help='Skips running tests')\n+    parser.add_argument('--skip-javadocs', '--sj', action='store_true', help='Skips javadoc generation')\n+    parser.add_argument('--skip-checkstyle', '--sc', action='store_true', help='Skips checkstyle linting')\n+    parser.add_argument('--skip-spotbugs', '--ss', action='store_true', help='Skips spotbugs linting')\n+    parser.add_argument('--skip-revapi', '--sr', action='store_true', help='Skips revapi linting')\n+    parser.add_argument('--debug', '--d', action='store_true', help='Runs the script with debug logging')\n+    args = parser.parse_args()\n+\n+    if args.artifacts == None and args.poms == None:\n+        raise ValueError('--artifacts/--a or --poms/--p must be passed.')\n+\n+    debug = args.debug\n+\n+    buildArtifacts = []\n+    if args.poms != None:\n+        for pom in args.poms.split(','):\n+            getArtifactsFromPOM(os.path.abspath(pom), buildArtifacts, debug)\n+\n+    if args.artifacts != None:\n+        buildArtifacts.extend(args.artifacts.split(','))\n+\n+    skipArguments = []\n+    if args.skip_tests:\n+        skipArguments.append('-DskipTests')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "509cc97c5b0ff434b4e4a906e66174f2b836986b"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDU0NzMxOnYy", "diffSide": "RIGHT", "path": "eng/precommit_local_build.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjo0NDo0MFrOHtsZKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMzowMToxN1rOHtszMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY3NTMwNA==", "bodyText": "Will this also close the file handle? Should this be wrapped in with block?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17180#discussion_r517675304", "createdAt": "2020-11-04T22:44:40Z", "author": {"login": "srnagar"}, "path": "eng/precommit_local_build.py", "diffHunk": "@@ -0,0 +1,99 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+# Python version 3.4 or higher is required to run this script.\n+\n+# Use case: Runs compilation, testing, and linting for the passed artifacts and POM artifacts.\n+#\n+# The artifacts must exist in the module list of pom.xml in the root of azure-sdk-for-java. Artifacts may be passed in two ways:\n+#\n+# 1. Comma separated list of relative POM paths.\n+# 2. Comma separated list of groupId:artifactId identifiers.\n+#\n+# The script must be run at the root of azure-sdk-for-java.\n+\n+import argparse\n+import os\n+import xml.etree.ElementTree as ET\n+\n+baseCommand = 'mvn clean install -f pom.xml -pl \"{}\" -am {}'\n+xmlNamespace = '{http://maven.apache.org/POM/4.0.0}'\n+\n+def getArtifactsFromPOM(pomPath: str, artifacts: list, debug: bool):\n+    if not os.path.exists(pomPath):\n+        if debug:\n+            print(\"POM {} doesn't exist, skipping\".format(pomPath))\n+        return\n+\n+    tree = ET.parse(pomPath)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "509cc97c5b0ff434b4e4a906e66174f2b836986b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY4MTk2OQ==", "bodyText": "Tried using this with with and it raised a parsing error, I don't think it supports it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17180#discussion_r517681969", "createdAt": "2020-11-04T23:01:17Z", "author": {"login": "alzimmermsft"}, "path": "eng/precommit_local_build.py", "diffHunk": "@@ -0,0 +1,99 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+# Python version 3.4 or higher is required to run this script.\n+\n+# Use case: Runs compilation, testing, and linting for the passed artifacts and POM artifacts.\n+#\n+# The artifacts must exist in the module list of pom.xml in the root of azure-sdk-for-java. Artifacts may be passed in two ways:\n+#\n+# 1. Comma separated list of relative POM paths.\n+# 2. Comma separated list of groupId:artifactId identifiers.\n+#\n+# The script must be run at the root of azure-sdk-for-java.\n+\n+import argparse\n+import os\n+import xml.etree.ElementTree as ET\n+\n+baseCommand = 'mvn clean install -f pom.xml -pl \"{}\" -am {}'\n+xmlNamespace = '{http://maven.apache.org/POM/4.0.0}'\n+\n+def getArtifactsFromPOM(pomPath: str, artifacts: list, debug: bool):\n+    if not os.path.exists(pomPath):\n+        if debug:\n+            print(\"POM {} doesn't exist, skipping\".format(pomPath))\n+        return\n+\n+    tree = ET.parse(pomPath)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY3NTMwNA=="}, "originalCommit": {"oid": "509cc97c5b0ff434b4e4a906e66174f2b836986b"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3004, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}