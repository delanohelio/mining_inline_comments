{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4NjU2ODMy", "number": 9111, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDozMDoyM1rODofZ9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTowMzo1NlrODo8BWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzg0MTgwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDozMDoyM1rOF3EqOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDo0ODowMlrOF3y3cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5MjM0Ng==", "bodyText": "@David-Noble-at-work  please review the RNTBD changes.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r393292346", "createdAt": "2020-03-16T20:30:23Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "diffHunk": "@@ -151,7 +152,7 @@ public String toString() {\n     }\n \n     private static Tag tag(long id) {\n-        return Tag.of(TAG_NAME, Strings.padStart(Long.toHexString(id).toUpperCase(), 4, '0'));\n+        return Tag.of(TAG_NAME, Strings.padStart(Long.toHexString(id).toUpperCase(Locale.ROOT), 4, '0'));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0OTM5NQ==", "bodyText": "LGTM", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394049395", "createdAt": "2020-03-18T00:48:02Z", "author": {"login": "David-Noble-at-work"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "diffHunk": "@@ -151,7 +152,7 @@ public String toString() {\n     }\n \n     private static Tag tag(long id) {\n-        return Tag.of(TAG_NAME, Strings.padStart(Long.toHexString(id).toUpperCase(), 4, '0'));\n+        return Tag.of(TAG_NAME, Strings.padStart(Long.toHexString(id).toUpperCase(Locale.ROOT), 4, '0'));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5MjM0Ng=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzg1NDI1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DocumentQueryExecutionContextBase.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDozNTowNFrOF3EyOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDowMTo1NFrOF3yLGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5NDM5NQ==", "bodyText": "anyhow. even if that's the case, why removing the additional sanity check is required?\nDoes Spotbug enforce this?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r393294395", "createdAt": "2020-03-16T20:35:04Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DocumentQueryExecutionContextBase.java", "diffHunk": "@@ -215,7 +215,9 @@ private RxDocumentServiceRequest createQueryDocumentServiceRequest(Map<String, S\n         switch (this.client.getQueryCompatibilityMode()) {\n         case SqlQuery:\n             SqlParameterList params = querySpec.getParameters();\n-            Utils.checkStateOrThrow(params != null && params.size() > 0, \"query.parameters\",\n+            // SqlQuerySpec::getParameters is guaranteed to return non-null SqlParameterList list\n+            // hence no null check for params is necessary.\n+            Utils.checkStateOrThrow(params.size() > 0, \"query.parameters\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMjgzNQ==", "bodyText": "yes, it was imposed by spotbug. The spotbug resolved that the following method never return a null, looking at the logic it seems true.\npublic SqlParameterList getParameters() {\n    if (this.parameters == null) {\n        Collection<SqlParameter> sqlParameters = super.getCollection(\"parameters\", SqlParameter.class);\n        if (sqlParameters == null) {\n            sqlParameters = new ArrayList<SqlParameter>();\n        }\n\n        this.parameters = new SqlParameterList(sqlParameters);\n    }\n\n    return this.parameters;\n}", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394002835", "createdAt": "2020-03-17T22:18:33Z", "author": {"login": "anuchandy"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DocumentQueryExecutionContextBase.java", "diffHunk": "@@ -215,7 +215,9 @@ private RxDocumentServiceRequest createQueryDocumentServiceRequest(Map<String, S\n         switch (this.client.getQueryCompatibilityMode()) {\n         case SqlQuery:\n             SqlParameterList params = querySpec.getParameters();\n-            Utils.checkStateOrThrow(params != null && params.size() > 0, \"query.parameters\",\n+            // SqlQuerySpec::getParameters is guaranteed to return non-null SqlParameterList list\n+            // hence no null check for params is necessary.\n+            Utils.checkStateOrThrow(params.size() > 0, \"query.parameters\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5NDM5NQ=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzODA0MA==", "bodyText": "ok thanks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394038040", "createdAt": "2020-03-18T00:01:54Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DocumentQueryExecutionContextBase.java", "diffHunk": "@@ -215,7 +215,9 @@ private RxDocumentServiceRequest createQueryDocumentServiceRequest(Map<String, S\n         switch (this.client.getQueryCompatibilityMode()) {\n         case SqlQuery:\n             SqlParameterList params = querySpec.getParameters();\n-            Utils.checkStateOrThrow(params != null && params.size() > 0, \"query.parameters\",\n+            // SqlQuerySpec::getParameters is guaranteed to return non-null SqlParameterList list\n+            // hence no null check for params is necessary.\n+            Utils.checkStateOrThrow(params.size() > 0, \"query.parameters\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5NDM5NQ=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzg1OTMyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/metrics/QueryMetricsTextWriter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDozNjozOFrOF3E1NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDozNjozOFrOF3E1NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5NTE1Ng==", "bodyText": "@mbhaskar  please review the query component.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r393295156", "createdAt": "2020-03-16T20:36:38Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/metrics/QueryMetricsTextWriter.java", "diffHunk": "@@ -21,101 +21,103 @@\n \n     // QueryMetrics\n     private static final String ActivityIds = \"Activity Ids\";\n-    private static final String RetrievedDocumentCount = \"Retrieved Document Count\";\n-    private static final String RetrievedDocumentSize = \"Retrieved Document Size\";\n-    private static final String OutputDocumentCount = \"Output Document Count\";\n-    private static final String OutputDocumentSize = \"Output Document Size\";\n-    private static final String IndexUtilizationText = \"Index Utilization\";\n-    private static final String TotalQueryExecutionTime = \"Total Query Execution Time\";\n+    private static final String RETRIEVED_DOCUMENT_COUNT = \"Retrieved Document Count\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzg4MDEwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/JsonSerializable.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDo0MzozNVrOF3FCbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMToyMjoxM1rOF3zWaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5ODU0Mw==", "bodyText": "bug: I don't think you need Nullable from this lib.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r393298543", "createdAt": "2020-03-16T20:43:35Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/JsonSerializable.java", "diffHunk": "@@ -17,6 +17,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import io.micrometer.core.lang.Nullable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyNjMwMQ==", "bodyText": "@moderakh  - Though everywhere in the code, we have this annotation (from micrometer). But I agree, we should replace this with @reactor.util.annotation.Nullable as there is no need to depend on micrometer for Nullable annotation", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r393826301", "createdAt": "2020-03-17T16:53:26Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/JsonSerializable.java", "diffHunk": "@@ -17,6 +17,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import io.micrometer.core.lang.Nullable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5ODU0Mw=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwNDYyMQ==", "bodyText": "yes, we can use micrometer or reactor, both have same effect. Or better, we could use javax.annotation.Nonnull, (which is used by micrometer or reactor Nullable annotations).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394004621", "createdAt": "2020-03-17T22:23:02Z", "author": {"login": "anuchandy"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/JsonSerializable.java", "diffHunk": "@@ -17,6 +17,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import io.micrometer.core.lang.Nullable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5ODU0Mw=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNDA4OQ==", "bodyText": "My concern with javax.annotation.Nonnull  -> I recently tested our SDK with Java 11 and this was giving issues as there is no module for javax, so I had to change them to reactor Nullable annotation.\nThough java 11 is far in the future, but something worth considering.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394034089", "createdAt": "2020-03-17T23:47:27Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/JsonSerializable.java", "diffHunk": "@@ -17,6 +17,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import io.micrometer.core.lang.Nullable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5ODU0Mw=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzOTkyMQ==", "bodyText": "thanks, Kushagra for sharing this, sounds good, will use Reactor NonNull", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394039921", "createdAt": "2020-03-18T00:09:39Z", "author": {"login": "anuchandy"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/JsonSerializable.java", "diffHunk": "@@ -17,6 +17,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import io.micrometer.core.lang.Nullable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5ODU0Mw=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1NzMyMA==", "bodyText": "done in the lastest commit.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394057320", "createdAt": "2020-03-18T01:22:13Z", "author": {"login": "anuchandy"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/JsonSerializable.java", "diffHunk": "@@ -17,6 +17,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import io.micrometer.core.lang.Nullable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5ODU0Mw=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzkwNTgzOnYy", "diffSide": "LEFT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDo1MDo0M1rOF3FSrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMToyMjowM1rOF3zWRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwMjcwMQ==", "bodyText": "@mbhaskar isn't this method needed in future?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r393302701", "createdAt": "2020-03-16T20:50:43Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -2829,41 +2824,6 @@ private RxDocumentServiceRequest getPermissionRequest(String userLink, Permissio\n                 Utils.joinPath(Paths.OFFERS_PATH_SEGMENT, null));\n     }\n \n-    private <T extends Resource> Flux<FeedResponse<T>> readFeedCollectionChild(FeedOptions options, ResourceType resourceType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyNTkxNw==", "bodyText": "If required, can we please comment it out, instead of removing it ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394025917", "createdAt": "2020-03-17T23:21:30Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -2829,41 +2824,6 @@ private RxDocumentServiceRequest getPermissionRequest(String userLink, Permissio\n                 Utils.joinPath(Paths.OFFERS_PATH_SEGMENT, null));\n     }\n \n-    private <T extends Resource> Flux<FeedResponse<T>> readFeedCollectionChild(FeedOptions options, ResourceType resourceType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwMjcwMQ=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyODk5OA==", "bodyText": "Yes, this is useful when we want to get back readFeed instead of query(*). Can we please have leave this method here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394028998", "createdAt": "2020-03-17T23:32:10Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -2829,41 +2824,6 @@ private RxDocumentServiceRequest getPermissionRequest(String userLink, Permissio\n                 Utils.joinPath(Paths.OFFERS_PATH_SEGMENT, null));\n     }\n \n-    private <T extends Resource> Flux<FeedResponse<T>> readFeedCollectionChild(FeedOptions options, ResourceType resourceType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwMjcwMQ=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MDI3Ng==", "bodyText": "Ok will comment out", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394040276", "createdAt": "2020-03-18T00:11:10Z", "author": {"login": "anuchandy"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -2829,41 +2824,6 @@ private RxDocumentServiceRequest getPermissionRequest(String userLink, Permissio\n                 Utils.joinPath(Paths.OFFERS_PATH_SEGMENT, null));\n     }\n \n-    private <T extends Resource> Flux<FeedResponse<T>> readFeedCollectionChild(FeedOptions options, ResourceType resourceType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwMjcwMQ=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1NzI4Ng==", "bodyText": "done in the lastest commit.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394057286", "createdAt": "2020-03-18T01:22:03Z", "author": {"login": "anuchandy"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -2829,41 +2824,6 @@ private RxDocumentServiceRequest getPermissionRequest(String userLink, Permissio\n                 Utils.joinPath(Paths.OFFERS_PATH_SEGMENT, null));\n     }\n \n-    private <T extends Resource> Flux<FeedResponse<T>> readFeedCollectionChild(FeedOptions options, ResourceType resourceType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwMjcwMQ=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzkxMTE3OnYy", "diffSide": "LEFT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/LeaseStoreManagerImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDo1MjowOVrOF3FVsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDo1ODowMlrOF3zAjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwMzQ3NQ==", "bodyText": "@milismsft to review change feed related change.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r393303475", "createdAt": "2020-03-16T20:52:09Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/LeaseStoreManagerImpl.java", "diffHunk": "@@ -136,14 +136,6 @@ public LeaseStoreManagerBuilderDefinition hostName(String hostName) {\n             this.settings.getLeaseCollectionLink(),\n             this.requestOptionsFactory);\n \n-        if (this.settings.getLeaseCollectionLink() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNjg0Nw==", "bodyText": "I don't believe removing this is correct; we do not want a null pointer exception but an illegal argument exception if the lease container is not specified during the build.\nWhat does spotbugs say that we needed this fixed?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394036847", "createdAt": "2020-03-17T23:57:13Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/LeaseStoreManagerImpl.java", "diffHunk": "@@ -136,14 +136,6 @@ public LeaseStoreManagerBuilderDefinition hostName(String hostName) {\n             this.settings.getLeaseCollectionLink(),\n             this.requestOptionsFactory);\n \n-        if (this.settings.getLeaseCollectionLink() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwMzQ3NQ=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzODY3MA==", "bodyText": "Just sync'ed with Kushagra, I guess since the check is already done above and that requestOptionFactory is always created, it's ok to remove the lines below", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394038670", "createdAt": "2020-03-18T00:04:29Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/LeaseStoreManagerImpl.java", "diffHunk": "@@ -136,14 +136,6 @@ public LeaseStoreManagerBuilderDefinition hostName(String hostName) {\n             this.settings.getLeaseCollectionLink(),\n             this.requestOptionsFactory);\n \n-        if (this.settings.getLeaseCollectionLink() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwMzQ3NQ=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1MTcyNQ==", "bodyText": "As mentioned @milismsft this is just a duplicate condition, which is already present 10-15 lines above this code piece .. so removing it :)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394051725", "createdAt": "2020-03-18T00:58:02Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/LeaseStoreManagerImpl.java", "diffHunk": "@@ -136,14 +136,6 @@ public LeaseStoreManagerBuilderDefinition hostName(String hostName) {\n             this.settings.getLeaseCollectionLink(),\n             this.requestOptionsFactory);\n \n-        if (this.settings.getLeaseCollectionLink() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwMzQ3NQ=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzkzMTU0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDo1ODoyMlrOF3FiYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzo0MToxMFrOF4QETA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwNjcyMw==", "bodyText": "@simplynaveen20 to review request diagnostics changes.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r393306723", "createdAt": "2020-03-16T20:58:22Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java", "diffHunk": "@@ -127,15 +128,17 @@ void recordGatewayResponse(\n                 this.requestEndTime = responseTime;\n             }\n \n-            if (rxDocumentServiceRequest != null \n-                    && rxDocumentServiceRequest.requestContext != null \n+            if (rxDocumentServiceRequest != null\n+                    && rxDocumentServiceRequest.requestContext != null\n                     && rxDocumentServiceRequest.requestContext.retryContext != null) {\n                 rxDocumentServiceRequest.requestContext.retryContext.retryEndTime = ZonedDateTime.now(ZoneOffset.UTC);\n                 this.retryContext = new RetryContext(rxDocumentServiceRequest.requestContext.retryContext);\n             }\n \n             this.gatewayStatistics = new GatewayStatistics();\n-            this.gatewayStatistics.operationType = rxDocumentServiceRequest.getOperationType();\n+            if (rxDocumentServiceRequest != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUyNzgyMA==", "bodyText": "done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394527820", "createdAt": "2020-03-18T17:41:10Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java", "diffHunk": "@@ -127,15 +128,17 @@ void recordGatewayResponse(\n                 this.requestEndTime = responseTime;\n             }\n \n-            if (rxDocumentServiceRequest != null \n-                    && rxDocumentServiceRequest.requestContext != null \n+            if (rxDocumentServiceRequest != null\n+                    && rxDocumentServiceRequest.requestContext != null\n                     && rxDocumentServiceRequest.requestContext.retryContext != null) {\n                 rxDocumentServiceRequest.requestContext.retryContext.retryEndTime = ZonedDateTime.now(ZoneOffset.UTC);\n                 this.retryContext = new RetryContext(rxDocumentServiceRequest.requestContext.retryContext);\n             }\n \n             this.gatewayStatistics = new GatewayStatistics();\n-            this.gatewayStatistics.operationType = rxDocumentServiceRequest.getOperationType();\n+            if (rxDocumentServiceRequest != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwNjcyMw=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjE4NDU5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionContainer.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjowODoyNlrOF3vyCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMToyMTo0N1rOF3zWCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5ODg1OQ==", "bodyText": "why are we making these changes? removing these sanity checks makes me a bit uncomfortable.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r393998859", "createdAt": "2020-03-17T22:08:26Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionContainer.java", "diffHunk": "@@ -223,7 +224,7 @@ private void setSessionToken(ResourceId resourceId, String collectionName, Strin\n         if (!isKnownCollection) {\n             this.writeLock.lock();\n             try {\n-                if (collectionName != null && resourceId.getUniqueDocumentCollectionId() != 0) {\n+                if (resourceId.getUniqueDocumentCollectionId() != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwNjQ2OQ==", "bodyText": "Had collectionName is null then there will be a failure even before we reach the line 227.\nBelow code has this this.collectionNameToCollectionResourceId.containsKey(collectionName)  which expect collectionName to be not-null, otherwise it is NPE here it self.\ntry {\n    isKnownCollection = this.collectionNameToCollectionResourceId.containsKey(collectionName) &&\n            this.collectionResourceIdToCollectionName.containsKey(resourceId.getUniqueDocumentCollectionId()) &&\n            this.collectionNameToCollectionResourceId.get(collectionName) == resourceId.getUniqueDocumentCollectionId() &&\n            this.collectionResourceIdToCollectionName.get(resourceId.getUniqueDocumentCollectionId()).equals(collectionName);\n    if (isKnownCollection) {\n        this.addSessionToken(resourceId, partitionKeyRangeId, parsedSessionToken);\n    }\n} finally {\n    this.readLock.unlock();\n}\n\nif (!isKnownCollection) {\n    this.writeLock.lock();\n    try {\n        if (resourceId.getUniqueDocumentCollectionId() != 0) {\n            this.collectionNameToCollectionResourceId.compute(collectionName, (k, v) -> resourceId.getUniqueDocumentCollectionId());\n            this.collectionResourceIdToCollectionName.compute(resourceId.getUniqueDocumentCollectionId(), (k, v) -> collectionName);\n        }\n        addSessionToken(resourceId, partitionKeyRangeId, parsedSessionToken);\n    } finally {\n        this.writeLock.unlock();\n    }\n}", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394006469", "createdAt": "2020-03-17T22:27:44Z", "author": {"login": "anuchandy"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionContainer.java", "diffHunk": "@@ -223,7 +224,7 @@ private void setSessionToken(ResourceId resourceId, String collectionName, Strin\n         if (!isKnownCollection) {\n             this.writeLock.lock();\n             try {\n-                if (collectionName != null && resourceId.getUniqueDocumentCollectionId() != 0) {\n+                if (resourceId.getUniqueDocumentCollectionId() != 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5ODg1OQ=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAxMjE3OQ==", "bodyText": "it seems the entire method expects a non-null collectionName, how about we add a guard null-check in this [Objects.requireNonNull(collectionName)] method?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394012179", "createdAt": "2020-03-17T22:40:28Z", "author": {"login": "anuchandy"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionContainer.java", "diffHunk": "@@ -223,7 +224,7 @@ private void setSessionToken(ResourceId resourceId, String collectionName, Strin\n         if (!isKnownCollection) {\n             this.writeLock.lock();\n             try {\n-                if (collectionName != null && resourceId.getUniqueDocumentCollectionId() != 0) {\n+                if (resourceId.getUniqueDocumentCollectionId() != 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5ODg1OQ=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzMDc5OA==", "bodyText": "Yes, that would be great. Let's add that.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394030798", "createdAt": "2020-03-17T23:38:15Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionContainer.java", "diffHunk": "@@ -223,7 +224,7 @@ private void setSessionToken(ResourceId resourceId, String collectionName, Strin\n         if (!isKnownCollection) {\n             this.writeLock.lock();\n             try {\n-                if (collectionName != null && resourceId.getUniqueDocumentCollectionId() != 0) {\n+                if (resourceId.getUniqueDocumentCollectionId() != 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5ODg1OQ=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNDQ0Ng==", "bodyText": "@anuchandy can we roll back the change on SessionContainer and add a spotbug override on this one?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394034446", "createdAt": "2020-03-17T23:48:44Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionContainer.java", "diffHunk": "@@ -223,7 +224,7 @@ private void setSessionToken(ResourceId resourceId, String collectionName, Strin\n         if (!isKnownCollection) {\n             this.writeLock.lock();\n             try {\n-                if (collectionName != null && resourceId.getUniqueDocumentCollectionId() != 0) {\n+                if (resourceId.getUniqueDocumentCollectionId() != 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5ODg1OQ=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MDQ1MQ==", "bodyText": "Ok, I will rollback this change + add supression", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394040451", "createdAt": "2020-03-18T00:11:52Z", "author": {"login": "anuchandy"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionContainer.java", "diffHunk": "@@ -223,7 +224,7 @@ private void setSessionToken(ResourceId resourceId, String collectionName, Strin\n         if (!isKnownCollection) {\n             this.writeLock.lock();\n             try {\n-                if (collectionName != null && resourceId.getUniqueDocumentCollectionId() != 0) {\n+                if (resourceId.getUniqueDocumentCollectionId() != 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5ODg1OQ=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1NzIyNA==", "bodyText": "done in the lastest commit.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394057224", "createdAt": "2020-03-18T01:21:47Z", "author": {"login": "anuchandy"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionContainer.java", "diffHunk": "@@ -223,7 +224,7 @@ private void setSessionToken(ResourceId resourceId, String collectionName, Strin\n         if (!isKnownCollection) {\n             this.writeLock.lock();\n             try {\n-                if (collectionName != null && resourceId.getUniqueDocumentCollectionId() != 0) {\n+                if (resourceId.getUniqueDocumentCollectionId() != 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5ODg1OQ=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjM1NDE0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ResourceId.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzoyMDo1NlrOF3xa2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzoyMDo1NlrOF3xa2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyNTY5MA==", "bodyText": "This change is a bit concerning to me. I will verify if equals is being called anywhere for ResourceId.\n@moderakh  - do you know any of the places where we do so ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394025690", "createdAt": "2020-03-17T23:20:56Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ResourceId.java", "diffHunk": "@@ -508,6 +507,29 @@ public boolean equals(ResourceId other) {\n         return Arrays.equals(this.getValue(), other.getValue());\n     }\n \n+    @Override\n+    public boolean equals(Object object) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjM2NzcxOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/PartitionKeyMismatchRetryPolicy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzoyODowMVrOF3xjKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzoyODowMVrOF3xjKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyNzgxOQ==", "bodyText": "Good one. Thankyou", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394027819", "createdAt": "2020-03-17T23:28:01Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/PartitionKeyMismatchRetryPolicy.java", "diffHunk": "@@ -41,11 +41,11 @@ public PartitionKeyMismatchRetryPolicy(\n \n         // TODO: this should be retrievable from document client exception.\n         collectionLink = Utils.getCollectionName(resourceFullName);\n-        this.options = options;\n+        this.options = requestOptions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjM4MzI3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentServiceRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzozNjoyNVrOF3xspA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDo1NTozNlrOF3y-RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzMDI0NA==", "bodyText": "I know we have a clone() method in this class, but usually its not recommended to use clone() and Cloneable interface, as it is flawed.\nhttps://stackoverflow.com/a/11654256\nI doubt if we are actually calling this clone method, worth checking and removing it if not being called.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394030244", "createdAt": "2020-03-17T23:36:25Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentServiceRequest.java", "diffHunk": "@@ -24,7 +24,7 @@\n /**\n  * This is core Transport/Connection agnostic request to the Azure Cosmos DB database service.\n  */\n-public class RxDocumentServiceRequest {\n+public class RxDocumentServiceRequest implements Cloneable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1MTE0MQ==", "bodyText": "it seems we're using it here \n  \n    \n      azure-sdk-for-java/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/ReplicatedResourceClient.java\n    \n    \n         Line 126\n      in\n      12acd7a\n    \n    \n    \n    \n\n        \n          \n           RxDocumentServiceRequest freshRequest = request.clone();", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394051141", "createdAt": "2020-03-18T00:55:36Z", "author": {"login": "anuchandy"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentServiceRequest.java", "diffHunk": "@@ -24,7 +24,7 @@\n /**\n  * This is core Transport/Connection agnostic request to the Azure Cosmos DB database service.\n  */\n-public class RxDocumentServiceRequest {\n+public class RxDocumentServiceRequest implements Cloneable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzMDI0NA=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjQwMDMwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GoneAndRetryWithRetryPolicy.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzo0Mjo0MlrOF3x2hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMToyMToyMlrOF3zVrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzMjc3Mg==", "bodyText": "True that, why don't we get this null check out of the way ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394032772", "createdAt": "2020-03-17T23:42:42Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GoneAndRetryWithRetryPolicy.java", "diffHunk": "@@ -154,6 +154,8 @@ public GoneAndRetryWithRetryPolicy(RxDocumentServiceRequest request, Integer wai\n                         .error(BridgeInternal.createCosmosClientException(HttpConstants.StatusCodes.SERVICE_UNAVAILABLE, exception)));\n             }\n \n+            // Note: we access request above without any null check then another null check here doesn't make sense.\n+            // @kushagraThapar/@moderakh/@mbhaskar\n             if (this.request != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNzQyMQ==", "bodyText": "this.request is not accessed in all if/else branches. is it?\n@kushagraThapar @anuchandy\ncan we do no-op for now and discuss this outside of scope of this PR?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394037421", "createdAt": "2020-03-17T23:59:23Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GoneAndRetryWithRetryPolicy.java", "diffHunk": "@@ -154,6 +154,8 @@ public GoneAndRetryWithRetryPolicy(RxDocumentServiceRequest request, Integer wai\n                         .error(BridgeInternal.createCosmosClientException(HttpConstants.StatusCodes.SERVICE_UNAVAILABLE, exception)));\n             }\n \n+            // Note: we access request above without any null check then another null check here doesn't make sense.\n+            // @kushagraThapar/@moderakh/@mbhaskar\n             if (this.request != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzMjc3Mg=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1NzEzMw==", "bodyText": "sounds good, reverted.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394057133", "createdAt": "2020-03-18T01:21:22Z", "author": {"login": "anuchandy"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GoneAndRetryWithRetryPolicy.java", "diffHunk": "@@ -154,6 +154,8 @@ public GoneAndRetryWithRetryPolicy(RxDocumentServiceRequest request, Integer wai\n                         .error(BridgeInternal.createCosmosClientException(HttpConstants.StatusCodes.SERVICE_UNAVAILABLE, exception)));\n             }\n \n+            // Note: we access request above without any null check then another null check here doesn't make sense.\n+            // @kushagraThapar/@moderakh/@mbhaskar\n             if (this.request != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzMjc3Mg=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjQwNjQ4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosPermissionProperties.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzo0NjoxMVrOF3x6RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMToyMTowMVrOF3zVbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzMzczMg==", "bodyText": "I believe this is an unused import, if so, please get rid of it :)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394033732", "createdAt": "2020-03-17T23:46:11Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosPermissionProperties.java", "diffHunk": "@@ -6,7 +6,9 @@\n import com.azure.cosmos.implementation.Constants;\n import org.apache.commons.lang3.StringUtils;\n \n+import java.nio.charset.StandardCharsets;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1NzA3MA==", "bodyText": "removed in the lastest commit.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394057070", "createdAt": "2020-03-18T01:21:01Z", "author": {"login": "anuchandy"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosPermissionProperties.java", "diffHunk": "@@ -6,7 +6,9 @@\n import com.azure.cosmos.implementation.Constants;\n import org.apache.commons.lang3.StringUtils;\n \n+import java.nio.charset.StandardCharsets;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzMzczMg=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjQyNzA5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ParallelDocumentQueryExecutionContextBase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzo1ODowMVrOF3yHPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMToyMDoyN1rOF3zU3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNzA1NQ==", "bodyText": "Can we name this querySpec instead as query and querySpec are different.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394037055", "createdAt": "2020-03-17T23:58:01Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ParallelDocumentQueryExecutionContextBase.java", "diffHunk": "@@ -158,20 +160,21 @@ protected void initializeReadMany(\n         String collectionRid) {\n         Map<String, String> commonRequestHeaders = createCommonHeadersAsync(this.getFeedOptions(null, null));\n \n-        for (PartitionKeyRange targetRange : rangeQueryMap.keySet()) {\n+        for (Map.Entry<PartitionKeyRange, SqlQuerySpec> entry : rangeQueryMap.entrySet()) {\n+            final PartitionKeyRange targetRange = entry.getKey();\n+            final SqlQuerySpec query = entry.getValue();\n             TriFunction<PartitionKeyRange, String, Integer, RxDocumentServiceRequest> createRequestFunc = (\n                 partitionKeyRange,\n                 continuationToken, pageSize) -> {\n                 Map<String, String> headers = new HashMap<>(commonRequestHeaders);\n                 headers.put(HttpConstants.HttpHeaders.CONTINUATION, continuationToken);\n                 headers.put(HttpConstants.HttpHeaders.PAGE_SIZE, Strings.toString(pageSize));\n \n-                PartitionKeyInternal partitionKeyInternal = null;\n                 return this.createDocumentServiceRequest(headers,\n-                                                         rangeQueryMap.get(targetRange),\n-                                                         partitionKeyInternal,\n-                                                         partitionKeyRange,\n-                                                         collectionRid);\n+                    query,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1NjkyNg==", "bodyText": "addressed in the lastest commit.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394056926", "createdAt": "2020-03-18T01:20:27Z", "author": {"login": "anuchandy"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ParallelDocumentQueryExecutionContextBase.java", "diffHunk": "@@ -158,20 +160,21 @@ protected void initializeReadMany(\n         String collectionRid) {\n         Map<String, String> commonRequestHeaders = createCommonHeadersAsync(this.getFeedOptions(null, null));\n \n-        for (PartitionKeyRange targetRange : rangeQueryMap.keySet()) {\n+        for (Map.Entry<PartitionKeyRange, SqlQuerySpec> entry : rangeQueryMap.entrySet()) {\n+            final PartitionKeyRange targetRange = entry.getKey();\n+            final SqlQuerySpec query = entry.getValue();\n             TriFunction<PartitionKeyRange, String, Integer, RxDocumentServiceRequest> createRequestFunc = (\n                 partitionKeyRange,\n                 continuationToken, pageSize) -> {\n                 Map<String, String> headers = new HashMap<>(commonRequestHeaders);\n                 headers.put(HttpConstants.HttpHeaders.CONTINUATION, continuationToken);\n                 headers.put(HttpConstants.HttpHeaders.PAGE_SIZE, Strings.toString(pageSize));\n \n-                PartitionKeyInternal partitionKeyInternal = null;\n                 return this.createDocumentServiceRequest(headers,\n-                                                         rangeQueryMap.get(targetRange),\n-                                                         partitionKeyInternal,\n-                                                         partitionKeyRange,\n-                                                         collectionRid);\n+                    query,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNzA1NQ=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjQyOTMxOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ParallelDocumentQueryExecutionContextBase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzo1OToyMVrOF3yIqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMToyMDoyMlrOF3zUsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNzQxNw==", "bodyText": "this one too. query->querySpec", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394037417", "createdAt": "2020-03-17T23:59:21Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ParallelDocumentQueryExecutionContextBase.java", "diffHunk": "@@ -181,7 +184,7 @@ protected void initializeReadMany(\n             // TODO: Review pagesize -1\n             DocumentProducer<T> dp = createDocumentProducer(collectionRid, targetRange,\n                                                             null, -1, feedOptions,\n-                                                            rangeQueryMap.get(targetRange),\n+                                                            query,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1Njg4MQ==", "bodyText": "addressed in the lastest commit.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394056881", "createdAt": "2020-03-18T01:20:22Z", "author": {"login": "anuchandy"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ParallelDocumentQueryExecutionContextBase.java", "diffHunk": "@@ -181,7 +184,7 @@ protected void initializeReadMany(\n             // TODO: Review pagesize -1\n             DocumentProducer<T> dp = createDocumentProducer(collectionRid, targetRange,\n                                                             null, -1, feedOptions,\n-                                                            rangeQueryMap.get(targetRange),\n+                                                            query,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNzQxNw=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjQzNDA5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/metrics/QueryMetricsTextWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDowMjozMFrOF3yLnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMToyMDoxNFrOF3zUmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzODE3NQ==", "bodyText": "TotalExecutionTime->TOTAL_EXECUTION_TIME?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394038175", "createdAt": "2020-03-18T00:02:30Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/metrics/QueryMetricsTextWriter.java", "diffHunk": "@@ -21,101 +21,103 @@\n \n     // QueryMetrics\n     private static final String ActivityIds = \"Activity Ids\";\n-    private static final String RetrievedDocumentCount = \"Retrieved Document Count\";\n-    private static final String RetrievedDocumentSize = \"Retrieved Document Size\";\n-    private static final String OutputDocumentCount = \"Output Document Count\";\n-    private static final String OutputDocumentSize = \"Output Document Size\";\n-    private static final String IndexUtilizationText = \"Index Utilization\";\n-    private static final String TotalQueryExecutionTime = \"Total Query Execution Time\";\n+    private static final String RETRIEVED_DOCUMENT_COUNT = \"Retrieved Document Count\";\n+    private static final String RETRIEVED_DOCUMENT_SIZE = \"Retrieved Document Size\";\n+    private static final String OUTPUT_DOCUMENT_COUNT = \"Output Document Count\";\n+    private static final String OUTPUT_DOCUMENT_SIZE = \"Output Document Size\";\n+    private static final String INDEX_UTILIZATION_TEXT = \"Index Utilization\";\n+    private static final String TOTAL_QUERY_EXECUTION_TIME = \"Total Query Execution Time\";\n \n     // QueryPreparationTimes\n-    private static final String QueryPreparationTimes = \"Query Preparation Times\";\n-    private static final String QueryCompileTime = \"Query Compilation Time\";\n-    private static final String LogicalPlanBuildTime = \"Logical Plan Build Time\";\n-    private static final String PhysicalPlanBuildTime = \"Physical Plan Build Time\";\n-    private static final String QueryOptimizationTime = \"Query Optimization Time\";\n+    private static final String QUERY_PREPARATION_TIMES = \"Query Preparation Times\";\n+    private static final String QUERY_COMPILATION_TIME = \"Query Compilation Time\";\n+    private static final String LOGICAL_PLAN_BUILD_TIME = \"Logical Plan Build Time\";\n+    private static final String PHYSICAL_PLAN_BUILD_TIME = \"Physical Plan Build Time\";\n+    private static final String QUERY_OPTIMIZATION_TIME = \"Query Optimization Time\";\n \n     // QueryTimes\n-    private static final String QueryEngineTimes = \"Query Engine Times\";\n-    private static final String IndexLookupTime = \"Index Lookup Time\";\n-    private static final String DocumentLoadTime = \"Document Load Time\";\n-    private static final String DocumentWriteTime = \"Document Write Time\";\n+    private static final String QUERY_ENGINE_TIMES = \"Query Engine Times\";\n+    private static final String INDEX_LOOKUP_TIME = \"Index Lookup Time\";\n+    private static final String DOCUMENT_LOAD_TIME = \"Document Load Time\";\n+    private static final String DOCUMENT_WRITE_TIME = \"Document Write Time\";\n \n     // RuntimeExecutionTimes\n-    private static final String RuntimeExecutionTimes = \"Runtime Execution Times\";\n+    private static final String RUNTIME_EXECUTION_TIMES = \"Runtime Execution Times\";\n     private static final String TotalExecutionTime = \"Query Engine Execution Time\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1Njg1Nw==", "bodyText": "addressed in the lastest commit.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394056857", "createdAt": "2020-03-18T01:20:14Z", "author": {"login": "anuchandy"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/metrics/QueryMetricsTextWriter.java", "diffHunk": "@@ -21,101 +21,103 @@\n \n     // QueryMetrics\n     private static final String ActivityIds = \"Activity Ids\";\n-    private static final String RetrievedDocumentCount = \"Retrieved Document Count\";\n-    private static final String RetrievedDocumentSize = \"Retrieved Document Size\";\n-    private static final String OutputDocumentCount = \"Output Document Count\";\n-    private static final String OutputDocumentSize = \"Output Document Size\";\n-    private static final String IndexUtilizationText = \"Index Utilization\";\n-    private static final String TotalQueryExecutionTime = \"Total Query Execution Time\";\n+    private static final String RETRIEVED_DOCUMENT_COUNT = \"Retrieved Document Count\";\n+    private static final String RETRIEVED_DOCUMENT_SIZE = \"Retrieved Document Size\";\n+    private static final String OUTPUT_DOCUMENT_COUNT = \"Output Document Count\";\n+    private static final String OUTPUT_DOCUMENT_SIZE = \"Output Document Size\";\n+    private static final String INDEX_UTILIZATION_TEXT = \"Index Utilization\";\n+    private static final String TOTAL_QUERY_EXECUTION_TIME = \"Total Query Execution Time\";\n \n     // QueryPreparationTimes\n-    private static final String QueryPreparationTimes = \"Query Preparation Times\";\n-    private static final String QueryCompileTime = \"Query Compilation Time\";\n-    private static final String LogicalPlanBuildTime = \"Logical Plan Build Time\";\n-    private static final String PhysicalPlanBuildTime = \"Physical Plan Build Time\";\n-    private static final String QueryOptimizationTime = \"Query Optimization Time\";\n+    private static final String QUERY_PREPARATION_TIMES = \"Query Preparation Times\";\n+    private static final String QUERY_COMPILATION_TIME = \"Query Compilation Time\";\n+    private static final String LOGICAL_PLAN_BUILD_TIME = \"Logical Plan Build Time\";\n+    private static final String PHYSICAL_PLAN_BUILD_TIME = \"Physical Plan Build Time\";\n+    private static final String QUERY_OPTIMIZATION_TIME = \"Query Optimization Time\";\n \n     // QueryTimes\n-    private static final String QueryEngineTimes = \"Query Engine Times\";\n-    private static final String IndexLookupTime = \"Index Lookup Time\";\n-    private static final String DocumentLoadTime = \"Document Load Time\";\n-    private static final String DocumentWriteTime = \"Document Write Time\";\n+    private static final String QUERY_ENGINE_TIMES = \"Query Engine Times\";\n+    private static final String INDEX_LOOKUP_TIME = \"Index Lookup Time\";\n+    private static final String DOCUMENT_LOAD_TIME = \"Document Load Time\";\n+    private static final String DOCUMENT_WRITE_TIME = \"Document Write Time\";\n \n     // RuntimeExecutionTimes\n-    private static final String RuntimeExecutionTimes = \"Runtime Execution Times\";\n+    private static final String RUNTIME_EXECUTION_TIMES = \"Runtime Execution Times\";\n     private static final String TotalExecutionTime = \"Query Engine Execution Time\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzODE3NQ=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjQ0MzY2OnYy", "diffSide": "LEFT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/MurmurHash3_128.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDowODo0M1rOF3yRjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMToyMDowOFrOF3zUhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzOTY5NA==", "bodyText": "MurMurHash is sort of a util class. Please donot delete these methods even though they are private as they might be useful in future to do some additional computations as required. Can we just comment those and leave there?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394039694", "createdAt": "2020-03-18T00:08:43Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/MurmurHash3_128.java", "diffHunk": "@@ -109,12 +109,6 @@ public static UInt128 hash128(byte[] bytes, int length, UInt128 seed) {\n         return new UInt128(h1, h2);\n     }\n \n-\n-    private static int rotateLeft32(int n, int numBits) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1NjgzOA==", "bodyText": "addressed in the lastest commit.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394056838", "createdAt": "2020-03-18T01:20:08Z", "author": {"login": "anuchandy"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/MurmurHash3_128.java", "diffHunk": "@@ -109,12 +109,6 @@ public static UInt128 hash128(byte[] bytes, int length, UInt128 seed) {\n         return new UInt128(h1, h2);\n     }\n \n-\n-    private static int rotateLeft32(int n, int numBits) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzOTY5NA=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjUwNzQ3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDo0OToxN1rOF3y4cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDo0OToxN1rOF3y4cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0OTY1MQ==", "bodyText": "LGTM", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394049651", "createdAt": "2020-03-18T00:49:17Z", "author": {"login": "David-Noble-at-work"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -643,6 +643,8 @@ public final void run() {\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjUyOTYyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/PartitionKeyInternal.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTowMzozNVrOF3zF1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTowMzozNVrOF3zF1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1MzA3OA==", "bodyText": "StdDeserializer already implements Serializable", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394053078", "createdAt": "2020-03-18T01:03:35Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/PartitionKeyInternal.java", "diffHunk": "@@ -296,7 +299,10 @@ private static void jsonEncodeLimit(JsonGenerator writer, String value) {\n     }\n \n     @SuppressWarnings(\"serial\")\n-    static final class PartitionKeyInternalJsonDeserializer extends StdDeserializer<PartitionKeyInternal> {\n+    static final class PartitionKeyInternalJsonDeserializer extends StdDeserializer<PartitionKeyInternal>\n+        implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjUzMDE2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/StoreResult.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTowMzo1NlrOF3zGKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzozNDo1NFrOF4P1kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1MzE2Mg==", "bodyText": "StdDeserializer already implements Serializable", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394053162", "createdAt": "2020-03-18T01:03:56Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/StoreResult.java", "diffHunk": "@@ -159,7 +160,9 @@ public String toString() {\n                 \", sessionToken: \" + (this.sessionToken != null ? this.sessionToken.convertToString() : null) +\n                 \", exception: \" + BridgeInternal.getInnerErrorMessage(this.exception);\n     }\n-    public static class StoreResultSerializer extends StdSerializer<StoreResult> {\n+    public static class StoreResultSerializer extends StdSerializer<StoreResult> implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1NjAwMA==", "bodyText": "that's right. But spotbug still want to inherited types to explicitly say it, not sure why so.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394056000", "createdAt": "2020-03-18T01:16:30Z", "author": {"login": "anuchandy"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/StoreResult.java", "diffHunk": "@@ -159,7 +160,9 @@ public String toString() {\n                 \", sessionToken: \" + (this.sessionToken != null ? this.sessionToken.convertToString() : null) +\n                 \", exception: \" + BridgeInternal.getInnerErrorMessage(this.exception);\n     }\n-    public static class StoreResultSerializer extends StdSerializer<StoreResult> {\n+    public static class StoreResultSerializer extends StdSerializer<StoreResult> implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1MzE2Mg=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxMjIzMQ==", "bodyText": "There are other places i saw StdDeserializer without extra implements , so i think only serializerId is needed and this can be remove , please give it a try", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394312231", "createdAt": "2020-03-18T12:34:12Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/StoreResult.java", "diffHunk": "@@ -159,7 +160,9 @@ public String toString() {\n                 \", sessionToken: \" + (this.sessionToken != null ? this.sessionToken.convertToString() : null) +\n                 \", exception: \" + BridgeInternal.getInnerErrorMessage(this.exception);\n     }\n-    public static class StoreResultSerializer extends StdSerializer<StoreResult> {\n+    public static class StoreResultSerializer extends StdSerializer<StoreResult> implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1MzE2Mg=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUyNDA1MA==", "bodyText": "@simplynaveen20 thank you, I double-checked, yes, only the serializationVersionId is required. I've updated the PR that removes extra implements.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394524050", "createdAt": "2020-03-18T17:34:54Z", "author": {"login": "anuchandy"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/StoreResult.java", "diffHunk": "@@ -159,7 +160,9 @@ public String toString() {\n                 \", sessionToken: \" + (this.sessionToken != null ? this.sessionToken.convertToString() : null) +\n                 \", exception: \" + BridgeInternal.getInnerErrorMessage(this.exception);\n     }\n-    public static class StoreResultSerializer extends StdSerializer<StoreResult> {\n+    public static class StoreResultSerializer extends StdSerializer<StoreResult> implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1MzE2Mg=="}, "originalCommit": {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 89, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}