{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyODU0MzAx", "number": 14390, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzo1NTo0NFrOEiOsDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODozMjo1M1rOEiPnpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzI3Njk0OnYy", "diffSide": "RIGHT", "path": "common/perf-test-core/src/main/java/com/azure/perf/test/core/TestDataCreationHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzo1NTo0NFrOHP_ZNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzo1NTo0NFrOHP_ZNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUyOTMzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Random random = new Random();\n          \n          \n            \n                    Random random = new Random(0);\n          \n      \n    \n    \n  \n\nI slightly prefer using a fixed random seed for repeatability.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14390#discussion_r486529334", "createdAt": "2020-09-10T17:55:44Z", "author": {"login": "mikeharder"}, "path": "common/perf-test-core/src/main/java/com/azure/perf/test/core/TestDataCreationHelper.java", "diffHunk": "@@ -3,30 +3,31 @@\n \n package com.azure.perf.test.core;\n \n-import java.io.ByteArrayInputStream;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.IOException;\n import java.io.InputStream;\n-import java.io.SequenceInputStream;\n+import java.io.OutputStream;\n import java.nio.ByteBuffer;\n-import java.util.Collections;\n-import java.util.List;\n import java.util.Random;\n-import reactor.core.publisher.Flux;\n \n /**\n  * Utility class to help with data creation for perf testing.\n  */\n public class TestDataCreationHelper {\n+    private static final int RANDOM_BYTES_LENGTH = 1024 * 1024; // 1MB\n     private static final byte[] RANDOM_BYTES;\n     private static final ByteBuffer RANDOM_BYTE_BUFFER;\n     private static final int SIZE = (1024 * 1024 * 1024) + 1;\n-    private static final byte[] RANDOM_STREAM_BYTES;\n \n     static {\n-        RANDOM_BYTES = new byte[1024 * 1024];\n-        (new Random(0)).nextBytes(TestDataCreationHelper.RANDOM_BYTES);\n+        Random random = new Random();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51efc2efd215685cb85bf0a781768b800328a8f0"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzI3OTQyOnYy", "diffSide": "RIGHT", "path": "common/perf-test-core/src/main/java/com/azure/perf/test/core/TestDataCreationHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzo1NjoxNlrOHP_anQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzo1NjoxNlrOHP_anQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUyOTY5Mw==", "bodyText": "Remove this commented code?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14390#discussion_r486529693", "createdAt": "2020-09-10T17:56:16Z", "author": {"login": "mikeharder"}, "path": "common/perf-test-core/src/main/java/com/azure/perf/test/core/TestDataCreationHelper.java", "diffHunk": "@@ -3,30 +3,31 @@\n \n package com.azure.perf.test.core;\n \n-import java.io.ByteArrayInputStream;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.IOException;\n import java.io.InputStream;\n-import java.io.SequenceInputStream;\n+import java.io.OutputStream;\n import java.nio.ByteBuffer;\n-import java.util.Collections;\n-import java.util.List;\n import java.util.Random;\n-import reactor.core.publisher.Flux;\n \n /**\n  * Utility class to help with data creation for perf testing.\n  */\n public class TestDataCreationHelper {\n+    private static final int RANDOM_BYTES_LENGTH = 1024 * 1024; // 1MB\n     private static final byte[] RANDOM_BYTES;\n     private static final ByteBuffer RANDOM_BYTE_BUFFER;\n     private static final int SIZE = (1024 * 1024 * 1024) + 1;\n-    private static final byte[] RANDOM_STREAM_BYTES;\n \n     static {\n-        RANDOM_BYTES = new byte[1024 * 1024];\n-        (new Random(0)).nextBytes(TestDataCreationHelper.RANDOM_BYTES);\n+        Random random = new Random();\n+        RANDOM_BYTES = new byte[RANDOM_BYTES_LENGTH];\n+        random.nextBytes(RANDOM_BYTES);\n         RANDOM_BYTE_BUFFER = ByteBuffer.wrap(TestDataCreationHelper.RANDOM_BYTES).asReadOnlyBuffer();\n-        RANDOM_STREAM_BYTES = new byte[SIZE];\n-        (new Random(0)).nextBytes(RANDOM_STREAM_BYTES);\n+\n+//        SIZE_BYTES = new byte[SIZE];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51efc2efd215685cb85bf0a781768b800328a8f0"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzI3OTk3OnYy", "diffSide": "RIGHT", "path": "common/perf-test-core/src/main/java/com/azure/perf/test/core/TestDataCreationHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzo1NjoyOFrOHP_a8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzo1NjoyOFrOHP_a8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUyOTc3OQ==", "bodyText": "Remove extra newline?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14390#discussion_r486529779", "createdAt": "2020-09-10T17:56:28Z", "author": {"login": "mikeharder"}, "path": "common/perf-test-core/src/main/java/com/azure/perf/test/core/TestDataCreationHelper.java", "diffHunk": "@@ -43,6 +44,7 @@\n         int quotient = (int) size / remaining;\n         int remainder = (int) size % remaining;\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51efc2efd215685cb85bf0a781768b800328a8f0"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzM0NDI2OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/blob/perf/DownloadBlobTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODoxNDoxNVrOHQADJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODoxNDoxNVrOHQADJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0MDA3MA==", "bodyText": "I think it would be better to make NullOutputStream a singleton, so all consumers can use the same instance instead of creating a new one.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14390#discussion_r486540070", "createdAt": "2020-09-10T18:14:15Z", "author": {"login": "mikeharder"}, "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/blob/perf/DownloadBlobTest.java", "diffHunk": "@@ -39,18 +42,31 @@ public void run() {\n \n     static class NullOutputStream extends OutputStream {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51efc2efd215685cb85bf0a781768b800328a8f0"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzM0ODgyOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/blob/perf/DownloadBlobTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODoxNToxMlrOHQAGNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODo0NDozMVrOHQBTZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0MDg1Mg==", "bodyText": "Looking at the docs  for this API, would it be better to use this which is simpler, more closely matches the doc sample, and also more closely matches the sync code?\nNullOutputStream.getInstance().write(b.array())", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14390#discussion_r486540852", "createdAt": "2020-09-10T18:15:12Z", "author": {"login": "mikeharder"}, "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/blob/perf/DownloadBlobTest.java", "diffHunk": "@@ -39,18 +42,31 @@ public void run() {\n \n     static class NullOutputStream extends OutputStream {\n         @Override\n-        public void write(int b) throws IOException {\n+        public void write(int b) {\n \n         }\n+\n+        @Override\n+        public void write(byte[] b) {\n+        }\n+\n+        @Override\n+        public void write(byte[] b, int off, int len) {\n+        }\n     }\n \n     @Override\n     public Mono<Void> runAsync() {\n         return blobAsyncClient.download()\n             .map(b -> {\n-                for (int i = 0; i < b.remaining(); i++) {\n-                    b.get();\n+                int readCount = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51efc2efd215685cb85bf0a781768b800328a8f0"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU2MDYxMw==", "bodyText": "Hmm, that sample should be updated as a ByteBuffer isn't guaranteed to have a backing byte[]. If the ByteBuffer instance is a DirectByteBuffer (aka OS managed memory) that will throw an exception.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14390#discussion_r486560613", "createdAt": "2020-09-10T18:44:31Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/blob/perf/DownloadBlobTest.java", "diffHunk": "@@ -39,18 +42,31 @@ public void run() {\n \n     static class NullOutputStream extends OutputStream {\n         @Override\n-        public void write(int b) throws IOException {\n+        public void write(int b) {\n \n         }\n+\n+        @Override\n+        public void write(byte[] b) {\n+        }\n+\n+        @Override\n+        public void write(byte[] b, int off, int len) {\n+        }\n     }\n \n     @Override\n     public Mono<Void> runAsync() {\n         return blobAsyncClient.download()\n             .map(b -> {\n-                for (int i = 0; i < b.remaining(); i++) {\n-                    b.get();\n+                int readCount = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0MDg1Mg=="}, "originalCommit": {"oid": "51efc2efd215685cb85bf0a781768b800328a8f0"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzM1OTE3OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/blob/perf/ListBlobsTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODoxNzozMVrOHQAMmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoxMjozNlrOHRe4tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0MjQ4OQ==", "bodyText": "Why add ignoreElements()?  Is this more or less similar to the sync implementation?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14390#discussion_r486542489", "createdAt": "2020-09-10T18:17:31Z", "author": {"login": "mikeharder"}, "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/blob/perf/ListBlobsTest.java", "diffHunk": "@@ -25,11 +25,14 @@ public ListBlobsTest(PerfStressOptions options) {\n \n     @Override\n     public void run() {\n-        blobContainerClient.listBlobs().forEach(b -> { });\n+        blobContainerClient.listBlobs().forEach(b -> {\n+        });\n     }\n \n     @Override\n     public Mono<Void> runAsync() {\n-        return blobContainerAsyncClient.listBlobs().then();\n+        return blobContainerAsyncClient.listBlobs()\n+            .ignoreElements()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51efc2efd215685cb85bf0a781768b800328a8f0"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA5MTM3Ng==", "bodyText": "That's a good question and I'll need to dig a little more into this. ignoreElements actively drops onNext signals upstream propagates while then actively ignores the sequence from upstream. I don't know how this plays out different for the listing operation response.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14390#discussion_r488091376", "createdAt": "2020-09-14T17:07:57Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/blob/perf/ListBlobsTest.java", "diffHunk": "@@ -25,11 +25,14 @@ public ListBlobsTest(PerfStressOptions options) {\n \n     @Override\n     public void run() {\n-        blobContainerClient.listBlobs().forEach(b -> { });\n+        blobContainerClient.listBlobs().forEach(b -> {\n+        });\n     }\n \n     @Override\n     public Mono<Void> runAsync() {\n-        return blobContainerAsyncClient.listBlobs().then();\n+        return blobContainerAsyncClient.listBlobs()\n+            .ignoreElements()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0MjQ4OQ=="}, "originalCommit": {"oid": "51efc2efd215685cb85bf0a781768b800328a8f0"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA5Mzg3Ng==", "bodyText": "Looks like then is a bit of an alias for ignoreElements (not exactly the same but the resulting subscriber is the same). I'll go ahead and remove ignoreElements.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14390#discussion_r488093876", "createdAt": "2020-09-14T17:12:36Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/blob/perf/ListBlobsTest.java", "diffHunk": "@@ -25,11 +25,14 @@ public ListBlobsTest(PerfStressOptions options) {\n \n     @Override\n     public void run() {\n-        blobContainerClient.listBlobs().forEach(b -> { });\n+        blobContainerClient.listBlobs().forEach(b -> {\n+        });\n     }\n \n     @Override\n     public Mono<Void> runAsync() {\n-        return blobContainerAsyncClient.listBlobs().then();\n+        return blobContainerAsyncClient.listBlobs()\n+            .ignoreElements()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0MjQ4OQ=="}, "originalCommit": {"oid": "51efc2efd215685cb85bf0a781768b800328a8f0"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzQyOTUxOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/blob/perf/UploadOutputStreamTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODozMjo1M1rOHQA5Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjo1ODoxOFrOHReZrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU1MzkyMg==", "bodyText": "Would this be equivalent in both perf and functionality?\ncopyStream(createRandomInputStream(size), blobOutputStream);\nIf so, this would allow us to delete writeBytesToOutputStream() which seems simpler.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14390#discussion_r486553922", "createdAt": "2020-09-10T18:32:53Z", "author": {"login": "mikeharder"}, "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/blob/perf/UploadOutputStreamTest.java", "diffHunk": "@@ -3,29 +3,25 @@\n \n package com.azure.storage.blob.perf;\n \n-import static com.azure.perf.test.core.TestDataCreationHelper.createRandomInputStream;\n-\n import com.azure.perf.test.core.PerfStressOptions;\n import com.azure.storage.blob.perf.core.BlobTestBase;\n import com.azure.storage.blob.specialized.BlobOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n import reactor.core.publisher.Mono;\n \n-public class UploadOutputStreamTest extends BlobTestBase<PerfStressOptions> {\n+import java.io.IOException;\n \n-    private final InputStream inputStream;\n+import static com.azure.perf.test.core.TestDataCreationHelper.writeBytesToOutputStream;\n \n+public class UploadOutputStreamTest extends BlobTestBase<PerfStressOptions> {\n     public UploadOutputStreamTest(PerfStressOptions options) {\n         super(options);\n-        this.inputStream = createRandomInputStream(options.getSize());\n     }\n \n     @Override\n     public void run() {\n         try {\n             BlobOutputStream blobOutputStream = blockBlobClient.getBlobOutputStream();\n-            copyStream(inputStream, blobOutputStream);\n+            writeBytesToOutputStream(blobOutputStream, options.getSize());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51efc2efd215685cb85bf0a781768b800328a8f0"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA4NTkzMw==", "bodyText": "copyStream is generally less performant, and definitely less performant with the type of streams we are using. ByteArrayInputStream clones the byte[] it returns from read operations and ByteArrayOutputSteam clones the byte[] passed into write operation. writeBytesToOutputStream skips the data copying that occurs during read.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14390#discussion_r488085933", "createdAt": "2020-09-14T16:58:18Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/blob/perf/UploadOutputStreamTest.java", "diffHunk": "@@ -3,29 +3,25 @@\n \n package com.azure.storage.blob.perf;\n \n-import static com.azure.perf.test.core.TestDataCreationHelper.createRandomInputStream;\n-\n import com.azure.perf.test.core.PerfStressOptions;\n import com.azure.storage.blob.perf.core.BlobTestBase;\n import com.azure.storage.blob.specialized.BlobOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n import reactor.core.publisher.Mono;\n \n-public class UploadOutputStreamTest extends BlobTestBase<PerfStressOptions> {\n+import java.io.IOException;\n \n-    private final InputStream inputStream;\n+import static com.azure.perf.test.core.TestDataCreationHelper.writeBytesToOutputStream;\n \n+public class UploadOutputStreamTest extends BlobTestBase<PerfStressOptions> {\n     public UploadOutputStreamTest(PerfStressOptions options) {\n         super(options);\n-        this.inputStream = createRandomInputStream(options.getSize());\n     }\n \n     @Override\n     public void run() {\n         try {\n             BlobOutputStream blobOutputStream = blockBlobClient.getBlobOutputStream();\n-            copyStream(inputStream, blobOutputStream);\n+            writeBytesToOutputStream(blobOutputStream, options.getSize());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU1MzkyMg=="}, "originalCommit": {"oid": "51efc2efd215685cb85bf0a781768b800328a8f0"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1509, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}