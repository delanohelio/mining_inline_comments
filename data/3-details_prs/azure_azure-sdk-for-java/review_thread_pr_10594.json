{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNTI1NTkx", "number": 10594, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODoxOTozMlrOD3vxpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODozOTozM1rOD3wNfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzgxMDMxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ClaimsBasedSecurityChannel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODoxOTozMlrOGOLT2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODo0NDoxMlrOGOML2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxODU1Mg==", "bodyText": "This didn't have to change. The error message should use the name of the param instead of the instance variable name.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10594#discussion_r417518552", "createdAt": "2020-04-29T18:19:32Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ClaimsBasedSecurityChannel.java", "diffHunk": "@@ -37,7 +45,7 @@ public ClaimsBasedSecurityChannel(Mono<RequestResponseChannel> responseChannelMo\n         this.authorizationType = Objects.requireNonNull(authorizationType, \"'authorizationType' cannot be null.\");\n         this.retryOptions = Objects.requireNonNull(retryOptions, \"'retryOptions' cannot be null.\");\n         this.credential = Objects.requireNonNull(tokenCredential, \"'tokenCredential' cannot be null.\");\n-        this.cbsChannelMono = Objects.requireNonNull(responseChannelMono, \"'responseChannelMono' cannot be null.\");\n+        this.cbsChannelMono = Objects.requireNonNull(responseChannelMono, \"'cbsChannelMono' cannot be null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "706af29349de0631b4ff8d32a0df565cd434c895"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUzMjg4OQ==", "bodyText": "Good catch. I didn't check the actual parameter name.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10594#discussion_r417532889", "createdAt": "2020-04-29T18:44:12Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ClaimsBasedSecurityChannel.java", "diffHunk": "@@ -37,7 +45,7 @@ public ClaimsBasedSecurityChannel(Mono<RequestResponseChannel> responseChannelMo\n         this.authorizationType = Objects.requireNonNull(authorizationType, \"'authorizationType' cannot be null.\");\n         this.retryOptions = Objects.requireNonNull(retryOptions, \"'retryOptions' cannot be null.\");\n         this.credential = Objects.requireNonNull(tokenCredential, \"'tokenCredential' cannot be null.\");\n-        this.cbsChannelMono = Objects.requireNonNull(responseChannelMono, \"'responseChannelMono' cannot be null.\");\n+        this.cbsChannelMono = Objects.requireNonNull(responseChannelMono, \"'cbsChannelMono' cannot be null.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxODU1Mg=="}, "originalCommit": {"oid": "706af29349de0631b4ff8d32a0df565cd434c895"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5Nzg3NzM4OnYy", "diffSide": "RIGHT", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/AmqpReceiveLinkProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODozODoxOVrOGOL_HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODo0NToyOVrOGOMPAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUyOTYyOA==", "bodyText": "Can we use AtomicReference here instead of AtomicReferenceFieldUpdater? I don't think we'll have too many instances of AmqpReceiveLinkProcessor for memory being an issue. The reflection-based update can cause issues if the name of the volatile var is changed and the field updater is not updated.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10594#discussion_r417529628", "createdAt": "2020-04-29T18:38:19Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/AmqpReceiveLinkProcessor.java", "diffHunk": "@@ -25,40 +24,50 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n \n /**\n  * Processes AMQP receive links into a stream of AMQP messages.\n  */\n public class AmqpReceiveLinkProcessor extends FluxProcessor<AmqpReceiveLink, Message> implements Subscription {\n-    // We don't want to dump too many credits on the link at once. It's easy enough to ask for more.\n-    private static final int MINIMUM_REQUEST = 0;\n-    private static final int MAXIMUM_REQUEST = 100;\n-\n     private final ClientLogger logger = new ClientLogger(AmqpReceiveLinkProcessor.class);\n     private final Object lock = new Object();\n     private final AtomicBoolean isTerminated = new AtomicBoolean();\n-    private final AtomicBoolean hasDownstream = new AtomicBoolean();\n     private final AtomicInteger retryAttempts = new AtomicInteger();\n-    private final AtomicInteger linkCreditRequest = new AtomicInteger(1);\n     private final Deque<Message> messageQueue = new ConcurrentLinkedDeque<>();\n+    private final AtomicBoolean hasFirstLink = new AtomicBoolean();\n+    private final AtomicBoolean linkCreditsAdded = new AtomicBoolean();\n \n     private final int prefetch;\n     private final AmqpRetryPolicy retryPolicy;\n-    private Disposable parentConnection;\n-\n-    private volatile Subscription upstream;\n-    private volatile CoreSubscriber<? super Message> downstream;\n-    private volatile boolean isCancelled;\n+    private final Disposable parentConnection;\n \n     private volatile Throwable lastError;\n+    private volatile boolean isCancelled;\n     private volatile AmqpReceiveLink currentLink;\n     private volatile Disposable currentLinkSubscriptions;\n     private volatile Disposable retrySubscription;\n \n-    volatile int wip;\n-    static final AtomicIntegerFieldUpdater<AmqpReceiveLinkProcessor> WIP =\n+    private volatile CoreSubscriber<? super Message> downstream;\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<AmqpReceiveLinkProcessor, CoreSubscriber> DOWNSTREAM =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "706af29349de0631b4ff8d32a0df565cd434c895"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUzMzY5OA==", "bodyText": "Makes sense. I was thinking of those EHs that have 1k partitions. I can revert it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10594#discussion_r417533698", "createdAt": "2020-04-29T18:45:29Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/AmqpReceiveLinkProcessor.java", "diffHunk": "@@ -25,40 +24,50 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n \n /**\n  * Processes AMQP receive links into a stream of AMQP messages.\n  */\n public class AmqpReceiveLinkProcessor extends FluxProcessor<AmqpReceiveLink, Message> implements Subscription {\n-    // We don't want to dump too many credits on the link at once. It's easy enough to ask for more.\n-    private static final int MINIMUM_REQUEST = 0;\n-    private static final int MAXIMUM_REQUEST = 100;\n-\n     private final ClientLogger logger = new ClientLogger(AmqpReceiveLinkProcessor.class);\n     private final Object lock = new Object();\n     private final AtomicBoolean isTerminated = new AtomicBoolean();\n-    private final AtomicBoolean hasDownstream = new AtomicBoolean();\n     private final AtomicInteger retryAttempts = new AtomicInteger();\n-    private final AtomicInteger linkCreditRequest = new AtomicInteger(1);\n     private final Deque<Message> messageQueue = new ConcurrentLinkedDeque<>();\n+    private final AtomicBoolean hasFirstLink = new AtomicBoolean();\n+    private final AtomicBoolean linkCreditsAdded = new AtomicBoolean();\n \n     private final int prefetch;\n     private final AmqpRetryPolicy retryPolicy;\n-    private Disposable parentConnection;\n-\n-    private volatile Subscription upstream;\n-    private volatile CoreSubscriber<? super Message> downstream;\n-    private volatile boolean isCancelled;\n+    private final Disposable parentConnection;\n \n     private volatile Throwable lastError;\n+    private volatile boolean isCancelled;\n     private volatile AmqpReceiveLink currentLink;\n     private volatile Disposable currentLinkSubscriptions;\n     private volatile Disposable retrySubscription;\n \n-    volatile int wip;\n-    static final AtomicIntegerFieldUpdater<AmqpReceiveLinkProcessor> WIP =\n+    private volatile CoreSubscriber<? super Message> downstream;\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<AmqpReceiveLinkProcessor, CoreSubscriber> DOWNSTREAM =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUyOTYyOA=="}, "originalCommit": {"oid": "706af29349de0631b4ff8d32a0df565cd434c895"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5Nzg4MTU2OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReceiveLinkProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODozOTozM1rOGOMBwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODo0Njo1MVrOGOMSVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUzMDMwNQ==", "bodyText": "Same here - prefer to use AtomicReference.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10594#discussion_r417530305", "createdAt": "2020-04-29T18:39:33Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReceiveLinkProcessor.java", "diffHunk": "@@ -14,47 +14,69 @@\n import reactor.core.CoreSubscriber;\n import reactor.core.Disposable;\n import reactor.core.Disposables;\n+import reactor.core.Exceptions;\n import reactor.core.publisher.FluxProcessor;\n import reactor.core.publisher.Mono;\n import reactor.core.publisher.Operators;\n import reactor.core.scheduler.Schedulers;\n \n import java.time.Duration;\n+import java.util.Deque;\n import java.util.Objects;\n+import java.util.concurrent.ConcurrentLinkedDeque;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n \n import static com.azure.core.util.FluxUtil.monoError;\n \n /**\n  * Processes AMQP receive links into a stream of AMQP messages.\n+ *\n+ * This is almost a carbon copy of AmqpReceiveLinkProcessor. When we can abstract it from proton-j, it would be nice to\n+ * unify this.\n  */\n public class ServiceBusReceiveLinkProcessor extends FluxProcessor<AmqpReceiveLink, Message> implements Subscription {\n-    // We don't want to dump too many credits on the link at once. It's easy enough to ask for more.\n-    private static final int MINIMUM_REQUEST = 0;\n-    private static final int MAXIMUM_REQUEST = 100;\n-\n     private final ClientLogger logger = new ClientLogger(ServiceBusReceiveLinkProcessor.class);\n     private final Object lock = new Object();\n     private final AtomicBoolean isTerminated = new AtomicBoolean();\n-    private final AtomicBoolean hasDownstream = new AtomicBoolean();\n     private final AtomicInteger retryAttempts = new AtomicInteger();\n-    private final AtomicBoolean isRequested = new AtomicBoolean();\n-    private final AtomicInteger linkCreditRequest = new AtomicInteger(1);\n+    private final Deque<Message> messageQueue = new ConcurrentLinkedDeque<>();\n+    private final AtomicBoolean hasFirstLink = new AtomicBoolean();\n+    private final AtomicBoolean linkCreditsAdded = new AtomicBoolean();\n \n     private final int prefetch;\n     private final AmqpRetryPolicy retryPolicy;\n-    private Disposable parentConnection;\n+    private final Disposable parentConnection;\n     private final AmqpErrorContext errorContext;\n \n-    private volatile Subscription upstream;\n-    private volatile CoreSubscriber<? super Message> downstream;\n-\n     private volatile Throwable lastError;\n+    private volatile boolean isCancelled;\n     private volatile AmqpReceiveLink currentLink;\n     private volatile Disposable currentLinkSubscriptions;\n     private volatile Disposable retrySubscription;\n \n+    private volatile CoreSubscriber<? super Message> downstream;\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<ServiceBusReceiveLinkProcessor, CoreSubscriber> DOWNSTREAM =\n+        AtomicReferenceFieldUpdater.newUpdater(ServiceBusReceiveLinkProcessor.class, CoreSubscriber.class,\n+            \"downstream\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "706af29349de0631b4ff8d32a0df565cd434c895"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUzNDU0OA==", "bodyText": "For SB, I'm not sure, because they create a separate receive link for each session and non-session receiver. But I guess at any given time, they'll have at most maxConcurrentSessions. \ud83e\udd14", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10594#discussion_r417534548", "createdAt": "2020-04-29T18:46:51Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReceiveLinkProcessor.java", "diffHunk": "@@ -14,47 +14,69 @@\n import reactor.core.CoreSubscriber;\n import reactor.core.Disposable;\n import reactor.core.Disposables;\n+import reactor.core.Exceptions;\n import reactor.core.publisher.FluxProcessor;\n import reactor.core.publisher.Mono;\n import reactor.core.publisher.Operators;\n import reactor.core.scheduler.Schedulers;\n \n import java.time.Duration;\n+import java.util.Deque;\n import java.util.Objects;\n+import java.util.concurrent.ConcurrentLinkedDeque;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n \n import static com.azure.core.util.FluxUtil.monoError;\n \n /**\n  * Processes AMQP receive links into a stream of AMQP messages.\n+ *\n+ * This is almost a carbon copy of AmqpReceiveLinkProcessor. When we can abstract it from proton-j, it would be nice to\n+ * unify this.\n  */\n public class ServiceBusReceiveLinkProcessor extends FluxProcessor<AmqpReceiveLink, Message> implements Subscription {\n-    // We don't want to dump too many credits on the link at once. It's easy enough to ask for more.\n-    private static final int MINIMUM_REQUEST = 0;\n-    private static final int MAXIMUM_REQUEST = 100;\n-\n     private final ClientLogger logger = new ClientLogger(ServiceBusReceiveLinkProcessor.class);\n     private final Object lock = new Object();\n     private final AtomicBoolean isTerminated = new AtomicBoolean();\n-    private final AtomicBoolean hasDownstream = new AtomicBoolean();\n     private final AtomicInteger retryAttempts = new AtomicInteger();\n-    private final AtomicBoolean isRequested = new AtomicBoolean();\n-    private final AtomicInteger linkCreditRequest = new AtomicInteger(1);\n+    private final Deque<Message> messageQueue = new ConcurrentLinkedDeque<>();\n+    private final AtomicBoolean hasFirstLink = new AtomicBoolean();\n+    private final AtomicBoolean linkCreditsAdded = new AtomicBoolean();\n \n     private final int prefetch;\n     private final AmqpRetryPolicy retryPolicy;\n-    private Disposable parentConnection;\n+    private final Disposable parentConnection;\n     private final AmqpErrorContext errorContext;\n \n-    private volatile Subscription upstream;\n-    private volatile CoreSubscriber<? super Message> downstream;\n-\n     private volatile Throwable lastError;\n+    private volatile boolean isCancelled;\n     private volatile AmqpReceiveLink currentLink;\n     private volatile Disposable currentLinkSubscriptions;\n     private volatile Disposable retrySubscription;\n \n+    private volatile CoreSubscriber<? super Message> downstream;\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<ServiceBusReceiveLinkProcessor, CoreSubscriber> DOWNSTREAM =\n+        AtomicReferenceFieldUpdater.newUpdater(ServiceBusReceiveLinkProcessor.class, CoreSubscriber.class,\n+            \"downstream\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUzMDMwNQ=="}, "originalCommit": {"oid": "706af29349de0631b4ff8d32a0df565cd434c895"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4518, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}