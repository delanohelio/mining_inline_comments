{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNzE4MjQ4", "number": 12169, "reviewThreads": {"totalCount": 80, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoyNDoyMFrOEFIrUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODozMjo1NVrOENAoqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODIwNDk2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos-table/src/main/java/com/azure/cosmos/table/implementation/CodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoyNDoyMFrOGjL-fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoyNDoyMFrOGjL-fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0OTU2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                TableClient tableClientBuilder = new TableClientBuilder();\n          \n          \n            \n                TableClient tableClient = new TableClientBuilder();", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r439549564", "createdAt": "2020-06-12T17:24:20Z", "author": {"login": "srnagar"}, "path": "sdk/cosmos/azure-cosmos-table/src/main/java/com/azure/cosmos/table/implementation/CodeSnippets.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.azure.cosmos.table.implementation;\n+\n+import com.azure.cosmos.table.implementation.models.TableEntityQueryResponse;\n+\n+import javax.swing.*;\n+import java.util.Observable;\n+\n+public class CodeSnippets {\n+    //add a table\n+\n+    //sync\n+    TableClient tableClientBuilder = new TableClientBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2266b66d3c8b8058477e464b8d17660cc3ab02e"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODIwNzc5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos-table/src/main/java/com/azure/cosmos/table/implementation/CodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoyNTowN1rOGjMAFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoyNTowN1rOGjMAFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0OTk3NQ==", "bodyText": "This should be called buildClient for sync client and buildAsyncClient for async client.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r439549975", "createdAt": "2020-06-12T17:25:07Z", "author": {"login": "srnagar"}, "path": "sdk/cosmos/azure-cosmos-table/src/main/java/com/azure/cosmos/table/implementation/CodeSnippets.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.azure.cosmos.table.implementation;\n+\n+import com.azure.cosmos.table.implementation.models.TableEntityQueryResponse;\n+\n+import javax.swing.*;\n+import java.util.Observable;\n+\n+public class CodeSnippets {\n+    //add a table\n+\n+    //sync\n+    TableClient tableClientBuilder = new TableClientBuilder();\n+        .endpoint(foo)\n+        .credential(new DefaultAzureCredential()\n+        .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2266b66d3c8b8058477e464b8d17660cc3ab02e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODIxMzA0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos-table/src/main/java/com/azure/cosmos/table/implementation/CodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoyNjo0MFrOGjMDRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoyNjo0MFrOGjMDRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1MDc5MQ==", "bodyText": "Remove this line.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r439550791", "createdAt": "2020-06-12T17:26:40Z", "author": {"login": "srnagar"}, "path": "sdk/cosmos/azure-cosmos-table/src/main/java/com/azure/cosmos/table/implementation/CodeSnippets.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.azure.cosmos.table.implementation;\n+\n+import com.azure.cosmos.table.implementation.models.TableEntityQueryResponse;\n+\n+import javax.swing.*;\n+import java.util.Observable;\n+\n+public class CodeSnippets {\n+    //add a table\n+\n+    //sync\n+    TableClient tableClientBuilder = new TableClientBuilder();\n+        .endpoint(foo)\n+        .credential(new DefaultAzureCredential()\n+        .build();\n+\n+     .connectionString", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2266b66d3c8b8058477e464b8d17660cc3ab02e"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODIxNTg4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos-table/src/main/java/com/azure/cosmos/table/implementation/CodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoyNzozMlrOGjME-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoyNzozMlrOGjME-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1MTIyNQ==", "bodyText": "We should have a single builder that can build both sync and async clients.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r439551225", "createdAt": "2020-06-12T17:27:32Z", "author": {"login": "srnagar"}, "path": "sdk/cosmos/azure-cosmos-table/src/main/java/com/azure/cosmos/table/implementation/CodeSnippets.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.azure.cosmos.table.implementation;\n+\n+import com.azure.cosmos.table.implementation.models.TableEntityQueryResponse;\n+\n+import javax.swing.*;\n+import java.util.Observable;\n+\n+public class CodeSnippets {\n+    //add a table\n+\n+    //sync\n+    TableClient tableClientBuilder = new TableClientBuilder();\n+        .endpoint(foo)\n+        .credential(new DefaultAzureCredential()\n+        .build();\n+\n+     .connectionString\n+\n+    AzureTable azureTable = tableClientBuilder.createTableIfNotExists(\"tableName\");\n+\n+    //aysnc\n+    TableAysncClientBuilder tableAysncClient = new TableAsyncClientBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2266b66d3c8b8058477e464b8d17660cc3ab02e"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODIxNzc4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos-table/src/main/java/com/azure/cosmos/table/implementation/CodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoyODowNFrOGjMGGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoyODowNFrOGjMGGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1MTUxMg==", "bodyText": "Remove this line", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r439551512", "createdAt": "2020-06-12T17:28:04Z", "author": {"login": "srnagar"}, "path": "sdk/cosmos/azure-cosmos-table/src/main/java/com/azure/cosmos/table/implementation/CodeSnippets.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.azure.cosmos.table.implementation;\n+\n+import com.azure.cosmos.table.implementation.models.TableEntityQueryResponse;\n+\n+import javax.swing.*;\n+import java.util.Observable;\n+\n+public class CodeSnippets {\n+    //add a table\n+\n+    //sync\n+    TableClient tableClientBuilder = new TableClientBuilder();\n+        .endpoint(foo)\n+        .credential(new DefaultAzureCredential()\n+        .build();\n+\n+     .connectionString\n+\n+    AzureTable azureTable = tableClientBuilder.createTableIfNotExists(\"tableName\");\n+\n+    //aysnc\n+    TableAysncClientBuilder tableAysncClient = new TableAsyncClientBuilder();\n+        .pipeline(\"pipline\")\n+        .build();\n+     AzureTable  azureTable2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2266b66d3c8b8058477e464b8d17660cc3ab02e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODIyMDIzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos-table/src/main/java/com/azure/cosmos/table/implementation/CodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoyODo1NVrOGjMHmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoyODo1NVrOGjMHmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1MTg5Ng==", "bodyText": "Should this be assigned to something?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r439551896", "createdAt": "2020-06-12T17:28:55Z", "author": {"login": "srnagar"}, "path": "sdk/cosmos/azure-cosmos-table/src/main/java/com/azure/cosmos/table/implementation/CodeSnippets.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.azure.cosmos.table.implementation;\n+\n+import com.azure.cosmos.table.implementation.models.TableEntityQueryResponse;\n+\n+import javax.swing.*;\n+import java.util.Observable;\n+\n+public class CodeSnippets {\n+    //add a table\n+\n+    //sync\n+    TableClient tableClientBuilder = new TableClientBuilder();\n+        .endpoint(foo)\n+        .credential(new DefaultAzureCredential()\n+        .build();\n+\n+     .connectionString\n+\n+    AzureTable azureTable = tableClientBuilder.createTableIfNotExists(\"tableName\");\n+\n+    //aysnc\n+    TableAysncClientBuilder tableAysncClient = new TableAsyncClientBuilder();\n+        .pipeline(\"pipline\")\n+        .build();\n+     AzureTable  azureTable2;\n+        Mono<AzureTable> createTableMono = tableAysncClient.createTable(\"tableName\");\n+        createTableMono\n+            .subscribe(\n+                response -> {\n+                    azureTable2 =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2266b66d3c8b8058477e464b8d17660cc3ab02e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTg4MTI0OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoxMDo1MlrOGlPNEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoxMDo1MlrOGlPNEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY5OTYwMw==", "bodyText": "This doesn't look correct. The artifact version should be 1.5.1.\nCan your rebase your changes onto the latest master?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r441699603", "createdAt": "2020-06-17T17:10:52Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/pom.xml", "diffHunk": "@@ -42,6 +43,55 @@ Licensed under the MIT License.\n       <artifactId>azure-core</artifactId>\n       <version>1.5.0</version> <!-- {x-version-update;com.azure:azure-core;dependency} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1079c5900c472dda92dce092c9c1c3d944e9da6f"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTg5MjQ0OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoxNDoyNFrOGlPUrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoxNDoyNFrOGlPUrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwMTU0OQ==", "bodyText": "You have two different versions with the same dependencies, 12.7.0-beta.1 and 12.6.1.\n\nThere should only be one version.\nThe 12.7.0-beta.1 has the <scope>test</scope> which means it will only be used for testing, while 12.6.1 has <scope>compile</scope> which means it'll be used for shipping the product.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r441701549", "createdAt": "2020-06-17T17:14:24Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/pom.xml", "diffHunk": "@@ -42,6 +43,55 @@ Licensed under the MIT License.\n       <artifactId>azure-core</artifactId>\n       <version>1.5.0</version> <!-- {x-version-update;com.azure:azure-core;dependency} -->\n     </dependency>\n+\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core-test</artifactId>\n+      <version>1.2.1</version> <!-- {x-version-update;com.azure:azure-core-test;dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-api</artifactId>\n+      <version>5.6.2</version> <!-- {x-version-update;org.junit.jupiter:junit-jupiter-api;external_dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n+      <version>5.6.2</version> <!-- {x-version-update;org.junit.jupiter:junit-jupiter-engine;external_dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-params</artifactId>\n+      <version>5.6.2</version> <!-- {x-version-update;org.junit.jupiter:junit-jupiter-params;external_dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.projectreactor</groupId>\n+      <artifactId>reactor-test</artifactId>\n+      <version>3.3.5.RELEASE</version> <!-- {x-version-update;io.projectreactor:reactor-test;external_dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-core</artifactId>\n+      <version>3.0.0</version> <!-- {x-version-update;org.mockito:mockito-core;external_dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-storage-common</artifactId>\n+      <version>12.7.0-beta.1</version>  <!-- {x-version-update;com.azure:azure-storage-common;dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+      <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1079c5900c472dda92dce092c9c1c3d944e9da6f"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTg5NDU3OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/AzureTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoxNTowMFrOGlPWAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoxNTowMFrOGlPWAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwMTg4OA==", "bodyText": "You're missing the MIT header. If you look at some previous *.java files, they'll have two lines at the header for every file.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r441701888", "createdAt": "2020-06-17T17:15:00Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/AzureTable.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.azure.data.tables;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1079c5900c472dda92dce092c9c1c3d944e9da6f"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTg5NzQ2OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/AzureTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoxNTo0NVrOGlPXqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzozMTo0OVrOGlP87A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwMjMxMw==", "bodyText": "We have checkstyles that require you to document public facing methods. you will have to add documentation to these or the build won't pass.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r441702313", "createdAt": "2020-06-17T17:15:45Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/AzureTable.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.azure.data.tables;\n+\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+\n+public class AzureTable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1079c5900c472dda92dce092c9c1c3d944e9da6f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxMTg1Mg==", "bodyText": "Do you use AzureTable and AzureTableClient? It looks like you use TableServiceClient and TableClient. ? Perhaps these files can be deleted.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r441711852", "createdAt": "2020-06-17T17:31:49Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/AzureTable.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.azure.data.tables;\n+\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+\n+public class AzureTable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwMjMxMw=="}, "originalCommit": {"oid": "1079c5900c472dda92dce092c9c1c3d944e9da6f"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTg5ODE1OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/AzureTableAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoxNTo1NVrOGlPYEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoxNTo1NVrOGlPYEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwMjQxNw==", "bodyText": "Missing MIT header", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r441702417", "createdAt": "2020-06-17T17:15:55Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/AzureTableAsyncClient.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.azure.data.tables;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1079c5900c472dda92dce092c9c1c3d944e9da6f"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTkwMzE0OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/AzureTableAsyncClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoxNzoyN1rOGlPbRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoxNzoyN1rOGlPbRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwMzIzOA==", "bodyText": "This should be using ClientLogger rather than System.err. or System.out. If you look at some of the azure-storage-blob client classes, you'll see examples of this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r441703238", "createdAt": "2020-06-17T17:17:27Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/AzureTableAsyncClient.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.azure.data.tables;\n+\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class AzureTableAsyncClient {\n+    private final Set<String> existingTables = new HashSet<>();\n+\n+    /**\n+     * Creates a table. This artificially takes 3 seconds.\n+     *\n+     * @param name The name of the table.\n+     *\n+     * @return A Mono that completes when the table is created.\n+     */\n+    public Mono<AzureTable> createTable(String name) {\n+        return Mono.delay(Duration.ofSeconds(3)).flatMap(delay -> {\n+            if (existingTables.add(name)) {\n+                System.out.printf(\"CREATING TABLE '%s'.%n\", name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1079c5900c472dda92dce092c9c1c3d944e9da6f"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTkyMzgyOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/CodeSnippetsAysnc.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoyMzozNFrOGlPovw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoyMzozNFrOGlPovw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwNjY4Nw==", "bodyText": "These shouldn't be in the \"src/main/java\" folder. The \"main\" folder is for product code.\nThese should be in \"src/samples/java\". https://azure.github.io/azure-sdk/java_documentation.html#code-samples\nSince these are snippets dealing with the \"TableServiceAsyncClient\", this file can be called \"TableServiceAsyncClientCodeSamples\".\nHere's an example.\nhttps://github.com/Azure/azure-sdk-for-java/tree/master/sdk/eventhubs/azure-messaging-eventhubs/src/samples/java/com/azure/messaging/eventhubs", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r441706687", "createdAt": "2020-06-17T17:23:34Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/CodeSnippetsAysnc.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package com.azure.data.tables;\n+\n+\n+import reactor.core.Disposable;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.HashMap;\n+\n+\n+public class CodeSnippetsAysnc {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1079c5900c472dda92dce092c9c1c3d944e9da6f"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTkyNTUzOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/CodeSnippetsAysnc.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoyNDowM1rOGlPpzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoyNDowM1rOGlPpzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwNjk1OQ==", "bodyText": "nit: unneeded spaces.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r441706959", "createdAt": "2020-06-17T17:24:03Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/CodeSnippetsAysnc.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package com.azure.data.tables;\n+\n+\n+import reactor.core.Disposable;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.HashMap;\n+\n+\n+public class CodeSnippetsAysnc {\n+\n+\n+    public void AsyncSnippets() {\n+\n+        //build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceAsyncClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .build();\n+\n+        //add table\n+        Mono<TableAsyncClient> createTableMono = tableServiceAsyncClient.createTable(\"OfficeSupplies\");\n+\n+        createTableMono.subscribe(Void -> {\n+            System.out.println(\"Table creation successful.\");\n+        }, error -> {\n+            System.out.println(\"There was an error creating the table. Error: \" + error);\n+        });\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1079c5900c472dda92dce092c9c1c3d944e9da6f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTkyODk5OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/CodeSnippetsAysnc.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoyNDo1M1rOGlPsAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoyNDo1M1rOGlPsAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwNzUyMA==", "bodyText": "TableServiceAsyncClientBuilder should be called TableServiceClientBuilder. https://azure.github.io/azure-sdk/java_design.html#service-clients", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r441707520", "createdAt": "2020-06-17T17:24:53Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/CodeSnippetsAysnc.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package com.azure.data.tables;\n+\n+\n+import reactor.core.Disposable;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.HashMap;\n+\n+\n+public class CodeSnippetsAysnc {\n+\n+\n+    public void AsyncSnippets() {\n+\n+        //build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceAsyncClientBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1079c5900c472dda92dce092c9c1c3d944e9da6f"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTkzMDc2OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/CodeSnippetsAysnc.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoyNToyMFrOGlPtEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoyNToyMFrOGlPtEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwNzc5Mw==", "bodyText": "Additional space after //. For example: // Build service client", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r441707793", "createdAt": "2020-06-17T17:25:20Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/CodeSnippetsAysnc.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package com.azure.data.tables;\n+\n+\n+import reactor.core.Disposable;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.HashMap;\n+\n+\n+public class CodeSnippetsAysnc {\n+\n+\n+    public void AsyncSnippets() {\n+\n+        //build service client", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1079c5900c472dda92dce092c9c1c3d944e9da6f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTkzMzk4OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/CodeSnippetsAysnc.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoyNjoxM1rOGlPvMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoyNjoxM1rOGlPvMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwODMzNw==", "bodyText": "You'll need to format this document. Ctrl+Alt+L should reformat this.\nThe method names should be \"insertEntity\" rather than \"InsertEntity\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r441708337", "createdAt": "2020-06-17T17:26:13Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/CodeSnippetsAysnc.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package com.azure.data.tables;\n+\n+\n+import reactor.core.Disposable;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.HashMap;\n+\n+\n+public class CodeSnippetsAysnc {\n+\n+\n+    public void AsyncSnippets() {\n+\n+        //build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceAsyncClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .build();\n+\n+        //add table\n+        Mono<TableAsyncClient> createTableMono = tableServiceAsyncClient.createTable(\"OfficeSupplies\");\n+\n+        createTableMono.subscribe(Void -> {\n+            System.out.println(\"Table creation successful.\");\n+        }, error -> {\n+            System.out.println(\"There was an error creating the table. Error: \" + error);\n+        });\n+\n+\n+\n+        //delete a table\n+        Mono<Void> deleteTableMono = tableServiceAsyncClient.deleteTable(\"OfficeSupplies\");\n+\n+        deleteTableMono.subscribe(Void -> {\n+            System.out.println(\"Table deletion successful\");\n+        }, error -> {\n+            System.out.println(\"There was an error deleting the table. Error: \" + error);\n+        });\n+\n+\n+        //query tables\n+        String selectString = \"$select= TableName eq 'OfficeSupplies'\";\n+        Flux<AzureTable> queryTableFlux = tableServiceAsyncClient.queryTables(selectString);\n+        queryTableFlux.subscribe(azureTable -> {\n+            System.out.println(azureTable.getName());\n+        }, error -> {\n+            System.out.println(\"There was an error querying the service. Error: \" + error);\n+        });\n+    }\n+\n+    public void InsertEntity(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1079c5900c472dda92dce092c9c1c3d944e9da6f"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTk0MDE2OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/CodeSnippetsAysnc.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoyNzo0NFrOGlPzBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoyNzo0NFrOGlPzBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwOTMxOQ==", "bodyText": "You don't need to create a new variable (ie. insertEntityMono) for these Mono operations. It makes it harder to read.  Same for other instances where you create the Mono variable to link it to a subscribe.\nYou can use:\ntableAsyncClient.insertEntity(tableName, row, partitionKey, tableEntityProperties).subscribe(tableEntity -> {\n       // Stuff\n   }, error -> {\n      // Stuff\n   });", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r441709319", "createdAt": "2020-06-17T17:27:44Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/CodeSnippetsAysnc.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package com.azure.data.tables;\n+\n+\n+import reactor.core.Disposable;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.HashMap;\n+\n+\n+public class CodeSnippetsAysnc {\n+\n+\n+    public void AsyncSnippets() {\n+\n+        //build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceAsyncClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .build();\n+\n+        //add table\n+        Mono<TableAsyncClient> createTableMono = tableServiceAsyncClient.createTable(\"OfficeSupplies\");\n+\n+        createTableMono.subscribe(Void -> {\n+            System.out.println(\"Table creation successful.\");\n+        }, error -> {\n+            System.out.println(\"There was an error creating the table. Error: \" + error);\n+        });\n+\n+\n+\n+        //delete a table\n+        Mono<Void> deleteTableMono = tableServiceAsyncClient.deleteTable(\"OfficeSupplies\");\n+\n+        deleteTableMono.subscribe(Void -> {\n+            System.out.println(\"Table deletion successful\");\n+        }, error -> {\n+            System.out.println(\"There was an error deleting the table. Error: \" + error);\n+        });\n+\n+\n+        //query tables\n+        String selectString = \"$select= TableName eq 'OfficeSupplies'\";\n+        Flux<AzureTable> queryTableFlux = tableServiceAsyncClient.queryTables(selectString);\n+        queryTableFlux.subscribe(azureTable -> {\n+            System.out.println(azureTable.getName());\n+        }, error -> {\n+            System.out.println(\"There was an error querying the service. Error: \" + error);\n+        });\n+    }\n+\n+    public void InsertEntity(){\n+\n+        //build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceAsyncClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .build();\n+\n+        TableAsyncClient tableAsyncClient = tableServiceAsyncClient.getClient(\"OfficeSupplies\");\n+\n+\n+        String tableName = \"OfficeSupplies\";\n+        String row = \"crayolaMarkers\";\n+        String partitionKey = \"markers\";\n+        HashMap<String, Object> tableEntityProperties = new HashMap<>();\n+        Mono<TableEntity> insertEntityMono = tableAsyncClient.insertEntity(tableName, row, partitionKey,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1079c5900c472dda92dce092c9c1c3d944e9da6f"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTk0NDc4OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/CodeSnippetsSync.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoyODo1OFrOGlP2HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoyODo1OFrOGlP2HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxMDEwOQ==", "bodyText": "Same wiht file name.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r441710109", "createdAt": "2020-06-17T17:28:58Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/CodeSnippetsSync.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.azure.data.tables;\n+\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.data.tables.implementation.models.TableServiceErrorException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+\n+public class CodeSnippetsSync {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1079c5900c472dda92dce092c9c1c3d944e9da6f"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTk2MTQwOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableServiceAsyncClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzozMzoyNlrOGlQA-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzozMzoyNlrOGlQA-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxMjg4OA==", "bodyText": "In general, you need to format your documents. There is inconsistent spacing.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r441712888", "createdAt": "2020-06-17T17:33:26Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableServiceAsyncClientBuilder.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.azure.data.tables;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1079c5900c472dda92dce092c9c1c3d944e9da6f"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTk2MjY3OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableServiceAsyncClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzozMzo0OFrOGlQByA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzozMzo0OFrOGlQByA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxMzA5Ng==", "bodyText": "The naming is incorrect https://azure.github.io/azure-sdk/java_design.html#service-clients", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r441713096", "createdAt": "2020-06-17T17:33:48Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableServiceAsyncClientBuilder.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.azure.data.tables;\n+\n+public class TableServiceAsyncClientBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1079c5900c472dda92dce092c9c1c3d944e9da6f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzIzMjk3OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableServiceClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDowOToxNlrOGmEAyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDowOToxNlrOGmEAyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2NDgwOQ==", "bodyText": "Should there also be a way to get a single AzureTable by its name? e.g. @Nullable public AzureTable getTable(String name)?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r442564809", "createdAt": "2020-06-19T00:09:16Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableServiceClient.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+\n+import java.util.List;\n+\n+@ServiceClient(\n+    builder = TableServiceClientBuilder.class)\n+public class TableServiceClient {\n+\n+    TableServiceClient() {\n+    }\n+\n+    /**\n+     * creates the table with the given name.  If a table with the same name already exists, the operation fails.\n+     *\n+     * @param name the name of the table to create\n+     */\n+    public void createTable(String name) {\n+    }\n+\n+    /**\n+     * deletes the given table. Will error if the table doesn't exists or cannot be found with the given name.\n+     *\n+     * @param name\n+     */\n+    public void deleteTable(String name) {\n+    }\n+\n+    /**\n+     * query all the tables under the storage account and return them\n+     *\n+     * @param filterString the odata filter string\n+     * @return a list of tables that meet the query\n+     */\n+    public List<AzureTable> queryTables(String filterString) {\n+        return null;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bc12c01dec1263ee177224ca1ec89ed8b4c504"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzIzNjg5OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDoxMTowNVrOGmEC8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDoxMTowNVrOGmEC8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2NTM2Mg==", "bodyText": "Should there be a way to get a TableClient from a TableServiceClient? I'm imagining something like:\nTableClient tableClient = tableServiceClient.queryTables(\"$selectString= TableName eq 'OfficeSupplies'\")\n                                            .first()\n                                            .getClient();\n\n(Or the same but with the hypothetical getTable(\"TableName\") method I proposed in a previous comment.)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r442565362", "createdAt": "2020-06-19T00:11:05Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientCodeSnippets.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.data.tables.implementation.models.TableServiceErrorException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+\n+public class TableClientCodeSnippets {\n+\n+    public static void methods() {\n+\n+        //create a tableServiceClient\n+        TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildClient();\n+\n+        //create TableClient\n+        TableClient tableClient = new TableClientBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bc12c01dec1263ee177224ca1ec89ed8b4c504"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzIzNzk4OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableServiceClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDoxMTozOVrOGmEDjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDoxMTozOVrOGmEDjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2NTUxOQ==", "bodyText": "Should this return the AzureTable?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r442565519", "createdAt": "2020-06-19T00:11:39Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableServiceClient.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+\n+import java.util.List;\n+\n+@ServiceClient(\n+    builder = TableServiceClientBuilder.class)\n+public class TableServiceClient {\n+\n+    TableServiceClient() {\n+    }\n+\n+    /**\n+     * creates the table with the given name.  If a table with the same name already exists, the operation fails.\n+     *\n+     * @param name the name of the table to create\n+     */\n+    public void createTable(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bc12c01dec1263ee177224ca1ec89ed8b4c504"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzI0MTk5OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDoxNDowNFrOGmEGAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDoxNDowNFrOGmEGAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2NjE0NA==", "bodyText": "A TableClient already requires a tableName in order to create one, which implies to me that a given instance of TableClient only operates on the table that was specified when it was created. So if that's the case, we should avoid making the customer pass the table name again here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r442566144", "createdAt": "2020-06-19T00:14:04Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientCodeSnippets.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.data.tables.implementation.models.TableServiceErrorException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+\n+public class TableClientCodeSnippets {\n+\n+    public static void methods() {\n+\n+        //create a tableServiceClient\n+        TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildClient();\n+\n+        //create TableClient\n+        TableClient tableClient = new TableClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .tableName(\"OfficeSupplies\")\n+            .buildClient();\n+\n+\n+        //create a table\n+        try {\n+            tableServiceClient.createTable(\"OfficeSupplies\");\n+        } catch (TableServiceErrorException e) {\n+            //use azure core errors? based on\n+            System.out.println(\"Create Table Unsuccessful. Error: \" + e);\n+        }\n+\n+        //delete  table\n+        try {\n+            tableServiceClient.deleteTable(\"OfficeSupplies\");\n+        } catch (TableServiceErrorException e) {\n+            System.out.println(\"Delete Table Unsuccessful. Error: \" + e);\n+        }\n+\n+        //query tables\n+        String selectString = \"$selectString= TableName eq 'OfficeSupplies'\";\n+\n+        try {\n+            List<AzureTable> responseTables = tableServiceClient.queryTables(selectString);\n+        } catch (HttpResponseException e) {\n+            System.out.println(\"Table Query Unsuccessful. Error: \" + e);\n+        }\n+\n+\n+        //insert entity\n+        String tableName = \"OfficeSupplies\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bc12c01dec1263ee177224ca1ec89ed8b4c504"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzI0MzczOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDoxNTowMlrOGmEG8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDoxNTowMlrOGmEG8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2NjM4Ng==", "bodyText": "Presumably you could just pass null as the tableEntityProperties too right? I suppose there isn't much use in inserting an empty row into the table, but if they want to do so, null should work too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r442566386", "createdAt": "2020-06-19T00:15:02Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientCodeSnippets.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.data.tables.implementation.models.TableServiceErrorException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+\n+public class TableClientCodeSnippets {\n+\n+    public static void methods() {\n+\n+        //create a tableServiceClient\n+        TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildClient();\n+\n+        //create TableClient\n+        TableClient tableClient = new TableClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .tableName(\"OfficeSupplies\")\n+            .buildClient();\n+\n+\n+        //create a table\n+        try {\n+            tableServiceClient.createTable(\"OfficeSupplies\");\n+        } catch (TableServiceErrorException e) {\n+            //use azure core errors? based on\n+            System.out.println(\"Create Table Unsuccessful. Error: \" + e);\n+        }\n+\n+        //delete  table\n+        try {\n+            tableServiceClient.deleteTable(\"OfficeSupplies\");\n+        } catch (TableServiceErrorException e) {\n+            System.out.println(\"Delete Table Unsuccessful. Error: \" + e);\n+        }\n+\n+        //query tables\n+        String selectString = \"$selectString= TableName eq 'OfficeSupplies'\";\n+\n+        try {\n+            List<AzureTable> responseTables = tableServiceClient.queryTables(selectString);\n+        } catch (HttpResponseException e) {\n+            System.out.println(\"Table Query Unsuccessful. Error: \" + e);\n+        }\n+\n+\n+        //insert entity\n+        String tableName = \"OfficeSupplies\";\n+        String row = \"crayola markers\";\n+        String partitionKey = \"markers\";\n+        HashMap<String, Object> tableEntityProperties = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bc12c01dec1263ee177224ca1ec89ed8b4c504"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzI1MzkyOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDoyMTozM1rOGmENLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDoyMTozM1rOGmENLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2Nzk4MA==", "bodyText": "This is good. The service will update some properties on the entity such as the internal ETag value, so the customer should always save and reuse the return value, rather than the original tableEntity.\nActually that makes me think that it might be hard to explain that to customers. If they don't save this value and instead keep using the instance created on L57 to perform updates, that should fail because that instance doesn't have the ETag. This leads me to think that maybe our insertEntity call should just accept the row, partitionKey, and properties directly. That way the customer won't create a TableEntity instance that could get them into trouble later on.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r442567980", "createdAt": "2020-06-19T00:21:33Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientCodeSnippets.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.data.tables.implementation.models.TableServiceErrorException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+\n+public class TableClientCodeSnippets {\n+\n+    public static void methods() {\n+\n+        //create a tableServiceClient\n+        TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildClient();\n+\n+        //create TableClient\n+        TableClient tableClient = new TableClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .tableName(\"OfficeSupplies\")\n+            .buildClient();\n+\n+\n+        //create a table\n+        try {\n+            tableServiceClient.createTable(\"OfficeSupplies\");\n+        } catch (TableServiceErrorException e) {\n+            //use azure core errors? based on\n+            System.out.println(\"Create Table Unsuccessful. Error: \" + e);\n+        }\n+\n+        //delete  table\n+        try {\n+            tableServiceClient.deleteTable(\"OfficeSupplies\");\n+        } catch (TableServiceErrorException e) {\n+            System.out.println(\"Delete Table Unsuccessful. Error: \" + e);\n+        }\n+\n+        //query tables\n+        String selectString = \"$selectString= TableName eq 'OfficeSupplies'\";\n+\n+        try {\n+            List<AzureTable> responseTables = tableServiceClient.queryTables(selectString);\n+        } catch (HttpResponseException e) {\n+            System.out.println(\"Table Query Unsuccessful. Error: \" + e);\n+        }\n+\n+\n+        //insert entity\n+        String tableName = \"OfficeSupplies\";\n+        String row = \"crayola markers\";\n+        String partitionKey = \"markers\";\n+        HashMap<String, Object> tableEntityProperties = new HashMap<>();\n+        TableEntity tableEntity = new TableEntity(tableName, row, partitionKey, tableEntityProperties);\n+        try {\n+            tableEntity = tableClient.insertEntity(tableEntity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bc12c01dec1263ee177224ca1ec89ed8b4c504"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzI1NjEwOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDoyMjo0NlrOGmEOeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDowNDowNFrOGrMfow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2ODMxMw==", "bodyText": "Should there also be a way to get a single TableEntity by its row & partition key? e.g. @Nullable public TableEntity getEntity(String rowKey, String partitionKey)?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r442568313", "createdAt": "2020-06-19T00:22:46Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClient.java", "diffHunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@ServiceClient(\n+    builder = TableClientBuilder.class)\n+public class TableClient {\n+    String tableName;\n+\n+    TableClient(String tableName) {\n+        this.tableName = tableName;\n+    }\n+\n+    /**\n+     * Queries and returns entities in the given table using the select and filter strings\n+     *\n+     * @param selectString odata select string\n+     * @param filterString odata filter string\n+     * @return a list of the tables that fit the query\n+     */\n+    public List<TableEntity> queryEntity(String selectString, String filterString) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bc12c01dec1263ee177224ca1ec89ed8b4c504"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0NjY1OQ==", "bodyText": "Did we still want to resolve this comment?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r447946659", "createdAt": "2020-06-30T20:04:04Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClient.java", "diffHunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@ServiceClient(\n+    builder = TableClientBuilder.class)\n+public class TableClient {\n+    String tableName;\n+\n+    TableClient(String tableName) {\n+        this.tableName = tableName;\n+    }\n+\n+    /**\n+     * Queries and returns entities in the given table using the select and filter strings\n+     *\n+     * @param selectString odata select string\n+     * @param filterString odata filter string\n+     * @return a list of the tables that fit the query\n+     */\n+    public List<TableEntity> queryEntity(String selectString, String filterString) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2ODMxMw=="}, "originalCommit": {"oid": "89bc12c01dec1263ee177224ca1ec89ed8b4c504"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzI1NzIzOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDoyMzozM1rOGmEPNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDowNDowOVrOGrMf2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2ODUwMA==", "bodyText": "We should probably be consistent with the service and call these params rowKey and partitionKey everywhere.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r442568500", "createdAt": "2020-06-19T00:23:33Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClient.java", "diffHunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@ServiceClient(\n+    builder = TableClientBuilder.class)\n+public class TableClient {\n+    String tableName;\n+\n+    TableClient(String tableName) {\n+        this.tableName = tableName;\n+    }\n+\n+    /**\n+     * Queries and returns entities in the given table using the select and filter strings\n+     *\n+     * @param selectString odata select string\n+     * @param filterString odata filter string\n+     * @return a list of the tables that fit the query\n+     */\n+    public List<TableEntity> queryEntity(String selectString, String filterString) {\n+        return null;\n+    }\n+\n+    /**\n+     * insert a TableEntity with the given properties and return that TableEntity\n+     *\n+     * @param row                   the RowKey\n+     * @param partition             the PartitionKey\n+     * @param tableEntityProperties a map of properties for the TableEntity\n+     * @return the created TableEntity\n+     */\n+    public TableEntity insertEntity(String row, String partition, Map<String, Object> tableEntityProperties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bc12c01dec1263ee177224ca1ec89ed8b4c504"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0NjcxNA==", "bodyText": "Did we still want to resolve this comment?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r447946714", "createdAt": "2020-06-30T20:04:09Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClient.java", "diffHunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@ServiceClient(\n+    builder = TableClientBuilder.class)\n+public class TableClient {\n+    String tableName;\n+\n+    TableClient(String tableName) {\n+        this.tableName = tableName;\n+    }\n+\n+    /**\n+     * Queries and returns entities in the given table using the select and filter strings\n+     *\n+     * @param selectString odata select string\n+     * @param filterString odata filter string\n+     * @return a list of the tables that fit the query\n+     */\n+    public List<TableEntity> queryEntity(String selectString, String filterString) {\n+        return null;\n+    }\n+\n+    /**\n+     * insert a TableEntity with the given properties and return that TableEntity\n+     *\n+     * @param row                   the RowKey\n+     * @param partition             the PartitionKey\n+     * @param tableEntityProperties a map of properties for the TableEntity\n+     * @return the created TableEntity\n+     */\n+    public TableEntity insertEntity(String row, String partition, Map<String, Object> tableEntityProperties) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2ODUwMA=="}, "originalCommit": {"oid": "89bc12c01dec1263ee177224ca1ec89ed8b4c504"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzI2MjgyOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientCodeSnippets.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDoyNjo0NFrOGmESgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDowNDoxNFrOGrMgCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2OTM0NA==", "bodyText": "Would it make sense to have a version of deleteEntity that just takes the row and partitionKey parameters? To avoid forcing the customer to get a TableEntity object just to delete it from the table (also if every API call costs the customer money, making a delete go from 2 to 1 REST calls is important).\nUnlike the update/upsert operations, I don't think we need to provide an ETag in order to delete - I don't believe there is a potential concurrency problem there because we're not mutating properties on the row. If the service does require it then I guess there's nothing we can do here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r442569344", "createdAt": "2020-06-19T00:26:44Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientCodeSnippets.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.data.tables.implementation.models.TableServiceErrorException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+\n+public class TableClientCodeSnippets {\n+\n+    public static void methods() {\n+\n+        //create a tableServiceClient\n+        TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildClient();\n+\n+        //create TableClient\n+        TableClient tableClient = new TableClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .tableName(\"OfficeSupplies\")\n+            .buildClient();\n+\n+\n+        //create a table\n+        try {\n+            tableServiceClient.createTable(\"OfficeSupplies\");\n+        } catch (TableServiceErrorException e) {\n+            //use azure core errors? based on\n+            System.out.println(\"Create Table Unsuccessful. Error: \" + e);\n+        }\n+\n+        //delete  table\n+        try {\n+            tableServiceClient.deleteTable(\"OfficeSupplies\");\n+        } catch (TableServiceErrorException e) {\n+            System.out.println(\"Delete Table Unsuccessful. Error: \" + e);\n+        }\n+\n+        //query tables\n+        String selectString = \"$selectString= TableName eq 'OfficeSupplies'\";\n+\n+        try {\n+            List<AzureTable> responseTables = tableServiceClient.queryTables(selectString);\n+        } catch (HttpResponseException e) {\n+            System.out.println(\"Table Query Unsuccessful. Error: \" + e);\n+        }\n+\n+\n+        //insert entity\n+        String tableName = \"OfficeSupplies\";\n+        String row = \"crayola markers\";\n+        String partitionKey = \"markers\";\n+        HashMap<String, Object> tableEntityProperties = new HashMap<>();\n+        TableEntity tableEntity = new TableEntity(tableName, row, partitionKey, tableEntityProperties);\n+        try {\n+            tableEntity = tableClient.insertEntity(tableEntity);\n+        } catch (HttpResponseException e) {\n+            System.out.println(\"Insert Entity Unsuccessful. Error: \" + e);\n+        }\n+\n+\n+        //update entity\n+        tableEntity.addProperty(\"Seller\", \"Crayola\");\n+        try {\n+            tableClient.updateEntity(tableEntity);\n+        } catch (HttpResponseException e) {\n+            System.out.println(\"Update Entity Unsuccessful. Error: \" + e);\n+        }\n+\n+\n+        //upsert entity (where it is an insert or replace)\n+        tableEntity.addProperty(\"Price\", \"5\");\n+        try {\n+            tableClient.insertOrReplaceEntity(tableEntity);\n+        } catch (HttpResponseException e) {\n+            System.out.println(\"Upsert Entity Unsuccessful. Error: \" + e);\n+        }\n+\n+        //upsert entity (where it is an insert or merge)\n+        tableEntity.addProperty(\"Price\", \"5\");\n+        try {\n+            tableClient.insertOrMergeEntity(tableEntity);\n+        } catch (HttpResponseException e) {\n+            System.out.println(\"Upsert Entity Unsuccessful. Error: \" + e);\n+        }\n+\n+\n+        //delete entity\n+        try {\n+            tableClient.deleteEntity(tableEntity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bc12c01dec1263ee177224ca1ec89ed8b4c504"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0Njc2MA==", "bodyText": "Did we still want to resolve this comment?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r447946760", "createdAt": "2020-06-30T20:04:14Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientCodeSnippets.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.data.tables.implementation.models.TableServiceErrorException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+\n+public class TableClientCodeSnippets {\n+\n+    public static void methods() {\n+\n+        //create a tableServiceClient\n+        TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildClient();\n+\n+        //create TableClient\n+        TableClient tableClient = new TableClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .tableName(\"OfficeSupplies\")\n+            .buildClient();\n+\n+\n+        //create a table\n+        try {\n+            tableServiceClient.createTable(\"OfficeSupplies\");\n+        } catch (TableServiceErrorException e) {\n+            //use azure core errors? based on\n+            System.out.println(\"Create Table Unsuccessful. Error: \" + e);\n+        }\n+\n+        //delete  table\n+        try {\n+            tableServiceClient.deleteTable(\"OfficeSupplies\");\n+        } catch (TableServiceErrorException e) {\n+            System.out.println(\"Delete Table Unsuccessful. Error: \" + e);\n+        }\n+\n+        //query tables\n+        String selectString = \"$selectString= TableName eq 'OfficeSupplies'\";\n+\n+        try {\n+            List<AzureTable> responseTables = tableServiceClient.queryTables(selectString);\n+        } catch (HttpResponseException e) {\n+            System.out.println(\"Table Query Unsuccessful. Error: \" + e);\n+        }\n+\n+\n+        //insert entity\n+        String tableName = \"OfficeSupplies\";\n+        String row = \"crayola markers\";\n+        String partitionKey = \"markers\";\n+        HashMap<String, Object> tableEntityProperties = new HashMap<>();\n+        TableEntity tableEntity = new TableEntity(tableName, row, partitionKey, tableEntityProperties);\n+        try {\n+            tableEntity = tableClient.insertEntity(tableEntity);\n+        } catch (HttpResponseException e) {\n+            System.out.println(\"Insert Entity Unsuccessful. Error: \" + e);\n+        }\n+\n+\n+        //update entity\n+        tableEntity.addProperty(\"Seller\", \"Crayola\");\n+        try {\n+            tableClient.updateEntity(tableEntity);\n+        } catch (HttpResponseException e) {\n+            System.out.println(\"Update Entity Unsuccessful. Error: \" + e);\n+        }\n+\n+\n+        //upsert entity (where it is an insert or replace)\n+        tableEntity.addProperty(\"Price\", \"5\");\n+        try {\n+            tableClient.insertOrReplaceEntity(tableEntity);\n+        } catch (HttpResponseException e) {\n+            System.out.println(\"Upsert Entity Unsuccessful. Error: \" + e);\n+        }\n+\n+        //upsert entity (where it is an insert or merge)\n+        tableEntity.addProperty(\"Price\", \"5\");\n+        try {\n+            tableClient.insertOrMergeEntity(tableEntity);\n+        } catch (HttpResponseException e) {\n+            System.out.println(\"Upsert Entity Unsuccessful. Error: \" + e);\n+        }\n+\n+\n+        //delete entity\n+        try {\n+            tableClient.deleteEntity(tableEntity);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2OTM0NA=="}, "originalCommit": {"oid": "89bc12c01dec1263ee177224ca1ec89ed8b4c504"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzI2ODI5OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDoyOTo1NVrOGmEVzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDoyOTo1NVrOGmEVzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU3MDE4OA==", "bodyText": "Should we also expose the top OData parameter? I'm of the mind we should either have 3 params, one for each OData parameter, or only a single query parameter (leaning towards the second option since we can make a QueryBuilder to help create query strings).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r442570188", "createdAt": "2020-06-19T00:29:55Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientCodeSnippets.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.data.tables.implementation.models.TableServiceErrorException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+\n+public class TableClientCodeSnippets {\n+\n+    public static void methods() {\n+\n+        //create a tableServiceClient\n+        TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildClient();\n+\n+        //create TableClient\n+        TableClient tableClient = new TableClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .tableName(\"OfficeSupplies\")\n+            .buildClient();\n+\n+\n+        //create a table\n+        try {\n+            tableServiceClient.createTable(\"OfficeSupplies\");\n+        } catch (TableServiceErrorException e) {\n+            //use azure core errors? based on\n+            System.out.println(\"Create Table Unsuccessful. Error: \" + e);\n+        }\n+\n+        //delete  table\n+        try {\n+            tableServiceClient.deleteTable(\"OfficeSupplies\");\n+        } catch (TableServiceErrorException e) {\n+            System.out.println(\"Delete Table Unsuccessful. Error: \" + e);\n+        }\n+\n+        //query tables\n+        String selectString = \"$selectString= TableName eq 'OfficeSupplies'\";\n+\n+        try {\n+            List<AzureTable> responseTables = tableServiceClient.queryTables(selectString);\n+        } catch (HttpResponseException e) {\n+            System.out.println(\"Table Query Unsuccessful. Error: \" + e);\n+        }\n+\n+\n+        //insert entity\n+        String tableName = \"OfficeSupplies\";\n+        String row = \"crayola markers\";\n+        String partitionKey = \"markers\";\n+        HashMap<String, Object> tableEntityProperties = new HashMap<>();\n+        TableEntity tableEntity = new TableEntity(tableName, row, partitionKey, tableEntityProperties);\n+        try {\n+            tableEntity = tableClient.insertEntity(tableEntity);\n+        } catch (HttpResponseException e) {\n+            System.out.println(\"Insert Entity Unsuccessful. Error: \" + e);\n+        }\n+\n+\n+        //update entity\n+        tableEntity.addProperty(\"Seller\", \"Crayola\");\n+        try {\n+            tableClient.updateEntity(tableEntity);\n+        } catch (HttpResponseException e) {\n+            System.out.println(\"Update Entity Unsuccessful. Error: \" + e);\n+        }\n+\n+\n+        //upsert entity (where it is an insert or replace)\n+        tableEntity.addProperty(\"Price\", \"5\");\n+        try {\n+            tableClient.insertOrReplaceEntity(tableEntity);\n+        } catch (HttpResponseException e) {\n+            System.out.println(\"Upsert Entity Unsuccessful. Error: \" + e);\n+        }\n+\n+        //upsert entity (where it is an insert or merge)\n+        tableEntity.addProperty(\"Price\", \"5\");\n+        try {\n+            tableClient.insertOrMergeEntity(tableEntity);\n+        } catch (HttpResponseException e) {\n+            System.out.println(\"Upsert Entity Unsuccessful. Error: \" + e);\n+        }\n+\n+\n+        //delete entity\n+        try {\n+            tableClient.deleteEntity(tableEntity);\n+        } catch (HttpResponseException e) {\n+            System.out.println(\"Delete Entity Unsuccessful. Error: \" + e);\n+        }\n+\n+\n+        //query a table\n+        String filterString2 = \"$filter = Product eq 'markers'\";\n+        String selectString2 = \"$select = Seller eq 'crayola'\";\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bc12c01dec1263ee177224ca1ec89ed8b4c504"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzI3MDg5OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDozMTo0NVrOGmEXXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDozMTo0NVrOGmEXXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU3MDU4OA==", "bodyText": "$select is just a comma+space separated list of fields you want to return - this isn't a valid $select string. Maybe \"$select=Seller, Price\"?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r442570588", "createdAt": "2020-06-19T00:31:45Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientCodeSnippets.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.data.tables.implementation.models.TableServiceErrorException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+\n+public class TableClientCodeSnippets {\n+\n+    public static void methods() {\n+\n+        //create a tableServiceClient\n+        TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildClient();\n+\n+        //create TableClient\n+        TableClient tableClient = new TableClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .tableName(\"OfficeSupplies\")\n+            .buildClient();\n+\n+\n+        //create a table\n+        try {\n+            tableServiceClient.createTable(\"OfficeSupplies\");\n+        } catch (TableServiceErrorException e) {\n+            //use azure core errors? based on\n+            System.out.println(\"Create Table Unsuccessful. Error: \" + e);\n+        }\n+\n+        //delete  table\n+        try {\n+            tableServiceClient.deleteTable(\"OfficeSupplies\");\n+        } catch (TableServiceErrorException e) {\n+            System.out.println(\"Delete Table Unsuccessful. Error: \" + e);\n+        }\n+\n+        //query tables\n+        String selectString = \"$selectString= TableName eq 'OfficeSupplies'\";\n+\n+        try {\n+            List<AzureTable> responseTables = tableServiceClient.queryTables(selectString);\n+        } catch (HttpResponseException e) {\n+            System.out.println(\"Table Query Unsuccessful. Error: \" + e);\n+        }\n+\n+\n+        //insert entity\n+        String tableName = \"OfficeSupplies\";\n+        String row = \"crayola markers\";\n+        String partitionKey = \"markers\";\n+        HashMap<String, Object> tableEntityProperties = new HashMap<>();\n+        TableEntity tableEntity = new TableEntity(tableName, row, partitionKey, tableEntityProperties);\n+        try {\n+            tableEntity = tableClient.insertEntity(tableEntity);\n+        } catch (HttpResponseException e) {\n+            System.out.println(\"Insert Entity Unsuccessful. Error: \" + e);\n+        }\n+\n+\n+        //update entity\n+        tableEntity.addProperty(\"Seller\", \"Crayola\");\n+        try {\n+            tableClient.updateEntity(tableEntity);\n+        } catch (HttpResponseException e) {\n+            System.out.println(\"Update Entity Unsuccessful. Error: \" + e);\n+        }\n+\n+\n+        //upsert entity (where it is an insert or replace)\n+        tableEntity.addProperty(\"Price\", \"5\");\n+        try {\n+            tableClient.insertOrReplaceEntity(tableEntity);\n+        } catch (HttpResponseException e) {\n+            System.out.println(\"Upsert Entity Unsuccessful. Error: \" + e);\n+        }\n+\n+        //upsert entity (where it is an insert or merge)\n+        tableEntity.addProperty(\"Price\", \"5\");\n+        try {\n+            tableClient.insertOrMergeEntity(tableEntity);\n+        } catch (HttpResponseException e) {\n+            System.out.println(\"Upsert Entity Unsuccessful. Error: \" + e);\n+        }\n+\n+\n+        //delete entity\n+        try {\n+            tableClient.deleteEntity(tableEntity);\n+        } catch (HttpResponseException e) {\n+            System.out.println(\"Delete Entity Unsuccessful. Error: \" + e);\n+        }\n+\n+\n+        //query a table\n+        String filterString2 = \"$filter = Product eq 'markers'\";\n+        String selectString2 = \"$select = Seller eq 'crayola'\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bc12c01dec1263ee177224ca1ec89ed8b4c504"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzI3MzQ0OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDozMzoyNVrOGmEY2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDozODoxMFrOGmEdBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU3MDk3MA==", "bodyText": "I think this is actually a filter string - just need to update the name (String filterString) and the prefix ($filter=)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r442570970", "createdAt": "2020-06-19T00:33:25Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientCodeSnippets.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.data.tables.implementation.models.TableServiceErrorException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+\n+public class TableClientCodeSnippets {\n+\n+    public static void methods() {\n+\n+        //create a tableServiceClient\n+        TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildClient();\n+\n+        //create TableClient\n+        TableClient tableClient = new TableClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .tableName(\"OfficeSupplies\")\n+            .buildClient();\n+\n+\n+        //create a table\n+        try {\n+            tableServiceClient.createTable(\"OfficeSupplies\");\n+        } catch (TableServiceErrorException e) {\n+            //use azure core errors? based on\n+            System.out.println(\"Create Table Unsuccessful. Error: \" + e);\n+        }\n+\n+        //delete  table\n+        try {\n+            tableServiceClient.deleteTable(\"OfficeSupplies\");\n+        } catch (TableServiceErrorException e) {\n+            System.out.println(\"Delete Table Unsuccessful. Error: \" + e);\n+        }\n+\n+        //query tables\n+        String selectString = \"$selectString= TableName eq 'OfficeSupplies'\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bc12c01dec1263ee177224ca1ec89ed8b4c504"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU3MjAzNg==", "bodyText": "Also not sure if it's required, but all the example I see for the OData syntax seem to have no whitespace around the equals sign, so maybe go through and remove it in any of your OData filters and selects just to be consistent.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r442572036", "createdAt": "2020-06-19T00:38:10Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientCodeSnippets.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.data.tables.implementation.models.TableServiceErrorException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+\n+public class TableClientCodeSnippets {\n+\n+    public static void methods() {\n+\n+        //create a tableServiceClient\n+        TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildClient();\n+\n+        //create TableClient\n+        TableClient tableClient = new TableClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .tableName(\"OfficeSupplies\")\n+            .buildClient();\n+\n+\n+        //create a table\n+        try {\n+            tableServiceClient.createTable(\"OfficeSupplies\");\n+        } catch (TableServiceErrorException e) {\n+            //use azure core errors? based on\n+            System.out.println(\"Create Table Unsuccessful. Error: \" + e);\n+        }\n+\n+        //delete  table\n+        try {\n+            tableServiceClient.deleteTable(\"OfficeSupplies\");\n+        } catch (TableServiceErrorException e) {\n+            System.out.println(\"Delete Table Unsuccessful. Error: \" + e);\n+        }\n+\n+        //query tables\n+        String selectString = \"$selectString= TableName eq 'OfficeSupplies'\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU3MDk3MA=="}, "originalCommit": {"oid": "89bc12c01dec1263ee177224ca1ec89ed8b4c504"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzI4MTk5OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientAsyncCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDozOToxNFrOGmEd8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDozOToxNFrOGmEd8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU3MjI3NA==", "bodyText": "Pretty much all of my comments from the sync snippets would apply here as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r442572274", "createdAt": "2020-06-19T00:39:14Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientAsyncCodeSnippets.java", "diffHunk": "@@ -0,0 +1,131 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import reactor.core.publisher.Mono;\n+\n+import java.util.HashMap;\n+\n+\n+public class TableClientAsyncCodeSnippets {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bc12c01dec1263ee177224ca1ec89ed8b4c504"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzI4MjcwOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientAsyncCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDozOTozOFrOGmEeTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDozOTozOFrOGmEeTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU3MjM2NQ==", "bodyText": "This value is unused.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r442572365", "createdAt": "2020-06-19T00:39:38Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientAsyncCodeSnippets.java", "diffHunk": "@@ -0,0 +1,131 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import reactor.core.publisher.Mono;\n+\n+import java.util.HashMap;\n+\n+\n+public class TableClientAsyncCodeSnippets {\n+\n+\n+    public void AsyncSnippets() {\n+\n+        // Build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        // Add a table\n+        tableServiceAsyncClient.createTable(\"OfficeSupplies\").subscribe(Void -> {\n+            System.out.println(\"Table creation successful.\");\n+        }, error -> {\n+            System.out.println(\"There was an error creating the table. Error: \" + error);\n+        });\n+\n+\n+        // Delete a table\n+        tableServiceAsyncClient.deleteTable(\"OfficeSupplies\").subscribe(Void -> {\n+            System.out.println(\"Table deletion successful\");\n+        }, error -> {\n+            System.out.println(\"There was an error deleting the table. Error: \" + error);\n+        });\n+\n+\n+        // Query tables\n+        String selectString = \"$select= TableName eq 'OfficeSupplies'\";\n+        tableServiceAsyncClient.queryTables(selectString).subscribe(azureTable -> {\n+            System.out.println(azureTable.getName());\n+        }, error -> {\n+            System.out.println(\"There was an error querying the service. Error: \" + error);\n+        });\n+    }\n+\n+    public void InsertEntity() {\n+\n+        // Build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        TableAsyncClient tableAsyncClient = tableServiceAsyncClient.getClient(\"OfficeSupplies\");\n+        String tableName = \"OfficeSupplies\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bc12c01dec1263ee177224ca1ec89ed8b4c504"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTI2MzA1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos-table/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToyNzozMFrOGpsRgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToyNzozMFrOGpsRgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM3MDE3OQ==", "bodyText": "This file shouldn't be in sdk/cosmos", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r446370179", "createdAt": "2020-06-26T19:27:30Z", "author": {"login": "conniey"}, "path": "sdk/cosmos/azure-cosmos-table/pom.xml", "diffHunk": "@@ -0,0 +1,110 @@\n+<!--", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0584356722e2984f0d1758509b0bdead82516f3d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTI2NjA5OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToyODozMlrOGpsTVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToyODozMlrOGpsTVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM3MDY0NA==", "bodyText": "nit: unnecessary empty lines. There are several places where you have 2 empty lines instead of one.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r446370644", "createdAt": "2020-06-26T19:28:32Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "diffHunk": "@@ -0,0 +1,120 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.rest.PagedFlux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Map;\n+\n+@ServiceClient(\n+    builder = TableClientBuilder.class,\n+    isAsync = true)\n+public class TableAsyncClient {\n+    String tableName;\n+\n+\n+    TableAsyncClient(String tableName) {\n+        this.tableName = tableName;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0584356722e2984f0d1758509b0bdead82516f3d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTI3MDI5OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOTozMDowNlrOGpsV0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOTozMDowNlrOGpsV0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM3MTI4Mw==", "bodyText": "We don't align parameter names. If you edit your Settings, Code Style, Java, you can uncheck \"Align parameter description\" and \"Align thrown exception description\".\nhttps://www.jetbrains.com/help/idea/code-style-java.html#javadoc", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r446371283", "createdAt": "2020-06-26T19:30:06Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "diffHunk": "@@ -0,0 +1,120 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.rest.PagedFlux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Map;\n+\n+@ServiceClient(\n+    builder = TableClientBuilder.class,\n+    isAsync = true)\n+public class TableAsyncClient {\n+    String tableName;\n+\n+\n+    TableAsyncClient(String tableName) {\n+        this.tableName = tableName;\n+    }\n+\n+\n+    /**\n+     * returns the table associated with this table client\n+     *\n+     * @param tableName the name of the table\n+     * @return the table\n+     */\n+    public Mono<AzureTable> getTable(String tableName) {\n+        return null;\n+    }\n+\n+    /**\n+     * Queries and returns entities in the given table using the select and filter strings\n+     *\n+     * @param top          odata top parameter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0584356722e2984f0d1758509b0bdead82516f3d"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTI3MjYzOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientAsyncCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOTozMDo1M1rOGpsXOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOTozMDo1M1rOGpsXOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM3MTY0Mg==", "bodyText": "This file name should be TableServiceAsyncClientCodeSnippets.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r446371642", "createdAt": "2020-06-26T19:30:53Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientAsyncCodeSnippets.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import reactor.core.publisher.Mono;\n+\n+import java.util.HashMap;\n+\n+\n+public class TableClientAsyncCodeSnippets {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0584356722e2984f0d1758509b0bdead82516f3d"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTI4NzA0OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientAsyncCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOTozNjozOVrOGpsgdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOTozNjozOVrOGpsgdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM3NDAwNw==", "bodyText": "'null', 'null' is weird to see as the first parameters. I usually organize my parameters by how important or mandatory they are. In this case, top and select are options. How about an options class?\nIs filterString mandatory?\nclass TableQueryOptions {\n    TableQueryOptions setTop(int top);\n    TableQueryOptions setSelect(String select);\n}\n\nclass TableServiceAsyncClient {\n    PagedFlux<TableEntity> queryTables(String filter);\n    PagedFlux<TableEntity> queryTables(String filter, TableQueryOptions queryOptions);\n}\nSo your snippet would look like:\ntableServiceAsyncClient.queryTables(filterString);", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r446374007", "createdAt": "2020-06-26T19:36:39Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientAsyncCodeSnippets.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import reactor.core.publisher.Mono;\n+\n+import java.util.HashMap;\n+\n+\n+public class TableClientAsyncCodeSnippets {\n+\n+\n+    public void AsyncSnippets() {\n+\n+        // Build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        // Add a table\n+        tableServiceAsyncClient.createTable(\"OfficeSupplies\").subscribe(Void -> {\n+            System.out.println(\"Table creation successful.\");\n+        }, error -> {\n+            System.out.println(\"There was an error creating the table. Error: \" + error);\n+        });\n+\n+\n+        // Delete a table\n+        tableServiceAsyncClient.deleteTable(\"OfficeSupplies\").subscribe(Void -> {\n+            System.out.println(\"Table deletion successful\");\n+        }, error -> {\n+            System.out.println(\"There was an error deleting the table. Error: \" + error);\n+        });\n+\n+\n+        // Query tables\n+        String filterString = \"$filter=TableName eq 'OfficeSupplies'\";\n+        tableServiceAsyncClient.queryTables(null, null, filterString).subscribe(azureTable -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0584356722e2984f0d1758509b0bdead82516f3d"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTI5MDk2OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientAsyncCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOTozODoyMFrOGpsjAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOTozODoyMFrOGpsjAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM3NDY1Nw==", "bodyText": "Is tableEntityProperties mandatory? If not, would we want an overload that doesn't take this HashMap?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r446374657", "createdAt": "2020-06-26T19:38:20Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientAsyncCodeSnippets.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import reactor.core.publisher.Mono;\n+\n+import java.util.HashMap;\n+\n+\n+public class TableClientAsyncCodeSnippets {\n+\n+\n+    public void AsyncSnippets() {\n+\n+        // Build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        // Add a table\n+        tableServiceAsyncClient.createTable(\"OfficeSupplies\").subscribe(Void -> {\n+            System.out.println(\"Table creation successful.\");\n+        }, error -> {\n+            System.out.println(\"There was an error creating the table. Error: \" + error);\n+        });\n+\n+\n+        // Delete a table\n+        tableServiceAsyncClient.deleteTable(\"OfficeSupplies\").subscribe(Void -> {\n+            System.out.println(\"Table deletion successful\");\n+        }, error -> {\n+            System.out.println(\"There was an error deleting the table. Error: \" + error);\n+        });\n+\n+\n+        // Query tables\n+        String filterString = \"$filter=TableName eq 'OfficeSupplies'\";\n+        tableServiceAsyncClient.queryTables(null, null, filterString).subscribe(azureTable -> {\n+            System.out.println(azureTable.getName());\n+        }, error -> {\n+            System.out.println(\"There was an error querying the service. Error: \" + error);\n+        });\n+    }\n+\n+    public void InsertEntity() {\n+\n+        // Build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        TableAsyncClient tableAsyncClient = tableServiceAsyncClient.getClient(\"OfficeSupplies\");\n+        String row = \"crayolaMarkers\";\n+        String partitionKey = \"markers\";\n+        HashMap<String, Object> tableEntityProperties = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0584356722e2984f0d1758509b0bdead82516f3d"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODA3OTg2OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableServiceClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMToxNDo0MlrOGqoEEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMToxNDo0MlrOGqoEEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0OTc3Ng==", "bodyText": "For consistency, I would probably make this method simply public AzureTable getTable(String name), and add a getClient() method on the AzureTable class.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r447349776", "createdAt": "2020-06-30T01:14:42Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableServiceClient.java", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+\n+import java.util.List;\n+\n+@ServiceClient(\n+    builder = TableServiceClientBuilder.class)\n+public class TableServiceClient {\n+\n+    TableServiceClient() {\n+    }\n+\n+    /**\n+     * creates the table with the given name.  If a table with the same name already exists, the operation fails.\n+     *\n+     * @param name the name of the table to create\n+     */\n+    public AzureTable createTable(String name) {\n+        return null;\n+    }\n+\n+    /**\n+     * deletes the given table. Will error if the table doesn't exists or cannot be found with the given name.\n+     *\n+     * @param name\n+     */\n+    public void deleteTable(String name) {\n+    }\n+\n+    /**\n+     * retrieves the table client for the provided table or creates one if it doesn't exist\n+     *\n+     * @param name the name of the table\n+     * @return associated TableClient\n+     */\n+    public TableClient getTableClient(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64ca9dcfa23dc6d0f9c24714fe6e50e6dbe6358f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODA4NTAyOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMToxNzoyMFrOGqoG_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMToxNzoyMFrOGqoG_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM1MDUyNQ==", "bodyText": "I don't think this has value, since the only things we can get from an AzureTable are its name, which we already have (tableName) and a TableClient for the table, which this is. I would just remove this method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r447350525", "createdAt": "2020-06-30T01:17:20Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClient.java", "diffHunk": "@@ -0,0 +1,112 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@ServiceClient(\n+    builder = TableClientBuilder.class)\n+public class TableClient {\n+    String tableName;\n+\n+    TableClient(String tableName) {\n+        this.tableName = tableName;\n+    }\n+\n+    /**\n+     * returns the table associated with this TableClient\n+     *\n+     * @param tableName name of the table\n+     * @return the AzureTable\n+     */\n+    public AzureTable getTable(String tableName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64ca9dcfa23dc6d0f9c24714fe6e50e6dbe6358f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODA5MzUyOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMToyMTo0MlrOGqoL2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMToyMTo0MlrOGqoL2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM1MTc3MA==", "bodyText": "I definitely see the value in insertEntity(TableEntity), and I -think- I could be convinced that we should have a convenience method that takes all the properties needed to create a TableEntity (i.e. insertEntity(row, partition, properties)), but I'm not clear if having a method that just takes row and partition without any properties, just to insert an empty entity in the table, is actually useful to the consumer.\nI think I would start with having just a single insertEntity(TableEntity) method, and we can always add more later if UX study indicates it would be useful, but we can't take them away once they ship.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r447351770", "createdAt": "2020-06-30T01:21:42Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClient.java", "diffHunk": "@@ -0,0 +1,112 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@ServiceClient(\n+    builder = TableClientBuilder.class)\n+public class TableClient {\n+    String tableName;\n+\n+    TableClient(String tableName) {\n+        this.tableName = tableName;\n+    }\n+\n+    /**\n+     * returns the table associated with this TableClient\n+     *\n+     * @param tableName name of the table\n+     * @return the AzureTable\n+     */\n+    public AzureTable getTable(String tableName) {\n+        return null;\n+    }\n+\n+    /**\n+     * Queries and returns entities in the given table using the select and filter strings\n+     *\n+     * @param top odata top integer\n+     * @param selectString odata select string\n+     * @param filterString odata filter string\n+     * @return a list of the tables that fit the query\n+     */\n+    public List<TableEntity> queryEntity(Integer top, String selectString, String filterString) {\n+        return null;\n+    }\n+\n+    /**\n+     * insert a TableEntity with the given properties and return that TableEntity\n+     *\n+     * @param row the RowKey\n+     * @param partition the PartitionKey\n+     * @param tableEntityProperties a map of properties for the TableEntity\n+     * @return the created TableEntity\n+     */\n+    public TableEntity insertEntity(String row, String partition, Map<String, Object> tableEntityProperties) {\n+        return new TableEntity();\n+    }\n+\n+    /**\n+     * insert a TableEntity with the given row and partition key and return that TableEntity\n+     * @param row row key\n+     * @param partition partition key\n+     * @return the created TableEntity\n+     */\n+    public TableEntity insertEntity(String row, String partition) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64ca9dcfa23dc6d0f9c24714fe6e50e6dbe6358f"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODA5NzIzOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableServiceClientCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMToyMzo0NFrOGqoN_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMToyMzo0NFrOGqoN_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM1MjMxOA==", "bodyText": "Should assign this to a result value AzureTable officeSuppliesTable = ...", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r447352318", "createdAt": "2020-06-30T01:23:44Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableServiceClientCodeSnippets.java", "diffHunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.data.tables.implementation.models.TableServiceErrorException;\n+\n+import java.util.List;\n+\n+public class TableServiceClientCodeSnippets {\n+\n+    public static void methods() {\n+\n+        //create a tableServiceClient\n+        TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildClient();\n+\n+        //create TableClient\n+        TableClient tableClient = new TableClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .tableName(\"OfficeSupplies\")\n+            .buildClient();\n+\n+        //create a table\n+        try {\n+            tableServiceClient.createTable(\"OfficeSupplies\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64ca9dcfa23dc6d0f9c24714fe6e50e6dbe6358f"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODEwNzQ0OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableServiceClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMToyODoyOFrOGqoTlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMToyODoyOFrOGqoTlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM1Mzc0OQ==", "bodyText": "Should we have a version of this method that takes an AzureTable object as well? Not sure myself, open for debate.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r447353749", "createdAt": "2020-06-30T01:28:28Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableServiceClient.java", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+\n+import java.util.List;\n+\n+@ServiceClient(\n+    builder = TableServiceClientBuilder.class)\n+public class TableServiceClient {\n+\n+    TableServiceClient() {\n+    }\n+\n+    /**\n+     * creates the table with the given name.  If a table with the same name already exists, the operation fails.\n+     *\n+     * @param name the name of the table to create\n+     */\n+    public AzureTable createTable(String name) {\n+        return null;\n+    }\n+\n+    /**\n+     * deletes the given table. Will error if the table doesn't exists or cannot be found with the given name.\n+     *\n+     * @param name\n+     */\n+    public void deleteTable(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64ca9dcfa23dc6d0f9c24714fe6e50e6dbe6358f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTU0MTM4OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzo0MToyNVrOGrvdkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzo0MToyNVrOGrvdkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUxOTU3MA==", "bodyText": "Should be private", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r448519570", "createdAt": "2020-07-01T17:41:25Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "diffHunk": "@@ -0,0 +1,105 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.rest.PagedFlux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Map;\n+\n+/**\n+ * class for the table async client\n+ */\n+@ServiceClient(\n+    builder = TableClientBuilder.class,\n+    isAsync = true)\n+public class TableAsyncClient {\n+    final String tableName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50406a679364125b3a827777126355a92fe0cfc1"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTU0ODAyOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzo0MzozMVrOGrvh1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzo1ODo1NlrOGuJqFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyMDY2MA==", "bodyText": "I don't think any storage packages are imported in this PR. So, this dependency can be removed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r448520660", "createdAt": "2020-07-01T17:43:31Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/pom.xml", "diffHunk": "@@ -42,6 +42,47 @@ Licensed under the MIT License.\n       <artifactId>azure-core</artifactId>\n       <version>1.5.1</version> <!-- {x-version-update;com.azure:azure-core;dependency} -->\n     </dependency>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-storage-common</artifactId>\n+      <version>12.7.0</version>  <!-- {x-version-update;com.azure:azure-storage-common;dependency} -->\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50406a679364125b3a827777126355a92fe0cfc1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0NTkxMA==", "bodyText": "Is this dependency required?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r451045910", "createdAt": "2020-07-07T17:58:56Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/pom.xml", "diffHunk": "@@ -42,6 +42,47 @@ Licensed under the MIT License.\n       <artifactId>azure-core</artifactId>\n       <version>1.5.1</version> <!-- {x-version-update;com.azure:azure-core;dependency} -->\n     </dependency>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-storage-common</artifactId>\n+      <version>12.7.0</version>  <!-- {x-version-update;com.azure:azure-storage-common;dependency} -->\n+    </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyMDY2MA=="}, "originalCommit": {"oid": "50406a679364125b3a827777126355a92fe0cfc1"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTU2OTEwOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzo1MDowMFrOGrvvDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzo1MDowMFrOGrvvDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyNDA0Ng==", "bodyText": "Should this return Mono<TableEntity> instead? Since insertEntity() is returning the inserted entity in the API above. Similarly, mergeEntity, insertOrReplaceEntity and insertOrReplaceEntity should all return the TableEntity that is resulting from these operations.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r448524046", "createdAt": "2020-07-01T17:50:00Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "diffHunk": "@@ -0,0 +1,105 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.rest.PagedFlux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Map;\n+\n+/**\n+ * class for the table async client\n+ */\n+@ServiceClient(\n+    builder = TableClientBuilder.class,\n+    isAsync = true)\n+public class TableAsyncClient {\n+    final String tableName;\n+\n+    TableAsyncClient(String tableName) {\n+        this.tableName = tableName;\n+    }\n+\n+    /**\n+     * Queries and returns entities in the given table using the select and filter strings\n+     *\n+     * @param queryOptions the odata query object\n+     * @return a paged flux of all the entity which fit this criteria\n+     */\n+    public PagedFlux<TableEntity> queryEntity(QueryOptions queryOptions) {\n+        return null;\n+    }\n+\n+    /**\n+     * insert a TableEntity with the given properties and return that TableEntity\n+     *\n+     * @param row the RowKey\n+     * @param partition the PartitionKey\n+     * @param tableEntityProperties a map of properties for the TableEntity\n+     * @return the created TableEntity\n+     */\n+    public Mono<TableEntity> insertEntity(String row, String partition, Map<String, Object> tableEntityProperties) {\n+        return null;\n+    }\n+\n+    /**\n+     * insert a new entity into the Table attached to this client\n+     *\n+     * @param tableEntity the entity in which to insert\n+     * @return the inserted TableEntity\n+     */\n+    public Mono<TableEntity> insertEntity(TableEntity tableEntity) {\n+        return null;\n+    }\n+\n+    /**\n+     * deletes the given entity\n+     *\n+     * @param tableEntity entity to delete\n+     * @return a mono void\n+     */\n+    public Mono<Void> deleteEntity(TableEntity tableEntity) {\n+        return Mono.empty();\n+    }\n+\n+    /**\n+     * updates the provided TableEntity\n+     *\n+     * @param tableEntity the TableEntity to update\n+     * @return a mono void\n+     */\n+    public Mono<Void> updateEntity(TableEntity tableEntity) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50406a679364125b3a827777126355a92fe0cfc1"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTU4NTc0OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzo1NTowOVrOGrv5kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzo1NTowOVrOGrv5kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyNjczOA==", "bodyText": "Same comment as async client - these methods should return TableEntity.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r448526738", "createdAt": "2020-07-01T17:55:09Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClient.java", "diffHunk": "@@ -0,0 +1,112 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+\n+import java.util.List;\n+import java.util.Map;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * sync client for table operations\n+ */\n+@ServiceClient(\n+    builder = TableClientBuilder.class)\n+public class TableClient {\n+    final String tableName;\n+\n+    TableClient(String tableName) {\n+        this.tableName = tableName;\n+    }\n+\n+    /**\n+     * Queries and returns entities in the given table using the select and filter strings\n+     *\n+     * @param queryOptions the odata query object\n+     * @return a list of the tables that fit the query\n+     */\n+    public List<TableEntity> queryEntity(QueryOptions queryOptions) {\n+        return null;\n+    }\n+\n+    /**\n+     * insert a TableEntity with the given properties and return that TableEntity\n+     *\n+     * @param row the RowKey\n+     * @param partition the PartitionKey\n+     * @param tableEntityProperties a map of properties for the TableEntity\n+     * @return the created TableEntity\n+     */\n+    public TableEntity insertEntity(String row, String partition, Map<String, Object> tableEntityProperties) {\n+        return new TableEntity();\n+    }\n+\n+    /**\n+     * insert a new entity into the Table attached to this client\n+     *\n+     * @param tableEntity the entity in which to insert\n+     * @return the inserted TableEntity\n+     */\n+    public TableEntity insertEntity(TableEntity tableEntity) {\n+        return tableEntity;\n+    }\n+\n+    /**\n+     * deletes the given entity\n+     *\n+     * @param tableEntity entity to delete\n+     */\n+    public void deleteEntity(TableEntity tableEntity) {\n+    }\n+\n+    /**\n+     * deletes the given entity\n+     *\n+     * @param partitionKey the partition key\n+     * @param rowKey the row key\n+     */\n+    public void deleteEntity(String partitionKey, String rowKey) {\n+    }\n+\n+\n+    /**\n+     * merges the given entity with the entity which exists on the storage account\n+     *\n+     * @param tableEntity the entity with which to merge\n+     */\n+    public void mergeEntity(TableEntity tableEntity) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5908f7edd09d334746c64b4f9009107a8372ecab"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTU4OTE0OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzo1NjowMFrOGrv7ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzo1NjowMFrOGrv7ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyNzIyNw==", "bodyText": "This should be public.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r448527227", "createdAt": "2020-07-01T17:56:00Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientBuilder.java", "diffHunk": "@@ -0,0 +1,66 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+\n+/**\n+ * builds table client\n+ */\n+@ServiceClientBuilder(serviceClients = {TableClient.class, TableAsyncClient.class})\n+public class TableClientBuilder {\n+    String connectionString;\n+    String tableName;\n+\n+    /**\n+     * Sets the connection string to help build the client\n+     *\n+     * @param connectionString the connection string to the storage account\n+     * @return the TableClientBuilder\n+     */\n+    public TableClientBuilder connectionString(String connectionString) {\n+        this.connectionString = connectionString;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the table name to help build the client\n+     *\n+     * @param tableName name of the table for which the client is created for\n+     * @return the TableClientBuilder\n+     */\n+    public TableClientBuilder tableName(String tableName) {\n+        this.tableName = tableName;\n+        return this;\n+    }\n+\n+    /**\n+     * builds a sync tableClient\n+     *\n+     * @return a sync tableClient\n+     */\n+    public TableClient buildClient() {\n+        return new TableClient(tableName);\n+    }\n+\n+    /**\n+     * builds an async tableClient\n+     *\n+     * @return an aysnc tableClient\n+     */\n+    public TableAsyncClient buildAsyncClient() {\n+        return new TableAsyncClient(tableName);\n+    }\n+\n+    TableClientBuilder() {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5908f7edd09d334746c64b4f9009107a8372ecab"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTU5MTAyOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzo1NjozMVrOGrv8kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzo1NjozMVrOGrv8kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyNzUwNw==", "bodyText": "Builder should not have getter methods.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r448527507", "createdAt": "2020-07-01T17:56:31Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientBuilder.java", "diffHunk": "@@ -0,0 +1,66 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+\n+/**\n+ * builds table client\n+ */\n+@ServiceClientBuilder(serviceClients = {TableClient.class, TableAsyncClient.class})\n+public class TableClientBuilder {\n+    String connectionString;\n+    String tableName;\n+\n+    /**\n+     * Sets the connection string to help build the client\n+     *\n+     * @param connectionString the connection string to the storage account\n+     * @return the TableClientBuilder\n+     */\n+    public TableClientBuilder connectionString(String connectionString) {\n+        this.connectionString = connectionString;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the table name to help build the client\n+     *\n+     * @param tableName name of the table for which the client is created for\n+     * @return the TableClientBuilder\n+     */\n+    public TableClientBuilder tableName(String tableName) {\n+        this.tableName = tableName;\n+        return this;\n+    }\n+\n+    /**\n+     * builds a sync tableClient\n+     *\n+     * @return a sync tableClient\n+     */\n+    public TableClient buildClient() {\n+        return new TableClient(tableName);\n+    }\n+\n+    /**\n+     * builds an async tableClient\n+     *\n+     * @return an aysnc tableClient\n+     */\n+    public TableAsyncClient buildAsyncClient() {\n+        return new TableAsyncClient(tableName);\n+    }\n+\n+    TableClientBuilder() {\n+    }\n+\n+    /**\n+     * gets the connection string\n+     * @return the connection string\n+     */\n+    public String getConnectionString(){\n+        return this.connectionString;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5908f7edd09d334746c64b4f9009107a8372ecab"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTcwNDI0OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableServiceClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODozMzoyN1rOGrxENQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNTo1OTo0MFrOGtdftg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NTg0NQ==", "bodyText": "This should take the async client as param.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r448545845", "createdAt": "2020-07-01T18:33:27Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableServiceClient.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+\n+import java.util.List;\n+\n+/**\n+ * client for table service\n+ */\n+@ServiceClient(\n+    builder = TableServiceClientBuilder.class)\n+public class TableServiceClient {\n+\n+    TableServiceClient() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8166eab6f82a5bdea05795ba6a3a135f60ea8e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMyMjM1OA==", "bodyText": "This is just a skeleton of my API in order for it to compile so I will add this implementation in future PRs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r450322358", "createdAt": "2020-07-06T15:59:40Z", "author": {"login": "eboyd23"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableServiceClient.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+\n+import java.util.List;\n+\n+/**\n+ * client for table service\n+ */\n+@ServiceClient(\n+    builder = TableServiceClientBuilder.class)\n+public class TableServiceClient {\n+\n+    TableServiceClient() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NTg0NQ=="}, "originalCommit": {"oid": "4c8166eab6f82a5bdea05795ba6a3a135f60ea8e"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTcxNDQ0OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableServiceAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODozNjozMVrOGrxKew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODozNjozMVrOGrxKew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NzQ1MQ==", "bodyText": "This should return Mono<TableAsyncClient>", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r448547451", "createdAt": "2020-07-01T18:36:31Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableServiceAsyncClient.java", "diffHunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.rest.PagedFlux;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * async client for account operations\n+ */\n+@ServiceClient(\n+    builder = TableServiceClientBuilder.class,\n+    isAsync = true)\n+public class TableServiceAsyncClient {\n+\n+    TableServiceAsyncClient() {\n+    }\n+\n+    /**\n+     * creates the table with the given name.  If a table with the same name already exists, the operation fails.\n+     *\n+     * @param name the name of the table to create\n+     * @return a table client connected to the given table\n+     */\n+    public Mono<AzureTable> createTable(String name) {\n+        return null;\n+    }\n+\n+    /**\n+     * deletes the given table. Will error if the table doesn't exists or cannot be found with the given name.\n+     *\n+     * @param name the name of the table to delete\n+     * @return mono void\n+     */\n+    public Mono<Void> deleteTable(String name) {\n+        return Mono.empty();\n+    }\n+\n+    /**\n+     * deletes the given table. Will error if the table doesn't exists or cannot be found with the given name.\n+     *\n+     * @param azureTable the table to delete\n+     * @return mono void\n+     */\n+    public Mono<Void> deleteTable(AzureTable azureTable) {\n+        return Mono.empty();\n+    }\n+\n+    /**\n+     * retrieves the table client for the provided table or creates one if it doesn't exist\n+     *\n+     * @param name the name of the table\n+     * @return associated TableClient\n+     */\n+    public Mono<TableClient> getTableClient(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8166eab6f82a5bdea05795ba6a3a135f60ea8e"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTcxOTE0OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableServiceClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODozODowNVrOGrxNcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODozODowNVrOGrxNcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0ODIxMQ==", "bodyText": "getTable() method is missing here but the async client has this method. Also, the sync service client doesn't have getTableClient() method that async service client has.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r448548211", "createdAt": "2020-07-01T18:38:05Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableServiceClient.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+\n+import java.util.List;\n+\n+/**\n+ * client for table service\n+ */\n+@ServiceClient(\n+    builder = TableServiceClientBuilder.class)\n+public class TableServiceClient {\n+\n+    TableServiceClient() {\n+    }\n+\n+    /**\n+     * creates the table with the given name.  If a table with the same name already exists, the operation fails.\n+     *\n+     * @param name the name of the table to create\n+     * @return AzureTable of the created table\n+     */\n+    public AzureTable createTable(String name) {\n+        return null;\n+    }\n+\n+    /**\n+     * deletes the given table. Will error if the table doesn't exists or cannot be found with the given name.\n+     *\n+     * @param name the name of the table to be deleted\n+     */\n+    public void deleteTable(String name) {\n+    }\n+\n+    /**\n+     * deletes the given table. Will error if the table doesn't exists or cannot be found with the given name.\n+     *\n+     * @param azureTable the table to be deleted\n+     */\n+    public void deleteTable(AzureTable azureTable) {\n+    }\n+\n+    /**\n+     * gets a given table by name\n+     *\n+     * @param name the name of the table\n+     * @return associated azure table object\n+     */\n+    public AzureTable getTable(String name) {\n+        return null;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8166eab6f82a5bdea05795ba6a3a135f60ea8e"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTczMjUwOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableServiceAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODo0MjoyMlrOGrxVyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODo0MjoyMlrOGrxVyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1MDM0Ng==", "bodyText": "Consider naming this as getTableAsyncClient(). Also, what's the difference between this getClient() and getTableClient() above?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r448550346", "createdAt": "2020-07-01T18:42:22Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableServiceAsyncClient.java", "diffHunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.rest.PagedFlux;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * async client for account operations\n+ */\n+@ServiceClient(\n+    builder = TableServiceClientBuilder.class,\n+    isAsync = true)\n+public class TableServiceAsyncClient {\n+\n+    TableServiceAsyncClient() {\n+    }\n+\n+    /**\n+     * creates the table with the given name.  If a table with the same name already exists, the operation fails.\n+     *\n+     * @param name the name of the table to create\n+     * @return a table client connected to the given table\n+     */\n+    public Mono<AzureTable> createTable(String name) {\n+        return null;\n+    }\n+\n+    /**\n+     * deletes the given table. Will error if the table doesn't exists or cannot be found with the given name.\n+     *\n+     * @param name the name of the table to delete\n+     * @return mono void\n+     */\n+    public Mono<Void> deleteTable(String name) {\n+        return Mono.empty();\n+    }\n+\n+    /**\n+     * deletes the given table. Will error if the table doesn't exists or cannot be found with the given name.\n+     *\n+     * @param azureTable the table to delete\n+     * @return mono void\n+     */\n+    public Mono<Void> deleteTable(AzureTable azureTable) {\n+        return Mono.empty();\n+    }\n+\n+    /**\n+     * retrieves the table client for the provided table or creates one if it doesn't exist\n+     *\n+     * @param name the name of the table\n+     * @return associated TableClient\n+     */\n+    public Mono<TableClient> getTableClient(String name) {\n+        return null;\n+    }\n+\n+    /**\n+     * query all the tables under the storage account and return them\n+     *\n+     * @param queryOptions the odata query object\n+     * @return a flux of the tables that met this criteria\n+     */\n+    public PagedFlux<AzureTable> queryTables(QueryOptions queryOptions) {\n+        return null;\n+    }\n+\n+\n+    /**\n+     * gets the client for this table\n+     *\n+     * @param tableName the table to get the client from\n+     * @return the table client\n+     */\n+    public TableAsyncClient getClient(String tableName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8166eab6f82a5bdea05795ba6a3a135f60ea8e"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTc0NTcwOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/samples/java/TableServiceAsyncClientCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODo0Njo0M1rOGrxeSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODo0Njo0M1rOGrxeSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1MjUyMg==", "bodyText": "Consider adding code snippets for merge(), insertOrMerge and  insertOrReplace operations too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r448552522", "createdAt": "2020-07-01T18:46:43Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/src/samples/java/TableServiceAsyncClientCodeSnippets.java", "diffHunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * async code snippets for the table service\n+ */\n+public class TableServiceAsyncClientCodeSnippets {\n+    final ClientLogger logger = new ClientLogger(\"TableServiceAsyncClientCodeSnippets\");\n+\n+    /**\n+     * all methods on tables in the Tables SDK (Add, Delete, Query)\n+     */\n+    public void TableLevelMethods() {\n+\n+        // Build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        // Add a table\n+        tableServiceAsyncClient.createTable(\"OfficeSupplies\").subscribe(Void -> {\n+            logger.info(\"Table creation successful.\");\n+        }, error -> {\n+            logger.error(\"There was an error creating the table. Error: \" + error);\n+        });\n+\n+\n+        // Delete a table\n+        tableServiceAsyncClient.deleteTable(\"OfficeSupplies\").subscribe(Void -> {\n+            logger.info(\"Table deletion successful\");\n+        }, error -> {\n+            logger.error(\"There was an error deleting the table. Error: \" + error);\n+        });\n+\n+\n+        // Query tables\n+        QueryOptions queryOptions = new QueryOptions();\n+        queryOptions.setFilter(\"TableName eq OfficeSupplies\");\n+        tableServiceAsyncClient.queryTables(queryOptions).subscribe(azureTable -> {\n+            logger.info(azureTable.getName());\n+        }, error -> {\n+            logger.error(\"There was an error querying the service. Error: \" + error);\n+        });\n+    }\n+\n+    /**\n+     * insert entity code snippet\n+     */\n+    private void insertEntity() {\n+\n+        // Build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        TableAsyncClient tableAsyncClient = tableServiceAsyncClient.getClient(\"OfficeSupplies\");\n+        String row = \"crayolaMarkers\";\n+        String partitionKey = \"markers\";\n+\n+        tableAsyncClient.insertEntity(new TableEntity(row, partitionKey, null)).subscribe(tableEntity -> {\n+            logger.info(\"Insert Entity Successful. Entity: \" + tableEntity);\n+        }, error -> {\n+            logger.error(\"There was an error inserting the Entity. Error: \" + error);\n+        });\n+    }\n+\n+    /**\n+     * delete entity code snippet\n+     */\n+    private void deleteEntity() {\n+\n+        // Build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        TableAsyncClient tableAsyncClient = tableServiceAsyncClient.getClient(\"OfficeSupplies\");\n+        QueryOptions queryOptions = new QueryOptions();\n+        queryOptions.setFilter(\"RowKey eq crayolaMarkers\");\n+\n+        tableAsyncClient.queryEntity(queryOptions).flatMap(tableEntity -> {\n+            logger.info(\"Table Entity: \" + tableEntity);\n+            Mono<Void> deleteEntityMono = tableAsyncClient.deleteEntity(tableEntity);\n+            return deleteEntityMono;\n+        }).subscribe(Void -> {\n+            logger.info(\"Delete Entity Successful.\");\n+        }, error -> {\n+            logger.error(\"There was an error deleting the Entity. Error: \" + error);\n+        });\n+    }\n+\n+    /**\n+     * update entity code snippet\n+     */\n+    private void updateEntity() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8166eab6f82a5bdea05795ba6a3a135f60ea8e"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTc1NzY5OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/samples/java/TableServiceClientCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODo1MDo0MVrOGrxltw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODo1MDo0MVrOGrxltw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1NDQyMw==", "bodyText": "It would be easier to follow the code samples if you split the table service and table entity operations into separate methods like you have for the snippets for async client above.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r448554423", "createdAt": "2020-07-01T18:50:41Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/src/samples/java/TableServiceClientCodeSnippets.java", "diffHunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.data.tables.implementation.models.TableServiceErrorException;\n+import java.util.List;\n+\n+/**\n+ * sync code snippets for the table service\n+ */\n+public class TableServiceClientCodeSnippets {\n+\n+    /**\n+     * all the functionality of the Tables SDK written sync\n+     */\n+    public static void methods() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8166eab6f82a5bdea05795ba6a3a135f60ea8e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTc2OTYwOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODo1NDoyN1rOGrxs3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzo0ODoxNFrOGvR-WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1NjI1NA==", "bodyText": "Should we support exists(TableEntity) method to check the existence of a table entity to make it easier for the user?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r448556254", "createdAt": "2020-07-01T18:54:27Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "diffHunk": "@@ -0,0 +1,113 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.rest.PagedFlux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Map;\n+\n+/**\n+ * class for the table async client\n+ */\n+@ServiceClient(\n+    builder = TableClientBuilder.class,\n+    isAsync = true)\n+public class TableAsyncClient {\n+    private final String tableName;\n+\n+    TableAsyncClient(String tableName) {\n+        this.tableName = tableName;\n+    }\n+\n+    /**\n+     * Queries and returns entities in the given table using the select and filter strings\n+     *\n+     * @param queryOptions the odata query object\n+     * @return a paged flux of all the entity which fit this criteria\n+     */\n+    public PagedFlux<TableEntity> queryEntity(QueryOptions queryOptions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8166eab6f82a5bdea05795ba6a3a135f60ea8e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM0NjI0NQ==", "bodyText": "added in a code snippet, let me know if that solution works or if I should talk with the team about adding a exists method. Thanks", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r450346245", "createdAt": "2020-07-06T16:38:22Z", "author": {"login": "eboyd23"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "diffHunk": "@@ -0,0 +1,113 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.rest.PagedFlux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Map;\n+\n+/**\n+ * class for the table async client\n+ */\n+@ServiceClient(\n+    builder = TableClientBuilder.class,\n+    isAsync = true)\n+public class TableAsyncClient {\n+    private final String tableName;\n+\n+    TableAsyncClient(String tableName) {\n+        this.tableName = tableName;\n+    }\n+\n+    /**\n+     * Queries and returns entities in the given table using the select and filter strings\n+     *\n+     * @param queryOptions the odata query object\n+     * @return a paged flux of all the entity which fit this criteria\n+     */\n+    public PagedFlux<TableEntity> queryEntity(QueryOptions queryOptions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1NjI1NA=="}, "originalCommit": {"oid": "4c8166eab6f82a5bdea05795ba6a3a135f60ea8e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0NzcyNA==", "bodyText": "Thanks for adding it to the code snippet. It might probably be something we should include in the public API itself but that's arch board discussion. For now, we can just keep it in the samples.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r451047724", "createdAt": "2020-07-07T18:01:51Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "diffHunk": "@@ -0,0 +1,113 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.rest.PagedFlux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Map;\n+\n+/**\n+ * class for the table async client\n+ */\n+@ServiceClient(\n+    builder = TableClientBuilder.class,\n+    isAsync = true)\n+public class TableAsyncClient {\n+    private final String tableName;\n+\n+    TableAsyncClient(String tableName) {\n+        this.tableName = tableName;\n+    }\n+\n+    /**\n+     * Queries and returns entities in the given table using the select and filter strings\n+     *\n+     * @param queryOptions the odata query object\n+     * @return a paged flux of all the entity which fit this criteria\n+     */\n+    public PagedFlux<TableEntity> queryEntity(QueryOptions queryOptions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1NjI1NA=="}, "originalCommit": {"oid": "4c8166eab6f82a5bdea05795ba6a3a135f60ea8e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA1MTAzMg==", "bodyText": "Also, should the name of the method be queryEntities() as it's returning a paged collection?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r451051032", "createdAt": "2020-07-07T18:08:01Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "diffHunk": "@@ -0,0 +1,113 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.rest.PagedFlux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Map;\n+\n+/**\n+ * class for the table async client\n+ */\n+@ServiceClient(\n+    builder = TableClientBuilder.class,\n+    isAsync = true)\n+public class TableAsyncClient {\n+    private final String tableName;\n+\n+    TableAsyncClient(String tableName) {\n+        this.tableName = tableName;\n+    }\n+\n+    /**\n+     * Queries and returns entities in the given table using the select and filter strings\n+     *\n+     * @param queryOptions the odata query object\n+     * @return a paged flux of all the entity which fit this criteria\n+     */\n+    public PagedFlux<TableEntity> queryEntity(QueryOptions queryOptions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1NjI1NA=="}, "originalCommit": {"oid": "4c8166eab6f82a5bdea05795ba6a3a135f60ea8e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIzMDc0NA==", "bodyText": "yep just switched the wording. Also we just spoke yesterday in a meeting and we are adding a get() method. This could help resolve your previous concern about exists() since it could be used to test existence.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r452230744", "createdAt": "2020-07-09T13:48:14Z", "author": {"login": "eboyd23"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "diffHunk": "@@ -0,0 +1,113 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.rest.PagedFlux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Map;\n+\n+/**\n+ * class for the table async client\n+ */\n+@ServiceClient(\n+    builder = TableClientBuilder.class,\n+    isAsync = true)\n+public class TableAsyncClient {\n+    private final String tableName;\n+\n+    TableAsyncClient(String tableName) {\n+        this.tableName = tableName;\n+    }\n+\n+    /**\n+     * Queries and returns entities in the given table using the select and filter strings\n+     *\n+     * @param queryOptions the odata query object\n+     * @return a paged flux of all the entity which fit this criteria\n+     */\n+    public PagedFlux<TableEntity> queryEntity(QueryOptions queryOptions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1NjI1NA=="}, "originalCommit": {"oid": "4c8166eab6f82a5bdea05795ba6a3a135f60ea8e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTc4MzU1OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/samples/java/TableServiceAsyncClientCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODo1OToxNFrOGrx17A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODo1OToxNFrOGrx17A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1ODU3Mg==", "bodyText": "It might be useful to add samples to show how the user can verify if a table exists.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r448558572", "createdAt": "2020-07-01T18:59:14Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/src/samples/java/TableServiceAsyncClientCodeSnippets.java", "diffHunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * async code snippets for the table service\n+ */\n+public class TableServiceAsyncClientCodeSnippets {\n+    final ClientLogger logger = new ClientLogger(\"TableServiceAsyncClientCodeSnippets\");\n+\n+    /**\n+     * all methods on tables in the Tables SDK (Add, Delete, Query)\n+     */\n+    public void TableLevelMethods() {\n+\n+        // Build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        // Add a table\n+        tableServiceAsyncClient.createTable(\"OfficeSupplies\").subscribe(Void -> {\n+            logger.info(\"Table creation successful.\");\n+        }, error -> {\n+            logger.error(\"There was an error creating the table. Error: \" + error);\n+        });\n+\n+\n+        // Delete a table\n+        tableServiceAsyncClient.deleteTable(\"OfficeSupplies\").subscribe(Void -> {\n+            logger.info(\"Table deletion successful\");\n+        }, error -> {\n+            logger.error(\"There was an error deleting the table. Error: \" + error);\n+        });\n+\n+\n+        // Query tables\n+        QueryOptions queryOptions = new QueryOptions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8166eab6f82a5bdea05795ba6a3a135f60ea8e"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTc4NTQ1OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/samples/java/TableServiceAsyncClientCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODo1OTo1MlrOGrx3Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjoyODoxM1rOGtelPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1ODg3MQ==", "bodyText": "Does the service not support updating a table?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r448558871", "createdAt": "2020-07-01T18:59:52Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/src/samples/java/TableServiceAsyncClientCodeSnippets.java", "diffHunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * async code snippets for the table service\n+ */\n+public class TableServiceAsyncClientCodeSnippets {\n+    final ClientLogger logger = new ClientLogger(\"TableServiceAsyncClientCodeSnippets\");\n+\n+    /**\n+     * all methods on tables in the Tables SDK (Add, Delete, Query)\n+     */\n+    public void TableLevelMethods() {\n+\n+        // Build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        // Add a table\n+        tableServiceAsyncClient.createTable(\"OfficeSupplies\").subscribe(Void -> {\n+            logger.info(\"Table creation successful.\");\n+        }, error -> {\n+            logger.error(\"There was an error creating the table. Error: \" + error);\n+        });\n+\n+\n+        // Delete a table\n+        tableServiceAsyncClient.deleteTable(\"OfficeSupplies\").subscribe(Void -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8166eab6f82a5bdea05795ba6a3a135f60ea8e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM0MDE1OQ==", "bodyText": "No that is not one of the commands in the tables API", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r450340159", "createdAt": "2020-07-06T16:28:13Z", "author": {"login": "eboyd23"}, "path": "sdk/tables/azure-data-tables/src/samples/java/TableServiceAsyncClientCodeSnippets.java", "diffHunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * async code snippets for the table service\n+ */\n+public class TableServiceAsyncClientCodeSnippets {\n+    final ClientLogger logger = new ClientLogger(\"TableServiceAsyncClientCodeSnippets\");\n+\n+    /**\n+     * all methods on tables in the Tables SDK (Add, Delete, Query)\n+     */\n+    public void TableLevelMethods() {\n+\n+        // Build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        // Add a table\n+        tableServiceAsyncClient.createTable(\"OfficeSupplies\").subscribe(Void -> {\n+            logger.info(\"Table creation successful.\");\n+        }, error -> {\n+            logger.error(\"There was an error creating the table. Error: \" + error);\n+        });\n+\n+\n+        // Delete a table\n+        tableServiceAsyncClient.deleteTable(\"OfficeSupplies\").subscribe(Void -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1ODg3MQ=="}, "originalCommit": {"oid": "4c8166eab6f82a5bdea05795ba6a3a135f60ea8e"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjEzNjAyOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODowMzoyOFrOGuJ0gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODowMzoyOFrOGuJ0gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0ODU3OQ==", "bodyText": "This can just be an overload of queryEntity() similar to what you have for deleteEntity().", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r451048579", "createdAt": "2020-07-07T18:03:28Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "diffHunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.rest.PagedFlux;\n+import java.util.List;\n+import java.util.Map;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * class for the table async client\n+ */\n+@ServiceClient(\n+    builder = TableClientBuilder.class,\n+    isAsync = true)\n+public class TableAsyncClient {\n+    private final String tableName;\n+\n+    TableAsyncClient(String tableName) {\n+        this.tableName = tableName;\n+    }\n+\n+    /**\n+     * Queries and returns entities in the given table using the select and filter strings\n+     *\n+     * @param queryOptions the odata query object\n+     * @return a paged flux of all the entity which fit this criteria\n+     */\n+    public PagedFlux<TableEntity> queryEntity(QueryOptions queryOptions) {\n+        return null;\n+    }\n+\n+    /**\n+     * Queries and returns entities in the given table with the given rowKey and ParitionKey\n+     *\n+     * @param rowKey the given row key\n+     * @param partitionKey the given partition key\n+     * @return a list of the tables that fit the row and partition key\n+     */\n+    public PagedFlux<TableEntity> queryEntitiesWithPartitionAndRowKey(String rowKey, String partitionKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "773eb7f68ce9104f5b55e4463828b2530c9b9bef"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjE0NDc3OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODowNjowNVrOGuJ6Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODowNjowNVrOGuJ6Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA1MDAwMw==", "bodyText": "We should also have *EntityWithResponse() methods for all APIs that return Mono<> but if the intent of this PR is to just show the code snippets, you can ignore this comment.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r451050003", "createdAt": "2020-07-07T18:06:05Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "diffHunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.rest.PagedFlux;\n+import java.util.List;\n+import java.util.Map;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * class for the table async client\n+ */\n+@ServiceClient(\n+    builder = TableClientBuilder.class,\n+    isAsync = true)\n+public class TableAsyncClient {\n+    private final String tableName;\n+\n+    TableAsyncClient(String tableName) {\n+        this.tableName = tableName;\n+    }\n+\n+    /**\n+     * Queries and returns entities in the given table using the select and filter strings\n+     *\n+     * @param queryOptions the odata query object\n+     * @return a paged flux of all the entity which fit this criteria\n+     */\n+    public PagedFlux<TableEntity> queryEntity(QueryOptions queryOptions) {\n+        return null;\n+    }\n+\n+    /**\n+     * Queries and returns entities in the given table with the given rowKey and ParitionKey\n+     *\n+     * @param rowKey the given row key\n+     * @param partitionKey the given partition key\n+     * @return a list of the tables that fit the row and partition key\n+     */\n+    public PagedFlux<TableEntity> queryEntitiesWithPartitionAndRowKey(String rowKey, String partitionKey) {\n+        return null;\n+    }\n+\n+    /**\n+     * insert a TableEntity with the given properties and return that TableEntity. Property map must include\n+     * rowKey and partitionKey\n+     *\n+     * @param tableEntityProperties a map of properties for the TableEntity\n+     * @return the created TableEntity\n+     */\n+    public Mono<TableEntity> createEntity(Map<String, Object> tableEntityProperties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "773eb7f68ce9104f5b55e4463828b2530c9b9bef"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjE1Mzg2OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODowODo1NFrOGuJ_xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODowODo1NFrOGuJ_xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA1MTQ2Mg==", "bodyText": "This doesn't have to be async as the table name is provided to the ctor.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r451051462", "createdAt": "2020-07-07T18:08:54Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "diffHunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.rest.PagedFlux;\n+import java.util.List;\n+import java.util.Map;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * class for the table async client\n+ */\n+@ServiceClient(\n+    builder = TableClientBuilder.class,\n+    isAsync = true)\n+public class TableAsyncClient {\n+    private final String tableName;\n+\n+    TableAsyncClient(String tableName) {\n+        this.tableName = tableName;\n+    }\n+\n+    /**\n+     * Queries and returns entities in the given table using the select and filter strings\n+     *\n+     * @param queryOptions the odata query object\n+     * @return a paged flux of all the entity which fit this criteria\n+     */\n+    public PagedFlux<TableEntity> queryEntity(QueryOptions queryOptions) {\n+        return null;\n+    }\n+\n+    /**\n+     * Queries and returns entities in the given table with the given rowKey and ParitionKey\n+     *\n+     * @param rowKey the given row key\n+     * @param partitionKey the given partition key\n+     * @return a list of the tables that fit the row and partition key\n+     */\n+    public PagedFlux<TableEntity> queryEntitiesWithPartitionAndRowKey(String rowKey, String partitionKey) {\n+        return null;\n+    }\n+\n+    /**\n+     * insert a TableEntity with the given properties and return that TableEntity. Property map must include\n+     * rowKey and partitionKey\n+     *\n+     * @param tableEntityProperties a map of properties for the TableEntity\n+     * @return the created TableEntity\n+     */\n+    public Mono<TableEntity> createEntity(Map<String, Object> tableEntityProperties) {\n+        return Mono.empty();\n+    }\n+\n+    /**\n+     * based on Mode it either inserts or merges if exists or inserts or merges if exists\n+     *\n+     * @param updateMode type of upsert\n+     * @param tableEntity entity to upsert\n+     * @return void\n+     */\n+    public Mono<Void> upsertEntity(UpdateMode updateMode, TableEntity tableEntity) {\n+        return Mono.empty();\n+    }\n+\n+    /**\n+     * based on Mode it either updates or fails if it does exists or replaces or fails if it does exists\n+     *\n+     * @param updateMode type of update\n+     * @param tableEntity entity to update\n+     * @return void\n+     */\n+    public Mono<Void> updateEntity(UpdateMode updateMode, TableEntity tableEntity) {\n+        return Mono.empty();\n+    }\n+\n+    /**\n+     * deletes the given entity\n+     *\n+     * @param tableEntity entity to delete\n+     * @return void\n+     */\n+    public Mono<Void> deleteEntity(TableEntity tableEntity) {\n+        return Mono.empty();\n+    }\n+\n+    /**\n+     * deletes the given entity\n+     *\n+     * @param partitionKey the partition key\n+     * @param rowKey the row key\n+     * @return void\n+     */\n+    public Mono<Void> deleteEntity(String partitionKey, String rowKey) {\n+        return Mono.empty();\n+    }\n+\n+    /**\n+     * returns the table name associated with the client\n+     *\n+     * @return table name\n+     */\n+    public Mono<String> getTableName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "773eb7f68ce9104f5b55e4463828b2530c9b9bef"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjI0MjgxOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/samples/java/TableServiceAsyncClientCodeSnippets.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODozNTo0MVrOGuK3rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODozNTo0MVrOGuK3rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2NTc3Mg==", "bodyText": "In Reactor, void return types won't have onNext(). So, this message will have to be printed in onComplete() consumer. Update other samples too.\n.subscribe(ignored -> {},\n       error -> logger.error(\"...\", error),\n       () -> logger.info(\"Delete Entity Successful.\"));", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r451065772", "createdAt": "2020-07-07T18:35:41Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/src/samples/java/TableServiceAsyncClientCodeSnippets.java", "diffHunk": "@@ -0,0 +1,204 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import java.util.HashMap;\n+import java.util.Map;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * async code snippets for the table service\n+ */\n+public class TableServiceAsyncClientCodeSnippets {\n+    final ClientLogger logger = new ClientLogger(\"TableServiceAsyncClientCodeSnippets\");\n+\n+    /**\n+     * create table code snippet\n+     */\n+    public void createTable() {\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        tableServiceAsyncClient.createTable(\"OfficeSupplies\").subscribe(Void -> {\n+            logger.info(\"Table creation successful.\");\n+        }, error -> {\n+            logger.error(\"There was an error creating the table. Error: \" + error);\n+        });\n+    }\n+\n+    /**\n+     * delete table code snippet\n+     */\n+    public void deleteTable() {\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        tableServiceAsyncClient.deleteTable(\"OfficeSupplies\").subscribe(Void -> {\n+            logger.info(\"Table deletion successful\");\n+        }, error -> {\n+            logger.error(\"There was an error deleting the table. Error: \" + error);\n+        });\n+    }\n+\n+    /**\n+     * query tables code snippet\n+     */\n+    public void queryTable() {\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+        QueryOptions queryOptions = new QueryOptions();\n+        queryOptions.setFilter(\"TableName eq OfficeSupplies\");\n+\n+        tableServiceAsyncClient.queryTables(queryOptions).subscribe(azureTable -> {\n+            logger.info(azureTable.getName());\n+        }, error -> {\n+            logger.error(\"There was an error querying the service. Error: \" + error);\n+        });\n+    }\n+\n+    /**\n+     * insert entity code snippet\n+     */\n+    private void insertEntity() {\n+\n+        // Build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        TableAsyncClient tableAsyncClient = tableServiceAsyncClient.getTableAsyncClient(\"OfficeSupplies\");\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(\"RowKey\", \"crayolaMarkers\");\n+        properties.put(\"PartitionKey\", \"markers\");\n+\n+        tableAsyncClient.createEntity(properties).subscribe(tableEntity -> {\n+            logger.info(\"Insert Entity Successful. Entity: \" + tableEntity);\n+        }, error -> {\n+            logger.error(\"There was an error inserting the Entity. Error: \" + error);\n+        });\n+    }\n+\n+    /**\n+     * delete entity code snippet\n+     */\n+    private void deleteEntity() {\n+\n+        // Build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        TableAsyncClient tableAsyncClient = tableServiceAsyncClient.getTableAsyncClient(\"OfficeSupplies\");\n+        QueryOptions queryOptions = new QueryOptions();\n+        queryOptions.setFilter(\"RowKey eq crayolaMarkers\");\n+\n+        tableAsyncClient.queryEntity(queryOptions).flatMap(tableEntity -> {\n+            logger.info(\"Table Entity: \" + tableEntity);\n+            Mono<Void> deleteEntityMono = tableAsyncClient.deleteEntity(tableEntity);\n+            return deleteEntityMono;\n+        }).subscribe(Void -> {\n+            logger.info(\"Delete Entity Successful.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "773eb7f68ce9104f5b55e4463828b2530c9b9bef"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjI0OTYzOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableServiceClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODozNzo1MlrOGuK8Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODozNzo1MlrOGuK8Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2Njg4Mg==", "bodyText": "The builder should also support either TokenCredential or AzureKeyCredential.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r451066882", "createdAt": "2020-07-07T18:37:52Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableServiceClientBuilder.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+\n+/**\n+ * builds the table service clients\n+ */\n+@ServiceClientBuilder(serviceClients = {TableServiceClient.class, TableServiceAsyncClient.class})\n+public class TableServiceClientBuilder {\n+\n+    private String connectionString;\n+\n+    /**\n+     * Sets the connection string to help build the client\n+     *\n+     * @param connectionString the connection string to the storage account\n+     * @return the TableServiceClientBuilder\n+     */\n+    public TableServiceClientBuilder connectionString(String connectionString) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "773eb7f68ce9104f5b55e4463828b2530c9b9bef"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjI1MTUxOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODozODoyNVrOGuK9KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODozODoyNVrOGuK9KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2NzE3Nw==", "bodyText": "The builder should also support either TokenCredential or AzureKeyCredential.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r451067177", "createdAt": "2020-07-07T18:38:25Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClientBuilder.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+\n+/**\n+ * builds table client\n+ */\n+@ServiceClientBuilder(serviceClients = {TableClient.class, TableAsyncClient.class})\n+public class TableClientBuilder {\n+    private String connectionString;\n+    private String tableName;\n+\n+    /**\n+     * Sets the connection string to help build the client\n+     *\n+     * @param connectionString the connection string to the storage account\n+     * @return the TableClientBuilder\n+     */\n+    public TableClientBuilder connectionString(String connectionString) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "773eb7f68ce9104f5b55e4463828b2530c9b9bef"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjI2MTU2OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo0MToxOFrOGuLDWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzo1MToyNFrOGvSHrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2ODc2Mw==", "bodyText": "These methods should return Mono<TableEntity> - the updated/upserted entity.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r451068763", "createdAt": "2020-07-07T18:41:18Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "diffHunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.rest.PagedFlux;\n+import java.util.List;\n+import java.util.Map;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * class for the table async client\n+ */\n+@ServiceClient(\n+    builder = TableClientBuilder.class,\n+    isAsync = true)\n+public class TableAsyncClient {\n+    private final String tableName;\n+\n+    TableAsyncClient(String tableName) {\n+        this.tableName = tableName;\n+    }\n+\n+    /**\n+     * Queries and returns entities in the given table using the select and filter strings\n+     *\n+     * @param queryOptions the odata query object\n+     * @return a paged flux of all the entity which fit this criteria\n+     */\n+    public PagedFlux<TableEntity> queryEntity(QueryOptions queryOptions) {\n+        return null;\n+    }\n+\n+    /**\n+     * Queries and returns entities in the given table with the given rowKey and ParitionKey\n+     *\n+     * @param rowKey the given row key\n+     * @param partitionKey the given partition key\n+     * @return a list of the tables that fit the row and partition key\n+     */\n+    public PagedFlux<TableEntity> queryEntitiesWithPartitionAndRowKey(String rowKey, String partitionKey) {\n+        return null;\n+    }\n+\n+    /**\n+     * insert a TableEntity with the given properties and return that TableEntity. Property map must include\n+     * rowKey and partitionKey\n+     *\n+     * @param tableEntityProperties a map of properties for the TableEntity\n+     * @return the created TableEntity\n+     */\n+    public Mono<TableEntity> createEntity(Map<String, Object> tableEntityProperties) {\n+        return Mono.empty();\n+    }\n+\n+    /**\n+     * based on Mode it either inserts or merges if exists or inserts or merges if exists\n+     *\n+     * @param updateMode type of upsert\n+     * @param tableEntity entity to upsert\n+     * @return void\n+     */\n+    public Mono<Void> upsertEntity(UpdateMode updateMode, TableEntity tableEntity) {\n+        return Mono.empty();\n+    }\n+\n+    /**\n+     * based on Mode it either updates or fails if it does exists or replaces or fails if it does exists\n+     *\n+     * @param updateMode type of update\n+     * @param tableEntity entity to update\n+     * @return void\n+     */\n+    public Mono<Void> updateEntity(UpdateMode updateMode, TableEntity tableEntity) {\n+        return Mono.empty();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "773eb7f68ce9104f5b55e4463828b2530c9b9bef"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIzMzEzNQ==", "bodyText": "I brought this up during our tables meeting and we decided we have to talk with the Tables service team since the Merge API call returns at 204 (no content) so we are still deciding how best to return something if that underlying functionality doesn't return an entity. So we are asking them about hero scenarios and what users would want from this type of function", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r452233135", "createdAt": "2020-07-09T13:51:24Z", "author": {"login": "eboyd23"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "diffHunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.rest.PagedFlux;\n+import java.util.List;\n+import java.util.Map;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * class for the table async client\n+ */\n+@ServiceClient(\n+    builder = TableClientBuilder.class,\n+    isAsync = true)\n+public class TableAsyncClient {\n+    private final String tableName;\n+\n+    TableAsyncClient(String tableName) {\n+        this.tableName = tableName;\n+    }\n+\n+    /**\n+     * Queries and returns entities in the given table using the select and filter strings\n+     *\n+     * @param queryOptions the odata query object\n+     * @return a paged flux of all the entity which fit this criteria\n+     */\n+    public PagedFlux<TableEntity> queryEntity(QueryOptions queryOptions) {\n+        return null;\n+    }\n+\n+    /**\n+     * Queries and returns entities in the given table with the given rowKey and ParitionKey\n+     *\n+     * @param rowKey the given row key\n+     * @param partitionKey the given partition key\n+     * @return a list of the tables that fit the row and partition key\n+     */\n+    public PagedFlux<TableEntity> queryEntitiesWithPartitionAndRowKey(String rowKey, String partitionKey) {\n+        return null;\n+    }\n+\n+    /**\n+     * insert a TableEntity with the given properties and return that TableEntity. Property map must include\n+     * rowKey and partitionKey\n+     *\n+     * @param tableEntityProperties a map of properties for the TableEntity\n+     * @return the created TableEntity\n+     */\n+    public Mono<TableEntity> createEntity(Map<String, Object> tableEntityProperties) {\n+        return Mono.empty();\n+    }\n+\n+    /**\n+     * based on Mode it either inserts or merges if exists or inserts or merges if exists\n+     *\n+     * @param updateMode type of upsert\n+     * @param tableEntity entity to upsert\n+     * @return void\n+     */\n+    public Mono<Void> upsertEntity(UpdateMode updateMode, TableEntity tableEntity) {\n+        return Mono.empty();\n+    }\n+\n+    /**\n+     * based on Mode it either updates or fails if it does exists or replaces or fails if it does exists\n+     *\n+     * @param updateMode type of update\n+     * @param tableEntity entity to update\n+     * @return void\n+     */\n+    public Mono<Void> updateEntity(UpdateMode updateMode, TableEntity tableEntity) {\n+        return Mono.empty();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2ODc2Mw=="}, "originalCommit": {"oid": "773eb7f68ce9104f5b55e4463828b2530c9b9bef"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjI3NjMzOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/samples/java/TableServiceAsyncClientCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo0NTo0MFrOGuLMZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDoyMToxMVrOGvTa-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA3MTA3OQ==", "bodyText": "This returns a paged collection. So, you might have to check each tableEntity to find out if the one that you are testing for existence actually is in the returned collection.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r451071079", "createdAt": "2020-07-07T18:45:40Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/src/samples/java/TableServiceAsyncClientCodeSnippets.java", "diffHunk": "@@ -0,0 +1,204 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import java.util.HashMap;\n+import java.util.Map;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * async code snippets for the table service\n+ */\n+public class TableServiceAsyncClientCodeSnippets {\n+    final ClientLogger logger = new ClientLogger(\"TableServiceAsyncClientCodeSnippets\");\n+\n+    /**\n+     * create table code snippet\n+     */\n+    public void createTable() {\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        tableServiceAsyncClient.createTable(\"OfficeSupplies\").subscribe(Void -> {\n+            logger.info(\"Table creation successful.\");\n+        }, error -> {\n+            logger.error(\"There was an error creating the table. Error: \" + error);\n+        });\n+    }\n+\n+    /**\n+     * delete table code snippet\n+     */\n+    public void deleteTable() {\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        tableServiceAsyncClient.deleteTable(\"OfficeSupplies\").subscribe(Void -> {\n+            logger.info(\"Table deletion successful\");\n+        }, error -> {\n+            logger.error(\"There was an error deleting the table. Error: \" + error);\n+        });\n+    }\n+\n+    /**\n+     * query tables code snippet\n+     */\n+    public void queryTable() {\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+        QueryOptions queryOptions = new QueryOptions();\n+        queryOptions.setFilter(\"TableName eq OfficeSupplies\");\n+\n+        tableServiceAsyncClient.queryTables(queryOptions).subscribe(azureTable -> {\n+            logger.info(azureTable.getName());\n+        }, error -> {\n+            logger.error(\"There was an error querying the service. Error: \" + error);\n+        });\n+    }\n+\n+    /**\n+     * insert entity code snippet\n+     */\n+    private void insertEntity() {\n+\n+        // Build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        TableAsyncClient tableAsyncClient = tableServiceAsyncClient.getTableAsyncClient(\"OfficeSupplies\");\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(\"RowKey\", \"crayolaMarkers\");\n+        properties.put(\"PartitionKey\", \"markers\");\n+\n+        tableAsyncClient.createEntity(properties).subscribe(tableEntity -> {\n+            logger.info(\"Insert Entity Successful. Entity: \" + tableEntity);\n+        }, error -> {\n+            logger.error(\"There was an error inserting the Entity. Error: \" + error);\n+        });\n+    }\n+\n+    /**\n+     * delete entity code snippet\n+     */\n+    private void deleteEntity() {\n+\n+        // Build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        TableAsyncClient tableAsyncClient = tableServiceAsyncClient.getTableAsyncClient(\"OfficeSupplies\");\n+        QueryOptions queryOptions = new QueryOptions();\n+        queryOptions.setFilter(\"RowKey eq crayolaMarkers\");\n+\n+        tableAsyncClient.queryEntity(queryOptions).flatMap(tableEntity -> {\n+            logger.info(\"Table Entity: \" + tableEntity);\n+            Mono<Void> deleteEntityMono = tableAsyncClient.deleteEntity(tableEntity);\n+            return deleteEntityMono;\n+        }).subscribe(Void -> {\n+            logger.info(\"Delete Entity Successful.\");\n+        }, error -> {\n+            logger.error(\"There was an error deleting the Entity. Error: \" + error);\n+        });\n+    }\n+\n+    /**\n+     * upsert entity code snippet\n+     */\n+    private void upsert() {\n+\n+        // Build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        TableAsyncClient tableAsyncClient = tableServiceAsyncClient.getTableAsyncClient(\"OfficeSupplies\");\n+        QueryOptions queryOptions = new QueryOptions();\n+        queryOptions.setFilter(\"RowKey eq crayolaMarkers\");\n+\n+        tableAsyncClient.queryEntity(queryOptions).flatMap(tableEntity -> {\n+            logger.info(\"Table Entity: \" + tableEntity);\n+            tableEntity.addProperty(\"Price\", \"5\");\n+            Mono<Void> updateEntityMono = tableAsyncClient.upsertEntity(UpdateMode.Merge, tableEntity);\n+            return updateEntityMono;\n+        }).subscribe(Void -> {\n+            logger.info(\"Update Entity Successful.\");\n+        }, error -> {\n+            logger.error(\"There was an error updating the Entity. Error: \" + error);\n+        });\n+    }\n+\n+    /**\n+     * update entity code snippet\n+     */\n+    private void update() {\n+\n+        // Build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        TableAsyncClient tableAsyncClient = tableServiceAsyncClient.getTableAsyncClient(\"OfficeSupplies\");\n+        QueryOptions queryOptions = new QueryOptions();\n+        queryOptions.setFilter(\"RowKey eq crayolaMarkers\");\n+\n+        tableAsyncClient.queryEntity(queryOptions).flatMap(tableEntity -> {\n+            logger.info(\"Table Entity: \" + tableEntity);\n+            tableEntity.addProperty(\"Price\", \"5\");\n+            Mono<Void> updateEntityMono = tableAsyncClient.updateEntity(UpdateMode.Replace, tableEntity);\n+            return updateEntityMono;\n+        }).subscribe(Void -> {\n+            logger.info(\"Update Entity Successful.\");\n+        }, error -> {\n+            logger.error(\"There was an error updating the Entity. Error: \" + error);\n+        });\n+    }\n+\n+    /**\n+     * query entity code snippet\n+     */\n+    private void queryEntities() {\n+\n+        // Build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        TableAsyncClient tableAsyncClient = tableServiceAsyncClient.getTableAsyncClient(\"OfficeSupplies\");\n+        QueryOptions queryOptions = new QueryOptions();\n+        queryOptions.setFilter(\"Product eq markers\");\n+        queryOptions.setSelect(\"Seller, Price\");\n+\n+        tableAsyncClient.queryEntity(queryOptions).subscribe(tableEntity -> {\n+            logger.info(\"Table Entity: \" + tableEntity);\n+        }, error -> {\n+            logger.error(\"There was an error querying the table. Error: \" + error);\n+        });\n+    }\n+\n+    /**\n+     * checks to see if an entity exists code snippet\n+     */\n+    private void existsEntity() {\n+\n+        // Build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        TableAsyncClient tableAsyncClient = tableServiceAsyncClient.getTableAsyncClient(\"OfficeSupplies\");\n+\n+        tableAsyncClient.queryEntitiesWithPartitionAndRowKey(\"crayolaMarkers\", \"markers\")\n+            .subscribe(tableEntity -> {\n+            logger.info(\"Table Entity exists: \" + tableEntity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "773eb7f68ce9104f5b55e4463828b2530c9b9bef"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1NDQ1OQ==", "bodyText": "updated using get() method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r452254459", "createdAt": "2020-07-09T14:21:11Z", "author": {"login": "eboyd23"}, "path": "sdk/tables/azure-data-tables/src/samples/java/TableServiceAsyncClientCodeSnippets.java", "diffHunk": "@@ -0,0 +1,204 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import java.util.HashMap;\n+import java.util.Map;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * async code snippets for the table service\n+ */\n+public class TableServiceAsyncClientCodeSnippets {\n+    final ClientLogger logger = new ClientLogger(\"TableServiceAsyncClientCodeSnippets\");\n+\n+    /**\n+     * create table code snippet\n+     */\n+    public void createTable() {\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        tableServiceAsyncClient.createTable(\"OfficeSupplies\").subscribe(Void -> {\n+            logger.info(\"Table creation successful.\");\n+        }, error -> {\n+            logger.error(\"There was an error creating the table. Error: \" + error);\n+        });\n+    }\n+\n+    /**\n+     * delete table code snippet\n+     */\n+    public void deleteTable() {\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        tableServiceAsyncClient.deleteTable(\"OfficeSupplies\").subscribe(Void -> {\n+            logger.info(\"Table deletion successful\");\n+        }, error -> {\n+            logger.error(\"There was an error deleting the table. Error: \" + error);\n+        });\n+    }\n+\n+    /**\n+     * query tables code snippet\n+     */\n+    public void queryTable() {\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+        QueryOptions queryOptions = new QueryOptions();\n+        queryOptions.setFilter(\"TableName eq OfficeSupplies\");\n+\n+        tableServiceAsyncClient.queryTables(queryOptions).subscribe(azureTable -> {\n+            logger.info(azureTable.getName());\n+        }, error -> {\n+            logger.error(\"There was an error querying the service. Error: \" + error);\n+        });\n+    }\n+\n+    /**\n+     * insert entity code snippet\n+     */\n+    private void insertEntity() {\n+\n+        // Build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        TableAsyncClient tableAsyncClient = tableServiceAsyncClient.getTableAsyncClient(\"OfficeSupplies\");\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(\"RowKey\", \"crayolaMarkers\");\n+        properties.put(\"PartitionKey\", \"markers\");\n+\n+        tableAsyncClient.createEntity(properties).subscribe(tableEntity -> {\n+            logger.info(\"Insert Entity Successful. Entity: \" + tableEntity);\n+        }, error -> {\n+            logger.error(\"There was an error inserting the Entity. Error: \" + error);\n+        });\n+    }\n+\n+    /**\n+     * delete entity code snippet\n+     */\n+    private void deleteEntity() {\n+\n+        // Build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        TableAsyncClient tableAsyncClient = tableServiceAsyncClient.getTableAsyncClient(\"OfficeSupplies\");\n+        QueryOptions queryOptions = new QueryOptions();\n+        queryOptions.setFilter(\"RowKey eq crayolaMarkers\");\n+\n+        tableAsyncClient.queryEntity(queryOptions).flatMap(tableEntity -> {\n+            logger.info(\"Table Entity: \" + tableEntity);\n+            Mono<Void> deleteEntityMono = tableAsyncClient.deleteEntity(tableEntity);\n+            return deleteEntityMono;\n+        }).subscribe(Void -> {\n+            logger.info(\"Delete Entity Successful.\");\n+        }, error -> {\n+            logger.error(\"There was an error deleting the Entity. Error: \" + error);\n+        });\n+    }\n+\n+    /**\n+     * upsert entity code snippet\n+     */\n+    private void upsert() {\n+\n+        // Build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        TableAsyncClient tableAsyncClient = tableServiceAsyncClient.getTableAsyncClient(\"OfficeSupplies\");\n+        QueryOptions queryOptions = new QueryOptions();\n+        queryOptions.setFilter(\"RowKey eq crayolaMarkers\");\n+\n+        tableAsyncClient.queryEntity(queryOptions).flatMap(tableEntity -> {\n+            logger.info(\"Table Entity: \" + tableEntity);\n+            tableEntity.addProperty(\"Price\", \"5\");\n+            Mono<Void> updateEntityMono = tableAsyncClient.upsertEntity(UpdateMode.Merge, tableEntity);\n+            return updateEntityMono;\n+        }).subscribe(Void -> {\n+            logger.info(\"Update Entity Successful.\");\n+        }, error -> {\n+            logger.error(\"There was an error updating the Entity. Error: \" + error);\n+        });\n+    }\n+\n+    /**\n+     * update entity code snippet\n+     */\n+    private void update() {\n+\n+        // Build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        TableAsyncClient tableAsyncClient = tableServiceAsyncClient.getTableAsyncClient(\"OfficeSupplies\");\n+        QueryOptions queryOptions = new QueryOptions();\n+        queryOptions.setFilter(\"RowKey eq crayolaMarkers\");\n+\n+        tableAsyncClient.queryEntity(queryOptions).flatMap(tableEntity -> {\n+            logger.info(\"Table Entity: \" + tableEntity);\n+            tableEntity.addProperty(\"Price\", \"5\");\n+            Mono<Void> updateEntityMono = tableAsyncClient.updateEntity(UpdateMode.Replace, tableEntity);\n+            return updateEntityMono;\n+        }).subscribe(Void -> {\n+            logger.info(\"Update Entity Successful.\");\n+        }, error -> {\n+            logger.error(\"There was an error updating the Entity. Error: \" + error);\n+        });\n+    }\n+\n+    /**\n+     * query entity code snippet\n+     */\n+    private void queryEntities() {\n+\n+        // Build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        TableAsyncClient tableAsyncClient = tableServiceAsyncClient.getTableAsyncClient(\"OfficeSupplies\");\n+        QueryOptions queryOptions = new QueryOptions();\n+        queryOptions.setFilter(\"Product eq markers\");\n+        queryOptions.setSelect(\"Seller, Price\");\n+\n+        tableAsyncClient.queryEntity(queryOptions).subscribe(tableEntity -> {\n+            logger.info(\"Table Entity: \" + tableEntity);\n+        }, error -> {\n+            logger.error(\"There was an error querying the table. Error: \" + error);\n+        });\n+    }\n+\n+    /**\n+     * checks to see if an entity exists code snippet\n+     */\n+    private void existsEntity() {\n+\n+        // Build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        TableAsyncClient tableAsyncClient = tableServiceAsyncClient.getTableAsyncClient(\"OfficeSupplies\");\n+\n+        tableAsyncClient.queryEntitiesWithPartitionAndRowKey(\"crayolaMarkers\", \"markers\")\n+            .subscribe(tableEntity -> {\n+            logger.info(\"Table Entity exists: \" + tableEntity);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA3MTA3OQ=="}, "originalCommit": {"oid": "773eb7f68ce9104f5b55e4463828b2530c9b9bef"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjI4MDM1OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/samples/java/TableServiceClientCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo0Njo1MlrOGuLO1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo0Njo1MlrOGuLO1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA3MTcwMQ==", "bodyText": "Implementation types should not be used in public API.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r451071701", "createdAt": "2020-07-07T18:46:52Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/src/samples/java/TableServiceClientCodeSnippets.java", "diffHunk": "@@ -0,0 +1,209 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.data.tables.implementation.models.TableServiceErrorException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "773eb7f68ce9104f5b55e4463828b2530c9b9bef"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjI4NzI0OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableServiceClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo0OTowMVrOGuLTFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo0OTowMVrOGuLTFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA3Mjc4OA==", "bodyText": "HTTP service builders should have all these methods:\nhttps://azure.github.io/azure-sdk/java_design.html#java-service-client-builder-consistency", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r451072788", "createdAt": "2020-07-07T18:49:01Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableServiceClientBuilder.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+\n+/**\n+ * builds the table service clients\n+ */\n+@ServiceClientBuilder(serviceClients = {TableServiceClient.class, TableServiceAsyncClient.class})\n+public class TableServiceClientBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "773eb7f68ce9104f5b55e4463828b2530c9b9bef"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDUxMzU3OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzoxNToxMFrOGvaenw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODoxNDozNlrOGvcdzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3MDA3OQ==", "bodyText": "why did we remove azure-core-test? Don't your tests depend on TestBase?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r452370079", "createdAt": "2020-07-09T17:15:10Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/pom.xml", "diffHunk": "@@ -45,24 +45,36 @@ Licensed under the MIT License.\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-storage-common</artifactId>\n-      <version>12.8.0-beta.1</version> <!-- {x-version-update;com.azure:azure-storage-common;dependency} -->\n+      <version>12.7.0</version>  <!-- {x-version-update;com.azure:azure-storage-common;dependency} -->\n     </dependency>\n     <dependency>\n       <groupId>org.junit.jupiter</groupId>\n-      <artifactId>junit-jupiter</artifactId>\n-      <version>5.6.2</version> <!-- {x-version-update;org.junit.jupiter:junit-jupiter;external_dependency} -->\n+      <artifactId>junit-jupiter-api</artifactId>\n+      <version>5.6.2</version> <!-- {x-version-update;org.junit.jupiter:junit-jupiter-api;external_dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n+      <version>5.6.2</version> <!-- {x-version-update;org.junit.jupiter:junit-jupiter-engine;external_dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-params</artifactId>\n+      <version>5.6.2</version> <!-- {x-version-update;org.junit.jupiter:junit-jupiter-params;external_dependency} -->\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n       <groupId>io.projectreactor</groupId>\n       <artifactId>reactor-test</artifactId>\n-      <version>3.3.5.RELEASE</version>  <!-- {x-version-update;io.projectreactor:reactor-test;external_dependency} -->\n+      <version>3.3.5.RELEASE</version> <!-- {x-version-update;io.projectreactor:reactor-test;external_dependency} -->\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n-      <groupId>com.azure</groupId>\n-      <artifactId>azure-core-test</artifactId>\n-      <version>1.3.1</version> <!-- {x-version-update;com.azure:azure-core-test;dependency} -->\n+      <groupId>org.mockito</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58f9b78fe1369dd3535213bf5f504e1f45b32366"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwMjYzOQ==", "bodyText": "Hm not sure why this happened, added it back", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r452402639", "createdAt": "2020-07-09T18:14:36Z", "author": {"login": "eboyd23"}, "path": "sdk/tables/azure-data-tables/pom.xml", "diffHunk": "@@ -45,24 +45,36 @@ Licensed under the MIT License.\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-storage-common</artifactId>\n-      <version>12.8.0-beta.1</version> <!-- {x-version-update;com.azure:azure-storage-common;dependency} -->\n+      <version>12.7.0</version>  <!-- {x-version-update;com.azure:azure-storage-common;dependency} -->\n     </dependency>\n     <dependency>\n       <groupId>org.junit.jupiter</groupId>\n-      <artifactId>junit-jupiter</artifactId>\n-      <version>5.6.2</version> <!-- {x-version-update;org.junit.jupiter:junit-jupiter;external_dependency} -->\n+      <artifactId>junit-jupiter-api</artifactId>\n+      <version>5.6.2</version> <!-- {x-version-update;org.junit.jupiter:junit-jupiter-api;external_dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n+      <version>5.6.2</version> <!-- {x-version-update;org.junit.jupiter:junit-jupiter-engine;external_dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-params</artifactId>\n+      <version>5.6.2</version> <!-- {x-version-update;org.junit.jupiter:junit-jupiter-params;external_dependency} -->\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n       <groupId>io.projectreactor</groupId>\n       <artifactId>reactor-test</artifactId>\n-      <version>3.3.5.RELEASE</version>  <!-- {x-version-update;io.projectreactor:reactor-test;external_dependency} -->\n+      <version>3.3.5.RELEASE</version> <!-- {x-version-update;io.projectreactor:reactor-test;external_dependency} -->\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n-      <groupId>com.azure</groupId>\n-      <artifactId>azure-core-test</artifactId>\n-      <version>1.3.1</version> <!-- {x-version-update;com.azure:azure-core-test;dependency} -->\n+      <groupId>org.mockito</groupId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3MDA3OQ=="}, "originalCommit": {"oid": "58f9b78fe1369dd3535213bf5f504e1f45b32366"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDUxODEwOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/QueryOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzoxNjozNFrOGvahkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzoxNjozNFrOGvahkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3MDgzMw==", "bodyText": "Add the @Fluent annotation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r452370833", "createdAt": "2020-07-09T17:16:34Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/QueryOptions.java", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.data.tables;\n+\n+/**\n+ * helps construct a query\n+ */\n+public final class QueryOptions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58f9b78fe1369dd3535213bf5f504e1f45b32366"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDU4MzUzOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableEntity.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzozNTowOFrOGvbKsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzozNTowOFrOGvbKsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4MTM2Mg==", "bodyText": "This and the one above are similar. Do we expect users to pass an entire map, or chain a bunch of addProperty calls?\nI'd prefer addProperty (since it is used in your samples) and remove this one. Also, addProperties should be fluent, and return this like your query options class. Also, annotate class with @Fluent", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r452381362", "createdAt": "2020-07-09T17:35:08Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableEntity.java", "diffHunk": "@@ -0,0 +1,50 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import java.util.Map;\n+\n+/**\n+ * table entity class\n+ */\n+public class TableEntity {\n+    private Map<String, Object> properties;\n+    //tableName\n+    //etag\n+\n+    /**\n+     * creates a new TableEntity\n+     *\n+     * @param properties map of properties of the entity\n+     */\n+    public TableEntity(Map<String, Object> properties) {\n+    }\n+\n+    /**\n+     * returns a map of properties\n+     *\n+     * @return map of properties of thsi entity\n+     */\n+    public Map<String, Object> getProperties() {\n+        return properties;\n+    }\n+\n+    /**\n+     * adds a new property to this entity's property map\n+     *\n+     * @param key the key of the property\n+     * @param value the value of the property\n+     */\n+    public void addProperty(String key, Object value) {\n+\n+    }\n+\n+    /**\n+     * set the properties\n+     *\n+     * @param properties properties to set to this entity\n+     */\n+    public void setProperties(Map<String, Object> properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58f9b78fe1369dd3535213bf5f504e1f45b32366"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDU4NjI5OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/UpdateMode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzozNTo1MlrOGvbMaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzozNTo1MlrOGvbMaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4MTgwMQ==", "bodyText": "This should be upper case. MERGE, REPLACE.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r452381801", "createdAt": "2020-07-09T17:35:52Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/UpdateMode.java", "diffHunk": "@@ -0,0 +1,8 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+enum UpdateMode {\n+    Merge,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58f9b78fe1369dd3535213bf5f504e1f45b32366"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDU4OTk2OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/samples/java/TableServiceAsyncClientCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzozNjo1MVrOGvbOkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzozNjo1MVrOGvbOkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4MjM1NA==", "bodyText": "For samples, you can use System.out.println(). ClientLogger is used within our own SDK. Samples and code snippets are for other people to copy and paste into their own code, so we prefer they use System.out.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r452382354", "createdAt": "2020-07-09T17:36:51Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/samples/java/TableServiceAsyncClientCodeSnippets.java", "diffHunk": "@@ -0,0 +1,199 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import java.util.HashMap;\n+import java.util.Map;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * async code snippets for the table service\n+ */\n+public class TableServiceAsyncClientCodeSnippets {\n+    final ClientLogger logger = new ClientLogger(\"TableServiceAsyncClientCodeSnippets\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58f9b78fe1369dd3535213bf5f504e1f45b32366"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDU5NDkyOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/samples/java/TableServiceAsyncClientCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzozODoyNlrOGvbRwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzozODoyNlrOGvbRwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4MzE2OA==", "bodyText": "System.err.println` over ClientLogger", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r452383168", "createdAt": "2020-07-09T17:38:26Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/samples/java/TableServiceAsyncClientCodeSnippets.java", "diffHunk": "@@ -0,0 +1,199 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import java.util.HashMap;\n+import java.util.Map;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * async code snippets for the table service\n+ */\n+public class TableServiceAsyncClientCodeSnippets {\n+    final ClientLogger logger = new ClientLogger(\"TableServiceAsyncClientCodeSnippets\");\n+\n+    /**\n+     * create table code snippet\n+     */\n+    public void createTable() {\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        tableServiceAsyncClient.createTable(\"OfficeSupplies\").subscribe(\n+            Void -> {},\n+            error -> logger.error(\"There was an error creating the table. Error: \" + error),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58f9b78fe1369dd3535213bf5f504e1f45b32366"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDU5NjcyOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/samples/java/TableServiceAsyncClientCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzozOTowM1rOGvbS8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzozOTowM1rOGvbS8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4MzQ3NQ==", "bodyText": "Highlight usage of the fluent model.\nvar queryOptions = new QueryOptions().setFilter(\"TableName eq OfficeSupplies\");", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r452383475", "createdAt": "2020-07-09T17:39:03Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/samples/java/TableServiceAsyncClientCodeSnippets.java", "diffHunk": "@@ -0,0 +1,199 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import java.util.HashMap;\n+import java.util.Map;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * async code snippets for the table service\n+ */\n+public class TableServiceAsyncClientCodeSnippets {\n+    final ClientLogger logger = new ClientLogger(\"TableServiceAsyncClientCodeSnippets\");\n+\n+    /**\n+     * create table code snippet\n+     */\n+    public void createTable() {\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        tableServiceAsyncClient.createTable(\"OfficeSupplies\").subscribe(\n+            Void -> {},\n+            error -> logger.error(\"There was an error creating the table. Error: \" + error),\n+            () -> logger.info(\"Table creation successful.\"));\n+    }\n+\n+    /**\n+     * delete table code snippet\n+     */\n+    public void deleteTable() {\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        tableServiceAsyncClient.deleteTable(\"OfficeSupplies\").subscribe(\n+            Void -> {},\n+            error -> logger.error(\"There was an error deleting the table. Error: \" + error),\n+            () -> logger.info(\"Table deletion successful.\"));\n+    }\n+\n+    /**\n+     * query tables code snippet\n+     */\n+    public void queryTable() {\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+        QueryOptions queryOptions = new QueryOptions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58f9b78fe1369dd3535213bf5f504e1f45b32366"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDU5OTEwOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/samples/java/TableServiceAsyncClientCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzozOTo0NlrOGvbUhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzozOTo0NlrOGvbUhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4Mzg3OA==", "bodyText": "No need for the intermediate local variable deleteEntityMono. Just return tableAsyncClient.delete....", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r452383878", "createdAt": "2020-07-09T17:39:46Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/samples/java/TableServiceAsyncClientCodeSnippets.java", "diffHunk": "@@ -0,0 +1,199 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import java.util.HashMap;\n+import java.util.Map;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * async code snippets for the table service\n+ */\n+public class TableServiceAsyncClientCodeSnippets {\n+    final ClientLogger logger = new ClientLogger(\"TableServiceAsyncClientCodeSnippets\");\n+\n+    /**\n+     * create table code snippet\n+     */\n+    public void createTable() {\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        tableServiceAsyncClient.createTable(\"OfficeSupplies\").subscribe(\n+            Void -> {},\n+            error -> logger.error(\"There was an error creating the table. Error: \" + error),\n+            () -> logger.info(\"Table creation successful.\"));\n+    }\n+\n+    /**\n+     * delete table code snippet\n+     */\n+    public void deleteTable() {\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        tableServiceAsyncClient.deleteTable(\"OfficeSupplies\").subscribe(\n+            Void -> {},\n+            error -> logger.error(\"There was an error deleting the table. Error: \" + error),\n+            () -> logger.info(\"Table deletion successful.\"));\n+    }\n+\n+    /**\n+     * query tables code snippet\n+     */\n+    public void queryTable() {\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+        QueryOptions queryOptions = new QueryOptions();\n+        queryOptions.setFilter(\"TableName eq OfficeSupplies\");\n+\n+        tableServiceAsyncClient.queryTables(queryOptions).subscribe(azureTable -> {\n+            logger.info(azureTable.getName());\n+        }, error -> {\n+            logger.error(\"There was an error querying the service. Error: \" + error);\n+        });\n+    }\n+\n+    /**\n+     * insert entity code snippet\n+     */\n+    private void insertEntity() {\n+\n+        // Build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        TableAsyncClient tableAsyncClient = tableServiceAsyncClient.getTableAsyncClient(\"OfficeSupplies\");\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(\"RowKey\", \"crayolaMarkers\");\n+        properties.put(\"PartitionKey\", \"markers\");\n+\n+        tableAsyncClient.createEntity(properties).subscribe(tableEntity -> {\n+            logger.info(\"Insert Entity Successful. Entity: \" + tableEntity);\n+        }, error -> {\n+            logger.error(\"There was an error inserting the Entity. Error: \" + error);\n+        });\n+    }\n+\n+    /**\n+     * delete entity code snippet\n+     */\n+    private void deleteEntity() {\n+\n+        // Build service client\n+        TableServiceAsyncClient tableServiceAsyncClient = new TableServiceClientBuilder()\n+            .connectionString(\"connectionString\")\n+            .buildAsyncClient();\n+\n+        TableAsyncClient tableAsyncClient = tableServiceAsyncClient.getTableAsyncClient(\"OfficeSupplies\");\n+        String rowKey = \"crayolaMarkers\";\n+        String partitionKey = \"markers\";\n+\n+        tableAsyncClient.get(rowKey, partitionKey).flatMap(tableEntity -> {\n+            logger.info(\"Table Entity: \" + tableEntity);\n+            Mono<Void> deleteEntityMono = tableAsyncClient.deleteEntity(tableEntity);\n+            return deleteEntityMono;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58f9b78fe1369dd3535213bf5f504e1f45b32366"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDc3MzUyOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODozMjo1NVrOGvdFhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODozMjo1NVrOGvdFhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxMjgwNA==", "bodyText": "unneeded space", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12169#discussion_r452412804", "createdAt": "2020-07-09T18:32:55Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/pom.xml", "diffHunk": "@@ -45,18 +45,30 @@ Licensed under the MIT License.\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-storage-common</artifactId>\n-      <version>12.8.0-beta.1</version> <!-- {x-version-update;com.azure:azure-storage-common;dependency} -->\n+      <version>12.7.0</version>  <!-- {x-version-update;com.azure:azure-storage-common;dependency} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07e1baade298eae9e0c92cf5fd649b6b1e66a4c3"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3905, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}