{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNTE5MzYz", "number": 15430, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDoyNDoxN1rOEmTzzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODozMDoyNlrOEmuf5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjA1OTAwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/jsonpatch/JsonPatchDocument.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDoyNDoxN1rOHWQwAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzowNzozMlrOHW4TDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwNTE1Mg==", "bodyText": "Can this return a List<JsonPatchOperation> instead?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15430#discussion_r493105152", "createdAt": "2020-09-23T00:24:17Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/jsonpatch/JsonPatchDocument.java", "diffHunk": "@@ -22,15 +25,44 @@\n     private static final ObjectMapper MAPPER = ((JacksonAdapter) JacksonAdapter.createDefaultSerializerAdapter())\n         .serializer();\n \n+    private static final String ADD = \"add\";\n+    private static final String REMOVE = \"remove\";\n+    private static final String REPLACE = \"replace\";\n+    private static final String MOVE = \"move\";\n+    private static final String COPY = \"copy\";\n+    private static final String TEST = \"test\";\n+\n     private final ClientLogger logger = new ClientLogger(JsonPatchDocument.class);\n \n     private final List<JsonPatchOperation> operations;\n+    private final JsonSerializer serializer;\n \n     /**\n      * Creates a new JSON Patch document.\n      */\n     public JsonPatchDocument() {\n+        this(null);\n+    }\n+\n+    /**\n+     * Creates a new JSON Patch document.\n+     * <p>\n+     * If {@code serializer} isn't specified {@link JacksonAdapter} will be used.\n+     *\n+     * @param serializer The {@link JsonSerializer} that will be used to serialize patch operation values.\n+     */\n+    public JsonPatchDocument(JsonSerializer serializer) {\n         this.operations = new ArrayList<>();\n+        this.serializer = serializer;\n+    }\n+\n+    /**\n+     * Gets the JSON Patch operations in this document.\n+     *\n+     * @return The JSON Patch operations in this document.\n+     */\n+    public List<Object> getJsonPatchOperations() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a0e5daf61c8073b198d9830c9ebbfbddb3fc90"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc1MzEwMw==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15430#discussion_r493753103", "createdAt": "2020-09-23T17:07:32Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/jsonpatch/JsonPatchDocument.java", "diffHunk": "@@ -22,15 +25,44 @@\n     private static final ObjectMapper MAPPER = ((JacksonAdapter) JacksonAdapter.createDefaultSerializerAdapter())\n         .serializer();\n \n+    private static final String ADD = \"add\";\n+    private static final String REMOVE = \"remove\";\n+    private static final String REPLACE = \"replace\";\n+    private static final String MOVE = \"move\";\n+    private static final String COPY = \"copy\";\n+    private static final String TEST = \"test\";\n+\n     private final ClientLogger logger = new ClientLogger(JsonPatchDocument.class);\n \n     private final List<JsonPatchOperation> operations;\n+    private final JsonSerializer serializer;\n \n     /**\n      * Creates a new JSON Patch document.\n      */\n     public JsonPatchDocument() {\n+        this(null);\n+    }\n+\n+    /**\n+     * Creates a new JSON Patch document.\n+     * <p>\n+     * If {@code serializer} isn't specified {@link JacksonAdapter} will be used.\n+     *\n+     * @param serializer The {@link JsonSerializer} that will be used to serialize patch operation values.\n+     */\n+    public JsonPatchDocument(JsonSerializer serializer) {\n         this.operations = new ArrayList<>();\n+        this.serializer = serializer;\n+    }\n+\n+    /**\n+     * Gets the JSON Patch operations in this document.\n+     *\n+     * @return The JSON Patch operations in this document.\n+     */\n+    public List<Object> getJsonPatchOperations() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwNTE1Mg=="}, "originalCommit": {"oid": "28a0e5daf61c8073b198d9830c9ebbfbddb3fc90"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDQzMTczOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/jsonpatch/JsonPatchDocument.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODozMDoyNlrOHW7U7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTowNDo1OFrOHW9Agg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgwMjczMg==", "bodyText": "I think switching the behavior of this parameter based on ctor parameter might be a little confusing.\nImagine you were replacing some trivial properties in the beginning but now wanting to pass a serialized object into another property. Passing the serializer into ctor would change the behavior of all existing code.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15430#discussion_r493802732", "createdAt": "2020-09-23T18:30:26Z", "author": {"login": "pakrym"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/jsonpatch/JsonPatchDocument.java", "diffHunk": "@@ -65,19 +87,17 @@ public JsonPatchDocument appendAdd(String path, String rawJsonValue) {\n      *\n      * <p><strong>Code Samples</strong></p>\n      *\n-     * {@codesnippet com.azure.core.experimental.jsonpatch.JsonPatchDocument.appendReplace#String-String}\n+     * {@codesnippet com.azure.core.experimental.jsonpatch.JsonPatchDocument.appendReplace#String-Object}\n      *\n      * @param path The path to replace.\n-     * @param rawJsonValue The raw JSON value to use as the replacement.\n+     * @param value The value to use as the replacement.\n      * @return The updated JsonPatchDocument object.\n-     * @throws NullPointerException If {@code path} or {@code rawJsonValue} is null.\n+     * @throws NullPointerException If {@code path} is null.\n      */\n-    public JsonPatchDocument appendReplace(String path, String rawJsonValue) {\n+    public JsonPatchDocument appendReplace(String path, Object value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23857832273b82611154a7d300574ba8c0f5ad5a"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgyNDQ2Nw==", "bodyText": "Do we foresee it being a common scenario for multiple seriliazers to be used when interacting with a single JsonPatchDocument? With the pattern being the patch document is tied to a single serializer I would think that a different document would be used.\nAnother possible solution to this problem, given JsonPatchOperation is in public API is to add an appendOperation(JsonPatchOperation operation) API where the customer would set the optionalValue manually if they wanted to use multiple serializers for a single document.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15430#discussion_r493824467", "createdAt": "2020-09-23T18:57:23Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/jsonpatch/JsonPatchDocument.java", "diffHunk": "@@ -65,19 +87,17 @@ public JsonPatchDocument appendAdd(String path, String rawJsonValue) {\n      *\n      * <p><strong>Code Samples</strong></p>\n      *\n-     * {@codesnippet com.azure.core.experimental.jsonpatch.JsonPatchDocument.appendReplace#String-String}\n+     * {@codesnippet com.azure.core.experimental.jsonpatch.JsonPatchDocument.appendReplace#String-Object}\n      *\n      * @param path The path to replace.\n-     * @param rawJsonValue The raw JSON value to use as the replacement.\n+     * @param value The value to use as the replacement.\n      * @return The updated JsonPatchDocument object.\n-     * @throws NullPointerException If {@code path} or {@code rawJsonValue} is null.\n+     * @throws NullPointerException If {@code path} is null.\n      */\n-    public JsonPatchDocument appendReplace(String path, String rawJsonValue) {\n+    public JsonPatchDocument appendReplace(String path, Object value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgwMjczMg=="}, "originalCommit": {"oid": "23857832273b82611154a7d300574ba8c0f5ad5a"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgzMDI3NA==", "bodyText": "I was confused as to what default behavior is.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15430#discussion_r493830274", "createdAt": "2020-09-23T19:04:58Z", "author": {"login": "pakrym"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/jsonpatch/JsonPatchDocument.java", "diffHunk": "@@ -65,19 +87,17 @@ public JsonPatchDocument appendAdd(String path, String rawJsonValue) {\n      *\n      * <p><strong>Code Samples</strong></p>\n      *\n-     * {@codesnippet com.azure.core.experimental.jsonpatch.JsonPatchDocument.appendReplace#String-String}\n+     * {@codesnippet com.azure.core.experimental.jsonpatch.JsonPatchDocument.appendReplace#String-Object}\n      *\n      * @param path The path to replace.\n-     * @param rawJsonValue The raw JSON value to use as the replacement.\n+     * @param value The value to use as the replacement.\n      * @return The updated JsonPatchDocument object.\n-     * @throws NullPointerException If {@code path} or {@code rawJsonValue} is null.\n+     * @throws NullPointerException If {@code path} is null.\n      */\n-    public JsonPatchDocument appendReplace(String path, String rawJsonValue) {\n+    public JsonPatchDocument appendReplace(String path, Object value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgwMjczMg=="}, "originalCommit": {"oid": "23857832273b82611154a7d300574ba8c0f5ad5a"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 995, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}