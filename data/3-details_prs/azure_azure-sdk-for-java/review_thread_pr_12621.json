{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNjIxMDUw", "number": 12621, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTo0NToxNVrOEKSa2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNDo1Mzo0OFrOELuLNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjIzMDAwOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureBasicFileAttributes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTo0NToxNVrOGrPlww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoyMjozNlrOGrQgsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5NzM3OQ==", "bodyText": "nit: May want to remove the last line \ud83d\ude03", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12621#discussion_r447997379", "createdAt": "2020-06-30T21:45:15Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureBasicFileAttributes.java", "diffHunk": "@@ -0,0 +1,142 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.nio;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.models.BlobProperties;\n+import com.azure.storage.blob.models.BlobStorageException;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileAttribute;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Provides support for basic file attributes.\n+ * <p>\n+ * The properties available on this type are a strict subset of {@link AzureBlobFileAttributes}, and the two types have\n+ * the same network behavior. Therefore, while this type is offered for compliance with the NIO spec,\n+ * {@link AzureBlobFileAttributes} is generally preferred.\n+ * <p>\n+ * Some attributes are not supported. Refer to the javadocs on each method for more information.\n+ * {@inheritDoc}\n+ */\n+public class AzureBasicFileAttributes implements BasicFileAttributes {\n+    private final ClientLogger logger = new ClientLogger(AzureBasicFileAttributes.class);\n+\n+    // For verifying parameters on FileSystemProvider.readAttributes\n+    static final Set<String> ATTRIBUTE_STRINGS;\n+    static {\n+        Set<String> set = new HashSet<>();\n+        set.add(\"lastModifiedTime\");\n+        set.add(\"isRegularFile\");\n+        set.add(\"isDirectory\");\n+        set.add(\"isSymbolicLink\");\n+        set.add(\"isOther\");\n+        set.add(\"size\");\n+        set.add(\"creationTime\");\n+        ATTRIBUTE_STRINGS = Collections.unmodifiableSet(set);\n+    }\n+\n+    private final BlobProperties properties;\n+\n+    /*\n+    There are some work-arounds we could do to try to accommodate virtual directories such as making a checkDirStatus\n+    call before or after getProperties to throw an appropriate error or adding an isVirtualDirectory method. However,\n+    the former wastes network time only to throw a slightly more specific error when we will throw on 404 anyway. The\n+    latter introduces virtual directories into the actual code path/api surface. While we are clear in our docs about\n+    the possible pitfalls of virtual directories, and customers should be aware of it, they shouldn't have to code\n+    against it. Therefore, we fall back to documenting that reading attributes on a virtual directory will throw. And\n+    who reads attributes on a directory anyway?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f24802627cbc3de033da2364320a04983883ccb9"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxMjQ2Nw==", "bodyText": "Yeaa probably :(", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12621#discussion_r448012467", "createdAt": "2020-06-30T22:22:36Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureBasicFileAttributes.java", "diffHunk": "@@ -0,0 +1,142 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.nio;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.models.BlobProperties;\n+import com.azure.storage.blob.models.BlobStorageException;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileAttribute;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Provides support for basic file attributes.\n+ * <p>\n+ * The properties available on this type are a strict subset of {@link AzureBlobFileAttributes}, and the two types have\n+ * the same network behavior. Therefore, while this type is offered for compliance with the NIO spec,\n+ * {@link AzureBlobFileAttributes} is generally preferred.\n+ * <p>\n+ * Some attributes are not supported. Refer to the javadocs on each method for more information.\n+ * {@inheritDoc}\n+ */\n+public class AzureBasicFileAttributes implements BasicFileAttributes {\n+    private final ClientLogger logger = new ClientLogger(AzureBasicFileAttributes.class);\n+\n+    // For verifying parameters on FileSystemProvider.readAttributes\n+    static final Set<String> ATTRIBUTE_STRINGS;\n+    static {\n+        Set<String> set = new HashSet<>();\n+        set.add(\"lastModifiedTime\");\n+        set.add(\"isRegularFile\");\n+        set.add(\"isDirectory\");\n+        set.add(\"isSymbolicLink\");\n+        set.add(\"isOther\");\n+        set.add(\"size\");\n+        set.add(\"creationTime\");\n+        ATTRIBUTE_STRINGS = Collections.unmodifiableSet(set);\n+    }\n+\n+    private final BlobProperties properties;\n+\n+    /*\n+    There are some work-arounds we could do to try to accommodate virtual directories such as making a checkDirStatus\n+    call before or after getProperties to throw an appropriate error or adding an isVirtualDirectory method. However,\n+    the former wastes network time only to throw a slightly more specific error when we will throw on 404 anyway. The\n+    latter introduces virtual directories into the actual code path/api surface. While we are clear in our docs about\n+    the possible pitfalls of virtual directories, and customers should be aware of it, they shouldn't have to code\n+    against it. Therefore, we fall back to documenting that reading attributes on a virtual directory will throw. And\n+    who reads attributes on a directory anyway?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5NzM3OQ=="}, "originalCommit": {"oid": "f24802627cbc3de033da2364320a04983883ccb9"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjIzNDkyOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureBasicFileAttributes.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTo0NzowMVrOGrPosQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNDo0NDoxM1rOGtaY0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5ODEyOQ==", "bodyText": "Should this throw UnsupportedOperationException if it isn't supported?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12621#discussion_r447998129", "createdAt": "2020-06-30T21:47:01Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureBasicFileAttributes.java", "diffHunk": "@@ -0,0 +1,142 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.nio;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.models.BlobProperties;\n+import com.azure.storage.blob.models.BlobStorageException;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileAttribute;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Provides support for basic file attributes.\n+ * <p>\n+ * The properties available on this type are a strict subset of {@link AzureBlobFileAttributes}, and the two types have\n+ * the same network behavior. Therefore, while this type is offered for compliance with the NIO spec,\n+ * {@link AzureBlobFileAttributes} is generally preferred.\n+ * <p>\n+ * Some attributes are not supported. Refer to the javadocs on each method for more information.\n+ * {@inheritDoc}\n+ */\n+public class AzureBasicFileAttributes implements BasicFileAttributes {\n+    private final ClientLogger logger = new ClientLogger(AzureBasicFileAttributes.class);\n+\n+    // For verifying parameters on FileSystemProvider.readAttributes\n+    static final Set<String> ATTRIBUTE_STRINGS;\n+    static {\n+        Set<String> set = new HashSet<>();\n+        set.add(\"lastModifiedTime\");\n+        set.add(\"isRegularFile\");\n+        set.add(\"isDirectory\");\n+        set.add(\"isSymbolicLink\");\n+        set.add(\"isOther\");\n+        set.add(\"size\");\n+        set.add(\"creationTime\");\n+        ATTRIBUTE_STRINGS = Collections.unmodifiableSet(set);\n+    }\n+\n+    private final BlobProperties properties;\n+\n+    /*\n+    There are some work-arounds we could do to try to accommodate virtual directories such as making a checkDirStatus\n+    call before or after getProperties to throw an appropriate error or adding an isVirtualDirectory method. However,\n+    the former wastes network time only to throw a slightly more specific error when we will throw on 404 anyway. The\n+    latter introduces virtual directories into the actual code path/api surface. While we are clear in our docs about\n+    the possible pitfalls of virtual directories, and customers should be aware of it, they shouldn't have to code\n+    against it. Therefore, we fall back to documenting that reading attributes on a virtual directory will throw. And\n+    who reads attributes on a directory anyway?\n+     */\n+    AzureBasicFileAttributes(Path path) throws IOException {\n+        try {\n+            this.properties = new AzureResource(path).getBlobClient().getProperties();\n+        } catch (BlobStorageException e) {\n+            throw LoggingUtility.logError(logger, new IOException(e));\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public FileTime lastModifiedTime() {\n+        return FileTime.from(properties.getLastModified().toInstant());\n+    }\n+\n+    /**\n+     * Unsupported.\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public FileTime lastAccessTime() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public FileTime creationTime() {\n+        return FileTime.from(properties.getCreationTime().toInstant());\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isRegularFile() {\n+        return !this.properties.getMetadata().getOrDefault(AzureResource.DIR_METADATA_MARKER, \"false\").equals(\"true\");\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * <p>\n+     * Will only return true if the directory is a concrete directory. See\n+     * {@link AzureFileSystemProvider#createDirectory(Path, FileAttribute[])} for more information on virtual and\n+     * concrete directories.\n+     */\n+    @Override\n+    public boolean isDirectory() {\n+        return !this.isRegularFile();\n+    }\n+\n+    /**\n+     * @return false. Symbolic links are not supported.\n+     */\n+    @Override\n+    public boolean isSymbolicLink() {\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f24802627cbc3de033da2364320a04983883ccb9"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxMjc1MQ==", "bodyText": "I'm not sure. In some sense it's just always false, right? But maybe it makes it more clear that sym links aren't supported if I throw?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12621#discussion_r448012751", "createdAt": "2020-06-30T22:23:30Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureBasicFileAttributes.java", "diffHunk": "@@ -0,0 +1,142 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.nio;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.models.BlobProperties;\n+import com.azure.storage.blob.models.BlobStorageException;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileAttribute;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Provides support for basic file attributes.\n+ * <p>\n+ * The properties available on this type are a strict subset of {@link AzureBlobFileAttributes}, and the two types have\n+ * the same network behavior. Therefore, while this type is offered for compliance with the NIO spec,\n+ * {@link AzureBlobFileAttributes} is generally preferred.\n+ * <p>\n+ * Some attributes are not supported. Refer to the javadocs on each method for more information.\n+ * {@inheritDoc}\n+ */\n+public class AzureBasicFileAttributes implements BasicFileAttributes {\n+    private final ClientLogger logger = new ClientLogger(AzureBasicFileAttributes.class);\n+\n+    // For verifying parameters on FileSystemProvider.readAttributes\n+    static final Set<String> ATTRIBUTE_STRINGS;\n+    static {\n+        Set<String> set = new HashSet<>();\n+        set.add(\"lastModifiedTime\");\n+        set.add(\"isRegularFile\");\n+        set.add(\"isDirectory\");\n+        set.add(\"isSymbolicLink\");\n+        set.add(\"isOther\");\n+        set.add(\"size\");\n+        set.add(\"creationTime\");\n+        ATTRIBUTE_STRINGS = Collections.unmodifiableSet(set);\n+    }\n+\n+    private final BlobProperties properties;\n+\n+    /*\n+    There are some work-arounds we could do to try to accommodate virtual directories such as making a checkDirStatus\n+    call before or after getProperties to throw an appropriate error or adding an isVirtualDirectory method. However,\n+    the former wastes network time only to throw a slightly more specific error when we will throw on 404 anyway. The\n+    latter introduces virtual directories into the actual code path/api surface. While we are clear in our docs about\n+    the possible pitfalls of virtual directories, and customers should be aware of it, they shouldn't have to code\n+    against it. Therefore, we fall back to documenting that reading attributes on a virtual directory will throw. And\n+    who reads attributes on a directory anyway?\n+     */\n+    AzureBasicFileAttributes(Path path) throws IOException {\n+        try {\n+            this.properties = new AzureResource(path).getBlobClient().getProperties();\n+        } catch (BlobStorageException e) {\n+            throw LoggingUtility.logError(logger, new IOException(e));\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public FileTime lastModifiedTime() {\n+        return FileTime.from(properties.getLastModified().toInstant());\n+    }\n+\n+    /**\n+     * Unsupported.\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public FileTime lastAccessTime() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public FileTime creationTime() {\n+        return FileTime.from(properties.getCreationTime().toInstant());\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isRegularFile() {\n+        return !this.properties.getMetadata().getOrDefault(AzureResource.DIR_METADATA_MARKER, \"false\").equals(\"true\");\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * <p>\n+     * Will only return true if the directory is a concrete directory. See\n+     * {@link AzureFileSystemProvider#createDirectory(Path, FileAttribute[])} for more information on virtual and\n+     * concrete directories.\n+     */\n+    @Override\n+    public boolean isDirectory() {\n+        return !this.isRegularFile();\n+    }\n+\n+    /**\n+     * @return false. Symbolic links are not supported.\n+     */\n+    @Override\n+    public boolean isSymbolicLink() {\n+        return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5ODEyOQ=="}, "originalCommit": {"oid": "f24802627cbc3de033da2364320a04983883ccb9"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI3MTQ0Mw==", "bodyText": "I think returning always false is correct. Throwing UnsupportedOperationException would mean \"I cannot check if file is symlink or not` in plain English. I believe our file system doesn't have symlinks so all files are real by definition, therefore we know how to check if they're symlinks or not.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12621#discussion_r450271443", "createdAt": "2020-07-06T14:44:13Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureBasicFileAttributes.java", "diffHunk": "@@ -0,0 +1,142 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.nio;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.models.BlobProperties;\n+import com.azure.storage.blob.models.BlobStorageException;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileAttribute;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Provides support for basic file attributes.\n+ * <p>\n+ * The properties available on this type are a strict subset of {@link AzureBlobFileAttributes}, and the two types have\n+ * the same network behavior. Therefore, while this type is offered for compliance with the NIO spec,\n+ * {@link AzureBlobFileAttributes} is generally preferred.\n+ * <p>\n+ * Some attributes are not supported. Refer to the javadocs on each method for more information.\n+ * {@inheritDoc}\n+ */\n+public class AzureBasicFileAttributes implements BasicFileAttributes {\n+    private final ClientLogger logger = new ClientLogger(AzureBasicFileAttributes.class);\n+\n+    // For verifying parameters on FileSystemProvider.readAttributes\n+    static final Set<String> ATTRIBUTE_STRINGS;\n+    static {\n+        Set<String> set = new HashSet<>();\n+        set.add(\"lastModifiedTime\");\n+        set.add(\"isRegularFile\");\n+        set.add(\"isDirectory\");\n+        set.add(\"isSymbolicLink\");\n+        set.add(\"isOther\");\n+        set.add(\"size\");\n+        set.add(\"creationTime\");\n+        ATTRIBUTE_STRINGS = Collections.unmodifiableSet(set);\n+    }\n+\n+    private final BlobProperties properties;\n+\n+    /*\n+    There are some work-arounds we could do to try to accommodate virtual directories such as making a checkDirStatus\n+    call before or after getProperties to throw an appropriate error or adding an isVirtualDirectory method. However,\n+    the former wastes network time only to throw a slightly more specific error when we will throw on 404 anyway. The\n+    latter introduces virtual directories into the actual code path/api surface. While we are clear in our docs about\n+    the possible pitfalls of virtual directories, and customers should be aware of it, they shouldn't have to code\n+    against it. Therefore, we fall back to documenting that reading attributes on a virtual directory will throw. And\n+    who reads attributes on a directory anyway?\n+     */\n+    AzureBasicFileAttributes(Path path) throws IOException {\n+        try {\n+            this.properties = new AzureResource(path).getBlobClient().getProperties();\n+        } catch (BlobStorageException e) {\n+            throw LoggingUtility.logError(logger, new IOException(e));\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public FileTime lastModifiedTime() {\n+        return FileTime.from(properties.getLastModified().toInstant());\n+    }\n+\n+    /**\n+     * Unsupported.\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public FileTime lastAccessTime() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public FileTime creationTime() {\n+        return FileTime.from(properties.getCreationTime().toInstant());\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isRegularFile() {\n+        return !this.properties.getMetadata().getOrDefault(AzureResource.DIR_METADATA_MARKER, \"false\").equals(\"true\");\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * <p>\n+     * Will only return true if the directory is a concrete directory. See\n+     * {@link AzureFileSystemProvider#createDirectory(Path, FileAttribute[])} for more information on virtual and\n+     * concrete directories.\n+     */\n+    @Override\n+    public boolean isDirectory() {\n+        return !this.isRegularFile();\n+    }\n+\n+    /**\n+     * @return false. Symbolic links are not supported.\n+     */\n+    @Override\n+    public boolean isSymbolicLink() {\n+        return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5ODEyOQ=="}, "originalCommit": {"oid": "f24802627cbc3de033da2364320a04983883ccb9"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjIzODM2OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureBlobFileAttributeView.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTo0Nzo1NlrOGrPqpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoyMzo0OFrOGrQiMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5ODYyOQ==", "bodyText": "Should be able to pass m here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12621#discussion_r447998629", "createdAt": "2020-06-30T21:47:56Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureBlobFileAttributeView.java", "diffHunk": "@@ -0,0 +1,146 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.nio;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.models.AccessTier;\n+import com.azure.storage.blob.models.BlobHttpHeaders;\n+import com.azure.storage.blob.models.BlobStorageException;\n+import com.azure.storage.blob.specialized.BlobClientBase;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.BasicFileAttributeView;\n+import java.nio.file.attribute.FileTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+/**\n+ * A file attribute view that provides a view of attributes specific to files stored as blobs in Azure Storage.\n+ * <p>\n+ * All attributes are retrieved from the file system as a bulk operation.\n+ * <p>\n+ * {@link #setTimes(FileTime, FileTime, FileTime)} is not supported.\n+ */\n+public final class AzureBlobFileAttributeView implements BasicFileAttributeView {\n+    private final ClientLogger logger = new ClientLogger(AzureBlobFileAttributeView.class);\n+\n+    static final String ATTR_CONSUMER_ERROR = \"Exception thrown by attribute consumer\";\n+\n+    private final Path path;\n+\n+    AzureBlobFileAttributeView(Path path) {\n+        this.path = path;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    static Map<String, Consumer<Object>> setAttributeConsumers(AzureBlobFileAttributeView view) {\n+        Map<String, Consumer<Object>> map = new HashMap<>();\n+        map.put(\"blobHttpHeaders\", obj -> {\n+            try {\n+                view.setBlobHttpHeaders((BlobHttpHeaders) obj);\n+            } catch (IOException e) {\n+                throw LoggingUtility.logError(view.logger, new UncheckedIOException(ATTR_CONSUMER_ERROR, e));\n+            }\n+        });\n+        map.put(\"metadata\", obj -> {\n+            try {\n+                Map<String, String> m = (Map<String, String>) obj;\n+                if (m == null) {\n+                    throw LoggingUtility.logError(view.logger, new ClassCastException());\n+                }\n+                view.setMetadata((Map<String, String>) obj);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f24802627cbc3de033da2364320a04983883ccb9"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxMjg1MA==", "bodyText": "Good catch", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12621#discussion_r448012850", "createdAt": "2020-06-30T22:23:48Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureBlobFileAttributeView.java", "diffHunk": "@@ -0,0 +1,146 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.nio;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.models.AccessTier;\n+import com.azure.storage.blob.models.BlobHttpHeaders;\n+import com.azure.storage.blob.models.BlobStorageException;\n+import com.azure.storage.blob.specialized.BlobClientBase;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.BasicFileAttributeView;\n+import java.nio.file.attribute.FileTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+/**\n+ * A file attribute view that provides a view of attributes specific to files stored as blobs in Azure Storage.\n+ * <p>\n+ * All attributes are retrieved from the file system as a bulk operation.\n+ * <p>\n+ * {@link #setTimes(FileTime, FileTime, FileTime)} is not supported.\n+ */\n+public final class AzureBlobFileAttributeView implements BasicFileAttributeView {\n+    private final ClientLogger logger = new ClientLogger(AzureBlobFileAttributeView.class);\n+\n+    static final String ATTR_CONSUMER_ERROR = \"Exception thrown by attribute consumer\";\n+\n+    private final Path path;\n+\n+    AzureBlobFileAttributeView(Path path) {\n+        this.path = path;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    static Map<String, Consumer<Object>> setAttributeConsumers(AzureBlobFileAttributeView view) {\n+        Map<String, Consumer<Object>> map = new HashMap<>();\n+        map.put(\"blobHttpHeaders\", obj -> {\n+            try {\n+                view.setBlobHttpHeaders((BlobHttpHeaders) obj);\n+            } catch (IOException e) {\n+                throw LoggingUtility.logError(view.logger, new UncheckedIOException(ATTR_CONSUMER_ERROR, e));\n+            }\n+        });\n+        map.put(\"metadata\", obj -> {\n+            try {\n+                Map<String, String> m = (Map<String, String>) obj;\n+                if (m == null) {\n+                    throw LoggingUtility.logError(view.logger, new ClassCastException());\n+                }\n+                view.setMetadata((Map<String, String>) obj);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5ODYyOQ=="}, "originalCommit": {"oid": "f24802627cbc3de033da2364320a04983883ccb9"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjI0NTE1OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureBlobFileAttributes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTo1MDozM1rOGrPvFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTo1MDozM1rOGrPvFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5OTc2NA==", "bodyText": "Same question about throwing UnsupportedOperationException.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12621#discussion_r447999764", "createdAt": "2020-06-30T21:50:33Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureBlobFileAttributes.java", "diffHunk": "@@ -0,0 +1,290 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.nio;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.models.AccessTier;\n+import com.azure.storage.blob.models.ArchiveStatus;\n+import com.azure.storage.blob.models.BlobHttpHeaders;\n+import com.azure.storage.blob.models.BlobProperties;\n+import com.azure.storage.blob.models.BlobStorageException;\n+import com.azure.storage.blob.models.BlobType;\n+import com.azure.storage.blob.models.CopyStatusType;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileAttribute;\n+import java.nio.file.attribute.FileTime;\n+import java.time.OffsetDateTime;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+/**\n+ * File attributes associated with a file stored as a blob in Azure Storage.\n+ * <p>\n+ * Some of the attributes inherited from {@link BasicFileAttributes} are not supported. See the docs on each method for\n+ * more information.\n+ */\n+public final class AzureBlobFileAttributes implements BasicFileAttributes {\n+    /*\n+    Some blob properties do not have getters as they do not make sense in the context of nio. These properties are:\n+        - incremental snapshot related properties\n+        - lease related properties\n+        - sequence number\n+        - encryption key sha256\n+     */\n+\n+    private final ClientLogger logger = new ClientLogger(AzureBlobFileAttributes.class);\n+\n+    private final BlobProperties properties;\n+\n+    AzureBlobFileAttributes(Path path) throws IOException {\n+        try {\n+            this.properties = new AzureResource(path).getBlobClient().getProperties();\n+        } catch (BlobStorageException e) {\n+            throw LoggingUtility.logError(logger, new IOException(\"Path: \" + path.toString(), e));\n+        }\n+    }\n+\n+    static Map<String, Supplier<Object>> getAttributeSuppliers(AzureBlobFileAttributes attributes) {\n+        Map<String, Supplier<Object>> map = new HashMap<>();\n+        map.put(\"creationTime\", attributes::creationTime);\n+        map.put(\"lastModifiedTime\", attributes::lastModifiedTime);\n+        map.put(\"eTag\", attributes::eTag);\n+        map.put(\"blobHttpHeaders\", attributes::blobHttpHeaders);\n+        map.put(\"blobType\", attributes::blobType);\n+        map.put(\"copyId\", attributes::copyId);\n+        map.put(\"copyStatus\", attributes::copyStatus);\n+        map.put(\"copySource\", attributes::copySource);\n+        map.put(\"copyProgress\", attributes::copyProgress);\n+        map.put(\"copyCompletionTime\", attributes::copyCompletionTime);\n+        map.put(\"copyStatusDescription\", attributes::copyStatusDescription);\n+        map.put(\"isServerEncrypted\", attributes::isServerEncrypted);\n+        map.put(\"accessTier\", attributes::accessTier);\n+        map.put(\"isAccessTierInferred\", attributes::isAccessTierInferred);\n+        map.put(\"archiveStatus\", attributes::archiveStatus);\n+        map.put(\"accessTierChangeTime\", attributes::accessTierChangeTime);\n+        map.put(\"metadata\", attributes::metadata);\n+        map.put(\"committedBlockCount\", attributes::committedBlockCount);\n+        map.put(\"isRegularFile\", attributes::isRegularFile);\n+        map.put(\"isDirectory\", attributes::isDirectory);\n+        map.put(\"isSymbolicLink\", attributes::isSymbolicLink);\n+        map.put(\"isOther\", attributes::isOther);\n+        map.put(\"size\", attributes::size);\n+        return map;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public FileTime creationTime() {\n+        return FileTime.from(this.properties.getCreationTime().toInstant());\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public FileTime lastModifiedTime() {\n+        return FileTime.from(this.properties.getLastModified().toInstant());\n+    }\n+\n+    /**\n+     * @return the eTag of the blob\n+     */\n+    public String eTag() {\n+        return this.properties.getETag();\n+    }\n+\n+    /**\n+     * @return {@link BlobHttpHeaders}\n+     */\n+    public BlobHttpHeaders blobHttpHeaders() {\n+        /*\n+        We return these all as one value so it's consistent with the way of setting, especially the setAttribute method\n+        that accepts a string argument for the name of the property. Returning them individually would mean we have to\n+        support setting them individually as well, which is not possible due to service constraints.\n+         */\n+        return new BlobHttpHeaders()\n+            .setContentType(this.properties.getContentType())\n+            .setContentLanguage(this.properties.getContentLanguage())\n+            .setContentMd5(this.properties.getContentMd5())\n+            .setContentDisposition(this.properties.getContentDisposition())\n+            .setContentEncoding(this.properties.getContentEncoding())\n+            .setCacheControl(this.properties.getCacheControl());\n+    }\n+\n+    /**\n+     * @return the type of the blob\n+     */\n+    public BlobType blobType() {\n+        return this.properties.getBlobType();\n+    }\n+\n+    /**\n+     * @return the identifier of the last copy operation. If this blob hasn't been the target of a copy operation or has\n+     * been modified since this won't be set.\n+     */\n+    public String copyId() {\n+        return this.properties.getCopyId();\n+    }\n+\n+    /**\n+     * @return the status of the last copy operation. If this blob hasn't been the target of a copy operation or has\n+     * been modified since this won't be set.\n+     */\n+    public CopyStatusType copyStatus() {\n+        return this.properties.getCopyStatus();\n+    }\n+\n+    /**\n+     * @return the source blob URL from the last copy operation. If this blob hasn't been the target of a copy operation\n+     * or has been modified since this won't be set.\n+     */\n+    public String copySource() {\n+        return this.properties.getCopySource();\n+    }\n+\n+    /**\n+     * @return the number of bytes copied and total bytes in the source from the last copy operation (bytes copied/total\n+     * bytes). If this blob hasn't been the target of a copy operation or has been modified since this won't be set.\n+     */\n+    public String copyProgress() {\n+        return this.properties.getCopyProgress();\n+    }\n+\n+    /**\n+     * @return the completion time of the last copy operation. If this blob hasn't been the target of a copy operation\n+     * or has been modified since this won't be set.\n+     */\n+    public OffsetDateTime copyCompletionTime() {\n+        return this.properties.getCopyCompletionTime();\n+    }\n+\n+    /**\n+     * @return the description of the last copy failure, this is set when the {@link #copyStatus() getCopyStatus} is\n+     * {@link CopyStatusType#FAILED failed} or {@link CopyStatusType#ABORTED aborted}. If this blob hasn't been the\n+     * target of a copy operation or has been modified since this won't be set.\n+     */\n+    public String copyStatusDescription() {\n+        return this.properties.getCopyStatusDescription();\n+    }\n+\n+    /**\n+     * @return the status of the blob being encrypted on the server\n+     */\n+    public Boolean isServerEncrypted() {\n+        return this.properties.isServerEncrypted();\n+    }\n+\n+    /**\n+     * @return the tier of the blob. This is only set for Page blobs on a premium storage account or for Block blobs on\n+     * blob storage or general purpose V2 account.\n+     */\n+    public AccessTier accessTier() {\n+        return this.properties.getAccessTier();\n+    }\n+\n+    /**\n+     * @return the status of the tier being inferred for the blob. This is only set for Page blobs on a premium storage\n+     * account or for Block blobs on blob storage or general purpose V2 account.\n+     */\n+    public Boolean isAccessTierInferred() {\n+        return this.properties.isAccessTierInferred();\n+    }\n+\n+    /**\n+     * @return the archive status of the blob. This is only for blobs on a blob storage and general purpose v2 account.\n+     */\n+    public ArchiveStatus archiveStatus() {\n+        return this.properties.getArchiveStatus();\n+    }\n+\n+    /**\n+     * @return the time when the access tier for the blob was last changed\n+     */\n+    public OffsetDateTime accessTierChangeTime() {\n+        return this.properties.getAccessTierChangeTime();\n+    }\n+\n+    /**\n+     * @return the metadata associated with this blob\n+     */\n+    public Map<String, String> metadata() {\n+        return Collections.unmodifiableMap(this.properties.getMetadata());\n+    }\n+\n+    /**\n+     * @return the number of committed blocks in the blob. This is only returned for Append blobs.\n+     */\n+    public Integer committedBlockCount() {\n+        return this.properties.getCommittedBlockCount();\n+    }\n+\n+    /**\n+     * Unsupported.\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public FileTime lastAccessTime() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isRegularFile() {\n+        return !this.properties.getMetadata().getOrDefault(AzureResource.DIR_METADATA_MARKER, \"false\").equals(\"true\");\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * <p>\n+     * Will only return true if the directory is a concrete directory. See\n+     * {@link AzureFileSystemProvider#createDirectory(Path, FileAttribute[])} for more information on virtual and\n+     * concrete directories.\n+     */\n+    @Override\n+    public boolean isDirectory() {\n+        return !this.isRegularFile();\n+    }\n+\n+    /**\n+     * @return false. Symbolic links are not supported.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f24802627cbc3de033da2364320a04983883ccb9"}, "originalPosition": 259}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzI0NzA4OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureBasicFileAttributes.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNDo1MDowOVrOGtapOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOTowNDoyN1rOGuLybQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI3NTY0Mg==", "bodyText": "What if properties change while someone is holding reference to this object? I.e. lastModifiedTime shifts between calling this constructor and lastModifiedTime()?\nCould you check what happens if you use local file system?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12621#discussion_r450275642", "createdAt": "2020-07-06T14:50:09Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureBasicFileAttributes.java", "diffHunk": "@@ -0,0 +1,142 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.nio;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.models.BlobProperties;\n+import com.azure.storage.blob.models.BlobStorageException;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileAttribute;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Provides support for basic file attributes.\n+ * <p>\n+ * The properties available on this type are a strict subset of {@link AzureBlobFileAttributes}, and the two types have\n+ * the same network behavior. Therefore, while this type is offered for compliance with the NIO spec,\n+ * {@link AzureBlobFileAttributes} is generally preferred.\n+ * <p>\n+ * Some attributes are not supported. Refer to the javadocs on each method for more information.\n+ * {@inheritDoc}\n+ */\n+public class AzureBasicFileAttributes implements BasicFileAttributes {\n+    private final ClientLogger logger = new ClientLogger(AzureBasicFileAttributes.class);\n+\n+    // For verifying parameters on FileSystemProvider.readAttributes\n+    static final Set<String> ATTRIBUTE_STRINGS;\n+    static {\n+        Set<String> set = new HashSet<>();\n+        set.add(\"lastModifiedTime\");\n+        set.add(\"isRegularFile\");\n+        set.add(\"isDirectory\");\n+        set.add(\"isSymbolicLink\");\n+        set.add(\"isOther\");\n+        set.add(\"size\");\n+        set.add(\"creationTime\");\n+        ATTRIBUTE_STRINGS = Collections.unmodifiableSet(set);\n+    }\n+\n+    private final BlobProperties properties;\n+\n+    /*\n+    There are some work-arounds we could do to try to accommodate virtual directories such as making a checkDirStatus\n+    call before or after getProperties to throw an appropriate error or adding an isVirtualDirectory method. However,\n+    the former wastes network time only to throw a slightly more specific error when we will throw on 404 anyway. The\n+    latter introduces virtual directories into the actual code path/api surface. While we are clear in our docs about\n+    the possible pitfalls of virtual directories, and customers should be aware of it, they shouldn't have to code\n+    against it. Therefore, we fall back to documenting that reading attributes on a virtual directory will throw. And\n+    who reads attributes on a directory anyway?\n+     */\n+    AzureBasicFileAttributes(Path path) throws IOException {\n+        try {\n+            this.properties = new AzureResource(path).getBlobClient().getProperties();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f24802627cbc3de033da2364320a04983883ccb9"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyNTMxNQ==", "bodyText": "It looks like the attributes always return the same value once you've read them, and if you want an updated value, you need to make another call to read attributes, which is what we do here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12621#discussion_r451025315", "createdAt": "2020-07-07T17:23:24Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureBasicFileAttributes.java", "diffHunk": "@@ -0,0 +1,142 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.nio;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.models.BlobProperties;\n+import com.azure.storage.blob.models.BlobStorageException;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileAttribute;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Provides support for basic file attributes.\n+ * <p>\n+ * The properties available on this type are a strict subset of {@link AzureBlobFileAttributes}, and the two types have\n+ * the same network behavior. Therefore, while this type is offered for compliance with the NIO spec,\n+ * {@link AzureBlobFileAttributes} is generally preferred.\n+ * <p>\n+ * Some attributes are not supported. Refer to the javadocs on each method for more information.\n+ * {@inheritDoc}\n+ */\n+public class AzureBasicFileAttributes implements BasicFileAttributes {\n+    private final ClientLogger logger = new ClientLogger(AzureBasicFileAttributes.class);\n+\n+    // For verifying parameters on FileSystemProvider.readAttributes\n+    static final Set<String> ATTRIBUTE_STRINGS;\n+    static {\n+        Set<String> set = new HashSet<>();\n+        set.add(\"lastModifiedTime\");\n+        set.add(\"isRegularFile\");\n+        set.add(\"isDirectory\");\n+        set.add(\"isSymbolicLink\");\n+        set.add(\"isOther\");\n+        set.add(\"size\");\n+        set.add(\"creationTime\");\n+        ATTRIBUTE_STRINGS = Collections.unmodifiableSet(set);\n+    }\n+\n+    private final BlobProperties properties;\n+\n+    /*\n+    There are some work-arounds we could do to try to accommodate virtual directories such as making a checkDirStatus\n+    call before or after getProperties to throw an appropriate error or adding an isVirtualDirectory method. However,\n+    the former wastes network time only to throw a slightly more specific error when we will throw on 404 anyway. The\n+    latter introduces virtual directories into the actual code path/api surface. While we are clear in our docs about\n+    the possible pitfalls of virtual directories, and customers should be aware of it, they shouldn't have to code\n+    against it. Therefore, we fall back to documenting that reading attributes on a virtual directory will throw. And\n+    who reads attributes on a directory anyway?\n+     */\n+    AzureBasicFileAttributes(Path path) throws IOException {\n+        try {\n+            this.properties = new AzureResource(path).getBlobClient().getProperties();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI3NTY0Mg=="}, "originalCommit": {"oid": "f24802627cbc3de033da2364320a04983883ccb9"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4MDgxMw==", "bodyText": "cool, thanks for checking.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12621#discussion_r451080813", "createdAt": "2020-07-07T19:04:27Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureBasicFileAttributes.java", "diffHunk": "@@ -0,0 +1,142 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.nio;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.models.BlobProperties;\n+import com.azure.storage.blob.models.BlobStorageException;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileAttribute;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Provides support for basic file attributes.\n+ * <p>\n+ * The properties available on this type are a strict subset of {@link AzureBlobFileAttributes}, and the two types have\n+ * the same network behavior. Therefore, while this type is offered for compliance with the NIO spec,\n+ * {@link AzureBlobFileAttributes} is generally preferred.\n+ * <p>\n+ * Some attributes are not supported. Refer to the javadocs on each method for more information.\n+ * {@inheritDoc}\n+ */\n+public class AzureBasicFileAttributes implements BasicFileAttributes {\n+    private final ClientLogger logger = new ClientLogger(AzureBasicFileAttributes.class);\n+\n+    // For verifying parameters on FileSystemProvider.readAttributes\n+    static final Set<String> ATTRIBUTE_STRINGS;\n+    static {\n+        Set<String> set = new HashSet<>();\n+        set.add(\"lastModifiedTime\");\n+        set.add(\"isRegularFile\");\n+        set.add(\"isDirectory\");\n+        set.add(\"isSymbolicLink\");\n+        set.add(\"isOther\");\n+        set.add(\"size\");\n+        set.add(\"creationTime\");\n+        ATTRIBUTE_STRINGS = Collections.unmodifiableSet(set);\n+    }\n+\n+    private final BlobProperties properties;\n+\n+    /*\n+    There are some work-arounds we could do to try to accommodate virtual directories such as making a checkDirStatus\n+    call before or after getProperties to throw an appropriate error or adding an isVirtualDirectory method. However,\n+    the former wastes network time only to throw a slightly more specific error when we will throw on 404 anyway. The\n+    latter introduces virtual directories into the actual code path/api surface. While we are clear in our docs about\n+    the possible pitfalls of virtual directories, and customers should be aware of it, they shouldn't have to code\n+    against it. Therefore, we fall back to documenting that reading attributes on a virtual directory will throw. And\n+    who reads attributes on a directory anyway?\n+     */\n+    AzureBasicFileAttributes(Path path) throws IOException {\n+        try {\n+            this.properties = new AzureResource(path).getBlobClient().getProperties();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI3NTY0Mg=="}, "originalCommit": {"oid": "f24802627cbc3de033da2364320a04983883ccb9"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzI1MTI2OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureBasicFileAttributes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNDo1MTowNlrOGtar2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNDo1MTowNlrOGtar2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI3NjMxMw==", "bodyText": "Might want to add @throws to javadocs for unsupported apis.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12621#discussion_r450276313", "createdAt": "2020-07-06T14:51:06Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureBasicFileAttributes.java", "diffHunk": "@@ -0,0 +1,142 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.nio;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.models.BlobProperties;\n+import com.azure.storage.blob.models.BlobStorageException;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileAttribute;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Provides support for basic file attributes.\n+ * <p>\n+ * The properties available on this type are a strict subset of {@link AzureBlobFileAttributes}, and the two types have\n+ * the same network behavior. Therefore, while this type is offered for compliance with the NIO spec,\n+ * {@link AzureBlobFileAttributes} is generally preferred.\n+ * <p>\n+ * Some attributes are not supported. Refer to the javadocs on each method for more information.\n+ * {@inheritDoc}\n+ */\n+public class AzureBasicFileAttributes implements BasicFileAttributes {\n+    private final ClientLogger logger = new ClientLogger(AzureBasicFileAttributes.class);\n+\n+    // For verifying parameters on FileSystemProvider.readAttributes\n+    static final Set<String> ATTRIBUTE_STRINGS;\n+    static {\n+        Set<String> set = new HashSet<>();\n+        set.add(\"lastModifiedTime\");\n+        set.add(\"isRegularFile\");\n+        set.add(\"isDirectory\");\n+        set.add(\"isSymbolicLink\");\n+        set.add(\"isOther\");\n+        set.add(\"size\");\n+        set.add(\"creationTime\");\n+        ATTRIBUTE_STRINGS = Collections.unmodifiableSet(set);\n+    }\n+\n+    private final BlobProperties properties;\n+\n+    /*\n+    There are some work-arounds we could do to try to accommodate virtual directories such as making a checkDirStatus\n+    call before or after getProperties to throw an appropriate error or adding an isVirtualDirectory method. However,\n+    the former wastes network time only to throw a slightly more specific error when we will throw on 404 anyway. The\n+    latter introduces virtual directories into the actual code path/api surface. While we are clear in our docs about\n+    the possible pitfalls of virtual directories, and customers should be aware of it, they shouldn't have to code\n+    against it. Therefore, we fall back to documenting that reading attributes on a virtual directory will throw. And\n+    who reads attributes on a directory anyway?\n+     */\n+    AzureBasicFileAttributes(Path path) throws IOException {\n+        try {\n+            this.properties = new AzureResource(path).getBlobClient().getProperties();\n+        } catch (BlobStorageException e) {\n+            throw LoggingUtility.logError(logger, new IOException(e));\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public FileTime lastModifiedTime() {\n+        return FileTime.from(properties.getLastModified().toInstant());\n+    }\n+\n+    /**\n+     * Unsupported.\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public FileTime lastAccessTime() {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f24802627cbc3de033da2364320a04983883ccb9"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzI2MzI1OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureBlobFileAttributes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNDo1Mzo0OFrOGtazOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNDo1Mzo0OFrOGtazOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI3ODIwMw==", "bodyText": "same question here about keeping state.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12621#discussion_r450278203", "createdAt": "2020-07-06T14:53:48Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureBlobFileAttributes.java", "diffHunk": "@@ -0,0 +1,290 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.nio;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.models.AccessTier;\n+import com.azure.storage.blob.models.ArchiveStatus;\n+import com.azure.storage.blob.models.BlobHttpHeaders;\n+import com.azure.storage.blob.models.BlobProperties;\n+import com.azure.storage.blob.models.BlobStorageException;\n+import com.azure.storage.blob.models.BlobType;\n+import com.azure.storage.blob.models.CopyStatusType;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileAttribute;\n+import java.nio.file.attribute.FileTime;\n+import java.time.OffsetDateTime;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+/**\n+ * File attributes associated with a file stored as a blob in Azure Storage.\n+ * <p>\n+ * Some of the attributes inherited from {@link BasicFileAttributes} are not supported. See the docs on each method for\n+ * more information.\n+ */\n+public final class AzureBlobFileAttributes implements BasicFileAttributes {\n+    /*\n+    Some blob properties do not have getters as they do not make sense in the context of nio. These properties are:\n+        - incremental snapshot related properties\n+        - lease related properties\n+        - sequence number\n+        - encryption key sha256\n+     */\n+\n+    private final ClientLogger logger = new ClientLogger(AzureBlobFileAttributes.class);\n+\n+    private final BlobProperties properties;\n+\n+    AzureBlobFileAttributes(Path path) throws IOException {\n+        try {\n+            this.properties = new AzureResource(path).getBlobClient().getProperties();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f24802627cbc3de033da2364320a04983883ccb9"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3705, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}