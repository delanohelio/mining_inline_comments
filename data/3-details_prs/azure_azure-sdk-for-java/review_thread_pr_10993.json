{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NTI1NTA0", "number": 10993, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjozNzowM1rOD61lWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMjo1Njo0M1rOD9OehA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDIxOTE1OnYy", "diffSide": "RIGHT", "path": "sdk/management/docs/AUTH.md", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjozNzowM1rOGS45dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNTo1OTozOFrOGTNlQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTc2NA==", "bodyText": "I think most common one will be UserPasswordCredential or InteractiveBrowserCredential. Otherwise, we need to add a guide for how to create a service principal.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10993#discussion_r422459764", "createdAt": "2020-05-09T06:37:03Z", "author": {"login": "ChenTanyi"}, "path": "sdk/management/docs/AUTH.md", "diffHunk": "@@ -0,0 +1,92 @@\n+# Authentication in Azure Management Library for Java\n+\n+To use the APIs in the Azure Management Library for Java, as the first step you need to create an authenticated client. This document is to introduce several possible approaches for authentication.\n+\n+## Prerequisites\n+\n+Before authenticating the Azure client, there are a few authentication classes you need to know before you decide which kind of authentication would meet your requirement.\n+\n+* TokenCredential\n+  * The `TokenCredential` is an interface in the `azure-core` package for credentials that can provide a token. \n+  * Azure Identity offers multiple implementations of the `TokenCredential` class in the `azure-identity` package. To learn more, see [credentials in Azure Identity](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/identity/azure-identity#credentials).\n+\n+Sample code to create a simple `ClientSecretCredential`:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ace8d8722195652b6eef7990d93da4d0f28f18a1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2MTkyNA==", "bodyText": "In track 1, there isn't any introduction for the credentials from client runtime then we have AUTH.md introducing credentials. However, in track 2, the Azure Identity offers detailed description about credentials.\nSo I'm thinking about to focus on introducing the authentication flow in AUTH.md when using our track 2 library, while the link to Azure Identity would help user get details about TokenCrdential implementations.\nAs auth file is recommended in track 1, the equivalent credentials are ClientSecretCredential and ClientCertificateCredential. That's why I put sample code for ClientSecretCredential.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10993#discussion_r422461924", "createdAt": "2020-05-09T07:05:43Z", "author": {"login": "xseeseesee"}, "path": "sdk/management/docs/AUTH.md", "diffHunk": "@@ -0,0 +1,92 @@\n+# Authentication in Azure Management Library for Java\n+\n+To use the APIs in the Azure Management Library for Java, as the first step you need to create an authenticated client. This document is to introduce several possible approaches for authentication.\n+\n+## Prerequisites\n+\n+Before authenticating the Azure client, there are a few authentication classes you need to know before you decide which kind of authentication would meet your requirement.\n+\n+* TokenCredential\n+  * The `TokenCredential` is an interface in the `azure-core` package for credentials that can provide a token. \n+  * Azure Identity offers multiple implementations of the `TokenCredential` class in the `azure-identity` package. To learn more, see [credentials in Azure Identity](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/identity/azure-identity#credentials).\n+\n+Sample code to create a simple `ClientSecretCredential`:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTc2NA=="}, "originalCommit": {"oid": "ace8d8722195652b6eef7990d93da4d0f28f18a1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2NTMzMQ==", "bodyText": "Then, I think it would better to have a link to service principal registration.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10993#discussion_r422465331", "createdAt": "2020-05-09T07:44:44Z", "author": {"login": "ChenTanyi"}, "path": "sdk/management/docs/AUTH.md", "diffHunk": "@@ -0,0 +1,92 @@\n+# Authentication in Azure Management Library for Java\n+\n+To use the APIs in the Azure Management Library for Java, as the first step you need to create an authenticated client. This document is to introduce several possible approaches for authentication.\n+\n+## Prerequisites\n+\n+Before authenticating the Azure client, there are a few authentication classes you need to know before you decide which kind of authentication would meet your requirement.\n+\n+* TokenCredential\n+  * The `TokenCredential` is an interface in the `azure-core` package for credentials that can provide a token. \n+  * Azure Identity offers multiple implementations of the `TokenCredential` class in the `azure-identity` package. To learn more, see [credentials in Azure Identity](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/identity/azure-identity#credentials).\n+\n+Sample code to create a simple `ClientSecretCredential`:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTc2NA=="}, "originalCommit": {"oid": "ace8d8722195652b6eef7990d93da4d0f28f18a1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1NTgzMw==", "bodyText": "Agree. I think we should point to somewhere for guide to create service principal that is used for ClientSecretCredentialBuilder. I could not easily find it from this md or azure-identity md (maybe I only missed it).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10993#discussion_r422755833", "createdAt": "2020-05-11T03:08:24Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/management/docs/AUTH.md", "diffHunk": "@@ -0,0 +1,92 @@\n+# Authentication in Azure Management Library for Java\n+\n+To use the APIs in the Azure Management Library for Java, as the first step you need to create an authenticated client. This document is to introduce several possible approaches for authentication.\n+\n+## Prerequisites\n+\n+Before authenticating the Azure client, there are a few authentication classes you need to know before you decide which kind of authentication would meet your requirement.\n+\n+* TokenCredential\n+  * The `TokenCredential` is an interface in the `azure-core` package for credentials that can provide a token. \n+  * Azure Identity offers multiple implementations of the `TokenCredential` class in the `azure-identity` package. To learn more, see [credentials in Azure Identity](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/identity/azure-identity#credentials).\n+\n+Sample code to create a simple `ClientSecretCredential`:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTc2NA=="}, "originalCommit": {"oid": "ace8d8722195652b6eef7990d93da4d0f28f18a1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc5ODY1Ng==", "bodyText": "https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-create-service-principal-portal", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10993#discussion_r422798656", "createdAt": "2020-05-11T05:59:38Z", "author": {"login": "ChenTanyi"}, "path": "sdk/management/docs/AUTH.md", "diffHunk": "@@ -0,0 +1,92 @@\n+# Authentication in Azure Management Library for Java\n+\n+To use the APIs in the Azure Management Library for Java, as the first step you need to create an authenticated client. This document is to introduce several possible approaches for authentication.\n+\n+## Prerequisites\n+\n+Before authenticating the Azure client, there are a few authentication classes you need to know before you decide which kind of authentication would meet your requirement.\n+\n+* TokenCredential\n+  * The `TokenCredential` is an interface in the `azure-core` package for credentials that can provide a token. \n+  * Azure Identity offers multiple implementations of the `TokenCredential` class in the `azure-identity` package. To learn more, see [credentials in Azure Identity](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/identity/azure-identity#credentials).\n+\n+Sample code to create a simple `ClientSecretCredential`:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTc2NA=="}, "originalCommit": {"oid": "ace8d8722195652b6eef7990d93da4d0f28f18a1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDI2MDI3OnYy", "diffSide": "RIGHT", "path": "sdk/management/docs/AUTH.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNzo0Mzo1MFrOGS5O7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNzo0Mzo1MFrOGS5O7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2NTI2Mg==", "bodyText": "The link doesn't have describe for subscriptionId env name.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10993#discussion_r422465262", "createdAt": "2020-05-09T07:43:50Z", "author": {"login": "ChenTanyi"}, "path": "sdk/management/docs/AUTH.md", "diffHunk": "@@ -0,0 +1,92 @@\n+# Authentication in Azure Management Library for Java\n+\n+To use the APIs in the Azure Management Library for Java, as the first step you need to create an authenticated client. This document is to introduce several possible approaches for authentication.\n+\n+## Prerequisites\n+\n+Before authenticating the Azure client, there are a few authentication classes you need to know before you decide which kind of authentication would meet your requirement.\n+\n+* TokenCredential\n+  * The `TokenCredential` is an interface in the `azure-core` package for credentials that can provide a token. \n+  * Azure Identity offers multiple implementations of the `TokenCredential` class in the `azure-identity` package. To learn more, see [credentials in Azure Identity](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/identity/azure-identity#credentials).\n+\n+Sample code to create a simple `ClientSecretCredential`:\n+\n+```java\n+ClientSecretCredential clientSecretCredential = new ClientSecretCredentialBuilder()\n+    .clientId(\"<YOUR_CLIENT_ID>\")\n+    .clientSecret(\"<YOUR_CLIENT_SECRET>\")\n+    .tenantId(\"<YOUR_TENANT_ID>\")\n+    .build();\n+```\n+\n+* AzureProfile\n+  * The `AzureProfile` is a class holding `AzureEnvironment`, `subscriptionId`, `tenantId` to configure the requests sending to wire. \n+  * The `subscriptionId` is mandantory for most resource management while the `tenantId` would be required only for Graph RBAC. They can be set via [environment variables](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/identity/azure-identity#environment-variables).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ace8d8722195652b6eef7990d93da4d0f28f18a1"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjU4MzAxOnYy", "diffSide": "RIGHT", "path": "sdk/management/docs/AUTH.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMzowOToxOFrOGTK-oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMzowOToxOFrOGTK-oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1NjAwMA==", "bodyText": "Do we have pending change on AzureProfile constructor?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10993#discussion_r422756000", "createdAt": "2020-05-11T03:09:18Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/management/docs/AUTH.md", "diffHunk": "@@ -0,0 +1,92 @@\n+# Authentication in Azure Management Library for Java\n+\n+To use the APIs in the Azure Management Library for Java, as the first step you need to create an authenticated client. This document is to introduce several possible approaches for authentication.\n+\n+## Prerequisites\n+\n+Before authenticating the Azure client, there are a few authentication classes you need to know before you decide which kind of authentication would meet your requirement.\n+\n+* TokenCredential\n+  * The `TokenCredential` is an interface in the `azure-core` package for credentials that can provide a token. \n+  * Azure Identity offers multiple implementations of the `TokenCredential` class in the `azure-identity` package. To learn more, see [credentials in Azure Identity](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/identity/azure-identity#credentials).\n+\n+Sample code to create a simple `ClientSecretCredential`:\n+\n+```java\n+ClientSecretCredential clientSecretCredential = new ClientSecretCredentialBuilder()\n+    .clientId(\"<YOUR_CLIENT_ID>\")\n+    .clientSecret(\"<YOUR_CLIENT_SECRET>\")\n+    .tenantId(\"<YOUR_TENANT_ID>\")\n+    .build();\n+```\n+\n+* AzureProfile\n+  * The `AzureProfile` is a class holding `AzureEnvironment`, `subscriptionId`, `tenantId` to configure the requests sending to wire. \n+  * The `subscriptionId` is mandantory for most resource management while the `tenantId` would be required only for Graph RBAC. They can be set via [environment variables](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/identity/azure-identity#environment-variables).\n+\n+Sample code to create a `AzureProfile`:\n+\n+```java\n+//AzureProfile profile = new AzureProfile(AzureEnvironment.AZURE, true);\n+AzureProfile profile = new AzureProfile(\"<YOUR_TENANT_ID>\", \"<YOUR_SUBSCRIPTION_ID>\", AzureEnvironment.AZURE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ace8d8722195652b6eef7990d93da4d0f28f18a1"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjU4NTYxOnYy", "diffSide": "RIGHT", "path": "sdk/management/docs/AUTH.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMzoxMToxMlrOGTLAGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMzoxMToxMlrOGTLAGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1NjM3OQ==", "bodyText": "Maybe \"Simple Authentication\"? Basic could be confused with \"Basic AUTH\" https://tools.ietf.org/html/rfc7617", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10993#discussion_r422756379", "createdAt": "2020-05-11T03:11:12Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/management/docs/AUTH.md", "diffHunk": "@@ -0,0 +1,92 @@\n+# Authentication in Azure Management Library for Java\n+\n+To use the APIs in the Azure Management Library for Java, as the first step you need to create an authenticated client. This document is to introduce several possible approaches for authentication.\n+\n+## Prerequisites\n+\n+Before authenticating the Azure client, there are a few authentication classes you need to know before you decide which kind of authentication would meet your requirement.\n+\n+* TokenCredential\n+  * The `TokenCredential` is an interface in the `azure-core` package for credentials that can provide a token. \n+  * Azure Identity offers multiple implementations of the `TokenCredential` class in the `azure-identity` package. To learn more, see [credentials in Azure Identity](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/identity/azure-identity#credentials).\n+\n+Sample code to create a simple `ClientSecretCredential`:\n+\n+```java\n+ClientSecretCredential clientSecretCredential = new ClientSecretCredentialBuilder()\n+    .clientId(\"<YOUR_CLIENT_ID>\")\n+    .clientSecret(\"<YOUR_CLIENT_SECRET>\")\n+    .tenantId(\"<YOUR_TENANT_ID>\")\n+    .build();\n+```\n+\n+* AzureProfile\n+  * The `AzureProfile` is a class holding `AzureEnvironment`, `subscriptionId`, `tenantId` to configure the requests sending to wire. \n+  * The `subscriptionId` is mandantory for most resource management while the `tenantId` would be required only for Graph RBAC. They can be set via [environment variables](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/identity/azure-identity#environment-variables).\n+\n+Sample code to create a `AzureProfile`:\n+\n+```java\n+//AzureProfile profile = new AzureProfile(AzureEnvironment.AZURE, true);\n+AzureProfile profile = new AzureProfile(\"<YOUR_TENANT_ID>\", \"<YOUR_SUBSCRIPTION_ID>\", AzureEnvironment.AZURE);\n+```\n+\n+* HttpPipelinePolicy\n+  * The `HttpPipelinePolicy` is an interface that process provided request context and invokes the next policy. To learn more, see [policy in Azure Core](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/core/azure-core/src/main/java/com/azure/core/http/policy) and [policy in the library](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/policy).\n+\n+\n+* HttpClient\n+  * The `HttpClient` is a generic interface for sending HTTP requests and getting responses. \n+  * [azure-core-http-netty](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/core/azure-core-http-netty) provides a Netty derived HTTP client.\n+  * [azure-core-http-okhttp](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/core/azure-core-http-okhttp) provides an OkHttp derived HTTP client.\n+\n+\n+* HttpPipeline\n+  * The `HttpPipeline` is a class that HTTP requests and responses will flow through. It is a construct that contains a list of `HttpPipelinePolicy` which are applied to a request sequentially to prepare it being sent by an `HttpClient`.\n+\n+Sample code to create a `HttpPipeline`:\n+\n+```java\n+HttpPipeline httpPipeline = new HttpPipelineBuilder()\n+    .policies(httpPipelinePolicies)\n+\t.httpClient(httpClient)\n+\t.build();\n+```\n+\n+## Basic Authentication", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ace8d8722195652b6eef7990d93da4d0f28f18a1"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjU4ODkxOnYy", "diffSide": "RIGHT", "path": "sdk/management/docs/AUTH.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMzoxMzozM1rOGTLB6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMzoxMzozM1rOGTLB6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1Njg0Mw==", "bodyText": "We might also need a sample for user to change auth endpoint for non-global cloud. Env var \"AZURE_AUTHORITY_HOST\", or AadCredentialBuilderBase.authorityHost.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10993#discussion_r422756843", "createdAt": "2020-05-11T03:13:33Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/management/docs/AUTH.md", "diffHunk": "@@ -0,0 +1,92 @@\n+# Authentication in Azure Management Library for Java\n+\n+To use the APIs in the Azure Management Library for Java, as the first step you need to create an authenticated client. This document is to introduce several possible approaches for authentication.\n+\n+## Prerequisites\n+\n+Before authenticating the Azure client, there are a few authentication classes you need to know before you decide which kind of authentication would meet your requirement.\n+\n+* TokenCredential\n+  * The `TokenCredential` is an interface in the `azure-core` package for credentials that can provide a token. \n+  * Azure Identity offers multiple implementations of the `TokenCredential` class in the `azure-identity` package. To learn more, see [credentials in Azure Identity](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/identity/azure-identity#credentials).\n+\n+Sample code to create a simple `ClientSecretCredential`:\n+\n+```java\n+ClientSecretCredential clientSecretCredential = new ClientSecretCredentialBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ace8d8722195652b6eef7990d93da4d0f28f18a1"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTI1MjMzOnYy", "diffSide": "RIGHT", "path": "sdk/management/docs/AUTH.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMjozNzo1MVrOGUfe0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMjozNzo1MVrOGUfe0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0MDQ5OQ==", "bodyText": "policy in the library  <--  maybe use full name like \"policies in Azure Management Libraries\"  (plural in policies?).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10993#discussion_r424140499", "createdAt": "2020-05-13T02:37:51Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/management/docs/AUTH.md", "diffHunk": "@@ -0,0 +1,100 @@\n+# Authentication in Azure Management Library for Java\n+\n+To use the APIs in the Azure Management Library for Java, as the first step you need to create an authenticated client. This document is to introduce several possible approaches for authentication.\n+\n+## Prerequisites\n+\n+Before authenticating the Azure client, there are a few authentication classes you need to know before you decide which kind of authentication would meet your requirement.\n+\n+* TokenCredential\n+  * The `TokenCredential` is an interface in the `azure-core` package for credentials that can provide a token. \n+  * Azure Identity offers multiple implementations of the `TokenCredential` class in the `azure-identity` package. To learn more, see [credentials in Azure Identity](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/identity/azure-identity#credentials).\n+\n+Sample code to create a simple `ClientSecretCredential`:\n+\n+```java\n+ClientSecretCredential clientSecretCredential = new ClientSecretCredentialBuilder()\n+    .clientId(\"<YOUR_CLIENT_ID>\")\n+    .clientSecret(\"<YOUR_CLIENT_SECRET>\")\n+    .tenantId(\"<YOUR_TENANT_ID>\")\n+\t.authorityHost(\"<AZURE_AUTHORITY_HOST>\")\n+    .build();\n+```\n+\n+Please note, most of credentials require a [service principal registration](https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-create-service-principal-portal). Alternatively, you could also register a service principal in [Azure CLI](https://docs.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli) or [Azure Powershell](https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-authenticate-service-principal-powershell).\n+\n+* AzureProfile\n+  * The `AzureProfile` is a class holding `AzureEnvironment`, `subscriptionId`, `tenantId` to configure the requests sending to wire. \n+  * The `subscriptionId` is mandantory for most resource management while the `tenantId` would be required only for Graph RBAC. They can be set via environment variables.\n+  \n+|variable name|value\n+|-|-\n+|`AZURE_TENANT_ID`|id of the principal's Azure Active Directory tenant\n+|`AZURE_SUBSCRIPTION_ID`|id of the subscription for the Azure resources\n+\n+Sample code to create a `AzureProfile`:\n+\n+```java\n+//AzureProfile profile = new AzureProfile(AzureEnvironment.AZURE, true);\n+AzureProfile profile = new AzureProfile(\"<YOUR_TENANT_ID>\", \"<YOUR_SUBSCRIPTION_ID>\", AzureEnvironment.AZURE);\n+```\n+\n+* HttpPipelinePolicy\n+  * The `HttpPipelinePolicy` is an interface that process provided request context and invokes the next policy. To learn more, see [policy in Azure Core](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/core/azure-core/src/main/java/com/azure/core/http/policy) and [policy in the library](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/policy).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2d2726e0aacbc3df368bf5829e2bae610bdea56"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTI1MzkzOnYy", "diffSide": "RIGHT", "path": "sdk/management/docs/AUTH.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMjozOTowM1rOGUff_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjowMjoyMFrOGUijGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0MDc5OA==", "bodyText": "generic  <--  which part of HttpClient is generic?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10993#discussion_r424140798", "createdAt": "2020-05-13T02:39:03Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/management/docs/AUTH.md", "diffHunk": "@@ -0,0 +1,100 @@\n+# Authentication in Azure Management Library for Java\n+\n+To use the APIs in the Azure Management Library for Java, as the first step you need to create an authenticated client. This document is to introduce several possible approaches for authentication.\n+\n+## Prerequisites\n+\n+Before authenticating the Azure client, there are a few authentication classes you need to know before you decide which kind of authentication would meet your requirement.\n+\n+* TokenCredential\n+  * The `TokenCredential` is an interface in the `azure-core` package for credentials that can provide a token. \n+  * Azure Identity offers multiple implementations of the `TokenCredential` class in the `azure-identity` package. To learn more, see [credentials in Azure Identity](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/identity/azure-identity#credentials).\n+\n+Sample code to create a simple `ClientSecretCredential`:\n+\n+```java\n+ClientSecretCredential clientSecretCredential = new ClientSecretCredentialBuilder()\n+    .clientId(\"<YOUR_CLIENT_ID>\")\n+    .clientSecret(\"<YOUR_CLIENT_SECRET>\")\n+    .tenantId(\"<YOUR_TENANT_ID>\")\n+\t.authorityHost(\"<AZURE_AUTHORITY_HOST>\")\n+    .build();\n+```\n+\n+Please note, most of credentials require a [service principal registration](https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-create-service-principal-portal). Alternatively, you could also register a service principal in [Azure CLI](https://docs.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli) or [Azure Powershell](https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-authenticate-service-principal-powershell).\n+\n+* AzureProfile\n+  * The `AzureProfile` is a class holding `AzureEnvironment`, `subscriptionId`, `tenantId` to configure the requests sending to wire. \n+  * The `subscriptionId` is mandantory for most resource management while the `tenantId` would be required only for Graph RBAC. They can be set via environment variables.\n+  \n+|variable name|value\n+|-|-\n+|`AZURE_TENANT_ID`|id of the principal's Azure Active Directory tenant\n+|`AZURE_SUBSCRIPTION_ID`|id of the subscription for the Azure resources\n+\n+Sample code to create a `AzureProfile`:\n+\n+```java\n+//AzureProfile profile = new AzureProfile(AzureEnvironment.AZURE, true);\n+AzureProfile profile = new AzureProfile(\"<YOUR_TENANT_ID>\", \"<YOUR_SUBSCRIPTION_ID>\", AzureEnvironment.AZURE);\n+```\n+\n+* HttpPipelinePolicy\n+  * The `HttpPipelinePolicy` is an interface that process provided request context and invokes the next policy. To learn more, see [policy in Azure Core](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/core/azure-core/src/main/java/com/azure/core/http/policy) and [policy in the library](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/policy).\n+\n+\n+* HttpClient\n+  * The `HttpClient` is a generic interface for sending HTTP requests and getting responses. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2d2726e0aacbc3df368bf5829e2bae610bdea56"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE4OTcyNw==", "bodyText": "As per the description, I just copy it here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10993#discussion_r424189727", "createdAt": "2020-05-13T05:59:17Z", "author": {"login": "xseeseesee"}, "path": "sdk/management/docs/AUTH.md", "diffHunk": "@@ -0,0 +1,100 @@\n+# Authentication in Azure Management Library for Java\n+\n+To use the APIs in the Azure Management Library for Java, as the first step you need to create an authenticated client. This document is to introduce several possible approaches for authentication.\n+\n+## Prerequisites\n+\n+Before authenticating the Azure client, there are a few authentication classes you need to know before you decide which kind of authentication would meet your requirement.\n+\n+* TokenCredential\n+  * The `TokenCredential` is an interface in the `azure-core` package for credentials that can provide a token. \n+  * Azure Identity offers multiple implementations of the `TokenCredential` class in the `azure-identity` package. To learn more, see [credentials in Azure Identity](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/identity/azure-identity#credentials).\n+\n+Sample code to create a simple `ClientSecretCredential`:\n+\n+```java\n+ClientSecretCredential clientSecretCredential = new ClientSecretCredentialBuilder()\n+    .clientId(\"<YOUR_CLIENT_ID>\")\n+    .clientSecret(\"<YOUR_CLIENT_SECRET>\")\n+    .tenantId(\"<YOUR_TENANT_ID>\")\n+\t.authorityHost(\"<AZURE_AUTHORITY_HOST>\")\n+    .build();\n+```\n+\n+Please note, most of credentials require a [service principal registration](https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-create-service-principal-portal). Alternatively, you could also register a service principal in [Azure CLI](https://docs.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli) or [Azure Powershell](https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-authenticate-service-principal-powershell).\n+\n+* AzureProfile\n+  * The `AzureProfile` is a class holding `AzureEnvironment`, `subscriptionId`, `tenantId` to configure the requests sending to wire. \n+  * The `subscriptionId` is mandantory for most resource management while the `tenantId` would be required only for Graph RBAC. They can be set via environment variables.\n+  \n+|variable name|value\n+|-|-\n+|`AZURE_TENANT_ID`|id of the principal's Azure Active Directory tenant\n+|`AZURE_SUBSCRIPTION_ID`|id of the subscription for the Azure resources\n+\n+Sample code to create a `AzureProfile`:\n+\n+```java\n+//AzureProfile profile = new AzureProfile(AzureEnvironment.AZURE, true);\n+AzureProfile profile = new AzureProfile(\"<YOUR_TENANT_ID>\", \"<YOUR_SUBSCRIPTION_ID>\", AzureEnvironment.AZURE);\n+```\n+\n+* HttpPipelinePolicy\n+  * The `HttpPipelinePolicy` is an interface that process provided request context and invokes the next policy. To learn more, see [policy in Azure Core](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/core/azure-core/src/main/java/com/azure/core/http/policy) and [policy in the library](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/policy).\n+\n+\n+* HttpClient\n+  * The `HttpClient` is a generic interface for sending HTTP requests and getting responses. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0MDc5OA=="}, "originalCommit": {"oid": "d2d2726e0aacbc3df368bf5829e2bae610bdea56"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE5MDc0Ng==", "bodyText": "That does not answer the question...", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10993#discussion_r424190746", "createdAt": "2020-05-13T06:02:20Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/management/docs/AUTH.md", "diffHunk": "@@ -0,0 +1,100 @@\n+# Authentication in Azure Management Library for Java\n+\n+To use the APIs in the Azure Management Library for Java, as the first step you need to create an authenticated client. This document is to introduce several possible approaches for authentication.\n+\n+## Prerequisites\n+\n+Before authenticating the Azure client, there are a few authentication classes you need to know before you decide which kind of authentication would meet your requirement.\n+\n+* TokenCredential\n+  * The `TokenCredential` is an interface in the `azure-core` package for credentials that can provide a token. \n+  * Azure Identity offers multiple implementations of the `TokenCredential` class in the `azure-identity` package. To learn more, see [credentials in Azure Identity](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/identity/azure-identity#credentials).\n+\n+Sample code to create a simple `ClientSecretCredential`:\n+\n+```java\n+ClientSecretCredential clientSecretCredential = new ClientSecretCredentialBuilder()\n+    .clientId(\"<YOUR_CLIENT_ID>\")\n+    .clientSecret(\"<YOUR_CLIENT_SECRET>\")\n+    .tenantId(\"<YOUR_TENANT_ID>\")\n+\t.authorityHost(\"<AZURE_AUTHORITY_HOST>\")\n+    .build();\n+```\n+\n+Please note, most of credentials require a [service principal registration](https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-create-service-principal-portal). Alternatively, you could also register a service principal in [Azure CLI](https://docs.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli) or [Azure Powershell](https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-authenticate-service-principal-powershell).\n+\n+* AzureProfile\n+  * The `AzureProfile` is a class holding `AzureEnvironment`, `subscriptionId`, `tenantId` to configure the requests sending to wire. \n+  * The `subscriptionId` is mandantory for most resource management while the `tenantId` would be required only for Graph RBAC. They can be set via environment variables.\n+  \n+|variable name|value\n+|-|-\n+|`AZURE_TENANT_ID`|id of the principal's Azure Active Directory tenant\n+|`AZURE_SUBSCRIPTION_ID`|id of the subscription for the Azure resources\n+\n+Sample code to create a `AzureProfile`:\n+\n+```java\n+//AzureProfile profile = new AzureProfile(AzureEnvironment.AZURE, true);\n+AzureProfile profile = new AzureProfile(\"<YOUR_TENANT_ID>\", \"<YOUR_SUBSCRIPTION_ID>\", AzureEnvironment.AZURE);\n+```\n+\n+* HttpPipelinePolicy\n+  * The `HttpPipelinePolicy` is an interface that process provided request context and invokes the next policy. To learn more, see [policy in Azure Core](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/core/azure-core/src/main/java/com/azure/core/http/policy) and [policy in the library](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/policy).\n+\n+\n+* HttpClient\n+  * The `HttpClient` is a generic interface for sending HTTP requests and getting responses. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0MDc5OA=="}, "originalCommit": {"oid": "d2d2726e0aacbc3df368bf5829e2bae610bdea56"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTI1NTg1OnYy", "diffSide": "RIGHT", "path": "sdk/management/docs/AUTH.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMjo0MDoxNFrOGUfhLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMjo0MDoxNFrOGUfhLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0MTEwMQ==", "bodyText": "withLogLevel probably not needed here. Let's focus on auth.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10993#discussion_r424141101", "createdAt": "2020-05-13T02:40:14Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/management/docs/AUTH.md", "diffHunk": "@@ -0,0 +1,100 @@\n+# Authentication in Azure Management Library for Java\n+\n+To use the APIs in the Azure Management Library for Java, as the first step you need to create an authenticated client. This document is to introduce several possible approaches for authentication.\n+\n+## Prerequisites\n+\n+Before authenticating the Azure client, there are a few authentication classes you need to know before you decide which kind of authentication would meet your requirement.\n+\n+* TokenCredential\n+  * The `TokenCredential` is an interface in the `azure-core` package for credentials that can provide a token. \n+  * Azure Identity offers multiple implementations of the `TokenCredential` class in the `azure-identity` package. To learn more, see [credentials in Azure Identity](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/identity/azure-identity#credentials).\n+\n+Sample code to create a simple `ClientSecretCredential`:\n+\n+```java\n+ClientSecretCredential clientSecretCredential = new ClientSecretCredentialBuilder()\n+    .clientId(\"<YOUR_CLIENT_ID>\")\n+    .clientSecret(\"<YOUR_CLIENT_SECRET>\")\n+    .tenantId(\"<YOUR_TENANT_ID>\")\n+\t.authorityHost(\"<AZURE_AUTHORITY_HOST>\")\n+    .build();\n+```\n+\n+Please note, most of credentials require a [service principal registration](https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-create-service-principal-portal). Alternatively, you could also register a service principal in [Azure CLI](https://docs.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli) or [Azure Powershell](https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-authenticate-service-principal-powershell).\n+\n+* AzureProfile\n+  * The `AzureProfile` is a class holding `AzureEnvironment`, `subscriptionId`, `tenantId` to configure the requests sending to wire. \n+  * The `subscriptionId` is mandantory for most resource management while the `tenantId` would be required only for Graph RBAC. They can be set via environment variables.\n+  \n+|variable name|value\n+|-|-\n+|`AZURE_TENANT_ID`|id of the principal's Azure Active Directory tenant\n+|`AZURE_SUBSCRIPTION_ID`|id of the subscription for the Azure resources\n+\n+Sample code to create a `AzureProfile`:\n+\n+```java\n+//AzureProfile profile = new AzureProfile(AzureEnvironment.AZURE, true);\n+AzureProfile profile = new AzureProfile(\"<YOUR_TENANT_ID>\", \"<YOUR_SUBSCRIPTION_ID>\", AzureEnvironment.AZURE);\n+```\n+\n+* HttpPipelinePolicy\n+  * The `HttpPipelinePolicy` is an interface that process provided request context and invokes the next policy. To learn more, see [policy in Azure Core](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/core/azure-core/src/main/java/com/azure/core/http/policy) and [policy in the library](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/policy).\n+\n+\n+* HttpClient\n+  * The `HttpClient` is a generic interface for sending HTTP requests and getting responses. \n+  * [azure-core-http-netty](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/core/azure-core-http-netty) provides a Netty derived HTTP client.\n+  * [azure-core-http-okhttp](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/core/azure-core-http-okhttp) provides an OkHttp derived HTTP client.\n+\n+\n+* HttpPipeline\n+  * The `HttpPipeline` is a class that HTTP requests and responses will flow through. It is a construct that contains a list of `HttpPipelinePolicy` which are applied to a request sequentially to prepare it being sent by an `HttpClient`.\n+\n+Sample code to create a `HttpPipeline`:\n+\n+```java\n+HttpPipeline httpPipeline = new HttpPipelineBuilder()\n+    .policies(httpPipelinePolicies)\n+\t.httpClient(httpClient)\n+\t.build();\n+```\n+\n+## Simple Authentication\n+\n+If you want to authenticate as simple as possible, you only need to provide `TokenCredential` and `AzureProfile`. The library will help build http pipeline internally with [default configuration](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/utils/HttpPipelineProvider.java#L43).\n+\n+```java\n+Azure azure = Azure.authenticate(credential, profile).withDefaultSubscription();\n+```\n+\n+The `Authenticated` class provides access to a subset of Azure APIs that do not require a specific subscription. If the profile does not contain a subscription, you can select a subscription via `Authenticated::subscriptions`.\n+\n+```java\n+Azure.Authenticated authenticated = Azure.authenticate(credential, profile);\n+String subscriptionId = authenticated.subscriptions().list().iterator().next().subscriptionId();\n+Azure azure = authenticated.withSubscription(subscriptionId);\n+```\n+\n+## Advanced Authentication\n+\n+If you want to take full control for Azure client, you could build your own http pipeline for authentication.\n+\n+```java\n+Azure azure = Azure.authenticate(httpPipeline, profile).withDefaultSubscription();\n+```\n+\n+If you want to configure part of http pipeline instead of building new one, you may set via `Azure::configure`.\n+\n+```java\n+Azure azure = Azure.configure()\n+    .withLogLevel(HttpLogDetailLevel.BASIC)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2d2726e0aacbc3df368bf5829e2bae610bdea56"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTI1NzQxOnYy", "diffSide": "RIGHT", "path": "sdk/management/docs/AUTH.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMjo0MToxOVrOGUfiIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMjo0MToxOVrOGUfiIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0MTM0NQ==", "bodyText": "I support you do not actually want to expose HttpPipelineProvider to user?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10993#discussion_r424141345", "createdAt": "2020-05-13T02:41:19Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/management/docs/AUTH.md", "diffHunk": "@@ -0,0 +1,100 @@\n+# Authentication in Azure Management Library for Java\n+\n+To use the APIs in the Azure Management Library for Java, as the first step you need to create an authenticated client. This document is to introduce several possible approaches for authentication.\n+\n+## Prerequisites\n+\n+Before authenticating the Azure client, there are a few authentication classes you need to know before you decide which kind of authentication would meet your requirement.\n+\n+* TokenCredential\n+  * The `TokenCredential` is an interface in the `azure-core` package for credentials that can provide a token. \n+  * Azure Identity offers multiple implementations of the `TokenCredential` class in the `azure-identity` package. To learn more, see [credentials in Azure Identity](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/identity/azure-identity#credentials).\n+\n+Sample code to create a simple `ClientSecretCredential`:\n+\n+```java\n+ClientSecretCredential clientSecretCredential = new ClientSecretCredentialBuilder()\n+    .clientId(\"<YOUR_CLIENT_ID>\")\n+    .clientSecret(\"<YOUR_CLIENT_SECRET>\")\n+    .tenantId(\"<YOUR_TENANT_ID>\")\n+\t.authorityHost(\"<AZURE_AUTHORITY_HOST>\")\n+    .build();\n+```\n+\n+Please note, most of credentials require a [service principal registration](https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-create-service-principal-portal). Alternatively, you could also register a service principal in [Azure CLI](https://docs.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli) or [Azure Powershell](https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-authenticate-service-principal-powershell).\n+\n+* AzureProfile\n+  * The `AzureProfile` is a class holding `AzureEnvironment`, `subscriptionId`, `tenantId` to configure the requests sending to wire. \n+  * The `subscriptionId` is mandantory for most resource management while the `tenantId` would be required only for Graph RBAC. They can be set via environment variables.\n+  \n+|variable name|value\n+|-|-\n+|`AZURE_TENANT_ID`|id of the principal's Azure Active Directory tenant\n+|`AZURE_SUBSCRIPTION_ID`|id of the subscription for the Azure resources\n+\n+Sample code to create a `AzureProfile`:\n+\n+```java\n+//AzureProfile profile = new AzureProfile(AzureEnvironment.AZURE, true);\n+AzureProfile profile = new AzureProfile(\"<YOUR_TENANT_ID>\", \"<YOUR_SUBSCRIPTION_ID>\", AzureEnvironment.AZURE);\n+```\n+\n+* HttpPipelinePolicy\n+  * The `HttpPipelinePolicy` is an interface that process provided request context and invokes the next policy. To learn more, see [policy in Azure Core](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/core/azure-core/src/main/java/com/azure/core/http/policy) and [policy in the library](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/policy).\n+\n+\n+* HttpClient\n+  * The `HttpClient` is a generic interface for sending HTTP requests and getting responses. \n+  * [azure-core-http-netty](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/core/azure-core-http-netty) provides a Netty derived HTTP client.\n+  * [azure-core-http-okhttp](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/core/azure-core-http-okhttp) provides an OkHttp derived HTTP client.\n+\n+\n+* HttpPipeline\n+  * The `HttpPipeline` is a class that HTTP requests and responses will flow through. It is a construct that contains a list of `HttpPipelinePolicy` which are applied to a request sequentially to prepare it being sent by an `HttpClient`.\n+\n+Sample code to create a `HttpPipeline`:\n+\n+```java\n+HttpPipeline httpPipeline = new HttpPipelineBuilder()\n+    .policies(httpPipelinePolicies)\n+\t.httpClient(httpClient)\n+\t.build();\n+```\n+\n+## Simple Authentication\n+\n+If you want to authenticate as simple as possible, you only need to provide `TokenCredential` and `AzureProfile`. The library will help build http pipeline internally with [default configuration](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/utils/HttpPipelineProvider.java#L43).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2d2726e0aacbc3df368bf5829e2bae610bdea56"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTMwMzQ1OnYy", "diffSide": "RIGHT", "path": "sdk/management/docs/AUTH.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMzoxMTozM1rOGUf-og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMzoxMTozM1rOGUf-og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0ODY0Mg==", "bodyText": "This could link to #Authenticated part, which help users know they can fetch these two id during authentication. Meanwhile, I think the null subsId exception should also point it out.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10993#discussion_r424148642", "createdAt": "2020-05-13T03:11:33Z", "author": {"login": "ChenTanyi"}, "path": "sdk/management/docs/AUTH.md", "diffHunk": "@@ -0,0 +1,100 @@\n+# Authentication in Azure Management Library for Java\n+\n+To use the APIs in the Azure Management Library for Java, as the first step you need to create an authenticated client. This document is to introduce several possible approaches for authentication.\n+\n+## Prerequisites\n+\n+Before authenticating the Azure client, there are a few authentication classes you need to know before you decide which kind of authentication would meet your requirement.\n+\n+* TokenCredential\n+  * The `TokenCredential` is an interface in the `azure-core` package for credentials that can provide a token. \n+  * Azure Identity offers multiple implementations of the `TokenCredential` class in the `azure-identity` package. To learn more, see [credentials in Azure Identity](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/identity/azure-identity#credentials).\n+\n+Sample code to create a simple `ClientSecretCredential`:\n+\n+```java\n+ClientSecretCredential clientSecretCredential = new ClientSecretCredentialBuilder()\n+    .clientId(\"<YOUR_CLIENT_ID>\")\n+    .clientSecret(\"<YOUR_CLIENT_SECRET>\")\n+    .tenantId(\"<YOUR_TENANT_ID>\")\n+\t.authorityHost(\"<AZURE_AUTHORITY_HOST>\")\n+    .build();\n+```\n+\n+Please note, most of credentials require a [service principal registration](https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-create-service-principal-portal). Alternatively, you could also register a service principal in [Azure CLI](https://docs.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli) or [Azure Powershell](https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-authenticate-service-principal-powershell).\n+\n+* AzureProfile\n+  * The `AzureProfile` is a class holding `AzureEnvironment`, `subscriptionId`, `tenantId` to configure the requests sending to wire. \n+  * The `subscriptionId` is mandantory for most resource management while the `tenantId` would be required only for Graph RBAC. They can be set via environment variables.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2d2726e0aacbc3df368bf5829e2bae610bdea56"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTI2OTE2OnYy", "diffSide": "RIGHT", "path": "sdk/management/docs/AUTH.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMjo1Njo0M1rOGWmI6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMjo1Njo0M1rOGWmI6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM0NjczMA==", "bodyText": "space should be aligned", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10993#discussion_r426346730", "createdAt": "2020-05-18T02:56:43Z", "author": {"login": "ChenTanyi"}, "path": "sdk/management/docs/AUTH.md", "diffHunk": "@@ -0,0 +1,121 @@\n+# Authentication in Azure Management Libraries for Java\n+\n+To use the APIs in the Azure Management Libraries for Java, as the first step you need to create an authenticated client. This document is to introduce several possible approaches for authentication.\n+\n+## Getting Started\n+\n+* [Prerequisites](#prerequisites)\n+* [Simple Authentication](#simple-authentication)\n+  * [Preparing TokenCredential](#preparing-tokencredential)\n+  * [Preparing AzureProfile](#preparing-azureprofile)\n+  * [Authenticating with default HttpPipeline](#authenticating-with-default-httppipeline)\n+* [Advanced Authentication](#advanced-authentication)\n+  * [Preparing HttpPipelinePolicy](#preparing-httppipelinepolicy)\n+  * [Preparing HttpClient](#preparing-httpclient)\n+  * [Preparing HttpPipeline](#preparing-httppipeline)\n+  * [Authenticating with custom HttpPipeline](#authenticating-with-custom-httppipeline)\n+\n+## Prerequisites\n+\n+* An [Azure tenant](https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-create-new-tenant) for Graph RBAC.\n+* An [Azure subscription](https://azure.microsoft.com/en-us/free/) for resource management.\n+* An Azure Active Directory service principal. You can create a service principal via [Azure Portal](https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-create-service-principal-portal), [Azure CLI](https://docs.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli) or [Azure Powershell](https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-authenticate-service-principal-powershell).\n+\n+## Simple Authentication\n+\n+If you want to authenticate as simple as possible, you need to prepare `TokenCredential` and `AzureProfile` as below.\n+\n+### Preparing TokenCredential\n+  * The `TokenCredential` is an interface in the `azure-core` package for credentials that can provide a token. \n+  * Azure Identity offers multiple implementations of the `TokenCredential` class in the `azure-identity` package. To learn more, see [credentials in Azure Identity](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/identity/azure-identity#credentials).\n+\n+Sample code to create a simple `ClientSecretCredential`:\n+\n+```java\n+ClientSecretCredential clientSecretCredential = new ClientSecretCredentialBuilder()\n+    .clientId(\"<YOUR_CLIENT_ID>\")\n+    .clientSecret(\"<YOUR_CLIENT_SECRET>\")\n+    .tenantId(\"<YOUR_TENANT_ID>\")\n+\t// authority host is optional\n+\t.authorityHost(\"<AZURE_AUTHORITY_HOST>\")\n+    .build();\n+```\n+\n+The value of `AZURE_AUTHORITY_HOST` can be set via [`KnownAuthorityHosts`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/identity/azure-identity/src/main/java/com/azure/identity/KnownAuthorityHosts.java) or [`AzureEnvironment::getActiveDirectoryEndpoint`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core-management/src/main/java/com/azure/core/management/AzureEnvironment.java#L192).\n+\n+### Preparing AzureProfile\n+  * The `AzureProfile` is a class holding `AzureEnvironment`, `subscriptionId`, `tenantId` to configure the requests sending to wire. \n+  * The `subscriptionId` is mandantory for most resource management while the `tenantId` would be required only for Graph RBAC. They can be set via environment variables.\n+  \n+|variable name|value\n+|-|-\n+|`AZURE_TENANT_ID`|id of the principal's Azure Active Directory tenant\n+|`AZURE_SUBSCRIPTION_ID`|id of the subscription for the Azure resources\n+\n+Sample code to create a `AzureProfile`:\n+\n+```java\n+//AzureProfile profile = new AzureProfile(AzureEnvironment.AZURE, true);\n+AzureProfile profile = new AzureProfile(\"<YOUR_TENANT_ID>\", \"<YOUR_SUBSCRIPTION_ID>\", AzureEnvironment.AZURE);\n+```\n+\n+### Authenticating with default HttpPipeline\n+\n+Once the `TokenCredential` and `AzureProfile` are ready, you can move forward with below authenticating code. It helps build http pipeline internally with [default configuration](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/utils/HttpPipelineProvider.java#L43).\n+\n+```java\n+Azure azure = Azure.authenticate(credential, profile).withDefaultSubscription();\n+```\n+\n+The `Authenticated` class provides access to a subset of Azure APIs that do not require a specific subscription. If the profile does not contain a subscription, you can select a subscription via [`Authenticated::subscriptions`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/azure/src/main/java/com/azure/management/Azure.java#L191). Similarly, you can select a tenant via [`Authenticated::tenants`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/management/azure/src/main/java/com/azure/management/Azure.java#L198).\n+\n+```java\n+Azure.Authenticated authenticated = Azure.authenticate(credential, profile);\n+String subscriptionId = authenticated.subscriptions().list().iterator().next().subscriptionId();\n+Azure azure = authenticated.withSubscription(subscriptionId);\n+```\n+\n+## Advanced Authentication\n+\n+If you want to take full control of Azure client, you could build your own http pipeline for authentication.\n+\n+### Preparing HttpPipelinePolicy\n+  * The `HttpPipelinePolicy` is an interface that process provided request context and invokes the next policy. To learn more, see [policies in Azure Core](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/core/azure-core/src/main/java/com/azure/core/http/policy) and [policies in Azure Management Libraries for Java](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/policy).\n+\n+\n+### Preparing HttpClient\n+  * The `HttpClient` is a generic interface for sending HTTP requests and getting responses. \n+  * [azure-core-http-netty](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/core/azure-core-http-netty) provides a Netty derived HTTP client.\n+  * [azure-core-http-okhttp](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/core/azure-core-http-okhttp) provides an OkHttp derived HTTP client.\n+\n+\n+### Preparing HttpPipeline\n+  * The `HttpPipeline` is a class that HTTP requests and responses will flow through. It is a construct that contains a list of `HttpPipelinePolicy` which are applied to a request sequentially to prepare it being sent by an `HttpClient`.\n+\n+Sample code to create a `HttpPipeline`:\n+\n+```java\n+HttpPipeline httpPipeline = new HttpPipelineBuilder()\n+    .policies(httpPipelinePolicies)\n+\t.httpClient(httpClient)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa3fef0786e8f6e361efe7345dc67303ed612c42"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4298, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}