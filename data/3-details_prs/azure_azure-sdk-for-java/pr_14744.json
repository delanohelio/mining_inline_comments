{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4MTQzODEy", "number": 14744, "title": "Add digital twin lifecycle sample", "bodyText": "Add code for sample cleanup and creation of digital twin.\nTODO:\n\nSnippets\nreadme", "createdAt": "2020-09-02T20:19:12Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14744", "merged": true, "mergeCommit": {"oid": "dc4f2bac6d316da24b365ad0818dc7b95d5d2f3a"}, "closed": true, "closedAt": "2020-09-02T23:52:02Z", "author": {"login": "abhipsaMisra"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFD9MsgH2gAyNDc4MTQzODEyOjgxODM1YmQ5Y2U5ZGFiMmQ0NGVhMDBhYTk3YjYwZTMxZWNkN2Y0MmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFE0AggFqTQ4MTM4NTQ2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "81835bd9ce9dab2d44ea00aa97b60e31ecd7f42d", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/81835bd9ce9dab2d44ea00aa97b60e31ecd7f42d", "committedDate": "2020-09-02T22:43:25Z", "message": "samples(adt): Add digital twin lifecycle sample"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c345886aa902f9678575f311bbf83425553d2b5", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2c345886aa902f9678575f311bbf83425553d2b5", "committedDate": "2020-09-02T22:42:34Z", "message": "comments"}, "afterCommit": {"oid": "81835bd9ce9dab2d44ea00aa97b60e31ecd7f42d", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/81835bd9ce9dab2d44ea00aa97b60e31ecd7f42d", "committedDate": "2020-09-02T22:43:25Z", "message": "samples(adt): Add digital twin lifecycle sample"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8728cb3aabb28da12c8684e5994a5e0db828a1a1", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8728cb3aabb28da12c8684e5994a5e0db828a1a1", "committedDate": "2020-09-02T22:58:20Z", "message": "typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMzc0Njg3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14744#pullrequestreview-481374687", "createdAt": "2020-09-02T23:12:12Z", "commit": {"oid": "8728cb3aabb28da12c8684e5994a5e0db828a1a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzoxMjoxMlrOHMOzog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzoxMjoxMlrOHMOzog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU4NzU1NA==", "bodyText": "This runnable is executed when the flux completes successfully.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14744#discussion_r482587554", "createdAt": "2020-09-02T23:12:12Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/DigitalTwinsLifecycleSample.java", "diffHunk": "@@ -72,21 +97,71 @@ public static void deleteTwins() throws IOException, InterruptedException {\n         System.out.println(\"DELETE DIGITAL TWINS\");\n         Map<String, String> twins = FileHelper.loadAllFilesInPath(TwinsPath);\n         final Semaphore deleteTwinsSemaphore = new Semaphore(0);\n+        final Semaphore deleteRelationshipsSemaphore = new Semaphore(0);\n \n-        // Call APIs to delete the twins. For each async operation, once the operation is completed successfully, a semaphore is released.\n+        // Call APIs to clean up any pre-existing resources that might be referenced by this sample. If digital twin does not exist, ignore.\n         twins\n-            .forEach((twinId, twinContent) -> client.deleteDigitalTwin(twinId)\n-                .doOnSuccess(aVoid -> System.out.println(\"Deleted digital twin: \" + twinId))\n-                .doOnError(throwable -> {\n-                    // If digital twin does not exist, ignore.\n-                    if (!(throwable instanceof ErrorResponseException) || !((ErrorResponseException) throwable).getValue().getError().getCode().equals(\"DigitalTwinNotFound\")) {\n-                        System.err.println(\"Could not delete digital twin \" + twinId + \" due to \" + throwable);\n+            .forEach((twinId, twinContent) -> {\n+                // Call APIs to delete all relationships.\n+                client.listRelationships(twinId, BasicRelationship.class)\n+                    .doOnComplete(deleteRelationshipsSemaphore::release)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8728cb3aabb28da12c8684e5994a5e0db828a1a1"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMzc0OTcw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14744#pullrequestreview-481374970", "createdAt": "2020-09-02T23:12:59Z", "commit": {"oid": "8728cb3aabb28da12c8684e5994a5e0db828a1a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzoxMjo1OVrOHMO1pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzoxMjo1OVrOHMO1pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU4ODA3MA==", "bodyText": "This function is executed when the flux completes with an error", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14744#discussion_r482588070", "createdAt": "2020-09-02T23:12:59Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/DigitalTwinsLifecycleSample.java", "diffHunk": "@@ -72,21 +97,71 @@ public static void deleteTwins() throws IOException, InterruptedException {\n         System.out.println(\"DELETE DIGITAL TWINS\");\n         Map<String, String> twins = FileHelper.loadAllFilesInPath(TwinsPath);\n         final Semaphore deleteTwinsSemaphore = new Semaphore(0);\n+        final Semaphore deleteRelationshipsSemaphore = new Semaphore(0);\n \n-        // Call APIs to delete the twins. For each async operation, once the operation is completed successfully, a semaphore is released.\n+        // Call APIs to clean up any pre-existing resources that might be referenced by this sample. If digital twin does not exist, ignore.\n         twins\n-            .forEach((twinId, twinContent) -> client.deleteDigitalTwin(twinId)\n-                .doOnSuccess(aVoid -> System.out.println(\"Deleted digital twin: \" + twinId))\n-                .doOnError(throwable -> {\n-                    // If digital twin does not exist, ignore.\n-                    if (!(throwable instanceof ErrorResponseException) || !((ErrorResponseException) throwable).getValue().getError().getCode().equals(\"DigitalTwinNotFound\")) {\n-                        System.err.println(\"Could not delete digital twin \" + twinId + \" due to \" + throwable);\n+            .forEach((twinId, twinContent) -> {\n+                // Call APIs to delete all relationships.\n+                client.listRelationships(twinId, BasicRelationship.class)\n+                    .doOnComplete(deleteRelationshipsSemaphore::release)\n+                    .doOnError(throwable -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8728cb3aabb28da12c8684e5994a5e0db828a1a1"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMzc0ODE2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14744#pullrequestreview-481374816", "createdAt": "2020-09-02T23:12:31Z", "commit": {"oid": "8728cb3aabb28da12c8684e5994a5e0db828a1a1"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzoxMjozMlrOHMO0gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzoxMjozMlrOHMO0gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU4Nzc3OA==", "bodyText": "I think we should have an Async Suffix in the file name to indicate that we are using Async APIs for this sample.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14744#discussion_r482587778", "createdAt": "2020-09-02T23:12:32Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/DigitalTwinsLifecycleSample.java", "diffHunk": "@@ -6,7 +6,9 @@\n import com.azure.core.http.policy.HttpLogDetailLevel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8728cb3aabb28da12c8684e5994a5e0db828a1a1"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c80e03c0ce62972eb4f461e8cd35652f6178317", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1c80e03c0ce62972eb4f461e8cd35652f6178317", "committedDate": "2020-09-02T23:29:39Z", "message": "cr comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMzg1NDY3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14744#pullrequestreview-481385467", "createdAt": "2020-09-02T23:43:17Z", "commit": {"oid": "1c80e03c0ce62972eb4f461e8cd35652f6178317"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzo0MzoxN1rOHMPuCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzo0MzoxN1rOHMPuCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwMjUwNg==", "bodyText": "To understand why do we need semaphore here? Do we have some limitations for parallel operations?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14744#discussion_r482602506", "createdAt": "2020-09-02T23:43:17Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/DigitalTwinsLifecycleAsyncSample.java", "diffHunk": "@@ -0,0 +1,195 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+import com.azure.digitaltwins.core.implementation.serialization.BasicRelationship;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+import org.apache.http.HttpStatus;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * This sample creates all the models in \\DTDL\\Models folder in the ADT service instance and creates the corresponding twins in \\DTDL\\DigitalTwins folder.\n+ * The Diagram for the Hospital model looks like this:\n+ *\n+ *          +------------+\n+ *          |  Building  +-----isEquippedWith-----+\n+ *          +------------+                        |\n+ *                |                               v\n+ *               has                           +-----+\n+ *                |                            | HVAC|\n+ *                v                            +-----+\n+ *          +------------+                        |\n+ *          |   Floor    +<--controlsTemperature--+\n+ *          +------------+\n+ *                |\n+ *             contains\n+ *                |\n+ *                v\n+ *          +------------+                 +-----------------+\n+ *          |   Room     |-with component->| WifiAccessPoint |\n+ *          +------------+                 +-----------------+\n+ *\n+ */\n+public class DigitalTwinsLifecycleAsyncSample {\n+    private static final String tenantId = System.getenv(\"TENANT_ID\");\n+    private static final String clientId = System.getenv(\"CLIENT_ID\");\n+    private static final String clientSecret = System.getenv(\"CLIENT_SECRET\");\n+    private static final String endpoint = System.getenv(\"DIGITAL_TWINS_ENDPOINT\");\n+\n+    private static final int MaxWaitTimeAsyncOperationsInSeconds = 10;\n+\n+    private static final URL DtdlDirectoryUrl = DigitalTwinsLifecycleAsyncSample.class.getClassLoader().getResource(\"DTDL\");\n+    private static final Path DtDlDirectoryPath;\n+    private static final Path TwinsPath;\n+    private static final Path ModelsPath;\n+    private static final Path RelationshipsPath;\n+\n+    private static final DigitalTwinsAsyncClient client;\n+\n+    static {\n+        try {\n+            assert DtdlDirectoryUrl != null;\n+            DtDlDirectoryPath = Paths.get(DtdlDirectoryUrl.toURI());\n+        } catch (URISyntaxException e) {\n+            throw new RuntimeException(\"Unable to convert the DTDL directory URL to URI\", e);\n+        }\n+        TwinsPath = Paths.get(DtDlDirectoryPath.toString(), \"DigitalTwins\");\n+        ModelsPath = Paths.get(DtDlDirectoryPath.toString(), \"Models\");\n+        RelationshipsPath = Paths.get(DtDlDirectoryPath.toString(), \"Relationships\");\n+\n+        client = new DigitalTwinsClientBuilder()\n+            .tokenCredential(\n+                new ClientSecretCredentialBuilder()\n+                    .tenantId(tenantId)\n+                    .clientId(clientId)\n+                    .clientSecret(clientSecret)\n+                    .build()\n+            )\n+            .endpoint(endpoint)\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(HttpLogDetailLevel.NONE))\n+            .buildAsyncClient();\n+    }\n+\n+    public static void main(String[] args) throws IOException, InterruptedException {\n+        // Ensure existing twins with the same name are deleted first\n+        deleteTwins();\n+\n+        // Create twin counterparts for all the models\n+        createTwins();\n+    }\n+\n+    /**\n+     * Delete a twin, and any relationships it might have.\n+     * @throws IOException If an I/O error is thrown when accessing the starting file.\n+     * @throws InterruptedException If the current thread is interrupted while waiting to acquire permits on a semaphore.\n+     */\n+    public static void deleteTwins() throws IOException, InterruptedException {\n+        System.out.println(\"DELETE DIGITAL TWINS\");\n+        Map<String, String> twins = FileHelper.loadAllFilesInPath(TwinsPath);\n+        final Semaphore deleteTwinsSemaphore = new Semaphore(0);\n+        final Semaphore deleteRelationshipsSemaphore = new Semaphore(0);\n+\n+        // Call APIs to clean up any pre-existing resources that might be referenced by this sample. If digital twin does not exist, ignore.\n+        twins\n+            .forEach((twinId, twinContent) -> {\n+                // Call APIs to delete all relationships.\n+                client.listRelationships(twinId, BasicRelationship.class)\n+                    .doOnComplete(deleteRelationshipsSemaphore::release)\n+                    .doOnError(throwable -> {\n+                        if (throwable instanceof ErrorResponseException && ((ErrorResponseException) throwable).getResponse().getStatusCode() == HttpStatus.SC_NOT_FOUND) {\n+                            deleteRelationshipsSemaphore.release();\n+                        } else {\n+                            System.err.println(\"List relationships error: \" + throwable);\n+                        }\n+                    })\n+                    .subscribe(\n+                        relationship -> client.deleteRelationship(twinId, relationship.getId())\n+                            .subscribe(\n+                                aVoid -> System.out.println(\"Found and deleted relationship: \" + relationship.getId()),\n+                                throwable -> System.err.println(\"Delete relationship error: \" + throwable)\n+                            ));\n+\n+                // Call APIs to delete any incoming relationships.\n+                client.listIncomingRelationships(twinId)\n+                    .doOnComplete(deleteRelationshipsSemaphore::release)\n+                    .doOnError(throwable -> {\n+                        if (throwable instanceof ErrorResponseException && ((ErrorResponseException) throwable).getResponse().getStatusCode() == HttpStatus.SC_NOT_FOUND) {\n+                            deleteRelationshipsSemaphore.release();\n+                        } else {\n+                            System.err.println(\"List incoming relationships error: \" + throwable);\n+                        }\n+                    })\n+                    .subscribe(\n+                        incomingRelationship -> client.deleteRelationship(incomingRelationship.getSourceId(), incomingRelationship.getRelationshipId())\n+                            .subscribe(\n+                                aVoid -> System.out.println(\"Found and deleted incoming relationship: \" + incomingRelationship.getRelationshipId()),\n+                                throwable -> System.err.println(\"Delete incoming relationship error: \" + throwable)\n+                            ));\n+\n+                try {\n+                    // Verify that the list relationships and list incoming relationships async operations have completed.\n+                    if (deleteRelationshipsSemaphore.tryAcquire(2, MaxWaitTimeAsyncOperationsInSeconds, TimeUnit.SECONDS)) {\n+                        // Now the digital twin should be safe to delete\n+\n+                        // Call APIs to delete the twins.\n+                        client.deleteDigitalTwin(twinId)\n+                            .doOnSuccess(aVoid -> {\n+                                System.out.println(\"Deleted digital twin: \" + twinId);\n+                                deleteTwinsSemaphore.release();\n+                            })\n+                            .doOnError(throwable -> {\n+                                if (throwable instanceof ErrorResponseException && ((ErrorResponseException) throwable).getResponse().getStatusCode() == HttpStatus.SC_NOT_FOUND) {\n+                                    deleteTwinsSemaphore.release();\n+                                } else {\n+                                    System.err.println(\"Could not delete digital twin \" + twinId + \" due to \" + throwable);\n+                                }\n+                            })\n+                            .subscribe();\n+                    }\n+                } catch (InterruptedException e) {\n+                    throw new RuntimeException(\"Could not cleanup the pre-existing resources: \", e);\n+                }\n+            });\n+\n+        // Verify that a semaphore has been released for each delete async operation, signifying that the async call has completed successfully..\n+        boolean created = deleteTwinsSemaphore.tryAcquire(twins.size(), MaxWaitTimeAsyncOperationsInSeconds, TimeUnit.SECONDS);\n+        System.out.println(\"Twins deleted: \" + created);\n+    }\n+\n+    /**\n+     * Creates all twins specified in the DTDL->DigitalTwins directory.\n+     * @throws IOException If an I/O error is thrown when accessing the starting file.\n+     * @throws InterruptedException If the current thread is interrupted while waiting to acquire permits on a semaphore.\n+     */\n+    public static void createTwins() throws IOException, InterruptedException {\n+        System.out.println(\"CREATE DIGITAL TWINS\");\n+        Map<String, String> twins = FileHelper.loadAllFilesInPath(TwinsPath);\n+        final Semaphore createTwinsSemaphore = new Semaphore(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c80e03c0ce62972eb4f461e8cd35652f6178317"}, "originalPosition": 181}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4834, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}