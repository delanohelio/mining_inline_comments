{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MTc1ODgw", "number": 16522, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOToyMToyMFrOEz7Y8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMzo1OTowNVrOE0Mr0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODg1ODcyOnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/util/IdentityConstants.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOToyMToyMFrOHrc7ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDowODozM1rOHrejnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMyNDgzNQ==", "bodyText": "Single sign on ID? This is the client ID of Azure CLI.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16522#discussion_r515324835", "createdAt": "2020-10-30T19:21:20Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/util/IdentityConstants.java", "diffHunk": "@@ -0,0 +1,11 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation.util;\n+\n+public class IdentityConstants {\n+    /**\n+     * The Single Sign On ID.\n+     */\n+    public static final String DEVELOPER_SINGLE_SIGN_ON_ID = \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da2fd877c624b7f9645b2334aa9c64eaf3a9be7b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1MTQ1Mw==", "bodyText": "Yeah the CLI ID is being used temporarily here in other languages too, until we get official single sign on Client Id.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16522#discussion_r515351453", "createdAt": "2020-10-30T20:08:33Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/util/IdentityConstants.java", "diffHunk": "@@ -0,0 +1,11 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation.util;\n+\n+public class IdentityConstants {\n+    /**\n+     * The Single Sign On ID.\n+     */\n+    public static final String DEVELOPER_SINGLE_SIGN_ON_ID = \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMyNDgzNQ=="}, "originalCommit": {"oid": "da2fd877c624b7f9645b2334aa9c64eaf3a9be7b"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODg2MTIyOnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/VisualStudioCacheAccessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOToyMjoxMlrOHrc9MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDowNzowN1rOHrehTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMyNTIzMw==", "bodyText": "Why not use Throwable?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16522#discussion_r515325233", "createdAt": "2020-10-30T19:22:12Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/VisualStudioCacheAccessor.java", "diffHunk": "@@ -131,7 +131,7 @@ public String getCredentials(String serviceName, String accountName) {\n \n                 byte[] readCreds = keyRingAccessor.read();\n                 credential = new String(readCreds, StandardCharsets.UTF_8);\n-            } catch (Exception e) {\n+            } catch (Exception | UnsatisfiedLinkError e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da2fd877c624b7f9645b2334aa9c64eaf3a9be7b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1MDg2MA==", "bodyText": "Throwable will work too, but didn't want to aggressively block other Error types which may qualify to fail the credential.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16522#discussion_r515350860", "createdAt": "2020-10-30T20:07:07Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/VisualStudioCacheAccessor.java", "diffHunk": "@@ -131,7 +131,7 @@ public String getCredentials(String serviceName, String accountName) {\n \n                 byte[] readCreds = keyRingAccessor.read();\n                 credential = new String(readCreds, StandardCharsets.UTF_8);\n-            } catch (Exception e) {\n+            } catch (Exception | UnsatisfiedLinkError e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMyNTIzMw=="}, "originalCommit": {"oid": "da2fd877c624b7f9645b2334aa9c64eaf3a9be7b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTY4NDMwOnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/ClientCertificateCredentialBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMzo0OTozMVrOHrzN3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMzo0OTozMVrOHrzN3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4OTk1MA==", "bodyText": "For internal consistency you should consider changing the name on the identityClientOptions too", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16522#discussion_r515689950", "createdAt": "2020-11-01T23:49:31Z", "author": {"login": "JonathanGiles"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/ClientCertificateCredentialBuilder.java", "diffHunk": "@@ -99,11 +97,12 @@ ClientCertificateCredentialBuilder enablePersistentCache() {\n      * Specifies if the x5c claim (public key of the certificate) should be sent as part of the authentication request\n      * and enable subject name / issuer based authentication. The default value is false.\n      *\n-     * @param includeX5c the flag to indicate if x5c should be sent as part of authentication request.\n+     * @param sendCertificateChain the flag to indicate if certificate chain should be sent as part of authentication\n+     * request.\n      * @return An updated instance of this builder.\n      */\n-    public ClientCertificateCredentialBuilder includeX5c(boolean includeX5c) {\n-        this.identityClientOptions.setIncludeX5c(includeX5c);\n+    public ClientCertificateCredentialBuilder sendCertificateChain(boolean sendCertificateChain) {\n+        this.identityClientOptions.setIncludeX5c(sendCertificateChain);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da2fd877c624b7f9645b2334aa9c64eaf3a9be7b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTY5MjM0OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/VisualStudioCacheAccessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMzo1OTowNVrOHrzRyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMzo1OTowNVrOHrzRyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MDk1NA==", "bodyText": "I would expect all strings going into logs would refer to it as \"VS Code\"?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16522#discussion_r515690954", "createdAt": "2020-11-01T23:59:05Z", "author": {"login": "JonathanGiles"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/VisualStudioCacheAccessor.java", "diffHunk": "@@ -131,7 +131,7 @@ public String getCredentials(String serviceName, String accountName) {\n \n                 byte[] readCreds = keyRingAccessor.read();\n                 credential = new String(readCreds, StandardCharsets.UTF_8);\n-            } catch (Exception e) {\n+            } catch (Exception | UnsatisfiedLinkError e) {\n                 throw logger.logExceptionAsError(new CredentialUnavailableException(\n                         \"Failed to read Vs Code credentials from Linux Key Ring.\", e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da2fd877c624b7f9645b2334aa9c64eaf3a9be7b"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4019, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}