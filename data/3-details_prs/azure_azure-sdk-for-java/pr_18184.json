{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNDA0NTcx", "number": 18184, "title": "Spark3: foundation for broadcasting CosmosClient Cache from Spark Driver and re-use the caches in the Spark Executor.", "bodyText": "This PR provides the foundation for broadcasting cosmos client cache (for now only CollectionCache) in a spark cluster.\nimportance:\nin a spark cluster spark driver JVm and spark executor JVMs running on different machines each will have a cosmos-client.\nWhen a spark driver orchestrate a spark job, new executors will be assigned and that requires instantiating CosmosClients on the executor JVMs. CosmosClient bootstrapping consumes master resource budget and hence very quickly we will get master resource RU throttled.\nThis PR provides the foundation of capturing a snapshot of the CosmosClient collection cache from the spark driver and broadcasts it to all executor, hence all executors can re-use the pre-populated collection cache from driver.\nFor now only we support collection-cache broadcast.\nTODO:\n\nLater we will add support for broadcasting DatabaseAccount info (GlobalEndpoint Manager)\nPartitionKeyRangeCache\nAddressCache", "createdAt": "2020-12-16T19:56:48Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184", "merged": true, "mergeCommit": {"oid": "97697f8e9b27d5d1906310b48a3776e08bd96021"}, "closed": true, "closedAt": "2021-01-04T23:52:21Z", "author": {"login": "moderakh"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdm0avrAH2gAyNTQxNDA0NTcxOmQyYThhOTk5OGFjNGUyZjBiMmIzMWZmYmU1ZTA1ZGYyZGU5NmIxM2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABds-SnYgH2gAyNTQxNDA0NTcxOjJmMzE4NjllOWM1ZDg0YjIzMGYxNjY0MDcwNDU1ZWY0YTIwZjgxZjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d", "committedDate": "2020-12-16T19:50:38Z", "message": "setting up the foundation for broadcasting cosmos client cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73c48ccbfbd74b7e6fce86fb3cfb5225be8d7c2f", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/73c48ccbfbd74b7e6fce86fb3cfb5225be8d7c2f", "committedDate": "2020-12-17T20:45:33Z", "message": "fixed code style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50c50fd2fabe1220a636ba641b3e01b89b6b5212", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/50c50fd2fabe1220a636ba641b3e01b89b6b5212", "committedDate": "2020-12-17T23:42:53Z", "message": "fixed checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a54d6b758ac5227ef283650edc9ad7ac65571961", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a54d6b758ac5227ef283650edc9ad7ac65571961", "committedDate": "2020-12-18T00:46:59Z", "message": "fixed checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5dd99e6607f2b394350c11257496ec7b36a98ec1", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5dd99e6607f2b394350c11257496ec7b36a98ec1", "committedDate": "2020-12-18T05:52:26Z", "message": "fixed tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91e58e5af82e5420f652daf3293b28b4851eb1fa", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/91e58e5af82e5420f652daf3293b28b4851eb1fa", "committedDate": "2020-12-18T05:56:55Z", "message": "fixed style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NTQwNzM2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#pullrequestreview-555540736", "createdAt": "2020-12-18T14:35:03Z", "commit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDozNTowM1rOIIlMVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDozNTowM1rOIIlMVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg2ODg4Nw==", "bodyText": "Will intel sense show these contracts?\nAlso can it be made deprecated to start with?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545868887", "createdAt": "2020-12-18T14:35:03Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBridgeInternal.java", "diffHunk": "@@ -130,6 +131,12 @@ public static CosmosClientBuilder cloneCosmosClientBuilder(CosmosClientBuilder b\n         return copy;\n     }\n \n+    @Warning(value = INTERNAL_USE_ONLY_WARNING)\n+    public static CosmosClientBuilder setUsingState(CosmosClientBuilder cosmosClientBuilder, CosmosClientState state) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NTQyMzk4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#pullrequestreview-555542398", "createdAt": "2020-12-18T14:36:17Z", "commit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDozNjoxN1rOIIlPPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDozNjoxN1rOIIlPPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg2OTYzMQ==", "bodyText": "Its actually metadata cache only right.\nState might mean many other aspects.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545869631", "createdAt": "2020-12-18T14:36:17Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/CosmosClientState.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosBridgeInternal;\n+import com.azure.cosmos.implementation.caches.AsyncCache;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+\n+public class CosmosClientState implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NTQzOTY1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#pullrequestreview-555543965", "createdAt": "2020-12-18T14:37:25Z", "commit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDozNzoyNVrOIIlR0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDozNzoyNVrOIIlR0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg3MDI4OQ==", "bodyText": "ni: Indent", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545870289", "createdAt": "2020-12-18T14:37:25Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/CosmosClientState.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosBridgeInternal;\n+import com.azure.cosmos.implementation.caches.AsyncCache;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+\n+public class CosmosClientState implements Serializable {\n+    public byte[] collectionInfoByNameCache;\n+    public byte[] collectionInfoByIdCache;\n+\n+    public CosmosClientState() {\n+        System.out.println(\"initialized Cosmos Client State\");\n+    }\n+\n+    public void serialize(CosmosAsyncClient client) throws IOException {\n+        RxDocumentClientImpl documentClient = (RxDocumentClientImpl) CosmosBridgeInternal.getAsyncDocumentClient(client);\n+        documentClient.serialize(this);\n+    }\n+\n+    public void serializeCollectionInfoByNameCache(AsyncCache<String, DocumentCollection> cache) throws IOException {\n+        this.collectionInfoByNameCache = serializeAsyncCollectionCache(cache);\n+    }\n+\n+    public void serializeCollectionInfoByIdCache(AsyncCache<String, DocumentCollection> cache) throws IOException {\n+        this.collectionInfoByIdCache = serializeAsyncCollectionCache(cache);\n+    }\n+\n+    private byte[] serializeAsyncCollectionCache(AsyncCache<String, DocumentCollection> cache) throws IOException {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream objectOutputStream = new ObjectOutputStream(baos);\n+        objectOutputStream.writeObject(AsyncCache.SerializableAsyncCache.from(cache, String.class, DocumentCollection.class));\n+\n+        objectOutputStream.close();\n+        return baos.toByteArray();\n+    }\n+\n+    public AsyncCache<String, DocumentCollection> getCollectionInfoByNameCache() throws IOException, ClassNotFoundException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NTUyNjI1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#pullrequestreview-555552625", "createdAt": "2020-12-18T14:45:38Z", "commit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDo0NTozOFrOIIlo5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDo0NTozOFrOIIlo5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg3NjE5Nw==", "bodyText": "CosmosException?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545876197", "createdAt": "2020-12-18T14:45:38Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -384,7 +387,18 @@ public void init() {\n             this.globalEndpointManager.init();\n             this.initializeGatewayConfigurationReader();\n \n-            this.collectionCache = new RxClientCollectionCache(this, this.sessionContainer, this.gatewayProxy, this, this.retryPolicy);\n+            if (state != null ) {\n+                try {\n+                    this.collectionCache = new RxClientCollectionCache(this, this.sessionContainer, this.gatewayProxy, this, this.retryPolicy,\n+                        state.getCollectionInfoByNameCache(),\n+                        state.getCollectionInfoByIdCache()\n+                    );\n+                } catch (Exception e) {\n+                    throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NTUyOTg3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#pullrequestreview-555552987", "createdAt": "2020-12-18T14:46:08Z", "commit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDo0NjowOFrOIIlrFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDo0NjowOFrOIIlrFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg3Njc1OQ==", "bodyText": "How will be \"backward compatibility\" mnaged?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545876759", "createdAt": "2020-12-18T14:46:08Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/CosmosClientState.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosBridgeInternal;\n+import com.azure.cosmos.implementation.caches.AsyncCache;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+\n+public class CosmosClientState implements Serializable {\n+    public byte[] collectionInfoByNameCache;\n+    public byte[] collectionInfoByIdCache;\n+\n+    public CosmosClientState() {\n+        System.out.println(\"initialized Cosmos Client State\");\n+    }\n+\n+    public void serialize(CosmosAsyncClient client) throws IOException {\n+        RxDocumentClientImpl documentClient = (RxDocumentClientImpl) CosmosBridgeInternal.getAsyncDocumentClient(client);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NTU3MzE0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#pullrequestreview-555557314", "createdAt": "2020-12-18T14:51:26Z", "commit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDo1MToyNlrOIIl_bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDo1MToyNlrOIIl_bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg4MTk2NQ==", "bodyText": "By name is a reference or derived one.\nHow about limit to primitive data only?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545881965", "createdAt": "2020-12-18T14:51:26Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/caches/RxCollectionCache.java", "diffHunk": "@@ -29,9 +31,18 @@\n     private final AsyncCache<String, DocumentCollection> collectionInfoByNameCache;\n     private final AsyncCache<String, DocumentCollection> collectionInfoByIdCache;\n \n+    public static void serialize(CosmosClientState state, RxCollectionCache cache) throws IOException {\n+        state.serializeCollectionInfoByIdCache(cache.collectionInfoByIdCache);\n+        state.serializeCollectionInfoByNameCache(cache.collectionInfoByNameCache);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NTYwMzY3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#pullrequestreview-555560367", "createdAt": "2020-12-18T14:55:02Z", "commit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDo1NTowMlrOIImO-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDo1NTowMlrOIImO-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg4NTk0NA==", "bodyText": "Are routing addresses also cached?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545885944", "createdAt": "2020-12-18T14:55:02Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/caches/RxCollectionCache.java", "diffHunk": "@@ -29,9 +31,18 @@\n     private final AsyncCache<String, DocumentCollection> collectionInfoByNameCache;\n     private final AsyncCache<String, DocumentCollection> collectionInfoByIdCache;\n \n+    public static void serialize(CosmosClientState state, RxCollectionCache cache) throws IOException {\n+        state.serializeCollectionInfoByIdCache(cache.collectionInfoByIdCache);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5c3c283ef3090d1d0515308f805477c1c5d5512", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c5c3c283ef3090d1d0515308f805477c1c5d5512", "committedDate": "2020-12-18T17:33:56Z", "message": "addressed review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1ODU1Mzc5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#pullrequestreview-555855379", "createdAt": "2020-12-18T22:40:05Z", "commit": {"oid": "c5c3c283ef3090d1d0515308f805477c1c5d5512"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMjo0MDowNVrOII0x9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMjo0MDowNVrOII0x9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEyNDI3Ng==", "bodyText": "Just my 2 cents: I don't think the Spark connector should be allowed to use internal API. Instead I think we need to add this to public surface area (as beta first). It encourages customers to use internal API if we start using it across different maven packages/binaries", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r546124276", "createdAt": "2020-12-18T22:40:05Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos-spark_3-0_2-12/src/main/scala/com/azure/cosmos/spark/CosmosPartitionReader.scala", "diffHunk": "@@ -25,10 +30,16 @@ case class CosmosPartitionReader(config: Map[String, String], readSchema: Struct\n \n   // TODO: moderakh cache the cosmos clients and manage the lifetime of the clients\n   // we shouldn't recreate everytime, causing resource leak, inefficient behaviour\n-  val cosmosAsyncContainer = new CosmosClientBuilder()\n+  val builder = new CosmosClientBuilder()\n     .endpoint(endpointConfig.endpoint)\n     .key(endpointConfig.key)\n-    .buildAsyncClient()\n+\n+  val state = cosmosClientStateHandle.value;\n+\n+  CosmosBridgeInternal.metadataCaches(builder, cosmosClientStateHandle.value)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5c3c283ef3090d1d0515308f805477c1c5d5512"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1ODU1NjE3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#pullrequestreview-555855617", "createdAt": "2020-12-18T22:40:46Z", "commit": {"oid": "c5c3c283ef3090d1d0515308f805477c1c5d5512"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMjo0MDo0NlrOII0ypw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMjo0MDo0NlrOII0ypw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEyNDQ1NQ==", "bodyText": "This should be public instead (see comment above)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r546124455", "createdAt": "2020-12-18T22:40:46Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "diffHunk": "@@ -116,6 +118,15 @@ public CosmosClientBuilder() {\n         this.throttlingRetryOptions = new ThrottlingRetryOptions();\n     }\n \n+    CosmosClientBuilder metadataCaches(CosmosClientMetadataCachesSnapshot metadataCachesSnapshot) {\n+        this.state = metadataCachesSnapshot;\n+        return this;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5c3c283ef3090d1d0515308f805477c1c5d5512"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1ODY2OTQ3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#pullrequestreview-555866947", "createdAt": "2020-12-18T22:54:39Z", "commit": {"oid": "c5c3c283ef3090d1d0515308f805477c1c5d5512"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f31869e9c5d84b230f1664070455ef4a20f81f2", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2f31869e9c5d84b230f1664070455ef4a20f81f2", "committedDate": "2021-01-04T22:44:21Z", "message": "address review comment"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1287, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}