{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4ODE0MTA3", "number": 7835, "title": "[API change] Added convenient upload method to BlobClient", "bodyText": "Resolves #6089", "createdAt": "2020-01-29T23:16:33Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7835", "merged": true, "mergeCommit": {"oid": "89cee1e00855f1daa60678788d2a7fb66d2bd5a5"}, "closed": true, "closedAt": "2020-01-31T17:31:04Z", "author": {"login": "gapra-msft"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_OW5HAH2gAyMzY4ODE0MTA3OjExMGIwNjNjOTQ3NjU5ZTZmN2I2NmFkODMwYWJlYTg1N2FhZTIxZjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_krpigFqTM1MTI0NTk2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "110b063c947659e6f7b66ad830abea857aae21f1", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/110b063c947659e6f7b66ad830abea857aae21f1", "committedDate": "2020-01-29T23:15:50Z", "message": "Added convenient upload method to BlobClient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bd132678076a42724a0f41b19f088884a94423f", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0bd132678076a42724a0f41b19f088884a94423f", "committedDate": "2020-01-29T23:17:03Z", "message": "removed unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b61665336f217d120cd3d6748013909b59275c2d", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b61665336f217d120cd3d6748013909b59275c2d", "committedDate": "2020-01-30T00:09:52Z", "message": "Added an extra test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNTMwNDc4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7835#pullrequestreview-350530478", "createdAt": "2020-01-30T01:12:52Z", "commit": {"oid": "0bd132678076a42724a0f41b19f088884a94423f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMDQ2NDU5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7835#pullrequestreview-351046459", "createdAt": "2020-01-30T18:30:46Z", "commit": {"oid": "b61665336f217d120cd3d6748013909b59275c2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODozMDo0NlrOFj1XYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODozMDo0NlrOFj1XYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExODgxNg==", "bodyText": "I thought this method was only java 9?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7835#discussion_r373118816", "createdAt": "2020-01-30T18:30:46Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobClient.java", "diffHunk": "@@ -115,6 +120,70 @@ public PageBlobClient getPageBlobClient() {\n             .buildPageBlobClient();\n     }\n \n+    /**\n+     * Creates a new blob. By default this method will not overwrite an existing blob.\n+     *\n+     * @param data The data to write to the blob.\n+     * @param length The exact length of the data. It is important that this value match precisely the length of the\n+     * data provided in the {@link InputStream}.\n+     */\n+    public void upload(InputStream data, long length) {\n+        upload(data, length, false);\n+    }\n+\n+    /**\n+     * Creates a new blob, or updates the content of an existing blob.\n+     *\n+     * @param data The data to write to the blob.\n+     * @param length The exact length of the data. It is important that this value match precisely the length of the\n+     * data provided in the {@link InputStream}.\n+     * @param overwrite Whether or not to overwrite, should data exist on the blob.\n+     */\n+    public void upload(InputStream data, long length, boolean overwrite) {\n+        BlobRequestConditions blobRequestConditions = new BlobRequestConditions();\n+        if (!overwrite) {\n+            blobRequestConditions.setIfNoneMatch(Constants.HeaderConstants.ETAG_WILDCARD);\n+        }\n+        uploadWithResponse(data, length, null, null, null, null, blobRequestConditions, null, Context.NONE);\n+    }\n+\n+    /**\n+     * Creates a new blob, or updates the content of an existing blob.\n+     * <p>\n+     * To avoid overwriting, pass \"*\" to {@link BlobRequestConditions#setIfNoneMatch(String)}.\n+     *\n+     * @param data The data to write to the blob.\n+     * @param length The exact length of the data. It is important that this value match precisely the length of the\n+     * data provided in the {@link InputStream}.\n+     * @param parallelTransferOptions {@link ParallelTransferOptions} used to configure buffered uploading.\n+     * @param headers {@link BlobHttpHeaders}\n+     * @param metadata Metadata to associate with the blob.\n+     * @param tier {@link AccessTier} for the destination blob.\n+     * @param requestConditions {@link BlobRequestConditions}\n+     * @param timeout An optional timeout value beyond which a {@link RuntimeException} will be raised.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     */\n+    public void uploadWithResponse(InputStream data, long length, ParallelTransferOptions parallelTransferOptions,\n+        BlobHttpHeaders headers, Map<String, String> metadata, AccessTier tier, BlobRequestConditions requestConditions,\n+        Duration timeout, Context context) {\n+        BlockBlobClient blockBlobClient = this.getBlockBlobClient();\n+        final ParallelTransferOptions validatedParallelTransferOptions =\n+            ModelHelper.populateAndApplyDefaults(parallelTransferOptions);\n+        if (length < validatedParallelTransferOptions.getMaxSingleUploadSize()) {\n+            blockBlobClient.uploadWithResponse(data, length, headers, metadata, tier, null, requestConditions,\n+                timeout, context);\n+        } else {\n+            BlobOutputStream blobOutputStream = BlobOutputStream.blockBlobOutputStream(client,\n+                validatedParallelTransferOptions, headers, metadata, tier, requestConditions);\n+            try {\n+                data.transferTo(blobOutputStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61665336f217d120cd3d6748013909b59275c2d"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5125490c2fa9890c16edde8aa0d9755f452f0ee8", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5125490c2fa9890c16edde8aa0d9755f452f0ee8", "committedDate": "2020-01-30T20:56:25Z", "message": "Wrote copy method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "083af3f1e39421e69740a79c5deb49da12172fc2", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/083af3f1e39421e69740a79c5deb49da12172fc2", "committedDate": "2020-01-30T21:05:43Z", "message": "removed unused imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMTUzMjEz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7835#pullrequestreview-351153213", "createdAt": "2020-01-30T21:27:00Z", "commit": {"oid": "083af3f1e39421e69740a79c5deb49da12172fc2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMToyNzowMFrOFj6diA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMToyNzowMFrOFj6diA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIwMjMxMg==", "bodyText": "Could this go into StorageImplUtils for the time being? Do we expected or would want a customer to use this API in the near-term?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7835#discussion_r373202312", "createdAt": "2020-01-30T21:27:00Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/Utility.java", "diffHunk": "@@ -241,4 +244,27 @@ public static OffsetDateTime parseDate(String dateString) {\n                 }\n             });\n     }\n+\n+    /**\n+     * Reads data from an input stream and writes it to an output stream.\n+     * @param source {@link InputStream source}\n+     * @param writeLength The length of data to write.\n+     * @param destination {@link OutputStream destination}\n+     * @throws IOException If an I/O error occurs.\n+     */\n+    public static void copyToOutputStream(InputStream source, long writeLength, OutputStream destination)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "083af3f1e39421e69740a79c5deb49da12172fc2"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bde7ada95add74199556c0d5ad6439665b26b106", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bde7ada95add74199556c0d5ad6439665b26b106", "committedDate": "2020-01-30T22:26:30Z", "message": "Moved to ImplUtils"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMjQ1OTYx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7835#pullrequestreview-351245961", "createdAt": "2020-01-31T01:16:25Z", "commit": {"oid": "bde7ada95add74199556c0d5ad6439665b26b106"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2537, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}