{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MTkzNTQ0", "number": 12400, "title": "Test coverage for Form Recognizer client, Part 1", "bodyText": "Test Scenario Coverage:\nhttps://microsoft.sharepoint.com/\u274c/t/AzureDeveloperExperience/ERwfsXEb42RJt1WPS1bBUwUBnvwdAtJPAGDhekRAxwoCIw\n\nremaining tests not covered in issue: #12523\n\n\nAdded polling duration for PLAYBACK and RECORD mode.\n\n\nfixes: #10602 for SpotBugs found in Sample and Tests only. Source code has no spotbug issue found", "createdAt": "2020-06-22T21:45:16Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400", "merged": true, "mergeCommit": {"oid": "29d08bcaa00d5545fbab28b68f51142c12629a47"}, "closed": true, "closedAt": "2020-07-01T19:36:31Z", "author": {"login": "mssfang"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABct2Z7UAH2gAyNDM4MTkzNTQ0OjJhYTdhMmI3Njc5ZThkNDYxOWEzNWNjMTAxY2YwY2NjYTkzZWZkMTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwu2XsAFqTQ0MTExNjgyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2aa7a2b7679e8d4619a35cc101cf0ccca93efd13", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2aa7a2b7679e8d4619a35cc101cf0ccca93efd13", "committedDate": "2020-06-22T19:55:52Z", "message": "test coverage for Form Recognizer clients"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d24722074a1e4cbb8d3f43219e07a9f96ff7a02a", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d24722074a1e4cbb8d3f43219e07a9f96ff7a02a", "committedDate": "2020-06-23T07:06:35Z", "message": "add record json files"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MTM4ODE0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#pullrequestreview-436138814", "createdAt": "2020-06-23T20:41:30Z", "commit": {"oid": "d24722074a1e4cbb8d3f43219e07a9f96ff7a02a"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDo0MTozMFrOGn5wvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMTowNDozNFrOGn6mbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5NDAxMw==", "bodyText": "Update this to using the public beginRecognizeContent API", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#discussion_r444494013", "createdAt": "2020-06-23T20:41:30Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientTest.java", "diffHunk": "@@ -210,6 +300,55 @@ public void recognizeContentResultWithContentTypeAutoDetection(HttpClient httpCl\n         });\n     }\n \n+    /**\n+     * Verifies blank form file is still a valid file to process\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void recognizeContentResultWithBlankPdf(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        SyncPoller<OperationResult, List<FormPage>> syncPoller =\n+            client.beginRecognizeContent(getReplayableBufferData(BLANK_FORM_LOCAL_URL), BLANK_FORM_FILE_LENGTH,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d24722074a1e4cbb8d3f43219e07a9f96ff7a02a"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5NDUwNg==", "bodyText": "bad as in incorrect or not supported?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#discussion_r444494506", "createdAt": "2020-06-23T20:42:26Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientTest.java", "diffHunk": "@@ -210,6 +300,55 @@ public void recognizeContentResultWithContentTypeAutoDetection(HttpClient httpCl\n         });\n     }\n \n+    /**\n+     * Verifies blank form file is still a valid file to process\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void recognizeContentResultWithBlankPdf(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        SyncPoller<OperationResult, List<FormPage>> syncPoller =\n+            client.beginRecognizeContent(getReplayableBufferData(BLANK_FORM_LOCAL_URL), BLANK_FORM_FILE_LENGTH,\n+                FormContentType.APPLICATION_PDF, null).getSyncPoller();\n+        syncPoller.waitForCompletion();\n+        validateContentResultData(syncPoller.getFinalResult(), false);\n+    }\n+\n+    /**\n+     * Verifies throwing exception when using bad content type argument\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void recognizeBadContentTypeArgument(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n+//        Exception ex = assertThrows(RuntimeException.class, () -> client.beginRecognizeContent(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d24722074a1e4cbb8d3f43219e07a9f96ff7a02a"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5NDY5Nw==", "bodyText": "Need to fix something here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#discussion_r444494697", "createdAt": "2020-06-23T20:42:45Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientTest.java", "diffHunk": "@@ -210,6 +300,55 @@ public void recognizeContentResultWithContentTypeAutoDetection(HttpClient httpCl\n         });\n     }\n \n+    /**\n+     * Verifies blank form file is still a valid file to process\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void recognizeContentResultWithBlankPdf(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        SyncPoller<OperationResult, List<FormPage>> syncPoller =\n+            client.beginRecognizeContent(getReplayableBufferData(BLANK_FORM_LOCAL_URL), BLANK_FORM_FILE_LENGTH,\n+                FormContentType.APPLICATION_PDF, null).getSyncPoller();\n+        syncPoller.waitForCompletion();\n+        validateContentResultData(syncPoller.getFinalResult(), false);\n+    }\n+\n+    /**\n+     * Verifies throwing exception when using bad content type argument\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void recognizeBadContentTypeArgument(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n+//        Exception ex = assertThrows(RuntimeException.class, () -> client.beginRecognizeContent(\n+//            getReplayableBufferData(BLANK_FORM_LOCAL_URL), BLANK_FORM_FILE_LENGTH,\n+//            FormContentType.APPLICATION_PDF, null).getSyncPoller());\n+        // TODO: this should throw exception, probably we don't have the pre-check for the FormContentType", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d24722074a1e4cbb8d3f43219e07a9f96ff7a02a"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5NTQ1Mw==", "bodyText": "Can this supplier give both jpg form data and length?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#discussion_r444495453", "createdAt": "2020-06-23T20:44:13Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientTest.java", "diffHunk": "@@ -277,11 +445,78 @@ public void recognizeCustomFormLabeledData(HttpClient httpClient, FormRecognizer\n     }\n \n     /**\n-     * Verifies an exception thrown for a document using null data value or null model id.\n+     * Verifies custom form data for a JPG content type with labeled data\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void recognizeCustomFormLabeledDataWithJpgContentType(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        customFormJpgDataRunner(data -> beginTrainingLabeledRunner((trainingFilesUrl, useTrainingLabels) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d24722074a1e4cbb8d3f43219e07a9f96ff7a02a"}, "originalPosition": 335}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5NjIyMw==", "bodyText": "No need to train if test is to check for null model Id?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#discussion_r444496223", "createdAt": "2020-06-23T20:45:42Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientTest.java", "diffHunk": "@@ -293,12 +528,72 @@ public void recognizeCustomFormLabeledDataWithNullValues(HttpClient httpClient,\n             assertThrows(RuntimeException.class, () -> client.beginRecognizeCustomForms(null,\n                 syncPoller.getFinalResult().getModelId(), CUSTOM_FORM_FILE_LENGTH, FormContentType.APPLICATION_PDF,\n                 true, null).getSyncPoller());\n+        }));\n+    }\n+\n+    /**\n+     * Verifies an exception thrown for a document using null model id.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void recognizeCustomFormLabeledDataWithNullModelId(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        customFormDataRunner(data -> beginTrainingLabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n+            SyncPoller<OperationResult, CustomFormModel> syncPoller =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d24722074a1e4cbb8d3f43219e07a9f96ff7a02a"}, "originalPosition": 420}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5NjUwOA==", "bodyText": "Same here. No need to train, if we are not going to use the training result.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#discussion_r444496508", "createdAt": "2020-06-23T20:46:18Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientTest.java", "diffHunk": "@@ -293,12 +528,72 @@ public void recognizeCustomFormLabeledDataWithNullValues(HttpClient httpClient,\n             assertThrows(RuntimeException.class, () -> client.beginRecognizeCustomForms(null,\n                 syncPoller.getFinalResult().getModelId(), CUSTOM_FORM_FILE_LENGTH, FormContentType.APPLICATION_PDF,\n                 true, null).getSyncPoller());\n+        }));\n+    }\n+\n+    /**\n+     * Verifies an exception thrown for a document using null model id.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void recognizeCustomFormLabeledDataWithNullModelId(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        customFormDataRunner(data -> beginTrainingLabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n+            SyncPoller<OperationResult, CustomFormModel> syncPoller =\n+                getFormTrainingAsyncClient(httpClient, serviceVersion).beginTraining(trainingFilesUrl,\n+                    useTrainingLabels).getSyncPoller();\n+            syncPoller.waitForCompletion();\n+\n+            Exception ex = assertThrows(RuntimeException.class, () ->\n+                client.beginRecognizeCustomForms(toFluxByteBuffer(data), null,\n+                CUSTOM_FORM_FILE_LENGTH, FormContentType.APPLICATION_PDF, true, null)\n+                    .getSyncPoller());\n+            assertEquals(EXPECTED_MODEL_ID_IS_REQUIRED_EXCEPTION_MESSAGE, ex.getMessage());\n+        }));\n+    }\n+\n+    /**\n+     * Verifies an exception thrown for an empty model id when recognizing custom form from URL.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void recognizeCustomFormLabeledDataWithEmptyModelId(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        customFormDataRunner(data -> beginTrainingLabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n+            SyncPoller<OperationResult, CustomFormModel> syncPoller =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d24722074a1e4cbb8d3f43219e07a9f96ff7a02a"}, "originalPosition": 442}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5ODAyOA==", "bodyText": "updatethese  to use the public API's in the tests and not the package private APIs.\nApplies to all test methods.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#discussion_r444498028", "createdAt": "2020-06-23T20:49:02Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientTest.java", "diffHunk": "@@ -316,12 +611,37 @@ public void recognizeCustomFormLabeledDataWithContentTypeAutoDetection(HttpClien\n \n             SyncPoller<OperationResult, List<RecognizedForm>> syncPoller =\n                 client.beginRecognizeCustomForms(getReplayableBufferData(FORM_LOCAL_URL),\n-                    trainingPoller.getFinalResult().getModelId(), CUSTOM_FORM_FILE_LENGTH, null, true, null).getSyncPoller();\n+                    trainingPoller.getFinalResult().getModelId(), CUSTOM_FORM_FILE_LENGTH, null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d24722074a1e4cbb8d3f43219e07a9f96ff7a02a"}, "originalPosition": 483}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUwNDAwNg==", "bodyText": "recognizeReceiptDataTextDetailsWithNullData -> recognizeReceiptDataNullData\n?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#discussion_r444504006", "createdAt": "2020-06-23T20:57:20Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerClientTestBase.java", "diffHunk": "@@ -274,29 +284,58 @@ private static void validatePageRangeData(int expectedPageInfo, FormPageRange ac\n         assertEquals(expectedPageInfo, actualPageInfo.getLastPageNumber());\n     }\n \n+    // Receipt recognition\n+\n     @Test\n-    abstract void recognizeReceiptSourceUrl(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n+    abstract void recognizeReceiptData(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeReceiptSourceUrlTextDetails(HttpClient httpClient,\n+    abstract void recognizeReceiptDataTextDetailsWithNullData(HttpClient httpClient,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d24722074a1e4cbb8d3f43219e07a9f96ff7a02a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUwNDU4OA==", "bodyText": "recognizeReceiptSourceUrlTextDetails -> recognizeReceiptFromUrlTextContent", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#discussion_r444504588", "createdAt": "2020-06-23T20:58:28Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerClientTestBase.java", "diffHunk": "@@ -274,29 +284,58 @@ private static void validatePageRangeData(int expectedPageInfo, FormPageRange ac\n         assertEquals(expectedPageInfo, actualPageInfo.getLastPageNumber());\n     }\n \n+    // Receipt recognition\n+\n     @Test\n-    abstract void recognizeReceiptSourceUrl(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n+    abstract void recognizeReceiptData(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeReceiptSourceUrlTextDetails(HttpClient httpClient,\n+    abstract void recognizeReceiptDataTextDetailsWithNullData(HttpClient httpClient,\n         FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeReceiptData(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n+    abstract void recognizeReceiptDataWithContentTypeAutoDetection(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion);\n \n     // Turn off the tests as there is service regression on the media type.\n     // Issue link: https://github.com/Azure/azure-sdk-for-java/issues/11036\n     // @Test\n     // abstract void recognizeReceiptDataTextDetails(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeReceiptDataTextDetailsWithNullData(HttpClient httpClient,\n+    abstract void recognizeReceiptDataWithPngFile(HttpClient httpClient,\n         FormRecognizerServiceVersion serviceVersion);\n \n     @Test\n-    abstract void recognizeReceiptDataWithContentTypeAutoDetection(HttpClient httpClient,\n+    abstract void recognizeReceiptDataWithBlankPdf(HttpClient httpClient,\n         FormRecognizerServiceVersion serviceVersion);\n \n+    @Test\n+    abstract void recognizeReceiptFromDataMultiPage(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n+\n+    // Receipt - URL\n+\n+    @Test\n+    abstract void recognizeReceiptSourceUrl(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n+\n+    @Test\n+    abstract void recognizeReceiptInvalidSourceUrl(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion);\n+\n+    @Test\n+    abstract void recognizeReceiptSourceUrlTextDetails(HttpClient httpClient,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d24722074a1e4cbb8d3f43219e07a9f96ff7a02a"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUwNzc1OQ==", "bodyText": "No test case with this name?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#discussion_r444507759", "createdAt": "2020-06-23T21:04:34Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/resources/session-records/recognizeCustomFormFromUrlLabeledDataWithNullValues.json", "diffHunk": "@@ -0,0 +1,44 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d24722074a1e4cbb8d3f43219e07a9f96ff7a02a"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba7bfaf1cd602c7f1752009cd5074a6362fbacb8", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ba7bfaf1cd602c7f1752009cd5074a6362fbacb8", "committedDate": "2020-06-24T04:23:57Z", "message": "resolve conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68e6f992363dfe4af6ad7740e4524d9f9e51b519", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/68e6f992363dfe4af6ad7740e4524d9f9e51b519", "committedDate": "2020-06-26T03:48:35Z", "message": "added training client tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf7ed015d52389a567aeb1949a1bb12a2c1cdb35", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cf7ed015d52389a567aeb1949a1bb12a2c1cdb35", "committedDate": "2020-06-26T03:48:44Z", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into FR-TestCoverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99c8d57ce5aedbef36b1ad833b197bfb25826405", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/99c8d57ce5aedbef36b1ad833b197bfb25826405", "committedDate": "2020-06-26T04:42:34Z", "message": "address sameeksha's feedbacks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1732307526903c46516af3347cf395cc5ed67db8", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1732307526903c46516af3347cf395cc5ed67db8", "committedDate": "2020-06-26T05:12:42Z", "message": "checkstyle fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MDM2MjY1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#pullrequestreview-438036265", "createdAt": "2020-06-26T06:11:17Z", "commit": {"oid": "1732307526903c46516af3347cf395cc5ed67db8"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNjoxMToxOFrOGpU2Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNjozODowM1rOGpVYLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4NjQwNg==", "bodyText": "let's update all the includeTextDetails references to includeTextContent", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#discussion_r445986406", "createdAt": "2020-06-26T06:11:18Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientTest.java", "diffHunk": "@@ -171,17 +208,66 @@ public void recognizeReceiptInvalidSourceUrl(HttpClient httpClient, FormRecogniz\n             () -> client.beginRecognizeReceiptsFromUrl(sourceUrl).getSyncPoller()));\n     }\n \n+    /**\n+     * Verifies receipt data for a document using source as file url and include content when includeTextDetails is\n+     * true.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void recognizeReceiptFromUrlTextContent(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        receiptSourceUrlRunnerTextDetails((sourceUrl, includeTextDetails) -> {\n+            SyncPoller<OperationResult, List<RecognizedReceipt>> syncPoller = client.beginRecognizeReceiptsFromUrl(\n+                new RecognizeOptions(sourceUrl).setIncludeTextContent(includeTextDetails)).getSyncPoller();\n+            syncPoller.waitForCompletion();\n+            validateReceiptResultData(syncPoller.getFinalResult(), includeTextDetails);\n+        });\n+    }\n+\n+    /**\n+     * Verifies receipt data for a document using source as PNG file url and include content when includeTextDetails is\n+     * true.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void recognizeReceiptSourceUrlWithPngFile(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        receiptPngSourceUrlRunnerTextDetails((sourceUrl, includeTextDetails) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1732307526903c46516af3347cf395cc5ed67db8"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4NzAzNQ==", "bodyText": "nit: this would by default be false so no need to set.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#discussion_r445987035", "createdAt": "2020-06-26T06:13:19Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientTest.java", "diffHunk": "@@ -241,73 +368,189 @@ public void recognizeContentInvalidSourceUrl(HttpClient httpClient, FormRecogniz\n             () -> client.beginRecognizeContentFromUrl(invalidSourceUrl).getSyncPoller()));\n     }\n \n-    /**\n-     * Verifies that an exception is thrown for invalid status model Id.\n-     */\n     @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n     @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n-    public void recognizeCustomFormInvalidSourceUrl(HttpClient httpClient,\n-        FormRecognizerServiceVersion serviceVersion) {\n+    public void recognizeContentFromUrlMultiPage(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n         client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n-        beginTrainingLabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n-            SyncPoller<OperationResult, CustomFormModel> syncPoller =\n-                getFormTrainingAsyncClient(httpClient, serviceVersion).beginTraining(trainingFilesUrl,\n-                    useTrainingLabels).getSyncPoller();\n+        multipageFromUrlRunner((fileUrl) -> {\n+            SyncPoller<OperationResult, List<FormPage>> syncPoller =\n+                client.beginRecognizeContentFromUrl(fileUrl).getSyncPoller();\n             syncPoller.waitForCompletion();\n-            CustomFormModel createdModel = syncPoller.getFinalResult();\n-            StepVerifier.create(client.beginRecognizeCustomFormsFromUrl(INVALID_URL, createdModel.getModelId()))\n-                .verifyErrorSatisfies(throwable -> assertEquals(throwable.getMessage(), INVALID_SOURCE_URL_ERROR));\n+            validateContentResultData(syncPoller.getFinalResult(), false);\n         });\n     }\n \n+    // Custom form recognition\n+\n+    // Custom form - non-URL - labeled data\n+\n     /**\n      * Verifies custom form data for a document using source as input stream data and valid labeled model Id.\n      */\n     @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n     @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n     public void recognizeCustomFormLabeledData(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n         client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n-        customFormDataRunner(data -> beginTrainingLabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n+        customFormDataRunner((data, dataLength) -> beginTrainingLabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n             SyncPoller<OperationResult, CustomFormModel> trainingPoller =\n                 getFormTrainingAsyncClient(httpClient, serviceVersion).beginTraining(trainingFilesUrl,\n                     useTrainingLabels).getSyncPoller();\n             trainingPoller.waitForCompletion();\n \n             SyncPoller<OperationResult, List<RecognizedForm>> syncPoller =\n                 client.beginRecognizeCustomForms(new RecognizeCustomFormsOptions(toFluxByteBuffer(data),\n-                    CUSTOM_FORM_FILE_LENGTH, trainingPoller.getFinalResult().getModelId())\n+                    dataLength, trainingPoller.getFinalResult().getModelId())\n                     .setFormContentType(FormContentType.APPLICATION_PDF).setIncludeTextContent(true)).getSyncPoller();\n             syncPoller.waitForCompletion();\n             validateRecognizedResult(syncPoller.getFinalResult(), true, true);\n         }));\n     }\n \n     /**\n-     * Verifies an exception thrown for a document using null data value or null model id.\n+     * Verifies custom form data for a JPG content type with labeled data\n      */\n     @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n     @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n-    public void recognizeCustomFormLabeledDataWithNullValues(HttpClient httpClient,\n+    public void recognizeCustomFormLabeledDataWithJpgContentType(HttpClient httpClient,\n         FormRecognizerServiceVersion serviceVersion) {\n         client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n-        customFormDataRunner(data -> beginTrainingLabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n-            SyncPoller<OperationResult, CustomFormModel> syncPoller =\n+        customFormJpgDataRunner((data, dataLength) ->\n+            beginTrainingLabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n+                SyncPoller<OperationResult, CustomFormModel> trainingPoller =\n+                    getFormTrainingAsyncClient(httpClient, serviceVersion).beginTraining(trainingFilesUrl,\n+                        useTrainingLabels).getSyncPoller();\n+                trainingPoller.waitForCompletion();\n+\n+                SyncPoller<OperationResult, List<RecognizedForm>> syncPoller = client.beginRecognizeCustomForms(\n+                    new RecognizeCustomFormsOptions(toFluxByteBuffer(data), dataLength,\n+                        trainingPoller.getFinalResult().getModelId()).setFormContentType(FormContentType.IMAGE_JPEG)\n+                        .setIncludeTextContent(false)).getSyncPoller();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1732307526903c46516af3347cf395cc5ed67db8"}, "originalPosition": 380}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4Nzk1Mw==", "bodyText": "@maririos @kristapratico Wanted to confirm the exception we are throwing when an empty model Id is passed in respective languages", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#discussion_r445987953", "createdAt": "2020-06-26T06:16:14Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientTest.java", "diffHunk": "@@ -241,73 +368,189 @@ public void recognizeContentInvalidSourceUrl(HttpClient httpClient, FormRecogniz\n             () -> client.beginRecognizeContentFromUrl(invalidSourceUrl).getSyncPoller()));\n     }\n \n-    /**\n-     * Verifies that an exception is thrown for invalid status model Id.\n-     */\n     @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n     @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n-    public void recognizeCustomFormInvalidSourceUrl(HttpClient httpClient,\n-        FormRecognizerServiceVersion serviceVersion) {\n+    public void recognizeContentFromUrlMultiPage(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n         client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n-        beginTrainingLabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n-            SyncPoller<OperationResult, CustomFormModel> syncPoller =\n-                getFormTrainingAsyncClient(httpClient, serviceVersion).beginTraining(trainingFilesUrl,\n-                    useTrainingLabels).getSyncPoller();\n+        multipageFromUrlRunner((fileUrl) -> {\n+            SyncPoller<OperationResult, List<FormPage>> syncPoller =\n+                client.beginRecognizeContentFromUrl(fileUrl).getSyncPoller();\n             syncPoller.waitForCompletion();\n-            CustomFormModel createdModel = syncPoller.getFinalResult();\n-            StepVerifier.create(client.beginRecognizeCustomFormsFromUrl(INVALID_URL, createdModel.getModelId()))\n-                .verifyErrorSatisfies(throwable -> assertEquals(throwable.getMessage(), INVALID_SOURCE_URL_ERROR));\n+            validateContentResultData(syncPoller.getFinalResult(), false);\n         });\n     }\n \n+    // Custom form recognition\n+\n+    // Custom form - non-URL - labeled data\n+\n     /**\n      * Verifies custom form data for a document using source as input stream data and valid labeled model Id.\n      */\n     @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n     @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n     public void recognizeCustomFormLabeledData(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n         client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n-        customFormDataRunner(data -> beginTrainingLabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n+        customFormDataRunner((data, dataLength) -> beginTrainingLabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n             SyncPoller<OperationResult, CustomFormModel> trainingPoller =\n                 getFormTrainingAsyncClient(httpClient, serviceVersion).beginTraining(trainingFilesUrl,\n                     useTrainingLabels).getSyncPoller();\n             trainingPoller.waitForCompletion();\n \n             SyncPoller<OperationResult, List<RecognizedForm>> syncPoller =\n                 client.beginRecognizeCustomForms(new RecognizeCustomFormsOptions(toFluxByteBuffer(data),\n-                    CUSTOM_FORM_FILE_LENGTH, trainingPoller.getFinalResult().getModelId())\n+                    dataLength, trainingPoller.getFinalResult().getModelId())\n                     .setFormContentType(FormContentType.APPLICATION_PDF).setIncludeTextContent(true)).getSyncPoller();\n             syncPoller.waitForCompletion();\n             validateRecognizedResult(syncPoller.getFinalResult(), true, true);\n         }));\n     }\n \n     /**\n-     * Verifies an exception thrown for a document using null data value or null model id.\n+     * Verifies custom form data for a JPG content type with labeled data\n      */\n     @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n     @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n-    public void recognizeCustomFormLabeledDataWithNullValues(HttpClient httpClient,\n+    public void recognizeCustomFormLabeledDataWithJpgContentType(HttpClient httpClient,\n         FormRecognizerServiceVersion serviceVersion) {\n         client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n-        customFormDataRunner(data -> beginTrainingLabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n-            SyncPoller<OperationResult, CustomFormModel> syncPoller =\n+        customFormJpgDataRunner((data, dataLength) ->\n+            beginTrainingLabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n+                SyncPoller<OperationResult, CustomFormModel> trainingPoller =\n+                    getFormTrainingAsyncClient(httpClient, serviceVersion).beginTraining(trainingFilesUrl,\n+                        useTrainingLabels).getSyncPoller();\n+                trainingPoller.waitForCompletion();\n+\n+                SyncPoller<OperationResult, List<RecognizedForm>> syncPoller = client.beginRecognizeCustomForms(\n+                    new RecognizeCustomFormsOptions(toFluxByteBuffer(data), dataLength,\n+                        trainingPoller.getFinalResult().getModelId()).setFormContentType(FormContentType.IMAGE_JPEG)\n+                        .setIncludeTextContent(false)).getSyncPoller();\n+                syncPoller.waitForCompletion();\n+                validateRecognizedResult(syncPoller.getFinalResult(), false, true);\n+            }));\n+    }\n+\n+    /**\n+     * Verifies custom form data for a blank PDF content type with labeled data\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void recognizeCustomFormLabeledDataWithBlankPdfContentType(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        blankPdfDataRunner((data, dataLength) -> beginTrainingLabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n+            SyncPoller<OperationResult, CustomFormModel> trainingPoller =\n                 getFormTrainingAsyncClient(httpClient, serviceVersion).beginTraining(trainingFilesUrl,\n                     useTrainingLabels).getSyncPoller();\n+            trainingPoller.waitForCompletion();\n+\n+            SyncPoller<OperationResult, List<RecognizedForm>> syncPoller = client.beginRecognizeCustomForms(\n+                new RecognizeCustomFormsOptions(toFluxByteBuffer(data), dataLength,\n+                    trainingPoller.getFinalResult().getModelId()).setFormContentType(FormContentType.APPLICATION_PDF)\n+                    .setIncludeTextContent(false)).getSyncPoller();\n             syncPoller.waitForCompletion();\n+            validateRecognizedResult(syncPoller.getFinalResult(), false, true);\n+        }));\n+    }\n \n-            assertThrows(RuntimeException.class, () -> client.beginRecognizeCustomForms(\n-                new RecognizeCustomFormsOptions((InputStream) null, CUSTOM_FORM_FILE_LENGTH,\n-                    syncPoller.getFinalResult().getModelId()).setFormContentType(FormContentType.APPLICATION_PDF)\n-                    .setIncludeTextContent(true)).getSyncPoller());\n+    /**\n+     * Verifies custom form data for a document using source as input stream data and valid labeled model Id,\n+     * excluding text content.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void recognizeCustomFormLabeledDataExcludeTextContent(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        customFormDataRunner((data, dataLength) -> beginTrainingLabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n+            SyncPoller<OperationResult, CustomFormModel> trainingPoller =\n+                getFormTrainingAsyncClient(httpClient, serviceVersion).beginTraining(trainingFilesUrl,\n+                    useTrainingLabels).getSyncPoller();\n+            trainingPoller.waitForCompletion();\n+\n+            SyncPoller<OperationResult, List<RecognizedForm>> syncPoller = client.beginRecognizeCustomForms(\n+                new RecognizeCustomFormsOptions(toFluxByteBuffer(data), dataLength,\n+                    trainingPoller.getFinalResult().getModelId()).setFormContentType(FormContentType.APPLICATION_PDF)\n+                    .setIncludeTextContent(false)).getSyncPoller();\n+            syncPoller.waitForCompletion();\n+            validateRecognizedResult(syncPoller.getFinalResult(), false, true);\n+        }));\n+    }\n+\n+    /**\n+     * Verifies an exception thrown for a document using null data value.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void recognizeCustomFormLabeledDataWithNullFormData(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        customFormDataRunner((data, dataLength) -> beginTrainingLabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n+            SyncPoller<OperationResult, CustomFormModel> syncPoller =\n+                getFormTrainingAsyncClient(httpClient, serviceVersion).beginTraining(trainingFilesUrl,\n+                    useTrainingLabels).getSyncPoller();\n+            syncPoller.waitForCompletion();\n \n             assertThrows(RuntimeException.class, () -> client.beginRecognizeCustomForms(\n-                new RecognizeCustomFormsOptions(toFluxByteBuffer(data), CUSTOM_FORM_FILE_LENGTH,\n-                    null).setFormContentType(FormContentType.APPLICATION_PDF)\n-                    .setIncludeTextContent(true)).getSyncPoller());\n+                new RecognizeCustomFormsOptions((InputStream) null, dataLength,\n+                syncPoller.getFinalResult().getModelId()).setFormContentType(FormContentType.APPLICATION_PDF)\n+                .setIncludeTextContent(true)).getSyncPoller());\n         }));\n     }\n \n+    /**\n+     * Verifies an exception thrown for a document using null model id.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void recognizeCustomFormLabeledDataWithNullModelId(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        customFormDataRunner((data, dataLength) -> {\n+            Exception ex = assertThrows(RuntimeException.class, () -> client.beginRecognizeCustomForms(\n+                new RecognizeCustomFormsOptions(toFluxByteBuffer(data), dataLength,\n+                    null).setFormContentType(FormContentType.APPLICATION_PDF).setIncludeTextContent(true))\n+                .getSyncPoller());\n+            assertEquals(EXPECTED_MODEL_ID_IS_REQUIRED_EXCEPTION_MESSAGE, ex.getMessage());\n+        });\n+    }\n+\n+    /**\n+     * Verifies an exception thrown for an empty model id when recognizing custom form from URL.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void recognizeCustomFormLabeledDataWithEmptyModelId(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        customFormDataRunner((data, dataLength) -> {\n+            Exception ex = assertThrows(RuntimeException.class, () -> client.beginRecognizeCustomForms(\n+                new RecognizeCustomFormsOptions(toFluxByteBuffer(data), dataLength, \"\")\n+                    .setFormContentType(FormContentType.APPLICATION_PDF).setIncludeTextContent(true)).getSyncPoller());\n+            assertEquals(EXPECTED_INVALID_UUID_EXCEPTION_MESSAGE, ex.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1732307526903c46516af3347cf395cc5ed67db8"}, "originalPosition": 490}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4ODExNQ==", "bodyText": "This should be default if you don't set?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#discussion_r445988115", "createdAt": "2020-06-26T06:16:50Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientTest.java", "diffHunk": "@@ -317,145 +560,346 @@ public void recognizeCustomFormLabeledDataWithNullValues(HttpClient httpClient,\n     public void recognizeCustomFormLabeledDataWithContentTypeAutoDetection(HttpClient httpClient,\n         FormRecognizerServiceVersion serviceVersion) {\n         client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n-        customFormDataRunner(data -> beginTrainingLabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n+        customFormDataRunner((data, dataLength) -> beginTrainingLabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n             SyncPoller<OperationResult, CustomFormModel> trainingPoller =\n                 getFormTrainingAsyncClient(httpClient, serviceVersion).beginTraining(trainingFilesUrl,\n                     useTrainingLabels).getSyncPoller();\n             trainingPoller.waitForCompletion();\n \n-            SyncPoller<OperationResult, List<RecognizedForm>> syncPoller =\n-                client.beginRecognizeCustomForms(new RecognizeCustomFormsOptions(getReplayableBufferData(FORM_LOCAL_URL),\n-                    CUSTOM_FORM_FILE_LENGTH, trainingPoller.getFinalResult().getModelId()).setFormContentType(null)\n-                    .setIncludeTextContent(true)).getSyncPoller();\n+            SyncPoller<OperationResult, List<RecognizedForm>> syncPoller = client.beginRecognizeCustomForms(\n+                new RecognizeCustomFormsOptions(getReplayableBufferData(FORM_LOCAL_URL), dataLength,\n+                    trainingPoller.getFinalResult().getModelId())\n+                    .setFormContentType(null).setIncludeTextContent(true)).getSyncPoller();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1732307526903c46516af3347cf395cc5ed67db8"}, "originalPosition": 535}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4ODUyNg==", "bodyText": "same here, don't need to set it to false. Would be false by default.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#discussion_r445988526", "createdAt": "2020-06-26T06:18:09Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientTest.java", "diffHunk": "@@ -317,145 +560,346 @@ public void recognizeCustomFormLabeledDataWithNullValues(HttpClient httpClient,\n     public void recognizeCustomFormLabeledDataWithContentTypeAutoDetection(HttpClient httpClient,\n         FormRecognizerServiceVersion serviceVersion) {\n         client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n-        customFormDataRunner(data -> beginTrainingLabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n+        customFormDataRunner((data, dataLength) -> beginTrainingLabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n             SyncPoller<OperationResult, CustomFormModel> trainingPoller =\n                 getFormTrainingAsyncClient(httpClient, serviceVersion).beginTraining(trainingFilesUrl,\n                     useTrainingLabels).getSyncPoller();\n             trainingPoller.waitForCompletion();\n \n-            SyncPoller<OperationResult, List<RecognizedForm>> syncPoller =\n-                client.beginRecognizeCustomForms(new RecognizeCustomFormsOptions(getReplayableBufferData(FORM_LOCAL_URL),\n-                    CUSTOM_FORM_FILE_LENGTH, trainingPoller.getFinalResult().getModelId()).setFormContentType(null)\n-                    .setIncludeTextContent(true)).getSyncPoller();\n+            SyncPoller<OperationResult, List<RecognizedForm>> syncPoller = client.beginRecognizeCustomForms(\n+                new RecognizeCustomFormsOptions(getReplayableBufferData(FORM_LOCAL_URL), dataLength,\n+                    trainingPoller.getFinalResult().getModelId())\n+                    .setFormContentType(null).setIncludeTextContent(true)).getSyncPoller();\n             syncPoller.waitForCompletion();\n             validateRecognizedResult(syncPoller.getFinalResult(), true, true);\n         }));\n     }\n \n+    /**\n+     * Verify custom form for a data stream of multi-page labeled data\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void recognizeCustomFormMultiPageLabeled(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        multipageFromDataRunner((data, dataLength) -> beginTrainingMultipageRunner((trainingFilesUrl) -> {\n+            SyncPoller<OperationResult, CustomFormModel> trainingPoller =\n+                getFormTrainingAsyncClient(httpClient, serviceVersion)\n+                    .beginTraining(trainingFilesUrl, true).getSyncPoller();\n+            trainingPoller.waitForCompletion();\n+\n+            SyncPoller<OperationResult, List<RecognizedForm>> syncPoller = client.beginRecognizeCustomForms(\n+                new RecognizeCustomFormsOptions(toFluxByteBuffer(data), dataLength,\n+                    trainingPoller.getFinalResult().getModelId()).setFormContentType(FormContentType.APPLICATION_PDF))\n+                .getSyncPoller();\n+            syncPoller.waitForCompletion();\n+            validateMultiPageDataLabeled(syncPoller.getFinalResult());\n+        }));\n+    }\n+\n+    // Custom form - non-URL - unlabeled data\n+\n     /**\n      * Verifies custom form data for a document using source as input stream data and valid labeled model Id.\n      */\n     @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n     @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n     public void recognizeCustomFormUnlabeledData(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n         client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n-        customFormDataRunner(data -> beginTrainingUnlabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n+        customFormDataRunner((data, dataLength) ->\n+            beginTrainingUnlabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n+                SyncPoller<OperationResult, CustomFormModel> trainingPoller =\n+                    getFormTrainingAsyncClient(httpClient, serviceVersion).beginTraining(trainingFilesUrl,\n+                        useTrainingLabels).getSyncPoller();\n+                trainingPoller.waitForCompletion();\n+\n+                SyncPoller<OperationResult, List<RecognizedForm>> syncPoller = client.beginRecognizeCustomForms(\n+                    new RecognizeCustomFormsOptions(toFluxByteBuffer(data), dataLength,\n+                        trainingPoller.getFinalResult().getModelId())\n+                        .setFormContentType(FormContentType.APPLICATION_PDF)\n+                        .setIncludeTextContent(false)).getSyncPoller();\n+                syncPoller.waitForCompletion();\n+                validateRecognizedResult(syncPoller.getFinalResult(), false, false);\n+            }));\n+    }\n+\n+    /**\n+     * Verifies custom form data for a document using source as input stream data and valid include text content\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void recognizeCustomFormUnlabeledDataIncludeTextContent(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        customFormDataRunner((data, dataLength) ->\n+            beginTrainingUnlabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n+                SyncPoller<OperationResult, CustomFormModel> trainingPoller =\n+                    getFormTrainingAsyncClient(httpClient, serviceVersion).beginTraining(trainingFilesUrl,\n+                        useTrainingLabels).getSyncPoller();\n+                trainingPoller.waitForCompletion();\n+\n+                SyncPoller<OperationResult, List<RecognizedForm>> syncPoller = client.beginRecognizeCustomForms(\n+                    new RecognizeCustomFormsOptions(toFluxByteBuffer(data), dataLength,\n+                        trainingPoller.getFinalResult().getModelId())\n+                        .setFormContentType(FormContentType.APPLICATION_PDF)\n+                        .setIncludeTextContent(true)).getSyncPoller();\n+                syncPoller.waitForCompletion();\n+                validateRecognizedResult(syncPoller.getFinalResult(), true, false);\n+            }));\n+    }\n+\n+    /**\n+     * Verify custom form for a data stream of multi-page unlabeled data\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void recognizeCustomFormMultiPageUnlabeled(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        multipageFromDataRunner((data, dataLength) -> beginTrainingMultipageRunner((trainingFilesUrl) -> {\n+            SyncPoller<OperationResult, CustomFormModel> trainingPoller =\n+                getFormTrainingAsyncClient(httpClient, serviceVersion)\n+                    .beginTraining(trainingFilesUrl, false).getSyncPoller();\n+            trainingPoller.waitForCompletion();\n+\n+            SyncPoller<OperationResult, List<RecognizedForm>> syncPoller = client.beginRecognizeCustomForms(\n+                toFluxByteBuffer(data), dataLength, trainingPoller.getFinalResult().getModelId(),\n+                FormContentType.APPLICATION_PDF).getSyncPoller();\n+            syncPoller.waitForCompletion();\n+            validateMultiPageDataUnlabeled(syncPoller.getFinalResult());\n+        }));\n+    }\n+\n+    /**\n+     * Verifies custom form data for a JPG content type with unlabeled data\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void recognizeCustomFormUnlabeledDataWithJpgContentType(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        customFormJpgDataRunner((data, dataLength) ->\n+            beginTrainingUnlabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n+                SyncPoller<OperationResult, CustomFormModel> trainingPoller =\n+                    getFormTrainingAsyncClient(httpClient, serviceVersion).beginTraining(trainingFilesUrl,\n+                        useTrainingLabels).getSyncPoller();\n+                trainingPoller.waitForCompletion();\n+\n+                SyncPoller<OperationResult, List<RecognizedForm>> syncPoller = client.beginRecognizeCustomForms(\n+                    new RecognizeCustomFormsOptions(toFluxByteBuffer(data), dataLength,\n+                        trainingPoller.getFinalResult().getModelId()).setFormContentType(FormContentType.IMAGE_JPEG)\n+                        .setIncludeTextContent(false)).getSyncPoller();\n+                syncPoller.waitForCompletion();\n+                validateRecognizedResult(syncPoller.getFinalResult(), false, false);\n+            }));\n+    }\n+\n+    /**\n+     * Verifies custom form data for a blank PDF content type with unlabeled data\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void recognizeCustomFormUnlabeledDataWithBlankPdfContentType(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        blankPdfDataRunner((data, dataLength) -> beginTrainingUnlabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n             SyncPoller<OperationResult, CustomFormModel> trainingPoller =\n                 getFormTrainingAsyncClient(httpClient, serviceVersion).beginTraining(trainingFilesUrl,\n                     useTrainingLabels).getSyncPoller();\n             trainingPoller.waitForCompletion();\n \n-            SyncPoller<OperationResult, List<RecognizedForm>> syncPoller =\n-                client.beginRecognizeCustomForms(new RecognizeCustomFormsOptions(toFluxByteBuffer(data), CUSTOM_FORM_FILE_LENGTH,\n+            SyncPoller<OperationResult, List<RecognizedForm>> syncPoller = client.beginRecognizeCustomForms(\n+                new RecognizeCustomFormsOptions(toFluxByteBuffer(data), dataLength,\n                     trainingPoller.getFinalResult().getModelId()).setFormContentType(FormContentType.APPLICATION_PDF)\n                     .setIncludeTextContent(false)).getSyncPoller();\n             syncPoller.waitForCompletion();\n             validateRecognizedResult(syncPoller.getFinalResult(), false, false);\n         }));\n     }\n \n+    // Custom form - URL - unlabeled data\n+\n+    /**\n+     * Verifies custom form data for an URL document data without labeled data\n+     */\n     @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n     @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n-    public void recognizeCustomFormMultiPageUnlabeled(HttpClient httpClient,\n+    public void recognizeCustomFormUrlUnlabeledData(HttpClient httpClient,\n         FormRecognizerServiceVersion serviceVersion) {\n         client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n-        multipageFromDataRunner(data -> beginTrainingMultipageRunner((trainingFilesUrl) -> {\n+\n+        urlDataRunner(fileUrl -> beginTrainingUnlabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n             SyncPoller<OperationResult, CustomFormModel> trainingPoller =\n-                getFormTrainingAsyncClient(httpClient, serviceVersion).beginTraining(trainingFilesUrl, false).getSyncPoller();\n+                getFormTrainingAsyncClient(httpClient, serviceVersion).beginTraining(trainingFilesUrl,\n+                    useTrainingLabels).getSyncPoller();\n             trainingPoller.waitForCompletion();\n \n-            SyncPoller<OperationResult, List<RecognizedForm>> syncPoller =\n-                client.beginRecognizeCustomForms(toFluxByteBuffer(data), MULTIPAGE_INVOICE_FILE_LENGTH, trainingPoller.getFinalResult().getModelId(),\n-                        FormContentType.APPLICATION_PDF).getSyncPoller();\n+            SyncPoller<OperationResult, List<RecognizedForm>> syncPoller = client.beginRecognizeCustomForms(\n+                new RecognizeCustomFormsOptions(fileUrl, trainingPoller.getFinalResult().getModelId())\n+                    .setIncludeTextContent(false)).getSyncPoller();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1732307526903c46516af3347cf395cc5ed67db8"}, "originalPosition": 712}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4OTUyMg==", "bodyText": "Can you uncomment this, I think I missed updating this when I updated the FormRcognizerAsyncClientTests file?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#discussion_r445989522", "createdAt": "2020-06-26T06:21:33Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerClientTest.java", "diffHunk": "@@ -51,109 +54,205 @@ private FormTrainingClient getFormTrainingClient(HttpClient httpClient,\n         return getFormTrainingClientBuilder(httpClient, serviceVersion).buildClient();\n     }\n \n+    // Receipt recognition\n+\n+    // Receipt - non-URL\n+\n     /**\n-     * Verifies receipt data for a document using source as file url.\n+     * Verifies receipt data for a document using source as input stream data.\n      */\n     @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n     @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n-    public void recognizeReceiptSourceUrl(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n+    public void recognizeReceiptData(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n         client = getFormRecognizerClient(httpClient, serviceVersion);\n-        receiptSourceUrlRunner((sourceUrl) -> {\n+        receiptDataRunner((data, dataLength) -> {\n             SyncPoller<OperationResult, List<RecognizedReceipt>> syncPoller =\n-                client.beginRecognizeReceiptsFromUrl(sourceUrl);\n+                client.beginRecognizeReceipts(data, dataLength, FormContentType.IMAGE_JPEG);\n             syncPoller.waitForCompletion();\n             validateReceiptResultData(syncPoller.getFinalResult(), false);\n         });\n     }\n \n     /**\n-     * Verifies receipt data for a document using source as file url and include content when includeTextContent is\n-     * true.\n+     * Verifies an exception thrown for a document using null data value.\n      */\n     @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n     @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n-    public void recognizeReceiptSourceUrlTextDetails(HttpClient httpClient,\n+    public void recognizeReceiptDataNullData(HttpClient httpClient,\n         FormRecognizerServiceVersion serviceVersion) {\n         client = getFormRecognizerClient(httpClient, serviceVersion);\n-        receiptSourceUrlRunnerTextDetails((sourceUrl, includeTextContent) -> {\n+        assertThrows(RuntimeException.class, () ->\n+            client.beginRecognizeReceipts(null, RECEIPT_FILE_LENGTH, FormContentType.IMAGE_JPEG));\n+    }\n+\n+    /**\n+     * Verifies content type will be auto detected when using receipt API with input stream data overload.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void recognizeReceiptDataWithContentTypeAutoDetection(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerClient(httpClient, serviceVersion);\n+        SyncPoller<OperationResult, List<RecognizedReceipt>> syncPoller =\n+            client.beginRecognizeReceipts(getContentDetectionFileData(RECEIPT_LOCAL_URL), RECEIPT_FILE_LENGTH,\n+                null);\n+        syncPoller.waitForCompletion();\n+        validateReceiptResultData(syncPoller.getFinalResult(), false);\n+    }\n+\n+    /**\n+     * Verifies receipt data for a document using source as as input stream data and text content when\n+     * includeTextDetails is true.\n+     */\n+    // Turn off the tests as there is service regression on the media type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1732307526903c46516af3347cf395cc5ed67db8"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5MTU2Nw==", "bodyText": "Names seems to be misleading. Is this a urlRunner or a dataRunner?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#discussion_r445991567", "createdAt": "2020-06-26T06:27:54Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerClientTestBase.java", "diffHunk": "@@ -481,11 +623,35 @@ void contentFromUrlRunner(Consumer<String> testRunner) {\n         testRunner.accept(getStorageTestingFileUrl(FORM_JPG));\n     }\n \n-    void customFormDataRunner(Consumer<InputStream> testRunner) {\n+    void pdfContentFromUrlRunner(Consumer<String> testRunner) {\n+        testRunner.accept(getStorageTestingFileUrl(INVOICE_1_PDF));\n+    }\n+\n+    void customFormDataRunner(BiConsumer<InputStream, Long> testRunner) {\n+        if (interceptorManager.isPlaybackMode()) {\n+            testRunner.accept(new ByteArrayInputStream(\"testData.png\".getBytes()), CUSTOM_FORM_FILE_LENGTH);\n+        } else {\n+            testRunner.accept(getFileData(getStorageTestingFileUrl(INVOICE_PDF)), CUSTOM_FORM_FILE_LENGTH);\n+        }\n+    }\n+\n+    void customFormJpgDataRunner(BiConsumer<InputStream, Long> testRunner) {\n+        if (interceptorManager.isPlaybackMode()) {\n+            testRunner.accept(new ByteArrayInputStream(\"testData.png\".getBytes()), FORM_1_JPG_FILE_LENGTH);\n+        } else {\n+            testRunner.accept(getFileData(getStorageTestingFileUrl(FORM_JPG)), FORM_1_JPG_FILE_LENGTH);\n+        }\n+    }\n+\n+    void urlDataRunner(Consumer<String> testRunner, String formData) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1732307526903c46516af3347cf395cc5ed67db8"}, "originalPosition": 340}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5MTk1Mg==", "bodyText": "validateBlankPdfResultData() is this method is only specific to Receipt result lets update it to validateBlankReceiptResult() ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#discussion_r445991952", "createdAt": "2020-06-26T06:29:03Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientTest.java", "diffHunk": "@@ -54,6 +61,25 @@ private FormTrainingAsyncClient getFormTrainingAsyncClient(HttpClient httpClient\n         return getFormTrainingClientBuilder(httpClient, serviceVersion).buildAsyncClient();\n     }\n \n+    /**\n+     * Verifies the form recognizer async client is valid.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    void getFormRecognizerClientAndValidate(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n+        FormRecognizerAsyncClient formRecognizerClient = getFormTrainingAsyncClient(httpClient, serviceVersion)\n+            .getFormRecognizerAsyncClient();\n+        blankPdfDataRunner(data -> {\n+            SyncPoller<OperationResult, List<RecognizedReceipt>> syncPoller =\n+                formRecognizerClient.beginRecognizeReceipts(\n+                    new RecognizeOptions(toFluxByteBuffer(data), BLANK_FORM_FILE_LENGTH)\n+                        .setFormContentType(FormContentType.APPLICATION_PDF).setIncludeTextContent(false))\n+                    .getSyncPoller();\n+            syncPoller.waitForCompletion();\n+            validateBlankPdfResultData(syncPoller.getFinalResult());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1732307526903c46516af3347cf395cc5ed67db8"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5MjM0MQ==", "bodyText": "Is this just a rename change?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#discussion_r445992341", "createdAt": "2020-06-26T06:30:18Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientTest.java", "diffHunk": "@@ -357,4 +353,103 @@ public void beginTrainingInvalidModelStatus(HttpClient httpClient, FormRecognize\n             assertTrue(formRecognizerException.getMessage().contains(EXPECTED_INVALID_STATUS_EXCEPTION_MESSAGE));\n         });\n     }\n+\n+    /**\n+     * Verifies the result of the training operation for a valid labeled model Id and JPG training set Url.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void beginTrainingWithTrainingLabelsForJPGTrainingSet(HttpClient httpClient,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1732307526903c46516af3347cf395cc5ed67db8"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5Mjc4Nw==", "bodyText": ".setPrefix(SUBFOLDER) -> .setPrefix(PREFIX_SUBFOLDER) ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#discussion_r445992787", "createdAt": "2020-06-26T06:31:21Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientTest.java", "diffHunk": "@@ -357,4 +353,103 @@ public void beginTrainingInvalidModelStatus(HttpClient httpClient, FormRecognize\n             assertTrue(formRecognizerException.getMessage().contains(EXPECTED_INVALID_STATUS_EXCEPTION_MESSAGE));\n         });\n     }\n+\n+    /**\n+     * Verifies the result of the training operation for a valid labeled model Id and JPG training set Url.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void beginTrainingWithTrainingLabelsForJPGTrainingSet(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormTrainingAsyncClient(httpClient, serviceVersion);\n+        beginTrainingLabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n+            SyncPoller<OperationResult, CustomFormModel> trainingPoller =\n+                client.beginTraining(trainingFilesUrl, useTrainingLabels).getSyncPoller();\n+            trainingPoller.waitForCompletion();\n+            validateCustomModelData(trainingPoller.getFinalResult(), true);\n+        });\n+    }\n+\n+    /**\n+     * Verifies the result of the training operation for a valid unlabeled model Id and JPG training set Url.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void beginTrainingWithoutTrainingLabelsForJPGTrainingSet(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormTrainingAsyncClient(httpClient, serviceVersion);\n+        beginTrainingUnlabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n+            SyncPoller<OperationResult, CustomFormModel> trainingPoller =\n+                client.beginTraining(trainingFilesUrl, useTrainingLabels).getSyncPoller();\n+            trainingPoller.waitForCompletion();\n+            validateCustomModelData(trainingPoller.getFinalResult(), false);\n+        });\n+    }\n+\n+    /**\n+     * Verifies the result of the training operation for a valid labeled model Id and multi-page PDF training set Url.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void beginTrainingWithTrainingLabelsForMultiPagePDFTrainingSet(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormTrainingAsyncClient(httpClient, serviceVersion);\n+        beginTrainingMultipageRunner(trainingFilesUrl -> {\n+            SyncPoller<OperationResult, CustomFormModel> trainingPoller =\n+                client.beginTraining(trainingFilesUrl, true).getSyncPoller();\n+            trainingPoller.waitForCompletion();\n+            validateCustomModelData(trainingPoller.getFinalResult(), true);\n+        });\n+    }\n+\n+    /**\n+     * Verifies the result of the training operation for a valid unlabeled model Id and multi-page PDF training set Url.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void beginTrainingWithoutTrainingLabelsForMultiPagePDFTrainingSet(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormTrainingAsyncClient(httpClient, serviceVersion);\n+        beginTrainingMultipageRunner(trainingFilesUrl -> {\n+            SyncPoller<OperationResult, CustomFormModel> trainingPoller =\n+                client.beginTraining(trainingFilesUrl, false).getSyncPoller();\n+            trainingPoller.waitForCompletion();\n+            validateCustomModelData(trainingPoller.getFinalResult(), false);\n+        });\n+    }\n+\n+    /**\n+     * Verifies the result of the training operation for a valid labeled model Id and include subfolder training set\n+     * Url.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void beginTrainingWithoutTrainingLabelsIncludeSubfolder(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormTrainingAsyncClient(httpClient, serviceVersion);\n+        beginTrainingUnlabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n+            SyncPoller<OperationResult, CustomFormModel> trainingPoller = client.beginTraining(trainingFilesUrl,\n+                useTrainingLabels, new TrainingFileFilter().setIncludeSubFolders(true).setPrefix(SUBFOLDER), null).getSyncPoller();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1732307526903c46516af3347cf395cc5ed67db8"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5MzQyOA==", "bodyText": "not  sure, if the test name is clear.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#discussion_r445993428", "createdAt": "2020-06-26T06:33:26Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormTrainingClientBuilderTest.java", "diffHunk": "@@ -84,6 +89,37 @@ public void trainingClientBuilderDefaultPipeline(HttpClient httpClient, FormReco\n             assertNotNull(clientBuilder.buildClient().getFormRecognizerClient().beginRecognizeContentFromUrl(input).getFinalResult()));\n     }\n \n+    /**\n+     * Test for invalid endpoint.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void trainingClientBuilderInvalidEndpoint(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n+        clientBuilderWithDefaultPipelineRunner(httpClient, serviceVersion, clientBuilder -> (input) -> {\n+            Exception exception =  assertThrows(RuntimeException.class, () ->\n+                clientBuilder.endpoint(INVALID_ENDPOINT).buildClient().getFormRecognizerClient()\n+                    .beginRecognizeContentFromUrl(input).getFinalResult());\n+            // \"Max retries 3 times exceeded. Error Details: Connection refused: no further information:\n+            // notreal.azure.com/23.217.138.110:443\"\n+            // Recording mode has Error Details: null\n+            assertTrue(exception.getMessage().contains(\"Max retries 3 times exceeded. Error Details:\"));\n+        });\n+    }\n+\n+    /**\n+     * Test for http endpoint, which throws HTTPS requirement exception message.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void trainingClientBuilderHttpEndpoint(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1732307526903c46516af3347cf395cc5ed67db8"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5Mzc4MQ==", "bodyText": "Is there a separate test for when only the prefix is set?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#discussion_r445993781", "createdAt": "2020-06-26T06:34:31Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormTrainingClientTest.java", "diffHunk": "@@ -332,4 +326,103 @@ public void beginTrainingInvalidModelStatus(HttpClient httpClient, FormRecognize\n             assertTrue(formRecognizerException.getMessage().contains(EXPECTED_INVALID_STATUS_EXCEPTION_MESSAGE));\n         });\n     }\n+\n+    /**\n+     * Verifies the result of the training operation for a valid labeled model Id and JPG training set Url.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void beginTrainingWithTrainingLabelsForJPGTrainingSet(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormTrainingClient(httpClient, serviceVersion);\n+        beginTrainingLabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n+            SyncPoller<OperationResult, CustomFormModel> trainingPoller =\n+                client.beginTraining(trainingFilesUrl, useTrainingLabels);\n+            trainingPoller.waitForCompletion();\n+            validateCustomModelData(trainingPoller.getFinalResult(), true);\n+        });\n+    }\n+\n+    /**\n+     * Verifies the result of the training operation for a valid unlabeled model Id and JPG training set Url.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void beginTrainingWithoutTrainingLabelsForJPGTrainingSet(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormTrainingClient(httpClient, serviceVersion);\n+        beginTrainingUnlabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n+            SyncPoller<OperationResult, CustomFormModel> trainingPoller =\n+                client.beginTraining(trainingFilesUrl, useTrainingLabels);\n+            trainingPoller.waitForCompletion();\n+            validateCustomModelData(trainingPoller.getFinalResult(), false);\n+        });\n+    }\n+\n+    /**\n+     * Verifies the result of the training operation for a valid labeled model Id and multi-page PDF training set Url.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void beginTrainingWithTrainingLabelsForMultiPagePDFTrainingSet(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormTrainingClient(httpClient, serviceVersion);\n+        beginTrainingMultipageRunner(trainingFilesUrl -> {\n+            SyncPoller<OperationResult, CustomFormModel> trainingPoller =\n+                client.beginTraining(trainingFilesUrl, true);\n+            trainingPoller.waitForCompletion();\n+            validateCustomModelData(trainingPoller.getFinalResult(), true);\n+        });\n+    }\n+\n+    /**\n+     * Verifies the result of the training operation for a valid unlabeled model Id and multi-page PDF training set Url.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void beginTrainingWithoutTrainingLabelsForMultiPagePDFTrainingSet(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormTrainingClient(httpClient, serviceVersion);\n+        beginTrainingMultipageRunner(trainingFilesUrl -> {\n+            SyncPoller<OperationResult, CustomFormModel> trainingPoller =\n+                client.beginTraining(trainingFilesUrl, false);\n+            trainingPoller.waitForCompletion();\n+            validateCustomModelData(trainingPoller.getFinalResult(), false);\n+        });\n+    }\n+\n+    /**\n+     * Verifies the result of the training operation for a valid labeled model Id and include subfolder training set\n+     * Url.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void beginTrainingWithoutTrainingLabelsIncludeSubfolder(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormTrainingClient(httpClient, serviceVersion);\n+        beginTrainingUnlabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n+            SyncPoller<OperationResult, CustomFormModel> trainingPoller = client.beginTraining(trainingFilesUrl,\n+                useTrainingLabels, new TrainingFileFilter().setIncludeSubFolders(true).setPrefix(SUBFOLDER), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1732307526903c46516af3347cf395cc5ed67db8"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5NDU2Nw==", "bodyText": "Is this test for an invalid Http pipeline?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#discussion_r445994567", "createdAt": "2020-06-26T06:36:38Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/resources/session-records/clientBuilderWithHttpEndpoint.json", "diffHunk": "@@ -0,0 +1,4 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1732307526903c46516af3347cf395cc5ed67db8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5NTA1NQ==", "bodyText": "Is this test removed?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#discussion_r445995055", "createdAt": "2020-06-26T06:38:03Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/resources/session-records/recognizeBadContentTypeArgument.json", "diffHunk": "@@ -0,0 +1,4 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1732307526903c46516af3347cf395cc5ed67db8"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MDQ4MDQy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#pullrequestreview-438048042", "createdAt": "2020-06-26T06:40:53Z", "commit": {"oid": "1732307526903c46516af3347cf395cc5ed67db8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNjo0MDo1M1rOGpVb_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNjo0MDo1M1rOGpVb_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5NjAyOA==", "bodyText": "Are you covering this as part of a different PR?\nUpdate to use default  5 seconds polling only in Live mode?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#discussion_r445996028", "createdAt": "2020-06-26T06:40:53Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerClientBuilderTest.java", "diffHunk": "@@ -81,6 +85,33 @@ public void clientBuilderWithDefaultPipeline(HttpClient httpClient, FormRecogniz\n             assertNotNull(clientBuilder.buildClient().beginRecognizeContentFromUrl(input).getFinalResult()));\n     }\n \n+    /**\n+     * Test for invalid endpoint, which throws connection refused exception message.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void clientBuilderWithInvalidEndpoint(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1732307526903c46516af3347cf395cc5ed67db8"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6b096499e8fa19c0fa5eeb9d7d0517475b4a83e", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f6b096499e8fa19c0fa5eeb9d7d0517475b4a83e", "committedDate": "2020-06-29T00:56:36Z", "message": "address feedbacks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "921b3047891e1ac566ee6c372e04bfb324916f9f", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/921b3047891e1ac566ee6c372e04bfb324916f9f", "committedDate": "2020-06-29T18:17:39Z", "message": "resolve conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd6a3fb40d3c3f1d609cd3d4b5693ebdbff77af0", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cd6a3fb40d3c3f1d609cd3d4b5693ebdbff77af0", "committedDate": "2020-06-30T05:23:18Z", "message": "speed up playback mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56aac2b602d15e4a4cd8a52b4e833c19276f1c66", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/56aac2b602d15e4a4cd8a52b4e833c19276f1c66", "committedDate": "2020-07-01T04:26:25Z", "message": "resolve conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "371fcb8f4632ac21870495a6204e29aefe6d8e09", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/371fcb8f4632ac21870495a6204e29aefe6d8e09", "committedDate": "2020-07-01T05:46:41Z", "message": "test and sample spotbugs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMTE2ODI1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#pullrequestreview-441116825", "createdAt": "2020-07-01T18:48:45Z", "commit": {"oid": "371fcb8f4632ac21870495a6204e29aefe6d8e09"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODo0ODo0NVrOGrxiFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODo0ODo0NVrOGrxiFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1MzQ5NA==", "bodyText": "Is the comment still true??", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12400#discussion_r448553494", "createdAt": "2020-07-01T18:48:45Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormTrainingClientBuilderTest.java", "diffHunk": "@@ -84,6 +86,23 @@ public void trainingClientBuilderDefaultPipeline(HttpClient httpClient, FormReco\n             assertNotNull(clientBuilder.buildClient().getFormRecognizerClient().beginRecognizeContentFromUrl(input).getFinalResult()));\n     }\n \n+    /**\n+     * Test for invalid endpoint.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void trainingClientBuilderInvalidEndpoint(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n+        clientBuilderWithDefaultPipelineRunner(httpClient, serviceVersion, clientBuilder -> (input) -> {\n+            Exception exception =  assertThrows(RuntimeException.class, () ->\n+                clientBuilder.endpoint(INVALID_ENDPOINT).buildClient().getFormRecognizerClient()\n+                    .beginRecognizeContentFromUrl(input).getFinalResult());\n+            // RECORD mode has \"Max retries 3 times exceeded. Error Details: Connection refused: no further information:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "371fcb8f4632ac21870495a6204e29aefe6d8e09"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3009, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}