{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MzUwODI3", "number": 17842, "title": "Change scheduler for reactor executor", "bodyText": "This PR is to change the scheduler on which the reactor executor runs. Previously, it was using Scheduler.single() which uses a single thread for the entire process. As more connections are created, all the connections will rely on this single thread to perform service operations which limits the scalability of the number of connections that can be created within a process. The change in this PR is to have a dedicated thread, Schedulers.newSingle(), for each connection which will still keep the underlying proton-j reactor thread-safe while allowing the number of connections to scale.\nFixes #17843\nFixes #17844", "createdAt": "2020-11-27T01:38:34Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17842", "merged": true, "mergeCommit": {"oid": "a816f8519815c92ecd2735d6a4942d0087149f63"}, "closed": true, "closedAt": "2020-12-09T18:19:10Z", "author": {"login": "srnagar"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgdTJFAH2gAyNTI4MzUwODI3OjMxMDczNTNjN2NhYmYyODc5ZGYyMzFhMWY5MGU2NmExYTgzYTNmNzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdki4_mAFqTU0ODQ2NjUxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3107353c7cabf2879df231a1f90e66a1a83a3f72", "author": {"user": {"login": "srnagar", "name": "Srikanta"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3107353c7cabf2879df231a1f90e66a1a83a3f72", "committedDate": "2020-11-27T01:30:58Z", "message": "Change scheduler for reactor executor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NjY1MDg3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17842#pullrequestreview-539665087", "createdAt": "2020-11-27T01:46:22Z", "commit": {"oid": "3107353c7cabf2879df231a1f90e66a1a83a3f72"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwMTo0NjoyMlrOH6tVhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwMTo0NjoyMlrOH6tVhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTMyMjI0NA==", "bodyText": "@conniey Why do we try to acquire the semaphore when closing? We are not doing anything after acquiring the semaphore.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17842#discussion_r531322244", "createdAt": "2020-11-27T01:46:22Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ReactorExecutor.java", "diffHunk": "@@ -175,14 +175,6 @@ private void scheduleCompletePendingTasks() {\n     public void close() {\n         if (!isDisposed.getAndSet(true)) {\n             close(true, \"ReactorExecutor.close() was called.\");\n-\n-            try {\n-                if (!disposeSemaphore.tryAcquire(timeout.toMillis(), TimeUnit.MILLISECONDS)) {\n-                    logger.info(\"Unable to acquire dispose reactor semaphore within timeout.\");\n-                }\n-            } catch (InterruptedException e) {\n-                logger.warning(\"Could not acquire semaphore to finish close operation.\", e);\n-            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3107353c7cabf2879df231a1f90e66a1a83a3f72"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMTE2NzQx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17842#pullrequestreview-540116741", "createdAt": "2020-11-27T17:34:39Z", "commit": {"oid": "3107353c7cabf2879df231a1f90e66a1a83a3f72"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNzozNDozOVrOH7FGVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNzo1Mzo1NVrOH7FdFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcxMTU3NQ==", "bodyText": "I think this could be removed.\n\nAlso this close() will call scheduleCompletePendingTasks() which again try to acquire the semaphore.\nscheduleCompletePendingTasks() \": This function calls\nreactor.stop();\nreactor.process();\nshouldn't this be called in reverse order i.e.  call reactor.process() first. ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17842#discussion_r531711575", "createdAt": "2020-11-27T17:34:39Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ReactorExecutor.java", "diffHunk": "@@ -175,14 +175,6 @@ private void scheduleCompletePendingTasks() {\n     public void close() {\n         if (!isDisposed.getAndSet(true)) {\n             close(true, \"ReactorExecutor.close() was called.\");\n-\n-            try {\n-                if (!disposeSemaphore.tryAcquire(timeout.toMillis(), TimeUnit.MILLISECONDS)) {\n-                    logger.info(\"Unable to acquire dispose reactor semaphore within timeout.\");\n-                }\n-            } catch (InterruptedException e) {\n-                logger.warning(\"Could not acquire semaphore to finish close operation.\", e);\n-            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTMyMjI0NA=="}, "originalCommit": {"oid": "3107353c7cabf2879df231a1f90e66a1a83a3f72"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcxNzM5OQ==", "bodyText": "Schedulers.single()  always create a daemon thread  and newSingle will create non-daemon thread.\nSo in case of newSingle , Any existing user threads prevent the application from terminating.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17842#discussion_r531717399", "createdAt": "2020-11-27T17:53:55Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ReactorConnection.java", "diffHunk": "@@ -350,7 +351,11 @@ private synchronized Connection getOrCreateConnection() throws IOException {\n             connection = reactor.connectionToHost(handler.getHostname(), handler.getProtocolPort(), handler);\n \n             reactorExceptionHandler = new ReactorExceptionHandler();\n-            executor = new ReactorExecutor(reactor, Schedulers.single(), connectionId,\n+            // Use a new single-threaded scheduler for this connection as QPID's Reactor is not thread-safe.\n+            // Using Schedulers.single() will use the same thread for all connections in this process which\n+            // limits the scalability of the no. of concurrent connections a single process can have.\n+            Scheduler scheduler = Schedulers.newSingle(\"reactor-executor\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3107353c7cabf2879df231a1f90e66a1a83a3f72"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMjYzNTI5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17842#pullrequestreview-542263529", "createdAt": "2020-12-01T20:19:45Z", "commit": {"oid": "3107353c7cabf2879df231a1f90e66a1a83a3f72"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMDoxOTo0NVrOH8-NmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMDoxOTo0NVrOH8-NmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY5NTg5Ng==", "bodyText": "Is there anything we could do to make calls into QPID's Reactor thread safe? If so I'm wondering if it would be safer to use a thread-pooled Scheduler so that we don't create and tear down many, many threads.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17842#discussion_r533695896", "createdAt": "2020-12-01T20:19:45Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ReactorConnection.java", "diffHunk": "@@ -350,7 +351,11 @@ private synchronized Connection getOrCreateConnection() throws IOException {\n             connection = reactor.connectionToHost(handler.getHostname(), handler.getProtocolPort(), handler);\n \n             reactorExceptionHandler = new ReactorExceptionHandler();\n-            executor = new ReactorExecutor(reactor, Schedulers.single(), connectionId,\n+            // Use a new single-threaded scheduler for this connection as QPID's Reactor is not thread-safe.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3107353c7cabf2879df231a1f90e66a1a83a3f72"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMTMxMTYz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17842#pullrequestreview-543131163", "createdAt": "2020-12-02T18:39:23Z", "commit": {"oid": "3107353c7cabf2879df231a1f90e66a1a83a3f72"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODozOToyM1rOH9o8_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODozOToyM1rOH9o8_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM5NjE1OA==", "bodyText": "Since we own this scheduler, we should make sure to dispose of it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17842#discussion_r534396158", "createdAt": "2020-12-02T18:39:23Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ReactorConnection.java", "diffHunk": "@@ -350,7 +351,11 @@ private synchronized Connection getOrCreateConnection() throws IOException {\n             connection = reactor.connectionToHost(handler.getHostname(), handler.getProtocolPort(), handler);\n \n             reactorExceptionHandler = new ReactorExceptionHandler();\n-            executor = new ReactorExecutor(reactor, Schedulers.single(), connectionId,\n+            // Use a new single-threaded scheduler for this connection as QPID's Reactor is not thread-safe.\n+            // Using Schedulers.single() will use the same thread for all connections in this process which\n+            // limits the scalability of the no. of concurrent connections a single process can have.\n+            Scheduler scheduler = Schedulers.newSingle(\"reactor-executor\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3107353c7cabf2879df231a1f90e66a1a83a3f72"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NjEwMDUz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17842#pullrequestreview-546610053", "createdAt": "2020-12-07T23:00:26Z", "commit": {"oid": "3107353c7cabf2879df231a1f90e66a1a83a3f72"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31ad5d3e01b4316fdfd30789463d9b712d1ebd92", "author": {"user": {"login": "srnagar", "name": "Srikanta"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/31ad5d3e01b4316fdfd30789463d9b712d1ebd92", "committedDate": "2020-12-08T04:38:18Z", "message": "Move semaphore logic inside user initiated close section"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NDY2NTE1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17842#pullrequestreview-548466515", "createdAt": "2020-12-09T18:17:32Z", "commit": {"oid": "31ad5d3e01b4316fdfd30789463d9b712d1ebd92"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1519, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}