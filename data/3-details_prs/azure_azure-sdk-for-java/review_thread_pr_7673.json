{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NTI2MDY3", "number": 7673, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOTo1MzowMFrODaSwVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMjo1MTozN1rODcYOVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODk2ODU1OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOTo1MzowMFrOFhKtMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwMzowODoyM1rOFh3VBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyMjczNw==", "bodyText": "Shouldn't you be asserting the UNWRAP_KEY permission?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7673#discussion_r370322737", "createdAt": "2020-01-23T19:53:00Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java", "diffHunk": "@@ -482,17 +484,17 @@ private void initializeCryptoClients() {\n         Objects.requireNonNull(algorithm, \"Key Wrap algorithm cannot be null.\");\n         Objects.requireNonNull(encryptedKey, \"Encrypted key content to be unwrapped cannot be null.\");\n \n-        boolean keyAvailableLocally = ensureValidKeyAvailable();\n-\n-        if (!keyAvailableLocally) {\n-            return cryptographyServiceClient.unwrapKey(algorithm, encryptedKey, context);\n-        }\n+        return ensureValidKeyAvailable().flatMap(available -> {\n+            if (!available) {\n+                return cryptographyServiceClient.unwrapKey(algorithm, encryptedKey, context);\n+            }\n \n-        if (!checkKeyPermissions(this.key.getKeyOps(), KeyOperation.WRAP_KEY)) {\n-            return Mono.error(logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unwrap Key Operation is not allowed \"\n-                + \"for key with id %s\", this.key.getId()))));\n-        }\n-        return localKeyCryptographyClient.unwrapKeyAsync(algorithm, encryptedKey, context, key);\n+            if (!checkKeyPermissions(this.key.get().getKeyOps(), KeyOperation.WRAP_KEY)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f03ca6a5a9b848dcd6950b1b7faf880394a6077"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA1MzgyOA==", "bodyText": "yup, thanks for the catch.\nUpdated.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7673#discussion_r371053828", "createdAt": "2020-01-27T03:08:23Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java", "diffHunk": "@@ -482,17 +484,17 @@ private void initializeCryptoClients() {\n         Objects.requireNonNull(algorithm, \"Key Wrap algorithm cannot be null.\");\n         Objects.requireNonNull(encryptedKey, \"Encrypted key content to be unwrapped cannot be null.\");\n \n-        boolean keyAvailableLocally = ensureValidKeyAvailable();\n-\n-        if (!keyAvailableLocally) {\n-            return cryptographyServiceClient.unwrapKey(algorithm, encryptedKey, context);\n-        }\n+        return ensureValidKeyAvailable().flatMap(available -> {\n+            if (!available) {\n+                return cryptographyServiceClient.unwrapKey(algorithm, encryptedKey, context);\n+            }\n \n-        if (!checkKeyPermissions(this.key.getKeyOps(), KeyOperation.WRAP_KEY)) {\n-            return Mono.error(logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unwrap Key Operation is not allowed \"\n-                + \"for key with id %s\", this.key.getId()))));\n-        }\n-        return localKeyCryptographyClient.unwrapKeyAsync(algorithm, encryptedKey, context, key);\n+            if (!checkKeyPermissions(this.key.get().getKeyOps(), KeyOperation.WRAP_KEY)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyMjczNw=="}, "originalCommit": {"oid": "5f03ca6a5a9b848dcd6950b1b7faf880394a6077"}, "originalPosition": 241}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODk3NDc5OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOTo1NTowNlrOFhKxAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwMzowODoyNFrOFh3VCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyMzcxMw==", "bodyText": "Nit: here and the line below spends time negating, which slows things down a little but also makes readability more difficult. Could maybe be simplified.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7673#discussion_r370323713", "createdAt": "2020-01-23T19:55:06Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java", "diffHunk": "@@ -625,25 +627,25 @@ private boolean checkKeyPermissions(List<KeyOperation> operations, KeyOperation\n         return operations.contains(keyOperation);\n     }\n \n-    private boolean ensureValidKeyAvailable() {\n-        boolean keyAvailableLocally = true;\n-        if (this.key == null && keyCollection != null) {\n-            try {\n-                if (keyCollection.equals(SECRETS_COLLECTION)) {\n-                    this.key = getSecretKey().block();\n-                } else {\n-                    KeyVaultKey keyVaultKey = getKey().block();\n-                    this.key = keyVaultKey.getKey();\n-                }\n-                keyAvailableLocally = this.key.isValid();\n-                initializeCryptoClients();\n-            } catch (HttpResponseException | NullPointerException e) {\n-                logger.warning(\"Failed to retrieve key from key vault\");\n-                logger.logExceptionAsWarning(e);\n-                keyAvailableLocally = false;\n+    private Mono<Boolean> ensureValidKeyAvailable() {\n+        boolean keyAvailable = !(this.key == null && keyCollection != null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f03ca6a5a9b848dcd6950b1b7faf880394a6077"}, "originalPosition": 327}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA1MzgzMg==", "bodyText": "Updated.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7673#discussion_r371053832", "createdAt": "2020-01-27T03:08:24Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java", "diffHunk": "@@ -625,25 +627,25 @@ private boolean checkKeyPermissions(List<KeyOperation> operations, KeyOperation\n         return operations.contains(keyOperation);\n     }\n \n-    private boolean ensureValidKeyAvailable() {\n-        boolean keyAvailableLocally = true;\n-        if (this.key == null && keyCollection != null) {\n-            try {\n-                if (keyCollection.equals(SECRETS_COLLECTION)) {\n-                    this.key = getSecretKey().block();\n-                } else {\n-                    KeyVaultKey keyVaultKey = getKey().block();\n-                    this.key = keyVaultKey.getKey();\n-                }\n-                keyAvailableLocally = this.key.isValid();\n-                initializeCryptoClients();\n-            } catch (HttpResponseException | NullPointerException e) {\n-                logger.warning(\"Failed to retrieve key from key vault\");\n-                logger.logExceptionAsWarning(e);\n-                keyAvailableLocally = false;\n+    private Mono<Boolean> ensureValidKeyAvailable() {\n+        boolean keyAvailable = !(this.key == null && keyCollection != null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyMzcxMw=="}, "originalCommit": {"oid": "5f03ca6a5a9b848dcd6950b1b7faf880394a6077"}, "originalPosition": 327}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODk3NzYxOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOTo1NjowNVrOFhKyzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwMzowODoyOVrOFh3VEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyNDE3NQ==", "bodyText": "Should this maybe be setKey? Not sure if that's idiomatic, but I thought normally setting objects uses the \"set\" prefix.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7673#discussion_r370324175", "createdAt": "2020-01-23T19:56:05Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientBuilder.java", "diffHunk": "@@ -299,4 +300,18 @@ public CryptographyClientBuilder serviceVersion(CryptographyServiceVersion versi\n         this.version = version;\n         return this;\n     }\n+\n+    /**\n+     * Sets the jsonWebKey to be used for cryptography operations.\n+     *\n+     * <p>If {@code key} is provided then it takes precedence over key identifier and gets used for cryptography\n+     * operations.</p>\n+     *\n+     * @param key The key to be used for cryptography operations.\n+     * @return the updated builder object.\n+     */\n+    CryptographyClientBuilder key(KeyVaultKey key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f03ca6a5a9b848dcd6950b1b7faf880394a6077"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM1NTM5Nw==", "bodyText": "It should just be 'key' - we leave the 'set' prefix off in builders. However, this method is package-private, so it is either Javadoc'd unnecessarily, or it should have been made public and been API reviewed, or it is only used internally and this is intentional - and should be commented as such to make that decision clear. From what I can see it is the last point - it is intended for internal use only.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7673#discussion_r370355397", "createdAt": "2020-01-23T21:09:22Z", "author": {"login": "JonathanGiles"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientBuilder.java", "diffHunk": "@@ -299,4 +300,18 @@ public CryptographyClientBuilder serviceVersion(CryptographyServiceVersion versi\n         this.version = version;\n         return this;\n     }\n+\n+    /**\n+     * Sets the jsonWebKey to be used for cryptography operations.\n+     *\n+     * <p>If {@code key} is provided then it takes precedence over key identifier and gets used for cryptography\n+     * operations.</p>\n+     *\n+     * @param key The key to be used for cryptography operations.\n+     * @return the updated builder object.\n+     */\n+    CryptographyClientBuilder key(KeyVaultKey key) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyNDE3NQ=="}, "originalCommit": {"oid": "5f03ca6a5a9b848dcd6950b1b7faf880394a6077"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA1Mzg0MA==", "bodyText": "Yeah, it is meant to be internal.\nThe javadoc is as good as a comment currently.\nWill possibly exposed in future, when we decide to make this public across all languages.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7673#discussion_r371053840", "createdAt": "2020-01-27T03:08:29Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientBuilder.java", "diffHunk": "@@ -299,4 +300,18 @@ public CryptographyClientBuilder serviceVersion(CryptographyServiceVersion versi\n         this.version = version;\n         return this;\n     }\n+\n+    /**\n+     * Sets the jsonWebKey to be used for cryptography operations.\n+     *\n+     * <p>If {@code key} is provided then it takes precedence over key identifier and gets used for cryptography\n+     * operations.</p>\n+     *\n+     * @param key The key to be used for cryptography operations.\n+     * @return the updated builder object.\n+     */\n+    CryptographyClientBuilder key(KeyVaultKey key) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyNDE3NQ=="}, "originalCommit": {"oid": "5f03ca6a5a9b848dcd6950b1b7faf880394a6077"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODk4NzU3OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/models/KeyVaultKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOTo1OTo0MFrOFhK5Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwMzowODozM1rOFh3VHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyNTc2Ng==", "bodyText": "Seems this should either be name or ID. Since the name derives from the ID, both shouldn't be necessary.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7673#discussion_r370325766", "createdAt": "2020-01-23T19:59:40Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/models/KeyVaultKey.java", "diffHunk": "@@ -31,6 +31,35 @@\n         properties = new KeyProperties();\n     }\n \n+    /**\n+     * Creates an instance of KeyVaultKey\n+     * @param name the name of the key\n+     */\n+    public KeyVaultKey(String name) {\n+        properties = new KeyProperties(name);\n+    }\n+\n+    /**\n+     * Creates an instance of KeyVaultKey\n+     * @param name the name of the key\n+     * @param jsonWebKey the json web key to be used for crypto operations\n+     */\n+    public KeyVaultKey(String name, JsonWebKey jsonWebKey) {\n+        properties = new KeyProperties(name);\n+        this.key = jsonWebKey;\n+    }\n+\n+    /**\n+     * Creates an instance of KeyVaultKey\n+     * @param name the name of the key\n+     * @param keyId the vault id name of the key\n+     * @param jsonWebKey the json web key to be used for crypto operations\n+     */\n+    public KeyVaultKey(String name, String keyId, JsonWebKey jsonWebKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f03ca6a5a9b848dcd6950b1b7faf880394a6077"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA1Mzg1NA==", "bodyText": "Okay, that's true too.\nRefactored this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7673#discussion_r371053854", "createdAt": "2020-01-27T03:08:33Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/models/KeyVaultKey.java", "diffHunk": "@@ -31,6 +31,35 @@\n         properties = new KeyProperties();\n     }\n \n+    /**\n+     * Creates an instance of KeyVaultKey\n+     * @param name the name of the key\n+     */\n+    public KeyVaultKey(String name) {\n+        properties = new KeyProperties(name);\n+    }\n+\n+    /**\n+     * Creates an instance of KeyVaultKey\n+     * @param name the name of the key\n+     * @param jsonWebKey the json web key to be used for crypto operations\n+     */\n+    public KeyVaultKey(String name, JsonWebKey jsonWebKey) {\n+        properties = new KeyProperties(name);\n+        this.key = jsonWebKey;\n+    }\n+\n+    /**\n+     * Creates an instance of KeyVaultKey\n+     * @param name the name of the key\n+     * @param keyId the vault id name of the key\n+     * @param jsonWebKey the json web key to be used for crypto operations\n+     */\n+    public KeyVaultKey(String name, String keyId, JsonWebKey jsonWebKey) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyNTc2Ng=="}, "originalCommit": {"oid": "5f03ca6a5a9b848dcd6950b1b7faf880394a6077"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTE2MDU1OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMTowNToxNFrOFhMlVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwMzowODozNlrOFh3VKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM1MzQ5NQ==", "bodyText": "What motivated your introduction of the AtomicReference type?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7673#discussion_r370353495", "createdAt": "2020-01-23T21:05:14Z", "author": {"login": "JonathanGiles"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java", "diffHunk": "@@ -56,7 +56,7 @@\n public class CryptographyAsyncClient {\n     static final String KEY_VAULT_SCOPE = \"https://vault.azure.net/.default\";\n     static final String SECRETS_COLLECTION = \"secrets\";\n-    JsonWebKey key;\n+    AtomicReference<JsonWebKey> key;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f03ca6a5a9b848dcd6950b1b7faf880394a6077"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA1Mzg2NA==", "bodyText": "On second thought, redesigned to keep it non atomic.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7673#discussion_r371053864", "createdAt": "2020-01-27T03:08:36Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java", "diffHunk": "@@ -56,7 +56,7 @@\n public class CryptographyAsyncClient {\n     static final String KEY_VAULT_SCOPE = \"https://vault.azure.net/.default\";\n     static final String SECRETS_COLLECTION = \"secrets\";\n-    JsonWebKey key;\n+    AtomicReference<JsonWebKey> key;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM1MzQ5NQ=="}, "originalCommit": {"oid": "5f03ca6a5a9b848dcd6950b1b7faf880394a6077"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTE2Mzk3OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMTowNjowN1rOFhMnHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwMzowODozOVrOFh3VPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM1Mzk1MQ==", "bodyText": "This would be more readable with a switch statement", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7673#discussion_r370353951", "createdAt": "2020-01-23T21:06:07Z", "author": {"login": "JonathanGiles"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java", "diffHunk": "@@ -114,15 +116,15 @@ private void initializeCryptoClients() {\n         if (localKeyCryptographyClient != null) {\n             return;\n         }\n-        if (key.getKeyType().equals(RSA) || key.getKeyType().equals(RSA_HSM)) {\n-            localKeyCryptographyClient = new RsaKeyCryptographyClient(key, cryptographyServiceClient);\n-        } else if (key.getKeyType().equals(EC) || key.getKeyType().equals(EC_HSM)) {\n-            localKeyCryptographyClient = new EcKeyCryptographyClient(key, cryptographyServiceClient);\n-        } else if (key.getKeyType().equals(OCT)) {\n-            localKeyCryptographyClient = new SymmetricKeyCryptographyClient(key, cryptographyServiceClient);\n+        if (key.get().getKeyType().equals(RSA) || key.get().getKeyType().equals(RSA_HSM)) {\n+            localKeyCryptographyClient = new RsaKeyCryptographyClient(key.get(), cryptographyServiceClient);\n+        } else if (key.get().getKeyType().equals(EC) || key.get().getKeyType().equals(EC_HSM)) {\n+            localKeyCryptographyClient = new EcKeyCryptographyClient(key.get(), cryptographyServiceClient);\n+        } else if (key.get().getKeyType().equals(OCT)) {\n+            localKeyCryptographyClient = new SymmetricKeyCryptographyClient(key.get(), cryptographyServiceClient);\n         } else {\n             throw logger.logExceptionAsError(new IllegalArgumentException(String.format(\n-                \"The Json Web Key Type: %s is not supported.\", key.getKeyType().toString())));\n+                \"The Json Web Key Type: %s is not supported.\", key.get().getKeyType().toString())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f03ca6a5a9b848dcd6950b1b7faf880394a6077"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA1Mzg4NQ==", "bodyText": "Expandable String enum, cannot do that, as discussed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7673#discussion_r371053885", "createdAt": "2020-01-27T03:08:39Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java", "diffHunk": "@@ -114,15 +116,15 @@ private void initializeCryptoClients() {\n         if (localKeyCryptographyClient != null) {\n             return;\n         }\n-        if (key.getKeyType().equals(RSA) || key.getKeyType().equals(RSA_HSM)) {\n-            localKeyCryptographyClient = new RsaKeyCryptographyClient(key, cryptographyServiceClient);\n-        } else if (key.getKeyType().equals(EC) || key.getKeyType().equals(EC_HSM)) {\n-            localKeyCryptographyClient = new EcKeyCryptographyClient(key, cryptographyServiceClient);\n-        } else if (key.getKeyType().equals(OCT)) {\n-            localKeyCryptographyClient = new SymmetricKeyCryptographyClient(key, cryptographyServiceClient);\n+        if (key.get().getKeyType().equals(RSA) || key.get().getKeyType().equals(RSA_HSM)) {\n+            localKeyCryptographyClient = new RsaKeyCryptographyClient(key.get(), cryptographyServiceClient);\n+        } else if (key.get().getKeyType().equals(EC) || key.get().getKeyType().equals(EC_HSM)) {\n+            localKeyCryptographyClient = new EcKeyCryptographyClient(key.get(), cryptographyServiceClient);\n+        } else if (key.get().getKeyType().equals(OCT)) {\n+            localKeyCryptographyClient = new SymmetricKeyCryptographyClient(key.get(), cryptographyServiceClient);\n         } else {\n             throw logger.logExceptionAsError(new IllegalArgumentException(String.format(\n-                \"The Json Web Key Type: %s is not supported.\", key.getKeyType().toString())));\n+                \"The Json Web Key Type: %s is not supported.\", key.get().getKeyType().toString())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM1Mzk1MQ=="}, "originalCommit": {"oid": "5f03ca6a5a9b848dcd6950b1b7faf880394a6077"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTE4Nzc2OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/KeyEncryptionKeyClientBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMToxNDowOVrOFhM1Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwMzowODo0M1rOFh3VVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM1NzU2Nw==", "bodyText": "These exceptions do not clearly state what the user should do to resolve the issue. More specificity means less confusion for end users.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7673#discussion_r370357567", "createdAt": "2020-01-23T21:14:09Z", "author": {"login": "JonathanGiles"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/KeyEncryptionKeyClientBuilder.java", "diffHunk": "@@ -114,6 +136,50 @@ public KeyEncryptionKey buildKeyEncryptionKey(String keyId) {\n         return Mono.defer(() -> Mono.just(new KeyEncryptionKeyAsyncClient(keyId, pipeline, serviceVersion)));\n     }\n \n+    /**\n+     * Creates a {@link KeyEncryptionKeyAsyncClient} based on options set in the builder.\n+     * Every time {@code buildAsyncKeyEncryptionKey(String)} is called, a new instance of\n+     * {@link KeyEncryptionKeyAsyncClient} is created.\n+     *\n+     * <p>If {@link KeyEncryptionKeyClientBuilder#pipeline(HttpPipeline) pipeline} is set, then the {@code pipeline}\n+     * and {@code keyId} are used to create the {@link KeyEncryptionKeyAsyncClient async client}.\n+     * All other builder settings are ignored. If {@code pipeline} is not set, then\n+     * ({@link KeyEncryptionKeyClientBuilder#credential(TokenCredential) jsonWebKey vault credential} and\n+     * {@code keyId} are required to build the {@link KeyEncryptionKeyAsyncClient async client}.</p>\n+     *\n+     * @param key the key to be used for crypto operations.\n+     *\n+     * @return A {@link KeyEncryptionKeyAsyncClient} with the options set from the builder.\n+     * @throws IllegalStateException If {@link KeyEncryptionKeyClientBuilder#credential(TokenCredential)} or\n+     * {@code key} have not been set.\n+     */\n+    public Mono<? extends AsyncKeyEncryptionKey> buildAsyncKeyEncryptionKey(KeyVaultKey key) {\n+        builder.key(key);\n+        if (key == null) {\n+            throw logger.logExceptionAsError(new IllegalStateException(\n+                \"Key is required to create key encryption key async client\"));\n+        }\n+\n+        if (key.getKey() == null) {\n+            throw logger.logExceptionAsError(new IllegalStateException(\n+                \"Json Web key is required to create key encryption key async client\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f03ca6a5a9b848dcd6950b1b7faf880394a6077"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA1MzkxMA==", "bodyText": "Updated the messages.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7673#discussion_r371053910", "createdAt": "2020-01-27T03:08:43Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/KeyEncryptionKeyClientBuilder.java", "diffHunk": "@@ -114,6 +136,50 @@ public KeyEncryptionKey buildKeyEncryptionKey(String keyId) {\n         return Mono.defer(() -> Mono.just(new KeyEncryptionKeyAsyncClient(keyId, pipeline, serviceVersion)));\n     }\n \n+    /**\n+     * Creates a {@link KeyEncryptionKeyAsyncClient} based on options set in the builder.\n+     * Every time {@code buildAsyncKeyEncryptionKey(String)} is called, a new instance of\n+     * {@link KeyEncryptionKeyAsyncClient} is created.\n+     *\n+     * <p>If {@link KeyEncryptionKeyClientBuilder#pipeline(HttpPipeline) pipeline} is set, then the {@code pipeline}\n+     * and {@code keyId} are used to create the {@link KeyEncryptionKeyAsyncClient async client}.\n+     * All other builder settings are ignored. If {@code pipeline} is not set, then\n+     * ({@link KeyEncryptionKeyClientBuilder#credential(TokenCredential) jsonWebKey vault credential} and\n+     * {@code keyId} are required to build the {@link KeyEncryptionKeyAsyncClient async client}.</p>\n+     *\n+     * @param key the key to be used for crypto operations.\n+     *\n+     * @return A {@link KeyEncryptionKeyAsyncClient} with the options set from the builder.\n+     * @throws IllegalStateException If {@link KeyEncryptionKeyClientBuilder#credential(TokenCredential)} or\n+     * {@code key} have not been set.\n+     */\n+    public Mono<? extends AsyncKeyEncryptionKey> buildAsyncKeyEncryptionKey(KeyVaultKey key) {\n+        builder.key(key);\n+        if (key == null) {\n+            throw logger.logExceptionAsError(new IllegalStateException(\n+                \"Key is required to create key encryption key async client\"));\n+        }\n+\n+        if (key.getKey() == null) {\n+            throw logger.logExceptionAsError(new IllegalStateException(\n+                \"Json Web key is required to create key encryption key async client\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM1NzU2Nw=="}, "originalCommit": {"oid": "5f03ca6a5a9b848dcd6950b1b7faf880394a6077"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDY5ODk1OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/KeyEncryptionKeyClientBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTo0MDo1NlrOFkYuKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzo0Njo0N1rOFnvg2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY5ODA5MQ==", "bodyText": "Should this method be named buildAsyncKeyEncryptionKeyClient?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7673#discussion_r373698091", "createdAt": "2020-01-31T21:40:56Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/KeyEncryptionKeyClientBuilder.java", "diffHunk": "@@ -106,14 +128,58 @@ public KeyEncryptionKey buildKeyEncryptionKey(String keyId) {\n \n         if (builder.getCredential() == null) {\n             throw logger.logExceptionAsError(new IllegalStateException(\n-                \"Key Vault credentials are required to build the key encryption key async client\"));\n+                \"Key Vault credentials cannot be null and are required to build the key encryption key async client\"));\n         }\n \n         HttpPipeline pipeline = builder.setupPipeline();\n \n         return Mono.defer(() -> Mono.just(new KeyEncryptionKeyAsyncClient(keyId, pipeline, serviceVersion)));\n     }\n \n+    /**\n+     * Creates a {@link KeyEncryptionKeyAsyncClient} based on options set in the builder.\n+     * Every time {@code buildAsyncKeyEncryptionKey(String)} is called, a new instance of\n+     * {@link KeyEncryptionKeyAsyncClient} is created.\n+     *\n+     * <p>If {@link KeyEncryptionKeyClientBuilder#pipeline(HttpPipeline) pipeline} is set, then the {@code pipeline}\n+     * and {@code keyId} are used to create the {@link KeyEncryptionKeyAsyncClient async client}.\n+     * All other builder settings are ignored. If {@code pipeline} is not set, then\n+     * ({@link KeyEncryptionKeyClientBuilder#credential(TokenCredential) jsonWebKey vault credential} and\n+     * {@code keyId} are required to build the {@link KeyEncryptionKeyAsyncClient async client}.</p>\n+     *\n+     * @param key the key to be used for crypto operations.\n+     *\n+     * @return A {@link KeyEncryptionKeyAsyncClient} with the options set from the builder.\n+     * @throws IllegalStateException If {@link KeyEncryptionKeyClientBuilder#credential(TokenCredential)} or\n+     * {@code key} have not been set.\n+     */\n+    public Mono<? extends AsyncKeyEncryptionKey> buildAsyncKeyEncryptionKey(KeyVaultKey key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b71cca2b772dbb4d155d731cb8ec3a9e3fd5a044"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIxNzI0MA==", "bodyText": "This is used by other SDKs which utilize AsyncKEK and KEK.\nSo, from user perspective, they will use KV to build what other SDKs consume,\nthis will be straight to the point and less confusing.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7673#discussion_r377217240", "createdAt": "2020-02-10T17:46:47Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/KeyEncryptionKeyClientBuilder.java", "diffHunk": "@@ -106,14 +128,58 @@ public KeyEncryptionKey buildKeyEncryptionKey(String keyId) {\n \n         if (builder.getCredential() == null) {\n             throw logger.logExceptionAsError(new IllegalStateException(\n-                \"Key Vault credentials are required to build the key encryption key async client\"));\n+                \"Key Vault credentials cannot be null and are required to build the key encryption key async client\"));\n         }\n \n         HttpPipeline pipeline = builder.setupPipeline();\n \n         return Mono.defer(() -> Mono.just(new KeyEncryptionKeyAsyncClient(keyId, pipeline, serviceVersion)));\n     }\n \n+    /**\n+     * Creates a {@link KeyEncryptionKeyAsyncClient} based on options set in the builder.\n+     * Every time {@code buildAsyncKeyEncryptionKey(String)} is called, a new instance of\n+     * {@link KeyEncryptionKeyAsyncClient} is created.\n+     *\n+     * <p>If {@link KeyEncryptionKeyClientBuilder#pipeline(HttpPipeline) pipeline} is set, then the {@code pipeline}\n+     * and {@code keyId} are used to create the {@link KeyEncryptionKeyAsyncClient async client}.\n+     * All other builder settings are ignored. If {@code pipeline} is not set, then\n+     * ({@link KeyEncryptionKeyClientBuilder#credential(TokenCredential) jsonWebKey vault credential} and\n+     * {@code keyId} are required to build the {@link KeyEncryptionKeyAsyncClient async client}.</p>\n+     *\n+     * @param key the key to be used for crypto operations.\n+     *\n+     * @return A {@link KeyEncryptionKeyAsyncClient} with the options set from the builder.\n+     * @throws IllegalStateException If {@link KeyEncryptionKeyClientBuilder#credential(TokenCredential)} or\n+     * {@code key} have not been set.\n+     */\n+    public Mono<? extends AsyncKeyEncryptionKey> buildAsyncKeyEncryptionKey(KeyVaultKey key) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY5ODA5MQ=="}, "originalCommit": {"oid": "b71cca2b772dbb4d155d731cb8ec3a9e3fd5a044"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDcwMTMwOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/models/KeyVaultKey.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTo0MjowOFrOFkYvqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTo0MjowOFrOFkYvqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY5ODQ3NA==", "bodyText": "Good to have null checks on these helper methods.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7673#discussion_r373698474", "createdAt": "2020-01-31T21:42:08Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/models/KeyVaultKey.java", "diffHunk": "@@ -87,6 +97,30 @@ public KeyType getKeyType() {\n         return key.getKeyOps();\n     }\n \n+    /**\n+     * Creates an instance of KeyVaultKey\n+     * @param keyId the identifier of the key\n+     * @param jsonWebKey the json web key to be used for crypto operations\n+     * @return The Key Vault Key object.\n+     */\n+    public static KeyVaultKey fromKeyId(String keyId, JsonWebKey jsonWebKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b71cca2b772dbb4d155d731cb8ec3a9e3fd5a044"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDcwNDUyOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/resources/session-records/wrapUnwrapLocalSymmetricAK128.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTo0Mzo0NFrOFkYxqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTo0Mzo0NFrOFkYxqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY5ODk4NA==", "bodyText": "Why do we need these empty network call records?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7673#discussion_r373698984", "createdAt": "2020-01-31T21:43:44Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/resources/session-records/wrapUnwrapLocalSymmetricAK128.json", "diffHunk": "@@ -0,0 +1,4 @@\n+{\n+  \"networkCallRecords\" : [ ],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b71cca2b772dbb4d155d731cb8ec3a9e3fd5a044"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDgzNjA3OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMjo1MTozN1rOFkaDhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMjo1MTozN1rOFkaDhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxOTk0Mg==", "bodyText": "You probably want to store the entire KeyVaultKey so that you can validate the current time is in between notBefore expiresOn when performing encrypt, sign, and wapKey. But you could file an issue on this now and do a separate PR for it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7673#discussion_r373719942", "createdAt": "2020-01-31T22:51:37Z", "author": {"login": "schaabs"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java", "diffHunk": "@@ -67,23 +66,25 @@\n     /**\n      * Creates a CryptographyAsyncClient that uses {@code pipeline} to service requests\n      *\n-     * @param key the JsonWebKey to use for cryptography operations.\n+     * @param key the key to use for cryptography operations.\n      * @param pipeline HttpPipeline that the HTTP requests and responses flow through.\n      * @param version {@link CryptographyServiceVersion} of the service to be used when making requests.\n      */\n-    CryptographyAsyncClient(JsonWebKey key, HttpPipeline pipeline, CryptographyServiceVersion version) {\n-        Objects.requireNonNull(key);\n-        if (!key.isValid()) {\n+    CryptographyAsyncClient(KeyVaultKey key, HttpPipeline pipeline, CryptographyServiceVersion version) {\n+        Objects.requireNonNull(key, \"The key vault key is required.\");\n+        JsonWebKey jsonWebKey = key.getKey();\n+        Objects.requireNonNull(jsonWebKey, \"The Json web key is required.\");\n+        if (!jsonWebKey.isValid()) {\n             throw new IllegalArgumentException(\"Json Web Key is not valid\");\n         }\n-        if (key.getKeyOps() == null) {\n+        if (jsonWebKey.getKeyOps() == null) {\n             throw new IllegalArgumentException(\"Json Web Key's key operations property is not configured\");\n         }\n \n         if (key.getKeyType() == null) {\n             throw new IllegalArgumentException(\"Json Web Key's key type property is not configured\");\n         }\n-        this.key = key;\n+        this.key = jsonWebKey;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b71cca2b772dbb4d155d731cb8ec3a9e3fd5a044"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 394, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}