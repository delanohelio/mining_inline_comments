{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyODA0Nzcw", "number": 17985, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMTo1Mzo0M1rOFA_qMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDoxMzo0MFrOFESkEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTg3MzE0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/repository/support/SimpleCosmosRepository.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMTo1Mzo0M1rOH_jgiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMToyNDozNlrOIDd8yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwNDEwNQ==", "bodyText": "i wanted to go ahead and open this PR to start discussion of this line. The issue here is that the indexPolicy object retrieved from the server will not ever compare with the index policy that is contained in CosmosEntityInformation using .equals(). This is for a few reasons....\n1.) The IndexPolicy object only contains a few instance fields and the rest of the data is contained in the serialized version of the object that is contained internally. The version of indexPolicy that is within CosmosEntityInformation will never contain a serialized version of the object that is comparable to the one retrieved from the server due to all the metadata fields that are added to the serialized json by the server.\n2.) The version of the indexPolicy object in CosmosEntityInformation is created from the parameters provided by the annotation. However the annotation does not account for any of the implied state that is set in certain cases. For instance, if you apply the CosmosIndexingPolicy annotation with no parameters, then the default indexing policy will get applied to your container. The index policy object in CosmosEntityInformation will contain an empty list for the included and excluded fields in this case. The index policy object retrieved from the server will contain an included list with \"/\"  and an excluded list with \"/_etag/\".\nSince the way the index policy is updated is by doing a container replace, it seems like this check needs to be accurate as far as detecting if the index policy actually changed so that needless container replaces are not being done.\nThe only approach i can think of to do this is to account for all the discrepancies between these objects when comparing.\nCan you guys think of a better way of determining if an index policy update is needed?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17985#discussion_r536404105", "createdAt": "2020-12-04T21:53:43Z", "author": {"login": "Blackbaud-EricSlater"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/repository/support/SimpleCosmosRepository.java", "diffHunk": "@@ -45,6 +46,32 @@ public SimpleCosmosRepository(CosmosEntityInformation<T, ID> metadata,\n         if (this.information.isAutoCreateContainer()) {\n             createContainerIfNotExists();\n         }\n+\n+        CosmosContainerProperties currentProperties = getContainerProperties();\n+        if (shouldUpdateIndexingPolicy(currentProperties)) {\n+            currentProperties.setIndexingPolicy(information.getIndexingPolicy());\n+            replaceContainerProperties(currentProperties);\n+        }\n+    }\n+\n+    private boolean shouldUpdateIndexingPolicy(CosmosContainerProperties currentProperties) {\n+        return currentProperties != null && !currentProperties.getIndexingPolicy().equals(information.getIndexingPolicy());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0869c64386eff0fdcfafb7ff608f1f1a75b68daa"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4MjM2OA==", "bodyText": "@kushagraThapar any thoughts on this? The way i see it I either need to flesh out the comparison code to account for the discrepancies mentioned above or we omit the check entirely and let the container replace run everytime. Do you know what the cost of a container replace is? If it is an inexpensive constant time operation then letting it always run is probably fine. If it is something that is expensive and scales with the size of the container then we should ensure that needless container replaces are not being executed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17985#discussion_r539582368", "createdAt": "2020-12-09T19:24:08Z", "author": {"login": "Blackbaud-EricSlater"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/repository/support/SimpleCosmosRepository.java", "diffHunk": "@@ -45,6 +46,32 @@ public SimpleCosmosRepository(CosmosEntityInformation<T, ID> metadata,\n         if (this.information.isAutoCreateContainer()) {\n             createContainerIfNotExists();\n         }\n+\n+        CosmosContainerProperties currentProperties = getContainerProperties();\n+        if (shouldUpdateIndexingPolicy(currentProperties)) {\n+            currentProperties.setIndexingPolicy(information.getIndexingPolicy());\n+            replaceContainerProperties(currentProperties);\n+        }\n+    }\n+\n+    private boolean shouldUpdateIndexingPolicy(CosmosContainerProperties currentProperties) {\n+        return currentProperties != null && !currentProperties.getIndexingPolicy().equals(information.getIndexingPolicy());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwNDEwNQ=="}, "originalCommit": {"oid": "0869c64386eff0fdcfafb7ff608f1f1a75b68daa"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczNjA4Ng==", "bodyText": "@Blackbaud-EricSlater - It is an expensive call that we should not do all the times. The current equals code that you have on this PR is costly or is it fine ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17985#discussion_r539736086", "createdAt": "2020-12-09T23:51:25Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/repository/support/SimpleCosmosRepository.java", "diffHunk": "@@ -45,6 +46,32 @@ public SimpleCosmosRepository(CosmosEntityInformation<T, ID> metadata,\n         if (this.information.isAutoCreateContainer()) {\n             createContainerIfNotExists();\n         }\n+\n+        CosmosContainerProperties currentProperties = getContainerProperties();\n+        if (shouldUpdateIndexingPolicy(currentProperties)) {\n+            currentProperties.setIndexingPolicy(information.getIndexingPolicy());\n+            replaceContainerProperties(currentProperties);\n+        }\n+    }\n+\n+    private boolean shouldUpdateIndexingPolicy(CosmosContainerProperties currentProperties) {\n+        return currentProperties != null && !currentProperties.getIndexingPolicy().equals(information.getIndexingPolicy());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwNDEwNQ=="}, "originalCommit": {"oid": "0869c64386eff0fdcfafb7ff608f1f1a75b68daa"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI2NzMxNQ==", "bodyText": "its not that the equals comparison is costly, its that it never returns true. I am working on fixing this now. I am adding definitions for .equals to the IncludedPath, ExcludedPath and Index classes and adding some additional code that accounts for the discrepancies i mentioned above.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17985#discussion_r540267315", "createdAt": "2020-12-10T15:35:26Z", "author": {"login": "Blackbaud-EricSlater"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/repository/support/SimpleCosmosRepository.java", "diffHunk": "@@ -45,6 +46,32 @@ public SimpleCosmosRepository(CosmosEntityInformation<T, ID> metadata,\n         if (this.information.isAutoCreateContainer()) {\n             createContainerIfNotExists();\n         }\n+\n+        CosmosContainerProperties currentProperties = getContainerProperties();\n+        if (shouldUpdateIndexingPolicy(currentProperties)) {\n+            currentProperties.setIndexingPolicy(information.getIndexingPolicy());\n+            replaceContainerProperties(currentProperties);\n+        }\n+    }\n+\n+    private boolean shouldUpdateIndexingPolicy(CosmosContainerProperties currentProperties) {\n+        return currentProperties != null && !currentProperties.getIndexingPolicy().equals(information.getIndexingPolicy());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwNDEwNQ=="}, "originalCommit": {"oid": "0869c64386eff0fdcfafb7ff608f1f1a75b68daa"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2NTEzMA==", "bodyText": "Makes sense, that will be the right way to fix this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17985#discussion_r540365130", "createdAt": "2020-12-10T17:37:35Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/repository/support/SimpleCosmosRepository.java", "diffHunk": "@@ -45,6 +46,32 @@ public SimpleCosmosRepository(CosmosEntityInformation<T, ID> metadata,\n         if (this.information.isAutoCreateContainer()) {\n             createContainerIfNotExists();\n         }\n+\n+        CosmosContainerProperties currentProperties = getContainerProperties();\n+        if (shouldUpdateIndexingPolicy(currentProperties)) {\n+            currentProperties.setIndexingPolicy(information.getIndexingPolicy());\n+            replaceContainerProperties(currentProperties);\n+        }\n+    }\n+\n+    private boolean shouldUpdateIndexingPolicy(CosmosContainerProperties currentProperties) {\n+        return currentProperties != null && !currentProperties.getIndexingPolicy().equals(information.getIndexingPolicy());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwNDEwNQ=="}, "originalCommit": {"oid": "0869c64386eff0fdcfafb7ff608f1f1a75b68daa"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUwNzMzOQ==", "bodyText": "this is fixed now and the logic for comparing indexPolicies is contained in IndexPolicyCompareService. Implementing .equals on ExcludedPath and IncludedPath was necessary as well", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17985#discussion_r540507339", "createdAt": "2020-12-10T21:24:36Z", "author": {"login": "Blackbaud-EricSlater"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/repository/support/SimpleCosmosRepository.java", "diffHunk": "@@ -45,6 +46,32 @@ public SimpleCosmosRepository(CosmosEntityInformation<T, ID> metadata,\n         if (this.information.isAutoCreateContainer()) {\n             createContainerIfNotExists();\n         }\n+\n+        CosmosContainerProperties currentProperties = getContainerProperties();\n+        if (shouldUpdateIndexingPolicy(currentProperties)) {\n+            currentProperties.setIndexingPolicy(information.getIndexingPolicy());\n+            replaceContainerProperties(currentProperties);\n+        }\n+    }\n+\n+    private boolean shouldUpdateIndexingPolicy(CosmosContainerProperties currentProperties) {\n+        return currentProperties != null && !currentProperties.getIndexingPolicy().equals(information.getIndexingPolicy());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwNDEwNQ=="}, "originalCommit": {"oid": "0869c64386eff0fdcfafb7ff608f1f1a75b68daa"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTg5NTQzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/DocumentCollection.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMTo1ODoxNlrOH_ju6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMjo1NTo1MVrOIB6ByA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwNzc4Ng==", "bodyText": "This was necessary because the container replace method that is being used in azure-cosmos depends on the __self link being in the propertyBag. You can see below in SimpleCosmosRepository that I have to retrieve the CosmosContainerProperties from the server so that this field is contained in the properties bag. I cannot use one that i create myself using CosmosEntityInformation since it will not contain the __self link.\nSo, I retrieve CosmosContainerProperties from the server and then set the new indexing policy on it. This change makes it so that calling setIndexingPolicy updates that underlying json representation that is sent to the server. Without this is place, calling setIndexingPolicy() has no effect.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17985#discussion_r536407786", "createdAt": "2020-12-04T21:58:16Z", "author": {"login": "Blackbaud-EricSlater"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/DocumentCollection.java", "diffHunk": "@@ -90,6 +90,7 @@ public void setIndexingPolicy(IndexingPolicy indexingPolicy) {\n         }\n \n         this.indexingPolicy = indexingPolicy;\n+        setProperty(this, Constants.Properties.INDEXING_POLICY, this.indexingPolicy);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0869c64386eff0fdcfafb7ff608f1f1a75b68daa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0NDc1Mg==", "bodyText": "@kushagraThapar  @Blackbaud-EricSlater\nThere is a test in com.azure.cosmos.CosmosContainerTest.replace validating replace scenario. Does this mean that test is broken?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17985#discussion_r536444752", "createdAt": "2020-12-04T23:33:12Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/DocumentCollection.java", "diffHunk": "@@ -90,6 +90,7 @@ public void setIndexingPolicy(IndexingPolicy indexingPolicy) {\n         }\n \n         this.indexingPolicy = indexingPolicy;\n+        setProperty(this, Constants.Properties.INDEXING_POLICY, this.indexingPolicy);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwNzc4Ng=="}, "originalCommit": {"oid": "0869c64386eff0fdcfafb7ff608f1f1a75b68daa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgyODE5MQ==", "bodyText": "im not sure what i missed in my testing that made me think this was necessary, but it is working without it. The DocumentCollection is re-serialized when getV2Collection() is called on the DocumentCollection in CosmosAsyncContainer.replaceInternal. I removed the edits to this file.\nHowever, on a separate note, in looking at the test you mentioned, i did notice that it was not actually changing the index policy to a new value in the test. It was creating a container with indexMode.CONSISTENT and replacing it with a container with indexMode.CONSISTENT, which is also the default value if no policy is specified. This is not a very good validation that the indexPolicy is actually being replaced.\nI updated the test to replace the container with a different index policy (automatic = false and indexMode.NONE). This should be stronger validation", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17985#discussion_r538828191", "createdAt": "2020-12-08T21:41:21Z", "author": {"login": "Blackbaud-EricSlater"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/DocumentCollection.java", "diffHunk": "@@ -90,6 +90,7 @@ public void setIndexingPolicy(IndexingPolicy indexingPolicy) {\n         }\n \n         this.indexingPolicy = indexingPolicy;\n+        setProperty(this, Constants.Properties.INDEXING_POLICY, this.indexingPolicy);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwNzc4Ng=="}, "originalCommit": {"oid": "0869c64386eff0fdcfafb7ff608f1f1a75b68daa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgzNDk5MQ==", "bodyText": "thank you @Blackbaud-EricSlater\n@kushagraThapar please run the full CI.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17985#discussion_r538834991", "createdAt": "2020-12-08T21:52:58Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/DocumentCollection.java", "diffHunk": "@@ -90,6 +90,7 @@ public void setIndexingPolicy(IndexingPolicy indexingPolicy) {\n         }\n \n         this.indexingPolicy = indexingPolicy;\n+        setProperty(this, Constants.Properties.INDEXING_POLICY, this.indexingPolicy);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwNzc4Ng=="}, "originalCommit": {"oid": "0869c64386eff0fdcfafb7ff608f1f1a75b68daa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg1MTE3Nw==", "bodyText": "Thanks @Blackbaud-EricSlater for updating the tests, however on the spring side, can you please add the support for CosmosReactiveRepository as well ?\nOtherwise, when using reactiveRepositoies, the indexing policy update will not take affect.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17985#discussion_r538851177", "createdAt": "2020-12-08T22:20:22Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/DocumentCollection.java", "diffHunk": "@@ -90,6 +90,7 @@ public void setIndexingPolicy(IndexingPolicy indexingPolicy) {\n         }\n \n         this.indexingPolicy = indexingPolicy;\n+        setProperty(this, Constants.Properties.INDEXING_POLICY, this.indexingPolicy);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwNzc4Ng=="}, "originalCommit": {"oid": "0869c64386eff0fdcfafb7ff608f1f1a75b68daa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg3MDIxNg==", "bodyText": "will do", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17985#discussion_r538870216", "createdAt": "2020-12-08T22:55:51Z", "author": {"login": "Blackbaud-EricSlater"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/DocumentCollection.java", "diffHunk": "@@ -90,6 +90,7 @@ public void setIndexingPolicy(IndexingPolicy indexingPolicy) {\n         }\n \n         this.indexingPolicy = indexingPolicy;\n+        setProperty(this, Constants.Properties.INDEXING_POLICY, this.indexingPolicy);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwNzc4Ng=="}, "originalCommit": {"oid": "0869c64386eff0fdcfafb7ff608f1f1a75b68daa"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzY4OTE3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/domain/IndexPolicyEntity.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODozMzo0NFrOICjdOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOToxNjowOVrOIClLaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU0ODk4Ng==", "bodyText": "header missing.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17985#discussion_r539548986", "createdAt": "2020-12-09T18:33:44Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/domain/IndexPolicyEntity.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.azure.spring.data.cosmos.domain;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bc6dd1df55a0922dda3cc3a367a6fbbcf9786e6"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3NzE5NQ==", "bodyText": "fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17985#discussion_r539577195", "createdAt": "2020-12-09T19:16:09Z", "author": {"login": "Blackbaud-EricSlater"}, "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/domain/IndexPolicyEntity.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.azure.spring.data.cosmos.domain;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU0ODk4Ng=="}, "originalCommit": {"oid": "5bc6dd1df55a0922dda3cc3a367a6fbbcf9786e6"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzY4OTcxOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/integration/IndexPolicyUpdateIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODozMzo1MVrOICjdiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOToxNTo1NFrOIClKtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU0OTA2Nw==", "bodyText": "header missing.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17985#discussion_r539549067", "createdAt": "2020-12-09T18:33:51Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/integration/IndexPolicyUpdateIT.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package com.azure.spring.data.cosmos.repository.integration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bc6dd1df55a0922dda3cc3a367a6fbbcf9786e6"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3NzAxNA==", "bodyText": "fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17985#discussion_r539577014", "createdAt": "2020-12-09T19:15:54Z", "author": {"login": "Blackbaud-EricSlater"}, "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/integration/IndexPolicyUpdateIT.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package com.azure.spring.data.cosmos.repository.integration;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU0OTA2Nw=="}, "originalCommit": {"oid": "5bc6dd1df55a0922dda3cc3a367a6fbbcf9786e6"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzY5MDIwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/integration/ReactiveIndexPolicyUpdateIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODozNDowMFrOICjd5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOToxNjowNFrOIClLPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU0OTE1Nw==", "bodyText": "header missing.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17985#discussion_r539549157", "createdAt": "2020-12-09T18:34:00Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/integration/ReactiveIndexPolicyUpdateIT.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package com.azure.spring.data.cosmos.repository.integration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bc6dd1df55a0922dda3cc3a367a6fbbcf9786e6"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3NzE1MQ==", "bodyText": "fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17985#discussion_r539577151", "createdAt": "2020-12-09T19:16:04Z", "author": {"login": "Blackbaud-EricSlater"}, "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/integration/ReactiveIndexPolicyUpdateIT.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package com.azure.spring.data.cosmos.repository.integration;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU0OTE1Nw=="}, "originalCommit": {"oid": "5bc6dd1df55a0922dda3cc3a367a6fbbcf9786e6"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMDQyNzY5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/repository/support/IndexPolicyCompareService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDoxMzo0MFrOIEXRgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDowNToyOFrOIGdx9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ0NjUyOQ==", "bodyText": "@Blackbaud-EricSlater - why do we need an instance here ?\nSince this is a stateless service, creating instance here is redundant in my opinion, thoughts ?\nIt will unnecessary create multiple instances of IndexPolicyCompareService, where in case of static method, all it needs is just the Class instance, which does not pose a risk of memory leak.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17985#discussion_r541446529", "createdAt": "2020-12-12T00:13:40Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/repository/support/IndexPolicyCompareService.java", "diffHunk": "@@ -0,0 +1,62 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.data.cosmos.repository.support;\n+\n+import com.azure.cosmos.models.ExcludedPath;\n+import com.azure.cosmos.models.IncludedPath;\n+import com.azure.cosmos.models.IndexingPolicy;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Class for determining if the index policy currenlt applied to the container matches the index policy that is\n+ * specified on an entities' @CosmosIndexingPolicy annotation\n+ */\n+public class IndexPolicyCompareService {\n+\n+    public static boolean policyNeedsUpdate(IndexingPolicy existingPolicy, IndexingPolicy newPolicy) {\n+        return new IndexPolicyCompareService().needsUpdate(existingPolicy, newPolicy);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d01b84aa05122ae31d295117002723afb776da34"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYwODE2Mg==", "bodyText": "@Blackbaud-EricSlater - can you please implement the above changes so we can get this PR in ?\nI am currently out on vacation, and won't be able to review after tomorrow.\nIn case you are out too, we can merge it in January.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17985#discussion_r543608162", "createdAt": "2020-12-15T19:03:21Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/repository/support/IndexPolicyCompareService.java", "diffHunk": "@@ -0,0 +1,62 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.data.cosmos.repository.support;\n+\n+import com.azure.cosmos.models.ExcludedPath;\n+import com.azure.cosmos.models.IncludedPath;\n+import com.azure.cosmos.models.IndexingPolicy;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Class for determining if the index policy currenlt applied to the container matches the index policy that is\n+ * specified on an entities' @CosmosIndexingPolicy annotation\n+ */\n+public class IndexPolicyCompareService {\n+\n+    public static boolean policyNeedsUpdate(IndexingPolicy existingPolicy, IndexingPolicy newPolicy) {\n+        return new IndexPolicyCompareService().needsUpdate(existingPolicy, newPolicy);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ0NjUyOQ=="}, "originalCommit": {"oid": "d01b84aa05122ae31d295117002723afb776da34"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY1MDI5NA==", "bodyText": "fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17985#discussion_r543650294", "createdAt": "2020-12-15T20:05:28Z", "author": {"login": "Blackbaud-EricSlater"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/repository/support/IndexPolicyCompareService.java", "diffHunk": "@@ -0,0 +1,62 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.data.cosmos.repository.support;\n+\n+import com.azure.cosmos.models.ExcludedPath;\n+import com.azure.cosmos.models.IncludedPath;\n+import com.azure.cosmos.models.IndexingPolicy;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Class for determining if the index policy currenlt applied to the container matches the index policy that is\n+ * specified on an entities' @CosmosIndexingPolicy annotation\n+ */\n+public class IndexPolicyCompareService {\n+\n+    public static boolean policyNeedsUpdate(IndexingPolicy existingPolicy, IndexingPolicy newPolicy) {\n+        return new IndexPolicyCompareService().needsUpdate(existingPolicy, newPolicy);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ0NjUyOQ=="}, "originalCommit": {"oid": "d01b84aa05122ae31d295117002723afb776da34"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2650, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}