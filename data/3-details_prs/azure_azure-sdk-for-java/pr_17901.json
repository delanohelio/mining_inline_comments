{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMTU4NjEz", "number": 17901, "title": "AADAuthorizedClinetRepo for Obo flow", "bodyText": "This a pr for AADOAuth2OboAuthorizedClientRepository.\nenable current API to call other API via on behalf of flow", "createdAt": "2020-12-01T09:29:02Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901", "merged": true, "mergeCommit": {"oid": "959e3fa288b8dcd880b41f4fd85aad239bbdb0c3"}, "closed": true, "closedAt": "2020-12-15T05:18:39Z", "author": {"login": "wujack778"}, "timelineItems": {"totalCount": 53, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdh2cJMgH2gAyNTMwMTU4NjEzOjUwYTgyMmJjMzU1OTE0Y2Y4YjRkNDg2YzEyOGRkOWEyNjYzMDkyYjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmQxW4gH2gAyNTMwMTU4NjEzOjFlNjhjYTcyYzk0ZGQxNzFkZTk2MDk5MzMwNWYxY2NlODFiNDI5MTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "50a822bc355914cf8b4d486c128dd9a2663092b2", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/50a822bc355914cf8b4d486c128dd9a2663092b2", "committedDate": "2020-12-01T09:22:21Z", "message": "obo flow repo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e18ba6f4b61484a5b5eac1274c8c0278ee7b6e6", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6e18ba6f4b61484a5b5eac1274c8c0278ee7b6e6", "committedDate": "2020-12-02T07:58:29Z", "message": "AADOboAutClientRepo and sample"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73f02c0adcc69d3e0aa8957081509808832389d2", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/73f02c0adcc69d3e0aa8957081509808832389d2", "committedDate": "2020-12-02T08:50:27Z", "message": "Merge branch 'master' of git://github.com/Azure/azure-sdk-for-java into obo-flow-repo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d90887c34587322c2100d9fc888c503b2e54f79f", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d90887c34587322c2100d9fc888c503b2e54f79f", "committedDate": "2020-12-02T08:56:28Z", "message": "for checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMzUwNjQ3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#pullrequestreview-543350647", "createdAt": "2020-12-03T00:34:42Z", "commit": {"oid": "d90887c34587322c2100d9fc888c503b2e54f79f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMDozNDo0MlrOH90BCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMDozNDo0MlrOH90BCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU3NzQxOA==", "bodyText": "Hi, @sangonzal, @SomkaPe,\nWe are using msal to implement obo function in spring-framework.\nCould you please help to review this PR?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r534577418", "createdAt": "2020-12-03T00:34:42Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/resource/server/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.resource.server;\n+\n+import com.azure.spring.aad.implementation.AzureClientRegistrationRepository;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IClientSecret;\n+import com.microsoft.aad.msal4j.OnBehalfOfParameters;\n+import com.microsoft.aad.msal4j.UserAssertion;\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AbstractOAuth2Token;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.server.resource.authentication.AbstractOAuth2TokenAuthenticationToken;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.net.MalformedURLException;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedClientRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    private final AzureClientRegistrationRepository azureClientRegistrationRepository;\n+\n+    private Map<String, ConfidentialClientApplication> confidentialClientApplicationMap = new HashMap<>();\n+\n+    public AADOAuth2OboAuthorizedClientRepository(AzureClientRegistrationRepository azureClientRegistrationRepository) {\n+        this.azureClientRegistrationRepository = azureClientRegistrationRepository;\n+        Iterator<ClientRegistration> iterator = azureClientRegistrationRepository.iterator();\n+        while (iterator.hasNext()) {\n+            ClientRegistration next = iterator.next();\n+            this.confidentialClientApplicationMap.put(next.getClientId(), createApp(next));\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends OAuth2AuthorizedClient> T loadAuthorizedClient(String registrationId,\n+                                                                     Authentication authentication,\n+                                                                     HttpServletRequest request) {\n+        try {\n+            ClientRegistration clientRegistration = azureClientRegistrationRepository\n+                .findByRegistrationId(registrationId);\n+\n+            AbstractOAuth2TokenAuthenticationToken<AbstractOAuth2Token> authenticationToken =\n+                (AbstractOAuth2TokenAuthenticationToken)\n+                    authentication;\n+\n+            String accessToken = authenticationToken.getToken().getTokenValue();\n+\n+            OnBehalfOfParameters parameters = OnBehalfOfParameters\n+                .builder(clientRegistration.getScopes(), new UserAssertion(accessToken))\n+                .build();\n+\n+            ConfidentialClientApplication clientApplication = confidentialClientApplicationMap.get(clientRegistration\n+                .getClientId());\n+\n+            String oboAccessToken = clientApplication.acquireToken(parameters).get().accessToken();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d90887c34587322c2100d9fc888c503b2e54f79f"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d57fdd93dad8968fbbaf61c25938e8692f497fb", "author": {"user": {"login": "moarychan", "name": "Moary Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6d57fdd93dad8968fbbaf61c25938e8692f497fb", "committedDate": "2020-12-03T07:25:03Z", "message": "test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cee53b0b6d99b7641da75a10e5b1716a2182ffe4", "author": {"user": {"login": "moarychan", "name": "Moary Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cee53b0b6d99b7641da75a10e5b1716a2182ffe4", "committedDate": "2020-12-04T07:54:26Z", "message": "Improve resource server accesses other resources scenarios; separate resource and client configuration for resource server side"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "612a1ee18bb9c04a78635312844ebc8372ad88e0", "author": {"user": {"login": "moarychan", "name": "Moary Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/612a1ee18bb9c04a78635312844ebc8372ad88e0", "committedDate": "2020-12-04T07:59:25Z", "message": "Delete unused module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52b87d7c0a631265c30f972f5c397e54e7f47af4", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/52b87d7c0a631265c30f972f5c397e54e7f47af4", "committedDate": "2020-12-04T08:11:02Z", "message": "commit AADOboAuClientRepo UT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "287cfaeca092aace0ca426447a3dea4fca098e31", "author": {"user": {"login": "moarychan", "name": "Moary Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/287cfaeca092aace0ca426447a3dea4fca098e31", "committedDate": "2020-12-04T08:36:42Z", "message": "Resolve conflicts form master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7df70776c0b9f6249c46be27a8b0efbfc525220", "author": {"user": {"login": "moarychan", "name": "Moary Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c7df70776c0b9f6249c46be27a8b0efbfc525220", "committedDate": "2020-12-04T09:02:33Z", "message": "Fix conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ceea5c59681497d7c2456ad1581b5514f4dd81e", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9ceea5c59681497d7c2456ad1581b5514f4dd81e", "committedDate": "2020-12-04T09:35:43Z", "message": "fix AADOboAuClientRepo UT details"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MjEzNzE2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#pullrequestreview-545213716", "createdAt": "2020-12-04T18:50:33Z", "commit": {"oid": "9ceea5c59681497d7c2456ad1581b5514f4dd81e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODo1MDozNFrOH_dmHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODo1NzozMFrOH_d2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwNzIzMA==", "bodyText": "I'm not familiar with Spring Security - are you creating a ConfidentialClient application per request, or is one created at startup and then reused?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r536307230", "createdAt": "2020-12-04T18:50:34Z", "author": {"login": "sangonzal"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IClientSecret;\n+import com.microsoft.aad.msal4j.OnBehalfOfParameters;\n+import com.microsoft.aad.msal4j.UserAssertion;\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AbstractOAuth2Token;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.server.resource.authentication.AbstractOAuth2TokenAuthenticationToken;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.net.MalformedURLException;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedClientRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    private final AzureClientRegistrationRepository azureClientRegistrationRepository;\n+\n+    private Map<String, ConfidentialClientApplication> confidentialClientApplicationMap = new HashMap<>();\n+\n+    public AADOAuth2OboAuthorizedClientRepository(AzureClientRegistrationRepository azureClientRegistrationRepository) {\n+        this.azureClientRegistrationRepository = azureClientRegistrationRepository;\n+        Iterator<ClientRegistration> iterator = azureClientRegistrationRepository.iterator();\n+        while (iterator.hasNext()) {\n+            ClientRegistration next = iterator.next();\n+            this.confidentialClientApplicationMap.put(next.getClientId(), createApp(next));\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends OAuth2AuthorizedClient> T loadAuthorizedClient(String registrationId,\n+                                                                     Authentication authentication,\n+                                                                     HttpServletRequest request) {\n+        try {\n+            ClientRegistration clientRegistration = azureClientRegistrationRepository\n+                .findByRegistrationId(registrationId);\n+\n+            AbstractOAuth2TokenAuthenticationToken<AbstractOAuth2Token> authenticationToken =\n+                (AbstractOAuth2TokenAuthenticationToken)\n+                    authentication;\n+\n+            String accessToken = authenticationToken.getToken().getTokenValue();\n+\n+            OnBehalfOfParameters parameters = OnBehalfOfParameters\n+                .builder(clientRegistration.getScopes(), new UserAssertion(accessToken))\n+                .build();\n+\n+            ConfidentialClientApplication clientApplication = confidentialClientApplicationMap.get(clientRegistration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ceea5c59681497d7c2456ad1581b5514f4dd81e"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxMTM1MA==", "bodyText": "You're not leveraging the MSAL Token cache here. Every time you need to get a token, you'll make a call to AAD, even if you have a valid cached token. If you want to use the MSAL token cache, we have a sample that shows how you can use the token cache with OBO:", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r536311350", "createdAt": "2020-12-04T18:57:30Z", "author": {"login": "sangonzal"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IClientSecret;\n+import com.microsoft.aad.msal4j.OnBehalfOfParameters;\n+import com.microsoft.aad.msal4j.UserAssertion;\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AbstractOAuth2Token;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.server.resource.authentication.AbstractOAuth2TokenAuthenticationToken;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.net.MalformedURLException;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedClientRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    private final AzureClientRegistrationRepository azureClientRegistrationRepository;\n+\n+    private Map<String, ConfidentialClientApplication> confidentialClientApplicationMap = new HashMap<>();\n+\n+    public AADOAuth2OboAuthorizedClientRepository(AzureClientRegistrationRepository azureClientRegistrationRepository) {\n+        this.azureClientRegistrationRepository = azureClientRegistrationRepository;\n+        Iterator<ClientRegistration> iterator = azureClientRegistrationRepository.iterator();\n+        while (iterator.hasNext()) {\n+            ClientRegistration next = iterator.next();\n+            this.confidentialClientApplicationMap.put(next.getClientId(), createApp(next));\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends OAuth2AuthorizedClient> T loadAuthorizedClient(String registrationId,\n+                                                                     Authentication authentication,\n+                                                                     HttpServletRequest request) {\n+        try {\n+            ClientRegistration clientRegistration = azureClientRegistrationRepository\n+                .findByRegistrationId(registrationId);\n+\n+            AbstractOAuth2TokenAuthenticationToken<AbstractOAuth2Token> authenticationToken =\n+                (AbstractOAuth2TokenAuthenticationToken)\n+                    authentication;\n+\n+            String accessToken = authenticationToken.getToken().getTokenValue();\n+\n+            OnBehalfOfParameters parameters = OnBehalfOfParameters\n+                .builder(clientRegistration.getScopes(), new UserAssertion(accessToken))\n+                .build();\n+\n+            ConfidentialClientApplication clientApplication = confidentialClientApplicationMap.get(clientRegistration\n+                .getClientId());\n+\n+            String oboAccessToken = clientApplication.acquireToken(parameters).get().accessToken();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ceea5c59681497d7c2456ad1581b5514f4dd81e"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1021dcc8e8e52e7f76f3f5e1ad0c711203787eff", "author": {"user": {"login": "moarychan", "name": "Moary Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1021dcc8e8e52e7f76f3f5e1ad0c711203787eff", "committedDate": "2020-12-08T01:44:27Z", "message": "Add sample README.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cda9379708c7f053c3dec5fa4d8124146685604b", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cda9379708c7f053c3dec5fa4d8124146685604b", "committedDate": "2020-12-08T02:02:19Z", "message": "create AADOboAuClientRepo ut"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e04c789066663f49fbf4c174df3f5e4bbc4ee669", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e04c789066663f49fbf4c174df3f5e4bbc4ee669", "committedDate": "2020-12-08T02:40:51Z", "message": "Refactor AADOboAuClientRepo ut"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23e5ee67baf5afced089a30472fca93a749eeaa9", "author": {"user": {"login": "saragluna", "name": "Xiaolu Dai"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/23e5ee67baf5afced089a30472fca93a749eeaa9", "committedDate": "2020-12-08T03:41:54Z", "message": "refactor UTs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "764196f818a6385e9423a342738aa05e6f0e347e", "author": {"user": {"login": "backwind1233", "name": "zhihaoguo"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/764196f818a6385e9423a342738aa05e6f0e347e", "committedDate": "2020-12-08T07:03:04Z", "message": "- add request level cache for OAuth2AuthorizedClient\n- code format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e31b1b9f415a4ec52554926aad2e0768417738b", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3e31b1b9f415a4ec52554926aad2e0768417738b", "committedDate": "2020-12-08T08:26:22Z", "message": "obo config ut"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4f36df2309c4a5d87461d77c3182ff801271935", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c4f36df2309c4a5d87461d77c3182ff801271935", "committedDate": "2020-12-08T09:42:58Z", "message": "delete old obo sample in ci and add 'unchecked' to repo ut"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e76c4027dc80f0d9078ad05cc88368b33084b44", "author": {"user": {"login": "moarychan", "name": "Moary Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8e76c4027dc80f0d9078ad05cc88368b33084b44", "committedDate": "2020-12-08T09:44:42Z", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java into obo-flow-repo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0b96f7a96dcdfbd7f1c6265442f30e67fb2a119", "author": {"user": {"login": "moarychan", "name": "Moary Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b0b96f7a96dcdfbd7f1c6265442f30e67fb2a119", "committedDate": "2020-12-08T09:46:07Z", "message": "Merge remote-tracking branch 'jackwu/obo-flow-repo' into obo-flow-repo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab7d21ea1924e7192127fb0ef5ef3c6b151813f9", "author": {"user": {"login": "moarychan", "name": "Moary Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ab7d21ea1924e7192127fb0ef5ef3c6b151813f9", "committedDate": "2020-12-08T09:57:43Z", "message": "Fix building issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21ffdee65317709a63f6cd1484ea9f0e23715424", "author": {"user": {"login": "moarychan", "name": "Moary Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/21ffdee65317709a63f6cd1484ea9f0e23715424", "committedDate": "2020-12-09T01:28:40Z", "message": "Remove unused class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "889f9773c2cafd6fbefb1fe4c1b0cb17a23169de", "author": {"user": {"login": "backwind1233", "name": "zhihaoguo"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/889f9773c2cafd6fbefb1fe4c1b0cb17a23169de", "committedDate": "2020-12-09T02:35:04Z", "message": "Merge branch 'obo-flow-repo' of github.com:wujack778/azure-sdk-for-java into obo-flow-repo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78344f396a7d21967c9eafbb8e297652dd4e8f92", "author": {"user": {"login": "backwind1233", "name": "zhihaoguo"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/78344f396a7d21967c9eafbb8e297652dd4e8f92", "committedDate": "2020-12-09T02:47:21Z", "message": "- checkStyle code format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90427b491e83bacc906ea069f2d3d2c2acc466f1", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/90427b491e83bacc906ea069f2d3d2c2acc466f1", "committedDate": "2020-12-09T03:11:42Z", "message": "Merge branch 'master' of git://github.com/Azure/azure-sdk-for-java into obo-flow-repo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c29ac9454484c27e60e8098a1096b045fdfebb9", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9c29ac9454484c27e60e8098a1096b045fdfebb9", "committedDate": "2020-12-09T03:13:01Z", "message": "Merge remote-tracking branch 'origin/obo-flow-repo' into obo-flow-repo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "faf298607eb83795670d6aa85b34be92a18577a9", "author": {"user": {"login": "backwind1233", "name": "zhihaoguo"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/faf298607eb83795670d6aa85b34be92a18577a9", "committedDate": "2020-12-09T08:18:11Z", "message": "code refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbf12761f138cdd73bafb121e2cc7bee526e3ea0", "author": {"user": {"login": "backwind1233", "name": "zhihaoguo"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fbf12761f138cdd73bafb121e2cc7bee526e3ea0", "committedDate": "2020-12-09T08:45:20Z", "message": "checkstyle error fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d0adb9edb38b95dd8756a7a13503de45617f1d7", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6d0adb9edb38b95dd8756a7a13503de45617f1d7", "committedDate": "2020-12-09T08:53:51Z", "message": "Merge remote-tracking branch 'origin/obo-flow-repo' into obo-flow-repo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d", "author": {"user": {"login": "moarychan", "name": "Moary Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c26840302da50123bd0a818c64ef7c515fab8d2d", "committedDate": "2020-12-09T10:43:08Z", "message": "Add enabled switch for web application and resource server scenario; fix building error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e34256a18dc18fb61bc3941cd66467cfa5202033", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e34256a18dc18fb61bc3941cd66467cfa5202033", "committedDate": "2020-12-09T10:44:20Z", "message": "Merge remote-tracking branch 'origin/obo-flow-repo' into obo-flow-repo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef58b3fac0c1260c3851dca399c17c989ddd35bc", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ef58b3fac0c1260c3851dca399c17c989ddd35bc", "committedDate": "2020-12-10T02:53:34Z", "message": "fix AzureActiveDirectoryConfigurationTest failure and delete Additional imported packages"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NzU2NjQ5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#pullrequestreview-548756649", "createdAt": "2020-12-10T01:49:20Z", "commit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMTo0OToyMFrOICxqSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo0ODozOVrOIC1Ylw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4MTcwNA==", "bodyText": "Isn't this application name too long? Could we make it shorter and more concise.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539781704", "createdAt": "2020-12-10T01:49:20Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/README.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# OAuth 2.0 Sample for Azure AD Spring Boot Starter Resource Server library for Java\n+\n+## Key concepts\n+[Resource server access other resources usage][resource-server-access-other-resources-usage] is more common, this is an extension of the [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server]. Similarly, this sample illustrates how to protect a Java web API by restricting access to its resources to authorized accounts, and the restricted resource will access other restricted resource, such as Graph API and Custom API.\n+\n+\n+## Getting started\n+We will prepare two application to demonstrate the dependent calls of resources.\n+Another sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] will be as Custom API resource.\n+\n+### Environment checklist\n+We need to ensure that this [environment checklist][ready-to-run-checklist] is completed before the run.\n+\n+### Include the package\n+\n+```xml\n+<dependencies>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-web</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-security</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.azure.spring</groupId>\n+      <artifactId>azure-spring-boot-starter-active-directory</artifactId>\n+      <version>3.0.0-beta.2</version> <!-- {x-version-update;com.azure.spring:azure-spring-boot-starter-active-directory;current} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-resource-server</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-client</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.microsoft.azure</groupId>\n+      <artifactId>msal4j</artifactId>\n+      <version>1.8.0</version> <!-- {x-version-update;com.microsoft.azure:msal4j;external_dependency} -->\n+    </dependency>\n+</dependencies>\n+```\n+\n+### Register your Web API\n+You can follow [Register the Web API][register-the-web-api] to add `ResourceAccessGraph.read`, `ResourceAccessGraphCustomResources.read` scopes. \n+Convention current application id url is `api://sample-client-id`, application name is `azure-spring-boot-sample-active-directory-resource-server-access-other-resources`; the application id url of the sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] is `custom-client-id`, the application name is `azure-spring-boot-sample-active-directory-spring-security-resource-server`.  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4MjIxMA==", "bodyText": "How about changing this to Add permissions or Add API permissions", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539782210", "createdAt": "2020-12-10T01:50:39Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/README.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# OAuth 2.0 Sample for Azure AD Spring Boot Starter Resource Server library for Java\n+\n+## Key concepts\n+[Resource server access other resources usage][resource-server-access-other-resources-usage] is more common, this is an extension of the [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server]. Similarly, this sample illustrates how to protect a Java web API by restricting access to its resources to authorized accounts, and the restricted resource will access other restricted resource, such as Graph API and Custom API.\n+\n+\n+## Getting started\n+We will prepare two application to demonstrate the dependent calls of resources.\n+Another sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] will be as Custom API resource.\n+\n+### Environment checklist\n+We need to ensure that this [environment checklist][ready-to-run-checklist] is completed before the run.\n+\n+### Include the package\n+\n+```xml\n+<dependencies>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-web</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-security</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.azure.spring</groupId>\n+      <artifactId>azure-spring-boot-starter-active-directory</artifactId>\n+      <version>3.0.0-beta.2</version> <!-- {x-version-update;com.azure.spring:azure-spring-boot-starter-active-directory;current} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-resource-server</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-client</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.microsoft.azure</groupId>\n+      <artifactId>msal4j</artifactId>\n+      <version>1.8.0</version> <!-- {x-version-update;com.microsoft.azure:msal4j;external_dependency} -->\n+    </dependency>\n+</dependencies>\n+```\n+\n+### Register your Web API\n+You can follow [Register the Web API][register-the-web-api] to add `ResourceAccessGraph.read`, `ResourceAccessGraphCustomResources.read` scopes. \n+Convention current application id url is `api://sample-client-id`, application name is `azure-spring-boot-sample-active-directory-resource-server-access-other-resources`; the application id url of the sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] is `custom-client-id`, the application name is `azure-spring-boot-sample-active-directory-spring-security-resource-server`.  \n+After adding as shown below:\n+\n+   ![API Permissions](resource/resource-access-other-resources-add-scope.png)\n+\n+### Add Custom API permissions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4MjQ3NQ==", "bodyText": "Why do we need openid scope here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539782475", "createdAt": "2020-12-10T01:51:28Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/README.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# OAuth 2.0 Sample for Azure AD Spring Boot Starter Resource Server library for Java\n+\n+## Key concepts\n+[Resource server access other resources usage][resource-server-access-other-resources-usage] is more common, this is an extension of the [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server]. Similarly, this sample illustrates how to protect a Java web API by restricting access to its resources to authorized accounts, and the restricted resource will access other restricted resource, such as Graph API and Custom API.\n+\n+\n+## Getting started\n+We will prepare two application to demonstrate the dependent calls of resources.\n+Another sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] will be as Custom API resource.\n+\n+### Environment checklist\n+We need to ensure that this [environment checklist][ready-to-run-checklist] is completed before the run.\n+\n+### Include the package\n+\n+```xml\n+<dependencies>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-web</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-security</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.azure.spring</groupId>\n+      <artifactId>azure-spring-boot-starter-active-directory</artifactId>\n+      <version>3.0.0-beta.2</version> <!-- {x-version-update;com.azure.spring:azure-spring-boot-starter-active-directory;current} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-resource-server</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-client</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.microsoft.azure</groupId>\n+      <artifactId>msal4j</artifactId>\n+      <version>1.8.0</version> <!-- {x-version-update;com.microsoft.azure:msal4j;external_dependency} -->\n+    </dependency>\n+</dependencies>\n+```\n+\n+### Register your Web API\n+You can follow [Register the Web API][register-the-web-api] to add `ResourceAccessGraph.read`, `ResourceAccessGraphCustomResources.read` scopes. \n+Convention current application id url is `api://sample-client-id`, application name is `azure-spring-boot-sample-active-directory-resource-server-access-other-resources`; the application id url of the sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] is `custom-client-id`, the application name is `azure-spring-boot-sample-active-directory-spring-security-resource-server`.  \n+After adding as shown below:\n+\n+   ![API Permissions](resource/resource-access-other-resources-add-scope.png)\n+\n+### Add Custom API permissions\n+The current Web API will access Graph API and Custom API. \n+\n+Sign in to the [Azure portal][azure-portal]. If you have access to multiple tenants, use the **Directory + subscription** filter  in the top menu to select the tenant containing your client app's registration.\n+\n+#### Add Graph API Permission\n+1. Select **Azure Active Directory** > **App registrations**, and then select your current sample application (not your web API).\n+\n+2. Select **API permissions** > **Add a permission** > **Microsoft APIs** > **Microsoft Graph** > **Delegated permissions**, select **offline_access**, **openid**, **User.Read**, select **Add permission** to complete the process.\n+\n+#### Add Custom API Permission\n+\n+1. Select **Azure Active Directory** > **App registrations**, and then select your current sample application (not your web API).\n+\n+2. Select **API permissions** > **Add a permission** > **My APIs**, select *azure-spring-boot-sample-active-directory-spring-security-resource-server* application name.\n+\n+3. **Delegated permissions** is selected by default\uff0c Select **File** > **File.Read** permission, select **Add permission** to complete the process.\n+\n+### Grant consent for your tenant\n+Respectively grant admin consent to the Graph and Custom permissions. After adding as shown below:\n+   ![API Permissions](resource/resource-access-other-resources-add-permissions.png)\n+\n+## Examples\n+\n+### Configure application.yaml\n+\n+```yaml\n+azure:\n+  activedirectory:\n+    client-id: [resource-server-application-client-id]\n+    client-secret: [resource-server-application-client-secret]\n+    tenant-id: [teanant-id-registered-by-application]\n+    app-id-uri: api://sample-client-id\n+    authorization:\n+      graph:\n+        scopes:\n+          - openid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4MzIxNw==", "bodyText": "How about use xxx-sample-active-directory-resource-server-obo as the sample name?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539783217", "createdAt": "2020-12-10T01:53:30Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/README.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# OAuth 2.0 Sample for Azure AD Spring Boot Starter Resource Server library for Java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwMzEwNw==", "bodyText": "openid and offline_access are not scopes for custom, right?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539803107", "createdAt": "2020-12-10T02:46:38Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/README.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# OAuth 2.0 Sample for Azure AD Spring Boot Starter Resource Server library for Java\n+\n+## Key concepts\n+[Resource server access other resources usage][resource-server-access-other-resources-usage] is more common, this is an extension of the [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server]. Similarly, this sample illustrates how to protect a Java web API by restricting access to its resources to authorized accounts, and the restricted resource will access other restricted resource, such as Graph API and Custom API.\n+\n+\n+## Getting started\n+We will prepare two application to demonstrate the dependent calls of resources.\n+Another sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] will be as Custom API resource.\n+\n+### Environment checklist\n+We need to ensure that this [environment checklist][ready-to-run-checklist] is completed before the run.\n+\n+### Include the package\n+\n+```xml\n+<dependencies>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-web</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-security</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.azure.spring</groupId>\n+      <artifactId>azure-spring-boot-starter-active-directory</artifactId>\n+      <version>3.0.0-beta.2</version> <!-- {x-version-update;com.azure.spring:azure-spring-boot-starter-active-directory;current} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-resource-server</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-client</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.microsoft.azure</groupId>\n+      <artifactId>msal4j</artifactId>\n+      <version>1.8.0</version> <!-- {x-version-update;com.microsoft.azure:msal4j;external_dependency} -->\n+    </dependency>\n+</dependencies>\n+```\n+\n+### Register your Web API\n+You can follow [Register the Web API][register-the-web-api] to add `ResourceAccessGraph.read`, `ResourceAccessGraphCustomResources.read` scopes. \n+Convention current application id url is `api://sample-client-id`, application name is `azure-spring-boot-sample-active-directory-resource-server-access-other-resources`; the application id url of the sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] is `custom-client-id`, the application name is `azure-spring-boot-sample-active-directory-spring-security-resource-server`.  \n+After adding as shown below:\n+\n+   ![API Permissions](resource/resource-access-other-resources-add-scope.png)\n+\n+### Add Custom API permissions\n+The current Web API will access Graph API and Custom API. \n+\n+Sign in to the [Azure portal][azure-portal]. If you have access to multiple tenants, use the **Directory + subscription** filter  in the top menu to select the tenant containing your client app's registration.\n+\n+#### Add Graph API Permission\n+1. Select **Azure Active Directory** > **App registrations**, and then select your current sample application (not your web API).\n+\n+2. Select **API permissions** > **Add a permission** > **Microsoft APIs** > **Microsoft Graph** > **Delegated permissions**, select **offline_access**, **openid**, **User.Read**, select **Add permission** to complete the process.\n+\n+#### Add Custom API Permission\n+\n+1. Select **Azure Active Directory** > **App registrations**, and then select your current sample application (not your web API).\n+\n+2. Select **API permissions** > **Add a permission** > **My APIs**, select *azure-spring-boot-sample-active-directory-spring-security-resource-server* application name.\n+\n+3. **Delegated permissions** is selected by default\uff0c Select **File** > **File.Read** permission, select **Add permission** to complete the process.\n+\n+### Grant consent for your tenant\n+Respectively grant admin consent to the Graph and Custom permissions. After adding as shown below:\n+   ![API Permissions](resource/resource-access-other-resources-add-permissions.png)\n+\n+## Examples\n+\n+### Configure application.yaml\n+\n+```yaml\n+azure:\n+  activedirectory:\n+    client-id: [resource-server-application-client-id]\n+    client-secret: [resource-server-application-client-secret]\n+    tenant-id: [teanant-id-registered-by-application]\n+    app-id-uri: api://sample-client-id\n+    authorization:\n+      graph:\n+        scopes:\n+          - openid\n+          - offline_access\n+          - User.read\n+      custom:\n+        scopes:\n+          - openid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwMzYzMg==", "bodyText": "Why do we create this in the configuration?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539803632", "createdAt": "2020-12-10T02:48:07Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/src/main/java/com/azure/spring/sample/aad/configuration/AADSampleConfiguration.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.azure.spring.sample.aad.configuration;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientManager;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientProvider;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.reactive.function.client.ServletOAuth2AuthorizedClientExchangeFilterFunction;\n+import org.springframework.web.reactive.function.client.WebClient;\n+\n+@Configuration\n+public class AADSampleConfiguration {\n+\n+    @Bean\n+    public OAuth2AuthorizedClientManager authorizedClientManager(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNDAyNg==", "bodyText": "nit: refactor this to LOGGER", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539804026", "createdAt": "2020-12-10T02:49:28Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/src/main/java/com/azure/spring/sample/aad/controller/SampleController.java", "diffHunk": "@@ -0,0 +1,112 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.sample.aad.controller;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.annotation.RegisteredOAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.context.request.RequestAttributes;\n+import org.springframework.web.context.request.RequestContextHolder;\n+import org.springframework.web.context.request.ServletRequestAttributes;\n+import org.springframework.web.reactive.function.client.WebClient;\n+\n+import static org.springframework.security.oauth2.client.web.reactive.function.client.ServletOAuth2AuthorizedClientExchangeFilterFunction.oauth2AuthorizedClient;\n+\n+@RestController\n+public class SampleController {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SampleController.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNDgxMg==", "bodyText": "Is there a way to make this more concise?\nhttp.authorizeRequests()\n    .anyRequest().authenticated()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539804812", "createdAt": "2020-12-10T02:51:43Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/src/main/java/com/azure/spring/sample/aad/security/AADSampleSecurityConfiguration.java", "diffHunk": "@@ -0,0 +1,26 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.sample.aad.security;\n+\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer;\n+\n+@EnableWebSecurity(debug = false)\n+@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)\n+public class AADSampleSecurityConfiguration extends WebSecurityConfigurerAdapter {\n+\n+    @Override\n+    protected void configure(HttpSecurity http) throws Exception {\n+\t\thttp.authorizeRequests((authorizeRequests) ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNTA2OQ==", "bodyText": "Why are we specifying this here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539805069", "createdAt": "2020-12-10T02:52:20Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/src/main/resources/application.yaml", "diffHunk": "@@ -0,0 +1,33 @@\n+server:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNTIxMw==", "bodyText": "Same here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539805213", "createdAt": "2020-12-10T02:52:40Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-access-other-resources/src/main/resources/application.yaml", "diffHunk": "@@ -0,0 +1,33 @@\n+server:\n+  port: 8081\n+\n+azure:\n+  activedirectory:\n+    user-group:\n+      allowed-groups:\n+        - group1\n+        - group2\n+    client-id: [resource-server-application-client-id]\n+    client-secret: [resource-server-application-client-secret]\n+    tenant-id: [teanant-id-registered-by-application]\n+    app-id-uri: [current-expose-application-id-url]\n+    authorization:\n+      graph:\n+        scopes:\n+          - openid\n+          - offline_access\n+          - User.read\n+      custom:\n+        scopes:\n+          - openid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNTM1OQ==", "bodyText": "Why is this needed?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539805359", "createdAt": "2020-12-10T02:53:12Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/pom.xml", "diffHunk": "@@ -70,6 +75,11 @@\n       <artifactId>nimbus-jose-jwt</artifactId>\n       <version>8.19</version> <!-- {x-version-update;com.nimbusds:nimbus-jose-jwt;external_dependency} -->\n     </dependency>\n+    <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNTkzMA==", "bodyText": "Do we need to bring another aad starter here? Designated for resource server case.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539805930", "createdAt": "2020-12-10T02:54:47Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/pom.xml", "diffHunk": "@@ -70,6 +75,11 @@\n       <artifactId>nimbus-jose-jwt</artifactId>\n       <version>8.19</version> <!-- {x-version-update;com.nimbusds:nimbus-jose-jwt;external_dependency} -->\n     </dependency>\n+    <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNTM1OQ=="}, "originalCommit": {"oid": "c26840302da50123bd0a818c64ef7c515fab8d2d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNjc3OQ==", "bodyText": "Are we only using this for the resource server case?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539806779", "createdAt": "2020-12-10T02:57:15Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/ClientRegistrationInitialization.java", "diffHunk": "@@ -0,0 +1,113 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad;\n+\n+import com.azure.spring.aad.webapp.AuthorizationProperties;\n+import com.azure.spring.aad.webapp.AuthorizationServerEndpoints;\n+import com.azure.spring.aad.webapp.AzureClientRegistration;\n+import com.azure.spring.autoconfigure.aad.AADAuthenticationProperties;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Client registration initialization based on AAD properties. Web application and resource server will quote.\n+ */\n+public class ClientRegistrationInitialization {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef58b3fac0c1260c3851dca399c17c989ddd35bc"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNzE2Mg==", "bodyText": "Please refactor this to LOGGER", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539807162", "createdAt": "2020-12-10T02:58:21Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -0,0 +1,148 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IClientSecret;\n+import com.microsoft.aad.msal4j.OnBehalfOfParameters;\n+import com.microsoft.aad.msal4j.UserAssertion;\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AbstractOAuth2Token;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.server.resource.authentication.AbstractOAuth2TokenAuthenticationToken;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.net.MalformedURLException;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+/**\n+ * <p>\n+ * AADOAuth2OboAuthorizedClientRepository\n+ * </p>\n+ */\n+public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedClientRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef58b3fac0c1260c3851dca399c17c989ddd35bc"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0MjcxMQ==", "bodyText": "We should add more test cases for client registrations. We could run the context with more properties,\nxxx:\n  graph:\n     scopes: xxx\nto check whether does the graph client exist?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r539842711", "createdAt": "2020-12-10T04:48:39Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import org.junit.Test;\n+import org.springframework.boot.test.context.FilteredClassLoader;\n+import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class AzureActiveDirectoryResourceServerClientConfigurationTest {\n+\n+    private static final String AAD_PROPERTY_PREFIX = \"azure.activedirectory.\";\n+\n+    private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()\n+        .withPropertyValues(AAD_PROPERTY_PREFIX + \"user-group.allowed-groups=group1\",\n+            AAD_PROPERTY_PREFIX + \"tenant-id=fake-tenant-id\",\n+            AAD_PROPERTY_PREFIX + \"client-id=fake-client-id\",\n+            AAD_PROPERTY_PREFIX + \"client-secret=fake-client-secret\",\n+            AAD_PROPERTY_PREFIX + \"web-application.enabled=false\");\n+\n+    @Test\n+    public void testNotExistBearerTokenAuthenticationToken() {\n+        this.contextRunner\n+            .withUserConfiguration(AzureActiveDirectoryResourceServerClientConfiguration.class)\n+            .withClassLoader(new FilteredClassLoader(BearerTokenAuthenticationToken.class))\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n+            });\n+    }\n+\n+    @Test\n+    public void testNotExistOAuth2LoginAuthenticationFilter() {\n+        this.contextRunner\n+            .withUserConfiguration(AzureActiveDirectoryResourceServerClientConfiguration.class)\n+            .withClassLoader(new FilteredClassLoader(OAuth2LoginAuthenticationFilter.class))\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n+            });\n+    }\n+\n+    @Test\n+    public void testOAuth2AuthorizedClientRepository() {\n+        this.contextRunner\n+            .withUserConfiguration(AzureActiveDirectoryResourceServerClientConfiguration.class)\n+            .run(context -> {\n+                final OAuth2AuthorizedClientRepository aadOboRepo = context.getBean(\n+                    AADOAuth2OboAuthorizedClientRepository.class);\n+                assertThat(aadOboRepo).isNotNull();\n+                assertThat(aadOboRepo).isExactlyInstanceOf(AADOAuth2OboAuthorizedClientRepository.class);\n+            });\n+    }\n+\n+    @Test\n+    public void testClientRegistrationRepository() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef58b3fac0c1260c3851dca399c17c989ddd35bc"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddcf6d2b18c6d5bafe604c10a1466890e3bc7fca", "author": {"user": {"login": "moarychan", "name": "Moary Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ddcf6d2b18c6d5bafe604c10a1466890e3bc7fca", "committedDate": "2020-12-10T06:34:24Z", "message": "Improve code according reviewer comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdaa241788d14c30094db9033b10c3bc856f0de7", "author": {"user": {"login": "moarychan", "name": "Moary Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cdaa241788d14c30094db9033b10c3bc856f0de7", "committedDate": "2020-12-10T06:52:12Z", "message": "Improve code according reviewer comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/aabc660cc884f44fe6706a84317ca5c46debb416", "committedDate": "2020-12-10T07:15:40Z", "message": "rename packageName in ci and 'LOG'"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5ODAxMDg2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#pullrequestreview-549801086", "createdAt": "2020-12-11T04:54:43Z", "commit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDo1NDo0M1rOIDpHRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNToxODoxNlrOIDphog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5MDI0Nw==", "bodyText": "Why is the resource server accessing other resources usage more common?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540690247", "createdAt": "2020-12-11T04:54:43Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-obo/README.md", "diffHunk": "@@ -0,0 +1,164 @@\n+# OAuth 2.0 Sample for azure-spring-boot-sample-active-directory-resource-server-obo library for Java\n+\n+## Key concepts\n+[Resource server access other resources usage][resource-server-access-other-resources-usage] is more common, this is an extension of the [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server]. Similarly, this sample illustrates how to protect a Java web API by restricting access to its resources to authorized accounts, and the restricted resource will access other restricted resource, such as Graph API and Custom API.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5MDUyNA==", "bodyText": "Why do we need this sdk?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540690524", "createdAt": "2020-12-11T04:55:48Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-obo/README.md", "diffHunk": "@@ -0,0 +1,164 @@\n+# OAuth 2.0 Sample for azure-spring-boot-sample-active-directory-resource-server-obo library for Java\n+\n+## Key concepts\n+[Resource server access other resources usage][resource-server-access-other-resources-usage] is more common, this is an extension of the [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server]. Similarly, this sample illustrates how to protect a Java web API by restricting access to its resources to authorized accounts, and the restricted resource will access other restricted resource, such as Graph API and Custom API.\n+\n+\n+## Getting started\n+We will prepare two application to demonstrate the dependent calls of resources.\n+Another sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] will be as Custom API resource.\n+\n+### Environment checklist\n+We need to ensure that this [environment checklist][ready-to-run-checklist] is completed before the run.\n+\n+### Include the package\n+\n+```xml\n+<dependencies>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-web</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-security</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.azure.spring</groupId>\n+      <artifactId>azure-spring-boot-starter-active-directory</artifactId>\n+      <version>3.0.0-beta.2</version> <!-- {x-version-update;com.azure.spring:azure-spring-boot-starter-active-directory;current} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-resource-server</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-client</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.microsoft.azure</groupId>\n+      <artifactId>msal4j</artifactId>\n+      <version>1.8.0</version> <!-- {x-version-update;com.microsoft.azure:msal4j;external_dependency} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>com.nimbusds</groupId>\n+      <artifactId>nimbus-jose-jwt</artifactId>\n+      <version>8.19</version> <!-- {x-version-update;com.nimbusds:nimbus-jose-jwt;external_dependency} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>com.nimbusds</groupId>\n+      <artifactId>oauth2-oidc-sdk</artifactId>\n+      <version>7.1.1</version> <!-- {x-version-update;com.nimbusds:oauth2-oidc-sdk;external_dependency} -->\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5MTM3MA==", "bodyText": "Why do we need to list the application names here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540691370", "createdAt": "2020-12-11T04:58:36Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-obo/README.md", "diffHunk": "@@ -0,0 +1,164 @@\n+# OAuth 2.0 Sample for azure-spring-boot-sample-active-directory-resource-server-obo library for Java\n+\n+## Key concepts\n+[Resource server access other resources usage][resource-server-access-other-resources-usage] is more common, this is an extension of the [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server]. Similarly, this sample illustrates how to protect a Java web API by restricting access to its resources to authorized accounts, and the restricted resource will access other restricted resource, such as Graph API and Custom API.\n+\n+\n+## Getting started\n+We will prepare two application to demonstrate the dependent calls of resources.\n+Another sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] will be as Custom API resource.\n+\n+### Environment checklist\n+We need to ensure that this [environment checklist][ready-to-run-checklist] is completed before the run.\n+\n+### Include the package\n+\n+```xml\n+<dependencies>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-web</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-security</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.azure.spring</groupId>\n+      <artifactId>azure-spring-boot-starter-active-directory</artifactId>\n+      <version>3.0.0-beta.2</version> <!-- {x-version-update;com.azure.spring:azure-spring-boot-starter-active-directory;current} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-resource-server</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-client</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.microsoft.azure</groupId>\n+      <artifactId>msal4j</artifactId>\n+      <version>1.8.0</version> <!-- {x-version-update;com.microsoft.azure:msal4j;external_dependency} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>com.nimbusds</groupId>\n+      <artifactId>nimbus-jose-jwt</artifactId>\n+      <version>8.19</version> <!-- {x-version-update;com.nimbusds:nimbus-jose-jwt;external_dependency} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>com.nimbusds</groupId>\n+      <artifactId>oauth2-oidc-sdk</artifactId>\n+      <version>7.1.1</version> <!-- {x-version-update;com.nimbusds:oauth2-oidc-sdk;external_dependency} -->\n+    </dependency>\n+</dependencies>\n+```\n+\n+### Register your Web API\n+You can follow [Register the Web API][register-the-web-api] to add `ResourceAccessGraph.read`, `ResourceAccessGraphCustomResources.read` scopes. \n+Convention current application id url is `api://sample-client-id`, application name is `azure-spring-boot-sample-active-directory-resource-server-obo`; the application id url of the sample [spring security resource server sample][azure-spring-boot-sample-active-directory-spring-security-resource-server] is `custom-client-id`, the application name is `azure-spring-boot-sample-active-directory-spring-security-resource-server`.  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5MjQ5OA==", "bodyText": "Format these as:\nhttp.authorizeRequests()\n    .anyRequest().authenticated()\n    .and()\n    .oauth2ResourceServer(OAuth2ResourceServerConfigurer::jwt);", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540692498", "createdAt": "2020-12-11T05:02:22Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-obo/src/main/java/com/azure/spring/sample/aad/security/AADSampleSecurityConfiguration.java", "diffHunk": "@@ -0,0 +1,23 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.sample.aad.security;\n+\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer;\n+\n+@EnableWebSecurity\n+@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)\n+public class AADSampleSecurityConfiguration extends WebSecurityConfigurerAdapter {\n+\n+    @Override\n+    protected void configure(HttpSecurity http) throws Exception {\n+\t\thttp.authorizeRequests().anyRequest().authenticated()\n+            .and().oauth2ResourceServer(OAuth2ResourceServerConfigurer::jwt);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5MzEyNQ==", "bodyText": "Why do we include this in the starter?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540693125", "createdAt": "2020-12-11T05:04:33Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/pom.xml", "diffHunk": "@@ -61,14 +61,9 @@\n       <version>5.3.5.RELEASE</version> <!-- {x-version-update;org.springframework.security:spring-security-config;external_dependency} -->\n     </dependency>\n     <dependency>\n-      <groupId>com.microsoft.azure</groupId>\n-      <artifactId>msal4j</artifactId>\n-      <version>1.8.0</version> <!-- {x-version-update;com.microsoft.azure:msal4j;external_dependency} -->\n-    </dependency>\n-    <dependency>\n-      <groupId>com.nimbusds</groupId>\n-      <artifactId>nimbus-jose-jwt</artifactId>\n-      <version>8.19</version> <!-- {x-version-update;com.nimbusds:nimbus-jose-jwt;external_dependency} -->\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-oauth2-jose</artifactId>\n+      <version>5.3.5.RELEASE</version> <!-- {x-version-update;org.springframework.security:spring-security-oauth2-jose;external_dependency} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5MzI0NQ==", "bodyText": "Why are we changing this?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540693245", "createdAt": "2020-12-11T05:05:02Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/pom.xml", "diffHunk": "@@ -101,8 +101,8 @@\n     </dependency>\n     <dependency>\n       <groupId>com.nimbusds</groupId>\n-      <artifactId>nimbus-jose-jwt</artifactId>\n-      <version>8.19</version> <!-- {x-version-update;com.nimbusds:nimbus-jose-jwt;external_dependency} -->\n+      <artifactId>oauth2-oidc-sdk</artifactId>\n+      <version>7.1.1</version> <!-- {x-version-update;com.nimbusds:oauth2-oidc-sdk;external_dependency} -->\n       <optional>true</optional>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5Mzc4OQ==", "bodyText": "Should we add the type of authentication in the error message?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540693789", "createdAt": "2020-12-11T05:06:55Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -0,0 +1,148 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IClientSecret;\n+import com.microsoft.aad.msal4j.OnBehalfOfParameters;\n+import com.microsoft.aad.msal4j.UserAssertion;\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AbstractOAuth2Token;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.server.resource.authentication.AbstractOAuth2TokenAuthenticationToken;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.net.MalformedURLException;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+/**\n+ * <p>\n+ * OAuth2AuthorizedClientRepository for obo flow\n+ * </p>\n+ */\n+public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedClientRepository {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    private static final String OBO_AUTHORIZEDCLIENT_PREFIX = \"obo_authorizedclient_\";\n+\n+    private final AzureClientRegistrationRepository azureClientRegistrationRepository;\n+\n+    private final Map<String, ConfidentialClientApplication> confidentialClientApplicationMap = new HashMap<>();\n+\n+    public AADOAuth2OboAuthorizedClientRepository(AzureClientRegistrationRepository azureClientRegistrationRepository) {\n+        this.azureClientRegistrationRepository = azureClientRegistrationRepository;\n+        Iterator<ClientRegistration> iterator = azureClientRegistrationRepository.iterator();\n+        while (iterator.hasNext()) {\n+            ClientRegistration next = iterator.next();\n+            this.confidentialClientApplicationMap.put(next.getRegistrationId(), createApp(next));\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    public <T extends OAuth2AuthorizedClient> T loadAuthorizedClient(String registrationId,\n+                                                                     Authentication authentication,\n+                                                                     HttpServletRequest request) {\n+        try {\n+            String oboAuthorizedClientAttributeName = OBO_AUTHORIZEDCLIENT_PREFIX + registrationId;\n+            if (request.getAttribute(oboAuthorizedClientAttributeName) != null) {\n+                return (T) request.getAttribute(oboAuthorizedClientAttributeName);\n+            }\n+\n+            if (!(authentication instanceof AbstractOAuth2TokenAuthenticationToken)) {\n+                throw new IllegalStateException(\"Not support token implementation\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5NDc3MA==", "bodyText": "change loadAuthorizedClient to load authorized client, better log the registrationId too in the error message", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540694770", "createdAt": "2020-12-11T05:10:18Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -0,0 +1,148 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IClientSecret;\n+import com.microsoft.aad.msal4j.OnBehalfOfParameters;\n+import com.microsoft.aad.msal4j.UserAssertion;\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AbstractOAuth2Token;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.server.resource.authentication.AbstractOAuth2TokenAuthenticationToken;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.net.MalformedURLException;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+/**\n+ * <p>\n+ * OAuth2AuthorizedClientRepository for obo flow\n+ * </p>\n+ */\n+public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedClientRepository {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    private static final String OBO_AUTHORIZEDCLIENT_PREFIX = \"obo_authorizedclient_\";\n+\n+    private final AzureClientRegistrationRepository azureClientRegistrationRepository;\n+\n+    private final Map<String, ConfidentialClientApplication> confidentialClientApplicationMap = new HashMap<>();\n+\n+    public AADOAuth2OboAuthorizedClientRepository(AzureClientRegistrationRepository azureClientRegistrationRepository) {\n+        this.azureClientRegistrationRepository = azureClientRegistrationRepository;\n+        Iterator<ClientRegistration> iterator = azureClientRegistrationRepository.iterator();\n+        while (iterator.hasNext()) {\n+            ClientRegistration next = iterator.next();\n+            this.confidentialClientApplicationMap.put(next.getRegistrationId(), createApp(next));\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    public <T extends OAuth2AuthorizedClient> T loadAuthorizedClient(String registrationId,\n+                                                                     Authentication authentication,\n+                                                                     HttpServletRequest request) {\n+        try {\n+            String oboAuthorizedClientAttributeName = OBO_AUTHORIZEDCLIENT_PREFIX + registrationId;\n+            if (request.getAttribute(oboAuthorizedClientAttributeName) != null) {\n+                return (T) request.getAttribute(oboAuthorizedClientAttributeName);\n+            }\n+\n+            if (!(authentication instanceof AbstractOAuth2TokenAuthenticationToken)) {\n+                throw new IllegalStateException(\"Not support token implementation\");\n+            }\n+            AbstractOAuth2TokenAuthenticationToken<AbstractOAuth2Token> authenticationToken =\n+                (AbstractOAuth2TokenAuthenticationToken) authentication;\n+            ClientRegistration clientRegistration =\n+                azureClientRegistrationRepository.findByRegistrationId(registrationId);\n+\n+            String accessToken = authenticationToken.getToken().getTokenValue();\n+            OnBehalfOfParameters parameters = OnBehalfOfParameters\n+                .builder(clientRegistration.getScopes(), new UserAssertion(accessToken))\n+                .build();\n+            ConfidentialClientApplication clientApplication =\n+                getClientApplication(clientRegistration.getRegistrationId());\n+            String oboAccessToken = clientApplication.acquireToken(parameters).get().accessToken();\n+\n+            JWT parser = JWTParser.parse(oboAccessToken);\n+            Date iat = (Date) parser.getJWTClaimsSet().getClaim(\"iat\");\n+            Date exp = (Date) parser.getJWTClaimsSet().getClaim(\"exp\");\n+            OAuth2AccessToken oAuth2AccessToken = new OAuth2AccessToken(OAuth2AccessToken.TokenType.BEARER,\n+                oboAccessToken,\n+                Instant.ofEpochMilli(iat.getTime()),\n+                Instant.ofEpochMilli(exp.getTime()));\n+\n+            OAuth2AuthorizedClient oAuth2AuthorizedClient = new OAuth2AuthorizedClient(clientRegistration,\n+                authenticationToken.getName(), oAuth2AccessToken);\n+\n+            request.setAttribute(oboAuthorizedClientAttributeName, (T) oAuth2AuthorizedClient);\n+            return (T) oAuth2AuthorizedClient;\n+        } catch (Throwable throwable) {\n+            LOGGER.error(\"Failed to loadAuthorizedClient\", throwable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5NTA3OQ==", "bodyText": "Please remove these empty lines.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540695079", "createdAt": "2020-12-11T05:11:19Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -0,0 +1,148 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IClientSecret;\n+import com.microsoft.aad.msal4j.OnBehalfOfParameters;\n+import com.microsoft.aad.msal4j.UserAssertion;\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AbstractOAuth2Token;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.server.resource.authentication.AbstractOAuth2TokenAuthenticationToken;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.net.MalformedURLException;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+/**\n+ * <p>\n+ * OAuth2AuthorizedClientRepository for obo flow\n+ * </p>\n+ */\n+public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedClientRepository {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    private static final String OBO_AUTHORIZEDCLIENT_PREFIX = \"obo_authorizedclient_\";\n+\n+    private final AzureClientRegistrationRepository azureClientRegistrationRepository;\n+\n+    private final Map<String, ConfidentialClientApplication> confidentialClientApplicationMap = new HashMap<>();\n+\n+    public AADOAuth2OboAuthorizedClientRepository(AzureClientRegistrationRepository azureClientRegistrationRepository) {\n+        this.azureClientRegistrationRepository = azureClientRegistrationRepository;\n+        Iterator<ClientRegistration> iterator = azureClientRegistrationRepository.iterator();\n+        while (iterator.hasNext()) {\n+            ClientRegistration next = iterator.next();\n+            this.confidentialClientApplicationMap.put(next.getRegistrationId(), createApp(next));\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    public <T extends OAuth2AuthorizedClient> T loadAuthorizedClient(String registrationId,\n+                                                                     Authentication authentication,\n+                                                                     HttpServletRequest request) {\n+        try {\n+            String oboAuthorizedClientAttributeName = OBO_AUTHORIZEDCLIENT_PREFIX + registrationId;\n+            if (request.getAttribute(oboAuthorizedClientAttributeName) != null) {\n+                return (T) request.getAttribute(oboAuthorizedClientAttributeName);\n+            }\n+\n+            if (!(authentication instanceof AbstractOAuth2TokenAuthenticationToken)) {\n+                throw new IllegalStateException(\"Not support token implementation\");\n+            }\n+            AbstractOAuth2TokenAuthenticationToken<AbstractOAuth2Token> authenticationToken =\n+                (AbstractOAuth2TokenAuthenticationToken) authentication;\n+            ClientRegistration clientRegistration =\n+                azureClientRegistrationRepository.findByRegistrationId(registrationId);\n+\n+            String accessToken = authenticationToken.getToken().getTokenValue();\n+            OnBehalfOfParameters parameters = OnBehalfOfParameters\n+                .builder(clientRegistration.getScopes(), new UserAssertion(accessToken))\n+                .build();\n+            ConfidentialClientApplication clientApplication =\n+                getClientApplication(clientRegistration.getRegistrationId());\n+            String oboAccessToken = clientApplication.acquireToken(parameters).get().accessToken();\n+\n+            JWT parser = JWTParser.parse(oboAccessToken);\n+            Date iat = (Date) parser.getJWTClaimsSet().getClaim(\"iat\");\n+            Date exp = (Date) parser.getJWTClaimsSet().getClaim(\"exp\");\n+            OAuth2AccessToken oAuth2AccessToken = new OAuth2AccessToken(OAuth2AccessToken.TokenType.BEARER,\n+                oboAccessToken,\n+                Instant.ofEpochMilli(iat.getTime()),\n+                Instant.ofEpochMilli(exp.getTime()));\n+\n+            OAuth2AuthorizedClient oAuth2AuthorizedClient = new OAuth2AuthorizedClient(clientRegistration,\n+                authenticationToken.getName(), oAuth2AccessToken);\n+\n+            request.setAttribute(oboAuthorizedClientAttributeName, (T) oAuth2AuthorizedClient);\n+            return (T) oAuth2AuthorizedClient;\n+        } catch (Throwable throwable) {\n+            LOGGER.error(\"Failed to loadAuthorizedClient\", throwable);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void saveAuthorizedClient(OAuth2AuthorizedClient oAuth2AuthorizedClient, Authentication authentication,\n+                                     HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {\n+    }\n+\n+    @Override\n+    public void removeAuthorizedClient(String s, Authentication authentication,\n+                                       HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {\n+    }\n+\n+    ConfidentialClientApplication getClientApplication(String registrationId) {\n+        return confidentialClientApplicationMap.get(registrationId);\n+    }\n+\n+    private ConfidentialClientApplication createApp(ClientRegistration clientRegistration) {\n+\n+        String authorizationUri = clientRegistration.getProviderDetails().getAuthorizationUri();\n+\n+        String authority = interceptAuthorizationUri(authorizationUri);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5NTkxNQ==", "bodyText": "If the application happens to fail being created, it will cause NPE when load the authorized client. Maybe we should check whether the client is null in loadauthorizedclient method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540695915", "createdAt": "2020-12-11T05:14:28Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -0,0 +1,148 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IClientSecret;\n+import com.microsoft.aad.msal4j.OnBehalfOfParameters;\n+import com.microsoft.aad.msal4j.UserAssertion;\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AbstractOAuth2Token;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.server.resource.authentication.AbstractOAuth2TokenAuthenticationToken;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.net.MalformedURLException;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+/**\n+ * <p>\n+ * OAuth2AuthorizedClientRepository for obo flow\n+ * </p>\n+ */\n+public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedClientRepository {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    private static final String OBO_AUTHORIZEDCLIENT_PREFIX = \"obo_authorizedclient_\";\n+\n+    private final AzureClientRegistrationRepository azureClientRegistrationRepository;\n+\n+    private final Map<String, ConfidentialClientApplication> confidentialClientApplicationMap = new HashMap<>();\n+\n+    public AADOAuth2OboAuthorizedClientRepository(AzureClientRegistrationRepository azureClientRegistrationRepository) {\n+        this.azureClientRegistrationRepository = azureClientRegistrationRepository;\n+        Iterator<ClientRegistration> iterator = azureClientRegistrationRepository.iterator();\n+        while (iterator.hasNext()) {\n+            ClientRegistration next = iterator.next();\n+            this.confidentialClientApplicationMap.put(next.getRegistrationId(), createApp(next));\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    public <T extends OAuth2AuthorizedClient> T loadAuthorizedClient(String registrationId,\n+                                                                     Authentication authentication,\n+                                                                     HttpServletRequest request) {\n+        try {\n+            String oboAuthorizedClientAttributeName = OBO_AUTHORIZEDCLIENT_PREFIX + registrationId;\n+            if (request.getAttribute(oboAuthorizedClientAttributeName) != null) {\n+                return (T) request.getAttribute(oboAuthorizedClientAttributeName);\n+            }\n+\n+            if (!(authentication instanceof AbstractOAuth2TokenAuthenticationToken)) {\n+                throw new IllegalStateException(\"Not support token implementation\");\n+            }\n+            AbstractOAuth2TokenAuthenticationToken<AbstractOAuth2Token> authenticationToken =\n+                (AbstractOAuth2TokenAuthenticationToken) authentication;\n+            ClientRegistration clientRegistration =\n+                azureClientRegistrationRepository.findByRegistrationId(registrationId);\n+\n+            String accessToken = authenticationToken.getToken().getTokenValue();\n+            OnBehalfOfParameters parameters = OnBehalfOfParameters\n+                .builder(clientRegistration.getScopes(), new UserAssertion(accessToken))\n+                .build();\n+            ConfidentialClientApplication clientApplication =\n+                getClientApplication(clientRegistration.getRegistrationId());\n+            String oboAccessToken = clientApplication.acquireToken(parameters).get().accessToken();\n+\n+            JWT parser = JWTParser.parse(oboAccessToken);\n+            Date iat = (Date) parser.getJWTClaimsSet().getClaim(\"iat\");\n+            Date exp = (Date) parser.getJWTClaimsSet().getClaim(\"exp\");\n+            OAuth2AccessToken oAuth2AccessToken = new OAuth2AccessToken(OAuth2AccessToken.TokenType.BEARER,\n+                oboAccessToken,\n+                Instant.ofEpochMilli(iat.getTime()),\n+                Instant.ofEpochMilli(exp.getTime()));\n+\n+            OAuth2AuthorizedClient oAuth2AuthorizedClient = new OAuth2AuthorizedClient(clientRegistration,\n+                authenticationToken.getName(), oAuth2AccessToken);\n+\n+            request.setAttribute(oboAuthorizedClientAttributeName, (T) oAuth2AuthorizedClient);\n+            return (T) oAuth2AuthorizedClient;\n+        } catch (Throwable throwable) {\n+            LOGGER.error(\"Failed to loadAuthorizedClient\", throwable);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void saveAuthorizedClient(OAuth2AuthorizedClient oAuth2AuthorizedClient, Authentication authentication,\n+                                     HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {\n+    }\n+\n+    @Override\n+    public void removeAuthorizedClient(String s, Authentication authentication,\n+                                       HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {\n+    }\n+\n+    ConfidentialClientApplication getClientApplication(String registrationId) {\n+        return confidentialClientApplicationMap.get(registrationId);\n+    }\n+\n+    private ConfidentialClientApplication createApp(ClientRegistration clientRegistration) {\n+\n+        String authorizationUri = clientRegistration.getProviderDetails().getAuthorizationUri();\n+\n+        String authority = interceptAuthorizationUri(authorizationUri);\n+\n+        IClientSecret clientCredential = ClientCredentialFactory.createFromSecret(clientRegistration.getClientSecret());\n+        try {\n+            return ConfidentialClientApplication.builder(clientRegistration.getClientId(), clientCredential)\n+                                                .authority(authority)\n+                                                .build();\n+        } catch (MalformedURLException e) {\n+            LOGGER.error(\"Failed to create ConfidentialClientApplication\", e);\n+        }\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5NjMwOQ==", "bodyText": "Change back to use class detection as the condition here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540696309", "createdAt": "2020-12-11T05:15:58Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.ClientRegistrationInitialization;\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import com.azure.spring.autoconfigure.aad.AADAuthenticationProperties;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnResource;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+\n+/**\n+ * <p>\n+ * The configuration will not be activated if no {@link OAuth2LoginAuthenticationFilter} class provided.\n+ * </p>\n+ */\n+@Configuration(proxyBeanMethods = false)\n+@ConditionalOnResource(resources = \"classpath:aad.enable.config\")\n+@EnableConfigurationProperties({ AADAuthenticationProperties.class })\n+@ConditionalOnClass({BearerTokenAuthenticationToken.class, OAuth2LoginAuthenticationFilter.class})\n+@ConditionalOnProperty(prefix = \"azure.activedirectory.resource-server.obo\", name = \"enabled\", havingValue = \"true\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5NjQ5MQ==", "bodyText": "same here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540696491", "createdAt": "2020-12-11T05:16:33Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureActiveDirectoryConfiguration.java", "diffHunk": "@@ -36,6 +36,8 @@\n @Configuration\n @ConditionalOnClass(ClientRegistrationRepository.class)\n @EnableConfigurationProperties(AADAuthenticationProperties.class)\n+@ConditionalOnProperty(prefix = \"azure.activedirectory.resource-server.obo\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5NjY4MQ==", "bodyText": "Please add a test case for loading a non-existing client.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540696681", "createdAt": "2020-12-11T05:17:16Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepositoryTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AzureClientRegistrationRepository;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IAuthenticationResult;\n+import com.microsoft.aad.msal4j.OnBehalfOfParameters;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationToken;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.test.context.support.TestPropertySourceUtils.addInlinedPropertiesToEnvironment;\n+\n+public class AADOAuth2OboAuthorizedClientRepositoryTest {\n+\n+    private static final String OBO_ACCESS_TOKEN =\n+        \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6ImtnMkxZczJUMENUaklmajRydDZKSXluZW4zOCIsImtpZCI6ImtnMkxZczJUMENUaklmajRydDZKSXluZW4zOCJ9.eyJhdWQiOiJhcGk6Ly9zYW1wbGUtY2xpZW50LWlkIiwiaXNzIjoiaHR0cHM6Ly9zdHMud2luZG93cy5uZXQvMWQxYTA2YTktYjIwYS00NTEzLThhNjQtZGFiMDhkMzJjOGI2LyIsImlhdCI6MTYwNzA3NTc1MiwibmJmIjoxNjA3MDc1NzUyLCJleHAiOjE2MDcwNzk2NTIsImFjciI6IjEiLCJhaW8iOiJBVFFBeS84UkFBQUFkSllKZkluaHhoWHBQTStVUVR0TmsrcnJnWG1FQmRpL0JhQWJUOGtQT2t1amJhQ2pBSTNBeUZWcnE0NGZHdHNOIiwiYW1yIjpbInB3ZCJdLCJhcHBpZCI6ImZmMzhjYjg2LTljMzgtNGUyMS1iZTY4LWM1ODFhNTVmYjVjMCIsImFwcGlkYWNyIjoiMSIsImZhbWlseV9uYW1lIjoiY2hlbiIsImdpdmVuX25hbWUiOiJhbXkiLCJpcGFkZHIiOiIxNjcuMjIwLjI1NS42OCIsIm5hbWUiOiJhbXkgY2hlbiIsIm9pZCI6ImFiZDI4ZGUxLTljMzctNDg5ZC04ZWVjLWZlZWVmNGQyNzRhMyIsInJoIjoiMC5BQUFBcVFZYUhRcXlFMFdLWk5xd2pUTEl0b2JMT1A4NG5DRk92bWpGZ2FWZnRjQjRBQUkuIiwic2NwIjoiUmVzb3VyY2VBY2Nlc3NDdXN0b21SZXNvdXJjZXMucmVhZCBSZXNvdXJjZUFjY2Vzc0dyYXBoLnJlYWQgUmVzb3VyY2VBY2Nlc3NPdGhlclJlc291cmNlcy5yZWFkIiwic3ViIjoiS0xyMXZFQTN3Wk1MdWFFZU1IUl80ZmdTdVVVVnNJWDhHREVlOWU5M1BPYyIsInRpZCI6IjFkMWEwNmE5LWIyMGEtNDUxMy04YTY0LWRhYjA4ZDMyYzhiNiIsInVuaXF1ZV9uYW1lIjoiYW15QG1vYXJ5Lm9ubWljcm9zb2Z0LmNvbSIsInVwbiI6ImFteUBtb2FyeS5vbm1pY3Jvc29mdC5jb20iLCJ1dGkiOiJFTG1xXzZVUkJFS19kN3I4ZlFJR0FBIiwidmVyIjoiMS4wIn0.fM_huHrr5M243oM3rMagGGckoxkLanFkurMJz4EBthrdQlFJzl6eo13pmU0Taq2ognAzsxUka0yihImrvhqzub9IGxRtCdQ3NAvD1fAiVdSUt_aBetIFCi5Pdc6I7KJDiGMQh8RTmduM7IOdxV_3-rug6dZXhW5TTmeq5PfLGYlrKOkC2za7M5G7gn7li1D5osh98HorFBWZoCDhe1iJPd_p_m0EffwTbKFwyvOGN-PKxyzOnoCOma_VYvRABUtBa8rNBFTaH5R9EAvsOmIZ_mI98Irl_8QNr9No-R0nXOrqKCFx5sMYkUuT7mvSaVPAlNr2X8eJjY3Wi-6ishufWQ\";\n+\n+    private static final String AAD_PROPERTY_PREFIX = \"azure.activedirectory.\";\n+\n+    private AzureClientRegistrationRepository clientRegistrationsRepo;\n+\n+    @BeforeEach\n+    public void setup() {\n+        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n+\n+        addInlinedPropertiesToEnvironment(\n+            context,\n+            AAD_PROPERTY_PREFIX + \"user-group.allowed-groups = group1\",\n+            AAD_PROPERTY_PREFIX + \"tenant-id = fake-tenant-id\",\n+            AAD_PROPERTY_PREFIX + \"client-id = fake-client-id\",\n+            AAD_PROPERTY_PREFIX + \"client-secret = fake-client-secret\",\n+            AAD_PROPERTY_PREFIX + \"authorization.fake-graph.scopes = https://graph.microsoft.com/.default\",\n+            AAD_PROPERTY_PREFIX + \"resource-server.obo.enabled = true\"\n+        );\n+        context.register(AzureActiveDirectoryResourceServerClientConfiguration.class);\n+        context.refresh();\n+\n+        clientRegistrationsRepo = context.getBean(AzureClientRegistrationRepository.class);\n+    }\n+\n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void testLoadAzureAuthorizedClient() throws ExecutionException, InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5NjkzNg==", "bodyText": "Why are we changing this?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540696936", "createdAt": "2020-12-11T05:18:00Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapp/AzureActiveDirectoryConfigurationTest.java", "diffHunk": "@@ -129,8 +129,9 @@ public void aadAwareClientRepository() {\n         assertTrue(clientRepo.isAuthzClient(\"graph\"));\n \n         List<ClientRegistration> clients = collectClients(clientRepo);\n-        assertEquals(1, clients.size());\n-        assertEquals(\"azure\", clients.get(0).getRegistrationId());\n+        assertEquals(2, clients.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5Njk5NA==", "bodyText": "Is it because we changed some logic?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#discussion_r540696994", "createdAt": "2020-12-11T05:18:16Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapp/AzureActiveDirectoryConfigurationTest.java", "diffHunk": "@@ -129,8 +129,9 @@ public void aadAwareClientRepository() {\n         assertTrue(clientRepo.isAuthzClient(\"graph\"));\n \n         List<ClientRegistration> clients = collectClients(clientRepo);\n-        assertEquals(1, clients.size());\n-        assertEquals(\"azure\", clients.get(0).getRegistrationId());\n+        assertEquals(2, clients.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5NjkzNg=="}, "originalCommit": {"oid": "aabc660cc884f44fe6706a84317ca5c46debb416"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae2ed1c04c067b500fb837313788156d97a0929b", "author": {"user": {"login": "backwind1233", "name": "zhihaoguo"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ae2ed1c04c067b500fb837313788156d97a0929b", "committedDate": "2020-12-11T07:41:38Z", "message": "- add test case\n- code refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7fd67158d572de9288e5ce167c9c5a6e242a439", "author": {"user": {"login": "moarychan", "name": "Moary Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a7fd67158d572de9288e5ce167c9c5a6e242a439", "committedDate": "2020-12-11T09:11:15Z", "message": "Remove enabled switch for resource client usage; fix code smell"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "655b081d85752c21a1a5fba071b5823718d3f951", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/655b081d85752c21a1a5fba071b5823718d3f951", "committedDate": "2020-12-14T02:37:25Z", "message": "Refactor ut in webapi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e91c92d04c799d2f059f4191bc1b11325ccc053a", "author": {"user": {"login": "moarychan", "name": "Moary Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e91c92d04c799d2f059f4191bc1b11325ccc053a", "committedDate": "2020-12-14T05:43:36Z", "message": "When used as Resource Server or Web Application, suppress compatibility properties validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd0604548d319b1df073302a60f4973a8397be0d", "author": {"user": {"login": "backwind1233", "name": "zhihaoguo"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bd0604548d319b1df073302a60f4973a8397be0d", "committedDate": "2020-12-14T05:58:28Z", "message": "- refactor test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2627e39ee3999303e6d3af51c0e84db13e4865d0", "author": {"user": {"login": "moarychan", "name": "Moary Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2627e39ee3999303e6d3af51c0e84db13e4865d0", "committedDate": "2020-12-14T05:58:29Z", "message": "merge branch master of Azure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df2c38d5063ad08b888863eb8734ec42084bee47", "author": {"user": {"login": "backwind1233", "name": "zhihaoguo"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/df2c38d5063ad08b888863eb8734ec42084bee47", "committedDate": "2020-12-14T06:00:00Z", "message": "Merge branch 'obo-flow-repo' of github.com:wujack778/azure-sdk-for-java into obo-flow-repo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c576f6c1ddbf70b31893f745469f35baebf08539", "author": {"user": {"login": "backwind1233", "name": "zhihaoguo"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c576f6c1ddbf70b31893f745469f35baebf08539", "committedDate": "2020-12-14T06:00:43Z", "message": "Merge remote-tracking branch 'jackwu/obo-flow-repo' into obo-flow-repo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93fd7889839374881161cb4e3645f41e751c8b15", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/93fd7889839374881161cb4e3645f41e751c8b15", "committedDate": "2020-12-14T06:25:40Z", "message": "add 'unchecked' on oboTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3652584c0d818ad8983d57d57e8bc15ed1ef513e", "author": {"user": {"login": "moarychan", "name": "Moary Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3652584c0d818ad8983d57d57e8bc15ed1ef513e", "committedDate": "2020-12-14T08:10:21Z", "message": "Remove OAuth2ClientPropertiesBeanPostProcessor class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1a3fb26c7578b051257cf948b16243fc070563d", "author": {"user": {"login": "moarychan", "name": "Moary Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a1a3fb26c7578b051257cf948b16243fc070563d", "committedDate": "2020-12-14T08:11:02Z", "message": "Merge remote-tracking branch 'jackwu/obo-flow-repo' into obo-flow-repo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMjMwNjE4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17901#pullrequestreview-551230618", "createdAt": "2020-12-14T10:23:47Z", "commit": {"oid": "a1a3fb26c7578b051257cf948b16243fc070563d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39b089b8bed4c1f90b360a3dc9d2acbb160b2d65", "author": {"user": {"login": "moarychan", "name": "Moary Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/39b089b8bed4c1f90b360a3dc9d2acbb160b2d65", "committedDate": "2020-12-15T02:16:52Z", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java into obo-flow-repo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e68ca72c94dd171de960993305f1cce81b42915", "author": {"user": {"login": "moarychan", "name": "Moary Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1e68ca72c94dd171de960993305f1cce81b42915", "committedDate": "2020-12-15T02:18:45Z", "message": "limit telemetry coverage"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1574, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}