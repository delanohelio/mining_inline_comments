{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMzQ1NDU4", "number": 15016, "title": "Relationship e2e tests", "bodyText": "", "createdAt": "2020-09-10T04:00:48Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15016", "merged": true, "mergeCommit": {"oid": "ceb25b8a354f87f591f6d61390ab5639ac13eb8d"}, "closed": true, "closedAt": "2020-09-10T20:40:28Z", "author": {"login": "abhipsaMisra"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHjY5zgFqTQ4NjExMTEwMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHm233AFqTQ4NjI4NzU5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MTExMTAz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15016#pullrequestreview-486111103", "createdAt": "2020-09-10T16:28:34Z", "commit": {"oid": "5515a687abd2a60c597c43d610e2dd942a084c69"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjoyODozNVrOHP8Nwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjoyODozNVrOHP8Nwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3NzI1MA==", "bodyText": "Using assertj for fluent assertions, let me know what you guys think.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15016#discussion_r486477250", "createdAt": "2020-09-10T16:28:35Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/pom.xml", "diffHunk": "@@ -75,6 +75,12 @@\n       <version>5.6.2</version> <!-- {x-version-update;org.junit.jupiter:junit-jupiter-params;external_dependency} -->\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.assertj</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5515a687abd2a60c597c43d610e2dd942a084c69"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MTExMzMz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15016#pullrequestreview-486111333", "createdAt": "2020-09-10T16:28:54Z", "commit": {"oid": "5515a687abd2a60c597c43d610e2dd942a084c69"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjoyODo1NFrOHP8OdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjoyODo1NFrOHP8OdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3NzQyOQ==", "bodyText": "This API overload was missing.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15016#discussion_r486477429", "createdAt": "2020-09-10T16:28:54Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -446,6 +446,17 @@ public void deleteRelationship(String digitalTwinId, String relationshipId) {\n         return new PagedIterable<>(digitalTwinsAsyncClient.listRelationships(digitalTwinId, relationshipName, clazz, context));\n     }\n \n+    /**\n+     * Gets all the relationships referencing a digital twin as a target by iterating through a collection.\n+     *\n+     * @param digitalTwinId The Id of the target digital twin.\n+     * @return A {@link PagedIterable} of application/json relationships directed towards the specified digital twin and the http response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<IncomingRelationship> listIncomingRelationships(String digitalTwinId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5515a687abd2a60c597c43d610e2dd942a084c69"}, "originalPosition": 11}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5515a687abd2a60c597c43d610e2dd942a084c69", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5515a687abd2a60c597c43d610e2dd942a084c69", "committedDate": "2020-09-10T16:27:01Z", "message": "wip tests"}, "afterCommit": {"oid": "01d9e15313bd4c2ff88bd795e8f987793c975dce", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/01d9e15313bd4c2ff88bd795e8f987793c975dce", "committedDate": "2020-09-10T16:30:31Z", "message": "feat(e2e-tests): Add E2E tests for relationship APIs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d61b7251d5a567c7d59fbb519aaa83b998108360", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d61b7251d5a567c7d59fbb519aaa83b998108360", "committedDate": "2020-09-10T19:52:46Z", "message": "add recorded tests for playback"}, "afterCommit": {"oid": "335a9ca7d2d2ff14b4d3c1eab769ce2fd3fd1e46", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/335a9ca7d2d2ff14b4d3c1eab769ce2fd3fd1e46", "committedDate": "2020-09-10T20:01:03Z", "message": "add recorded tests for playback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bfe6e0101a0faa0fb850753eb4632e2966b7f45", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2bfe6e0101a0faa0fb850753eb4632e2966b7f45", "committedDate": "2020-09-10T20:01:35Z", "message": "feat(e2e-tests): Add E2E tests for relationship APIs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "335a9ca7d2d2ff14b4d3c1eab769ce2fd3fd1e46", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/335a9ca7d2d2ff14b4d3c1eab769ce2fd3fd1e46", "committedDate": "2020-09-10T20:01:03Z", "message": "add recorded tests for playback"}, "afterCommit": {"oid": "2bfe6e0101a0faa0fb850753eb4632e2966b7f45", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2bfe6e0101a0faa0fb850753eb4632e2966b7f45", "committedDate": "2020-09-10T20:01:35Z", "message": "feat(e2e-tests): Add E2E tests for relationship APIs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MjczMjMw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15016#pullrequestreview-486273230", "createdAt": "2020-09-10T20:09:16Z", "commit": {"oid": "2bfe6e0101a0faa0fb850753eb4632e2966b7f45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDowOToxNlrOHQD-kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDowOToxNlrOHQD-kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNDQzNA==", "bodyText": "Could this be split out into a separate test?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15016#discussion_r486604434", "createdAt": "2020-09-10T20:09:16Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/DigitalTwinsRelationshipTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.digitaltwins.core.models.IncomingRelationship;\n+import com.azure.digitaltwins.core.models.ModelData;\n+import com.azure.digitaltwins.core.serialization.BasicDigitalTwin;\n+import com.azure.digitaltwins.core.serialization.BasicRelationship;\n+import com.azure.digitaltwins.core.util.DigitalTwinsResponse;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.azure.digitaltwins.core.TestAssetDefaults.*;\n+import static com.azure.digitaltwins.core.TestAssetsHelper.*;\n+import static com.azure.digitaltwins.core.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n+import static com.azure.digitaltwins.core.TestHelper.assertRestException;\n+import static com.azure.digitaltwins.core.helpers.UniqueIdHelper.getUniqueDigitalTwinId;\n+import static com.azure.digitaltwins.core.helpers.UniqueIdHelper.getUniqueModelId;\n+import static java.net.HttpURLConnection.*;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+\n+public class DigitalTwinsRelationshipTest extends DigitalTwinsRelationshipTestBase {\n+    private final ClientLogger logger = new ClientLogger(DigitalTwinsRelationshipTest.class);\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void relationshipLifecycleTest(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) {\n+        DigitalTwinsClient client = getClient(httpClient, serviceVersion);\n+\n+        String floorModelId = getUniqueModelId(FLOOR_MODEL_ID_PREFIX, client, randomIntegerStringGenerator);\n+        String roomModelId = getUniqueModelId(ROOM_MODEL_ID_PREFIX, client, randomIntegerStringGenerator);\n+        String hvacModelId = getUniqueModelId(HVAC_MODEL_ID_PREFIX, client, randomIntegerStringGenerator);\n+\n+        String floorTwinId = getUniqueDigitalTwinId(FLOOR_TWIN_ID_PREFIX, client, randomIntegerStringGenerator);\n+        String roomTwinId = getUniqueDigitalTwinId(ROOM_TWIN_ID_PREFIX, client, randomIntegerStringGenerator);\n+        String hvacTwinId = getUniqueDigitalTwinId(HVAC_TWIN_ID_PREFIX, client, randomIntegerStringGenerator);\n+\n+        try {\n+            // Create floor, room and hvac model\n+            createModelsRunner(\n+                floorModelId,\n+                roomModelId,\n+                hvacModelId,\n+                modelsList -> {\n+                    List<ModelData> createdModels = client.createModels(modelsList);\n+                    logger.info(\"Created {} models successfully\", createdModels.size());\n+                }\n+            );\n+\n+            // Create floor twin\n+            createFloorTwinRunner(\n+                floorTwinId,\n+                floorModelId,\n+                (twinId, twin) -> {\n+                    BasicDigitalTwin createdTwin = client.createDigitalTwin(twinId, twin, BasicDigitalTwin.class);\n+                    logger.info(\"Created {} twin successfully\", createdTwin.getId());\n+                }\n+            );\n+\n+            // Create room twin\n+            createRoomTwinRunner(\n+                roomTwinId,\n+                roomModelId,\n+                (twinId, twin) -> {\n+                    BasicDigitalTwin createdTwin = client.createDigitalTwin(twinId, twin, BasicDigitalTwin.class);\n+                    logger.info(\"Created {} twin successfully\", createdTwin.getId());\n+                }\n+            );\n+\n+            // Create hvac twin\n+            createHvacTwinRunner(\n+                hvacTwinId,\n+                hvacModelId,\n+                (twinId, twin) -> {\n+                    BasicDigitalTwin createdTwin = client.createDigitalTwin(twinId, twin, BasicDigitalTwin.class);\n+                    logger.info(\"Created {} twin successfully\", createdTwin.getId());\n+                }\n+            );\n+\n+            // Connect the created twins via relationships\n+            String floorContainsRoomPayload = getRelationshipWithPropertyPayload(roomTwinId, CONTAINS_RELATIONSHIP, \"isAccessRestricted\", true);\n+            String floorTwinCoolsRelationshipPayload = getRelationshipPayload(floorTwinId, COOLS_RELATIONSHIP);\n+            String floorTwinContainedInRelationshipPayload = getRelationshipPayload(floorTwinId, CONTAINED_IN_RELATIONSHIP);\n+            String floorCooledByHvacPayload = getRelationshipPayload(hvacTwinId, COOLED_BY_RELATIONSHIP);\n+            List<Object> floorContainsRoomUpdatePayload = getRelationshipUpdatePayload(\"/isAccessRestricted\", false);\n+\n+            // Create relationship from Floor -> Room\n+            BasicRelationship floorRoomRelationship = client.createRelationship(floorTwinId, FLOOR_CONTAINS_ROOM_RELATIONSHIP_ID, floorContainsRoomPayload, BasicRelationship.class);\n+            assertThat(floorRoomRelationship.getId())\n+                .isEqualTo(FLOOR_CONTAINS_ROOM_RELATIONSHIP_ID)\n+                .as(\"Created relationship from floor -> room\");\n+            logger.info(\"Created {} relationship between source = {} and target = {}\", floorRoomRelationship.getId(), floorRoomRelationship.getSourceId(), floorRoomRelationship.getTargetId());\n+\n+            // Create relationship from Floor -> Hvac\n+            BasicRelationship floorHvacRelationship = client.createRelationship(floorTwinId, FLOOR_COOLED_BY_HVAC_RELATIONSHIP_ID, floorCooledByHvacPayload, BasicRelationship.class);\n+            assertThat(floorHvacRelationship.getId())\n+                .isEqualTo(FLOOR_COOLED_BY_HVAC_RELATIONSHIP_ID)\n+                .as(\"Created relationship from floor -> hvac\");\n+            logger.info(\"Created {} relationship between source = {} and target = {}\", floorHvacRelationship.getId(), floorHvacRelationship.getSourceId(), floorHvacRelationship.getTargetId());\n+\n+            // Create relationship from Hvac -> Floor\n+            BasicRelationship hvacFloorRelationship = client.createRelationship(hvacTwinId, HVAC_COOLS_FLOOR_RELATIONSHIP_ID, floorTwinCoolsRelationshipPayload, BasicRelationship.class);\n+            assertThat(hvacFloorRelationship.getId())\n+                .isEqualTo(HVAC_COOLS_FLOOR_RELATIONSHIP_ID)\n+                .as(\"Created relationship from hvac -> floor\");\n+            logger.info(\"Created {} relationship between source = {} and target = {}\", hvacFloorRelationship.getId(), hvacFloorRelationship.getSourceId(), hvacFloorRelationship.getTargetId());\n+\n+            // Create relationship from Room -> Floor\n+            BasicRelationship roomFloorRelationship = client.createRelationship(roomTwinId, ROOM_CONTAINED_IN_FLOOR_RELATIONSHIP_ID, floorTwinContainedInRelationshipPayload, BasicRelationship.class);\n+            assertThat(roomFloorRelationship.getId())\n+                .isEqualTo(ROOM_CONTAINED_IN_FLOOR_RELATIONSHIP_ID)\n+                .as(\"Created relationship from room -> floor\");\n+            logger.info(\"Created {} relationship between source = {} and target = {}\", roomFloorRelationship.getId(), roomFloorRelationship.getSourceId(), roomFloorRelationship.getTargetId());\n+\n+            // Create a relation which already exists - should return status code 409 (Conflict).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bfe6e0101a0faa0fb850753eb4632e2966b7f45"}, "originalPosition": 126}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MjczNTQ0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15016#pullrequestreview-486273544", "createdAt": "2020-09-10T20:09:43Z", "commit": {"oid": "2bfe6e0101a0faa0fb850753eb4632e2966b7f45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDowOTo0M1rOHQD_dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDowOTo0M1rOHQD_dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNDY2Mg==", "bodyText": "Is this missing some code to test updating the relationship?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15016#discussion_r486604662", "createdAt": "2020-09-10T20:09:43Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/DigitalTwinsRelationshipTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.digitaltwins.core.models.IncomingRelationship;\n+import com.azure.digitaltwins.core.models.ModelData;\n+import com.azure.digitaltwins.core.serialization.BasicDigitalTwin;\n+import com.azure.digitaltwins.core.serialization.BasicRelationship;\n+import com.azure.digitaltwins.core.util.DigitalTwinsResponse;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.azure.digitaltwins.core.TestAssetDefaults.*;\n+import static com.azure.digitaltwins.core.TestAssetsHelper.*;\n+import static com.azure.digitaltwins.core.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n+import static com.azure.digitaltwins.core.TestHelper.assertRestException;\n+import static com.azure.digitaltwins.core.helpers.UniqueIdHelper.getUniqueDigitalTwinId;\n+import static com.azure.digitaltwins.core.helpers.UniqueIdHelper.getUniqueModelId;\n+import static java.net.HttpURLConnection.*;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+\n+public class DigitalTwinsRelationshipTest extends DigitalTwinsRelationshipTestBase {\n+    private final ClientLogger logger = new ClientLogger(DigitalTwinsRelationshipTest.class);\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void relationshipLifecycleTest(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) {\n+        DigitalTwinsClient client = getClient(httpClient, serviceVersion);\n+\n+        String floorModelId = getUniqueModelId(FLOOR_MODEL_ID_PREFIX, client, randomIntegerStringGenerator);\n+        String roomModelId = getUniqueModelId(ROOM_MODEL_ID_PREFIX, client, randomIntegerStringGenerator);\n+        String hvacModelId = getUniqueModelId(HVAC_MODEL_ID_PREFIX, client, randomIntegerStringGenerator);\n+\n+        String floorTwinId = getUniqueDigitalTwinId(FLOOR_TWIN_ID_PREFIX, client, randomIntegerStringGenerator);\n+        String roomTwinId = getUniqueDigitalTwinId(ROOM_TWIN_ID_PREFIX, client, randomIntegerStringGenerator);\n+        String hvacTwinId = getUniqueDigitalTwinId(HVAC_TWIN_ID_PREFIX, client, randomIntegerStringGenerator);\n+\n+        try {\n+            // Create floor, room and hvac model\n+            createModelsRunner(\n+                floorModelId,\n+                roomModelId,\n+                hvacModelId,\n+                modelsList -> {\n+                    List<ModelData> createdModels = client.createModels(modelsList);\n+                    logger.info(\"Created {} models successfully\", createdModels.size());\n+                }\n+            );\n+\n+            // Create floor twin\n+            createFloorTwinRunner(\n+                floorTwinId,\n+                floorModelId,\n+                (twinId, twin) -> {\n+                    BasicDigitalTwin createdTwin = client.createDigitalTwin(twinId, twin, BasicDigitalTwin.class);\n+                    logger.info(\"Created {} twin successfully\", createdTwin.getId());\n+                }\n+            );\n+\n+            // Create room twin\n+            createRoomTwinRunner(\n+                roomTwinId,\n+                roomModelId,\n+                (twinId, twin) -> {\n+                    BasicDigitalTwin createdTwin = client.createDigitalTwin(twinId, twin, BasicDigitalTwin.class);\n+                    logger.info(\"Created {} twin successfully\", createdTwin.getId());\n+                }\n+            );\n+\n+            // Create hvac twin\n+            createHvacTwinRunner(\n+                hvacTwinId,\n+                hvacModelId,\n+                (twinId, twin) -> {\n+                    BasicDigitalTwin createdTwin = client.createDigitalTwin(twinId, twin, BasicDigitalTwin.class);\n+                    logger.info(\"Created {} twin successfully\", createdTwin.getId());\n+                }\n+            );\n+\n+            // Connect the created twins via relationships\n+            String floorContainsRoomPayload = getRelationshipWithPropertyPayload(roomTwinId, CONTAINS_RELATIONSHIP, \"isAccessRestricted\", true);\n+            String floorTwinCoolsRelationshipPayload = getRelationshipPayload(floorTwinId, COOLS_RELATIONSHIP);\n+            String floorTwinContainedInRelationshipPayload = getRelationshipPayload(floorTwinId, CONTAINED_IN_RELATIONSHIP);\n+            String floorCooledByHvacPayload = getRelationshipPayload(hvacTwinId, COOLED_BY_RELATIONSHIP);\n+            List<Object> floorContainsRoomUpdatePayload = getRelationshipUpdatePayload(\"/isAccessRestricted\", false);\n+\n+            // Create relationship from Floor -> Room\n+            BasicRelationship floorRoomRelationship = client.createRelationship(floorTwinId, FLOOR_CONTAINS_ROOM_RELATIONSHIP_ID, floorContainsRoomPayload, BasicRelationship.class);\n+            assertThat(floorRoomRelationship.getId())\n+                .isEqualTo(FLOOR_CONTAINS_ROOM_RELATIONSHIP_ID)\n+                .as(\"Created relationship from floor -> room\");\n+            logger.info(\"Created {} relationship between source = {} and target = {}\", floorRoomRelationship.getId(), floorRoomRelationship.getSourceId(), floorRoomRelationship.getTargetId());\n+\n+            // Create relationship from Floor -> Hvac\n+            BasicRelationship floorHvacRelationship = client.createRelationship(floorTwinId, FLOOR_COOLED_BY_HVAC_RELATIONSHIP_ID, floorCooledByHvacPayload, BasicRelationship.class);\n+            assertThat(floorHvacRelationship.getId())\n+                .isEqualTo(FLOOR_COOLED_BY_HVAC_RELATIONSHIP_ID)\n+                .as(\"Created relationship from floor -> hvac\");\n+            logger.info(\"Created {} relationship between source = {} and target = {}\", floorHvacRelationship.getId(), floorHvacRelationship.getSourceId(), floorHvacRelationship.getTargetId());\n+\n+            // Create relationship from Hvac -> Floor\n+            BasicRelationship hvacFloorRelationship = client.createRelationship(hvacTwinId, HVAC_COOLS_FLOOR_RELATIONSHIP_ID, floorTwinCoolsRelationshipPayload, BasicRelationship.class);\n+            assertThat(hvacFloorRelationship.getId())\n+                .isEqualTo(HVAC_COOLS_FLOOR_RELATIONSHIP_ID)\n+                .as(\"Created relationship from hvac -> floor\");\n+            logger.info(\"Created {} relationship between source = {} and target = {}\", hvacFloorRelationship.getId(), hvacFloorRelationship.getSourceId(), hvacFloorRelationship.getTargetId());\n+\n+            // Create relationship from Room -> Floor\n+            BasicRelationship roomFloorRelationship = client.createRelationship(roomTwinId, ROOM_CONTAINED_IN_FLOOR_RELATIONSHIP_ID, floorTwinContainedInRelationshipPayload, BasicRelationship.class);\n+            assertThat(roomFloorRelationship.getId())\n+                .isEqualTo(ROOM_CONTAINED_IN_FLOOR_RELATIONSHIP_ID)\n+                .as(\"Created relationship from room -> floor\");\n+            logger.info(\"Created {} relationship between source = {} and target = {}\", roomFloorRelationship.getId(), roomFloorRelationship.getSourceId(), roomFloorRelationship.getTargetId());\n+\n+            // Create a relation which already exists - should return status code 409 (Conflict).\n+            assertRestException(\n+                () -> client.createRelationship(roomTwinId, ROOM_CONTAINED_IN_FLOOR_RELATIONSHIP_ID, floorTwinContainedInRelationshipPayload),\n+                HTTP_PRECON_FAILED\n+            );\n+\n+            // Update relationships\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bfe6e0101a0faa0fb850753eb4632e2966b7f45"}, "originalPosition": 133}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MjczOTcx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15016#pullrequestreview-486273971", "createdAt": "2020-09-10T20:10:26Z", "commit": {"oid": "2bfe6e0101a0faa0fb850753eb4632e2966b7f45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDoxMDoyNlrOHQEAxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDoxMDoyNlrOHQEAxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNDk5OQ==", "bodyText": "Could this be split out into a separate test? This test is already quite long", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15016#discussion_r486604999", "createdAt": "2020-09-10T20:10:26Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/DigitalTwinsRelationshipTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.digitaltwins.core.models.IncomingRelationship;\n+import com.azure.digitaltwins.core.models.ModelData;\n+import com.azure.digitaltwins.core.serialization.BasicDigitalTwin;\n+import com.azure.digitaltwins.core.serialization.BasicRelationship;\n+import com.azure.digitaltwins.core.util.DigitalTwinsResponse;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.azure.digitaltwins.core.TestAssetDefaults.*;\n+import static com.azure.digitaltwins.core.TestAssetsHelper.*;\n+import static com.azure.digitaltwins.core.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n+import static com.azure.digitaltwins.core.TestHelper.assertRestException;\n+import static com.azure.digitaltwins.core.helpers.UniqueIdHelper.getUniqueDigitalTwinId;\n+import static com.azure.digitaltwins.core.helpers.UniqueIdHelper.getUniqueModelId;\n+import static java.net.HttpURLConnection.*;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+\n+public class DigitalTwinsRelationshipTest extends DigitalTwinsRelationshipTestBase {\n+    private final ClientLogger logger = new ClientLogger(DigitalTwinsRelationshipTest.class);\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void relationshipLifecycleTest(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) {\n+        DigitalTwinsClient client = getClient(httpClient, serviceVersion);\n+\n+        String floorModelId = getUniqueModelId(FLOOR_MODEL_ID_PREFIX, client, randomIntegerStringGenerator);\n+        String roomModelId = getUniqueModelId(ROOM_MODEL_ID_PREFIX, client, randomIntegerStringGenerator);\n+        String hvacModelId = getUniqueModelId(HVAC_MODEL_ID_PREFIX, client, randomIntegerStringGenerator);\n+\n+        String floorTwinId = getUniqueDigitalTwinId(FLOOR_TWIN_ID_PREFIX, client, randomIntegerStringGenerator);\n+        String roomTwinId = getUniqueDigitalTwinId(ROOM_TWIN_ID_PREFIX, client, randomIntegerStringGenerator);\n+        String hvacTwinId = getUniqueDigitalTwinId(HVAC_TWIN_ID_PREFIX, client, randomIntegerStringGenerator);\n+\n+        try {\n+            // Create floor, room and hvac model\n+            createModelsRunner(\n+                floorModelId,\n+                roomModelId,\n+                hvacModelId,\n+                modelsList -> {\n+                    List<ModelData> createdModels = client.createModels(modelsList);\n+                    logger.info(\"Created {} models successfully\", createdModels.size());\n+                }\n+            );\n+\n+            // Create floor twin\n+            createFloorTwinRunner(\n+                floorTwinId,\n+                floorModelId,\n+                (twinId, twin) -> {\n+                    BasicDigitalTwin createdTwin = client.createDigitalTwin(twinId, twin, BasicDigitalTwin.class);\n+                    logger.info(\"Created {} twin successfully\", createdTwin.getId());\n+                }\n+            );\n+\n+            // Create room twin\n+            createRoomTwinRunner(\n+                roomTwinId,\n+                roomModelId,\n+                (twinId, twin) -> {\n+                    BasicDigitalTwin createdTwin = client.createDigitalTwin(twinId, twin, BasicDigitalTwin.class);\n+                    logger.info(\"Created {} twin successfully\", createdTwin.getId());\n+                }\n+            );\n+\n+            // Create hvac twin\n+            createHvacTwinRunner(\n+                hvacTwinId,\n+                hvacModelId,\n+                (twinId, twin) -> {\n+                    BasicDigitalTwin createdTwin = client.createDigitalTwin(twinId, twin, BasicDigitalTwin.class);\n+                    logger.info(\"Created {} twin successfully\", createdTwin.getId());\n+                }\n+            );\n+\n+            // Connect the created twins via relationships\n+            String floorContainsRoomPayload = getRelationshipWithPropertyPayload(roomTwinId, CONTAINS_RELATIONSHIP, \"isAccessRestricted\", true);\n+            String floorTwinCoolsRelationshipPayload = getRelationshipPayload(floorTwinId, COOLS_RELATIONSHIP);\n+            String floorTwinContainedInRelationshipPayload = getRelationshipPayload(floorTwinId, CONTAINED_IN_RELATIONSHIP);\n+            String floorCooledByHvacPayload = getRelationshipPayload(hvacTwinId, COOLED_BY_RELATIONSHIP);\n+            List<Object> floorContainsRoomUpdatePayload = getRelationshipUpdatePayload(\"/isAccessRestricted\", false);\n+\n+            // Create relationship from Floor -> Room\n+            BasicRelationship floorRoomRelationship = client.createRelationship(floorTwinId, FLOOR_CONTAINS_ROOM_RELATIONSHIP_ID, floorContainsRoomPayload, BasicRelationship.class);\n+            assertThat(floorRoomRelationship.getId())\n+                .isEqualTo(FLOOR_CONTAINS_ROOM_RELATIONSHIP_ID)\n+                .as(\"Created relationship from floor -> room\");\n+            logger.info(\"Created {} relationship between source = {} and target = {}\", floorRoomRelationship.getId(), floorRoomRelationship.getSourceId(), floorRoomRelationship.getTargetId());\n+\n+            // Create relationship from Floor -> Hvac\n+            BasicRelationship floorHvacRelationship = client.createRelationship(floorTwinId, FLOOR_COOLED_BY_HVAC_RELATIONSHIP_ID, floorCooledByHvacPayload, BasicRelationship.class);\n+            assertThat(floorHvacRelationship.getId())\n+                .isEqualTo(FLOOR_COOLED_BY_HVAC_RELATIONSHIP_ID)\n+                .as(\"Created relationship from floor -> hvac\");\n+            logger.info(\"Created {} relationship between source = {} and target = {}\", floorHvacRelationship.getId(), floorHvacRelationship.getSourceId(), floorHvacRelationship.getTargetId());\n+\n+            // Create relationship from Hvac -> Floor\n+            BasicRelationship hvacFloorRelationship = client.createRelationship(hvacTwinId, HVAC_COOLS_FLOOR_RELATIONSHIP_ID, floorTwinCoolsRelationshipPayload, BasicRelationship.class);\n+            assertThat(hvacFloorRelationship.getId())\n+                .isEqualTo(HVAC_COOLS_FLOOR_RELATIONSHIP_ID)\n+                .as(\"Created relationship from hvac -> floor\");\n+            logger.info(\"Created {} relationship between source = {} and target = {}\", hvacFloorRelationship.getId(), hvacFloorRelationship.getSourceId(), hvacFloorRelationship.getTargetId());\n+\n+            // Create relationship from Room -> Floor\n+            BasicRelationship roomFloorRelationship = client.createRelationship(roomTwinId, ROOM_CONTAINED_IN_FLOOR_RELATIONSHIP_ID, floorTwinContainedInRelationshipPayload, BasicRelationship.class);\n+            assertThat(roomFloorRelationship.getId())\n+                .isEqualTo(ROOM_CONTAINED_IN_FLOOR_RELATIONSHIP_ID)\n+                .as(\"Created relationship from room -> floor\");\n+            logger.info(\"Created {} relationship between source = {} and target = {}\", roomFloorRelationship.getId(), roomFloorRelationship.getSourceId(), roomFloorRelationship.getTargetId());\n+\n+            // Create a relation which already exists - should return status code 409 (Conflict).\n+            assertRestException(\n+                () -> client.createRelationship(roomTwinId, ROOM_CONTAINED_IN_FLOOR_RELATIONSHIP_ID, floorTwinContainedInRelationshipPayload),\n+                HTTP_PRECON_FAILED\n+            );\n+\n+            // Update relationships\n+\n+            // Create relationship from Floor -> Room\n+            DigitalTwinsResponse<Void> updateRelationshipResponse = client.updateRelationshipWithResponse(floorTwinId, FLOOR_CONTAINS_ROOM_RELATIONSHIP_ID, floorContainsRoomUpdatePayload, null, Context.NONE);\n+            assertThat(updateRelationshipResponse.getStatusCode())\n+                .as(\"Updated relationship floor -> room\")\n+                .isEqualTo(HTTP_NO_CONTENT);\n+            logger.info(\"Updated {} relationship successfully in source {}\", FLOOR_CONTAINS_ROOM_RELATIONSHIP_ID, floorTwinId);\n+\n+            // GET relationship\n+            BasicRelationship floorContainsRoomRelationship = client.getRelationship(floorTwinId, FLOOR_CONTAINS_ROOM_RELATIONSHIP_ID, BasicRelationship.class);\n+            assertThat(floorContainsRoomRelationship.getId())\n+                .isEqualTo(FLOOR_CONTAINS_ROOM_RELATIONSHIP_ID)\n+                .as(\"Retrieved floor -> room relationship\");\n+            logger.info(\"Retrieved {} relationship under source {}\", floorContainsRoomRelationship.getId(), floorContainsRoomRelationship.getSourceId());\n+\n+            // LIST incoming relationships\n+            List<String> incomingRelationshipsSourceIds = new ArrayList<>();\n+            PagedIterable<IncomingRelationship> listIncomingRelationships = client.listIncomingRelationships(floorTwinId);\n+            listIncomingRelationships.forEach(incomingRelationship -> incomingRelationshipsSourceIds.add(incomingRelationship.getSourceId()));\n+            assertThat(incomingRelationshipsSourceIds)\n+                .as(\"Floor has incoming relationships from room and hvac\")\n+                .containsExactlyInAnyOrder(roomTwinId, hvacTwinId);\n+            logger.info(\"Retrieved incoming relationships for {}, found sources {}\", floorTwinId, Arrays.toString(incomingRelationshipsSourceIds.toArray()));\n+\n+            // LIST relationships\n+            List<String> relationshipsTargetIds = new ArrayList<>();\n+            PagedIterable<BasicRelationship> listRelationships = client.listRelationships(floorTwinId, BasicRelationship.class);\n+            listRelationships.forEach(basicRelationship -> relationshipsTargetIds.add(basicRelationship.getTargetId()));\n+            assertThat(relationshipsTargetIds)\n+                .as(\"Floor has a relationship to room and hvac\")\n+                .containsExactlyInAnyOrder(roomTwinId, hvacTwinId);\n+            logger.info(\"Retrieved all relationships for {}, found targets {}\", floorTwinId, Arrays.toString(relationshipsTargetIds.toArray()));\n+\n+            // LIST relationship by name\n+            List<String> containedInRelationshipsTargetIds = new ArrayList<>();\n+            PagedIterable<BasicRelationship> listContainedInRelationship = client.listRelationships(roomTwinId, CONTAINED_IN_RELATIONSHIP, BasicRelationship.class, Context.NONE);\n+            listContainedInRelationship.forEach(basicRelationship -> {\n+                containedInRelationshipsTargetIds.add(basicRelationship.getTargetId());\n+                logger.info(\"Retrieved relationship {} for twin {}\", basicRelationship.getId(), roomTwinId);\n+            });\n+            assertThat(containedInRelationshipsTargetIds.size())\n+                .as(\"Room has only one containedIn relationship to floor\")\n+                .isEqualTo(1);\n+\n+            // DELETE the created relationships\n+            client.deleteRelationship(floorTwinId, FLOOR_CONTAINS_ROOM_RELATIONSHIP_ID);\n+            logger.info(\"Deleted relationship {} for twin {}\", FLOOR_CONTAINS_ROOM_RELATIONSHIP_ID, floorTwinId);\n+\n+            client.deleteRelationship(roomTwinId, ROOM_CONTAINED_IN_FLOOR_RELATIONSHIP_ID);\n+            logger.info(\"Deleted relationship {} for twin {}\", ROOM_CONTAINED_IN_FLOOR_RELATIONSHIP_ID, roomTwinId);\n+\n+            client.deleteRelationship(floorTwinId, FLOOR_COOLED_BY_HVAC_RELATIONSHIP_ID);\n+            logger.info(\"Deleted relationship {} for twin {}\", FLOOR_COOLED_BY_HVAC_RELATIONSHIP_ID, floorTwinId);\n+\n+            client.deleteRelationship(hvacTwinId, HVAC_COOLS_FLOOR_RELATIONSHIP_ID);\n+            logger.info(\"Deleted relationship {} for twin {}\", HVAC_COOLS_FLOOR_RELATIONSHIP_ID, hvacTwinId);\n+\n+            // GET a relationship which doesn't exist - should return status code 404 (Not Found).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bfe6e0101a0faa0fb850753eb4632e2966b7f45"}, "originalPosition": 190}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2Mjc1MDE5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15016#pullrequestreview-486275019", "createdAt": "2020-09-10T20:12:02Z", "commit": {"oid": "2bfe6e0101a0faa0fb850753eb4632e2966b7f45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDoxMjowMlrOHQED6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDoxMjowMlrOHQED6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNTgwMQ==", "bodyText": "Like in the sync client test, are you missing code here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15016#discussion_r486605801", "createdAt": "2020-09-10T20:12:02Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/DigitalTwinsRelationshipAsyncTest.java", "diffHunk": "@@ -0,0 +1,276 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.digitaltwins.core.serialization.BasicDigitalTwin;\n+import com.azure.digitaltwins.core.serialization.BasicRelationship;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import reactor.test.StepVerifier;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.azure.digitaltwins.core.TestAssetDefaults.*;\n+import static com.azure.digitaltwins.core.TestAssetsHelper.*;\n+import static com.azure.digitaltwins.core.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n+import static com.azure.digitaltwins.core.TestHelper.assertRestException;\n+import static com.azure.digitaltwins.core.helpers.UniqueIdHelper.getUniqueDigitalTwinId;\n+import static com.azure.digitaltwins.core.helpers.UniqueIdHelper.getUniqueModelId;\n+import static java.net.HttpURLConnection.HTTP_NOT_FOUND;\n+import static java.net.HttpURLConnection.HTTP_PRECON_FAILED;\n+import static javax.net.ssl.HttpsURLConnection.HTTP_NO_CONTENT;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+\n+public class DigitalTwinsRelationshipAsyncTest extends DigitalTwinsRelationshipTestBase {\n+    private final ClientLogger logger = new ClientLogger(DigitalTwinsRelationshipAsyncTest.class);\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void relationshipLifecycleTest(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) {\n+        DigitalTwinsAsyncClient asyncClient = getAsyncClient(httpClient, serviceVersion);\n+\n+        String floorModelId = getUniqueModelId(FLOOR_MODEL_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+        String roomModelId = getUniqueModelId(ROOM_MODEL_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+        String hvacModelId = getUniqueModelId(HVAC_MODEL_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+\n+        String floorTwinId = getUniqueDigitalTwinId(FLOOR_TWIN_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+        String roomTwinId = getUniqueDigitalTwinId(ROOM_TWIN_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+        String hvacTwinId = getUniqueDigitalTwinId(HVAC_TWIN_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+\n+        try {\n+            // Create floor, room and hvac model\n+            createModelsRunner(\n+                floorModelId,\n+                roomModelId,\n+                hvacModelId,\n+                modelsList -> StepVerifier\n+                    .create(asyncClient.createModels(modelsList))\n+                    .assertNext(createResponseList -> logger.info(\"Created {} models successfully\", createResponseList.size()))\n+                    .verifyComplete());\n+\n+            // Create floor twin\n+            createFloorTwinRunner(\n+                floorTwinId,\n+                floorModelId,\n+                (twinId, twin) -> StepVerifier\n+                    .create(asyncClient.createDigitalTwin(twinId, twin, BasicDigitalTwin.class))\n+                    .assertNext(basicDigitalTwin -> logger.info(\"Created {} twin successfully\", basicDigitalTwin.getId()))\n+                    .verifyComplete());\n+\n+            // Create room twin\n+            createRoomTwinRunner(\n+                roomTwinId,\n+                roomModelId,\n+                (twinId, twin) -> StepVerifier\n+                    .create(asyncClient.createDigitalTwin(twinId, twin, BasicDigitalTwin.class))\n+                    .assertNext(basicDigitalTwin -> logger.info(\"Created {} twin successfully\", basicDigitalTwin.getId()))\n+                    .verifyComplete());\n+\n+            // Create hvac twin\n+            createHvacTwinRunner(\n+                hvacTwinId,\n+                hvacModelId,\n+                (twinId, twin) -> StepVerifier\n+                    .create(asyncClient.createDigitalTwin(twinId, twin, BasicDigitalTwin.class))\n+                    .assertNext(basicDigitalTwin -> logger.info(\"Created {} twin successfully\", basicDigitalTwin.getId()))\n+                    .verifyComplete());\n+\n+            // Connect the created twins via relationships\n+            String floorContainsRoomPayload = getRelationshipWithPropertyPayload(roomTwinId, CONTAINS_RELATIONSHIP, \"isAccessRestricted\", true);\n+            String floorTwinCoolsRelationshipPayload = getRelationshipPayload(floorTwinId, COOLS_RELATIONSHIP);\n+            String floorTwinContainedInRelationshipPayload = getRelationshipPayload(floorTwinId, CONTAINED_IN_RELATIONSHIP);\n+            String floorCooledByHvacPayload = getRelationshipPayload(hvacTwinId, COOLED_BY_RELATIONSHIP);\n+            List<Object> floorContainsRoomUpdatePayload = getRelationshipUpdatePayload(\"/isAccessRestricted\", false);\n+\n+            // Create relationship from Floor -> Room\n+            StepVerifier\n+                .create(asyncClient.createRelationship(floorTwinId, FLOOR_CONTAINS_ROOM_RELATIONSHIP_ID, floorContainsRoomPayload, BasicRelationship.class))\n+                .assertNext(\n+                    basicRelationship -> {\n+                        assertThat(basicRelationship.getId())\n+                            .isEqualTo(FLOOR_CONTAINS_ROOM_RELATIONSHIP_ID)\n+                            .as(\"Created relationship from floor -> room\");\n+                        logger.info(\"Created {} relationship between source = {} and target = {}\", basicRelationship.getId(), basicRelationship.getSourceId(), basicRelationship.getTargetId());\n+                    }\n+                )\n+                .verifyComplete();\n+\n+            // Create relationship from Floor -> Hvac\n+            StepVerifier\n+                .create(asyncClient.createRelationship(floorTwinId, FLOOR_COOLED_BY_HVAC_RELATIONSHIP_ID, floorCooledByHvacPayload, BasicRelationship.class))\n+                .assertNext(\n+                    basicRelationship -> {\n+                        assertThat(basicRelationship.getId())\n+                            .isEqualTo(FLOOR_COOLED_BY_HVAC_RELATIONSHIP_ID)\n+                            .as(\"Created relationship from floor -> hvac\");\n+                        logger.info(\"Created {} relationship between source = {} and target = {}\", basicRelationship.getId(), basicRelationship.getSourceId(), basicRelationship.getTargetId());\n+                    }\n+                )\n+                .verifyComplete();\n+\n+            // Create relationship from Hvac -> Floor\n+            StepVerifier\n+                .create(asyncClient.createRelationship(hvacTwinId, HVAC_COOLS_FLOOR_RELATIONSHIP_ID, floorTwinCoolsRelationshipPayload, BasicRelationship.class))\n+                .assertNext(\n+                    basicRelationship -> {\n+                        assertThat(basicRelationship.getId())\n+                            .isEqualTo(HVAC_COOLS_FLOOR_RELATIONSHIP_ID)\n+                            .as(\"Created relationship from hvac -> floor\");\n+                        logger.info(\"Created {} relationship between source = {} and target = {}\", basicRelationship.getId(), basicRelationship.getSourceId(), basicRelationship.getTargetId());\n+                    }\n+                )\n+                .verifyComplete();\n+\n+            // Create relationship from Room -> Floor\n+            StepVerifier\n+                .create(asyncClient.createRelationship(roomTwinId, ROOM_CONTAINED_IN_FLOOR_RELATIONSHIP_ID, floorTwinContainedInRelationshipPayload, BasicRelationship.class))\n+                .assertNext(\n+                    basicRelationship -> {\n+                        assertThat(basicRelationship.getId())\n+                            .isEqualTo(ROOM_CONTAINED_IN_FLOOR_RELATIONSHIP_ID)\n+                            .as(\"Created relationship from room -> floor\");\n+                        logger.info(\"Created {} relationship between source = {} and target = {}\", basicRelationship.getId(), basicRelationship.getSourceId(), basicRelationship.getTargetId());\n+                    }\n+                )\n+                .verifyComplete();\n+\n+            // Create a relation which already exists - should return status code 409 (Conflict).\n+            StepVerifier.create(asyncClient.createRelationship(roomTwinId, ROOM_CONTAINED_IN_FLOOR_RELATIONSHIP_ID, floorTwinContainedInRelationshipPayload))\n+                .verifyErrorSatisfies(ex -> assertRestException(ex, HTTP_PRECON_FAILED));\n+\n+            // Update relationships\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bfe6e0101a0faa0fb850753eb4632e2966b7f45"}, "originalPosition": 149}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2Mjc3ODUz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15016#pullrequestreview-486277853", "createdAt": "2020-09-10T20:16:17Z", "commit": {"oid": "2bfe6e0101a0faa0fb850753eb4632e2966b7f45"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDoxNjoxN1rOHQEMUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDoxNzowNVrOHQEN0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNzk1NQ==", "bodyText": "don't we need it everywhere in this file?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15016#discussion_r486607955", "createdAt": "2020-09-10T20:16:17Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/UniqueIdHelper.java", "diffHunk": "@@ -5,11 +5,12 @@\n import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n \n import java.net.HttpURLConnection;\n+import java.util.Objects;\n import java.util.function.Function;\n \n public class UniqueIdHelper {\n     public static String getUniqueModelId(String baseName, DigitalTwinsAsyncClient client, Function<Integer, String> randomIntegerStringGenerator) {\n-        return getUniqueId(baseName, (modelId -> client.getModel(modelId).block().getId()), randomIntegerStringGenerator);\n+        return getUniqueId(baseName, (modelId -> Objects.requireNonNull(client.getModel(modelId).block()).getId()), randomIntegerStringGenerator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bfe6e0101a0faa0fb850753eb4632e2966b7f45"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwODMzNg==", "bodyText": "Should we just call it RelationshipsAsyncTest? do we need the DigitalTwin prefix?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15016#discussion_r486608336", "createdAt": "2020-09-10T20:17:05Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/DigitalTwinsRelationshipAsyncTest.java", "diffHunk": "@@ -0,0 +1,276 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bfe6e0101a0faa0fb850753eb4632e2966b7f45"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2Mjg3NTk0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15016#pullrequestreview-486287594", "createdAt": "2020-09-10T20:31:02Z", "commit": {"oid": "2bfe6e0101a0faa0fb850753eb4632e2966b7f45"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3574, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}