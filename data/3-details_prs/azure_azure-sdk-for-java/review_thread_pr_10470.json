{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MjI4NzAx", "number": 10470, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzo0Nzo0MlrOD1hnFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDoxODozNlrOD1iG8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDUxNzk4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/FluxUtil.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzo0Nzo0MlrOGLAnmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODozMDoxN1rOGLkJKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NzY1OA==", "bodyText": "Should we document that the caller is responsible for closing the provided stream? (if the user provides the produced Flux to our async API then they should dispose it once async API completes)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10470#discussion_r414197658", "createdAt": "2020-04-23T23:47:42Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/FluxUtil.java", "diffHunk": "@@ -83,6 +84,74 @@ private static void accept(ByteArrayOutputStream byteOutputStream, ByteBuffer by\n         return byteArray;\n     }\n \n+    /**\n+     * Converts an {@link InputStream} into a {@link Flux} of {@link ByteBuffer} using a chunk size of 4096.\n+     * <p>\n+     * Given that {@link InputStream} is not guaranteed to be replayable the returned {@link Flux} should be considered\n+     * non-replayable as well.\n+     * <p>\n+     * If the passed {@link InputStream} is {@code null} {@link Flux#empty()} will be returned.\n+     *\n+     * @param inputStream The {@link InputStream} to convert into a {@link Flux}.\n+     * @return A {@link Flux} of {@link ByteBuffer ByteBuffers} that contains the contents of the stream.\n+     */\n+    public static Flux<ByteBuffer> toFluxByteBuffer(InputStream inputStream) {\n+        return toFluxByteBuffer(inputStream, 4096);\n+    }\n+\n+    /**\n+     * Converts an {@link InputStream} into a {@link Flux} of {@link ByteBuffer}.\n+     * <p>\n+     * Given that {@link InputStream} is not guaranteed to be replayable the returned {@link Flux} should be considered\n+     * non-replayable as well.\n+     * <p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32ed4959a2b839e9f5d94e49d4e7045fb0021b93"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwMDI4Mg==", "bodyText": "Good question, I don't think in any other location where we are converting an InputStream into a Flux<ByteBuffer> we close the stream.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10470#discussion_r414200282", "createdAt": "2020-04-23T23:54:55Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/FluxUtil.java", "diffHunk": "@@ -83,6 +84,74 @@ private static void accept(ByteArrayOutputStream byteOutputStream, ByteBuffer by\n         return byteArray;\n     }\n \n+    /**\n+     * Converts an {@link InputStream} into a {@link Flux} of {@link ByteBuffer} using a chunk size of 4096.\n+     * <p>\n+     * Given that {@link InputStream} is not guaranteed to be replayable the returned {@link Flux} should be considered\n+     * non-replayable as well.\n+     * <p>\n+     * If the passed {@link InputStream} is {@code null} {@link Flux#empty()} will be returned.\n+     *\n+     * @param inputStream The {@link InputStream} to convert into a {@link Flux}.\n+     * @return A {@link Flux} of {@link ByteBuffer ByteBuffers} that contains the contents of the stream.\n+     */\n+    public static Flux<ByteBuffer> toFluxByteBuffer(InputStream inputStream) {\n+        return toFluxByteBuffer(inputStream, 4096);\n+    }\n+\n+    /**\n+     * Converts an {@link InputStream} into a {@link Flux} of {@link ByteBuffer}.\n+     * <p>\n+     * Given that {@link InputStream} is not guaranteed to be replayable the returned {@link Flux} should be considered\n+     * non-replayable as well.\n+     * <p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NzY1OA=="}, "originalCommit": {"oid": "32ed4959a2b839e9f5d94e49d4e7045fb0021b93"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNTUzOA==", "bodyText": "yes, the Flux.generate is not closing stream and it shouldn't. I mean consumer of this API is in charge of dealing with it.\nInputStream is = // open-file\nFormRecognizer.someAsyncAPI(FluxUtils.toByteBufferFlux(is))\n    .doFinally(s -> {\n       is.close();\n    }).block();", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10470#discussion_r414205538", "createdAt": "2020-04-24T00:09:51Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/FluxUtil.java", "diffHunk": "@@ -83,6 +84,74 @@ private static void accept(ByteArrayOutputStream byteOutputStream, ByteBuffer by\n         return byteArray;\n     }\n \n+    /**\n+     * Converts an {@link InputStream} into a {@link Flux} of {@link ByteBuffer} using a chunk size of 4096.\n+     * <p>\n+     * Given that {@link InputStream} is not guaranteed to be replayable the returned {@link Flux} should be considered\n+     * non-replayable as well.\n+     * <p>\n+     * If the passed {@link InputStream} is {@code null} {@link Flux#empty()} will be returned.\n+     *\n+     * @param inputStream The {@link InputStream} to convert into a {@link Flux}.\n+     * @return A {@link Flux} of {@link ByteBuffer ByteBuffers} that contains the contents of the stream.\n+     */\n+    public static Flux<ByteBuffer> toFluxByteBuffer(InputStream inputStream) {\n+        return toFluxByteBuffer(inputStream, 4096);\n+    }\n+\n+    /**\n+     * Converts an {@link InputStream} into a {@link Flux} of {@link ByteBuffer}.\n+     * <p>\n+     * Given that {@link InputStream} is not guaranteed to be replayable the returned {@link Flux} should be considered\n+     * non-replayable as well.\n+     * <p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NzY1OA=="}, "originalCommit": {"oid": "32ed4959a2b839e9f5d94e49d4e7045fb0021b93"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNzY5MQ==", "bodyText": "The lifecyle of the inputstream should be managed by the user. They might decide to reset and reuse the inputstream if they want to. So, we shouldn't be closing user provided stream.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10470#discussion_r414207691", "createdAt": "2020-04-24T00:15:58Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/FluxUtil.java", "diffHunk": "@@ -83,6 +84,74 @@ private static void accept(ByteArrayOutputStream byteOutputStream, ByteBuffer by\n         return byteArray;\n     }\n \n+    /**\n+     * Converts an {@link InputStream} into a {@link Flux} of {@link ByteBuffer} using a chunk size of 4096.\n+     * <p>\n+     * Given that {@link InputStream} is not guaranteed to be replayable the returned {@link Flux} should be considered\n+     * non-replayable as well.\n+     * <p>\n+     * If the passed {@link InputStream} is {@code null} {@link Flux#empty()} will be returned.\n+     *\n+     * @param inputStream The {@link InputStream} to convert into a {@link Flux}.\n+     * @return A {@link Flux} of {@link ByteBuffer ByteBuffers} that contains the contents of the stream.\n+     */\n+    public static Flux<ByteBuffer> toFluxByteBuffer(InputStream inputStream) {\n+        return toFluxByteBuffer(inputStream, 4096);\n+    }\n+\n+    /**\n+     * Converts an {@link InputStream} into a {@link Flux} of {@link ByteBuffer}.\n+     * <p>\n+     * Given that {@link InputStream} is not guaranteed to be replayable the returned {@link Flux} should be considered\n+     * non-replayable as well.\n+     * <p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NzY1OA=="}, "originalCommit": {"oid": "32ed4959a2b839e9f5d94e49d4e7045fb0021b93"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIxNDk1Mw==", "bodyText": "yes.\nAlso, any thoughts on the replayability of such Fluxes?  I see this https://docs.oracle.com/javase/7/docs/api/java/io/InputStream.html#markSupported() API to check the stream can be marked and reset. Not sure how feasible it with File streams.\nIn FR APIs we do two subscriptions - one for contentType detection and another one when sending the content. The sync API takes InputStream from the user, convert that to Flux and call async API, so those APIs won't work as expected.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10470#discussion_r414214953", "createdAt": "2020-04-24T00:36:57Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/FluxUtil.java", "diffHunk": "@@ -83,6 +84,74 @@ private static void accept(ByteArrayOutputStream byteOutputStream, ByteBuffer by\n         return byteArray;\n     }\n \n+    /**\n+     * Converts an {@link InputStream} into a {@link Flux} of {@link ByteBuffer} using a chunk size of 4096.\n+     * <p>\n+     * Given that {@link InputStream} is not guaranteed to be replayable the returned {@link Flux} should be considered\n+     * non-replayable as well.\n+     * <p>\n+     * If the passed {@link InputStream} is {@code null} {@link Flux#empty()} will be returned.\n+     *\n+     * @param inputStream The {@link InputStream} to convert into a {@link Flux}.\n+     * @return A {@link Flux} of {@link ByteBuffer ByteBuffers} that contains the contents of the stream.\n+     */\n+    public static Flux<ByteBuffer> toFluxByteBuffer(InputStream inputStream) {\n+        return toFluxByteBuffer(inputStream, 4096);\n+    }\n+\n+    /**\n+     * Converts an {@link InputStream} into a {@link Flux} of {@link ByteBuffer}.\n+     * <p>\n+     * Given that {@link InputStream} is not guaranteed to be replayable the returned {@link Flux} should be considered\n+     * non-replayable as well.\n+     * <p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NzY1OA=="}, "originalCommit": {"oid": "32ed4959a2b839e9f5d94e49d4e7045fb0021b93"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3MDM1MQ==", "bodyText": "@anuchandy I think it would be safer for the FormRecognizer API to not subscribe twice in case the Flux being sent isn't replayable, this goes back to the problem where we need to assume Flux isn't replayable since treating as non-replayable will work for replayable but not the other way around.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10470#discussion_r414770351", "createdAt": "2020-04-24T18:14:21Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/FluxUtil.java", "diffHunk": "@@ -83,6 +84,74 @@ private static void accept(ByteArrayOutputStream byteOutputStream, ByteBuffer by\n         return byteArray;\n     }\n \n+    /**\n+     * Converts an {@link InputStream} into a {@link Flux} of {@link ByteBuffer} using a chunk size of 4096.\n+     * <p>\n+     * Given that {@link InputStream} is not guaranteed to be replayable the returned {@link Flux} should be considered\n+     * non-replayable as well.\n+     * <p>\n+     * If the passed {@link InputStream} is {@code null} {@link Flux#empty()} will be returned.\n+     *\n+     * @param inputStream The {@link InputStream} to convert into a {@link Flux}.\n+     * @return A {@link Flux} of {@link ByteBuffer ByteBuffers} that contains the contents of the stream.\n+     */\n+    public static Flux<ByteBuffer> toFluxByteBuffer(InputStream inputStream) {\n+        return toFluxByteBuffer(inputStream, 4096);\n+    }\n+\n+    /**\n+     * Converts an {@link InputStream} into a {@link Flux} of {@link ByteBuffer}.\n+     * <p>\n+     * Given that {@link InputStream} is not guaranteed to be replayable the returned {@link Flux} should be considered\n+     * non-replayable as well.\n+     * <p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NzY1OA=="}, "originalCommit": {"oid": "32ed4959a2b839e9f5d94e49d4e7045fb0021b93"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3OTY4OQ==", "bodyText": "I thought, in general, our SDKs assume Flux is \"replayable\" :), otherwise, retry is not going to work (retry requires multi-subscription). Storage is a special case where they are committed to supporting \"non-replyable\" Flux, that makes sense because of server-side chunk support.\nWe had some discussion on the same topic, in this thread #9953 (comment)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10470#discussion_r414779689", "createdAt": "2020-04-24T18:30:17Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/FluxUtil.java", "diffHunk": "@@ -83,6 +84,74 @@ private static void accept(ByteArrayOutputStream byteOutputStream, ByteBuffer by\n         return byteArray;\n     }\n \n+    /**\n+     * Converts an {@link InputStream} into a {@link Flux} of {@link ByteBuffer} using a chunk size of 4096.\n+     * <p>\n+     * Given that {@link InputStream} is not guaranteed to be replayable the returned {@link Flux} should be considered\n+     * non-replayable as well.\n+     * <p>\n+     * If the passed {@link InputStream} is {@code null} {@link Flux#empty()} will be returned.\n+     *\n+     * @param inputStream The {@link InputStream} to convert into a {@link Flux}.\n+     * @return A {@link Flux} of {@link ByteBuffer ByteBuffers} that contains the contents of the stream.\n+     */\n+    public static Flux<ByteBuffer> toFluxByteBuffer(InputStream inputStream) {\n+        return toFluxByteBuffer(inputStream, 4096);\n+    }\n+\n+    /**\n+     * Converts an {@link InputStream} into a {@link Flux} of {@link ByteBuffer}.\n+     * <p>\n+     * Given that {@link InputStream} is not guaranteed to be replayable the returned {@link Flux} should be considered\n+     * non-replayable as well.\n+     * <p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NzY1OA=="}, "originalCommit": {"oid": "32ed4959a2b839e9f5d94e49d4e7045fb0021b93"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDU5OTU0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/FluxUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDoxODozNlrOGLBSfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODoxNDo0NVrOGLjljw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwODYzOA==", "bodyText": "A method returning a reactive publisher shouldn't throw exceptions. It makes chaining of reactive operators difficult as the caller will have to handle errors in 2 ways. Return Flux.error() instead.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10470#discussion_r414208638", "createdAt": "2020-04-24T00:18:36Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/FluxUtil.java", "diffHunk": "@@ -83,6 +84,74 @@ private static void accept(ByteArrayOutputStream byteOutputStream, ByteBuffer by\n         return byteArray;\n     }\n \n+    /**\n+     * Converts an {@link InputStream} into a {@link Flux} of {@link ByteBuffer} using a chunk size of 4096.\n+     * <p>\n+     * Given that {@link InputStream} is not guaranteed to be replayable the returned {@link Flux} should be considered\n+     * non-replayable as well.\n+     * <p>\n+     * If the passed {@link InputStream} is {@code null} {@link Flux#empty()} will be returned.\n+     *\n+     * @param inputStream The {@link InputStream} to convert into a {@link Flux}.\n+     * @return A {@link Flux} of {@link ByteBuffer ByteBuffers} that contains the contents of the stream.\n+     */\n+    public static Flux<ByteBuffer> toFluxByteBuffer(InputStream inputStream) {\n+        return toFluxByteBuffer(inputStream, 4096);\n+    }\n+\n+    /**\n+     * Converts an {@link InputStream} into a {@link Flux} of {@link ByteBuffer}.\n+     * <p>\n+     * Given that {@link InputStream} is not guaranteed to be replayable the returned {@link Flux} should be considered\n+     * non-replayable as well.\n+     * <p>\n+     * If the passed {@link InputStream} is {@code null} {@link Flux#empty()} will be returned.\n+     *\n+     * @param inputStream The {@link InputStream} to convert into a {@link Flux}.\n+     * @param chunkSize The requested size for each {@link ByteBuffer}.\n+     * @return A {@link Flux} of {@link ByteBuffer ByteBuffers} that contains the contents of the stream.\n+     * @throws IllegalArgumentException If {@code chunkSize} is less than or equal to {@code 0}.\n+     */\n+    public static Flux<ByteBuffer> toFluxByteBuffer(InputStream inputStream, int chunkSize) {\n+        if (chunkSize <= 0) {\n+            throw new IllegalArgumentException(\"'chunkSize' must be greater than 0.\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32ed4959a2b839e9f5d94e49d4e7045fb0021b93"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3MDU3NQ==", "bodyText": "Changed to Flux.error", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10470#discussion_r414770575", "createdAt": "2020-04-24T18:14:45Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/FluxUtil.java", "diffHunk": "@@ -83,6 +84,74 @@ private static void accept(ByteArrayOutputStream byteOutputStream, ByteBuffer by\n         return byteArray;\n     }\n \n+    /**\n+     * Converts an {@link InputStream} into a {@link Flux} of {@link ByteBuffer} using a chunk size of 4096.\n+     * <p>\n+     * Given that {@link InputStream} is not guaranteed to be replayable the returned {@link Flux} should be considered\n+     * non-replayable as well.\n+     * <p>\n+     * If the passed {@link InputStream} is {@code null} {@link Flux#empty()} will be returned.\n+     *\n+     * @param inputStream The {@link InputStream} to convert into a {@link Flux}.\n+     * @return A {@link Flux} of {@link ByteBuffer ByteBuffers} that contains the contents of the stream.\n+     */\n+    public static Flux<ByteBuffer> toFluxByteBuffer(InputStream inputStream) {\n+        return toFluxByteBuffer(inputStream, 4096);\n+    }\n+\n+    /**\n+     * Converts an {@link InputStream} into a {@link Flux} of {@link ByteBuffer}.\n+     * <p>\n+     * Given that {@link InputStream} is not guaranteed to be replayable the returned {@link Flux} should be considered\n+     * non-replayable as well.\n+     * <p>\n+     * If the passed {@link InputStream} is {@code null} {@link Flux#empty()} will be returned.\n+     *\n+     * @param inputStream The {@link InputStream} to convert into a {@link Flux}.\n+     * @param chunkSize The requested size for each {@link ByteBuffer}.\n+     * @return A {@link Flux} of {@link ByteBuffer ByteBuffers} that contains the contents of the stream.\n+     * @throws IllegalArgumentException If {@code chunkSize} is less than or equal to {@code 0}.\n+     */\n+    public static Flux<ByteBuffer> toFluxByteBuffer(InputStream inputStream, int chunkSize) {\n+        if (chunkSize <= 0) {\n+            throw new IllegalArgumentException(\"'chunkSize' must be greater than 0.\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwODYzOA=="}, "originalCommit": {"oid": "32ed4959a2b839e9f5d94e49d4e7045fb0021b93"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4613, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}