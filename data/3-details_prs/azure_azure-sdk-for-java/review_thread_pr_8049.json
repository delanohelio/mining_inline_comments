{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNjY2NDMz", "number": 8049, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwNzowNToyNVrODeNNJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOToyNDozOVrODjNReQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDAwMjMxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedIterable.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwNzowNToyNVrOFnPhjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNTowMjoyM1rOFueVyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5MzEzNQ==", "bodyText": "We should provide a way to customize DEFAULT_BATCH_SIZE", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8049#discussion_r376693135", "createdAt": "2020-02-08T07:05:25Z", "author": {"login": "kushagraThapar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedIterable.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.paging;\n+\n+import com.azure.core.util.IterableStream;\n+import java.util.stream.Stream;\n+\n+/**\n+ * This class provides utility to iterate over {@link ContinuablePage} using {@link Stream}\n+ * {@link Iterable} interfaces.\n+ *\n+ * @param <C> the type of the continuation token\n+ * @param <T> The type of elements in a {@link ContinuablePage}\n+ * @param <P> The {@link ContinuablePage} holding items of type {@code T}.\n+ *\n+ * @see IterableStream\n+ * @see ContinuablePagedFlux\n+ */\n+public abstract class ContinuablePagedIterable<C, T, P extends ContinuablePage<C, T>> extends IterableStream<T> {\n+    private static final int DEFAULT_BATCH_SIZE = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec19cd6eda7c8b1f7645e3d83512fa82570883d0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIzMjkzMg==", "bodyText": "right, I'm planning to update the Ctr to take a custom batch size.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8049#discussion_r377232932", "createdAt": "2020-02-10T18:17:51Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedIterable.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.paging;\n+\n+import com.azure.core.util.IterableStream;\n+import java.util.stream.Stream;\n+\n+/**\n+ * This class provides utility to iterate over {@link ContinuablePage} using {@link Stream}\n+ * {@link Iterable} interfaces.\n+ *\n+ * @param <C> the type of the continuation token\n+ * @param <T> The type of elements in a {@link ContinuablePage}\n+ * @param <P> The {@link ContinuablePage} holding items of type {@code T}.\n+ *\n+ * @see IterableStream\n+ * @see ContinuablePagedFlux\n+ */\n+public abstract class ContinuablePagedIterable<C, T, P extends ContinuablePage<C, T>> extends IterableStream<T> {\n+    private static final int DEFAULT_BATCH_SIZE = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5MzEzNQ=="}, "originalCommit": {"oid": "ec19cd6eda7c8b1f7645e3d83512fa82570883d0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI3NTkxMw==", "bodyText": "this is done.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8049#discussion_r384275913", "createdAt": "2020-02-26T05:02:23Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedIterable.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.paging;\n+\n+import com.azure.core.util.IterableStream;\n+import java.util.stream.Stream;\n+\n+/**\n+ * This class provides utility to iterate over {@link ContinuablePage} using {@link Stream}\n+ * {@link Iterable} interfaces.\n+ *\n+ * @param <C> the type of the continuation token\n+ * @param <T> The type of elements in a {@link ContinuablePage}\n+ * @param <P> The {@link ContinuablePage} holding items of type {@code T}.\n+ *\n+ * @see IterableStream\n+ * @see ContinuablePagedFlux\n+ */\n+public abstract class ContinuablePagedIterable<C, T, P extends ContinuablePage<C, T>> extends IterableStream<T> {\n+    private static final int DEFAULT_BATCH_SIZE = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5MzEzNQ=="}, "originalCommit": {"oid": "ec19cd6eda7c8b1f7645e3d83512fa82570883d0"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzQ4Nzc0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedIterable.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzoyMDo0N1rOFnuqmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNTowMDowMFrOFueTsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwMzM1NQ==", "bodyText": "Adding Javadoc about default batch size would be good for user and improve quality of Javadoc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8049#discussion_r377203355", "createdAt": "2020-02-10T17:20:47Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedIterable.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.paging;\n+\n+import com.azure.core.util.IterableStream;\n+import java.util.stream.Stream;\n+\n+/**\n+ * This class provides utility to iterate over {@link ContinuablePage} using {@link Stream}\n+ * {@link Iterable} interfaces.\n+ *\n+ * @param <C> the type of the continuation token\n+ * @param <T> The type of elements in a {@link ContinuablePage}\n+ * @param <P> The {@link ContinuablePage} holding items of type {@code T}.\n+ *\n+ * @see IterableStream\n+ * @see ContinuablePagedFlux\n+ */\n+public abstract class ContinuablePagedIterable<C, T, P extends ContinuablePage<C, T>> extends IterableStream<T> {\n+    private static final int DEFAULT_BATCH_SIZE = 1;\n+    private final ContinuablePagedFlux<C, T, P> pagedFlux;\n+\n+    /**\n+     * Creates instance given {@link ContinuablePagedFlux}.\n+     *\n+     * @param pagedFlux the paged flux use as iterable\n+     */\n+    public ContinuablePagedIterable(ContinuablePagedFlux<C, T, P> pagedFlux) {\n+        super(pagedFlux);\n+        this.pagedFlux = pagedFlux;\n+    }\n+\n+    /**\n+     * Retrieve the {@link Stream}, one page at a time.\n+     * It will provide same {@link Stream} of T values from starting if called multiple times.\n+     *\n+     * @return {@link Stream} of a pages\n+     */\n+    public Stream<P> streamByPage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec19cd6eda7c8b1f7645e3d83512fa82570883d0"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIzMzE0MQ==", "bodyText": "yes, we will document it as part of adding a ctr argument for the batch size.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8049#discussion_r377233141", "createdAt": "2020-02-10T18:18:16Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedIterable.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.paging;\n+\n+import com.azure.core.util.IterableStream;\n+import java.util.stream.Stream;\n+\n+/**\n+ * This class provides utility to iterate over {@link ContinuablePage} using {@link Stream}\n+ * {@link Iterable} interfaces.\n+ *\n+ * @param <C> the type of the continuation token\n+ * @param <T> The type of elements in a {@link ContinuablePage}\n+ * @param <P> The {@link ContinuablePage} holding items of type {@code T}.\n+ *\n+ * @see IterableStream\n+ * @see ContinuablePagedFlux\n+ */\n+public abstract class ContinuablePagedIterable<C, T, P extends ContinuablePage<C, T>> extends IterableStream<T> {\n+    private static final int DEFAULT_BATCH_SIZE = 1;\n+    private final ContinuablePagedFlux<C, T, P> pagedFlux;\n+\n+    /**\n+     * Creates instance given {@link ContinuablePagedFlux}.\n+     *\n+     * @param pagedFlux the paged flux use as iterable\n+     */\n+    public ContinuablePagedIterable(ContinuablePagedFlux<C, T, P> pagedFlux) {\n+        super(pagedFlux);\n+        this.pagedFlux = pagedFlux;\n+    }\n+\n+    /**\n+     * Retrieve the {@link Stream}, one page at a time.\n+     * It will provide same {@link Stream} of T values from starting if called multiple times.\n+     *\n+     * @return {@link Stream} of a pages\n+     */\n+    public Stream<P> streamByPage() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwMzM1NQ=="}, "originalCommit": {"oid": "ec19cd6eda7c8b1f7645e3d83512fa82570883d0"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI3NTM3Nw==", "bodyText": "I've added batchsize based ctr with Javadoc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8049#discussion_r384275377", "createdAt": "2020-02-26T05:00:00Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedIterable.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.paging;\n+\n+import com.azure.core.util.IterableStream;\n+import java.util.stream.Stream;\n+\n+/**\n+ * This class provides utility to iterate over {@link ContinuablePage} using {@link Stream}\n+ * {@link Iterable} interfaces.\n+ *\n+ * @param <C> the type of the continuation token\n+ * @param <T> The type of elements in a {@link ContinuablePage}\n+ * @param <P> The {@link ContinuablePage} holding items of type {@code T}.\n+ *\n+ * @see IterableStream\n+ * @see ContinuablePagedFlux\n+ */\n+public abstract class ContinuablePagedIterable<C, T, P extends ContinuablePage<C, T>> extends IterableStream<T> {\n+    private static final int DEFAULT_BATCH_SIZE = 1;\n+    private final ContinuablePagedFlux<C, T, P> pagedFlux;\n+\n+    /**\n+     * Creates instance given {@link ContinuablePagedFlux}.\n+     *\n+     * @param pagedFlux the paged flux use as iterable\n+     */\n+    public ContinuablePagedIterable(ContinuablePagedFlux<C, T, P> pagedFlux) {\n+        super(pagedFlux);\n+        this.pagedFlux = pagedFlux;\n+    }\n+\n+    /**\n+     * Retrieve the {@link Stream}, one page at a time.\n+     * It will provide same {@link Stream} of T values from starting if called multiple times.\n+     *\n+     * @return {@link Stream} of a pages\n+     */\n+    public Stream<P> streamByPage() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwMzM1NQ=="}, "originalCommit": {"oid": "ec19cd6eda7c8b1f7645e3d83512fa82570883d0"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzQ5MTgxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedIterable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzoyMTo1NlrOFnutEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNTowMTo1M1rOFueVYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwMzk4Ng==", "bodyText": "Can we add this change in changelog .", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8049#discussion_r377203986", "createdAt": "2020-02-10T17:21:56Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedIterable.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.paging;\n+\n+import com.azure.core.util.IterableStream;\n+import java.util.stream.Stream;\n+\n+/**\n+ * This class provides utility to iterate over {@link ContinuablePage} using {@link Stream}\n+ * {@link Iterable} interfaces.\n+ *\n+ * @param <C> the type of the continuation token\n+ * @param <T> The type of elements in a {@link ContinuablePage}\n+ * @param <P> The {@link ContinuablePage} holding items of type {@code T}.\n+ *\n+ * @see IterableStream\n+ * @see ContinuablePagedFlux\n+ */\n+public abstract class ContinuablePagedIterable<C, T, P extends ContinuablePage<C, T>> extends IterableStream<T> {\n+    private static final int DEFAULT_BATCH_SIZE = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec19cd6eda7c8b1f7645e3d83512fa82570883d0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI3NTgxMQ==", "bodyText": "actually this is a new type, but we document batch size.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8049#discussion_r384275811", "createdAt": "2020-02-26T05:01:53Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedIterable.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.paging;\n+\n+import com.azure.core.util.IterableStream;\n+import java.util.stream.Stream;\n+\n+/**\n+ * This class provides utility to iterate over {@link ContinuablePage} using {@link Stream}\n+ * {@link Iterable} interfaces.\n+ *\n+ * @param <C> the type of the continuation token\n+ * @param <T> The type of elements in a {@link ContinuablePage}\n+ * @param <P> The {@link ContinuablePage} holding items of type {@code T}.\n+ *\n+ * @see IterableStream\n+ * @see ContinuablePagedFlux\n+ */\n+public abstract class ContinuablePagedIterable<C, T, P extends ContinuablePage<C, T>> extends IterableStream<T> {\n+    private static final int DEFAULT_BATCH_SIZE = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwMzk4Ng=="}, "originalCommit": {"oid": "ec19cd6eda7c8b1f7645e3d83512fa82570883d0"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTE0NDY3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedIterable.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMzozOTo0NFrOFuZVPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOToxOToyN1rOFu4ueA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5Mzg1Mw==", "bodyText": "Is this actually needed anymore? I believe this was added to fix a case where PagedIterable would over-eagerly consume a Flux.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8049#discussion_r384193853", "createdAt": "2020-02-25T23:39:44Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedIterable.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.paging;\n+\n+import com.azure.core.util.IterableStream;\n+import java.util.stream.Stream;\n+\n+/**\n+ * This class provides utility to iterate over {@link ContinuablePage} using {@link Stream}\n+ * {@link Iterable} interfaces.\n+ *\n+ * @param <C> the type of the continuation token\n+ * @param <T> The type of elements in a {@link ContinuablePage}\n+ * @param <P> The {@link ContinuablePage} holding items of type {@code T}.\n+ *\n+ * @see IterableStream\n+ * @see ContinuablePagedFlux\n+ */\n+public abstract class ContinuablePagedIterable<C, T, P extends ContinuablePage<C, T>> extends IterableStream<T> {\n+    private static final int DEFAULT_BATCH_SIZE = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec19cd6eda7c8b1f7645e3d83512fa82570883d0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI3NTA5Ng==", "bodyText": "yes, our default ContinuablePagedFluxCore will fetch only one page at time and when using that as the backing flux batch size doesn't make sense. But ContinuablePagedIterable is not bound to  ContinuablePagedFluxCore, it can take  any type adhere to ContinuablePagedFlux, batch size comes handy to control such page fluxes.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8049#discussion_r384275096", "createdAt": "2020-02-26T04:58:36Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedIterable.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.paging;\n+\n+import com.azure.core.util.IterableStream;\n+import java.util.stream.Stream;\n+\n+/**\n+ * This class provides utility to iterate over {@link ContinuablePage} using {@link Stream}\n+ * {@link Iterable} interfaces.\n+ *\n+ * @param <C> the type of the continuation token\n+ * @param <T> The type of elements in a {@link ContinuablePage}\n+ * @param <P> The {@link ContinuablePage} holding items of type {@code T}.\n+ *\n+ * @see IterableStream\n+ * @see ContinuablePagedFlux\n+ */\n+public abstract class ContinuablePagedIterable<C, T, P extends ContinuablePage<C, T>> extends IterableStream<T> {\n+    private static final int DEFAULT_BATCH_SIZE = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5Mzg1Mw=="}, "originalCommit": {"oid": "ec19cd6eda7c8b1f7645e3d83512fa82570883d0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwODIxNg==", "bodyText": "Sounds good to me", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8049#discussion_r384708216", "createdAt": "2020-02-26T19:19:27Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedIterable.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.paging;\n+\n+import com.azure.core.util.IterableStream;\n+import java.util.stream.Stream;\n+\n+/**\n+ * This class provides utility to iterate over {@link ContinuablePage} using {@link Stream}\n+ * {@link Iterable} interfaces.\n+ *\n+ * @param <C> the type of the continuation token\n+ * @param <T> The type of elements in a {@link ContinuablePage}\n+ * @param <P> The {@link ContinuablePage} holding items of type {@code T}.\n+ *\n+ * @see IterableStream\n+ * @see ContinuablePagedFlux\n+ */\n+public abstract class ContinuablePagedIterable<C, T, P extends ContinuablePage<C, T>> extends IterableStream<T> {\n+    private static final int DEFAULT_BATCH_SIZE = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5Mzg1Mw=="}, "originalCommit": {"oid": "ec19cd6eda7c8b1f7645e3d83512fa82570883d0"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjQzNDM4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedIterable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOToyMjo0MVrOFu41Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzoxODo0N1rOFwy6Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwOTk0Ng==", "bodyText": "nit: remove extra @return", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8049#discussion_r384709946", "createdAt": "2020-02-26T19:22:41Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedIterable.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.paging;\n+\n+import com.azure.core.util.IterableStream;\n+\n+import java.util.stream.Stream;\n+\n+/**\n+ * This class provides utility to iterate over {@link ContinuablePage} using {@link Stream}\n+ * {@link Iterable} interfaces.\n+ *\n+ * @param <C> the type of the continuation token\n+ * @param <T> The type of elements in a {@link ContinuablePage}\n+ * @param <P> The {@link ContinuablePage} holding items of type {@code T}.\n+ *\n+ * @see IterableStream\n+ * @see ContinuablePagedFlux\n+ */\n+public abstract class ContinuablePagedIterable<C, T, P extends ContinuablePage<C, T>> extends IterableStream<T> {\n+    private final ContinuablePagedFlux<C, T, P> pagedFlux;\n+    private final int batchSize;\n+\n+    /**\n+     * Creates instance with the given {@link ContinuablePagedFlux}.\n+     *\n+     * @param pagedFlux the paged flux use as iterable\n+     */\n+    public ContinuablePagedIterable(ContinuablePagedFlux<C, T, P> pagedFlux) {\n+        this(pagedFlux, 1);\n+    }\n+\n+    /**\n+     * Creates instance with the given {@link ContinuablePagedFlux}.\n+     *\n+     * @param pagedFlux the paged flux use as iterable\n+     * @param batchSize the bounded capacity to prefetch from the {@link ContinuablePagedFlux}\n+     */\n+    public ContinuablePagedIterable(ContinuablePagedFlux<C, T, P> pagedFlux, int batchSize) {\n+        super(pagedFlux);\n+        this.pagedFlux = pagedFlux;\n+        this.batchSize = batchSize;\n+    }\n+\n+    /**\n+     * Retrieve the {@link Stream}, one page at a time.\n+     * It will provide same {@link Stream} of T values from starting if called multiple times.\n+     *\n+     * @return {@link Stream} of a pages\n+     */\n+    public Stream<P> streamByPage() {\n+        return pagedFlux.byPage().toStream(this.batchSize);\n+    }\n+\n+    /**\n+     * Retrieve the {@link Stream}, one page at a time, starting from the next page associated with the given\n+     * continuation token. To start from first page, use {@link #streamByPage()} instead.\n+     *\n+     * @param continuationToken The continuation token used to fetch the next page\n+     * @return @return {@link Stream} of a pages\n+     */\n+    public Stream<P> streamByPage(C continuationToken) {\n+        return this.pagedFlux.byPage(continuationToken).toStream(this.batchSize);\n+    }\n+\n+    /**\n+     * Retrieve the {@link Stream}, one page at a time, with each page containing {@code preferredPageSize}\n+     * items.\n+     *\n+     * It will provide same {@link Stream} of T values from starting if called multiple times.\n+     *\n+     * @param preferredPageSize the preferred page size, service may or may not honor the page\n+     *                          size preference hence client MUST be prepared to handle pages\n+     *                          with different page size.\n+     * @return @return {@link Stream} of a pages\n+     */\n+    public Stream<P> streamByPage(int preferredPageSize) {\n+        return this.pagedFlux.byPage(null, preferredPageSize).toStream(this.batchSize);\n+    }\n+\n+    /**\n+     * Retrieve the {@link Stream}, one page at a time, with each page containing {@code preferredPageSize}\n+     * items, starting from the next page associated with the given continuation token.\n+     * To start from first page, use {@link #streamByPage()} or {@link #streamByPage(int)} instead.\n+     *\n+     * @param preferredPageSize the preferred page size, service may or may not honor the page\n+     *                          size preference hence client MUST be prepared to handle pages\n+     *                          with different page size.\n+     * @param continuationToken The continuation token used to fetch the next page\n+     * @return @return {@link Stream} of a pages", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d305468667d9129314c89c59e4d77a0e794afb"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxMDA4Mg==", "bodyText": "Removed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8049#discussion_r386710082", "createdAt": "2020-03-02T23:18:47Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedIterable.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.paging;\n+\n+import com.azure.core.util.IterableStream;\n+\n+import java.util.stream.Stream;\n+\n+/**\n+ * This class provides utility to iterate over {@link ContinuablePage} using {@link Stream}\n+ * {@link Iterable} interfaces.\n+ *\n+ * @param <C> the type of the continuation token\n+ * @param <T> The type of elements in a {@link ContinuablePage}\n+ * @param <P> The {@link ContinuablePage} holding items of type {@code T}.\n+ *\n+ * @see IterableStream\n+ * @see ContinuablePagedFlux\n+ */\n+public abstract class ContinuablePagedIterable<C, T, P extends ContinuablePage<C, T>> extends IterableStream<T> {\n+    private final ContinuablePagedFlux<C, T, P> pagedFlux;\n+    private final int batchSize;\n+\n+    /**\n+     * Creates instance with the given {@link ContinuablePagedFlux}.\n+     *\n+     * @param pagedFlux the paged flux use as iterable\n+     */\n+    public ContinuablePagedIterable(ContinuablePagedFlux<C, T, P> pagedFlux) {\n+        this(pagedFlux, 1);\n+    }\n+\n+    /**\n+     * Creates instance with the given {@link ContinuablePagedFlux}.\n+     *\n+     * @param pagedFlux the paged flux use as iterable\n+     * @param batchSize the bounded capacity to prefetch from the {@link ContinuablePagedFlux}\n+     */\n+    public ContinuablePagedIterable(ContinuablePagedFlux<C, T, P> pagedFlux, int batchSize) {\n+        super(pagedFlux);\n+        this.pagedFlux = pagedFlux;\n+        this.batchSize = batchSize;\n+    }\n+\n+    /**\n+     * Retrieve the {@link Stream}, one page at a time.\n+     * It will provide same {@link Stream} of T values from starting if called multiple times.\n+     *\n+     * @return {@link Stream} of a pages\n+     */\n+    public Stream<P> streamByPage() {\n+        return pagedFlux.byPage().toStream(this.batchSize);\n+    }\n+\n+    /**\n+     * Retrieve the {@link Stream}, one page at a time, starting from the next page associated with the given\n+     * continuation token. To start from first page, use {@link #streamByPage()} instead.\n+     *\n+     * @param continuationToken The continuation token used to fetch the next page\n+     * @return @return {@link Stream} of a pages\n+     */\n+    public Stream<P> streamByPage(C continuationToken) {\n+        return this.pagedFlux.byPage(continuationToken).toStream(this.batchSize);\n+    }\n+\n+    /**\n+     * Retrieve the {@link Stream}, one page at a time, with each page containing {@code preferredPageSize}\n+     * items.\n+     *\n+     * It will provide same {@link Stream} of T values from starting if called multiple times.\n+     *\n+     * @param preferredPageSize the preferred page size, service may or may not honor the page\n+     *                          size preference hence client MUST be prepared to handle pages\n+     *                          with different page size.\n+     * @return @return {@link Stream} of a pages\n+     */\n+    public Stream<P> streamByPage(int preferredPageSize) {\n+        return this.pagedFlux.byPage(null, preferredPageSize).toStream(this.batchSize);\n+    }\n+\n+    /**\n+     * Retrieve the {@link Stream}, one page at a time, with each page containing {@code preferredPageSize}\n+     * items, starting from the next page associated with the given continuation token.\n+     * To start from first page, use {@link #streamByPage()} or {@link #streamByPage(int)} instead.\n+     *\n+     * @param preferredPageSize the preferred page size, service may or may not honor the page\n+     *                          size preference hence client MUST be prepared to handle pages\n+     *                          with different page size.\n+     * @param continuationToken The continuation token used to fetch the next page\n+     * @return @return {@link Stream} of a pages", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwOTk0Ng=="}, "originalCommit": {"oid": "44d305468667d9129314c89c59e4d77a0e794afb"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjQ0MjE3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedIterable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOToyNDozOVrOFu453g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOToyNDozOVrOFu453g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMTEzNA==", "bodyText": "Instead of referring to a service, we can just say \"source may or may not honor the page size\" as this paged iterable is a generic concept that can be applicable to non-service sources too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8049#discussion_r384711134", "createdAt": "2020-02-26T19:24:39Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedIterable.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.paging;\n+\n+import com.azure.core.util.IterableStream;\n+\n+import java.util.stream.Stream;\n+\n+/**\n+ * This class provides utility to iterate over {@link ContinuablePage} using {@link Stream}\n+ * {@link Iterable} interfaces.\n+ *\n+ * @param <C> the type of the continuation token\n+ * @param <T> The type of elements in a {@link ContinuablePage}\n+ * @param <P> The {@link ContinuablePage} holding items of type {@code T}.\n+ *\n+ * @see IterableStream\n+ * @see ContinuablePagedFlux\n+ */\n+public abstract class ContinuablePagedIterable<C, T, P extends ContinuablePage<C, T>> extends IterableStream<T> {\n+    private final ContinuablePagedFlux<C, T, P> pagedFlux;\n+    private final int batchSize;\n+\n+    /**\n+     * Creates instance with the given {@link ContinuablePagedFlux}.\n+     *\n+     * @param pagedFlux the paged flux use as iterable\n+     */\n+    public ContinuablePagedIterable(ContinuablePagedFlux<C, T, P> pagedFlux) {\n+        this(pagedFlux, 1);\n+    }\n+\n+    /**\n+     * Creates instance with the given {@link ContinuablePagedFlux}.\n+     *\n+     * @param pagedFlux the paged flux use as iterable\n+     * @param batchSize the bounded capacity to prefetch from the {@link ContinuablePagedFlux}\n+     */\n+    public ContinuablePagedIterable(ContinuablePagedFlux<C, T, P> pagedFlux, int batchSize) {\n+        super(pagedFlux);\n+        this.pagedFlux = pagedFlux;\n+        this.batchSize = batchSize;\n+    }\n+\n+    /**\n+     * Retrieve the {@link Stream}, one page at a time.\n+     * It will provide same {@link Stream} of T values from starting if called multiple times.\n+     *\n+     * @return {@link Stream} of a pages\n+     */\n+    public Stream<P> streamByPage() {\n+        return pagedFlux.byPage().toStream(this.batchSize);\n+    }\n+\n+    /**\n+     * Retrieve the {@link Stream}, one page at a time, starting from the next page associated with the given\n+     * continuation token. To start from first page, use {@link #streamByPage()} instead.\n+     *\n+     * @param continuationToken The continuation token used to fetch the next page\n+     * @return @return {@link Stream} of a pages\n+     */\n+    public Stream<P> streamByPage(C continuationToken) {\n+        return this.pagedFlux.byPage(continuationToken).toStream(this.batchSize);\n+    }\n+\n+    /**\n+     * Retrieve the {@link Stream}, one page at a time, with each page containing {@code preferredPageSize}\n+     * items.\n+     *\n+     * It will provide same {@link Stream} of T values from starting if called multiple times.\n+     *\n+     * @param preferredPageSize the preferred page size, service may or may not honor the page\n+     *                          size preference hence client MUST be prepared to handle pages\n+     *                          with different page size.\n+     * @return @return {@link Stream} of a pages\n+     */\n+    public Stream<P> streamByPage(int preferredPageSize) {\n+        return this.pagedFlux.byPage(null, preferredPageSize).toStream(this.batchSize);\n+    }\n+\n+    /**\n+     * Retrieve the {@link Stream}, one page at a time, with each page containing {@code preferredPageSize}\n+     * items, starting from the next page associated with the given continuation token.\n+     * To start from first page, use {@link #streamByPage()} or {@link #streamByPage(int)} instead.\n+     *\n+     * @param preferredPageSize the preferred page size, service may or may not honor the page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d305468667d9129314c89c59e4d77a0e794afb"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3147, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}