{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NTc3Njkx", "number": 12814, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzoxODowNFrOELkUXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwOToyNjowM1rOELnCFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTY0ODMxOnYy", "diffSide": "RIGHT", "path": "sdk/resources/mgmt/src/main/java/com/azure/resourcemanager/resources/fluentcore/utils/Utils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzoxODowNFrOGtLhbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzozMjozNlrOGtL7tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyNzg4NQ==", "bodyText": "Why it is in main? I assume this is only needed in test?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12814#discussion_r450027885", "createdAt": "2020-07-06T07:18:04Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/resourcemanager/resources/fluentcore/utils/Utils.java", "diffHunk": "@@ -115,20 +125,67 @@ public static String createOdataFilterForTags(String tagName, String tagValue) {\n      * Download a file asynchronously.\n      *\n      * @param url the URL pointing to the file\n-     * @param retrofit the retrofit client\n+     * @param httpPipeline the http pipeline\n      * @return an Observable pointing to the content of the file\n      */\n+    public static Mono<byte[]> downloadFileAsync(String url, HttpPipeline httpPipeline) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e6f6da61c53f7e86db9ea4724463a84c1d23ce5"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzNDYxMg==", "bodyText": "It's required by AppServiceCertificateImpl.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12814#discussion_r450034612", "createdAt": "2020-07-06T07:32:36Z", "author": {"login": "xseeseesee"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/resourcemanager/resources/fluentcore/utils/Utils.java", "diffHunk": "@@ -115,20 +125,67 @@ public static String createOdataFilterForTags(String tagName, String tagValue) {\n      * Download a file asynchronously.\n      *\n      * @param url the URL pointing to the file\n-     * @param retrofit the retrofit client\n+     * @param httpPipeline the http pipeline\n      * @return an Observable pointing to the content of the file\n      */\n+    public static Mono<byte[]> downloadFileAsync(String url, HttpPipeline httpPipeline) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyNzg4NQ=="}, "originalCommit": {"oid": "0e6f6da61c53f7e86db9ea4724463a84c1d23ce5"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTk4MDIwOnYy", "diffSide": "RIGHT", "path": "sdk/resources/mgmt/src/main/java/com/azure/resourcemanager/resources/fluentcore/utils/Utils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1NDo1N1rOGtOo5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1NDo1N1rOGtOo5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3ODk1MQ==", "bodyText": "Maybe a Mono.error would be more proper?\nGenerally we would like an error early than late.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12814#discussion_r450078951", "createdAt": "2020-07-06T08:54:57Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/resourcemanager/resources/fluentcore/utils/Utils.java", "diffHunk": "@@ -115,20 +123,48 @@ public static String createOdataFilterForTags(String tagName, String tagValue) {\n      * Download a file asynchronously.\n      *\n      * @param url the URL pointing to the file\n-     * @param retrofit the retrofit client\n+     * @param httpPipeline the http pipeline\n      * @return an Observable pointing to the content of the file\n      */\n+    public static Mono<byte[]> downloadFileAsync(String url, HttpPipeline httpPipeline) {\n+        FileService service = RestProxy.create(FileService.class, httpPipeline);\n+        try {\n+            return service.download(getHost(url), getPathAndQuery(url))\n+                .flatMap(response -> FluxUtil.collectBytesInByteBufferStream(response.getValue()));\n+        } catch (MalformedURLException ex) {\n+            return Mono.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da942e3cea64154e29e1832355dcb64942725de5"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjA5MzAwOnYy", "diffSide": "RIGHT", "path": "sdk/resources/mgmt/src/main/java/com/azure/resourcemanager/resources/fluentcore/utils/Utils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwOToyNjowM1rOGtPuaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMjowOTowNVrOGtsv4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5Njc0Nw==", "bodyText": "I think it should be getRawPath and getRawQuery due to you just do a string add.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12814#discussion_r450096747", "createdAt": "2020-07-06T09:26:03Z", "author": {"login": "ChenTanyi"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/resourcemanager/resources/fluentcore/utils/Utils.java", "diffHunk": "@@ -115,20 +123,48 @@ public static String createOdataFilterForTags(String tagName, String tagValue) {\n      * Download a file asynchronously.\n      *\n      * @param url the URL pointing to the file\n-     * @param retrofit the retrofit client\n+     * @param httpPipeline the http pipeline\n      * @return an Observable pointing to the content of the file\n      */\n+    public static Mono<byte[]> downloadFileAsync(String url, HttpPipeline httpPipeline) {\n+        FileService service = RestProxy.create(FileService.class, httpPipeline);\n+        try {\n+            return service.download(getHost(url), getPathAndQuery(url))\n+                .flatMap(response -> FluxUtil.collectBytesInByteBufferStream(response.getValue()));\n+        } catch (MalformedURLException ex) {\n+            return Mono.empty();\n+        }\n+    }\n+\n     /**\n-     * Download a file asynchronously.\n+     * Get host from url.\n      *\n-     * @param url the URL pointing to the file\n-     * @param retrofit the retrofit client\n-     * @return an Observable pointing to the content of the file\n+     * @param urlString the url string\n+     * @return the host\n+     * @throws MalformedURLException when url is invalid format\n      */\n-    public static Mono<byte[]> downloadFileAsync(String url, HttpPipeline retrofit) {\n-        FileService service = RestProxy.create(FileService.class, retrofit);\n-        Mono<HttpResponse> response = service.download(url);\n-        return response.flatMap(httpResponse -> httpResponse.getBodyAsByteArray());\n+    public static String getHost(String urlString) throws MalformedURLException {\n+        URL url = new URL(urlString);\n+        String protocol = url.getProtocol();\n+        String host = url.getAuthority();\n+        return protocol + \"://\" + host;\n+    }\n+\n+    /**\n+     * Get path from url.\n+     *\n+     * @param urlString the url string\n+     * @return the path\n+     * @throws MalformedURLException when the url is invalid format\n+     */\n+    public static String getPathAndQuery(String urlString) throws MalformedURLException {\n+        URL url = new URL(urlString);\n+        String path = url.getPath();\n+        String query = url.getQuery();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da942e3cea64154e29e1832355dcb64942725de5"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEzMTc4Mw==", "bodyText": "Not available for URL. Such methods are in URI.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12814#discussion_r450131783", "createdAt": "2020-07-06T10:31:09Z", "author": {"login": "xseeseesee"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/resourcemanager/resources/fluentcore/utils/Utils.java", "diffHunk": "@@ -115,20 +123,48 @@ public static String createOdataFilterForTags(String tagName, String tagValue) {\n      * Download a file asynchronously.\n      *\n      * @param url the URL pointing to the file\n-     * @param retrofit the retrofit client\n+     * @param httpPipeline the http pipeline\n      * @return an Observable pointing to the content of the file\n      */\n+    public static Mono<byte[]> downloadFileAsync(String url, HttpPipeline httpPipeline) {\n+        FileService service = RestProxy.create(FileService.class, httpPipeline);\n+        try {\n+            return service.download(getHost(url), getPathAndQuery(url))\n+                .flatMap(response -> FluxUtil.collectBytesInByteBufferStream(response.getValue()));\n+        } catch (MalformedURLException ex) {\n+            return Mono.empty();\n+        }\n+    }\n+\n     /**\n-     * Download a file asynchronously.\n+     * Get host from url.\n      *\n-     * @param url the URL pointing to the file\n-     * @param retrofit the retrofit client\n-     * @return an Observable pointing to the content of the file\n+     * @param urlString the url string\n+     * @return the host\n+     * @throws MalformedURLException when url is invalid format\n      */\n-    public static Mono<byte[]> downloadFileAsync(String url, HttpPipeline retrofit) {\n-        FileService service = RestProxy.create(FileService.class, retrofit);\n-        Mono<HttpResponse> response = service.download(url);\n-        return response.flatMap(httpResponse -> httpResponse.getBodyAsByteArray());\n+    public static String getHost(String urlString) throws MalformedURLException {\n+        URL url = new URL(urlString);\n+        String protocol = url.getProtocol();\n+        String host = url.getAuthority();\n+        return protocol + \"://\" + host;\n+    }\n+\n+    /**\n+     * Get path from url.\n+     *\n+     * @param urlString the url string\n+     * @return the path\n+     * @throws MalformedURLException when the url is invalid format\n+     */\n+    public static String getPathAndQuery(String urlString) throws MalformedURLException {\n+        URL url = new URL(urlString);\n+        String path = url.getPath();\n+        String query = url.getQuery();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5Njc0Nw=="}, "originalCommit": {"oid": "da942e3cea64154e29e1832355dcb64942725de5"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3MjI1OQ==", "bodyText": "Could use a bit testing (send one to httpbin.org, or use your fiddler).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12814#discussion_r450572259", "createdAt": "2020-07-07T02:09:05Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/resourcemanager/resources/fluentcore/utils/Utils.java", "diffHunk": "@@ -115,20 +123,48 @@ public static String createOdataFilterForTags(String tagName, String tagValue) {\n      * Download a file asynchronously.\n      *\n      * @param url the URL pointing to the file\n-     * @param retrofit the retrofit client\n+     * @param httpPipeline the http pipeline\n      * @return an Observable pointing to the content of the file\n      */\n+    public static Mono<byte[]> downloadFileAsync(String url, HttpPipeline httpPipeline) {\n+        FileService service = RestProxy.create(FileService.class, httpPipeline);\n+        try {\n+            return service.download(getHost(url), getPathAndQuery(url))\n+                .flatMap(response -> FluxUtil.collectBytesInByteBufferStream(response.getValue()));\n+        } catch (MalformedURLException ex) {\n+            return Mono.empty();\n+        }\n+    }\n+\n     /**\n-     * Download a file asynchronously.\n+     * Get host from url.\n      *\n-     * @param url the URL pointing to the file\n-     * @param retrofit the retrofit client\n-     * @return an Observable pointing to the content of the file\n+     * @param urlString the url string\n+     * @return the host\n+     * @throws MalformedURLException when url is invalid format\n      */\n-    public static Mono<byte[]> downloadFileAsync(String url, HttpPipeline retrofit) {\n-        FileService service = RestProxy.create(FileService.class, retrofit);\n-        Mono<HttpResponse> response = service.download(url);\n-        return response.flatMap(httpResponse -> httpResponse.getBodyAsByteArray());\n+    public static String getHost(String urlString) throws MalformedURLException {\n+        URL url = new URL(urlString);\n+        String protocol = url.getProtocol();\n+        String host = url.getAuthority();\n+        return protocol + \"://\" + host;\n+    }\n+\n+    /**\n+     * Get path from url.\n+     *\n+     * @param urlString the url string\n+     * @return the path\n+     * @throws MalformedURLException when the url is invalid format\n+     */\n+    public static String getPathAndQuery(String urlString) throws MalformedURLException {\n+        URL url = new URL(urlString);\n+        String path = url.getPath();\n+        String query = url.getQuery();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5Njc0Nw=="}, "originalCommit": {"oid": "da942e3cea64154e29e1832355dcb64942725de5"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3631, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}