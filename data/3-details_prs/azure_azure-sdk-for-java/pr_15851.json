{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1ODg4ODYx", "number": 15851, "title": "Created classes for parsing certificates, keys and secrets identifiers.", "bodyText": "Addresses #8292.\nI'm not sure if the Identifier classes should belong to the model package, but they're there for now. Had to duplicate some code because we don't have a shared package for Key Vault in Java.\nWill add unit tests soon. Done.", "createdAt": "2020-10-01T01:25:51Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15851", "merged": true, "mergeCommit": {"oid": "a2c888c5c927cbd116290649f1962e58b1b80a16"}, "closed": true, "closedAt": "2020-10-03T03:49:57Z", "author": {"login": "vcolin7"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOHCYtgH2gAyNDk1ODg4ODYxOjllYTllYTYxZjEyNzM4OTU5OGVjNzhiNTI1OGI3Y2MwYzkyZGU4YjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOx1BLAH2gAyNDk1ODg4ODYxOjljNmEyYWNiZmQ3NjZjMzc5NTQ4NjIyMjUwMThiNzdhZDI0MWNhZDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9ea9ea61f127389598ec78b5258b7cc0c92de8b4", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9ea9ea61f127389598ec78b5258b7cc0c92de8b4", "committedDate": "2020-10-01T01:24:07Z", "message": "Created model classes for certificates, keys and secrets identifiers."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de1a8c6ba5f96a3fe24bb802fd746b17d93ac794", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/de1a8c6ba5f96a3fe24bb802fd746b17d93ac794", "committedDate": "2020-10-01T18:14:18Z", "message": "Fixed spotbugs issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7005cbf1b7509c1849759aab0656ed0291f4474a", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7005cbf1b7509c1849759aab0656ed0291f4474a", "committedDate": "2020-10-01T18:51:22Z", "message": "Added unit tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0064f044e8cd3bce1619de5b9c68dfdb8b5fc2c4", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0064f044e8cd3bce1619de5b9c68dfdb8b5fc2c4", "committedDate": "2020-10-01T21:30:00Z", "message": "Fixed checkstyle and build issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e400d2960ab99cb7cbdf99c471a55235d2a2a75c", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e400d2960ab99cb7cbdf99c471a55235d2a2a75c", "committedDate": "2020-10-02T19:02:19Z", "message": "Added support for deleted collections (\"deletedcertificates\", \"deletedkeys\" and \"deletedsecrets\")."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afbc426c6fff6f382d9536cc4a1f13145d5ac9eb", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/afbc426c6fff6f382d9536cc4a1f13145d5ac9eb", "committedDate": "2020-10-02T20:02:22Z", "message": "Added more validity checks and modified unit tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNDE4NDIx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15851#pullrequestreview-501418421", "createdAt": "2020-10-02T20:11:07Z", "commit": {"oid": "afbc426c6fff6f382d9536cc4a1f13145d5ac9eb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6eb4b28f2788eb64ff1b7f385b46ef3debb809c0", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6eb4b28f2788eb64ff1b7f385b46ef3debb809c0", "committedDate": "2020-10-02T20:17:18Z", "message": "Fixed checkstyle issues."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNTA0MjMx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15851#pullrequestreview-501504231", "createdAt": "2020-10-03T00:31:22Z", "commit": {"oid": "6eb4b28f2788eb64ff1b7f385b46ef3debb809c0"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDozMToyMlrOHb-fOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMTo1NTo0MlrOHb-_Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NzQwMQ==", "bodyText": "It is better to catch the MalformedURLException and wrap it with IllegalArgumentException with a custom message and attach the MalformedURLException as a cause.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15851#discussion_r499097401", "createdAt": "2020-10-03T00:31:22Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-certificates/src/main/java/com/azure/security/keyvault/certificates/models/KeyVaultCertificateIdentifier.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.certificates.models;\n+\n+import com.azure.security.keyvault.certificates.CertificateAsyncClient;\n+import com.azure.security.keyvault.certificates.CertificateClient;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+/**\n+ * Information about a {@link KeyVaultCertificate} parsed from the certificate URL. You can use this information when\n+ * calling methods of {@link CertificateClient} or {@link CertificateAsyncClient}.\n+ */\n+public final class KeyVaultCertificateIdentifier {\n+    private final String certificateId, vaultUrl, name, version;\n+\n+    private KeyVaultCertificateIdentifier(String certificateId, String vaultUrl, String name, String version) {\n+        this.certificateId = certificateId;\n+        this.vaultUrl = vaultUrl;\n+        this.name = name;\n+        this.version = version;\n+    }\n+\n+    /**\n+     * Gets the key identifier used to create this object\n+     *\n+     * @return The certificate identifier.\n+     */\n+    public String getCertificateId() {\n+        return certificateId;\n+    }\n+\n+    /**\n+     * Gets the URL of the Key Vault.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Gets the name of the certificate.\n+     *\n+     * @return The certificate name.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Gets the optional version of the certificate.\n+     *\n+     * @return The certificate version.\n+     */\n+    public String getVersion() {\n+        return version;\n+    }\n+\n+    /**\n+     * Create a new {@link KeyVaultCertificateIdentifier} from a given certificate identifier.\n+     *\n+     * <p>Valid examples are:\n+     *\n+     * <ul>\n+     *     <li>https://{key-vault-name}.vault.azure.net/certificates/{certificate-name}</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/certificates/{certificate-name}/pending</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/certificates/{certificate-name}/{unique-version-id}</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/deletedcertificates/{deleted-certificate-name}</li>\n+     * </ul>\n+     *\n+     * @param certificateId The certificate identifier to extract information from.\n+     * @return a new instance of {@link KeyVaultCertificateIdentifier}.\n+     * @throws IllegalArgumentException if the given identifier is {@code null}.\n+     * @throws MalformedURLException if the given identifier is not a valid Key Vault Certificate identifier\n+     */\n+    public static KeyVaultCertificateIdentifier parse(String certificateId) throws IllegalArgumentException, MalformedURLException {\n+        if (certificateId == null) {\n+            throw new IllegalArgumentException(\"certificateId cannot be null\");\n+        }\n+\n+        URL url = new URL(certificateId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb4b28f2788eb64ff1b7f385b46ef3debb809c0"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NzY0Nw==", "bodyText": "this can be refactored and made readable with String.format command.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15851#discussion_r499097647", "createdAt": "2020-10-03T00:33:23Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-certificates/src/main/java/com/azure/security/keyvault/certificates/models/KeyVaultCertificateIdentifier.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.certificates.models;\n+\n+import com.azure.security.keyvault.certificates.CertificateAsyncClient;\n+import com.azure.security.keyvault.certificates.CertificateClient;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+/**\n+ * Information about a {@link KeyVaultCertificate} parsed from the certificate URL. You can use this information when\n+ * calling methods of {@link CertificateClient} or {@link CertificateAsyncClient}.\n+ */\n+public final class KeyVaultCertificateIdentifier {\n+    private final String certificateId, vaultUrl, name, version;\n+\n+    private KeyVaultCertificateIdentifier(String certificateId, String vaultUrl, String name, String version) {\n+        this.certificateId = certificateId;\n+        this.vaultUrl = vaultUrl;\n+        this.name = name;\n+        this.version = version;\n+    }\n+\n+    /**\n+     * Gets the key identifier used to create this object\n+     *\n+     * @return The certificate identifier.\n+     */\n+    public String getCertificateId() {\n+        return certificateId;\n+    }\n+\n+    /**\n+     * Gets the URL of the Key Vault.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Gets the name of the certificate.\n+     *\n+     * @return The certificate name.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Gets the optional version of the certificate.\n+     *\n+     * @return The certificate version.\n+     */\n+    public String getVersion() {\n+        return version;\n+    }\n+\n+    /**\n+     * Create a new {@link KeyVaultCertificateIdentifier} from a given certificate identifier.\n+     *\n+     * <p>Valid examples are:\n+     *\n+     * <ul>\n+     *     <li>https://{key-vault-name}.vault.azure.net/certificates/{certificate-name}</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/certificates/{certificate-name}/pending</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/certificates/{certificate-name}/{unique-version-id}</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/deletedcertificates/{deleted-certificate-name}</li>\n+     * </ul>\n+     *\n+     * @param certificateId The certificate identifier to extract information from.\n+     * @return a new instance of {@link KeyVaultCertificateIdentifier}.\n+     * @throws IllegalArgumentException if the given identifier is {@code null}.\n+     * @throws MalformedURLException if the given identifier is not a valid Key Vault Certificate identifier\n+     */\n+    public static KeyVaultCertificateIdentifier parse(String certificateId) throws IllegalArgumentException, MalformedURLException {\n+        if (certificateId == null) {\n+            throw new IllegalArgumentException(\"certificateId cannot be null\");\n+        }\n+\n+        URL url = new URL(certificateId);\n+        // We expect an identifier with either 2 or 3 path segments: collection + name [+ version]\n+        String[] pathSegments = url.getPath().split(\"/\");\n+\n+        if ((pathSegments.length != 3 && pathSegments.length != 4) // More or less segments in the URI than expected.\n+            || !\"https\".equals(url.getProtocol()) // Invalid protocol.\n+            || (!\"certificates\".equals(pathSegments[1]) && !\"deletedcertificates\".equals(pathSegments[1])) // Invalid collection.\n+            || (\"deletedcertificates\".equals(pathSegments[1]) && pathSegments.length == 4)) { // Deleted items do not include a version.\n+            throw new IllegalArgumentException(\"certificateId is not a valid Key Vault Certificate identifier\");\n+        }\n+\n+        return new KeyVaultCertificateIdentifier(certificateId, url.getProtocol() + \"://\" + url.getHost(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb4b28f2788eb64ff1b7f385b46ef3debb809c0"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwNTQ2MA==", "bodyText": "same feedback as certs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15851#discussion_r499105460", "createdAt": "2020-10-03T01:55:01Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/models/KeyVaultKeyIdentifier.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.models;\n+\n+import com.azure.security.keyvault.keys.KeyAsyncClient;\n+import com.azure.security.keyvault.keys.KeyClient;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+/**\n+ * Information about a {@link KeyVaultKey} parsed from the key URL. You can use this information when calling methods\n+ * of {@link KeyClient} or {@link KeyAsyncClient}.\n+ */\n+public final class KeyVaultKeyIdentifier {\n+    private final String keyId, vaultUrl, name, version;\n+\n+    private KeyVaultKeyIdentifier(String keyId, String vaultUrl, String name, String version) {\n+        this.keyId = keyId;\n+        this.vaultUrl = vaultUrl;\n+        this.name = name;\n+        this.version = version;\n+    }\n+\n+    /**\n+     * Gets the key identifier used to create this object.\n+     *\n+     * @return The key identifier.\n+     */\n+    public String getKeyId() {\n+        return keyId;\n+    }\n+\n+    /**\n+     * Gets the URL of the Key Vault.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Gets the name of the key.\n+     *\n+     * @return The key name.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Gets the optional version of the key.\n+     *\n+     * @return The key version.\n+     */\n+    public String getVersion() {\n+        return version;\n+    }\n+\n+    /**\n+     * Create a new {@link KeyVaultKeyIdentifier} from a given key identifier.\n+     *\n+     * <p>Valid examples are:\n+     *\n+     * <ul>\n+     *     <li>https://{key-vault-name}.vault.azure.net/keys/{key-name}</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/keys/{key-name}/pending</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/keys/{key-name}/{unique-version-id}</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/deletedkeys/{deleted-key-name}</li>\n+     * </ul>\n+     *\n+     * @param keyId The key identifier to extract information from.\n+     * @return a new instance of {@link KeyVaultKeyIdentifier}.\n+     * @throws IllegalArgumentException if the given identifier is {@code null}.\n+     * @throws MalformedURLException if the given identifier is not a valid Key Vault Key identifier\n+     */\n+    public static KeyVaultKeyIdentifier parse(String keyId) throws IllegalArgumentException, MalformedURLException {\n+        if (keyId == null) {\n+            throw new IllegalArgumentException(\"keyId cannot be null\");\n+        }\n+\n+        URL url = new URL(keyId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb4b28f2788eb64ff1b7f385b46ef3debb809c0"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwNTUwNg==", "bodyText": "same feedback as certs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15851#discussion_r499105506", "createdAt": "2020-10-03T01:55:21Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/models/KeyVaultKeyIdentifier.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.models;\n+\n+import com.azure.security.keyvault.keys.KeyAsyncClient;\n+import com.azure.security.keyvault.keys.KeyClient;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+/**\n+ * Information about a {@link KeyVaultKey} parsed from the key URL. You can use this information when calling methods\n+ * of {@link KeyClient} or {@link KeyAsyncClient}.\n+ */\n+public final class KeyVaultKeyIdentifier {\n+    private final String keyId, vaultUrl, name, version;\n+\n+    private KeyVaultKeyIdentifier(String keyId, String vaultUrl, String name, String version) {\n+        this.keyId = keyId;\n+        this.vaultUrl = vaultUrl;\n+        this.name = name;\n+        this.version = version;\n+    }\n+\n+    /**\n+     * Gets the key identifier used to create this object.\n+     *\n+     * @return The key identifier.\n+     */\n+    public String getKeyId() {\n+        return keyId;\n+    }\n+\n+    /**\n+     * Gets the URL of the Key Vault.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Gets the name of the key.\n+     *\n+     * @return The key name.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Gets the optional version of the key.\n+     *\n+     * @return The key version.\n+     */\n+    public String getVersion() {\n+        return version;\n+    }\n+\n+    /**\n+     * Create a new {@link KeyVaultKeyIdentifier} from a given key identifier.\n+     *\n+     * <p>Valid examples are:\n+     *\n+     * <ul>\n+     *     <li>https://{key-vault-name}.vault.azure.net/keys/{key-name}</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/keys/{key-name}/pending</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/keys/{key-name}/{unique-version-id}</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/deletedkeys/{deleted-key-name}</li>\n+     * </ul>\n+     *\n+     * @param keyId The key identifier to extract information from.\n+     * @return a new instance of {@link KeyVaultKeyIdentifier}.\n+     * @throws IllegalArgumentException if the given identifier is {@code null}.\n+     * @throws MalformedURLException if the given identifier is not a valid Key Vault Key identifier\n+     */\n+    public static KeyVaultKeyIdentifier parse(String keyId) throws IllegalArgumentException, MalformedURLException {\n+        if (keyId == null) {\n+            throw new IllegalArgumentException(\"keyId cannot be null\");\n+        }\n+\n+        URL url = new URL(keyId);\n+        // We expect an identifier with either 2 or 3 path segments: collection + name [+ version]\n+        String[] pathSegments = url.getPath().split(\"/\");\n+\n+        if ((pathSegments.length != 3 && pathSegments.length != 4) // More or less segments in the URI than expected.\n+            || !\"https\".equals(url.getProtocol()) // Invalid protocol.\n+            || (!\"keys\".equals(pathSegments[1]) && !\"deletedkeys\".equals(pathSegments[1])) // Invalid collection.\n+            || (\"deletedkeys\".equals(pathSegments[1]) && pathSegments.length == 4)) { // Deleted items do not include a version.\n+            throw new IllegalArgumentException(\"keyId is not a valid Key Vault Key identifier\");\n+        }\n+\n+        return new KeyVaultKeyIdentifier(keyId, url.getProtocol() + \"://\" + url.getHost(), pathSegments[2],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb4b28f2788eb64ff1b7f385b46ef3debb809c0"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwNTUyMQ==", "bodyText": "same feedback.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15851#discussion_r499105521", "createdAt": "2020-10-03T01:55:35Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/models/KeyVaultSecretIdentifier.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.secrets.models;\n+\n+import com.azure.security.keyvault.secrets.SecretAsyncClient;\n+import com.azure.security.keyvault.secrets.SecretClient;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+/**\n+ * Information about a {@link KeyVaultSecret} parsed from the secret URL. You can use this information when calling\n+ * methods of {@link SecretClient} or {@link SecretAsyncClient}.\n+ */\n+public final class KeyVaultSecretIdentifier {\n+    private final String secretId, vaultUrl, name, version;\n+\n+    private KeyVaultSecretIdentifier(String secretId, String vaultUrl, String name, String version) {\n+        this.secretId = secretId;\n+        this.vaultUrl = vaultUrl;\n+        this.name = name;\n+        this.version = version;\n+    }\n+\n+    /**\n+     * Gets the key identifier used to create this object\n+     *\n+     * @return The secret identifier.\n+     */\n+    public String getSecretId() {\n+        return secretId;\n+    }\n+\n+    /**\n+     * Gets the URL of the Key Vault.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Gets the name of the secret.\n+     *\n+     * @return The secret name.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Gets the optional version of the secret.\n+     *\n+     * @return The secret version.\n+     */\n+    public String getVersion() {\n+        return version;\n+    }\n+\n+    /**\n+     * Create a new {@link KeyVaultSecretIdentifier} from a given secret identifier.\n+     *\n+     * <p>Valid examples are:\n+     *\n+     * <ul>\n+     *     <li>https://{key-vault-name}.vault.azure.net/secrets/{secret-name}</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/secrets/{secret-name}/pending</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/secrets/{secret-name}/{unique-version-id}</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/deletedsecrets/{deleted-secret-name}</li>\n+     * </ul>\n+     *\n+     * @param secretId The secret identifier to extract information from.\n+     * @return a new instance of {@link KeyVaultSecretIdentifier}.\n+     * @throws IllegalArgumentException if the given identifier is {@code null}.\n+     * @throws MalformedURLException if the given identifier is not a valid Key Vault Secret identifier\n+     */\n+    public static KeyVaultSecretIdentifier parse(String secretId) throws IllegalArgumentException, MalformedURLException {\n+        if (secretId == null) {\n+            throw new IllegalArgumentException(\"secretId cannot be null\");\n+        }\n+\n+        URL url = new URL(secretId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb4b28f2788eb64ff1b7f385b46ef3debb809c0"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwNTUzOA==", "bodyText": "same feedback.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15851#discussion_r499105538", "createdAt": "2020-10-03T01:55:42Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/models/KeyVaultSecretIdentifier.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.secrets.models;\n+\n+import com.azure.security.keyvault.secrets.SecretAsyncClient;\n+import com.azure.security.keyvault.secrets.SecretClient;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+/**\n+ * Information about a {@link KeyVaultSecret} parsed from the secret URL. You can use this information when calling\n+ * methods of {@link SecretClient} or {@link SecretAsyncClient}.\n+ */\n+public final class KeyVaultSecretIdentifier {\n+    private final String secretId, vaultUrl, name, version;\n+\n+    private KeyVaultSecretIdentifier(String secretId, String vaultUrl, String name, String version) {\n+        this.secretId = secretId;\n+        this.vaultUrl = vaultUrl;\n+        this.name = name;\n+        this.version = version;\n+    }\n+\n+    /**\n+     * Gets the key identifier used to create this object\n+     *\n+     * @return The secret identifier.\n+     */\n+    public String getSecretId() {\n+        return secretId;\n+    }\n+\n+    /**\n+     * Gets the URL of the Key Vault.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Gets the name of the secret.\n+     *\n+     * @return The secret name.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Gets the optional version of the secret.\n+     *\n+     * @return The secret version.\n+     */\n+    public String getVersion() {\n+        return version;\n+    }\n+\n+    /**\n+     * Create a new {@link KeyVaultSecretIdentifier} from a given secret identifier.\n+     *\n+     * <p>Valid examples are:\n+     *\n+     * <ul>\n+     *     <li>https://{key-vault-name}.vault.azure.net/secrets/{secret-name}</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/secrets/{secret-name}/pending</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/secrets/{secret-name}/{unique-version-id}</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/deletedsecrets/{deleted-secret-name}</li>\n+     * </ul>\n+     *\n+     * @param secretId The secret identifier to extract information from.\n+     * @return a new instance of {@link KeyVaultSecretIdentifier}.\n+     * @throws IllegalArgumentException if the given identifier is {@code null}.\n+     * @throws MalformedURLException if the given identifier is not a valid Key Vault Secret identifier\n+     */\n+    public static KeyVaultSecretIdentifier parse(String secretId) throws IllegalArgumentException, MalformedURLException {\n+        if (secretId == null) {\n+            throw new IllegalArgumentException(\"secretId cannot be null\");\n+        }\n+\n+        URL url = new URL(secretId);\n+        // We expect an identifier with either 2 or 3 path segments: collection + name [+ version]\n+        String[] pathSegments = url.getPath().split(\"/\");\n+\n+        if ((pathSegments.length != 3 && pathSegments.length != 4) // More or less segments in the URI than expected.\n+            || !\"https\".equals(url.getProtocol()) // Invalid protocol.\n+            || (!\"secrets\".equals(pathSegments[1]) && !\"deletedsecrets\".equals(pathSegments[1])) // Invalid collection.\n+            || (\"deletedsecrets\".equals(pathSegments[1]) && pathSegments.length == 4)) { // Deleted items do not include a version.\n+            throw new IllegalArgumentException(\"secretId is not a valid Key Vault Secret identifier\");\n+        }\n+\n+        return new KeyVaultSecretIdentifier(secretId, url.getProtocol() + \"://\" + url.getHost(), pathSegments[2],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb4b28f2788eb64ff1b7f385b46ef3debb809c0"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c6a2acbfd766c37954862225018b77ad241cad7", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9c6a2acbfd766c37954862225018b77ad241cad7", "committedDate": "2020-10-03T03:15:26Z", "message": "Applied PR feedback."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3148, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}