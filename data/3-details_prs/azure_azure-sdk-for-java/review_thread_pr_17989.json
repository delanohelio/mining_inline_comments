{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyODg1NjQy", "number": 17989, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMToyMzoxM1rOFCEnFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMToyNDoxNFrOFCEoEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzE3MDEyOnYy", "diffSide": "RIGHT", "path": "sdk/communication/azure-communication-common/src/test/java/com/azure/communication/common/CommunicationTokenCredentialTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMToyMzoxM1rOIBCd9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzoyNzozM1rOIBFRtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1OTkyNQ==", "bodyText": "let's rename these variables too", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17989#discussion_r537959925", "createdAt": "2020-12-08T01:23:13Z", "author": {"login": "RezaJooyandeh"}, "path": "sdk/communication/azure-communication-common/src/test/java/com/azure/communication/common/CommunicationTokenCredentialTests.java", "diffHunk": "@@ -374,7 +374,7 @@ public void shouldCallRefresherOnlyOnceWhileRefreshingIsInProgress()\n     public void withoutInitialTokenShouldCallFresherOnlyOnceWhileRefreshingIsInProgress()\n         throws InterruptedException, ExecutionException, IOException {\n         longRunningRefresher.resetCallCount();\n-        CommunicationUserCredential userCredential = new CommunicationUserCredential(longRunningRefresher);\n+        CommunicationTokenCredential userCredential = new CommunicationTokenCredential(longRunningRefresher);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a5e0ab8d78d629ea6523983175b13d724509b8"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAwNTk0MA==", "bodyText": "good catch! Thanks Reza", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17989#discussion_r538005940", "createdAt": "2020-12-08T03:27:33Z", "author": {"login": "minnieliu"}, "path": "sdk/communication/azure-communication-common/src/test/java/com/azure/communication/common/CommunicationTokenCredentialTests.java", "diffHunk": "@@ -374,7 +374,7 @@ public void shouldCallRefresherOnlyOnceWhileRefreshingIsInProgress()\n     public void withoutInitialTokenShouldCallFresherOnlyOnceWhileRefreshingIsInProgress()\n         throws InterruptedException, ExecutionException, IOException {\n         longRunningRefresher.resetCallCount();\n-        CommunicationUserCredential userCredential = new CommunicationUserCredential(longRunningRefresher);\n+        CommunicationTokenCredential userCredential = new CommunicationTokenCredential(longRunningRefresher);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1OTkyNQ=="}, "originalCommit": {"oid": "80a5e0ab8d78d629ea6523983175b13d724509b8"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzE3MDU0OnYy", "diffSide": "RIGHT", "path": "sdk/communication/azure-communication-chat/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMToyMzoyOVrOIBCePQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzozMzo1NlrOIBFZ2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1OTk5Nw==", "bodyText": "We should update the changelog as well", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17989#discussion_r537959997", "createdAt": "2020-12-08T01:23:29Z", "author": {"login": "RezaJooyandeh"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -80,7 +80,7 @@ HttpClient httpClient = httpClientBuilder.build();\n \n // Your user access token retrieved from your trusted service\n String token = \"SECRET\";\n-CommunicationUserCredential credential = new CommunicationUserCredential(token);\n+CommunicationTokenCredential credential = new CommunicationTokenCredential(token);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a5e0ab8d78d629ea6523983175b13d724509b8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAwODAyNg==", "bodyText": "Done!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17989#discussion_r538008026", "createdAt": "2020-12-08T03:33:56Z", "author": {"login": "minnieliu"}, "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -80,7 +80,7 @@ HttpClient httpClient = httpClientBuilder.build();\n \n // Your user access token retrieved from your trusted service\n String token = \"SECRET\";\n-CommunicationUserCredential credential = new CommunicationUserCredential(token);\n+CommunicationTokenCredential credential = new CommunicationTokenCredential(token);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1OTk5Nw=="}, "originalCommit": {"oid": "80a5e0ab8d78d629ea6523983175b13d724509b8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzE3MjY3OnYy", "diffSide": "RIGHT", "path": "sdk/communication/azure-communication-chat/src/main/java/com/azure/communication/chat/implementation/CommunicationBearerTokenCredential.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMToyNDoxNFrOIBCfdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzoyMjo0NVrOIBFLsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2MDMxMA==", "bodyText": "Is this because CommunicationTokenCredential.getToken returns a Future instead of a Promise?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17989#discussion_r537960310", "createdAt": "2020-12-08T01:24:14Z", "author": {"login": "RezaJooyandeh"}, "path": "sdk/communication/azure-communication-chat/src/main/java/com/azure/communication/chat/implementation/CommunicationBearerTokenCredential.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.communication.chat.implementation;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import com.azure.communication.common.CommunicationTokenCredential;\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * This class serves as a CommunicationTokenCredential wrapper that \n+ * allows using BearerAuthenticationPolicy in different clients\n+ */\n+public class CommunicationBearerTokenCredential implements TokenCredential {\n+    private final CommunicationTokenCredential credential;\n+\n+    /**\n+     * Creates a CommunicationTokenCredential\n+     *\n+     * @param communicationTokenCredential The {@link CommunicationTokenCredential} to use \n+     * in the BearerAuthenticationPolicy.\n+     */\n+    public CommunicationBearerTokenCredential(CommunicationTokenCredential communicationTokenCredential) {\n+        credential = communicationTokenCredential;\n+    }\n+\n+    @Override\n+    public Mono<AccessToken> getToken(TokenRequestContext request) {\n+        try {\n+            return Mono.just(credential.getToken().get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a5e0ab8d78d629ea6523983175b13d724509b8"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAwNDQwMg==", "bodyText": "Yes, this is currently copied over from the original file. I am currently prepping another PR to address the Future -> Mono task", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17989#discussion_r538004402", "createdAt": "2020-12-08T03:22:45Z", "author": {"login": "minnieliu"}, "path": "sdk/communication/azure-communication-chat/src/main/java/com/azure/communication/chat/implementation/CommunicationBearerTokenCredential.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.communication.chat.implementation;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import com.azure.communication.common.CommunicationTokenCredential;\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * This class serves as a CommunicationTokenCredential wrapper that \n+ * allows using BearerAuthenticationPolicy in different clients\n+ */\n+public class CommunicationBearerTokenCredential implements TokenCredential {\n+    private final CommunicationTokenCredential credential;\n+\n+    /**\n+     * Creates a CommunicationTokenCredential\n+     *\n+     * @param communicationTokenCredential The {@link CommunicationTokenCredential} to use \n+     * in the BearerAuthenticationPolicy.\n+     */\n+    public CommunicationBearerTokenCredential(CommunicationTokenCredential communicationTokenCredential) {\n+        credential = communicationTokenCredential;\n+    }\n+\n+    @Override\n+    public Mono<AccessToken> getToken(TokenRequestContext request) {\n+        try {\n+            return Mono.just(credential.getToken().get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2MDMxMA=="}, "originalCommit": {"oid": "80a5e0ab8d78d629ea6523983175b13d724509b8"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2655, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}