{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1NzUyOTQz", "number": 17200, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMDoyNTowOFrOE15iIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxODoyODoyMVrOE2MYUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTUyNjA4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/directconnectivity/ConnectionStateListenerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMDoyNTowOFrOHubwJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzoyNjowM1rOHu27uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ1MTIzOQ==", "bodyText": "please try to use logger here and everywhere else instead of e.printStackTrace()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17200#discussion_r518451239", "createdAt": "2020-11-06T00:25:08Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/directconnectivity/ConnectionStateListenerTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.directconnectivity;\n+\n+import com.azure.cosmos.DirectConnectionConfig;\n+import com.azure.cosmos.implementation.Configs;\n+import com.azure.cosmos.implementation.ConnectionPolicy;\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.OperationType;\n+import com.azure.cosmos.implementation.ResourceType;\n+import com.azure.cosmos.implementation.RxDocumentServiceRequest;\n+import com.azure.cosmos.implementation.UserAgentContainer;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.TcpServerFactory;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.TcpServer;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.RequestResponseType;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.SslContextUtils;\n+import com.azure.cosmos.implementation.routing.PartitionKeyRangeIdentity;\n+import io.netty.handler.ssl.SslContext;\n+import org.mockito.Mockito;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.HashMap;\n+import java.util.UUID;\n+\n+import static com.azure.cosmos.implementation.TestUtils.mockDiagnosticsClientContext;\n+\n+public class ConnectionStateListenerTest {\n+\n+    private static int port = 8082;\n+    private static String serverUriString = \"rntbd://localhost:\" + port;\n+\n+    @DataProvider(name = \"connectionStateListenerConfigProvider\")\n+    public Object[][] connectionStateListenerConfigProvider() {\n+        return new Object[][]{\n+            // isTcpConnectionEndpointRediscoveryEnabled, serverResponseType, GlobalAddressResolver.updateAddresses() called times\n+            {true, RequestResponseType.CHANNEL_FIN, 1},\n+            {false, RequestResponseType.CHANNEL_FIN, 0},\n+            {true, RequestResponseType.CHANNEL_RST, 0},\n+            {false, RequestResponseType.CHANNEL_RST, 0},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"connectionStateListenerConfigProvider\")\n+    public void connectionStateListener_OnConnectionEvent(boolean isTcpConnectionEndpointRediscoveryEnabled, RequestResponseType responseType, int times) {\n+        TcpServer server = TcpServerFactory.startNewRntbdServer(port);\n+        // Inject fake response\n+        server.injectServerResponse(responseType);\n+\n+        ConnectionPolicy connectionPolicy = new ConnectionPolicy(DirectConnectionConfig.getDefaultConfig());\n+        connectionPolicy.setTcpConnectionEndpointRediscoveryEnabled(isTcpConnectionEndpointRediscoveryEnabled);\n+\n+        GlobalAddressResolver addressResolver = Mockito.mock(GlobalAddressResolver.class);\n+\n+        SslContext sslContext = SslContextUtils.CreateSslContext(\"client.jks\", false);\n+\n+        Configs config = Mockito.mock(Configs.class);\n+        Mockito.doReturn(sslContext).when(config).getSslContext();\n+\n+        RntbdTransportClient client = new RntbdTransportClient(\n+            config,\n+            connectionPolicy,\n+            new UserAgentContainer(),\n+            addressResolver);\n+\n+        RxDocumentServiceRequest req =\n+            RxDocumentServiceRequest.create(mockDiagnosticsClientContext(), OperationType.Create, ResourceType.Document,\n+                \"dbs/fakedb/colls/fakeColls\",\n+                getDocumentDefinition(), new HashMap<>());\n+        req.setPartitionKeyRangeIdentity(new PartitionKeyRangeIdentity(\"fakeCollectionId\",\"fakePartitionKeyRangeId\"));\n+\n+        Uri targetUri = new Uri(serverUriString);\n+        try {\n+            client.invokeStoreAsync(targetUri, req).block();\n+        } catch (Exception e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2450fbc415ec84f3a7449f81f07fe1a8132a26b8"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5NjU3MQ==", "bodyText": "Changed to use logger here and other places.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17200#discussion_r518896571", "createdAt": "2020-11-06T17:26:03Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/directconnectivity/ConnectionStateListenerTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.directconnectivity;\n+\n+import com.azure.cosmos.DirectConnectionConfig;\n+import com.azure.cosmos.implementation.Configs;\n+import com.azure.cosmos.implementation.ConnectionPolicy;\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.OperationType;\n+import com.azure.cosmos.implementation.ResourceType;\n+import com.azure.cosmos.implementation.RxDocumentServiceRequest;\n+import com.azure.cosmos.implementation.UserAgentContainer;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.TcpServerFactory;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.TcpServer;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.RequestResponseType;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.SslContextUtils;\n+import com.azure.cosmos.implementation.routing.PartitionKeyRangeIdentity;\n+import io.netty.handler.ssl.SslContext;\n+import org.mockito.Mockito;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.HashMap;\n+import java.util.UUID;\n+\n+import static com.azure.cosmos.implementation.TestUtils.mockDiagnosticsClientContext;\n+\n+public class ConnectionStateListenerTest {\n+\n+    private static int port = 8082;\n+    private static String serverUriString = \"rntbd://localhost:\" + port;\n+\n+    @DataProvider(name = \"connectionStateListenerConfigProvider\")\n+    public Object[][] connectionStateListenerConfigProvider() {\n+        return new Object[][]{\n+            // isTcpConnectionEndpointRediscoveryEnabled, serverResponseType, GlobalAddressResolver.updateAddresses() called times\n+            {true, RequestResponseType.CHANNEL_FIN, 1},\n+            {false, RequestResponseType.CHANNEL_FIN, 0},\n+            {true, RequestResponseType.CHANNEL_RST, 0},\n+            {false, RequestResponseType.CHANNEL_RST, 0},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"connectionStateListenerConfigProvider\")\n+    public void connectionStateListener_OnConnectionEvent(boolean isTcpConnectionEndpointRediscoveryEnabled, RequestResponseType responseType, int times) {\n+        TcpServer server = TcpServerFactory.startNewRntbdServer(port);\n+        // Inject fake response\n+        server.injectServerResponse(responseType);\n+\n+        ConnectionPolicy connectionPolicy = new ConnectionPolicy(DirectConnectionConfig.getDefaultConfig());\n+        connectionPolicy.setTcpConnectionEndpointRediscoveryEnabled(isTcpConnectionEndpointRediscoveryEnabled);\n+\n+        GlobalAddressResolver addressResolver = Mockito.mock(GlobalAddressResolver.class);\n+\n+        SslContext sslContext = SslContextUtils.CreateSslContext(\"client.jks\", false);\n+\n+        Configs config = Mockito.mock(Configs.class);\n+        Mockito.doReturn(sslContext).when(config).getSslContext();\n+\n+        RntbdTransportClient client = new RntbdTransportClient(\n+            config,\n+            connectionPolicy,\n+            new UserAgentContainer(),\n+            addressResolver);\n+\n+        RxDocumentServiceRequest req =\n+            RxDocumentServiceRequest.create(mockDiagnosticsClientContext(), OperationType.Create, ResourceType.Document,\n+                \"dbs/fakedb/colls/fakeColls\",\n+                getDocumentDefinition(), new HashMap<>());\n+        req.setPartitionKeyRangeIdentity(new PartitionKeyRangeIdentity(\"fakeCollectionId\",\"fakePartitionKeyRangeId\"));\n+\n+        Uri targetUri = new Uri(serverUriString);\n+        try {\n+            client.invokeStoreAsync(targetUri, req).block();\n+        } catch (Exception e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ1MTIzOQ=="}, "originalCommit": {"oid": "2450fbc415ec84f3a7449f81f07fe1a8132a26b8"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTU5MDY1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/directconnectivity/ConnectionStateListenerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMDo1ODowNVrOHucWmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzoyNTozOVrOHu26vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ2MTA4MA==", "bodyText": "please add groups =  { \"unit\" } similar to other tests.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17200#discussion_r518461080", "createdAt": "2020-11-06T00:58:05Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/directconnectivity/ConnectionStateListenerTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.directconnectivity;\n+\n+import com.azure.cosmos.DirectConnectionConfig;\n+import com.azure.cosmos.implementation.Configs;\n+import com.azure.cosmos.implementation.ConnectionPolicy;\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.OperationType;\n+import com.azure.cosmos.implementation.ResourceType;\n+import com.azure.cosmos.implementation.RxDocumentServiceRequest;\n+import com.azure.cosmos.implementation.UserAgentContainer;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.TcpServerFactory;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.TcpServer;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.RequestResponseType;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.SslContextUtils;\n+import com.azure.cosmos.implementation.routing.PartitionKeyRangeIdentity;\n+import io.netty.handler.ssl.SslContext;\n+import org.mockito.Mockito;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.HashMap;\n+import java.util.UUID;\n+\n+import static com.azure.cosmos.implementation.TestUtils.mockDiagnosticsClientContext;\n+\n+public class ConnectionStateListenerTest {\n+\n+    private static int port = 8082;\n+    private static String serverUriString = \"rntbd://localhost:\" + port;\n+\n+    @DataProvider(name = \"connectionStateListenerConfigProvider\")\n+    public Object[][] connectionStateListenerConfigProvider() {\n+        return new Object[][]{\n+            // isTcpConnectionEndpointRediscoveryEnabled, serverResponseType, GlobalAddressResolver.updateAddresses() called times\n+            {true, RequestResponseType.CHANNEL_FIN, 1},\n+            {false, RequestResponseType.CHANNEL_FIN, 0},\n+            {true, RequestResponseType.CHANNEL_RST, 0},\n+            {false, RequestResponseType.CHANNEL_RST, 0},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"connectionStateListenerConfigProvider\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2450fbc415ec84f3a7449f81f07fe1a8132a26b8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5NjMxOQ==", "bodyText": "Added.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17200#discussion_r518896319", "createdAt": "2020-11-06T17:25:39Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/directconnectivity/ConnectionStateListenerTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.directconnectivity;\n+\n+import com.azure.cosmos.DirectConnectionConfig;\n+import com.azure.cosmos.implementation.Configs;\n+import com.azure.cosmos.implementation.ConnectionPolicy;\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.OperationType;\n+import com.azure.cosmos.implementation.ResourceType;\n+import com.azure.cosmos.implementation.RxDocumentServiceRequest;\n+import com.azure.cosmos.implementation.UserAgentContainer;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.TcpServerFactory;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.TcpServer;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.RequestResponseType;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.SslContextUtils;\n+import com.azure.cosmos.implementation.routing.PartitionKeyRangeIdentity;\n+import io.netty.handler.ssl.SslContext;\n+import org.mockito.Mockito;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.HashMap;\n+import java.util.UUID;\n+\n+import static com.azure.cosmos.implementation.TestUtils.mockDiagnosticsClientContext;\n+\n+public class ConnectionStateListenerTest {\n+\n+    private static int port = 8082;\n+    private static String serverUriString = \"rntbd://localhost:\" + port;\n+\n+    @DataProvider(name = \"connectionStateListenerConfigProvider\")\n+    public Object[][] connectionStateListenerConfigProvider() {\n+        return new Object[][]{\n+            // isTcpConnectionEndpointRediscoveryEnabled, serverResponseType, GlobalAddressResolver.updateAddresses() called times\n+            {true, RequestResponseType.CHANNEL_FIN, 1},\n+            {false, RequestResponseType.CHANNEL_FIN, 0},\n+            {true, RequestResponseType.CHANNEL_RST, 0},\n+            {false, RequestResponseType.CHANNEL_RST, 0},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"connectionStateListenerConfigProvider\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ2MTA4MA=="}, "originalCommit": {"oid": "2450fbc415ec84f3a7449f81f07fe1a8132a26b8"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTU5MDkxOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/directconnectivity/ConnectionStateListenerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMDo1ODoxNlrOHucWzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzoyNToyMVrOHu26JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ2MTEzMg==", "bodyText": "this is a great test thank you.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17200#discussion_r518461132", "createdAt": "2020-11-06T00:58:16Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/directconnectivity/ConnectionStateListenerTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.directconnectivity;\n+\n+import com.azure.cosmos.DirectConnectionConfig;\n+import com.azure.cosmos.implementation.Configs;\n+import com.azure.cosmos.implementation.ConnectionPolicy;\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.OperationType;\n+import com.azure.cosmos.implementation.ResourceType;\n+import com.azure.cosmos.implementation.RxDocumentServiceRequest;\n+import com.azure.cosmos.implementation.UserAgentContainer;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.TcpServerFactory;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.TcpServer;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.RequestResponseType;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.SslContextUtils;\n+import com.azure.cosmos.implementation.routing.PartitionKeyRangeIdentity;\n+import io.netty.handler.ssl.SslContext;\n+import org.mockito.Mockito;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.HashMap;\n+import java.util.UUID;\n+\n+import static com.azure.cosmos.implementation.TestUtils.mockDiagnosticsClientContext;\n+\n+public class ConnectionStateListenerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2450fbc415ec84f3a7449f81f07fe1a8132a26b8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5NjE2NQ==", "bodyText": "thanks Mo~", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17200#discussion_r518896165", "createdAt": "2020-11-06T17:25:21Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/directconnectivity/ConnectionStateListenerTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.directconnectivity;\n+\n+import com.azure.cosmos.DirectConnectionConfig;\n+import com.azure.cosmos.implementation.Configs;\n+import com.azure.cosmos.implementation.ConnectionPolicy;\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.OperationType;\n+import com.azure.cosmos.implementation.ResourceType;\n+import com.azure.cosmos.implementation.RxDocumentServiceRequest;\n+import com.azure.cosmos.implementation.UserAgentContainer;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.TcpServerFactory;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.TcpServer;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.RequestResponseType;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.SslContextUtils;\n+import com.azure.cosmos.implementation.routing.PartitionKeyRangeIdentity;\n+import io.netty.handler.ssl.SslContext;\n+import org.mockito.Mockito;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.HashMap;\n+import java.util.UUID;\n+\n+import static com.azure.cosmos.implementation.TestUtils.mockDiagnosticsClientContext;\n+\n+public class ConnectionStateListenerTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ2MTEzMg=="}, "originalCommit": {"oid": "2450fbc415ec84f3a7449f81f07fe1a8132a26b8"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjYxMzk0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/directconnectivity/ConnectionStateListenerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxODoyODoyMVrOHu48YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxODozMDowOVrOHu5AHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyOTUwNA==", "bodyText": "also can we replace this with ObjectNode?\nSome of the existing tests use Document but for new tests it is better to move to the new model.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17200#discussion_r518929504", "createdAt": "2020-11-06T18:28:21Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/directconnectivity/ConnectionStateListenerTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.directconnectivity;\n+\n+import com.azure.cosmos.DirectConnectionConfig;\n+import com.azure.cosmos.implementation.Configs;\n+import com.azure.cosmos.implementation.ConnectionPolicy;\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.OperationType;\n+import com.azure.cosmos.implementation.ResourceType;\n+import com.azure.cosmos.implementation.RxDocumentServiceRequest;\n+import com.azure.cosmos.implementation.UserAgentContainer;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.TcpServerFactory;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.TcpServer;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.RequestResponseType;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.SslContextUtils;\n+import com.azure.cosmos.implementation.routing.PartitionKeyRangeIdentity;\n+import io.netty.handler.ssl.SslContext;\n+import org.mockito.Mockito;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.HashMap;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+\n+import static com.azure.cosmos.implementation.TestUtils.mockDiagnosticsClientContext;\n+\n+public class ConnectionStateListenerTest {\n+\n+    private static int port = 8082;\n+    private static String serverUriString = \"rntbd://localhost:\" + port;\n+    private static final Logger logger = LoggerFactory.getLogger(ConnectionStateListenerTest.class);\n+\n+    @DataProvider(name = \"connectionStateListenerConfigProvider\")\n+    public Object[][] connectionStateListenerConfigProvider() {\n+        return new Object[][]{\n+            // isTcpConnectionEndpointRediscoveryEnabled, serverResponseType, GlobalAddressResolver.updateAddresses() called times\n+            {true, RequestResponseType.CHANNEL_FIN, 1},\n+            {false, RequestResponseType.CHANNEL_FIN, 0},\n+            {true, RequestResponseType.CHANNEL_RST, 0},\n+            {false, RequestResponseType.CHANNEL_RST, 0},\n+        };\n+    }\n+\n+    @Test(groups = { \"unit\" }, dataProvider = \"connectionStateListenerConfigProvider\")\n+    public void connectionStateListener_OnConnectionEvent(\n+        boolean isTcpConnectionEndpointRediscoveryEnabled,\n+        RequestResponseType responseType,\n+        int times) throws ExecutionException, InterruptedException {\n+\n+        TcpServer server = TcpServerFactory.startNewRntbdServer(port);\n+        // Inject fake response\n+        server.injectServerResponse(responseType);\n+\n+        ConnectionPolicy connectionPolicy = new ConnectionPolicy(DirectConnectionConfig.getDefaultConfig());\n+        connectionPolicy.setTcpConnectionEndpointRediscoveryEnabled(isTcpConnectionEndpointRediscoveryEnabled);\n+\n+        GlobalAddressResolver addressResolver = Mockito.mock(GlobalAddressResolver.class);\n+\n+        SslContext sslContext = SslContextUtils.CreateSslContext(\"client.jks\", false);\n+\n+        Configs config = Mockito.mock(Configs.class);\n+        Mockito.doReturn(sslContext).when(config).getSslContext();\n+\n+        RntbdTransportClient client = new RntbdTransportClient(\n+            config,\n+            connectionPolicy,\n+            new UserAgentContainer(),\n+            addressResolver);\n+\n+        RxDocumentServiceRequest req =\n+            RxDocumentServiceRequest.create(mockDiagnosticsClientContext(), OperationType.Create, ResourceType.Document,\n+                \"dbs/fakedb/colls/fakeColls\",\n+                getDocumentDefinition(), new HashMap<>());\n+        req.setPartitionKeyRangeIdentity(new PartitionKeyRangeIdentity(\"fakeCollectionId\",\"fakePartitionKeyRangeId\"));\n+\n+        Uri targetUri = new Uri(serverUriString);\n+        try {\n+            client.invokeStoreAsync(targetUri, req).block();\n+        } catch (Exception e) {\n+            logger.info(\"expected failed request with reason {}\", e);\n+        }\n+        finally {\n+            Mockito.verify(addressResolver, Mockito.times(times)).updateAddresses(Mockito.any(), Mockito.any());\n+        }\n+\n+        TcpServerFactory.shutdownRntbdServer(server);\n+    }\n+\n+    private Document getDocumentDefinition() {\n+        String uuid = UUID.randomUUID().toString();\n+        Document doc = new Document(String.format(\"{ \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7a21dc5715ab23c2e4ad817e2338fb80a526498"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkzMDQ2Mw==", "bodyText": "@moderakh  sorry Mo I merged the PR, I will change this in a following PR, thanks~", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17200#discussion_r518930463", "createdAt": "2020-11-06T18:30:09Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/directconnectivity/ConnectionStateListenerTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.directconnectivity;\n+\n+import com.azure.cosmos.DirectConnectionConfig;\n+import com.azure.cosmos.implementation.Configs;\n+import com.azure.cosmos.implementation.ConnectionPolicy;\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.OperationType;\n+import com.azure.cosmos.implementation.ResourceType;\n+import com.azure.cosmos.implementation.RxDocumentServiceRequest;\n+import com.azure.cosmos.implementation.UserAgentContainer;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.TcpServerFactory;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.TcpServer;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.RequestResponseType;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.SslContextUtils;\n+import com.azure.cosmos.implementation.routing.PartitionKeyRangeIdentity;\n+import io.netty.handler.ssl.SslContext;\n+import org.mockito.Mockito;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.HashMap;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+\n+import static com.azure.cosmos.implementation.TestUtils.mockDiagnosticsClientContext;\n+\n+public class ConnectionStateListenerTest {\n+\n+    private static int port = 8082;\n+    private static String serverUriString = \"rntbd://localhost:\" + port;\n+    private static final Logger logger = LoggerFactory.getLogger(ConnectionStateListenerTest.class);\n+\n+    @DataProvider(name = \"connectionStateListenerConfigProvider\")\n+    public Object[][] connectionStateListenerConfigProvider() {\n+        return new Object[][]{\n+            // isTcpConnectionEndpointRediscoveryEnabled, serverResponseType, GlobalAddressResolver.updateAddresses() called times\n+            {true, RequestResponseType.CHANNEL_FIN, 1},\n+            {false, RequestResponseType.CHANNEL_FIN, 0},\n+            {true, RequestResponseType.CHANNEL_RST, 0},\n+            {false, RequestResponseType.CHANNEL_RST, 0},\n+        };\n+    }\n+\n+    @Test(groups = { \"unit\" }, dataProvider = \"connectionStateListenerConfigProvider\")\n+    public void connectionStateListener_OnConnectionEvent(\n+        boolean isTcpConnectionEndpointRediscoveryEnabled,\n+        RequestResponseType responseType,\n+        int times) throws ExecutionException, InterruptedException {\n+\n+        TcpServer server = TcpServerFactory.startNewRntbdServer(port);\n+        // Inject fake response\n+        server.injectServerResponse(responseType);\n+\n+        ConnectionPolicy connectionPolicy = new ConnectionPolicy(DirectConnectionConfig.getDefaultConfig());\n+        connectionPolicy.setTcpConnectionEndpointRediscoveryEnabled(isTcpConnectionEndpointRediscoveryEnabled);\n+\n+        GlobalAddressResolver addressResolver = Mockito.mock(GlobalAddressResolver.class);\n+\n+        SslContext sslContext = SslContextUtils.CreateSslContext(\"client.jks\", false);\n+\n+        Configs config = Mockito.mock(Configs.class);\n+        Mockito.doReturn(sslContext).when(config).getSslContext();\n+\n+        RntbdTransportClient client = new RntbdTransportClient(\n+            config,\n+            connectionPolicy,\n+            new UserAgentContainer(),\n+            addressResolver);\n+\n+        RxDocumentServiceRequest req =\n+            RxDocumentServiceRequest.create(mockDiagnosticsClientContext(), OperationType.Create, ResourceType.Document,\n+                \"dbs/fakedb/colls/fakeColls\",\n+                getDocumentDefinition(), new HashMap<>());\n+        req.setPartitionKeyRangeIdentity(new PartitionKeyRangeIdentity(\"fakeCollectionId\",\"fakePartitionKeyRangeId\"));\n+\n+        Uri targetUri = new Uri(serverUriString);\n+        try {\n+            client.invokeStoreAsync(targetUri, req).block();\n+        } catch (Exception e) {\n+            logger.info(\"expected failed request with reason {}\", e);\n+        }\n+        finally {\n+            Mockito.verify(addressResolver, Mockito.times(times)).updateAddresses(Mockito.any(), Mockito.any());\n+        }\n+\n+        TcpServerFactory.shutdownRntbdServer(server);\n+    }\n+\n+    private Document getDocumentDefinition() {\n+        String uuid = UUID.randomUUID().toString();\n+        Document doc = new Document(String.format(\"{ \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyOTUwNA=="}, "originalCommit": {"oid": "d7a21dc5715ab23c2e4ad817e2338fb80a526498"}, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3015, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}