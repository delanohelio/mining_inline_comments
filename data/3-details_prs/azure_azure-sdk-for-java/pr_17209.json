{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1ODU4MzM5", "number": 17209, "title": "Added support for encryption algorithms for symmetric keys", "bodyText": "Fixes #14805.\nTests are pending.", "createdAt": "2020-11-05T07:33:39Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209", "merged": true, "mergeCommit": {"oid": "b637d40266e19ad93bc460d329687e3b1c29cb81"}, "closed": true, "closedAt": "2020-11-13T01:09:21Z", "author": {"login": "vcolin7"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZcN4pgH2gAyNTE1ODU4MzM5OjI1MTRkZDE3ZGY3ODE5NWQ4MjI1MTAyY2Q5MDk3YTdmZDg4OTJkZDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdb71CLgH2gAyNTE1ODU4MzM5OjUzYzg3NzFkYmJjNDMyNDM3MjA1NmZhOTM4OGMyNTMyOWZjMjQwOGQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2514dd17df78195d8225102cd9097a7fd8892dd0", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2514dd17df78195d8225102cd9097a7fd8892dd0", "committedDate": "2020-11-05T06:17:51Z", "message": "Added support for encryption AES encryption algorithms."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c48a75a5b0e05932cd02c874825e61eb3e193bb4", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c48a75a5b0e05932cd02c874825e61eb3e193bb4", "committedDate": "2020-11-05T07:31:19Z", "message": "Added CryptographyOptions and ensured the initialization vector is populated before attempting to perform any local cryptography operations on symmetric keys."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d030d0a5627312d4abe867498ce69aec4b7609f", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7d030d0a5627312d4abe867498ce69aec4b7609f", "committedDate": "2020-11-05T08:01:41Z", "message": "Added APIs that accept CryptographyOptions to CryptographyClient."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67e837c456306c2aaeecdc1326169dabef66ef2f", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/67e837c456306c2aaeecdc1326169dabef66ef2f", "committedDate": "2020-11-05T08:50:15Z", "message": "Fixed Javadoc issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17b8e1b07cc0b0dd4645685a5b0f2fa657032c19", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/17b8e1b07cc0b0dd4645685a5b0f2fa657032c19", "committedDate": "2020-11-05T10:01:12Z", "message": "Fixed checkstyle issues. Added samples."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37d0e65a6640bda46ba45331740b556237494bdd", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/37d0e65a6640bda46ba45331740b556237494bdd", "committedDate": "2020-11-05T10:02:19Z", "message": "Added checkstyle exceptions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "059c29ce48d87dfe947d7b86ebac48ddf78212a8", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/059c29ce48d87dfe947d7b86ebac48ddf78212a8", "committedDate": "2020-11-05T10:54:03Z", "message": "Fixed test and spotbugs issues."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1ODQyNjY2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#pullrequestreview-525842666", "createdAt": "2020-11-08T20:34:55Z", "commit": {"oid": "059c29ce48d87dfe947d7b86ebac48ddf78212a8"}, "state": "DISMISSED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMDozNDo1NVrOHvaKgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMDo0MjoxNlrOHvaNeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3Mzc5NQ==", "bodyText": "You've made it possible here for the block size to be changed in a central place, and it feels like you're introducing a potential future bug by still having the line if (iv.length != 8) {. Perhaps 64 will never change and this change is needless, but if you keep the code like this I would recommend either externalising the 8, or perhaps more appropriately, documenting alongside the new static field the requirement that if this value changes that future developers must update the conditionals everywhere appropriately.\nPut another way, what motivated you to extract the value 64 out like this? I probably wouldn't have done it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519473795", "createdAt": "2020-11-08T20:34:55Z", "author": {"login": "JonathanGiles"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesKw.java", "diffHunk": "@@ -134,7 +135,8 @@ public ICryptoTransform createEncryptor(byte[] key, byte[] iv, Provider provider\n         if (iv != null) {\n             // iv length must be 64 bits\n             if (iv.length != 8) {\n-                throw logger.logExceptionAsError(new IllegalArgumentException(\"iv length must be 64 bits\"));\n+                throw logger.logExceptionAsError(new IllegalArgumentException(String.format(\n+                    \"iv length must be %s bits\", BLOCK_SIZE_IN_BITS)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "059c29ce48d87dfe947d7b86ebac48ddf78212a8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3NDM3Mw==", "bodyText": "It's not always the case that Options implies 'optional' - indeed, in this case there are some required parameters. It would be better to change this text so that people don't build that impression of Options types. Saying something instead, such as \"A class containing various configuration parameters that can be applied when performing cryptographic operations.\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519474373", "createdAt": "2020-11-08T20:40:28Z", "author": {"login": "JonathanGiles"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyOptions.java", "diffHunk": "@@ -0,0 +1,77 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * Represents optional parameters for cryptographic operations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "059c29ce48d87dfe947d7b86ebac48ddf78212a8"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3NDU1Mw==", "bodyText": "Is it always the case that the user must create an instance of this type by providing all three of these byte arrays? Is it not possible to provide just one or two of these? If so, having setters is more appropriate.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519474553", "createdAt": "2020-11-08T20:42:16Z", "author": {"login": "JonathanGiles"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyOptions.java", "diffHunk": "@@ -0,0 +1,77 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * Represents optional parameters for cryptographic operations.\n+ */\n+@Fluent\n+public class CryptographyOptions {\n+    /**\n+     * Initialization vector for symmetric algorithms.\n+     */\n+    @JsonProperty(value = \"iv\")\n+    private final byte[] initializationVector;\n+\n+    /**\n+     * Additional data to authenticate but not encrypt/decrypt when using authenticated crypto algorithms.\n+     */\n+    @JsonProperty(value = \"aad\")\n+    private final byte[] additionalAuthenticatedData;\n+\n+    /**\n+     * The tag to authenticate when performing decryption with an authenticated algorithm.\n+     */\n+    @JsonProperty(value = \"tag\")\n+    private final byte[] tag;\n+\n+    /**\n+     * Creates an instance of {@link CryptographyOptions} with the given parameters.\n+     *\n+     * @param initializationVector Initialization vector for symmetric algorithms.\n+     * @param additionalAuthenticatedData Additional data to authenticate but not encrypt/decrypt when using\n+     * authenticated crypto algorithms.\n+     * @param tag The tag to authenticate when performing decryption with an authenticated algorithm.\n+     */\n+    public CryptographyOptions(byte[] initializationVector, byte[] additionalAuthenticatedData, byte[] tag) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "059c29ce48d87dfe947d7b86ebac48ddf78212a8"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1OTI0NzIw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#pullrequestreview-525924720", "createdAt": "2020-11-09T04:59:41Z", "commit": {"oid": "059c29ce48d87dfe947d7b86ebac48ddf78212a8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNDo1OTo0MVrOHvfByQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNjoyNToyM1rOHvgWtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU1MzQ4MQ==", "bodyText": "@Lusitanian should this be zero-padding? When we spoke about .NET, you said zero-padding was what the service was using.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519553481", "createdAt": "2020-11-09T04:59:41Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesCbc.java", "diffHunk": "@@ -16,25 +16,30 @@\n import java.util.Arrays;\n \n abstract class AesCbc extends SymmetricEncryptionAlgorithm {\n-\n     final int keySizeInBytes;\n     final int keySize;\n-    static class AesCbcDecryptor implements ICryptoTransform {\n \n+    protected AesCbc(String name, int size) {\n+        super(name);\n+\n+        keySize = size;\n+        keySizeInBytes = size >> 3;\n+    }\n+\n+    static class AesCbcEncryptor implements ICryptoTransform {\n         private final Cipher cipher;\n \n-        AesCbcDecryptor(byte[] key, byte[] iv, Provider provider)\n-            throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,\n-            InvalidAlgorithmParameterException {\n+        AesCbcEncryptor(byte[] key, byte[] iv, Provider provider) throws NoSuchAlgorithmException,\n+            NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {\n \n             // Create the cipher using the Provider if specified\n             if (provider == null) {\n-                cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n+                cipher = Cipher.getInstance(\"AES/CBC/NoPadding\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "059c29ce48d87dfe947d7b86ebac48ddf78212a8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU1MzU5Mg==", "bodyText": "...if this is right, I'll have to change .NET's implementation to NoPadding as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519553592", "createdAt": "2020-11-09T05:00:02Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesCbc.java", "diffHunk": "@@ -16,25 +16,30 @@\n import java.util.Arrays;\n \n abstract class AesCbc extends SymmetricEncryptionAlgorithm {\n-\n     final int keySizeInBytes;\n     final int keySize;\n-    static class AesCbcDecryptor implements ICryptoTransform {\n \n+    protected AesCbc(String name, int size) {\n+        super(name);\n+\n+        keySize = size;\n+        keySizeInBytes = size >> 3;\n+    }\n+\n+    static class AesCbcEncryptor implements ICryptoTransform {\n         private final Cipher cipher;\n \n-        AesCbcDecryptor(byte[] key, byte[] iv, Provider provider)\n-            throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,\n-            InvalidAlgorithmParameterException {\n+        AesCbcEncryptor(byte[] key, byte[] iv, Provider provider) throws NoSuchAlgorithmException,\n+            NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {\n \n             // Create the cipher using the Provider if specified\n             if (provider == null) {\n-                cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n+                cipher = Cipher.getInstance(\"AES/CBC/NoPadding\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU1MzQ4MQ=="}, "originalCommit": {"oid": "059c29ce48d87dfe947d7b86ebac48ddf78212a8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU1NDk3Mg==", "bodyText": "AES-CBC doesn't use \"aad\" or \"tag\" (used below for the decryptor). Are these just to provide for a common interface and are otherwise null (not obvious from what I see in this PR).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519554972", "createdAt": "2020-11-09T05:06:52Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesCbc.java", "diffHunk": "@@ -67,22 +70,12 @@\n         }\n     }\n \n-    protected AesCbc(String name, int size) {\n-        super(name);\n-        keySize = size;\n-        keySizeInBytes = size >> 3;\n-    }\n-\n     @Override\n     public ICryptoTransform createEncryptor(byte[] key, byte[] iv, byte[] authenticationData)\n         throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException,\n         InvalidAlgorithmParameterException {\n \n-        if (key == null || key.length < keySizeInBytes) {\n-            throw new InvalidKeyException(\"key must be at least \" + keySize + \" bits in length\");\n-        }\n-\n-        return new AesCbcEncryptor(Arrays.copyOfRange(key, 0, keySizeInBytes), iv, null);\n+        return createEncryptor(key, iv, authenticationData, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "059c29ce48d87dfe947d7b86ebac48ddf78212a8"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU1Nzk5OA==", "bodyText": "This should be PKCS7 padding, though for 8-byte block sizes this should be equivalent. If PKCS7 is supported, it may be safer for future proofing.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519557998", "createdAt": "2020-11-09T05:19:05Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesCbcPad.java", "diffHunk": "@@ -0,0 +1,113 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import javax.crypto.BadPaddingException;\n+import javax.crypto.Cipher;\n+import javax.crypto.IllegalBlockSizeException;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.spec.IvParameterSpec;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.Provider;\n+import java.util.Arrays;\n+\n+abstract class AesCbcPad extends SymmetricEncryptionAlgorithm {\n+    final int keySizeInBytes;\n+    final int keySize;\n+\n+    protected AesCbcPad(String name, int size) {\n+        super(name);\n+\n+        keySize = size;\n+        keySizeInBytes = size >> 3;\n+    }\n+\n+    static class AesCbcPadEncryptor implements ICryptoTransform {\n+        private final Cipher cipher;\n+\n+        AesCbcPadEncryptor(byte[] key, byte[] iv, Provider provider) throws NoSuchAlgorithmException,\n+            NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {\n+\n+            // Create the cipher using the Provider if specified\n+            if (provider == null) {\n+                cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "059c29ce48d87dfe947d7b86ebac48ddf78212a8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU2NDMwMA==", "bodyText": "I'm not sure this is correct. As I understand it, GCM is closer to CTR and doesn't use CBC. Follow up with @schaabs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519564300", "createdAt": "2020-11-09T05:44:18Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesGcm.java", "diffHunk": "@@ -0,0 +1,113 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import javax.crypto.BadPaddingException;\n+import javax.crypto.Cipher;\n+import javax.crypto.IllegalBlockSizeException;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.spec.IvParameterSpec;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.Provider;\n+import java.util.Arrays;\n+\n+abstract class AesGcm extends SymmetricEncryptionAlgorithm {\n+    final int keySizeInBytes;\n+    final int keySize;\n+\n+    protected AesGcm(String name, int size) {\n+        super(name);\n+\n+        keySize = size;\n+        keySizeInBytes = size >> 3;\n+    }\n+\n+    static class AesGcmEncryptor implements ICryptoTransform {\n+        private final Cipher cipher;\n+\n+        AesGcmEncryptor(byte[] key, byte[] iv, Provider provider) throws NoSuchAlgorithmException,\n+            NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {\n+\n+            // Create the cipher using the Provider if specified\n+            if (provider == null) {\n+                cipher = Cipher.getInstance(\"AES/CBC/NoPadding\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "059c29ce48d87dfe947d7b86ebac48ddf78212a8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU2NzM5OA==", "bodyText": "Bundle all the parameters up into an EncryptOptions (and DecryptOptions for decryption) instead. See how we decided to for .NET, after discussions with the architects: https://github.com/Azure/azure-sdk-for-net/blob/a42b92d26e9359a485fb6ec234b93146e9ff5b30/sdk/keyvault/Azure.Security.KeyVault.Keys/src/Cryptography/CryptographyClient.cs#L189.\nUsing a factory (or builder probably for you), the correct options and algorithm are enforced to avoid callers making mistakes with incompatible parameters.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519567398", "createdAt": "2020-11-09T05:55:58Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java", "diffHunk": "@@ -213,35 +216,75 @@ private void initializeCryptoClients() {\n      * @param algorithm The algorithm to be used for encryption.\n      * @param plaintext The content to be encrypted.\n      * @return A {@link Mono} containing a {@link EncryptResult} whose {@link EncryptResult#getCipherText() cipher text}\n-     *     contains the encrypted content.\n-     * @throws ResourceNotFoundException if the key cannot be found for encryption.\n-     * @throws UnsupportedOperationException if the encrypt operation is not supported or configured on the key.\n-     * @throws NullPointerException if {@code algorithm} or  {@code plainText} is null.\n+     * contains the encrypted content.\n+     * @throws ResourceNotFoundException If the key cannot be found for encryption.\n+     * @throws UnsupportedOperationException If the encrypt operation is not supported or configured on the key.\n+     * @throws NullPointerException If {@code algorithm} or {@code plainText} are {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<EncryptResult> encrypt(EncryptionAlgorithm algorithm, byte[] plaintext) {\n+        return encrypt(algorithm, plaintext, null);\n+    }\n+\n+    /**\n+     * Encrypts an arbitrary sequence of bytes using the configured key. Note that the encrypt operation only supports a\n+     * single block of data, the size of which is dependent on the target key and the encryption algorithm to be used.\n+     * The encrypt operation is supported for both symmetric keys and asymmetric keys. In case of asymmetric keys public\n+     * portion of the key is used for encryption. This operation requires the keys/encrypt permission.\n+     *\n+     * <p>The {@link EncryptionAlgorithm encryption algorithm} indicates the type of algorithm to use for encrypting the\n+     * specified {@code plaintext}. Possible values for assymetric keys include:\n+     * {@link EncryptionAlgorithm#RSA1_5 RSA1_5}, {@link EncryptionAlgorithm#RSA_OAEP RSA_OAEP} and\n+     * {@link EncryptionAlgorithm#RSA_OAEP_256 RSA_OAEP_256}.\n+     *\n+     * Possible values for symmetric keys include: {@link EncryptionAlgorithm#A128CBC A128CBC},\n+     * {@link EncryptionAlgorithm#A128CBCPAD A128CBCPAD}, {@link EncryptionAlgorithm#A128CBC_HS256 A128CBC-HS256},\n+     * {@link EncryptionAlgorithm#A128GCM A128GCM}, {@link EncryptionAlgorithm#A192CBC A192CBC},\n+     * {@link EncryptionAlgorithm#A192CBCPAD A192CBCPAD}, {@link EncryptionAlgorithm#A192CBC_HS384 A192CBC-HS384},\n+     * {@link EncryptionAlgorithm#A192GCM A192GCM}, {@link EncryptionAlgorithm#A256CBC A256CBC},\n+     * {@link EncryptionAlgorithm#A256CBCPAD A256CBPAD}, {@link EncryptionAlgorithm#A256CBC_HS512 A256CBC-HS512} and\n+     * {@link EncryptionAlgorithm#A256GCM A256GCM}.</p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     * <p>Encrypts the content. Subscribes to the call asynchronously and prints out the encrypted content details when\n+     * a response has been received.</p>\n+     * {@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.encrypt#EncryptionAlgorithm-byte-CryptographyOptions}\n+     *\n+     * @param algorithm The algorithm to be used for encryption.\n+     * @param plaintext The content to be encrypted.\n+     * @param options Optional parameters for the encryption operation.\n+     * @return A {@link Mono} containing a {@link EncryptResult} whose {@link EncryptResult#getCipherText() cipher text}\n+     * contains the encrypted content.\n+     * @throws ResourceNotFoundException If the key cannot be found for encryption.\n+     * @throws UnsupportedOperationException If the encrypt operation is not supported or configured on the key.\n+     * @throws NullPointerException If {@code algorithm} or {@code plainText} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<EncryptResult> encrypt(EncryptionAlgorithm algorithm, byte[] plaintext, CryptographyOptions options) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "059c29ce48d87dfe947d7b86ebac48ddf78212a8"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU2OTM0Mw==", "bodyText": "In addition to what @JonathanGiles said about \"options\", currently no \"options\" are needed for AES-KW and this would be premature and confusing. By using the EncryptOptions and DecryptOptions for encrypt and decrypt, we avoid this confusion as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519569343", "createdAt": "2020-11-09T06:02:57Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java", "diffHunk": "@@ -407,59 +493,94 @@ private void initializeCryptoClients() {\n      * <p>The {@link KeyWrapAlgorithm wrap algorithm} indicates the type of algorithm to use for wrapping the specified\n      * key content. Possible values include:\n      * {@link KeyWrapAlgorithm#RSA1_5 RSA1_5}, {@link KeyWrapAlgorithm#RSA_OAEP RSA_OAEP} and {@link\n-     * KeyWrapAlgorithm#RSA_OAEP_256 RSA_OAEP_256}</p>\n+     * KeyWrapAlgorithm#RSA_OAEP_256 RSA_OAEP_256}.\n+     *\n+     * Possible values for symmetric keys include: {@link EncryptionAlgorithm#A128KW A128KW},\n+     * {@link EncryptionAlgorithm#A192KW A192KW} and {@link EncryptionAlgorithm#A256KW A256KW}.</p>\n      *\n      * <p><strong>Code Samples</strong></p>\n      * <p>Wraps the key content. Subscribes to the call asynchronously and prints out the wrapped key details when a\n      * response has been received.</p>\n      * {@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.wrapKey#KeyWrapAlgorithm-byte}\n      *\n      * @param algorithm The encryption algorithm to use for wrapping the key.\n-     * @param key The key content to be wrapped\n-     * @return A {@link Mono} containing a {@link WrapResult} whose {@link WrapResult#getEncryptedKey() encrypted\n-     *     key} contains the wrapped key result.\n-     * @throws ResourceNotFoundException if the key cannot be found for wrap operation.\n-     * @throws UnsupportedOperationException if the wrap operation is not supported or configured on the key.\n-     * @throws NullPointerException if {@code algorithm} or {@code key} is null.\n+     * @param key The key content to be wrapped.\n+     * @return A {@link Mono} containing a {@link WrapResult} whose {@link WrapResult#getEncryptedKey() encrypted key}\n+     * contains the wrapped key result.\n+     * @throws ResourceNotFoundException If the key cannot be found for wrap operation.\n+     * @throws UnsupportedOperationException If the wrap operation is not supported or configured on the key.\n+     * @throws NullPointerException If {@code algorithm} or {@code key} are {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<WrapResult> wrapKey(KeyWrapAlgorithm algorithm, byte[] key) {\n+        return wrapKey(algorithm, key, null);\n+    }\n+\n+    /**\n+     * Wraps a symmetric key using the configured key. The wrap operation supports wrapping a symmetric key with both\n+     * symmetric and asymmetric keys. This operation requires the keys/wrapKey permission.\n+     *\n+     * <p>The {@link KeyWrapAlgorithm wrap algorithm} indicates the type of algorithm to use for wrapping the specified\n+     * key content. Possible values include:\n+     * {@link KeyWrapAlgorithm#RSA1_5 RSA1_5}, {@link KeyWrapAlgorithm#RSA_OAEP RSA_OAEP} and {@link\n+     * KeyWrapAlgorithm#RSA_OAEP_256 RSA_OAEP_256}.\n+     *\n+     * Possible values for symmetric keys include: {@link EncryptionAlgorithm#A128KW A128KW},\n+     * {@link EncryptionAlgorithm#A192KW A192KW} and {@link EncryptionAlgorithm#A256KW A256KW}.</p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     * <p>Wraps the key content. Subscribes to the call asynchronously and prints out the wrapped key details when a\n+     * response has been received.</p>\n+     * {@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.wrapKey#KeyWrapAlgorithm-byte-CryptographyOptions}\n+     *\n+     * @param algorithm The encryption algorithm to use for wrapping the key.\n+     * @param key The key content to be wrapped.\n+     * @param options Optional parameters for the wrap operation.\n+     * @return A {@link Mono} containing a {@link WrapResult} whose {@link WrapResult#getEncryptedKey() encrypted key}\n+     * contains the wrapped key result.\n+     * @throws ResourceNotFoundException If the key cannot be found for wrap operation.\n+     * @throws UnsupportedOperationException If the wrap operation is not supported or configured on the key.\n+     * @throws NullPointerException If {@code algorithm} or {@code key} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<WrapResult> wrapKey(KeyWrapAlgorithm algorithm, byte[] key, CryptographyOptions options) {\n         try {\n-            return withContext(context -> wrapKey(algorithm, key, context));\n+            return withContext(context -> wrapKey(algorithm, key, options, context));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "059c29ce48d87dfe947d7b86ebac48ddf78212a8"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3MDQ4Mw==", "bodyText": "As previously mentioned, it would be more intuitive to have specialized EncryptOptions and DecryptOptions that guides the user toward providing the right options. This requires much more knowledge about cryptographic methods.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519570483", "createdAt": "2020-11-09T06:07:38Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyOptions.java", "diffHunk": "@@ -0,0 +1,77 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * Represents optional parameters for cryptographic operations.\n+ */\n+@Fluent\n+public class CryptographyOptions {\n+    /**\n+     * Initialization vector for symmetric algorithms.\n+     */\n+    @JsonProperty(value = \"iv\")\n+    private final byte[] initializationVector;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "059c29ce48d87dfe947d7b86ebac48ddf78212a8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3MTEwOQ==", "bodyText": "Yes, see https://github.com/Azure/azure-sdk-for-net/blob/a42b92d26e9359a485fb6ec234b93146e9ff5b30/sdk/keyvault/Azure.Security.KeyVault.Keys/src/Cryptography/CryptographyClient.cs#L189 for what we did for .NET after some discussion with Scott and Krzysztof.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519571109", "createdAt": "2020-11-09T06:10:03Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyOptions.java", "diffHunk": "@@ -0,0 +1,77 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * Represents optional parameters for cryptographic operations.\n+ */\n+@Fluent\n+public class CryptographyOptions {\n+    /**\n+     * Initialization vector for symmetric algorithms.\n+     */\n+    @JsonProperty(value = \"iv\")\n+    private final byte[] initializationVector;\n+\n+    /**\n+     * Additional data to authenticate but not encrypt/decrypt when using authenticated crypto algorithms.\n+     */\n+    @JsonProperty(value = \"aad\")\n+    private final byte[] additionalAuthenticatedData;\n+\n+    /**\n+     * The tag to authenticate when performing decryption with an authenticated algorithm.\n+     */\n+    @JsonProperty(value = \"tag\")\n+    private final byte[] tag;\n+\n+    /**\n+     * Creates an instance of {@link CryptographyOptions} with the given parameters.\n+     *\n+     * @param initializationVector Initialization vector for symmetric algorithms.\n+     * @param additionalAuthenticatedData Additional data to authenticate but not encrypt/decrypt when using\n+     * authenticated crypto algorithms.\n+     * @param tag The tag to authenticate when performing decryption with an authenticated algorithm.\n+     */\n+    public CryptographyOptions(byte[] initializationVector, byte[] additionalAuthenticatedData, byte[] tag) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3NDU1Mw=="}, "originalCommit": {"oid": "059c29ce48d87dfe947d7b86ebac48ddf78212a8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3MTY3Nw==", "bodyText": "In public APIs, refer to this only as \"iv\". It's a common enough acronym in cryptography.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519571677", "createdAt": "2020-11-09T06:12:21Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/KeyOperationParameters.java", "diffHunk": "@@ -24,6 +24,24 @@\n     @JsonProperty(value = \"value\", required = true)\n     private Base64Url value;\n \n+    /**\n+     * Initialization vector for symmetric algorithms.\n+     */\n+    @JsonProperty(value = \"iv\")\n+    private byte[] initializationVector;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "059c29ce48d87dfe947d7b86ebac48ddf78212a8"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3MTg3Mw==", "bodyText": "Use \"authenticationTag\" (yes, \"authentication\"; keep \"authenticated\" for additionalAuthenticatedData) for all public APIs here as well. \"tag\" would just be confusing with all the other instances of \"tag\" or \"tags\" used throughout the SDKs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519571873", "createdAt": "2020-11-09T06:13:02Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/KeyOperationParameters.java", "diffHunk": "@@ -24,6 +24,24 @@\n     @JsonProperty(value = \"value\", required = true)\n     private Base64Url value;\n \n+    /**\n+     * Initialization vector for symmetric algorithms.\n+     */\n+    @JsonProperty(value = \"iv\")\n+    private byte[] initializationVector;\n+\n+    /**\n+     * Additional data to authenticate but not encrypt/decrypt when using authenticated crypto algorithms.\n+     */\n+    @JsonProperty(value = \"aad\")\n+    private byte[] additionalAuthenticatedData;\n+\n+    /**\n+     * The tag to authenticate when performing decryption with an authenticated algorithm.\n+     */\n+    @JsonProperty(value = \"tag\")\n+    private byte[] tag;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "059c29ce48d87dfe947d7b86ebac48ddf78212a8"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3MzkzMg==", "bodyText": "These other parameters \"iv\", \"aad\", and \"tag\" aren't used for key wrap or unwrap. See the public API for .NET at https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/keyvault/Azure.Security.KeyVault.Keys/api/Azure.Security.KeyVault.Keys.netstandard2.0.cs. We can certainly discuss changes, but what we have now are designed to lead the customer to use the right parameters and get only the data useful back in a request.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519573932", "createdAt": "2020-11-09T06:20:51Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/KeyWrapUnwrapRequest.java", "diffHunk": "@@ -24,6 +24,24 @@\n     @JsonProperty(value = \"value\", required = true)\n     private Base64Url value;\n \n+    /**\n+     * Initialization vector for symmetric algorithms.\n+     */\n+    @JsonProperty(value = \"iv\")\n+    private byte[] initializationVector;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "059c29ce48d87dfe947d7b86ebac48ddf78212a8"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3NDUxNg==", "bodyText": "Comments about using the EncryptOptions and similar should apply to the LocalCryptographyClient. In fact, I'm just noticing this says \"LocalKeyCryptographyClient\". It should be \"LocalCryptographyClient\" (that's what we shipped for betas for .NET and JS).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519574516", "createdAt": "2020-11-09T06:22:59Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/LocalKeyCryptographyClient.java", "diffHunk": "@@ -27,21 +27,22 @@\n         this.serviceClient = serviceClient;\n     }\n \n-    abstract Mono<EncryptResult> encryptAsync(EncryptionAlgorithm algorithm, byte[] plaintext, Context context, JsonWebKey jsonWebKey);\n+    abstract Mono<EncryptResult> encryptAsync(EncryptionAlgorithm algorithm, byte[] plaintext,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "059c29ce48d87dfe947d7b86ebac48ddf78212a8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3NDgxOA==", "bodyText": "Actually, I see this isn't exposed. But I'll leave the comment here in case it still applies.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519574818", "createdAt": "2020-11-09T06:24:07Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/LocalKeyCryptographyClient.java", "diffHunk": "@@ -27,21 +27,22 @@\n         this.serviceClient = serviceClient;\n     }\n \n-    abstract Mono<EncryptResult> encryptAsync(EncryptionAlgorithm algorithm, byte[] plaintext, Context context, JsonWebKey jsonWebKey);\n+    abstract Mono<EncryptResult> encryptAsync(EncryptionAlgorithm algorithm, byte[] plaintext,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3NDUxNg=="}, "originalCommit": {"oid": "059c29ce48d87dfe947d7b86ebac48ddf78212a8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3NTIyMA==", "bodyText": "These aren't in the list to implement. Just AES-CBC, AES-CBCPAD, AES-KW, and AES-GCM.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519575220", "createdAt": "2020-11-09T06:25:23Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/models/EncryptionAlgorithm.java", "diffHunk": "@@ -42,21 +67,41 @@\n      * Static value A192CBC_HS384 for EncryptionAlgorithm.\n      */\n     public static final EncryptionAlgorithm A192CBC_HS384 = fromString(\"A192CBC-HS384\");\n-    \n+\n     /**\n-     * Static value A256CBC for EncryptionAlgorithm.\n+     * Static value A256CBC_HS512 for EncryptionAlgorithm.\n      */\n-    public static final EncryptionAlgorithm A256CBC = fromString(\"A256CBC\");\n-    \n+    public static final EncryptionAlgorithm A256CBC_HS512 = fromString(\"A256CBC-HS512\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "059c29ce48d87dfe947d7b86ebac48ddf78212a8"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df0aeb720f67149df6dae0321e7471b6188cbfef", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/df0aeb720f67149df6dae0321e7471b6188cbfef", "committedDate": "2020-11-11T18:38:04Z", "message": "Applied PR feedback and added local tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NDc0MTY0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#pullrequestreview-528474164", "createdAt": "2020-11-11T19:32:05Z", "commit": {"oid": "df0aeb720f67149df6dae0321e7471b6188cbfef"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxOTozMjowNVrOHxbXBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMTozNDo1MlrOHxfGyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU5MDUzNQ==", "bodyText": "Do you think these will be discoverable? In .NET, we waffled on classes like this vs. factories and opted for the latter for discoverability. Would htat work better here. You could, for example, mix that and builders by having a factory returning the right class that you can then set options, e.t.:\nEncryptOptions\n  .createA128GcmOptions(iv, key)\n  .setAdditionalAuthenticationData(data);\nI'm also wondering how they specify the key size with this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r521590535", "createdAt": "2020-11-11T19:32:05Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesCbcDecryptOptions.java", "diffHunk": "@@ -0,0 +1,19 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+/**\n+ * A class containing configuration parameters that can be applied when decrypting AES-CBC keys with and without\n+ * padding.\n+ */\n+public class AesCbcDecryptOptions extends DecryptOptions {\n+    /**\n+     * Creates an instance of {@link AesCbcDecryptOptions} with the given parameters.\n+     *\n+     * @param iv Initialization vector for the decryption operation.\n+     */\n+    public AesCbcDecryptOptions(byte[] iv) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df0aeb720f67149df6dae0321e7471b6188cbfef"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY0OTA5Ng==", "bodyText": "EncryptOptions and DecryptOptions should be the only parameter. See https://apiview.dev/Assemblies/Review/d74052731cb94759804beaa492b7a17a#Azure.Security.KeyVault.Keys.Cryptography.LocalCryptographyClient for an example. This requires them passing the right pairs of arguments, where as what we did in .NET leads them to the right answer by design.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r521649096", "createdAt": "2020-11-11T21:28:30Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java", "diffHunk": "@@ -357,15 +357,15 @@ private void initializeCryptoClients() {\n      * @throws NullPointerException If {@code algorithm} or {@code cipherText} are {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<DecryptResult> decrypt(EncryptionAlgorithm algorithm, byte[] cipherText, CryptographyOptions options) {\n+    public Mono<DecryptResult> decrypt(EncryptionAlgorithm algorithm, byte[] cipherText, DecryptOptions options) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df0aeb720f67149df6dae0321e7471b6188cbfef"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1MDEyMg==", "bodyText": "This requires them knowing what to pass for which algorithms. This is not a good customer UX. Please see https://apiview.dev/Assemblies/Review/d74052731cb94759804beaa492b7a17a#Azure.Security.KeyVault.Keys.Cryptography.DecryptOptions. Perhaps a builder would be more idiomatic, but the overall concept is to make sure they can only provide relevant arguments that also dictates the algorithm, rather than pairing them together correctly. We can make crypto easier in our limited APIs (compared to general crypto provided in our respective frameworks).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r521650122", "createdAt": "2020-11-11T21:30:51Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/DecryptOptions.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * A class containing various configuration parameters that can be applied when performing decryption operations.\n+ */\n+public class DecryptOptions {\n+    /**\n+     * Initialization vector to be used in the decryption operation using a symmetric algorithm.\n+     */\n+    @JsonProperty(value = \"iv\")\n+    private final byte[] iv;\n+\n+    /**\n+     * Get additional data to authenticate when performing decryption with an authenticated algorithm.\n+     */\n+    @JsonProperty(value = \"aad\")\n+    private final byte[] additionalAuthenticatedData;\n+\n+    /**\n+     * The tag to authenticate when performing decryption with an authenticated algorithm.\n+     */\n+    @JsonProperty(value = \"tag\")\n+    private final byte[] authenticationTag;\n+\n+    /**\n+     * Creates an instance of {@link DecryptOptions} with the given parameters.\n+     *\n+     * @param iv Initialization vector for symmetric algorithms.\n+     * @param additionalAuthenticatedData Additional data to authenticate but not encrypt/decrypt when using\n+     * authenticated crypto algorithms.\n+     * @param authenticationTag The tag to authenticate when performing decryption with an authenticated algorithm.\n+     */\n+    public DecryptOptions(byte[] iv, byte[] additionalAuthenticatedData, byte[] authenticationTag) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df0aeb720f67149df6dae0321e7471b6188cbfef"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1MTc1Mw==", "bodyText": "See https://apiview.dev/Assemblies/Review/d74052731cb94759804beaa492b7a17a#Azure.Security.KeyVault.Keys.Cryptography.EncryptOptions. Where iv is optional (default parameter value of null), we should generate an appropriately long one. See https://github.com/Azure/azure-sdk-for-net/blob/275bad601e72a8e308a73aed621e838d1ae20e9b/sdk/keyvault/Azure.Security.KeyVault.Keys/src/Cryptography/EncryptOptions.cs#L171-L179 for how/when I did this (I call Initialize from local and remote providers and let this class handle if and when it should generate an IV/nonce).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r521651753", "createdAt": "2020-11-11T21:34:30Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/EncryptOptions.java", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * A class containing various configuration parameters that can be applied when performing encryption operations.\n+ */\n+public class EncryptOptions {\n+    /**\n+     * Initialization vector to be used in the encryption operation using a symmetric algorithm.\n+     */\n+    @JsonProperty(value = \"iv\")\n+    private final byte[] iv;\n+\n+    /**\n+     * Get additional data to authenticate when performing encryption with an authenticated algorithm.\n+     */\n+    @JsonProperty(value = \"aad\")\n+    private final byte[] additionalAuthenticatedData;\n+\n+    /**\n+     * Creates an instance of {@link EncryptOptions} with the given parameters.\n+     *\n+     * @param iv Initialization vector for symmetric algorithms.\n+     * @param additionalAuthenticatedData Additional data to authenticate but not encrypt/decrypt when using\n+     * authenticated crypto algorithms.\n+     */\n+    public EncryptOptions(byte[] iv, byte[] additionalAuthenticatedData) {\n+        if (iv == null) {\n+            this.iv = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df0aeb720f67149df6dae0321e7471b6188cbfef"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1MTkxNA==", "bodyText": "...generation of an IV could probably wait closer to GA, but I'd open a bug on that if you punt it for tracking.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r521651914", "createdAt": "2020-11-11T21:34:52Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/EncryptOptions.java", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * A class containing various configuration parameters that can be applied when performing encryption operations.\n+ */\n+public class EncryptOptions {\n+    /**\n+     * Initialization vector to be used in the encryption operation using a symmetric algorithm.\n+     */\n+    @JsonProperty(value = \"iv\")\n+    private final byte[] iv;\n+\n+    /**\n+     * Get additional data to authenticate when performing encryption with an authenticated algorithm.\n+     */\n+    @JsonProperty(value = \"aad\")\n+    private final byte[] additionalAuthenticatedData;\n+\n+    /**\n+     * Creates an instance of {@link EncryptOptions} with the given parameters.\n+     *\n+     * @param iv Initialization vector for symmetric algorithms.\n+     * @param additionalAuthenticatedData Additional data to authenticate but not encrypt/decrypt when using\n+     * authenticated crypto algorithms.\n+     */\n+    public EncryptOptions(byte[] iv, byte[] additionalAuthenticatedData) {\n+        if (iv == null) {\n+            this.iv = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1MTc1Mw=="}, "originalCommit": {"oid": "df0aeb720f67149df6dae0321e7471b6188cbfef"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "596d98e58e6860b78fbcce460fbe5da39333ce69", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/596d98e58e6860b78fbcce460fbe5da39333ce69", "committedDate": "2020-11-12T17:34:47Z", "message": "Made the EncryptOptions and DecryptOptions constructor package-private, as well as their children's, and made them have factory methods for creating the former to help with discoverability."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b937512b6060605f73c8980c6bb7e227e786f2c", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8b937512b6060605f73c8980c6bb7e227e786f2c", "committedDate": "2020-11-12T18:13:10Z", "message": "Fixed build issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1f1511b8176ae42a6b0d138da8062da0027609d", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b1f1511b8176ae42a6b0d138da8062da0027609d", "committedDate": "2020-11-12T21:44:53Z", "message": "Changed EncryptOptions and DecryptOptions to use a factory model."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NTExNzA0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#pullrequestreview-529511704", "createdAt": "2020-11-12T21:29:18Z", "commit": {"oid": "8b937512b6060605f73c8980c6bb7e227e786f2c"}, "state": "APPROVED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMToyOToxOFrOHyPD-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMzowODoxOFrOHySapQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQzNzYyNw==", "bodyText": "You normally put options classes in their own namespace? Seems...verbose. Could equate them to models (after all, these options classes are closer to models than what we were using before).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r522437627", "createdAt": "2020-11-12T21:29:18Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java", "diffHunk": "@@ -23,6 +23,8 @@\n import com.azure.security.keyvault.keys.cryptography.models.SignResult;\n import com.azure.security.keyvault.keys.cryptography.models.VerifyResult;\n import com.azure.security.keyvault.keys.cryptography.models.WrapResult;\n+import com.azure.security.keyvault.keys.cryptography.options.DecryptOptions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b937512b6060605f73c8980c6bb7e227e786f2c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4MzkwNw==", "bodyText": "Nit: it's actually \"plaintext\" in crypto-speak.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r522483907", "createdAt": "2020-11-12T22:52:10Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyServiceClient.java", "diffHunk": "@@ -125,19 +127,17 @@ JsonWebKey transformSecretKey(SecretKey secretKey) throws JsonProcessingExceptio\n         return mapper.readValue(jsonString, JsonWebKey.class);\n     }\n \n-    Mono<EncryptResult> encrypt(EncryptionAlgorithm algorithm, byte[] plaintext, EncryptOptions options,\n-                                Context context) {\n-        byte[] iv = null;\n-        byte[] authenticatedData = null;\n-\n-        if (options != null) {\n-            iv = options.getIv();\n-            authenticatedData = options.getAdditionalAuthenticatedData();\n-        }\n+    Mono<EncryptResult> encrypt(EncryptOptions encryptOptions, Context context) {\n+        Objects.requireNonNull(encryptOptions, \"'encryptOptions' cannot be null.\");\n+        Objects.requireNonNull(encryptOptions.getAlgorithm(), \"Encryption algorithm cannot be null.\");\n+        Objects.requireNonNull(encryptOptions.getPlainText(), \"Plain text content to be encrypted cannot be null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b937512b6060605f73c8980c6bb7e227e786f2c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4NDI2NA==", "bodyText": "On that note, I guess I missed this before, but just getPlaintext (it's one word).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r522484264", "createdAt": "2020-11-12T22:52:40Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyServiceClient.java", "diffHunk": "@@ -125,19 +127,17 @@ JsonWebKey transformSecretKey(SecretKey secretKey) throws JsonProcessingExceptio\n         return mapper.readValue(jsonString, JsonWebKey.class);\n     }\n \n-    Mono<EncryptResult> encrypt(EncryptionAlgorithm algorithm, byte[] plaintext, EncryptOptions options,\n-                                Context context) {\n-        byte[] iv = null;\n-        byte[] authenticatedData = null;\n-\n-        if (options != null) {\n-            iv = options.getIv();\n-            authenticatedData = options.getAdditionalAuthenticatedData();\n-        }\n+    Mono<EncryptResult> encrypt(EncryptOptions encryptOptions, Context context) {\n+        Objects.requireNonNull(encryptOptions, \"'encryptOptions' cannot be null.\");\n+        Objects.requireNonNull(encryptOptions.getAlgorithm(), \"Encryption algorithm cannot be null.\");\n+        Objects.requireNonNull(encryptOptions.getPlainText(), \"Plain text content to be encrypted cannot be null.\");\n \n+        EncryptionAlgorithm algorithm = encryptOptions.getAlgorithm();\n+        byte[] iv = encryptOptions.getIv();\n+        byte[] authenticatedData = encryptOptions.getAdditionalAuthenticatedData();\n         KeyOperationParameters parameters = new KeyOperationParameters()\n             .setAlgorithm(algorithm)\n-            .setValue(plaintext)\n+            .setValue(encryptOptions.getPlainText())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b937512b6060605f73c8980c6bb7e227e786f2c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4NTI5Mw==", "bodyText": "getCiphertext (one word)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r522485293", "createdAt": "2020-11-12T22:54:06Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyServiceClient.java", "diffHunk": "@@ -153,21 +153,18 @@ JsonWebKey transformSecretKey(SecretKey secretKey) throws JsonProcessingExceptio\n                 Mono.just(new EncryptResult(keyOperationResultResponse.getValue().getResult(), algorithm, keyId)));\n     }\n \n-    Mono<DecryptResult> decrypt(EncryptionAlgorithm algorithm, byte[] cipherText, DecryptOptions options,\n-                                Context context) {\n-        byte[] iv = null;\n-        byte[] additionalAuthenticatedData = null;\n-        byte[] authenticationTag = null;\n-\n-        if (options != null) {\n-            iv = options.getIv();\n-            additionalAuthenticatedData = options.getAdditionalAuthenticatedData();\n-            authenticationTag = options.getAuthenticationTag();\n-        }\n+    Mono<DecryptResult> decrypt(DecryptOptions decryptOptions, Context context) {\n+        Objects.requireNonNull(decryptOptions, \"'decryptOptions' cannot be null.\");\n+        Objects.requireNonNull(decryptOptions.getAlgorithm(), \"Encryption algorithm cannot be null.\");\n+        Objects.requireNonNull(decryptOptions.getCipherText(), \"Cipher text content to be decrypted cannot be null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b937512b6060605f73c8980c6bb7e227e786f2c"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4ODUwNQ==", "bodyText": "iv in all cases should be generated with a cryptographically random generator. See https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/keyvault/Azure.Security.KeyVault.Keys/src/Cryptography/EncryptOptions.cs. If necessary, you could open an issue and do this for GA.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r522488505", "createdAt": "2020-11-12T22:58:23Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/options/AesCbcDecryptOptions.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography.options;\n+\n+import com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm;\n+\n+/**\n+ * A class containing configuration parameters that can be applied when decrypting AES-CBC keys with and without\n+ * padding.\n+ */\n+public class AesCbcDecryptOptions extends DecryptOptions {\n+    /**\n+     * Creates an instance of {@link AesCbcDecryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for decryption.\n+     * @param ciphertext The content to be decrypted.\n+     */\n+    AesCbcDecryptOptions(EncryptionAlgorithm algorithm, byte[] ciphertext) {\n+        super(algorithm, ciphertext);\n+    }\n+\n+    /**\n+     * Set the given initialization vector to be used in this decryption operation.\n+     *\n+     * @param iv Initialization vector for the decryption operation.\n+     * @return The updated {@link AesCbcDecryptOptions} object.\n+     */\n+    public AesCbcDecryptOptions setIv(byte[] iv) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b937512b6060605f73c8980c6bb7e227e786f2c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4OTYyMQ==", "bodyText": "This is required for GCM. Shouldn't this throw?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r522489621", "createdAt": "2020-11-12T23:00:36Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/options/AesGcmDecryptOptions.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography.options;\n+\n+import com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm;\n+\n+/**\n+ * A class containing configuration parameters that can be applied when decrypting AES-GCM keys.\n+ */\n+public class AesGcmDecryptOptions extends DecryptOptions {\n+    /**\n+     * Creates an instance of {@link AesGcmDecryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for decryption.\n+     * @param ciphertext The content to be decrypted.\n+     * @param iv Initialization vector for the decryption operation.\n+     */\n+    AesGcmDecryptOptions(EncryptionAlgorithm algorithm, byte[] ciphertext, byte[] iv) {\n+        super(algorithm, ciphertext);\n+\n+        if (iv == null) {\n+            this.iv = null;\n+        } else {\n+            this.iv = new byte[iv.length];\n+            System.arraycopy(iv, 0, this.iv, 0, iv.length);\n+        }\n+    }\n+\n+    /**\n+     * Set additional data to authenticate when using authenticated crypto algorithms.\n+     *\n+     * @param additionalAuthenticatedData Additional data to authenticate when using authenticated crypto algorithms.\n+     * @return The updated {@link AesGcmDecryptOptions} object.\n+     */\n+    public AesGcmDecryptOptions setAdditionalAuthenticatedData(byte[] additionalAuthenticatedData) {\n+        if (additionalAuthenticatedData == null) {\n+            this.additionalAuthenticatedData = null;\n+        } else {\n+            this.additionalAuthenticatedData = new byte[additionalAuthenticatedData.length];\n+            System.arraycopy(additionalAuthenticatedData, 0, this.additionalAuthenticatedData, 0,\n+                additionalAuthenticatedData.length);\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Set the tag to authenticate when performing decryption.\n+     *\n+     * @param authenticationTag The tag to authenticate when performing decryption.\n+     * @return The updated {@link AesGcmDecryptOptions} object.\n+     */\n+    public AesGcmDecryptOptions setAuthenticationTag(byte[] authenticationTag) {\n+        if (authenticationTag == null) {\n+            this.authenticationTag = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b937512b6060605f73c8980c6bb7e227e786f2c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ5MDA2Nw==", "bodyText": "As mentioned elsewhere, \"Ciphertext\" and \"Plaintext\".", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r522490067", "createdAt": "2020-11-12T23:01:50Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/options/DecryptOptions.java", "diffHunk": "@@ -0,0 +1,148 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography.options;\n+\n+import com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A class containing various configuration parameters that can be applied when performing decryption operations.\n+ */\n+public class DecryptOptions {\n+    /**\n+     * The algorithm to be used for decryption.\n+     */\n+    final EncryptionAlgorithm algorithm;\n+\n+    /**\n+     * The content to be decrypted.\n+     */\n+    final byte[] cipherText;\n+\n+    /**\n+     * Initialization vector to be used in the decryption operation using a symmetric algorithm.\n+     */\n+    byte[] iv;\n+\n+    /**\n+     * Get additional data to authenticate when performing decryption with an authenticated algorithm.\n+     */\n+    byte[] additionalAuthenticatedData;\n+\n+    /**\n+     * The tag to authenticate when performing decryption with an authenticated algorithm.\n+     */\n+    byte[] authenticationTag;\n+\n+    /**\n+     * Factory method to create an instance of {@link DecryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for decryption.\n+     * @param ciphertext The content to be decrypted.\n+     * @return The {@link DecryptOptions}.\n+     */\n+    public static DecryptOptions createOptions(EncryptionAlgorithm algorithm, byte[] ciphertext) {\n+        return new DecryptOptions(algorithm, ciphertext);\n+    }\n+\n+    /**\n+     * Factory method to create an instance of {@link AesCbcDecryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for decryption.\n+     * @param ciphertext The content to be decrypted.\n+     * @return The {@link AesCbcDecryptOptions}.\n+     */\n+    public static AesCbcDecryptOptions createAesCbcOptions(EncryptionAlgorithm algorithm, byte[] ciphertext) {\n+        return new AesCbcDecryptOptions(algorithm, ciphertext);\n+    }\n+\n+    /**\n+     * Factory method to create an instance of {@link AesGcmDecryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for decryption.\n+     * @param ciphertext The content to be decrypted.\n+     * @param iv Initialization vector for the decryption operation.\n+     * @return The {@link AesGcmDecryptOptions}.\n+     */\n+    public static AesGcmDecryptOptions createAesGcmOptions(EncryptionAlgorithm algorithm, byte[] ciphertext, byte[] iv) {\n+        return new AesGcmDecryptOptions(algorithm, ciphertext, iv);\n+    }\n+\n+    /**\n+     * Creates an instance of {@link DecryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for decryption.\n+     * @param cipherText The content to be decrypted.\n+     */\n+    DecryptOptions(EncryptionAlgorithm algorithm, byte[] cipherText) {\n+        Objects.requireNonNull(algorithm, \"'algorithm cannot be null'\");\n+        Objects.requireNonNull(cipherText, \"'ciphertext' cannot be null\");\n+\n+        this.algorithm = algorithm;\n+        this.cipherText = new byte[cipherText.length];\n+        System.arraycopy(cipherText, 0, this.cipherText, 0, cipherText.length);\n+    }\n+\n+    /**\n+     * The algorithm to be used for encryption.\n+     *\n+     * @return The algorithm to be used for encryption.\n+     */\n+    public EncryptionAlgorithm getAlgorithm() {\n+        return algorithm;\n+    }\n+\n+    /**\n+     * Get the content to be encrypted.\n+     *\n+     * @return The content to be encrypted.\n+     */\n+    public byte[] getCipherText() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b937512b6060605f73c8980c6bb7e227e786f2c"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ5MjI5Ng==", "bodyText": "You cloned to set this. Do you need to clone again?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r522492296", "createdAt": "2020-11-12T23:07:35Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/options/DecryptOptions.java", "diffHunk": "@@ -0,0 +1,148 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography.options;\n+\n+import com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A class containing various configuration parameters that can be applied when performing decryption operations.\n+ */\n+public class DecryptOptions {\n+    /**\n+     * The algorithm to be used for decryption.\n+     */\n+    final EncryptionAlgorithm algorithm;\n+\n+    /**\n+     * The content to be decrypted.\n+     */\n+    final byte[] cipherText;\n+\n+    /**\n+     * Initialization vector to be used in the decryption operation using a symmetric algorithm.\n+     */\n+    byte[] iv;\n+\n+    /**\n+     * Get additional data to authenticate when performing decryption with an authenticated algorithm.\n+     */\n+    byte[] additionalAuthenticatedData;\n+\n+    /**\n+     * The tag to authenticate when performing decryption with an authenticated algorithm.\n+     */\n+    byte[] authenticationTag;\n+\n+    /**\n+     * Factory method to create an instance of {@link DecryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for decryption.\n+     * @param ciphertext The content to be decrypted.\n+     * @return The {@link DecryptOptions}.\n+     */\n+    public static DecryptOptions createOptions(EncryptionAlgorithm algorithm, byte[] ciphertext) {\n+        return new DecryptOptions(algorithm, ciphertext);\n+    }\n+\n+    /**\n+     * Factory method to create an instance of {@link AesCbcDecryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for decryption.\n+     * @param ciphertext The content to be decrypted.\n+     * @return The {@link AesCbcDecryptOptions}.\n+     */\n+    public static AesCbcDecryptOptions createAesCbcOptions(EncryptionAlgorithm algorithm, byte[] ciphertext) {\n+        return new AesCbcDecryptOptions(algorithm, ciphertext);\n+    }\n+\n+    /**\n+     * Factory method to create an instance of {@link AesGcmDecryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for decryption.\n+     * @param ciphertext The content to be decrypted.\n+     * @param iv Initialization vector for the decryption operation.\n+     * @return The {@link AesGcmDecryptOptions}.\n+     */\n+    public static AesGcmDecryptOptions createAesGcmOptions(EncryptionAlgorithm algorithm, byte[] ciphertext, byte[] iv) {\n+        return new AesGcmDecryptOptions(algorithm, ciphertext, iv);\n+    }\n+\n+    /**\n+     * Creates an instance of {@link DecryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for decryption.\n+     * @param cipherText The content to be decrypted.\n+     */\n+    DecryptOptions(EncryptionAlgorithm algorithm, byte[] cipherText) {\n+        Objects.requireNonNull(algorithm, \"'algorithm cannot be null'\");\n+        Objects.requireNonNull(cipherText, \"'ciphertext' cannot be null\");\n+\n+        this.algorithm = algorithm;\n+        this.cipherText = new byte[cipherText.length];\n+        System.arraycopy(cipherText, 0, this.cipherText, 0, cipherText.length);\n+    }\n+\n+    /**\n+     * The algorithm to be used for encryption.\n+     *\n+     * @return The algorithm to be used for encryption.\n+     */\n+    public EncryptionAlgorithm getAlgorithm() {\n+        return algorithm;\n+    }\n+\n+    /**\n+     * Get the content to be encrypted.\n+     *\n+     * @return The content to be encrypted.\n+     */\n+    public byte[] getCipherText() {\n+        if (cipherText == null) {\n+            return null;\n+        } else {\n+            return cipherText.clone();\n+        }\n+    }\n+\n+    /**\n+     * Get the initialization vector to be used in the decryption operation using a symmetric algorithm.\n+     *\n+     * @return The initialization vector.\n+     */\n+    public byte[] getIv() {\n+        if (iv == null) {\n+            return null;\n+        } else {\n+            return iv.clone();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b937512b6060605f73c8980c6bb7e227e786f2c"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ5MjU4MQ==", "bodyText": "Clone again? Also, this needs to be generated at the proper size with a proper RNG if null.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r522492581", "createdAt": "2020-11-12T23:08:18Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/options/EncryptOptions.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography.options;\n+\n+import com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A class containing various configuration parameters that can be applied when performing encryption operations.\n+ */\n+public class EncryptOptions {\n+    /**\n+     * The algorithm to be used for encryption.\n+     */\n+    final EncryptionAlgorithm algorithm;\n+\n+    /**\n+     * The content to be encrypted.\n+     */\n+    final byte[] plainText;\n+\n+    /**\n+     * Initialization vector to be used in the encryption operation using a symmetric algorithm.\n+     */\n+    byte[] iv;\n+\n+    /**\n+     * Get additional data to authenticate when performing encryption with an authenticated algorithm.\n+     */\n+    byte[] additionalAuthenticatedData;\n+\n+    /**\n+     * Factory method to create an instance of {@link EncryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for encryption.\n+     * @param plaintext The content to be encryption.\n+     * @return The {@link EncryptOptions}.\n+     */\n+    public static EncryptOptions createOptions(EncryptionAlgorithm algorithm, byte[] plaintext) {\n+        return new EncryptOptions(algorithm, plaintext);\n+    }\n+\n+    /**\n+     * Factory method to create an instance of {@link AesCbcEncryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for encryption.\n+     * @param plaintext The content to be encryption.\n+     * @return The {@link AesCbcEncryptOptions}.\n+     */\n+    public static AesCbcEncryptOptions createAesCbcOptions(EncryptionAlgorithm algorithm, byte[] plaintext) {\n+        return new AesCbcEncryptOptions(algorithm, plaintext);\n+    }\n+\n+    /**\n+     * Factory method to create an instance of {@link AesGcmEncryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for encryption.\n+     * @param plaintext The content to be encryption.\n+     * @param iv Initialization vector for the encryption operation.\n+     * @return The {@link AesGcmEncryptOptions}.\n+     */\n+    public static AesGcmEncryptOptions createAesGcmOptions(EncryptionAlgorithm algorithm, byte[] plaintext, byte[] iv) {\n+        return new AesGcmEncryptOptions(algorithm, plaintext, iv);\n+    }\n+\n+    /**\n+     * Creates an instance of {@link EncryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for encryption.\n+     * @param plainText The content to be encrypted.\n+     */\n+    EncryptOptions(EncryptionAlgorithm algorithm, byte[] plainText) {\n+        Objects.requireNonNull(algorithm, \"'algorithm cannot be null'\");\n+        Objects.requireNonNull(plainText, \"'plaintext' cannot be null\");\n+\n+        this.algorithm = algorithm;\n+        this.plainText = new byte[plainText.length];\n+        System.arraycopy(plainText, 0, this.plainText, 0, plainText.length);\n+    }\n+\n+    /**\n+     * The algorithm to be used for encryption.\n+     *\n+     * @return The algorithm to be used for encryption.\n+     */\n+    public EncryptionAlgorithm getAlgorithm() {\n+        return algorithm;\n+    }\n+\n+    /**\n+     * Get the content to be encrypted.\n+     *\n+     * @return The content to be encrypted.\n+     */\n+    public byte[] getPlainText() {\n+        if (plainText == null) {\n+            return null;\n+        } else {\n+            return plainText.clone();\n+        }\n+    }\n+\n+    /**\n+     * Get the initialization vector to be used in the encryption operation using a symmetric algorithm.\n+     *\n+     * @return The initialization vector.\n+     */\n+    public byte[] getIv() {\n+        if (iv == null) {\n+            return null;\n+        } else {\n+            return iv.clone();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b937512b6060605f73c8980c6bb7e227e786f2c"}, "originalPosition": 114}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff77ba13802b18d690436a3ec2534f732fb3bc47", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ff77ba13802b18d690436a3ec2534f732fb3bc47", "committedDate": "2020-11-12T23:26:52Z", "message": "Added iv, additionalAuthenticatedDate and authenticationTag to EncryptResult."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53c8771dbbc4324372056fa9388c25329fc2408d", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/53c8771dbbc4324372056fa9388c25329fc2408d", "committedDate": "2020-11-13T00:15:31Z", "message": "Made `plainText` and `cipherText` all lowercase."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 259, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}