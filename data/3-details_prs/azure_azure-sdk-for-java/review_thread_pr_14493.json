{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0MzIxMDgz", "number": 14493, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo0MjoyMFrOEczxdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNzozODowNlrOEdUo6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjQzODMwOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo0MjoyMFrOHHkCZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo0MjoyMFrOHHkCZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY5MjUxOQ==", "bodyText": "The final relationship APIs have not been implemented yet. They will be implemented in the next PR.\nWhile the final pageable API will look similar to this, this is more of a test to see how the PL works.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14493#discussion_r477692519", "createdAt": "2020-08-26T23:42:20Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -149,12 +146,59 @@ public HttpPipeline getHttpPipeline() {\n      * @param digitalTwinId The Id of the source digital twin.\n      * @param relationshipName The name of a relationship to filter to.\n      * @return A {@link PagedFlux} of application/json relationships belonging to the specified digital twin and the http response.\n-     * TODO: Impl here returns an Object and not a String.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedFlux<Object> listRelationships(String digitalTwinId, String relationshipName) {\n-        return new PagedFlux<>(\n-            () -> protocolLayer.getDigitalTwins().listRelationshipsSinglePageAsync(digitalTwinId, relationshipName),\n-            nextLink -> protocolLayer.getDigitalTwins().listRelationshipsNextSinglePageAsync(nextLink));\n+    public PagedFlux<String> listRelationships(String digitalTwinId, String relationshipName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc14f4281a089a55bfc3cba6fb15b444046195dc"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MTY3MjUxOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjo1NjowMlrOHIZI2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNzowOTowMlrOHIZmQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2MjUyMA==", "bodyText": "won't we be having the same issue with the headers if we use the default Response type?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14493#discussion_r478562520", "createdAt": "2020-08-27T16:56:02Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -125,22 +126,18 @@ public HttpPipeline getHttpPipeline() {\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<Response<String>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, String relationship) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2114a9fb3d577ef6cacbf8fe6e1653fd35947559"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU3MDA1MA==", "bodyText": "Yup, that is correct. This snippet is meant for testing, the actual impl is in #14495 .\nThe actual API surface is:\npublic Mono<DigitalTwinsResponse<String>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, String relationship) { }", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14493#discussion_r478570050", "createdAt": "2020-08-27T17:09:02Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -125,22 +126,18 @@ public HttpPipeline getHttpPipeline() {\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<Response<String>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, String relationship) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2MjUyMA=="}, "originalCommit": {"oid": "2114a9fb3d577ef6cacbf8fe6e1653fd35947559"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MTY4NDk4OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DigitalTwinsStringSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjo1OToyM1rOHIZQpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxODoyMDozMVrOHIcDcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2NDUxOA==", "bodyText": "I think we need to rename this variable ... fake, mock or something", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14493#discussion_r478564518", "createdAt": "2020-08-27T16:59:23Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DigitalTwinsStringSerializer.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core.implementation.serializer;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Configures the {@link StdSerializer<String>} with custom behavior needed to work with Digital Twins REST API.\n+ */\n+public class DigitalTwinsStringSerializer extends StdSerializer<String> {\n+    private static final long serialVersionUID = 1L;\n+    private final ObjectMapper mapper;\n+\n+    public DigitalTwinsStringSerializer(Class<?> t, boolean dummy, ObjectMapper mapper) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2114a9fb3d577ef6cacbf8fe6e1653fd35947559"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYxMDI4OQ==", "bodyText": "I'll make use of the the following base class constructor instead:\nprotected StdSerializer(Class<T> t) {\n    this._handledType = t;\n}\nWeirdly enough, this is what the StdSerializer defines it as, which is why this signature was autogenerated:\nprotected StdSerializer(Class<?> t, boolean dummy) {\n    this._handledType = t;\n}", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14493#discussion_r478610289", "createdAt": "2020-08-27T18:20:31Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DigitalTwinsStringSerializer.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core.implementation.serializer;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Configures the {@link StdSerializer<String>} with custom behavior needed to work with Digital Twins REST API.\n+ */\n+public class DigitalTwinsStringSerializer extends StdSerializer<String> {\n+    private static final long serialVersionUID = 1L;\n+    private final ObjectMapper mapper;\n+\n+    public DigitalTwinsStringSerializer(Class<?> t, boolean dummy, ObjectMapper mapper) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2NDUxOA=="}, "originalCommit": {"oid": "2114a9fb3d577ef6cacbf8fe6e1653fd35947559"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MTgxODMyOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNzozNjo0NFrOHIakbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNzozNjo0NFrOHIakbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU4NTk2NQ==", "bodyText": "can we rename model class to typeClass or something so it won't be confused with the ADT model terminology?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14493#discussion_r478585965", "createdAt": "2020-08-27T17:36:44Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -299,7 +299,31 @@ These APIs are invoked via DigitalTwinsAsyncClient.\n      * @return A REST response containing the application/json relationship created.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<Response<String>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, String relationship) { }\n+    public Mono<DigitalTwinsResponse<String>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, String relationship) { }\n+\n+    /**\n+     * Creates a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to be created.\n+     * @param relationship The relationship to be created.\n+     * @param modelClass The model class to convert the relationship to.\n+     * @return The relationship created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> createRelationship(String digitalTwinId, String relationshipId, Object relationship, Class<T> modelClass) { }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2114a9fb3d577ef6cacbf8fe6e1653fd35947559"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MTgyMzEzOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNzozODowNlrOHIanZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxODozMToxOFrOHIcZvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU4NjcyNg==", "bodyText": "do we need another Mono updateRelationship that takes a RequestOption?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14493#discussion_r478586726", "createdAt": "2020-08-27T17:38:06Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -319,19 +343,40 @@ These APIs are invoked via DigitalTwinsAsyncClient.\n      * @return A REST response containing the application/json relationship corresponding to the provided relationshipId.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<Response<String>> getRelationshipWithResponse(String digitalTwinId, String relationshipId) { }\n+    public Mono<DigitalTwinsResponse<String>> getRelationshipWithResponse(String digitalTwinId, String relationshipId) { }\n+\n+    /**\n+     * Gets a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to retrieve.\n+     * @param modelClass The model class to convert the relationship to.\n+     * @return The relationship corresponding to the provided relationshipId.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getRelationship(String digitalTwinId, String relationshipId, Class<T> modelClass) { }\n+\n+    /**\n+     * Gets a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to retrieve.\n+     * @param modelClass The model class to convert the relationship to.\n+     * @return A REST response containing the relationship corresponding to the provided relationshipId.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getRelationshipWithResponse(String digitalTwinId, String relationshipId, Class<T> modelClass) { }\n \n     /**\n      * Updates the properties of a relationship on a digital twin.\n      *\n      * @param digitalTwinId The Id of the source digital twin.\n      * @param relationshipId The Id of the relationship to be updated.\n      * @param relationshipUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin's relationship.\n-     * @param options The optional settings for this request.\n      * @return An empty response.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2114a9fb3d577ef6cacbf8fe6e1653fd35947559"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYxNTk5OQ==", "bodyText": "No, we don't.\nWe have 2 overloads for updateRelationship:\n\nupdateRelationship(String digitalTwinId, String relationshipId, List<Object> relationshipUpdateOperations)\nupdateRelationship(String digitalTwinId, String relationshipId, List<Object> relationshipUpdateOperations, RequestOptions options)\n\nThe max overload one, with RequestOptions (2), will:\n\nasync API -> return withResponse.\nsync API -> accept a Context input, and return withResponse.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14493#discussion_r478615999", "createdAt": "2020-08-27T18:31:18Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -319,19 +343,40 @@ These APIs are invoked via DigitalTwinsAsyncClient.\n      * @return A REST response containing the application/json relationship corresponding to the provided relationshipId.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<Response<String>> getRelationshipWithResponse(String digitalTwinId, String relationshipId) { }\n+    public Mono<DigitalTwinsResponse<String>> getRelationshipWithResponse(String digitalTwinId, String relationshipId) { }\n+\n+    /**\n+     * Gets a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to retrieve.\n+     * @param modelClass The model class to convert the relationship to.\n+     * @return The relationship corresponding to the provided relationshipId.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getRelationship(String digitalTwinId, String relationshipId, Class<T> modelClass) { }\n+\n+    /**\n+     * Gets a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to retrieve.\n+     * @param modelClass The model class to convert the relationship to.\n+     * @return A REST response containing the relationship corresponding to the provided relationshipId.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getRelationshipWithResponse(String digitalTwinId, String relationshipId, Class<T> modelClass) { }\n \n     /**\n      * Updates the properties of a relationship on a digital twin.\n      *\n      * @param digitalTwinId The Id of the source digital twin.\n      * @param relationshipId The Id of the relationship to be updated.\n      * @param relationshipUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin's relationship.\n-     * @param options The optional settings for this request.\n      * @return An empty response.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU4NjcyNg=="}, "originalCommit": {"oid": "2114a9fb3d577ef6cacbf8fe6e1653fd35947559"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1407, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}