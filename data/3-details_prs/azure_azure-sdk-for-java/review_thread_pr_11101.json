{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2OTYxNTMz", "number": 11101, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODowMToyN1rOD8l2wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDowMzo1OVrOD8sBKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODYxMzc2OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareServiceAsyncClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODowMToyOFrOGVoJ_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODowMToyOFrOGVoJ_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzMTE5OA==", "bodyText": "Generally it is better to include TODOs outside of the comment for two reasons:\n\nIf we ship a beta or GA but forget to remove it we won't have silly documentation\nIntelliJ and other IDEs offer functionality to highlight TODO comment lines.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11101#discussion_r425331198", "createdAt": "2020-05-14T18:01:28Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareServiceAsyncClient.java", "diffHunk": "@@ -534,4 +538,64 @@ public String generateAccountSas(AccountSasSignatureValues accountSasSignatureVa\n         return new AccountSasImplUtil(accountSasSignatureValues)\n             .generateSas(SasImplUtils.extractSharedKeyCredential(getHttpPipeline()));\n     }\n+\n+    /**\n+     * Restores a previously deleted share.\n+     * If the share associated with provided <code>deletedShareName</code>\n+     * already exists, this call will result in a 409 (conflict).\n+     * This API is only functional if Share Soft Delete is enabled\n+     * for the storage account associated with the share.\n+     * For more information, see the\n+     * <a href=\"TBD\">Azure Docs</a>. TODO (kasobol-msft) add link to REST API docs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0addd7ef8211c6f29c120ab6cade2f51dee8f9bf"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODYxNTUyOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareServiceAsyncClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODowMjowMFrOGVoLMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODowMjowMFrOGVoLMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzMTUwNg==", "bodyText": "Same as the other TODO comment", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11101#discussion_r425331506", "createdAt": "2020-05-14T18:02:00Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareServiceAsyncClient.java", "diffHunk": "@@ -534,4 +538,64 @@ public String generateAccountSas(AccountSasSignatureValues accountSasSignatureVa\n         return new AccountSasImplUtil(accountSasSignatureValues)\n             .generateSas(SasImplUtils.extractSharedKeyCredential(getHttpPipeline()));\n     }\n+\n+    /**\n+     * Restores a previously deleted share.\n+     * If the share associated with provided <code>deletedShareName</code>\n+     * already exists, this call will result in a 409 (conflict).\n+     * This API is only functional if Share Soft Delete is enabled\n+     * for the storage account associated with the share.\n+     * For more information, see the\n+     * <a href=\"TBD\">Azure Docs</a>. TODO (kasobol-msft) add link to REST API docs\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.share.ShareServiceAsyncClient.undeleteShare#String-String}\n+     *\n+     * @param deletedShareName The name of the previously deleted share.\n+     * @param deletedShareVersion The version of the previously deleted share.\n+     * @return A {@link Mono} containing a {@link ShareAsyncClient} used\n+     * to interact with the restored share.\n+     */\n+    public Mono<ShareAsyncClient> undeleteShare(\n+        String deletedShareName, String deletedShareVersion) {\n+        return this.undeleteShareWithResponse(deletedShareName, deletedShareVersion).flatMap(FluxUtil::toMono);\n+    }\n+\n+    /**\n+     * Restores a previously deleted share.\n+     * If the share associated with provided <code>deletedShareName</code>\n+     * already exists, this call will result in a 409 (conflict).\n+     * This API is only functional if Share Soft Delete is enabled\n+     * for the storage account associated with the share.\n+     * For more information, see the\n+     * <a href=\"TBD\">Azure Docs</a>. TODO (kasobol-msft) add link to REST API docs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0addd7ef8211c6f29c120ab6cade2f51dee8f9bf"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODYxODc2OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareServiceAsyncClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODowMjo1NFrOGVoNQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODowMjo1NFrOGVoNQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzMjAzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Restores a previously deleted share.\n          \n          \n            \n                 * If the share associated with provided <code>deletedShareName</code>\n          \n          \n            \n                 * already exists, this call will result in a 409 (conflict).\n          \n          \n            \n                 * This API is only functional if Share Soft Delete is enabled\n          \n          \n            \n                 * for the storage account associated with the share.\n          \n          \n            \n                 * For more information, see the\n          \n          \n            \n                 * <a href=\"TBD\">Azure Docs</a>. TODO (kasobol-msft) add link to REST API docs\n          \n          \n            \n                 * Restores a previously deleted share.\n          \n          \n            \n                 * <p>\n          \n          \n            \n                 * If the share associated with provided <code>deletedShareName</code>\n          \n          \n            \n                 * already exists, this call will result in a 409 (conflict).\n          \n          \n            \n                 * <p>\n          \n          \n            \n                 * This API is only functional if Share Soft Delete is enabled\n          \n          \n            \n                 * for the storage account associated with the share.\n          \n          \n            \n                 * For more information, see the\n          \n          \n            \n                 * <a href=\"TBD\">Azure Docs</a>. TODO (kasobol-msft) add link to REST API docs\n          \n      \n    \n    \n  \n\nJavadocs are HTML paragraphs so newlines aren't maintained.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11101#discussion_r425332035", "createdAt": "2020-05-14T18:02:54Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareServiceAsyncClient.java", "diffHunk": "@@ -534,4 +538,64 @@ public String generateAccountSas(AccountSasSignatureValues accountSasSignatureVa\n         return new AccountSasImplUtil(accountSasSignatureValues)\n             .generateSas(SasImplUtils.extractSharedKeyCredential(getHttpPipeline()));\n     }\n+\n+    /**\n+     * Restores a previously deleted share.\n+     * If the share associated with provided <code>deletedShareName</code>\n+     * already exists, this call will result in a 409 (conflict).\n+     * This API is only functional if Share Soft Delete is enabled\n+     * for the storage account associated with the share.\n+     * For more information, see the\n+     * <a href=\"TBD\">Azure Docs</a>. TODO (kasobol-msft) add link to REST API docs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0addd7ef8211c6f29c120ab6cade2f51dee8f9bf"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODYyNDQ0OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareServiceAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODowNDozMVrOGVoQ-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODo1OTo0OFrOGVqLOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzMjk4Ng==", "bodyText": "I'm a little confused here, will this undelete the specified share with the name of this share client? I'm guessing this will 409 if we already recreated a share with the delete name because you should rename the share instead?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11101#discussion_r425332986", "createdAt": "2020-05-14T18:04:31Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareServiceAsyncClient.java", "diffHunk": "@@ -534,4 +538,64 @@ public String generateAccountSas(AccountSasSignatureValues accountSasSignatureVa\n         return new AccountSasImplUtil(accountSasSignatureValues)\n             .generateSas(SasImplUtils.extractSharedKeyCredential(getHttpPipeline()));\n     }\n+\n+    /**\n+     * Restores a previously deleted share.\n+     * If the share associated with provided <code>deletedShareName</code>\n+     * already exists, this call will result in a 409 (conflict).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0addd7ef8211c6f29c120ab6cade2f51dee8f9bf"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM2NDI4Mg==", "bodyText": "This API is on ShareServiceAsyncClient a level up from ShareAsyncClient (to have parity with outcome of this discussion #10900 (comment) for blobs). Therefore deletedShareName is the only source of name for restored share. So, if someone created new (or already undeleted) share with same name as deletedShareName then restore fails as name is already taken.\nThe option to rename share while undeleting is not part of this PR due to server side not being ready to release it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11101#discussion_r425364282", "createdAt": "2020-05-14T18:59:48Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareServiceAsyncClient.java", "diffHunk": "@@ -534,4 +538,64 @@ public String generateAccountSas(AccountSasSignatureValues accountSasSignatureVa\n         return new AccountSasImplUtil(accountSasSignatureValues)\n             .generateSas(SasImplUtils.extractSharedKeyCredential(getHttpPipeline()));\n     }\n+\n+    /**\n+     * Restores a previously deleted share.\n+     * If the share associated with provided <code>deletedShareName</code>\n+     * already exists, this call will result in a 409 (conflict).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzMjk4Ng=="}, "originalCommit": {"oid": "0addd7ef8211c6f29c120ab6cade2f51dee8f9bf"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODYzMzkxOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/samples/java/com/azure/storage/file/share/ShareServiceAsyncJavaDocCodeSamples.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODowNzoxMFrOGVoXGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTowNDo1MlrOGVqWNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzNDU1Mg==", "bodyText": "No need for .then().\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ).then().block();\n          \n          \n            \n                    ).block();", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11101#discussion_r425334552", "createdAt": "2020-05-14T18:07:10Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-file-share/src/samples/java/com/azure/storage/file/share/ShareServiceAsyncJavaDocCodeSamples.java", "diffHunk": "@@ -286,4 +288,41 @@ public void generateAccountSas() {\n         String sas = fileServiceAsyncClient.generateAccountSas(sasValues);\n         // END: com.azure.storage.file.share.ShareServiceAsyncClient.generateAccountSas#AccountSasSignatureValues\n     }\n+\n+    /**\n+     * Code snippet for {@link ShareServiceAsyncClient#undeleteShare(String, String)}.\n+     */\n+    public void undeleteShare() {\n+        ShareServiceAsyncClient fileServiceAsyncClient = createAsyncClientWithSASToken();\n+        // BEGIN: com.azure.storage.file.share.ShareServiceAsyncClient.undeleteShare#String-String\n+        ListSharesOptions listSharesOptions = new ListSharesOptions();\n+        listSharesOptions.setIncludeDeleted(true);\n+        fileServiceAsyncClient.listShares(listSharesOptions).flatMap(\n+            deletedShare -> {\n+                Mono<ShareAsyncClient> shareAsyncClient = fileServiceAsyncClient.undeleteShare(\n+                    deletedShare.getName(), deletedShare.getVersion());\n+                return shareAsyncClient;\n+            }\n+        ).then().block();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0addd7ef8211c6f29c120ab6cade2f51dee8f9bf"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM2NzA5Mg==", "bodyText": "it's a collection (aka Flux) . I can do blockFirst()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11101#discussion_r425367092", "createdAt": "2020-05-14T19:04:52Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-file-share/src/samples/java/com/azure/storage/file/share/ShareServiceAsyncJavaDocCodeSamples.java", "diffHunk": "@@ -286,4 +288,41 @@ public void generateAccountSas() {\n         String sas = fileServiceAsyncClient.generateAccountSas(sasValues);\n         // END: com.azure.storage.file.share.ShareServiceAsyncClient.generateAccountSas#AccountSasSignatureValues\n     }\n+\n+    /**\n+     * Code snippet for {@link ShareServiceAsyncClient#undeleteShare(String, String)}.\n+     */\n+    public void undeleteShare() {\n+        ShareServiceAsyncClient fileServiceAsyncClient = createAsyncClientWithSASToken();\n+        // BEGIN: com.azure.storage.file.share.ShareServiceAsyncClient.undeleteShare#String-String\n+        ListSharesOptions listSharesOptions = new ListSharesOptions();\n+        listSharesOptions.setIncludeDeleted(true);\n+        fileServiceAsyncClient.listShares(listSharesOptions).flatMap(\n+            deletedShare -> {\n+                Mono<ShareAsyncClient> shareAsyncClient = fileServiceAsyncClient.undeleteShare(\n+                    deletedShare.getName(), deletedShare.getVersion());\n+                return shareAsyncClient;\n+            }\n+        ).then().block();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzNDU1Mg=="}, "originalCommit": {"oid": "0addd7ef8211c6f29c120ab6cade2f51dee8f9bf"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODYzOTQyOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/samples/java/com/azure/storage/file/share/ShareServiceAsyncJavaDocCodeSamples.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODowODo0N1rOGVoavw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODo0ODoxN1rOGVpxbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzNTQ4Nw==", "bodyText": "Are we guessing that the common pattern will be to list deleted shares to undelete them?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11101#discussion_r425335487", "createdAt": "2020-05-14T18:08:47Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-file-share/src/samples/java/com/azure/storage/file/share/ShareServiceAsyncJavaDocCodeSamples.java", "diffHunk": "@@ -286,4 +288,41 @@ public void generateAccountSas() {\n         String sas = fileServiceAsyncClient.generateAccountSas(sasValues);\n         // END: com.azure.storage.file.share.ShareServiceAsyncClient.generateAccountSas#AccountSasSignatureValues\n     }\n+\n+    /**\n+     * Code snippet for {@link ShareServiceAsyncClient#undeleteShare(String, String)}.\n+     */\n+    public void undeleteShare() {\n+        ShareServiceAsyncClient fileServiceAsyncClient = createAsyncClientWithSASToken();\n+        // BEGIN: com.azure.storage.file.share.ShareServiceAsyncClient.undeleteShare#String-String\n+        ListSharesOptions listSharesOptions = new ListSharesOptions();\n+        listSharesOptions.setIncludeDeleted(true);\n+        fileServiceAsyncClient.listShares(listSharesOptions).flatMap(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0addd7ef8211c6f29c120ab6cade2f51dee8f9bf"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NzY3OQ==", "bodyText": "Correct. We need two things to undelete a share - name and version. Listing API is the only way to obtain version.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11101#discussion_r425357679", "createdAt": "2020-05-14T18:48:17Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-file-share/src/samples/java/com/azure/storage/file/share/ShareServiceAsyncJavaDocCodeSamples.java", "diffHunk": "@@ -286,4 +288,41 @@ public void generateAccountSas() {\n         String sas = fileServiceAsyncClient.generateAccountSas(sasValues);\n         // END: com.azure.storage.file.share.ShareServiceAsyncClient.generateAccountSas#AccountSasSignatureValues\n     }\n+\n+    /**\n+     * Code snippet for {@link ShareServiceAsyncClient#undeleteShare(String, String)}.\n+     */\n+    public void undeleteShare() {\n+        ShareServiceAsyncClient fileServiceAsyncClient = createAsyncClientWithSASToken();\n+        // BEGIN: com.azure.storage.file.share.ShareServiceAsyncClient.undeleteShare#String-String\n+        ListSharesOptions listSharesOptions = new ListSharesOptions();\n+        listSharesOptions.setIncludeDeleted(true);\n+        fileServiceAsyncClient.listShares(listSharesOptions).flatMap(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzNTQ4Nw=="}, "originalCommit": {"oid": "0addd7ef8211c6f29c120ab6cade2f51dee8f9bf"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODY1MTU4OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/test/java/com/azure/storage/file/share/FileServiceAPITests.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODoxMjoyMVrOGVoihQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODo1MjozMFrOGVp6pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzNzQ3Nw==", "bodyText": "We should probably continue to maintain prefixes in cases where there is stale testing data. I know this has been an issue in the past which caused flakiness in tests.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11101#discussion_r425337477", "createdAt": "2020-05-14T18:12:21Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-file-share/src/test/java/com/azure/storage/file/share/FileServiceAPITests.groovy", "diffHunk": "@@ -108,38 +112,46 @@ class FileServiceAPITests extends APISpec {\n     def \"List shares with filter\"() {\n         given:\n         LinkedList<ShareItem> testShares = new LinkedList<>()\n-        for (int i = 0; i < 3; i++) {\n+        options.setPrefix(shareName)\n+        for (int i = 0; i < 4; i++) {\n             ShareItem share = new ShareItem().setProperties(new ShareProperties().setQuota(i + 1)).setName(shareName + i)\n             if (i == 2) {\n                 share.setMetadata(testMetadata)\n             }\n \n             testShares.add(share)\n             primaryFileServiceClient.createShareWithResponse(share.getName(), share.getMetadata(), share.getProperties().getQuota(), null, null)\n+\n+            if (i == 3) {\n+                share.getProperties().setDeletedTime(OffsetDateTime.now())\n+                primaryFileServiceClient.deleteShare(share.getName())\n+            }\n         }\n \n         when:\n         def shares = primaryFileServiceClient.listShares(options, null, null).iterator()\n \n         then:\n         for (int i = 0; i < limits; i++) {\n-            FileTestHelper.assertSharesAreEqual(testShares.pop(), shares.next(), includeMetadata, includeSnapshot)\n+            FileTestHelper.assertSharesAreEqual(testShares.pop(), shares.next(), includeMetadata, includeSnapshot, includeDeleted)\n         }\n-        !shares.hasNext()\n+        includeDeleted || !shares.hasNext()\n \n         where:\n-        options                                                                                                | limits | includeMetadata | includeSnapshot\n-        new ListSharesOptions().setPrefix(\"fileserviceapitestslistshareswithfilter\")                           | 3      | false           | true\n-        new ListSharesOptions().setPrefix(\"fileserviceapitestslistshareswithfilter\").setIncludeMetadata(true)  | 3      | true            | true\n-        new ListSharesOptions().setPrefix(\"fileserviceapitestslistshareswithfilter\").setIncludeMetadata(false) | 3      | false           | true\n-        new ListSharesOptions().setPrefix(\"fileserviceapitestslistshareswithfilter\").setMaxResultsPerPage(2)   | 3      | false           | true\n+        options                                           | limits | includeMetadata | includeSnapshot | includeDeleted\n+        new ListSharesOptions()                           | 3      | false           | true            | false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0addd7ef8211c6f29c120ab6cade2f51dee8f9bf"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM2MDAzNw==", "bodyText": "The prefix is maintained. It just set in given clause instead of hardcoding.\nWe do this : options.setPrefix(shareName) where shareName is coming from shareName = testResourceName.randomName(methodName, 60) in the setup().\nThis had to be changed to include some randomness in search prefix because share with softdelete enabled actually accumulates stale data for some time (i.e. 1 day).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11101#discussion_r425360037", "createdAt": "2020-05-14T18:52:30Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-file-share/src/test/java/com/azure/storage/file/share/FileServiceAPITests.groovy", "diffHunk": "@@ -108,38 +112,46 @@ class FileServiceAPITests extends APISpec {\n     def \"List shares with filter\"() {\n         given:\n         LinkedList<ShareItem> testShares = new LinkedList<>()\n-        for (int i = 0; i < 3; i++) {\n+        options.setPrefix(shareName)\n+        for (int i = 0; i < 4; i++) {\n             ShareItem share = new ShareItem().setProperties(new ShareProperties().setQuota(i + 1)).setName(shareName + i)\n             if (i == 2) {\n                 share.setMetadata(testMetadata)\n             }\n \n             testShares.add(share)\n             primaryFileServiceClient.createShareWithResponse(share.getName(), share.getMetadata(), share.getProperties().getQuota(), null, null)\n+\n+            if (i == 3) {\n+                share.getProperties().setDeletedTime(OffsetDateTime.now())\n+                primaryFileServiceClient.deleteShare(share.getName())\n+            }\n         }\n \n         when:\n         def shares = primaryFileServiceClient.listShares(options, null, null).iterator()\n \n         then:\n         for (int i = 0; i < limits; i++) {\n-            FileTestHelper.assertSharesAreEqual(testShares.pop(), shares.next(), includeMetadata, includeSnapshot)\n+            FileTestHelper.assertSharesAreEqual(testShares.pop(), shares.next(), includeMetadata, includeSnapshot, includeDeleted)\n         }\n-        !shares.hasNext()\n+        includeDeleted || !shares.hasNext()\n \n         where:\n-        options                                                                                                | limits | includeMetadata | includeSnapshot\n-        new ListSharesOptions().setPrefix(\"fileserviceapitestslistshareswithfilter\")                           | 3      | false           | true\n-        new ListSharesOptions().setPrefix(\"fileserviceapitestslistshareswithfilter\").setIncludeMetadata(true)  | 3      | true            | true\n-        new ListSharesOptions().setPrefix(\"fileserviceapitestslistshareswithfilter\").setIncludeMetadata(false) | 3      | false           | true\n-        new ListSharesOptions().setPrefix(\"fileserviceapitestslistshareswithfilter\").setMaxResultsPerPage(2)   | 3      | false           | true\n+        options                                           | limits | includeMetadata | includeSnapshot | includeDeleted\n+        new ListSharesOptions()                           | 3      | false           | true            | false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzNzQ3Nw=="}, "originalCommit": {"oid": "0addd7ef8211c6f29c120ab6cade2f51dee8f9bf"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODY1NDUxOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/test/java/com/azure/storage/file/share/FileServiceAPITests.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODoxMzowN1rOGVokTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODo1MzoxOVrOGVp8aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzNzkzMg==", "bodyText": "I believe there is a utility method in APISpec that does this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11101#discussion_r425337932", "createdAt": "2020-05-14T18:13:07Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-file-share/src/test/java/com/azure/storage/file/share/FileServiceAPITests.groovy", "diffHunk": "@@ -235,4 +252,60 @@ class FileServiceAPITests extends APISpec {\n         INVALID_ALLOWED_ORIGIN | 400        | ShareErrorCode.INVALID_XML_DOCUMENT\n         INVALID_ALLOWED_METHOD | 400        | ShareErrorCode.INVALID_XML_NODE_VALUE\n     }\n+\n+    def \"Restore share min\"() {\n+        given:\n+        def shareClient = primaryFileServiceClient.getShareClient(generateShareName())\n+        shareClient.create()\n+        def fileName = generatePathName()\n+        shareClient.getFileClient(fileName).create(2)\n+        shareClient.delete()\n+        if (TestMode.PLAYBACK != getTestMode()) {\n+            Thread.sleep(30000)\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0addd7ef8211c6f29c120ab6cade2f51dee8f9bf"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM2MDQ5MQ==", "bodyText": "I've seen that in blobs but not in shares. I'll double check and add if missing.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11101#discussion_r425360491", "createdAt": "2020-05-14T18:53:19Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-file-share/src/test/java/com/azure/storage/file/share/FileServiceAPITests.groovy", "diffHunk": "@@ -235,4 +252,60 @@ class FileServiceAPITests extends APISpec {\n         INVALID_ALLOWED_ORIGIN | 400        | ShareErrorCode.INVALID_XML_DOCUMENT\n         INVALID_ALLOWED_METHOD | 400        | ShareErrorCode.INVALID_XML_NODE_VALUE\n     }\n+\n+    def \"Restore share min\"() {\n+        given:\n+        def shareClient = primaryFileServiceClient.getShareClient(generateShareName())\n+        shareClient.create()\n+        def fileName = generatePathName()\n+        shareClient.getFileClient(fileName).create(2)\n+        shareClient.delete()\n+        if (TestMode.PLAYBACK != getTestMode()) {\n+            Thread.sleep(30000)\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzNzkzMg=="}, "originalCommit": {"oid": "0addd7ef8211c6f29c120ab6cade2f51dee8f9bf"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODY1NTM2OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/test/java/com/azure/storage/file/share/FileServiceAPITests.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODoxMzoyMVrOGVokzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODoxMzoyMVrOGVokzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzODA2Mw==", "bodyText": "Same comment.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11101#discussion_r425338063", "createdAt": "2020-05-14T18:13:21Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-file-share/src/test/java/com/azure/storage/file/share/FileServiceAPITests.groovy", "diffHunk": "@@ -235,4 +252,60 @@ class FileServiceAPITests extends APISpec {\n         INVALID_ALLOWED_ORIGIN | 400        | ShareErrorCode.INVALID_XML_DOCUMENT\n         INVALID_ALLOWED_METHOD | 400        | ShareErrorCode.INVALID_XML_NODE_VALUE\n     }\n+\n+    def \"Restore share min\"() {\n+        given:\n+        def shareClient = primaryFileServiceClient.getShareClient(generateShareName())\n+        shareClient.create()\n+        def fileName = generatePathName()\n+        shareClient.getFileClient(fileName).create(2)\n+        shareClient.delete()\n+        if (TestMode.PLAYBACK != getTestMode()) {\n+            Thread.sleep(30000)\n+        }\n+        def shareItem = primaryFileServiceClient.listShares(\n+            new ListSharesOptions()\n+                .setPrefix(shareClient.getShareName())\n+                .setIncludeDeleted(true),\n+            null, Context.NONE).first()\n+\n+        when:\n+        def restoredShareClient = primaryFileServiceClient.undeleteShare(shareItem.getName(), shareItem.getVersion())\n+\n+        then:\n+        restoredShareClient.getFileClient(fileName).exists()\n+    }\n+\n+    def \"Restore share max\"() {\n+        given:\n+        def shareClient = primaryFileServiceClient.getShareClient(generateShareName())\n+        shareClient.create()\n+        def fileName = generatePathName()\n+        shareClient.getFileClient(fileName).create(2)\n+        shareClient.delete()\n+        if (TestMode.PLAYBACK != getTestMode()) {\n+            Thread.sleep(30000)\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0addd7ef8211c6f29c120ab6cade2f51dee8f9bf"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODY2NDI5OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/test/java/com/azure/storage/file/share/FileServiceAsyncAPITests.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODoxNTo1OFrOGVoqlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODoxNTo1OFrOGVoqlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzOTU0MA==", "bodyText": "I would break this into two parts.\n\nCreate the resources need using a block (or StepVerifier, either works).\nThen use sleep if record before going into when.\n\nRight now this feels that setup contains setup and when logic.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11101#discussion_r425339540", "createdAt": "2020-05-14T18:15:58Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-file-share/src/test/java/com/azure/storage/file/share/FileServiceAsyncAPITests.groovy", "diffHunk": "@@ -266,4 +272,69 @@ class FileServiceAsyncAPITests extends APISpec {\n         INVALID_ALLOWED_METHOD | 400        | ShareErrorCode.INVALID_XML_NODE_VALUE\n \n     }\n+\n+    def \"Restore share min\"() {\n+        given:\n+        def shareClient = primaryFileServiceAsyncClient.getShareAsyncClient(generateShareName())\n+        def fileName = generatePathName()\n+        def delay = TestMode.PLAYBACK == getTestMode() ? 0L : 30000L\n+        def shareItemMono = shareClient.create()\n+            .then(shareClient.getFileClient(fileName).create(2))\n+            .then(shareClient.delete())\n+            .then(Mono.delay(Duration.ofMillis(delay)))\n+            .then(primaryFileServiceAsyncClient.listShares(\n+                new ListSharesOptions()\n+                    .setPrefix(shareClient.getShareName())\n+                    .setIncludeDeleted(true)).next())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0addd7ef8211c6f29c120ab6cade2f51dee8f9bf"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTYyMzQ1OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareServiceAsyncClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDowMzo1OVrOGVyItw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMzo0Njo0N1rOGV1hzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5NDcxMQ==", "bodyText": "The rest docs seem to suggest you can rename the share like you can for containers. Is that no longer true? Or is the swagger not accurate?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11101#discussion_r425494711", "createdAt": "2020-05-15T00:03:59Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareServiceAsyncClient.java", "diffHunk": "@@ -534,4 +538,74 @@ public String generateAccountSas(AccountSasSignatureValues accountSasSignatureVa\n         return new AccountSasImplUtil(accountSasSignatureValues)\n             .generateSas(SasImplUtils.extractSharedKeyCredential(getHttpPipeline()));\n     }\n+\n+    /**\n+     * Restores a previously deleted share.\n+     * <p>\n+     * If the share associated with provided <code>deletedShareName</code>\n+     * already exists, this call will result in a 409 (conflict).\n+     * </p>\n+     * <p>\n+     * This API is only functional if Share Soft Delete is enabled\n+     * for the storage account associated with the share.\n+     * For more information, see the\n+     * <a href=\"TBD\">Azure Docs</a>.\n+     * </p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.share.ShareServiceAsyncClient.undeleteShare#String-String}\n+     *\n+     * @param deletedShareName The name of the previously deleted share.\n+     * @param deletedShareVersion The version of the previously deleted share.\n+     * @return A {@link Mono} containing a {@link ShareAsyncClient} used\n+     * to interact with the restored share.\n+     */\n+    // TODO (kasobol-msft) add link to REST API docs\n+    public Mono<ShareAsyncClient> undeleteShare(\n+        String deletedShareName, String deletedShareVersion) {\n+        return this.undeleteShareWithResponse(deletedShareName, deletedShareVersion).flatMap(FluxUtil::toMono);\n+    }\n+\n+    /**\n+     * Restores a previously deleted share.\n+     * <p>\n+     * If the share associated with provided <code>deletedShareName</code>\n+     * already exists, this call will result in a 409 (conflict).\n+     * </p>\n+     * <p>\n+     * This API is only functional if Share Soft Delete is enabled\n+     * for the storage account associated with the share.\n+     * For more information, see the\n+     * <a href=\"TBD\">Azure Docs</a>.\n+     * </p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.share.ShareServiceAsyncClient.undeleteShareWithResponse#String-String}\n+     *\n+     * @param deletedShareName The name of the previously deleted share.\n+     * @param deletedShareVersion The version of the previously deleted share.\n+     * @return A {@link Mono} containing a {@link Response} whose {@link Response#getValue() value} contains a {@link\n+     * ShareAsyncClient} used to interact with the restored share.\n+     */\n+    // TODO (kasobol-msft) add link to REST API docs\n+    public Mono<Response<ShareAsyncClient>> undeleteShareWithResponse(\n+        String deletedShareName, String deletedShareVersion) {\n+        try {\n+            return withContext(context ->\n+                undeleteShareWithResponse(\n+                    deletedShareName, deletedShareVersion, context));\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    Mono<Response<ShareAsyncClient>> undeleteShareWithResponse(\n+        String deletedShareName, String deletedShareVersion, Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05678851176f1ad102e3a82ad77e045675d882a2"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU1MDI4Nw==", "bodyText": "Yeah they do. However, for shares, that option won't be in stg73 but later.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11101#discussion_r425550287", "createdAt": "2020-05-15T03:46:47Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareServiceAsyncClient.java", "diffHunk": "@@ -534,4 +538,74 @@ public String generateAccountSas(AccountSasSignatureValues accountSasSignatureVa\n         return new AccountSasImplUtil(accountSasSignatureValues)\n             .generateSas(SasImplUtils.extractSharedKeyCredential(getHttpPipeline()));\n     }\n+\n+    /**\n+     * Restores a previously deleted share.\n+     * <p>\n+     * If the share associated with provided <code>deletedShareName</code>\n+     * already exists, this call will result in a 409 (conflict).\n+     * </p>\n+     * <p>\n+     * This API is only functional if Share Soft Delete is enabled\n+     * for the storage account associated with the share.\n+     * For more information, see the\n+     * <a href=\"TBD\">Azure Docs</a>.\n+     * </p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.share.ShareServiceAsyncClient.undeleteShare#String-String}\n+     *\n+     * @param deletedShareName The name of the previously deleted share.\n+     * @param deletedShareVersion The version of the previously deleted share.\n+     * @return A {@link Mono} containing a {@link ShareAsyncClient} used\n+     * to interact with the restored share.\n+     */\n+    // TODO (kasobol-msft) add link to REST API docs\n+    public Mono<ShareAsyncClient> undeleteShare(\n+        String deletedShareName, String deletedShareVersion) {\n+        return this.undeleteShareWithResponse(deletedShareName, deletedShareVersion).flatMap(FluxUtil::toMono);\n+    }\n+\n+    /**\n+     * Restores a previously deleted share.\n+     * <p>\n+     * If the share associated with provided <code>deletedShareName</code>\n+     * already exists, this call will result in a 409 (conflict).\n+     * </p>\n+     * <p>\n+     * This API is only functional if Share Soft Delete is enabled\n+     * for the storage account associated with the share.\n+     * For more information, see the\n+     * <a href=\"TBD\">Azure Docs</a>.\n+     * </p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.share.ShareServiceAsyncClient.undeleteShareWithResponse#String-String}\n+     *\n+     * @param deletedShareName The name of the previously deleted share.\n+     * @param deletedShareVersion The version of the previously deleted share.\n+     * @return A {@link Mono} containing a {@link Response} whose {@link Response#getValue() value} contains a {@link\n+     * ShareAsyncClient} used to interact with the restored share.\n+     */\n+    // TODO (kasobol-msft) add link to REST API docs\n+    public Mono<Response<ShareAsyncClient>> undeleteShareWithResponse(\n+        String deletedShareName, String deletedShareVersion) {\n+        try {\n+            return withContext(context ->\n+                undeleteShareWithResponse(\n+                    deletedShareName, deletedShareVersion, context));\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    Mono<Response<ShareAsyncClient>> undeleteShareWithResponse(\n+        String deletedShareName, String deletedShareVersion, Context context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5NDcxMQ=="}, "originalCommit": {"oid": "05678851176f1ad102e3a82ad77e045675d882a2"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4244, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}