{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4OTc3MDE1", "number": 12478, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjo1NTozNFrOEJM38w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjowNzoxM1rOEJR1ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDgzNTcxOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjo1NTozNFrOGpoBlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjo1NTozNFrOGpoBlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwMDU2NQ==", "bodyText": "sourceUrl -> invalidSourceUrl", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12478#discussion_r446300565", "createdAt": "2020-06-26T16:55:34Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientTest.java", "diffHunk": "@@ -167,8 +170,12 @@ public void recognizeReceiptDataTextDetails(HttpClient httpClient, FormRecognize\n     @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n     public void recognizeReceiptInvalidSourceUrl(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n         client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n-        invalidSourceUrlRunner((sourceUrl) -> assertThrows(ErrorResponseException.class,\n-            () -> client.beginRecognizeReceiptsFromUrl(sourceUrl).getSyncPoller()));\n+        invalidSourceUrlRunner((sourceUrl) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4dfceb5c739a931db35d78fea25d6aa577a3c7c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTY0ODQyOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/implementation/Utility.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjowNzoxM1rOGpwAlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMzoyMDo0M1rOGpxGTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzMTM4Mg==", "bodyText": "@srnagar Does this seem like something we would want the autorest to be doing for the client ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12478#discussion_r446431382", "createdAt": "2020-06-26T22:07:13Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/implementation/Utility.java", "diffHunk": "@@ -187,4 +190,21 @@ Pair readBytes(int cnt) {\n             return this;\n         }\n     }\n+\n+    /**\n+     * Mapping a {@link ErrorResponseException} to {@link HttpResponseException} if exist. Otherwise, return\n+     * original {@link Throwable}.\n+     *\n+     * @param throwable A {@link Throwable}.\n+     * @return A {@link HttpResponseException} or the original throwable type.\n+     */\n+    public static Throwable mapToHttpResponseExceptionIfExist(Throwable throwable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c620abd02aecd7517ff264be9d324119aa3864a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzNTI3Mg==", "bodyText": "Yes, I think it is better to define in swagger or make it configurable on swagger readme. Search has the same problem.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12478#discussion_r446435272", "createdAt": "2020-06-26T22:21:46Z", "author": {"login": "sima-zhu"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/implementation/Utility.java", "diffHunk": "@@ -187,4 +190,21 @@ Pair readBytes(int cnt) {\n             return this;\n         }\n     }\n+\n+    /**\n+     * Mapping a {@link ErrorResponseException} to {@link HttpResponseException} if exist. Otherwise, return\n+     * original {@link Throwable}.\n+     *\n+     * @param throwable A {@link Throwable}.\n+     * @return A {@link HttpResponseException} or the original throwable type.\n+     */\n+    public static Throwable mapToHttpResponseExceptionIfExist(Throwable throwable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzMTM4Mg=="}, "originalCommit": {"oid": "8c620abd02aecd7517ff264be9d324119aa3864a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0OTIzMQ==", "bodyText": "AutoRest will always provide the most specific error response. It's for the convenience layer to determine if it should be converted to a more generic exception type.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12478#discussion_r446449231", "createdAt": "2020-06-26T23:20:43Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/implementation/Utility.java", "diffHunk": "@@ -187,4 +190,21 @@ Pair readBytes(int cnt) {\n             return this;\n         }\n     }\n+\n+    /**\n+     * Mapping a {@link ErrorResponseException} to {@link HttpResponseException} if exist. Otherwise, return\n+     * original {@link Throwable}.\n+     *\n+     * @param throwable A {@link Throwable}.\n+     * @return A {@link HttpResponseException} or the original throwable type.\n+     */\n+    public static Throwable mapToHttpResponseExceptionIfExist(Throwable throwable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzMTM4Mg=="}, "originalCommit": {"oid": "8c620abd02aecd7517ff264be9d324119aa3864a"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3729, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}