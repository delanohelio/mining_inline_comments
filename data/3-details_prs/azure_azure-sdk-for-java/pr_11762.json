{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NTc1MTA2", "number": 11762, "title": "Cosmos: CFP and Permission fixes and code refactoring", "bodyText": "Add checks on the lease container client context to ensure that content response on write is enabled and warn if consistency level is lesser than SESSION.\nUpdate Cosmos permission properties and replace setResourceLink() APIs. Added APIs require passing the container name and optionally the child resource for which the permissions will be granted.", "createdAt": "2020-06-04T04:07:41Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11762", "merged": true, "mergeCommit": {"oid": "b953d8e529edcd71ca551d1ac267017877171965"}, "closed": true, "closedAt": "2020-06-05T00:39:38Z", "author": {"login": "milismsft"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnls_7AH2gAyNDI3NTc1MTA2OmI2NTc5MzZlNzgwN2ZhOTY5MTNiMmMyYWM3MzZhZDk3MjI0ZjhlNzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoGf96AFqTQyNDg5NzM5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b657936e7807fa96913b2c2ac736ad97224f8e74", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b657936e7807fa96913b2c2ac736ad97224f8e74", "committedDate": "2020-06-03T09:04:46Z", "message": "Add checks on the lease container client context to ensure that content response on write is enabled and warn if consistency level is lesser than SESSION."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "306bd5d8c4912f9f4a02c413e89601fb29079dc1", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/306bd5d8c4912f9f4a02c413e89601fb29079dc1", "committedDate": "2020-06-04T04:04:08Z", "message": "Update Cosmos permission properties and replace setResourceLink() APIs. Added APIs require passing the container name and optionally the child resource for which the permissions will be granted."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b147bda12301a301599e256495815f9d44f69694", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b147bda12301a301599e256495815f9d44f69694", "committedDate": "2020-06-04T16:23:49Z", "message": "Fix for spot-bug issue and extend create test to capture the new permission properties APIs."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NjI5NTMy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11762#pullrequestreview-424629532", "createdAt": "2020-06-04T16:33:35Z", "commit": {"oid": "b147bda12301a301599e256495815f9d44f69694"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjozMzozNVrOGfOUfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzowNzo1M1rOGfPmzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM5MzY2Mg==", "bodyText": "All of these instance variables should be private", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11762#discussion_r435393662", "createdAt": "2020-06-04T16:33:35Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosPermissionProperties.java", "diffHunk": "@@ -15,26 +17,36 @@\n public final class CosmosPermissionProperties {\n \n     private Permission permission;\n-    static List<CosmosPermissionProperties> getFromV2Results(List<Permission> results) {\n-        return results.stream().map(permission -> new CosmosPermissionProperties(permission.toJson()))\n-                   .collect(Collectors.toList());\n-    }\n+    String databaseName;\n+    String resourceToken;\n+\n+    String permissionName;\n+    String containerName;\n+    String resourceName;\n+    CosmosContainerChildResourceKind resourceKind;\n+    PermissionMode permissionMode;\n+    PartitionKey resourcePartitionKey;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b147bda12301a301599e256495815f9d44f69694"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwOTkzNg==", "bodyText": "I thought we need to throw error in this case, as CFP will not work in consistency below SESSION, no ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11762#discussion_r435409936", "createdAt": "2020-06-04T16:59:43Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java", "diffHunk": "@@ -308,16 +312,26 @@ public ChangeFeedProcessorBuilderImpl withCollectionResourceId(String collection\n     /**\n      * Sets an existing {@link CosmosAsyncContainer} to be used to read from the leases collection.\n      *\n-     * @param leaseDocumentClient the instance of {@link CosmosAsyncContainer} to use.\n+     * @param leaseClient the instance of {@link CosmosAsyncContainer} to use.\n      * @return current Builder.\n      */\n     @Override\n-    public ChangeFeedProcessorBuilderImpl leaseContainer(CosmosAsyncContainer leaseDocumentClient) {\n-        if (leaseDocumentClient == null) {\n-            throw new IllegalArgumentException(\"leaseContextClient\");\n+    public ChangeFeedProcessorBuilderImpl leaseContainer(CosmosAsyncContainer leaseClient) {\n+        if (leaseClient == null) {\n+            throw new IllegalArgumentException(\"leaseClient\");\n+        }\n+\n+        if (!getContextClient(leaseClient).isContentResponseOnWriteEnabled()) {\n+            throw new IllegalArgumentException(\"leaseClient: content response on write setting must be enabled\");\n+        }\n+\n+        ConsistencyLevel consistencyLevel = getContextClient(leaseClient).getConsistencyLevel();\n+        if (consistencyLevel == ConsistencyLevel.CONSISTENT_PREFIX || consistencyLevel == ConsistencyLevel.EVENTUAL) {\n+            logger.warn(\"leaseClient consistency level setting are less then expected which is SESSION\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b147bda12301a301599e256495815f9d44f69694"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxMzkwNg==", "bodyText": "We have ResourceType and CosmosResourceType.\nShould we rename this to ContainerChildResourceType ?\n@kirankumarkolli  @moderakh  thoughts ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11762#discussion_r435413906", "createdAt": "2020-06-04T17:06:28Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosContainerChildResourceKind.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.models;\n+\n+/**\n+ * Specifies the kind of resource that has a Cosmos container as parent resource.\n+ */\n+public enum CosmosContainerChildResourceKind {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b147bda12301a301599e256495815f9d44f69694"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxNDczMg==", "bodyText": "Is the reason for this is because permission can only be initialized when we get response from backend?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11762#discussion_r435414732", "createdAt": "2020-06-04T17:07:53Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosPermissionProperties.java", "diffHunk": "@@ -15,26 +17,36 @@\n public final class CosmosPermissionProperties {\n \n     private Permission permission;\n-    static List<CosmosPermissionProperties> getFromV2Results(List<Permission> results) {\n-        return results.stream().map(permission -> new CosmosPermissionProperties(permission.toJson()))\n-                   .collect(Collectors.toList());\n-    }\n+    String databaseName;\n+    String resourceToken;\n+\n+    String permissionName;\n+    String containerName;\n+    String resourceName;\n+    CosmosContainerChildResourceKind resourceKind;\n+    PermissionMode permissionMode;\n+    PartitionKey resourcePartitionKey;\n \n     /**\n      * Initialize a permission object.\n      */\n     public CosmosPermissionProperties() {\n-        this.permission = new Permission();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b147bda12301a301599e256495815f9d44f69694"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NjY2Njc2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11762#pullrequestreview-424666676", "createdAt": "2020-06-04T17:20:55Z", "commit": {"oid": "b147bda12301a301599e256495815f9d44f69694"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzoyMDo1NVrOGfQELg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzozMzo1OVrOGfQjMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMjI1NA==", "bodyText": "The naming seems a bit odd to me. why can't we use the existing CosmosResourceType?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11762#discussion_r435422254", "createdAt": "2020-06-04T17:20:55Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosContainerChildResourceKind.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.models;\n+\n+/**\n+ * Specifies the kind of resource that has a Cosmos container as parent resource.\n+ */\n+public enum CosmosContainerChildResourceKind {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxMzkwNg=="}, "originalCommit": {"oid": "b147bda12301a301599e256495815f9d44f69694"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMzAwNQ==", "bodyText": "I think we should fail on these cases, logs may go unnoticed by user", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11762#discussion_r435423005", "createdAt": "2020-06-04T17:22:09Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java", "diffHunk": "@@ -308,16 +312,26 @@ public ChangeFeedProcessorBuilderImpl withCollectionResourceId(String collection\n     /**\n      * Sets an existing {@link CosmosAsyncContainer} to be used to read from the leases collection.\n      *\n-     * @param leaseDocumentClient the instance of {@link CosmosAsyncContainer} to use.\n+     * @param leaseClient the instance of {@link CosmosAsyncContainer} to use.\n      * @return current Builder.\n      */\n     @Override\n-    public ChangeFeedProcessorBuilderImpl leaseContainer(CosmosAsyncContainer leaseDocumentClient) {\n-        if (leaseDocumentClient == null) {\n-            throw new IllegalArgumentException(\"leaseContextClient\");\n+    public ChangeFeedProcessorBuilderImpl leaseContainer(CosmosAsyncContainer leaseClient) {\n+        if (leaseClient == null) {\n+            throw new IllegalArgumentException(\"leaseClient\");\n+        }\n+\n+        if (!getContextClient(leaseClient).isContentResponseOnWriteEnabled()) {\n+            throw new IllegalArgumentException(\"leaseClient: content response on write setting must be enabled\");\n+        }\n+\n+        ConsistencyLevel consistencyLevel = getContextClient(leaseClient).getConsistencyLevel();\n+        if (consistencyLevel == ConsistencyLevel.CONSISTENT_PREFIX || consistencyLevel == ConsistencyLevel.EVENTUAL) {\n+            logger.warn(\"leaseClient consistency level setting are less then expected which is SESSION\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwOTkzNg=="}, "originalCommit": {"oid": "b147bda12301a301599e256495815f9d44f69694"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyNDExOA==", "bodyText": "please use StringUtils.split instead of String.split\nString.split uses regex and is not performant", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11762#discussion_r435424118", "createdAt": "2020-06-04T17:24:08Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosPermissionProperties.java", "diffHunk": "@@ -45,25 +57,102 @@ public CosmosPermissionProperties setId(String id) {\n      */\n     CosmosPermissionProperties(String jsonString) {\n         this.permission = new Permission(jsonString);\n+        this.permissionName = permission.getId();\n+        this.permissionMode = permission.getPermissionMode();\n+        this.resourcePartitionKey = permission.getResourcePartitionKey();\n+        this.resourceToken = permission.getToken();\n+\n+        String[] parts = Utils.trimBeginningAndEndingSlashes(permission.getResourceLink()).split(\"/\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b147bda12301a301599e256495815f9d44f69694"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyNjc4MA==", "bodyText": "this is called setContainerName but in the test .setContainerName(\"AQAAAJ0fgTc=\") uses portion of the selflink.\nSo is this the container name or just a portion of the selflink?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11762#discussion_r435426780", "createdAt": "2020-06-04T17:28:19Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/PermissionCrudTest.java", "diffHunk": "@@ -44,15 +45,18 @@ public void createPermission() throws Exception {\n         CosmosPermissionProperties permissionSettings = new CosmosPermissionProperties()\n                 .setId(UUID.randomUUID().toString())\n                 .setPermissionMode(PermissionMode.READ)\n-                .setResourceLink(\"dbs/AQAAAA==/colls/AQAAAJ0fgTc=\");\n+                .setContainerName(\"AQAAAJ0fgTc=\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b147bda12301a301599e256495815f9d44f69694"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyNzc1NA==", "bodyText": "this is called containerName but in the test .setContainerName(\"AQAAAJ0fgTc=\") uses portion of the selflink.\nSo is this the container name or just a portion of the selflink?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11762#discussion_r435427754", "createdAt": "2020-06-04T17:30:00Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosPermissionProperties.java", "diffHunk": "@@ -45,25 +57,102 @@ public CosmosPermissionProperties setId(String id) {\n      */\n     CosmosPermissionProperties(String jsonString) {\n         this.permission = new Permission(jsonString);\n+        this.permissionName = permission.getId();\n+        this.permissionMode = permission.getPermissionMode();\n+        this.resourcePartitionKey = permission.getResourcePartitionKey();\n+        this.resourceToken = permission.getToken();\n+\n+        String[] parts = Utils.trimBeginningAndEndingSlashes(permission.getResourceLink()).split(\"/\");\n+\n+        if (parts.length < 4) {\n+            throw new IllegalArgumentException(\"jsonString\");\n+        }\n+\n+        this.databaseName = parts[1];\n+        this.containerName = parts[3];\n+\n+        if (parts.length >= 6) {\n+            this.resourceName = parts[5];\n+\n+            if (Paths.DOCUMENTS_PATH_SEGMENT.equalsIgnoreCase(parts[4])) {\n+                this.resourceKind = CosmosContainerChildResourceKind.ITEM;\n+            } else if (Paths.STORED_PROCEDURES_PATH_SEGMENT.equalsIgnoreCase(parts[4])) {\n+                this.resourceKind = CosmosContainerChildResourceKind.STORED_PROCEDURE;\n+            } else if (Paths.USER_DEFINED_FUNCTIONS_PATH_SEGMENT.equalsIgnoreCase(parts[4])) {\n+                this.resourceKind = CosmosContainerChildResourceKind.USER_DEFINED_FUNCTION;\n+            } else if (Paths.TRIGGERS_PATH_SEGMENT.equalsIgnoreCase(parts[4])) {\n+                this.resourceKind = CosmosContainerChildResourceKind.TRIGGER;\n+            } else {\n+                throw new IllegalArgumentException(\"jsonString\");\n+            }\n+        }\n     }\n \n     /**\n-     * Gets the self-link of resource to which the permission applies.\n+     * Sets the name of the Cosmos container as the parent resource which is associated with this permission object.\n      *\n-     * @return the resource link.\n+     * @param containerName the name of the Cosmos container representing the parent resource.\n+     * @return the current {@link CosmosPermissionProperties} object.\n      */\n-    public String getResourceLink() {\n-        return this.permission.getResourceLink();\n+    public CosmosPermissionProperties setContainerName(String containerName) {\n+        this.containerName = containerName;\n+\n+        // Following is required by permission replace (PUT) scenario.\n+        if (this.permission != null) {\n+            this.permission.setResourceLink(this.databaseName);\n+            this.resourceToken = null;\n+        }\n+\n+        return this;\n     }\n \n     /**\n-     * Sets the self-link of resource to which the permission applies.\n+     * Gets the name of the Cosmos container as the parent resource which is associated with this permission object.\n      *\n-     * @param resourceLink the resource link.\n-     * @return the current {@link CosmosPermissionProperties} object\n+     * @return the name of the Cosmos container representing the parent resource.\n+     */\n+    public String getContainerName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b147bda12301a301599e256495815f9d44f69694"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyODI4Mw==", "bodyText": "this is called withPermissionContainerName but in the test . withPermissionContainerName(\"AQAAAJ0fgTc=\") uses portion of the selflink.\nSo is this the container name or just a portion of the selflink?\nditto", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11762#discussion_r435428283", "createdAt": "2020-06-04T17:30:52Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/PermissionCrudTest.java", "diffHunk": "@@ -76,7 +80,7 @@ public void readPermission() throws Exception {\n         CosmosResponseValidator<CosmosPermissionResponse> validator = new CosmosResponseValidator.Builder<CosmosPermissionResponse>()\n                 .withId(permissionSettings.getId())\n                 .withPermissionMode(PermissionMode.READ)\n-                .withPermissionResourceLink(\"dbs/AQAAAA==/colls/AQAAAJ0fgTc=\")\n+                .withPermissionContainerName(\"AQAAAJ0fgTc=\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b147bda12301a301599e256495815f9d44f69694"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzMDE5NQ==", "bodyText": "can the logic in Utils be used to avoid redoing similar logic here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11762#discussion_r435430195", "createdAt": "2020-06-04T17:33:59Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosPermissionProperties.java", "diffHunk": "@@ -93,63 +189,138 @@ public CosmosPermissionProperties setPermissionMode(PermissionMode permissionMod\n      * @return the partition key.\n      */\n     public PartitionKey getResourcePartitionKey() {\n-        return this.permission.getResourcePartitionKey();\n+        return this.resourcePartitionKey;\n     }\n \n     /**\n      * Sets the resource partition key associated with this permission object.\n      *\n      * @param partitionKey the partition key.\n-     * @return the current {@link CosmosPermissionProperties} object\n+     * @return the current {@link CosmosPermissionProperties} object.\n      */\n     public CosmosPermissionProperties setResourcePartitionKey(PartitionKey partitionKey) {\n-        this.permission.setResourcePartitionKey(partitionKey);\n+        this.resourcePartitionKey = partitionKey;\n+\n+        // Following is required by permission replace (PUT) scenario.\n+        if (this.permission != null) {\n+            this.permission.setResourcePartitionKey(partitionKey);\n+            this.resourceToken = null;\n+        }\n+\n         return this;\n     }\n \n     Resource getResource() {\n         return this.permission;\n     }\n \n+    String getResourcePath(String databaseName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b147bda12301a301599e256495815f9d44f69694"}, "originalPosition": 224}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6964c0ba7252f99334210a73863f5f40ac9eeb56", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6964c0ba7252f99334210a73863f5f40ac9eeb56", "committedDate": "2020-06-04T18:13:50Z", "message": "Updates based on PR feedback."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NzIwODIz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11762#pullrequestreview-424720823", "createdAt": "2020-06-04T18:27:19Z", "commit": {"oid": "6964c0ba7252f99334210a73863f5f40ac9eeb56"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0ODk1MDIy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11762#pullrequestreview-424895022", "createdAt": "2020-06-04T23:10:36Z", "commit": {"oid": "b147bda12301a301599e256495815f9d44f69694"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzoxMDozNlrOGfa_BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzoxNDo1MVrOGfbEFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwMTE1Nw==", "bodyText": "I think this is intended to have jsonString not \"jsonString\" ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11762#discussion_r435601157", "createdAt": "2020-06-04T23:10:36Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosPermissionProperties.java", "diffHunk": "@@ -45,25 +57,102 @@ public CosmosPermissionProperties setId(String id) {\n      */\n     CosmosPermissionProperties(String jsonString) {\n         this.permission = new Permission(jsonString);\n+        this.permissionName = permission.getId();\n+        this.permissionMode = permission.getPermissionMode();\n+        this.resourcePartitionKey = permission.getResourcePartitionKey();\n+        this.resourceToken = permission.getToken();\n+\n+        String[] parts = Utils.trimBeginningAndEndingSlashes(permission.getResourceLink()).split(\"/\");\n+\n+        if (parts.length < 4) {\n+            throw new IllegalArgumentException(\"jsonString\");\n+        }\n+\n+        this.databaseName = parts[1];\n+        this.containerName = parts[3];\n+\n+        if (parts.length >= 6) {\n+            this.resourceName = parts[5];\n+\n+            if (Paths.DOCUMENTS_PATH_SEGMENT.equalsIgnoreCase(parts[4])) {\n+                this.resourceKind = CosmosContainerChildResourceKind.ITEM;\n+            } else if (Paths.STORED_PROCEDURES_PATH_SEGMENT.equalsIgnoreCase(parts[4])) {\n+                this.resourceKind = CosmosContainerChildResourceKind.STORED_PROCEDURE;\n+            } else if (Paths.USER_DEFINED_FUNCTIONS_PATH_SEGMENT.equalsIgnoreCase(parts[4])) {\n+                this.resourceKind = CosmosContainerChildResourceKind.USER_DEFINED_FUNCTION;\n+            } else if (Paths.TRIGGERS_PATH_SEGMENT.equalsIgnoreCase(parts[4])) {\n+                this.resourceKind = CosmosContainerChildResourceKind.TRIGGER;\n+            } else {\n+                throw new IllegalArgumentException(\"jsonString\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b147bda12301a301599e256495815f9d44f69694"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwMjQ1Mg==", "bodyText": "How about\nPathHelper#generatePathForNameBased()\nhttps://github.com/Azure/azure-sdk-for-java/blob/master/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/PathsHelper.java#L30\nThere are other useful methods there too. can they be used instead of duplicating the logic?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11762#discussion_r435602452", "createdAt": "2020-06-04T23:14:51Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosPermissionProperties.java", "diffHunk": "@@ -93,63 +189,138 @@ public CosmosPermissionProperties setPermissionMode(PermissionMode permissionMod\n      * @return the partition key.\n      */\n     public PartitionKey getResourcePartitionKey() {\n-        return this.permission.getResourcePartitionKey();\n+        return this.resourcePartitionKey;\n     }\n \n     /**\n      * Sets the resource partition key associated with this permission object.\n      *\n      * @param partitionKey the partition key.\n-     * @return the current {@link CosmosPermissionProperties} object\n+     * @return the current {@link CosmosPermissionProperties} object.\n      */\n     public CosmosPermissionProperties setResourcePartitionKey(PartitionKey partitionKey) {\n-        this.permission.setResourcePartitionKey(partitionKey);\n+        this.resourcePartitionKey = partitionKey;\n+\n+        // Following is required by permission replace (PUT) scenario.\n+        if (this.permission != null) {\n+            this.permission.setResourcePartitionKey(partitionKey);\n+            this.resourceToken = null;\n+        }\n+\n         return this;\n     }\n \n     Resource getResource() {\n         return this.permission;\n     }\n \n+    String getResourcePath(String databaseName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzMDE5NQ=="}, "originalCommit": {"oid": "b147bda12301a301599e256495815f9d44f69694"}, "originalPosition": 224}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0ODk3Mzkw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11762#pullrequestreview-424897390", "createdAt": "2020-06-04T23:17:24Z", "commit": {"oid": "6964c0ba7252f99334210a73863f5f40ac9eeb56"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3792, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}