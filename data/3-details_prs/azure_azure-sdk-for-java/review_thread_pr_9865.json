{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4NjUzNDgy", "number": 9865, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNzo0MzozM1rODutduA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNzo0OTo0MFrODutfxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMzA1OTc2OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNzo0MzozM1rOGAzdMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNzo0ODoxN1rOGAzfFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5NjI0Mw==", "bodyText": "This was discussed during review that instead of using tryTimeout, we should be using some default value 1 minute or less.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9865#discussion_r403496243", "createdAt": "2020-04-04T17:43:33Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -28,6 +28,8 @@\n  */\n @ServiceClient(builder = ServiceBusClientBuilder.class)\n public class ServiceBusReceiverClient implements AutoCloseable {\n+    private static final Duration DEFAULT_RECEIVE_WAIT_TIME = Duration.ofMinutes(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fec855e42ac4c183cc88f8d3c9a37b3bf7aae78"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5NjcyNA==", "bodyText": "The default AmqpRetryOptions has the timeout already set. This isn't necessary. Or if they pass their own default tryTimeout.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9865#discussion_r403496724", "createdAt": "2020-04-04T17:48:17Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -28,6 +28,8 @@\n  */\n @ServiceClient(builder = ServiceBusClientBuilder.class)\n public class ServiceBusReceiverClient implements AutoCloseable {\n+    private static final Duration DEFAULT_RECEIVE_WAIT_TIME = Duration.ofMinutes(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5NjI0Mw=="}, "originalCommit": {"oid": "0fec855e42ac4c183cc88f8d3c9a37b3bf7aae78"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMzA2NDgwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNzo0OToxNlrOGAzfqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNzo0OToxNlrOGAzfqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5Njg3NQ==", "bodyText": "To save duplicated logic, this method should call the maximal overload.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9865#discussion_r403496875", "createdAt": "2020-04-04T17:49:16Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -250,18 +252,47 @@ public ServiceBusReceivedMessage peekAt(long sequenceNumber) {\n     }\n \n     /**\n-     * Receives an iterable stream of {@link ServiceBusReceivedMessage messages} from the Service Bus entity. The\n+     * Receives an iterable stream of {@link ServiceBusReceivedMessage messages} from the Service Bus entity.\n+     * The receive operation will wait for a default 1 minute for receiving a message before it times out. You can it\n+     * override by using {@link #receive(int, Duration)}.\n      *\n      * @param maxMessages The maximum number of messages to receive.\n      * @return An {@link IterableStream} of at most {@code maxMessages} messages from the Service Bus entity.\n+     *\n+     * @throws IllegalArgumentException if {@code maxMessages} is zero or a negative value.\n      */\n     public IterableStream<ServiceBusReceivedMessage> receive(int maxMessages) {\n         if (maxMessages <= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fec855e42ac4c183cc88f8d3c9a37b3bf7aae78"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMzA2NTAxOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNzo0OTo0MFrOGAzfyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNzo0OTo0MFrOGAzfyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5NjkwNg==", "bodyText": "Possible NullPointerException if maxWaitTime is null", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9865#discussion_r403496906", "createdAt": "2020-04-04T17:49:40Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -250,18 +252,47 @@ public ServiceBusReceivedMessage peekAt(long sequenceNumber) {\n     }\n \n     /**\n-     * Receives an iterable stream of {@link ServiceBusReceivedMessage messages} from the Service Bus entity. The\n+     * Receives an iterable stream of {@link ServiceBusReceivedMessage messages} from the Service Bus entity.\n+     * The receive operation will wait for a default 1 minute for receiving a message before it times out. You can it\n+     * override by using {@link #receive(int, Duration)}.\n      *\n      * @param maxMessages The maximum number of messages to receive.\n      * @return An {@link IterableStream} of at most {@code maxMessages} messages from the Service Bus entity.\n+     *\n+     * @throws IllegalArgumentException if {@code maxMessages} is zero or a negative value.\n      */\n     public IterableStream<ServiceBusReceivedMessage> receive(int maxMessages) {\n         if (maxMessages <= 0) {\n             throw logger.logExceptionAsError(new IllegalArgumentException(\n                 \"'maxMessages' cannot be less than or equal to 0. maxMessages: \" + maxMessages));\n         }\n \n-        final Flux<ServiceBusReceivedMessage> messages = Flux.create(emitter -> queueWork(maxMessages, emitter));\n+        final Flux<ServiceBusReceivedMessage> messages = Flux.create(emitter -> queueWork(maxMessages,\n+            DEFAULT_RECEIVE_WAIT_TIME, emitter));\n+\n+        return new IterableStream<>(messages);\n+    }\n+\n+    /**\n+     * Receives an iterable stream of {@link ServiceBusReceivedMessage messages} from the Service Bus entity.\n+     *\n+     * @param maxMessages The maximum number of messages to receive.\n+     * @param maxWaitTime The time the client waits for receiving a message before it times out.\n+     * @return An {@link IterableStream} of at most {@code maxMessages} messages from the Service Bus entity.\n+     *\n+     * @throws IllegalArgumentException if {@code maxMessages} or {@code maxWaitTime} is zero or a negative value.\n+     */\n+    public IterableStream<ServiceBusReceivedMessage> receive(int maxMessages, Duration maxWaitTime) {\n+        if (maxMessages <= 0) {\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\n+                \"'maxMessages' cannot be less than or equal to 0. maxMessages: \" + maxMessages));\n+        } else if (maxWaitTime.isNegative() || maxWaitTime.isZero()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fec855e42ac4c183cc88f8d3c9a37b3bf7aae78"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1986, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}