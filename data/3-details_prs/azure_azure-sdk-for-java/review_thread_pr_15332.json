{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4ODU1NTE3", "number": 15332, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOToxNTowN1rOEkr5AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOToxNTowN1rOEkr5AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTAzMjk3OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOToxNTowN1rOHTxcaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMTozMzoyN1rOHUcf2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ5NTA4MQ==", "bodyText": "Since the consumer is set on the DeviceCodeCredentialBuilder it would be good to have defaults also set in the builder.  That's the general pattern we are following for other configurable options like httpclient, retry policies etc. So, we have one place for all defaults.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15332#discussion_r490495081", "createdAt": "2020-09-17T19:15:07Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -580,10 +580,17 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithDeviceCode(TokenRequestContext request,\n                                                       Consumer<DeviceCodeInfo> deviceCodeConsumer) {\n+\n+        final Consumer<DeviceCodeInfo> deviceCodeInfoConsumer;\n+        if (deviceCodeConsumer != null) {\n+            deviceCodeInfoConsumer = deviceCodeConsumer;\n+        } else {\n+            deviceCodeInfoConsumer = deviceCodeInfo -> System.out.println(deviceCodeInfo.getMessage());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560e8081a5516535ba6f9cd89b6a940ca2115496"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUwNzkwOA==", "bodyText": "That approach comes with the drawback of the configured default living in the memory until the credential object is garbage collected.\nThis approach will ensure that the default value gets created and garbage collected after the method call finishes.\nGiven that in memory token cache will be active in our auth policies too, so invocation of this method will not be frequent as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15332#discussion_r490507908", "createdAt": "2020-09-17T19:30:35Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -580,10 +580,17 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithDeviceCode(TokenRequestContext request,\n                                                       Consumer<DeviceCodeInfo> deviceCodeConsumer) {\n+\n+        final Consumer<DeviceCodeInfo> deviceCodeInfoConsumer;\n+        if (deviceCodeConsumer != null) {\n+            deviceCodeInfoConsumer = deviceCodeConsumer;\n+        } else {\n+            deviceCodeInfoConsumer = deviceCodeInfo -> System.out.println(deviceCodeInfo.getMessage());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ5NTA4MQ=="}, "originalCommit": {"oid": "560e8081a5516535ba6f9cd89b6a940ca2115496"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE4ODk0NA==", "bodyText": "This consumer can be a static constant. I don't think the consumer has to be tied to the lifetime of the credential.\nprivate static final Consumer<DeviceCodeInfo> DEVICE_CODE_CONSUMER = deviceCodeInfo -> System.out.println(deviceCodeInfo.getMessage());", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15332#discussion_r491188944", "createdAt": "2020-09-18T21:01:57Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -580,10 +580,17 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithDeviceCode(TokenRequestContext request,\n                                                       Consumer<DeviceCodeInfo> deviceCodeConsumer) {\n+\n+        final Consumer<DeviceCodeInfo> deviceCodeInfoConsumer;\n+        if (deviceCodeConsumer != null) {\n+            deviceCodeInfoConsumer = deviceCodeConsumer;\n+        } else {\n+            deviceCodeInfoConsumer = deviceCodeInfo -> System.out.println(deviceCodeInfo.getMessage());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ5NTA4MQ=="}, "originalCommit": {"oid": "560e8081a5516535ba6f9cd89b6a940ca2115496"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIwMDQ3Mg==", "bodyText": "Yeah, statics are common and from a functionality point of view will work fine.\nBut, making it static, will prevent it from being garbage collected until the application terminates.\nSo, from memory point of view, static is worse compared to localizing the variable. In this scenario, the more we localize, the better the situation becomes from memory consumption aspect.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15332#discussion_r491200472", "createdAt": "2020-09-18T21:33:27Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -580,10 +580,17 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithDeviceCode(TokenRequestContext request,\n                                                       Consumer<DeviceCodeInfo> deviceCodeConsumer) {\n+\n+        final Consumer<DeviceCodeInfo> deviceCodeInfoConsumer;\n+        if (deviceCodeConsumer != null) {\n+            deviceCodeInfoConsumer = deviceCodeConsumer;\n+        } else {\n+            deviceCodeInfoConsumer = deviceCodeInfo -> System.out.println(deviceCodeInfo.getMessage());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ5NTA4MQ=="}, "originalCommit": {"oid": "560e8081a5516535ba6f9cd89b6a940ca2115496"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 937, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}