{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNjY2NDMz", "number": 8049, "title": "Sync Paged Iterable equivalent for ContinuablePagedFlux", "bodyText": "", "createdAt": "2020-02-08T01:50:43Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8049", "merged": true, "mergeCommit": {"oid": "2087e8999e049a2533d84031703834afcba88cb4"}, "closed": true, "closedAt": "2020-03-03T20:29:25Z", "author": {"login": "anuchandy"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcCJ8xFgH2gAyMzcyNjY2NDMzOmVjMTljZDZlZGE3YzhiMWY3NjQ1ZTNkODM1MTJmYTgyNTcwODgzZDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJ5ReygFqTM2NzY3MzA1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ec19cd6eda7c8b1f7645e3d83512fa82570883d0", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ec19cd6eda7c8b1f7645e3d83512fa82570883d0", "committedDate": "2020-02-08T01:49:27Z", "message": "sync Paged Iterable equivalent for ContinuablePagedFlux"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NTM0NTg2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8049#pullrequestreview-355534586", "createdAt": "2020-02-08T07:05:25Z", "commit": {"oid": "ec19cd6eda7c8b1f7645e3d83512fa82570883d0"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwNzowNToyNVrOFnPhjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwNzowNToyNVrOFnPhjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5MzEzNQ==", "bodyText": "We should provide a way to customize DEFAULT_BATCH_SIZE", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8049#discussion_r376693135", "createdAt": "2020-02-08T07:05:25Z", "author": {"login": "kushagraThapar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedIterable.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.paging;\n+\n+import com.azure.core.util.IterableStream;\n+import java.util.stream.Stream;\n+\n+/**\n+ * This class provides utility to iterate over {@link ContinuablePage} using {@link Stream}\n+ * {@link Iterable} interfaces.\n+ *\n+ * @param <C> the type of the continuation token\n+ * @param <T> The type of elements in a {@link ContinuablePage}\n+ * @param <P> The {@link ContinuablePage} holding items of type {@code T}.\n+ *\n+ * @see IterableStream\n+ * @see ContinuablePagedFlux\n+ */\n+public abstract class ContinuablePagedIterable<C, T, P extends ContinuablePage<C, T>> extends IterableStream<T> {\n+    private static final int DEFAULT_BATCH_SIZE = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec19cd6eda7c8b1f7645e3d83512fa82570883d0"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MTE5NDYw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8049#pullrequestreview-356119460", "createdAt": "2020-02-10T17:20:46Z", "commit": {"oid": "ec19cd6eda7c8b1f7645e3d83512fa82570883d0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzoyMDo0N1rOFnuqmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzoyMDo0N1rOFnuqmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwMzM1NQ==", "bodyText": "Adding Javadoc about default batch size would be good for user and improve quality of Javadoc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8049#discussion_r377203355", "createdAt": "2020-02-10T17:20:47Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedIterable.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.paging;\n+\n+import com.azure.core.util.IterableStream;\n+import java.util.stream.Stream;\n+\n+/**\n+ * This class provides utility to iterate over {@link ContinuablePage} using {@link Stream}\n+ * {@link Iterable} interfaces.\n+ *\n+ * @param <C> the type of the continuation token\n+ * @param <T> The type of elements in a {@link ContinuablePage}\n+ * @param <P> The {@link ContinuablePage} holding items of type {@code T}.\n+ *\n+ * @see IterableStream\n+ * @see ContinuablePagedFlux\n+ */\n+public abstract class ContinuablePagedIterable<C, T, P extends ContinuablePage<C, T>> extends IterableStream<T> {\n+    private static final int DEFAULT_BATCH_SIZE = 1;\n+    private final ContinuablePagedFlux<C, T, P> pagedFlux;\n+\n+    /**\n+     * Creates instance given {@link ContinuablePagedFlux}.\n+     *\n+     * @param pagedFlux the paged flux use as iterable\n+     */\n+    public ContinuablePagedIterable(ContinuablePagedFlux<C, T, P> pagedFlux) {\n+        super(pagedFlux);\n+        this.pagedFlux = pagedFlux;\n+    }\n+\n+    /**\n+     * Retrieve the {@link Stream}, one page at a time.\n+     * It will provide same {@link Stream} of T values from starting if called multiple times.\n+     *\n+     * @return {@link Stream} of a pages\n+     */\n+    public Stream<P> streamByPage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec19cd6eda7c8b1f7645e3d83512fa82570883d0"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MTIwMjM1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8049#pullrequestreview-356120235", "createdAt": "2020-02-10T17:21:56Z", "commit": {"oid": "ec19cd6eda7c8b1f7645e3d83512fa82570883d0"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzoyMTo1NlrOFnutEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzoyMTo1NlrOFnutEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwMzk4Ng==", "bodyText": "Can we add this change in changelog .", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8049#discussion_r377203986", "createdAt": "2020-02-10T17:21:56Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedIterable.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.paging;\n+\n+import com.azure.core.util.IterableStream;\n+import java.util.stream.Stream;\n+\n+/**\n+ * This class provides utility to iterate over {@link ContinuablePage} using {@link Stream}\n+ * {@link Iterable} interfaces.\n+ *\n+ * @param <C> the type of the continuation token\n+ * @param <T> The type of elements in a {@link ContinuablePage}\n+ * @param <P> The {@link ContinuablePage} holding items of type {@code T}.\n+ *\n+ * @see IterableStream\n+ * @see ContinuablePagedFlux\n+ */\n+public abstract class ContinuablePagedIterable<C, T, P extends ContinuablePage<C, T>> extends IterableStream<T> {\n+    private static final int DEFAULT_BATCH_SIZE = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec19cd6eda7c8b1f7645e3d83512fa82570883d0"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MTYzMDYx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8049#pullrequestreview-356163061", "createdAt": "2020-02-10T18:28:51Z", "commit": {"oid": "ec19cd6eda7c8b1f7645e3d83512fa82570883d0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NTI5NzUx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8049#pullrequestreview-364529751", "createdAt": "2020-02-25T23:39:44Z", "commit": {"oid": "ec19cd6eda7c8b1f7645e3d83512fa82570883d0"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMzozOTo0NFrOFuZVPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMzozOTo0NFrOFuZVPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5Mzg1Mw==", "bodyText": "Is this actually needed anymore? I believe this was added to fix a case where PagedIterable would over-eagerly consume a Flux.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8049#discussion_r384193853", "createdAt": "2020-02-25T23:39:44Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedIterable.java", "diffHunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.paging;\n+\n+import com.azure.core.util.IterableStream;\n+import java.util.stream.Stream;\n+\n+/**\n+ * This class provides utility to iterate over {@link ContinuablePage} using {@link Stream}\n+ * {@link Iterable} interfaces.\n+ *\n+ * @param <C> the type of the continuation token\n+ * @param <T> The type of elements in a {@link ContinuablePage}\n+ * @param <P> The {@link ContinuablePage} holding items of type {@code T}.\n+ *\n+ * @see IterableStream\n+ * @see ContinuablePagedFlux\n+ */\n+public abstract class ContinuablePagedIterable<C, T, P extends ContinuablePage<C, T>> extends IterableStream<T> {\n+    private static final int DEFAULT_BATCH_SIZE = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec19cd6eda7c8b1f7645e3d83512fa82570883d0"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f692d006d36b1984b4186134efdc67e531c1ccd4", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f692d006d36b1984b4186134efdc67e531c1ccd4", "committedDate": "2020-02-26T04:39:27Z", "message": "Merge branch 'master' of github.com:azure/azure-sdk-for-java into sync-paged"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44d305468667d9129314c89c59e4d77a0e794afb", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/44d305468667d9129314c89c59e4d77a0e794afb", "committedDate": "2020-02-26T04:52:06Z", "message": "taking batch-size as ContinuablePagedIterable::Ctr"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MTc0NzUx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8049#pullrequestreview-365174751", "createdAt": "2020-02-26T19:22:41Z", "commit": {"oid": "44d305468667d9129314c89c59e4d77a0e794afb"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOToyMjo0MVrOFu41Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOToyNDozOVrOFu453g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwOTk0Ng==", "bodyText": "nit: remove extra @return", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8049#discussion_r384709946", "createdAt": "2020-02-26T19:22:41Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedIterable.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.paging;\n+\n+import com.azure.core.util.IterableStream;\n+\n+import java.util.stream.Stream;\n+\n+/**\n+ * This class provides utility to iterate over {@link ContinuablePage} using {@link Stream}\n+ * {@link Iterable} interfaces.\n+ *\n+ * @param <C> the type of the continuation token\n+ * @param <T> The type of elements in a {@link ContinuablePage}\n+ * @param <P> The {@link ContinuablePage} holding items of type {@code T}.\n+ *\n+ * @see IterableStream\n+ * @see ContinuablePagedFlux\n+ */\n+public abstract class ContinuablePagedIterable<C, T, P extends ContinuablePage<C, T>> extends IterableStream<T> {\n+    private final ContinuablePagedFlux<C, T, P> pagedFlux;\n+    private final int batchSize;\n+\n+    /**\n+     * Creates instance with the given {@link ContinuablePagedFlux}.\n+     *\n+     * @param pagedFlux the paged flux use as iterable\n+     */\n+    public ContinuablePagedIterable(ContinuablePagedFlux<C, T, P> pagedFlux) {\n+        this(pagedFlux, 1);\n+    }\n+\n+    /**\n+     * Creates instance with the given {@link ContinuablePagedFlux}.\n+     *\n+     * @param pagedFlux the paged flux use as iterable\n+     * @param batchSize the bounded capacity to prefetch from the {@link ContinuablePagedFlux}\n+     */\n+    public ContinuablePagedIterable(ContinuablePagedFlux<C, T, P> pagedFlux, int batchSize) {\n+        super(pagedFlux);\n+        this.pagedFlux = pagedFlux;\n+        this.batchSize = batchSize;\n+    }\n+\n+    /**\n+     * Retrieve the {@link Stream}, one page at a time.\n+     * It will provide same {@link Stream} of T values from starting if called multiple times.\n+     *\n+     * @return {@link Stream} of a pages\n+     */\n+    public Stream<P> streamByPage() {\n+        return pagedFlux.byPage().toStream(this.batchSize);\n+    }\n+\n+    /**\n+     * Retrieve the {@link Stream}, one page at a time, starting from the next page associated with the given\n+     * continuation token. To start from first page, use {@link #streamByPage()} instead.\n+     *\n+     * @param continuationToken The continuation token used to fetch the next page\n+     * @return @return {@link Stream} of a pages\n+     */\n+    public Stream<P> streamByPage(C continuationToken) {\n+        return this.pagedFlux.byPage(continuationToken).toStream(this.batchSize);\n+    }\n+\n+    /**\n+     * Retrieve the {@link Stream}, one page at a time, with each page containing {@code preferredPageSize}\n+     * items.\n+     *\n+     * It will provide same {@link Stream} of T values from starting if called multiple times.\n+     *\n+     * @param preferredPageSize the preferred page size, service may or may not honor the page\n+     *                          size preference hence client MUST be prepared to handle pages\n+     *                          with different page size.\n+     * @return @return {@link Stream} of a pages\n+     */\n+    public Stream<P> streamByPage(int preferredPageSize) {\n+        return this.pagedFlux.byPage(null, preferredPageSize).toStream(this.batchSize);\n+    }\n+\n+    /**\n+     * Retrieve the {@link Stream}, one page at a time, with each page containing {@code preferredPageSize}\n+     * items, starting from the next page associated with the given continuation token.\n+     * To start from first page, use {@link #streamByPage()} or {@link #streamByPage(int)} instead.\n+     *\n+     * @param preferredPageSize the preferred page size, service may or may not honor the page\n+     *                          size preference hence client MUST be prepared to handle pages\n+     *                          with different page size.\n+     * @param continuationToken The continuation token used to fetch the next page\n+     * @return @return {@link Stream} of a pages", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d305468667d9129314c89c59e4d77a0e794afb"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMTEzNA==", "bodyText": "Instead of referring to a service, we can just say \"source may or may not honor the page size\" as this paged iterable is a generic concept that can be applicable to non-service sources too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8049#discussion_r384711134", "createdAt": "2020-02-26T19:24:39Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedIterable.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.paging;\n+\n+import com.azure.core.util.IterableStream;\n+\n+import java.util.stream.Stream;\n+\n+/**\n+ * This class provides utility to iterate over {@link ContinuablePage} using {@link Stream}\n+ * {@link Iterable} interfaces.\n+ *\n+ * @param <C> the type of the continuation token\n+ * @param <T> The type of elements in a {@link ContinuablePage}\n+ * @param <P> The {@link ContinuablePage} holding items of type {@code T}.\n+ *\n+ * @see IterableStream\n+ * @see ContinuablePagedFlux\n+ */\n+public abstract class ContinuablePagedIterable<C, T, P extends ContinuablePage<C, T>> extends IterableStream<T> {\n+    private final ContinuablePagedFlux<C, T, P> pagedFlux;\n+    private final int batchSize;\n+\n+    /**\n+     * Creates instance with the given {@link ContinuablePagedFlux}.\n+     *\n+     * @param pagedFlux the paged flux use as iterable\n+     */\n+    public ContinuablePagedIterable(ContinuablePagedFlux<C, T, P> pagedFlux) {\n+        this(pagedFlux, 1);\n+    }\n+\n+    /**\n+     * Creates instance with the given {@link ContinuablePagedFlux}.\n+     *\n+     * @param pagedFlux the paged flux use as iterable\n+     * @param batchSize the bounded capacity to prefetch from the {@link ContinuablePagedFlux}\n+     */\n+    public ContinuablePagedIterable(ContinuablePagedFlux<C, T, P> pagedFlux, int batchSize) {\n+        super(pagedFlux);\n+        this.pagedFlux = pagedFlux;\n+        this.batchSize = batchSize;\n+    }\n+\n+    /**\n+     * Retrieve the {@link Stream}, one page at a time.\n+     * It will provide same {@link Stream} of T values from starting if called multiple times.\n+     *\n+     * @return {@link Stream} of a pages\n+     */\n+    public Stream<P> streamByPage() {\n+        return pagedFlux.byPage().toStream(this.batchSize);\n+    }\n+\n+    /**\n+     * Retrieve the {@link Stream}, one page at a time, starting from the next page associated with the given\n+     * continuation token. To start from first page, use {@link #streamByPage()} instead.\n+     *\n+     * @param continuationToken The continuation token used to fetch the next page\n+     * @return @return {@link Stream} of a pages\n+     */\n+    public Stream<P> streamByPage(C continuationToken) {\n+        return this.pagedFlux.byPage(continuationToken).toStream(this.batchSize);\n+    }\n+\n+    /**\n+     * Retrieve the {@link Stream}, one page at a time, with each page containing {@code preferredPageSize}\n+     * items.\n+     *\n+     * It will provide same {@link Stream} of T values from starting if called multiple times.\n+     *\n+     * @param preferredPageSize the preferred page size, service may or may not honor the page\n+     *                          size preference hence client MUST be prepared to handle pages\n+     *                          with different page size.\n+     * @return @return {@link Stream} of a pages\n+     */\n+    public Stream<P> streamByPage(int preferredPageSize) {\n+        return this.pagedFlux.byPage(null, preferredPageSize).toStream(this.batchSize);\n+    }\n+\n+    /**\n+     * Retrieve the {@link Stream}, one page at a time, with each page containing {@code preferredPageSize}\n+     * items, starting from the next page associated with the given continuation token.\n+     * To start from first page, use {@link #streamByPage()} or {@link #streamByPage(int)} instead.\n+     *\n+     * @param preferredPageSize the preferred page size, service may or may not honor the page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d305468667d9129314c89c59e4d77a0e794afb"}, "originalPosition": 87}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2e5e123e3d03c932f49b6aa1a481cbcaa0e6ca2", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f2e5e123e3d03c932f49b6aa1a481cbcaa0e6ca2", "committedDate": "2020-02-28T18:57:39Z", "message": "Fixed Javadoc issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3db07191b6ebe8980ad441a9f79fa6b40c977739", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3db07191b6ebe8980ad441a9f79fa6b40c977739", "committedDate": "2020-03-02T23:18:06Z", "message": "revapi exceptions for new changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a26e5f26d5a0c71345ea4a322e0df443b7e5e0b6", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a26e5f26d5a0c71345ea4a322e0df443b7e5e0b6", "committedDate": "2020-03-03T01:04:24Z", "message": "Additional revapi suppressions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NjczMDU1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8049#pullrequestreview-367673055", "createdAt": "2020-03-03T02:55:05Z", "commit": {"oid": "a26e5f26d5a0c71345ea4a322e0df443b7e5e0b6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2377, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}