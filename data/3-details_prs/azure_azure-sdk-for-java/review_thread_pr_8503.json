{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNTI3ODIx", "number": 8503, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzowMDozMlrODjRjvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzo1ODo0NlrODjjg3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzE0NDMwOnYy", "diffSide": "LEFT", "path": "sdk/search/azure-search/src/main/java/com/azure/search/SearchIndexAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzowMDozMlrOFu_igw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzoyOTowNVrOFvAJrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxOTg0Mw==", "bodyText": "Are these checked anywhere?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8503#discussion_r384819843", "createdAt": "2020-02-26T23:00:32Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/SearchIndexAsyncClient.java", "diffHunk": "@@ -95,17 +95,6 @@\n         HttpPipeline httpPipeline) {\n \n         SearchServiceUrlParts parts = SearchServiceUrlParser.parseServiceUrlParts(endpoint);\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59d40ba552c84520c1791ae597be5fe19504c410"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgyOTg3MQ==", "bodyText": "Never mind. Found in API", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8503#discussion_r384829871", "createdAt": "2020-02-26T23:29:05Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/SearchIndexAsyncClient.java", "diffHunk": "@@ -95,17 +95,6 @@\n         HttpPipeline httpPipeline) {\n \n         SearchServiceUrlParts parts = SearchServiceUrlParser.parseServiceUrlParts(endpoint);\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxOTg0Mw=="}, "originalCommit": {"oid": "59d40ba552c84520c1791ae597be5fe19504c410"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzE1MTQ1OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search/src/main/java/com/azure/search/SearchIndexClientBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzowMzoyNVrOFu_m1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDozNzo0OFrOFvBdxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgyMDk1MA==", "bodyText": "I have renamed this field. I am going to check in #8393. Please merge my PR.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8503#discussion_r384820950", "createdAt": "2020-02-26T23:03:25Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/SearchIndexClientBuilder.java", "diffHunk": "@@ -34,81 +33,131 @@\n  * SearchIndexClients} and {@link SearchIndexAsyncClient SearchIndexAsyncClients}. Call {@link #buildClient()\n  * buildClient} and {@link #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired\n  * client.\n- *\n- * The following information must be provided on this builder: the Azure Cognitive Search service endpoint through\n- * {@code .endpoint()} the index name through {@code .indexName()} the API key through {@code .credential()}\n+ * <p>\n+ * The following information must be provided to successfully create a client.\n+ * <ul>\n+ *     <li>{@link #endpoint(String)}</li>\n+ *     <li>{@link #indexName(String)}</li>\n+ *     <li>{@link #credential(SearchApiKeyCredential)} or {@link #pipeline(HttpPipeline)}</li>\n+ * </ul>\n  */\n @ServiceClientBuilder(serviceClients = {SearchIndexClient.class, SearchIndexAsyncClient.class})\n public class SearchIndexClientBuilder {\n-\n-    // This header tells the server to return the request id in the HTTP response. Useful for correlation with what\n-    // request was sent.\n+    /*\n+     * This header tells the service to return the request ID in the HTTP response. This is useful for correlating the\n+     * request sent to the response.\n+     */\n     private static final String ECHO_REQUEST_ID_HEADER = \"x-ms-return-client-request-id\";\n \n+    /*\n+     * This is the name of the request ID header that the Search service expects. If the customer doesn't pass\n+     * RequestOptions into a service call this will allow for the client to implicitly add a request ID header,\n+     * otherwise the passed request ID will be used.\n+     */\n+    private static final String CLIENT_REQUEST_ID = \"client-request-id\";\n+\n     private static final String SEARCH_PROPERTIES = \"azure-search.properties\";\n     private static final String NAME = \"name\";\n     private static final String VERSION = \"version\";\n \n-    SearchApiKeyCredential searchApiKeyCredential;\n-    SearchServiceVersion apiVersion;\n-    String endpoint;\n-    HttpClient httpClient;\n-    HttpLogOptions httpLogOptions;\n-    Configuration configuration;\n-    List<HttpPipelinePolicy> policies;\n-    private String clientName;\n-    private String clientVersion;\n+    private final ClientLogger logger = new ClientLogger(SearchIndexClientBuilder.class);\n+    private final List<HttpPipelinePolicy> policies = new ArrayList<>();\n+    private final HttpHeaders headers = new HttpHeaders().put(ECHO_REQUEST_ID_HEADER, \"true\");\n \n+    private final String clientName;\n+    private final String clientVersion;\n+\n+    private SearchApiKeyCredential searchApiKeyCredential;\n+    private SearchServiceVersion apiVersion;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59d40ba552c84520c1791ae597be5fe19504c410"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1MTM5OQ==", "bodyText": "Will do", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8503#discussion_r384851399", "createdAt": "2020-02-27T00:37:48Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/SearchIndexClientBuilder.java", "diffHunk": "@@ -34,81 +33,131 @@\n  * SearchIndexClients} and {@link SearchIndexAsyncClient SearchIndexAsyncClients}. Call {@link #buildClient()\n  * buildClient} and {@link #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired\n  * client.\n- *\n- * The following information must be provided on this builder: the Azure Cognitive Search service endpoint through\n- * {@code .endpoint()} the index name through {@code .indexName()} the API key through {@code .credential()}\n+ * <p>\n+ * The following information must be provided to successfully create a client.\n+ * <ul>\n+ *     <li>{@link #endpoint(String)}</li>\n+ *     <li>{@link #indexName(String)}</li>\n+ *     <li>{@link #credential(SearchApiKeyCredential)} or {@link #pipeline(HttpPipeline)}</li>\n+ * </ul>\n  */\n @ServiceClientBuilder(serviceClients = {SearchIndexClient.class, SearchIndexAsyncClient.class})\n public class SearchIndexClientBuilder {\n-\n-    // This header tells the server to return the request id in the HTTP response. Useful for correlation with what\n-    // request was sent.\n+    /*\n+     * This header tells the service to return the request ID in the HTTP response. This is useful for correlating the\n+     * request sent to the response.\n+     */\n     private static final String ECHO_REQUEST_ID_HEADER = \"x-ms-return-client-request-id\";\n \n+    /*\n+     * This is the name of the request ID header that the Search service expects. If the customer doesn't pass\n+     * RequestOptions into a service call this will allow for the client to implicitly add a request ID header,\n+     * otherwise the passed request ID will be used.\n+     */\n+    private static final String CLIENT_REQUEST_ID = \"client-request-id\";\n+\n     private static final String SEARCH_PROPERTIES = \"azure-search.properties\";\n     private static final String NAME = \"name\";\n     private static final String VERSION = \"version\";\n \n-    SearchApiKeyCredential searchApiKeyCredential;\n-    SearchServiceVersion apiVersion;\n-    String endpoint;\n-    HttpClient httpClient;\n-    HttpLogOptions httpLogOptions;\n-    Configuration configuration;\n-    List<HttpPipelinePolicy> policies;\n-    private String clientName;\n-    private String clientVersion;\n+    private final ClientLogger logger = new ClientLogger(SearchIndexClientBuilder.class);\n+    private final List<HttpPipelinePolicy> policies = new ArrayList<>();\n+    private final HttpHeaders headers = new HttpHeaders().put(ECHO_REQUEST_ID_HEADER, \"true\");\n \n+    private final String clientName;\n+    private final String clientVersion;\n+\n+    private SearchApiKeyCredential searchApiKeyCredential;\n+    private SearchServiceVersion apiVersion;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgyMDk1MA=="}, "originalCommit": {"oid": "59d40ba552c84520c1791ae597be5fe19504c410"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzE1NTAzOnYy", "diffSide": "LEFT", "path": "sdk/search/azure-search/src/main/java/com/azure/search/SearchIndexClientBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzowNDo0OVrOFu_pCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDozNzozNFrOFvBdcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgyMTUxMw==", "bodyText": "Why removed the default value?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8503#discussion_r384821513", "createdAt": "2020-02-26T23:04:49Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/SearchIndexClientBuilder.java", "diffHunk": "@@ -34,81 +33,131 @@\n  * SearchIndexClients} and {@link SearchIndexAsyncClient SearchIndexAsyncClients}. Call {@link #buildClient()\n  * buildClient} and {@link #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired\n  * client.\n- *\n- * The following information must be provided on this builder: the Azure Cognitive Search service endpoint through\n- * {@code .endpoint()} the index name through {@code .indexName()} the API key through {@code .credential()}\n+ * <p>\n+ * The following information must be provided to successfully create a client.\n+ * <ul>\n+ *     <li>{@link #endpoint(String)}</li>\n+ *     <li>{@link #indexName(String)}</li>\n+ *     <li>{@link #credential(SearchApiKeyCredential)} or {@link #pipeline(HttpPipeline)}</li>\n+ * </ul>\n  */\n @ServiceClientBuilder(serviceClients = {SearchIndexClient.class, SearchIndexAsyncClient.class})\n public class SearchIndexClientBuilder {\n-\n-    // This header tells the server to return the request id in the HTTP response. Useful for correlation with what\n-    // request was sent.\n+    /*\n+     * This header tells the service to return the request ID in the HTTP response. This is useful for correlating the\n+     * request sent to the response.\n+     */\n     private static final String ECHO_REQUEST_ID_HEADER = \"x-ms-return-client-request-id\";\n \n+    /*\n+     * This is the name of the request ID header that the Search service expects. If the customer doesn't pass\n+     * RequestOptions into a service call this will allow for the client to implicitly add a request ID header,\n+     * otherwise the passed request ID will be used.\n+     */\n+    private static final String CLIENT_REQUEST_ID = \"client-request-id\";\n+\n     private static final String SEARCH_PROPERTIES = \"azure-search.properties\";\n     private static final String NAME = \"name\";\n     private static final String VERSION = \"version\";\n \n-    SearchApiKeyCredential searchApiKeyCredential;\n-    SearchServiceVersion apiVersion;\n-    String endpoint;\n-    HttpClient httpClient;\n-    HttpLogOptions httpLogOptions;\n-    Configuration configuration;\n-    List<HttpPipelinePolicy> policies;\n-    private String clientName;\n-    private String clientVersion;\n+    private final ClientLogger logger = new ClientLogger(SearchIndexClientBuilder.class);\n+    private final List<HttpPipelinePolicy> policies = new ArrayList<>();\n+    private final HttpHeaders headers = new HttpHeaders().put(ECHO_REQUEST_ID_HEADER, \"true\");\n \n+    private final String clientName;\n+    private final String clientVersion;\n+\n+    private SearchApiKeyCredential searchApiKeyCredential;\n+    private SearchServiceVersion apiVersion;\n+    private String endpoint;\n+    private HttpClient httpClient;\n+    private HttpPipeline httpPipeline;\n+    private HttpLogOptions httpLogOptions;\n+    private Configuration configuration;\n     private String indexName;\n-    private final HttpHeaders headers;\n     private RetryPolicy retryPolicy;\n-    private final ClientLogger logger = new ClientLogger(SearchIndexClientBuilder.class);\n+\n \n     /**\n-     * Default Constructor\n+     * Creates a builder instance that is able to configure and construct {@link SearchIndexClient SearchIndexClients}\n+     * and {@link SearchIndexAsyncClient SearchIndexAsyncClients}.\n      */\n     public SearchIndexClientBuilder() {\n-        apiVersion = SearchServiceVersion.getLatest();\n-        policies = new ArrayList<>();\n-        httpClient = HttpClient.createDefault();\n-        httpLogOptions = new HttpLogOptions();\n-\n         Map<String, String> properties = CoreUtils.getProperties(SEARCH_PROPERTIES);\n         clientName = properties.getOrDefault(NAME, \"UnknownName\");\n         clientVersion = properties.getOrDefault(VERSION, \"UnknownVersion\");\n-        headers = new HttpHeaders()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59d40ba552c84520c1791ae597be5fe19504c410"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1MTMxMg==", "bodyText": "This was inline instantiated at the property, no need to include this in the constructor if it will be created for every client.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8503#discussion_r384851312", "createdAt": "2020-02-27T00:37:34Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/SearchIndexClientBuilder.java", "diffHunk": "@@ -34,81 +33,131 @@\n  * SearchIndexClients} and {@link SearchIndexAsyncClient SearchIndexAsyncClients}. Call {@link #buildClient()\n  * buildClient} and {@link #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired\n  * client.\n- *\n- * The following information must be provided on this builder: the Azure Cognitive Search service endpoint through\n- * {@code .endpoint()} the index name through {@code .indexName()} the API key through {@code .credential()}\n+ * <p>\n+ * The following information must be provided to successfully create a client.\n+ * <ul>\n+ *     <li>{@link #endpoint(String)}</li>\n+ *     <li>{@link #indexName(String)}</li>\n+ *     <li>{@link #credential(SearchApiKeyCredential)} or {@link #pipeline(HttpPipeline)}</li>\n+ * </ul>\n  */\n @ServiceClientBuilder(serviceClients = {SearchIndexClient.class, SearchIndexAsyncClient.class})\n public class SearchIndexClientBuilder {\n-\n-    // This header tells the server to return the request id in the HTTP response. Useful for correlation with what\n-    // request was sent.\n+    /*\n+     * This header tells the service to return the request ID in the HTTP response. This is useful for correlating the\n+     * request sent to the response.\n+     */\n     private static final String ECHO_REQUEST_ID_HEADER = \"x-ms-return-client-request-id\";\n \n+    /*\n+     * This is the name of the request ID header that the Search service expects. If the customer doesn't pass\n+     * RequestOptions into a service call this will allow for the client to implicitly add a request ID header,\n+     * otherwise the passed request ID will be used.\n+     */\n+    private static final String CLIENT_REQUEST_ID = \"client-request-id\";\n+\n     private static final String SEARCH_PROPERTIES = \"azure-search.properties\";\n     private static final String NAME = \"name\";\n     private static final String VERSION = \"version\";\n \n-    SearchApiKeyCredential searchApiKeyCredential;\n-    SearchServiceVersion apiVersion;\n-    String endpoint;\n-    HttpClient httpClient;\n-    HttpLogOptions httpLogOptions;\n-    Configuration configuration;\n-    List<HttpPipelinePolicy> policies;\n-    private String clientName;\n-    private String clientVersion;\n+    private final ClientLogger logger = new ClientLogger(SearchIndexClientBuilder.class);\n+    private final List<HttpPipelinePolicy> policies = new ArrayList<>();\n+    private final HttpHeaders headers = new HttpHeaders().put(ECHO_REQUEST_ID_HEADER, \"true\");\n \n+    private final String clientName;\n+    private final String clientVersion;\n+\n+    private SearchApiKeyCredential searchApiKeyCredential;\n+    private SearchServiceVersion apiVersion;\n+    private String endpoint;\n+    private HttpClient httpClient;\n+    private HttpPipeline httpPipeline;\n+    private HttpLogOptions httpLogOptions;\n+    private Configuration configuration;\n     private String indexName;\n-    private final HttpHeaders headers;\n     private RetryPolicy retryPolicy;\n-    private final ClientLogger logger = new ClientLogger(SearchIndexClientBuilder.class);\n+\n \n     /**\n-     * Default Constructor\n+     * Creates a builder instance that is able to configure and construct {@link SearchIndexClient SearchIndexClients}\n+     * and {@link SearchIndexAsyncClient SearchIndexAsyncClients}.\n      */\n     public SearchIndexClientBuilder() {\n-        apiVersion = SearchServiceVersion.getLatest();\n-        policies = new ArrayList<>();\n-        httpClient = HttpClient.createDefault();\n-        httpLogOptions = new HttpLogOptions();\n-\n         Map<String, String> properties = CoreUtils.getProperties(SEARCH_PROPERTIES);\n         clientName = properties.getOrDefault(NAME, \"UnknownName\");\n         clientVersion = properties.getOrDefault(VERSION, \"UnknownVersion\");\n-        headers = new HttpHeaders()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgyMTUxMw=="}, "originalCommit": {"oid": "59d40ba552c84520c1791ae597be5fe19504c410"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzE5MTQwOnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search/src/main/java/com/azure/search/SearchIndexClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzoyMTowOFrOFu__Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzoyMTowOFrOFu__Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgyNzIyMw==", "bodyText": "Add @link for SearchApiKeyCredential . The SearchApiKeyCredential is used to authenticate HTTP requests.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8503#discussion_r384827223", "createdAt": "2020-02-26T23:21:08Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/SearchIndexClientBuilder.java", "diffHunk": "@@ -121,140 +170,139 @@ public SearchIndexClientBuilder endpoint(String endpoint) {\n     }\n \n     /**\n-     * Sets the index name\n+     * Sets the {@link SearchApiKeyCredential} used to authenticate HTTP requests.\n      *\n-     * @param indexName name of the index\n-     * @return the updated SearchIndexClientBuilder object\n+     * @param searchApiKeyCredential SearchApiKeyCredential used to authenticate HTTP requests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59d40ba552c84520c1791ae597be5fe19504c410"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjA4NjA0OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search/src/test/java/com/azure/search/SearchIndexClientBuilderTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzo1ODo0NlrOFvbZCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODoxODozMFrOFvcAiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3NjE2OA==", "bodyText": "To my point of view, error message change is also a breaking change. Verify the message right here can make sure developer pay attention when they make a change to the error message.\nI prefer to assert the message as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8503#discussion_r385276168", "createdAt": "2020-02-27T17:58:46Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search/src/test/java/com/azure/search/SearchIndexClientBuilderTests.java", "diffHunk": "@@ -131,123 +130,41 @@ public void whenBuildClientAndVerifyPropertiesThenSuccess() {\n     }\n \n     @Test\n-    public void verifyEmptyEndpointIsInvalidAsyncTest() {\n-        expectThrowsWithMessage(\"'endpoint' must be a valid URL\", () -> new SearchIndexClientBuilder()\n-            .endpoint(\"\")\n-            .credential(searchApiKeyCredential)\n-            .searchServiceVersion(apiVersion)\n-            .indexName(indexName)\n-            .buildAsyncClient());\n+    public void emptyEndpointThrowsIllegalArgumentException() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114270a550c04bb530a3774e689cafead5003682"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI4NjI4MQ==", "bodyText": "Exception messages are treated on a per case basis on whether they are considered a breaking change, with the general decision being would this message be programmatically consumed. Given that this is a runtime exception that isn't networking related I believe this would be unlikely so there isn't a strong conviction on testing the message of the exception.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8503#discussion_r385286281", "createdAt": "2020-02-27T18:18:30Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search/src/test/java/com/azure/search/SearchIndexClientBuilderTests.java", "diffHunk": "@@ -131,123 +130,41 @@ public void whenBuildClientAndVerifyPropertiesThenSuccess() {\n     }\n \n     @Test\n-    public void verifyEmptyEndpointIsInvalidAsyncTest() {\n-        expectThrowsWithMessage(\"'endpoint' must be a valid URL\", () -> new SearchIndexClientBuilder()\n-            .endpoint(\"\")\n-            .credential(searchApiKeyCredential)\n-            .searchServiceVersion(apiVersion)\n-            .indexName(indexName)\n-            .buildAsyncClient());\n+    public void emptyEndpointThrowsIllegalArgumentException() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3NjE2OA=="}, "originalCommit": {"oid": "114270a550c04bb530a3774e689cafead5003682"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 363, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}