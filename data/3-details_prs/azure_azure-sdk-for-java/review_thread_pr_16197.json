{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNzM2NTMx", "number": 16197, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoyMTo0MVrOEsvDKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzoyNjowM1rOEw-pGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzQzNjU4OnYy", "diffSide": "LEFT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RequestTimeline.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoyMTo0MVrOHgI60w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoyMTo0MVrOHgI60w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2MjYxMQ==", "bodyText": "\"It is reported, just not stored as a value\" (copied from the original PR).\nThis will not change the rntbd timeline diagnostics. After this change:\n\"serializationDiagnosticsContext\":{\"serializationDiagnosticsList\":[{\"serializationType\":\"ITEM_SERIALIZATION\",\"startTimeUTC\":\"22 Sep 2020 17:40:59.239\",\"endTimeUTC\":\"22 Sep 2020 17:40:59.239\",\"durationInMicroSec\":0},{\"serializationType\":\"PARTITION_KEY_FETCH_SERIALIZATION\",\"startTimeUTC\":\"22 Sep 2020 17:40:59.317\",\"endTimeUTC\":\"22 Sep 2020 17:40:59.323\",\"durationInMicroSec\":5998}]},\"gatewayStatistics\":null,\"systemInformation\":{\"usedMemory\":\"60586 KB\",\"availableMemory\":\"8309590 KB\",\"systemCpuLoad\":\"(2020-09-22T17:40:58.729927700Z 20.1%)\"}}", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16197#discussion_r503462611", "createdAt": "2020-10-12T18:21:41Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RequestTimeline.java", "diffHunk": "@@ -151,19 +151,17 @@ public String toString() {\n         return RntbdObjectMapper.toString(this);\n     }\n \n-    @JsonPropertyOrder({ \"name\", \"startTimeUTC\", \"durationInMicroSec\" })\n+    @JsonPropertyOrder({ \"name\", \"startTimeUTC\" })\n     public static final class Event {\n \n         @JsonIgnore\n         private final Duration duration;\n \n-        @JsonSerialize(using = ToStringSerializer.class)\n-        private final long durationInMicroSec;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be1512532374ab85eb46e977c70eb646ba6482ec"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzQ0NDY4OnYy", "diffSide": "LEFT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoyNDozOVrOHgI_wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoyNDozOVrOHgI_wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2Mzg3NA==", "bodyText": "This is removed because no where is using it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16197#discussion_r503463874", "createdAt": "2020-10-12T18:24:39Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "diffHunk": "@@ -327,9 +364,6 @@ private void throwIfClosed() {\n         @JsonProperty()\n         private final Duration receiveHangDetectionTime;\n \n-        @JsonProperty()\n-        private final Duration requestExpiryInterval;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f418ba312a8d2d07c70b13680b28f933e707d77"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Nzg1MTEyOnYy", "diffSide": "LEFT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMjo0NjoxMVrOHm2blw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMDoyMzozMVrOHm4U8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ5OTczNQ==", "bodyText": "I think we should remove these, since DirectConnectionConfig already provides the APIs now. This was before the public APIs and was only used through JVM options.\nOr if we want to keep these configurations, we should update them to the correct values - like maxChannelsPerEndpoint, maxRequestsPerChannel, idleEndpointTimeout, etc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16197#discussion_r510499735", "createdAt": "2020-10-22T22:46:11Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "diffHunk": "@@ -566,7 +599,6 @@ public String toString() {\n          *   \"maxRequestsPerChannel\": 30,\n          *   \"maxConcurrentRequestsPerEndpointOverride\": 500,\n          *   \"receiveHangDetectionTime\": \"PT1M5S\",\n-         *   \"requestExpiryInterval\": \"PT5S\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88de52c2fea1a6ee1b62bbd22ca507dcc4f8ee09"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUzMDgwMg==", "bodyText": "hmm, I think this comments are more about giving different ways how you can using the JVM options and setup the values. I feel it has been very useful when doing tests.\nSo for now, I left the comments to be the way it is today, but update the values to be consistent with the default values.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16197#discussion_r510530802", "createdAt": "2020-10-23T00:23:31Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "diffHunk": "@@ -566,7 +599,6 @@ public String toString() {\n          *   \"maxRequestsPerChannel\": 30,\n          *   \"maxConcurrentRequestsPerEndpointOverride\": 500,\n          *   \"receiveHangDetectionTime\": \"PT1M5S\",\n-         *   \"requestExpiryInterval\": \"PT5S\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ5OTczNQ=="}, "originalCommit": {"oid": "88de52c2fea1a6ee1b62bbd22ca507dcc4f8ee09"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Nzg1MzgyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMjo0NzoyNVrOHm2dKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMDo1ODozNVrOHm40og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwMDEzNw==", "bodyText": "What is the reason behind this change ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16197#discussion_r510500137", "createdAt": "2020-10-22T22:47:25Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -527,7 +527,7 @@ public void write(final ChannelHandlerContext context, final Object message, fin\n \n         if (message == RntbdHealthCheckRequest.MESSAGE) {\n \n-            context.write(RntbdHealthCheckRequest.MESSAGE, promise).addListener(completed -> {\n+            context.writeAndFlush(RntbdHealthCheckRequest.MESSAGE, promise).addListener(completed -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88de52c2fea1a6ee1b62bbd22ca507dcc4f8ee09"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwMjIwMQ==", "bodyText": "It is not a required change. But generally write is only queue the message but not really send through wire, writeAndFlush will help flush the message further down the pipeline, so I think it makes sense to keep this change.\nBut I am also open to exclude this change for now and may have a PR in future separately for this", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16197#discussion_r510502201", "createdAt": "2020-10-22T22:53:29Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -527,7 +527,7 @@ public void write(final ChannelHandlerContext context, final Object message, fin\n \n         if (message == RntbdHealthCheckRequest.MESSAGE) {\n \n-            context.write(RntbdHealthCheckRequest.MESSAGE, promise).addListener(completed -> {\n+            context.writeAndFlush(RntbdHealthCheckRequest.MESSAGE, promise).addListener(completed -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwMDEzNw=="}, "originalCommit": {"oid": "88de52c2fea1a6ee1b62bbd22ca507dcc4f8ee09"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwMzQ3OA==", "bodyText": "In any case, there is one more context.write we should make sure to flush that one as well.\nIf we want to change it, do you know when were we doing the flush in just write case ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16197#discussion_r510503478", "createdAt": "2020-10-22T22:57:17Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -527,7 +527,7 @@ public void write(final ChannelHandlerContext context, final Object message, fin\n \n         if (message == RntbdHealthCheckRequest.MESSAGE) {\n \n-            context.write(RntbdHealthCheckRequest.MESSAGE, promise).addListener(completed -> {\n+            context.writeAndFlush(RntbdHealthCheckRequest.MESSAGE, promise).addListener(completed -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwMDEzNw=="}, "originalCommit": {"oid": "88de52c2fea1a6ee1b62bbd22ca507dcc4f8ee09"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxMzI5Nw==", "bodyText": "This potentially can be a perf impacting change.\nIf we decide to include this we should study the impact of this on both latency and throughput. I think the following studies would be needed:\n\nboth latency and throughput using the normal benchmark flow (when saturating max load)\nboth latency and throughput on sparse workload (https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/Configuration.java#L144)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16197#discussion_r510513297", "createdAt": "2020-10-22T23:30:35Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -527,7 +527,7 @@ public void write(final ChannelHandlerContext context, final Object message, fin\n \n         if (message == RntbdHealthCheckRequest.MESSAGE) {\n \n-            context.write(RntbdHealthCheckRequest.MESSAGE, promise).addListener(completed -> {\n+            context.writeAndFlush(RntbdHealthCheckRequest.MESSAGE, promise).addListener(completed -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwMDEzNw=="}, "originalCommit": {"oid": "88de52c2fea1a6ee1b62bbd22ca507dcc4f8ee09"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUyNTY1NA==", "bodyText": "I agree, If we want to change it, we should understand how the flushing was working so far and why we want to change it ?\nBecause I remember in my past conversations with David, flushing immediately had some downsides as well. I can't remember the exact downsides, may be they are not present any more. But a perf check would help us figure it out.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16197#discussion_r510525654", "createdAt": "2020-10-23T00:03:40Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -527,7 +527,7 @@ public void write(final ChannelHandlerContext context, final Object message, fin\n \n         if (message == RntbdHealthCheckRequest.MESSAGE) {\n \n-            context.write(RntbdHealthCheckRequest.MESSAGE, promise).addListener(completed -> {\n+            context.writeAndFlush(RntbdHealthCheckRequest.MESSAGE, promise).addListener(completed -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwMDEzNw=="}, "originalCommit": {"oid": "88de52c2fea1a6ee1b62bbd22ca507dcc4f8ee09"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUyOTc5Mw==", "bodyText": "@kushagraThapar My current understanding is that, when we call write, the message will be queued in the out buffer, but it is not for sure that the message will be written to the socket. Netty will decide when to flush the message out, so that is why we do not have to call flush in our code.\n@moderakh  Yea, make sense, and those are good tests to do for this change.\n@kushagraThapar  @moderakh  I think I will revert this change for now, so this PR only contains style/renaming change,  and I will have a separate PR for this change and to investigate more about it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16197#discussion_r510529793", "createdAt": "2020-10-23T00:19:36Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -527,7 +527,7 @@ public void write(final ChannelHandlerContext context, final Object message, fin\n \n         if (message == RntbdHealthCheckRequest.MESSAGE) {\n \n-            context.write(RntbdHealthCheckRequest.MESSAGE, promise).addListener(completed -> {\n+            context.writeAndFlush(RntbdHealthCheckRequest.MESSAGE, promise).addListener(completed -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwMDEzNw=="}, "originalCommit": {"oid": "88de52c2fea1a6ee1b62bbd22ca507dcc4f8ee09"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUzODkxNA==", "bodyText": "Makes sense @xinlian12 , thanks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16197#discussion_r510538914", "createdAt": "2020-10-23T00:58:35Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -527,7 +527,7 @@ public void write(final ChannelHandlerContext context, final Object message, fin\n \n         if (message == RntbdHealthCheckRequest.MESSAGE) {\n \n-            context.write(RntbdHealthCheckRequest.MESSAGE, promise).addListener(completed -> {\n+            context.writeAndFlush(RntbdHealthCheckRequest.MESSAGE, promise).addListener(completed -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwMDEzNw=="}, "originalCommit": {"oid": "88de52c2fea1a6ee1b62bbd22ca507dcc4f8ee09"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzkzNDMyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzoyNjowM1rOHm3Lag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNToyODozOVrOHoVGDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxMTk3OA==", "bodyText": "this adds IdleStateHandler before SSLHandler. Is is intentional?\nThe old code had IdleStateHandler after SSLHandler.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16197#discussion_r510511978", "createdAt": "2020-10-22T23:26:03Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelHandler.java", "diffHunk": "@@ -114,9 +113,14 @@ protected void initChannel(final Channel channel) {\n         }\n \n         pipeline.addFirst(\n-            // TODO (DANOBLE) Log an issue with netty\n-            // Initialize sslHandler with jdkCompatibilityMode = true for openssl context.\n-            new SslHandler(this.config.sslContext().newEngine(channel.alloc())),\n+            // Initialize sslHandler with jdkCompatibilityMode = true for OpenSSL context\n+            // TODO Log an issue with netty for clarification on the design of this constructor and the\n+            //  semantic differences between the JDK and OpenSSL implementations\n+            new SslHandler(this.config.sslContext().newEngine(channel.alloc())));\n+\n+        final long idleConnectionTimerResolutionInNanos = config.idleConnectionTimerResolutionInNanos();\n+\n+        pipeline.addFirst(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88de52c2fea1a6ee1b62bbd22ca507dcc4f8ee09"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUyNTMxMw==", "bodyText": "I believe SSLHandler should be the very first one in the pipeline, no ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16197#discussion_r510525313", "createdAt": "2020-10-23T00:02:24Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelHandler.java", "diffHunk": "@@ -114,9 +113,14 @@ protected void initChannel(final Channel channel) {\n         }\n \n         pipeline.addFirst(\n-            // TODO (DANOBLE) Log an issue with netty\n-            // Initialize sslHandler with jdkCompatibilityMode = true for openssl context.\n-            new SslHandler(this.config.sslContext().newEngine(channel.alloc())),\n+            // Initialize sslHandler with jdkCompatibilityMode = true for OpenSSL context\n+            // TODO Log an issue with netty for clarification on the design of this constructor and the\n+            //  semantic differences between the JDK and OpenSSL implementations\n+            new SslHandler(this.config.sslContext().newEngine(channel.alloc())));\n+\n+        final long idleConnectionTimerResolutionInNanos = config.idleConnectionTimerResolutionInNanos();\n+\n+        pipeline.addFirst(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxMTk3OA=="}, "originalCommit": {"oid": "88de52c2fea1a6ee1b62bbd22ca507dcc4f8ee09"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUyNzQyMg==", "bodyText": "good catch, I do not thinkthat is the intent here, reverted back.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16197#discussion_r510527422", "createdAt": "2020-10-23T00:10:14Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelHandler.java", "diffHunk": "@@ -114,9 +113,14 @@ protected void initChannel(final Channel channel) {\n         }\n \n         pipeline.addFirst(\n-            // TODO (DANOBLE) Log an issue with netty\n-            // Initialize sslHandler with jdkCompatibilityMode = true for openssl context.\n-            new SslHandler(this.config.sslContext().newEngine(channel.alloc())),\n+            // Initialize sslHandler with jdkCompatibilityMode = true for OpenSSL context\n+            // TODO Log an issue with netty for clarification on the design of this constructor and the\n+            //  semantic differences between the JDK and OpenSSL implementations\n+            new SslHandler(this.config.sslContext().newEngine(channel.alloc())));\n+\n+        final long idleConnectionTimerResolutionInNanos = config.idleConnectionTimerResolutionInNanos();\n+\n+        pipeline.addFirst(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxMTk3OA=="}, "originalCommit": {"oid": "88de52c2fea1a6ee1b62bbd22ca507dcc4f8ee09"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1MDcwMQ==", "bodyText": "@kushagraThapar  yup, SSLHandler is the very first one in the pipeline today, but after the change, IdleStateHandler will be the first one, so did not think that is the intent. Has reverted the change back.\nThanks~", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16197#discussion_r512050701", "createdAt": "2020-10-26T15:28:39Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelHandler.java", "diffHunk": "@@ -114,9 +113,14 @@ protected void initChannel(final Channel channel) {\n         }\n \n         pipeline.addFirst(\n-            // TODO (DANOBLE) Log an issue with netty\n-            // Initialize sslHandler with jdkCompatibilityMode = true for openssl context.\n-            new SslHandler(this.config.sslContext().newEngine(channel.alloc())),\n+            // Initialize sslHandler with jdkCompatibilityMode = true for OpenSSL context\n+            // TODO Log an issue with netty for clarification on the design of this constructor and the\n+            //  semantic differences between the JDK and OpenSSL implementations\n+            new SslHandler(this.config.sslContext().newEngine(channel.alloc())));\n+\n+        final long idleConnectionTimerResolutionInNanos = config.idleConnectionTimerResolutionInNanos();\n+\n+        pipeline.addFirst(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxMTk3OA=="}, "originalCommit": {"oid": "88de52c2fea1a6ee1b62bbd22ca507dcc4f8ee09"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4152, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}