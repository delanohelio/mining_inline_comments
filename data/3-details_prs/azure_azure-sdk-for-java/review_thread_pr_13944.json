{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NzAxMjg3", "number": 13944, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMTozNjo1N1rOEXBZ5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo1NDowMFrOEXTF6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTc1NzE2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/core/CosmosTemplate.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMTozNjo1N1rOG-lW7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNDoyMzo0OVrOG-n4eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI3Njk3Mw==", "bodyText": "I remember we had an issue with UUID generation in activityId causing long pauses due to lack of real randomness entropy.\nDo other spring plugin use auto generated UUID? I wonder if we should use fast uuid generation for this (similar to activityId in the SDK)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13944#discussion_r468276973", "createdAt": "2020-08-11T01:36:57Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/core/CosmosTemplate.java", "diffHunk": "@@ -189,6 +193,14 @@ public void setApplicationContext(ApplicationContext applicationContext) throws\n         return toDomainObject(domainType, response.getItem());\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    private <T> void generateIdIfNullAndAutoGenerationEnabled(T originalItem, Class<?> type) {\n+        CosmosEntityInformation<?, ?> entityInfo = CosmosEntityInformation.getInstance(type);\n+        if (entityInfo.shouldGenerateId() && ReflectionUtils.getField(entityInfo.getIdField(), originalItem) == null) {\n+            ReflectionUtils.setField(entityInfo.getIdField(), originalItem, UUID.randomUUID().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aab6aae818d363e840d3ec00231bddafd0fc292"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMwNjk4OQ==", "bodyText": "@moderakh - can you please point to the code where we auto generate activity id in the SDK code, may be we can implement something similar in spring if it helps with the performance.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13944#discussion_r468306989", "createdAt": "2020-08-11T03:35:57Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/core/CosmosTemplate.java", "diffHunk": "@@ -189,6 +193,14 @@ public void setApplicationContext(ApplicationContext applicationContext) throws\n         return toDomainObject(domainType, response.getItem());\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    private <T> void generateIdIfNullAndAutoGenerationEnabled(T originalItem, Class<?> type) {\n+        CosmosEntityInformation<?, ?> entityInfo = CosmosEntityInformation.getInstance(type);\n+        if (entityInfo.shouldGenerateId() && ReflectionUtils.getField(entityInfo.getIdField(), originalItem) == null) {\n+            ReflectionUtils.setField(entityInfo.getIdField(), originalItem, UUID.randomUUID().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI3Njk3Mw=="}, "originalCommit": {"oid": "6aab6aae818d363e840d3ec00231bddafd0fc292"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMxMTc0NA==", "bodyText": "https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Utils.java#L438-L440", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13944#discussion_r468311744", "createdAt": "2020-08-11T03:55:42Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/core/CosmosTemplate.java", "diffHunk": "@@ -189,6 +193,14 @@ public void setApplicationContext(ApplicationContext applicationContext) throws\n         return toDomainObject(domainType, response.getItem());\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    private <T> void generateIdIfNullAndAutoGenerationEnabled(T originalItem, Class<?> type) {\n+        CosmosEntityInformation<?, ?> entityInfo = CosmosEntityInformation.getInstance(type);\n+        if (entityInfo.shouldGenerateId() && ReflectionUtils.getField(entityInfo.getIdField(), originalItem) == null) {\n+            ReflectionUtils.setField(entityInfo.getIdField(), originalItem, UUID.randomUUID().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI3Njk3Mw=="}, "originalCommit": {"oid": "6aab6aae818d363e840d3ec00231bddafd0fc292"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMxNTExMw==", "bodyText": "Thanks for the code @moderakh , however the above TimeBasedUUIDGenerator is being brought in by uuid external dependency which is currently in the banned dependency list.\nI also checked our V2 async code, and we use the randomUUID generator to generate UUIDs.\nIn my opinion, it is not worth going through internal shading process for this. What are your thoughts?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13944#discussion_r468315113", "createdAt": "2020-08-11T04:10:01Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/core/CosmosTemplate.java", "diffHunk": "@@ -189,6 +193,14 @@ public void setApplicationContext(ApplicationContext applicationContext) throws\n         return toDomainObject(domainType, response.getItem());\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    private <T> void generateIdIfNullAndAutoGenerationEnabled(T originalItem, Class<?> type) {\n+        CosmosEntityInformation<?, ?> entityInfo = CosmosEntityInformation.getInstance(type);\n+        if (entityInfo.shouldGenerateId() && ReflectionUtils.getField(entityInfo.getIdField(), originalItem) == null) {\n+            ReflectionUtils.setField(entityInfo.getIdField(), originalItem, UUID.randomUUID().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI3Njk3Mw=="}, "originalCommit": {"oid": "6aab6aae818d363e840d3ec00231bddafd0fc292"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMxODMzMA==", "bodyText": "One suggestion, write a for loop with UUID.randomUUID() and measure the time for each UUID generation, if the time looks good then go with UUID.randomUUID()\nint start = System.currentMillis();\nfor (int i = 0; i < 1_000_000; i++) {\n  UUID.randomUUID();\n}\nint end = System.currentMillis();\nSystem.out.println(end - start);\npreferably run this on a linux VM where you don't have mouse movements, etc, as those generate random entropy which is used by /dev/random which is used by UUID.randomUUID()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13944#discussion_r468318330", "createdAt": "2020-08-11T04:23:49Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/core/CosmosTemplate.java", "diffHunk": "@@ -189,6 +193,14 @@ public void setApplicationContext(ApplicationContext applicationContext) throws\n         return toDomainObject(domainType, response.getItem());\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    private <T> void generateIdIfNullAndAutoGenerationEnabled(T originalItem, Class<?> type) {\n+        CosmosEntityInformation<?, ?> entityInfo = CosmosEntityInformation.getInstance(type);\n+        if (entityInfo.shouldGenerateId() && ReflectionUtils.getField(entityInfo.getIdField(), originalItem) == null) {\n+            ReflectionUtils.setField(entityInfo.getIdField(), originalItem, UUID.randomUUID().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI3Njk3Mw=="}, "originalCommit": {"oid": "6aab6aae818d363e840d3ec00231bddafd0fc292"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjA0NDE2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/domain/GenIdEntity.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNDoyODowN1rOG-n8RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNzowNjoyMVrOG_BMqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMxOTMwMA==", "bodyText": "what happens if a field of non String type is annotated with @ GeneratedValue do we support that? or do we error out?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13944#discussion_r468319300", "createdAt": "2020-08-11T04:28:07Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/domain/GenIdEntity.java", "diffHunk": "@@ -0,0 +1,70 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.data.cosmos.domain;\n+\n+import com.azure.spring.data.cosmos.core.mapping.GeneratedValue;\n+import org.springframework.data.annotation.Id;\n+\n+import java.util.Objects;\n+\n+public class GenIdEntity {\n+\n+    @Id\n+    @GeneratedValue", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aab6aae818d363e840d3ec00231bddafd0fc292"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODczMzA5Nw==", "bodyText": "We error it out that @GeneratedValue can only be used on a string id.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13944#discussion_r468733097", "createdAt": "2020-08-11T17:06:21Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/domain/GenIdEntity.java", "diffHunk": "@@ -0,0 +1,70 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.data.cosmos.domain;\n+\n+import com.azure.spring.data.cosmos.core.mapping.GeneratedValue;\n+import org.springframework.data.annotation.Id;\n+\n+import java.util.Objects;\n+\n+public class GenIdEntity {\n+\n+    @Id\n+    @GeneratedValue", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMxOTMwMA=="}, "originalCommit": {"oid": "6aab6aae818d363e840d3ec00231bddafd0fc292"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODY1NTEzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/samples/java/com/azure/cosmos/GeneratedIdEntity.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo1NDowMFrOG_Avvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNzowNjoyNlrOG_BM4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyNTY5NA==", "bodyText": "Please add Microsoft headers to this file.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13944#discussion_r468725694", "createdAt": "2020-08-11T16:54:00Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/samples/java/com/azure/cosmos/GeneratedIdEntity.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.azure.cosmos;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f01e14b29239fa4e416f43ae3aae90279a51892"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODczMzE1Mw==", "bodyText": "fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13944#discussion_r468733153", "createdAt": "2020-08-11T17:06:26Z", "author": {"login": "Blackbaud-EricSlater"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/samples/java/com/azure/cosmos/GeneratedIdEntity.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.azure.cosmos;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyNTY5NA=="}, "originalCommit": {"oid": "3f01e14b29239fa4e416f43ae3aae90279a51892"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1708, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}