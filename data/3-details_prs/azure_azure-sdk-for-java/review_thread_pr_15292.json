{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MjQ1MzY5", "number": 15292, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjo1MTozNlrOEkREzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMzowNTo1MlrOEkRQRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDYzOTQ5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdServiceEndpoint.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjo1MTozNlrOHTG0pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjo1NTo1MVrOHTG54w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc5Njc3Mw==", "bodyText": "else if", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15292#discussion_r489796773", "createdAt": "2020-09-16T22:51:36Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdServiceEndpoint.java", "diffHunk": "@@ -437,5 +479,90 @@ private void evict(final RntbdEndpoint endpoint) {\n         }\n     }\n \n+    public static class RntbdEndpointMonitoringProvider {\n+        private final Logger logger = LoggerFactory.getLogger(RntbdEndpointMonitoringProvider.class);\n+        // this is only for debugging monitoring of the health of RNTBD\n+        // TODO: once we are certain no task gets stuck in the rntbd queue remove this\n+        private static final EventExecutor monitoringRntbdChannelPool = new DefaultEventExecutor(new RntbdThreadFactory(\n+            \"monitoring-rntbd-endpoints\",\n+            true,\n+            Thread.MIN_PRIORITY));\n+        private static final Duration MONITORING_PERIOD = Duration.ofSeconds(5);\n+        private final Provider provider;\n+\n+        private ScheduledFuture<?> future;\n+\n+        RntbdEndpointMonitoringProvider(Provider provider) {\n+            this.provider = provider;\n+        }\n+        \n+        synchronized void init() {\n+            logger.info(\"Starting RntbdClientChannelPoolMonitoringProvider ...\");\n+            this.future = this.monitoringRntbdChannelPool.scheduleAtFixedRate(() -> {\n+                logAllPools();\n+            }, 0, MONITORING_PERIOD.toMillis(), TimeUnit.MILLISECONDS);\n+        }\n+\n+        synchronized void shutdown() {\n+            logger.info(\"Shutting down RntbdClientChannelPoolMonitoringProvider ...\");\n+            this.future.cancel(false);\n+            this.future = null;\n+        }\n+\n+        synchronized void logAllPools() {\n+            try {\n+                logger.debug(\"Total number of RntbdClientChannelPool [{}].\", provider.endpoints.size());\n+                for (RntbdEndpoint endpoint : provider.endpoints.values()) {\n+                    logEndpoint(endpoint);\n+                }\n+            } catch (Exception e) {\n+                logger.error(\"monitoring unexpected failure\", e);\n+            }\n+        }\n+\n+        private void logEndpoint(RntbdEndpoint endpoint) {\n+            int executorPoolSize = endpoint.executorTaskQueueMetrics();\n+\n+            if (this.logger.isDebugEnabled()) {\n+                logger.debug(\"RntbdEndpoint Identifier {}, Stat {}\", getPoolId(endpoint), getPoolStat(endpoint));\n+            }\n+\n+            if (executorPoolSize > 5_000 ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4759adb63f7bfc8a99fa82a9b2c037fafbcdcf9c"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc5NzQ1Nw==", "bodyText": "ah right. Thanks will fix.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15292#discussion_r489797457", "createdAt": "2020-09-16T22:53:46Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdServiceEndpoint.java", "diffHunk": "@@ -437,5 +479,90 @@ private void evict(final RntbdEndpoint endpoint) {\n         }\n     }\n \n+    public static class RntbdEndpointMonitoringProvider {\n+        private final Logger logger = LoggerFactory.getLogger(RntbdEndpointMonitoringProvider.class);\n+        // this is only for debugging monitoring of the health of RNTBD\n+        // TODO: once we are certain no task gets stuck in the rntbd queue remove this\n+        private static final EventExecutor monitoringRntbdChannelPool = new DefaultEventExecutor(new RntbdThreadFactory(\n+            \"monitoring-rntbd-endpoints\",\n+            true,\n+            Thread.MIN_PRIORITY));\n+        private static final Duration MONITORING_PERIOD = Duration.ofSeconds(5);\n+        private final Provider provider;\n+\n+        private ScheduledFuture<?> future;\n+\n+        RntbdEndpointMonitoringProvider(Provider provider) {\n+            this.provider = provider;\n+        }\n+        \n+        synchronized void init() {\n+            logger.info(\"Starting RntbdClientChannelPoolMonitoringProvider ...\");\n+            this.future = this.monitoringRntbdChannelPool.scheduleAtFixedRate(() -> {\n+                logAllPools();\n+            }, 0, MONITORING_PERIOD.toMillis(), TimeUnit.MILLISECONDS);\n+        }\n+\n+        synchronized void shutdown() {\n+            logger.info(\"Shutting down RntbdClientChannelPoolMonitoringProvider ...\");\n+            this.future.cancel(false);\n+            this.future = null;\n+        }\n+\n+        synchronized void logAllPools() {\n+            try {\n+                logger.debug(\"Total number of RntbdClientChannelPool [{}].\", provider.endpoints.size());\n+                for (RntbdEndpoint endpoint : provider.endpoints.values()) {\n+                    logEndpoint(endpoint);\n+                }\n+            } catch (Exception e) {\n+                logger.error(\"monitoring unexpected failure\", e);\n+            }\n+        }\n+\n+        private void logEndpoint(RntbdEndpoint endpoint) {\n+            int executorPoolSize = endpoint.executorTaskQueueMetrics();\n+\n+            if (this.logger.isDebugEnabled()) {\n+                logger.debug(\"RntbdEndpoint Identifier {}, Stat {}\", getPoolId(endpoint), getPoolStat(endpoint));\n+            }\n+\n+            if (executorPoolSize > 5_000 ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc5Njc3Mw=="}, "originalCommit": {"oid": "4759adb63f7bfc8a99fa82a9b2c037fafbcdcf9c"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc5ODExNQ==", "bodyText": "thanks addressed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15292#discussion_r489798115", "createdAt": "2020-09-16T22:55:51Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdServiceEndpoint.java", "diffHunk": "@@ -437,5 +479,90 @@ private void evict(final RntbdEndpoint endpoint) {\n         }\n     }\n \n+    public static class RntbdEndpointMonitoringProvider {\n+        private final Logger logger = LoggerFactory.getLogger(RntbdEndpointMonitoringProvider.class);\n+        // this is only for debugging monitoring of the health of RNTBD\n+        // TODO: once we are certain no task gets stuck in the rntbd queue remove this\n+        private static final EventExecutor monitoringRntbdChannelPool = new DefaultEventExecutor(new RntbdThreadFactory(\n+            \"monitoring-rntbd-endpoints\",\n+            true,\n+            Thread.MIN_PRIORITY));\n+        private static final Duration MONITORING_PERIOD = Duration.ofSeconds(5);\n+        private final Provider provider;\n+\n+        private ScheduledFuture<?> future;\n+\n+        RntbdEndpointMonitoringProvider(Provider provider) {\n+            this.provider = provider;\n+        }\n+        \n+        synchronized void init() {\n+            logger.info(\"Starting RntbdClientChannelPoolMonitoringProvider ...\");\n+            this.future = this.monitoringRntbdChannelPool.scheduleAtFixedRate(() -> {\n+                logAllPools();\n+            }, 0, MONITORING_PERIOD.toMillis(), TimeUnit.MILLISECONDS);\n+        }\n+\n+        synchronized void shutdown() {\n+            logger.info(\"Shutting down RntbdClientChannelPoolMonitoringProvider ...\");\n+            this.future.cancel(false);\n+            this.future = null;\n+        }\n+\n+        synchronized void logAllPools() {\n+            try {\n+                logger.debug(\"Total number of RntbdClientChannelPool [{}].\", provider.endpoints.size());\n+                for (RntbdEndpoint endpoint : provider.endpoints.values()) {\n+                    logEndpoint(endpoint);\n+                }\n+            } catch (Exception e) {\n+                logger.error(\"monitoring unexpected failure\", e);\n+            }\n+        }\n+\n+        private void logEndpoint(RntbdEndpoint endpoint) {\n+            int executorPoolSize = endpoint.executorTaskQueueMetrics();\n+\n+            if (this.logger.isDebugEnabled()) {\n+                logger.debug(\"RntbdEndpoint Identifier {}, Stat {}\", getPoolId(endpoint), getPoolStat(endpoint));\n+            }\n+\n+            if (executorPoolSize > 5_000 ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc5Njc3Mw=="}, "originalCommit": {"oid": "4759adb63f7bfc8a99fa82a9b2c037fafbcdcf9c"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDY2ODg2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMzowNTo1MlrOHTHGKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMzoyMTo1OVrOHTHaHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgwMTI1Ng==", "bodyText": "Incorrect javadoc", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15292#discussion_r489801256", "createdAt": "2020-09-16T23:05:52Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -274,6 +264,38 @@ public int channelsAvailableMetrics() {\n         return this.availableChannels.size();\n     }\n \n+    /**\n+     * Gets the number of connections which are getting established.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f0b2d4649d83fbf57b7ed58c930c0ba734bbec0"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgwNjM2NA==", "bodyText": "thanks. addressed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15292#discussion_r489806364", "createdAt": "2020-09-16T23:21:59Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -274,6 +264,38 @@ public int channelsAvailableMetrics() {\n         return this.availableChannels.size();\n     }\n \n+    /**\n+     * Gets the number of connections which are getting established.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgwMTI1Ng=="}, "originalCommit": {"oid": "6f0b2d4649d83fbf57b7ed58c930c0ba734bbec0"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1055, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}