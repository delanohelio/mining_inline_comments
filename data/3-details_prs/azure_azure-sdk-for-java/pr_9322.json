{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNDQ5ODU5", "number": 9322, "title": "Form Recognizer initial repo setup", "bodyText": "Form recognizer initial repo setup with functionality added for receipt endpoints.\nSync and async samples added.\nCloses #9254, #9249, #9250", "createdAt": "2020-03-20T10:15:03Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322", "merged": true, "mergeCommit": {"oid": "a1bef67e11bc7385f6fa7ea31afc7bd9d870ff9d"}, "closed": true, "closedAt": "2020-04-02T22:52:16Z", "author": {"login": "samvaity"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPd1C8ABqjMxNDg3MzU5MzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcT0G0IgH2gAyMzkxNDQ5ODU5OjdjZDA4ZDI4YmNmNmQ3MmQ1ZmNmMThmMTk0YWY5NGIxYzM0MzU5NzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b9386b8a38d4e457af0fc50ce1362a20111c4a5f", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b9386b8a38d4e457af0fc50ce1362a20111c4a5f", "committedDate": "2020-03-20T10:10:31Z", "message": "receipt endpoints working"}, "afterCommit": {"oid": "e101edc0a488799d368d0538cd038840ba7e74ed", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e101edc0a488799d368d0538cd038840ba7e74ed", "committedDate": "2020-03-20T10:19:53Z", "message": "receipt endpoints working"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NTMwMjEz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#pullrequestreview-378530213", "createdAt": "2020-03-20T14:27:42Z", "commit": {"oid": "e101edc0a488799d368d0538cd038840ba7e74ed"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNDoyNzo0M1rOF5V8sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNDoyNzo0M1rOF5V8sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY3Mjc1NA==", "bodyText": "@samvaity @alzimmermsft @joshfree\nShouldn't formrecognizer and textanalytics both be under an area directory named \"ai\" instead of in separate directories?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r395672754", "createdAt": "2020-03-20T14:27:43Z", "author": {"login": "JimSuplizio"}, "path": "eng/versioning/version_client.txt", "diffHunk": "@@ -5,6 +5,7 @@ com.azure:azure-sdk-all;1.0.0;1.0.0\n com.azure:azure-sdk-parent;1.6.0;1.6.0\n com.azure:azure-client-sdk-parent;1.7.0;1.7.0\n com.azure:azure-ai-textanalytics;1.0.0-beta.3;1.0.0-beta.4\n+com.azure:azure-ai-formrecognizer;1.0.0-beta.1;1.0.0-beta.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e101edc0a488799d368d0538cd038840ba7e74ed"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NzgzMzE5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#pullrequestreview-378783319", "createdAt": "2020-03-20T20:12:30Z", "commit": {"oid": "e101edc0a488799d368d0538cd038840ba7e74ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMDoxMjozMFrOF5h3Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMDoxMjozMFrOF5h3Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2NzkwNw==", "bodyText": "Per our conversation today, we will likely split this into multiple clients going forward.  We decided it's ok to diverge for the Preview 1 release.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r395867907", "createdAt": "2020-03-20T20:12:30Z", "author": {"login": "annelo-msft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerClient.java", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.ReceiptPageResult;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.SyncPoller;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * This class provides a synchronous client that contains all the operations that apply to Azure Form Recognizer.\n+ * Operations allowed by the client are, detect language, recognize entities, recognize PII entities,\n+ * recognize linked entities, and analyze sentiment for a text input or a list of text inputs.\n+ *\n+ * <p><strong>Instantiating a synchronous Form Recognizer Client</strong></p>\n+ * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerClient.instantiation}\n+ *\n+ * <p>View {@link FormRecognizerClientBuilder this} for additional ways to construct the client.</p>\n+ *\n+ * @see FormRecognizerClientBuilder\n+ */\n+@ServiceClient(builder = FormRecognizerClientBuilder.class)\n+public final class FormRecognizerClient {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e101edc0a488799d368d0538cd038840ba7e74ed"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4Nzg0MjAw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#pullrequestreview-378784200", "createdAt": "2020-03-20T20:14:05Z", "commit": {"oid": "e101edc0a488799d368d0538cd038840ba7e74ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMDoxNDowNVrOF5h5sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMDoxNDowNVrOF5h5sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2ODU5Mg==", "bodyText": "Current FR version is v2.0-preview", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r395868592", "createdAt": "2020-03-20T20:14:05Z", "author": {"login": "annelo-msft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerServiceVersion.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.core.util.ServiceVersion;\n+\n+/**\n+ * The versions of Azure Form Recognizer supported by this client library.\n+ */\n+public enum FormRecognizerServiceVersion implements ServiceVersion {\n+    V3_0_preview_1(\"v3.0-preview.1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e101edc0a488799d368d0538cd038840ba7e74ed"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "678305386d828660d7adca9e3a4fa9d123d4a65a", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/678305386d828660d7adca9e3a4fa9d123d4a65a", "committedDate": "2020-03-25T07:18:50Z", "message": "raw ocr and field value update"}, "afterCommit": {"oid": "dc34e20f6c5b4d8fe834d364de27fafbe1c8d7ea", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/dc34e20f6c5b4d8fe834d364de27fafbe1c8d7ea", "committedDate": "2020-03-25T07:35:35Z", "message": "raw ocr and field value update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNjI3MDIx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#pullrequestreview-381627021", "createdAt": "2020-03-26T00:22:17Z", "commit": {"oid": "dc34e20f6c5b4d8fe834d364de27fafbe1c8d7ea"}, "state": "COMMENTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMDoyMjoxN1rOF7zKvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDo0NTowNFrOF8KYrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI0ODYzNg==", "bodyText": "nit: Add groups in alphabetical order.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r398248636", "createdAt": "2020-03-26T00:22:17Z", "author": {"login": "srnagar"}, "path": "pom.client.xml", "diffHunk": "@@ -531,6 +531,10 @@\n                 <title>Azure Text Analytics</title>\n                 <packages>com.azure.ai.textanalytics*</packages>\n               </group>\n+              <group>\n+                <title>Azure Form Recognizer</title>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc34e20f6c5b4d8fe834d364de27fafbe1c8d7ea"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI1MDI4Mw==", "bodyText": "If pollInterval and includeTextDetails are optional, we should have an overload without these 2 args. beginExtractReceipt(String sourceUrl).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r398250283", "createdAt": "2020-03-26T00:28:18Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -0,0 +1,215 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl;\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeOperationResult;\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeReceiptAsyncHeaders;\n+import com.azure.ai.formrecognizer.implementation.models.ContentType;\n+import com.azure.ai.formrecognizer.implementation.models.SourcePath;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.ReceiptPageResult;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollResponse;\n+import com.azure.core.util.polling.PollerFlux;\n+import com.azure.core.util.polling.PollingContext;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+import java.time.Duration;\n+import java.util.UUID;\n+import java.util.function.Function;\n+\n+import static com.azure.ai.formrecognizer.Transforms.toReceipt;\n+import static com.azure.core.util.FluxUtil.monoError;\n+\n+/**\n+ * This class provides an asynchronous client that contains all the operations that apply to Azure Form Recognizer.\n+ * Operations allowed by the client are language detection, sentiment analysis, and recognition entities, PII entities,\n+ * and linked entities of a text input or list of test inputs.\n+ *\n+ * <p><strong>Instantiating an asynchronous Form Recognizer Client</strong></p>\n+ * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation}\n+ *\n+ * <p>View {@link FormRecognizerClientBuilder} for additional ways to construct the client.</p>\n+ *\n+ * @see FormRecognizerClientBuilder\n+ */\n+@ServiceClient(builder = FormRecognizerClientBuilder.class, isAsync = true)\n+public final class FormRecognizerAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(FormRecognizerAsyncClient.class);\n+    private final FormRecognizerClientImpl service;\n+    private final FormRecognizerServiceVersion serviceVersion;\n+\n+    /**\n+     * Create a {@code FormRecognizerAsyncClient} that sends requests to the Form Recognizer services's endpoint. Each\n+     * service call goes through the {@link FormRecognizerClientBuilder#pipeline(HttpPipeline)}  http pipeline}.\n+     *\n+     * @param service The proxy service used to perform REST calls.\n+     * @param serviceVersion The versions of Azure Form Recognizer supported by this client library.\n+     */\n+    FormRecognizerAsyncClient(FormRecognizerClientImpl service, FormRecognizerServiceVersion serviceVersion) {\n+        this.service = service;\n+        this.serviceVersion = serviceVersion;\n+    }\n+\n+    /**\n+     * Gets the service version the client is using.\n+     *\n+     * @return the service version the client is using.\n+     */\n+    public FormRecognizerServiceVersion getServiceVersion() {\n+        return serviceVersion;\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     *\n+     * @param sourceUrl The source URL to the input document. Size of the file must be less than 20 MB.\n+     * @param includeTextDetails Include text lines and element references in the result.\n+     * @param pollInterval Duration between each poll for the operation status. If none is specified, a default of\n+     * one second is used.\n+     *\n+     * @return A {@link PollerFlux} that polls the extract receipt operation until it has completed, has failed, or has\n+     * been cancelled.\n+     */\n+    public PollerFlux<OperationResult, IterableStream<ReceiptPageResult>> beginExtractReceipt(String sourceUrl,\n+                                                                                              boolean includeTextDetails,\n+                                                                                              Duration pollInterval) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc34e20f6c5b4d8fe834d364de27fafbe1c8d7ea"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI1MTQxNA==", "bodyText": "Is it worth creating a custom type like FormRecognizerPollerFlux<T> extends PollerFlux<OperationResult, IterableStream<T>>?\n@JonathanGiles", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r398251414", "createdAt": "2020-03-26T00:32:25Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -0,0 +1,215 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl;\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeOperationResult;\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeReceiptAsyncHeaders;\n+import com.azure.ai.formrecognizer.implementation.models.ContentType;\n+import com.azure.ai.formrecognizer.implementation.models.SourcePath;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.ReceiptPageResult;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollResponse;\n+import com.azure.core.util.polling.PollerFlux;\n+import com.azure.core.util.polling.PollingContext;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+import java.time.Duration;\n+import java.util.UUID;\n+import java.util.function.Function;\n+\n+import static com.azure.ai.formrecognizer.Transforms.toReceipt;\n+import static com.azure.core.util.FluxUtil.monoError;\n+\n+/**\n+ * This class provides an asynchronous client that contains all the operations that apply to Azure Form Recognizer.\n+ * Operations allowed by the client are language detection, sentiment analysis, and recognition entities, PII entities,\n+ * and linked entities of a text input or list of test inputs.\n+ *\n+ * <p><strong>Instantiating an asynchronous Form Recognizer Client</strong></p>\n+ * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation}\n+ *\n+ * <p>View {@link FormRecognizerClientBuilder} for additional ways to construct the client.</p>\n+ *\n+ * @see FormRecognizerClientBuilder\n+ */\n+@ServiceClient(builder = FormRecognizerClientBuilder.class, isAsync = true)\n+public final class FormRecognizerAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(FormRecognizerAsyncClient.class);\n+    private final FormRecognizerClientImpl service;\n+    private final FormRecognizerServiceVersion serviceVersion;\n+\n+    /**\n+     * Create a {@code FormRecognizerAsyncClient} that sends requests to the Form Recognizer services's endpoint. Each\n+     * service call goes through the {@link FormRecognizerClientBuilder#pipeline(HttpPipeline)}  http pipeline}.\n+     *\n+     * @param service The proxy service used to perform REST calls.\n+     * @param serviceVersion The versions of Azure Form Recognizer supported by this client library.\n+     */\n+    FormRecognizerAsyncClient(FormRecognizerClientImpl service, FormRecognizerServiceVersion serviceVersion) {\n+        this.service = service;\n+        this.serviceVersion = serviceVersion;\n+    }\n+\n+    /**\n+     * Gets the service version the client is using.\n+     *\n+     * @return the service version the client is using.\n+     */\n+    public FormRecognizerServiceVersion getServiceVersion() {\n+        return serviceVersion;\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     *\n+     * @param sourceUrl The source URL to the input document. Size of the file must be less than 20 MB.\n+     * @param includeTextDetails Include text lines and element references in the result.\n+     * @param pollInterval Duration between each poll for the operation status. If none is specified, a default of\n+     * one second is used.\n+     *\n+     * @return A {@link PollerFlux} that polls the extract receipt operation until it has completed, has failed, or has\n+     * been cancelled.\n+     */\n+    public PollerFlux<OperationResult, IterableStream<ReceiptPageResult>> beginExtractReceipt(String sourceUrl,\n+                                                                                              boolean includeTextDetails,\n+                                                                                              Duration pollInterval) {\n+        final Duration interval = pollInterval != null ? pollInterval : Duration.ofSeconds(1);\n+        return new PollerFlux<OperationResult, IterableStream<ReceiptPageResult>>(interval,\n+            receiptAnalyzeActivationOperation(sourceUrl, includeTextDetails),\n+            extractReceiptPollOperation(),\n+            (activationResponse, context) -> Mono.error(new RuntimeException(\"Cancellation is not supported\")),\n+            fetchExtractReceiptResult());\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts data using optical character recognition (OCR) and a prebuilt receipt\n+     * trained model.\n+     *\n+     * @param data The data of the document to be extract receipt information from.\n+     * @param length The exact length of the data. Size of the file must be less than 20 MB.\n+     * @param includeTextDetails Include text lines and element references in the result.\n+     * @param formContentType Supported Media types.\n+     * @param pollInterval Duration between each poll for the operation status. If none is specified, a default of\n+     * one second is used.\n+     *\n+     * @return A {@link PollerFlux} that polls the extract receipt operation until it has completed, has failed, or has\n+     * been cancelled.\n+     */\n+    public PollerFlux<OperationResult, IterableStream<ReceiptPageResult>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc34e20f6c5b4d8fe834d364de27fafbe1c8d7ea"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI1MjExMw==", "bodyText": "Is the length of Flux always known?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r398252113", "createdAt": "2020-03-26T00:35:00Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -0,0 +1,215 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl;\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeOperationResult;\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeReceiptAsyncHeaders;\n+import com.azure.ai.formrecognizer.implementation.models.ContentType;\n+import com.azure.ai.formrecognizer.implementation.models.SourcePath;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.ReceiptPageResult;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollResponse;\n+import com.azure.core.util.polling.PollerFlux;\n+import com.azure.core.util.polling.PollingContext;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+import java.time.Duration;\n+import java.util.UUID;\n+import java.util.function.Function;\n+\n+import static com.azure.ai.formrecognizer.Transforms.toReceipt;\n+import static com.azure.core.util.FluxUtil.monoError;\n+\n+/**\n+ * This class provides an asynchronous client that contains all the operations that apply to Azure Form Recognizer.\n+ * Operations allowed by the client are language detection, sentiment analysis, and recognition entities, PII entities,\n+ * and linked entities of a text input or list of test inputs.\n+ *\n+ * <p><strong>Instantiating an asynchronous Form Recognizer Client</strong></p>\n+ * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation}\n+ *\n+ * <p>View {@link FormRecognizerClientBuilder} for additional ways to construct the client.</p>\n+ *\n+ * @see FormRecognizerClientBuilder\n+ */\n+@ServiceClient(builder = FormRecognizerClientBuilder.class, isAsync = true)\n+public final class FormRecognizerAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(FormRecognizerAsyncClient.class);\n+    private final FormRecognizerClientImpl service;\n+    private final FormRecognizerServiceVersion serviceVersion;\n+\n+    /**\n+     * Create a {@code FormRecognizerAsyncClient} that sends requests to the Form Recognizer services's endpoint. Each\n+     * service call goes through the {@link FormRecognizerClientBuilder#pipeline(HttpPipeline)}  http pipeline}.\n+     *\n+     * @param service The proxy service used to perform REST calls.\n+     * @param serviceVersion The versions of Azure Form Recognizer supported by this client library.\n+     */\n+    FormRecognizerAsyncClient(FormRecognizerClientImpl service, FormRecognizerServiceVersion serviceVersion) {\n+        this.service = service;\n+        this.serviceVersion = serviceVersion;\n+    }\n+\n+    /**\n+     * Gets the service version the client is using.\n+     *\n+     * @return the service version the client is using.\n+     */\n+    public FormRecognizerServiceVersion getServiceVersion() {\n+        return serviceVersion;\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     *\n+     * @param sourceUrl The source URL to the input document. Size of the file must be less than 20 MB.\n+     * @param includeTextDetails Include text lines and element references in the result.\n+     * @param pollInterval Duration between each poll for the operation status. If none is specified, a default of\n+     * one second is used.\n+     *\n+     * @return A {@link PollerFlux} that polls the extract receipt operation until it has completed, has failed, or has\n+     * been cancelled.\n+     */\n+    public PollerFlux<OperationResult, IterableStream<ReceiptPageResult>> beginExtractReceipt(String sourceUrl,\n+                                                                                              boolean includeTextDetails,\n+                                                                                              Duration pollInterval) {\n+        final Duration interval = pollInterval != null ? pollInterval : Duration.ofSeconds(1);\n+        return new PollerFlux<OperationResult, IterableStream<ReceiptPageResult>>(interval,\n+            receiptAnalyzeActivationOperation(sourceUrl, includeTextDetails),\n+            extractReceiptPollOperation(),\n+            (activationResponse, context) -> Mono.error(new RuntimeException(\"Cancellation is not supported\")),\n+            fetchExtractReceiptResult());\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts data using optical character recognition (OCR) and a prebuilt receipt\n+     * trained model.\n+     *\n+     * @param data The data of the document to be extract receipt information from.\n+     * @param length The exact length of the data. Size of the file must be less than 20 MB.\n+     * @param includeTextDetails Include text lines and element references in the result.\n+     * @param formContentType Supported Media types.\n+     * @param pollInterval Duration between each poll for the operation status. If none is specified, a default of\n+     * one second is used.\n+     *\n+     * @return A {@link PollerFlux} that polls the extract receipt operation until it has completed, has failed, or has\n+     * been cancelled.\n+     */\n+    public PollerFlux<OperationResult, IterableStream<ReceiptPageResult>>\n+    beginExtractReceipt(Flux<ByteBuffer> data, long length, boolean includeTextDetails, FormContentType formContentType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc34e20f6c5b4d8fe834d364de27fafbe1c8d7ea"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI1MzM5Mg==", "bodyText": "receiptAnalyzeActivationOperation and receiptStreamActivationOperation are identical. Consider reducing these into a single method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r398253392", "createdAt": "2020-03-26T00:39:32Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -0,0 +1,215 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl;\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeOperationResult;\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeReceiptAsyncHeaders;\n+import com.azure.ai.formrecognizer.implementation.models.ContentType;\n+import com.azure.ai.formrecognizer.implementation.models.SourcePath;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.ReceiptPageResult;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollResponse;\n+import com.azure.core.util.polling.PollerFlux;\n+import com.azure.core.util.polling.PollingContext;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+import java.time.Duration;\n+import java.util.UUID;\n+import java.util.function.Function;\n+\n+import static com.azure.ai.formrecognizer.Transforms.toReceipt;\n+import static com.azure.core.util.FluxUtil.monoError;\n+\n+/**\n+ * This class provides an asynchronous client that contains all the operations that apply to Azure Form Recognizer.\n+ * Operations allowed by the client are language detection, sentiment analysis, and recognition entities, PII entities,\n+ * and linked entities of a text input or list of test inputs.\n+ *\n+ * <p><strong>Instantiating an asynchronous Form Recognizer Client</strong></p>\n+ * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation}\n+ *\n+ * <p>View {@link FormRecognizerClientBuilder} for additional ways to construct the client.</p>\n+ *\n+ * @see FormRecognizerClientBuilder\n+ */\n+@ServiceClient(builder = FormRecognizerClientBuilder.class, isAsync = true)\n+public final class FormRecognizerAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(FormRecognizerAsyncClient.class);\n+    private final FormRecognizerClientImpl service;\n+    private final FormRecognizerServiceVersion serviceVersion;\n+\n+    /**\n+     * Create a {@code FormRecognizerAsyncClient} that sends requests to the Form Recognizer services's endpoint. Each\n+     * service call goes through the {@link FormRecognizerClientBuilder#pipeline(HttpPipeline)}  http pipeline}.\n+     *\n+     * @param service The proxy service used to perform REST calls.\n+     * @param serviceVersion The versions of Azure Form Recognizer supported by this client library.\n+     */\n+    FormRecognizerAsyncClient(FormRecognizerClientImpl service, FormRecognizerServiceVersion serviceVersion) {\n+        this.service = service;\n+        this.serviceVersion = serviceVersion;\n+    }\n+\n+    /**\n+     * Gets the service version the client is using.\n+     *\n+     * @return the service version the client is using.\n+     */\n+    public FormRecognizerServiceVersion getServiceVersion() {\n+        return serviceVersion;\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     *\n+     * @param sourceUrl The source URL to the input document. Size of the file must be less than 20 MB.\n+     * @param includeTextDetails Include text lines and element references in the result.\n+     * @param pollInterval Duration between each poll for the operation status. If none is specified, a default of\n+     * one second is used.\n+     *\n+     * @return A {@link PollerFlux} that polls the extract receipt operation until it has completed, has failed, or has\n+     * been cancelled.\n+     */\n+    public PollerFlux<OperationResult, IterableStream<ReceiptPageResult>> beginExtractReceipt(String sourceUrl,\n+                                                                                              boolean includeTextDetails,\n+                                                                                              Duration pollInterval) {\n+        final Duration interval = pollInterval != null ? pollInterval : Duration.ofSeconds(1);\n+        return new PollerFlux<OperationResult, IterableStream<ReceiptPageResult>>(interval,\n+            receiptAnalyzeActivationOperation(sourceUrl, includeTextDetails),\n+            extractReceiptPollOperation(),\n+            (activationResponse, context) -> Mono.error(new RuntimeException(\"Cancellation is not supported\")),\n+            fetchExtractReceiptResult());\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts data using optical character recognition (OCR) and a prebuilt receipt\n+     * trained model.\n+     *\n+     * @param data The data of the document to be extract receipt information from.\n+     * @param length The exact length of the data. Size of the file must be less than 20 MB.\n+     * @param includeTextDetails Include text lines and element references in the result.\n+     * @param formContentType Supported Media types.\n+     * @param pollInterval Duration between each poll for the operation status. If none is specified, a default of\n+     * one second is used.\n+     *\n+     * @return A {@link PollerFlux} that polls the extract receipt operation until it has completed, has failed, or has\n+     * been cancelled.\n+     */\n+    public PollerFlux<OperationResult, IterableStream<ReceiptPageResult>>\n+    beginExtractReceipt(Flux<ByteBuffer> data, long length, boolean includeTextDetails, FormContentType formContentType,\n+                        Duration pollInterval) {\n+        final Duration interval = pollInterval != null ? pollInterval : Duration.ofSeconds(1);\n+        return new PollerFlux<OperationResult, IterableStream<ReceiptPageResult>>(interval,\n+            receiptStreamActivationOperation(data, length, formContentType, includeTextDetails),\n+            extractReceiptPollOperation(),\n+            (activationResponse, context) -> Mono.error(new RuntimeException(\"Cancellation is not supported\")),\n+            fetchExtractReceiptResult());\n+    }\n+\n+    private Function<PollingContext<OperationResult>, Mono<OperationResult>> receiptAnalyzeActivationOperation(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc34e20f6c5b4d8fe834d364de27fafbe1c8d7ea"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU4OTAyOA==", "bodyText": "Sync APIs should have Context arg", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r398589028", "createdAt": "2020-03-26T13:53:07Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerClient.java", "diffHunk": "@@ -0,0 +1,86 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.ReceiptPageResult;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.PollerFlux;\n+import com.azure.core.util.polling.SyncPoller;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.time.Duration;\n+\n+/**\n+ * This class provides a synchronous client that contains all the operations that apply to Azure Form Recognizer.\n+ * Operations allowed by the client are, detect language, recognize entities, recognize PII entities,\n+ * recognize linked entities, and analyze sentiment for a text input or a list of text inputs.\n+ *\n+ * <p><strong>Instantiating a synchronous Form Recognizer Client</strong></p>\n+ * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerClient.instantiation}\n+ *\n+ * <p>View {@link FormRecognizerClientBuilder this} for additional ways to construct the client.</p>\n+ *\n+ * @see FormRecognizerClientBuilder\n+ */\n+@ServiceClient(builder = FormRecognizerClientBuilder.class)\n+public final class FormRecognizerClient {\n+    private final FormRecognizerAsyncClient client;\n+\n+    /**\n+     * Create a {@code FormRecognizerClient client} that sends requests to the Form Recognizer service's endpoint.\n+     * Each service call goes through the {@link FormRecognizerClientBuilder#pipeline http pipeline}.\n+     *\n+     * @param client The {@link FormRecognizerClient} that the client routes its request through.\n+     */\n+    FormRecognizerClient(FormRecognizerAsyncClient client) {\n+        this.client = client;\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     *\n+     * @param sourceUrl The source URL to the input document. Size of the file must be less than 20 MB.\n+     * @param includeTextDetails Include text lines and element references in the result.\n+     * @param pollInterval Duration between each poll for the operation status. If none is specified, a default of\n+     * one second is used.\n+     *\n+     * @return A {@link SyncPoller} to poll the progress of the extract receipt operation until it has completed,\n+     * has failed, or has been cancelled.\n+     */\n+    public SyncPoller<OperationResult, IterableStream<ReceiptPageResult>> beginExtractReceipt(String sourceUrl,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc34e20f6c5b4d8fe834d364de27fafbe1c8d7ea"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU5NzI3MQ==", "bodyText": "Does FormRecognizer not support connectionString?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r398597271", "createdAt": "2020-03-26T14:03:51Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerClientBuilder.java", "diffHunk": "@@ -0,0 +1,354 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.ApiKeyCredentialPolicy;\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl;\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImplBuilder;\n+import com.azure.ai.formrecognizer.models.FormRecognizerApiKeyCredential;\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.HttpPolicyProviders;\n+import com.azure.core.http.policy.RequestIdPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.temporal.ChronoUnit;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help instantiation of {@link FormRecognizerClient FormRecognizerClients}\n+ * and {@link FormRecognizerAsyncClient FormRecognizerAsyncClients}, call {@link #buildClient()} buildClient} and\n+ * {@link #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ *\n+ * <p>\n+ * The client needs the service endpoint of the Azure Form Recognizer to access the resource service.\n+ * {@link #apiKey(FormRecognizerApiKeyCredential) apiKey(FormRecognizerApiKeyCredential)} or\n+ * {@link #credential(TokenCredential) credential(TokenCredential)} give the builder access credential.\n+ * </p>\n+ * TODO: add code snippets\n+ * <p>\n+ * Another way to construct the client is using a {@link HttpPipeline}. The pipeline gives the client an\n+ * authenticated way to communicate with the service. Set the pipeline with {@link #pipeline(HttpPipeline) this} and\n+ * set the service endpoint with {@link #endpoint(String) this}. Using a\n+ * pipeline requires additional setup but allows for finer control on how the {@link FormRecognizerClient} and\n+ * {@link FormRecognizerAsyncClient} is built.\n+ * </p>\n+ *\n+ * @see FormRecognizerAsyncClient\n+ * @see FormRecognizerClient\n+ */\n+@ServiceClientBuilder(serviceClients = {FormRecognizerAsyncClient.class, FormRecognizerClient.class})\n+public final class FormRecognizerClientBuilder {\n+    private static final String ECHO_REQUEST_ID_HEADER = \"x-ms-return-client-request-id\";\n+    private static final String CONTENT_TYPE_HEADER = \"Content-Type\";\n+    private static final String CONTENT_TYPE_HEADER_VALUE = \"application/json\";\n+    private static final String ACCEPT_HEADER = \"Accept\";\n+    private static final String TEXT_ANALYTICS_PROPERTIES = \"azure-ai-textanalytics.properties\";\n+    private static final String NAME = \"name\";\n+    private static final String VERSION = \"version\";\n+    private static final RetryPolicy DEFAULT_RETRY_POLICY = new RetryPolicy(\"retry-after-ms\", ChronoUnit.MILLIS);\n+    private static final String DEFAULT_SCOPE = \"https://cognitiveservices.azure.com/.default\";\n+\n+    private final ClientLogger logger = new ClientLogger(FormRecognizerClientBuilder.class);\n+    private final List<HttpPipelinePolicy> policies;\n+    private final HttpHeaders headers;\n+    private final String clientName;\n+    private final String clientVersion;\n+\n+    private String endpoint;\n+    private FormRecognizerApiKeyCredential credential;\n+    private TokenCredential tokenCredential;\n+    private HttpClient httpClient;\n+    private HttpLogOptions httpLogOptions;\n+    private HttpPipeline httpPipeline;\n+    private Configuration configuration;\n+    private RetryPolicy retryPolicy;\n+    private FormRecognizerServiceVersion version;\n+\n+    /**\n+     * The constructor with defaults.\n+     */\n+    public FormRecognizerClientBuilder() {\n+        policies = new ArrayList<>();\n+        httpLogOptions = new HttpLogOptions();\n+\n+        Map<String, String> properties = CoreUtils.getProperties(TEXT_ANALYTICS_PROPERTIES);\n+        clientName = properties.getOrDefault(NAME, \"UnknownName\");\n+        clientVersion = properties.getOrDefault(VERSION, \"UnknownVersion\");\n+\n+        headers = new HttpHeaders()\n+            .put(ECHO_REQUEST_ID_HEADER, \"true\")\n+            .put(ACCEPT_HEADER, CONTENT_TYPE_HEADER_VALUE);\n+    }\n+\n+    /**\n+     * Creates a {@link FormRecognizerClient} based on options set in the builder. Every time\n+     * {@code buildClient()} is called a new instance of {@link FormRecognizerClient} is created.\n+     *\n+     * <p>\n+     * If {@link #pipeline(HttpPipeline) pipeline} is set, then the {@code pipeline} and\n+     * {@link #endpoint(String) endpoint} are used to create the {@link FormRecognizerClient client}. All other builder\n+     * settings are ignored\n+     * </p>\n+     *\n+     * @return A FormRecognizerClient with the options set from the builder.\n+     * @throws NullPointerException if {@link #endpoint(String) endpoint} or\n+     * {@link #apiKey(FormRecognizerApiKeyCredential) apiKey} has not been set.\n+     * @throws IllegalArgumentException if {@link #endpoint(String) endpoint} cannot be parsed into a valid URL.\n+     */\n+    public FormRecognizerClient buildClient() {\n+        return new FormRecognizerClient(buildAsyncClient());\n+    }\n+\n+    /**\n+     * Creates a {@link FormRecognizerAsyncClient} based on options set in the builder. Every time\n+     * {@code buildAsyncClient()} is called a new instance of {@link FormRecognizerAsyncClient} is created.\n+     *\n+     * <p>\n+     * If {@link #pipeline(HttpPipeline) pipeline} is set, then the {@code pipeline} and\n+     * {@link #endpoint(String) endpoint} are used to create the {@link FormRecognizerClient client}. All other builder\n+     * settings are ignored.\n+     * </p>\n+     *\n+     * @return A FormRecognizerAsyncClient with the options set from the builder.\n+     * @throws NullPointerException if {@link #endpoint(String) endpoint} or\n+     * {@link #apiKey(FormRecognizerApiKeyCredential) apiKey} has not been set.\n+     * @throws IllegalArgumentException if {@link #endpoint(String) endpoint} cannot be parsed into a valid URL.\n+     */\n+    public FormRecognizerAsyncClient buildAsyncClient() {\n+        // Global Env configuration store\n+        final Configuration buildConfiguration = (configuration == null)\n+            ? Configuration.getGlobalConfiguration().clone() : configuration;\n+        // Service Version\n+        final FormRecognizerServiceVersion serviceVersion =\n+            version != null ? version : FormRecognizerServiceVersion.getLatest();\n+\n+        // Endpoint cannot be null, which is required in request authentication\n+        Objects.requireNonNull(endpoint, \"'Endpoint' is required and can not be null.\");\n+\n+        HttpPipeline pipeline = httpPipeline;\n+        // Create a default Pipeline if it is not given\n+        if (pipeline == null) {\n+            // Closest to API goes first, closest to wire goes last.\n+            final List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+            // Authentications\n+            if (tokenCredential != null) {\n+                // User token based policy\n+                policies.add(new BearerTokenAuthenticationPolicy(tokenCredential, DEFAULT_SCOPE));\n+            } else if (credential != null) {\n+                policies.add(new ApiKeyCredentialPolicy(credential));\n+            } else {\n+                // Throw exception that credential and tokenCredential cannot be null\n+                throw logger.logExceptionAsError(\n+                    new IllegalArgumentException(\"Missing credential information while building a client.\"));\n+            }\n+\n+            policies.add(new UserAgentPolicy(httpLogOptions.getApplicationId(), clientName, clientVersion,\n+                buildConfiguration));\n+            policies.add(new RequestIdPolicy());\n+            policies.add(new AddHeadersPolicy(headers));\n+            policies.add(new AddDatePolicy());\n+\n+            HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+            policies.add(retryPolicy == null ? DEFAULT_RETRY_POLICY : retryPolicy);\n+            policies.addAll(this.policies);\n+            HttpPolicyProviders.addAfterRetryPolicies(policies);\n+\n+            policies.add(new HttpLoggingPolicy(httpLogOptions));\n+\n+            pipeline = new HttpPipelineBuilder()\n+                .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+                .httpClient(httpClient)\n+                .build();\n+        }\n+\n+        final FormRecognizerClientImpl formRecognizerAPI = new FormRecognizerClientImplBuilder()\n+            .endpoint(endpoint)\n+            .pipeline(pipeline)\n+            .build();\n+\n+        return new FormRecognizerAsyncClient(formRecognizerAPI, serviceVersion);\n+    }\n+\n+    /**\n+     * Sets the service endpoint for the Azure Form Recognizer instance.\n+     *\n+     * @param endpoint The URL of the Azure Form Recognizer instance service requests to and receive responses from.\n+     * @return The updated FormRecognizerClientImplBuilder object.\n+     * @throws NullPointerException if {@code endpoint} is null\n+     * @throws IllegalArgumentException if {@code endpoint} cannot be parsed into a valid URL.\n+     */\n+    public FormRecognizerClientBuilder endpoint(String endpoint) {\n+        Objects.requireNonNull(endpoint, \"'endpoint' cannot be null.\");\n+\n+        try {\n+            new URL(endpoint);\n+        } catch (MalformedURLException ex) {\n+            throw logger.logExceptionAsWarning(new IllegalArgumentException(\"'endpoint' must be a valid URL.\", ex));\n+        }\n+\n+        if (endpoint.endsWith(\"/\")) {\n+            this.endpoint = endpoint.substring(0, endpoint.length() - 1);\n+        } else {\n+            this.endpoint = endpoint;\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the credential to use when authenticating HTTP requests for this FormRecognizerClientImplBuilder.\n+     *\n+     * @param apiKeyCredential API key credential\n+     *\n+     * @return The updated FormRecognizerClientImplBuilder object.\n+     * @throws NullPointerException If {@code apiKeyCredential} is {@code null}\n+     */\n+    public FormRecognizerClientBuilder apiKey(FormRecognizerApiKeyCredential apiKeyCredential) {\n+        this.credential = Objects.requireNonNull(apiKeyCredential, \"'apiKeyCredential' cannot be null.\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the {@link TokenCredential} used to authenticate HTTP requests.\n+     *\n+     * @param tokenCredential TokenCredential used to authenticate HTTP requests.\n+     * @return The updated FormRecognizerClientImplBuilder object.\n+     * @throws NullPointerException If {@code tokenCredential} is {@code null}.\n+     */\n+    public FormRecognizerClientBuilder credential(TokenCredential tokenCredential) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc34e20f6c5b4d8fe834d364de27fafbe1c8d7ea"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU5OTgyNg==", "bodyText": "nit: private static final", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r398599826", "createdAt": "2020-03-26T14:07:21Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java", "diffHunk": "@@ -0,0 +1,212 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeResult;\n+import com.azure.ai.formrecognizer.implementation.models.DocumentResult;\n+import com.azure.ai.formrecognizer.implementation.models.ReadResult;\n+import com.azure.ai.formrecognizer.implementation.models.TextLine;\n+import com.azure.ai.formrecognizer.implementation.models.TextWord;\n+import com.azure.ai.formrecognizer.models.BoundingBox;\n+import com.azure.ai.formrecognizer.models.DimensionUnit;\n+import com.azure.ai.formrecognizer.models.Element;\n+import com.azure.ai.formrecognizer.models.FieldValue;\n+import com.azure.ai.formrecognizer.models.FloatValue;\n+import com.azure.ai.formrecognizer.models.IntegerValue;\n+import com.azure.ai.formrecognizer.models.LineElement;\n+import com.azure.ai.formrecognizer.models.PageInfo;\n+import com.azure.ai.formrecognizer.models.Point;\n+import com.azure.ai.formrecognizer.models.ReceiptItem;\n+import com.azure.ai.formrecognizer.models.ReceiptPageResult;\n+import com.azure.ai.formrecognizer.models.ReceiptType;\n+import com.azure.ai.formrecognizer.models.StringValue;\n+import com.azure.ai.formrecognizer.models.TextLanguage;\n+import com.azure.ai.formrecognizer.models.WordElement;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Helper class to convert service level models to SDK exposed models.\n+ */\n+final class Transforms {\n+    private final static ClientLogger LOGGER = new ClientLogger(Transforms.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc34e20f6c5b4d8fe834d364de27fafbe1c8d7ea"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYxMjAzOQ==", "bodyText": "Can this be moved to implementation package?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r398612039", "createdAt": "2020-03-26T14:23:19Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Utility.java", "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * Utility method class.\n+ */\n+public class Utility {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc34e20f6c5b4d8fe834d364de27fafbe1c8d7ea"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYxNTg1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Defines values for LengthUnit.\n          \n          \n            \n             * Defines values for DimensionUnit.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r398615852", "createdAt": "2020-03-26T14:28:04Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/DimensionUnit.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.ai.formrecognizer.models;\n+\n+import com.azure.core.util.ExpandableStringEnum;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+\n+import java.util.Collection;\n+\n+/**\n+ * Defines values for LengthUnit.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc34e20f6c5b4d8fe834d364de27fafbe1c8d7ea"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYxNjU4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the parsed LengthUnit object, or null if unable to parse.\n          \n          \n            \n                 * @return the parsed DimensionUnit object, or null if unable to parse.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r398616581", "createdAt": "2020-03-26T14:28:55Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/DimensionUnit.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.ai.formrecognizer.models;\n+\n+import com.azure.core.util.ExpandableStringEnum;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+\n+import java.util.Collection;\n+\n+/**\n+ * Defines values for LengthUnit.\n+ */\n+public final class DimensionUnit extends ExpandableStringEnum<DimensionUnit> {\n+    /**\n+     * Static value en for Language.\n+     */\n+    public static final DimensionUnit PIXEL = fromString(\"pixel\");\n+\n+    /**\n+     * Static value en for Language.\n+     */\n+    public static final DimensionUnit INCH = fromString(\"inch\");\n+\n+    /**\n+     * Parses a serialized value to a {@code DimensionUnit} instance.\n+     *\n+     * @param value the serialized value to parse.\n+     * @return the parsed LengthUnit object, or null if unable to parse.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc34e20f6c5b4d8fe834d364de27fafbe1c8d7ea"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYxOTAxMA==", "bodyText": "Is this the only model class in public package that's generated by autorest?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r398619010", "createdAt": "2020-03-26T14:32:00Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/ElementType.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc34e20f6c5b4d8fe834d364de27fafbe1c8d7ea"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYyMzE4OQ==", "bodyText": "You can now use AzureKeyCredential in azure-core instead of defining custom key credential.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r398623189", "createdAt": "2020-03-26T14:37:28Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FormRecognizerApiKeyCredential.java", "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer.models;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Objects;\n+\n+/**\n+ * API key credential that shared across cognitive services, or restrict to single service.\n+ *\n+ * <p>Be able to rotate an existing API key</p>\n+ * {@codesnippet com.azure.ai.formrecognizer.models.FormRecognizerApiKeyCredential}\n+ *\n+ */\n+public final class FormRecognizerApiKeyCredential {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc34e20f6c5b4d8fe834d364de27fafbe1c8d7ea"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYyNDQ5Ng==", "bodyText": "missing javadoc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r398624496", "createdAt": "2020-03-26T14:39:08Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/ReceiptType.java", "diffHunk": "@@ -0,0 +1,47 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer.models;\n+\n+import com.azure.core.annotation.Immutable;\n+\n+/**\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc34e20f6c5b4d8fe834d364de27fafbe1c8d7ea"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYyNDgwMA==", "bodyText": "javadoc missing for this class.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r398624800", "createdAt": "2020-03-26T14:39:32Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/ReceiptPageResult.java", "diffHunk": "@@ -0,0 +1,146 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer.models;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.util.List;\n+\n+@Fluent\n+public class ReceiptPageResult {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc34e20f6c5b4d8fe834d364de27fafbe1c8d7ea"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYyNTM1OQ==", "bodyText": "Javadoc missing for these methods. Also, look at other model classes in public package to ensure all of them have javadocs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r398625359", "createdAt": "2020-03-26T14:40:15Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/StringValue.java", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer.models;\n+\n+import java.util.List;\n+\n+/**\n+ * Class to represent the Float value for\n+ * {@link com.azure.ai.formrecognizer.implementation.models.FieldValue#getValueString()}\n+ */\n+public class StringValue extends FieldValue<String> {\n+    /*\n+     * String value.\n+     */\n+    private String valueString;\n+\n+    /**\n+     * Constructs a StringValue.\n+     *\n+     * @param text The text content of the extracted field.\n+     * @param boundingBox Bounding box of the field value.\n+     * @param valueString String value.\n+     */\n+    public StringValue(String text, BoundingBox boundingBox, String valueString) {\n+        super(text, boundingBox);\n+        this.valueString = valueString;\n+    }\n+\n+    @Override\n+    public String getValue() {\n+        return this.valueString;\n+    }\n+\n+    @Override\n+    public void setValue(String value) {\n+        this.valueString = value;\n+    }\n+\n+    @Override\n+    public List<Element> getElements() {\n+        return super.getElements();\n+    }\n+\n+    @Override\n+    public Float getConfidence() {\n+        return super.getConfidence();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc34e20f6c5b4d8fe834d364de27fafbe1c8d7ea"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYyNzI2Ng==", "bodyText": "The directory name for all sample Java files is incorrect.\n/src/samples/java/com.azure.ai.formrecognizer/ExtractPrebuiltReceiptAsync.java", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r398627266", "createdAt": "2020-03-26T14:42:44Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com.azure.ai.formrecognizer/ExtractPrebuiltReceiptAsync.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc34e20f6c5b4d8fe834d364de27fafbe1c8d7ea"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYyOTAzNg==", "bodyText": "nit: fix formatting in both sync and async client classes.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r398629036", "createdAt": "2020-03-26T14:45:04Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -0,0 +1,215 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl;\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeOperationResult;\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeReceiptAsyncHeaders;\n+import com.azure.ai.formrecognizer.implementation.models.ContentType;\n+import com.azure.ai.formrecognizer.implementation.models.SourcePath;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.ReceiptPageResult;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollResponse;\n+import com.azure.core.util.polling.PollerFlux;\n+import com.azure.core.util.polling.PollingContext;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+import java.time.Duration;\n+import java.util.UUID;\n+import java.util.function.Function;\n+\n+import static com.azure.ai.formrecognizer.Transforms.toReceipt;\n+import static com.azure.core.util.FluxUtil.monoError;\n+\n+/**\n+ * This class provides an asynchronous client that contains all the operations that apply to Azure Form Recognizer.\n+ * Operations allowed by the client are language detection, sentiment analysis, and recognition entities, PII entities,\n+ * and linked entities of a text input or list of test inputs.\n+ *\n+ * <p><strong>Instantiating an asynchronous Form Recognizer Client</strong></p>\n+ * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation}\n+ *\n+ * <p>View {@link FormRecognizerClientBuilder} for additional ways to construct the client.</p>\n+ *\n+ * @see FormRecognizerClientBuilder\n+ */\n+@ServiceClient(builder = FormRecognizerClientBuilder.class, isAsync = true)\n+public final class FormRecognizerAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(FormRecognizerAsyncClient.class);\n+    private final FormRecognizerClientImpl service;\n+    private final FormRecognizerServiceVersion serviceVersion;\n+\n+    /**\n+     * Create a {@code FormRecognizerAsyncClient} that sends requests to the Form Recognizer services's endpoint. Each\n+     * service call goes through the {@link FormRecognizerClientBuilder#pipeline(HttpPipeline)}  http pipeline}.\n+     *\n+     * @param service The proxy service used to perform REST calls.\n+     * @param serviceVersion The versions of Azure Form Recognizer supported by this client library.\n+     */\n+    FormRecognizerAsyncClient(FormRecognizerClientImpl service, FormRecognizerServiceVersion serviceVersion) {\n+        this.service = service;\n+        this.serviceVersion = serviceVersion;\n+    }\n+\n+    /**\n+     * Gets the service version the client is using.\n+     *\n+     * @return the service version the client is using.\n+     */\n+    public FormRecognizerServiceVersion getServiceVersion() {\n+        return serviceVersion;\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     *\n+     * @param sourceUrl The source URL to the input document. Size of the file must be less than 20 MB.\n+     * @param includeTextDetails Include text lines and element references in the result.\n+     * @param pollInterval Duration between each poll for the operation status. If none is specified, a default of\n+     * one second is used.\n+     *\n+     * @return A {@link PollerFlux} that polls the extract receipt operation until it has completed, has failed, or has\n+     * been cancelled.\n+     */\n+    public PollerFlux<OperationResult, IterableStream<ReceiptPageResult>> beginExtractReceipt(String sourceUrl,\n+                                                                                              boolean includeTextDetails,\n+                                                                                              Duration pollInterval) {\n+        final Duration interval = pollInterval != null ? pollInterval : Duration.ofSeconds(1);\n+        return new PollerFlux<OperationResult, IterableStream<ReceiptPageResult>>(interval,\n+            receiptAnalyzeActivationOperation(sourceUrl, includeTextDetails),\n+            extractReceiptPollOperation(),\n+            (activationResponse, context) -> Mono.error(new RuntimeException(\"Cancellation is not supported\")),\n+            fetchExtractReceiptResult());\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts data using optical character recognition (OCR) and a prebuilt receipt\n+     * trained model.\n+     *\n+     * @param data The data of the document to be extract receipt information from.\n+     * @param length The exact length of the data. Size of the file must be less than 20 MB.\n+     * @param includeTextDetails Include text lines and element references in the result.\n+     * @param formContentType Supported Media types.\n+     * @param pollInterval Duration between each poll for the operation status. If none is specified, a default of\n+     * one second is used.\n+     *\n+     * @return A {@link PollerFlux} that polls the extract receipt operation until it has completed, has failed, or has\n+     * been cancelled.\n+     */\n+    public PollerFlux<OperationResult, IterableStream<ReceiptPageResult>>\n+    beginExtractReceipt(Flux<ByteBuffer> data, long length, boolean includeTextDetails, FormContentType formContentType,\n+                        Duration pollInterval) {\n+        final Duration interval = pollInterval != null ? pollInterval : Duration.ofSeconds(1);\n+        return new PollerFlux<OperationResult, IterableStream<ReceiptPageResult>>(interval,\n+            receiptStreamActivationOperation(data, length, formContentType, includeTextDetails),\n+            extractReceiptPollOperation(),\n+            (activationResponse, context) -> Mono.error(new RuntimeException(\"Cancellation is not supported\")),\n+            fetchExtractReceiptResult());\n+    }\n+\n+    private Function<PollingContext<OperationResult>, Mono<OperationResult>> receiptAnalyzeActivationOperation(\n+        String sourceUrl, boolean includeTextDetails) {\n+        return (pollingContext) -> {\n+            try {\n+                return service.analyzeReceiptAsyncWithResponseAsync(includeTextDetails,\n+                    new SourcePath().setSource(sourceUrl))\n+                    .map(response -> {\n+                        final AnalyzeReceiptAsyncHeaders headers = response.getDeserializedHeaders();\n+                        return new OperationResult(parseModelId(headers.getOperationLocation()));\n+                    });\n+            } catch (RuntimeException ex) {\n+                return monoError(logger, ex);\n+            }\n+        };\n+    }\n+\n+    private Function<PollingContext<OperationResult>, Mono<OperationResult>> receiptStreamActivationOperation(\n+        Flux<ByteBuffer> buffer, long length, FormContentType formContentType, boolean includeTextDetails) {\n+        return (pollingContext) -> {\n+            try {\n+                return service.analyzeReceiptAsyncWithResponseAsync(includeTextDetails,\n+                    ContentType.fromString(formContentType.toString()), buffer, length)\n+                    .map(response -> {\n+                        final AnalyzeReceiptAsyncHeaders headers = response.getDeserializedHeaders();\n+                        return new OperationResult(parseModelId(headers.getOperationLocation()));\n+                    });\n+            } catch (RuntimeException ex) {\n+                return monoError(logger, ex);\n+            }\n+        };\n+    }\n+\n+    private Function<PollingContext<OperationResult>, Mono<PollResponse<OperationResult>>>\n+    extractReceiptPollOperation() {\n+        return (pollingContext) -> {\n+            PollResponse<OperationResult> operationResultPollResponse = pollingContext.getLatestResponse();\n+            String modelId = operationResultPollResponse.getValue().getResultId();\n+            try {\n+                UUID resultUid = UUID.fromString(modelId);\n+                return service.getAnalyzeReceiptResultWithResponseAsync(resultUid)\n+                    .flatMap(modelSimpleResponse -> processAnalyzeModelResponse(modelSimpleResponse, operationResultPollResponse));\n+            } catch (HttpResponseException e) {\n+                logger.logExceptionAsError(e);\n+                return Mono.just(new PollResponse<>(LongRunningOperationStatus.FAILED, null));\n+            }\n+        };\n+    }\n+\n+    private Function<PollingContext<OperationResult>, Mono<IterableStream<ReceiptPageResult>>>\n+    fetchExtractReceiptResult() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc34e20f6c5b4d8fe834d364de27fafbe1c8d7ea"}, "originalPosition": 172}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMDkwMTc2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#pullrequestreview-382090176", "createdAt": "2020-03-26T14:54:14Z", "commit": {"oid": "dc34e20f6c5b4d8fe834d364de27fafbe1c8d7ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDo1NDoxNFrOF8K1XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDo1NDoxNFrOF8K1XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYzNjM4MQ==", "bodyText": "@samvaity, FYI - The analyze step is failing because of this version. The dependency version in version_client.txt for azure-core-http-netty is 1.4.0.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r398636381", "createdAt": "2020-03-26T14:54:14Z", "author": {"login": "JimSuplizio"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/pom.xml", "diffHunk": "@@ -0,0 +1,42 @@\n+<!-- Copyright (c) Microsoft Corporation. All rights reserved.\n+     Licensed under the MIT License. -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-client-sdk-parent</artifactId>\n+    <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+    <relativePath>../../../pom.client.xml</relativePath>\n+  </parent>\n+\n+  <groupId>com.azure</groupId>\n+  <artifactId>azure-ai-formrecognizer</artifactId>\n+  <version>1.0.0-beta.1</version> <!-- {x-version-update;com.azure:azure-ai-formrecognizer;current} -->\n+\n+  <name>Microsoft Azure client library for Form Recognizer</name>\n+  <description>This package contains the Microsoft Azure Cognitive Services Form Recognizer SDK.</description>\n+  <url>https://github.com/Azure/azure-sdk-for-java</url>\n+\n+  <distributionManagement>\n+    <site>\n+      <id>azure-java-build-docs</id>\n+      <url>${site.url}/site/${project.artifactId}</url>\n+    </site>\n+  </distributionManagement>\n+\n+  <scm>\n+    <url>scm:git:https://github.com/Azure/azure-sdk-for-java</url>\n+    <connection>scm:git:git@github.com:Azure/azure-sdk-for-java.git</connection>\n+    <tag>HEAD</tag>\n+  </scm>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core-http-netty</artifactId>\n+      <version>1.2.0</version> <!-- {x-version-update;com.azure:azure-core-http-netty;dependency} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc34e20f6c5b4d8fe834d364de27fafbe1c8d7ea"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNjAwMjY4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#pullrequestreview-383600268", "createdAt": "2020-03-30T07:42:14Z", "commit": {"oid": "ed3fd814240040400f2ca738cd422d3f8c5f0488"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNzo0MjoxNFrOF9dNPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNzo0MjoxNFrOF9dNPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk4NTk4Mg==", "bodyText": "is this file required?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r399985982", "createdAt": "2020-03-30T07:42:14Z", "author": {"login": "mssfang"}, "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/Untitled-1.txt", "diffHunk": "@@ -0,0 +1,1132 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed3fd814240040400f2ca738cd422d3f8c5f0488"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNjAwNzk1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#pullrequestreview-383600795", "createdAt": "2020-03-30T07:42:57Z", "commit": {"oid": "ed3fd814240040400f2ca738cd422d3f8c5f0488"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNzo0Mjo1N1rOF9dO5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNzo0Mjo1N1rOF9dO5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk4NjQwNA==", "bodyText": "NIT: alianment", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r399986404", "createdAt": "2020-03-30T07:42:57Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/pom.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<!-- Copyright (c) Microsoft Corporation. All rights reserved.\n+     Licensed under the MIT License. -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-client-sdk-parent</artifactId>\n+    <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+    <relativePath>../../../pom.client.xml</relativePath>\n+  </parent>\n+\n+  <groupId>com.azure</groupId>\n+  <artifactId>azure-ai-formrecognizer</artifactId>\n+  <version>1.0.0-beta.1</version> <!-- {x-version-update;com.azure:azure-ai-formrecognizer;current} -->\n+\n+  <name>Microsoft Azure client library for Form Recognizer</name>\n+  <description>This package contains the Microsoft Azure Cognitive Services Form Recognizer SDK.</description>\n+  <url>https://github.com/Azure/azure-sdk-for-java</url>\n+\n+  <distributionManagement>\n+    <site>\n+      <id>azure-java-build-docs</id>\n+      <url>${site.url}/site/${project.artifactId}</url>\n+    </site>\n+  </distributionManagement>\n+\n+  <scm>\n+    <url>scm:git:https://github.com/Azure/azure-sdk-for-java</url>\n+    <connection>scm:git:git@github.com:Azure/azure-sdk-for-java.git</connection>\n+    <tag>HEAD</tag>\n+  </scm>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core-http-netty</artifactId>\n+      <version>1.4.0</version> <!-- {x-version-update;com.azure:azure-core-http-netty;dependency} -->\n+    </dependency>\n+\n+  <!-- Test Dependencies -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed3fd814240040400f2ca738cd422d3f8c5f0488"}, "originalPosition": 42}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a5e57f47e30fb216b0b70b981100f3aae4ff23a5", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a5e57f47e30fb216b0b70b981100f3aae4ff23a5", "committedDate": "2020-03-30T07:54:21Z", "message": "update to AzureKeyCredential"}, "afterCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/eb336a0ab077827ac8a91e604bc863cddf9ee821", "committedDate": "2020-03-30T07:57:32Z", "message": "update to AzureKeyCredential"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MDcxOTM4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#pullrequestreview-384071938", "createdAt": "2020-03-30T17:23:49Z", "commit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "state": "COMMENTED", "comments": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzoyMzo0OVrOF90Rkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo1Njo0N1rOF93xhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2MzkyMw==", "bodyText": "Does a - read better than a /?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            key/value pairs and table data from form documents.\n          \n          \n            \n            key-value pairs and table data from form documents.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400363923", "createdAt": "2020-03-30T17:23:49Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -0,0 +1,183 @@\n+# Azure Form Recognizer client library for Java\n+Form Recognizer is a cloud-based cognitive service that uses machine learning technology to identify and extract text, \n+key/value pairs and table data from form documents.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2NDk3MQ==", "bodyText": "Is there something missing in this sentence or should either be dropped?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            class. You will need an **endpoint** and either an **API key** to instantiate a client \n          \n          \n            \n            class. You will need an **endpoint** and an **API key** to instantiate a client", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400364971", "createdAt": "2020-03-30T17:25:28Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -0,0 +1,183 @@\n+# Azure Form Recognizer client library for Java\n+Form Recognizer is a cloud-based cognitive service that uses machine learning technology to identify and extract text, \n+key/value pairs and table data from form documents.\n+\n+[Source code][source_code] | [Package (Maven)][package] | [API reference documentation][api_reference_doc] | [Product Documentation][product_documentation] | [Samples][samples_readme]\n+\n+## Getting started\n+\n+### Prerequisites\n+- Java Development Kit (JDK) with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- [Cognitive Services or Form Recognizer account][form_recognizer_account] to use this package.\n+\n+### Adding the package to your product\n+\n+[//]: # ({x-version-update-start;com.azure:azure-ai-formrecognizer;current})\n+```xml\n+<dependency>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-ai-formrecognizer</artifactId>\n+    <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+[//]: # ({x-version-update-end})\n+\n+### Create a Form Recognizer resource\n+Form Recognizer supports both [multi-service and single-service access][service_access]. Create a Cognitive Services \n+resource if you plan to access multiple cognitive services under a single endpoint/key. For Form Recognizer access only,\n+create a Form Recognizer resource.\n+\n+You can create either resource using the \n+\n+**Option 1:** [Azure Portal][create_new_resource] \n+\n+**Option 2:** [Azure CLI][azure_cli]\n+\n+Below is an example of how you can create a Form Recognizer resource using the CLI:\n+\n+```bash\n+# Create a new resource group to hold the Form Recognizer resource -\n+# if using an existing resource group, skip this step\n+az group create --name my-resource-group --location westus2\n+```\n+\n+```bash\n+# Create Form Recognizer\n+az cognitiveservices account create \\\n+    --name text-analytics-resource \\\n+    --resource-group my-resource-group \\\n+    --kind TextAnalytics \\\n+    --sku F0 \\\n+    --location westus2 \\\n+    --yes\n+```\n+### Authenticate the client\n+In order to interact with the Form Recognizer service, you will need to create an instance of the `FormRecognizerClient` \n+class. You will need an **endpoint** and either an **API key** to instantiate a client ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2NjYyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            object. And they can be found in the [Azure Portal][azure_portal] under the \"Quickstart\" in your created\n          \n          \n            \n            object. They can be found in the [Azure Portal][azure_portal] under the \"Quickstart\" in your created", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400366625", "createdAt": "2020-03-30T17:28:02Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -0,0 +1,183 @@\n+# Azure Form Recognizer client library for Java\n+Form Recognizer is a cloud-based cognitive service that uses machine learning technology to identify and extract text, \n+key/value pairs and table data from form documents.\n+\n+[Source code][source_code] | [Package (Maven)][package] | [API reference documentation][api_reference_doc] | [Product Documentation][product_documentation] | [Samples][samples_readme]\n+\n+## Getting started\n+\n+### Prerequisites\n+- Java Development Kit (JDK) with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- [Cognitive Services or Form Recognizer account][form_recognizer_account] to use this package.\n+\n+### Adding the package to your product\n+\n+[//]: # ({x-version-update-start;com.azure:azure-ai-formrecognizer;current})\n+```xml\n+<dependency>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-ai-formrecognizer</artifactId>\n+    <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+[//]: # ({x-version-update-end})\n+\n+### Create a Form Recognizer resource\n+Form Recognizer supports both [multi-service and single-service access][service_access]. Create a Cognitive Services \n+resource if you plan to access multiple cognitive services under a single endpoint/key. For Form Recognizer access only,\n+create a Form Recognizer resource.\n+\n+You can create either resource using the \n+\n+**Option 1:** [Azure Portal][create_new_resource] \n+\n+**Option 2:** [Azure CLI][azure_cli]\n+\n+Below is an example of how you can create a Form Recognizer resource using the CLI:\n+\n+```bash\n+# Create a new resource group to hold the Form Recognizer resource -\n+# if using an existing resource group, skip this step\n+az group create --name my-resource-group --location westus2\n+```\n+\n+```bash\n+# Create Form Recognizer\n+az cognitiveservices account create \\\n+    --name text-analytics-resource \\\n+    --resource-group my-resource-group \\\n+    --kind TextAnalytics \\\n+    --sku F0 \\\n+    --location westus2 \\\n+    --yes\n+```\n+### Authenticate the client\n+In order to interact with the Form Recognizer service, you will need to create an instance of the `FormRecognizerClient` \n+class. You will need an **endpoint** and either an **API key** to instantiate a client \n+object. And they can be found in the [Azure Portal][azure_portal] under the \"Quickstart\" in your created", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2Nzk0OQ==", "bodyText": "Is there an Option 2?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400367949", "createdAt": "2020-03-30T17:30:00Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -0,0 +1,183 @@\n+# Azure Form Recognizer client library for Java\n+Form Recognizer is a cloud-based cognitive service that uses machine learning technology to identify and extract text, \n+key/value pairs and table data from form documents.\n+\n+[Source code][source_code] | [Package (Maven)][package] | [API reference documentation][api_reference_doc] | [Product Documentation][product_documentation] | [Samples][samples_readme]\n+\n+## Getting started\n+\n+### Prerequisites\n+- Java Development Kit (JDK) with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- [Cognitive Services or Form Recognizer account][form_recognizer_account] to use this package.\n+\n+### Adding the package to your product\n+\n+[//]: # ({x-version-update-start;com.azure:azure-ai-formrecognizer;current})\n+```xml\n+<dependency>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-ai-formrecognizer</artifactId>\n+    <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+[//]: # ({x-version-update-end})\n+\n+### Create a Form Recognizer resource\n+Form Recognizer supports both [multi-service and single-service access][service_access]. Create a Cognitive Services \n+resource if you plan to access multiple cognitive services under a single endpoint/key. For Form Recognizer access only,\n+create a Form Recognizer resource.\n+\n+You can create either resource using the \n+\n+**Option 1:** [Azure Portal][create_new_resource] \n+\n+**Option 2:** [Azure CLI][azure_cli]\n+\n+Below is an example of how you can create a Form Recognizer resource using the CLI:\n+\n+```bash\n+# Create a new resource group to hold the Form Recognizer resource -\n+# if using an existing resource group, skip this step\n+az group create --name my-resource-group --location westus2\n+```\n+\n+```bash\n+# Create Form Recognizer\n+az cognitiveservices account create \\\n+    --name text-analytics-resource \\\n+    --resource-group my-resource-group \\\n+    --kind TextAnalytics \\\n+    --sku F0 \\\n+    --location westus2 \\\n+    --yes\n+```\n+### Authenticate the client\n+In order to interact with the Form Recognizer service, you will need to create an instance of the `FormRecognizerClient` \n+class. You will need an **endpoint** and either an **API key** to instantiate a client \n+object. And they can be found in the [Azure Portal][azure_portal] under the \"Quickstart\" in your created\n+Form Recognizer resource. See the full details regarding [authentication][authentication] of Cognitive Services.\n+\n+#### Get credentials\n+The authentication credential may be provided as the API key to your resource or as a token from Azure Active Directory.\n+\n+##### **Option 1**: Create FormRecognizerClient with API Key Credential", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2ODYwMw==", "bodyText": "Mind linking to the logging wiki in GitHub", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400368603", "createdAt": "2020-03-30T17:31:01Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -0,0 +1,183 @@\n+# Azure Form Recognizer client library for Java\n+Form Recognizer is a cloud-based cognitive service that uses machine learning technology to identify and extract text, \n+key/value pairs and table data from form documents.\n+\n+[Source code][source_code] | [Package (Maven)][package] | [API reference documentation][api_reference_doc] | [Product Documentation][product_documentation] | [Samples][samples_readme]\n+\n+## Getting started\n+\n+### Prerequisites\n+- Java Development Kit (JDK) with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- [Cognitive Services or Form Recognizer account][form_recognizer_account] to use this package.\n+\n+### Adding the package to your product\n+\n+[//]: # ({x-version-update-start;com.azure:azure-ai-formrecognizer;current})\n+```xml\n+<dependency>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-ai-formrecognizer</artifactId>\n+    <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+[//]: # ({x-version-update-end})\n+\n+### Create a Form Recognizer resource\n+Form Recognizer supports both [multi-service and single-service access][service_access]. Create a Cognitive Services \n+resource if you plan to access multiple cognitive services under a single endpoint/key. For Form Recognizer access only,\n+create a Form Recognizer resource.\n+\n+You can create either resource using the \n+\n+**Option 1:** [Azure Portal][create_new_resource] \n+\n+**Option 2:** [Azure CLI][azure_cli]\n+\n+Below is an example of how you can create a Form Recognizer resource using the CLI:\n+\n+```bash\n+# Create a new resource group to hold the Form Recognizer resource -\n+# if using an existing resource group, skip this step\n+az group create --name my-resource-group --location westus2\n+```\n+\n+```bash\n+# Create Form Recognizer\n+az cognitiveservices account create \\\n+    --name text-analytics-resource \\\n+    --resource-group my-resource-group \\\n+    --kind TextAnalytics \\\n+    --sku F0 \\\n+    --location westus2 \\\n+    --yes\n+```\n+### Authenticate the client\n+In order to interact with the Form Recognizer service, you will need to create an instance of the `FormRecognizerClient` \n+class. You will need an **endpoint** and either an **API key** to instantiate a client \n+object. And they can be found in the [Azure Portal][azure_portal] under the \"Quickstart\" in your created\n+Form Recognizer resource. See the full details regarding [authentication][authentication] of Cognitive Services.\n+\n+#### Get credentials\n+The authentication credential may be provided as the API key to your resource or as a token from Azure Active Directory.\n+\n+##### **Option 1**: Create FormRecognizerClient with API Key Credential\n+To use an [API key][api_key], provide the key as a string. This can be found in the [Azure Portal][azure_portal] \n+   under the \"Quickstart\" section or by running the following Azure CLI command:\n+\n+```bash\n+az cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n+```\n+Use the API key as the credential parameter to authenticate the client:\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L34-L37 -->\n+```java\n+FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()\n+    .apiKey(new FormRecognizerApiKeyCredential(\"{api_key}\"))\n+    .endpoint(\"{endpoint}\")\n+    .buildClient();\n+```\n+The Azure Form Recognizer client library provides a way to **rotate the existing API key**.\n+\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L54-60 -->\n+```java\n+FormRecognizerApiKeyCredential credential = new FormRecognizerApiKeyCredential(\"{api_key}\");\n+FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()\n+    .apiKey(credential)\n+    .endpoint(\"{endpoint}\")\n+    .buildClient();\n+\n+credential.updateCredential(\"{new_api_key}\");\n+```\n+\n+## Key concepts\n+### Client\n+The Form Recognizer client library provides a [FormRecognizerClient][form_recognizer_sync_client] and \n+[FormRecognizerAsyncClient][form_recognizer_async_client]. It provides both synchronous and\n+asynchronous operations to access a specific use of Form Recognizer, such as training custom models,\n+extracting layout and receipt information from documents.\n+\n+## Examples\n+The following sections provide several code snippets covering some of the most common Form Recognizer tasks, including:\n+\n+### Form Recognizer Client\n+Form Recognizer support both synchronous and asynchronous client creation by using\n+`FormRecognizerClientBuilder`,\n+\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L34-L37 -->\n+``` java\n+FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()\n+    .apiKey(new FormRecognizerApiKeyCredential(\"{api_key}\"))\n+    .endpoint(\"{endpoint}\")\n+    .buildClient();\n+```\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L44-L47 -->\n+``` java\n+FormRecognizerAsyncClient formRecognizerClient = new FormRecognizerClientBuilder()\n+    .apiKey(new FormRecognizerApiKeyCredential(\"{api_key}\"))\n+    .endpoint(\"{endpoint}\")\n+    .buildAsyncClient();\n+```\n+\n+### Extract receipt information\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L68-L86 -->\n+```java\n+```\n+For more detailed examples, refer to [here][samples_readme].\n+\n+## Troubleshooting\n+### General\n+Form Recognizer clients raise exceptions. \n+TODO\n+\n+### Enable client logging", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2OTE3Ng==", "bodyText": "This section can be removed, from discussions with @JonathanGiles and @srnagar this section is a more advanced scenario that really doesn't fit the high-level concept that the README is.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400369176", "createdAt": "2020-03-30T17:31:57Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -0,0 +1,183 @@\n+# Azure Form Recognizer client library for Java\n+Form Recognizer is a cloud-based cognitive service that uses machine learning technology to identify and extract text, \n+key/value pairs and table data from form documents.\n+\n+[Source code][source_code] | [Package (Maven)][package] | [API reference documentation][api_reference_doc] | [Product Documentation][product_documentation] | [Samples][samples_readme]\n+\n+## Getting started\n+\n+### Prerequisites\n+- Java Development Kit (JDK) with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- [Cognitive Services or Form Recognizer account][form_recognizer_account] to use this package.\n+\n+### Adding the package to your product\n+\n+[//]: # ({x-version-update-start;com.azure:azure-ai-formrecognizer;current})\n+```xml\n+<dependency>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-ai-formrecognizer</artifactId>\n+    <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+[//]: # ({x-version-update-end})\n+\n+### Create a Form Recognizer resource\n+Form Recognizer supports both [multi-service and single-service access][service_access]. Create a Cognitive Services \n+resource if you plan to access multiple cognitive services under a single endpoint/key. For Form Recognizer access only,\n+create a Form Recognizer resource.\n+\n+You can create either resource using the \n+\n+**Option 1:** [Azure Portal][create_new_resource] \n+\n+**Option 2:** [Azure CLI][azure_cli]\n+\n+Below is an example of how you can create a Form Recognizer resource using the CLI:\n+\n+```bash\n+# Create a new resource group to hold the Form Recognizer resource -\n+# if using an existing resource group, skip this step\n+az group create --name my-resource-group --location westus2\n+```\n+\n+```bash\n+# Create Form Recognizer\n+az cognitiveservices account create \\\n+    --name text-analytics-resource \\\n+    --resource-group my-resource-group \\\n+    --kind TextAnalytics \\\n+    --sku F0 \\\n+    --location westus2 \\\n+    --yes\n+```\n+### Authenticate the client\n+In order to interact with the Form Recognizer service, you will need to create an instance of the `FormRecognizerClient` \n+class. You will need an **endpoint** and either an **API key** to instantiate a client \n+object. And they can be found in the [Azure Portal][azure_portal] under the \"Quickstart\" in your created\n+Form Recognizer resource. See the full details regarding [authentication][authentication] of Cognitive Services.\n+\n+#### Get credentials\n+The authentication credential may be provided as the API key to your resource or as a token from Azure Active Directory.\n+\n+##### **Option 1**: Create FormRecognizerClient with API Key Credential\n+To use an [API key][api_key], provide the key as a string. This can be found in the [Azure Portal][azure_portal] \n+   under the \"Quickstart\" section or by running the following Azure CLI command:\n+\n+```bash\n+az cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n+```\n+Use the API key as the credential parameter to authenticate the client:\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L34-L37 -->\n+```java\n+FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()\n+    .apiKey(new FormRecognizerApiKeyCredential(\"{api_key}\"))\n+    .endpoint(\"{endpoint}\")\n+    .buildClient();\n+```\n+The Azure Form Recognizer client library provides a way to **rotate the existing API key**.\n+\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L54-60 -->\n+```java\n+FormRecognizerApiKeyCredential credential = new FormRecognizerApiKeyCredential(\"{api_key}\");\n+FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()\n+    .apiKey(credential)\n+    .endpoint(\"{endpoint}\")\n+    .buildClient();\n+\n+credential.updateCredential(\"{new_api_key}\");\n+```\n+\n+## Key concepts\n+### Client\n+The Form Recognizer client library provides a [FormRecognizerClient][form_recognizer_sync_client] and \n+[FormRecognizerAsyncClient][form_recognizer_async_client]. It provides both synchronous and\n+asynchronous operations to access a specific use of Form Recognizer, such as training custom models,\n+extracting layout and receipt information from documents.\n+\n+## Examples\n+The following sections provide several code snippets covering some of the most common Form Recognizer tasks, including:\n+\n+### Form Recognizer Client\n+Form Recognizer support both synchronous and asynchronous client creation by using\n+`FormRecognizerClientBuilder`,\n+\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L34-L37 -->\n+``` java\n+FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()\n+    .apiKey(new FormRecognizerApiKeyCredential(\"{api_key}\"))\n+    .endpoint(\"{endpoint}\")\n+    .buildClient();\n+```\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L44-L47 -->\n+``` java\n+FormRecognizerAsyncClient formRecognizerClient = new FormRecognizerClientBuilder()\n+    .apiKey(new FormRecognizerApiKeyCredential(\"{api_key}\"))\n+    .endpoint(\"{endpoint}\")\n+    .buildAsyncClient();\n+```\n+\n+### Extract receipt information\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L68-L86 -->\n+```java\n+```\n+For more detailed examples, refer to [here][samples_readme].\n+\n+## Troubleshooting\n+### General\n+Form Recognizer clients raise exceptions. \n+TODO\n+\n+### Enable client logging\n+You can set the `AZURE_LOG_LEVEL` environment variable to view logging statements made in the client library. For\n+example, setting `AZURE_LOG_LEVEL=2` would show all informational, warning, and error log messages. The log levels can\n+be found here: [log levels][LogLevels].\n+\n+### Default HTTP Client\n+All client libraries by default use the Netty HTTP client. Adding the above dependency will automatically configure \n+the client library to use the Netty HTTP client. Configuring or changing the HTTP client is detailed in the\n+[HTTP clients wiki](https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients).\n+\n+### Default SSL library", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3MDYxNA==", "bodyText": "Mind removing the entire unfinished section from the Javadoc and adding a TODO outside of it, this will guard us against the scenario where we don't get around to this and a TODO is published in our Javadocs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400370614", "createdAt": "2020-03-30T17:34:04Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -0,0 +1,231 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl;\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeOperationResult;\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeReceiptAsyncHeaders;\n+import com.azure.ai.formrecognizer.implementation.models.ContentType;\n+import com.azure.ai.formrecognizer.implementation.models.SourcePath;\n+import com.azure.ai.formrecognizer.models.ExtractedReceipt;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollResponse;\n+import com.azure.core.util.polling.PollerFlux;\n+import com.azure.core.util.polling.PollingContext;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+import java.time.Duration;\n+import java.util.UUID;\n+import java.util.function.Function;\n+\n+import static com.azure.ai.formrecognizer.Transforms.toReceipt;\n+import static com.azure.core.util.FluxUtil.monoError;\n+\n+/**\n+ * This class provides an asynchronous client that contains all the operations that apply to Azure Form Recognizer.\n+ * Operations allowed by the client are language detection, sentiment analysis, and recognition entities, PII entities,\n+ * and linked entities of a text input or list of test inputs.\n+ *\n+ * <p><strong>Instantiating an asynchronous Form Recognizer Client</strong></p>\n+ * TODO: codesnippet", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3Mjg0Mg==", "bodyText": "Should document that this doesn't support cancellation and will throw an error if it is cancelled.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400372842", "createdAt": "2020-03-30T17:37:39Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -0,0 +1,231 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl;\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeOperationResult;\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeReceiptAsyncHeaders;\n+import com.azure.ai.formrecognizer.implementation.models.ContentType;\n+import com.azure.ai.formrecognizer.implementation.models.SourcePath;\n+import com.azure.ai.formrecognizer.models.ExtractedReceipt;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollResponse;\n+import com.azure.core.util.polling.PollerFlux;\n+import com.azure.core.util.polling.PollingContext;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+import java.time.Duration;\n+import java.util.UUID;\n+import java.util.function.Function;\n+\n+import static com.azure.ai.formrecognizer.Transforms.toReceipt;\n+import static com.azure.core.util.FluxUtil.monoError;\n+\n+/**\n+ * This class provides an asynchronous client that contains all the operations that apply to Azure Form Recognizer.\n+ * Operations allowed by the client are language detection, sentiment analysis, and recognition entities, PII entities,\n+ * and linked entities of a text input or list of test inputs.\n+ *\n+ * <p><strong>Instantiating an asynchronous Form Recognizer Client</strong></p>\n+ * TODO: codesnippet\n+ *\n+ * <p>View {@link FormRecognizerClientBuilder} for additional ways to construct the client.</p>\n+ *\n+ * @see FormRecognizerClientBuilder\n+ */\n+@ServiceClient(builder = FormRecognizerClientBuilder.class, isAsync = true)\n+public final class FormRecognizerAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(FormRecognizerAsyncClient.class);\n+    private final FormRecognizerClientImpl service;\n+    private final FormRecognizerServiceVersion serviceVersion;\n+\n+    /**\n+     * Create a {@code FormRecognizerAsyncClient} that sends requests to the Form Recognizer services's endpoint. Each\n+     * service call goes through the {@link FormRecognizerClientBuilder#pipeline(HttpPipeline)}  http pipeline}.\n+     *\n+     * @param service The proxy service used to perform REST calls.\n+     * @param serviceVersion The versions of Azure Form Recognizer supported by this client library.\n+     */\n+    FormRecognizerAsyncClient(FormRecognizerClientImpl service, FormRecognizerServiceVersion serviceVersion) {\n+        this.service = service;\n+        this.serviceVersion = serviceVersion;\n+    }\n+\n+    /**\n+     * Gets the service version the client is using.\n+     *\n+     * @return the service version the client is using.\n+     */\n+    public FormRecognizerServiceVersion getServiceVersion() {\n+        return serviceVersion;\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     *\n+     * @param sourceUrl The source URL to the input document. Size of the file must be less than 20 MB.\n+     *\n+     * @return A {@link PollerFlux} that polls the extract receipt operation until it has completed, has failed, or has\n+     * been cancelled.\n+     */\n+    public PollerFlux<OperationResult, IterableStream<ExtractedReceipt>> beginExtractReceipt(String sourceUrl) {\n+        return beginExtractReceipt(sourceUrl, false, null);\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     *\n+     * @param sourceUrl The source URL to the input document. Size of the file must be less than 20 MB.\n+     * @param includeTextDetails Include text lines and element references in the result.\n+     * @param pollInterval Duration between each poll for the operation status. If none is specified, a default of\n+     * one second is used.\n+     *\n+     * @return A {@link PollerFlux} that polls the extract receipt operation until it has completed, has failed, or has\n+     * been cancelled.\n+     */\n+    public PollerFlux<OperationResult, IterableStream<ExtractedReceipt>> beginExtractReceipt(String sourceUrl,\n+                                                                                             boolean includeTextDetails,\n+                                                                                             Duration pollInterval) {\n+        final Duration interval = pollInterval != null ? pollInterval : Duration.ofSeconds(1);\n+        return new PollerFlux<OperationResult, IterableStream<ExtractedReceipt>>(interval,\n+            receiptAnalyzeActivationOperation(sourceUrl, includeTextDetails),\n+            extractReceiptPollOperation(),\n+            (activationResponse, context) -> Mono.error(new RuntimeException(\"Cancellation is not supported\")),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3ODA3Nw==", "bodyText": "Same comment about TODO in Javadocs", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400378077", "createdAt": "2020-03-30T17:45:54Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerClient.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.Utility;\n+import com.azure.ai.formrecognizer.models.ExtractedReceipt;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.SyncPoller;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.time.Duration;\n+\n+/**\n+ * This class provides a synchronous client that contains all the operations that apply to Azure Form Recognizer.\n+ * Operations allowed by the client are, detect language, recognize entities, recognize PII entities,\n+ * recognize linked entities, and analyze sentiment for a text input or a list of text inputs.\n+ *\n+ * <p><strong>Instantiating a synchronous Form Recognizer Client</strong></p>\n+ * TODO: codesnippet", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3OTAxMw==", "bodyText": "Same comment about TODOs in Javadocs", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400379013", "createdAt": "2020-03-30T17:47:15Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerClientBuilder.java", "diffHunk": "@@ -0,0 +1,336 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl;\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImplBuilder;\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.AzureKeyCredentialPolicy;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.HttpPolicyProviders;\n+import com.azure.core.http.policy.RequestIdPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.temporal.ChronoUnit;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help instantiation of {@link FormRecognizerClient FormRecognizerClients}\n+ * and {@link FormRecognizerAsyncClient FormRecognizerAsyncClients}, call {@link #buildClient()} buildClient} and\n+ * {@link #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ *\n+ * <p>\n+ * The client needs the service endpoint of the Azure Form Recognizer to access the resource service.\n+ * {@link #apiKey(AzureKeyCredential) apiKey(FormRecognizerApiKeyCredential)} gives\n+ * the builder access credential.\n+ * </p>\n+ * TODO: add code snippets", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3OTY4NA==", "bodyText": "There is a constant for this in ContentType in Azure Core.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400379684", "createdAt": "2020-03-30T17:48:19Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerClientBuilder.java", "diffHunk": "@@ -0,0 +1,336 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl;\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImplBuilder;\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.AzureKeyCredentialPolicy;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.HttpPolicyProviders;\n+import com.azure.core.http.policy.RequestIdPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.temporal.ChronoUnit;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help instantiation of {@link FormRecognizerClient FormRecognizerClients}\n+ * and {@link FormRecognizerAsyncClient FormRecognizerAsyncClients}, call {@link #buildClient()} buildClient} and\n+ * {@link #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ *\n+ * <p>\n+ * The client needs the service endpoint of the Azure Form Recognizer to access the resource service.\n+ * {@link #apiKey(AzureKeyCredential) apiKey(FormRecognizerApiKeyCredential)} gives\n+ * the builder access credential.\n+ * </p>\n+ * TODO: add code snippets\n+ * <p>\n+ * Another way to construct the client is using a {@link HttpPipeline}. The pipeline gives the client an\n+ * authenticated way to communicate with the service. Set the pipeline with {@link #pipeline(HttpPipeline) this} and\n+ * set the service endpoint with {@link #endpoint(String) this}. Using a\n+ * pipeline requires additional setup but allows for finer control on how the {@link FormRecognizerClient} and\n+ * {@link FormRecognizerAsyncClient} is built.\n+ * </p>\n+ *\n+ * @see FormRecognizerAsyncClient\n+ * @see FormRecognizerClient\n+ */\n+@ServiceClientBuilder(serviceClients = {FormRecognizerAsyncClient.class, FormRecognizerClient.class})\n+public final class FormRecognizerClientBuilder {\n+\n+    private static final String ECHO_REQUEST_ID_HEADER = \"x-ms-return-client-request-id\";\n+    private static final String CONTENT_TYPE_HEADER_VALUE = \"application/json\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4OTA4OA==", "bodyText": "Let's move this above any other work", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400389088", "createdAt": "2020-03-30T18:03:28Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerClientBuilder.java", "diffHunk": "@@ -0,0 +1,336 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl;\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImplBuilder;\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.AzureKeyCredentialPolicy;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.HttpPolicyProviders;\n+import com.azure.core.http.policy.RequestIdPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.temporal.ChronoUnit;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help instantiation of {@link FormRecognizerClient FormRecognizerClients}\n+ * and {@link FormRecognizerAsyncClient FormRecognizerAsyncClients}, call {@link #buildClient()} buildClient} and\n+ * {@link #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ *\n+ * <p>\n+ * The client needs the service endpoint of the Azure Form Recognizer to access the resource service.\n+ * {@link #apiKey(AzureKeyCredential) apiKey(FormRecognizerApiKeyCredential)} gives\n+ * the builder access credential.\n+ * </p>\n+ * TODO: add code snippets\n+ * <p>\n+ * Another way to construct the client is using a {@link HttpPipeline}. The pipeline gives the client an\n+ * authenticated way to communicate with the service. Set the pipeline with {@link #pipeline(HttpPipeline) this} and\n+ * set the service endpoint with {@link #endpoint(String) this}. Using a\n+ * pipeline requires additional setup but allows for finer control on how the {@link FormRecognizerClient} and\n+ * {@link FormRecognizerAsyncClient} is built.\n+ * </p>\n+ *\n+ * @see FormRecognizerAsyncClient\n+ * @see FormRecognizerClient\n+ */\n+@ServiceClientBuilder(serviceClients = {FormRecognizerAsyncClient.class, FormRecognizerClient.class})\n+public final class FormRecognizerClientBuilder {\n+\n+    private static final String ECHO_REQUEST_ID_HEADER = \"x-ms-return-client-request-id\";\n+    private static final String CONTENT_TYPE_HEADER_VALUE = \"application/json\";\n+    private static final String ACCEPT_HEADER = \"Accept\";\n+    private static final String FORM_RECOGNIZER_PROPERTIES = \"azure-ai-formrecognizer.properties\";\n+    static final String OCP_APIM_SUBSCRIPTION_KEY = \"Ocp-Apim-Subscription-Key\";\n+\n+    private static final String NAME = \"name\";\n+    private static final String VERSION = \"version\";\n+    private static final RetryPolicy DEFAULT_RETRY_POLICY = new RetryPolicy(\"retry-after-ms\", ChronoUnit.MILLIS);\n+\n+    private final ClientLogger logger = new ClientLogger(FormRecognizerClientBuilder.class);\n+    private final List<HttpPipelinePolicy> policies;\n+    private final HttpHeaders headers;\n+    private final String clientName;\n+    private final String clientVersion;\n+\n+    private String endpoint;\n+    private AzureKeyCredential credential;\n+    private HttpClient httpClient;\n+    private HttpLogOptions httpLogOptions;\n+    private HttpPipeline httpPipeline;\n+    private Configuration configuration;\n+    private RetryPolicy retryPolicy;\n+    private FormRecognizerServiceVersion version;\n+\n+    /**\n+     * The constructor with defaults.\n+     */\n+    public FormRecognizerClientBuilder() {\n+        policies = new ArrayList<>();\n+        httpLogOptions = new HttpLogOptions();\n+\n+        Map<String, String> properties = CoreUtils.getProperties(FORM_RECOGNIZER_PROPERTIES);\n+        clientName = properties.getOrDefault(NAME, \"UnknownName\");\n+        clientVersion = properties.getOrDefault(VERSION, \"UnknownVersion\");\n+\n+        headers = new HttpHeaders()\n+            .put(ECHO_REQUEST_ID_HEADER, \"true\")\n+            .put(ACCEPT_HEADER, CONTENT_TYPE_HEADER_VALUE);\n+    }\n+\n+    /**\n+     * Creates a {@link FormRecognizerClient} based on options set in the builder. Every time\n+     * {@code buildClient()} is called a new instance of {@link FormRecognizerClient} is created.\n+     *\n+     * <p>\n+     * If {@link #pipeline(HttpPipeline) pipeline} is set, then the {@code pipeline} and\n+     * {@link #endpoint(String) endpoint} are used to create the {@link FormRecognizerClient client}. All other builder\n+     * settings are ignored\n+     * </p>\n+     *\n+     * @return A FormRecognizerClient with the options set from the builder.\n+     * @throws NullPointerException if {@link #endpoint(String) endpoint} or\n+     * {@link #apiKey(AzureKeyCredential) apiKey} has not been set.\n+     * @throws IllegalArgumentException if {@link #endpoint(String) endpoint} cannot be parsed into a valid URL.\n+     */\n+    public FormRecognizerClient buildClient() {\n+        return new FormRecognizerClient(buildAsyncClient());\n+    }\n+\n+    /**\n+     * Creates a {@link FormRecognizerAsyncClient} based on options set in the builder. Every time\n+     * {@code buildAsyncClient()} is called a new instance of {@link FormRecognizerAsyncClient} is created.\n+     *\n+     * <p>\n+     * If {@link #pipeline(HttpPipeline) pipeline} is set, then the {@code pipeline} and\n+     * {@link #endpoint(String) endpoint} are used to create the {@link FormRecognizerClient client}. All other builder\n+     * settings are ignored.\n+     * </p>\n+     *\n+     * @return A FormRecognizerAsyncClient with the options set from the builder.\n+     * @throws NullPointerException if {@link #endpoint(String) endpoint} or\n+     * {@link #apiKey(AzureKeyCredential) apiKey} has not been set.\n+     * @throws IllegalArgumentException if {@link #endpoint(String) endpoint} cannot be parsed into a valid URL.\n+     */\n+    public FormRecognizerAsyncClient buildAsyncClient() {\n+        // Global Env configuration store\n+        final Configuration buildConfiguration = (configuration == null)\n+            ? Configuration.getGlobalConfiguration().clone() : configuration;\n+        // Service Version\n+        final FormRecognizerServiceVersion serviceVersion =\n+            version != null ? version : FormRecognizerServiceVersion.getLatest();\n+\n+        // Endpoint cannot be null, which is required in request authentication\n+        Objects.requireNonNull(endpoint, \"'Endpoint' is required and can not be null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4OTY1NQ==", "bodyText": "Should move this after the retry policy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400389655", "createdAt": "2020-03-30T18:04:22Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerClientBuilder.java", "diffHunk": "@@ -0,0 +1,336 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl;\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImplBuilder;\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.AzureKeyCredentialPolicy;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.HttpPolicyProviders;\n+import com.azure.core.http.policy.RequestIdPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.temporal.ChronoUnit;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help instantiation of {@link FormRecognizerClient FormRecognizerClients}\n+ * and {@link FormRecognizerAsyncClient FormRecognizerAsyncClients}, call {@link #buildClient()} buildClient} and\n+ * {@link #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ *\n+ * <p>\n+ * The client needs the service endpoint of the Azure Form Recognizer to access the resource service.\n+ * {@link #apiKey(AzureKeyCredential) apiKey(FormRecognizerApiKeyCredential)} gives\n+ * the builder access credential.\n+ * </p>\n+ * TODO: add code snippets\n+ * <p>\n+ * Another way to construct the client is using a {@link HttpPipeline}. The pipeline gives the client an\n+ * authenticated way to communicate with the service. Set the pipeline with {@link #pipeline(HttpPipeline) this} and\n+ * set the service endpoint with {@link #endpoint(String) this}. Using a\n+ * pipeline requires additional setup but allows for finer control on how the {@link FormRecognizerClient} and\n+ * {@link FormRecognizerAsyncClient} is built.\n+ * </p>\n+ *\n+ * @see FormRecognizerAsyncClient\n+ * @see FormRecognizerClient\n+ */\n+@ServiceClientBuilder(serviceClients = {FormRecognizerAsyncClient.class, FormRecognizerClient.class})\n+public final class FormRecognizerClientBuilder {\n+\n+    private static final String ECHO_REQUEST_ID_HEADER = \"x-ms-return-client-request-id\";\n+    private static final String CONTENT_TYPE_HEADER_VALUE = \"application/json\";\n+    private static final String ACCEPT_HEADER = \"Accept\";\n+    private static final String FORM_RECOGNIZER_PROPERTIES = \"azure-ai-formrecognizer.properties\";\n+    static final String OCP_APIM_SUBSCRIPTION_KEY = \"Ocp-Apim-Subscription-Key\";\n+\n+    private static final String NAME = \"name\";\n+    private static final String VERSION = \"version\";\n+    private static final RetryPolicy DEFAULT_RETRY_POLICY = new RetryPolicy(\"retry-after-ms\", ChronoUnit.MILLIS);\n+\n+    private final ClientLogger logger = new ClientLogger(FormRecognizerClientBuilder.class);\n+    private final List<HttpPipelinePolicy> policies;\n+    private final HttpHeaders headers;\n+    private final String clientName;\n+    private final String clientVersion;\n+\n+    private String endpoint;\n+    private AzureKeyCredential credential;\n+    private HttpClient httpClient;\n+    private HttpLogOptions httpLogOptions;\n+    private HttpPipeline httpPipeline;\n+    private Configuration configuration;\n+    private RetryPolicy retryPolicy;\n+    private FormRecognizerServiceVersion version;\n+\n+    /**\n+     * The constructor with defaults.\n+     */\n+    public FormRecognizerClientBuilder() {\n+        policies = new ArrayList<>();\n+        httpLogOptions = new HttpLogOptions();\n+\n+        Map<String, String> properties = CoreUtils.getProperties(FORM_RECOGNIZER_PROPERTIES);\n+        clientName = properties.getOrDefault(NAME, \"UnknownName\");\n+        clientVersion = properties.getOrDefault(VERSION, \"UnknownVersion\");\n+\n+        headers = new HttpHeaders()\n+            .put(ECHO_REQUEST_ID_HEADER, \"true\")\n+            .put(ACCEPT_HEADER, CONTENT_TYPE_HEADER_VALUE);\n+    }\n+\n+    /**\n+     * Creates a {@link FormRecognizerClient} based on options set in the builder. Every time\n+     * {@code buildClient()} is called a new instance of {@link FormRecognizerClient} is created.\n+     *\n+     * <p>\n+     * If {@link #pipeline(HttpPipeline) pipeline} is set, then the {@code pipeline} and\n+     * {@link #endpoint(String) endpoint} are used to create the {@link FormRecognizerClient client}. All other builder\n+     * settings are ignored\n+     * </p>\n+     *\n+     * @return A FormRecognizerClient with the options set from the builder.\n+     * @throws NullPointerException if {@link #endpoint(String) endpoint} or\n+     * {@link #apiKey(AzureKeyCredential) apiKey} has not been set.\n+     * @throws IllegalArgumentException if {@link #endpoint(String) endpoint} cannot be parsed into a valid URL.\n+     */\n+    public FormRecognizerClient buildClient() {\n+        return new FormRecognizerClient(buildAsyncClient());\n+    }\n+\n+    /**\n+     * Creates a {@link FormRecognizerAsyncClient} based on options set in the builder. Every time\n+     * {@code buildAsyncClient()} is called a new instance of {@link FormRecognizerAsyncClient} is created.\n+     *\n+     * <p>\n+     * If {@link #pipeline(HttpPipeline) pipeline} is set, then the {@code pipeline} and\n+     * {@link #endpoint(String) endpoint} are used to create the {@link FormRecognizerClient client}. All other builder\n+     * settings are ignored.\n+     * </p>\n+     *\n+     * @return A FormRecognizerAsyncClient with the options set from the builder.\n+     * @throws NullPointerException if {@link #endpoint(String) endpoint} or\n+     * {@link #apiKey(AzureKeyCredential) apiKey} has not been set.\n+     * @throws IllegalArgumentException if {@link #endpoint(String) endpoint} cannot be parsed into a valid URL.\n+     */\n+    public FormRecognizerAsyncClient buildAsyncClient() {\n+        // Global Env configuration store\n+        final Configuration buildConfiguration = (configuration == null)\n+            ? Configuration.getGlobalConfiguration().clone() : configuration;\n+        // Service Version\n+        final FormRecognizerServiceVersion serviceVersion =\n+            version != null ? version : FormRecognizerServiceVersion.getLatest();\n+\n+        // Endpoint cannot be null, which is required in request authentication\n+        Objects.requireNonNull(endpoint, \"'Endpoint' is required and can not be null.\");\n+\n+        HttpPipeline pipeline = httpPipeline;\n+        // Create a default Pipeline if it is not given\n+        if (pipeline == null) {\n+            // Closest to API goes first, closest to wire goes last.\n+            final List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+            // Authentications\n+            if (credential != null) {\n+                policies.add(new AzureKeyCredentialPolicy(OCP_APIM_SUBSCRIPTION_KEY, credential));\n+            } else {\n+                // Throw exception that credential and tokenCredential cannot be null\n+                throw logger.logExceptionAsError(\n+                    new IllegalArgumentException(\"Missing credential information while building a client.\"));\n+            }\n+\n+            policies.add(new UserAgentPolicy(httpLogOptions.getApplicationId(), clientName, clientVersion,\n+                buildConfiguration));\n+            policies.add(new RequestIdPolicy());\n+            policies.add(new AddHeadersPolicy(headers));\n+            policies.add(new AddDatePolicy());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwNTc2Ng==", "bodyText": "Should this mention FormRecognizerClientImplBuilder?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400405766", "createdAt": "2020-03-30T18:30:39Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerClientBuilder.java", "diffHunk": "@@ -0,0 +1,336 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl;\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImplBuilder;\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.AzureKeyCredentialPolicy;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.HttpPolicyProviders;\n+import com.azure.core.http.policy.RequestIdPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.temporal.ChronoUnit;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help instantiation of {@link FormRecognizerClient FormRecognizerClients}\n+ * and {@link FormRecognizerAsyncClient FormRecognizerAsyncClients}, call {@link #buildClient()} buildClient} and\n+ * {@link #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ *\n+ * <p>\n+ * The client needs the service endpoint of the Azure Form Recognizer to access the resource service.\n+ * {@link #apiKey(AzureKeyCredential) apiKey(FormRecognizerApiKeyCredential)} gives\n+ * the builder access credential.\n+ * </p>\n+ * TODO: add code snippets\n+ * <p>\n+ * Another way to construct the client is using a {@link HttpPipeline}. The pipeline gives the client an\n+ * authenticated way to communicate with the service. Set the pipeline with {@link #pipeline(HttpPipeline) this} and\n+ * set the service endpoint with {@link #endpoint(String) this}. Using a\n+ * pipeline requires additional setup but allows for finer control on how the {@link FormRecognizerClient} and\n+ * {@link FormRecognizerAsyncClient} is built.\n+ * </p>\n+ *\n+ * @see FormRecognizerAsyncClient\n+ * @see FormRecognizerClient\n+ */\n+@ServiceClientBuilder(serviceClients = {FormRecognizerAsyncClient.class, FormRecognizerClient.class})\n+public final class FormRecognizerClientBuilder {\n+\n+    private static final String ECHO_REQUEST_ID_HEADER = \"x-ms-return-client-request-id\";\n+    private static final String CONTENT_TYPE_HEADER_VALUE = \"application/json\";\n+    private static final String ACCEPT_HEADER = \"Accept\";\n+    private static final String FORM_RECOGNIZER_PROPERTIES = \"azure-ai-formrecognizer.properties\";\n+    static final String OCP_APIM_SUBSCRIPTION_KEY = \"Ocp-Apim-Subscription-Key\";\n+\n+    private static final String NAME = \"name\";\n+    private static final String VERSION = \"version\";\n+    private static final RetryPolicy DEFAULT_RETRY_POLICY = new RetryPolicy(\"retry-after-ms\", ChronoUnit.MILLIS);\n+\n+    private final ClientLogger logger = new ClientLogger(FormRecognizerClientBuilder.class);\n+    private final List<HttpPipelinePolicy> policies;\n+    private final HttpHeaders headers;\n+    private final String clientName;\n+    private final String clientVersion;\n+\n+    private String endpoint;\n+    private AzureKeyCredential credential;\n+    private HttpClient httpClient;\n+    private HttpLogOptions httpLogOptions;\n+    private HttpPipeline httpPipeline;\n+    private Configuration configuration;\n+    private RetryPolicy retryPolicy;\n+    private FormRecognizerServiceVersion version;\n+\n+    /**\n+     * The constructor with defaults.\n+     */\n+    public FormRecognizerClientBuilder() {\n+        policies = new ArrayList<>();\n+        httpLogOptions = new HttpLogOptions();\n+\n+        Map<String, String> properties = CoreUtils.getProperties(FORM_RECOGNIZER_PROPERTIES);\n+        clientName = properties.getOrDefault(NAME, \"UnknownName\");\n+        clientVersion = properties.getOrDefault(VERSION, \"UnknownVersion\");\n+\n+        headers = new HttpHeaders()\n+            .put(ECHO_REQUEST_ID_HEADER, \"true\")\n+            .put(ACCEPT_HEADER, CONTENT_TYPE_HEADER_VALUE);\n+    }\n+\n+    /**\n+     * Creates a {@link FormRecognizerClient} based on options set in the builder. Every time\n+     * {@code buildClient()} is called a new instance of {@link FormRecognizerClient} is created.\n+     *\n+     * <p>\n+     * If {@link #pipeline(HttpPipeline) pipeline} is set, then the {@code pipeline} and\n+     * {@link #endpoint(String) endpoint} are used to create the {@link FormRecognizerClient client}. All other builder\n+     * settings are ignored\n+     * </p>\n+     *\n+     * @return A FormRecognizerClient with the options set from the builder.\n+     * @throws NullPointerException if {@link #endpoint(String) endpoint} or\n+     * {@link #apiKey(AzureKeyCredential) apiKey} has not been set.\n+     * @throws IllegalArgumentException if {@link #endpoint(String) endpoint} cannot be parsed into a valid URL.\n+     */\n+    public FormRecognizerClient buildClient() {\n+        return new FormRecognizerClient(buildAsyncClient());\n+    }\n+\n+    /**\n+     * Creates a {@link FormRecognizerAsyncClient} based on options set in the builder. Every time\n+     * {@code buildAsyncClient()} is called a new instance of {@link FormRecognizerAsyncClient} is created.\n+     *\n+     * <p>\n+     * If {@link #pipeline(HttpPipeline) pipeline} is set, then the {@code pipeline} and\n+     * {@link #endpoint(String) endpoint} are used to create the {@link FormRecognizerClient client}. All other builder\n+     * settings are ignored.\n+     * </p>\n+     *\n+     * @return A FormRecognizerAsyncClient with the options set from the builder.\n+     * @throws NullPointerException if {@link #endpoint(String) endpoint} or\n+     * {@link #apiKey(AzureKeyCredential) apiKey} has not been set.\n+     * @throws IllegalArgumentException if {@link #endpoint(String) endpoint} cannot be parsed into a valid URL.\n+     */\n+    public FormRecognizerAsyncClient buildAsyncClient() {\n+        // Global Env configuration store\n+        final Configuration buildConfiguration = (configuration == null)\n+            ? Configuration.getGlobalConfiguration().clone() : configuration;\n+        // Service Version\n+        final FormRecognizerServiceVersion serviceVersion =\n+            version != null ? version : FormRecognizerServiceVersion.getLatest();\n+\n+        // Endpoint cannot be null, which is required in request authentication\n+        Objects.requireNonNull(endpoint, \"'Endpoint' is required and can not be null.\");\n+\n+        HttpPipeline pipeline = httpPipeline;\n+        // Create a default Pipeline if it is not given\n+        if (pipeline == null) {\n+            // Closest to API goes first, closest to wire goes last.\n+            final List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+            // Authentications\n+            if (credential != null) {\n+                policies.add(new AzureKeyCredentialPolicy(OCP_APIM_SUBSCRIPTION_KEY, credential));\n+            } else {\n+                // Throw exception that credential and tokenCredential cannot be null\n+                throw logger.logExceptionAsError(\n+                    new IllegalArgumentException(\"Missing credential information while building a client.\"));\n+            }\n+\n+            policies.add(new UserAgentPolicy(httpLogOptions.getApplicationId(), clientName, clientVersion,\n+                buildConfiguration));\n+            policies.add(new RequestIdPolicy());\n+            policies.add(new AddHeadersPolicy(headers));\n+            policies.add(new AddDatePolicy());\n+\n+            HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+            policies.add(retryPolicy == null ? DEFAULT_RETRY_POLICY : retryPolicy);\n+            policies.addAll(this.policies);\n+            HttpPolicyProviders.addAfterRetryPolicies(policies);\n+\n+            policies.add(new HttpLoggingPolicy(httpLogOptions));\n+\n+            pipeline = new HttpPipelineBuilder()\n+                .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+                .httpClient(httpClient)\n+                .build();\n+        }\n+\n+        final FormRecognizerClientImpl formRecognizerAPI = new FormRecognizerClientImplBuilder()\n+            .endpoint(endpoint)\n+            .pipeline(pipeline)\n+            .build();\n+\n+        return new FormRecognizerAsyncClient(formRecognizerAPI, serviceVersion);\n+    }\n+\n+    /**\n+     * Sets the service endpoint for the Azure Form Recognizer instance.\n+     *\n+     * @param endpoint The URL of the Azure Form Recognizer instance service requests to and receive responses from.\n+     * @return The updated FormRecognizerClientImplBuilder object.\n+     * @throws NullPointerException if {@code endpoint} is null\n+     * @throws IllegalArgumentException if {@code endpoint} cannot be parsed into a valid URL.\n+     */\n+    public FormRecognizerClientBuilder endpoint(String endpoint) {\n+        Objects.requireNonNull(endpoint, \"'endpoint' cannot be null.\");\n+\n+        try {\n+            new URL(endpoint);\n+        } catch (MalformedURLException ex) {\n+            throw logger.logExceptionAsWarning(new IllegalArgumentException(\"'endpoint' must be a valid URL.\", ex));\n+        }\n+\n+        if (endpoint.endsWith(\"/\")) {\n+            this.endpoint = endpoint.substring(0, endpoint.length() - 1);\n+        } else {\n+            this.endpoint = endpoint;\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the credential to use when authenticating HTTP requests for this FormRecognizerClientImplBuilder.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwNjM3MQ==", "bodyText": "Needs to be updated since FormRecognizerApiKeyCredential is no longer used in this API.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400406371", "createdAt": "2020-03-30T18:31:36Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -0,0 +1,183 @@\n+# Azure Form Recognizer client library for Java\n+Form Recognizer is a cloud-based cognitive service that uses machine learning technology to identify and extract text, \n+key/value pairs and table data from form documents.\n+\n+[Source code][source_code] | [Package (Maven)][package] | [API reference documentation][api_reference_doc] | [Product Documentation][product_documentation] | [Samples][samples_readme]\n+\n+## Getting started\n+\n+### Prerequisites\n+- Java Development Kit (JDK) with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- [Cognitive Services or Form Recognizer account][form_recognizer_account] to use this package.\n+\n+### Adding the package to your product\n+\n+[//]: # ({x-version-update-start;com.azure:azure-ai-formrecognizer;current})\n+```xml\n+<dependency>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-ai-formrecognizer</artifactId>\n+    <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+[//]: # ({x-version-update-end})\n+\n+### Create a Form Recognizer resource\n+Form Recognizer supports both [multi-service and single-service access][service_access]. Create a Cognitive Services \n+resource if you plan to access multiple cognitive services under a single endpoint/key. For Form Recognizer access only,\n+create a Form Recognizer resource.\n+\n+You can create either resource using the \n+\n+**Option 1:** [Azure Portal][create_new_resource] \n+\n+**Option 2:** [Azure CLI][azure_cli]\n+\n+Below is an example of how you can create a Form Recognizer resource using the CLI:\n+\n+```bash\n+# Create a new resource group to hold the Form Recognizer resource -\n+# if using an existing resource group, skip this step\n+az group create --name my-resource-group --location westus2\n+```\n+\n+```bash\n+# Create Form Recognizer\n+az cognitiveservices account create \\\n+    --name text-analytics-resource \\\n+    --resource-group my-resource-group \\\n+    --kind TextAnalytics \\\n+    --sku F0 \\\n+    --location westus2 \\\n+    --yes\n+```\n+### Authenticate the client\n+In order to interact with the Form Recognizer service, you will need to create an instance of the `FormRecognizerClient` \n+class. You will need an **endpoint** and either an **API key** to instantiate a client \n+object. And they can be found in the [Azure Portal][azure_portal] under the \"Quickstart\" in your created\n+Form Recognizer resource. See the full details regarding [authentication][authentication] of Cognitive Services.\n+\n+#### Get credentials\n+The authentication credential may be provided as the API key to your resource or as a token from Azure Active Directory.\n+\n+##### **Option 1**: Create FormRecognizerClient with API Key Credential\n+To use an [API key][api_key], provide the key as a string. This can be found in the [Azure Portal][azure_portal] \n+   under the \"Quickstart\" section or by running the following Azure CLI command:\n+\n+```bash\n+az cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n+```\n+Use the API key as the credential parameter to authenticate the client:\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L34-L37 -->\n+```java\n+FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()\n+    .apiKey(new FormRecognizerApiKeyCredential(\"{api_key}\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwNjQzMw==", "bodyText": "Needs to be updated since FormRecognizerApiKeyCredential is no longer used in this API.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400406433", "createdAt": "2020-03-30T18:31:43Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -0,0 +1,183 @@\n+# Azure Form Recognizer client library for Java\n+Form Recognizer is a cloud-based cognitive service that uses machine learning technology to identify and extract text, \n+key/value pairs and table data from form documents.\n+\n+[Source code][source_code] | [Package (Maven)][package] | [API reference documentation][api_reference_doc] | [Product Documentation][product_documentation] | [Samples][samples_readme]\n+\n+## Getting started\n+\n+### Prerequisites\n+- Java Development Kit (JDK) with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- [Cognitive Services or Form Recognizer account][form_recognizer_account] to use this package.\n+\n+### Adding the package to your product\n+\n+[//]: # ({x-version-update-start;com.azure:azure-ai-formrecognizer;current})\n+```xml\n+<dependency>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-ai-formrecognizer</artifactId>\n+    <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+[//]: # ({x-version-update-end})\n+\n+### Create a Form Recognizer resource\n+Form Recognizer supports both [multi-service and single-service access][service_access]. Create a Cognitive Services \n+resource if you plan to access multiple cognitive services under a single endpoint/key. For Form Recognizer access only,\n+create a Form Recognizer resource.\n+\n+You can create either resource using the \n+\n+**Option 1:** [Azure Portal][create_new_resource] \n+\n+**Option 2:** [Azure CLI][azure_cli]\n+\n+Below is an example of how you can create a Form Recognizer resource using the CLI:\n+\n+```bash\n+# Create a new resource group to hold the Form Recognizer resource -\n+# if using an existing resource group, skip this step\n+az group create --name my-resource-group --location westus2\n+```\n+\n+```bash\n+# Create Form Recognizer\n+az cognitiveservices account create \\\n+    --name text-analytics-resource \\\n+    --resource-group my-resource-group \\\n+    --kind TextAnalytics \\\n+    --sku F0 \\\n+    --location westus2 \\\n+    --yes\n+```\n+### Authenticate the client\n+In order to interact with the Form Recognizer service, you will need to create an instance of the `FormRecognizerClient` \n+class. You will need an **endpoint** and either an **API key** to instantiate a client \n+object. And they can be found in the [Azure Portal][azure_portal] under the \"Quickstart\" in your created\n+Form Recognizer resource. See the full details regarding [authentication][authentication] of Cognitive Services.\n+\n+#### Get credentials\n+The authentication credential may be provided as the API key to your resource or as a token from Azure Active Directory.\n+\n+##### **Option 1**: Create FormRecognizerClient with API Key Credential\n+To use an [API key][api_key], provide the key as a string. This can be found in the [Azure Portal][azure_portal] \n+   under the \"Quickstart\" section or by running the following Azure CLI command:\n+\n+```bash\n+az cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n+```\n+Use the API key as the credential parameter to authenticate the client:\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L34-L37 -->\n+```java\n+FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()\n+    .apiKey(new FormRecognizerApiKeyCredential(\"{api_key}\"))\n+    .endpoint(\"{endpoint}\")\n+    .buildClient();\n+```\n+The Azure Form Recognizer client library provides a way to **rotate the existing API key**.\n+\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L54-60 -->\n+```java\n+FormRecognizerApiKeyCredential credential = new FormRecognizerApiKeyCredential(\"{api_key}\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwNzI3OQ==", "bodyText": "Mind adding a comment around this regex pattern to clarify its purpose.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400407279", "createdAt": "2020-03-30T18:33:12Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeResult;\n+import com.azure.ai.formrecognizer.implementation.models.DocumentResult;\n+import com.azure.ai.formrecognizer.implementation.models.ReadResult;\n+import com.azure.ai.formrecognizer.implementation.models.TextLine;\n+import com.azure.ai.formrecognizer.implementation.models.TextWord;\n+import com.azure.ai.formrecognizer.models.BoundingBox;\n+import com.azure.ai.formrecognizer.models.DimensionUnit;\n+import com.azure.ai.formrecognizer.models.Element;\n+import com.azure.ai.formrecognizer.models.ExtractedReceipt;\n+import com.azure.ai.formrecognizer.models.FieldValue;\n+import com.azure.ai.formrecognizer.models.FloatValue;\n+import com.azure.ai.formrecognizer.models.IntegerValue;\n+import com.azure.ai.formrecognizer.models.LineElement;\n+import com.azure.ai.formrecognizer.models.PageMetadata;\n+import com.azure.ai.formrecognizer.models.Point;\n+import com.azure.ai.formrecognizer.models.ReceiptItem;\n+import com.azure.ai.formrecognizer.models.ReceiptType;\n+import com.azure.ai.formrecognizer.models.StringValue;\n+import com.azure.ai.formrecognizer.models.TextLanguage;\n+import com.azure.ai.formrecognizer.models.WordElement;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Helper class to convert service level models to SDK exposed models.\n+ */\n+final class Transforms {\n+    private static final ClientLogger LOGGER = new ClientLogger(Transforms.class);\n+    private static final Pattern COMPILE = Pattern.compile(\"[^0-9]+\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwODE3OQ==", "bodyText": "Is it likely that there will be additional keys added in the future? If so, what is the plan to ensure this remains up to date when changes are made? Is there any possibility this could be made more generic and flexible to support additional keys?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400408179", "createdAt": "2020-03-30T18:34:47Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeResult;\n+import com.azure.ai.formrecognizer.implementation.models.DocumentResult;\n+import com.azure.ai.formrecognizer.implementation.models.ReadResult;\n+import com.azure.ai.formrecognizer.implementation.models.TextLine;\n+import com.azure.ai.formrecognizer.implementation.models.TextWord;\n+import com.azure.ai.formrecognizer.models.BoundingBox;\n+import com.azure.ai.formrecognizer.models.DimensionUnit;\n+import com.azure.ai.formrecognizer.models.Element;\n+import com.azure.ai.formrecognizer.models.ExtractedReceipt;\n+import com.azure.ai.formrecognizer.models.FieldValue;\n+import com.azure.ai.formrecognizer.models.FloatValue;\n+import com.azure.ai.formrecognizer.models.IntegerValue;\n+import com.azure.ai.formrecognizer.models.LineElement;\n+import com.azure.ai.formrecognizer.models.PageMetadata;\n+import com.azure.ai.formrecognizer.models.Point;\n+import com.azure.ai.formrecognizer.models.ReceiptItem;\n+import com.azure.ai.formrecognizer.models.ReceiptType;\n+import com.azure.ai.formrecognizer.models.StringValue;\n+import com.azure.ai.formrecognizer.models.TextLanguage;\n+import com.azure.ai.formrecognizer.models.WordElement;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Helper class to convert service level models to SDK exposed models.\n+ */\n+final class Transforms {\n+    private static final ClientLogger LOGGER = new ClientLogger(Transforms.class);\n+    private static final Pattern COMPILE = Pattern.compile(\"[^0-9]+\");\n+\n+    private Transforms() {\n+    }\n+\n+    static IterableStream<ExtractedReceipt> toReceipt(AnalyzeResult analyzeResult, boolean includeTextDetails) {\n+        List<ReadResult> readResults = analyzeResult.getReadResults();\n+        List<DocumentResult> documentResult = analyzeResult.getDocumentResults();\n+        List<ExtractedReceipt> extractedReceiptList = new ArrayList<>();\n+\n+        for (int i = 0; i < readResults.size(); i++) {\n+            ReadResult readResultItem = readResults.get(i);\n+            PageMetadata pageMetadata = getPageInfo(readResultItem);\n+            ExtractedReceipt extractedReceiptItem = new ExtractedReceipt(pageMetadata);\n+\n+            DocumentResult documentResultItem = documentResult.get(i);\n+            documentResultItem.getFields().forEach((key, fieldValue) -> {\n+                switch (key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwOTQ4NA==", "bodyText": "Mind adding comments into the helper methods and in the code to explain the transforms being applied.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400409484", "createdAt": "2020-03-30T18:37:03Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeResult;\n+import com.azure.ai.formrecognizer.implementation.models.DocumentResult;\n+import com.azure.ai.formrecognizer.implementation.models.ReadResult;\n+import com.azure.ai.formrecognizer.implementation.models.TextLine;\n+import com.azure.ai.formrecognizer.implementation.models.TextWord;\n+import com.azure.ai.formrecognizer.models.BoundingBox;\n+import com.azure.ai.formrecognizer.models.DimensionUnit;\n+import com.azure.ai.formrecognizer.models.Element;\n+import com.azure.ai.formrecognizer.models.ExtractedReceipt;\n+import com.azure.ai.formrecognizer.models.FieldValue;\n+import com.azure.ai.formrecognizer.models.FloatValue;\n+import com.azure.ai.formrecognizer.models.IntegerValue;\n+import com.azure.ai.formrecognizer.models.LineElement;\n+import com.azure.ai.formrecognizer.models.PageMetadata;\n+import com.azure.ai.formrecognizer.models.Point;\n+import com.azure.ai.formrecognizer.models.ReceiptItem;\n+import com.azure.ai.formrecognizer.models.ReceiptType;\n+import com.azure.ai.formrecognizer.models.StringValue;\n+import com.azure.ai.formrecognizer.models.TextLanguage;\n+import com.azure.ai.formrecognizer.models.WordElement;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Helper class to convert service level models to SDK exposed models.\n+ */\n+final class Transforms {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxMDI2OA==", "bodyText": "Should this return Flux.error instead of throwing?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400410268", "createdAt": "2020-03-30T18:38:25Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/implementation/Utility.java", "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer.implementation;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * Utility method class.\n+ */\n+public class Utility {\n+    private static final ClientLogger LOGGER = new ClientLogger(Utility.class);\n+\n+    /**\n+     * A utility method for converting the input stream to Flux of ByteBuffer.\n+     *\n+     * @param data The input data which needs to convert to ByteBuffer.\n+     *\n+     * @return {@link ByteBuffer} which contains the input data.\n+     * @throws RuntimeException When I/O error occurs.\n+     */\n+    public static Flux<ByteBuffer> convertStreamToByteBuffer(InputStream data) {\n+        try {\n+            return Flux.just(toByteArray(data));\n+        } catch (IOException e) {\n+            throw LOGGER.logExceptionAsError(new RuntimeException(e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxMTE4MQ==", "bodyText": "Do we want to convert the entire InputStream to a ByteBuffer in a single go or should this be chunked as downstream requests more elements? Could we have scenarios where a large file is being read that wouldn't fit into memory?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400411181", "createdAt": "2020-03-30T18:39:54Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/implementation/Utility.java", "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer.implementation;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * Utility method class.\n+ */\n+public class Utility {\n+    private static final ClientLogger LOGGER = new ClientLogger(Utility.class);\n+\n+    /**\n+     * A utility method for converting the input stream to Flux of ByteBuffer.\n+     *\n+     * @param data The input data which needs to convert to ByteBuffer.\n+     *\n+     * @return {@link ByteBuffer} which contains the input data.\n+     * @throws RuntimeException When I/O error occurs.\n+     */\n+    public static Flux<ByteBuffer> convertStreamToByteBuffer(InputStream data) {\n+        try {\n+            return Flux.just(toByteArray(data));\n+        } catch (IOException e) {\n+            throw LOGGER.logExceptionAsError(new RuntimeException(e));\n+        }\n+    }\n+\n+    private static ByteBuffer toByteArray(InputStream in) throws IOException {\n+\n+        ByteArrayOutputStream os = new ByteArrayOutputStream();\n+\n+        byte[] buffer = new byte[1024];\n+        int len;\n+\n+        // read bytes from the input stream and store them in buffer\n+        while ((len = in.read(buffer)) != -1) {\n+            // write bytes from the buffer into output stream\n+            os.write(buffer, 0, len);\n+        }\n+\n+        return ByteBuffer.wrap(os.toByteArray());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNDk1Mg==", "bodyText": "Should this class be final?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400414952", "createdAt": "2020-03-30T18:46:30Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/PageMetadata.java", "diffHunk": "@@ -0,0 +1,124 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer.models;\n+\n+import com.azure.core.annotation.Immutable;\n+\n+/**\n+ * The PageMetadata model.\n+ */\n+@Immutable\n+public class PageMetadata {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNTc1OA==", "bodyText": "Are these left generic so that the service could return an integer value here? It seems that these APIs will need a lot of type checking to be done to be used safely or to have a lot of unchecked casts.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400415758", "createdAt": "2020-03-30T18:47:53Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/ReceiptItem.java", "diffHunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer.models;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+/**\n+ * The ReceiptItem model.\n+ */\n+@Fluent\n+public class ReceiptItem {\n+\n+    /*\n+     * Name of the field value.\n+     */\n+    private FieldValue<?> name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNjMzNg==", "bodyText": "These use the nullable Float, it is expected for these to be returned as null?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400416336", "createdAt": "2020-03-30T18:48:51Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/Point.java", "diffHunk": "@@ -0,0 +1,52 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer.models;\n+\n+import com.azure.core.annotation.Immutable;\n+\n+/**\n+ * The Point model.\n+ */\n+@Immutable\n+public class Point {\n+\n+    /*\n+     * The x-axis point coordinate.\n+     */\n+    private final Float xCoordinate;\n+\n+    /*\n+     * The y-axis point coordinate.\n+     */\n+    private final Float yCoordinate;\n+\n+    /**\n+     * Creates a Point object.\n+     *\n+     * @param xCoordinate The x-axis point coordinate.\n+     * @param yCoordinate The y-axis point coordinate.\n+     */\n+    public Point(final Float xCoordinate, final Float yCoordinate) {\n+        this.xCoordinate = xCoordinate;\n+        this.yCoordinate = yCoordinate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNzMwNQ==", "bodyText": "Should put in a fake key, this will throw an exception.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400417305", "createdAt": "2020-03-30T18:50:25Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ExtractPrebuiltReceiptAsync.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.ExtractedReceipt;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.PollerFlux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Sample for extracting receipt information using file source URL.\n+ */\n+public class ExtractPrebuiltReceiptAsync {\n+    public static void main(final String[] args) {\n+        // Instantiate a client that will be used to call the service.\n+        final FormRecognizerAsyncClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxODMxMg==", "bodyText": "Why do we sleep here for 20 seconds? The captured trainingOperationResponse won't change during the sleep period.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400418312", "createdAt": "2020-03-30T18:52:05Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ExtractPrebuiltReceiptAsync.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.ExtractedReceipt;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.PollerFlux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Sample for extracting receipt information using file source URL.\n+ */\n+public class ExtractPrebuiltReceiptAsync {\n+    public static void main(final String[] args) {\n+        // Instantiate a client that will be used to call the service.\n+        final FormRecognizerAsyncClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildAsyncClient();\n+\n+        String receiptUrl = \"https://docs.microsoft.com/en-us/azure/cognitive-services/form-recognizer/media/contoso-allinone.jpg\";\n+        PollerFlux<OperationResult, IterableStream<ExtractedReceipt>> analyzeReceiptPoller =\n+            client.beginExtractReceipt(receiptUrl, true, Duration.ofSeconds(1));\n+\n+        IterableStream<ExtractedReceipt> receiptPageResults = analyzeReceiptPoller\n+            .last()\n+            .flatMap(trainingOperationResponse -> {\n+                try {\n+                    Thread.sleep(20000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxOTIzOA==", "bodyText": "This could be injected into the flatMap lambda.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400419238", "createdAt": "2020-03-30T18:53:35Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ExtractPrebuiltReceiptAsync.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.ExtractedReceipt;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.PollerFlux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Sample for extracting receipt information using file source URL.\n+ */\n+public class ExtractPrebuiltReceiptAsync {\n+    public static void main(final String[] args) {\n+        // Instantiate a client that will be used to call the service.\n+        final FormRecognizerAsyncClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildAsyncClient();\n+\n+        String receiptUrl = \"https://docs.microsoft.com/en-us/azure/cognitive-services/form-recognizer/media/contoso-allinone.jpg\";\n+        PollerFlux<OperationResult, IterableStream<ExtractedReceipt>> analyzeReceiptPoller =\n+            client.beginExtractReceipt(receiptUrl, true, Duration.ofSeconds(1));\n+\n+        IterableStream<ExtractedReceipt> receiptPageResults = analyzeReceiptPoller\n+            .last()\n+            .flatMap(trainingOperationResponse -> {\n+                try {\n+                    Thread.sleep(20000);\n+                } catch (InterruptedException e) {\n+                    e.printStackTrace();\n+                }\n+                if (trainingOperationResponse.getStatus().isComplete()) {\n+                    System.out.println(\"Polling completed successfully\");\n+                    // training completed successfully, retrieving final result.\n+                    return trainingOperationResponse.getFinalResult();\n+                } else {\n+                    System.out.println(\"polling completed unsuccessfully with status:\"\n+                        + trainingOperationResponse.getStatus());\n+                    return Mono.empty();\n+                }\n+            }).block();\n+\n+        for (ExtractedReceipt extractedReceiptItem : receiptPageResults) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxOTM5Mg==", "bodyText": "Should put in a fake key, this will throw an exception.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400419392", "createdAt": "2020-03-30T18:53:50Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ExtractPrebuiltReceiptSync.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.ExtractedReceipt;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.SyncPoller;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+\n+/**\n+ * Sample for extracting receipt information using input stream.\n+ */\n+public class ExtractPrebuiltReceiptSync {\n+\n+    /**\n+     * Sample for extracting receipt information using input stream.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n+     */\n+    public static void main(final String[] args) throws IOException {\n+        // Instantiate a client that will be used to call the service.\n+\n+        final FormRecognizerClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQyMTAwNA==", "bodyText": "Is this the custom Swagger that is being used while the service team is working on one? If this isn't customized should point to the standard Swagger.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400421004", "createdAt": "2020-03-30T18:56:21Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/swagger/README.md", "diffHunk": "@@ -0,0 +1,33 @@\n+# Azure Cognitive Service - Form Recognizer for Java\n+\n+> see https://aka.ms/autorest\n+\n+### Setup\n+```ps\n+Fork and clone https://github.com/Azure/autorest.java \n+git checkout v4\n+git submodule update --init --recursive\n+npm install\n+npm install -g autorest\n+```\n+\n+### Generation\n+```ps\n+cd <swagger-folder>\n+autorest --java --use=C:/work/autorest.java\n+```\n+\n+### Code generation settings\n+``` yaml\n+input-file: https://raw.githubusercontent.com/kristapratico/azure-rest-api-specs/form-recognizer-patch/specification/cognitiveservices/data-plane/FormRecognizer/preview/v2.0/FormRecognizer.json", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQyMTI1NQ==", "bodyText": "Are there any generated models that should be in the public API?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400421255", "createdAt": "2020-03-30T18:56:47Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/swagger/README.md", "diffHunk": "@@ -0,0 +1,33 @@\n+# Azure Cognitive Service - Form Recognizer for Java\n+\n+> see https://aka.ms/autorest\n+\n+### Setup\n+```ps\n+Fork and clone https://github.com/Azure/autorest.java \n+git checkout v4\n+git submodule update --init --recursive\n+npm install\n+npm install -g autorest\n+```\n+\n+### Generation\n+```ps\n+cd <swagger-folder>\n+autorest --java --use=C:/work/autorest.java\n+```\n+\n+### Code generation settings\n+``` yaml\n+input-file: https://raw.githubusercontent.com/kristapratico/azure-rest-api-specs/form-recognizer-patch/specification/cognitiveservices/data-plane/FormRecognizer/preview/v2.0/FormRecognizer.json\n+java: true\n+output-folder: ..\\\n+generate-client-as-impl: true\n+namespace: com.azure.ai.formrecognizer\n+generate-client-interfaces: false\n+sync-methods: none\n+license-header: MICROSOFT_MIT_SMALL\n+add-context-parameter: true\n+models-subpackage: implementation.models\n+custom-types-subpackage: models", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cc2e05402105b12a92a55d737037be72d282d4a", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1cc2e05402105b12a92a55d737037be72d282d4a", "committedDate": "2020-03-30T21:25:47Z", "message": "receipt endpoints working"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddf8ab138d668c4c60b00b451fff66d006fc7431", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ddf8ab138d668c4c60b00b451fff66d006fc7431", "committedDate": "2020-03-30T21:26:01Z", "message": "raw ocr and field value update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "525ca665cc048ca815dde52b807fe16dac42cc7b", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/525ca665cc048ca815dde52b807fe16dac42cc7b", "committedDate": "2020-03-30T21:26:12Z", "message": "update model names, tests, javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c03e3e454a5551f4087778038125234cdf680b8a", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c03e3e454a5551f4087778038125234cdf680b8a", "committedDate": "2020-03-30T21:26:23Z", "message": "add testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d794bbdac6de662cf3443f5912a0d6115ec353d", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0d794bbdac6de662cf3443f5912a0d6115ec353d", "committedDate": "2020-03-30T21:26:30Z", "message": "update to AzureKeyCredential"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fff5c3f5d3210e43eb5426b514ffede78f6d5d8", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9fff5c3f5d3210e43eb5426b514ffede78f6d5d8", "committedDate": "2020-03-30T21:26:36Z", "message": "addressing some review feedback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6520642399425b38aa6e4865e571947f16852f6e", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6520642399425b38aa6e4865e571947f16852f6e", "committedDate": "2020-03-30T21:20:05Z", "message": "addressing some review feedback"}, "afterCommit": {"oid": "9fff5c3f5d3210e43eb5426b514ffede78f6d5d8", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9fff5c3f5d3210e43eb5426b514ffede78f6d5d8", "committedDate": "2020-03-30T21:26:36Z", "message": "addressing some review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d2d75f04aa2f5a51c7224fd0f98eea8cdda4190", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4d2d75f04aa2f5a51c7224fd0f98eea8cdda4190", "committedDate": "2020-03-31T00:31:51Z", "message": "models update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e550685a367496584a0b2b2c57577a4202eb7283", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e550685a367496584a0b2b2c57577a4202eb7283", "committedDate": "2020-03-31T01:15:31Z", "message": "Bounding box model update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MzMzNTY1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#pullrequestreview-384333565", "createdAt": "2020-03-31T00:57:31Z", "commit": {"oid": "4d2d75f04aa2f5a51c7224fd0f98eea8cdda4190"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDo1NzozMVrOF-BiWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMTozMToxNVrOF-CHRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU4MTIwOA==", "bodyText": "This API should have Context param.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400581208", "createdAt": "2020-03-31T00:57:31Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerClient.java", "diffHunk": "@@ -0,0 +1,103 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.Utility;\n+import com.azure.ai.formrecognizer.models.ExtractedReceipt;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.SyncPoller;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.time.Duration;\n+\n+/**\n+ * This class provides a synchronous client that contains all the operations that apply to Azure Form Recognizer.\n+ * Operations allowed by the client are, detect language, recognize entities, recognize PII entities,\n+ * recognize linked entities, and analyze sentiment for a text input or a list of text inputs.\n+ *\n+ * <p><strong>Instantiating a synchronous Form Recognizer Client</strong></p>\n+ * TODO: codesnippet\n+ *\n+ * <p>View {@link FormRecognizerClientBuilder this} for additional ways to construct the client.</p>\n+ *\n+ * @see FormRecognizerClientBuilder\n+ */\n+@ServiceClient(builder = FormRecognizerClientBuilder.class)\n+public final class FormRecognizerClient {\n+    private final FormRecognizerAsyncClient client;\n+\n+    /**\n+     * Create a {@code FormRecognizerClient client} that sends requests to the Form Recognizer service's endpoint.\n+     * Each service call goes through the {@link FormRecognizerClientBuilder#pipeline http pipeline}.\n+     *\n+     * @param client The {@link FormRecognizerClient} that the client routes its request through.\n+     */\n+    FormRecognizerClient(FormRecognizerAsyncClient client) {\n+        this.client = client;\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * with an error message indicating absence of cancellation support</p>\n+     *\n+     * @param sourceUrl The source URL to the input document. Size of the file must be less than 20 MB.\n+     *\n+     * @return A {@link SyncPoller} to poll the progress of the extract receipt operation until it has completed,\n+     * has failed, or has been cancelled.\n+     */\n+    public SyncPoller<OperationResult, IterableStream<ExtractedReceipt>> beginExtractReceiptFromUrl(String sourceUrl) {\n+        return beginExtractReceiptFromUrl(sourceUrl, false, null);\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * with an error message indicating absence of cancellation support</p>\n+     *\n+     * @param sourceUrl The source URL to the input document. Size of the file must be less than 20 MB.\n+     * @param includeTextDetails Include text lines and element references in the result.\n+     * @param pollInterval Duration between each poll for the operation status. If none is specified, a default of\n+     * 5 seconds is used.\n+     *\n+     * @return A {@link SyncPoller} to poll the progress of the extract receipt operation until it has completed,\n+     * has failed, or has been cancelled.\n+     */\n+    public SyncPoller<OperationResult, IterableStream<ExtractedReceipt>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d2d75f04aa2f5a51c7224fd0f98eea8cdda4190"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU4MjIwNA==", "bodyText": "Same here - this method should have Context param.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400582204", "createdAt": "2020-03-31T01:01:04Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerClient.java", "diffHunk": "@@ -0,0 +1,103 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.Utility;\n+import com.azure.ai.formrecognizer.models.ExtractedReceipt;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.SyncPoller;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.time.Duration;\n+\n+/**\n+ * This class provides a synchronous client that contains all the operations that apply to Azure Form Recognizer.\n+ * Operations allowed by the client are, detect language, recognize entities, recognize PII entities,\n+ * recognize linked entities, and analyze sentiment for a text input or a list of text inputs.\n+ *\n+ * <p><strong>Instantiating a synchronous Form Recognizer Client</strong></p>\n+ * TODO: codesnippet\n+ *\n+ * <p>View {@link FormRecognizerClientBuilder this} for additional ways to construct the client.</p>\n+ *\n+ * @see FormRecognizerClientBuilder\n+ */\n+@ServiceClient(builder = FormRecognizerClientBuilder.class)\n+public final class FormRecognizerClient {\n+    private final FormRecognizerAsyncClient client;\n+\n+    /**\n+     * Create a {@code FormRecognizerClient client} that sends requests to the Form Recognizer service's endpoint.\n+     * Each service call goes through the {@link FormRecognizerClientBuilder#pipeline http pipeline}.\n+     *\n+     * @param client The {@link FormRecognizerClient} that the client routes its request through.\n+     */\n+    FormRecognizerClient(FormRecognizerAsyncClient client) {\n+        this.client = client;\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * with an error message indicating absence of cancellation support</p>\n+     *\n+     * @param sourceUrl The source URL to the input document. Size of the file must be less than 20 MB.\n+     *\n+     * @return A {@link SyncPoller} to poll the progress of the extract receipt operation until it has completed,\n+     * has failed, or has been cancelled.\n+     */\n+    public SyncPoller<OperationResult, IterableStream<ExtractedReceipt>> beginExtractReceiptFromUrl(String sourceUrl) {\n+        return beginExtractReceiptFromUrl(sourceUrl, false, null);\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * with an error message indicating absence of cancellation support</p>\n+     *\n+     * @param sourceUrl The source URL to the input document. Size of the file must be less than 20 MB.\n+     * @param includeTextDetails Include text lines and element references in the result.\n+     * @param pollInterval Duration between each poll for the operation status. If none is specified, a default of\n+     * 5 seconds is used.\n+     *\n+     * @return A {@link SyncPoller} to poll the progress of the extract receipt operation until it has completed,\n+     * has failed, or has been cancelled.\n+     */\n+    public SyncPoller<OperationResult, IterableStream<ExtractedReceipt>>\n+        beginExtractReceiptFromUrl(String sourceUrl, boolean includeTextDetails, Duration pollInterval) {\n+        return client.beginExtractReceiptFromUrl(sourceUrl, includeTextDetails, pollInterval).getSyncPoller();\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipt data using optical character recognition (OCR) and a prebuilt\n+     * trained receipt model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * with an error message indicating absence of cancellation support</p>\n+     *\n+     * @param data The data of the document to be extract receipt information from.\n+     * @param length The exact length of the data. Size of the file must be less than 20 MB.\n+     * @param includeTextDetails Include text lines and element references in the result.\n+     * @param formContentType Supported Media types including .pdf, .jpg, .png or .tiff type file stream.\n+     * @param pollInterval Duration between each poll for the operation status. If none is specified, a default of\n+     * 5 seconds is used.\n+     *\n+     * @return A {@link SyncPoller} that polls the extract receipt operation until it has completed, has failed, or has\n+     * been cancelled.\n+     */\n+    public SyncPoller<OperationResult, IterableStream<ExtractedReceipt>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d2d75f04aa2f5a51c7224fd0f98eea8cdda4190"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU4NDQzOA==", "bodyText": "If these keys are not going to be updated frequently, can this be an ExpandableStringEnum?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400584438", "createdAt": "2020-03-31T01:09:08Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeResult;\n+import com.azure.ai.formrecognizer.implementation.models.DocumentResult;\n+import com.azure.ai.formrecognizer.implementation.models.ReadResult;\n+import com.azure.ai.formrecognizer.implementation.models.TextLine;\n+import com.azure.ai.formrecognizer.implementation.models.TextWord;\n+import com.azure.ai.formrecognizer.models.BoundingBox;\n+import com.azure.ai.formrecognizer.models.DimensionUnit;\n+import com.azure.ai.formrecognizer.models.Element;\n+import com.azure.ai.formrecognizer.models.ExtractedReceipt;\n+import com.azure.ai.formrecognizer.models.FieldValue;\n+import com.azure.ai.formrecognizer.models.FloatValue;\n+import com.azure.ai.formrecognizer.models.IntegerValue;\n+import com.azure.ai.formrecognizer.models.LineElement;\n+import com.azure.ai.formrecognizer.models.PageMetadata;\n+import com.azure.ai.formrecognizer.models.Point;\n+import com.azure.ai.formrecognizer.models.ReceiptItem;\n+import com.azure.ai.formrecognizer.models.ReceiptType;\n+import com.azure.ai.formrecognizer.models.StringValue;\n+import com.azure.ai.formrecognizer.models.TextLanguage;\n+import com.azure.ai.formrecognizer.models.WordElement;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Helper class to convert service level models to SDK exposed models.\n+ */\n+final class Transforms {\n+    private static final ClientLogger LOGGER = new ClientLogger(Transforms.class);\n+    private static final Pattern COMPILE = Pattern.compile(\"[^0-9]+\");\n+\n+    private Transforms() {\n+    }\n+\n+    static IterableStream<ExtractedReceipt> toReceipt(AnalyzeResult analyzeResult, boolean includeTextDetails) {\n+        List<ReadResult> readResults = analyzeResult.getReadResults();\n+        List<DocumentResult> documentResult = analyzeResult.getDocumentResults();\n+        List<ExtractedReceipt> extractedReceiptList = new ArrayList<>();\n+\n+        for (int i = 0; i < readResults.size(); i++) {\n+            ReadResult readResultItem = readResults.get(i);\n+            PageMetadata pageMetadata = getPageInfo(readResultItem);\n+            ExtractedReceipt extractedReceiptItem = new ExtractedReceipt(pageMetadata);\n+\n+            DocumentResult documentResultItem = documentResult.get(i);\n+            documentResultItem.getFields().forEach((key, fieldValue) -> {\n+                switch (key) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwODE3OQ=="}, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU4NDk5MQ==", "bodyText": "Instead of silently skipping over unknown keys, if the known set of keys are limited and new keys are not added frequently, this should throw an exception when the key is unknown. And when a new key is added, it should be accompanied by a service version update too right?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400584991", "createdAt": "2020-03-31T01:10:58Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java", "diffHunk": "@@ -0,0 +1,305 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeResult;\n+import com.azure.ai.formrecognizer.implementation.models.DocumentResult;\n+import com.azure.ai.formrecognizer.implementation.models.ReadResult;\n+import com.azure.ai.formrecognizer.implementation.models.TextLine;\n+import com.azure.ai.formrecognizer.implementation.models.TextWord;\n+import com.azure.ai.formrecognizer.models.BoundingBox;\n+import com.azure.ai.formrecognizer.models.DimensionUnit;\n+import com.azure.ai.formrecognizer.models.Element;\n+import com.azure.ai.formrecognizer.models.ExtractedReceipt;\n+import com.azure.ai.formrecognizer.models.FieldValue;\n+import com.azure.ai.formrecognizer.models.FloatValue;\n+import com.azure.ai.formrecognizer.models.IntegerValue;\n+import com.azure.ai.formrecognizer.models.LineElement;\n+import com.azure.ai.formrecognizer.models.PageMetadata;\n+import com.azure.ai.formrecognizer.models.PageRange;\n+import com.azure.ai.formrecognizer.models.Point;\n+import com.azure.ai.formrecognizer.models.ReceiptItem;\n+import com.azure.ai.formrecognizer.models.ReceiptType;\n+import com.azure.ai.formrecognizer.models.StringValue;\n+import com.azure.ai.formrecognizer.models.TextLanguage;\n+import com.azure.ai.formrecognizer.models.WordElement;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Helper class to convert service level models to SDK exposed models.\n+ */\n+final class Transforms {\n+    private static final ClientLogger LOGGER = new ClientLogger(Transforms.class);\n+    // Pattern match to find all digits in the provided string.\n+    private static final Pattern COMPILE = Pattern.compile(\"[^0-9]+\");\n+\n+    private Transforms() {\n+    }\n+\n+    /**\n+     * Helper method to convert the {@link com.azure.ai.formrecognizer.implementation.models.AnalyzeOperationResult}\n+     * service level receipt model to list of {@link ExtractedReceipt}.\n+     *\n+     * @param analyzeResult The result of the analyze receipt operation returned by the service.\n+     * @param includeTextDetails When set to true, a list of references to the text elements is returned in the read result.\n+     *\n+     * @return A list of {@link ExtractedReceipt} to represent the list of extracted receipt information.\n+     */\n+    static IterableStream<ExtractedReceipt> toReceipt(AnalyzeResult analyzeResult, boolean includeTextDetails) {\n+        List<ReadResult> readResults = analyzeResult.getReadResults();\n+        List<DocumentResult> documentResult = analyzeResult.getDocumentResults();\n+        List<ExtractedReceipt> extractedReceiptList = new ArrayList<>();\n+\n+        for (int i = 0; i < readResults.size(); i++) {\n+            ReadResult readResultItem = readResults.get(i);\n+\n+            // add page Info\n+            PageMetadata pageMetadata = getPageInfo(readResultItem);\n+            PageRange pageRange = null;\n+            DocumentResult documentResultItem = documentResult.get(i);\n+            List<Integer> receiptPageRange = documentResultItem.getPageRange();\n+            if (receiptPageRange.size() == 2) {\n+                pageRange = new PageRange(receiptPageRange.get(0), receiptPageRange.get(1));\n+            }\n+            ExtractedReceipt extractedReceiptItem = new ExtractedReceipt(pageMetadata, pageRange);\n+\n+            // add receipt fields\n+            documentResultItem.getFields().forEach((key, fieldValue) -> {\n+                switch (key) {\n+                    case \"ReceiptType\":\n+                        extractedReceiptItem.setReceiptType(new ReceiptType(fieldValue.getValueString(),\n+                            fieldValue.getConfidence()));\n+                        break;\n+                    case \"MerchantName\":\n+                        extractedReceiptItem.setMerchantName(setFieldValue(fieldValue, readResults, includeTextDetails));\n+                        break;\n+                    case \"MerchantAddress\":\n+                        extractedReceiptItem.setMerchantAddress(setFieldValue(fieldValue, readResults, includeTextDetails));\n+                        break;\n+                    case \"MerchantPhoneNumber\":\n+                        extractedReceiptItem.setMerchantPhoneNumber(setFieldValue(fieldValue, readResults, includeTextDetails));\n+                        break;\n+                    case \"Subtotal\":\n+                        extractedReceiptItem.setSubtotal(setFieldValue(fieldValue, readResults, includeTextDetails));\n+                        break;\n+                    case \"Tax\":\n+                        extractedReceiptItem.setTax(setFieldValue(fieldValue, readResults, includeTextDetails));\n+                        break;\n+                    case \"Tip\":\n+                        extractedReceiptItem.setTip(setFieldValue(fieldValue, readResults, includeTextDetails));\n+                        break;\n+                    case \"Total\":\n+                        extractedReceiptItem.setTotal(setFieldValue(fieldValue, readResults, includeTextDetails));\n+                        break;\n+                    case \"TransactionDate\":\n+                        extractedReceiptItem.setTransactionDate(setFieldValue(fieldValue, readResults, includeTextDetails));\n+                        break;\n+                    case \"TransactionTime\":\n+                        extractedReceiptItem.setTransactionTime(setFieldValue(fieldValue, readResults, includeTextDetails));\n+                        break;\n+                    case \"Items\":\n+                        extractedReceiptItem.setReceiptItems(toReceiptItems(fieldValue.getValueArray(), readResults, includeTextDetails));\n+                        break;\n+                    default:\n+                        break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d2d75f04aa2f5a51c7224fd0f98eea8cdda4190"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU4NTkyOQ==", "bodyText": "Same comments as above for these keys.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400585929", "createdAt": "2020-03-31T01:14:11Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java", "diffHunk": "@@ -0,0 +1,305 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeResult;\n+import com.azure.ai.formrecognizer.implementation.models.DocumentResult;\n+import com.azure.ai.formrecognizer.implementation.models.ReadResult;\n+import com.azure.ai.formrecognizer.implementation.models.TextLine;\n+import com.azure.ai.formrecognizer.implementation.models.TextWord;\n+import com.azure.ai.formrecognizer.models.BoundingBox;\n+import com.azure.ai.formrecognizer.models.DimensionUnit;\n+import com.azure.ai.formrecognizer.models.Element;\n+import com.azure.ai.formrecognizer.models.ExtractedReceipt;\n+import com.azure.ai.formrecognizer.models.FieldValue;\n+import com.azure.ai.formrecognizer.models.FloatValue;\n+import com.azure.ai.formrecognizer.models.IntegerValue;\n+import com.azure.ai.formrecognizer.models.LineElement;\n+import com.azure.ai.formrecognizer.models.PageMetadata;\n+import com.azure.ai.formrecognizer.models.PageRange;\n+import com.azure.ai.formrecognizer.models.Point;\n+import com.azure.ai.formrecognizer.models.ReceiptItem;\n+import com.azure.ai.formrecognizer.models.ReceiptType;\n+import com.azure.ai.formrecognizer.models.StringValue;\n+import com.azure.ai.formrecognizer.models.TextLanguage;\n+import com.azure.ai.formrecognizer.models.WordElement;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Helper class to convert service level models to SDK exposed models.\n+ */\n+final class Transforms {\n+    private static final ClientLogger LOGGER = new ClientLogger(Transforms.class);\n+    // Pattern match to find all digits in the provided string.\n+    private static final Pattern COMPILE = Pattern.compile(\"[^0-9]+\");\n+\n+    private Transforms() {\n+    }\n+\n+    /**\n+     * Helper method to convert the {@link com.azure.ai.formrecognizer.implementation.models.AnalyzeOperationResult}\n+     * service level receipt model to list of {@link ExtractedReceipt}.\n+     *\n+     * @param analyzeResult The result of the analyze receipt operation returned by the service.\n+     * @param includeTextDetails When set to true, a list of references to the text elements is returned in the read result.\n+     *\n+     * @return A list of {@link ExtractedReceipt} to represent the list of extracted receipt information.\n+     */\n+    static IterableStream<ExtractedReceipt> toReceipt(AnalyzeResult analyzeResult, boolean includeTextDetails) {\n+        List<ReadResult> readResults = analyzeResult.getReadResults();\n+        List<DocumentResult> documentResult = analyzeResult.getDocumentResults();\n+        List<ExtractedReceipt> extractedReceiptList = new ArrayList<>();\n+\n+        for (int i = 0; i < readResults.size(); i++) {\n+            ReadResult readResultItem = readResults.get(i);\n+\n+            // add page Info\n+            PageMetadata pageMetadata = getPageInfo(readResultItem);\n+            PageRange pageRange = null;\n+            DocumentResult documentResultItem = documentResult.get(i);\n+            List<Integer> receiptPageRange = documentResultItem.getPageRange();\n+            if (receiptPageRange.size() == 2) {\n+                pageRange = new PageRange(receiptPageRange.get(0), receiptPageRange.get(1));\n+            }\n+            ExtractedReceipt extractedReceiptItem = new ExtractedReceipt(pageMetadata, pageRange);\n+\n+            // add receipt fields\n+            documentResultItem.getFields().forEach((key, fieldValue) -> {\n+                switch (key) {\n+                    case \"ReceiptType\":\n+                        extractedReceiptItem.setReceiptType(new ReceiptType(fieldValue.getValueString(),\n+                            fieldValue.getConfidence()));\n+                        break;\n+                    case \"MerchantName\":\n+                        extractedReceiptItem.setMerchantName(setFieldValue(fieldValue, readResults, includeTextDetails));\n+                        break;\n+                    case \"MerchantAddress\":\n+                        extractedReceiptItem.setMerchantAddress(setFieldValue(fieldValue, readResults, includeTextDetails));\n+                        break;\n+                    case \"MerchantPhoneNumber\":\n+                        extractedReceiptItem.setMerchantPhoneNumber(setFieldValue(fieldValue, readResults, includeTextDetails));\n+                        break;\n+                    case \"Subtotal\":\n+                        extractedReceiptItem.setSubtotal(setFieldValue(fieldValue, readResults, includeTextDetails));\n+                        break;\n+                    case \"Tax\":\n+                        extractedReceiptItem.setTax(setFieldValue(fieldValue, readResults, includeTextDetails));\n+                        break;\n+                    case \"Tip\":\n+                        extractedReceiptItem.setTip(setFieldValue(fieldValue, readResults, includeTextDetails));\n+                        break;\n+                    case \"Total\":\n+                        extractedReceiptItem.setTotal(setFieldValue(fieldValue, readResults, includeTextDetails));\n+                        break;\n+                    case \"TransactionDate\":\n+                        extractedReceiptItem.setTransactionDate(setFieldValue(fieldValue, readResults, includeTextDetails));\n+                        break;\n+                    case \"TransactionTime\":\n+                        extractedReceiptItem.setTransactionTime(setFieldValue(fieldValue, readResults, includeTextDetails));\n+                        break;\n+                    case \"Items\":\n+                        extractedReceiptItem.setReceiptItems(toReceiptItems(fieldValue.getValueArray(), readResults, includeTextDetails));\n+                        break;\n+                    default:\n+                        break;\n+                }\n+            });\n+            extractedReceiptList.add(extractedReceiptItem);\n+        }\n+        return new IterableStream<>(extractedReceiptList);\n+    }\n+\n+    /**\n+     * Helper method that converts the incoming service field value to one of the strongly typed SDK level {@link FieldValue} with\n+     * reference elements set when {@code includeTextDetails} is set to true.\n+     *\n+     * @param fieldValue The named field values returned by the service.\n+     * @param readResults The result containing the list of element references when includeTextDetails is set to true.\n+     * @param includeTextDetails When set to true, a list of references to the text elements is returned in the read result.\n+     *\n+     * @return The strongly typed {@link FieldValue} for the field input.\n+     */\n+    private static FieldValue<?> setFieldValue(com.azure.ai.formrecognizer.implementation.models.FieldValue fieldValue,\n+                                               List<ReadResult> readResults, boolean includeTextDetails) {\n+        FieldValue<?> value;\n+        switch (fieldValue.getType()) {\n+            case PHONE_NUMBER:\n+            case STRING:\n+            case TIME:\n+            case DATE:\n+                value = toFieldValueString(fieldValue);\n+                break;\n+            case INTEGER:\n+                value = toFieldValueInteger(fieldValue);\n+                break;\n+            case NUMBER:\n+                value = toFieldValueNumber(fieldValue);\n+                break;\n+            case ARRAY:\n+            case OBJECT:\n+            default:\n+                throw LOGGER.logExceptionAsError(new RuntimeException(\"FieldValue Type not supported\"));\n+        }\n+        if (includeTextDetails) {\n+            value.setElements(setReferenceElements(readResults, fieldValue.getElements()));\n+        }\n+        return value;\n+    }\n+\n+    /**\n+     * Helper method that converts the service returned page information to SDK model {@link PageMetadata}.\n+     *\n+     * @param readResultItem A read result item returned from the service containing the page information for provided\n+     * input.\n+     *\n+     * @return The {@link PageMetadata} for the receipt page.\n+     */\n+    private static PageMetadata getPageInfo(ReadResult readResultItem) {\n+        return new PageMetadata(TextLanguage.fromString(readResultItem.getLanguage().toString()),\n+            readResultItem.getHeight(), readResultItem.getPage(), readResultItem.getWidth(),\n+            readResultItem.getAngle(), DimensionUnit.fromString(readResultItem.getUnit().toString()));\n+    }\n+\n+    /**\n+     * Helper method to set the text reference elements on FieldValue/fields when {@code includeTextDetails} set to true.\n+     *\n+     * @param readResults The ReadResult containing the resolved references for text elements.\n+     * @param elements When includeTextDetails is set to true, a list of references to the text\n+     * elements constituting this field value.\n+     *\n+     * @return The updated {@link FieldValue} object with list if referenced elements.\n+     */\n+    private static List<Element> setReferenceElements(List<ReadResult> readResults, List<String> elements) {\n+        List<Element> elementList = new ArrayList<>();\n+        elements.forEach(elementString -> {\n+            String[] indices = COMPILE.matcher(elementString).replaceAll(\" \").trim().split(\" \");\n+            int readResultIndex, lineIndex;\n+            if (indices.length >= 1) {\n+                readResultIndex = Integer.parseInt(indices[0]);\n+                lineIndex = Integer.parseInt(indices[1]);\n+            } else {\n+                throw LOGGER.logExceptionAsError(new RuntimeException(\"Reference Elements not found\"));\n+            }\n+            if (indices.length == 3) {\n+                int wordIndex = Integer.parseInt(indices[2]);\n+                TextWord textWord = readResults.get(readResultIndex).getLines().get(lineIndex).getWords()\n+                    .get(wordIndex);\n+                WordElement wordElement = new WordElement(textWord.getText(), toBoundingBox(textWord.getBoundingBox()));\n+                elementList.add(wordElement);\n+            } else {\n+                TextLine textLine = readResults.get(readResultIndex).getLines().get(lineIndex);\n+                LineElement lineElement = new LineElement(textLine.getText(), toBoundingBox(textLine.getBoundingBox()));\n+                elementList.add(lineElement);\n+            }\n+        });\n+        return elementList;\n+    }\n+\n+    /**\n+     * Helper method to convert the service level modeled eight numbers representing the four points to SDK level\n+     * {@link BoundingBox}.\n+     *\n+     * @param boundingBox A list of eight numbers representing the four points of a box.\n+     *\n+     * @return A {@link BoundingBox}.\n+     */\n+    private static BoundingBox toBoundingBox(List<Float> boundingBox) {\n+        List<Point> pointList = new ArrayList<>();\n+        for (int i = 0; i < boundingBox.size(); i += 2) {\n+            Point point = new Point(boundingBox.get(i), boundingBox.get(i + 1));\n+            pointList.add(point);\n+        }\n+        return new BoundingBox(pointList);\n+    }\n+\n+    /**\n+     * Helper method to convert the service level {@link com.azure.ai.formrecognizer.implementation.models.FieldValue#getValueArray() value items}\n+     * to SDK level {@link ReceiptItem receipt items}.\n+     *\n+     * @param fieldValue The named field values returned by the service.\n+     * @param readResults The result containing the list of element references when includeTextDetails is set to true.\n+     * @param includeTextDetails When set to true, a list of references to the text elements is returned in the read result.\n+     *\n+     * @return A list of {@link ReceiptItem}.\n+     */\n+    private static List<ReceiptItem> toReceiptItems(\n+        List<com.azure.ai.formrecognizer.implementation.models.FieldValue> fieldValue, List<ReadResult> readResults, boolean includeTextDetails) {\n+        List<ReceiptItem> receiptItemList = new ArrayList<>();\n+        fieldValue.forEach(fieldValue1 -> {\n+            ReceiptItem receiptItem = new ReceiptItem();\n+            fieldValue1.getValueObject().forEach((key, fieldValue2) -> {\n+                switch (key) {\n+                    case \"Quantity\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d2d75f04aa2f5a51c7224fd0f98eea8cdda4190"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU4ODcwNA==", "bodyText": "Add @inheritdoc javadoc tag for all these overridden methods.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400588704", "createdAt": "2020-03-31T01:24:45Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/IntegerValue.java", "diffHunk": "@@ -0,0 +1,62 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer.models;\n+\n+import java.util.List;\n+\n+/**\n+ * Class to represent the Integer value for\n+ * {@link com.azure.ai.formrecognizer.implementation.models.FieldValue#getValueInteger()}\n+ */\n+public class IntegerValue extends FieldValue<Integer> {\n+\n+    /*\n+     * Integer value.\n+     */\n+    private Integer valueInteger;\n+\n+    /*\n+     * Type of the FieldValue.\n+     */\n+    private final FieldValueType fieldValueType;\n+\n+    /**\n+     * Constructs an IntegerValue.\n+     *\n+     * @param text The text content of the extracted field.\n+     * @param boundingBox Bounding box of the field value.\n+     * @param valueInteger Integer value.\n+     * @param pageNumber The 1 based page number of the document on which this field is found.\n+     */\n+    public IntegerValue(String text, BoundingBox boundingBox, Integer valueInteger, int pageNumber) {\n+        super(text, boundingBox, pageNumber);\n+        this.valueInteger = valueInteger;\n+        this.fieldValueType = FieldValueType.INTEGER;\n+    }\n+\n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d2d75f04aa2f5a51c7224fd0f98eea8cdda4190"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5MDAzOQ==", "bodyText": "Should this have a public ctor? Do we expect users to create instances of this class?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400590039", "createdAt": "2020-03-31T01:29:11Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/WordElement.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer.models;\n+\n+import com.azure.core.annotation.Immutable;\n+\n+/**\n+ * Creates an element of type {@link ElementType#WORD}\n+ */\n+@Immutable\n+public final class WordElement extends Element {\n+    /*\n+     * Type of the element.\n+     */\n+    private final ElementType elementType;\n+\n+    /**\n+     * Creates an {@link Element element} of type Word.\n+     *\n+     * @param text Text content of the extracted field.\n+     * @param boundingBox Bounding box of the field value, if appropriate.\n+     */\n+    public WordElement(String text, BoundingBox boundingBox) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d2d75f04aa2f5a51c7224fd0f98eea8cdda4190"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5MDY2Mg==", "bodyText": "Why does it open models package to com.azure.core?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r400590662", "createdAt": "2020-03-31T01:31:15Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/module-info.java", "diffHunk": "@@ -0,0 +1,13 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+module com.azure.ai.formrecognizer {\n+    requires transitive com.azure.core;\n+\n+    exports com.azure.ai.formrecognizer;\n+    exports com.azure.ai.formrecognizer.models;\n+\n+    opens com.azure.ai.formrecognizer.implementation to com.fasterxml.jackson.databind;\n+    opens com.azure.ai.formrecognizer.models to com.fasterxml.jackson.databind;\n+    opens com.azure.ai.formrecognizer.implementation.models to com.fasterxml.jackson.databind, com.azure.core;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d2d75f04aa2f5a51c7224fd0f98eea8cdda4190"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0OTE0MDA4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#pullrequestreview-384914008", "createdAt": "2020-03-31T16:40:34Z", "commit": {"oid": "e550685a367496584a0b2b2c57577a4202eb7283"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjo0MDozNFrOF-engA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzowMDo0MVrOF-fbpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA1NzY2NA==", "bodyText": "I believe in another comment you mentioned Form Recognizer doesn't support AAD, should the bit about AAD be removed?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r401057664", "createdAt": "2020-03-31T16:40:34Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -0,0 +1,196 @@\n+# Azure Form Recognizer client library for Java\n+Form Recognizer is a cloud-based cognitive service that uses machine learning technology to identify and extract text, \n+key-value pairs and table data from form documents.\n+\n+[Source code][source_code] | [Package (Maven)][package] | [API reference documentation][api_reference_doc] | [Product Documentation][product_documentation] | [Samples][samples_readme]\n+\n+## Getting started\n+\n+### Prerequisites\n+- Java Development Kit (JDK) with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- [Cognitive Services or Form Recognizer account][form_recognizer_account] to use this package.\n+\n+### Adding the package to your product\n+\n+[//]: # ({x-version-update-start;com.azure:azure-ai-formrecognizer;current})\n+```xml\n+<dependency>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-ai-formrecognizer</artifactId>\n+    <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+[//]: # ({x-version-update-end})\n+\n+### Create a Form Recognizer resource\n+Form Recognizer supports both [multi-service and single-service access][service_access]. Create a Cognitive Services \n+resource if you plan to access multiple cognitive services under a single endpoint/key. For Form Recognizer access only,\n+create a Form Recognizer resource.\n+\n+You can create either resource using the \n+\n+**Option 1:** [Azure Portal][create_new_resource] \n+\n+**Option 2:** [Azure CLI][azure_cli]\n+\n+Below is an example of how you can create a Form Recognizer resource using the CLI:\n+\n+```bash\n+# Create a new resource group to hold the Form Recognizer resource -\n+# if using an existing resource group, skip this step\n+az group create --name my-resource-group --location westus2\n+```\n+\n+```bash\n+# Create Form Recognizer\n+az cognitiveservices account create \\\n+    --name text-analytics-resource \\\n+    --resource-group my-resource-group \\\n+    --kind TextAnalytics \\\n+    --sku F0 \\\n+    --location westus2 \\\n+    --yes\n+```\n+### Authenticate the client\n+In order to interact with the Form Recognizer service, you will need to create an instance of the `FormRecognizerClient` \n+class. You will need an **endpoint** and an **API key** to instantiate a client object, \n+they can be found in the [Azure Portal][azure_portal] under the \"Quickstart\" in your created\n+Form Recognizer resource. See the full details regarding [authentication][authentication] of Cognitive Services.\n+\n+#### Get credentials\n+The authentication credential may be provided as the API key to your resource or as a token from Azure Active Directory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e550685a367496584a0b2b2c57577a4202eb7283"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA1ODA3OQ==", "bodyText": "Remember to resolve this TODO before shipping the preview.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r401058079", "createdAt": "2020-03-31T16:41:11Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -0,0 +1,196 @@\n+# Azure Form Recognizer client library for Java\n+Form Recognizer is a cloud-based cognitive service that uses machine learning technology to identify and extract text, \n+key-value pairs and table data from form documents.\n+\n+[Source code][source_code] | [Package (Maven)][package] | [API reference documentation][api_reference_doc] | [Product Documentation][product_documentation] | [Samples][samples_readme]\n+\n+## Getting started\n+\n+### Prerequisites\n+- Java Development Kit (JDK) with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- [Cognitive Services or Form Recognizer account][form_recognizer_account] to use this package.\n+\n+### Adding the package to your product\n+\n+[//]: # ({x-version-update-start;com.azure:azure-ai-formrecognizer;current})\n+```xml\n+<dependency>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-ai-formrecognizer</artifactId>\n+    <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+[//]: # ({x-version-update-end})\n+\n+### Create a Form Recognizer resource\n+Form Recognizer supports both [multi-service and single-service access][service_access]. Create a Cognitive Services \n+resource if you plan to access multiple cognitive services under a single endpoint/key. For Form Recognizer access only,\n+create a Form Recognizer resource.\n+\n+You can create either resource using the \n+\n+**Option 1:** [Azure Portal][create_new_resource] \n+\n+**Option 2:** [Azure CLI][azure_cli]\n+\n+Below is an example of how you can create a Form Recognizer resource using the CLI:\n+\n+```bash\n+# Create a new resource group to hold the Form Recognizer resource -\n+# if using an existing resource group, skip this step\n+az group create --name my-resource-group --location westus2\n+```\n+\n+```bash\n+# Create Form Recognizer\n+az cognitiveservices account create \\\n+    --name text-analytics-resource \\\n+    --resource-group my-resource-group \\\n+    --kind TextAnalytics \\\n+    --sku F0 \\\n+    --location westus2 \\\n+    --yes\n+```\n+### Authenticate the client\n+In order to interact with the Form Recognizer service, you will need to create an instance of the `FormRecognizerClient` \n+class. You will need an **endpoint** and an **API key** to instantiate a client object, \n+they can be found in the [Azure Portal][azure_portal] under the \"Quickstart\" in your created\n+Form Recognizer resource. See the full details regarding [authentication][authentication] of Cognitive Services.\n+\n+#### Get credentials\n+The authentication credential may be provided as the API key to your resource or as a token from Azure Active Directory.\n+\n+##### Create FormRecognizerClient with API Key Credential\n+To use an [API key][api_key], provide the key as a string. This can be found in the [Azure Portal][azure_portal] \n+   under the \"Quickstart\" section or by running the following Azure CLI command:\n+\n+```bash\n+az cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n+```\n+Use the API key as the credential parameter to authenticate the client:\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L38-L41 -->\n+```java\n+FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()\n+    .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+    .endpoint(\"{endpoint}\")\n+    .buildClient();\n+```\n+The Azure Form Recognizer client library provides a way to **rotate the existing API key**.\n+\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L58-L64 -->\n+```java\n+AzureKeyCredential credential = new AzureKeyCredential(\"{api_key}\");\n+FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()\n+    .apiKey(credential)\n+    .endpoint(\"{endpoint}\")\n+    .buildClient();\n+\n+credential.update(\"{new_api_key}\");\n+```\n+\n+## Key concepts\n+### Client\n+The Form Recognizer client library provides a [FormRecognizerClient][form_recognizer_sync_client] and \n+[FormRecognizerAsyncClient][form_recognizer_async_client]. It provides both synchronous and\n+asynchronous operations to access a specific use of Form Recognizer, such as training custom models,\n+extracting layout and receipt information from documents.\n+\n+## Examples\n+The following sections provide several code snippets covering some of the most common Form Recognizer tasks, including:\n+\n+### Form Recognizer Client\n+Form Recognizer support both synchronous and asynchronous client creation by using\n+`FormRecognizerClientBuilder`,\n+\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L38-L41 -->\n+``` java\n+FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()\n+    .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+    .endpoint(\"{endpoint}\")\n+    .buildClient();\n+```\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L48-L51 -->\n+``` java\n+FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+    .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+    .endpoint(\"{endpoint}\")\n+    .buildAsyncClient();\n+```\n+\n+### Extract receipt information\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L68-L86 -->\n+```java\n+String receiptSourceUrl = \"https://docs.microsoft.com/en-us/azure/cognitive-services/form-recognizer/media/contoso-allinone.jpg\";\n+SyncPoller<OperationResult, IterableStream<ExtractedReceipt>> syncPoller =\n+    formRecognizerClient.beginExtractReceipt(receiptSourceUrl);\n+IterableStream<ExtractedReceipt> extractedReceipts = syncPoller.getFinalResult();\n+\n+for (ExtractedReceipt extractedReceiptItem : extractedReceipts) {\n+    System.out.printf(\"Page Number %s%n\", extractedReceiptItem.getPageMetadata().getPageNumber());\n+    System.out.printf(\"Merchant Name %s%n\", extractedReceiptItem.getMerchantName().getText());\n+    System.out.printf(\"Merchant Address %s%n\", extractedReceiptItem.getMerchantAddress().getText());\n+    System.out.printf(\"Merchant Phone Number %s%n\", extractedReceiptItem.getMerchantPhoneNumber().getText());\n+    System.out.printf(\"Total: %s%n\", extractedReceiptItem.getTotal().getText());\n+    System.out.printf(\"Receipt Items: %n\");\n+    extractedReceiptItem.getReceiptItems().forEach(receiptItem -> {\n+        System.out.printf(\"Name: %s%n\", receiptItem.getName().getText());\n+        System.out.printf(\"Quantity: %s%n\", receiptItem.getQuantity().getText());\n+        System.out.printf(\"Total Price: %s%n\", receiptItem.getTotalPrice().getText());\n+        System.out.println();\n+    });\n+}\n+```\n+For more detailed examples, refer to [here][samples_readme].\n+\n+## Troubleshooting\n+### General\n+Form Recognizer clients raise exceptions. \n+TODO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e550685a367496584a0b2b2c57577a4202eb7283"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA1ODczNg==", "bodyText": "We'll want to verify this link once the package is shipped.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r401058736", "createdAt": "2020-03-31T16:42:06Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -0,0 +1,196 @@\n+# Azure Form Recognizer client library for Java\n+Form Recognizer is a cloud-based cognitive service that uses machine learning technology to identify and extract text, \n+key-value pairs and table data from form documents.\n+\n+[Source code][source_code] | [Package (Maven)][package] | [API reference documentation][api_reference_doc] | [Product Documentation][product_documentation] | [Samples][samples_readme]\n+\n+## Getting started\n+\n+### Prerequisites\n+- Java Development Kit (JDK) with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- [Cognitive Services or Form Recognizer account][form_recognizer_account] to use this package.\n+\n+### Adding the package to your product\n+\n+[//]: # ({x-version-update-start;com.azure:azure-ai-formrecognizer;current})\n+```xml\n+<dependency>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-ai-formrecognizer</artifactId>\n+    <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+[//]: # ({x-version-update-end})\n+\n+### Create a Form Recognizer resource\n+Form Recognizer supports both [multi-service and single-service access][service_access]. Create a Cognitive Services \n+resource if you plan to access multiple cognitive services under a single endpoint/key. For Form Recognizer access only,\n+create a Form Recognizer resource.\n+\n+You can create either resource using the \n+\n+**Option 1:** [Azure Portal][create_new_resource] \n+\n+**Option 2:** [Azure CLI][azure_cli]\n+\n+Below is an example of how you can create a Form Recognizer resource using the CLI:\n+\n+```bash\n+# Create a new resource group to hold the Form Recognizer resource -\n+# if using an existing resource group, skip this step\n+az group create --name my-resource-group --location westus2\n+```\n+\n+```bash\n+# Create Form Recognizer\n+az cognitiveservices account create \\\n+    --name text-analytics-resource \\\n+    --resource-group my-resource-group \\\n+    --kind TextAnalytics \\\n+    --sku F0 \\\n+    --location westus2 \\\n+    --yes\n+```\n+### Authenticate the client\n+In order to interact with the Form Recognizer service, you will need to create an instance of the `FormRecognizerClient` \n+class. You will need an **endpoint** and an **API key** to instantiate a client object, \n+they can be found in the [Azure Portal][azure_portal] under the \"Quickstart\" in your created\n+Form Recognizer resource. See the full details regarding [authentication][authentication] of Cognitive Services.\n+\n+#### Get credentials\n+The authentication credential may be provided as the API key to your resource or as a token from Azure Active Directory.\n+\n+##### Create FormRecognizerClient with API Key Credential\n+To use an [API key][api_key], provide the key as a string. This can be found in the [Azure Portal][azure_portal] \n+   under the \"Quickstart\" section or by running the following Azure CLI command:\n+\n+```bash\n+az cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n+```\n+Use the API key as the credential parameter to authenticate the client:\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L38-L41 -->\n+```java\n+FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()\n+    .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+    .endpoint(\"{endpoint}\")\n+    .buildClient();\n+```\n+The Azure Form Recognizer client library provides a way to **rotate the existing API key**.\n+\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L58-L64 -->\n+```java\n+AzureKeyCredential credential = new AzureKeyCredential(\"{api_key}\");\n+FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()\n+    .apiKey(credential)\n+    .endpoint(\"{endpoint}\")\n+    .buildClient();\n+\n+credential.update(\"{new_api_key}\");\n+```\n+\n+## Key concepts\n+### Client\n+The Form Recognizer client library provides a [FormRecognizerClient][form_recognizer_sync_client] and \n+[FormRecognizerAsyncClient][form_recognizer_async_client]. It provides both synchronous and\n+asynchronous operations to access a specific use of Form Recognizer, such as training custom models,\n+extracting layout and receipt information from documents.\n+\n+## Examples\n+The following sections provide several code snippets covering some of the most common Form Recognizer tasks, including:\n+\n+### Form Recognizer Client\n+Form Recognizer support both synchronous and asynchronous client creation by using\n+`FormRecognizerClientBuilder`,\n+\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L38-L41 -->\n+``` java\n+FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()\n+    .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+    .endpoint(\"{endpoint}\")\n+    .buildClient();\n+```\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L48-L51 -->\n+``` java\n+FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+    .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+    .endpoint(\"{endpoint}\")\n+    .buildAsyncClient();\n+```\n+\n+### Extract receipt information\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L68-L86 -->\n+```java\n+String receiptSourceUrl = \"https://docs.microsoft.com/en-us/azure/cognitive-services/form-recognizer/media/contoso-allinone.jpg\";\n+SyncPoller<OperationResult, IterableStream<ExtractedReceipt>> syncPoller =\n+    formRecognizerClient.beginExtractReceipt(receiptSourceUrl);\n+IterableStream<ExtractedReceipt> extractedReceipts = syncPoller.getFinalResult();\n+\n+for (ExtractedReceipt extractedReceiptItem : extractedReceipts) {\n+    System.out.printf(\"Page Number %s%n\", extractedReceiptItem.getPageMetadata().getPageNumber());\n+    System.out.printf(\"Merchant Name %s%n\", extractedReceiptItem.getMerchantName().getText());\n+    System.out.printf(\"Merchant Address %s%n\", extractedReceiptItem.getMerchantAddress().getText());\n+    System.out.printf(\"Merchant Phone Number %s%n\", extractedReceiptItem.getMerchantPhoneNumber().getText());\n+    System.out.printf(\"Total: %s%n\", extractedReceiptItem.getTotal().getText());\n+    System.out.printf(\"Receipt Items: %n\");\n+    extractedReceiptItem.getReceiptItems().forEach(receiptItem -> {\n+        System.out.printf(\"Name: %s%n\", receiptItem.getName().getText());\n+        System.out.printf(\"Quantity: %s%n\", receiptItem.getQuantity().getText());\n+        System.out.printf(\"Total Price: %s%n\", receiptItem.getTotalPrice().getText());\n+        System.out.println();\n+    });\n+}\n+```\n+For more detailed examples, refer to [here][samples_readme].\n+\n+## Troubleshooting\n+### General\n+Form Recognizer clients raise exceptions. \n+TODO\n+\n+### Enable client logging\n+Azure SDKs for Java offer a consistent logging story to help aid in troubleshooting application errors and expedite \n+their resolution. The logs produced will capture the flow of an application before reaching the terminal state to help \n+locate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n+\n+### Default HTTP Client\n+All client libraries by default use the Netty HTTP client. Adding the above dependency will automatically configure \n+the client library to use the Netty HTTP client. Configuring or changing the HTTP client is detailed in the\n+[HTTP clients wiki](https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients).\n+\n+## Next steps\n+- Samples are explained in detail [here][samples_readme].\n+\n+## Contributing\n+\n+This project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n+\n+When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n+\n+This project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n+\n+<!-- LINKS -->\n+[api_key]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=multiservice%2Cwindows#get-the-keys-for-your-resource\n+[api_reference_doc]: https://aka.ms/azsdk-java-formrecognizer-ref-docs\n+[authentication]: https://docs.microsoft.com/azure/cognitive-services/authentication\n+[azure_cli]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account-cli?tabs=windows\n+[azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/identity/azure-identity#credentials\n+[azure_portal]: https://ms.portal.azure.com\n+[azure_subscription]: https://azure.microsoft.com/free\n+[cla]: https://cla.microsoft.com\n+[coc]: https://opensource.microsoft.com/codeofconduct/\n+[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n+[coc_contact]: mailto:opencode@microsoft.com\n+[create_new_resource]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=multiservice%2Cwindows#create-a-new-azure-cognitive-services-resource\n+[package]: https://mvnrepository.com/artifact/com.azure/azure-ai-formrecognizer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e550685a367496584a0b2b2c57577a4202eb7283"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA1ODk1Ng==", "bodyText": "Why are we pointing to the Python repo?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r401058956", "createdAt": "2020-03-31T16:42:27Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -0,0 +1,196 @@\n+# Azure Form Recognizer client library for Java\n+Form Recognizer is a cloud-based cognitive service that uses machine learning technology to identify and extract text, \n+key-value pairs and table data from form documents.\n+\n+[Source code][source_code] | [Package (Maven)][package] | [API reference documentation][api_reference_doc] | [Product Documentation][product_documentation] | [Samples][samples_readme]\n+\n+## Getting started\n+\n+### Prerequisites\n+- Java Development Kit (JDK) with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- [Cognitive Services or Form Recognizer account][form_recognizer_account] to use this package.\n+\n+### Adding the package to your product\n+\n+[//]: # ({x-version-update-start;com.azure:azure-ai-formrecognizer;current})\n+```xml\n+<dependency>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-ai-formrecognizer</artifactId>\n+    <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+[//]: # ({x-version-update-end})\n+\n+### Create a Form Recognizer resource\n+Form Recognizer supports both [multi-service and single-service access][service_access]. Create a Cognitive Services \n+resource if you plan to access multiple cognitive services under a single endpoint/key. For Form Recognizer access only,\n+create a Form Recognizer resource.\n+\n+You can create either resource using the \n+\n+**Option 1:** [Azure Portal][create_new_resource] \n+\n+**Option 2:** [Azure CLI][azure_cli]\n+\n+Below is an example of how you can create a Form Recognizer resource using the CLI:\n+\n+```bash\n+# Create a new resource group to hold the Form Recognizer resource -\n+# if using an existing resource group, skip this step\n+az group create --name my-resource-group --location westus2\n+```\n+\n+```bash\n+# Create Form Recognizer\n+az cognitiveservices account create \\\n+    --name text-analytics-resource \\\n+    --resource-group my-resource-group \\\n+    --kind TextAnalytics \\\n+    --sku F0 \\\n+    --location westus2 \\\n+    --yes\n+```\n+### Authenticate the client\n+In order to interact with the Form Recognizer service, you will need to create an instance of the `FormRecognizerClient` \n+class. You will need an **endpoint** and an **API key** to instantiate a client object, \n+they can be found in the [Azure Portal][azure_portal] under the \"Quickstart\" in your created\n+Form Recognizer resource. See the full details regarding [authentication][authentication] of Cognitive Services.\n+\n+#### Get credentials\n+The authentication credential may be provided as the API key to your resource or as a token from Azure Active Directory.\n+\n+##### Create FormRecognizerClient with API Key Credential\n+To use an [API key][api_key], provide the key as a string. This can be found in the [Azure Portal][azure_portal] \n+   under the \"Quickstart\" section or by running the following Azure CLI command:\n+\n+```bash\n+az cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n+```\n+Use the API key as the credential parameter to authenticate the client:\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L38-L41 -->\n+```java\n+FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()\n+    .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+    .endpoint(\"{endpoint}\")\n+    .buildClient();\n+```\n+The Azure Form Recognizer client library provides a way to **rotate the existing API key**.\n+\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L58-L64 -->\n+```java\n+AzureKeyCredential credential = new AzureKeyCredential(\"{api_key}\");\n+FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()\n+    .apiKey(credential)\n+    .endpoint(\"{endpoint}\")\n+    .buildClient();\n+\n+credential.update(\"{new_api_key}\");\n+```\n+\n+## Key concepts\n+### Client\n+The Form Recognizer client library provides a [FormRecognizerClient][form_recognizer_sync_client] and \n+[FormRecognizerAsyncClient][form_recognizer_async_client]. It provides both synchronous and\n+asynchronous operations to access a specific use of Form Recognizer, such as training custom models,\n+extracting layout and receipt information from documents.\n+\n+## Examples\n+The following sections provide several code snippets covering some of the most common Form Recognizer tasks, including:\n+\n+### Form Recognizer Client\n+Form Recognizer support both synchronous and asynchronous client creation by using\n+`FormRecognizerClientBuilder`,\n+\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L38-L41 -->\n+``` java\n+FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()\n+    .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+    .endpoint(\"{endpoint}\")\n+    .buildClient();\n+```\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L48-L51 -->\n+``` java\n+FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+    .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+    .endpoint(\"{endpoint}\")\n+    .buildAsyncClient();\n+```\n+\n+### Extract receipt information\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L68-L86 -->\n+```java\n+String receiptSourceUrl = \"https://docs.microsoft.com/en-us/azure/cognitive-services/form-recognizer/media/contoso-allinone.jpg\";\n+SyncPoller<OperationResult, IterableStream<ExtractedReceipt>> syncPoller =\n+    formRecognizerClient.beginExtractReceipt(receiptSourceUrl);\n+IterableStream<ExtractedReceipt> extractedReceipts = syncPoller.getFinalResult();\n+\n+for (ExtractedReceipt extractedReceiptItem : extractedReceipts) {\n+    System.out.printf(\"Page Number %s%n\", extractedReceiptItem.getPageMetadata().getPageNumber());\n+    System.out.printf(\"Merchant Name %s%n\", extractedReceiptItem.getMerchantName().getText());\n+    System.out.printf(\"Merchant Address %s%n\", extractedReceiptItem.getMerchantAddress().getText());\n+    System.out.printf(\"Merchant Phone Number %s%n\", extractedReceiptItem.getMerchantPhoneNumber().getText());\n+    System.out.printf(\"Total: %s%n\", extractedReceiptItem.getTotal().getText());\n+    System.out.printf(\"Receipt Items: %n\");\n+    extractedReceiptItem.getReceiptItems().forEach(receiptItem -> {\n+        System.out.printf(\"Name: %s%n\", receiptItem.getName().getText());\n+        System.out.printf(\"Quantity: %s%n\", receiptItem.getQuantity().getText());\n+        System.out.printf(\"Total Price: %s%n\", receiptItem.getTotalPrice().getText());\n+        System.out.println();\n+    });\n+}\n+```\n+For more detailed examples, refer to [here][samples_readme].\n+\n+## Troubleshooting\n+### General\n+Form Recognizer clients raise exceptions. \n+TODO\n+\n+### Enable client logging\n+Azure SDKs for Java offer a consistent logging story to help aid in troubleshooting application errors and expedite \n+their resolution. The logs produced will capture the flow of an application before reaching the terminal state to help \n+locate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n+\n+### Default HTTP Client\n+All client libraries by default use the Netty HTTP client. Adding the above dependency will automatically configure \n+the client library to use the Netty HTTP client. Configuring or changing the HTTP client is detailed in the\n+[HTTP clients wiki](https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients).\n+\n+## Next steps\n+- Samples are explained in detail [here][samples_readme].\n+\n+## Contributing\n+\n+This project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n+\n+When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n+\n+This project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n+\n+<!-- LINKS -->\n+[api_key]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=multiservice%2Cwindows#get-the-keys-for-your-resource\n+[api_reference_doc]: https://aka.ms/azsdk-java-formrecognizer-ref-docs\n+[authentication]: https://docs.microsoft.com/azure/cognitive-services/authentication\n+[azure_cli]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account-cli?tabs=windows\n+[azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/identity/azure-identity#credentials", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e550685a367496584a0b2b2c57577a4202eb7283"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA2MDM0NA==", "bodyText": "nit: missing a .", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r401060344", "createdAt": "2020-03-31T16:44:31Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -0,0 +1,241 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl;\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeOperationResult;\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeReceiptAsyncHeaders;\n+import com.azure.ai.formrecognizer.implementation.models.ContentType;\n+import com.azure.ai.formrecognizer.implementation.models.SourcePath;\n+import com.azure.ai.formrecognizer.models.ExtractedReceipt;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollResponse;\n+import com.azure.core.util.polling.PollerFlux;\n+import com.azure.core.util.polling.PollingContext;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+import java.time.Duration;\n+import java.util.Objects;\n+import java.util.UUID;\n+import java.util.function.Function;\n+\n+import static com.azure.ai.formrecognizer.Transforms.toReceipt;\n+import static com.azure.core.util.FluxUtil.monoError;\n+\n+/**\n+ * This class provides an asynchronous client that contains all the operations that apply to Azure Form Recognizer.\n+ * Operations allowed by the client are language detection, sentiment analysis, and recognition entities, PII entities,\n+ * and linked entities of a text input or list of test inputs.\n+ *\n+ * <p><strong>Instantiating an asynchronous Form Recognizer Client</strong></p>\n+ * TODO: codesnippet\n+ *\n+ * <p>View {@link FormRecognizerClientBuilder} for additional ways to construct the client.</p>\n+ *\n+ * @see FormRecognizerClientBuilder\n+ */\n+@ServiceClient(builder = FormRecognizerClientBuilder.class, isAsync = true)\n+public final class FormRecognizerAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(FormRecognizerAsyncClient.class);\n+    private final FormRecognizerClientImpl service;\n+    private final FormRecognizerServiceVersion serviceVersion;\n+\n+    /**\n+     * Create a {@code FormRecognizerAsyncClient} that sends requests to the Form Recognizer services's endpoint. Each\n+     * service call goes through the {@link FormRecognizerClientBuilder#pipeline(HttpPipeline)}  http pipeline}.\n+     *\n+     * @param service The proxy service used to perform REST calls.\n+     * @param serviceVersion The versions of Azure Form Recognizer supported by this client library.\n+     */\n+    FormRecognizerAsyncClient(FormRecognizerClientImpl service, FormRecognizerServiceVersion serviceVersion) {\n+        this.service = service;\n+        this.serviceVersion = serviceVersion;\n+    }\n+\n+    /**\n+     * Gets the service version the client is using.\n+     *\n+     * @return the service version the client is using.\n+     */\n+    public FormRecognizerServiceVersion getServiceVersion() {\n+        return serviceVersion;\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * with an error message indicating absence of cancellation support</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e550685a367496584a0b2b2c57577a4202eb7283"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA2MjQxNg==", "bodyText": "Should this also state that the document should be no larger than 20MB or does this use a different API on the service side which allows for larger files?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r401062416", "createdAt": "2020-03-31T16:47:43Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -0,0 +1,241 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl;\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeOperationResult;\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeReceiptAsyncHeaders;\n+import com.azure.ai.formrecognizer.implementation.models.ContentType;\n+import com.azure.ai.formrecognizer.implementation.models.SourcePath;\n+import com.azure.ai.formrecognizer.models.ExtractedReceipt;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollResponse;\n+import com.azure.core.util.polling.PollerFlux;\n+import com.azure.core.util.polling.PollingContext;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+import java.time.Duration;\n+import java.util.Objects;\n+import java.util.UUID;\n+import java.util.function.Function;\n+\n+import static com.azure.ai.formrecognizer.Transforms.toReceipt;\n+import static com.azure.core.util.FluxUtil.monoError;\n+\n+/**\n+ * This class provides an asynchronous client that contains all the operations that apply to Azure Form Recognizer.\n+ * Operations allowed by the client are language detection, sentiment analysis, and recognition entities, PII entities,\n+ * and linked entities of a text input or list of test inputs.\n+ *\n+ * <p><strong>Instantiating an asynchronous Form Recognizer Client</strong></p>\n+ * TODO: codesnippet\n+ *\n+ * <p>View {@link FormRecognizerClientBuilder} for additional ways to construct the client.</p>\n+ *\n+ * @see FormRecognizerClientBuilder\n+ */\n+@ServiceClient(builder = FormRecognizerClientBuilder.class, isAsync = true)\n+public final class FormRecognizerAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(FormRecognizerAsyncClient.class);\n+    private final FormRecognizerClientImpl service;\n+    private final FormRecognizerServiceVersion serviceVersion;\n+\n+    /**\n+     * Create a {@code FormRecognizerAsyncClient} that sends requests to the Form Recognizer services's endpoint. Each\n+     * service call goes through the {@link FormRecognizerClientBuilder#pipeline(HttpPipeline)}  http pipeline}.\n+     *\n+     * @param service The proxy service used to perform REST calls.\n+     * @param serviceVersion The versions of Azure Form Recognizer supported by this client library.\n+     */\n+    FormRecognizerAsyncClient(FormRecognizerClientImpl service, FormRecognizerServiceVersion serviceVersion) {\n+        this.service = service;\n+        this.serviceVersion = serviceVersion;\n+    }\n+\n+    /**\n+     * Gets the service version the client is using.\n+     *\n+     * @return the service version the client is using.\n+     */\n+    public FormRecognizerServiceVersion getServiceVersion() {\n+        return serviceVersion;\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * with an error message indicating absence of cancellation support</p>\n+     *\n+     * @param sourceUrl The source URL to the input document. Size of the file must be less than 20 MB.\n+     *\n+     * @return A {@link PollerFlux} that polls the extract receipt operation until it has completed, has failed, or has\n+     * been cancelled.\n+     */\n+    public PollerFlux<OperationResult, IterableStream<ExtractedReceipt>> beginExtractReceiptFromUrl(String sourceUrl) {\n+        return beginExtractReceiptFromUrl(sourceUrl, false, null);\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * with an error message indicating absence of cancellation support</p>\n+     *\n+     * @param sourceUrl The source URL to the input document. Size of the file must be less than 20 MB.\n+     * @param includeTextDetails Include text lines and element references in the result.\n+     * @param pollInterval Duration between each poll for the operation status. If none is specified, a default of\n+     * 5 seconds is used.\n+     *\n+     * @return A {@link PollerFlux} that polls the extract receipt operation until it has completed, has failed, or has\n+     * been cancelled.\n+     */\n+    public PollerFlux<OperationResult, IterableStream<ExtractedReceipt>>\n+        beginExtractReceiptFromUrl(String sourceUrl, boolean includeTextDetails,\n+                               Duration pollInterval) {\n+        Objects.requireNonNull(sourceUrl, \"'sourceUrl' is required and cannot be null.\");\n+        final Duration interval = pollInterval != null ? pollInterval : Duration.ofSeconds(5);\n+        return new PollerFlux<OperationResult, IterableStream<ExtractedReceipt>>(interval,\n+            receiptAnalyzeActivationOperation(sourceUrl, includeTextDetails),\n+            extractReceiptPollOperation(),\n+            (activationResponse, context) -> Mono.error(new RuntimeException(\"Cancellation is not supported\")),\n+            fetchExtractReceiptResult(includeTextDetails));\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts data using optical character recognition (OCR) and a prebuilt receipt\n+     * trained model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * with an error message indicating absence of cancellation support</p>\n+     *\n+     * @param data The data of the document to be extract receipt information from.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e550685a367496584a0b2b2c57577a4202eb7283"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA2MzAyMA==", "bodyText": "Should this have a reduce API? I'm only seeing a single beginExtractReceipt whereas beginExtractReceiptFromUrl has two APIs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r401063020", "createdAt": "2020-03-31T16:48:34Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -0,0 +1,241 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl;\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeOperationResult;\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeReceiptAsyncHeaders;\n+import com.azure.ai.formrecognizer.implementation.models.ContentType;\n+import com.azure.ai.formrecognizer.implementation.models.SourcePath;\n+import com.azure.ai.formrecognizer.models.ExtractedReceipt;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollResponse;\n+import com.azure.core.util.polling.PollerFlux;\n+import com.azure.core.util.polling.PollingContext;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+import java.time.Duration;\n+import java.util.Objects;\n+import java.util.UUID;\n+import java.util.function.Function;\n+\n+import static com.azure.ai.formrecognizer.Transforms.toReceipt;\n+import static com.azure.core.util.FluxUtil.monoError;\n+\n+/**\n+ * This class provides an asynchronous client that contains all the operations that apply to Azure Form Recognizer.\n+ * Operations allowed by the client are language detection, sentiment analysis, and recognition entities, PII entities,\n+ * and linked entities of a text input or list of test inputs.\n+ *\n+ * <p><strong>Instantiating an asynchronous Form Recognizer Client</strong></p>\n+ * TODO: codesnippet\n+ *\n+ * <p>View {@link FormRecognizerClientBuilder} for additional ways to construct the client.</p>\n+ *\n+ * @see FormRecognizerClientBuilder\n+ */\n+@ServiceClient(builder = FormRecognizerClientBuilder.class, isAsync = true)\n+public final class FormRecognizerAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(FormRecognizerAsyncClient.class);\n+    private final FormRecognizerClientImpl service;\n+    private final FormRecognizerServiceVersion serviceVersion;\n+\n+    /**\n+     * Create a {@code FormRecognizerAsyncClient} that sends requests to the Form Recognizer services's endpoint. Each\n+     * service call goes through the {@link FormRecognizerClientBuilder#pipeline(HttpPipeline)}  http pipeline}.\n+     *\n+     * @param service The proxy service used to perform REST calls.\n+     * @param serviceVersion The versions of Azure Form Recognizer supported by this client library.\n+     */\n+    FormRecognizerAsyncClient(FormRecognizerClientImpl service, FormRecognizerServiceVersion serviceVersion) {\n+        this.service = service;\n+        this.serviceVersion = serviceVersion;\n+    }\n+\n+    /**\n+     * Gets the service version the client is using.\n+     *\n+     * @return the service version the client is using.\n+     */\n+    public FormRecognizerServiceVersion getServiceVersion() {\n+        return serviceVersion;\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * with an error message indicating absence of cancellation support</p>\n+     *\n+     * @param sourceUrl The source URL to the input document. Size of the file must be less than 20 MB.\n+     *\n+     * @return A {@link PollerFlux} that polls the extract receipt operation until it has completed, has failed, or has\n+     * been cancelled.\n+     */\n+    public PollerFlux<OperationResult, IterableStream<ExtractedReceipt>> beginExtractReceiptFromUrl(String sourceUrl) {\n+        return beginExtractReceiptFromUrl(sourceUrl, false, null);\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * with an error message indicating absence of cancellation support</p>\n+     *\n+     * @param sourceUrl The source URL to the input document. Size of the file must be less than 20 MB.\n+     * @param includeTextDetails Include text lines and element references in the result.\n+     * @param pollInterval Duration between each poll for the operation status. If none is specified, a default of\n+     * 5 seconds is used.\n+     *\n+     * @return A {@link PollerFlux} that polls the extract receipt operation until it has completed, has failed, or has\n+     * been cancelled.\n+     */\n+    public PollerFlux<OperationResult, IterableStream<ExtractedReceipt>>\n+        beginExtractReceiptFromUrl(String sourceUrl, boolean includeTextDetails,\n+                               Duration pollInterval) {\n+        Objects.requireNonNull(sourceUrl, \"'sourceUrl' is required and cannot be null.\");\n+        final Duration interval = pollInterval != null ? pollInterval : Duration.ofSeconds(5);\n+        return new PollerFlux<OperationResult, IterableStream<ExtractedReceipt>>(interval,\n+            receiptAnalyzeActivationOperation(sourceUrl, includeTextDetails),\n+            extractReceiptPollOperation(),\n+            (activationResponse, context) -> Mono.error(new RuntimeException(\"Cancellation is not supported\")),\n+            fetchExtractReceiptResult(includeTextDetails));\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts data using optical character recognition (OCR) and a prebuilt receipt\n+     * trained model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * with an error message indicating absence of cancellation support</p>\n+     *\n+     * @param data The data of the document to be extract receipt information from.\n+     * @param length The exact length of the data. Size of the file must be less than 20 MB.\n+     * @param includeTextDetails Include text lines and element references in the result.\n+     * @param formContentType Supported Media types including .pdf, .jpg, .png or .tiff type file stream.\n+     * @param pollInterval Duration between each poll for the operation status. If none is specified, a default of\n+     * 5 seconds is used.\n+     *\n+     * @return A {@link PollerFlux} that polls the extract receipt operation until it has completed, has failed, or has\n+     * been cancelled.\n+     */\n+    public PollerFlux<OperationResult, IterableStream<ExtractedReceipt>> beginExtractReceipt(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e550685a367496584a0b2b2c57577a4202eb7283"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA2MzkxMg==", "bodyText": "Never mind, I see the parameter below mentions this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r401063912", "createdAt": "2020-03-31T16:49:54Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -0,0 +1,241 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl;\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeOperationResult;\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeReceiptAsyncHeaders;\n+import com.azure.ai.formrecognizer.implementation.models.ContentType;\n+import com.azure.ai.formrecognizer.implementation.models.SourcePath;\n+import com.azure.ai.formrecognizer.models.ExtractedReceipt;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollResponse;\n+import com.azure.core.util.polling.PollerFlux;\n+import com.azure.core.util.polling.PollingContext;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+import java.time.Duration;\n+import java.util.Objects;\n+import java.util.UUID;\n+import java.util.function.Function;\n+\n+import static com.azure.ai.formrecognizer.Transforms.toReceipt;\n+import static com.azure.core.util.FluxUtil.monoError;\n+\n+/**\n+ * This class provides an asynchronous client that contains all the operations that apply to Azure Form Recognizer.\n+ * Operations allowed by the client are language detection, sentiment analysis, and recognition entities, PII entities,\n+ * and linked entities of a text input or list of test inputs.\n+ *\n+ * <p><strong>Instantiating an asynchronous Form Recognizer Client</strong></p>\n+ * TODO: codesnippet\n+ *\n+ * <p>View {@link FormRecognizerClientBuilder} for additional ways to construct the client.</p>\n+ *\n+ * @see FormRecognizerClientBuilder\n+ */\n+@ServiceClient(builder = FormRecognizerClientBuilder.class, isAsync = true)\n+public final class FormRecognizerAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(FormRecognizerAsyncClient.class);\n+    private final FormRecognizerClientImpl service;\n+    private final FormRecognizerServiceVersion serviceVersion;\n+\n+    /**\n+     * Create a {@code FormRecognizerAsyncClient} that sends requests to the Form Recognizer services's endpoint. Each\n+     * service call goes through the {@link FormRecognizerClientBuilder#pipeline(HttpPipeline)}  http pipeline}.\n+     *\n+     * @param service The proxy service used to perform REST calls.\n+     * @param serviceVersion The versions of Azure Form Recognizer supported by this client library.\n+     */\n+    FormRecognizerAsyncClient(FormRecognizerClientImpl service, FormRecognizerServiceVersion serviceVersion) {\n+        this.service = service;\n+        this.serviceVersion = serviceVersion;\n+    }\n+\n+    /**\n+     * Gets the service version the client is using.\n+     *\n+     * @return the service version the client is using.\n+     */\n+    public FormRecognizerServiceVersion getServiceVersion() {\n+        return serviceVersion;\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * with an error message indicating absence of cancellation support</p>\n+     *\n+     * @param sourceUrl The source URL to the input document. Size of the file must be less than 20 MB.\n+     *\n+     * @return A {@link PollerFlux} that polls the extract receipt operation until it has completed, has failed, or has\n+     * been cancelled.\n+     */\n+    public PollerFlux<OperationResult, IterableStream<ExtractedReceipt>> beginExtractReceiptFromUrl(String sourceUrl) {\n+        return beginExtractReceiptFromUrl(sourceUrl, false, null);\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * with an error message indicating absence of cancellation support</p>\n+     *\n+     * @param sourceUrl The source URL to the input document. Size of the file must be less than 20 MB.\n+     * @param includeTextDetails Include text lines and element references in the result.\n+     * @param pollInterval Duration between each poll for the operation status. If none is specified, a default of\n+     * 5 seconds is used.\n+     *\n+     * @return A {@link PollerFlux} that polls the extract receipt operation until it has completed, has failed, or has\n+     * been cancelled.\n+     */\n+    public PollerFlux<OperationResult, IterableStream<ExtractedReceipt>>\n+        beginExtractReceiptFromUrl(String sourceUrl, boolean includeTextDetails,\n+                               Duration pollInterval) {\n+        Objects.requireNonNull(sourceUrl, \"'sourceUrl' is required and cannot be null.\");\n+        final Duration interval = pollInterval != null ? pollInterval : Duration.ofSeconds(5);\n+        return new PollerFlux<OperationResult, IterableStream<ExtractedReceipt>>(interval,\n+            receiptAnalyzeActivationOperation(sourceUrl, includeTextDetails),\n+            extractReceiptPollOperation(),\n+            (activationResponse, context) -> Mono.error(new RuntimeException(\"Cancellation is not supported\")),\n+            fetchExtractReceiptResult(includeTextDetails));\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts data using optical character recognition (OCR) and a prebuilt receipt\n+     * trained model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * with an error message indicating absence of cancellation support</p>\n+     *\n+     * @param data The data of the document to be extract receipt information from.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA2MjQxNg=="}, "originalCommit": {"oid": "e550685a367496584a0b2b2c57577a4202eb7283"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA2NjE5MQ==", "bodyText": "Same question as the async client, should this have a reduced parameters API", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r401066191", "createdAt": "2020-03-31T16:53:21Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerClient.java", "diffHunk": "@@ -0,0 +1,103 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.Utility;\n+import com.azure.ai.formrecognizer.models.ExtractedReceipt;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.SyncPoller;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.time.Duration;\n+\n+/**\n+ * This class provides a synchronous client that contains all the operations that apply to Azure Form Recognizer.\n+ * Operations allowed by the client are, detect language, recognize entities, recognize PII entities,\n+ * recognize linked entities, and analyze sentiment for a text input or a list of text inputs.\n+ *\n+ * <p><strong>Instantiating a synchronous Form Recognizer Client</strong></p>\n+ * TODO: codesnippet\n+ *\n+ * <p>View {@link FormRecognizerClientBuilder this} for additional ways to construct the client.</p>\n+ *\n+ * @see FormRecognizerClientBuilder\n+ */\n+@ServiceClient(builder = FormRecognizerClientBuilder.class)\n+public final class FormRecognizerClient {\n+    private final FormRecognizerAsyncClient client;\n+\n+    /**\n+     * Create a {@code FormRecognizerClient client} that sends requests to the Form Recognizer service's endpoint.\n+     * Each service call goes through the {@link FormRecognizerClientBuilder#pipeline http pipeline}.\n+     *\n+     * @param client The {@link FormRecognizerClient} that the client routes its request through.\n+     */\n+    FormRecognizerClient(FormRecognizerAsyncClient client) {\n+        this.client = client;\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * with an error message indicating absence of cancellation support</p>\n+     *\n+     * @param sourceUrl The source URL to the input document. Size of the file must be less than 20 MB.\n+     *\n+     * @return A {@link SyncPoller} to poll the progress of the extract receipt operation until it has completed,\n+     * has failed, or has been cancelled.\n+     */\n+    public SyncPoller<OperationResult, IterableStream<ExtractedReceipt>> beginExtractReceiptFromUrl(String sourceUrl) {\n+        return beginExtractReceiptFromUrl(sourceUrl, false, null);\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * with an error message indicating absence of cancellation support</p>\n+     *\n+     * @param sourceUrl The source URL to the input document. Size of the file must be less than 20 MB.\n+     * @param includeTextDetails Include text lines and element references in the result.\n+     * @param pollInterval Duration between each poll for the operation status. If none is specified, a default of\n+     * 5 seconds is used.\n+     *\n+     * @return A {@link SyncPoller} to poll the progress of the extract receipt operation until it has completed,\n+     * has failed, or has been cancelled.\n+     */\n+    public SyncPoller<OperationResult, IterableStream<ExtractedReceipt>>\n+        beginExtractReceiptFromUrl(String sourceUrl, boolean includeTextDetails, Duration pollInterval) {\n+        return client.beginExtractReceiptFromUrl(sourceUrl, includeTextDetails, pollInterval).getSyncPoller();\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipt data using optical character recognition (OCR) and a prebuilt\n+     * trained receipt model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * with an error message indicating absence of cancellation support</p>\n+     *\n+     * @param data The data of the document to be extract receipt information from.\n+     * @param length The exact length of the data. Size of the file must be less than 20 MB.\n+     * @param includeTextDetails Include text lines and element references in the result.\n+     * @param formContentType Supported Media types including .pdf, .jpg, .png or .tiff type file stream.\n+     * @param pollInterval Duration between each poll for the operation status. If none is specified, a default of\n+     * 5 seconds is used.\n+     *\n+     * @return A {@link SyncPoller} that polls the extract receipt operation until it has completed, has failed, or has\n+     * been cancelled.\n+     */\n+    public SyncPoller<OperationResult, IterableStream<ExtractedReceipt>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e550685a367496584a0b2b2c57577a4202eb7283"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA2ODMwOA==", "bodyText": "I believe this is wrong in other places too, as I've seen it, this should be updated to something similar as the following.\n* <p>If {@code logOptions} isn't provided, the default options will use {@link HttpLogDetailLevel#NONE} which will prevent logging.</p>", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r401068308", "createdAt": "2020-03-31T16:56:35Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerClientBuilder.java", "diffHunk": "@@ -0,0 +1,337 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl;\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImplBuilder;\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.ContentType;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.AzureKeyCredentialPolicy;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.HttpPolicyProviders;\n+import com.azure.core.http.policy.RequestIdPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.temporal.ChronoUnit;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help instantiation of {@link FormRecognizerClient FormRecognizerClients}\n+ * and {@link FormRecognizerAsyncClient FormRecognizerAsyncClients}, call {@link #buildClient()} buildClient} and\n+ * {@link #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ *\n+ * <p>\n+ * The client needs the service endpoint of the Azure Form Recognizer to access the resource service.\n+ * {@link #apiKey(AzureKeyCredential)} gives\n+ * the builder access credential.\n+ * </p>\n+ * <p>\n+ * Another way to construct the client is using a {@link HttpPipeline}. The pipeline gives the client an\n+ * authenticated way to communicate with the service. Set the pipeline with {@link #pipeline(HttpPipeline) this} and\n+ * set the service endpoint with {@link #endpoint(String) this}. Using a\n+ * pipeline requires additional setup but allows for finer control on how the {@link FormRecognizerClient} and\n+ * {@link FormRecognizerAsyncClient} is built.\n+ * </p>\n+ *\n+ * @see FormRecognizerAsyncClient\n+ * @see FormRecognizerClient\n+ */\n+@ServiceClientBuilder(serviceClients = {FormRecognizerAsyncClient.class, FormRecognizerClient.class})\n+public final class FormRecognizerClientBuilder {\n+\n+    private static final String ECHO_REQUEST_ID_HEADER = \"x-ms-return-client-request-id\";\n+    private static final String CONTENT_TYPE_HEADER_VALUE = ContentType.APPLICATION_JSON;\n+    private static final String ACCEPT_HEADER = \"Accept\";\n+    private static final String FORM_RECOGNIZER_PROPERTIES = \"azure-ai-formrecognizer.properties\";\n+    static final String OCP_APIM_SUBSCRIPTION_KEY = \"Ocp-Apim-Subscription-Key\";\n+\n+    private static final String NAME = \"name\";\n+    private static final String VERSION = \"version\";\n+    private static final RetryPolicy DEFAULT_RETRY_POLICY = new RetryPolicy(\"retry-after-ms\", ChronoUnit.MILLIS);\n+\n+    private final ClientLogger logger = new ClientLogger(FormRecognizerClientBuilder.class);\n+    private final List<HttpPipelinePolicy> policies;\n+    private final HttpHeaders headers;\n+    private final String clientName;\n+    private final String clientVersion;\n+\n+    private String endpoint;\n+    private AzureKeyCredential credential;\n+    private HttpClient httpClient;\n+    private HttpLogOptions httpLogOptions;\n+    private HttpPipeline httpPipeline;\n+    private Configuration configuration;\n+    private RetryPolicy retryPolicy;\n+    private FormRecognizerServiceVersion version;\n+\n+    /**\n+     * The constructor with defaults.\n+     */\n+    public FormRecognizerClientBuilder() {\n+        policies = new ArrayList<>();\n+        httpLogOptions = new HttpLogOptions();\n+\n+        Map<String, String> properties = CoreUtils.getProperties(FORM_RECOGNIZER_PROPERTIES);\n+        clientName = properties.getOrDefault(NAME, \"UnknownName\");\n+        clientVersion = properties.getOrDefault(VERSION, \"UnknownVersion\");\n+\n+        headers = new HttpHeaders()\n+            .put(ECHO_REQUEST_ID_HEADER, \"true\")\n+            .put(ACCEPT_HEADER, CONTENT_TYPE_HEADER_VALUE);\n+    }\n+\n+    /**\n+     * Creates a {@link FormRecognizerClient} based on options set in the builder. Every time\n+     * {@code buildClient()} is called a new instance of {@link FormRecognizerClient} is created.\n+     *\n+     * <p>\n+     * If {@link #pipeline(HttpPipeline) pipeline} is set, then the {@code pipeline} and\n+     * {@link #endpoint(String) endpoint} are used to create the {@link FormRecognizerClient client}. All other builder\n+     * settings are ignored\n+     * </p>\n+     *\n+     * @return A FormRecognizerClient with the options set from the builder.\n+     * @throws NullPointerException if {@link #endpoint(String) endpoint} or\n+     * {@link #apiKey(AzureKeyCredential) apiKey} has not been set.\n+     * @throws IllegalArgumentException if {@link #endpoint(String) endpoint} cannot be parsed into a valid URL.\n+     */\n+    public FormRecognizerClient buildClient() {\n+        return new FormRecognizerClient(buildAsyncClient());\n+    }\n+\n+    /**\n+     * Creates a {@link FormRecognizerAsyncClient} based on options set in the builder. Every time\n+     * {@code buildAsyncClient()} is called a new instance of {@link FormRecognizerAsyncClient} is created.\n+     *\n+     * <p>\n+     * If {@link #pipeline(HttpPipeline) pipeline} is set, then the {@code pipeline} and\n+     * {@link #endpoint(String) endpoint} are used to create the {@link FormRecognizerClient client}. All other builder\n+     * settings are ignored.\n+     * </p>\n+     *\n+     * @return A FormRecognizerAsyncClient with the options set from the builder.\n+     * @throws NullPointerException if {@link #endpoint(String) endpoint} or\n+     * {@link #apiKey(AzureKeyCredential) apiKey} has not been set.\n+     * @throws IllegalArgumentException if {@link #endpoint(String) endpoint} cannot be parsed into a valid URL.\n+     */\n+    public FormRecognizerAsyncClient buildAsyncClient() {\n+        Objects.requireNonNull(endpoint, \"'Endpoint' is required and can not be null.\");\n+\n+        // Global Env configuration store\n+        final Configuration buildConfiguration = (configuration == null)\n+            ? Configuration.getGlobalConfiguration().clone() : configuration;\n+        // Service Version\n+        final FormRecognizerServiceVersion serviceVersion =\n+            version != null ? version : FormRecognizerServiceVersion.getLatest();\n+\n+        // Endpoint cannot be null, which is required in request authentication\n+\n+        HttpPipeline pipeline = httpPipeline;\n+        // Create a default Pipeline if it is not given\n+        if (pipeline == null) {\n+            // Closest to API goes first, closest to wire goes last.\n+            final List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+            // Authentications\n+            if (credential != null) {\n+                policies.add(new AzureKeyCredentialPolicy(OCP_APIM_SUBSCRIPTION_KEY, credential));\n+            } else {\n+                // Throw exception that credential and tokenCredential cannot be null\n+                throw logger.logExceptionAsError(\n+                    new IllegalArgumentException(\"Missing credential information while building a client.\"));\n+            }\n+\n+            policies.add(new UserAgentPolicy(httpLogOptions.getApplicationId(), clientName, clientVersion,\n+                buildConfiguration));\n+            policies.add(new RequestIdPolicy());\n+            policies.add(new AddHeadersPolicy(headers));\n+\n+            HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+            policies.add(retryPolicy == null ? DEFAULT_RETRY_POLICY : retryPolicy);\n+            policies.addAll(this.policies);\n+            HttpPolicyProviders.addAfterRetryPolicies(policies);\n+\n+            policies.add(new AddDatePolicy());\n+            policies.add(new HttpLoggingPolicy(httpLogOptions));\n+\n+            pipeline = new HttpPipelineBuilder()\n+                .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+                .httpClient(httpClient)\n+                .build();\n+        }\n+\n+        final FormRecognizerClientImpl formRecognizerAPI = new FormRecognizerClientImplBuilder()\n+            .endpoint(endpoint)\n+            .pipeline(pipeline)\n+            .build();\n+\n+        return new FormRecognizerAsyncClient(formRecognizerAPI, serviceVersion);\n+    }\n+\n+    /**\n+     * Sets the service endpoint for the Azure Form Recognizer instance.\n+     *\n+     * @param endpoint The URL of the Azure Form Recognizer instance service requests to and receive responses from.\n+     * @return The updated FormRecognizerClientBuilder object.\n+     * @throws NullPointerException if {@code endpoint} is null\n+     * @throws IllegalArgumentException if {@code endpoint} cannot be parsed into a valid URL.\n+     */\n+    public FormRecognizerClientBuilder endpoint(String endpoint) {\n+        Objects.requireNonNull(endpoint, \"'endpoint' cannot be null.\");\n+\n+        try {\n+            new URL(endpoint);\n+        } catch (MalformedURLException ex) {\n+            throw logger.logExceptionAsWarning(new IllegalArgumentException(\"'endpoint' must be a valid URL.\", ex));\n+        }\n+\n+        if (endpoint.endsWith(\"/\")) {\n+            this.endpoint = endpoint.substring(0, endpoint.length() - 1);\n+        } else {\n+            this.endpoint = endpoint;\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the credential to use when authenticating HTTP requests for this FormRecognizerClientBuilder.\n+     *\n+     * @param apiKeyCredential API key credential\n+     *\n+     * @return The updated FormRecognizerClientBuilder object.\n+     * @throws NullPointerException If {@code apiKeyCredential} is {@code null}\n+     */\n+    public FormRecognizerClientBuilder apiKey(AzureKeyCredential apiKeyCredential) {\n+        this.credential = Objects.requireNonNull(apiKeyCredential, \"'apiKeyCredential' cannot be null.\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the logging configuration for HTTP requests and responses.\n+     *\n+     * <p> If logLevel is not provided, default value of {@link HttpLogDetailLevel#NONE} is set. </p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e550685a367496584a0b2b2c57577a4202eb7283"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA2OTI0OQ==", "bodyText": "Should we link to the default RetryPolicy? {@link RetryPolicy#RetryPolicy()}", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r401069249", "createdAt": "2020-03-31T16:57:57Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerClientBuilder.java", "diffHunk": "@@ -0,0 +1,337 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl;\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImplBuilder;\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.ContentType;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.AzureKeyCredentialPolicy;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.HttpPolicyProviders;\n+import com.azure.core.http.policy.RequestIdPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.temporal.ChronoUnit;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help instantiation of {@link FormRecognizerClient FormRecognizerClients}\n+ * and {@link FormRecognizerAsyncClient FormRecognizerAsyncClients}, call {@link #buildClient()} buildClient} and\n+ * {@link #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ *\n+ * <p>\n+ * The client needs the service endpoint of the Azure Form Recognizer to access the resource service.\n+ * {@link #apiKey(AzureKeyCredential)} gives\n+ * the builder access credential.\n+ * </p>\n+ * <p>\n+ * Another way to construct the client is using a {@link HttpPipeline}. The pipeline gives the client an\n+ * authenticated way to communicate with the service. Set the pipeline with {@link #pipeline(HttpPipeline) this} and\n+ * set the service endpoint with {@link #endpoint(String) this}. Using a\n+ * pipeline requires additional setup but allows for finer control on how the {@link FormRecognizerClient} and\n+ * {@link FormRecognizerAsyncClient} is built.\n+ * </p>\n+ *\n+ * @see FormRecognizerAsyncClient\n+ * @see FormRecognizerClient\n+ */\n+@ServiceClientBuilder(serviceClients = {FormRecognizerAsyncClient.class, FormRecognizerClient.class})\n+public final class FormRecognizerClientBuilder {\n+\n+    private static final String ECHO_REQUEST_ID_HEADER = \"x-ms-return-client-request-id\";\n+    private static final String CONTENT_TYPE_HEADER_VALUE = ContentType.APPLICATION_JSON;\n+    private static final String ACCEPT_HEADER = \"Accept\";\n+    private static final String FORM_RECOGNIZER_PROPERTIES = \"azure-ai-formrecognizer.properties\";\n+    static final String OCP_APIM_SUBSCRIPTION_KEY = \"Ocp-Apim-Subscription-Key\";\n+\n+    private static final String NAME = \"name\";\n+    private static final String VERSION = \"version\";\n+    private static final RetryPolicy DEFAULT_RETRY_POLICY = new RetryPolicy(\"retry-after-ms\", ChronoUnit.MILLIS);\n+\n+    private final ClientLogger logger = new ClientLogger(FormRecognizerClientBuilder.class);\n+    private final List<HttpPipelinePolicy> policies;\n+    private final HttpHeaders headers;\n+    private final String clientName;\n+    private final String clientVersion;\n+\n+    private String endpoint;\n+    private AzureKeyCredential credential;\n+    private HttpClient httpClient;\n+    private HttpLogOptions httpLogOptions;\n+    private HttpPipeline httpPipeline;\n+    private Configuration configuration;\n+    private RetryPolicy retryPolicy;\n+    private FormRecognizerServiceVersion version;\n+\n+    /**\n+     * The constructor with defaults.\n+     */\n+    public FormRecognizerClientBuilder() {\n+        policies = new ArrayList<>();\n+        httpLogOptions = new HttpLogOptions();\n+\n+        Map<String, String> properties = CoreUtils.getProperties(FORM_RECOGNIZER_PROPERTIES);\n+        clientName = properties.getOrDefault(NAME, \"UnknownName\");\n+        clientVersion = properties.getOrDefault(VERSION, \"UnknownVersion\");\n+\n+        headers = new HttpHeaders()\n+            .put(ECHO_REQUEST_ID_HEADER, \"true\")\n+            .put(ACCEPT_HEADER, CONTENT_TYPE_HEADER_VALUE);\n+    }\n+\n+    /**\n+     * Creates a {@link FormRecognizerClient} based on options set in the builder. Every time\n+     * {@code buildClient()} is called a new instance of {@link FormRecognizerClient} is created.\n+     *\n+     * <p>\n+     * If {@link #pipeline(HttpPipeline) pipeline} is set, then the {@code pipeline} and\n+     * {@link #endpoint(String) endpoint} are used to create the {@link FormRecognizerClient client}. All other builder\n+     * settings are ignored\n+     * </p>\n+     *\n+     * @return A FormRecognizerClient with the options set from the builder.\n+     * @throws NullPointerException if {@link #endpoint(String) endpoint} or\n+     * {@link #apiKey(AzureKeyCredential) apiKey} has not been set.\n+     * @throws IllegalArgumentException if {@link #endpoint(String) endpoint} cannot be parsed into a valid URL.\n+     */\n+    public FormRecognizerClient buildClient() {\n+        return new FormRecognizerClient(buildAsyncClient());\n+    }\n+\n+    /**\n+     * Creates a {@link FormRecognizerAsyncClient} based on options set in the builder. Every time\n+     * {@code buildAsyncClient()} is called a new instance of {@link FormRecognizerAsyncClient} is created.\n+     *\n+     * <p>\n+     * If {@link #pipeline(HttpPipeline) pipeline} is set, then the {@code pipeline} and\n+     * {@link #endpoint(String) endpoint} are used to create the {@link FormRecognizerClient client}. All other builder\n+     * settings are ignored.\n+     * </p>\n+     *\n+     * @return A FormRecognizerAsyncClient with the options set from the builder.\n+     * @throws NullPointerException if {@link #endpoint(String) endpoint} or\n+     * {@link #apiKey(AzureKeyCredential) apiKey} has not been set.\n+     * @throws IllegalArgumentException if {@link #endpoint(String) endpoint} cannot be parsed into a valid URL.\n+     */\n+    public FormRecognizerAsyncClient buildAsyncClient() {\n+        Objects.requireNonNull(endpoint, \"'Endpoint' is required and can not be null.\");\n+\n+        // Global Env configuration store\n+        final Configuration buildConfiguration = (configuration == null)\n+            ? Configuration.getGlobalConfiguration().clone() : configuration;\n+        // Service Version\n+        final FormRecognizerServiceVersion serviceVersion =\n+            version != null ? version : FormRecognizerServiceVersion.getLatest();\n+\n+        // Endpoint cannot be null, which is required in request authentication\n+\n+        HttpPipeline pipeline = httpPipeline;\n+        // Create a default Pipeline if it is not given\n+        if (pipeline == null) {\n+            // Closest to API goes first, closest to wire goes last.\n+            final List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+            // Authentications\n+            if (credential != null) {\n+                policies.add(new AzureKeyCredentialPolicy(OCP_APIM_SUBSCRIPTION_KEY, credential));\n+            } else {\n+                // Throw exception that credential and tokenCredential cannot be null\n+                throw logger.logExceptionAsError(\n+                    new IllegalArgumentException(\"Missing credential information while building a client.\"));\n+            }\n+\n+            policies.add(new UserAgentPolicy(httpLogOptions.getApplicationId(), clientName, clientVersion,\n+                buildConfiguration));\n+            policies.add(new RequestIdPolicy());\n+            policies.add(new AddHeadersPolicy(headers));\n+\n+            HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+            policies.add(retryPolicy == null ? DEFAULT_RETRY_POLICY : retryPolicy);\n+            policies.addAll(this.policies);\n+            HttpPolicyProviders.addAfterRetryPolicies(policies);\n+\n+            policies.add(new AddDatePolicy());\n+            policies.add(new HttpLoggingPolicy(httpLogOptions));\n+\n+            pipeline = new HttpPipelineBuilder()\n+                .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+                .httpClient(httpClient)\n+                .build();\n+        }\n+\n+        final FormRecognizerClientImpl formRecognizerAPI = new FormRecognizerClientImplBuilder()\n+            .endpoint(endpoint)\n+            .pipeline(pipeline)\n+            .build();\n+\n+        return new FormRecognizerAsyncClient(formRecognizerAPI, serviceVersion);\n+    }\n+\n+    /**\n+     * Sets the service endpoint for the Azure Form Recognizer instance.\n+     *\n+     * @param endpoint The URL of the Azure Form Recognizer instance service requests to and receive responses from.\n+     * @return The updated FormRecognizerClientBuilder object.\n+     * @throws NullPointerException if {@code endpoint} is null\n+     * @throws IllegalArgumentException if {@code endpoint} cannot be parsed into a valid URL.\n+     */\n+    public FormRecognizerClientBuilder endpoint(String endpoint) {\n+        Objects.requireNonNull(endpoint, \"'endpoint' cannot be null.\");\n+\n+        try {\n+            new URL(endpoint);\n+        } catch (MalformedURLException ex) {\n+            throw logger.logExceptionAsWarning(new IllegalArgumentException(\"'endpoint' must be a valid URL.\", ex));\n+        }\n+\n+        if (endpoint.endsWith(\"/\")) {\n+            this.endpoint = endpoint.substring(0, endpoint.length() - 1);\n+        } else {\n+            this.endpoint = endpoint;\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the credential to use when authenticating HTTP requests for this FormRecognizerClientBuilder.\n+     *\n+     * @param apiKeyCredential API key credential\n+     *\n+     * @return The updated FormRecognizerClientBuilder object.\n+     * @throws NullPointerException If {@code apiKeyCredential} is {@code null}\n+     */\n+    public FormRecognizerClientBuilder apiKey(AzureKeyCredential apiKeyCredential) {\n+        this.credential = Objects.requireNonNull(apiKeyCredential, \"'apiKeyCredential' cannot be null.\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the logging configuration for HTTP requests and responses.\n+     *\n+     * <p> If logLevel is not provided, default value of {@link HttpLogDetailLevel#NONE} is set. </p>\n+     *\n+     * @param logOptions The logging configuration to use when sending and receiving HTTP requests/responses.\n+     *\n+     * @return The updated FormRecognizerClientBuilder object.\n+     */\n+    public FormRecognizerClientBuilder httpLogOptions(HttpLogOptions logOptions) {\n+        this.httpLogOptions = logOptions;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds a policy to the set of existing policies that are executed after required policies.\n+     *\n+     * @param policy The retry policy for service requests.\n+     *\n+     * @return The updated FormRecognizerClientImplBuilder object.\n+     * @throws NullPointerException If {@code policy} is {@code null}.\n+     */\n+    public FormRecognizerClientBuilder addPolicy(HttpPipelinePolicy policy) {\n+        policies.add(Objects.requireNonNull(policy, \"'policy' cannot be null.\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the HTTP client to use for sending and receiving requests to and from the service.\n+     *\n+     * @param client The HTTP client to use for requests.\n+     * @return The updated FormRecognizerClientImplBuilder object.\n+     */\n+    public FormRecognizerClientBuilder httpClient(HttpClient client) {\n+        if (this.httpClient != null && client == null) {\n+            logger.info(\"HttpClient is being set to 'null' when it was previously configured.\");\n+        }\n+\n+        this.httpClient = client;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the HTTP pipeline to use for the service client.\n+     * <p>\n+     * If {@code pipeline} is set, all other settings are ignored, aside from\n+     * {@link FormRecognizerClientBuilder#endpoint(String) endpoint} to build {@link FormRecognizerAsyncClient} or\n+     * {@link FormRecognizerClient}.\n+     *\n+     * @param httpPipeline The HTTP pipeline to use for sending service requests and receiving responses.\n+     *\n+     * @return The updated FormRecognizerClientImplBuilder object.\n+     */\n+    public FormRecognizerClientBuilder pipeline(HttpPipeline httpPipeline) {\n+        if (this.httpPipeline != null && httpPipeline == null) {\n+            logger.info(\"HttpPipeline is being set to 'null' when it was previously configured.\");\n+        }\n+\n+        this.httpPipeline = httpPipeline;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the configuration store that is used during construction of the service client.\n+     * <p>\n+     * The default configuration store is a clone of the {@link Configuration#getGlobalConfiguration() global\n+     * configuration store}, use {@link Configuration#NONE} to bypass using configuration settings during construction.\n+     *\n+     * @param configuration The configuration store used to\n+     *\n+     * @return The updated FormRecognizerClientImplBuilder object.\n+     */\n+    public FormRecognizerClientBuilder configuration(Configuration configuration) {\n+        this.configuration = configuration;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the {@link RetryPolicy} that is used when each request is sent.\n+     * <p>\n+     * The default retry policy will be used if not provided {@link FormRecognizerClientBuilder#buildAsyncClient()}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e550685a367496584a0b2b2c57577a4202eb7283"}, "originalPosition": 310}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA3MTAxMw==", "bodyText": "Isn't the pattern matching on all non-digit characters? The regex is [NOT 0-9] match one or more consecutive.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r401071013", "createdAt": "2020-03-31T17:00:41Z", "author": {"login": "alzimmermsft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java", "diffHunk": "@@ -0,0 +1,310 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeResult;\n+import com.azure.ai.formrecognizer.implementation.models.DocumentResult;\n+import com.azure.ai.formrecognizer.implementation.models.ReadResult;\n+import com.azure.ai.formrecognizer.implementation.models.TextLine;\n+import com.azure.ai.formrecognizer.implementation.models.TextWord;\n+import com.azure.ai.formrecognizer.models.BoundingBox;\n+import com.azure.ai.formrecognizer.models.DimensionUnit;\n+import com.azure.ai.formrecognizer.models.Element;\n+import com.azure.ai.formrecognizer.models.ExtractedReceipt;\n+import com.azure.ai.formrecognizer.models.FieldValue;\n+import com.azure.ai.formrecognizer.models.FloatValue;\n+import com.azure.ai.formrecognizer.models.IntegerValue;\n+import com.azure.ai.formrecognizer.models.LineElement;\n+import com.azure.ai.formrecognizer.models.PageMetadata;\n+import com.azure.ai.formrecognizer.models.PageRange;\n+import com.azure.ai.formrecognizer.models.Point;\n+import com.azure.ai.formrecognizer.models.ReceiptItem;\n+import com.azure.ai.formrecognizer.models.ReceiptType;\n+import com.azure.ai.formrecognizer.models.StringValue;\n+import com.azure.ai.formrecognizer.models.TextLanguage;\n+import com.azure.ai.formrecognizer.models.WordElement;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Helper class to convert service level models to SDK exposed models.\n+ */\n+final class Transforms {\n+    private static final ClientLogger LOGGER = new ClientLogger(Transforms.class);\n+    // Pattern match to find all digits in the provided string.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e550685a367496584a0b2b2c57577a4202eb7283"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0OTQ2Mzg0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#pullrequestreview-384946384", "createdAt": "2020-03-31T17:21:23Z", "commit": {"oid": "e550685a367496584a0b2b2c57577a4202eb7283"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzoyMToyM1rOF-gORw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzoyMToyM1rOF-gORw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA4Mzk3NQ==", "bodyText": "NIT: headers used only once.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r401083975", "createdAt": "2020-03-31T17:21:23Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -0,0 +1,241 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl;\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeOperationResult;\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeReceiptAsyncHeaders;\n+import com.azure.ai.formrecognizer.implementation.models.ContentType;\n+import com.azure.ai.formrecognizer.implementation.models.SourcePath;\n+import com.azure.ai.formrecognizer.models.ExtractedReceipt;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollResponse;\n+import com.azure.core.util.polling.PollerFlux;\n+import com.azure.core.util.polling.PollingContext;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+import java.time.Duration;\n+import java.util.Objects;\n+import java.util.UUID;\n+import java.util.function.Function;\n+\n+import static com.azure.ai.formrecognizer.Transforms.toReceipt;\n+import static com.azure.core.util.FluxUtil.monoError;\n+\n+/**\n+ * This class provides an asynchronous client that contains all the operations that apply to Azure Form Recognizer.\n+ * Operations allowed by the client are language detection, sentiment analysis, and recognition entities, PII entities,\n+ * and linked entities of a text input or list of test inputs.\n+ *\n+ * <p><strong>Instantiating an asynchronous Form Recognizer Client</strong></p>\n+ * TODO: codesnippet\n+ *\n+ * <p>View {@link FormRecognizerClientBuilder} for additional ways to construct the client.</p>\n+ *\n+ * @see FormRecognizerClientBuilder\n+ */\n+@ServiceClient(builder = FormRecognizerClientBuilder.class, isAsync = true)\n+public final class FormRecognizerAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(FormRecognizerAsyncClient.class);\n+    private final FormRecognizerClientImpl service;\n+    private final FormRecognizerServiceVersion serviceVersion;\n+\n+    /**\n+     * Create a {@code FormRecognizerAsyncClient} that sends requests to the Form Recognizer services's endpoint. Each\n+     * service call goes through the {@link FormRecognizerClientBuilder#pipeline(HttpPipeline)}  http pipeline}.\n+     *\n+     * @param service The proxy service used to perform REST calls.\n+     * @param serviceVersion The versions of Azure Form Recognizer supported by this client library.\n+     */\n+    FormRecognizerAsyncClient(FormRecognizerClientImpl service, FormRecognizerServiceVersion serviceVersion) {\n+        this.service = service;\n+        this.serviceVersion = serviceVersion;\n+    }\n+\n+    /**\n+     * Gets the service version the client is using.\n+     *\n+     * @return the service version the client is using.\n+     */\n+    public FormRecognizerServiceVersion getServiceVersion() {\n+        return serviceVersion;\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * with an error message indicating absence of cancellation support</p>\n+     *\n+     * @param sourceUrl The source URL to the input document. Size of the file must be less than 20 MB.\n+     *\n+     * @return A {@link PollerFlux} that polls the extract receipt operation until it has completed, has failed, or has\n+     * been cancelled.\n+     */\n+    public PollerFlux<OperationResult, IterableStream<ExtractedReceipt>> beginExtractReceiptFromUrl(String sourceUrl) {\n+        return beginExtractReceiptFromUrl(sourceUrl, false, null);\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * with an error message indicating absence of cancellation support</p>\n+     *\n+     * @param sourceUrl The source URL to the input document. Size of the file must be less than 20 MB.\n+     * @param includeTextDetails Include text lines and element references in the result.\n+     * @param pollInterval Duration between each poll for the operation status. If none is specified, a default of\n+     * 5 seconds is used.\n+     *\n+     * @return A {@link PollerFlux} that polls the extract receipt operation until it has completed, has failed, or has\n+     * been cancelled.\n+     */\n+    public PollerFlux<OperationResult, IterableStream<ExtractedReceipt>>\n+        beginExtractReceiptFromUrl(String sourceUrl, boolean includeTextDetails,\n+                               Duration pollInterval) {\n+        Objects.requireNonNull(sourceUrl, \"'sourceUrl' is required and cannot be null.\");\n+        final Duration interval = pollInterval != null ? pollInterval : Duration.ofSeconds(5);\n+        return new PollerFlux<OperationResult, IterableStream<ExtractedReceipt>>(interval,\n+            receiptAnalyzeActivationOperation(sourceUrl, includeTextDetails),\n+            extractReceiptPollOperation(),\n+            (activationResponse, context) -> Mono.error(new RuntimeException(\"Cancellation is not supported\")),\n+            fetchExtractReceiptResult(includeTextDetails));\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts data using optical character recognition (OCR) and a prebuilt receipt\n+     * trained model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * with an error message indicating absence of cancellation support</p>\n+     *\n+     * @param data The data of the document to be extract receipt information from.\n+     * @param length The exact length of the data. Size of the file must be less than 20 MB.\n+     * @param includeTextDetails Include text lines and element references in the result.\n+     * @param formContentType Supported Media types including .pdf, .jpg, .png or .tiff type file stream.\n+     * @param pollInterval Duration between each poll for the operation status. If none is specified, a default of\n+     * 5 seconds is used.\n+     *\n+     * @return A {@link PollerFlux} that polls the extract receipt operation until it has completed, has failed, or has\n+     * been cancelled.\n+     */\n+    public PollerFlux<OperationResult, IterableStream<ExtractedReceipt>> beginExtractReceipt(\n+        Flux<ByteBuffer> data, long length, boolean includeTextDetails, FormContentType formContentType,\n+        Duration pollInterval) {\n+        Objects.requireNonNull(data, \"'data' is required and cannot be null.\");\n+\n+        final Duration interval = pollInterval != null ? pollInterval : Duration.ofSeconds(5);\n+        return new PollerFlux<OperationResult, IterableStream<ExtractedReceipt>>(interval,\n+            receiptStreamActivationOperation(data, length, formContentType, includeTextDetails),\n+            extractReceiptPollOperation(),\n+            (activationResponse, context) -> Mono.error(new RuntimeException(\"Cancellation is not supported\")),\n+            fetchExtractReceiptResult(includeTextDetails));\n+    }\n+\n+    private Function<PollingContext<OperationResult>, Mono<OperationResult>> receiptAnalyzeActivationOperation(\n+        String sourceUrl, boolean includeTextDetails) {\n+        return (pollingContext) -> {\n+            try {\n+                return service.analyzeReceiptAsyncWithResponseAsync(includeTextDetails,\n+                    new SourcePath().setSource(sourceUrl))\n+                    .map(response -> {\n+                        final AnalyzeReceiptAsyncHeaders headers = response.getDeserializedHeaders();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e550685a367496584a0b2b2c57577a4202eb7283"}, "originalPosition": 153}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "766b5f6882f710a2b20c58b7a6899e02941ce8f6", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/766b5f6882f710a2b20c58b7a6899e02941ce8f6", "committedDate": "2020-03-31T23:12:12Z", "message": "add extracted fields map"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9eb295c5e0b837f6bfbbe2de5685b6e33909dad5", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9eb295c5e0b837f6bfbbe2de5685b6e33909dad5", "committedDate": "2020-04-01T00:55:28Z", "message": "swagger changes codegen update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b18723908b51ce6b0603c8cca46f380959a753a", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8b18723908b51ce6b0603c8cca46f380959a753a", "committedDate": "2020-04-01T18:26:37Z", "message": "Invalid source url test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1OTI2NzI5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#pullrequestreview-385926729", "createdAt": "2020-04-01T20:31:14Z", "commit": {"oid": "8b18723908b51ce6b0603c8cca46f380959a753a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDozMToxNFrOF_Rejw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDozMToxNFrOF_Rejw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg5MDk1OQ==", "bodyText": "javadoc: these doc should change to FormRecognizer specifically.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r401890959", "createdAt": "2020-04-01T20:31:14Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerClient.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.Utility;\n+import com.azure.ai.formrecognizer.models.ExtractedReceipt;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.SyncPoller;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.time.Duration;\n+\n+/**\n+ * This class provides a synchronous client that contains all the operations that apply to Azure Form Recognizer.\n+ * Operations allowed by the client are, detect language, recognize entities, recognize PII entities,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b18723908b51ce6b0603c8cca46f380959a753a"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1OTM3NTgw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#pullrequestreview-385937580", "createdAt": "2020-04-01T20:48:03Z", "commit": {"oid": "8b18723908b51ce6b0603c8cca46f380959a753a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDo0ODowM1rOF_SA4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDo0ODowM1rOF_SA4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg5OTc0NQ==", "bodyText": "using \"{@link FormRecognizerClient client}\" will be a better choice.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r401899745", "createdAt": "2020-04-01T20:48:03Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerClient.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.Utility;\n+import com.azure.ai.formrecognizer.models.ExtractedReceipt;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.SyncPoller;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.time.Duration;\n+\n+/**\n+ * This class provides a synchronous client that contains all the operations that apply to Azure Form Recognizer.\n+ * Operations allowed by the client are, detect language, recognize entities, recognize PII entities,\n+ * recognize linked entities, and analyze sentiment for a text input or a list of text inputs.\n+ *\n+ * @see FormRecognizerClientBuilder\n+ */\n+@ServiceClient(builder = FormRecognizerClientBuilder.class)\n+public final class FormRecognizerClient {\n+    private final FormRecognizerAsyncClient client;\n+\n+    /**\n+     * Create a {@code FormRecognizerClient client} that sends requests to the Form Recognizer service's endpoint.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b18723908b51ce6b0603c8cca46f380959a753a"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1OTY0ODQ3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#pullrequestreview-385964847", "createdAt": "2020-04-01T21:32:20Z", "commit": {"oid": "8b18723908b51ce6b0603c8cca46f380959a753a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTozMjoyMFrOF_TaWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTozMjoyMFrOF_TaWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkyMjY1MQ==", "bodyText": "extra \"with an\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r401922651", "createdAt": "2020-04-01T21:32:20Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerClient.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.Utility;\n+import com.azure.ai.formrecognizer.models.ExtractedReceipt;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.SyncPoller;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.time.Duration;\n+\n+/**\n+ * This class provides a synchronous client that contains all the operations that apply to Azure Form Recognizer.\n+ * Operations allowed by the client are, detect language, recognize entities, recognize PII entities,\n+ * recognize linked entities, and analyze sentiment for a text input or a list of text inputs.\n+ *\n+ * @see FormRecognizerClientBuilder\n+ */\n+@ServiceClient(builder = FormRecognizerClientBuilder.class)\n+public final class FormRecognizerClient {\n+    private final FormRecognizerAsyncClient client;\n+\n+    /**\n+     * Create a {@code FormRecognizerClient client} that sends requests to the Form Recognizer service's endpoint.\n+     * Each service call goes through the {@link FormRecognizerClientBuilder#pipeline http pipeline}.\n+     *\n+     * @param client The {@link FormRecognizerClient} that the client routes its request through.\n+     */\n+    FormRecognizerClient(FormRecognizerAsyncClient client) {\n+        this.client = client;\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * with an error message indicating absence of cancellation support</p>\n+     *\n+     * @param sourceUrl The source URL to the input document. Size of the file must be less than 20 MB.\n+     *\n+     * @return A {@link SyncPoller} to poll the progress of the extract receipt operation until it has completed,\n+     * has failed, or has been cancelled.\n+     */\n+    public SyncPoller<OperationResult, IterableStream<ExtractedReceipt>> beginExtractReceiptFromUrl(String sourceUrl) {\n+        return beginExtractReceiptFromUrl(sourceUrl, false, null);\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * with an error message indicating absence of cancellation support</p>\n+     *\n+     * @param sourceUrl The source URL to the input document. Size of the file must be less than 20 MB.\n+     * @param includeTextDetails Include text lines and element references in the result.\n+     * @param pollInterval Duration between each poll for the operation status. If none is specified, a default of\n+     * 5 seconds is used.\n+     *\n+     * @return A {@link SyncPoller} to poll the progress of the extract receipt operation until it has completed,\n+     * has failed, or has been cancelled.\n+     */\n+    public SyncPoller<OperationResult, IterableStream<ExtractedReceipt>>\n+        beginExtractReceiptFromUrl(String sourceUrl, boolean includeTextDetails, Duration pollInterval) {\n+        return client.beginExtractReceiptFromUrl(sourceUrl, includeTextDetails, pollInterval).getSyncPoller();\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipt data using optical character recognition (OCR) and a prebuilt\n+     * trained receipt model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b18723908b51ce6b0603c8cca46f380959a753a"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1OTY2MjY2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#pullrequestreview-385966266", "createdAt": "2020-04-01T21:34:49Z", "commit": {"oid": "8b18723908b51ce6b0603c8cca46f380959a753a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTozNDo0OVrOF_TfBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTozNDo0OVrOF_TfBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkyMzg0Nw==", "bodyText": "extra line break is not needed here, can be append this line after last one.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r401923847", "createdAt": "2020-04-01T21:34:49Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerClientBuilder.java", "diffHunk": "@@ -0,0 +1,338 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl;\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImplBuilder;\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.ContentType;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.AzureKeyCredentialPolicy;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.HttpPolicyProviders;\n+import com.azure.core.http.policy.RequestIdPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.temporal.ChronoUnit;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help instantiation of {@link FormRecognizerClient FormRecognizerClients}\n+ * and {@link FormRecognizerAsyncClient FormRecognizerAsyncClients}, call {@link #buildClient()} buildClient} and\n+ * {@link #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ *\n+ * <p>\n+ * The client needs the service endpoint of the Azure Form Recognizer to access the resource service.\n+ * {@link #apiKey(AzureKeyCredential)} gives\n+ * the builder access credential.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b18723908b51ce6b0603c8cca46f380959a753a"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1OTY3MzM2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#pullrequestreview-385967336", "createdAt": "2020-04-01T21:36:49Z", "commit": {"oid": "8b18723908b51ce6b0603c8cca46f380959a753a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTozNjo1MFrOF_TipA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTozNjo1MFrOF_TipA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkyNDc3Mg==", "bodyText": "this authentication can be moved to after\nHttpPolicyProviders.addBeforeRetryPolicies(policies);\n\nwhich will fixes #9608 for Form Recognizer.\ncc: @alzimmermsft", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r401924772", "createdAt": "2020-04-01T21:36:50Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerClientBuilder.java", "diffHunk": "@@ -0,0 +1,338 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl;\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImplBuilder;\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.ContentType;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.AzureKeyCredentialPolicy;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.HttpPolicyProviders;\n+import com.azure.core.http.policy.RequestIdPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.temporal.ChronoUnit;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help instantiation of {@link FormRecognizerClient FormRecognizerClients}\n+ * and {@link FormRecognizerAsyncClient FormRecognizerAsyncClients}, call {@link #buildClient()} buildClient} and\n+ * {@link #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ *\n+ * <p>\n+ * The client needs the service endpoint of the Azure Form Recognizer to access the resource service.\n+ * {@link #apiKey(AzureKeyCredential)} gives\n+ * the builder access credential.\n+ * </p>\n+ * <p>\n+ * Another way to construct the client is using a {@link HttpPipeline}. The pipeline gives the client an\n+ * authenticated way to communicate with the service. Set the pipeline with {@link #pipeline(HttpPipeline) this} and\n+ * set the service endpoint with {@link #endpoint(String) this}. Using a\n+ * pipeline requires additional setup but allows for finer control on how the {@link FormRecognizerClient} and\n+ * {@link FormRecognizerAsyncClient} is built.\n+ * </p>\n+ *\n+ * @see FormRecognizerAsyncClient\n+ * @see FormRecognizerClient\n+ */\n+@ServiceClientBuilder(serviceClients = {FormRecognizerAsyncClient.class, FormRecognizerClient.class})\n+public final class FormRecognizerClientBuilder {\n+\n+    private static final String ECHO_REQUEST_ID_HEADER = \"x-ms-return-client-request-id\";\n+    private static final String CONTENT_TYPE_HEADER_VALUE = ContentType.APPLICATION_JSON;\n+    private static final String ACCEPT_HEADER = \"Accept\";\n+    private static final String FORM_RECOGNIZER_PROPERTIES = \"azure-ai-formrecognizer.properties\";\n+    static final String OCP_APIM_SUBSCRIPTION_KEY = \"Ocp-Apim-Subscription-Key\";\n+\n+    private static final String NAME = \"name\";\n+    private static final String VERSION = \"version\";\n+    private static final RetryPolicy DEFAULT_RETRY_POLICY = new RetryPolicy(\"retry-after-ms\", ChronoUnit.MILLIS);\n+\n+    private final ClientLogger logger = new ClientLogger(FormRecognizerClientBuilder.class);\n+    private final List<HttpPipelinePolicy> policies;\n+    private final HttpHeaders headers;\n+    private final String clientName;\n+    private final String clientVersion;\n+\n+    private String endpoint;\n+    private AzureKeyCredential credential;\n+    private HttpClient httpClient;\n+    private HttpLogOptions httpLogOptions;\n+    private HttpPipeline httpPipeline;\n+    private Configuration configuration;\n+    private RetryPolicy retryPolicy;\n+    private FormRecognizerServiceVersion version;\n+\n+    /**\n+     * The constructor with defaults.\n+     */\n+    public FormRecognizerClientBuilder() {\n+        policies = new ArrayList<>();\n+        httpLogOptions = new HttpLogOptions();\n+\n+        Map<String, String> properties = CoreUtils.getProperties(FORM_RECOGNIZER_PROPERTIES);\n+        clientName = properties.getOrDefault(NAME, \"UnknownName\");\n+        clientVersion = properties.getOrDefault(VERSION, \"UnknownVersion\");\n+\n+        headers = new HttpHeaders()\n+            .put(ECHO_REQUEST_ID_HEADER, \"true\")\n+            .put(ACCEPT_HEADER, CONTENT_TYPE_HEADER_VALUE);\n+    }\n+\n+    /**\n+     * Creates a {@link FormRecognizerClient} based on options set in the builder. Every time\n+     * {@code buildClient()} is called a new instance of {@link FormRecognizerClient} is created.\n+     *\n+     * <p>\n+     * If {@link #pipeline(HttpPipeline) pipeline} is set, then the {@code pipeline} and\n+     * {@link #endpoint(String) endpoint} are used to create the {@link FormRecognizerClient client}. All other builder\n+     * settings are ignored\n+     * </p>\n+     *\n+     * @return A FormRecognizerClient with the options set from the builder.\n+     * @throws NullPointerException if {@link #endpoint(String) endpoint} or\n+     * {@link #apiKey(AzureKeyCredential) apiKey} has not been set.\n+     * @throws IllegalArgumentException if {@link #endpoint(String) endpoint} cannot be parsed into a valid URL.\n+     */\n+    public FormRecognizerClient buildClient() {\n+        return new FormRecognizerClient(buildAsyncClient());\n+    }\n+\n+    /**\n+     * Creates a {@link FormRecognizerAsyncClient} based on options set in the builder. Every time\n+     * {@code buildAsyncClient()} is called a new instance of {@link FormRecognizerAsyncClient} is created.\n+     *\n+     * <p>\n+     * If {@link #pipeline(HttpPipeline) pipeline} is set, then the {@code pipeline} and\n+     * {@link #endpoint(String) endpoint} are used to create the {@link FormRecognizerClient client}. All other builder\n+     * settings are ignored.\n+     * </p>\n+     *\n+     * @return A FormRecognizerAsyncClient with the options set from the builder.\n+     * @throws NullPointerException if {@link #endpoint(String) endpoint} or\n+     * {@link #apiKey(AzureKeyCredential) apiKey} has not been set.\n+     * @throws IllegalArgumentException if {@link #endpoint(String) endpoint} cannot be parsed into a valid URL.\n+     */\n+    public FormRecognizerAsyncClient buildAsyncClient() {\n+        Objects.requireNonNull(endpoint, \"'Endpoint' is required and can not be null.\");\n+\n+        // Global Env configuration store\n+        final Configuration buildConfiguration = (configuration == null)\n+            ? Configuration.getGlobalConfiguration().clone() : configuration;\n+        // Service Version\n+        final FormRecognizerServiceVersion serviceVersion =\n+            version != null ? version : FormRecognizerServiceVersion.getLatest();\n+\n+        // Endpoint cannot be null, which is required in request authentication\n+\n+        HttpPipeline pipeline = httpPipeline;\n+        // Create a default Pipeline if it is not given\n+        if (pipeline == null) {\n+            // Closest to API goes first, closest to wire goes last.\n+            final List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+            // Authentications\n+            if (credential != null) {\n+                policies.add(new AzureKeyCredentialPolicy(OCP_APIM_SUBSCRIPTION_KEY, credential));\n+            } else {\n+                // Throw exception that credential and tokenCredential cannot be null\n+                throw logger.logExceptionAsError(\n+                    new IllegalArgumentException(\"Missing credential information while building a client.\"));\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b18723908b51ce6b0603c8cca46f380959a753a"}, "originalPosition": 162}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6db10aa28c213fc3f80fcb11cd1c84f49af57a4d", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6db10aa28c213fc3f80fcb11cd1c84f49af57a4d", "committedDate": "2020-04-02T00:14:08Z", "message": "update test resource"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2Njc5MTM3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#pullrequestreview-386679137", "createdAt": "2020-04-02T18:14:34Z", "commit": {"oid": "6db10aa28c213fc3f80fcb11cd1c84f49af57a4d"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODoxNDozNFrOF_3pxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODoyMTo1M1rOF_36IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxNjQyMA==", "bodyText": "nit: use FluxUtil.monoError() as that will also log the exception.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r402516420", "createdAt": "2020-04-02T18:14:34Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -0,0 +1,249 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl;\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeOperationResult;\n+import com.azure.ai.formrecognizer.implementation.models.ContentType;\n+import com.azure.ai.formrecognizer.implementation.models.SourcePath;\n+import com.azure.ai.formrecognizer.models.ExtractedReceipt;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollResponse;\n+import com.azure.core.util.polling.PollerFlux;\n+import com.azure.core.util.polling.PollingContext;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+import java.time.Duration;\n+import java.util.Objects;\n+import java.util.UUID;\n+import java.util.function.Function;\n+\n+import static com.azure.ai.formrecognizer.Transforms.toReceipt;\n+import static com.azure.core.util.FluxUtil.monoError;\n+\n+/**\n+ * This class provides an asynchronous client that contains all the operations that apply to Azure Form Recognizer.\n+ * Operations allowed by the client are, to extract receipt data fields from receipt documents.\n+ *\n+ * @see FormRecognizerClientBuilder\n+ */\n+@ServiceClient(builder = FormRecognizerClientBuilder.class, isAsync = true)\n+public final class FormRecognizerAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(FormRecognizerAsyncClient.class);\n+    private final FormRecognizerClientImpl service;\n+    private final FormRecognizerServiceVersion serviceVersion;\n+\n+    /**\n+     * Create a {@code FormRecognizerAsyncClient} that sends requests to the Form Recognizer services's endpoint. Each\n+     * service call goes through the {@link FormRecognizerClientBuilder#pipeline(HttpPipeline)} http pipeline}.\n+     *\n+     * @param service The proxy service used to perform REST calls.\n+     * @param serviceVersion The versions of Azure Form Recognizer supported by this client library.\n+     */\n+    FormRecognizerAsyncClient(FormRecognizerClientImpl service, FormRecognizerServiceVersion serviceVersion) {\n+        this.service = service;\n+        this.serviceVersion = serviceVersion;\n+    }\n+\n+    /**\n+     * Gets the service version the client is using.\n+     *\n+     * @return the service version the client is using.\n+     */\n+    public FormRecognizerServiceVersion getServiceVersion() {\n+        return serviceVersion;\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * error message indicating absence of cancellation support.</p>\n+     *\n+     * @param sourceUrl The source URL to the input document. Size of the file must be less than 20 MB.\n+     *\n+     * @return A {@link PollerFlux} that polls the extract receipt operation until it has completed, has failed, or has\n+     * been cancelled.\n+     */\n+    public PollerFlux<OperationResult, IterableStream<ExtractedReceipt>> beginExtractReceiptFromUrl(String sourceUrl) {\n+        return beginExtractReceiptFromUrl(sourceUrl, false, null);\n+    }\n+\n+    /**\n+     * Detects and extracts data from receipts using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * error message indicating absence of cancellation support.</p>\n+     *\n+     * @param sourceUrl The source URL to the input document. Size of the file must be less than 20 MB.\n+     * @param includeTextDetails Include text lines and element references in the result.\n+     * @param pollInterval Duration between each poll for the operation status. If none is specified, a default of\n+     * 5 seconds is used.\n+     *\n+     * @return A {@link PollerFlux} that polls the extract receipt operation until it has completed, has failed, or has\n+     * been cancelled.\n+     */\n+    public PollerFlux<OperationResult, IterableStream<ExtractedReceipt>>\n+        beginExtractReceiptFromUrl(String sourceUrl, boolean includeTextDetails,\n+                               Duration pollInterval) {\n+        Objects.requireNonNull(sourceUrl, \"'sourceUrl' is required and cannot be null.\");\n+        final Duration interval = pollInterval != null ? pollInterval : Duration.ofSeconds(5);\n+        return new PollerFlux<OperationResult, IterableStream<ExtractedReceipt>>(interval,\n+            receiptAnalyzeActivationOperation(sourceUrl, includeTextDetails),\n+            extractReceiptPollOperation(),\n+            (activationResponse, context) -> Mono.error(new RuntimeException(\"Cancellation is not supported\")),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6db10aa28c213fc3f80fcb11cd1c84f49af57a4d"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxOTYzNg==", "bodyText": "Can the keys be converted to expandable enums?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r402519636", "createdAt": "2020-04-02T18:20:04Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeResult;\n+import com.azure.ai.formrecognizer.implementation.models.DocumentResult;\n+import com.azure.ai.formrecognizer.implementation.models.ReadResult;\n+import com.azure.ai.formrecognizer.implementation.models.TextLine;\n+import com.azure.ai.formrecognizer.implementation.models.TextWord;\n+import com.azure.ai.formrecognizer.models.BoundingBox;\n+import com.azure.ai.formrecognizer.models.DimensionUnit;\n+import com.azure.ai.formrecognizer.models.Element;\n+import com.azure.ai.formrecognizer.models.ExtractedReceipt;\n+import com.azure.ai.formrecognizer.models.FieldValue;\n+import com.azure.ai.formrecognizer.models.FloatValue;\n+import com.azure.ai.formrecognizer.models.IntegerValue;\n+import com.azure.ai.formrecognizer.models.LineElement;\n+import com.azure.ai.formrecognizer.models.PageMetadata;\n+import com.azure.ai.formrecognizer.models.Point;\n+import com.azure.ai.formrecognizer.models.ReceiptItem;\n+import com.azure.ai.formrecognizer.models.ReceiptType;\n+import com.azure.ai.formrecognizer.models.StringValue;\n+import com.azure.ai.formrecognizer.models.TextLanguage;\n+import com.azure.ai.formrecognizer.models.WordElement;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Helper class to convert service level models to SDK exposed models.\n+ */\n+final class Transforms {\n+    private static final ClientLogger LOGGER = new ClientLogger(Transforms.class);\n+    private static final Pattern COMPILE = Pattern.compile(\"[^0-9]+\");\n+\n+    private Transforms() {\n+    }\n+\n+    static IterableStream<ExtractedReceipt> toReceipt(AnalyzeResult analyzeResult, boolean includeTextDetails) {\n+        List<ReadResult> readResults = analyzeResult.getReadResults();\n+        List<DocumentResult> documentResult = analyzeResult.getDocumentResults();\n+        List<ExtractedReceipt> extractedReceiptList = new ArrayList<>();\n+\n+        for (int i = 0; i < readResults.size(); i++) {\n+            ReadResult readResultItem = readResults.get(i);\n+            PageMetadata pageMetadata = getPageInfo(readResultItem);\n+            ExtractedReceipt extractedReceiptItem = new ExtractedReceipt(pageMetadata);\n+\n+            DocumentResult documentResultItem = documentResult.get(i);\n+            documentResultItem.getFields().forEach((key, fieldValue) -> {\n+                switch (key) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwODE3OQ=="}, "originalCommit": {"oid": "eb336a0ab077827ac8a91e604bc863cddf9ee821"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUyMDYwOQ==", "bodyText": "Re-generate this client with the latest v4 autorest to include the Context in client method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9322#discussion_r402520609", "createdAt": "2020-04-02T18:21:53Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/implementation/FormRecognizerClientImpl.java", "diffHunk": "@@ -0,0 +1,418 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.ai.formrecognizer.implementation;\n+\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeLayoutAsyncResponse;\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeOperationResult;\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeReceiptAsyncResponse;\n+import com.azure.ai.formrecognizer.implementation.models.AnalyzeWithCustomModelResponse;\n+import com.azure.ai.formrecognizer.implementation.models.ContentType;\n+import com.azure.ai.formrecognizer.implementation.models.Model;\n+import com.azure.ai.formrecognizer.implementation.models.ModelInfo;\n+import com.azure.ai.formrecognizer.implementation.models.Models;\n+import com.azure.ai.formrecognizer.implementation.models.SourcePath;\n+import com.azure.ai.formrecognizer.implementation.models.TrainCustomModelAsyncResponse;\n+import com.azure.ai.formrecognizer.implementation.models.TrainRequest;\n+import com.azure.core.annotation.BodyParam;\n+import com.azure.core.annotation.Delete;\n+import com.azure.core.annotation.ExpectedResponses;\n+import com.azure.core.annotation.Get;\n+import com.azure.core.annotation.HeaderParam;\n+import com.azure.core.annotation.Host;\n+import com.azure.core.annotation.HostParam;\n+import com.azure.core.annotation.PathParam;\n+import com.azure.core.annotation.Post;\n+import com.azure.core.annotation.QueryParam;\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceInterface;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.annotation.UnexpectedResponseExceptionType;\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.CookiePolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.PagedResponseBase;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.RestProxy;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import java.nio.ByteBuffer;\n+import java.util.UUID;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Initializes a new instance of the FormRecognizerClient type.\n+ */\n+public final class FormRecognizerClientImpl {\n+    /**\n+     * The proxy service used to perform REST calls.\n+     */\n+    private FormRecognizerClientService service;\n+\n+    /**\n+     * Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus2.api.cognitive.microsoft.com).\n+     */\n+    private String endpoint;\n+\n+    /**\n+     * Gets Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus2.api.cognitive.microsoft.com).\n+     *\n+     * @return the endpoint value.\n+     */\n+    public String getEndpoint() {\n+        return this.endpoint;\n+    }\n+\n+    /**\n+     * Sets Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus2.api.cognitive.microsoft.com).\n+     *\n+     * @param endpoint the endpoint value.\n+     * @return the service client itself.\n+     */\n+    FormRecognizerClientImpl setEndpoint(String endpoint) {\n+        this.endpoint = endpoint;\n+        return this;\n+    }\n+\n+    /**\n+     * The HTTP pipeline to send requests through.\n+     */\n+    private HttpPipeline httpPipeline;\n+\n+    /**\n+     * Gets The HTTP pipeline to send requests through.\n+     *\n+     * @return the httpPipeline value.\n+     */\n+    public HttpPipeline getHttpPipeline() {\n+        return this.httpPipeline;\n+    }\n+\n+    /**\n+     * Initializes an instance of FormRecognizerClient client.\n+     */\n+    public FormRecognizerClientImpl() {\n+        new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy()).build();\n+    }\n+\n+    /**\n+     * Initializes an instance of FormRecognizerClient client.\n+     *\n+     * @param httpPipeline The HTTP pipeline to send requests through.\n+     */\n+    public FormRecognizerClientImpl(HttpPipeline httpPipeline) {\n+        this.httpPipeline = httpPipeline;\n+        this.service = RestProxy.create(FormRecognizerClientService.class, this.httpPipeline);\n+    }\n+\n+    /**\n+     * The interface defining all the services for FormRecognizerClient to be\n+     * used by the proxy service to perform REST calls.\n+     */\n+    @Host(\"{endpoint}/formrecognizer/v2.0-preview\")\n+    @ServiceInterface(name = \"FormRecognizerClient\")\n+    private interface FormRecognizerClientService {\n+        @Post(\"/custom/models\")\n+        @ExpectedResponses({201})\n+        @UnexpectedResponseExceptionType(HttpResponseException.class)\n+        Mono<TrainCustomModelAsyncResponse> trainCustomModelAsync(@HostParam(\"endpoint\") String endpoint, @BodyParam(\"application/json\") TrainRequest trainRequest, Context context);\n+\n+        @Get(\"/custom/models/{modelId}\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(HttpResponseException.class)\n+        Mono<SimpleResponse<Model>> getCustomModel(@HostParam(\"endpoint\") String endpoint, @PathParam(\"modelId\") UUID modelId, @QueryParam(\"includeKeys\") Boolean includeKeys, Context context);\n+\n+        @Delete(\"/custom/models/{modelId}\")\n+        @ExpectedResponses({204})\n+        @UnexpectedResponseExceptionType(HttpResponseException.class)\n+        Mono<Response<Void>> deleteCustomModel(@HostParam(\"endpoint\") String endpoint, @PathParam(\"modelId\") UUID modelId, Context context);\n+\n+        @Post(\"/custom/models/{modelId}/analyze\")\n+        @ExpectedResponses({202})\n+        @UnexpectedResponseExceptionType(HttpResponseException.class)\n+        Mono<AnalyzeWithCustomModelResponse> analyzeWithCustomModel(@HostParam(\"endpoint\") String endpoint, @PathParam(\"modelId\") UUID modelId, @QueryParam(\"includeTextDetails\") Boolean includeTextDetails, @HeaderParam(\"Content-Type\") ContentType contentType, @BodyParam(\"application/octet-stream\") Flux<ByteBuffer> fileStream, @HeaderParam(\"Content-Length\") Long contentLength, Context context);\n+\n+        @Post(\"/custom/models/{modelId}/analyze\")\n+        @ExpectedResponses({202})\n+        @UnexpectedResponseExceptionType(HttpResponseException.class)\n+        Mono<AnalyzeWithCustomModelResponse> analyzeWithCustomModel(@HostParam(\"endpoint\") String endpoint, @PathParam(\"modelId\") UUID modelId, @QueryParam(\"includeTextDetails\") Boolean includeTextDetails, @BodyParam(\"application/json\") SourcePath fileStream, Context context);\n+\n+        @Get(\"/custom/models/{modelId}/analyzeResults/{resultId}\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(HttpResponseException.class)\n+        Mono<SimpleResponse<AnalyzeOperationResult>> getAnalyzeFormResult(@HostParam(\"endpoint\") String endpoint, @PathParam(\"modelId\") UUID modelId, @PathParam(\"resultId\") UUID resultId, Context context);\n+\n+        @Post(\"/prebuilt/receipt/analyze\")\n+        @ExpectedResponses({202})\n+        @UnexpectedResponseExceptionType(HttpResponseException.class)\n+        Mono<AnalyzeReceiptAsyncResponse> analyzeReceiptAsync(@HostParam(\"endpoint\") String endpoint, @QueryParam(\"includeTextDetails\") Boolean includeTextDetails, @BodyParam(\"application/json\") SourcePath fileStream, Context context);\n+\n+        @Post(\"/prebuilt/receipt/analyze\")\n+        @ExpectedResponses({202})\n+        @UnexpectedResponseExceptionType(HttpResponseException.class)\n+        Mono<AnalyzeReceiptAsyncResponse> analyzeReceiptAsync(@HostParam(\"endpoint\") String endpoint, @QueryParam(\"includeTextDetails\") Boolean includeTextDetails, @HeaderParam(\"Content-Type\") ContentType contentType, @BodyParam(\"application/octet-stream\") Flux<ByteBuffer> fileStream, @HeaderParam(\"Content-Length\") Long contentLength, Context context);\n+\n+        @Get(\"/prebuilt/receipt/analyzeResults/{resultId}\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(HttpResponseException.class)\n+        Mono<SimpleResponse<AnalyzeOperationResult>> getAnalyzeReceiptResult(@HostParam(\"endpoint\") String endpoint, @PathParam(\"resultId\") UUID resultId, Context context);\n+\n+        @Post(\"/layout/analyze\")\n+        @ExpectedResponses({202})\n+        @UnexpectedResponseExceptionType(HttpResponseException.class)\n+        Mono<AnalyzeLayoutAsyncResponse> analyzeLayoutAsync(@HostParam(\"endpoint\") String endpoint, @HeaderParam(\"Content-Type\") ContentType contentType, @BodyParam(\"application/octet-stream\") Flux<ByteBuffer> fileStream, @HeaderParam(\"Content-Length\") Long contentLength, Context context);\n+\n+        @Post(\"/layout/analyze\")\n+        @ExpectedResponses({202})\n+        @UnexpectedResponseExceptionType(HttpResponseException.class)\n+        Mono<AnalyzeLayoutAsyncResponse> analyzeLayoutAsync(@HostParam(\"endpoint\") String endpoint, @BodyParam(\"application/json\") SourcePath fileStream, Context context);\n+\n+        @Get(\"/layout/analyzeResults/{resultId}\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(HttpResponseException.class)\n+        Mono<SimpleResponse<AnalyzeOperationResult>> getAnalyzeLayoutResult(@HostParam(\"endpoint\") String endpoint, @PathParam(\"resultId\") UUID resultId, Context context);\n+\n+        @Get(\"/custom/models\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(HttpResponseException.class)\n+        Mono<SimpleResponse<Models>> listCustomModels(@HostParam(\"endpoint\") String endpoint, @QueryParam(\"op\") String op, Context context);\n+\n+        @Get(\"/custom/models\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(HttpResponseException.class)\n+        Mono<SimpleResponse<Models>> getCustomModels(@HostParam(\"endpoint\") String endpoint, @QueryParam(\"op\") String op, Context context);\n+\n+        @Get(\"{nextLink}\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(HttpResponseException.class)\n+        Mono<SimpleResponse<Models>> listCustomModelsNext(@PathParam(value = \"nextLink\", encoded = true) String nextLink, Context context);\n+    }\n+\n+    /**\n+     * Create and train a custom model. The request must include a source parameter that is either an externally accessible Azure storage blob container Uri (preferably a Shared Access Signature Uri) or valid path to a data folder in a locally mounted drive. When local paths are specified, they must follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration setting value e.g., if '{Mounts:Input}' configuration setting value is '/input' then a valid source path would be '/input/contosodataset'. All data to be trained is expected to be under the source folder or sub folders under it. Models are trained using documents that are of the following content type - 'application/pdf', 'image/jpeg', 'image/png', 'image/tiff'. Other type of content is ignored.\n+     *\n+     * @param trainRequest Request parameter to train a new custom model.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws HttpResponseException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<TrainCustomModelAsyncResponse> trainCustomModelAsyncWithResponseAsync(TrainRequest trainRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6db10aa28c213fc3f80fcb11cd1c84f49af57a4d"}, "originalPosition": 207}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afb06564f666d8c676cccbac49294f5aae540e03", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/afb06564f666d8c676cccbac49294f5aae540e03", "committedDate": "2020-04-02T21:47:56Z", "message": "regenerated client impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cd08d28bcf6d72d5fcf18f194af94b1c3435970", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7cd08d28bcf6d72d5fcf18f194af94b1c3435970", "committedDate": "2020-04-02T22:33:09Z", "message": "move date retry policy"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 625, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}