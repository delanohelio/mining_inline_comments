{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMDU3MDI0", "number": 14987, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToxMzoyNlrOEh0TAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToyMDo0NFrOEh0ckg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODk1Mjk4OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ComponentSyncSamples.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToxMzoyNlrOHPWCww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToxMzoyNlrOHPWCww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1MTg0Mw==", "bodyText": "wouldn't we want to iterate over the created models list and use those Ids to log the success statement here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14987#discussion_r485851843", "createdAt": "2020-09-09T19:13:26Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ComponentSyncSamples.java", "diffHunk": "@@ -0,0 +1,158 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.digitaltwins.core.helpers.ConsoleLogger;\n+import com.azure.digitaltwins.core.helpers.SamplesArguments;\n+import com.azure.digitaltwins.core.helpers.SamplesConstants;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+import com.azure.digitaltwins.core.serialization.BasicDigitalTwin;\n+import com.azure.digitaltwins.core.serialization.DigitalTwinMetadata;\n+import com.azure.digitaltwins.core.serialization.ModelProperties;\n+import com.azure.digitaltwins.core.util.UpdateOperationUtility;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import javax.net.ssl.HttpsURLConnection;\n+import java.io.IOException;\n+import java.util.*;\n+\n+public class ComponentSyncSamples {\n+    private static DigitalTwinsClient client;\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+\n+    public static void main(String[] args) throws IOException, InterruptedException {\n+\n+        SamplesArguments parsedArguments = new SamplesArguments(args);\n+\n+        client = new DigitalTwinsClientBuilder()\n+            .tokenCredential(\n+                new ClientSecretCredentialBuilder()\n+                    .tenantId(parsedArguments.getTenantId())\n+                    .clientId(parsedArguments.getClientId())\n+                    .clientSecret(parsedArguments.getClientSecret())\n+                    .build()\n+            )\n+            .endpoint(parsedArguments.getDigitalTwinEndpoint())\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(parsedArguments.getHttpLogDetailLevel()))\n+            .buildClient();\n+\n+        runComponentSample();\n+    }\n+\n+    public static void runComponentSample() throws JsonProcessingException {\n+\n+        ConsoleLogger.printHeader(\"COMPONENT SAMPLES\");\n+\n+        // For the purpose of this example we will create temporary models using a random model Ids.\n+        // We have to make sure these model Ids are unique within the DT instance.\n+\n+        String componentModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TemporaryComponentModelPrefix, client);\n+        String modelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TemporaryModelPrefix, client);\n+        String basicDigitalTwinId = UniqueIdHelper.getUniqueDigitalTwinId(SamplesConstants.TemporaryTwinPrefix, client);\n+\n+        String newComponentModelPayload = SamplesConstants.TemporaryComponentModelPayload\n+            .replace(SamplesConstants.ComponentId, componentModelId);\n+\n+        String newModelPayload = SamplesConstants.TemporaryModelWithComponentPayload\n+            .replace(SamplesConstants.ModelId, modelId)\n+            .replace(SamplesConstants.ComponentId, componentModelId);\n+\n+        List<String> modelsList = new ArrayList<>(Arrays.asList(newComponentModelPayload, newModelPayload));\n+\n+        ConsoleLogger.printHeader(\"Create Models\");\n+        // We now create all the models (including components)\n+        client.createModels(modelsList);\n+\n+        ConsoleLogger.print(\"Created models: \" + componentModelId + \" and \" + modelId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bce98ed429eef081b6dc61706edac4ec48587f05"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODk3MDgzOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/ConsoleLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToxODo1OVrOHPWNrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToxODo1OVrOHPWNrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NDYzOQ==", "bodyText": "Could you add some comments to these helper methods, describing their user-cases.\nAlso, just FYI - Jonathan recommended that we don't use println, I have asked for clarification on if we should use printf or logger.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14987#discussion_r485854639", "createdAt": "2020-09-09T19:18:59Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/ConsoleLogger.java", "diffHunk": "@@ -7,21 +7,27 @@\n     private static final String ANSI_RED = \"\\u001B[31m\";\n     private static final String ANSI_GREEN = \"\\u001B[32m\";\n     public static final String ANSI_YELLOW = \"\\u001B[33m\";\n+    public static final String ANSI_BLUE = \"\\u001B[34m\";\n     private static final String ANSI_CYAN = \"\\u001B[36m\";\n \n-    public static void PrintHeader(String message) {\n+    public static void printHeader(String message) {\n         System.out.println(ANSI_CYAN + \"\\n===\" + message.toUpperCase() + \"===\\n\" + ANSI_RESET);\n     }\n \n-    public static void PrintSuccess(String message) {\n-        System.out.println(ANSI_GREEN + message + ANSI_RESET);\n+    public static void print(String message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bce98ed429eef081b6dc61706edac4ec48587f05"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODk3MzgxOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ComponentMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToxOTo0N1rOHPWPYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToxOTo0N1rOHPWPYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NTA3Mw==", "bodyText": "This class should be annotated with @Fluent.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14987#discussion_r485855073", "createdAt": "2020-09-09T19:19:47Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ComponentMetadata.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.azure.digitaltwins.core.serialization;\n+\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * An optional helper class for deserializing a digital twin\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bce98ed429eef081b6dc61706edac4ec48587f05"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODk3NTY2OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ModelProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToyMDoxNFrOHPWQaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTozMDoxNVrOHPWqPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NTMzOQ==", "bodyText": "@Fluent here, as well", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14987#discussion_r485855339", "createdAt": "2020-09-09T19:20:14Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ModelProperties.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.azure.digitaltwins.core.serialization;\n+\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Properties on a component that adhere to a specific model.\n+ */\n+public class ModelProperties {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bce98ed429eef081b6dc61706edac4ec48587f05"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg2MTk0OQ==", "bodyText": "Does this add any functionality? I haven't used this annotation before", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14987#discussion_r485861949", "createdAt": "2020-09-09T19:30:15Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ModelProperties.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.azure.digitaltwins.core.serialization;\n+\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Properties on a component that adhere to a specific model.\n+ */\n+public class ModelProperties {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NTMzOQ=="}, "originalCommit": {"oid": "bce98ed429eef081b6dc61706edac4ec48587f05"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODk3NzQ2OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToyMDo0NFrOHPWRcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTozOToyM1rOHPXGEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NTYwMw==", "bodyText": "While you are sprucing this up, we can actually do region sections in java, too.\n//region Models APIs\n...\n//endregion Models APIs\nIntellij will let you collapse the code just like how C# does", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14987#discussion_r485855603", "createdAt": "2020-09-09T19:20:44Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -221,6 +226,10 @@ public void deleteDigitalTwin(String digitalTwinId)\n         return digitalTwinsAsyncClient.deleteDigitalTwinWithResponse(digitalTwinId, options, context).block();\n     }\n \n+    //==================================================================================================================================================\n+    // Relationship APIs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bce98ed429eef081b6dc61706edac4ec48587f05"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg2OTA3Mg==", "bodyText": "much better.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14987#discussion_r485869072", "createdAt": "2020-09-09T19:39:23Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -221,6 +226,10 @@ public void deleteDigitalTwin(String digitalTwinId)\n         return digitalTwinsAsyncClient.deleteDigitalTwinWithResponse(digitalTwinId, options, context).block();\n     }\n \n+    //==================================================================================================================================================\n+    // Relationship APIs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NTYwMw=="}, "originalCommit": {"oid": "bce98ed429eef081b6dc61706edac4ec48587f05"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1146, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}