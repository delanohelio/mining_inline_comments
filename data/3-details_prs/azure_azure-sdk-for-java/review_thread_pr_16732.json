{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NzE2OTQw", "number": 16732, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNTo1Nzo0N1rOE0cHIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzo1ODozOFrOE1BiNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDIxOTg2OnYy", "diffSide": "RIGHT", "path": "sdk/metricsadvisor/azure-ai-metricsadvisor/src/main/java/com/azure/ai/metricsadvisor/MetricsAdvisorAsyncClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNTo1Nzo0N1rOHsKkcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzozNzowMVrOHtEQfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3MjU2MA==", "bodyText": "Does it make sense to do a null check for params in this method as well? Today if a user calls listIncidentRootCases(null, incidentId,..) the error we throw is incident.detectionConfigurationId is required and cannot be null", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16732#discussion_r516072560", "createdAt": "2020-11-02T15:57:47Z", "author": {"login": "anuchandy"}, "path": "sdk/metricsadvisor/azure-ai-metricsadvisor/src/main/java/com/azure/ai/metricsadvisor/MetricsAdvisorAsyncClient.java", "diffHunk": "@@ -776,67 +779,69 @@\n     PagedFlux<IncidentRootCause> listIncidentRootCauses(\n         String detectionConfigurationId,\n         String incidentId, Context context) {\n-        Incident incident = new Incident();\n-        IncidentHelper.setId(incident, incidentId);\n-        IncidentHelper.setDetectionConfigurationId(incident, detectionConfigurationId);\n+        AnomalyIncident anomalyIncident = new AnomalyIncident();\n+        IncidentHelper.setId(anomalyIncident, incidentId);\n+        IncidentHelper.setDetectionConfigurationId(anomalyIncident, detectionConfigurationId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f62fe1dc2d969b3579b014ccacf3d5d422102605"}, "originalPosition": 266}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxNzcyNw==", "bodyText": "yes, updated.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16732#discussion_r517017727", "createdAt": "2020-11-03T23:37:01Z", "author": {"login": "samvaity"}, "path": "sdk/metricsadvisor/azure-ai-metricsadvisor/src/main/java/com/azure/ai/metricsadvisor/MetricsAdvisorAsyncClient.java", "diffHunk": "@@ -776,67 +779,69 @@\n     PagedFlux<IncidentRootCause> listIncidentRootCauses(\n         String detectionConfigurationId,\n         String incidentId, Context context) {\n-        Incident incident = new Incident();\n-        IncidentHelper.setId(incident, incidentId);\n-        IncidentHelper.setDetectionConfigurationId(incident, detectionConfigurationId);\n+        AnomalyIncident anomalyIncident = new AnomalyIncident();\n+        IncidentHelper.setId(anomalyIncident, incidentId);\n+        IncidentHelper.setDetectionConfigurationId(anomalyIncident, detectionConfigurationId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3MjU2MA=="}, "originalCommit": {"oid": "f62fe1dc2d969b3579b014ccacf3d5d422102605"}, "originalPosition": 266}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDMxMzAyOnYy", "diffSide": "RIGHT", "path": "sdk/metricsadvisor/azure-ai-metricsadvisor/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzozOTowM1rOHtESuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzozOTowM1rOHtESuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxODI5OQ==", "bodyText": "nit; one or more etrics -> one or more metrics", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16732#discussion_r517018299", "createdAt": "2020-11-03T23:39:03Z", "author": {"login": "anuchandy"}, "path": "sdk/metricsadvisor/azure-ai-metricsadvisor/README.md", "diffHunk": "@@ -68,78 +68,81 @@ MetricsAdvisorAdministrationClient metricsAdvisorAdministrationClient =\n ### MetricsAdvisorClient\n `MetricsAdvisorClient` helps with:\n \n-- listing incidents\n-- listing root causes of incidents\n-- retrieving original time series data and time series data enriched by the service.\n-- listing alerts\n-- adding feedback to tune your model\n+- Diagnose anomalies and incidents and help with root cause analysis of incidents.\n+- Retrieve original time series data and time series data enriched by the service.\n+- Send real time alerts through multiple notification hooks.\n+- Adjust anomaly/incident detection using feedback to tune your model.\n \n ### MetricsAdvisorAdministrationClient\n `MetricsAdvisorAdministrationClient` allows you to\n \n-- manage data feeds\n-- configure anomaly detection configurations\n-- configure anomaly alerting configurations\n-- manage hooks\n+- Manage data feeds\n+- List available metrics and their detection configurations\n+- Fine tune anomaly detection configurations\n+- Configure anomaly alerting configurations\n+- Manage notification hooks\n \n ### Data feed\n-A `data feed` is what Metrics Advisor ingests from the user-specified data source such as Cosmos structure stream, SQL query result, and so on.\n-A data feed contains rows of timestamps, zero or more dimensions, one or more metrics. Therefore, multiple metrics could share the same data source and even the same data feed.\n+A data feed is what Metrics Advisor ingests from the user-specified data source such as Cosmos structure stream, SQL query result, and so on.\n+It contains rows of timestamps, zero or more dimensions, one or more etrics. Therefore, multiple metrics could share the same data source and even the same data feed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "022c137c2b34c06ba829b3e7619e34da6150340e"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDM1MTI2OnYy", "diffSide": "RIGHT", "path": "sdk/metricsadvisor/azure-ai-metricsadvisor/src/main/java/com/azure/ai/metricsadvisor/MetricsAdvisorAsyncClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzo1ODozOFrOHtEpWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzo1OTo0NFrOHtEqqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNDA5MQ==", "bodyText": "should we also check for whether the option is not null before invoking getFilter", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16732#discussion_r517024091", "createdAt": "2020-11-03T23:58:38Z", "author": {"login": "anuchandy"}, "path": "sdk/metricsadvisor/azure-ai-metricsadvisor/src/main/java/com/azure/ai/metricsadvisor/MetricsAdvisorAsyncClient.java", "diffHunk": "@@ -546,55 +553,58 @@\n      * Fetch the anomalies identified by an anomaly detection configuration.\n      *\n      * <p><strong>Code sample</strong></p>\n-     * {@codesnippet com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForDetectionConfiguration#String-ListAnomaliesDetectedOptions}\n+     * {@codesnippet com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForDetectionConfig#String-OffsetDateTime-OffsetDateTime-ListAnomaliesDetectedOptions}\n      *\n      * @param detectionConfigurationId The anomaly detection configuration id.\n+     * @param startTime The start time of the time range within which the anomalies were detected.\n+     * @param endTime The end time of the time range within which the anomalies were detected.\n      * @param options The additional parameters.\n+     *\n      * @return The anomalies.\n      * @throws IllegalArgumentException thrown if {@code detectionConfigurationId} does not conform\n      *     to the UUID format specification\n      *     or {@code options.filter} is used to set severity but either min or max severity is missing.\n      * @throws NullPointerException thrown if the {@code detectionConfigurationId} or {@code options}\n-     *     or {@code options.startTime} or {@code options.endTime} is null.\n+     *     or {@code startTime} or {@code endTime} is null.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedFlux<Anomaly> listAnomaliesForDetectionConfiguration(\n+    public PagedFlux<DataPointAnomaly> listAnomaliesForDetectionConfig(\n         String detectionConfigurationId,\n-        ListAnomaliesDetectedOptions options) {\n+        OffsetDateTime startTime, OffsetDateTime endTime, ListAnomaliesDetectedOptions options) {\n         try {\n             return new PagedFlux<>(() ->\n                 withContext(context ->\n-                    listAnomaliesForDetectionConfigurationSinglePageAsync(detectionConfigurationId,\n-                        options, context)),\n+                    listAnomaliesForDetectionConfigSinglePageAsync(detectionConfigurationId,\n+                        startTime, endTime, options, context)),\n                 continuationToken ->\n-                    withContext(context -> listAnomaliesForDetectionConfigurationNextPageAsync(continuationToken,\n-                        options, context)));\n+                    withContext(context -> listAnomaliesForDetectionConfigNextPageAsync(continuationToken,\n+                        startTime, endTime, options, context)));\n         } catch (RuntimeException ex) {\n             return new PagedFlux<>(() -> FluxUtil.monoError(logger, ex));\n         }\n     }\n \n-    PagedFlux<Anomaly> listAnomaliesForDetectionConfiguration(\n+    PagedFlux<DataPointAnomaly> listAnomaliesForDetectionConfig(\n         String detectionConfigurationId,\n-        ListAnomaliesDetectedOptions options, Context context) {\n+        OffsetDateTime startTime, OffsetDateTime endTime, ListAnomaliesDetectedOptions options, Context context) {\n         return new PagedFlux<>(() ->\n-            listAnomaliesForDetectionConfigurationSinglePageAsync(detectionConfigurationId, options, context),\n+            listAnomaliesForDetectionConfigSinglePageAsync(detectionConfigurationId, startTime, endTime, options,\n+                context),\n             continuationToken ->\n-                listAnomaliesForDetectionConfigurationNextPageAsync(continuationToken, options, context));\n+                listAnomaliesForDetectionConfigNextPageAsync(continuationToken, startTime, endTime, options, context));\n     }\n \n-    private Mono<PagedResponse<Anomaly>> listAnomaliesForDetectionConfigurationSinglePageAsync(\n+    private Mono<PagedResponse<DataPointAnomaly>> listAnomaliesForDetectionConfigSinglePageAsync(\n         String detectionConfigurationId,\n-        ListAnomaliesDetectedOptions options,\n+        OffsetDateTime startTime, OffsetDateTime endTime, ListAnomaliesDetectedOptions options,\n         Context context) {\n         Objects.requireNonNull(detectionConfigurationId, \"'detectionConfigurationId' is required.\");\n-        Objects.requireNonNull(options, \"'options' is required.\");\n-        Objects.requireNonNull(options.getStartTime(), \"'options.startTime' is required.\");\n-        Objects.requireNonNull(options.getEndTime(), \"'options.endTime' is required.\");\n+        Objects.requireNonNull(startTime, \"'startTime' is required.\");\n+        Objects.requireNonNull(endTime, \"'endTime' is required.\");\n \n         DetectionAnomalyResultQuery query = new DetectionAnomalyResultQuery()\n-            .setStartTime(options.getStartTime())\n-            .setEndTime(options.getEndTime());\n+            .setStartTime(startTime)\n+            .setEndTime(endTime);\n \n         if (options.getFilter() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "022c137c2b34c06ba829b3e7619e34da6150340e"}, "originalPosition": 302}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNDQyNQ==", "bodyText": "same comment for listAnomaliesForDetectionConfigNextPageAsync", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16732#discussion_r517024425", "createdAt": "2020-11-03T23:59:44Z", "author": {"login": "anuchandy"}, "path": "sdk/metricsadvisor/azure-ai-metricsadvisor/src/main/java/com/azure/ai/metricsadvisor/MetricsAdvisorAsyncClient.java", "diffHunk": "@@ -546,55 +553,58 @@\n      * Fetch the anomalies identified by an anomaly detection configuration.\n      *\n      * <p><strong>Code sample</strong></p>\n-     * {@codesnippet com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForDetectionConfiguration#String-ListAnomaliesDetectedOptions}\n+     * {@codesnippet com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForDetectionConfig#String-OffsetDateTime-OffsetDateTime-ListAnomaliesDetectedOptions}\n      *\n      * @param detectionConfigurationId The anomaly detection configuration id.\n+     * @param startTime The start time of the time range within which the anomalies were detected.\n+     * @param endTime The end time of the time range within which the anomalies were detected.\n      * @param options The additional parameters.\n+     *\n      * @return The anomalies.\n      * @throws IllegalArgumentException thrown if {@code detectionConfigurationId} does not conform\n      *     to the UUID format specification\n      *     or {@code options.filter} is used to set severity but either min or max severity is missing.\n      * @throws NullPointerException thrown if the {@code detectionConfigurationId} or {@code options}\n-     *     or {@code options.startTime} or {@code options.endTime} is null.\n+     *     or {@code startTime} or {@code endTime} is null.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedFlux<Anomaly> listAnomaliesForDetectionConfiguration(\n+    public PagedFlux<DataPointAnomaly> listAnomaliesForDetectionConfig(\n         String detectionConfigurationId,\n-        ListAnomaliesDetectedOptions options) {\n+        OffsetDateTime startTime, OffsetDateTime endTime, ListAnomaliesDetectedOptions options) {\n         try {\n             return new PagedFlux<>(() ->\n                 withContext(context ->\n-                    listAnomaliesForDetectionConfigurationSinglePageAsync(detectionConfigurationId,\n-                        options, context)),\n+                    listAnomaliesForDetectionConfigSinglePageAsync(detectionConfigurationId,\n+                        startTime, endTime, options, context)),\n                 continuationToken ->\n-                    withContext(context -> listAnomaliesForDetectionConfigurationNextPageAsync(continuationToken,\n-                        options, context)));\n+                    withContext(context -> listAnomaliesForDetectionConfigNextPageAsync(continuationToken,\n+                        startTime, endTime, options, context)));\n         } catch (RuntimeException ex) {\n             return new PagedFlux<>(() -> FluxUtil.monoError(logger, ex));\n         }\n     }\n \n-    PagedFlux<Anomaly> listAnomaliesForDetectionConfiguration(\n+    PagedFlux<DataPointAnomaly> listAnomaliesForDetectionConfig(\n         String detectionConfigurationId,\n-        ListAnomaliesDetectedOptions options, Context context) {\n+        OffsetDateTime startTime, OffsetDateTime endTime, ListAnomaliesDetectedOptions options, Context context) {\n         return new PagedFlux<>(() ->\n-            listAnomaliesForDetectionConfigurationSinglePageAsync(detectionConfigurationId, options, context),\n+            listAnomaliesForDetectionConfigSinglePageAsync(detectionConfigurationId, startTime, endTime, options,\n+                context),\n             continuationToken ->\n-                listAnomaliesForDetectionConfigurationNextPageAsync(continuationToken, options, context));\n+                listAnomaliesForDetectionConfigNextPageAsync(continuationToken, startTime, endTime, options, context));\n     }\n \n-    private Mono<PagedResponse<Anomaly>> listAnomaliesForDetectionConfigurationSinglePageAsync(\n+    private Mono<PagedResponse<DataPointAnomaly>> listAnomaliesForDetectionConfigSinglePageAsync(\n         String detectionConfigurationId,\n-        ListAnomaliesDetectedOptions options,\n+        OffsetDateTime startTime, OffsetDateTime endTime, ListAnomaliesDetectedOptions options,\n         Context context) {\n         Objects.requireNonNull(detectionConfigurationId, \"'detectionConfigurationId' is required.\");\n-        Objects.requireNonNull(options, \"'options' is required.\");\n-        Objects.requireNonNull(options.getStartTime(), \"'options.startTime' is required.\");\n-        Objects.requireNonNull(options.getEndTime(), \"'options.endTime' is required.\");\n+        Objects.requireNonNull(startTime, \"'startTime' is required.\");\n+        Objects.requireNonNull(endTime, \"'endTime' is required.\");\n \n         DetectionAnomalyResultQuery query = new DetectionAnomalyResultQuery()\n-            .setStartTime(options.getStartTime())\n-            .setEndTime(options.getEndTime());\n+            .setStartTime(startTime)\n+            .setEndTime(endTime);\n \n         if (options.getFilter() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNDA5MQ=="}, "originalCommit": {"oid": "022c137c2b34c06ba829b3e7619e34da6150340e"}, "originalPosition": 302}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3918, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}