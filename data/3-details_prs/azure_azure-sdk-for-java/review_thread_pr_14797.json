{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5MDYyNzk0", "number": 14797, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNzo1Mzo1OFrOEgR_2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMDoyOToxNlrOEhddgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjg0NzYyOnYy", "diffSide": "RIGHT", "path": "sdk/tables/tests.yml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNzo1Mzo1OFrOHNDgJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMjozNjo1MlrOHOIWtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ1MDkxOA==", "bodyText": "We run them in LIVE mode so that the results aren't persisted, it'll just run against the live service.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14797#discussion_r483450918", "createdAt": "2020-09-04T07:53:58Z", "author": {"login": "conniey"}, "path": "sdk/tables/tests.yml", "diffHunk": "@@ -7,7 +7,7 @@ jobs:\n       Timeout: 60\n       MaxParallel: 12\n       EnvVars:\n-        AZURE_TEST_MODE: LIVE\n+        AZURE_TEST_MODE: RECORD", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae88645cb0a4fbd9567ff9297cd23c8713aec7a7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc3Njc4Ng==", "bodyText": "I thought they would work mostly the same, but when I run in LIVE mode I get an error from azure core that recordFile is null (or something like that, I don't 100% precisely recall the error). I'm not sure why it works for RECORD but not for LIVE.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14797#discussion_r483776786", "createdAt": "2020-09-04T18:06:59Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/tests.yml", "diffHunk": "@@ -7,7 +7,7 @@ jobs:\n       Timeout: 60\n       MaxParallel: 12\n       EnvVars:\n-        AZURE_TEST_MODE: LIVE\n+        AZURE_TEST_MODE: RECORD", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ1MDkxOA=="}, "originalCommit": {"oid": "ae88645cb0a4fbd9567ff9297cd23c8713aec7a7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU3ODk5Nw==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14797#discussion_r484578997", "createdAt": "2020-09-07T22:36:52Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/tests.yml", "diffHunk": "@@ -7,7 +7,7 @@ jobs:\n       Timeout: 60\n       MaxParallel: 12\n       EnvVars:\n-        AZURE_TEST_MODE: LIVE\n+        AZURE_TEST_MODE: RECORD", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ1MDkxOA=="}, "originalCommit": {"oid": "ae88645cb0a4fbd9567ff9297cd23c8713aec7a7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI5MDU5OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/CosmosThrottled.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0OTowMlrOHOpyHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMDoyMjozNFrOHOyQxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNjY4Nw==", "bodyText": "Does this work for async? The apply method would return a Mono but it would not actually be invoked until someone subscribed to it.\nI think a more reactive approach is required to keep retrying depending on the error. there is a retryWhen operator.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14797#discussion_r485126687", "createdAt": "2020-09-08T18:49:02Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/CosmosThrottled.java", "diffHunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.exception.AzureException;\n+import com.azure.data.tables.implementation.AzureTableImpl;\n+import com.azure.data.tables.implementation.models.TableServiceErrorException;\n+\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+public abstract class CosmosThrottled<T> {\n+    protected final T client;\n+    protected final boolean isPlaybackMode;\n+\n+    protected CosmosThrottled(T client, boolean isPlaybackMode) {\n+        this.client = client;\n+        this.isPlaybackMode = isPlaybackMode;\n+    }\n+\n+    public abstract boolean isCosmos();\n+\n+    public void runVoid(Consumer<T> action) {\n+        run(c -> {\n+            action.accept(c);\n+            return null;\n+        });\n+    }\n+\n+    public T getClient() {\n+        return client;\n+    }\n+\n+    public <TResult> TResult run(Function<T, TResult> action) {\n+        if (!isCosmos()) {\n+            return action.apply(client);\n+        }\n+\n+        int retryCount = 0;\n+        int delay = 1500;\n+        while (true) {\n+            try {\n+                return action.apply(client);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "718971bf20e783ca1333d4e25212d93e3f6c3e1b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2NTYwNA==", "bodyText": "Turns out that this was actually unneeded, I just needed to configure the retrypolicy to allow more retries & backoff time.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14797#discussion_r485265604", "createdAt": "2020-09-09T00:22:34Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/CosmosThrottled.java", "diffHunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.exception.AzureException;\n+import com.azure.data.tables.implementation.AzureTableImpl;\n+import com.azure.data.tables.implementation.models.TableServiceErrorException;\n+\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+public abstract class CosmosThrottled<T> {\n+    protected final T client;\n+    protected final boolean isPlaybackMode;\n+\n+    protected CosmosThrottled(T client, boolean isPlaybackMode) {\n+        this.client = client;\n+        this.isPlaybackMode = isPlaybackMode;\n+    }\n+\n+    public abstract boolean isCosmos();\n+\n+    public void runVoid(Consumer<T> action) {\n+        run(c -> {\n+            action.accept(c);\n+            return null;\n+        });\n+    }\n+\n+    public T getClient() {\n+        return client;\n+    }\n+\n+    public <TResult> TResult run(Function<T, TResult> action) {\n+        if (!isCosmos()) {\n+            return action.apply(client);\n+        }\n+\n+        int retryCount = 0;\n+        int delay = 1500;\n+        while (true) {\n+            try {\n+                return action.apply(client);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNjY4Nw=="}, "originalCommit": {"oid": "718971bf20e783ca1333d4e25212d93e3f6c3e1b"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTIxMDEyOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/TablesAsyncClientTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMDoyODoyOFrOHOyXAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMDozNDo1M1rOHOydtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2NzIwMw==", "bodyText": "Can we split this into another test case and disable it? I feel it'll get lost as a comment since there is no issue or TODO tracking this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14797#discussion_r485267203", "createdAt": "2020-09-09T00:28:28Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/TablesAsyncClientTest.java", "diffHunk": "@@ -339,20 +361,27 @@ void updateEntityWithResponseAsync(UpdateMode mode) {\n         createdEntity.getProperties().remove(oldPropertyKey);\n         createdEntity.addProperty(newPropertyKey, \"valueB\");\n \n-        // Act\n-        StepVerifier.create(tableClient.updateEntityWithResponse(createdEntity, true, mode))\n-            .assertNext(response -> assertEquals(expectedStatusCode, response.getStatusCode()))\n-            .expectComplete()\n-            .verify();\n-\n-        // Assert and verify that the new properties are in there.\n-        StepVerifier.create(tableClient.getEntity(partitionKeyValue, rowKeyValue))\n-            .assertNext(entity -> {\n-                final Map<String, Object> properties = entity.getProperties();\n-                assertTrue(properties.containsKey(newPropertyKey));\n-                assertEquals(expectOldProperty, properties.containsKey(oldPropertyKey));\n-            })\n-            .verifyComplete();\n+        // Act & Assert\n+        if (mode == UpdateMode.MERGE && tableClient.getTableUrl().contains(\"cosmos.azure.com\")) {\n+            // This scenario is currently broken when using the CosmosDB Table API\n+            StepVerifier.create(tableClient.updateEntityWithResponse(createdEntity, true, mode))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d64917d510f80b43d10dd6bac7c7da1f6f5a4743"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2ODI5OQ==", "bodyText": "Yes, once support is merged for multiple tests with the same name (#14801) I will separate these into two test classes, one for Cosmos and one for Storage, each with their own recordings.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14797#discussion_r485268299", "createdAt": "2020-09-09T00:32:24Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/TablesAsyncClientTest.java", "diffHunk": "@@ -339,20 +361,27 @@ void updateEntityWithResponseAsync(UpdateMode mode) {\n         createdEntity.getProperties().remove(oldPropertyKey);\n         createdEntity.addProperty(newPropertyKey, \"valueB\");\n \n-        // Act\n-        StepVerifier.create(tableClient.updateEntityWithResponse(createdEntity, true, mode))\n-            .assertNext(response -> assertEquals(expectedStatusCode, response.getStatusCode()))\n-            .expectComplete()\n-            .verify();\n-\n-        // Assert and verify that the new properties are in there.\n-        StepVerifier.create(tableClient.getEntity(partitionKeyValue, rowKeyValue))\n-            .assertNext(entity -> {\n-                final Map<String, Object> properties = entity.getProperties();\n-                assertTrue(properties.containsKey(newPropertyKey));\n-                assertEquals(expectOldProperty, properties.containsKey(oldPropertyKey));\n-            })\n-            .verifyComplete();\n+        // Act & Assert\n+        if (mode == UpdateMode.MERGE && tableClient.getTableUrl().contains(\"cosmos.azure.com\")) {\n+            // This scenario is currently broken when using the CosmosDB Table API\n+            StepVerifier.create(tableClient.updateEntityWithResponse(createdEntity, true, mode))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2NzIwMw=="}, "originalCommit": {"oid": "d64917d510f80b43d10dd6bac7c7da1f6f5a4743"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2ODkxNw==", "bodyText": "Tracking this work in #14930", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14797#discussion_r485268917", "createdAt": "2020-09-09T00:34:53Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/TablesAsyncClientTest.java", "diffHunk": "@@ -339,20 +361,27 @@ void updateEntityWithResponseAsync(UpdateMode mode) {\n         createdEntity.getProperties().remove(oldPropertyKey);\n         createdEntity.addProperty(newPropertyKey, \"valueB\");\n \n-        // Act\n-        StepVerifier.create(tableClient.updateEntityWithResponse(createdEntity, true, mode))\n-            .assertNext(response -> assertEquals(expectedStatusCode, response.getStatusCode()))\n-            .expectComplete()\n-            .verify();\n-\n-        // Assert and verify that the new properties are in there.\n-        StepVerifier.create(tableClient.getEntity(partitionKeyValue, rowKeyValue))\n-            .assertNext(entity -> {\n-                final Map<String, Object> properties = entity.getProperties();\n-                assertTrue(properties.containsKey(newPropertyKey));\n-                assertEquals(expectOldProperty, properties.containsKey(oldPropertyKey));\n-            })\n-            .verifyComplete();\n+        // Act & Assert\n+        if (mode == UpdateMode.MERGE && tableClient.getTableUrl().contains(\"cosmos.azure.com\")) {\n+            // This scenario is currently broken when using the CosmosDB Table API\n+            StepVerifier.create(tableClient.updateEntityWithResponse(createdEntity, true, mode))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2NzIwMw=="}, "originalCommit": {"oid": "d64917d510f80b43d10dd6bac7c7da1f6f5a4743"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTIxMTU1OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/TableServiceAsyncClientTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMDoyOToxNlrOHOyXxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMDozMToxNlrOHOyaFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2NzM5Nw==", "bodyText": "Is there a reason for splitting this into three sequential blocks rather than running them concurrently?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14797#discussion_r485267397", "createdAt": "2020-09-09T00:29:16Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/TableServiceAsyncClientTest.java", "diffHunk": "@@ -228,12 +227,10 @@ void serviceListTablesWithTopAsync() {\n         final String tableName2 = testResourceNamer.randomName(\"test\", 20);\n         final String tableName3 = testResourceNamer.randomName(\"test\", 20);\n         ListTablesOptions options = new ListTablesOptions().setTop(2);\n-        Mono.when(\n-            serviceClient.createTable(tableName),\n-            serviceClient.createTable(tableName2),\n-            serviceClient.createTable(tableName3)\n-        ).block(TIMEOUT);\n-        \n+        serviceClient.createTable(tableName).block(TIMEOUT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d64917d510f80b43d10dd6bac7c7da1f6f5a4743"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2Nzk4OQ==", "bodyText": "I was having intermittent 429 issues with failures when using Mono.when with multiple streams against the CosmosDB API.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14797#discussion_r485267989", "createdAt": "2020-09-09T00:31:16Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/TableServiceAsyncClientTest.java", "diffHunk": "@@ -228,12 +227,10 @@ void serviceListTablesWithTopAsync() {\n         final String tableName2 = testResourceNamer.randomName(\"test\", 20);\n         final String tableName3 = testResourceNamer.randomName(\"test\", 20);\n         ListTablesOptions options = new ListTablesOptions().setTop(2);\n-        Mono.when(\n-            serviceClient.createTable(tableName),\n-            serviceClient.createTable(tableName2),\n-            serviceClient.createTable(tableName3)\n-        ).block(TIMEOUT);\n-        \n+        serviceClient.createTable(tableName).block(TIMEOUT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2NzM5Nw=="}, "originalCommit": {"oid": "d64917d510f80b43d10dd6bac7c7da1f6f5a4743"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1279, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}