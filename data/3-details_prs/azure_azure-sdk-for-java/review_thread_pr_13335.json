{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzNjU5NTY0", "number": 13335, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDowMzoyNFrOEQWhvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDowNjozOVrOEQWlww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTgxNzU5OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/options/BlobBeginCopyOptions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDowMzoyNFrOG0dVLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDo0OTo1MVrOG0exZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY1OTY5NQ==", "bodyText": "I think \"sealDestination\" makes more sense to me because it's something that will happen in the future whereas \"destinationSealed\" sounds like it's commenting on the past/current state. I'm not really sure what you would use for the getter, though, because \"isSealDestination\" doesn't really work. Also not sure if this was already resolved in .NET", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13335#discussion_r457659695", "createdAt": "2020-07-20T20:03:24Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/options/BlobBeginCopyOptions.java", "diffHunk": "@@ -26,6 +26,7 @@\n     private RequestConditions sourceRequestConditions;\n     private BlobRequestConditions destinationRequestConditions;\n     private Duration pollInterval;\n+    private Boolean destinationSealed;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc3c8c02436e26cb70d5eca16267cf62326999a7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY4MzMwMw==", "bodyText": "modified", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13335#discussion_r457683303", "createdAt": "2020-07-20T20:49:51Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/options/BlobBeginCopyOptions.java", "diffHunk": "@@ -26,6 +26,7 @@\n     private RequestConditions sourceRequestConditions;\n     private BlobRequestConditions destinationRequestConditions;\n     private Duration pollInterval;\n+    private Boolean destinationSealed;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY1OTY5NQ=="}, "originalCommit": {"oid": "dc3c8c02436e26cb70d5eca16267cf62326999a7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTgxOTc3OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/AppendBlobAsyncClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDowNDowNlrOG0dWpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDowNToxNFrOG0dY7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MDA3MA==", "bodyText": "Is there a Rest doc we can link to?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13335#discussion_r457660070", "createdAt": "2020-07-20T20:04:06Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/AppendBlobAsyncClient.java", "diffHunk": "@@ -367,4 +368,55 @@\n                 return new SimpleResponse<>(rb, item);\n             });\n     }\n+\n+    /**\n+     * Seals an append blob, making it read only. Any subsequent appends will fail.\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc3c8c02436e26cb70d5eca16267cf62326999a7"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MDY1Mw==", "bodyText": "I couldnt find a REST doc for this", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13335#discussion_r457660653", "createdAt": "2020-07-20T20:05:14Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/AppendBlobAsyncClient.java", "diffHunk": "@@ -367,4 +368,55 @@\n                 return new SimpleResponse<>(rb, item);\n             });\n     }\n+\n+    /**\n+     * Seals an append blob, making it read only. Any subsequent appends will fail.\n+     *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MDA3MA=="}, "originalCommit": {"oid": "dc3c8c02436e26cb70d5eca16267cf62326999a7"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTgyNzg3OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/AppendBlobAsyncClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDowNjozOVrOG0dbow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDozMDo0MVrOG0eLlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MTM0Nw==", "bodyText": "Sorry to keep asking this, but it looks like we decided to allow null for options when they don't have a required value?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13335#discussion_r457661347", "createdAt": "2020-07-20T20:06:39Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/AppendBlobAsyncClient.java", "diffHunk": "@@ -367,4 +368,55 @@\n                 return new SimpleResponse<>(rb, item);\n             });\n     }\n+\n+    /**\n+     * Seals an append blob, making it read only. Any subsequent appends will fail.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.specialized.AppendBlobAsyncClient.seal}\n+     *\n+     * @return A reactive response signalling completion.\n+     */\n+    public Mono<Void> seal() {\n+        try {\n+            return sealWithResponse(new AppendBlobSealOptions())\n+                .flatMap(FluxUtil::toMono);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Seals an append blob, making it read only. Any subsequent appends will fail.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.specialized.AppendBlobAsyncClient.sealWithResponse#AppendBlobSealOptions}\n+     *\n+     * @param options {@link AppendBlobSealOptions}\n+     * @return A reactive response signalling completion.\n+     */\n+    public Mono<Response<Void>> sealWithResponse(AppendBlobSealOptions options) {\n+        try {\n+            return withContext(context -> sealWithResponse(options, context));\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    Mono<Response<Void>> sealWithResponse(AppendBlobSealOptions options, Context context) {\n+        options = (options == null) ? new AppendBlobSealOptions() : options;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc3c8c02436e26cb70d5eca16267cf62326999a7"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2NjM5Mw==", "bodyText": "yeah I noticed that we do allow null for options when they dont have a required value. Im gonna create a PR after this making them all have this functionality - just didnt want to have this PR do 2 things at once", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13335#discussion_r457666393", "createdAt": "2020-07-20T20:16:38Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/AppendBlobAsyncClient.java", "diffHunk": "@@ -367,4 +368,55 @@\n                 return new SimpleResponse<>(rb, item);\n             });\n     }\n+\n+    /**\n+     * Seals an append blob, making it read only. Any subsequent appends will fail.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.specialized.AppendBlobAsyncClient.seal}\n+     *\n+     * @return A reactive response signalling completion.\n+     */\n+    public Mono<Void> seal() {\n+        try {\n+            return sealWithResponse(new AppendBlobSealOptions())\n+                .flatMap(FluxUtil::toMono);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Seals an append blob, making it read only. Any subsequent appends will fail.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.specialized.AppendBlobAsyncClient.sealWithResponse#AppendBlobSealOptions}\n+     *\n+     * @param options {@link AppendBlobSealOptions}\n+     * @return A reactive response signalling completion.\n+     */\n+    public Mono<Response<Void>> sealWithResponse(AppendBlobSealOptions options) {\n+        try {\n+            return withContext(context -> sealWithResponse(options, context));\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    Mono<Response<Void>> sealWithResponse(AppendBlobSealOptions options, Context context) {\n+        options = (options == null) ? new AppendBlobSealOptions() : options;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MTM0Nw=="}, "originalCommit": {"oid": "dc3c8c02436e26cb70d5eca16267cf62326999a7"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3MzYyMA==", "bodyText": "#13339", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13335#discussion_r457673620", "createdAt": "2020-07-20T20:30:41Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/AppendBlobAsyncClient.java", "diffHunk": "@@ -367,4 +368,55 @@\n                 return new SimpleResponse<>(rb, item);\n             });\n     }\n+\n+    /**\n+     * Seals an append blob, making it read only. Any subsequent appends will fail.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.specialized.AppendBlobAsyncClient.seal}\n+     *\n+     * @return A reactive response signalling completion.\n+     */\n+    public Mono<Void> seal() {\n+        try {\n+            return sealWithResponse(new AppendBlobSealOptions())\n+                .flatMap(FluxUtil::toMono);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Seals an append blob, making it read only. Any subsequent appends will fail.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.specialized.AppendBlobAsyncClient.sealWithResponse#AppendBlobSealOptions}\n+     *\n+     * @param options {@link AppendBlobSealOptions}\n+     * @return A reactive response signalling completion.\n+     */\n+    public Mono<Response<Void>> sealWithResponse(AppendBlobSealOptions options) {\n+        try {\n+            return withContext(context -> sealWithResponse(options, context));\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    Mono<Response<Void>> sealWithResponse(AppendBlobSealOptions options, Context context) {\n+        options = (options == null) ? new AppendBlobSealOptions() : options;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MTM0Nw=="}, "originalCommit": {"oid": "dc3c8c02436e26cb70d5eca16267cf62326999a7"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4908, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}