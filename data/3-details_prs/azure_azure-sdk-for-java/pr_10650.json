{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExOTQwODYw", "number": 10650, "title": "Adding support for autoscale throughput", "bodyText": "Autoscale/Autopilot support\n\nAdded ThroughputProperties class which contains factories for creating autoscaled or fixed throughput\nAdded ThroughputResponse class to fetch relevant details of offer response\nAdded overloads to create database and container using throughput properties\nAdded read and replace overloads for database and container to read or replace throughput response", "createdAt": "2020-05-01T02:17:13Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650", "merged": true, "mergeCommit": {"oid": "150680cc74d04e3a4ca61e76f894ff470651c74a"}, "closed": true, "closedAt": "2020-05-08T22:24:12Z", "author": {"login": "mbhaskar"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcc7MA6gFqTQwNDAzMTUyNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfZMn8gFqTQwODU1MTUzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MDMxNTI3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#pullrequestreview-404031527", "createdAt": "2020-05-01T05:53:29Z", "commit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTo1MzoyOVrOGPCxgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTo1MzoyOVrOGPCxgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzI2NQ==", "bodyText": "Fixed rebranded as Manual", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418427265", "createdAt": "2020-05-01T05:53:29Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MDMxNjgz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#pullrequestreview-404031683", "createdAt": "2020-05-01T05:54:17Z", "commit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTo1NDoxOFrOGPCyKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTo1NDoxOFrOGPCyKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzQzMw==", "bodyText": "How about excluding Provisioned from the name?\n@j82w can you please check for consistency with .NET contracts as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418427433", "createdAt": "2020-05-01T05:54:18Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MDMxNzgy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#pullrequestreview-404031782", "createdAt": "2020-05-01T05:54:48Z", "commit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTo1NDo0OFrOGPCymA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTo1NDo0OFrOGPCymA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzU0NA==", "bodyText": "autoScaleMaxThroughput", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418427544", "createdAt": "2020-05-01T05:54:48Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n+        int maxAutoScaleThroughput,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MDMyMTU3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#pullrequestreview-404032157", "createdAt": "2020-05-01T05:56:54Z", "commit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTo1Njo1NVrOGPC0Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTo1Njo1NVrOGPC0Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzk0Mw==", "bodyText": "Need more baking time for autoUpgradethroughputIncrementPercentage. Can it be exlucded from //build scope?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418427943", "createdAt": "2020-05-01T05:56:55Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n+        int maxAutoScaleThroughput,\n+        int autoUpgradethroughputIncrementPercentage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MDMyMzY0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#pullrequestreview-404032364", "createdAt": "2020-05-01T05:58:00Z", "commit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTo1ODowMFrOGPC00g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTo1ODowMFrOGPC00g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODExNA==", "bodyText": "getManualThrughput", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418428114", "createdAt": "2020-05-01T05:58:00Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n+        int maxAutoScaleThroughput,\n+        int autoUpgradethroughputIncrementPercentage) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+                                                                   autoUpgradethroughputIncrementPercentage));\n+    }\n+\n+    /**\n+     * Create auto scaled provisioned throughput throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(int maxAutoScaleThroughput) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+                                                                   0));\n+    }\n+\n+    /**\n+     * Gets offer throughput.\n+     *\n+     * @return the offer throughput\n+     */\n+    public Integer getOfferThroughput() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MDMyNzEx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#pullrequestreview-404032711", "createdAt": "2020-05-01T05:59:43Z", "commit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTo1OTo0M1rOGPC2LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTo1OTo0M1rOGPC2LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODQ2MA==", "bodyText": "How about inling the auto-scale related entries?\nWhat;s the value of nesting type?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418428460", "createdAt": "2020-05-01T05:59:43Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n+        int maxAutoScaleThroughput,\n+        int autoUpgradethroughputIncrementPercentage) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+                                                                   autoUpgradethroughputIncrementPercentage));\n+    }\n+\n+    /**\n+     * Create auto scaled provisioned throughput throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(int maxAutoScaleThroughput) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+                                                                   0));\n+    }\n+\n+    /**\n+     * Gets offer throughput.\n+     *\n+     * @return the offer throughput\n+     */\n+    public Integer getOfferThroughput() {\n+        return offer.getThroughput();\n+    }\n+\n+    /**\n+     * Gets offer autoscale properties.\n+     *\n+     * @return the offer autoscale properties\n+     */\n+    public OfferAutoscaleSettings getOfferAutoscaleProperties() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MDMzMDIz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#pullrequestreview-404033023", "createdAt": "2020-05-01T06:01:16Z", "commit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNjowMToxNlrOGPC3Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNjowMToxNlrOGPC3Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODcxOA==", "bodyText": "How do CX UT?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418428718", "createdAt": "2020-05-01T06:01:16Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MDMzMjc0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#pullrequestreview-404033274", "createdAt": "2020-05-01T06:02:38Z", "commit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNjowMjozOFrOGPC4MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNjowMjozOFrOGPC4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODk3Ng==", "bodyText": "Between choice of ReqeustOptions vs overload: Isn't overload better from experience wise?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418428976", "createdAt": "2020-05-01T06:02:38Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosDatabaseRequestOptions.java", "diffHunk": "@@ -51,10 +53,16 @@ CosmosDatabaseRequestOptions setOfferThroughput(Integer offerThroughput) {\n         return this;\n     }\n \n+    CosmosDatabaseRequestOptions setThroughputProperties(ThroughputProperties throughputProperties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MDMzMzQ4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#pullrequestreview-404033348", "createdAt": "2020-05-01T06:03:05Z", "commit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNjowMzowNVrOGPC4bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNjowMzowNVrOGPC4bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyOTAzNg==", "bodyText": "multi lines", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418429036", "createdAt": "2020-05-01T06:03:05Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -908,6 +907,31 @@ private static void validateResource(Resource resource) {\n             headers.put(HttpConstants.HttpHeaders.OFFER_TYPE, options.getOfferType());\n         }\n \n+        if (options.getOfferThroughput() == null) {\n+            if (options.getThroughputProperties() != null) {\n+                Offer offer = ModelBridgeInternal.getOfferFromThroughputProperties(options.getThroughputProperties());\n+                final OfferAutoscaleAutoUpgradeProperties autoscaleAutoUpgradeProperties\n+                    = offer.getOfferAutoScaleSettings().getAutoscaleAutoUpgradeProperties();\n+                if (offer.hasOfferThroughput() &&\n+                        (offer.getOfferAutoScaleSettings().getMaxThroughput() >= 0 ||\n+                             autoscaleAutoUpgradeProperties != null &&\n+                                 autoscaleAutoUpgradeProperties\n+                                     .getAutoscaleThroughputProperties()\n+                                     .getIncrementPercent() >= 0)) {\n+                    throw new IllegalArgumentException(\"Autoscale provisioned throughput can not be configured with \"\n+                                                           + \"fixed offer\");\n+                }\n+\n+                if (offer.hasOfferThroughput()) {\n+                    headers.put(HttpConstants.HttpHeaders.OFFER_THROUGHPUT, options.getOfferThroughput().toString());\n+                } else if (offer.getOfferAutoScaleSettings() != null) {\n+                    headers.put(HttpConstants.HttpHeaders.OFFER_AUTOPILOT_SETTINGS,\n+                                ModelBridgeInternal.toJsonFromJsonSerializable(offer.getOfferAutoScaleSettings()));\n+                }\n+            }\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MDMzNjQ3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#pullrequestreview-404033647", "createdAt": "2020-05-01T06:04:39Z", "commit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MDM3Nzgx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#pullrequestreview-404037781", "createdAt": "2020-05-01T06:24:43Z", "commit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNjoyNDo0M1rOGPDJAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNjo0MTowMFrOGPDVmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzMzI4MQ==", "bodyText": "I would use parametrized SqlQuerySpec instead of concating strings", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418433281", "createdAt": "2020-05-01T06:24:43Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -661,6 +663,69 @@ public CosmosAsyncConflict getConflict(String id) {\n                    }).map(offerResourceResponse -> offerResourceResponse.getResource().getThroughput());\n     }\n \n+    /**\n+     * Replace the throughput .\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()\n+                                            .queryOffers(\"select * from c where c.offerResourceId = '\"\n+                                                             + response.getProperties()\n+                                                                   .getResourceId()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNDE0Ng==", "bodyText": "autopilot is a v2 offer?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418434146", "createdAt": "2020-05-01T06:28:49Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Offer.java", "diffHunk": "@@ -26,6 +27,18 @@ public Offer(int offerThroughput) {\n         this.setContent(content);\n     }\n \n+    Offer(OfferAutoscaleSettings offerAutoscaleSettings) {\n+        super();\n+        this.setOfferVersion(Constants.Properties.OFFER_VERSION_V2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNjQ4NQ==", "bodyText": "tests should not use static database name to avoid any potential issue with runnings tests in parallel.\nPlease use CosmosDatabaseForTest.generateId()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418436485", "createdAt": "2020-05-01T06:40:54Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/CollectionCrudTest.java", "diffHunk": "@@ -367,6 +370,33 @@ public void sessionTokenConsistencyCollectionDeleteCreateSameName() {\n         }\n     }\n \n+    @Test(groups = { \"emulator\" }, timeOut = TIMEOUT)\n+    public void readReplaceAutoscaleThroughput() throws Exception {\n+        safeDeleteDatabase(client.getDatabase(\"newTestDatabase\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNjUwNQ==", "bodyText": "tests should not use static database name to avoid any potential issue with runnings tests in parallel.\nPlease use CosmosDatabaseForTest.generateId()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418436505", "createdAt": "2020-05-01T06:41:00Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/DatabaseCrudTest.java", "diffHunk": "@@ -108,6 +114,25 @@ public void deleteDatabase_DoesntExist() throws Exception {\n         validateFailure(deleteObservable, validator);\n     }\n \n+    @Test(groups = { \"emulator\" }, timeOut = TIMEOUT)\n+    public void readReplaceAutoscaleThroughput() throws Exception {\n+        safeDeleteDatabase(client.getDatabase(\"newTestDatabase\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NTU1Mzgx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#pullrequestreview-404555381", "createdAt": "2020-05-02T19:44:01Z", "commit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxOTo0NDowMVrOGPlsug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxOTo0OTo0OFrOGPlvKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTQ4Mg==", "bodyText": "it might worth to include the name of database and container in the sdk generated error message.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418999482", "createdAt": "2020-05-02T19:44:01Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -661,6 +663,68 @@ public CosmosAsyncConflict getConflict(String id) {\n                    }).map(offerResourceResponse -> offerResourceResponse.getResource().getThroughput());\n     }\n \n+    /**\n+     * Replace the throughput .\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()\n+                                            .queryOffers(database.getOfferQuerySpecFromResourceId(response\n+                                                                                                      .getProperties()\n+                                                                                                      .getResourceId())\n+                                                , new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +\n+                                                                                  \"resource\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTUzNA==", "bodyText": "it is worth including the name of the database and container in the sdk generated error message.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418999534", "createdAt": "2020-05-02T19:44:28Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -661,6 +663,68 @@ public CosmosAsyncConflict getConflict(String id) {\n                    }).map(offerResourceResponse -> offerResourceResponse.getResource().getThroughput());\n     }\n \n+    /**\n+     * Replace the throughput .\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()\n+                                            .queryOffers(database.getOfferQuerySpecFromResourceId(response\n+                                                                                                      .getProperties()\n+                                                                                                      .getResourceId())\n+                                                , new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +\n+                                                                                  \"resource\"));\n+                                                }\n+\n+                                                Offer existingOffer = offerFeedResponse.getResults().get(0);\n+                                                ModelBridgeInternal.updateOfferFromProperties(existingOffer,\n+                                                                                              throughputProperties);\n+                                                return this.database.getDocClientWrapper()\n+                                                           .replaceOffer(existingOffer)\n+                                                           .single();\n+                                            }).map(ModelBridgeInternal::createThroughputRespose));\n+    }\n+\n+    /**\n+     * Read the throughput throughput .\n+     *\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> readThroughput() {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()\n+                                            .queryOffers(database.getOfferQuerySpecFromResourceId(response\n+                                                                                                      .getProperties()\n+                                                                                                      .getResourceId())\n+                                                , new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the resource\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTY0NQ==", "bodyText": "it is worth including the name of the database in the sdk generated error message.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418999645", "createdAt": "2020-05-02T19:45:39Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -663,6 +686,78 @@ public CosmosAsyncUser getUser(String id) {\n                                                                                               .getThroughput()));\n     }\n \n+    /**\n+     * Sets throughput provisioned for a container in measurement of\n+     * Requests-per-Unit in the Azure Cosmos service.\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.getDocClientWrapper()\n+                                            .queryOffers(getOfferQuerySpecFromResourceId(response.getProperties()\n+                                                                                             .getResourceId()),\n+                                                         new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +\n+                                                                                  \"resource\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTY2Mw==", "bodyText": "ditto", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418999663", "createdAt": "2020-05-02T19:45:54Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -663,6 +686,78 @@ public CosmosAsyncUser getUser(String id) {\n                                                                                               .getThroughput()));\n     }\n \n+    /**\n+     * Sets throughput provisioned for a container in measurement of\n+     * Requests-per-Unit in the Azure Cosmos service.\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.getDocClientWrapper()\n+                                            .queryOffers(getOfferQuerySpecFromResourceId(response.getProperties()\n+                                                                                             .getResourceId()),\n+                                                         new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +\n+                                                                                  \"resource\"));\n+                                                }\n+\n+                                                Offer existingOffer = offerFeedResponse.getResults().get(0);\n+                                                ModelBridgeInternal.updateOfferFromProperties(existingOffer,\n+                                                                                              throughputProperties);\n+\n+                                                return this.getDocClientWrapper()\n+                                                           .replaceOffer(existingOffer)\n+                                                           .single();\n+                                            })\n+                                            .map(ModelBridgeInternal::createThroughputRespose));\n+    }\n+\n+    /**\n+     * Gets the throughput of the database\n+     *\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> readThroughput() {\n+        return this.read()\n+                   .flatMap(response -> getDocClientWrapper()\n+                                            .queryOffers(getOfferQuerySpecFromResourceId(response.getProperties()\n+                                                                                            .getResourceId()),\n+                                                         new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +\n+                                                                                  \"resource\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMDEwNw==", "bodyText": "please add code sample snippet.\nsimilar to AnalyticalStorageCodeSnippet or IndexPolicyCodeSnippet as example.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419000107", "createdAt": "2020-05-02T19:49:48Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NTYwMTk0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#pullrequestreview-404560194", "createdAt": "2020-05-02T20:57:45Z", "commit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMTowMDoyOVrOGPmLzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMTowMDoyOVrOGPmLzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwNzQzNg==", "bodyText": "remove second offer", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419007436", "createdAt": "2020-05-02T21:00:29Z", "author": {"login": "j82w"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Offer.java", "diffHunk": "@@ -34,7 +47,80 @@ public Offer(int offerThroughput) {\n     public Offer(String jsonString) {\n         super(jsonString);\n     }\n-    \n+\n+    /**\n+     * Instantiates a new Offer from object node.\n+     *\n+     * @param objectNode the object node\n+     */\n+    public Offer(ObjectNode objectNode) {\n+        super(objectNode);\n+    }\n+\n+    /**\n+     * Create fixed offer offer.\n+     *\n+     * @param throughput the throughput\n+     * @return the offer\n+     */\n+    public static Offer createManualOffer(int throughput) {\n+        return new Offer(throughput);\n+    }\n+\n+    /**\n+     * Create autoscale offer offer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NDA4OTcw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#pullrequestreview-405408970", "createdAt": "2020-05-04T23:11:27Z", "commit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzoxMToyN1rOGQVbfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzoxMToyN1rOGQVbfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MTUwMA==", "bodyText": "Is the indentation right?\nIt looks very nested and deep. @moderakh ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419781500", "createdAt": "2020-05-04T23:11:27Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -661,6 +663,68 @@ public CosmosAsyncConflict getConflict(String id) {\n                    }).map(offerResourceResponse -> offerResourceResponse.getResource().getThroughput());\n     }\n \n+    /**\n+     * Replace the throughput .\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NDA5Mjc5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#pullrequestreview-405409279", "createdAt": "2020-05-04T23:12:18Z", "commit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzoxMjoxOVrOGQVcog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzoxMjoxOVrOGQVcog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MTc5NA==", "bodyText": "In practice its only possible if name is invalid right?\nHow about reflecting the same in the exception message.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419781794", "createdAt": "2020-05-04T23:12:19Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -661,6 +663,68 @@ public CosmosAsyncConflict getConflict(String id) {\n                    }).map(offerResourceResponse -> offerResourceResponse.getResource().getThroughput());\n     }\n \n+    /**\n+     * Replace the throughput .\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()\n+                                            .queryOffers(database.getOfferQuerySpecFromResourceId(response\n+                                                                                                      .getProperties()\n+                                                                                                      .getResourceId())\n+                                                , new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NDEwMjE1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#pullrequestreview-405410215", "createdAt": "2020-05-04T23:14:58Z", "commit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzoxNDo1OFrOGQVgJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzoxNDo1OFrOGQVgJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MjY5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static ThroughputProperties createAutoScaledThroughput(int autoScaleMaxThroughput) {\n          \n          \n            \n                public static ThroughputProperties createAutoscaledThroughput(int autoscaleMaxThroughput) {", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419782692", "createdAt": "2020-05-04T23:14:58Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createManualThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createManualOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param autoScaleMaxThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    static ThroughputProperties createAutoScaledThroughput(\n+        int autoScaleMaxThroughput,\n+        int autoUpgradethroughputIncrementPercentage) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(autoScaleMaxThroughput,\n+                                                                   autoUpgradethroughputIncrementPercentage));\n+    }\n+\n+    /**\n+     * Create auto scaled provisioned throughput throughput properties.\n+     *\n+     * @param autoScaleMaxThroughput the max auto scale throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledThroughput(int autoScaleMaxThroughput) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "571c9df9a6ab1613ea61311ad80be39fe41ff8ec", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/571c9df9a6ab1613ea61311ad80be39fe41ff8ec", "committedDate": "2020-05-06T00:54:54Z", "message": "Autoscale/Autopilot support\n- Added ThroughputProperties class which contains factories for creating autoscaled or fixed throughput\n- Added ThroughputResponse class to fetch relevant details of offer response\n- Added overloads for database and container to create using throughput properties\n- Added read and replace overloads for database and container to read or replace throughput response"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c76f5bcce71d4282c02576af722d2d2197d70bf", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6c76f5bcce71d4282c02576af722d2d2197d70bf", "committedDate": "2020-05-06T00:54:54Z", "message": "Fixing spotbug issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2be9d9426979f3e2e8e5926077b6bcb4ded060de", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2be9d9426979f3e2e8e5926077b6bcb4ded060de", "committedDate": "2020-05-06T00:54:54Z", "message": "Adressing PR comments\nAdding additional tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf77a32aca2da6fa5d53553ebb42ec3647bc5aff", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bf77a32aca2da6fa5d53553ebb42ec3647bc5aff", "committedDate": "2020-05-06T00:54:54Z", "message": "Implementing PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "83b1f7c53e1fbae7ed6f4d04d8cc6fdb7c24b79c", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/83b1f7c53e1fbae7ed6f4d04d8cc6fdb7c24b79c", "committedDate": "2020-05-05T07:35:19Z", "message": "Implementing PR comments"}, "afterCommit": {"oid": "bf77a32aca2da6fa5d53553ebb42ec3647bc5aff", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bf77a32aca2da6fa5d53553ebb42ec3647bc5aff", "committedDate": "2020-05-06T00:54:54Z", "message": "Implementing PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7258a7e6d43871be75cde97f736bb00917de1608", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7258a7e6d43871be75cde97f736bb00917de1608", "committedDate": "2020-05-06T01:00:12Z", "message": "Rebasing master.\nChanging autopilot tests from emulator to simple"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9c999e2ed99614f9739b1f86105eaea8f18cfaa", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c9c999e2ed99614f9739b1f86105eaea8f18cfaa", "committedDate": "2020-05-07T21:38:15Z", "message": "Refactoring some implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "191d86f5c2fa3094c5024c985a63ef132913aa62", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/191d86f5c2fa3094c5024c985a63ef132913aa62", "committedDate": "2020-05-08T00:24:08Z", "message": "Moving throughput tests to a new test class."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTQ0ODE0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#pullrequestreview-408544814", "createdAt": "2020-05-08T21:42:42Z", "commit": {"oid": "191d86f5c2fa3094c5024c985a63ef132913aa62"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMTo0Mjo0MlrOGS0nTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMTo0Mjo0MlrOGS0nTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM4OTU4Mw==", "bodyText": "Will it ship out?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r422389583", "createdAt": "2020-05-08T21:42:42Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/samples/java/com/azure/cosmos/ThroughputPropertiesCodeSnippet.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.models.ThroughputProperties;\n+\n+public class ThroughputPropertiesCodeSnippet {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191d86f5c2fa3094c5024c985a63ef132913aa62"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTUxNTM2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#pullrequestreview-408551536", "createdAt": "2020-05-08T21:59:09Z", "commit": {"oid": "191d86f5c2fa3094c5024c985a63ef132913aa62"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4504, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}