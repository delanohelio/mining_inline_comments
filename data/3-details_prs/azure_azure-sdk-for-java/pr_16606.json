{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3MTEyMTM4", "number": 16606, "title": "Adds support for AutoComplete. Test clean up", "bodyText": "Adds support for autocomplete\nCleans up test classes\n\nRemoves unused parameters\nRemoves single use or unused methods.\n\n\n\nRelated to: #16089", "createdAt": "2020-10-20T21:38:51Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16606", "merged": true, "mergeCommit": {"oid": "5ffd2b2fdaa497ef598aa5871e1af08fe8ddee72"}, "closed": true, "closedAt": "2020-10-27T06:36:54Z", "author": {"login": "conniey"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdTMd_ggH2gAyNTA3MTEyMTM4OmJlYWIwNDkyZTI2ZTk0MDg0YWZlMWQ1YzVjYjQ2ZmY5YWE1ZmMxZTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWiyyggH2gAyNTA3MTEyMTM4OjFlY2NmZmY5MWRkZmQzOThlM2JlNDQxZjk3YmM4NmRhMGM3MzlmOWU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "beab0492e26e94084afe1d5c5cb46ff9aa5fc1e9", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/beab0492e26e94084afe1d5c5cb46ff9aa5fc1e9", "committedDate": "2020-10-16T20:33:25Z", "message": "Adding enableAutoComplete to ReceiverOptions and ServiceBusClientBuilder."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9054c380b1e999496f73fb11268cb47b6c2ad2c2", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9054c380b1e999496f73fb11268cb47b6c2ad2c2", "committedDate": "2020-10-16T20:33:26Z", "message": "Adding FluxAutoComplete."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9ae3f20be1605347fddd3c4af552a98fe868c36", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a9ae3f20be1605347fddd3c4af552a98fe868c36", "committedDate": "2020-10-16T21:27:33Z", "message": "FluxAutoCompleteTest."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43e9f22c01ca1028519cd4af6aa356d1706554cb", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/43e9f22c01ca1028519cd4af6aa356d1706554cb", "committedDate": "2020-10-19T19:15:00Z", "message": "Propagating current context."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5b012fb068e0caa2931086a1b5129cc14da2bd5", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f5b012fb068e0caa2931086a1b5129cc14da2bd5", "committedDate": "2020-10-19T23:24:06Z", "message": "Updating to use ServiceBusReceivedMessageContext."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e18a3be0c7b3080e31f5dece1ef4211f913d125", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3e18a3be0c7b3080e31f5dece1ef4211f913d125", "committedDate": "2020-10-20T00:05:59Z", "message": "Cleaning up test issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5464d809852b9c53a0f1a024260aaedffbb5f7bc", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5464d809852b9c53a0f1a024260aaedffbb5f7bc", "committedDate": "2020-10-20T00:24:26Z", "message": "Fix test issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d968738de4541c0e13c114fb063c5b44c73be83", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3d968738de4541c0e13c114fb063c5b44c73be83", "committedDate": "2020-10-20T17:18:24Z", "message": "Cleaning up test methods."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4642c29dfb2f66924dbecdb826e5ef7dbf4091b9", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4642c29dfb2f66924dbecdb826e5ef7dbf4091b9", "committedDate": "2020-10-20T21:36:53Z", "message": "Adding integration tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c82e2c5f97deab271b4a51124086feb442f911cc", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c82e2c5f97deab271b4a51124086feb442f911cc", "committedDate": "2020-10-20T22:15:55Z", "message": "Do not enable autocomplete by default on synchronous clients."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d46429425b01ca20a8df95ba9b0c591756abf44c", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d46429425b01ca20a8df95ba9b0c591756abf44c", "committedDate": "2020-10-20T22:42:39Z", "message": "Adding test for receive and delete."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMjA2ODk4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16606#pullrequestreview-513206898", "createdAt": "2020-10-20T23:31:11Z", "commit": {"oid": "c82e2c5f97deab271b4a51124086feb442f911cc"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMzozMToxMlrOHlUwdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMzo0MzoyM1rOHlU_Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg5OTQ0Nw==", "bodyText": "This should be true by default. That was my understanding .", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16606#discussion_r508899447", "createdAt": "2020-10-20T23:31:12Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -816,6 +831,7 @@ private boolean isRollingSessionReceiver() {\n      */\n     @ServiceClientBuilder(serviceClients = {ServiceBusReceiverClient.class, ServiceBusReceiverAsyncClient.class})\n     public final class ServiceBusReceiverClientBuilder {\n+        private boolean enableAutoComplete = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82e2c5f97deab271b4a51124086feb442f911cc"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg5OTgxOA==", "bodyText": "should we say disableAutoComplete because by default it it enable ? And do we need a boolean as args, it is already enabled and user can disable it.\ndisableAutoComplete() ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16606#discussion_r508899818", "createdAt": "2020-10-20T23:32:26Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -826,6 +842,21 @@ private boolean isRollingSessionReceiver() {\n         private ServiceBusReceiverClientBuilder() {\n         }\n \n+        /**\n+         * Enables auto-complete and auto-abandon of received messages. By default, a successfully processed message is\n+         * {@link ServiceBusReceiverAsyncClient#complete(ServiceBusReceivedMessage) completed}. If an error happens when\n+         * the message is processed, it is\n+         * {@link ServiceBusReceiverAsyncClient#abandon(ServiceBusReceivedMessage) abandoned}.\n+         *\n+         * @param enableAutoComplete True to enable auto-complete and false otherwise.\n+         *\n+         * @return The modified {@link ServiceBusReceiverClientBuilder} object.\n+         */\n+        public ServiceBusReceiverClientBuilder enableAutoComplete(boolean enableAutoComplete) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82e2c5f97deab271b4a51124086feb442f911cc"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwMjUwOA==", "bodyText": "This validateAndThrow(prefetch) , in other PR we were validating earlier when user is setting prefetch . Should't this go there.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16606#discussion_r508902508", "createdAt": "2020-10-20T23:40:55Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -948,7 +968,26 @@ public ServiceBusReceiverAsyncClient buildAsyncClient() {\n          *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n          */\n         public ServiceBusReceiverClient buildClient() {\n-            return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n+            return new ServiceBusReceiverClient(buildAsyncClient(false), retryOptions.getTryTimeout());\n+        }\n+\n+        ServiceBusReceiverAsyncClient buildAsyncClient(boolean isAutoCompleteAllowed) {\n+            final MessagingEntityType entityType = validateEntityPaths(logger, connectionStringEntityName, topicName,\n+                queueName);\n+            final String entityPath = getEntityPath(logger, entityType, queueName, topicName, subscriptionName,\n+                subQueue);\n+            validateAndThrow(prefetchCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82e2c5f97deab271b4a51124086feb442f911cc"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwMjkwMg==", "bodyText": "I thought that we are also doing this for sync clients ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16606#discussion_r508902902", "createdAt": "2020-10-20T23:42:06Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -948,7 +968,26 @@ public ServiceBusReceiverAsyncClient buildAsyncClient() {\n          *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n          */\n         public ServiceBusReceiverClient buildClient() {\n-            return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n+            return new ServiceBusReceiverClient(buildAsyncClient(false), retryOptions.getTryTimeout());\n+        }\n+\n+        ServiceBusReceiverAsyncClient buildAsyncClient(boolean isAutoCompleteAllowed) {\n+            final MessagingEntityType entityType = validateEntityPaths(logger, connectionStringEntityName, topicName,\n+                queueName);\n+            final String entityPath = getEntityPath(logger, entityType, queueName, topicName, subscriptionName,\n+                subQueue);\n+            validateAndThrow(prefetchCount);\n+\n+            if (!isAutoCompleteAllowed && enableAutoComplete) {\n+                throw new IllegalStateException(\"'enableAutoComplete' is not support in synchronous client.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82e2c5f97deab271b4a51124086feb442f911cc"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwMzI3MQ==", "bodyText": "should this be info , since we are taking care of this for user, It should not create some kind of alarm for them.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16606#discussion_r508903271", "createdAt": "2020-10-20T23:43:23Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/FluxAutoComplete.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import org.reactivestreams.Subscription;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.publisher.BaseSubscriber;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.FluxOperator;\n+import reactor.core.publisher.Mono;\n+import reactor.util.context.Context;\n+\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * Flux operator that auto-completes or auto-abandons messages when control is returned successfully.\n+ */\n+class FluxAutoComplete<T extends ServiceBusReceivedMessageContext> extends FluxOperator<T, T> {\n+    private final Function<ServiceBusReceivedMessageContext, Mono<Void>> onComplete;\n+    private final Function<ServiceBusReceivedMessageContext, Mono<Void>> onAbandon;\n+    private final ClientLogger logger = new ClientLogger(FluxAutoComplete.class);\n+\n+    FluxAutoComplete(Flux<? extends T> upstream, Function<ServiceBusReceivedMessageContext, Mono<Void>> onComplete,\n+        Function<ServiceBusReceivedMessageContext, Mono<Void>> onAbandon) {\n+        super(upstream);\n+        this.onComplete = Objects.requireNonNull(onComplete, \"'onComplete' cannot be null.\");\n+        this.onAbandon = Objects.requireNonNull(onAbandon, \"'onAbandon' cannot be null.\");\n+    }\n+\n+    /**\n+     * Invoked when a downstream subscriber is interested in objects published from this operator.\n+     *\n+     * @param coreSubscriber The subscriber interested in the published items.\n+     */\n+    @Override\n+    public void subscribe(CoreSubscriber<? super T> coreSubscriber) {\n+        Objects.requireNonNull(coreSubscriber, \"'coreSubscriber' cannot be null.\");\n+\n+        final AutoCompleteSubscriber<T> subscriber =\n+            new AutoCompleteSubscriber<T>(coreSubscriber, onComplete, onAbandon, logger);\n+\n+        source.subscribe(subscriber);\n+    }\n+\n+    static final class AutoCompleteSubscriber<T extends ServiceBusReceivedMessageContext> extends BaseSubscriber<T> {\n+        private final CoreSubscriber<? super T> downstream;\n+        private final Function<ServiceBusReceivedMessageContext, Mono<Void>> onComplete;\n+        private final Function<ServiceBusReceivedMessageContext, Mono<Void>> onAbandon;\n+        private final ClientLogger logger;\n+\n+        AutoCompleteSubscriber(CoreSubscriber<? super T> downstream,\n+            Function<ServiceBusReceivedMessageContext, Mono<Void>> onComplete,\n+            Function<ServiceBusReceivedMessageContext, Mono<Void>> onAbandon, ClientLogger logger) {\n+            this.downstream = downstream;\n+            this.onComplete = onComplete;\n+            this.onAbandon = onAbandon;\n+            this.logger = logger;\n+        }\n+\n+        @Override\n+        protected void hookOnSubscribe(Subscription subscription) {\n+            logger.info(\"Subscription received. Subscribing downstream. {}\", subscription);\n+            downstream.onSubscribe(this);\n+            requestUnbounded();\n+        }\n+\n+        @Override\n+        protected void hookOnNext(T value) {\n+            final ServiceBusReceivedMessage message = value.getMessage();\n+            final String sequenceNumber = message != null ? String.valueOf(message.getSequenceNumber()) : \"n/a\";\n+\n+            logger.verbose(\"Passing message downstream. sequenceNumber[{}]\", sequenceNumber);\n+\n+            try {\n+                downstream.onNext(value);\n+                applyWithCatch(onComplete, value, \"complete\");\n+            } catch (Exception e) {\n+                logger.error(\"Error occurred processing message. Abandoning. sequenceNumber[{}]\",\n+                    sequenceNumber, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d46429425b01ca20a8df95ba9b0c591756abf44c"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78bedcbec5152e642f70aa4661ebc3b15c85eddc", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/78bedcbec5152e642f70aa4661ebc3b15c85eddc", "committedDate": "2020-10-21T03:08:37Z", "message": "Swapping disable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45bf11a550e505d17f5c5bf009b7b0688cbfa972", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/45bf11a550e505d17f5c5bf009b7b0688cbfa972", "committedDate": "2020-10-21T23:59:20Z", "message": "Adding test and documentation."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0Mzg2ODA1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16606#pullrequestreview-514386805", "createdAt": "2020-10-22T06:11:40Z", "commit": {"oid": "45bf11a550e505d17f5c5bf009b7b0688cbfa972"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNjoxMTo0MVrOHmR9og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNjozMzoyMFrOHmSflg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkwMjI0Mg==", "bodyText": "Why do we need a generic type that extends ServiceBusReceivedMessageContext? Also, this reminds me that ServiceBusReceivedMessageContext should be marked final too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16606#discussion_r509902242", "createdAt": "2020-10-22T06:11:41Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/FluxAutoComplete.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import org.reactivestreams.Subscription;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.publisher.BaseSubscriber;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.FluxOperator;\n+import reactor.core.publisher.Mono;\n+import reactor.util.context.Context;\n+\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * Flux operator that auto-completes or auto-abandons messages when control is returned successfully.\n+ */\n+class FluxAutoComplete<T extends ServiceBusReceivedMessageContext> extends FluxOperator<T, T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45bf11a550e505d17f5c5bf009b7b0688cbfa972"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkwNDQyOA==", "bodyText": "Why do we call  requestUnbounded()? The downstream should control the flow.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16606#discussion_r509904428", "createdAt": "2020-10-22T06:17:20Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/FluxAutoComplete.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import org.reactivestreams.Subscription;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.publisher.BaseSubscriber;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.FluxOperator;\n+import reactor.core.publisher.Mono;\n+import reactor.util.context.Context;\n+\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * Flux operator that auto-completes or auto-abandons messages when control is returned successfully.\n+ */\n+class FluxAutoComplete<T extends ServiceBusReceivedMessageContext> extends FluxOperator<T, T> {\n+    private final Function<ServiceBusReceivedMessageContext, Mono<Void>> onComplete;\n+    private final Function<ServiceBusReceivedMessageContext, Mono<Void>> onAbandon;\n+    private final ClientLogger logger = new ClientLogger(FluxAutoComplete.class);\n+\n+    FluxAutoComplete(Flux<? extends T> upstream, Function<ServiceBusReceivedMessageContext, Mono<Void>> onComplete,\n+        Function<ServiceBusReceivedMessageContext, Mono<Void>> onAbandon) {\n+        super(upstream);\n+        this.onComplete = Objects.requireNonNull(onComplete, \"'onComplete' cannot be null.\");\n+        this.onAbandon = Objects.requireNonNull(onAbandon, \"'onAbandon' cannot be null.\");\n+    }\n+\n+    /**\n+     * Invoked when a downstream subscriber is interested in objects published from this operator.\n+     *\n+     * @param coreSubscriber The subscriber interested in the published items.\n+     */\n+    @Override\n+    public void subscribe(CoreSubscriber<? super T> coreSubscriber) {\n+        Objects.requireNonNull(coreSubscriber, \"'coreSubscriber' cannot be null.\");\n+\n+        final AutoCompleteSubscriber<T> subscriber =\n+            new AutoCompleteSubscriber<T>(coreSubscriber, onComplete, onAbandon, logger);\n+\n+        source.subscribe(subscriber);\n+    }\n+\n+    static final class AutoCompleteSubscriber<T extends ServiceBusReceivedMessageContext> extends BaseSubscriber<T> {\n+        private final CoreSubscriber<? super T> downstream;\n+        private final Function<ServiceBusReceivedMessageContext, Mono<Void>> onComplete;\n+        private final Function<ServiceBusReceivedMessageContext, Mono<Void>> onAbandon;\n+        private final ClientLogger logger;\n+\n+        AutoCompleteSubscriber(CoreSubscriber<? super T> downstream,\n+            Function<ServiceBusReceivedMessageContext, Mono<Void>> onComplete,\n+            Function<ServiceBusReceivedMessageContext, Mono<Void>> onAbandon, ClientLogger logger) {\n+            this.downstream = downstream;\n+            this.onComplete = onComplete;\n+            this.onAbandon = onAbandon;\n+            this.logger = logger;\n+        }\n+\n+        @Override\n+        protected void hookOnSubscribe(Subscription subscription) {\n+            logger.info(\"Subscription received. Subscribing downstream. {}\", subscription);\n+            downstream.onSubscribe(this);\n+            requestUnbounded();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45bf11a550e505d17f5c5bf009b7b0688cbfa972"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkwNjQ4NQ==", "bodyText": "This doesn't have to be called if the message is null. Same for abandon too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16606#discussion_r509906485", "createdAt": "2020-10-22T06:22:35Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/FluxAutoComplete.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import org.reactivestreams.Subscription;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.publisher.BaseSubscriber;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.FluxOperator;\n+import reactor.core.publisher.Mono;\n+import reactor.util.context.Context;\n+\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * Flux operator that auto-completes or auto-abandons messages when control is returned successfully.\n+ */\n+class FluxAutoComplete<T extends ServiceBusReceivedMessageContext> extends FluxOperator<T, T> {\n+    private final Function<ServiceBusReceivedMessageContext, Mono<Void>> onComplete;\n+    private final Function<ServiceBusReceivedMessageContext, Mono<Void>> onAbandon;\n+    private final ClientLogger logger = new ClientLogger(FluxAutoComplete.class);\n+\n+    FluxAutoComplete(Flux<? extends T> upstream, Function<ServiceBusReceivedMessageContext, Mono<Void>> onComplete,\n+        Function<ServiceBusReceivedMessageContext, Mono<Void>> onAbandon) {\n+        super(upstream);\n+        this.onComplete = Objects.requireNonNull(onComplete, \"'onComplete' cannot be null.\");\n+        this.onAbandon = Objects.requireNonNull(onAbandon, \"'onAbandon' cannot be null.\");\n+    }\n+\n+    /**\n+     * Invoked when a downstream subscriber is interested in objects published from this operator.\n+     *\n+     * @param coreSubscriber The subscriber interested in the published items.\n+     */\n+    @Override\n+    public void subscribe(CoreSubscriber<? super T> coreSubscriber) {\n+        Objects.requireNonNull(coreSubscriber, \"'coreSubscriber' cannot be null.\");\n+\n+        final AutoCompleteSubscriber<T> subscriber =\n+            new AutoCompleteSubscriber<T>(coreSubscriber, onComplete, onAbandon, logger);\n+\n+        source.subscribe(subscriber);\n+    }\n+\n+    static final class AutoCompleteSubscriber<T extends ServiceBusReceivedMessageContext> extends BaseSubscriber<T> {\n+        private final CoreSubscriber<? super T> downstream;\n+        private final Function<ServiceBusReceivedMessageContext, Mono<Void>> onComplete;\n+        private final Function<ServiceBusReceivedMessageContext, Mono<Void>> onAbandon;\n+        private final ClientLogger logger;\n+\n+        AutoCompleteSubscriber(CoreSubscriber<? super T> downstream,\n+            Function<ServiceBusReceivedMessageContext, Mono<Void>> onComplete,\n+            Function<ServiceBusReceivedMessageContext, Mono<Void>> onAbandon, ClientLogger logger) {\n+            this.downstream = downstream;\n+            this.onComplete = onComplete;\n+            this.onAbandon = onAbandon;\n+            this.logger = logger;\n+        }\n+\n+        @Override\n+        protected void hookOnSubscribe(Subscription subscription) {\n+            logger.info(\"Subscription received. Subscribing downstream. {}\", subscription);\n+            downstream.onSubscribe(this);\n+            requestUnbounded();\n+        }\n+\n+        @Override\n+        protected void hookOnNext(T value) {\n+            final ServiceBusReceivedMessage message = value.getMessage();\n+            final String sequenceNumber = message != null ? String.valueOf(message.getSequenceNumber()) : \"n/a\";\n+\n+            logger.verbose(\"Passing message downstream. sequenceNumber[{}]\", sequenceNumber);\n+\n+            try {\n+                downstream.onNext(value);\n+                applyWithCatch(onComplete, value, \"complete\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45bf11a550e505d17f5c5bf009b7b0688cbfa972"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkwODQ4OQ==", "bodyText": "Don't think we should call onError() here if the operation was to abandon. This will terminate the downstream. What is the expected behavior when a message cannot be completed successfully?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16606#discussion_r509908489", "createdAt": "2020-10-22T06:27:24Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/FluxAutoComplete.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import org.reactivestreams.Subscription;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.publisher.BaseSubscriber;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.FluxOperator;\n+import reactor.core.publisher.Mono;\n+import reactor.util.context.Context;\n+\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * Flux operator that auto-completes or auto-abandons messages when control is returned successfully.\n+ */\n+class FluxAutoComplete<T extends ServiceBusReceivedMessageContext> extends FluxOperator<T, T> {\n+    private final Function<ServiceBusReceivedMessageContext, Mono<Void>> onComplete;\n+    private final Function<ServiceBusReceivedMessageContext, Mono<Void>> onAbandon;\n+    private final ClientLogger logger = new ClientLogger(FluxAutoComplete.class);\n+\n+    FluxAutoComplete(Flux<? extends T> upstream, Function<ServiceBusReceivedMessageContext, Mono<Void>> onComplete,\n+        Function<ServiceBusReceivedMessageContext, Mono<Void>> onAbandon) {\n+        super(upstream);\n+        this.onComplete = Objects.requireNonNull(onComplete, \"'onComplete' cannot be null.\");\n+        this.onAbandon = Objects.requireNonNull(onAbandon, \"'onAbandon' cannot be null.\");\n+    }\n+\n+    /**\n+     * Invoked when a downstream subscriber is interested in objects published from this operator.\n+     *\n+     * @param coreSubscriber The subscriber interested in the published items.\n+     */\n+    @Override\n+    public void subscribe(CoreSubscriber<? super T> coreSubscriber) {\n+        Objects.requireNonNull(coreSubscriber, \"'coreSubscriber' cannot be null.\");\n+\n+        final AutoCompleteSubscriber<T> subscriber =\n+            new AutoCompleteSubscriber<T>(coreSubscriber, onComplete, onAbandon, logger);\n+\n+        source.subscribe(subscriber);\n+    }\n+\n+    static final class AutoCompleteSubscriber<T extends ServiceBusReceivedMessageContext> extends BaseSubscriber<T> {\n+        private final CoreSubscriber<? super T> downstream;\n+        private final Function<ServiceBusReceivedMessageContext, Mono<Void>> onComplete;\n+        private final Function<ServiceBusReceivedMessageContext, Mono<Void>> onAbandon;\n+        private final ClientLogger logger;\n+\n+        AutoCompleteSubscriber(CoreSubscriber<? super T> downstream,\n+            Function<ServiceBusReceivedMessageContext, Mono<Void>> onComplete,\n+            Function<ServiceBusReceivedMessageContext, Mono<Void>> onAbandon, ClientLogger logger) {\n+            this.downstream = downstream;\n+            this.onComplete = onComplete;\n+            this.onAbandon = onAbandon;\n+            this.logger = logger;\n+        }\n+\n+        @Override\n+        protected void hookOnSubscribe(Subscription subscription) {\n+            logger.info(\"Subscription received. Subscribing downstream. {}\", subscription);\n+            downstream.onSubscribe(this);\n+            requestUnbounded();\n+        }\n+\n+        @Override\n+        protected void hookOnNext(T value) {\n+            final ServiceBusReceivedMessage message = value.getMessage();\n+            final String sequenceNumber = message != null ? String.valueOf(message.getSequenceNumber()) : \"n/a\";\n+\n+            logger.verbose(\"Passing message downstream. sequenceNumber[{}]\", sequenceNumber);\n+\n+            try {\n+                downstream.onNext(value);\n+                applyWithCatch(onComplete, value, \"complete\");\n+            } catch (Exception e) {\n+                logger.error(\"Error occurred processing message. Abandoning. sequenceNumber[{}]\",\n+                    sequenceNumber, e);\n+\n+                applyWithCatch(onAbandon, value, \"abandon\");\n+            }\n+        }\n+\n+        /**\n+         * On an error, will pass the exception downstream.\n+         *\n+         * @param throwable Error to pass downstream.\n+         */\n+        @Override\n+        protected void hookOnError(Throwable throwable) {\n+            logger.error(\"Error occurred. Passing downstream.\", throwable);\n+            downstream.onError(throwable);\n+        }\n+\n+        /**\n+         * On the completion. Will pass the complete signal downstream.\n+         */\n+        @Override\n+        protected void hookOnComplete() {\n+            logger.info(\"Completed. Passing downstream.\");\n+            downstream.onComplete();\n+        }\n+\n+        @Override\n+        public Context currentContext() {\n+            return downstream.currentContext();\n+        }\n+\n+        /**\n+         * Applies a function and catches then logs and closes any exceptions.\n+         *\n+         * @param function Function to apply.\n+         * @param message received message to apply function to.\n+         * @param operation The operation name.\n+         */\n+        private void applyWithCatch(Function<ServiceBusReceivedMessageContext, Mono<Void>> function, T message,\n+            String operation) {\n+            try {\n+                function.apply(message).block();\n+            } catch (Exception e) {\n+                logger.warning(\"Unable to '{}' message.\", operation, e);\n+                onError(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45bf11a550e505d17f5c5bf009b7b0688cbfa972"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkxMDM2Mg==", "bodyText": "For the processor, autocomplete should still be possible right? So, the async client has to be built with autocomplete enabled by default.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16606#discussion_r509910362", "createdAt": "2020-10-22T06:31:55Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -744,16 +759,46 @@ public ServiceBusSessionReceiverClientBuilder topicName(String topicName) {\n          *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n          */\n         public ServiceBusReceiverAsyncClient buildAsyncClient() {\n+            return buildAsyncClient(true);\n+        }\n+\n+        /**\n+         * Creates a <b>synchronous</b>, <b>session-aware</b> Service Bus receiver responsible for reading {@link\n+         * ServiceBusMessage messages} from a specific queue or topic.\n+         *\n+         * @return An new {@link ServiceBusReceiverClient} that receives messages from a queue or topic.\n+         * @throws IllegalStateException if {@link #queueName(String) queueName} or {@link #topicName(String)\n+         *     topicName} are not set or, both of these fields are set. It is also thrown if the Service Bus {@link\n+         *     #connectionString(String) connectionString} contains an {@code EntityPath} that does not match one set in\n+         *     {@link #queueName(String) queueName} or {@link #topicName(String) topicName}. Lastly, if a {@link\n+         *     #topicName(String) topicName} is set, but {@link #subscriptionName(String) subscriptionName} is not.\n+         * @throws IllegalArgumentException Queue or topic name are not set via {@link #queueName(String)\n+         *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n+         */\n+        public ServiceBusReceiverClient buildClient() {\n+            return new ServiceBusReceiverClient(buildAsyncClient(false), retryOptions.getTryTimeout());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45bf11a550e505d17f5c5bf009b7b0688cbfa972"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkxMDkzNA==", "bodyText": "Same as above. Async client should be built with autocomplete enabled for the processor. We may have to find a different way to disable it on the receive() method on the sync client.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16606#discussion_r509910934", "createdAt": "2020-10-22T06:33:20Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -948,7 +981,31 @@ public ServiceBusReceiverAsyncClient buildAsyncClient() {\n          *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n          */\n         public ServiceBusReceiverClient buildClient() {\n-            return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n+            return new ServiceBusReceiverClient(buildAsyncClient(false), retryOptions.getTryTimeout());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45bf11a550e505d17f5c5bf009b7b0688cbfa972"}, "originalPosition": 258}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0NDE0OTE4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16606#pullrequestreview-514414918", "createdAt": "2020-10-22T07:02:27Z", "commit": {"oid": "45bf11a550e505d17f5c5bf009b7b0688cbfa972"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNzowMjoyN1rOHmTT-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNzoyMjo0MlrOHmT8tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkyNDM0NA==", "bodyText": "verbose ? since it does not help in regular scenario.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16606#discussion_r509924344", "createdAt": "2020-10-22T07:02:27Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/FluxAutoComplete.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import org.reactivestreams.Subscription;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.publisher.BaseSubscriber;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.FluxOperator;\n+import reactor.core.publisher.Mono;\n+import reactor.util.context.Context;\n+\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * Flux operator that auto-completes or auto-abandons messages when control is returned successfully.\n+ */\n+class FluxAutoComplete<T extends ServiceBusReceivedMessageContext> extends FluxOperator<T, T> {\n+    private final Function<ServiceBusReceivedMessageContext, Mono<Void>> onComplete;\n+    private final Function<ServiceBusReceivedMessageContext, Mono<Void>> onAbandon;\n+    private final ClientLogger logger = new ClientLogger(FluxAutoComplete.class);\n+\n+    FluxAutoComplete(Flux<? extends T> upstream, Function<ServiceBusReceivedMessageContext, Mono<Void>> onComplete,\n+        Function<ServiceBusReceivedMessageContext, Mono<Void>> onAbandon) {\n+        super(upstream);\n+        this.onComplete = Objects.requireNonNull(onComplete, \"'onComplete' cannot be null.\");\n+        this.onAbandon = Objects.requireNonNull(onAbandon, \"'onAbandon' cannot be null.\");\n+    }\n+\n+    /**\n+     * Invoked when a downstream subscriber is interested in objects published from this operator.\n+     *\n+     * @param coreSubscriber The subscriber interested in the published items.\n+     */\n+    @Override\n+    public void subscribe(CoreSubscriber<? super T> coreSubscriber) {\n+        Objects.requireNonNull(coreSubscriber, \"'coreSubscriber' cannot be null.\");\n+\n+        final AutoCompleteSubscriber<T> subscriber =\n+            new AutoCompleteSubscriber<T>(coreSubscriber, onComplete, onAbandon, logger);\n+\n+        source.subscribe(subscriber);\n+    }\n+\n+    static final class AutoCompleteSubscriber<T extends ServiceBusReceivedMessageContext> extends BaseSubscriber<T> {\n+        private final CoreSubscriber<? super T> downstream;\n+        private final Function<ServiceBusReceivedMessageContext, Mono<Void>> onComplete;\n+        private final Function<ServiceBusReceivedMessageContext, Mono<Void>> onAbandon;\n+        private final ClientLogger logger;\n+\n+        AutoCompleteSubscriber(CoreSubscriber<? super T> downstream,\n+            Function<ServiceBusReceivedMessageContext, Mono<Void>> onComplete,\n+            Function<ServiceBusReceivedMessageContext, Mono<Void>> onAbandon, ClientLogger logger) {\n+            this.downstream = downstream;\n+            this.onComplete = onComplete;\n+            this.onAbandon = onAbandon;\n+            this.logger = logger;\n+        }\n+\n+        @Override\n+        protected void hookOnSubscribe(Subscription subscription) {\n+            logger.info(\"Subscription received. Subscribing downstream. {}\", subscription);\n+            downstream.onSubscribe(this);\n+            requestUnbounded();\n+        }\n+\n+        @Override\n+        protected void hookOnNext(T value) {\n+            final ServiceBusReceivedMessage message = value.getMessage();\n+            final String sequenceNumber = message != null ? String.valueOf(message.getSequenceNumber()) : \"n/a\";\n+\n+            logger.verbose(\"Passing message downstream. sequenceNumber[{}]\", sequenceNumber);\n+\n+            try {\n+                downstream.onNext(value);\n+                applyWithCatch(onComplete, value, \"complete\");\n+            } catch (Exception e) {\n+                logger.error(\"Error occurred processing message. Abandoning. sequenceNumber[{}]\",\n+                    sequenceNumber, e);\n+\n+                applyWithCatch(onAbandon, value, \"abandon\");\n+            }\n+        }\n+\n+        /**\n+         * On an error, will pass the exception downstream.\n+         *\n+         * @param throwable Error to pass downstream.\n+         */\n+        @Override\n+        protected void hookOnError(Throwable throwable) {\n+            logger.error(\"Error occurred. Passing downstream.\", throwable);\n+            downstream.onError(throwable);\n+        }\n+\n+        /**\n+         * On the completion. Will pass the complete signal downstream.\n+         */\n+        @Override\n+        protected void hookOnComplete() {\n+            logger.info(\"Completed. Passing downstream.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45bf11a550e505d17f5c5bf009b7b0688cbfa972"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkyNzg5OA==", "bodyText": "If complete fails , there is chance that message will be processed twice because it will go back to queue.\nFor now, we should log and continue ?\nBut as part of for-ever loop, this should me delivered to user in their error handler with indication that we fail to complete.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16606#discussion_r509927898", "createdAt": "2020-10-22T07:09:59Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/FluxAutoComplete.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import org.reactivestreams.Subscription;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.publisher.BaseSubscriber;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.FluxOperator;\n+import reactor.core.publisher.Mono;\n+import reactor.util.context.Context;\n+\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * Flux operator that auto-completes or auto-abandons messages when control is returned successfully.\n+ */\n+class FluxAutoComplete<T extends ServiceBusReceivedMessageContext> extends FluxOperator<T, T> {\n+    private final Function<ServiceBusReceivedMessageContext, Mono<Void>> onComplete;\n+    private final Function<ServiceBusReceivedMessageContext, Mono<Void>> onAbandon;\n+    private final ClientLogger logger = new ClientLogger(FluxAutoComplete.class);\n+\n+    FluxAutoComplete(Flux<? extends T> upstream, Function<ServiceBusReceivedMessageContext, Mono<Void>> onComplete,\n+        Function<ServiceBusReceivedMessageContext, Mono<Void>> onAbandon) {\n+        super(upstream);\n+        this.onComplete = Objects.requireNonNull(onComplete, \"'onComplete' cannot be null.\");\n+        this.onAbandon = Objects.requireNonNull(onAbandon, \"'onAbandon' cannot be null.\");\n+    }\n+\n+    /**\n+     * Invoked when a downstream subscriber is interested in objects published from this operator.\n+     *\n+     * @param coreSubscriber The subscriber interested in the published items.\n+     */\n+    @Override\n+    public void subscribe(CoreSubscriber<? super T> coreSubscriber) {\n+        Objects.requireNonNull(coreSubscriber, \"'coreSubscriber' cannot be null.\");\n+\n+        final AutoCompleteSubscriber<T> subscriber =\n+            new AutoCompleteSubscriber<T>(coreSubscriber, onComplete, onAbandon, logger);\n+\n+        source.subscribe(subscriber);\n+    }\n+\n+    static final class AutoCompleteSubscriber<T extends ServiceBusReceivedMessageContext> extends BaseSubscriber<T> {\n+        private final CoreSubscriber<? super T> downstream;\n+        private final Function<ServiceBusReceivedMessageContext, Mono<Void>> onComplete;\n+        private final Function<ServiceBusReceivedMessageContext, Mono<Void>> onAbandon;\n+        private final ClientLogger logger;\n+\n+        AutoCompleteSubscriber(CoreSubscriber<? super T> downstream,\n+            Function<ServiceBusReceivedMessageContext, Mono<Void>> onComplete,\n+            Function<ServiceBusReceivedMessageContext, Mono<Void>> onAbandon, ClientLogger logger) {\n+            this.downstream = downstream;\n+            this.onComplete = onComplete;\n+            this.onAbandon = onAbandon;\n+            this.logger = logger;\n+        }\n+\n+        @Override\n+        protected void hookOnSubscribe(Subscription subscription) {\n+            logger.info(\"Subscription received. Subscribing downstream. {}\", subscription);\n+            downstream.onSubscribe(this);\n+            requestUnbounded();\n+        }\n+\n+        @Override\n+        protected void hookOnNext(T value) {\n+            final ServiceBusReceivedMessage message = value.getMessage();\n+            final String sequenceNumber = message != null ? String.valueOf(message.getSequenceNumber()) : \"n/a\";\n+\n+            logger.verbose(\"Passing message downstream. sequenceNumber[{}]\", sequenceNumber);\n+\n+            try {\n+                downstream.onNext(value);\n+                applyWithCatch(onComplete, value, \"complete\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkwNjQ4NQ=="}, "originalCommit": {"oid": "45bf11a550e505d17f5c5bf009b7b0688cbfa972"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkzNDc3NA==", "bodyText": "Like we spoke above test for scenario where onComplete, onAbandon fails.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16606#discussion_r509934774", "createdAt": "2020-10-22T07:22:42Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/FluxAutoCompleteTest.java", "diffHunk": "@@ -0,0 +1,226 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.publisher.Mono;\n+import reactor.test.StepVerifier;\n+import reactor.test.publisher.TestPublisher;\n+\n+import java.time.Duration;\n+import java.util.function.Function;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Tests {@link FluxAutoComplete} for abandoning messages.\n+ */\n+class FluxAutoCompleteTest {\n+    @Mock", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45bf11a550e505d17f5c5bf009b7b0688cbfa972"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c219d70b0040d613652bd76ba69e03fa66fd545", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1c219d70b0040d613652bd76ba69e03fa66fd545", "committedDate": "2020-10-22T07:50:46Z", "message": "Fixing tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc8a173316179297643a86d796f2e4f24e5ba19b", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bc8a173316179297643a86d796f2e4f24e5ba19b", "committedDate": "2020-10-22T08:18:35Z", "message": "Make non-generic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b755f3f63c303d5cd5db46fd574c727375030b2", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6b755f3f63c303d5cd5db46fd574c727375030b2", "committedDate": "2020-10-22T08:18:59Z", "message": "Make final"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f77ec16f408e2c6201687d9fd876c1258452ec04", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f77ec16f408e2c6201687d9fd876c1258452ec04", "committedDate": "2020-10-22T08:30:08Z", "message": "Fixing checkstyles."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MDU5MjY0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16606#pullrequestreview-515059264", "createdAt": "2020-10-22T19:39:15Z", "commit": {"oid": "f77ec16f408e2c6201687d9fd876c1258452ec04"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ba8c143b302d1fb1fa53fb0d3353db71bb1f1b0", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5ba8c143b302d1fb1fa53fb0d3353db71bb1f1b0", "committedDate": "2020-10-23T19:30:55Z", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into auto-complete"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a295c7ae386e246cd93390c38faef74a6c69be67", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a295c7ae386e246cd93390c38faef74a6c69be67", "committedDate": "2020-10-23T19:38:50Z", "message": "Fixing build."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8559a228b15688cabcb92fb8e48f00ab383d941", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b8559a228b15688cabcb92fb8e48f00ab383d941", "committedDate": "2020-10-23T20:46:52Z", "message": "Fixing build breaks."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e14480d580efbef6f15ef0e31c988812268c04da", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e14480d580efbef6f15ef0e31c988812268c04da", "committedDate": "2020-10-23T20:56:10Z", "message": "Fix checkstule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ff5e615ab7cfe9ccdfac9fbe4277c7c07001f33", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7ff5e615ab7cfe9ccdfac9fbe4277c7c07001f33", "committedDate": "2020-10-27T02:33:11Z", "message": "Adding synchronisation for code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea0e5c18e55b5760b41a627d239c19ff692c2ff7", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ea0e5c18e55b5760b41a627d239c19ff692c2ff7", "committedDate": "2020-10-27T04:44:50Z", "message": "Fix spotbugs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2109be58569f0e779f3258fa1cf9e054d478b0d2", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2109be58569f0e779f3258fa1cf9e054d478b0d2", "committedDate": "2020-10-27T05:52:20Z", "message": "Adding integration test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8faeb41489c2d51d7c987903956363cbdd5ed183", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8faeb41489c2d51d7c987903956363cbdd5ed183", "committedDate": "2020-10-27T05:52:24Z", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into auto-complete"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1eccfff91ddfd398e3be441f97bc86da0c739f9e", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1eccfff91ddfd398e3be441f97bc86da0c739f9e", "committedDate": "2020-10-27T06:15:49Z", "message": "Fix JDK 9 usage."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1866, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}