{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1OTcyNzg1", "number": 9697, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNTozMTo0MlrODtKmIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNTo0OTo1M1rODtLIZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Njg2MTEyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNTozMTo0MlrOF-bnpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjo0MTozM1rOF-eqDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAwODU1MA==", "bodyText": "This should probably also clarify that this will be done for Async client only. And will not autorenew for sync client.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9697#discussion_r401008550", "createdAt": "2020-03-31T15:31:42Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -423,7 +504,9 @@ public ServiceBusReceiverClientBuilder isAutoComplete(boolean autoComplete) {\n         /**\n          * Sets if lock should be automatically renewed.\n          *\n-         * @param isLockAutoRenewed {@code true} if the lock should be automatically renewed; {@code false} otherwise.\n+         * @param isLockAutoRenewed {@code true} if the lock should be automatically renewed; {@code false}\n+         *     otherwise.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afcb7ba68c92a953560e1da0686ed29eb707237b"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA1ODMxOQ==", "bodyText": "Fixed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9697#discussion_r401058319", "createdAt": "2020-03-31T16:41:33Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -423,7 +504,9 @@ public ServiceBusReceiverClientBuilder isAutoComplete(boolean autoComplete) {\n         /**\n          * Sets if lock should be automatically renewed.\n          *\n-         * @param isLockAutoRenewed {@code true} if the lock should be automatically renewed; {@code false} otherwise.\n+         * @param isLockAutoRenewed {@code true} if the lock should be automatically renewed; {@code false}\n+         *     otherwise.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAwODU1MA=="}, "originalCommit": {"oid": "afcb7ba68c92a953560e1da0686ed29eb707237b"}, "originalPosition": 230}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NjkxNDQ3OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNTo0MjoyOFrOF-cI9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjo0NDowMFrOF-ewog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAxNzA3Nw==", "bodyText": "Line 660: IllegalArgumentException if the entity type is not a queue or a topic : You have already explained all the scenario above this. UNKNOWN , type is internal to us and if we can avoid using entity type , one less thing to learn for user .\nYou do throw this exception but this will only happen if user has not set both queue ,topic and connection string has entityName in it.\nOr it may say something like Queue or topic name are not set via queueNme() or topicName() respectively.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9697#discussion_r401017077", "createdAt": "2020-03-31T15:42:28Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -574,14 +644,20 @@ public ServiceBusReceiverAsyncClient buildAsyncClient() {\n \n             return new ServiceBusReceiverAsyncClient(connectionProcessor.getFullyQualifiedNamespace(), entityPath,\n                 entityType, false, receiveMessageOptions, connectionProcessor, tracerProvider,\n-                messageSerializer, messageLockContainer);\n+                messageSerializer, messageLockContainer, ServiceBusClientBuilder.this::onClientClose);\n         }\n \n         /**\n-         * Creates <b>synchronous</b> Service Bus receiver responsible for reading {@link ServiceBusMessage\n-         * messages} from a specific queue or topic.\n+         * Creates <b>synchronous</b> Service Bus receiver responsible for reading {@link ServiceBusMessage messages}\n+         * from a specific queue or topic.\n          *\n          * @return An new {@link ServiceBusReceiverClient} that receives messages from a queue or topic.\n+         * @throws IllegalStateException if {@link #queueName(String) queueName} or {@link #topicName(String)\n+         *     topicName} are not set or, both of these fields are set. It is also thrown if the Service Bus {@link\n+         *     #connectionString(String) connectionString} contains an {@code EntityPath} that does not match one set in\n+         *     {@link #queueName(String) queueName} or {@link #topicName(String) topicName}. Lastly, if a {@link\n+         *     #topicName(String) topicName} is set, but {@link #subscriptionName(String) subscriptionName} is not.\n+         * @throws IllegalArgumentException if the entity type is not a queue or a topic.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afcb7ba68c92a953560e1da0686ed29eb707237b"}, "originalPosition": 339}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA2MDAwMg==", "bodyText": "I added the IllegalArgumentException because checkstyles complained about missing javadocs for the exception.\nI updated the text.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9697#discussion_r401060002", "createdAt": "2020-03-31T16:44:00Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -574,14 +644,20 @@ public ServiceBusReceiverAsyncClient buildAsyncClient() {\n \n             return new ServiceBusReceiverAsyncClient(connectionProcessor.getFullyQualifiedNamespace(), entityPath,\n                 entityType, false, receiveMessageOptions, connectionProcessor, tracerProvider,\n-                messageSerializer, messageLockContainer);\n+                messageSerializer, messageLockContainer, ServiceBusClientBuilder.this::onClientClose);\n         }\n \n         /**\n-         * Creates <b>synchronous</b> Service Bus receiver responsible for reading {@link ServiceBusMessage\n-         * messages} from a specific queue or topic.\n+         * Creates <b>synchronous</b> Service Bus receiver responsible for reading {@link ServiceBusMessage messages}\n+         * from a specific queue or topic.\n          *\n          * @return An new {@link ServiceBusReceiverClient} that receives messages from a queue or topic.\n+         * @throws IllegalStateException if {@link #queueName(String) queueName} or {@link #topicName(String)\n+         *     topicName} are not set or, both of these fields are set. It is also thrown if the Service Bus {@link\n+         *     #connectionString(String) connectionString} contains an {@code EntityPath} that does not match one set in\n+         *     {@link #queueName(String) queueName} or {@link #topicName(String) topicName}. Lastly, if a {@link\n+         *     #topicName(String) topicName} is set, but {@link #subscriptionName(String) subscriptionName} is not.\n+         * @throws IllegalArgumentException if the entity type is not a queue or a topic.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAxNzA3Nw=="}, "originalCommit": {"oid": "afcb7ba68c92a953560e1da0686ed29eb707237b"}, "originalPosition": 339}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Njk0ODg3OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNTo0OTo1M1rOF-cfAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjo0NTo0N1rOF-e1DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAyMjcyMA==", "bodyText": "Probably not urgent, but should we also add Autocloseableon receiver/sender builder because some time a user might just want to close the connection from builder in order to stop everything ?  We could decide about it later.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9697#discussion_r401022720", "createdAt": "2020-03-31T15:49:53Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -208,13 +209,23 @@ public ServiceBusReceiverClientBuilder buildReceiverClientBuilder() {\n      */\n     void onClientClose() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afcb7ba68c92a953560e1da0686ed29eb707237b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA2MTEzMg==", "bodyText": "This is a design decision, you can create an issue for it.. but it seems weird for a builder to implement autocloseable.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9697#discussion_r401061132", "createdAt": "2020-03-31T16:45:47Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -208,13 +209,23 @@ public ServiceBusReceiverClientBuilder buildReceiverClientBuilder() {\n      */\n     void onClientClose() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAyMjcyMA=="}, "originalCommit": {"oid": "afcb7ba68c92a953560e1da0686ed29eb707237b"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2156, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}