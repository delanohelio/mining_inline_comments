{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ3MDgyMTQ3", "number": 18404, "title": "Adding request level diagnostic information for queries", "bodyText": "First of multiple PRs that add query diagnostics\n\nAdds request level diagnostics (regions contacted, timeline etc..)\nBundles request diagnostics for all the requests made to return a feedresponse which helps in case of aggregation queries\nAppends request statistics to existing query metrics\n\nTodo:\n\nRetry stats\nMetadata diagnostics\nSerialization timelines\nEmpty page response stats\n\nPerf:\nMaster:\nlatency\ncount = 10000\nmean rate = 211.91 calls/second\n1-minute rate = 161.59 calls/second\n5-minute rate = 113.25 calls/second\n15-minute rate = 102.88 calls/second\nmin = 2.87 milliseconds\nmax = 124.26 milliseconds\nmean = 3.73 milliseconds\nstddev = 3.46 milliseconds\nmedian = 3.47 milliseconds\n75% <= 3.69 milliseconds\n95% <= 4.42 milliseconds\n98% <= 5.96 milliseconds\n99% <= 8.78 milliseconds\n99.9% <= 83.89 milliseconds\nThis branch with diagnostics\nlatency\ncount = 10000\nmean rate = 211.08 calls/second\n1-minute rate = 159.41 calls/second\n5-minute rate = 110.93 calls/second\n15-minute rate = 100.39 calls/second\nmin = 2.98 milliseconds\nmax = 96.99 milliseconds\nmean = 3.88 milliseconds\nstddev = 3.63 milliseconds\nmedian = 3.52 milliseconds\n75% <= 3.80 milliseconds\n95% <= 4.72 milliseconds\n98% <= 6.65 milliseconds\n99% <= 9.63 milliseconds\n99.9% <= 96.47 milliseconds", "createdAt": "2020-12-30T20:46:47Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404", "merged": true, "mergeCommit": {"oid": "4ac0c9eefa0cd6f3bdc3c308230892309546f210"}, "closed": true, "closedAt": "2021-02-10T02:22:09Z", "author": {"login": "mbhaskar"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdrVaZWgH2gAyNTQ3MDgyMTQ3OmQxYzYwOWQxODUxMTQ5MGZhY2NhODZkMzAxZTdkYmRmOWUxMjE5ZjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd27WLRAH2gAyNTQ3MDgyMTQ3OmIwOTdjN2RkZTc2ZTljNTdlYjAxMjE4NTk5ZWEzOTM4OTk4NmZhZGM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d1c609d18511490facca86d301e7dbdf9e1219f2", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d1c609d18511490facca86d301e7dbdf9e1219f2", "committedDate": "2020-12-30T20:32:49Z", "message": "Adding request level diagnostic information for queries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39913f8bb73db76b88637148e8d3c51803ff8353", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/39913f8bb73db76b88637148e8d3c51803ff8353", "committedDate": "2020-12-31T08:32:07Z", "message": "Removing unused variable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMzI2NDE2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#pullrequestreview-560326416", "createdAt": "2020-12-31T11:09:03Z", "commit": {"oid": "39913f8bb73db76b88637148e8d3c51803ff8353"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxMTowOTowM1rOIM9ZfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxMTowOTowM1rOIM9ZfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ1OTc3Mw==", "bodyText": "Wouldn't you need to get the superset of the FeedRangeDiagnostics.getClientSideRequestStatistics().getRegionsContacted() here instead?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r550459773", "createdAt": "2020-12-31T11:09:03Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosDiagnostics.java", "diffHunk": "@@ -80,6 +81,9 @@ public Duration getDuration() {\n      */\n     @Beta(value = Beta.SinceVersion.V4_9_0, warningText = Beta.PREVIEW_SUBJECT_TO_CHANGE_WARNING)\n     public Set<URI> getRegionsContacted() {\n+        if (this.feedResponseDiagnostics != null) {\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39913f8bb73db76b88637148e8d3c51803ff8353"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMzI3NDcx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#pullrequestreview-560327471", "createdAt": "2020-12-31T11:14:51Z", "commit": {"oid": "39913f8bb73db76b88637148e8d3c51803ff8353"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxMToxNDo1MVrOIM9dXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxMToxNDo1MVrOIM9dXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ2MDc2Ng==", "bodyText": "IMO it would be good to also add some test coverage for diagnostics with more elaborate queries liek aggregates/order-by etc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r550460766", "createdAt": "2020-12-31T11:14:51Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosDiagnosticsTest.java", "diffHunk": "@@ -321,6 +322,117 @@ public void queryMetrics(String query, Boolean qmEnabled) {\n         }\n     }\n \n+    @Test(groups = {\"simple\"}, dataProvider = \"query\", timeOut = TIMEOUT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39913f8bb73db76b88637148e8d3c51803ff8353"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMzI3NjAw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#pullrequestreview-560327600", "createdAt": "2020-12-31T11:15:37Z", "commit": {"oid": "39913f8bb73db76b88637148e8d3c51803ff8353"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02172087a496625bfce7e57b138360911e0b33aa", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/02172087a496625bfce7e57b138360911e0b33aa", "committedDate": "2020-12-31T20:19:44Z", "message": "Fixing spot bugs\nRefactoring spotbug suppressions as the class ClientSideRequestStatistics is moved to implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6251a2665dbcd7780d41a5a0fbbce4be61b1eb9b", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6251a2665dbcd7780d41a5a0fbbce4be61b1eb9b", "committedDate": "2020-12-31T20:43:52Z", "message": "test fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwNTUyNjk1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#pullrequestreview-560552695", "createdAt": "2020-12-31T21:45:24Z", "commit": {"oid": "6251a2665dbcd7780d41a5a0fbbce4be61b1eb9b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQyMTo0NToyNFrOINLyKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQyMjowMzoyMFrOINL51Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDY5NTQ2Ng==", "bodyText": "NIT: Can avoid this extra variable", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r550695466", "createdAt": "2020-12-31T21:45:24Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -487,15 +488,17 @@ public String getId() {\n             return BridgeInternal.createFeedResponseWithQueryMetrics(transformedResults,\n                 response.getResponseHeaders(),\n                 ModelBridgeInternal.queryMetrics(response),\n-                ModelBridgeInternal.getQueryPlanDiagnosticsContext(response));\n+                ModelBridgeInternal.getQueryPlanDiagnosticsContext(response),\n+                                                                     response.getCosmosDiagnostics());\n \n         }\n-        return BridgeInternal.createFeedResponseWithQueryMetrics(\n+        FeedResponse<T> feedResponseWithQueryMetrics = BridgeInternal.createFeedResponseWithQueryMetrics(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6251a2665dbcd7780d41a5a0fbbce4be61b1eb9b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDY5NzAxOQ==", "bodyText": "This method is particularly for query , why we need diagnostics for point operation , can we remove it and also rename the method indicating query/feed in it ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r550697019", "createdAt": "2020-12-31T21:59:11Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java", "diffHunk": "@@ -473,6 +505,22 @@ public static void setTimestamp(Resource resource, Instant date) {\n         ModelBridgeInternal.setTimestamp(resource, date);\n     }\n \n+    @Warning(value = INTERNAL_USE_ONLY_WARNING)\n+    public static List<ClientSideRequestStatistics> getClientSideRequestStatics(CosmosDiagnostics cosmosDiagnostics) {\n+        //Used only during aggregations like Aggregate/Orderby/Groupby which may contain clientSideStats in\n+        //feedResponseDiagnostics. So we need to add from both the places\n+        List<ClientSideRequestStatistics> clientSideRequestStatisticsList = new ArrayList<>();\n+\n+        if (cosmosDiagnostics != null) {\n+            clientSideRequestStatisticsList\n+                .addAll(cosmosDiagnostics.getFeedResponseDiagnostics().getClientSideRequestStatisticsList());\n+            if (cosmosDiagnostics.clientSideRequestStatistics() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6251a2665dbcd7780d41a5a0fbbce4be61b1eb9b"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDY5NzQyOQ==", "bodyText": "Do we need this list be thread safe, multiple threads could update the diagnostics from multiple responses ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r550697429", "createdAt": "2020-12-31T22:03:20Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/FeedResponseDiagnostics.java", "diffHunk": "@@ -5,23 +5,31 @@\n \n import com.azure.cosmos.implementation.query.QueryInfo;\n import com.azure.cosmos.implementation.query.metrics.QueryMetricsTextWriter;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Map;\n \n /**\n  * The type Feed response diagnostics.\n  */\n-public final class FeedResponseDiagnostics {\n+public class FeedResponseDiagnostics {\n \n     private final static String EQUALS = \"=\";\n     private final static String QUERY_PLAN = \"QueryPlan\";\n     private final static String SPACE = \" \";\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FeedResponseDiagnostics.class);\n     private Map<String, QueryMetrics> queryMetricsMap;\n     private QueryInfo.QueryPlanDiagnosticsContext diagnosticsContext;\n+    private List<ClientSideRequestStatistics> clientSideRequestStatisticsList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6251a2665dbcd7780d41a5a0fbbce4be61b1eb9b"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMjIyNzE4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#pullrequestreview-561222718", "createdAt": "2021-01-04T17:54:40Z", "commit": {"oid": "6251a2665dbcd7780d41a5a0fbbce4be61b1eb9b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzo1NDo0MFrOIN7NHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMDowMjo1NlrOIN_Nqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ3MjQxNA==", "bodyText": "+1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r551472414", "createdAt": "2021-01-04T17:54:40Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/FeedResponseDiagnostics.java", "diffHunk": "@@ -5,23 +5,31 @@\n \n import com.azure.cosmos.implementation.query.QueryInfo;\n import com.azure.cosmos.implementation.query.metrics.QueryMetricsTextWriter;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Map;\n \n /**\n  * The type Feed response diagnostics.\n  */\n-public final class FeedResponseDiagnostics {\n+public class FeedResponseDiagnostics {\n \n     private final static String EQUALS = \"=\";\n     private final static String QUERY_PLAN = \"QueryPlan\";\n     private final static String SPACE = \" \";\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FeedResponseDiagnostics.class);\n     private Map<String, QueryMetrics> queryMetricsMap;\n     private QueryInfo.QueryPlanDiagnosticsContext diagnosticsContext;\n+    private List<ClientSideRequestStatistics> clientSideRequestStatisticsList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDY5NzQyOQ=="}, "originalCommit": {"oid": "6251a2665dbcd7780d41a5a0fbbce4be61b1eb9b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ3Mjg5Nw==", "bodyText": "don't do string concat for e\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOGGER.error(\"Error while parsing diagnostics \" + e);\n          \n          \n            \n                            LOGGER.error(\"Error while parsing diagnostics\", e);", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r551472897", "createdAt": "2021-01-04T17:55:32Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/FeedResponseDiagnostics.java", "diffHunk": "@@ -65,10 +73,33 @@ public String toString() {\n                 .append(value.toString())\n                 .append(System.lineSeparator()));\n         }\n+        for (ClientSideRequestStatistics statistics : clientSideRequestStatisticsList) {\n+            try {\n+                stringBuilder\n+                    .append(Utils.getSimpleObjectMapper().writeValueAsString(statistics));\n+            } catch (JsonProcessingException e) {\n+                LOGGER.error(\"Error while parsing diagnostics \" + e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6251a2665dbcd7780d41a5a0fbbce4be61b1eb9b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUzODA5MA==", "bodyText": "This is very limited for validation.\nthis doesn't really structurally validates what is in the diagnostics. please take a look at CilentConfigDiagnosticsTest in some cases it is worth fully validate what goes in the diagnostics. the number of entries, order, etc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r551538090", "createdAt": "2021-01-04T20:02:56Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosDiagnosticsTest.java", "diffHunk": "@@ -321,6 +322,117 @@ public void queryMetrics(String query, Boolean qmEnabled) {\n         }\n     }\n \n+    @Test(groups = {\"simple\"}, dataProvider = \"query\", timeOut = TIMEOUT)\n+    public void queryDiagnosticsDirectMode(String query, Boolean qmEnabled) {\n+        CosmosClient testDirectClient = new CosmosClientBuilder()\n+                                            .endpoint(TestConfigurations.HOST)\n+                                            .key(TestConfigurations.MASTER_KEY)\n+                                            .contentResponseOnWriteEnabled(true)\n+                                            .directMode()\n+                                            .buildClient();\n+        CosmosQueryRequestOptions options = new CosmosQueryRequestOptions();\n+\n+        CosmosContainer cosmosContainer = testDirectClient.getDatabase(cosmosAsyncContainer.getDatabase().getId())\n+                                              .getContainer(cosmosAsyncContainer.getId());\n+        List<String> itemIdList = new ArrayList<>();\n+        for (int i = 0; i < 100; i++) {\n+            InternalObjectNode internalObjectNode = getInternalObjectNode();\n+            CosmosItemResponse<InternalObjectNode> createResponse = cosmosContainer.createItem(internalObjectNode);\n+            if (i % 20 == 0) {\n+                itemIdList.add(internalObjectNode.getId());\n+            }\n+        }\n+        boolean qroupByFirstResponse = true;\n+        if (qmEnabled != null) {\n+            options.setQueryMetricsEnabled(qmEnabled);\n+        }\n+        Iterator<FeedResponse<InternalObjectNode>> iterator = cosmosContainer\n+                                                                  .queryItems(query, options, InternalObjectNode.class)\n+                                                                  .iterableByPage()\n+                                                                  .iterator();\n+        assertThat(iterator.hasNext()).isTrue();\n+\n+        while (iterator.hasNext()) {\n+            FeedResponse<InternalObjectNode> feedResponse = iterator.next();\n+            String queryDiagnostics = feedResponse.getCosmosDiagnostics().toString();\n+            assertThat(feedResponse.getResults().size()).isEqualTo(0);\n+            if (!query.contains(\"group by\") || qroupByFirstResponse) { // TODO https://github\n+                if (qmEnabled) {\n+                    validateQueryDiagnostics(queryDiagnostics, qmEnabled, true);\n+                    validateDirectModeQueryDiagnostics(queryDiagnostics);\n+                    validateTransportRequestTimelineDirect(queryDiagnostics);\n+                }\n+                if (query.contains(\"group by\")) {\n+                    qroupByFirstResponse = false;\n+                }\n+            }\n+        }\n+    }\n+\n+    private void validateDirectModeQueryDiagnostics(String diagnostics) {\n+        assertThat(diagnostics).contains(\"\\\"connectionMode\\\":\\\"DIRECT\\\"\");\n+        assertThat(diagnostics).contains(\"supplementalResponseStatisticsList\");\n+        assertThat(diagnostics).contains(\"\\\"gatewayStatistics\\\":null\");\n+        assertThat(diagnostics).contains(\"addressResolutionStatistics\");\n+        assertThat(diagnostics).contains(\"\\\"userAgent\\\":\\\"\" + Utils.getUserAgent() + \"\\\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6251a2665dbcd7780d41a5a0fbbce4be61b1eb9b"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMzA0ODI1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#pullrequestreview-561304825", "createdAt": "2021-01-04T20:01:01Z", "commit": {"oid": "6251a2665dbcd7780d41a5a0fbbce4be61b1eb9b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMDowMTowMVrOIN_KOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMDowNTozNFrOIN_S0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUzNzIxMA==", "bodyText": "For feedresponse you already adding cosmosDiagnostics.getFeedResponseDiagnostics().getClientSideRequestStatisticsList(), so why we need cosmosDiagnostics.clientSideRequestStatistics() which is point operation diagnotics", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r551537210", "createdAt": "2021-01-04T20:01:01Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java", "diffHunk": "@@ -473,6 +505,22 @@ public static void setTimestamp(Resource resource, Instant date) {\n         ModelBridgeInternal.setTimestamp(resource, date);\n     }\n \n+    @Warning(value = INTERNAL_USE_ONLY_WARNING)\n+    public static List<ClientSideRequestStatistics> getClientSideRequestStatics(CosmosDiagnostics cosmosDiagnostics) {\n+        //Used only during aggregations like Aggregate/Orderby/Groupby which may contain clientSideStats in\n+        //feedResponseDiagnostics. So we need to add from both the places\n+        List<ClientSideRequestStatistics> clientSideRequestStatisticsList = new ArrayList<>();\n+\n+        if (cosmosDiagnostics != null) {\n+            clientSideRequestStatisticsList\n+                .addAll(cosmosDiagnostics.getFeedResponseDiagnostics().getClientSideRequestStatisticsList());\n+            if (cosmosDiagnostics.clientSideRequestStatistics() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDY5NzAxOQ=="}, "originalCommit": {"oid": "6251a2665dbcd7780d41a5a0fbbce4be61b1eb9b"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUzOTQwOA==", "bodyText": "Are we planning to run perf , because we cant be sure till we run some load. Without 100% surety it will be risky, as we have seen similar issue around diagnostics lists.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r551539408", "createdAt": "2021-01-04T20:05:34Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/FeedResponseDiagnostics.java", "diffHunk": "@@ -5,23 +5,31 @@\n \n import com.azure.cosmos.implementation.query.QueryInfo;\n import com.azure.cosmos.implementation.query.metrics.QueryMetricsTextWriter;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Map;\n \n /**\n  * The type Feed response diagnostics.\n  */\n-public final class FeedResponseDiagnostics {\n+public class FeedResponseDiagnostics {\n \n     private final static String EQUALS = \"=\";\n     private final static String QUERY_PLAN = \"QueryPlan\";\n     private final static String SPACE = \" \";\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FeedResponseDiagnostics.class);\n     private Map<String, QueryMetrics> queryMetricsMap;\n     private QueryInfo.QueryPlanDiagnosticsContext diagnosticsContext;\n+    private List<ClientSideRequestStatistics> clientSideRequestStatisticsList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDY5NzQyOQ=="}, "originalCommit": {"oid": "6251a2665dbcd7780d41a5a0fbbce4be61b1eb9b"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03bcd6498cc231129abc0a0e281a254843abdac2", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/03bcd6498cc231129abc0a0e281a254843abdac2", "committedDate": "2021-01-07T08:05:29Z", "message": "PR comments and minor improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca6d04acb56cb6ccd71b2a328d78b3b59600f915", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ca6d04acb56cb6ccd71b2a328d78b3b59600f915", "committedDate": "2021-01-07T18:53:47Z", "message": "Fixing tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzNzQ4ODc3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#pullrequestreview-563748877", "createdAt": "2021-01-07T19:08:10Z", "commit": {"oid": "ca6d04acb56cb6ccd71b2a328d78b3b59600f915"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxOTowODoxMVrOIP4kYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxOTowODoxMVrOIP4kYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzUyNjM2OA==", "bodyText": "Nit: unused import ?Non blocker , if you send another iteration", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r553526368", "createdAt": "2021-01-07T19:08:11Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -41,6 +41,7 @@\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n \n+import java.util.Collections;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6d04acb56cb6ccd71b2a328d78b3b59600f915"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0NDY5OTQx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#pullrequestreview-564469941", "createdAt": "2021-01-08T18:02:29Z", "commit": {"oid": "ca6d04acb56cb6ccd71b2a328d78b3b59600f915"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ed4d23a0e5daec7e081125a681cbf56f4d262e5", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0ed4d23a0e5daec7e081125a681cbf56f4d262e5", "committedDate": "2021-01-13T03:15:45Z", "message": "Merge branch 'upstream-master' into query_diagnostics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "769f4fc15390b7a7f1946e16e40a7ff75d8cbb6e", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/769f4fc15390b7a7f1946e16e40a7ff75d8cbb6e", "committedDate": "2021-01-21T17:32:51Z", "message": "Disabling query diag tests to debug CI."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16ea656d272bcf5221bde79d4fa9cb61f7c4699f", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/16ea656d272bcf5221bde79d4fa9cb61f7c4699f", "committedDate": "2021-01-21T23:38:15Z", "message": "Enabling diagnostics tests with increased timeout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "837c9fa8b78a8b57958517e49a7573545f440814", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/837c9fa8b78a8b57958517e49a7573545f440814", "committedDate": "2021-01-21T23:40:54Z", "message": "Removing unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b8098dd3ac363bf661ca851aed0a7273a659d86", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0b8098dd3ac363bf661ca851aed0a7273a659d86", "committedDate": "2021-01-26T21:05:51Z", "message": "Merge remote-tracking branch 'upstream/master' into query_diagnostics\n\n# Conflicts:\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctDocumentQueryExecutionContext.java\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupByDocumentQueryExecutionContext.java\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/OrderByDocumentQueryExecutionContext.java\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ParallelDocumentQueryExecutionContext.java\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/SkipDocumentQueryExecutionContext.java\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/TopDocumentQueryExecutionContext.java\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/FeedResponse.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95bdbff645cc15926023466a3825343d7016b4d6", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/95bdbff645cc15926023466a3825343d7016b4d6", "committedDate": "2021-01-27T00:51:55Z", "message": "Merging master\nRefactoring existing test and disabling redundant tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e68b413efda4433ab89ad199f7dd64afb124efe8", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e68b413efda4433ab89ad199f7dd64afb124efe8", "committedDate": "2021-02-04T06:18:14Z", "message": "Merging redundant tests to reduce load."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b097c7dde76e9c57eb01218599ea39389986fadc", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b097c7dde76e9c57eb01218599ea39389986fadc", "committedDate": "2021-02-04T20:57:46Z", "message": "Disabling changeFeed_fromBeginning_withFeedRangeFiltering. This needs to be investigated eventually"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4242, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}