{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MTg2NTU2", "number": 10368, "title": "Vs Code Credential", "bodyText": "", "createdAt": "2020-04-20T17:04:05Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368", "merged": true, "mergeCommit": {"oid": "59c6966b4da572b0a9f458e17ea39f8de8d6e97e"}, "closed": true, "closedAt": "2020-05-04T13:53:56Z", "author": {"login": "g2vinay"}, "timelineItems": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZiB5bAH2gAyNDA2MTg2NTU2OmY4MTkwY2IyNTdiN2FlZGY5ZjMwODBlYmQyYjJmMzg1OGY4MDJjNWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcd2PikAFqTQwNDY4ODczMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f8190cb257b7aedf9f3080ebd2b2f3858f802c5b", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f8190cb257b7aedf9f3080ebd2b2f3858f802c5b", "committedDate": "2020-04-20T16:53:02Z", "message": "update credentials"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "612ece2074ef31bfc5a33f89b68b29202ed61cae", "author": {"user": {"login": "g2vinay", "name": "Vinay Gera"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/612ece2074ef31bfc5a33f89b68b29202ed61cae", "committedDate": "2020-04-23T16:39:20Z", "message": "vs code cred updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ef3a2e7aa996dd9568b388d5b8728127a69b19e", "author": {"user": {"login": "g2vinay", "name": "Vinay Gera"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3ef3a2e7aa996dd9568b388d5b8728127a69b19e", "committedDate": "2020-04-23T17:21:15Z", "message": "update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MzE2Nzk2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#pullrequestreview-399316796", "createdAt": "2020-04-23T17:23:14Z", "commit": {"oid": "3ef3a2e7aa996dd9568b388d5b8728127a69b19e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzoyMzoxNFrOGKzhdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzoyMzoxNFrOGKzhdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk4MzA5NQ==", "bodyText": "add x version, and update external dep file.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#discussion_r413983095", "createdAt": "2020-04-23T17:23:14Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/pom.xml", "diffHunk": "@@ -93,6 +93,12 @@\n       <version>2.8.5</version> <!-- {x-version-update;com.google.code.gson:gson;external_dependency} -->\n       <scope>test</scope>\n     </dependency>\n+\n+    <dependency>\n+      <groupId>com.microsoft.azure</groupId>\n+      <artifactId>msal4j-persistence-extension</artifactId>\n+      <version>0.1</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ef3a2e7aa996dd9568b388d5b8728127a69b19e"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adc3aa3c7600c8003b84001acf9e4526a6104aac", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/adc3aa3c7600c8003b84001acf9e4526a6104aac", "committedDate": "2020-04-23T18:27:12Z", "message": "updates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5Mzg0OTIz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#pullrequestreview-399384923", "createdAt": "2020-04-23T18:53:09Z", "commit": {"oid": "3ef3a2e7aa996dd9568b388d5b8728127a69b19e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "305db69f95dc2372c967130ac5815271d00c7569", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/305db69f95dc2372c967130ac5815271d00c7569", "committedDate": "2020-04-24T10:10:01Z", "message": "fix spotbugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bec7d18c8cd4b31670864a2357e2625469d5a224", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bec7d18c8cd4b31670864a2357e2625469d5a224", "committedDate": "2020-04-24T17:03:22Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "055d418246fbcb1e1374da693d1bd9b416f5fbfb", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/055d418246fbcb1e1374da693d1bd9b416f5fbfb", "committedDate": "2020-04-24T17:04:26Z", "message": "update external dep"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ce71e04e4faf658e2c1ec950720c1988403d4d3", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9ce71e04e4faf658e2c1ec950720c1988403d4d3", "committedDate": "2020-04-24T17:14:20Z", "message": "update tag"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTQ5NDI5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#pullrequestreview-400149429", "createdAt": "2020-04-24T17:44:34Z", "commit": {"oid": "9ce71e04e4faf658e2c1ec950720c1988403d4d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzo0NDozNFrOGLiecg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzo0NDozNFrOGLiecg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc1MjM3MA==", "bodyText": "This type shouldn't be public. For now we are adding these credential types to the DefaultAzureCredential authentication flow but not exposing the credential types directly.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#discussion_r414752370", "createdAt": "2020-04-24T17:44:34Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/VisualStudioCodeCredential.java", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.identity.implementation.IdentityClient;\n+import com.azure.identity.implementation.IdentityClientBuilder;\n+import com.azure.identity.implementation.IdentityClientOptions;\n+import com.azure.identity.implementation.MsalToken;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Enables authentication to Azure Active Directory using data from Visual Studio Code\n+ */\n+public class VisualStudioCodeCredential implements TokenCredential {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ce71e04e4faf658e2c1ec950720c1988403d4d3"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTUwMTk0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#pullrequestreview-400150194", "createdAt": "2020-04-24T17:45:48Z", "commit": {"oid": "9ce71e04e4faf658e2c1ec950720c1988403d4d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzo0NTo0OFrOGLihMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzo0NTo0OFrOGLihMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc1MzA3NQ==", "bodyText": "Remove this builder type.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#discussion_r414753075", "createdAt": "2020-04-24T17:45:48Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/VisualStudioCodeCredentialBuilder.java", "diffHunk": "@@ -0,0 +1,35 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity;\n+\n+/**\n+ * Fluent credential builder for instantiating a {@link VisualStudioCodeCredential}.\n+ *\n+ * @see VisualStudioCodeCredential\n+ */\n+public class VisualStudioCodeCredentialBuilder extends CredentialBuilderBase<DefaultAzureCredentialBuilder> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ce71e04e4faf658e2c1ec950720c1988403d4d3"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTUyNzgw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#pullrequestreview-400152780", "createdAt": "2020-04-24T17:49:44Z", "commit": {"oid": "9ce71e04e4faf658e2c1ec950720c1988403d4d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzo0OTo0NFrOGLiqxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzo0OTo0NFrOGLiqxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc1NTUyNA==", "bodyText": "The authority has to be configurable why is this hard-coded to public cloud? Also I think it should append EITHER '/organizations/' OR tenantId. At least that's what we do in other languages. Have you confirmed that /orginizations/ actually works?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#discussion_r414755524", "createdAt": "2020-04-24T17:49:44Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -429,6 +434,85 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n         }).map(ar -> new MsalToken(ar, options));\n     }\n \n+    /**\n+     * Asynchronously acquire a token from Active Directory with a device code challenge. Active Directory will provide\n+     * a device code for login and the user must meet the challenge by authenticating in a browser on the current or a\n+     * different device.\n+     *\n+     * @param request the details of the token request\n+     * @return a Publisher that emits an AccessToken when the device challenge is met, or an exception if the device\n+     *     code expires\n+     */\n+    public Mono<MsalToken> authenticateWithVsCodeCredential(TokenRequestContext request) {\n+\n+        VisualStudioCacheAccessor accessor = new VisualStudioCacheAccessor();\n+\n+        JsonNode userSettings = accessor.getUserSettings();\n+\n+        String tenant = tenantId;\n+        String cloud = \"Azure\";\n+\n+        if (!userSettings.isNull()) {\n+            if (userSettings.has(\"azure.tenant\")) {\n+                tenant = userSettings.get(\"azure.tenant\").asText();\n+            }\n+\n+            if (userSettings.has(\"azure.cloud\")) {\n+                cloud = userSettings.get(\"azure.cloud\").asText();\n+            }\n+        }\n+\n+        String credential = accessor.getCredentials(\"VS Code Azure\", cloud);\n+\n+        String authority = KnownAuthorityHosts.AZURE_CLOUD.replaceAll(\"/+$\", \"\")\n+            + \"/organizations/\" + tenant;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ce71e04e4faf658e2c1ec950720c1988403d4d3"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTU0MDc1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#pullrequestreview-400154075", "createdAt": "2020-04-24T17:51:37Z", "commit": {"oid": "9ce71e04e4faf658e2c1ec950720c1988403d4d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzo1MTozOFrOGLivPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzo1MTozOFrOGLivPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc1NjY3MA==", "bodyText": "In .NET we don't handle the case where the authorization code is stored, only the case where the stored value is a refresh token. We should align this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#discussion_r414756670", "createdAt": "2020-04-24T17:51:38Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -429,6 +434,85 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n         }).map(ar -> new MsalToken(ar, options));\n     }\n \n+    /**\n+     * Asynchronously acquire a token from Active Directory with a device code challenge. Active Directory will provide\n+     * a device code for login and the user must meet the challenge by authenticating in a browser on the current or a\n+     * different device.\n+     *\n+     * @param request the details of the token request\n+     * @return a Publisher that emits an AccessToken when the device challenge is met, or an exception if the device\n+     *     code expires\n+     */\n+    public Mono<MsalToken> authenticateWithVsCodeCredential(TokenRequestContext request) {\n+\n+        VisualStudioCacheAccessor accessor = new VisualStudioCacheAccessor();\n+\n+        JsonNode userSettings = accessor.getUserSettings();\n+\n+        String tenant = tenantId;\n+        String cloud = \"Azure\";\n+\n+        if (!userSettings.isNull()) {\n+            if (userSettings.has(\"azure.tenant\")) {\n+                tenant = userSettings.get(\"azure.tenant\").asText();\n+            }\n+\n+            if (userSettings.has(\"azure.cloud\")) {\n+                cloud = userSettings.get(\"azure.cloud\").asText();\n+            }\n+        }\n+\n+        String credential = accessor.getCredentials(\"VS Code Azure\", cloud);\n+\n+        String authority = KnownAuthorityHosts.AZURE_CLOUD.replaceAll(\"/+$\", \"\")\n+            + \"/organizations/\" + tenant;\n+        PublicClientApplication.Builder publicClientApplicationBuilder = PublicClientApplication.builder(clientId);\n+        if (httpPipelineAdapter != null) {\n+            publicClientApplicationBuilder.httpClient(httpPipelineAdapter);\n+        } else if (options.getProxyOptions() != null) {\n+            publicClientApplicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n+        }\n+\n+        try {\n+            ObjectMapper mapper = new ObjectMapper();\n+            JsonNode parsedCredentials = mapper.readTree(credential);\n+            String redirectUri = parsedCredentials.get(\"redirectionUrl\").asText();\n+            String authorizationCode = parsedCredentials.get(\"code\").asText();\n+\n+            AuthorizationCodeParameters authorizationCodeParameters = AuthorizationCodeParameters\n+                .builder(authorizationCode, new URI(redirectUri))\n+                .scopes(new HashSet<>(request.getScopes()))\n+                .build();\n+\n+            PublicClientApplication application = publicClientApplicationBuilder.authority(authority).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ce71e04e4faf658e2c1ec950720c1988403d4d3"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTU4MTMw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#pullrequestreview-400158130", "createdAt": "2020-04-24T17:57:44Z", "commit": {"oid": "9ce71e04e4faf658e2c1ec950720c1988403d4d3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTY5OTkz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#pullrequestreview-400169993", "createdAt": "2020-04-24T18:15:39Z", "commit": {"oid": "9ce71e04e4faf658e2c1ec950720c1988403d4d3"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODoxNTozOVrOGLjnjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODoyMjozMlrOGLj3ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3MTA4Nw==", "bodyText": "Why are classnames uppercase?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#discussion_r414771087", "createdAt": "2020-04-24T18:15:39Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/WindowsCredentialApi.java", "diffHunk": "@@ -0,0 +1,294 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation;\n+\n+import com.sun.jna.Pointer;\n+import com.sun.jna.Memory;\n+import com.sun.jna.LastErrorException;\n+import com.sun.jna.Structure;\n+import com.sun.jna.platform.win32.WinBase;\n+import com.sun.jna.win32.StdCallLibrary;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class exposes functions from credential manager on Windows platform\n+ * via JNA.\n+ */\n+public interface WindowsCredentialApi extends StdCallLibrary {\n+\n+    /**\n+     * Type of Credential\n+     */\n+    int CRED_TYPE_GENERIC = 1;\n+\n+    /**\n+     * Credential attributes\n+     *\n+     * typedef struct _CREDENTIAL_ATTRIBUTE {\n+     *   LPTSTR Keyword;\n+     *   DWORD  Flags;\n+     *   DWORD  ValueSize;\n+     *   LPBYTE Value;\n+     * } CREDENTIAL_ATTRIBUTE, *PCREDENTIAL_ATTRIBUTE;\n+     *\n+     */\n+    class CREDENTIAL_ATTRIBUTE extends Structure {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ce71e04e4faf658e2c1ec950720c1988403d4d3"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3MTM1OQ==", "bodyText": "Same here - class names should use Pascal case.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#discussion_r414771359", "createdAt": "2020-04-24T18:16:06Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/WindowsCredentialApi.java", "diffHunk": "@@ -0,0 +1,294 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation;\n+\n+import com.sun.jna.Pointer;\n+import com.sun.jna.Memory;\n+import com.sun.jna.LastErrorException;\n+import com.sun.jna.Structure;\n+import com.sun.jna.platform.win32.WinBase;\n+import com.sun.jna.win32.StdCallLibrary;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class exposes functions from credential manager on Windows platform\n+ * via JNA.\n+ */\n+public interface WindowsCredentialApi extends StdCallLibrary {\n+\n+    /**\n+     * Type of Credential\n+     */\n+    int CRED_TYPE_GENERIC = 1;\n+\n+    /**\n+     * Credential attributes\n+     *\n+     * typedef struct _CREDENTIAL_ATTRIBUTE {\n+     *   LPTSTR Keyword;\n+     *   DWORD  Flags;\n+     *   DWORD  ValueSize;\n+     *   LPBYTE Value;\n+     * } CREDENTIAL_ATTRIBUTE, *PCREDENTIAL_ATTRIBUTE;\n+     *\n+     */\n+    class CREDENTIAL_ATTRIBUTE extends Structure {\n+\n+        public static class ByReference extends CREDENTIAL_ATTRIBUTE implements Structure.ByReference { }\n+\n+        @Override\n+        protected List<String> getFieldOrder() {\n+            return Arrays.asList(\"Keyword\",\n+                    \"Flags\",\n+                    \"ValueSize\",\n+                    \"Value\");\n+        }\n+\n+        /**\n+         *    Name of the application-specific attribute. Names should be of the form \"CompanyName_Name\".\n+         *    This member cannot be longer than CRED_MAX_STRING_LENGTH (256) characters.\n+         */\n+        public String Keyword;\n+\n+        /**\n+         *   Identifies characteristics of the credential attribute. This member is reserved and should be originally\n+         *   initialized as zero and not otherwise altered to permit future enhancement.\n+         */\n+        public int Flags;\n+\n+        /**\n+         *   Length of Value in bytes. This member cannot be larger than CRED_MAX_VALUE_SIZE (256).\n+         */\n+        public int ValueSize;\n+\n+        /**\n+         *   Data associated with the attribute. By convention, if Value is a text string, then Value should not\n+         *   include the trailing zero character and should be in UNICODE.\n+         *\n+         *   Credentials are expected to be portable. The application should take care to ensure that the data in\n+         *   value is portable. It is the responsibility of the application to define the byte-endian and alignment\n+         *   of the data in Value.\n+         */\n+        public Pointer Value;\n+    }\n+\n+\n+    /**\n+     * The CREDENTIAL structure contains an individual credential\n+     *\n+     * typedef struct _CREDENTIAL {\n+     *   DWORD                 Flags;\n+     *   DWORD                 Type;\n+     *   LPTSTR                TargetName;\n+     *   LPTSTR                Comment;\n+     *   FILETIME              LastWritten;\n+     *   DWORD                 CredentialBlobSize;\n+     *   LPBYTE                CredentialBlob;\n+     *   DWORD                 Persist;\n+     *   DWORD                 AttributeCount;\n+     *   PCREDENTIAL_ATTRIBUTE Attributes;\n+     *   LPTSTR                TargetAlias;\n+     *   LPTSTR                UserName;\n+     * } CREDENTIAL, *PCREDENTIAL;\n+     */\n+    class CREDENTIAL extends Structure {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ce71e04e4faf658e2c1ec950720c1988403d4d3"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3MTY1Ng==", "bodyText": "variable names should start from lower case.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#discussion_r414771656", "createdAt": "2020-04-24T18:16:36Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/WindowsCredentialApi.java", "diffHunk": "@@ -0,0 +1,294 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation;\n+\n+import com.sun.jna.Pointer;\n+import com.sun.jna.Memory;\n+import com.sun.jna.LastErrorException;\n+import com.sun.jna.Structure;\n+import com.sun.jna.platform.win32.WinBase;\n+import com.sun.jna.win32.StdCallLibrary;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class exposes functions from credential manager on Windows platform\n+ * via JNA.\n+ */\n+public interface WindowsCredentialApi extends StdCallLibrary {\n+\n+    /**\n+     * Type of Credential\n+     */\n+    int CRED_TYPE_GENERIC = 1;\n+\n+    /**\n+     * Credential attributes\n+     *\n+     * typedef struct _CREDENTIAL_ATTRIBUTE {\n+     *   LPTSTR Keyword;\n+     *   DWORD  Flags;\n+     *   DWORD  ValueSize;\n+     *   LPBYTE Value;\n+     * } CREDENTIAL_ATTRIBUTE, *PCREDENTIAL_ATTRIBUTE;\n+     *\n+     */\n+    class CREDENTIAL_ATTRIBUTE extends Structure {\n+\n+        public static class ByReference extends CREDENTIAL_ATTRIBUTE implements Structure.ByReference { }\n+\n+        @Override\n+        protected List<String> getFieldOrder() {\n+            return Arrays.asList(\"Keyword\",\n+                    \"Flags\",\n+                    \"ValueSize\",\n+                    \"Value\");\n+        }\n+\n+        /**\n+         *    Name of the application-specific attribute. Names should be of the form \"CompanyName_Name\".\n+         *    This member cannot be longer than CRED_MAX_STRING_LENGTH (256) characters.\n+         */\n+        public String Keyword;\n+\n+        /**\n+         *   Identifies characteristics of the credential attribute. This member is reserved and should be originally\n+         *   initialized as zero and not otherwise altered to permit future enhancement.\n+         */\n+        public int Flags;\n+\n+        /**\n+         *   Length of Value in bytes. This member cannot be larger than CRED_MAX_VALUE_SIZE (256).\n+         */\n+        public int ValueSize;\n+\n+        /**\n+         *   Data associated with the attribute. By convention, if Value is a text string, then Value should not\n+         *   include the trailing zero character and should be in UNICODE.\n+         *\n+         *   Credentials are expected to be portable. The application should take care to ensure that the data in\n+         *   value is portable. It is the responsibility of the application to define the byte-endian and alignment\n+         *   of the data in Value.\n+         */\n+        public Pointer Value;\n+    }\n+\n+\n+    /**\n+     * The CREDENTIAL structure contains an individual credential\n+     *\n+     * typedef struct _CREDENTIAL {\n+     *   DWORD                 Flags;\n+     *   DWORD                 Type;\n+     *   LPTSTR                TargetName;\n+     *   LPTSTR                Comment;\n+     *   FILETIME              LastWritten;\n+     *   DWORD                 CredentialBlobSize;\n+     *   LPBYTE                CredentialBlob;\n+     *   DWORD                 Persist;\n+     *   DWORD                 AttributeCount;\n+     *   PCREDENTIAL_ATTRIBUTE Attributes;\n+     *   LPTSTR                TargetAlias;\n+     *   LPTSTR                UserName;\n+     * } CREDENTIAL, *PCREDENTIAL;\n+     */\n+    class CREDENTIAL extends Structure {\n+\n+        @Override\n+        protected List<String> getFieldOrder() {\n+            return Arrays.asList(\"Flags\",\n+                    \"Type\",\n+                    \"TargetName\",\n+                    \"Comment\",\n+                    \"LastWritten\",\n+                    \"CredentialBlobSize\",\n+                    \"CredentialBlob\",\n+                    \"Persist\",\n+                    \"AttributeCount\",\n+                    \"Attributes\",\n+                    \"TargetAlias\",\n+                    \"UserName\");\n+        }\n+\n+        public CREDENTIAL() {\n+            super();\n+        }\n+\n+        public CREDENTIAL(final int size) {\n+            super(new Memory(size));\n+        }\n+\n+        public CREDENTIAL(Pointer memory) {\n+            super(memory);\n+            read();\n+        }\n+\n+        /**\n+         *   A bit member that identifies characteristics of the credential. Undefined bits should be initialized\n+         *   as zero and not otherwise altered to permit future enhancement.\n+         *\n+         *   See MSDN doc for all possible flags\n+         */\n+        public int Flags;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ce71e04e4faf658e2c1ec950720c1988403d4d3"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3NTE0Ng==", "bodyText": "I guess this whole builder class will be removed as suggested by @schaabs but if it's not removed then this annotation should be removed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#discussion_r414775146", "createdAt": "2020-04-24T18:22:32Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/VisualStudioCodeCredentialBuilder.java", "diffHunk": "@@ -0,0 +1,35 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity;\n+\n+/**\n+ * Fluent credential builder for instantiating a {@link VisualStudioCodeCredential}.\n+ *\n+ * @see VisualStudioCodeCredential\n+ */\n+public class VisualStudioCodeCredentialBuilder extends CredentialBuilderBase<DefaultAzureCredentialBuilder> {\n+\n+    private String tenantId;\n+\n+    /**\n+     * Sets the tenant ID of the application.\n+     *\n+     * @param tenantId the tenant ID of the application.\n+     * @return An updated instance of this builder with the tenant id set as specified.\n+     */\n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ce71e04e4faf658e2c1ec950720c1988403d4d3"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTk2MTg2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#pullrequestreview-400196186", "createdAt": "2020-04-24T18:56:25Z", "commit": {"oid": "9ce71e04e4faf658e2c1ec950720c1988403d4d3"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODo1NjoyNlrOGLlD6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOToyOTo0MVrOGLmJuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc5NDczMQ==", "bodyText": "Is it helpful to log the error as a warning? if understand correctly we assume the error is going to be an auth error, maybe log helps to debug if it ever fails due to some other reason.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#discussion_r414794731", "createdAt": "2020-04-24T18:56:26Z", "author": {"login": "anuchandy"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/VisualStudioCodeCredential.java", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.identity.implementation.IdentityClient;\n+import com.azure.identity.implementation.IdentityClientBuilder;\n+import com.azure.identity.implementation.IdentityClientOptions;\n+import com.azure.identity.implementation.MsalToken;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Enables authentication to Azure Active Directory using data from Visual Studio Code\n+ */\n+public class VisualStudioCodeCredential implements TokenCredential {\n+    private final IdentityClient identityClient;\n+    private final AtomicReference<MsalToken> cachedToken;\n+\n+    /**\n+     * Creates a public class VisualStudioCodeCredential implements TokenCredential with the given tenant and\n+     * identity client options.\n+     *\n+     * @param tenantId the tenant ID of the application\n+     * @param identityClientOptions the options for configuring the identity client\n+     */\n+    VisualStudioCodeCredential(String tenantId, IdentityClientOptions identityClientOptions) {\n+        identityClient = new IdentityClientBuilder()\n+                             .clientId(\"aebc6443-996d-45c2-90f0-388ff96faa56\")\n+                             .tenantId(tenantId)\n+                             .identityClientOptions(identityClientOptions)\n+                             .build();\n+        this.cachedToken = new AtomicReference<>();\n+    }\n+\n+    @Override\n+    public Mono<AccessToken> getToken(TokenRequestContext request) {\n+        return Mono.defer(() -> {\n+            if (cachedToken.get() != null) {\n+                return identityClient.authenticateWithUserRefreshToken(request, cachedToken.get())\n+                           .onErrorResume(t -> Mono.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ce71e04e4faf658e2c1ec950720c1988403d4d3"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxMjYwMA==", "bodyText": "just curious, some questions:\n\nif there are two ways to acquire token (firstPath:authCode, secondPath:refreshToken) then is it by design to try the second path only if we fail to parse the local configuration?\nIf it is not always guaranteed to have authCode in the config, does it makes sense to try the second path?\nIs it make sense to try out the second path if there is an async error in the first path?\n\nMono<MsalToken> mono1 = tokenByAuthCode();\nMono<MsalToken> mono2 = tokenByRefreshToken();\nmono1.onErrorResume(t -> mono2);", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#discussion_r414812600", "createdAt": "2020-04-24T19:29:41Z", "author": {"login": "anuchandy"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -429,6 +434,85 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n         }).map(ar -> new MsalToken(ar, options));\n     }\n \n+    /**\n+     * Asynchronously acquire a token from Active Directory with a device code challenge. Active Directory will provide\n+     * a device code for login and the user must meet the challenge by authenticating in a browser on the current or a\n+     * different device.\n+     *\n+     * @param request the details of the token request\n+     * @return a Publisher that emits an AccessToken when the device challenge is met, or an exception if the device\n+     *     code expires\n+     */\n+    public Mono<MsalToken> authenticateWithVsCodeCredential(TokenRequestContext request) {\n+\n+        VisualStudioCacheAccessor accessor = new VisualStudioCacheAccessor();\n+\n+        JsonNode userSettings = accessor.getUserSettings();\n+\n+        String tenant = tenantId;\n+        String cloud = \"Azure\";\n+\n+        if (!userSettings.isNull()) {\n+            if (userSettings.has(\"azure.tenant\")) {\n+                tenant = userSettings.get(\"azure.tenant\").asText();\n+            }\n+\n+            if (userSettings.has(\"azure.cloud\")) {\n+                cloud = userSettings.get(\"azure.cloud\").asText();\n+            }\n+        }\n+\n+        String credential = accessor.getCredentials(\"VS Code Azure\", cloud);\n+\n+        String authority = KnownAuthorityHosts.AZURE_CLOUD.replaceAll(\"/+$\", \"\")\n+            + \"/organizations/\" + tenant;\n+        PublicClientApplication.Builder publicClientApplicationBuilder = PublicClientApplication.builder(clientId);\n+        if (httpPipelineAdapter != null) {\n+            publicClientApplicationBuilder.httpClient(httpPipelineAdapter);\n+        } else if (options.getProxyOptions() != null) {\n+            publicClientApplicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n+        }\n+\n+        try {\n+            ObjectMapper mapper = new ObjectMapper();\n+            JsonNode parsedCredentials = mapper.readTree(credential);\n+            String redirectUri = parsedCredentials.get(\"redirectionUrl\").asText();\n+            String authorizationCode = parsedCredentials.get(\"code\").asText();\n+\n+            AuthorizationCodeParameters authorizationCodeParameters = AuthorizationCodeParameters\n+                .builder(authorizationCode, new URI(redirectUri))\n+                .scopes(new HashSet<>(request.getScopes()))\n+                .build();\n+\n+            PublicClientApplication application = publicClientApplicationBuilder.authority(authority).build();\n+\n+            return Mono.fromFuture(() -> application.acquireToken(\n+                authorizationCodeParameters))\n+                .map(ar -> new MsalToken(ar, options));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ce71e04e4faf658e2c1ec950720c1988403d4d3"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ba31cf17352e3cb305f2e8ca3d33bdb77b811e4", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6ba31cf17352e3cb305f2e8ca3d33bdb77b811e4", "committedDate": "2020-04-27T17:47:27Z", "message": "address feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMzQ1NDYw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#pullrequestreview-401345460", "createdAt": "2020-04-27T21:36:52Z", "commit": {"oid": "6ba31cf17352e3cb305f2e8ca3d33bdb77b811e4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMTozNjo1MlrOGM4yew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMTo1MTowOFrOGM5Qlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE2NjUyMw==", "bodyText": "Need more text here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#discussion_r416166523", "createdAt": "2020-04-27T21:36:52Z", "author": {"login": "JonathanGiles"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DefaultAzureCredentialBuilder.java", "diffHunk": "@@ -20,9 +20,24 @@\n     private boolean excludeManagedIdentityCredential;\n     private boolean excludeSharedTokenCacheCredential;\n     private boolean excludeAzureCliCredential;\n+    private boolean excludeVsCodeCredential;\n+    private String tenantId;\n     private final ClientLogger logger = new ClientLogger(DefaultAzureCredentialBuilder.class);\n \n \n+    /**\n+     * Sets the tenant ID of the application.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ba31cf17352e3cb305f2e8ca3d33bdb77b811e4"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE2NjcwMQ==", "bodyText": "Why suppress warnings?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#discussion_r416166701", "createdAt": "2020-04-27T21:37:10Z", "author": {"login": "JonathanGiles"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DefaultAzureCredentialBuilder.java", "diffHunk": "@@ -20,9 +20,24 @@\n     private boolean excludeManagedIdentityCredential;\n     private boolean excludeSharedTokenCacheCredential;\n     private boolean excludeAzureCliCredential;\n+    private boolean excludeVsCodeCredential;\n+    private String tenantId;\n     private final ClientLogger logger = new ClientLogger(DefaultAzureCredentialBuilder.class);\n \n \n+    /**\n+     * Sets the tenant ID of the application.\n+     *\n+     * @param tenantId the tenant ID of the application.\n+     * @return An updated instance of this builder with the tenant id set as specified.\n+     */\n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ba31cf17352e3cb305f2e8ca3d33bdb77b811e4"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE2Njk2Nw==", "bodyText": "Should this just be 'excludeVSCodeCredential()`?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#discussion_r416166967", "createdAt": "2020-04-27T21:37:36Z", "author": {"login": "JonathanGiles"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DefaultAzureCredentialBuilder.java", "diffHunk": "@@ -79,6 +94,16 @@ public DefaultAzureCredentialBuilder excludeAzureCliCredential() {\n         return this;\n     }\n \n+    /**\n+     * Excludes the {@link VisualStudioCodeCredential} from the {@link DefaultAzureCredential} authentication flow.\n+     *\n+     * @return An updated instance of this builder with the Visual Studio Code credential exclusion set as specified.\n+     */\n+    public DefaultAzureCredentialBuilder excludeVisualStudioCodeCredential() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ba31cf17352e3cb305f2e8ca3d33bdb77b811e4"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE3MjQ0Mg==", "bodyText": "Handle the situation better where a different OS is being used.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#discussion_r416172442", "createdAt": "2020-04-27T21:47:41Z", "author": {"login": "JonathanGiles"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/VisualStudioCacheAccessor.java", "diffHunk": "@@ -0,0 +1,128 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.identity.CredentialUnavailableException;\n+import com.azure.identity.KnownAuthorityHosts;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.microsoft.aad.msal4jextensions.persistence.mac.KeyChainAccessor;\n+import com.sun.jna.Platform;\n+\n+import java.io.File;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Paths;\n+\n+/**\n+ * This class allows access to Visual Studio Code cached credential data.\n+ */\n+public class VisualStudioCacheAccessor {\n+    private final ClientLogger logger = new ClientLogger(VisualStudioCacheAccessor.class);\n+\n+    /**\n+     * Creates an instance of {@link VisualStudioCacheAccessor}\n+     */\n+    public VisualStudioCacheAccessor() { }\n+\n+    /**\n+     * Get the user configured settings of Visual Studio code.\n+     * @return the {@link JsonNode} holding the settings as properties.\n+     */\n+    public JsonNode getUserSettings() {\n+        JsonNode output = null;\n+        String homeDir = System.getProperty(\"user.home\");\n+        String settingsPath = \"\";\n+        ObjectMapper mapper = new ObjectMapper();\n+        try {\n+            if (Platform.isWindows()) {\n+                settingsPath = Paths.get(System.getenv(\"APPDATA\"), \"Code\", \"User\", \"settings.json\")\n+                        .toString();\n+            } else if (Platform.isMac()) {\n+                settingsPath = Paths.get(homeDir, \"Library\",\n+                        \"Application Support\", \"Code\", \"User\", \"settings.json\").toString();\n+            } else if (Platform.isLinux()) {\n+                settingsPath = Paths.get(homeDir, \".config\", \"Code\", \"User\", \"settings.json\")\n+                        .toString();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ba31cf17352e3cb305f2e8ca3d33bdb77b811e4"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE3NDE3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                                       + \" Credential authentication.\"));\n          \n          \n            \n                                                                       + \" credential authentication.\"));", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#discussion_r416174174", "createdAt": "2020-04-27T21:51:00Z", "author": {"login": "JonathanGiles"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/VisualStudioCacheAccessor.java", "diffHunk": "@@ -0,0 +1,128 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.identity.CredentialUnavailableException;\n+import com.azure.identity.KnownAuthorityHosts;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.microsoft.aad.msal4jextensions.persistence.mac.KeyChainAccessor;\n+import com.sun.jna.Platform;\n+\n+import java.io.File;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Paths;\n+\n+/**\n+ * This class allows access to Visual Studio Code cached credential data.\n+ */\n+public class VisualStudioCacheAccessor {\n+    private final ClientLogger logger = new ClientLogger(VisualStudioCacheAccessor.class);\n+\n+    /**\n+     * Creates an instance of {@link VisualStudioCacheAccessor}\n+     */\n+    public VisualStudioCacheAccessor() { }\n+\n+    /**\n+     * Get the user configured settings of Visual Studio code.\n+     * @return the {@link JsonNode} holding the settings as properties.\n+     */\n+    public JsonNode getUserSettings() {\n+        JsonNode output = null;\n+        String homeDir = System.getProperty(\"user.home\");\n+        String settingsPath = \"\";\n+        ObjectMapper mapper = new ObjectMapper();\n+        try {\n+            if (Platform.isWindows()) {\n+                settingsPath = Paths.get(System.getenv(\"APPDATA\"), \"Code\", \"User\", \"settings.json\")\n+                        .toString();\n+            } else if (Platform.isMac()) {\n+                settingsPath = Paths.get(homeDir, \"Library\",\n+                        \"Application Support\", \"Code\", \"User\", \"settings.json\").toString();\n+            } else if (Platform.isLinux()) {\n+                settingsPath = Paths.get(homeDir, \".config\", \"Code\", \"User\", \"settings.json\")\n+                        .toString();\n+            }\n+            File settingsFile = new File(settingsPath);\n+            output = mapper.readTree(settingsFile);\n+        } catch (Exception e) {\n+            return output;\n+        }\n+        return output;\n+    }\n+\n+    /**\n+     * Get the credential for the specified service and account name.\n+     *\n+     * @param serviceName the name of the service to lookup.\n+     * @param accountName the account of the service to lookup.\n+     * @return the credential.\n+     */\n+    public String getCredentials(String serviceName, String accountName) {\n+        String credential;\n+        if (Platform.isWindows()) {\n+            WindowsCredentialAccessor winCredAccessor =\n+                    new WindowsCredentialAccessor(serviceName, accountName);\n+            credential = winCredAccessor.read();\n+        } else if (Platform.isMac()) {\n+            KeyChainAccessor keyChainAccessor = new KeyChainAccessor(null,\n+                    serviceName, accountName);\n+\n+            byte[] readCreds = keyChainAccessor.read();\n+            credential = new String(readCreds, StandardCharsets.UTF_8);\n+        } else if (Platform.isLinux()) {\n+\n+            LinuxKeyRingAccessor keyRingAccessor = new LinuxKeyRingAccessor(\n+                    \"org.freedesktop.Secret.Generic\", \"service\",\n+                    serviceName, \"account\", accountName);\n+\n+            byte[] readCreds = keyRingAccessor.read();\n+            credential = new String(readCreds, StandardCharsets.UTF_8);\n+        } else {\n+            throw logger.logExceptionAsError(\n+                new CredentialUnavailableException(\"Platform could not be determined for VsCode\"\n+                                                           + \" Credential authentication.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ba31cf17352e3cb305f2e8ca3d33bdb77b811e4"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE3NDIzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            new CredentialUnavailableException(\"Platform could not be determined for VsCode\"\n          \n          \n            \n                            new CredentialUnavailableException(\"Platform could not be determined for VS Code\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#discussion_r416174231", "createdAt": "2020-04-27T21:51:08Z", "author": {"login": "JonathanGiles"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/VisualStudioCacheAccessor.java", "diffHunk": "@@ -0,0 +1,128 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.identity.CredentialUnavailableException;\n+import com.azure.identity.KnownAuthorityHosts;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.microsoft.aad.msal4jextensions.persistence.mac.KeyChainAccessor;\n+import com.sun.jna.Platform;\n+\n+import java.io.File;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Paths;\n+\n+/**\n+ * This class allows access to Visual Studio Code cached credential data.\n+ */\n+public class VisualStudioCacheAccessor {\n+    private final ClientLogger logger = new ClientLogger(VisualStudioCacheAccessor.class);\n+\n+    /**\n+     * Creates an instance of {@link VisualStudioCacheAccessor}\n+     */\n+    public VisualStudioCacheAccessor() { }\n+\n+    /**\n+     * Get the user configured settings of Visual Studio code.\n+     * @return the {@link JsonNode} holding the settings as properties.\n+     */\n+    public JsonNode getUserSettings() {\n+        JsonNode output = null;\n+        String homeDir = System.getProperty(\"user.home\");\n+        String settingsPath = \"\";\n+        ObjectMapper mapper = new ObjectMapper();\n+        try {\n+            if (Platform.isWindows()) {\n+                settingsPath = Paths.get(System.getenv(\"APPDATA\"), \"Code\", \"User\", \"settings.json\")\n+                        .toString();\n+            } else if (Platform.isMac()) {\n+                settingsPath = Paths.get(homeDir, \"Library\",\n+                        \"Application Support\", \"Code\", \"User\", \"settings.json\").toString();\n+            } else if (Platform.isLinux()) {\n+                settingsPath = Paths.get(homeDir, \".config\", \"Code\", \"User\", \"settings.json\")\n+                        .toString();\n+            }\n+            File settingsFile = new File(settingsPath);\n+            output = mapper.readTree(settingsFile);\n+        } catch (Exception e) {\n+            return output;\n+        }\n+        return output;\n+    }\n+\n+    /**\n+     * Get the credential for the specified service and account name.\n+     *\n+     * @param serviceName the name of the service to lookup.\n+     * @param accountName the account of the service to lookup.\n+     * @return the credential.\n+     */\n+    public String getCredentials(String serviceName, String accountName) {\n+        String credential;\n+        if (Platform.isWindows()) {\n+            WindowsCredentialAccessor winCredAccessor =\n+                    new WindowsCredentialAccessor(serviceName, accountName);\n+            credential = winCredAccessor.read();\n+        } else if (Platform.isMac()) {\n+            KeyChainAccessor keyChainAccessor = new KeyChainAccessor(null,\n+                    serviceName, accountName);\n+\n+            byte[] readCreds = keyChainAccessor.read();\n+            credential = new String(readCreds, StandardCharsets.UTF_8);\n+        } else if (Platform.isLinux()) {\n+\n+            LinuxKeyRingAccessor keyRingAccessor = new LinuxKeyRingAccessor(\n+                    \"org.freedesktop.Secret.Generic\", \"service\",\n+                    serviceName, \"account\", accountName);\n+\n+            byte[] readCreds = keyRingAccessor.read();\n+            credential = new String(readCreds, StandardCharsets.UTF_8);\n+        } else {\n+            throw logger.logExceptionAsError(\n+                new CredentialUnavailableException(\"Platform could not be determined for VsCode\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ba31cf17352e3cb305f2e8ca3d33bdb77b811e4"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d373008207ede1d3b69ba2750576878adcc8748", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8d373008207ede1d3b69ba2750576878adcc8748", "committedDate": "2020-04-29T21:22:12Z", "message": "address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1805fe9c36692bd8de3d7808d42db3751829967d", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1805fe9c36692bd8de3d7808d42db3751829967d", "committedDate": "2020-04-29T21:49:15Z", "message": "fix spotbug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5e5b2adaa5d91fa3ff9f9182c1c70f370bdca87", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c5e5b2adaa5d91fa3ff9f9182c1c70f370bdca87", "committedDate": "2020-04-29T22:05:34Z", "message": "Merge remote-tracking branch 'upstream/master' into vscode-credential"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMDg1NTM3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#pullrequestreview-403085537", "createdAt": "2020-04-29T22:30:13Z", "commit": {"oid": "c5e5b2adaa5d91fa3ff9f9182c1c70f370bdca87"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjozMDoxNFrOGOTW1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjozMDoxNFrOGOTW1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1MDM4OA==", "bodyText": "If you create a public client application every time we request a token there won't be any caching and each call to this method will result in a call to AAD.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#discussion_r417650388", "createdAt": "2020-04-29T22:30:14Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -429,6 +431,62 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n         }).map(ar -> new MsalToken(ar, options));\n     }\n \n+    /**\n+     * Asynchronously acquire a token from Active Directory with a device code challenge. Active Directory will provide\n+     * a device code for login and the user must meet the challenge by authenticating in a browser on the current or a\n+     * different device.\n+     *\n+     * @param request the details of the token request\n+     * @return a Publisher that emits an AccessToken when the device challenge is met, or an exception if the device\n+     *     code expires\n+     */\n+    public Mono<MsalToken> authenticateWithVsCodeCredential(TokenRequestContext request) {\n+\n+        VisualStudioCacheAccessor accessor = new VisualStudioCacheAccessor();\n+\n+        JsonNode userSettings = accessor.getUserSettings();\n+\n+        String tenant = tenantId;\n+        String cloud = \"Azure\";\n+\n+        if (!userSettings.isNull()) {\n+            if (userSettings.has(\"azure.tenant\")) {\n+                tenant = userSettings.get(\"azure.tenant\").asText();\n+            }\n+\n+            if (userSettings.has(\"azure.cloud\")) {\n+                cloud = userSettings.get(\"azure.cloud\").asText();\n+            }\n+        }\n+\n+        String credential = accessor.getCredentials(\"VS Code Azure\", cloud);\n+\n+        String authority = accessor.getAzureAuthHost(cloud).replaceAll(\"/+$\", \"\")\n+            + \"/organizations/\" + tenant;\n+        PublicClientApplication.Builder publicClientApplicationBuilder = PublicClientApplication.builder(clientId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e5b2adaa5d91fa3ff9f9182c1c70f370bdca87"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMDg5NTY3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#pullrequestreview-403089567", "createdAt": "2020-04-29T22:39:15Z", "commit": {"oid": "c5e5b2adaa5d91fa3ff9f9182c1c70f370bdca87"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjozOToxNVrOGOTkeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjozOToxNVrOGOTkeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1Mzg4Mg==", "bodyText": "The value in the vscode settings azure.cloud azure.tenant need to be overridden if the user specified a different AuthorityHost or TenantId when constructing the credential. This doesn't appear to allow for that as it seems to prefer the value in the settings file.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#discussion_r417653882", "createdAt": "2020-04-29T22:39:15Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -429,6 +431,62 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n         }).map(ar -> new MsalToken(ar, options));\n     }\n \n+    /**\n+     * Asynchronously acquire a token from Active Directory with a device code challenge. Active Directory will provide\n+     * a device code for login and the user must meet the challenge by authenticating in a browser on the current or a\n+     * different device.\n+     *\n+     * @param request the details of the token request\n+     * @return a Publisher that emits an AccessToken when the device challenge is met, or an exception if the device\n+     *     code expires\n+     */\n+    public Mono<MsalToken> authenticateWithVsCodeCredential(TokenRequestContext request) {\n+\n+        VisualStudioCacheAccessor accessor = new VisualStudioCacheAccessor();\n+\n+        JsonNode userSettings = accessor.getUserSettings();\n+\n+        String tenant = tenantId;\n+        String cloud = \"Azure\";\n+\n+        if (!userSettings.isNull()) {\n+            if (userSettings.has(\"azure.tenant\")) {\n+                tenant = userSettings.get(\"azure.tenant\").asText();\n+            }\n+\n+            if (userSettings.has(\"azure.cloud\")) {\n+                cloud = userSettings.get(\"azure.cloud\").asText();\n+            }\n+        }\n+\n+        String credential = accessor.getCredentials(\"VS Code Azure\", cloud);\n+\n+        String authority = accessor.getAzureAuthHost(cloud).replaceAll(\"/+$\", \"\")\n+            + \"/organizations/\" + tenant;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e5b2adaa5d91fa3ff9f9182c1c70f370bdca87"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMTQzNjcz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#pullrequestreview-403143673", "createdAt": "2020-04-30T01:16:34Z", "commit": {"oid": "c5e5b2adaa5d91fa3ff9f9182c1c70f370bdca87"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMToxNjozNFrOGOWgqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMToyMDo1OVrOGOWk6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwMjA1OA==", "bodyText": "Comment on why this suppression is necessary please.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#discussion_r417702058", "createdAt": "2020-04-30T01:16:34Z", "author": {"login": "JonathanGiles"}, "path": "eng/code-quality-reports/src/main/resources/checkstyle/checkstyle-suppressions.xml", "diffHunk": "@@ -257,6 +257,9 @@\n   <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\"\n             files=\"com.azure.endtoend.identity.WebJobsIdentityTest.java\"/>\n \n+  <suppress checks=\"MethodName|MemberName|VisibilityModifier|TypeName\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e5b2adaa5d91fa3ff9f9182c1c70f370bdca87"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwMzE0NA==", "bodyText": "Why did you choose to wrap the MalformedURLException in an IllegalStateException?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#discussion_r417703144", "createdAt": "2020-04-30T01:20:59Z", "author": {"login": "JonathanGiles"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -429,6 +431,62 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n         }).map(ar -> new MsalToken(ar, options));\n     }\n \n+    /**\n+     * Asynchronously acquire a token from Active Directory with a device code challenge. Active Directory will provide\n+     * a device code for login and the user must meet the challenge by authenticating in a browser on the current or a\n+     * different device.\n+     *\n+     * @param request the details of the token request\n+     * @return a Publisher that emits an AccessToken when the device challenge is met, or an exception if the device\n+     *     code expires\n+     */\n+    public Mono<MsalToken> authenticateWithVsCodeCredential(TokenRequestContext request) {\n+\n+        VisualStudioCacheAccessor accessor = new VisualStudioCacheAccessor();\n+\n+        JsonNode userSettings = accessor.getUserSettings();\n+\n+        String tenant = tenantId;\n+        String cloud = \"Azure\";\n+\n+        if (!userSettings.isNull()) {\n+            if (userSettings.has(\"azure.tenant\")) {\n+                tenant = userSettings.get(\"azure.tenant\").asText();\n+            }\n+\n+            if (userSettings.has(\"azure.cloud\")) {\n+                cloud = userSettings.get(\"azure.cloud\").asText();\n+            }\n+        }\n+\n+        String credential = accessor.getCredentials(\"VS Code Azure\", cloud);\n+\n+        String authority = accessor.getAzureAuthHost(cloud).replaceAll(\"/+$\", \"\")\n+            + \"/organizations/\" + tenant;\n+        PublicClientApplication.Builder publicClientApplicationBuilder = PublicClientApplication.builder(clientId);\n+        if (httpPipelineAdapter != null) {\n+            publicClientApplicationBuilder.httpClient(httpPipelineAdapter);\n+        } else if (options.getProxyOptions() != null) {\n+            publicClientApplicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n+        }\n+\n+        try {\n+            PublicClientApplication clientApplication =  publicClientApplicationBuilder\n+                                                             .authority(authority)\n+                                                             .build();\n+\n+            RefreshTokenParameters parameters = RefreshTokenParameters\n+                                                    .builder(new HashSet<>(request.getScopes()), credential)\n+                                                    .build();\n+\n+            return Mono.defer(() -> Mono.fromFuture(clientApplication.acquireToken(parameters))\n+                                        .map(ar -> new MsalToken(ar, options)));\n+\n+        } catch (MalformedURLException e) {\n+            return Mono.error(logger.logExceptionAsError(new IllegalStateException(e)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e5b2adaa5d91fa3ff9f9182c1c70f370bdca87"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38d6932187f11104e0b5dc1eec9101f2e3d6119f", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/38d6932187f11104e0b5dc1eec9101f2e3d6119f", "committedDate": "2020-04-30T17:33:21Z", "message": "address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac639cd4d3934e6cf7ef21f1cf783113d8177ded", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ac639cd4d3934e6cf7ef21f1cf783113d8177ded", "committedDate": "2020-04-30T18:04:04Z", "message": "address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c23e0418f2051fe85427ffc56f359e297321d938", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c23e0418f2051fe85427ffc56f359e297321d938", "committedDate": "2020-04-30T18:05:32Z", "message": "docs update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNzg3Nzg1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#pullrequestreview-403787785", "createdAt": "2020-04-30T18:48:58Z", "commit": {"oid": "c23e0418f2051fe85427ffc56f359e297321d938"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODA3NjQ2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#pullrequestreview-403807646", "createdAt": "2020-04-30T19:17:11Z", "commit": {"oid": "c23e0418f2051fe85427ffc56f359e297321d938"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOToxNzoxMlrOGO28zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOToyMDo0MFrOGO3Dpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzMzU1MQ==", "bodyText": "This code can be replaced by return str.matches(\"^[-_.a-zA-Z0-9]+$\")", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#discussion_r418233551", "createdAt": "2020-04-30T19:17:12Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/VisualStudioCacheAccessor.java", "diffHunk": "@@ -0,0 +1,185 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.identity.CredentialUnavailableException;\n+import com.azure.identity.KnownAuthorityHosts;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.microsoft.aad.msal4jextensions.persistence.mac.KeyChainAccessor;\n+import com.sun.jna.Platform;\n+\n+import java.io.File;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * This class allows access to Visual Studio Code cached credential data.\n+ */\n+public class VisualStudioCacheAccessor {\n+    private static final String PLATFORM_NOT_SUPPORTED_ERROR = \"Platform could not be determined for VS Code\"\n+                                               + \" credential authentication.\";\n+    private final ClientLogger logger = new ClientLogger(VisualStudioCacheAccessor.class);\n+\n+    /**\n+     * Creates an instance of {@link VisualStudioCacheAccessor}\n+     */\n+    public VisualStudioCacheAccessor() { }\n+\n+\n+    private JsonNode getUserSettings() {\n+        JsonNode output = null;\n+        String homeDir = System.getProperty(\"user.home\");\n+        String settingsPath = \"\";\n+        ObjectMapper mapper = new ObjectMapper();\n+        try {\n+            if (Platform.isWindows()) {\n+                settingsPath = Paths.get(System.getenv(\"APPDATA\"), \"Code\", \"User\", \"settings.json\")\n+                        .toString();\n+            } else if (Platform.isMac()) {\n+                settingsPath = Paths.get(homeDir, \"Library\",\n+                        \"Application Support\", \"Code\", \"User\", \"settings.json\").toString();\n+            } else if (Platform.isLinux()) {\n+                settingsPath = Paths.get(homeDir, \".config\", \"Code\", \"User\", \"settings.json\")\n+                        .toString();\n+            }  else {\n+                throw logger.logExceptionAsError(\n+                        new CredentialUnavailableException(PLATFORM_NOT_SUPPORTED_ERROR));\n+            }\n+            File settingsFile = new File(settingsPath);\n+            output = mapper.readTree(settingsFile);\n+        } catch (Exception e) {\n+            return null;\n+        }\n+        return output;\n+    }\n+\n+    /**\n+     * Get the user configured settings of Visual Studio code.\n+     *\n+     * @param tenantId the user specified tenant id.\n+     * @return a Map containing Vs Code user settings\n+     */\n+    public Map<String, String> getUserSettingsDetails(String tenantId) {\n+        JsonNode userSettings = getUserSettings();\n+        Map<String, String> details = new HashMap<>();\n+\n+        String tenant = tenantId;\n+\n+        String cloud = \"Azure\";\n+\n+        if (!userSettings.isNull()) {\n+            if (userSettings.has(\"azure.tenant\") && CoreUtils.isNullOrEmpty(tenant)) {\n+                tenant = userSettings.get(\"azure.tenant\").asText();\n+            }\n+\n+            if (userSettings.has(\"azure.cloud\")) {\n+                cloud = userSettings.get(\"azure.cloud\").asText();\n+            }\n+        }\n+\n+        details.put(\"tenant\", tenant);\n+        details.put(\"cloud\", cloud);\n+        return details;\n+    }\n+\n+\n+\n+    /**\n+     * Get the credential for the specified service and account name.\n+     *\n+     * @param serviceName the name of the service to lookup.\n+     * @param accountName the account of the service to lookup.\n+     * @return the credential.\n+     */\n+    public String getCredentials(String serviceName, String accountName) {\n+        String credential;\n+\n+        if (Platform.isWindows()) {\n+\n+            try {\n+                WindowsCredentialAccessor winCredAccessor =\n+                        new WindowsCredentialAccessor(serviceName, accountName);\n+                credential = winCredAccessor.read();\n+            } catch (RuntimeException e) {\n+                throw logger.logExceptionAsError(new CredentialUnavailableException(\n+                        \"Failed to read Vs Code credentials from Windows Credential API.\", e));\n+            }\n+\n+        } else if (Platform.isMac()) {\n+\n+            try {\n+                KeyChainAccessor keyChainAccessor = new KeyChainAccessor(null,\n+                        serviceName, accountName);\n+\n+                byte[] readCreds = keyChainAccessor.read();\n+                credential = new String(readCreds, StandardCharsets.UTF_8);\n+            } catch (RuntimeException e) {\n+                throw logger.logExceptionAsError(new CredentialUnavailableException(\n+                        \"Failed to read Vs Code credentials from Mac Native Key Chain.\", e));\n+            }\n+\n+        } else if (Platform.isLinux()) {\n+\n+            try {\n+                LinuxKeyRingAccessor keyRingAccessor = new LinuxKeyRingAccessor(\n+                        \"org.freedesktop.Secret.Generic\", \"service\",\n+                        serviceName, \"account\", accountName);\n+\n+                byte[] readCreds = keyRingAccessor.read();\n+                credential = new String(readCreds, StandardCharsets.UTF_8);\n+            } catch (RuntimeException e) {\n+                throw logger.logExceptionAsError(new CredentialUnavailableException(\n+                        \"Failed to read Vs Code credentials from Linux Key Ring.\", e));\n+            }\n+\n+        } else {\n+            throw logger.logExceptionAsError(\n+                new CredentialUnavailableException(PLATFORM_NOT_SUPPORTED_ERROR));\n+        }\n+\n+        if (CoreUtils.isNullOrEmpty(credential) || !isRefreshTokenString(credential)) {\n+            throw logger.logExceptionAsError(\n+                    new CredentialUnavailableException(\"Please authenticate via Azure Tools plugin in VS Code IDE.\"));\n+        }\n+        return credential;\n+    }\n+\n+    private boolean isRefreshTokenString(String str) {\n+        for (int i = 0; i < str.length(); i++) {\n+            char ch = str.charAt(i);\n+            if ((ch < '0' || ch > '9') && (ch < 'A' || ch > 'Z') && (ch < 'a' || ch > 'z')\n+                        && ch != '_' && ch != '-' && ch != '.') {\n+                return false;\n+            }\n+        }\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c23e0418f2051fe85427ffc56f359e297321d938"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzNTMwMw==", "bodyText": "This ctor is not necessary.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#discussion_r418235303", "createdAt": "2020-04-30T19:20:40Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/VisualStudioCacheAccessor.java", "diffHunk": "@@ -0,0 +1,185 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.identity.CredentialUnavailableException;\n+import com.azure.identity.KnownAuthorityHosts;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.microsoft.aad.msal4jextensions.persistence.mac.KeyChainAccessor;\n+import com.sun.jna.Platform;\n+\n+import java.io.File;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * This class allows access to Visual Studio Code cached credential data.\n+ */\n+public class VisualStudioCacheAccessor {\n+    private static final String PLATFORM_NOT_SUPPORTED_ERROR = \"Platform could not be determined for VS Code\"\n+                                               + \" credential authentication.\";\n+    private final ClientLogger logger = new ClientLogger(VisualStudioCacheAccessor.class);\n+\n+    /**\n+     * Creates an instance of {@link VisualStudioCacheAccessor}\n+     */\n+    public VisualStudioCacheAccessor() { }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c23e0418f2051fe85427ffc56f359e297321d938"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6688ece35e70fa11f675b61e2bf320948513ccd2", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6688ece35e70fa11f675b61e2bf320948513ccd2", "committedDate": "2020-05-01T03:43:36Z", "message": "add null check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76f937ef56e6c07a1d6e7f8ef94dd9fa3c97fd5b", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/76f937ef56e6c07a1d6e7f8ef94dd9fa3c97fd5b", "committedDate": "2020-05-01T18:25:54Z", "message": "Merge remote-tracking branch 'upstream/master' into vscode-credential"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed0c1eeb4f555de32735a824e0161a06b34fc0ff", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ed0c1eeb4f555de32735a824e0161a06b34fc0ff", "committedDate": "2020-05-01T18:35:08Z", "message": "remove accessor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0Mzc0MzA5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#pullrequestreview-404374309", "createdAt": "2020-05-01T20:09:25Z", "commit": {"oid": "ed0c1eeb4f555de32735a824e0161a06b34fc0ff"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d697f18e1a75b04705d445a245d629db47a9ea3", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6d697f18e1a75b04705d445a245d629db47a9ea3", "committedDate": "2020-05-03T21:33:01Z", "message": "update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0Njg4NzMz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10368#pullrequestreview-404688733", "createdAt": "2020-05-04T02:41:44Z", "commit": {"oid": "6d697f18e1a75b04705d445a245d629db47a9ea3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4696, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}