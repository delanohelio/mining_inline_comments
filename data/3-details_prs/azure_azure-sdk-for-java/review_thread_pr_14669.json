{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NjU4MDQx", "number": 14669, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo0MjozM1rOEehclg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTo1Mjo0NlrOEfoX1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNDQwNzI2OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/options/RemoveAccessControlRecursiveOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo0MjozM1rOHKN5-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzoxOTo1NVrOHMPIMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NTY0MQ==", "bodyText": "I think our pattern for these are to add what resource it applies to at the beginning. So I think the options for this PR should be prefixed with Path", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r480475641", "createdAt": "2020-08-31T23:42:33Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/options/RemoveAccessControlRecursiveOptions.java", "diffHunk": "@@ -0,0 +1,162 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.options;\n+\n+import com.azure.core.http.rest.Response;\n+import com.azure.storage.file.datalake.models.AccessControlChanges;\n+import com.azure.storage.file.datalake.models.RemovePathAccessControlEntry;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Optional parameters for Remove Access Control Recursive.\n+ */\n+public class RemoveAccessControlRecursiveOptions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3016175a893894bd9c0a6bc5bc460a5716df8135"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5MjgxNw==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r482592817", "createdAt": "2020-09-02T23:19:55Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/options/RemoveAccessControlRecursiveOptions.java", "diffHunk": "@@ -0,0 +1,162 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.options;\n+\n+import com.azure.core.http.rest.Response;\n+import com.azure.storage.file.datalake.models.AccessControlChanges;\n+import com.azure.storage.file.datalake.models.RemovePathAccessControlEntry;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Optional parameters for Remove Access Control Recursive.\n+ */\n+public class RemoveAccessControlRecursiveOptions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NTY0MQ=="}, "originalCommit": {"oid": "3016175a893894bd9c0a6bc5bc460a5716df8135"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTA4MzQwOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-datalake/CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTo0OTo0NlrOHK86HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzoyMDoyN1rOHMPJwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NTcyNA==", "bodyText": "merge remnant", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r481245724", "createdAt": "2020-09-01T15:49:46Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-file-datalake/CHANGELOG.md", "diffHunk": "@@ -2,8 +2,10 @@\n \n ## 12.3.0-beta.1 (Unreleased)\n - Added support for the 2019-02-10 service version.\n+- Added support for setting, modifying, and removing ACLs recursively.\n - Added support to schedule file expiration. \n - Added support to specify Arrow Output Serialization when querying a file. \n+>>>>>>> upstream/feature/storage/stg74", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "024623bdcab7e8fbd4b22c1eac3d2cf4f529f45d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5MzIxOA==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r482593218", "createdAt": "2020-09-02T23:20:27Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-datalake/CHANGELOG.md", "diffHunk": "@@ -2,8 +2,10 @@\n \n ## 12.3.0-beta.1 (Unreleased)\n - Added support for the 2019-02-10 service version.\n+- Added support for setting, modifying, and removing ACLs recursively.\n - Added support to schedule file expiration. \n - Added support to specify Arrow Output Serialization when querying a file. \n+>>>>>>> upstream/feature/storage/stg74", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NTcyNA=="}, "originalCommit": {"oid": "024623bdcab7e8fbd4b22c1eac3d2cf4f529f45d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTA4NTE1OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-datalake/CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTo1MDowNVrOHK87FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzoyMjowNlrOHMPOGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NTk3Mw==", "bodyText": "I know this is probably my bad but can you change that to 2020?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r481245973", "createdAt": "2020-09-01T15:50:05Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-file-datalake/CHANGELOG.md", "diffHunk": "@@ -2,8 +2,10 @@\n \n ## 12.3.0-beta.1 (Unreleased)\n - Added support for the 2019-02-10 service version.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "024623bdcab7e8fbd4b22c1eac3d2cf4f529f45d"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5NDMzMA==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r482594330", "createdAt": "2020-09-02T23:22:06Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-datalake/CHANGELOG.md", "diffHunk": "@@ -2,8 +2,10 @@\n \n ## 12.3.0-beta.1 (Unreleased)\n - Added support for the 2019-02-10 service version.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NTk3Mw=="}, "originalCommit": {"oid": "024623bdcab7e8fbd4b22c1eac3d2cf4f529f45d"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTA5NTc0OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakePathAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTo1MjozM1rOHK9BmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzoyMjoyNlrOHMPPEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NzY0MA==", "bodyText": "Can we make this something like Recursively sets access control on a path and its subpaths, and so on? Right now it could read as just 2 levels", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r481247640", "createdAt": "2020-09-01T15:52:33Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakePathAsyncClient.java", "diffHunk": "@@ -635,6 +649,260 @@ public DataLakeServiceVersion getServiceVersion() {\n                 response.getDeserializedHeaders().getLastModified())));\n     }\n \n+    /**\n+     * Sets the access control on a path and subpaths.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "024623bdcab7e8fbd4b22c1eac3d2cf4f529f45d"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5NDU3OA==", "bodyText": "Ya", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r482594578", "createdAt": "2020-09-02T23:22:26Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakePathAsyncClient.java", "diffHunk": "@@ -635,6 +649,260 @@ public DataLakeServiceVersion getServiceVersion() {\n                 response.getDeserializedHeaders().getLastModified())));\n     }\n \n+    /**\n+     * Sets the access control on a path and subpaths.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NzY0MA=="}, "originalCommit": {"oid": "024623bdcab7e8fbd4b22c1eac3d2cf4f529f45d"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTcyNDk4OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakePathClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODozMzowMFrOHLDNcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzozMjoxOVrOHMPhIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0ODk3OQ==", "bodyText": "Should we do the try catch error thing here so we can log it?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r481348979", "createdAt": "2020-09-01T18:33:00Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakePathClient.java", "diffHunk": "@@ -354,6 +362,140 @@ public PathInfo setPermissions(PathPermissions permissions, String group, String\n         return StorageImplUtils.blockWithOptionalTimeout(response, timeout);\n     }\n \n+    /**\n+     * Sets the access control on a path and subpaths.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.datalake.DataLakePathClient.setAccessControlRecursive#List}\n+     *\n+     * <p>For more information, see the\n+     * <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update\">Azure Docs</a></p>\n+     *\n+     * @param accessControlList The POSIX access control list for the file or directory.\n+     * @return The result of the operation.\n+     */\n+    public AccessControlChangeResult setAccessControlRecursive(List<PathAccessControlEntry> accessControlList) {\n+        return setAccessControlRecursiveWithResponse(new DirectorySetAccessControlRecursiveOptions(accessControlList), null,\n+            Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Sets the access control on a path and subpaths.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.datalake.DataLakePathClient.setAccessControlRecursive#SetAccessControlRecursiveOptions-Duration-Context}\n+     *\n+     * <p>For more information, see the\n+     * <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update\">Azure Docs</a></p>\n+     *\n+     * @param options {@link DirectorySetAccessControlRecursiveOptions}\n+     * @param timeout An optional timeout value beyond which a {@link RuntimeException} will be raised.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A response containing the result of the operation.\n+     */\n+    public Response<AccessControlChangeResult> setAccessControlRecursiveWithResponse(\n+        DirectorySetAccessControlRecursiveOptions options, Duration timeout, Context context) {\n+        Mono<Response<AccessControlChangeResult>> response =\n+            dataLakePathAsyncClient.setAccessControlRecursiveWithResponse(\n+                PathAccessControlEntry.serializeList(options.getAccessControlList()), options.getProgressHandler(),\n+                PathSetAccessControlRecursiveMode.SET, options.getBatchSize(), options.getMaxBatches(),\n+                options.isContinuingOnFailure(), options.getContinuationToken(), context);\n+\n+        return StorageImplUtils.blockWithOptionalTimeout(response, timeout);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "024623bdcab7e8fbd4b22c1eac3d2cf4f529f45d"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5ODYyOQ==", "bodyText": "Yea idk why we don't do it on all the datalake methods. I'll add it to all the other ones, too", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r482598629", "createdAt": "2020-09-02T23:30:25Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakePathClient.java", "diffHunk": "@@ -354,6 +362,140 @@ public PathInfo setPermissions(PathPermissions permissions, String group, String\n         return StorageImplUtils.blockWithOptionalTimeout(response, timeout);\n     }\n \n+    /**\n+     * Sets the access control on a path and subpaths.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.datalake.DataLakePathClient.setAccessControlRecursive#List}\n+     *\n+     * <p>For more information, see the\n+     * <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update\">Azure Docs</a></p>\n+     *\n+     * @param accessControlList The POSIX access control list for the file or directory.\n+     * @return The result of the operation.\n+     */\n+    public AccessControlChangeResult setAccessControlRecursive(List<PathAccessControlEntry> accessControlList) {\n+        return setAccessControlRecursiveWithResponse(new DirectorySetAccessControlRecursiveOptions(accessControlList), null,\n+            Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Sets the access control on a path and subpaths.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.datalake.DataLakePathClient.setAccessControlRecursive#SetAccessControlRecursiveOptions-Duration-Context}\n+     *\n+     * <p>For more information, see the\n+     * <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update\">Azure Docs</a></p>\n+     *\n+     * @param options {@link DirectorySetAccessControlRecursiveOptions}\n+     * @param timeout An optional timeout value beyond which a {@link RuntimeException} will be raised.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A response containing the result of the operation.\n+     */\n+    public Response<AccessControlChangeResult> setAccessControlRecursiveWithResponse(\n+        DirectorySetAccessControlRecursiveOptions options, Duration timeout, Context context) {\n+        Mono<Response<AccessControlChangeResult>> response =\n+            dataLakePathAsyncClient.setAccessControlRecursiveWithResponse(\n+                PathAccessControlEntry.serializeList(options.getAccessControlList()), options.getProgressHandler(),\n+                PathSetAccessControlRecursiveMode.SET, options.getBatchSize(), options.getMaxBatches(),\n+                options.isContinuingOnFailure(), options.getContinuationToken(), context);\n+\n+        return StorageImplUtils.blockWithOptionalTimeout(response, timeout);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0ODk3OQ=="}, "originalCommit": {"oid": "024623bdcab7e8fbd4b22c1eac3d2cf4f529f45d"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5OTIwMA==", "bodyText": "Hmm. Looks like we don't do that for any of the methods in BlobClientBase either, so I think it'd be better to do that as a separate PR", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r482599200", "createdAt": "2020-09-02T23:32:19Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakePathClient.java", "diffHunk": "@@ -354,6 +362,140 @@ public PathInfo setPermissions(PathPermissions permissions, String group, String\n         return StorageImplUtils.blockWithOptionalTimeout(response, timeout);\n     }\n \n+    /**\n+     * Sets the access control on a path and subpaths.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.datalake.DataLakePathClient.setAccessControlRecursive#List}\n+     *\n+     * <p>For more information, see the\n+     * <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update\">Azure Docs</a></p>\n+     *\n+     * @param accessControlList The POSIX access control list for the file or directory.\n+     * @return The result of the operation.\n+     */\n+    public AccessControlChangeResult setAccessControlRecursive(List<PathAccessControlEntry> accessControlList) {\n+        return setAccessControlRecursiveWithResponse(new DirectorySetAccessControlRecursiveOptions(accessControlList), null,\n+            Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Sets the access control on a path and subpaths.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.datalake.DataLakePathClient.setAccessControlRecursive#SetAccessControlRecursiveOptions-Duration-Context}\n+     *\n+     * <p>For more information, see the\n+     * <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update\">Azure Docs</a></p>\n+     *\n+     * @param options {@link DirectorySetAccessControlRecursiveOptions}\n+     * @param timeout An optional timeout value beyond which a {@link RuntimeException} will be raised.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A response containing the result of the operation.\n+     */\n+    public Response<AccessControlChangeResult> setAccessControlRecursiveWithResponse(\n+        DirectorySetAccessControlRecursiveOptions options, Duration timeout, Context context) {\n+        Mono<Response<AccessControlChangeResult>> response =\n+            dataLakePathAsyncClient.setAccessControlRecursiveWithResponse(\n+                PathAccessControlEntry.serializeList(options.getAccessControlList()), options.getProgressHandler(),\n+                PathSetAccessControlRecursiveMode.SET, options.getBatchSize(), options.getMaxBatches(),\n+                options.isContinuingOnFailure(), options.getContinuationToken(), context);\n+\n+        return StorageImplUtils.blockWithOptionalTimeout(response, timeout);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0ODk3OQ=="}, "originalCommit": {"oid": "024623bdcab7e8fbd4b22c1eac3d2cf4f529f45d"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTc1NTcyOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/options/DirectoryUpdateAccessControlRecursiveOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo0MjoyMVrOHLDgbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzozNzoxOFrOHMPm3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1MzgzNg==", "bodyText": "operation continues till end or error", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r481353836", "createdAt": "2020-09-01T18:42:21Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/options/DirectoryUpdateAccessControlRecursiveOptions.java", "diffHunk": "@@ -0,0 +1,162 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.options;\n+\n+import com.azure.core.http.rest.Response;\n+import com.azure.storage.file.datalake.models.AccessControlChanges;\n+import com.azure.storage.file.datalake.models.PathAccessControlEntry;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Optional parameters for Update Access Control Recursive.\n+ */\n+public class DirectoryUpdateAccessControlRecursiveOptions {\n+    private final List<PathAccessControlEntry> accessControlList;\n+    private Integer batchSize;\n+    private Integer maxBatches;\n+    private Consumer<Response<AccessControlChanges>> progressHandler;\n+    private String continuationToken;\n+    private boolean continueOnFailure;\n+\n+    /**\n+     * Constructs a new options object.\n+     * @param accessControlList The POSIX access control list for the file or directory.\n+     */\n+    public DirectoryUpdateAccessControlRecursiveOptions(List<PathAccessControlEntry> accessControlList) {\n+        this.accessControlList = Collections.unmodifiableList(accessControlList);\n+    }\n+\n+    /**\n+     * Returns the POSIX access control list for the file or directory.\n+     *\n+     * @return The POSIX access control list for the file or directory.\n+     */\n+    public List<PathAccessControlEntry> getAccessControlList() {\n+        return accessControlList;\n+    }\n+\n+    /**\n+     * Gets the batch size.\n+     * <p>\n+     * If data set size exceeds batch size then operation will be split into multiple requests so that progress can be\n+     * tracked. Batch size should be between 1 and 2000. The default when unspecified is 2000.\n+     *\n+     * @return The size of the batch.\n+     */\n+    public Integer getBatchSize() {\n+        return batchSize;\n+    }\n+\n+    /**\n+     * Sets the batch size.\n+     * <p>\n+     * If data set size exceeds batch size then operation will be split into multiple requests so that progress can be\n+     * tracked. Batch size should be between 1 and 2000. The default when unspecified is 2000.\n+     *\n+     * @param batchSize The size of the batch.\n+     * @return The updated object.\n+     */\n+    public DirectoryUpdateAccessControlRecursiveOptions setBatchSize(Integer batchSize) {\n+        this.batchSize = batchSize;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the maximum number of batches that single change Access Control operation can execute.\n+     * <p>\n+     * If maximum is reached before all subpaths are processed then continuation token can be used to resume operation.\n+     * Empty value indicates that maximum number of batches in unbound and operation continues till end.\n+     *\n+     * @return The maximum number of batches.\n+     */\n+    public Integer getMaxBatches() {\n+        return maxBatches;\n+    }\n+\n+    /**\n+     * Sets the maximum number of batches that single change Access Control operation can execute.\n+     * <p>\n+     * If maximum is reached before all subpaths are processed then continuation token can be used to resume operation.\n+     * Empty value indicates that maximum number of batches in unbound and operation continues till end.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "024623bdcab7e8fbd4b22c1eac3d2cf4f529f45d"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwMDY3MQ==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r482600671", "createdAt": "2020-09-02T23:37:18Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/options/DirectoryUpdateAccessControlRecursiveOptions.java", "diffHunk": "@@ -0,0 +1,162 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.options;\n+\n+import com.azure.core.http.rest.Response;\n+import com.azure.storage.file.datalake.models.AccessControlChanges;\n+import com.azure.storage.file.datalake.models.PathAccessControlEntry;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Optional parameters for Update Access Control Recursive.\n+ */\n+public class DirectoryUpdateAccessControlRecursiveOptions {\n+    private final List<PathAccessControlEntry> accessControlList;\n+    private Integer batchSize;\n+    private Integer maxBatches;\n+    private Consumer<Response<AccessControlChanges>> progressHandler;\n+    private String continuationToken;\n+    private boolean continueOnFailure;\n+\n+    /**\n+     * Constructs a new options object.\n+     * @param accessControlList The POSIX access control list for the file or directory.\n+     */\n+    public DirectoryUpdateAccessControlRecursiveOptions(List<PathAccessControlEntry> accessControlList) {\n+        this.accessControlList = Collections.unmodifiableList(accessControlList);\n+    }\n+\n+    /**\n+     * Returns the POSIX access control list for the file or directory.\n+     *\n+     * @return The POSIX access control list for the file or directory.\n+     */\n+    public List<PathAccessControlEntry> getAccessControlList() {\n+        return accessControlList;\n+    }\n+\n+    /**\n+     * Gets the batch size.\n+     * <p>\n+     * If data set size exceeds batch size then operation will be split into multiple requests so that progress can be\n+     * tracked. Batch size should be between 1 and 2000. The default when unspecified is 2000.\n+     *\n+     * @return The size of the batch.\n+     */\n+    public Integer getBatchSize() {\n+        return batchSize;\n+    }\n+\n+    /**\n+     * Sets the batch size.\n+     * <p>\n+     * If data set size exceeds batch size then operation will be split into multiple requests so that progress can be\n+     * tracked. Batch size should be between 1 and 2000. The default when unspecified is 2000.\n+     *\n+     * @param batchSize The size of the batch.\n+     * @return The updated object.\n+     */\n+    public DirectoryUpdateAccessControlRecursiveOptions setBatchSize(Integer batchSize) {\n+        this.batchSize = batchSize;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the maximum number of batches that single change Access Control operation can execute.\n+     * <p>\n+     * If maximum is reached before all subpaths are processed then continuation token can be used to resume operation.\n+     * Empty value indicates that maximum number of batches in unbound and operation continues till end.\n+     *\n+     * @return The maximum number of batches.\n+     */\n+    public Integer getMaxBatches() {\n+        return maxBatches;\n+    }\n+\n+    /**\n+     * Sets the maximum number of batches that single change Access Control operation can execute.\n+     * <p>\n+     * If maximum is reached before all subpaths are processed then continuation token can be used to resume operation.\n+     * Empty value indicates that maximum number of batches in unbound and operation continues till end.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1MzgzNg=="}, "originalCommit": {"oid": "024623bdcab7e8fbd4b22c1eac3d2cf4f529f45d"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTc1NzY3OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/options/DirectoryUpdateAccessControlRecursiveOptions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo0MzowNFrOHLDhug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo0MzowNFrOHLDhug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NDE3MA==", "bodyText": "return Collections.unmodifiable list here as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r481354170", "createdAt": "2020-09-01T18:43:04Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/options/DirectoryUpdateAccessControlRecursiveOptions.java", "diffHunk": "@@ -0,0 +1,162 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.options;\n+\n+import com.azure.core.http.rest.Response;\n+import com.azure.storage.file.datalake.models.AccessControlChanges;\n+import com.azure.storage.file.datalake.models.PathAccessControlEntry;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Optional parameters for Update Access Control Recursive.\n+ */\n+public class DirectoryUpdateAccessControlRecursiveOptions {\n+    private final List<PathAccessControlEntry> accessControlList;\n+    private Integer batchSize;\n+    private Integer maxBatches;\n+    private Consumer<Response<AccessControlChanges>> progressHandler;\n+    private String continuationToken;\n+    private boolean continueOnFailure;\n+\n+    /**\n+     * Constructs a new options object.\n+     * @param accessControlList The POSIX access control list for the file or directory.\n+     */\n+    public DirectoryUpdateAccessControlRecursiveOptions(List<PathAccessControlEntry> accessControlList) {\n+        this.accessControlList = Collections.unmodifiableList(accessControlList);\n+    }\n+\n+    /**\n+     * Returns the POSIX access control list for the file or directory.\n+     *\n+     * @return The POSIX access control list for the file or directory.\n+     */\n+    public List<PathAccessControlEntry> getAccessControlList() {\n+        return accessControlList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "024623bdcab7e8fbd4b22c1eac3d2cf4f529f45d"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTc1OTAyOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/options/DirectoryUpdateAccessControlRecursiveOptions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo0MzozMFrOHLDimQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNjowMDo0NVrOHMtZEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NDM5Mw==", "bodyText": "Should we add a null check here? or protect the call to Collections.unmodifiable list", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r481354393", "createdAt": "2020-09-01T18:43:30Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/options/DirectoryUpdateAccessControlRecursiveOptions.java", "diffHunk": "@@ -0,0 +1,162 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.options;\n+\n+import com.azure.core.http.rest.Response;\n+import com.azure.storage.file.datalake.models.AccessControlChanges;\n+import com.azure.storage.file.datalake.models.PathAccessControlEntry;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Optional parameters for Update Access Control Recursive.\n+ */\n+public class DirectoryUpdateAccessControlRecursiveOptions {\n+    private final List<PathAccessControlEntry> accessControlList;\n+    private Integer batchSize;\n+    private Integer maxBatches;\n+    private Consumer<Response<AccessControlChanges>> progressHandler;\n+    private String continuationToken;\n+    private boolean continueOnFailure;\n+\n+    /**\n+     * Constructs a new options object.\n+     * @param accessControlList The POSIX access control list for the file or directory.\n+     */\n+    public DirectoryUpdateAccessControlRecursiveOptions(List<PathAccessControlEntry> accessControlList) {\n+        this.accessControlList = Collections.unmodifiableList(accessControlList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "024623bdcab7e8fbd4b22c1eac3d2cf4f529f45d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzODQxMQ==", "bodyText": "Yea. And I think I need to add null checks to the internal implementation method, too", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r481438411", "createdAt": "2020-09-01T21:20:18Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/options/DirectoryUpdateAccessControlRecursiveOptions.java", "diffHunk": "@@ -0,0 +1,162 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.options;\n+\n+import com.azure.core.http.rest.Response;\n+import com.azure.storage.file.datalake.models.AccessControlChanges;\n+import com.azure.storage.file.datalake.models.PathAccessControlEntry;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Optional parameters for Update Access Control Recursive.\n+ */\n+public class DirectoryUpdateAccessControlRecursiveOptions {\n+    private final List<PathAccessControlEntry> accessControlList;\n+    private Integer batchSize;\n+    private Integer maxBatches;\n+    private Consumer<Response<AccessControlChanges>> progressHandler;\n+    private String continuationToken;\n+    private boolean continueOnFailure;\n+\n+    /**\n+     * Constructs a new options object.\n+     * @param accessControlList The POSIX access control list for the file or directory.\n+     */\n+    public DirectoryUpdateAccessControlRecursiveOptions(List<PathAccessControlEntry> accessControlList) {\n+        this.accessControlList = Collections.unmodifiableList(accessControlList);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NDM5Mw=="}, "originalCommit": {"oid": "024623bdcab7e8fbd4b22c1eac3d2cf4f529f45d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA4ODY1Ng==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r483088656", "createdAt": "2020-09-03T16:00:45Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/options/DirectoryUpdateAccessControlRecursiveOptions.java", "diffHunk": "@@ -0,0 +1,162 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.options;\n+\n+import com.azure.core.http.rest.Response;\n+import com.azure.storage.file.datalake.models.AccessControlChanges;\n+import com.azure.storage.file.datalake.models.PathAccessControlEntry;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Optional parameters for Update Access Control Recursive.\n+ */\n+public class DirectoryUpdateAccessControlRecursiveOptions {\n+    private final List<PathAccessControlEntry> accessControlList;\n+    private Integer batchSize;\n+    private Integer maxBatches;\n+    private Consumer<Response<AccessControlChanges>> progressHandler;\n+    private String continuationToken;\n+    private boolean continueOnFailure;\n+\n+    /**\n+     * Constructs a new options object.\n+     * @param accessControlList The POSIX access control list for the file or directory.\n+     */\n+    public DirectoryUpdateAccessControlRecursiveOptions(List<PathAccessControlEntry> accessControlList) {\n+        this.accessControlList = Collections.unmodifiableList(accessControlList);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NDM5Mw=="}, "originalCommit": {"oid": "024623bdcab7e8fbd4b22c1eac3d2cf4f529f45d"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTc2MDQ0OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-datalake/swagger/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo0Mzo1NlrOHLDjgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzo0ODo1OFrOHMP0rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NDYyNA==", "bodyText": "nit new line", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r481354624", "createdAt": "2020-09-01T18:43:56Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-file-datalake/swagger/README.md", "diffHunk": "@@ -87,6 +87,22 @@ directive:\n     }\n ```\n \n+### Adds FileSystem and Path parameter to /{filesystem}/{path}?action=setAccessControlRecursive\n+``` yaml\n+directive:\n+- from: swagger-document\n+  where: $[\"x-ms-paths\"][\"/{filesystem}/{path}?action=setAccessControlRecursive\"].patch\n+  transform: >\n+    let param = $.parameters[0];\n+    if (!param[\"$ref\"].endsWith(\"FileSystem\")) {\n+        const fileSystemPath = param[\"$ref\"].replace(/[#].*$/, \"#/parameters/FileSystem\");\n+        const pathPath = param[\"$ref\"].replace(/[#].*$/, \"#/parameters/Path\");\n+        $.parameters.splice(0, 0, { \"$ref\": fileSystemPath });\n+        $.parameters.splice(1, 0, { \"$ref\": pathPath });\n+    }\n+```\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "024623bdcab7e8fbd4b22c1eac3d2cf4f529f45d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwNDIwNg==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r482604206", "createdAt": "2020-09-02T23:48:58Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-datalake/swagger/README.md", "diffHunk": "@@ -87,6 +87,22 @@ directive:\n     }\n ```\n \n+### Adds FileSystem and Path parameter to /{filesystem}/{path}?action=setAccessControlRecursive\n+``` yaml\n+directive:\n+- from: swagger-document\n+  where: $[\"x-ms-paths\"][\"/{filesystem}/{path}?action=setAccessControlRecursive\"].patch\n+  transform: >\n+    let param = $.parameters[0];\n+    if (!param[\"$ref\"].endsWith(\"FileSystem\")) {\n+        const fileSystemPath = param[\"$ref\"].replace(/[#].*$/, \"#/parameters/FileSystem\");\n+        const pathPath = param[\"$ref\"].replace(/[#].*$/, \"#/parameters/Path\");\n+        $.parameters.splice(0, 0, { \"$ref\": fileSystemPath });\n+        $.parameters.splice(1, 0, { \"$ref\": pathPath });\n+    }\n+```\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NDYyNA=="}, "originalCommit": {"oid": "024623bdcab7e8fbd4b22c1eac3d2cf4f529f45d"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTg0Njk0OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/models/AccessControlChangeFailure.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOTowNDoxOVrOHLEZRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMDo0NDo0M1rOHMRADw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2ODM4OA==", "bodyText": "This sounds kinda weird. Do we have other examples of this? It feels more normal to call this setIsDirectory", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r481368388", "createdAt": "2020-09-01T19:04:19Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/models/AccessControlChangeFailure.java", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.models;\n+\n+/**\n+ * Represents an entry that failed to update Access Control List.\n+ */\n+public class AccessControlChangeFailure {\n+    private String name;\n+    private boolean isDirectory;\n+    public String errorMessage;\n+\n+    /**\n+     * Returns the name of an entry.\n+     *\n+     * @return The name of an entry.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Sets the name of an entry.\n+     *\n+     * @param name The name of an entry.\n+     * @return The updated object.\n+     */\n+    public AccessControlChangeFailure setName(String name) {\n+        this.name = name;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns whether entry is a directory.\n+     *\n+     * @return Whether the entry is a directory.\n+     */\n+    public boolean isDirectory() {\n+        return isDirectory;\n+    }\n+\n+    /**\n+     * Sets whether entry is a directory.\n+     *\n+     * @param directory Whether entry is a directory.\n+     * @return The updated object.\n+     */\n+    public AccessControlChangeFailure setDirectory(boolean directory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ead15e99b75de67ab372ca420e5165a2afa184f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwNDc1OA==", "bodyText": "I agree. But can we do setIsDirectory and isDirectory. I'm not sure if the guidelines ok with there being an extra \"is\" in the setter.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r482604758", "createdAt": "2020-09-02T23:50:41Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/models/AccessControlChangeFailure.java", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.models;\n+\n+/**\n+ * Represents an entry that failed to update Access Control List.\n+ */\n+public class AccessControlChangeFailure {\n+    private String name;\n+    private boolean isDirectory;\n+    public String errorMessage;\n+\n+    /**\n+     * Returns the name of an entry.\n+     *\n+     * @return The name of an entry.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Sets the name of an entry.\n+     *\n+     * @param name The name of an entry.\n+     * @return The updated object.\n+     */\n+    public AccessControlChangeFailure setName(String name) {\n+        this.name = name;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns whether entry is a directory.\n+     *\n+     * @return Whether the entry is a directory.\n+     */\n+    public boolean isDirectory() {\n+        return isDirectory;\n+    }\n+\n+    /**\n+     * Sets whether entry is a directory.\n+     *\n+     * @param directory Whether entry is a directory.\n+     * @return The updated object.\n+     */\n+    public AccessControlChangeFailure setDirectory(boolean directory) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2ODM4OA=="}, "originalCommit": {"oid": "4ead15e99b75de67ab372ca420e5165a2afa184f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYyMzUwMw==", "bodyText": "https://stackoverflow.com/questions/5322648/for-a-boolean-field-what-is-the-naming-convention-for-its-getter-setter\nand\nhttps://dzone.com/articles/java-getter-and-setter-basics-common-mistakes-and", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r482623503", "createdAt": "2020-09-03T00:44:43Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/models/AccessControlChangeFailure.java", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.models;\n+\n+/**\n+ * Represents an entry that failed to update Access Control List.\n+ */\n+public class AccessControlChangeFailure {\n+    private String name;\n+    private boolean isDirectory;\n+    public String errorMessage;\n+\n+    /**\n+     * Returns the name of an entry.\n+     *\n+     * @return The name of an entry.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Sets the name of an entry.\n+     *\n+     * @param name The name of an entry.\n+     * @return The updated object.\n+     */\n+    public AccessControlChangeFailure setName(String name) {\n+        this.name = name;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns whether entry is a directory.\n+     *\n+     * @return Whether the entry is a directory.\n+     */\n+    public boolean isDirectory() {\n+        return isDirectory;\n+    }\n+\n+    /**\n+     * Sets whether entry is a directory.\n+     *\n+     * @param directory Whether entry is a directory.\n+     * @return The updated object.\n+     */\n+    public AccessControlChangeFailure setDirectory(boolean directory) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2ODM4OA=="}, "originalCommit": {"oid": "4ead15e99b75de67ab372ca420e5165a2afa184f"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTkxNjUxOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/models/PathRemoveAccessControlEntry.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOToyNToyOFrOHLFEFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzo1MToyMlrOHMP3iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3OTM1MQ==", "bodyText": "Same as with the isDirectory, this probably sounds better as setIsDefaultScope?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r481379351", "createdAt": "2020-09-01T19:25:28Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/models/PathRemoveAccessControlEntry.java", "diffHunk": "@@ -0,0 +1,155 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.storage.file.datalake.models;\n+\n+import com.azure.storage.common.implementation.StorageImplUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static com.azure.storage.file.datalake.models.PathAccessControlEntry.ACCESS_CONTROL_ENTRY_INVALID_SCOPE;\n+import static com.azure.storage.file.datalake.models.PathAccessControlEntry.DEFAULT_SCOPE;\n+\n+public class PathRemoveAccessControlEntry {\n+    private boolean defaultScope;\n+    private AccessControlType accessControlType;\n+    private String entityId;\n+\n+    /**\n+     * Indicates whether this is the default entry for the ACL.\n+     *\n+     * @return Whether this is the default entry for the ACL.\n+     */\n+    public boolean isDefaultScope() {\n+        return defaultScope;\n+    }\n+\n+    /**\n+     * Sets whether this is the default entry for the ACL.\n+     *\n+     * @param defaultScope Whether this is the default entry for the ACL.\n+     * @return The updated object.\n+     */\n+    public PathRemoveAccessControlEntry setDefaultScope(boolean defaultScope) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ead15e99b75de67ab372ca420e5165a2afa184f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwNDkzNw==", "bodyText": "This one I'd rather keep because it follows the same pattern as PathAccessControlEntry", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r482604937", "createdAt": "2020-09-02T23:51:22Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/models/PathRemoveAccessControlEntry.java", "diffHunk": "@@ -0,0 +1,155 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.storage.file.datalake.models;\n+\n+import com.azure.storage.common.implementation.StorageImplUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static com.azure.storage.file.datalake.models.PathAccessControlEntry.ACCESS_CONTROL_ENTRY_INVALID_SCOPE;\n+import static com.azure.storage.file.datalake.models.PathAccessControlEntry.DEFAULT_SCOPE;\n+\n+public class PathRemoveAccessControlEntry {\n+    private boolean defaultScope;\n+    private AccessControlType accessControlType;\n+    private String entityId;\n+\n+    /**\n+     * Indicates whether this is the default entry for the ACL.\n+     *\n+     * @return Whether this is the default entry for the ACL.\n+     */\n+    public boolean isDefaultScope() {\n+        return defaultScope;\n+    }\n+\n+    /**\n+     * Sets whether this is the default entry for the ACL.\n+     *\n+     * @param defaultScope Whether this is the default entry for the ACL.\n+     * @return The updated object.\n+     */\n+    public PathRemoveAccessControlEntry setDefaultScope(boolean defaultScope) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3OTM1MQ=="}, "originalCommit": {"oid": "4ead15e99b75de67ab372ca420e5165a2afa184f"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTkyNDAwOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-datalake/src/samples/java/com/azure/storage/file/datalake/PathAsyncClientJavaDocCodeSamples.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOToyNzo1NlrOHLFIvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzo1MjowN1rOHMP4dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM4MDU0Mg==", "bodyText": "typo - remove", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r481380542", "createdAt": "2020-09-01T19:27:56Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/samples/java/com/azure/storage/file/datalake/PathAsyncClientJavaDocCodeSamples.java", "diffHunk": "@@ -185,6 +192,151 @@ public void setAccessControlWithResponseCodeSnippets() {\n         // END: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlListWithResponse#List-String-String-DataLakeRequestConditions\n     }\n \n+    /**\n+     * Code snippets for {@link DataLakePathAsyncClient#setAccessControlRecursive(List)}\n+     */\n+    public void setAccessControlRecursiveCodeSnippets() {\n+        // BEGIN: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlRecursive#List\n+        PathAccessControlEntry pathAccessControlEntry = new PathAccessControlEntry()\n+            .setEntityId(\"entityId\")\n+            .setPermissions(new RolePermissions().setReadPermission(true));\n+        List<PathAccessControlEntry> pathAccessControlEntries = new ArrayList<>();\n+        pathAccessControlEntries.add(pathAccessControlEntry);\n+\n+        client.setAccessControlRecursive(pathAccessControlEntries).subscribe(\n+            response -> System.out.printf(\"Successful changed file operations: %d\",\n+                response.getCounters().getChangedFilesCount()));\n+        // END: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlRecursive#List\n+    }\n+\n+    /**\n+     * Code snippets for {@link DataLakePathAsyncClient#setAccessControlRecursiveWithResponse(PathSetAccessControlRecursiveOptions)}\n+     */\n+    public void setAccessControlRecursiveWithResponseCodeSnippets() {\n+        // BEGIN: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlRecursiveWithResponse#PathSetAccessControlRecursiveOptions\n+        PathAccessControlEntry pathAccessControlEntry = new PathAccessControlEntry()\n+            .setEntityId(\"entityId\")\n+            .setPermissions(new RolePermissions().setReadPermission(true));\n+        List<PathAccessControlEntry> pathAccessControlEntries = new ArrayList<>();\n+        pathAccessControlEntries.add(pathAccessControlEntry);\n+\n+        Integer batchSize = 2;\n+        Integer maxBatches = 10;\n+        boolean continueOnFailure = false;\n+        String continuationToken = null;\n+        Consumer<Response<AccessControlChanges>> progressHandler =\n+            response -> System.out.println(\"Received response\");\n+\n+        PathSetAccessControlRecursiveOptions options =\n+            new PathSetAccessControlRecursiveOptions(pathAccessControlEntries)\n+                .setBatchSize(batchSize)\n+                .setMaxBatches(maxBatches)\n+                .setContinueOnFailure(continueOnFailure)\n+                .setContinuationToken(continuationToken)\n+                .setProgressHandler(progressHandler);\n+\n+        client.setAccessControlRecursive(pathAccessControlEntries).subscribe(\n+            response -> System.out.printf(\"Successful changed file operations: %d\",\n+                response.getCounters().getChangedFilesCount()));\n+        // END: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlRecursiveWithResponse#PathSetAccessControlRecursiveOptions\n+    }\n+\n+    /**\n+     * Code snippets for {@link DataLakePathAsyncClient#updateAccessControlRecursive(List)}\n+     */\n+    public void updateAccessControlRecursiveCodeSnippets() {\n+        // BEGIN: com.azure.storage.file.datalake.DataLakePathAsyncClient.updateAccessControlRecursive#List\n+        PathAccessControlEntry pathAccessControlEntry = new PathAccessControlEntry()\n+            .setEntityId(\"entityId\")\n+            .setPermissions(new RolePermissions().setReadPermission(true));\n+        List<PathAccessControlEntry> pathAccessControlEntries = new ArrayList<>();\n+        pathAccessControlEntries.add(pathAccessControlEntry);\n+\n+        client.updateAccessControlRecursive(pathAccessControlEntries).subscribe(\n+            response -> System.out.printf(\"Successful changed file operations: %d\",\n+                response.getCounters().getChangedFilesCount()));\n+        // END: com.azure.storage.file.datalake.DataLakePathAsyncClient.updateAccessControlRecursive#List\n+    }\n+\n+    /**\n+     * Code snippets for {@link DataLakePathAsyncClient#updateAccessControlRecursiveWithResponse(PathUpdateAccessControlRecursiveOptions)}\n+     */\n+    public void updateAccessControlRecursiveWithResponseCodeSnippets() {\n+        // BEGIN: com.azure.storage.file.datalake.DataLakePathAsyncClient.updateAccessControlRecursiveWithResponse#PathUpdateAccessControlRecursiveOptions\n+        PathAccessControlEntry pathAccessControlEntry = new PathAccessControlEntry()\n+            .setEntityId(\"entityId\")\n+            .setPermissions(new RolePermissions().setReadPermission(true));\n+        List<PathAccessControlEntry> pathAccessControlEntries = new ArrayList<>();\n+        pathAccessControlEntries.add(pathAccessControlEntry);\n+\n+        Integer batchSize = 2;\n+        Integer maxBatches = 10;\n+        boolean continueOnFailure = false;\n+        String continuationToken = null;\n+        Consumer<Response<AccessControlChanges>> progressHandler =\n+            response -> System.out.println(\"Received response\");\n+\n+        PathUpdateAccessControlRecursiveOptions options =\n+            new PathUpdateAccessControlRecursiveOptions(pathAccessControlEntries)\n+                .setBatchSize(batchSize)\n+                .setMaxBatches(maxBatches)\n+                .setContinueOnFailure(continueOnFailure)\n+                .setContinuationToken(continuationToken)\n+                .setProgressHandler(progressHandler);\n+\n+        client.updateAccessControlRecursive(pathAccessControlEntries).subscribe(\n+            response -> System.out.printf(\"Successful changed file operations: %d\",\n+                response.getCounters().getChangedFilesCount()));\n+        // END: com.azure.storage.file.datalake.DataLakePathAsyncClientWithResponse.updateAccessControlRecursive#PathUpdateAccessControlRecursiveOptions\n+    }\n+\n+    /**\n+     * Code snippets for {@link DataLakePathAsyncClient#removeAccessControlRecursive(List)}\n+     */\n+    public void removetAccessControlRecursiveCodeSnippets() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ead15e99b75de67ab372ca420e5165a2afa184f"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwNTE3NQ==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r482605175", "createdAt": "2020-09-02T23:52:07Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/samples/java/com/azure/storage/file/datalake/PathAsyncClientJavaDocCodeSamples.java", "diffHunk": "@@ -185,6 +192,151 @@ public void setAccessControlWithResponseCodeSnippets() {\n         // END: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlListWithResponse#List-String-String-DataLakeRequestConditions\n     }\n \n+    /**\n+     * Code snippets for {@link DataLakePathAsyncClient#setAccessControlRecursive(List)}\n+     */\n+    public void setAccessControlRecursiveCodeSnippets() {\n+        // BEGIN: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlRecursive#List\n+        PathAccessControlEntry pathAccessControlEntry = new PathAccessControlEntry()\n+            .setEntityId(\"entityId\")\n+            .setPermissions(new RolePermissions().setReadPermission(true));\n+        List<PathAccessControlEntry> pathAccessControlEntries = new ArrayList<>();\n+        pathAccessControlEntries.add(pathAccessControlEntry);\n+\n+        client.setAccessControlRecursive(pathAccessControlEntries).subscribe(\n+            response -> System.out.printf(\"Successful changed file operations: %d\",\n+                response.getCounters().getChangedFilesCount()));\n+        // END: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlRecursive#List\n+    }\n+\n+    /**\n+     * Code snippets for {@link DataLakePathAsyncClient#setAccessControlRecursiveWithResponse(PathSetAccessControlRecursiveOptions)}\n+     */\n+    public void setAccessControlRecursiveWithResponseCodeSnippets() {\n+        // BEGIN: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlRecursiveWithResponse#PathSetAccessControlRecursiveOptions\n+        PathAccessControlEntry pathAccessControlEntry = new PathAccessControlEntry()\n+            .setEntityId(\"entityId\")\n+            .setPermissions(new RolePermissions().setReadPermission(true));\n+        List<PathAccessControlEntry> pathAccessControlEntries = new ArrayList<>();\n+        pathAccessControlEntries.add(pathAccessControlEntry);\n+\n+        Integer batchSize = 2;\n+        Integer maxBatches = 10;\n+        boolean continueOnFailure = false;\n+        String continuationToken = null;\n+        Consumer<Response<AccessControlChanges>> progressHandler =\n+            response -> System.out.println(\"Received response\");\n+\n+        PathSetAccessControlRecursiveOptions options =\n+            new PathSetAccessControlRecursiveOptions(pathAccessControlEntries)\n+                .setBatchSize(batchSize)\n+                .setMaxBatches(maxBatches)\n+                .setContinueOnFailure(continueOnFailure)\n+                .setContinuationToken(continuationToken)\n+                .setProgressHandler(progressHandler);\n+\n+        client.setAccessControlRecursive(pathAccessControlEntries).subscribe(\n+            response -> System.out.printf(\"Successful changed file operations: %d\",\n+                response.getCounters().getChangedFilesCount()));\n+        // END: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlRecursiveWithResponse#PathSetAccessControlRecursiveOptions\n+    }\n+\n+    /**\n+     * Code snippets for {@link DataLakePathAsyncClient#updateAccessControlRecursive(List)}\n+     */\n+    public void updateAccessControlRecursiveCodeSnippets() {\n+        // BEGIN: com.azure.storage.file.datalake.DataLakePathAsyncClient.updateAccessControlRecursive#List\n+        PathAccessControlEntry pathAccessControlEntry = new PathAccessControlEntry()\n+            .setEntityId(\"entityId\")\n+            .setPermissions(new RolePermissions().setReadPermission(true));\n+        List<PathAccessControlEntry> pathAccessControlEntries = new ArrayList<>();\n+        pathAccessControlEntries.add(pathAccessControlEntry);\n+\n+        client.updateAccessControlRecursive(pathAccessControlEntries).subscribe(\n+            response -> System.out.printf(\"Successful changed file operations: %d\",\n+                response.getCounters().getChangedFilesCount()));\n+        // END: com.azure.storage.file.datalake.DataLakePathAsyncClient.updateAccessControlRecursive#List\n+    }\n+\n+    /**\n+     * Code snippets for {@link DataLakePathAsyncClient#updateAccessControlRecursiveWithResponse(PathUpdateAccessControlRecursiveOptions)}\n+     */\n+    public void updateAccessControlRecursiveWithResponseCodeSnippets() {\n+        // BEGIN: com.azure.storage.file.datalake.DataLakePathAsyncClient.updateAccessControlRecursiveWithResponse#PathUpdateAccessControlRecursiveOptions\n+        PathAccessControlEntry pathAccessControlEntry = new PathAccessControlEntry()\n+            .setEntityId(\"entityId\")\n+            .setPermissions(new RolePermissions().setReadPermission(true));\n+        List<PathAccessControlEntry> pathAccessControlEntries = new ArrayList<>();\n+        pathAccessControlEntries.add(pathAccessControlEntry);\n+\n+        Integer batchSize = 2;\n+        Integer maxBatches = 10;\n+        boolean continueOnFailure = false;\n+        String continuationToken = null;\n+        Consumer<Response<AccessControlChanges>> progressHandler =\n+            response -> System.out.println(\"Received response\");\n+\n+        PathUpdateAccessControlRecursiveOptions options =\n+            new PathUpdateAccessControlRecursiveOptions(pathAccessControlEntries)\n+                .setBatchSize(batchSize)\n+                .setMaxBatches(maxBatches)\n+                .setContinueOnFailure(continueOnFailure)\n+                .setContinuationToken(continuationToken)\n+                .setProgressHandler(progressHandler);\n+\n+        client.updateAccessControlRecursive(pathAccessControlEntries).subscribe(\n+            response -> System.out.printf(\"Successful changed file operations: %d\",\n+                response.getCounters().getChangedFilesCount()));\n+        // END: com.azure.storage.file.datalake.DataLakePathAsyncClientWithResponse.updateAccessControlRecursive#PathUpdateAccessControlRecursiveOptions\n+    }\n+\n+    /**\n+     * Code snippets for {@link DataLakePathAsyncClient#removeAccessControlRecursive(List)}\n+     */\n+    public void removetAccessControlRecursiveCodeSnippets() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM4MDU0Mg=="}, "originalCommit": {"oid": "4ead15e99b75de67ab372ca420e5165a2afa184f"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTkzMzA0OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-datalake/src/test/java/com/azure/storage/file/datalake/DirectoryAPITest.groovy", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOTozMDozMlrOHLFOMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzo1MjoyMVrOHMP4yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM4MTkzNg==", "bodyText": "Can we have some tests on File? Maybe just a min test?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r481381936", "createdAt": "2020-09-01T19:30:32Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/test/java/com/azure/storage/file/datalake/DirectoryAPITest.groovy", "diffHunk": "@@ -434,6 +444,786 @@ class DirectoryAPITest extends APISpec {\n         thrown(DataLakeStorageException)\n     }\n \n+    def \"Set ACL recursive min\"() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ead15e99b75de67ab372ca420e5165a2afa184f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2MjQxNg==", "bodyText": "Oh just read your other comment", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r481462416", "createdAt": "2020-09-01T22:15:32Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/test/java/com/azure/storage/file/datalake/DirectoryAPITest.groovy", "diffHunk": "@@ -434,6 +444,786 @@ class DirectoryAPITest extends APISpec {\n         thrown(DataLakeStorageException)\n     }\n \n+    def \"Set ACL recursive min\"() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM4MTkzNg=="}, "originalCommit": {"oid": "4ead15e99b75de67ab372ca420e5165a2afa184f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwNTI1Ng==", "bodyText": "Yea they should be there now", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r482605256", "createdAt": "2020-09-02T23:52:21Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/test/java/com/azure/storage/file/datalake/DirectoryAPITest.groovy", "diffHunk": "@@ -434,6 +444,786 @@ class DirectoryAPITest extends APISpec {\n         thrown(DataLakeStorageException)\n     }\n \n+    def \"Set ACL recursive min\"() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM4MTkzNg=="}, "originalCommit": {"oid": "4ead15e99b75de67ab372ca420e5165a2afa184f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNjAyNzcyOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/models/AccessControlChanges.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTo1Mjo0NlrOHMBnGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzo1Mjo0M1rOHMP5Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM3MTM1NQ==", "bodyText": "This needs a </p> to end the paragraph somewhere. Same for the rest of the PR where there's lonely <p>'s", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r482371355", "createdAt": "2020-09-02T19:52:46Z", "author": {"login": "amnguye"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/models/AccessControlChanges.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.models;\n+\n+/**\n+ * AccessControlChanges contains batch and cumulative counts of operations that change Access Control Lists recursively.\n+ * Additionally it exposes path entries that failed to update while these operations progress.\n+ */\n+public class AccessControlChanges {\n+    private Iterable<AccessControlChangeFailure> batchFailures;\n+    private AccessControlChangeCounters batchCounters;\n+    private AccessControlChangeCounters aggregateCounters;\n+    private String continuationToken;\n+\n+    /**\n+     * Returns an iterable of path entries that failed to update Access Control List within a single batch.\n+     *\n+     * @return An iterable of path entries that failed to update Access Control List within a single batch.\n+     */\n+    public Iterable<AccessControlChangeFailure> getBatchFailures() {\n+        return batchFailures;\n+    }\n+\n+    /**\n+     * Sets an iterable of path entries that failed to update Access Control List within a single batch.\n+     *\n+     * @param batchFailures An iterable of path entries that failed to update Access Control List within a single batch.\n+     * @return The updated object\n+     */\n+    public AccessControlChanges setBatchFailures(Iterable<AccessControlChangeFailure> batchFailures) {\n+        this.batchFailures = batchFailures;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns an {@link AccessControlChangeCounters} that contains counts of paths changed within a single batch.\n+     *\n+     * @return {@link AccessControlChangeCounters}\n+     */\n+    public AccessControlChangeCounters getBatchCounters() {\n+        return batchCounters;\n+    }\n+\n+    /**\n+     * Sets an {@link AccessControlChangeCounters} that contains counts of paths changed within a single batch.\n+     *\n+     * @param batchCounters {@link AccessControlChangeCounters}\n+     * @return The updated object.\n+     */\n+    public AccessControlChanges setBatchCounters(AccessControlChangeCounters batchCounters) {\n+        this.batchCounters = batchCounters;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns an {@link AccessControlChangeCounters} that contains counts of paths changed from start of the operation.\n+     *\n+     * @return {@link AccessControlChangeCounters}\n+     */\n+    public AccessControlChangeCounters getAggregateCounters() {\n+        return aggregateCounters;\n+    }\n+\n+    /**\n+     * Sets an {@link AccessControlChangeCounters} that contains counts of paths changed from start of the operation.\n+     *\n+     * @param aggregateCounters {@link AccessControlChangeCounters}\n+     * @return The updated object.\n+     */\n+    public AccessControlChanges setAggregateCounters(AccessControlChangeCounters aggregateCounters) {\n+        this.aggregateCounters = aggregateCounters;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the continuation token.\n+     * <p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9cf7cd2c1d27c018e0e81d01c7565f95c54b767"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwNTM3NA==", "bodyText": "This is standard for how we write javadocs", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r482605374", "createdAt": "2020-09-02T23:52:43Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/models/AccessControlChanges.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.models;\n+\n+/**\n+ * AccessControlChanges contains batch and cumulative counts of operations that change Access Control Lists recursively.\n+ * Additionally it exposes path entries that failed to update while these operations progress.\n+ */\n+public class AccessControlChanges {\n+    private Iterable<AccessControlChangeFailure> batchFailures;\n+    private AccessControlChangeCounters batchCounters;\n+    private AccessControlChangeCounters aggregateCounters;\n+    private String continuationToken;\n+\n+    /**\n+     * Returns an iterable of path entries that failed to update Access Control List within a single batch.\n+     *\n+     * @return An iterable of path entries that failed to update Access Control List within a single batch.\n+     */\n+    public Iterable<AccessControlChangeFailure> getBatchFailures() {\n+        return batchFailures;\n+    }\n+\n+    /**\n+     * Sets an iterable of path entries that failed to update Access Control List within a single batch.\n+     *\n+     * @param batchFailures An iterable of path entries that failed to update Access Control List within a single batch.\n+     * @return The updated object\n+     */\n+    public AccessControlChanges setBatchFailures(Iterable<AccessControlChangeFailure> batchFailures) {\n+        this.batchFailures = batchFailures;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns an {@link AccessControlChangeCounters} that contains counts of paths changed within a single batch.\n+     *\n+     * @return {@link AccessControlChangeCounters}\n+     */\n+    public AccessControlChangeCounters getBatchCounters() {\n+        return batchCounters;\n+    }\n+\n+    /**\n+     * Sets an {@link AccessControlChangeCounters} that contains counts of paths changed within a single batch.\n+     *\n+     * @param batchCounters {@link AccessControlChangeCounters}\n+     * @return The updated object.\n+     */\n+    public AccessControlChanges setBatchCounters(AccessControlChangeCounters batchCounters) {\n+        this.batchCounters = batchCounters;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns an {@link AccessControlChangeCounters} that contains counts of paths changed from start of the operation.\n+     *\n+     * @return {@link AccessControlChangeCounters}\n+     */\n+    public AccessControlChangeCounters getAggregateCounters() {\n+        return aggregateCounters;\n+    }\n+\n+    /**\n+     * Sets an {@link AccessControlChangeCounters} that contains counts of paths changed from start of the operation.\n+     *\n+     * @param aggregateCounters {@link AccessControlChangeCounters}\n+     * @return The updated object.\n+     */\n+    public AccessControlChanges setAggregateCounters(AccessControlChangeCounters aggregateCounters) {\n+        this.aggregateCounters = aggregateCounters;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the continuation token.\n+     * <p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM3MTM1NQ=="}, "originalCommit": {"oid": "b9cf7cd2c1d27c018e0e81d01c7565f95c54b767"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1358, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}