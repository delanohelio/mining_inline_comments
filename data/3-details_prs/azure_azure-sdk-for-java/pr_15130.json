{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1NjA1ODI1", "number": 15130, "title": "Feat(e2e): Digital twin tests", "bodyText": "", "createdAt": "2020-09-12T00:44:00Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15130", "merged": true, "mergeCommit": {"oid": "f9f5c6ebe06a51a794a406dfedc47d0ef3dabc38"}, "closed": true, "closedAt": "2020-09-14T16:34:15Z", "author": {"login": "bikamani"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdH-zX8AH2gAyNDg1NjA1ODI1OmI1NDc2Y2Q3Zjg5Mjc4ZTgyOWZkNzVmMjM4MWU5ODlhNWNjOWMxODE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdI1-o6gFqTQ4Nzk1NjM0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b5476cd7f89278e829fd75f2381e989a5cc9c181", "author": {"user": {"login": "bikamani", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b5476cd7f89278e829fd75f2381e989a5cc9c181", "committedDate": "2020-09-12T00:24:56Z", "message": "adding digital twin tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MjQ4MTEz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15130#pullrequestreview-487248113", "createdAt": "2020-09-12T18:37:27Z", "commit": {"oid": "b5476cd7f89278e829fd75f2381e989a5cc9c181"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxODozNzoyOFrOHQ2wvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxODozNzo1MlrOHQ2w3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQzNjQ3OA==", "bodyText": "In your assertNext you can actually assert whether or not the update made the correct operation", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15130#discussion_r487436478", "createdAt": "2020-09-12T18:37:28Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/TwinAsyncTests.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.models.*;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.opentest4j.AssertionFailedError;\n+import reactor.test.StepVerifier;\n+\n+import java.net.HttpURLConnection;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.azure.digitaltwins.core.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n+import static com.azure.digitaltwins.core.TestHelper.assertRestException;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class TwinAsyncTests extends TwinTestBase\n+{\n+    private final ClientLogger logger = new ClientLogger(TwinAsyncTests.class);\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void DigitalTwins_Lifecycle(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion)\n+    {\n+        DigitalTwinsAsyncClient asyncClient = getAsyncClient(httpClient, serviceVersion);\n+\n+        String roomTwinId = UniqueIdHelper.getUniqueDigitalTwinId(TestAssetDefaults.ROOM_TWIN_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+        String floorModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.FLOOR_MODEL_ID, asyncClient, randomIntegerStringGenerator);\n+        String roomModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.ROOM_MODEL_ID, asyncClient, randomIntegerStringGenerator);\n+\n+        String roomTwin = TestAssetsHelper.getRoomTwinPayload(roomModelId);\n+        String roomModel = TestAssetsHelper.getRoomModelPayload(roomModelId, floorModelId);\n+        List<String> modelsList = new ArrayList<>(Arrays.asList(roomModel));\n+\n+        try {\n+            // Create models to test the Twin lifecycle.\n+            StepVerifier\n+                .create(asyncClient.createModels(modelsList))\n+                .assertNext(createResponseList -> logger.info(\"Created {} models successfully\", createResponseList.size()))\n+                .verifyComplete();\n+\n+            // Create a Twin\n+            StepVerifier.create(asyncClient.createDigitalTwin(roomTwinId, roomTwin, BasicDigitalTwin.class))\n+                .assertNext(createdTwin -> {\n+                    assertEquals(createdTwin.getId(), roomTwinId);\n+                    logger.info(\"Created {} twin successfully\", createdTwin.getId());\n+                })\n+                .verifyComplete();\n+\n+            // Get a Twin\n+            StepVerifier.create(asyncClient.getDigitalTwinWithResponse(roomTwinId))\n+                .assertNext(getResponse -> {\n+                    assertEquals(getResponse.getStatusCode(), HttpURLConnection.HTTP_OK);\n+                    logger.info(\"Got Twin successfully\");\n+\n+                })\n+                .verifyComplete();\n+\n+            // Update Twin\n+            StepVerifier.create(asyncClient.updateDigitalTwinWithResponse(roomTwinId, TestAssetsHelper.getRoomTwinUpdatePayload(), new UpdateDigitalTwinRequestOptions()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5476cd7f89278e829fd75f2381e989a5cc9c181"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQzNjUwOA==", "bodyText": "you need to block these calls otherwise this will never execute", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15130#discussion_r487436508", "createdAt": "2020-09-12T18:37:52Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/TwinAsyncTests.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.models.*;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.opentest4j.AssertionFailedError;\n+import reactor.test.StepVerifier;\n+\n+import java.net.HttpURLConnection;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.azure.digitaltwins.core.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n+import static com.azure.digitaltwins.core.TestHelper.assertRestException;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class TwinAsyncTests extends TwinTestBase\n+{\n+    private final ClientLogger logger = new ClientLogger(TwinAsyncTests.class);\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void DigitalTwins_Lifecycle(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion)\n+    {\n+        DigitalTwinsAsyncClient asyncClient = getAsyncClient(httpClient, serviceVersion);\n+\n+        String roomTwinId = UniqueIdHelper.getUniqueDigitalTwinId(TestAssetDefaults.ROOM_TWIN_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+        String floorModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.FLOOR_MODEL_ID, asyncClient, randomIntegerStringGenerator);\n+        String roomModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.ROOM_MODEL_ID, asyncClient, randomIntegerStringGenerator);\n+\n+        String roomTwin = TestAssetsHelper.getRoomTwinPayload(roomModelId);\n+        String roomModel = TestAssetsHelper.getRoomModelPayload(roomModelId, floorModelId);\n+        List<String> modelsList = new ArrayList<>(Arrays.asList(roomModel));\n+\n+        try {\n+            // Create models to test the Twin lifecycle.\n+            StepVerifier\n+                .create(asyncClient.createModels(modelsList))\n+                .assertNext(createResponseList -> logger.info(\"Created {} models successfully\", createResponseList.size()))\n+                .verifyComplete();\n+\n+            // Create a Twin\n+            StepVerifier.create(asyncClient.createDigitalTwin(roomTwinId, roomTwin, BasicDigitalTwin.class))\n+                .assertNext(createdTwin -> {\n+                    assertEquals(createdTwin.getId(), roomTwinId);\n+                    logger.info(\"Created {} twin successfully\", createdTwin.getId());\n+                })\n+                .verifyComplete();\n+\n+            // Get a Twin\n+            StepVerifier.create(asyncClient.getDigitalTwinWithResponse(roomTwinId))\n+                .assertNext(getResponse -> {\n+                    assertEquals(getResponse.getStatusCode(), HttpURLConnection.HTTP_OK);\n+                    logger.info(\"Got Twin successfully\");\n+\n+                })\n+                .verifyComplete();\n+\n+            // Update Twin\n+            StepVerifier.create(asyncClient.updateDigitalTwinWithResponse(roomTwinId, TestAssetsHelper.getRoomTwinUpdatePayload(), new UpdateDigitalTwinRequestOptions()))\n+                .assertNext(updateResponse -> {\n+                    assertEquals(updateResponse.getStatusCode(), HttpURLConnection.HTTP_NO_CONTENT);\n+                    logger.info(\"Updated the twin successfully\");\n+                })\n+                .verifyComplete();\n+        }\n+        // clean up\n+        finally {\n+            try\n+            {\n+                if (roomTwinId != null)\n+                {\n+                    asyncClient.deleteDigitalTwin(roomTwinId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5476cd7f89278e829fd75f2381e989a5cc9c181"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MjQ4Mjc2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15130#pullrequestreview-487248276", "createdAt": "2020-09-12T18:40:43Z", "commit": {"oid": "b5476cd7f89278e829fd75f2381e989a5cc9c181"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxODo0MDo0M1rOHQ2xwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxODo0MDo0M1rOHQ2xwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQzNjczNw==", "bodyText": "Let's call these test files DigitalTwinAsyncTests and DigitalTwinTests", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15130#discussion_r487436737", "createdAt": "2020-09-12T18:40:43Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/TwinAsyncTests.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.azure.digitaltwins.core;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5476cd7f89278e829fd75f2381e989a5cc9c181"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3OTU1NzEy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15130#pullrequestreview-487955712", "createdAt": "2020-09-14T16:41:13Z", "commit": {"oid": "b5476cd7f89278e829fd75f2381e989a5cc9c181"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjo0MToxM1rOHRdmvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjo0MToxM1rOHRdmvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3Mjg5Mw==", "bodyText": "this call needs to be blocked, else the process will exit before the async call completes.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15130#discussion_r488072893", "createdAt": "2020-09-14T16:41:13Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/TwinAsyncTests.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.models.*;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.opentest4j.AssertionFailedError;\n+import reactor.test.StepVerifier;\n+\n+import java.net.HttpURLConnection;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.azure.digitaltwins.core.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n+import static com.azure.digitaltwins.core.TestHelper.assertRestException;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class TwinAsyncTests extends TwinTestBase\n+{\n+    private final ClientLogger logger = new ClientLogger(TwinAsyncTests.class);\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void DigitalTwins_Lifecycle(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion)\n+    {\n+        DigitalTwinsAsyncClient asyncClient = getAsyncClient(httpClient, serviceVersion);\n+\n+        String roomTwinId = UniqueIdHelper.getUniqueDigitalTwinId(TestAssetDefaults.ROOM_TWIN_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+        String floorModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.FLOOR_MODEL_ID, asyncClient, randomIntegerStringGenerator);\n+        String roomModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.ROOM_MODEL_ID, asyncClient, randomIntegerStringGenerator);\n+\n+        String roomTwin = TestAssetsHelper.getRoomTwinPayload(roomModelId);\n+        String roomModel = TestAssetsHelper.getRoomModelPayload(roomModelId, floorModelId);\n+        List<String> modelsList = new ArrayList<>(Arrays.asList(roomModel));\n+\n+        try {\n+            // Create models to test the Twin lifecycle.\n+            StepVerifier\n+                .create(asyncClient.createModels(modelsList))\n+                .assertNext(createResponseList -> logger.info(\"Created {} models successfully\", createResponseList.size()))\n+                .verifyComplete();\n+\n+            // Create a Twin\n+            StepVerifier.create(asyncClient.createDigitalTwin(roomTwinId, roomTwin, BasicDigitalTwin.class))\n+                .assertNext(createdTwin -> {\n+                    assertEquals(createdTwin.getId(), roomTwinId);\n+                    logger.info(\"Created {} twin successfully\", createdTwin.getId());\n+                })\n+                .verifyComplete();\n+\n+            // Get a Twin\n+            StepVerifier.create(asyncClient.getDigitalTwinWithResponse(roomTwinId))\n+                .assertNext(getResponse -> {\n+                    assertEquals(getResponse.getStatusCode(), HttpURLConnection.HTTP_OK);\n+                    logger.info(\"Got Twin successfully\");\n+\n+                })\n+                .verifyComplete();\n+\n+            // Update Twin\n+            StepVerifier.create(asyncClient.updateDigitalTwinWithResponse(roomTwinId, TestAssetsHelper.getRoomTwinUpdatePayload(), new UpdateDigitalTwinRequestOptions()))\n+                .assertNext(updateResponse -> {\n+                    assertEquals(updateResponse.getStatusCode(), HttpURLConnection.HTTP_NO_CONTENT);\n+                    logger.info(\"Updated the twin successfully\");\n+                })\n+                .verifyComplete();\n+        }\n+        // clean up\n+        finally {\n+            try\n+            {\n+                if (roomTwinId != null)\n+                {\n+                    asyncClient.deleteDigitalTwin(roomTwinId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5476cd7f89278e829fd75f2381e989a5cc9c181"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3OTU2MzQy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15130#pullrequestreview-487956342", "createdAt": "2020-09-14T16:42:00Z", "commit": {"oid": "b5476cd7f89278e829fd75f2381e989a5cc9c181"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjo0MjowMVrOHRdooA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjo0MjowMVrOHRdooA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3MzM3Ng==", "bodyText": "shouldn't there be a assert here on whatever was updated?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15130#discussion_r488073376", "createdAt": "2020-09-14T16:42:01Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/TwinAsyncTests.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.models.*;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.opentest4j.AssertionFailedError;\n+import reactor.test.StepVerifier;\n+\n+import java.net.HttpURLConnection;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.azure.digitaltwins.core.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n+import static com.azure.digitaltwins.core.TestHelper.assertRestException;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class TwinAsyncTests extends TwinTestBase\n+{\n+    private final ClientLogger logger = new ClientLogger(TwinAsyncTests.class);\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void DigitalTwins_Lifecycle(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion)\n+    {\n+        DigitalTwinsAsyncClient asyncClient = getAsyncClient(httpClient, serviceVersion);\n+\n+        String roomTwinId = UniqueIdHelper.getUniqueDigitalTwinId(TestAssetDefaults.ROOM_TWIN_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+        String floorModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.FLOOR_MODEL_ID, asyncClient, randomIntegerStringGenerator);\n+        String roomModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.ROOM_MODEL_ID, asyncClient, randomIntegerStringGenerator);\n+\n+        String roomTwin = TestAssetsHelper.getRoomTwinPayload(roomModelId);\n+        String roomModel = TestAssetsHelper.getRoomModelPayload(roomModelId, floorModelId);\n+        List<String> modelsList = new ArrayList<>(Arrays.asList(roomModel));\n+\n+        try {\n+            // Create models to test the Twin lifecycle.\n+            StepVerifier\n+                .create(asyncClient.createModels(modelsList))\n+                .assertNext(createResponseList -> logger.info(\"Created {} models successfully\", createResponseList.size()))\n+                .verifyComplete();\n+\n+            // Create a Twin\n+            StepVerifier.create(asyncClient.createDigitalTwin(roomTwinId, roomTwin, BasicDigitalTwin.class))\n+                .assertNext(createdTwin -> {\n+                    assertEquals(createdTwin.getId(), roomTwinId);\n+                    logger.info(\"Created {} twin successfully\", createdTwin.getId());\n+                })\n+                .verifyComplete();\n+\n+            // Get a Twin\n+            StepVerifier.create(asyncClient.getDigitalTwinWithResponse(roomTwinId))\n+                .assertNext(getResponse -> {\n+                    assertEquals(getResponse.getStatusCode(), HttpURLConnection.HTTP_OK);\n+                    logger.info(\"Got Twin successfully\");\n+\n+                })\n+                .verifyComplete();\n+\n+            // Update Twin\n+            StepVerifier.create(asyncClient.updateDigitalTwinWithResponse(roomTwinId, TestAssetsHelper.getRoomTwinUpdatePayload(), new UpdateDigitalTwinRequestOptions()))\n+                .assertNext(updateResponse -> {\n+                    assertEquals(updateResponse.getStatusCode(), HttpURLConnection.HTTP_NO_CONTENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5476cd7f89278e829fd75f2381e989a5cc9c181"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3461, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}