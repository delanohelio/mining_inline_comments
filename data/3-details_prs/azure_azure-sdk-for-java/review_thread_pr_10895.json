{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0NTA1NzAw", "number": 10895, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNzoyNToxN1rOD6H5jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzo0MDo0OFrOD7VuKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjczNDIzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ResourceWrapper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNzoyNToxN1rOGRxs5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxOTowNzowMFrOGTGtjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI5MzI4NA==", "bodyText": "classes in com.azure.cosmos.models are part of our public api.\nDoes ResourceWrapper have to be in com.azure.cosmos.models ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10895#discussion_r421293284", "createdAt": "2020-05-07T07:25:17Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ResourceWrapper.java", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.models;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68dfcbe41252c0e998e5e1e8841feb36da31a4ec"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYzOTU3MQ==", "bodyText": "Put in the models with the following thinking:\nSince we moved Resource into implementation, so some method has changed from private package to public.  If I remove ResourceWrapper to implementation, then the getResource() will change to public which may expose methods we did not/should not?\nBut it can be solved by two ways: (if move to implementation)\n\nremove getResource() method\nchange to protected, have some implmentionBridge class to use this method from other places\n\nthoughts?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10895#discussion_r421639571", "createdAt": "2020-05-07T16:34:47Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ResourceWrapper.java", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.models;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI5MzI4NA=="}, "originalCommit": {"oid": "68dfcbe41252c0e998e5e1e8841feb36da31a4ec"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4NjA5NA==", "bodyText": "Having ResourceWrapper in public should be fine in my opinion if it is not leaking any Jackson libraries.\nNo need to do extra work through *BridgeInternals if not required.\n@moderakh  thoughts ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10895#discussion_r422686094", "createdAt": "2020-05-10T19:07:00Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ResourceWrapper.java", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.models;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI5MzI4NA=="}, "originalCommit": {"oid": "68dfcbe41252c0e998e5e1e8841feb36da31a4ec"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjA0NTU1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/DocumentCollection.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODo1Nzo0OFrOGTGpNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxODo1Nzo0OFrOGTGpNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4NDk4Mw==", "bodyText": "Since these API names got changed in CosmosContainerProperties, we should update them here too.\nsetAnalyticalStoreTimeToLiveInSeconds\nNot in this PR - since this is implementation change, we should do this in a follow up PR.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10895#discussion_r422684983", "createdAt": "2020-05-10T18:57:48Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/DocumentCollection.java", "diffHunk": "@@ -165,6 +163,45 @@ public void setDefaultTimeToLive(Integer timeToLive) {\n         }\n     }\n \n+    /**\n+     * Sets the analytical storage time to live in seconds for items in a container from the Azure Cosmos DB service.\n+     *\n+     * It is an optional property. A valid value must be either a nonzero positive integer, '-1', or 0.\n+     * By default, AnalyticalStorageTimeToLive is set to 0 meaning the analytical store is turned off for the container;\n+     * -1 means documents in analytical store never expire.\n+     * The unit of measurement is seconds. The maximum allowed value is 2147483647.\n+     *\n+     * @param timeToLive the analytical storage time to live in seconds.\n+     * @return the CosmosContainerProperties.\n+     */\n+    public void setAnalyticalStorageTimeToLiveInSeconds(Integer timeToLive) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc443050b1aacc4a8d4c42124e79bb77a03c6051"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjA0ODc5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosError.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxOTowMTowNVrOGTGqug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxOTowMTowNVrOGTGqug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4NTM3MA==", "bodyText": "CosmosError is in models (public surface) - and is still extending internal types Resource and JsonSerializable. This is exposed using CosmosClientException which can lead to potential exposure of Jackson libraries.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10895#discussion_r422685370", "createdAt": "2020-05-10T19:01:05Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosError.java", "diffHunk": "@@ -4,6 +4,7 @@\n package com.azure.cosmos.models;\n \n import com.azure.cosmos.implementation.Constants;\n+import com.azure.cosmos.implementation.Resource;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc443050b1aacc4a8d4c42124e79bb77a03c6051"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjA1ODc0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/mgmt/src/main/java/com/azure/management/cosmosdb/DatabaseAccountListKeysResult.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxOToxMTo0OFrOGTGvmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxOToxMTo0OFrOGTGvmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4NjYxNw==", "bodyText": "This is a cosmosdb management related library change, not ours :)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10895#discussion_r422686617", "createdAt": "2020-05-10T19:11:48Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/mgmt/src/main/java/com/azure/management/cosmosdb/DatabaseAccountListKeysResult.java", "diffHunk": "@@ -1,5 +1,6 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc443050b1aacc4a8d4c42124e79bb77a03c6051"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTM5OTM0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CompositePath.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzoxNzoxN1rOGTlwoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxODozMTo0OVrOGToWkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5NDc4NA==", "bodyText": "I am not sure yet if we should have JsonSerializableWrapper, but if we decide to go with JsonSerializable, then you could move this code to JsonSerializable and and here just have super(jsonStirng).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10895#discussion_r423194784", "createdAt": "2020-05-11T17:17:17Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CompositePath.java", "diffHunk": "@@ -26,7 +28,7 @@ public CompositePath() {\n      * @param jsonString the json string that represents the included path.\n      */\n     CompositePath(String jsonString) {\n-        super(jsonString);\n+        this.jsonSerializable = new JsonSerializable(jsonString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc443050b1aacc4a8d4c42124e79bb77a03c6051"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5OTI5OA==", "bodyText": "yup, good idea to move the common code into the parent class", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10895#discussion_r423199298", "createdAt": "2020-05-11T17:24:54Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CompositePath.java", "diffHunk": "@@ -26,7 +28,7 @@ public CompositePath() {\n      * @param jsonString the json string that represents the included path.\n      */\n     CompositePath(String jsonString) {\n-        super(jsonString);\n+        this.jsonSerializable = new JsonSerializable(jsonString);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5NDc4NA=="}, "originalCommit": {"oid": "cc443050b1aacc4a8d4c42124e79bb77a03c6051"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIzNzI2Nw==", "bodyText": "based on the discussion, will remove JsonSerializableWrapper and ResourceWrapper in  following up PR.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10895#discussion_r423237267", "createdAt": "2020-05-11T18:31:49Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CompositePath.java", "diffHunk": "@@ -26,7 +28,7 @@ public CompositePath() {\n      * @param jsonString the json string that represents the included path.\n      */\n     CompositePath(String jsonString) {\n-        super(jsonString);\n+        this.jsonSerializable = new JsonSerializable(jsonString);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5NDc4NA=="}, "originalCommit": {"oid": "cc443050b1aacc4a8d4c42124e79bb77a03c6051"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTQ4NDU4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzo0MDo0OFrOGTmnHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzo0MDo0OFrOGTmnHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwODczMg==", "bodyText": "We are validating these resources in RxDocumentClientImpl anyway, so we could skip these altogether? same for database too. Minor change, need not worry about this in this PR.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10895#discussion_r423208732", "createdAt": "2020-05-11T17:40:48Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -154,7 +154,7 @@ public String getId() {\n     public Mono<CosmosAsyncContainerResponse> replace(\n         CosmosContainerProperties containerProperties,\n         CosmosContainerRequestOptions options) {\n-        ModelBridgeInternal.validateResource(containerProperties);\n+        ModelBridgeInternal.validateResource(ModelBridgeInternal.getResourceFromResourceWrapper(containerProperties));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc443050b1aacc4a8d4c42124e79bb77a03c6051"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4327, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}