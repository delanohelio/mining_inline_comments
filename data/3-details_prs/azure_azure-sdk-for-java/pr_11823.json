{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4NTc2OTMx", "number": 11823, "title": "Add support for HTTP rest calls in Service Bus and generate management APIs", "bodyText": "Adds unreleased_azure-core dependency because ATOM serialization is not supported in currently released dependency (1.5.0).\n\nwhen azure-core is released in like 12 hrs. This can be removed. loll.\n\n\nAdds support for HTTP calls through the management plane in service bus.\nAdds autogenerated code for autorest through the swagger.", "createdAt": "2020-06-05T16:49:13Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11823", "merged": true, "mergeCommit": {"oid": "6a2eb2445666c876162e13a39e5f888706aea466"}, "closed": true, "closedAt": "2020-06-05T20:40:04Z", "author": {"login": "conniey"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcoVXAHgH2gAyNDI4NTc2OTMxOjc5MmM2NzUzZDAyNDhlMjIwNzk5NjRiZWRjMTA5MzljYWVjOTJmZjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoYAlogH2gAyNDI4NTc2OTMxOjExNjIxM2FkNzdmZTY5Y2I1OTIzOGQ1OTQ3NmEzODM5ZjljZGM5ZTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "792c6753d0248e22079964bedc10939caec92ff0", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/792c6753d0248e22079964bedc10939caec92ff0", "committedDate": "2020-06-05T16:36:11Z", "message": "Adding swagger/README.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9e899fb43e939f1b6e369e72151da8655ed160f", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f9e899fb43e939f1b6e369e72151da8655ed160f", "committedDate": "2020-06-05T16:39:00Z", "message": "Adding correct dependencies to make http calls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ceee49778e0d7c9054647c2253bd347d6b1a7325", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ceee49778e0d7c9054647c2253bd347d6b1a7325", "committedDate": "2020-06-05T16:45:39Z", "message": "Autogenerate code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b35d78f62df3c8cd0667ed5a00866555fd7abf1", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6b35d78f62df3c8cd0667ed5a00866555fd7abf1", "committedDate": "2020-06-05T16:48:28Z", "message": "Update to python location for now."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6456ce8786336850eec80bbc1e1f3b3c2d318898", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6456ce8786336850eec80bbc1e1f3b3c2d318898", "committedDate": "2020-06-05T16:48:52Z", "message": "Update swagger file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49f2406d49abdffe7a936e2121ae09be0ec2bcdd", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/49f2406d49abdffe7a936e2121ae09be0ec2bcdd", "committedDate": "2020-06-05T16:52:54Z", "message": "Adding test classes for generated library."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c63a9850b1a5987eb6f47ff5799824533855496", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0c63a9850b1a5987eb6f47ff5799824533855496", "committedDate": "2020-06-05T17:09:14Z", "message": "Fix tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NDkwODgw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11823#pullrequestreview-425490880", "createdAt": "2020-06-05T17:31:15Z", "commit": {"oid": "2247061901951eb4b239b26daf9d87e856764e9a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NDk4NTk5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11823#pullrequestreview-425498599", "createdAt": "2020-06-05T17:42:35Z", "commit": {"oid": "2247061901951eb4b239b26daf9d87e856764e9a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzo0MjozNVrOGf3iNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzo0ODo1NFrOGf3uzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA2ODkxOQ==", "bodyText": "May be we can use netty library available https://netty.io/4.1/api/io/netty/handler/codec/http/HttpHeaderNames.html#AUTHORIZATION", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11823#discussion_r436068919", "createdAt": "2020-06-05T17:42:35Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusTokenCredentialHttpPolicy.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Token credential policy for authenticating with Service Bus.\n+ */\n+class ServiceBusTokenCredentialHttpPolicy implements HttpPipelinePolicy {\n+    private final TokenCredential tokenCredential;\n+\n+    /**\n+     * Creates a new credential policy using the Token credential.\n+     *\n+     * @param tokenCredential Token credential to get access token from.\n+     */\n+    ServiceBusTokenCredentialHttpPolicy(TokenCredential tokenCredential) {\n+        this.tokenCredential = tokenCredential;\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        final String url = context.getHttpRequest().getUrl().toString();\n+        return tokenCredential.getToken(new TokenRequestContext().addScopes(url)).flatMap(token -> {\n+            context.getHttpRequest().getHeaders().put(\"Authorization\", token.getToken());\n+            return next.process();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2247061901951eb4b239b26daf9d87e856764e9a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3MjE0Mw==", "bodyText": "same as above https://netty.io/4.1/api/io/netty/handler/codec/http/HttpHeaderNames.html#AUTHORIZATION", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11823#discussion_r436072143", "createdAt": "2020-06-05T17:48:54Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusTokenCredentialHttpPolicy.java", "diffHunk": "@@ -0,0 +1,32 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.implementation;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Token credential policy for authenticating with service bus.\n+ */\n+public class ServiceBusTokenCredentialHttpPolicy implements HttpPipelinePolicy {\n+    private final TokenCredential tokenCredential;\n+\n+    ServiceBusTokenCredentialHttpPolicy(TokenCredential tokenCredential) {\n+        this.tokenCredential = tokenCredential;\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        final String url = context.getHttpRequest().getUrl().toString();\n+        return tokenCredential.getToken(new TokenRequestContext().addScopes(url)).flatMap(token -> {\n+            context.getHttpRequest().getHeaders().put(\"Authorization\", token.getToken());\n+            return next.process();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c63a9850b1a5987eb6f47ff5799824533855496"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NTA4OTIx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11823#pullrequestreview-425508921", "createdAt": "2020-06-05T17:58:13Z", "commit": {"oid": "2247061901951eb4b239b26daf9d87e856764e9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzo1ODoxM1rOGf4CPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzo1ODoxM1rOGf4CPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3NzExNw==", "bodyText": "https://netty.io/4.0/api/io/netty/handler/codec/http/HttpResponseStatus.html#OK", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11823#discussion_r436077117", "createdAt": "2020-06-05T17:58:13Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/implementation/ServiceBusManagementClientImplIntegrationTests.java", "diffHunk": "@@ -0,0 +1,257 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.implementation;\n+\n+import com.azure.core.amqp.implementation.ConnectionStringProperties;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.test.TestMode;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.TestUtils;\n+import com.azure.messaging.servicebus.implementation.models.CreateQueueBody;\n+import com.azure.messaging.servicebus.implementation.models.CreateQueueBodyContent;\n+import com.azure.messaging.servicebus.implementation.models.QueueDescriptionFeed;\n+import com.azure.messaging.servicebus.implementation.models.QueueDescriptionResponse;\n+import com.azure.messaging.servicebus.models.QueueDescription;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import reactor.test.StepVerifier;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * Integration tests for {@link ServiceBusManagementClientImpl}.\n+ */\n+class ServiceBusManagementClientImplIntegrationTests extends TestBase {\n+    private final ClientLogger logger = new ClientLogger(ServiceBusManagementClientImplIntegrationTests.class);\n+    private final ServiceBusManagementSerializer serializer = new ServiceBusManagementSerializer();\n+    private final Duration timeout = Duration.ofSeconds(30);\n+\n+    private QueuesImpl queuesClient;\n+    private ServiceBusManagementClientImpl managementClient;\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        StepVerifier.setDefaultTimeout(Duration.ofSeconds(30));\n+    }\n+\n+    @AfterAll\n+    static void afterAll() {\n+        StepVerifier.resetDefaultTimeout();\n+    }\n+\n+    @Override\n+    protected void beforeTest() {\n+        Assumptions.assumeTrue(getTestMode() != TestMode.PLAYBACK,\n+            \"Current record/playback does not support persisting XML calls.\");\n+\n+        final ConnectionStringProperties properties = new ConnectionStringProperties(TestUtils.getConnectionString());\n+        final ServiceBusSharedKeyCredential credential = new ServiceBusSharedKeyCredential(\n+            properties.getSharedAccessKeyName(), properties.getSharedAccessKey());\n+\n+        HttpPipeline pipeline = new HttpPipelineBuilder().policies(\n+            new UserAgentPolicy(),\n+            (context, next) -> {\n+                final String url = context.getHttpRequest().getUrl().toString();\n+                return credential.getToken(new TokenRequestContext().addScopes(url)).flatMap(token -> {\n+                    context.getHttpRequest().getHeaders().put(\"Authorization\", token.getToken());\n+                    return next.process();\n+                });\n+            },\n+            new HttpLoggingPolicy(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS)\n+                .addAllowedQueryParamName(\"api-version\")),\n+            new RetryPolicy()\n+        ).build();\n+\n+        managementClient = new ServiceBusManagementClientImplBuilder()\n+            .serializer(serializer)\n+            .endpoint(properties.getEndpoint().getHost())\n+            .apiVersion(\"2017-04\")\n+            .pipeline(pipeline)\n+            .buildClient();\n+\n+        queuesClient = managementClient.getQueues();\n+    }\n+\n+    /**\n+     * Verifies we can get queue information.\n+     */\n+    @Test\n+    void getQueue() {\n+        // Arrange\n+        String queueName = TestUtils.getQueueName();\n+\n+        // Act & Assert\n+        StepVerifier.create(queuesClient.getWithResponseAsync(queueName, true, Context.NONE))\n+            .assertNext(response -> {\n+                final QueueDescriptionResponse deserialize = deserialize(response, QueueDescriptionResponse.class);\n+                assertNotNull(deserialize);\n+                assertNotNull(deserialize.getContent());\n+\n+                final QueueDescription properties = deserialize.getContent().getQueueDescription();\n+                assertNotNull(properties);\n+                assertFalse(properties.getLockDuration().isZero());\n+            })\n+            .verifyComplete();\n+    }\n+\n+    /**\n+     * Verifies we can create a queue.\n+     */\n+    @Test\n+    void createQueue() {\n+        // Arrange\n+        String queueName = testResourceNamer.randomName(\"test\", 7);\n+        QueueDescription description = new QueueDescription().setMaxDeliveryCount(15);\n+        CreateQueueBody createEntity = new CreateQueueBody();\n+        CreateQueueBodyContent content = new CreateQueueBodyContent()\n+            .setType(\"application/xml\")\n+            .setQueueDescription(description);\n+        createEntity.setContent(content);\n+\n+        logger.info(\"Creating queue: {}\", queueName);\n+\n+        // Act & Assert\n+        StepVerifier.create(queuesClient.putWithResponseAsync(queueName, createEntity, null, Context.NONE))\n+            .assertNext(response -> {\n+                Object body = response.getValue();\n+                QueueDescription deserialize = null;\n+                try {\n+                    deserialize = new ServiceBusManagementSerializer()\n+                        .deserialize(String.valueOf(body), QueueDescription.class);\n+                } catch (IOException e) {\n+                    fail(\"An exception was thrown. \" + e);\n+                }\n+\n+                assertNotNull(deserialize);\n+            })\n+            .verifyComplete();\n+    }\n+\n+    /**\n+     * Verifies we can delete a queue.\n+     */\n+    @Test\n+    void deleteQueue() {\n+        // Arrange\n+        String queueName = testResourceNamer.randomName(\"test\", 7);\n+        QueueDescription description = new QueueDescription().setMaxDeliveryCount(15);\n+        CreateQueueBody createEntity = new CreateQueueBody();\n+        CreateQueueBodyContent content = new CreateQueueBodyContent()\n+            .setType(\"application/xml\")\n+            .setQueueDescription(description);\n+        createEntity.setContent(content);\n+\n+        logger.info(\"Creating queue: {}\", queueName);\n+\n+        // This is not part of the scenario. We'll ensure it is created.\n+        Response<Object> response = queuesClient.putWithResponseAsync(queueName, createEntity, null, Context.NONE)\n+            .block(timeout);\n+        assertNotNull(response);\n+\n+        // Act & Assert\n+        StepVerifier.create(queuesClient.deleteWithResponseAsync(queueName, Context.NONE))\n+            .assertNext(deletedResponse -> assertEquals(200, deletedResponse.getStatusCode()))\n+            .verifyComplete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2247061901951eb4b239b26daf9d87e856764e9a"}, "originalPosition": 174}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NTA5MjI4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11823#pullrequestreview-425509228", "createdAt": "2020-06-05T17:58:41Z", "commit": {"oid": "2247061901951eb4b239b26daf9d87e856764e9a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa17c8f7f0e5ce33fc645fd0321ec46d59f9a624", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/aa17c8f7f0e5ce33fc645fd0321ec46d59f9a624", "committedDate": "2020-06-05T18:42:33Z", "message": "Add suppression for readme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "405941c23782ac5ec54ff53aad31862ceaa70a1b", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/405941c23782ac5ec54ff53aad31862ceaa70a1b", "committedDate": "2020-06-05T19:06:25Z", "message": "Add suppression."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cea84f4c313916d37309481ee9c685d53c773a8f", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cea84f4c313916d37309481ee9c685d53c773a8f", "committedDate": "2020-06-05T18:06:48Z", "message": "Add suppression for readme"}, "afterCommit": {"oid": "405941c23782ac5ec54ff53aad31862ceaa70a1b", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/405941c23782ac5ec54ff53aad31862ceaa70a1b", "committedDate": "2020-06-05T19:06:25Z", "message": "Add suppression."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "116213ad77fe69cb59238d59476a3839f9cdc9e8", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/116213ad77fe69cb59238d59476a3839f9cdc9e8", "committedDate": "2020-06-05T19:41:25Z", "message": "Adding dummy session-records."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3849, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}