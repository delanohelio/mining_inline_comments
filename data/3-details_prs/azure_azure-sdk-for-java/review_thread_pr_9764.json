{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MzAxODIz", "number": 9764, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo1MTowOVrODuClzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOTo0NDo0N1rODuGnYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjAzNTM0OnYy", "diffSide": "LEFT", "path": "sdk/search/azure-search-documents/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo1MTowOVrOF_0UKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOTozNzowNlrOF_6jag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MTczOQ==", "bodyText": "Don't we need this dependencies to create the Search service during each test run?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9764#discussion_r402461739", "createdAt": "2020-04-02T16:51:09Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/pom.xml", "diffHunk": "@@ -134,12 +128,6 @@\n       <version>1.7.3</version> <!-- {x-version-update;com.microsoft.azure:azure-client-authentication;external_dependency} -->\n       <scope>test</scope>\n     </dependency>\n-    <dependency>\n-      <groupId>com.microsoft.azure</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e86110a63e24a4e0b5db14ec7994a48b3ac7eec0"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3ODE5OA==", "bodyText": "I have tested over. This is track 1 search lib. I am not sure where needs the library. Live tests and playback passed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9764#discussion_r402478198", "createdAt": "2020-04-02T17:17:32Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/pom.xml", "diffHunk": "@@ -134,12 +128,6 @@\n       <version>1.7.3</version> <!-- {x-version-update;com.microsoft.azure:azure-client-authentication;external_dependency} -->\n       <scope>test</scope>\n     </dependency>\n-    <dependency>\n-      <groupId>com.microsoft.azure</groupId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MTczOQ=="}, "originalCommit": {"oid": "e86110a63e24a4e0b5db14ec7994a48b3ac7eec0"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU2Mzk0Ng==", "bodyText": "Well that is interesting, if that is the case feel free to remove this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9764#discussion_r402563946", "createdAt": "2020-04-02T19:37:06Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/pom.xml", "diffHunk": "@@ -134,12 +128,6 @@\n       <version>1.7.3</version> <!-- {x-version-update;com.microsoft.azure:azure-client-authentication;external_dependency} -->\n       <scope>test</scope>\n     </dependency>\n-    <dependency>\n-      <groupId>com.microsoft.azure</groupId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MTczOQ=="}, "originalCommit": {"oid": "e86110a63e24a4e0b5db14ec7994a48b3ac7eec0"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjA0MzEzOnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexAsyncClient.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo1MzowMVrOF_0Y9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMzo0MDowNFrOGAAPWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2Mjk2Ng==", "bodyText": "Could we just wrap the IOException in an UncheckedIOException and bubble that up.\nthrow logger.logExceptionAsError(new UncheckedIOException(e));", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9764#discussion_r402462966", "createdAt": "2020-04-02T16:53:01Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexAsyncClient.java", "diffHunk": "@@ -643,6 +643,21 @@ private static SearchRequest createSearchRequest(String searchText, SearchOption\n         return searchRequest;\n     }\n \n+    /**\n+     * Build request from continuation token.\n+     *\n+     * @param continuationToken The token used to deserialize the SearchRequest.\n+     * @return The SearchRequest for next page.\n+     */\n+    private SearchRequest buildRequestFromToken(String continuationToken) {\n+        try {\n+            return new JacksonAdapter().deserialize(continuationToken, SearchRequest.class, SerializerEncoding.JSON);\n+        } catch (IOException e) {\n+            throw logger.logExceptionAsError(new RuntimeException(\"Failed to deserialize the token to search request\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e86110a63e24a4e0b5db14ec7994a48b3ac7eec0"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzNTk3Ng==", "bodyText": "I feel like this should be thrown as an ArgumentException for an \"Invalid continuationToken\" if you folks have a similar exception in Java.  Users didn't explicitly serialize the continuationToken themselves so an error message saying it failed to deserialize might be kind of confusing given that we have a bunch of other serialization related magic happening all over the place in these APIs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9764#discussion_r402535976", "createdAt": "2020-04-02T18:48:11Z", "author": {"login": "tg-msft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexAsyncClient.java", "diffHunk": "@@ -643,6 +643,21 @@ private static SearchRequest createSearchRequest(String searchText, SearchOption\n         return searchRequest;\n     }\n \n+    /**\n+     * Build request from continuation token.\n+     *\n+     * @param continuationToken The token used to deserialize the SearchRequest.\n+     * @return The SearchRequest for next page.\n+     */\n+    private SearchRequest buildRequestFromToken(String continuationToken) {\n+        try {\n+            return new JacksonAdapter().deserialize(continuationToken, SearchRequest.class, SerializerEncoding.JSON);\n+        } catch (IOException e) {\n+            throw logger.logExceptionAsError(new RuntimeException(\"Failed to deserialize the token to search request\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2Mjk2Ng=="}, "originalCommit": {"oid": "e86110a63e24a4e0b5db14ec7994a48b3ac7eec0"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU2MzUwMg==", "bodyText": "Based on that I would go with IllegalStateException which is meant to cover scenarios where the application ran into an unrecoverable state, IllegalArgumentException is reserved for scenarios where a user passed in a bad value.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9764#discussion_r402563502", "createdAt": "2020-04-02T19:36:12Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexAsyncClient.java", "diffHunk": "@@ -643,6 +643,21 @@ private static SearchRequest createSearchRequest(String searchText, SearchOption\n         return searchRequest;\n     }\n \n+    /**\n+     * Build request from continuation token.\n+     *\n+     * @param continuationToken The token used to deserialize the SearchRequest.\n+     * @return The SearchRequest for next page.\n+     */\n+    private SearchRequest buildRequestFromToken(String continuationToken) {\n+        try {\n+            return new JacksonAdapter().deserialize(continuationToken, SearchRequest.class, SerializerEncoding.JSON);\n+        } catch (IOException e) {\n+            throw logger.logExceptionAsError(new RuntimeException(\"Failed to deserialize the token to search request\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2Mjk2Ng=="}, "originalCommit": {"oid": "e86110a63e24a4e0b5db14ec7994a48b3ac7eec0"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU2Njg4Nw==", "bodyText": "That is the only case we're going to get an error for though - when the user passes us a continuationToken that doesn't correctly deserialize.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9764#discussion_r402566887", "createdAt": "2020-04-02T19:42:45Z", "author": {"login": "tg-msft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexAsyncClient.java", "diffHunk": "@@ -643,6 +643,21 @@ private static SearchRequest createSearchRequest(String searchText, SearchOption\n         return searchRequest;\n     }\n \n+    /**\n+     * Build request from continuation token.\n+     *\n+     * @param continuationToken The token used to deserialize the SearchRequest.\n+     * @return The SearchRequest for next page.\n+     */\n+    private SearchRequest buildRequestFromToken(String continuationToken) {\n+        try {\n+            return new JacksonAdapter().deserialize(continuationToken, SearchRequest.class, SerializerEncoding.JSON);\n+        } catch (IOException e) {\n+            throw logger.logExceptionAsError(new RuntimeException(\"Failed to deserialize the token to search request\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2Mjk2Ng=="}, "originalCommit": {"oid": "e86110a63e24a4e0b5db14ec7994a48b3ac7eec0"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1NzExMg==", "bodyText": "Thanks for the discussion!\nnextLink and nextParameter are both provided by service.\napiVersion is sdk library enum.\nThese three things all from SDK and above, and user has no way to manipulate it.\nFor serialization code, I will go with IllegalStateException.\nFor deserialization code, user is able to pass wrong continuation token. I will go with IllegalArgumentException", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9764#discussion_r402657112", "createdAt": "2020-04-02T23:40:04Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexAsyncClient.java", "diffHunk": "@@ -643,6 +643,21 @@ private static SearchRequest createSearchRequest(String searchText, SearchOption\n         return searchRequest;\n     }\n \n+    /**\n+     * Build request from continuation token.\n+     *\n+     * @param continuationToken The token used to deserialize the SearchRequest.\n+     * @return The SearchRequest for next page.\n+     */\n+    private SearchRequest buildRequestFromToken(String continuationToken) {\n+        try {\n+            return new JacksonAdapter().deserialize(continuationToken, SearchRequest.class, SerializerEncoding.JSON);\n+        } catch (IOException e) {\n+            throw logger.logExceptionAsError(new RuntimeException(\"Failed to deserialize the token to search request\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2Mjk2Ng=="}, "originalCommit": {"oid": "e86110a63e24a4e0b5db14ec7994a48b3ac7eec0"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjA1NjY2OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/util/SearchPagedResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo1NjoyNFrOF_0hfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoyOTozNFrOF_1zkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2NTE0OA==", "bodyText": "This should be implementing PagedResponse, not PagedResponseBase. Right now this is saying that we have a paged response whose value list is SearchResult and whose headers are type SearchResult.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9764#discussion_r402465148", "createdAt": "2020-04-02T16:56:24Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/util/SearchPagedResponse.java", "diffHunk": "@@ -27,24 +35,30 @@\n  * to true coverage - coverage value.\n  */\n @Immutable\n-public final class SearchPagedResponse implements ContinuablePage<SearchRequest, SearchResult>,\n-    Response<List<SearchResult>> {\n+public final class SearchPagedResponse extends PagedResponseBase<SearchResult, SearchResult> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e86110a63e24a4e0b5db14ec7994a48b3ac7eec0"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4NjE2MQ==", "bodyText": "Changed to PagedResponseBase<Void, SearchResult> for convenience getter.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9764#discussion_r402486161", "createdAt": "2020-04-02T17:29:34Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/util/SearchPagedResponse.java", "diffHunk": "@@ -27,24 +35,30 @@\n  * to true coverage - coverage value.\n  */\n @Immutable\n-public final class SearchPagedResponse implements ContinuablePage<SearchRequest, SearchResult>,\n-    Response<List<SearchResult>> {\n+public final class SearchPagedResponse extends PagedResponseBase<SearchResult, SearchResult> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2NTE0OA=="}, "originalCommit": {"oid": "e86110a63e24a4e0b5db14ec7994a48b3ac7eec0"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjA2Mzg1OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/util/SearchPagedResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo1ODowMFrOF_0l3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo1ODowMFrOF_0l3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2NjI3MQ==", "bodyText": "nit: Could we rename this createContinuationToken, this isn't setting it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9764#discussion_r402466271", "createdAt": "2020-04-02T16:58:00Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/util/SearchPagedResponse.java", "diffHunk": "@@ -54,8 +68,27 @@ public SearchPagedResponse(SimpleResponse<SearchDocumentsResult> documentSearchR\n         this.facets = documentsResult.getFacets();\n         this.count = documentsResult.getCount();\n         this.coverage = documentsResult.getCoverage();\n+    }\n+\n+    private static String setContinuationToken(SimpleResponse<SearchDocumentsResult> documentSearchResponse,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e86110a63e24a4e0b5db14ec7994a48b3ac7eec0"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjUxODk5OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/util/SearchPagedResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODo1MzozMVrOF_5C7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMTo1NjozN1rOF_97FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzOTI0NA==", "bodyText": "This isn't the full continuation token value.  You're only setting this to the serialized version of getNextPageParameters().", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9764#discussion_r402539244", "createdAt": "2020-04-02T18:53:31Z", "author": {"login": "tg-msft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/util/SearchPagedResponse.java", "diffHunk": "@@ -103,33 +127,13 @@ public Long getCount() {\n         return count;\n     }\n \n-    @Override\n-    public int getStatusCode() {\n-        return statusCode;\n-    }\n-\n-    @Override\n-    public HttpHeaders getHeaders() {\n-        return headers;\n-    }\n-\n-    @Override\n-    public HttpRequest getRequest() {\n-        return request;\n-    }\n-\n     @Override\n     public List<SearchResult> getValue() {\n         return value;\n     }\n \n     @Override\n-    public IterableStream<SearchResult> getElements() {\n-        return new IterableStream<>(value);\n-    }\n-\n-    @Override\n-    public SearchRequest getContinuationToken() {\n-        return nextPageParameters;\n+    public String getContinuationToken() {\n+        return nextParameters;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35432e2852cacf796c70e45f9e9c87f17e3ea203"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYxOTE1Ng==", "bodyText": "Will make this return the encoded string.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9764#discussion_r402619156", "createdAt": "2020-04-02T21:56:37Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/util/SearchPagedResponse.java", "diffHunk": "@@ -103,33 +127,13 @@ public Long getCount() {\n         return count;\n     }\n \n-    @Override\n-    public int getStatusCode() {\n-        return statusCode;\n-    }\n-\n-    @Override\n-    public HttpHeaders getHeaders() {\n-        return headers;\n-    }\n-\n-    @Override\n-    public HttpRequest getRequest() {\n-        return request;\n-    }\n-\n     @Override\n     public List<SearchResult> getValue() {\n         return value;\n     }\n \n     @Override\n-    public IterableStream<SearchResult> getElements() {\n-        return new IterableStream<>(value);\n-    }\n-\n-    @Override\n-    public SearchRequest getContinuationToken() {\n-        return nextPageParameters;\n+    public String getContinuationToken() {\n+        return nextParameters;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzOTI0NA=="}, "originalCommit": {"oid": "35432e2852cacf796c70e45f9e9c87f17e3ea203"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjUyMjI0OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/util/SearchPagedResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODo1NDoyMVrOF_5E-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMTo1ODoxNlrOF_999A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzOTc2OA==", "bodyText": "Why is this changing from SearchRequest to string?  It's not actually the continuation token but just the next page params part of it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9764#discussion_r402539768", "createdAt": "2020-04-02T18:54:21Z", "author": {"login": "tg-msft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/util/SearchPagedResponse.java", "diffHunk": "@@ -27,45 +33,63 @@\n  * to true coverage - coverage value.\n  */\n @Immutable\n-public final class SearchPagedResponse implements ContinuablePage<SearchRequest, SearchResult>,\n-    Response<List<SearchResult>> {\n-    private final int statusCode;\n-    private final HttpHeaders headers;\n-    private final HttpRequest request;\n+public final class SearchPagedResponse extends PagedResponseBase<Void, SearchResult> {\n     private final List<SearchResult> value;\n \n-    private final SearchRequest nextPageParameters;\n     private final Map<String, List<FacetResult>> facets;\n     private final Long count;\n     private final Double coverage;\n+    private final String nextParameters;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35432e2852cacf796c70e45f9e9c87f17e3ea203"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYxOTg5Mg==", "bodyText": "Remove nextParameters getter and use getContinuationToken return encoded token instead.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9764#discussion_r402619892", "createdAt": "2020-04-02T21:58:16Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/util/SearchPagedResponse.java", "diffHunk": "@@ -27,45 +33,63 @@\n  * to true coverage - coverage value.\n  */\n @Immutable\n-public final class SearchPagedResponse implements ContinuablePage<SearchRequest, SearchResult>,\n-    Response<List<SearchResult>> {\n-    private final int statusCode;\n-    private final HttpHeaders headers;\n-    private final HttpRequest request;\n+public final class SearchPagedResponse extends PagedResponseBase<Void, SearchResult> {\n     private final List<SearchResult> value;\n \n-    private final SearchRequest nextPageParameters;\n     private final Map<String, List<FacetResult>> facets;\n     private final Long count;\n     private final Double coverage;\n+    private final String nextParameters;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzOTc2OA=="}, "originalCommit": {"oid": "35432e2852cacf796c70e45f9e9c87f17e3ea203"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjUyMzM4OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/util/SearchPagedResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODo1NDo0MVrOF_5Fug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMTo1ODo1NlrOF_9_Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzOTk2Mg==", "bodyText": "This should still give you back the SearchRequest data structure.  We should do the JSON serialization of that value in createContinuationToken.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9764#discussion_r402539962", "createdAt": "2020-04-02T18:54:41Z", "author": {"login": "tg-msft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/util/SearchPagedResponse.java", "diffHunk": "@@ -27,45 +33,63 @@\n  * to true coverage - coverage value.\n  */\n @Immutable\n-public final class SearchPagedResponse implements ContinuablePage<SearchRequest, SearchResult>,\n-    Response<List<SearchResult>> {\n-    private final int statusCode;\n-    private final HttpHeaders headers;\n-    private final HttpRequest request;\n+public final class SearchPagedResponse extends PagedResponseBase<Void, SearchResult> {\n     private final List<SearchResult> value;\n \n-    private final SearchRequest nextPageParameters;\n     private final Map<String, List<FacetResult>> facets;\n     private final Long count;\n     private final Double coverage;\n+    private final String nextParameters;\n \n     /**\n      * Constructor\n      *\n-     * @param documentSearchResponse an http response with the results\n+     * @param documentSearchResponse An http response with the results.\n+     * @param serviceVersion The api version to build into continuation token.\n      */\n-    public SearchPagedResponse(SimpleResponse<SearchDocumentsResult> documentSearchResponse) {\n-        this.statusCode = documentSearchResponse.getStatusCode();\n-        this.headers = documentSearchResponse.getHeaders();\n-        this.request = documentSearchResponse.getRequest();\n+    public SearchPagedResponse(SimpleResponse<SearchDocumentsResult> documentSearchResponse,\n+        SearchServiceVersion serviceVersion) {\n+        super(documentSearchResponse.getRequest(),\n+            documentSearchResponse.getStatusCode(),\n+            documentSearchResponse.getHeaders(),\n+            documentSearchResponse.getValue().getResults(),\n+            createContinuationToken(documentSearchResponse, serviceVersion),\n+            null);\n \n         SearchDocumentsResult documentsResult = documentSearchResponse.getValue();\n         this.value = documentsResult.getResults();\n         this.facets = documentsResult.getFacets();\n         this.count = documentsResult.getCount();\n         this.coverage = documentsResult.getCoverage();\n+        this.nextParameters = getNextPageParameters(documentsResult);\n+    }\n+\n+    private static String createContinuationToken(SimpleResponse<SearchDocumentsResult> documentSearchResponse,\n+        SearchServiceVersion serviceVersion) {\n+        SearchDocumentsResult documentsResult = documentSearchResponse.getValue();\n+        if (documentsResult == null) {\n+            return null;\n+        }\n \n-        this.nextPageParameters = getNextPageParameters(documentsResult);\n+        ObjectNode tokenJson = new ObjectMapper().createObjectNode();\n+        tokenJson.put(\"apiVersion\", serviceVersion.getVersion());\n+        tokenJson.put(\"nextLink\", documentsResult.getNextLink());\n+        tokenJson.put(\"nextPageParameters\", getNextPageParameters(documentsResult));\n+\n+        return Base64.getEncoder().encodeToString(tokenJson.toString().getBytes(StandardCharsets.UTF_8));\n     }\n \n-    private static SearchRequest getNextPageParameters(SearchDocumentsResult result) {\n+    private static String getNextPageParameters(SearchDocumentsResult result) {\n         if (CoreUtils.isNullOrEmpty(result.getNextLink())\n             || result.getNextPageParameters() == null\n             || result.getNextPageParameters().getSkip() == null) {\n             return null;\n         }\n-\n-        return result.getNextPageParameters();\n+        try {\n+            return new JacksonAdapter().serialize(result.getNextPageParameters(), SerializerEncoding.JSON);\n+        } catch (IOException ex) {\n+            throw new RuntimeException(\"Failed to serialize the search request.\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35432e2852cacf796c70e45f9e9c87f17e3ea203"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYyMDIxNA==", "bodyText": "Yes, will make the change.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9764#discussion_r402620214", "createdAt": "2020-04-02T21:58:56Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/util/SearchPagedResponse.java", "diffHunk": "@@ -27,45 +33,63 @@\n  * to true coverage - coverage value.\n  */\n @Immutable\n-public final class SearchPagedResponse implements ContinuablePage<SearchRequest, SearchResult>,\n-    Response<List<SearchResult>> {\n-    private final int statusCode;\n-    private final HttpHeaders headers;\n-    private final HttpRequest request;\n+public final class SearchPagedResponse extends PagedResponseBase<Void, SearchResult> {\n     private final List<SearchResult> value;\n \n-    private final SearchRequest nextPageParameters;\n     private final Map<String, List<FacetResult>> facets;\n     private final Long count;\n     private final Double coverage;\n+    private final String nextParameters;\n \n     /**\n      * Constructor\n      *\n-     * @param documentSearchResponse an http response with the results\n+     * @param documentSearchResponse An http response with the results.\n+     * @param serviceVersion The api version to build into continuation token.\n      */\n-    public SearchPagedResponse(SimpleResponse<SearchDocumentsResult> documentSearchResponse) {\n-        this.statusCode = documentSearchResponse.getStatusCode();\n-        this.headers = documentSearchResponse.getHeaders();\n-        this.request = documentSearchResponse.getRequest();\n+    public SearchPagedResponse(SimpleResponse<SearchDocumentsResult> documentSearchResponse,\n+        SearchServiceVersion serviceVersion) {\n+        super(documentSearchResponse.getRequest(),\n+            documentSearchResponse.getStatusCode(),\n+            documentSearchResponse.getHeaders(),\n+            documentSearchResponse.getValue().getResults(),\n+            createContinuationToken(documentSearchResponse, serviceVersion),\n+            null);\n \n         SearchDocumentsResult documentsResult = documentSearchResponse.getValue();\n         this.value = documentsResult.getResults();\n         this.facets = documentsResult.getFacets();\n         this.count = documentsResult.getCount();\n         this.coverage = documentsResult.getCoverage();\n+        this.nextParameters = getNextPageParameters(documentsResult);\n+    }\n+\n+    private static String createContinuationToken(SimpleResponse<SearchDocumentsResult> documentSearchResponse,\n+        SearchServiceVersion serviceVersion) {\n+        SearchDocumentsResult documentsResult = documentSearchResponse.getValue();\n+        if (documentsResult == null) {\n+            return null;\n+        }\n \n-        this.nextPageParameters = getNextPageParameters(documentsResult);\n+        ObjectNode tokenJson = new ObjectMapper().createObjectNode();\n+        tokenJson.put(\"apiVersion\", serviceVersion.getVersion());\n+        tokenJson.put(\"nextLink\", documentsResult.getNextLink());\n+        tokenJson.put(\"nextPageParameters\", getNextPageParameters(documentsResult));\n+\n+        return Base64.getEncoder().encodeToString(tokenJson.toString().getBytes(StandardCharsets.UTF_8));\n     }\n \n-    private static SearchRequest getNextPageParameters(SearchDocumentsResult result) {\n+    private static String getNextPageParameters(SearchDocumentsResult result) {\n         if (CoreUtils.isNullOrEmpty(result.getNextLink())\n             || result.getNextPageParameters() == null\n             || result.getNextPageParameters().getSkip() == null) {\n             return null;\n         }\n-\n-        return result.getNextPageParameters();\n+        try {\n+            return new JacksonAdapter().serialize(result.getNextPageParameters(), SerializerEncoding.JSON);\n+        } catch (IOException ex) {\n+            throw new RuntimeException(\"Failed to serialize the search request.\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzOTk2Mg=="}, "originalCommit": {"oid": "35432e2852cacf796c70e45f9e9c87f17e3ea203"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjY5NDc0OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexAsyncClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOTo0NDo0N1rOF_6zWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMjowNjoxMFrOF_-LVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU2ODAyNg==", "bodyText": "I'm not sure this is correct - doesn't the continuationToken include the apiVersion and nextLink?  I think we'd only do this for the nextPageParameters property.  We also need to verify that this has an apiVersion we know how to parse and throw an exception if it has an API Version we don't recognize.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9764#discussion_r402568026", "createdAt": "2020-04-02T19:44:47Z", "author": {"login": "tg-msft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexAsyncClient.java", "diffHunk": "@@ -643,6 +643,21 @@ private static SearchRequest createSearchRequest(String searchText, SearchOption\n         return searchRequest;\n     }\n \n+    /**\n+     * Build request from continuation token.\n+     *\n+     * @param continuationToken The token used to deserialize the SearchRequest.\n+     * @return The SearchRequest for next page.\n+     */\n+    private SearchRequest buildRequestFromToken(String continuationToken) {\n+        try {\n+            return new JacksonAdapter().deserialize(continuationToken, SearchRequest.class, SerializerEncoding.JSON);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35432e2852cacf796c70e45f9e9c87f17e3ea203"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYyMjY0Ng==", "bodyText": "You are right when we have the getContinuationToken return encoded one, it includes more items. I will fix the code here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9764#discussion_r402622646", "createdAt": "2020-04-02T22:04:33Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexAsyncClient.java", "diffHunk": "@@ -643,6 +643,21 @@ private static SearchRequest createSearchRequest(String searchText, SearchOption\n         return searchRequest;\n     }\n \n+    /**\n+     * Build request from continuation token.\n+     *\n+     * @param continuationToken The token used to deserialize the SearchRequest.\n+     * @return The SearchRequest for next page.\n+     */\n+    private SearchRequest buildRequestFromToken(String continuationToken) {\n+        try {\n+            return new JacksonAdapter().deserialize(continuationToken, SearchRequest.class, SerializerEncoding.JSON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU2ODAyNg=="}, "originalCommit": {"oid": "35432e2852cacf796c70e45f9e9c87f17e3ea203"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYyMzMxNg==", "bodyText": "Will do apiVersion check as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9764#discussion_r402623316", "createdAt": "2020-04-02T22:06:10Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexAsyncClient.java", "diffHunk": "@@ -643,6 +643,21 @@ private static SearchRequest createSearchRequest(String searchText, SearchOption\n         return searchRequest;\n     }\n \n+    /**\n+     * Build request from continuation token.\n+     *\n+     * @param continuationToken The token used to deserialize the SearchRequest.\n+     * @return The SearchRequest for next page.\n+     */\n+    private SearchRequest buildRequestFromToken(String continuationToken) {\n+        try {\n+            return new JacksonAdapter().deserialize(continuationToken, SearchRequest.class, SerializerEncoding.JSON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU2ODAyNg=="}, "originalCommit": {"oid": "35432e2852cacf796c70e45f9e9c87f17e3ea203"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2089, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}