{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1MzgyMzc5", "number": 10970, "title": "Added Connection Config APIs for Cosmos Client Builder", "bodyText": "This PR :\n\nAdds new Direct and Gateway Connection Config APIs for Cosmos Client Builder\ndirectMode(DirectConnectionConfig config)\ngatewayMode(GatewayConnectionConfig config)\nMoves Connection Policy to implementation package\nAdds new test for Connection Config - both Direct Connection Config and Gateway Connection Config\nUpdated existing tests to use new connection configs\n\nFew things - which still need to be done : #10983", "createdAt": "2020-05-08T19:02:02Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970", "merged": true, "mergeCommit": {"oid": "45655befe8f3e91a727d64690d5dc308eb2bcd67"}, "closed": true, "closedAt": "2020-05-12T19:15:20Z", "author": {"login": "kushagraThapar"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcfWfkwAH2gAyNDE1MzgyMzc5OjY4MDE0OTY4ZWUzM2U2NDgyZmM1N2FhNWU5M2JlYzUwZWVhOTQ1NDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgbkgNAH2gAyNDE1MzgyMzc5OjE0YzU5ZWQxNjk1NmNjNjg2YThhMmQ5ZTFlZDI3MThiNzhkYTgzMjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "68014968ee33e6482fc57aa5e93bec50eea94542", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/68014968ee33e6482fc57aa5e93bec50eea94542", "committedDate": "2020-05-08T18:50:08Z", "message": "Added Connection Config APIs for Cosmos Client Builder. Added new tests for connection config\nUpdated existing tests to use new connection configs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NDYzMzIy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#pullrequestreview-408463322", "createdAt": "2020-05-08T19:14:34Z", "commit": {"oid": "68014968ee33e6482fc57aa5e93bec50eea94542"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxOToxNDozNVrOGSwkNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxOToxNzowNFrOGSwotA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMyMzI1Mw==", "bodyText": "we are not exposing public getters for other CosmosClientBuilder apis", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#discussion_r422323253", "createdAt": "2020-05-08T19:14:35Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "diffHunk": "@@ -327,6 +317,46 @@ public CosmosClientBuilder contentResponseOnWriteEnabled(boolean contentResponse\n         return this;\n     }\n \n+    /**\n+     * Sets the GATEWAY connection configuration to be used.\n+     *\n+     * @param gatewayConnectionConfig GATEWAY connection configuration\n+     * @return current CosmosClientBuilder\n+     */\n+    public CosmosClientBuilder connectionModeGateway(GatewayConnectionConfig gatewayConnectionConfig) {\n+        this.gatewayConnectionConfig = gatewayConnectionConfig;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the DIRECT connection configuration to be used.\n+     *\n+     * @param directConnectionConfig DIRECT connection configuration\n+     * @return current CosmosClientBuilder\n+     */\n+    public CosmosClientBuilder connectionModeDirect(DirectConnectionConfig directConnectionConfig) {\n+        this.directConnectionConfig = directConnectionConfig;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the GATEWAY connection configuration to be used.\n+     *\n+     * @return gateway connection config\n+     */\n+    public GatewayConnectionConfig getGatewayConnectionConfig() {\n+        return gatewayConnectionConfig;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68014968ee33e6482fc57aa5e93bec50eea94542"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMyMzMwOQ==", "bodyText": "ditto", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#discussion_r422323309", "createdAt": "2020-05-08T19:14:42Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "diffHunk": "@@ -327,6 +317,46 @@ public CosmosClientBuilder contentResponseOnWriteEnabled(boolean contentResponse\n         return this;\n     }\n \n+    /**\n+     * Sets the GATEWAY connection configuration to be used.\n+     *\n+     * @param gatewayConnectionConfig GATEWAY connection configuration\n+     * @return current CosmosClientBuilder\n+     */\n+    public CosmosClientBuilder connectionModeGateway(GatewayConnectionConfig gatewayConnectionConfig) {\n+        this.gatewayConnectionConfig = gatewayConnectionConfig;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the DIRECT connection configuration to be used.\n+     *\n+     * @param directConnectionConfig DIRECT connection configuration\n+     * @return current CosmosClientBuilder\n+     */\n+    public CosmosClientBuilder connectionModeDirect(DirectConnectionConfig directConnectionConfig) {\n+        this.directConnectionConfig = directConnectionConfig;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the GATEWAY connection configuration to be used.\n+     *\n+     * @return gateway connection config\n+     */\n+    public GatewayConnectionConfig getGatewayConnectionConfig() {\n+        return gatewayConnectionConfig;\n+    }\n+\n+    /**\n+     * Gets the DIRECT connection configuration to be used.\n+     *\n+     * @return direct connection config\n+     */\n+    public DirectConnectionConfig getDirectConnectionConfig() {\n+        return directConnectionConfig;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68014968ee33e6482fc57aa5e93bec50eea94542"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMyNDAxOQ==", "bodyText": "why do we need to overwrite these ones? this is common for both gw and direct.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#discussion_r422324019", "createdAt": "2020-05-08T19:16:17Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/DirectConnectionConfig.java", "diffHunk": "@@ -0,0 +1,269 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import java.time.Duration;\n+import java.util.List;\n+\n+/**\n+ * Represents the connection config with {@link ConnectionMode#DIRECT} associated with Cosmos Client in the Azure Cosmos DB database service.\n+ */\n+public final class DirectConnectionConfig extends ConnectionConfig {\n+    //  Constants\n+    private static final Duration DEFAULT_IDLE_CHANNEL_TIMEOUT = Duration.ZERO;\n+    private static final Duration DEFAULT_IDLE_ENDPOINT_TIMEOUT = Duration.ofSeconds(70L);\n+    private static final int DEFAULT_MAX_CHANNELS_PER_ENDPOINT = 30;\n+    private static final int DEFAULT_MAX_REQUESTS_PER_ENDPOINT = 10;\n+\n+    private static final DirectConnectionConfig defaultConfig = new DirectConnectionConfig();\n+\n+    private Duration connectionTimeout;\n+    private Duration idleChannelTimeout;\n+    private Duration idleEndpointTimeout;\n+    private int maxChannelsPerEndpoint;\n+    private int maxRequestsPerChannel;\n+\n+    /**\n+     * Constructor.\n+     */\n+    public DirectConnectionConfig() {\n+        super(ConnectionMode.DIRECT);\n+        this.connectionTimeout = null;\n+        this.idleChannelTimeout = DEFAULT_IDLE_CHANNEL_TIMEOUT;\n+        this.idleEndpointTimeout = DEFAULT_IDLE_ENDPOINT_TIMEOUT;\n+        this.maxChannelsPerEndpoint = DEFAULT_MAX_CHANNELS_PER_ENDPOINT;\n+        this.maxRequestsPerChannel = DEFAULT_MAX_REQUESTS_PER_ENDPOINT;\n+    }\n+\n+    /**\n+     * Gets the default DIRECT connection configuration.\n+     *\n+     * @return the default direct connection configuration.\n+     */\n+    public static DirectConnectionConfig getDefaultConfig() {\n+        return DirectConnectionConfig.defaultConfig;\n+    }\n+\n+    //  TODO: (DANOBLE) - To update these docs.\n+\n+    /**\n+     * Gets the direct connection timeout\n+     * @return direct connection timeout\n+     */\n+    public Duration getConnectionTimeout() {\n+        return connectionTimeout;\n+    }\n+\n+    /**\n+     *  Sets the direct connection timeout\n+     * @param connectionTimeout the connection timeout\n+     * @return the {@link DirectConnectionConfig}\n+     */\n+    public DirectConnectionConfig setConnectionTimeout(Duration connectionTimeout) {\n+        this.connectionTimeout = connectionTimeout;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the idle channel timeout\n+     * @return idle channel timeout\n+     */\n+    public Duration getIdleChannelTimeout() {\n+        return idleChannelTimeout;\n+    }\n+\n+    /**\n+     * Sets the idle channel timeout\n+     * @param idleChannelTimeout idle channel timeout\n+     * @return the {@link DirectConnectionConfig}\n+     */\n+    public DirectConnectionConfig setIdleChannelTimeout(Duration idleChannelTimeout) {\n+        this.idleChannelTimeout = idleChannelTimeout;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the idle endpoint timeout\n+     * @return the idle endpoint timeout\n+     */\n+    public Duration getIdleEndpointTimeout() {\n+        return idleEndpointTimeout;\n+    }\n+\n+    /**\n+     * Sets the idle endpoint timeout\n+     * @param idleEndpointTimeout the idle endpoint timeout\n+     * @return the {@link DirectConnectionConfig}\n+     */\n+    public DirectConnectionConfig setIdleEndpointTimeout(Duration idleEndpointTimeout) {\n+        this.idleEndpointTimeout = idleEndpointTimeout;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the max channels per endpoint\n+     * @return the max channels per endpoint\n+     */\n+    public int getMaxChannelsPerEndpoint() {\n+        return maxChannelsPerEndpoint;\n+    }\n+\n+    /**\n+     * Sets the max channels per endpoint\n+     * @param maxChannelsPerEndpoint the max channels per endpoint\n+     * @return the {@link DirectConnectionConfig}\n+     */\n+    public DirectConnectionConfig setMaxChannelsPerEndpoint(int maxChannelsPerEndpoint) {\n+        this.maxChannelsPerEndpoint = maxChannelsPerEndpoint;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the max requests per endpoint\n+     * @return the max requests per endpoint\n+     */\n+    public int getMaxRequestsPerChannel() {\n+        return maxRequestsPerChannel;\n+    }\n+\n+    /**\n+     * Sets the max requests per endpoint\n+     * @param maxRequestsPerChannel the max requests per endpoint\n+     * @return the {@link DirectConnectionConfig}\n+     */\n+    public DirectConnectionConfig setMaxRequestsPerChannel(int maxRequestsPerChannel) {\n+        this.maxRequestsPerChannel = maxRequestsPerChannel;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the retry policy options associated with the DocumentClient instance.\n+     * <p>\n+     * Properties in the RetryOptions class allow application to customize the built-in\n+     * retry policies. This property is optional. When it's not set, the SDK uses the\n+     * default values for configuring the retry policies.  See RetryOptions class for\n+     * more details.\n+     *\n+     * @param throttlingRetryOptions the RetryOptions instance.\n+     * @return the {@link DirectConnectionConfig}.\n+     * @throws IllegalArgumentException thrown if an error occurs\n+     */\n+    @Override\n+    public DirectConnectionConfig setThrottlingRetryOptions(ThrottlingRetryOptions throttlingRetryOptions) {\n+        super.setThrottlingRetryOptions(throttlingRetryOptions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68014968ee33e6482fc57aa5e93bec50eea94542"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMyNDQwNA==", "bodyText": "why do we need to override the common apis for both gw and direct?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#discussion_r422324404", "createdAt": "2020-05-08T19:17:04Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/GatewayConnectionConfig.java", "diffHunk": "@@ -0,0 +1,259 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import java.net.InetSocketAddress;\n+import java.time.Duration;\n+import java.util.List;\n+\n+import static com.azure.cosmos.implementation.ConnectionPolicy.DEFAULT_IDLE_CONNECTION_TIMEOUT;\n+import static com.azure.cosmos.implementation.ConnectionPolicy.DEFAULT_MAX_POOL_SIZE;\n+import static com.azure.cosmos.implementation.ConnectionPolicy.DEFAULT_REQUEST_TIMEOUT;\n+\n+/**\n+ * Represents the connection config with {@link ConnectionMode#GATEWAY} associated with Cosmos Client in the Azure Cosmos DB database service.\n+ */\n+public final class GatewayConnectionConfig extends ConnectionConfig {\n+\n+    private static final GatewayConnectionConfig defaultConfig = new GatewayConnectionConfig();\n+\n+    private Duration requestTimeout;\n+    private int maxPoolSize;\n+    private Duration idleConnectionTimeout;\n+    private InetSocketAddress inetSocketProxyAddress;\n+\n+    /**\n+     * Constructor.\n+     */\n+    public GatewayConnectionConfig() {\n+        super(ConnectionMode.GATEWAY);\n+        this.idleConnectionTimeout = DEFAULT_IDLE_CONNECTION_TIMEOUT;\n+        this.maxPoolSize = DEFAULT_MAX_POOL_SIZE;\n+        this.requestTimeout = DEFAULT_REQUEST_TIMEOUT;\n+    }\n+\n+    /**\n+     * Gets the default Gateway connection configuration.\n+     *\n+     * @return the default gateway connection configuration.\n+     */\n+    public static GatewayConnectionConfig getDefaultConfig() {\n+        return GatewayConnectionConfig.defaultConfig;\n+    }\n+\n+    /**\n+     * Gets the request timeout (time to wait for response from network peer).\n+     *\n+     * @return the request timeout duration.\n+     */\n+    public Duration getRequestTimeout() {\n+        return this.requestTimeout;\n+    }\n+\n+    /**\n+     * Sets the request timeout (time to wait for response from network peer).\n+     * The default is 60 seconds.\n+     *\n+     * @param requestTimeout the request timeout duration.\n+     * @return the {@link GatewayConnectionConfig}.\n+     */\n+    public GatewayConnectionConfig setRequestTimeout(Duration requestTimeout) {\n+        this.requestTimeout = requestTimeout;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the value of the connection pool size the client is using.\n+     *\n+     * @return connection pool size.\n+     */\n+    public int getMaxPoolSize() {\n+        return this.maxPoolSize;\n+    }\n+\n+    /**\n+     * Sets the value of the connection pool size, the default\n+     * is 1000.\n+     *\n+     * @param maxPoolSize The value of the connection pool size.\n+     * @return the {@link GatewayConnectionConfig}.\n+     */\n+    public GatewayConnectionConfig setMaxPoolSize(int maxPoolSize) {\n+        this.maxPoolSize = maxPoolSize;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the value of the timeout for an idle connection, the default is 60\n+     * seconds.\n+     *\n+     * @return Idle connection timeout duration.\n+     */\n+    public Duration getIdleConnectionTimeout() {\n+        return this.idleConnectionTimeout;\n+    }\n+\n+    /**\n+     * sets the value of the timeout for an idle connection. After that time,\n+     * the connection will be automatically closed.\n+     *\n+     * @param idleConnectionTimeout the duration for an idle connection.\n+     * @return the {@link GatewayConnectionConfig}.\n+     */\n+    public GatewayConnectionConfig setIdleConnectionTimeout(Duration idleConnectionTimeout) {\n+        this.idleConnectionTimeout = idleConnectionTimeout;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the retry policy options associated with the DocumentClient instance.\n+     * <p>\n+     * Properties in the RetryOptions class allow application to customize the built-in\n+     * retry policies. This property is optional. When it's not set, the SDK uses the\n+     * default values for configuring the retry policies.  See RetryOptions class for\n+     * more details.\n+     *\n+     * @param throttlingRetryOptions the RetryOptions instance.\n+     * @return the {@link GatewayConnectionConfig}.\n+     * @throws IllegalArgumentException thrown if an error occurs\n+     */\n+    @Override\n+    public GatewayConnectionConfig setThrottlingRetryOptions(ThrottlingRetryOptions throttlingRetryOptions) {\n+        super.setThrottlingRetryOptions(throttlingRetryOptions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68014968ee33e6482fc57aa5e93bec50eea94542"}, "originalPosition": 123}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1976262d0843c83b37ab3be96c0996520ee8606a", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1976262d0843c83b37ab3be96c0996520ee8606a", "committedDate": "2020-05-08T19:25:20Z", "message": "Removed public getters of connection config APIs from CosmosClientBuilder"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTA3OTMx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#pullrequestreview-408507931", "createdAt": "2020-05-08T20:31:26Z", "commit": {"oid": "1976262d0843c83b37ab3be96c0996520ee8606a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDozMToyNlrOGSyu9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDozMToyNlrOGSyu9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM1ODc3Mg==", "bodyText": "One option is to inline these into the builder.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#discussion_r422358772", "createdAt": "2020-05-08T20:31:26Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ConnectionConfig.java", "diffHunk": "@@ -0,0 +1,223 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Represents the common connection configuration associated with a Cosmos Client in the Azure Cosmos DB database service.\n+ */\n+public abstract class ConnectionConfig {\n+\n+    protected final ConnectionMode connectionMode;\n+\n+    protected String userAgentSuffix;\n+    protected  ThrottlingRetryOptions throttlingRetryOptions;\n+    protected List<String> preferredRegions;\n+    protected boolean endpointDiscoveryEnabled = true;\n+    protected boolean usingMultipleWriteRegions = true;\n+    protected Boolean readRequestsFallbackEnabled;\n+\n+    /**\n+     * Constructor\n+     * @param connectionMode connection mode\n+     */\n+    protected ConnectionConfig(ConnectionMode connectionMode) {\n+        this.connectionMode = connectionMode;\n+        this.throttlingRetryOptions = new ThrottlingRetryOptions();\n+        this.readRequestsFallbackEnabled = null;\n+        this.userAgentSuffix = \"\";\n+    }\n+\n+    /**\n+     * Gets the connection mode used in the client.\n+     *\n+     * @return the connection mode.\n+     */\n+    public ConnectionMode getConnectionMode() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1976262d0843c83b37ab3be96c0996520ee8606a"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTA5NzU5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#pullrequestreview-408509759", "createdAt": "2020-05-08T20:34:58Z", "commit": {"oid": "1976262d0843c83b37ab3be96c0996520ee8606a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDozNDo1OFrOGSy0-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDozNDo1OFrOGSy0-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM2MDMxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public boolean isUsingMultipleWriteRegions() {\n          \n          \n            \n                public boolean isMultipleWriteRegionsEnabled() {", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#discussion_r422360313", "createdAt": "2020-05-08T20:34:58Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ConnectionConfig.java", "diffHunk": "@@ -0,0 +1,223 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Represents the common connection configuration associated with a Cosmos Client in the Azure Cosmos DB database service.\n+ */\n+public abstract class ConnectionConfig {\n+\n+    protected final ConnectionMode connectionMode;\n+\n+    protected String userAgentSuffix;\n+    protected  ThrottlingRetryOptions throttlingRetryOptions;\n+    protected List<String> preferredRegions;\n+    protected boolean endpointDiscoveryEnabled = true;\n+    protected boolean usingMultipleWriteRegions = true;\n+    protected Boolean readRequestsFallbackEnabled;\n+\n+    /**\n+     * Constructor\n+     * @param connectionMode connection mode\n+     */\n+    protected ConnectionConfig(ConnectionMode connectionMode) {\n+        this.connectionMode = connectionMode;\n+        this.throttlingRetryOptions = new ThrottlingRetryOptions();\n+        this.readRequestsFallbackEnabled = null;\n+        this.userAgentSuffix = \"\";\n+    }\n+\n+    /**\n+     * Gets the connection mode used in the client.\n+     *\n+     * @return the connection mode.\n+     */\n+    public ConnectionMode getConnectionMode() {\n+        return this.connectionMode;\n+    }\n+\n+    /**\n+     * Gets the value of user-agent suffix.\n+     *\n+     * @return the value of user-agent suffix.\n+     */\n+    public String getUserAgentSuffix() {\n+        return this.userAgentSuffix;\n+    }\n+\n+    /**\n+     * Gets the retry policy options associated with the DocumentClient instance.\n+     *\n+     * @return the RetryOptions instance.\n+     */\n+    public ThrottlingRetryOptions getThrottlingRetryOptions() {\n+        return this.throttlingRetryOptions;\n+    }\n+\n+    /**\n+     * Gets the flag to enable endpoint discovery for geo-replicated database accounts.\n+     *\n+     * @return whether endpoint discovery is enabled.\n+     */\n+    public boolean isEndpointDiscoveryEnabled() {\n+        return this.endpointDiscoveryEnabled;\n+    }\n+\n+    /**\n+     * Gets the flag to enable writes on any regions for geo-replicated database accounts in the Azure\n+     * Cosmos DB service.\n+     * <p>\n+     * When the value of this property is true, the SDK will direct write operations to\n+     * available writable regions of geo-replicated database account. Writable regions\n+     * are ordered by PreferredRegions property. Setting the property value\n+     * to true has no effect until EnableMultipleWriteRegions in DatabaseAccount\n+     * is also set to true.\n+     * <p>\n+     * DEFAULT value is true indicating that writes are directed to\n+     * available writable regions of geo-replicated database account.\n+     *\n+     * @return flag to enable writes on any regions for geo-replicated database accounts.\n+     */\n+    public boolean isUsingMultipleWriteRegions() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1976262d0843c83b37ab3be96c0996520ee8606a"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTExMzIx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#pullrequestreview-408511321", "createdAt": "2020-05-08T20:37:48Z", "commit": {"oid": "1976262d0843c83b37ab3be96c0996520ee8606a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDozNzo0OFrOGSy58w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDozNzo0OFrOGSy58w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM2MTU4Nw==", "bodyText": "directMode & gatewayMode", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#discussion_r422361587", "createdAt": "2020-05-08T20:37:48Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "diffHunk": "@@ -77,20 +80,18 @@ boolean isSessionCapturingOverrideEnabled() {\n      *\n      * <pre>\n      * {@code\n-     * ConnectionPolicy connectionPolicy = new ConnectionPolicy();\n-     * getConnectionPolicy.getConnectionMode(ConnectionMode.DIRECT);\n      * CosmosAsyncClient client1 = new CosmosClientBuilder()\n      *         .endpoint(serviceEndpoint1)\n      *         .key(key1)\n-     *         .connectionPolicy(connectionPolicy)\n+     *         .connectionModeDirect(DirectConnectionConfig.getDefaultConfig())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1976262d0843c83b37ab3be96c0996520ee8606a"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTEyNTg2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#pullrequestreview-408512586", "createdAt": "2020-05-08T20:40:05Z", "commit": {"oid": "1976262d0843c83b37ab3be96c0996520ee8606a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDo0MDowNVrOGSy-CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDo0MDowNVrOGSy-CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM2MjYzMg==", "bodyText": "connection vs channel vs Endpoint", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#discussion_r422362632", "createdAt": "2020-05-08T20:40:05Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/DirectConnectionConfig.java", "diffHunk": "@@ -0,0 +1,269 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import java.time.Duration;\n+import java.util.List;\n+\n+/**\n+ * Represents the connection config with {@link ConnectionMode#DIRECT} associated with Cosmos Client in the Azure Cosmos DB database service.\n+ */\n+public final class DirectConnectionConfig extends ConnectionConfig {\n+    //  Constants\n+    private static final Duration DEFAULT_IDLE_CHANNEL_TIMEOUT = Duration.ZERO;\n+    private static final Duration DEFAULT_IDLE_ENDPOINT_TIMEOUT = Duration.ofSeconds(70L);\n+    private static final int DEFAULT_MAX_CHANNELS_PER_ENDPOINT = 30;\n+    private static final int DEFAULT_MAX_REQUESTS_PER_ENDPOINT = 10;\n+\n+    private static final DirectConnectionConfig defaultConfig = new DirectConnectionConfig();\n+\n+    private Duration connectionTimeout;\n+    private Duration idleChannelTimeout;\n+    private Duration idleEndpointTimeout;\n+    private int maxChannelsPerEndpoint;\n+    private int maxRequestsPerChannel;\n+\n+    /**\n+     * Constructor.\n+     */\n+    public DirectConnectionConfig() {\n+        super(ConnectionMode.DIRECT);\n+        this.connectionTimeout = null;\n+        this.idleChannelTimeout = DEFAULT_IDLE_CHANNEL_TIMEOUT;\n+        this.idleEndpointTimeout = DEFAULT_IDLE_ENDPOINT_TIMEOUT;\n+        this.maxChannelsPerEndpoint = DEFAULT_MAX_CHANNELS_PER_ENDPOINT;\n+        this.maxRequestsPerChannel = DEFAULT_MAX_REQUESTS_PER_ENDPOINT;\n+    }\n+\n+    /**\n+     * Gets the default DIRECT connection configuration.\n+     *\n+     * @return the default direct connection configuration.\n+     */\n+    public static DirectConnectionConfig getDefaultConfig() {\n+        return DirectConnectionConfig.defaultConfig;\n+    }\n+\n+    //  TODO: (DANOBLE) - To update these docs.\n+\n+    /**\n+     * Gets the direct connection timeout\n+     * @return direct connection timeout\n+     */\n+    public Duration getConnectionTimeout() {\n+        return connectionTimeout;\n+    }\n+\n+    /**\n+     *  Sets the direct connection timeout\n+     * @param connectionTimeout the connection timeout\n+     * @return the {@link DirectConnectionConfig}\n+     */\n+    public DirectConnectionConfig setConnectionTimeout(Duration connectionTimeout) {\n+        this.connectionTimeout = connectionTimeout;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the idle channel timeout\n+     * @return idle channel timeout\n+     */\n+    public Duration getIdleChannelTimeout() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1976262d0843c83b37ab3be96c0996520ee8606a"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTEzOTMx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#pullrequestreview-408513931", "createdAt": "2020-05-08T20:42:26Z", "commit": {"oid": "1976262d0843c83b37ab3be96c0996520ee8606a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDo0MjoyN1rOGSzCQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDo0MjoyN1rOGSzCQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM2MzcxMw==", "bodyText": "Will ZERO default to FX one. If so we might not have control on it. Why not be explicit?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#discussion_r422363713", "createdAt": "2020-05-08T20:42:27Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/DirectConnectionConfig.java", "diffHunk": "@@ -0,0 +1,269 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import java.time.Duration;\n+import java.util.List;\n+\n+/**\n+ * Represents the connection config with {@link ConnectionMode#DIRECT} associated with Cosmos Client in the Azure Cosmos DB database service.\n+ */\n+public final class DirectConnectionConfig extends ConnectionConfig {\n+    //  Constants\n+    private static final Duration DEFAULT_IDLE_CHANNEL_TIMEOUT = Duration.ZERO;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1976262d0843c83b37ab3be96c0996520ee8606a"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTE2Mjcz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#pullrequestreview-408516273", "createdAt": "2020-05-08T20:46:37Z", "commit": {"oid": "1976262d0843c83b37ab3be96c0996520ee8606a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDo0NjozOFrOGSzJxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDo0NjozOFrOGSzJxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM2NTYzNw==", "bodyText": "Enable suffix", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#discussion_r422365637", "createdAt": "2020-05-08T20:46:38Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/DirectConnectionConfig.java", "diffHunk": "@@ -0,0 +1,269 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import java.time.Duration;\n+import java.util.List;\n+\n+/**\n+ * Represents the connection config with {@link ConnectionMode#DIRECT} associated with Cosmos Client in the Azure Cosmos DB database service.\n+ */\n+public final class DirectConnectionConfig extends ConnectionConfig {\n+    //  Constants\n+    private static final Duration DEFAULT_IDLE_CHANNEL_TIMEOUT = Duration.ZERO;\n+    private static final Duration DEFAULT_IDLE_ENDPOINT_TIMEOUT = Duration.ofSeconds(70L);\n+    private static final int DEFAULT_MAX_CHANNELS_PER_ENDPOINT = 30;\n+    private static final int DEFAULT_MAX_REQUESTS_PER_ENDPOINT = 10;\n+\n+    private static final DirectConnectionConfig defaultConfig = new DirectConnectionConfig();\n+\n+    private Duration connectionTimeout;\n+    private Duration idleChannelTimeout;\n+    private Duration idleEndpointTimeout;\n+    private int maxChannelsPerEndpoint;\n+    private int maxRequestsPerChannel;\n+\n+    /**\n+     * Constructor.\n+     */\n+    public DirectConnectionConfig() {\n+        super(ConnectionMode.DIRECT);\n+        this.connectionTimeout = null;\n+        this.idleChannelTimeout = DEFAULT_IDLE_CHANNEL_TIMEOUT;\n+        this.idleEndpointTimeout = DEFAULT_IDLE_ENDPOINT_TIMEOUT;\n+        this.maxChannelsPerEndpoint = DEFAULT_MAX_CHANNELS_PER_ENDPOINT;\n+        this.maxRequestsPerChannel = DEFAULT_MAX_REQUESTS_PER_ENDPOINT;\n+    }\n+\n+    /**\n+     * Gets the default DIRECT connection configuration.\n+     *\n+     * @return the default direct connection configuration.\n+     */\n+    public static DirectConnectionConfig getDefaultConfig() {\n+        return DirectConnectionConfig.defaultConfig;\n+    }\n+\n+    //  TODO: (DANOBLE) - To update these docs.\n+\n+    /**\n+     * Gets the direct connection timeout\n+     * @return direct connection timeout\n+     */\n+    public Duration getConnectionTimeout() {\n+        return connectionTimeout;\n+    }\n+\n+    /**\n+     *  Sets the direct connection timeout\n+     * @param connectionTimeout the connection timeout\n+     * @return the {@link DirectConnectionConfig}\n+     */\n+    public DirectConnectionConfig setConnectionTimeout(Duration connectionTimeout) {\n+        this.connectionTimeout = connectionTimeout;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the idle channel timeout\n+     * @return idle channel timeout\n+     */\n+    public Duration getIdleChannelTimeout() {\n+        return idleChannelTimeout;\n+    }\n+\n+    /**\n+     * Sets the idle channel timeout\n+     * @param idleChannelTimeout idle channel timeout\n+     * @return the {@link DirectConnectionConfig}\n+     */\n+    public DirectConnectionConfig setIdleChannelTimeout(Duration idleChannelTimeout) {\n+        this.idleChannelTimeout = idleChannelTimeout;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the idle endpoint timeout\n+     * @return the idle endpoint timeout\n+     */\n+    public Duration getIdleEndpointTimeout() {\n+        return idleEndpointTimeout;\n+    }\n+\n+    /**\n+     * Sets the idle endpoint timeout\n+     * @param idleEndpointTimeout the idle endpoint timeout\n+     * @return the {@link DirectConnectionConfig}\n+     */\n+    public DirectConnectionConfig setIdleEndpointTimeout(Duration idleEndpointTimeout) {\n+        this.idleEndpointTimeout = idleEndpointTimeout;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the max channels per endpoint\n+     * @return the max channels per endpoint\n+     */\n+    public int getMaxChannelsPerEndpoint() {\n+        return maxChannelsPerEndpoint;\n+    }\n+\n+    /**\n+     * Sets the max channels per endpoint\n+     * @param maxChannelsPerEndpoint the max channels per endpoint\n+     * @return the {@link DirectConnectionConfig}\n+     */\n+    public DirectConnectionConfig setMaxChannelsPerEndpoint(int maxChannelsPerEndpoint) {\n+        this.maxChannelsPerEndpoint = maxChannelsPerEndpoint;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the max requests per endpoint\n+     * @return the max requests per endpoint\n+     */\n+    public int getMaxRequestsPerChannel() {\n+        return maxRequestsPerChannel;\n+    }\n+\n+    /**\n+     * Sets the max requests per endpoint\n+     * @param maxRequestsPerChannel the max requests per endpoint\n+     * @return the {@link DirectConnectionConfig}\n+     */\n+    public DirectConnectionConfig setMaxRequestsPerChannel(int maxRequestsPerChannel) {\n+        this.maxRequestsPerChannel = maxRequestsPerChannel;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the retry policy options associated with the DocumentClient instance.\n+     * <p>\n+     * Properties in the RetryOptions class allow application to customize the built-in\n+     * retry policies. This property is optional. When it's not set, the SDK uses the\n+     * default values for configuring the retry policies.  See RetryOptions class for\n+     * more details.\n+     *\n+     * @param throttlingRetryOptions the RetryOptions instance.\n+     * @return the {@link DirectConnectionConfig}.\n+     * @throws IllegalArgumentException thrown if an error occurs\n+     */\n+    @Override\n+    public DirectConnectionConfig setThrottlingRetryOptions(ThrottlingRetryOptions throttlingRetryOptions) {\n+        super.setThrottlingRetryOptions(throttlingRetryOptions);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the flag to enable endpoint discovery for geo-replicated database accounts.\n+     * <p>\n+     * When EnableEndpointDiscovery is true, the SDK will automatically discover the\n+     * current write and read regions to ensure requests are sent to the correct region\n+     * based on the capability of the region and the user's preference.\n+     * <p>\n+     * The default value for this property is true indicating endpoint discovery is enabled.\n+     *\n+     * @param endpointDiscoveryEnabled true if EndpointDiscovery is enabled.\n+     * @return the {@link DirectConnectionConfig}.\n+     */\n+    @Override\n+    public DirectConnectionConfig setEndpointDiscoveryEnabled(boolean endpointDiscoveryEnabled) {\n+        super.setEndpointDiscoveryEnabled(endpointDiscoveryEnabled);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the flag to enable writes on any regions for geo-replicated database accounts in the Azure\n+     * Cosmos DB service.\n+     * <p>\n+     * When the value of this property is true, the SDK will direct write operations to\n+     * available writable regions of geo-replicated database account. Writable regions\n+     * are ordered by PreferredRegions property. Setting the property value\n+     * to true has no effect until EnableMultipleWriteRegions in DatabaseAccount\n+     * is also set to true.\n+     * <p>\n+     * DEFAULT value is false indicating that writes are only directed to\n+     * first region in PreferredRegions property.\n+     *\n+     * @param usingMultipleWriteRegions flag to enable writes on any regions for geo-replicated\n+     * database accounts.\n+     * @return the {@link DirectConnectionConfig}.\n+     */\n+    @Override\n+    public DirectConnectionConfig setUsingMultipleWriteRegions(boolean usingMultipleWriteRegions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1976262d0843c83b37ab3be96c0996520ee8606a"}, "originalPosition": 194}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b77d044d414bab65317e3fe600f30625acb942c", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7b77d044d414bab65317e3fe600f30625acb942c", "committedDate": "2020-05-08T23:33:27Z", "message": "Implemented Code review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTkxMTE4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#pullrequestreview-408591118", "createdAt": "2020-05-09T00:31:43Z", "commit": {"oid": "7b77d044d414bab65317e3fe600f30625acb942c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDozMTo0M1rOGS3HGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDozMTo0M1rOGS3HGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMDQ4OA==", "bodyText": "Do these tests are always expected to run in Direct mode?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#discussion_r422430488", "createdAt": "2020-05-09T00:31:43Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/UniqueIndexTest.java", "diffHunk": "@@ -222,7 +222,7 @@ public void before_UniqueIndexTest() {\n         client = new CosmosClientBuilder()\n             .endpoint(TestConfigurations.HOST)\n             .key(TestConfigurations.MASTER_KEY)\n-            .connectionPolicy(ConnectionPolicy.getDefaultPolicy())\n+            .directMode(DirectConnectionConfig.getDefaultConfig())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b77d044d414bab65317e3fe600f30625acb942c"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTk0ODM3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#pullrequestreview-408594837", "createdAt": "2020-05-09T00:55:49Z", "commit": {"oid": "7b77d044d414bab65317e3fe600f30625acb942c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDo1NTo0OVrOGS3VFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDo1NTo0OVrOGS3VFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzNDA3MQ==", "bodyText": "you're consuming implementation package here and the class is public facing...", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#discussion_r422434071", "createdAt": "2020-05-09T00:55:49Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/GatewayConnectionConfig.java", "diffHunk": "@@ -0,0 +1,138 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import java.net.InetSocketAddress;\n+import java.time.Duration;\n+\n+import static com.azure.cosmos.implementation.ConnectionPolicy.DEFAULT_IDLE_CONNECTION_TIMEOUT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b77d044d414bab65317e3fe600f30625acb942c"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTk2Nzcx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#pullrequestreview-408596771", "createdAt": "2020-05-09T01:13:21Z", "commit": {"oid": "7b77d044d414bab65317e3fe600f30625acb942c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMToxMzoyMlrOGS3ckw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMToxMzoyMlrOGS3ckw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzNTk4Nw==", "bodyText": "endpointDiscoveryEnabled", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#discussion_r422435987", "createdAt": "2020-05-09T01:13:22Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "diffHunk": "@@ -327,6 +327,223 @@ public CosmosClientBuilder contentResponseOnWriteEnabled(boolean contentResponse\n         return this;\n     }\n \n+    /**\n+     * Sets the GATEWAY connection configuration to be used.\n+     *\n+     * @param gatewayConnectionConfig GATEWAY connection configuration\n+     * @return current CosmosClientBuilder\n+     */\n+    public CosmosClientBuilder gatewayMode(GatewayConnectionConfig gatewayConnectionConfig) {\n+        this.gatewayConnectionConfig = gatewayConnectionConfig;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the DIRECT connection configuration to be used.\n+     *\n+     * @param directConnectionConfig DIRECT connection configuration\n+     * @return current CosmosClientBuilder\n+     */\n+    public CosmosClientBuilder directMode(DirectConnectionConfig directConnectionConfig) {\n+        this.directConnectionConfig = directConnectionConfig;\n+        return this;\n+    }\n+\n+    /**\n+     * sets the value of the user-agent suffix.\n+     *\n+     * @param userAgentSuffix The value to be appended to the user-agent header, this is\n+     * used for monitoring purposes.\n+     *\n+     * @return current CosmosClientBuilder\n+     */\n+    public CosmosClientBuilder userAgentSuffix(String userAgentSuffix) {\n+        this.userAgentSuffix = userAgentSuffix;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the retry policy options associated with the DocumentClient instance.\n+     * <p>\n+     * Properties in the RetryOptions class allow application to customize the built-in\n+     * retry policies. This property is optional. When it's not set, the SDK uses the\n+     * default values for configuring the retry policies.  See RetryOptions class for\n+     * more details.\n+     *\n+     * @param throttlingRetryOptions the RetryOptions instance.\n+     * @return current CosmosClientBuilder\n+     * @throws IllegalArgumentException thrown if an error occurs\n+     */\n+    public CosmosClientBuilder throttlingRetryOptions(ThrottlingRetryOptions throttlingRetryOptions) {\n+        this.throttlingRetryOptions = throttlingRetryOptions;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the preferred regions for geo-replicated database accounts. For example,\n+     * \"East US\" as the preferred region.\n+     * <p>\n+     * When EnableEndpointDiscovery is true and PreferredRegions is non-empty,\n+     * the SDK will prefer to use the regions in the collection in the order\n+     * they are specified to perform operations.\n+     * <p>\n+     * If EnableEndpointDiscovery is set to false, this property is ignored.\n+     *\n+     * @param preferredRegions the list of preferred regions.\n+     * @return current CosmosClientBuilder\n+     */\n+    public CosmosClientBuilder preferredRegions(List<String> preferredRegions) {\n+        this.preferredRegions = preferredRegions;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the flag to enable endpoint discovery for geo-replicated database accounts.\n+     * <p>\n+     * When EnableEndpointDiscovery is true, the SDK will automatically discover the\n+     * current write and read regions to ensure requests are sent to the correct region\n+     * based on the capability of the region and the user's preference.\n+     * <p>\n+     * The default value for this property is true indicating endpoint discovery is enabled.\n+     *\n+     * @param endpointDiscoveryEnabled true if EndpointDiscovery is enabled.\n+     * @return current CosmosClientBuilder\n+     */\n+    public CosmosClientBuilder endpointDiscoverEnabled(boolean endpointDiscoveryEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b77d044d414bab65317e3fe600f30625acb942c"}, "originalPosition": 186}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTk4Mjg4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#pullrequestreview-408598288", "createdAt": "2020-05-09T01:27:22Z", "commit": {"oid": "7b77d044d414bab65317e3fe600f30625acb942c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NjA1NzM2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#pullrequestreview-408605736", "createdAt": "2020-05-09T02:59:40Z", "commit": {"oid": "7b77d044d414bab65317e3fe600f30625acb942c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjo1OTo0MFrOGS4CUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMzo0Njo1MFrOGS4PHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0NTY1MQ==", "bodyText": "Boolean readRequestsFallbackEnabled any reason we can't go with primitive type? boolean?\ndoes null have a special meaning?\nreadRequestsFallbackEnabled(null)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#discussion_r422445651", "createdAt": "2020-05-09T02:59:40Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "diffHunk": "@@ -327,6 +327,223 @@ public CosmosClientBuilder contentResponseOnWriteEnabled(boolean contentResponse\n         return this;\n     }\n \n+    /**\n+     * Sets the GATEWAY connection configuration to be used.\n+     *\n+     * @param gatewayConnectionConfig GATEWAY connection configuration\n+     * @return current CosmosClientBuilder\n+     */\n+    public CosmosClientBuilder gatewayMode(GatewayConnectionConfig gatewayConnectionConfig) {\n+        this.gatewayConnectionConfig = gatewayConnectionConfig;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the DIRECT connection configuration to be used.\n+     *\n+     * @param directConnectionConfig DIRECT connection configuration\n+     * @return current CosmosClientBuilder\n+     */\n+    public CosmosClientBuilder directMode(DirectConnectionConfig directConnectionConfig) {\n+        this.directConnectionConfig = directConnectionConfig;\n+        return this;\n+    }\n+\n+    /**\n+     * sets the value of the user-agent suffix.\n+     *\n+     * @param userAgentSuffix The value to be appended to the user-agent header, this is\n+     * used for monitoring purposes.\n+     *\n+     * @return current CosmosClientBuilder\n+     */\n+    public CosmosClientBuilder userAgentSuffix(String userAgentSuffix) {\n+        this.userAgentSuffix = userAgentSuffix;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the retry policy options associated with the DocumentClient instance.\n+     * <p>\n+     * Properties in the RetryOptions class allow application to customize the built-in\n+     * retry policies. This property is optional. When it's not set, the SDK uses the\n+     * default values for configuring the retry policies.  See RetryOptions class for\n+     * more details.\n+     *\n+     * @param throttlingRetryOptions the RetryOptions instance.\n+     * @return current CosmosClientBuilder\n+     * @throws IllegalArgumentException thrown if an error occurs\n+     */\n+    public CosmosClientBuilder throttlingRetryOptions(ThrottlingRetryOptions throttlingRetryOptions) {\n+        this.throttlingRetryOptions = throttlingRetryOptions;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the preferred regions for geo-replicated database accounts. For example,\n+     * \"East US\" as the preferred region.\n+     * <p>\n+     * When EnableEndpointDiscovery is true and PreferredRegions is non-empty,\n+     * the SDK will prefer to use the regions in the collection in the order\n+     * they are specified to perform operations.\n+     * <p>\n+     * If EnableEndpointDiscovery is set to false, this property is ignored.\n+     *\n+     * @param preferredRegions the list of preferred regions.\n+     * @return current CosmosClientBuilder\n+     */\n+    public CosmosClientBuilder preferredRegions(List<String> preferredRegions) {\n+        this.preferredRegions = preferredRegions;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the flag to enable endpoint discovery for geo-replicated database accounts.\n+     * <p>\n+     * When EnableEndpointDiscovery is true, the SDK will automatically discover the\n+     * current write and read regions to ensure requests are sent to the correct region\n+     * based on the capability of the region and the user's preference.\n+     * <p>\n+     * The default value for this property is true indicating endpoint discovery is enabled.\n+     *\n+     * @param endpointDiscoveryEnabled true if EndpointDiscovery is enabled.\n+     * @return current CosmosClientBuilder\n+     */\n+    public CosmosClientBuilder endpointDiscoverEnabled(boolean endpointDiscoveryEnabled) {\n+        this.endpointDiscoveryEnabled = endpointDiscoveryEnabled;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the flag to enable writes on any regions for geo-replicated database accounts in the Azure\n+     * Cosmos DB service.\n+     * <p>\n+     * When the value of this property is true, the SDK will direct write operations to\n+     * available writable regions of geo-replicated database account. Writable regions\n+     * are ordered by PreferredRegions property. Setting the property value\n+     * to true has no effect until EnableMultipleWriteRegions in DatabaseAccount\n+     * is also set to true.\n+     * <p>\n+     * DEFAULT value is false indicating that writes are only directed to\n+     * first region in PreferredRegions property.\n+     *\n+     * @param multipleWriteRegionsEnabled flag to enable writes on any regions for geo-replicated\n+     * database accounts.\n+     * @return current CosmosClientBuilder\n+     */\n+    public CosmosClientBuilder multipleWriteRegionsEnabled(boolean multipleWriteRegionsEnabled) {\n+        this.multipleWriteRegionsEnabled = multipleWriteRegionsEnabled;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets whether to allow for reads to go to multiple regions configured on an account of Azure Cosmos DB service.\n+     * <p>\n+     * DEFAULT value is null.\n+     * <p>\n+     * If this property is not set, the default is true for all Consistency Levels other than Bounded Staleness,\n+     * The default is false for Bounded Staleness.\n+     * 1. {@link #endpointDiscoveryEnabled} is true\n+     * 2. the Azure Cosmos DB account has more than one region\n+     *\n+     * @param readRequestsFallbackEnabled flag to enable reads to go to multiple regions configured on an account of\n+     * Azure Cosmos DB service.\n+     * @return current CosmosClientBuilder\n+     */\n+    public CosmosClientBuilder readRequestsFallbackEnabled(Boolean readRequestsFallbackEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b77d044d414bab65317e3fe600f30625acb942c"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0ODUwNQ==", "bodyText": "I think this should be Connection instead of Channel. Please verify.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#discussion_r422448505", "createdAt": "2020-05-09T03:41:11Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/DirectConnectionConfig.java", "diffHunk": "@@ -0,0 +1,148 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Represents the connection config with {@link ConnectionMode#DIRECT} associated with Cosmos Client in the Azure Cosmos DB database service.\n+ */\n+public final class DirectConnectionConfig {\n+    //  Constants\n+    private static final Duration DEFAULT_IDLE_CHANNEL_TIMEOUT = Duration.ZERO;\n+    private static final Duration DEFAULT_IDLE_ENDPOINT_TIMEOUT = Duration.ofSeconds(70L);\n+    private static final int DEFAULT_MAX_CHANNELS_PER_ENDPOINT = 30;\n+    private static final int DEFAULT_MAX_REQUESTS_PER_ENDPOINT = 10;\n+\n+    private static final DirectConnectionConfig defaultConfig = new DirectConnectionConfig();\n+\n+    private Duration connectionTimeout;\n+    private Duration idleChannelTimeout;\n+    private Duration idleEndpointTimeout;\n+    private int maxChannelsPerEndpoint;\n+    private int maxRequestsPerChannel;\n+\n+    /**\n+     * Constructor.\n+     */\n+    public DirectConnectionConfig() {\n+        this.connectionTimeout = null;\n+        this.idleChannelTimeout = DEFAULT_IDLE_CHANNEL_TIMEOUT;\n+        this.idleEndpointTimeout = DEFAULT_IDLE_ENDPOINT_TIMEOUT;\n+        this.maxChannelsPerEndpoint = DEFAULT_MAX_CHANNELS_PER_ENDPOINT;\n+        this.maxRequestsPerChannel = DEFAULT_MAX_REQUESTS_PER_ENDPOINT;\n+    }\n+\n+    /**\n+     * Gets the default DIRECT connection configuration.\n+     *\n+     * @return the default direct connection configuration.\n+     */\n+    public static DirectConnectionConfig getDefaultConfig() {\n+        return DirectConnectionConfig.defaultConfig;\n+    }\n+\n+    //  TODO: (DANOBLE) - To update these docs.\n+\n+    /**\n+     * Gets the direct connection timeout\n+     * @return direct connection timeout\n+     */\n+    public Duration getConnectionTimeout() {\n+        return connectionTimeout;\n+    }\n+\n+    /**\n+     *  Sets the direct connection timeout\n+     * @param connectionTimeout the connection timeout\n+     * @return the {@link DirectConnectionConfig}\n+     */\n+    public DirectConnectionConfig setConnectionTimeout(Duration connectionTimeout) {\n+        this.connectionTimeout = connectionTimeout;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the idle channel timeout\n+     * @return idle channel timeout\n+     */\n+    public Duration getIdleChannelTimeout() {\n+        return idleChannelTimeout;\n+    }\n+\n+    /**\n+     * Sets the idle channel timeout\n+     * @param idleChannelTimeout idle channel timeout\n+     * @return the {@link DirectConnectionConfig}\n+     */\n+    public DirectConnectionConfig setIdleChannelTimeout(Duration idleChannelTimeout) {\n+        this.idleChannelTimeout = idleChannelTimeout;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the idle endpoint timeout\n+     * @return the idle endpoint timeout\n+     */\n+    public Duration getIdleEndpointTimeout() {\n+        return idleEndpointTimeout;\n+    }\n+\n+    /**\n+     * Sets the idle endpoint timeout\n+     * @param idleEndpointTimeout the idle endpoint timeout\n+     * @return the {@link DirectConnectionConfig}\n+     */\n+    public DirectConnectionConfig setIdleEndpointTimeout(Duration idleEndpointTimeout) {\n+        this.idleEndpointTimeout = idleEndpointTimeout;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the max channels per endpoint\n+     * @return the max channels per endpoint\n+     */\n+    public int getMaxChannelsPerEndpoint() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b77d044d414bab65317e3fe600f30625acb942c"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0ODYxNA==", "bodyText": "change to getMaxConnectionPoolSize and the setter respectivly", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#discussion_r422448614", "createdAt": "2020-05-09T03:42:44Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/GatewayConnectionConfig.java", "diffHunk": "@@ -0,0 +1,138 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import java.net.InetSocketAddress;\n+import java.time.Duration;\n+\n+import static com.azure.cosmos.implementation.ConnectionPolicy.DEFAULT_IDLE_CONNECTION_TIMEOUT;\n+import static com.azure.cosmos.implementation.ConnectionPolicy.DEFAULT_MAX_POOL_SIZE;\n+import static com.azure.cosmos.implementation.ConnectionPolicy.DEFAULT_REQUEST_TIMEOUT;\n+\n+/**\n+ * Represents the connection config with {@link ConnectionMode#GATEWAY} associated with Cosmos Client in the Azure Cosmos DB database service.\n+ */\n+public final class GatewayConnectionConfig {\n+\n+    private static final GatewayConnectionConfig defaultConfig = new GatewayConnectionConfig();\n+\n+    private Duration requestTimeout;\n+    private int maxPoolSize;\n+    private Duration idleConnectionTimeout;\n+    private InetSocketAddress inetSocketProxyAddress;\n+\n+    /**\n+     * Constructor.\n+     */\n+    public GatewayConnectionConfig() {\n+        this.idleConnectionTimeout = DEFAULT_IDLE_CONNECTION_TIMEOUT;\n+        this.maxPoolSize = DEFAULT_MAX_POOL_SIZE;\n+        this.requestTimeout = DEFAULT_REQUEST_TIMEOUT;\n+    }\n+\n+    /**\n+     * Gets the default Gateway connection configuration.\n+     *\n+     * @return the default gateway connection configuration.\n+     */\n+    public static GatewayConnectionConfig getDefaultConfig() {\n+        return GatewayConnectionConfig.defaultConfig;\n+    }\n+\n+    /**\n+     * Gets the request timeout (time to wait for response from network peer).\n+     *\n+     * @return the request timeout duration.\n+     */\n+    public Duration getRequestTimeout() {\n+        return this.requestTimeout;\n+    }\n+\n+    /**\n+     * Sets the request timeout (time to wait for response from network peer).\n+     * The default is 60 seconds.\n+     *\n+     * @param requestTimeout the request timeout duration.\n+     * @return the {@link GatewayConnectionConfig}.\n+     */\n+    public GatewayConnectionConfig setRequestTimeout(Duration requestTimeout) {\n+        this.requestTimeout = requestTimeout;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the value of the connection pool size the client is using.\n+     *\n+     * @return connection pool size.\n+     */\n+    public int getMaxPoolSize() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b77d044d414bab65317e3fe600f30625acb942c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0ODc3Mg==", "bodyText": "don't return a singleton object otherwise, changing it once for one client may affect other clients too.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return GatewayConnectionConfig.defaultConfig;\n          \n          \n            \n                    return new GatewayConnectionConfig()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#discussion_r422448772", "createdAt": "2020-05-09T03:44:48Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/GatewayConnectionConfig.java", "diffHunk": "@@ -0,0 +1,138 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import java.net.InetSocketAddress;\n+import java.time.Duration;\n+\n+import static com.azure.cosmos.implementation.ConnectionPolicy.DEFAULT_IDLE_CONNECTION_TIMEOUT;\n+import static com.azure.cosmos.implementation.ConnectionPolicy.DEFAULT_MAX_POOL_SIZE;\n+import static com.azure.cosmos.implementation.ConnectionPolicy.DEFAULT_REQUEST_TIMEOUT;\n+\n+/**\n+ * Represents the connection config with {@link ConnectionMode#GATEWAY} associated with Cosmos Client in the Azure Cosmos DB database service.\n+ */\n+public final class GatewayConnectionConfig {\n+\n+    private static final GatewayConnectionConfig defaultConfig = new GatewayConnectionConfig();\n+\n+    private Duration requestTimeout;\n+    private int maxPoolSize;\n+    private Duration idleConnectionTimeout;\n+    private InetSocketAddress inetSocketProxyAddress;\n+\n+    /**\n+     * Constructor.\n+     */\n+    public GatewayConnectionConfig() {\n+        this.idleConnectionTimeout = DEFAULT_IDLE_CONNECTION_TIMEOUT;\n+        this.maxPoolSize = DEFAULT_MAX_POOL_SIZE;\n+        this.requestTimeout = DEFAULT_REQUEST_TIMEOUT;\n+    }\n+\n+    /**\n+     * Gets the default Gateway connection configuration.\n+     *\n+     * @return the default gateway connection configuration.\n+     */\n+    public static GatewayConnectionConfig getDefaultConfig() {\n+        return GatewayConnectionConfig.defaultConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b77d044d414bab65317e3fe600f30625acb942c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0ODkyNw==", "bodyText": "don't return a static singleton instance otherwise changing the default for one client may affect the other client defaults too.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return DirectConnectionConfig.defaultConfig;\n          \n          \n            \n                    return new DirectConnectoinConfig()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#discussion_r422448927", "createdAt": "2020-05-09T03:46:50Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/DirectConnectionConfig.java", "diffHunk": "@@ -0,0 +1,148 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Represents the connection config with {@link ConnectionMode#DIRECT} associated with Cosmos Client in the Azure Cosmos DB database service.\n+ */\n+public final class DirectConnectionConfig {\n+    //  Constants\n+    private static final Duration DEFAULT_IDLE_CHANNEL_TIMEOUT = Duration.ZERO;\n+    private static final Duration DEFAULT_IDLE_ENDPOINT_TIMEOUT = Duration.ofSeconds(70L);\n+    private static final int DEFAULT_MAX_CHANNELS_PER_ENDPOINT = 30;\n+    private static final int DEFAULT_MAX_REQUESTS_PER_ENDPOINT = 10;\n+\n+    private static final DirectConnectionConfig defaultConfig = new DirectConnectionConfig();\n+\n+    private Duration connectionTimeout;\n+    private Duration idleChannelTimeout;\n+    private Duration idleEndpointTimeout;\n+    private int maxChannelsPerEndpoint;\n+    private int maxRequestsPerChannel;\n+\n+    /**\n+     * Constructor.\n+     */\n+    public DirectConnectionConfig() {\n+        this.connectionTimeout = null;\n+        this.idleChannelTimeout = DEFAULT_IDLE_CHANNEL_TIMEOUT;\n+        this.idleEndpointTimeout = DEFAULT_IDLE_ENDPOINT_TIMEOUT;\n+        this.maxChannelsPerEndpoint = DEFAULT_MAX_CHANNELS_PER_ENDPOINT;\n+        this.maxRequestsPerChannel = DEFAULT_MAX_REQUESTS_PER_ENDPOINT;\n+    }\n+\n+    /**\n+     * Gets the default DIRECT connection configuration.\n+     *\n+     * @return the default direct connection configuration.\n+     */\n+    public static DirectConnectionConfig getDefaultConfig() {\n+        return DirectConnectionConfig.defaultConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b77d044d414bab65317e3fe600f30625acb942c"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NjYyMDI2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#pullrequestreview-408662026", "createdAt": "2020-05-09T15:58:27Z", "commit": {"oid": "7b77d044d414bab65317e3fe600f30625acb942c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNTo1ODoyN1rOGS8IVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNTo1ODoyN1rOGS8IVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUxMjcyNw==", "bodyText": "in Direct mode we still establish some connections to GW (master resource operations and query plan retrieval, etc).\nHow are we controlling the GW Connection specifics in Direct mode?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#discussion_r422512727", "createdAt": "2020-05-09T15:58:27Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/DirectConnectionConfig.java", "diffHunk": "@@ -0,0 +1,148 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Represents the connection config with {@link ConnectionMode#DIRECT} associated with Cosmos Client in the Azure Cosmos DB database service.\n+ */\n+public final class DirectConnectionConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b77d044d414bab65317e3fe600f30625acb942c"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NjYyODkz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#pullrequestreview-408662893", "createdAt": "2020-05-09T16:06:19Z", "commit": {"oid": "7b77d044d414bab65317e3fe600f30625acb942c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNjowNjoxOVrOGS8NEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNjowNjoxOVrOGS8NEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUxMzkzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .endpointDiscoverEnabled(builder.isEndpointDiscoveryEnabled())\n          \n          \n            \n            endpointDiscoveryEnabled", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#discussion_r422513939", "createdAt": "2020-05-09T16:06:19Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBridgeInternal.java", "diffHunk": "@@ -59,13 +60,20 @@ public static CosmosClientBuilder cloneCosmosClientBuilder(CosmosClientBuilder b\n \n         copy.endpoint(builder.getEndpoint())\n             .key(builder.getKey())\n-            .connectionPolicy(builder.getConnectionPolicy())\n+            .directMode(builder.getDirectConnectionConfig())\n+            .gatewayMode(builder.getGatewayConnectionConfig())\n             .consistencyLevel(builder.getConsistencyLevel())\n             .keyCredential(builder.getKeyCredential())\n             .permissions(builder.getPermissions())\n             .authorizationTokenResolver(builder.getAuthorizationTokenResolver())\n             .resourceToken(builder.getResourceToken())\n-            .contentResponseOnWriteEnabled(builder.isContentResponseOnWriteEnabled());\n+            .contentResponseOnWriteEnabled(builder.isContentResponseOnWriteEnabled())\n+            .userAgentSuffix(builder.getUserAgentSuffix())\n+            .throttlingRetryOptions(builder.getThrottlingRetryOptions())\n+            .preferredRegions(builder.getPreferredRegions())\n+            .endpointDiscoverEnabled(builder.isEndpointDiscoveryEnabled())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b77d044d414bab65317e3fe600f30625acb942c"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NjYzMDMw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#pullrequestreview-408663030", "createdAt": "2020-05-09T16:07:55Z", "commit": {"oid": "7b77d044d414bab65317e3fe600f30625acb942c"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "529e75df4d208f84c712e21834e3621e27bc1b8c", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/529e75df4d208f84c712e21834e3621e27bc1b8c", "committedDate": "2020-05-09T20:06:47Z", "message": "Fixed some public surface names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dde1d5b38690eea6e05a03dc915775c5a649786f", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/dde1d5b38690eea6e05a03dc915775c5a649786f", "committedDate": "2020-05-10T23:25:17Z", "message": "Exposed additional gateway client properties in case of direct connection mode:"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e3e8a9f716e81b68c93feaf34b9fd1e9ab8b53c", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1e3e8a9f716e81b68c93feaf34b9fd1e9ab8b53c", "committedDate": "2020-05-11T22:38:33Z", "message": "Updated cosmos client builders with new default direct, default gateway and direct gateway configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1524e552aa256d44488fcd92944f36f34443d31", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b1524e552aa256d44488fcd92944f36f34443d31", "committedDate": "2020-05-11T22:57:20Z", "message": "Merged latest master and resolved conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NjEzOTcy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#pullrequestreview-409613972", "createdAt": "2020-05-12T00:09:16Z", "commit": {"oid": "b1524e552aa256d44488fcd92944f36f34443d31"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70634a61eb183be2e5603660ed1b063035bcd7e3", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/70634a61eb183be2e5603660ed1b063035bcd7e3", "committedDate": "2020-05-12T02:06:30Z", "message": "Fixed cosmos client creation in diagnosis tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NjUzMTUx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#pullrequestreview-409653151", "createdAt": "2020-05-12T02:16:36Z", "commit": {"oid": "b1524e552aa256d44488fcd92944f36f34443d31"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMjoxNjozNlrOGTztMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMjoxNjozNlrOGTztMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQyMzI4Mw==", "bodyText": "The RntbdTransportClient will treat the DirectConnectionConfig as definitive. Regardless of where we put the default values, changes to them will affect behavior, and changes to behavior must be rationalized and documented. This sounds like a good reason to move the public-facing defaults to the ConnectionConfig classes. It will make it easier for us to understand the impact of a change. The transport clients could then pull defaults from their respective public config classes; not the other way around.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#discussion_r423423283", "createdAt": "2020-05-12T02:16:36Z", "author": {"login": "David-Noble-at-work"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/GatewayConnectionConfig.java", "diffHunk": "@@ -0,0 +1,138 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import java.net.InetSocketAddress;\n+import java.time.Duration;\n+\n+import static com.azure.cosmos.implementation.ConnectionPolicy.DEFAULT_IDLE_CONNECTION_TIMEOUT;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzNDA3MQ=="}, "originalCommit": {"oid": "7b77d044d414bab65317e3fe600f30625acb942c"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NjY0ODM3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#pullrequestreview-409664837", "createdAt": "2020-05-12T02:57:13Z", "commit": {"oid": "70634a61eb183be2e5603660ed1b063035bcd7e3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMjo1NzoxM1rOGT0SyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMjo1NzoxM1rOGT0SyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzMjkwNQ==", "bodyText": "does this.gatewayConectionConfig get initialized somewhere else if only \"directMode() is called or is it null? also for direct mode we need a different set of default values for it, not the default ones, right?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10970#discussion_r423432905", "createdAt": "2020-05-12T02:57:13Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "diffHunk": "@@ -327,6 +327,262 @@ public CosmosClientBuilder contentResponseOnWriteEnabled(boolean contentResponse\n         return this;\n     }\n \n+    /**\n+     * Sets the default GATEWAY connection configuration to be used.\n+     *\n+     * @return current CosmosClientBuilder\n+     */\n+    public CosmosClientBuilder gatewayMode() {\n+        this.gatewayConnectionConfig = GatewayConnectionConfig.getDefaultConfig();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the GATEWAY connection configuration to be used.\n+     *\n+     * @param gatewayConnectionConfig gateway connection configuration\n+     * @return current CosmosClientBuilder\n+     */\n+    public CosmosClientBuilder gatewayMode(GatewayConnectionConfig gatewayConnectionConfig) {\n+        this.gatewayConnectionConfig = gatewayConnectionConfig;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the default DIRECT connection configuration to be used.\n+     *\n+     * @return current CosmosClientBuilder\n+     */\n+    public CosmosClientBuilder directMode() {\n+        this.directConnectionConfig = DirectConnectionConfig.getDefaultConfig();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70634a61eb183be2e5603660ed1b063035bcd7e3"}, "originalPosition": 131}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88e6485ddfaa77ce57f781c87ea4014eb8f927b7", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/88e6485ddfaa77ce57f781c87ea4014eb8f927b7", "committedDate": "2020-05-12T03:12:15Z", "message": "Merged latest master and resolved conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14c59ed16956cc686a8a2d9e1ed2718b78da8325", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/14c59ed16956cc686a8a2d9e1ed2718b78da8325", "committedDate": "2020-05-12T03:18:58Z", "message": "Copied constants to GatewayConnectionConfig"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4413, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}