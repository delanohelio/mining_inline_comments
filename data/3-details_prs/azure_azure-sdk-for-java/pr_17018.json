{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMjA4MTAw", "number": 17018, "title": "[Service Bus] Remove send via option from sender builder", "bodyText": "As described in #17017, we want to remove the send via options from the public API surface so that in a future updated we can provide a cleaner solution from transaction across entities.\nIn this PR I have,\n\nRemoved the viaQueueName and viaTopicName from the sender builder\nRemoved any tests that tested the above on the builder\nNot done any changes to the internal implementation of the send via feature\nCommented tests that test this feature using the builder. Did not remove it intentionally so that we can refer to these when we revisit transactions across entities\n\nCloses #17017", "createdAt": "2020-10-30T18:33:27Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17018", "merged": true, "mergeCommit": {"oid": "98c087e88e405d812ce42f9ccd48865bed688a0f"}, "closed": true, "closedAt": "2020-10-31T02:42:18Z", "author": {"login": "ramya-rao-a"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXrGXjAH2gAyNTEzMjA4MTAwOjc1ZjE0YTVkMjNhMjQ1YWY5MGExODljNDQ3NWFiMzZiNzFkZjM5YTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXy2vIAFqTUyMTEwODc0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "75f14a5d23a245af90a189c4475ab36b71df39a8", "author": {"user": {"login": "ramya-rao-a", "name": "Ramya Rao"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/75f14a5d23a245af90a189c4475ab36b71df39a8", "committedDate": "2020-10-30T18:30:22Z", "message": "[Service Bus] Remove send via option from sender builder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c08f9dec0cc669cf671ff1abd22c24b51dcb9ea5", "author": {"user": {"login": "ramya-rao-a", "name": "Ramya Rao"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c08f9dec0cc669cf671ff1abd22c24b51dcb9ea5", "committedDate": "2020-10-30T18:49:20Z", "message": "Comment the test annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd8cb5e0350bf193646b3eee18d44a8ddf9933f5", "author": {"user": {"login": "ramya-rao-a", "name": "Ramya Rao"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fd8cb5e0350bf193646b3eee18d44a8ddf9933f5", "committedDate": "2020-10-30T19:01:53Z", "message": "Remove unused import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDY5NDYy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17018#pullrequestreview-521069462", "createdAt": "2020-10-30T22:30:02Z", "commit": {"oid": "fd8cb5e0350bf193646b3eee18d44a8ddf9933f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMjozMDowMlrOHriGvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMjozMDowMlrOHriGvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQwOTU5OQ==", "bodyText": "Should we remove them instead of comment out?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17018#discussion_r515409599", "createdAt": "2020-10-30T22:30:02Z", "author": {"login": "YijunXieMS"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientIntegrationTest.java", "diffHunk": "@@ -146,157 +145,157 @@ void nonSessionMessageBatch(MessagingEntityType entityType) {\n     /**\n      * Verifies that we can send message to final destination using via-queue.\n      */\n-    @Test\n-    void viaQueueMessageSendTest() {\n-        // Arrange\n-        final boolean useCredentials = false;\n-        final Duration shortTimeout = Duration.ofSeconds(15);\n-        final int viaIntermediateEntity = TestUtils.USE_CASE_SEND_VIA_QUEUE_1;\n-        final int destinationEntity = TestUtils.USE_CASE_SEND_VIA_QUEUE_2;\n-        final boolean shareConnection = true;\n-        final MessagingEntityType entityType = MessagingEntityType.QUEUE;\n-        final boolean isSessionEnabled = false;\n-        final String messageId = UUID.randomUUID().toString();\n-        final int total = 1;\n-        final int totalToDestination = 2;\n-        final List<ServiceBusMessage> messages = TestUtils.getServiceBusMessages(total, messageId, CONTENTS_BYTES);\n-        final String viaQueueName = getQueueName(viaIntermediateEntity);\n-\n-        setSenderAndReceiver(entityType, viaIntermediateEntity, useCredentials);\n-\n-        final ServiceBusSenderAsyncClient destination1ViaSender = getSenderBuilder(useCredentials, entityType,\n-            destinationEntity, false, shareConnection)\n-            .viaQueueName(viaQueueName)\n-            .buildAsyncClient();\n-        final ServiceBusReceiverAsyncClient destination1Receiver = getReceiverBuilder(useCredentials, entityType,\n-            destinationEntity, shareConnection)\n-            .receiveMode(ReceiveMode.RECEIVE_AND_DELETE)\n-            .buildAsyncClient();\n-\n-        final AtomicReference<ServiceBusTransactionContext> transaction = new AtomicReference<>();\n-\n-        // Act\n-        try {\n-            StepVerifier.create(destination1ViaSender.createTransaction())\n-                .assertNext(transactionContext -> {\n-                    transaction.set(transactionContext);\n-                    assertNotNull(transaction);\n-                })\n-                .verifyComplete();\n-            assertNotNull(transaction.get());\n-\n-            StepVerifier.create(sender.sendMessages(messages, transaction.get()))\n-                .verifyComplete();\n-            StepVerifier.create(destination1ViaSender.sendMessages(messages, transaction.get()))\n-                .verifyComplete();\n-            StepVerifier.create(destination1ViaSender.sendMessages(messages, transaction.get()))\n-                .verifyComplete();\n-\n-            StepVerifier.create(destination1ViaSender.commitTransaction(transaction.get())\n-                .delaySubscription(Duration.ofSeconds(1)))\n-                .verifyComplete();\n-\n-            // Assert\n-            // Verify message is received by final destination Entity\n-            StepVerifier.create(destination1Receiver.receiveMessages().take(totalToDestination).timeout(shortTimeout))\n-                .assertNext(receivedMessage -> {\n-                    assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n-                    messagesPending.decrementAndGet();\n-                })\n-                .assertNext(receivedMessage -> {\n-                    assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n-                    messagesPending.decrementAndGet();\n-                })\n-                .verifyComplete();\n-\n-            // Verify, intermediate-via queue has it delivered to intermediate Entity.\n-            StepVerifier.create(receiver.receiveMessages().take(total).timeout(shortTimeout))\n-                .assertNext(receivedMessage -> {\n-                    assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n-                    messagesPending.decrementAndGet();\n-                })\n-                .verifyComplete();\n-        } finally {\n-            destination1Receiver.close();\n-            destination1ViaSender.close();\n-        }\n-    }\n+    // @Test\n+    // void viaQueueMessageSendTest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd8cb5e0350bf193646b3eee18d44a8ddf9933f5"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDkyODQw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17018#pullrequestreview-521092840", "createdAt": "2020-10-31T00:12:26Z", "commit": {"oid": "fd8cb5e0350bf193646b3eee18d44a8ddf9933f5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDk0NDk4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17018#pullrequestreview-521094498", "createdAt": "2020-10-31T00:24:22Z", "commit": {"oid": "fd8cb5e0350bf193646b3eee18d44a8ddf9933f5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMTA4NzQz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17018#pullrequestreview-521108743", "createdAt": "2020-10-31T03:25:13Z", "commit": {"oid": "fd8cb5e0350bf193646b3eee18d44a8ddf9933f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMzoyNToxNFrOHrkibA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMzoyNToxNFrOHrkibA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ0OTQ1Mg==", "bodyText": "Normally we delete the test if we do not need it soon. We can always get it back from git history and old commits.\nIf we are going to introduce this next months or soon, we can disable by adding @Disable annotation.\n@Disabled(\"Reason why disable.\")\nThere are other test in this file, so we can not delete the file but remove the test.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17018#discussion_r515449452", "createdAt": "2020-10-31T03:25:14Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientIntegrationTest.java", "diffHunk": "@@ -146,157 +145,157 @@ void nonSessionMessageBatch(MessagingEntityType entityType) {\n     /**\n      * Verifies that we can send message to final destination using via-queue.\n      */\n-    @Test\n-    void viaQueueMessageSendTest() {\n-        // Arrange\n-        final boolean useCredentials = false;\n-        final Duration shortTimeout = Duration.ofSeconds(15);\n-        final int viaIntermediateEntity = TestUtils.USE_CASE_SEND_VIA_QUEUE_1;\n-        final int destinationEntity = TestUtils.USE_CASE_SEND_VIA_QUEUE_2;\n-        final boolean shareConnection = true;\n-        final MessagingEntityType entityType = MessagingEntityType.QUEUE;\n-        final boolean isSessionEnabled = false;\n-        final String messageId = UUID.randomUUID().toString();\n-        final int total = 1;\n-        final int totalToDestination = 2;\n-        final List<ServiceBusMessage> messages = TestUtils.getServiceBusMessages(total, messageId, CONTENTS_BYTES);\n-        final String viaQueueName = getQueueName(viaIntermediateEntity);\n-\n-        setSenderAndReceiver(entityType, viaIntermediateEntity, useCredentials);\n-\n-        final ServiceBusSenderAsyncClient destination1ViaSender = getSenderBuilder(useCredentials, entityType,\n-            destinationEntity, false, shareConnection)\n-            .viaQueueName(viaQueueName)\n-            .buildAsyncClient();\n-        final ServiceBusReceiverAsyncClient destination1Receiver = getReceiverBuilder(useCredentials, entityType,\n-            destinationEntity, shareConnection)\n-            .receiveMode(ReceiveMode.RECEIVE_AND_DELETE)\n-            .buildAsyncClient();\n-\n-        final AtomicReference<ServiceBusTransactionContext> transaction = new AtomicReference<>();\n-\n-        // Act\n-        try {\n-            StepVerifier.create(destination1ViaSender.createTransaction())\n-                .assertNext(transactionContext -> {\n-                    transaction.set(transactionContext);\n-                    assertNotNull(transaction);\n-                })\n-                .verifyComplete();\n-            assertNotNull(transaction.get());\n-\n-            StepVerifier.create(sender.sendMessages(messages, transaction.get()))\n-                .verifyComplete();\n-            StepVerifier.create(destination1ViaSender.sendMessages(messages, transaction.get()))\n-                .verifyComplete();\n-            StepVerifier.create(destination1ViaSender.sendMessages(messages, transaction.get()))\n-                .verifyComplete();\n-\n-            StepVerifier.create(destination1ViaSender.commitTransaction(transaction.get())\n-                .delaySubscription(Duration.ofSeconds(1)))\n-                .verifyComplete();\n-\n-            // Assert\n-            // Verify message is received by final destination Entity\n-            StepVerifier.create(destination1Receiver.receiveMessages().take(totalToDestination).timeout(shortTimeout))\n-                .assertNext(receivedMessage -> {\n-                    assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n-                    messagesPending.decrementAndGet();\n-                })\n-                .assertNext(receivedMessage -> {\n-                    assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n-                    messagesPending.decrementAndGet();\n-                })\n-                .verifyComplete();\n-\n-            // Verify, intermediate-via queue has it delivered to intermediate Entity.\n-            StepVerifier.create(receiver.receiveMessages().take(total).timeout(shortTimeout))\n-                .assertNext(receivedMessage -> {\n-                    assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n-                    messagesPending.decrementAndGet();\n-                })\n-                .verifyComplete();\n-        } finally {\n-            destination1Receiver.close();\n-            destination1ViaSender.close();\n-        }\n-    }\n+    // @Test\n+    // void viaQueueMessageSendTest() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQwOTU5OQ=="}, "originalCommit": {"oid": "fd8cb5e0350bf193646b3eee18d44a8ddf9933f5"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1604, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}