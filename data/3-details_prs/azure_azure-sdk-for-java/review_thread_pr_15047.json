{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0MjMyNjI0", "number": 15047, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOToyMzo0MFrOEiQq5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTowMTowNlrOEiSmYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzYwMTY3OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/util/TelemetryOptions.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOToyMzo0MFrOHQCllg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOTo0MTowOFrOHQDIzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4MTY1NA==", "bodyText": "To match our current pattern, this class should be called \"PublishTelemetryRequestOptions\" much like how we have \"UpdateComponentRequestOptions\" and other similar ones", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486581654", "createdAt": "2020-09-10T19:23:40Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/util/TelemetryOptions.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.azure.digitaltwins.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.UUID;\n+\n+/**\n+ * The additional information to be used when processing a telemetry request.\n+ */\n+@Fluent\n+public final class TelemetryOptions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d827eef4632b80caf11411bf6e8925ff48cc1786"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4NjI2OA==", "bodyText": "Whether we need a separate options class for \"PublishTelemetryRequestOptions\" and \"PublishComponentTelemetryRequestOptions\" is also worth considering. I wouldn't expect to need that separation though", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486586268", "createdAt": "2020-09-10T19:32:30Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/util/TelemetryOptions.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.azure.digitaltwins.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.UUID;\n+\n+/**\n+ * The additional information to be used when processing a telemetry request.\n+ */\n+@Fluent\n+public final class TelemetryOptions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4MTY1NA=="}, "originalCommit": {"oid": "d827eef4632b80caf11411bf6e8925ff48cc1786"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU5MDY3MA==", "bodyText": "There is no property in the options that separates the logic from one API to the other. I will keep using the same type.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486590670", "createdAt": "2020-09-10T19:41:08Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/util/TelemetryOptions.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.azure.digitaltwins.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.UUID;\n+\n+/**\n+ * The additional information to be used when processing a telemetry request.\n+ */\n+@Fluent\n+public final class TelemetryOptions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4MTY1NA=="}, "originalCommit": {"oid": "d827eef4632b80caf11411bf6e8925ff48cc1786"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzYwMzQyOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/util/TelemetryOptions.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOToyNDoxNlrOHQCmuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDowNjo0NVrOHQD57g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4MTk0Nw==", "bodyText": "@abhipsaMisra mentioned earlier that request options objects like these should not be fluent and should not be marked as fluent.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486581947", "createdAt": "2020-09-10T19:24:16Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/util/TelemetryOptions.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.azure.digitaltwins.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.UUID;\n+\n+/**\n+ * The additional information to be used when processing a telemetry request.\n+ */\n+@Fluent", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d827eef4632b80caf11411bf6e8925ff48cc1786"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4MjU2Mw==", "bodyText": "no, request options are considered model classes (input/output to API surface) so they should be fluent ... I confirmed it with Srikanta.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486582563", "createdAt": "2020-09-10T19:25:28Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/util/TelemetryOptions.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.azure.digitaltwins.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.UUID;\n+\n+/**\n+ * The additional information to be used when processing a telemetry request.\n+ */\n+@Fluent", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4MTk0Nw=="}, "originalCommit": {"oid": "d827eef4632b80caf11411bf6e8925ff48cc1786"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwMzI0Ng==", "bodyText": "Yeah, Azad synced up with Srikanta, and he explained that from client libraries' perspective, everything that is a request/ response in our public API is a model. It doesn't have anything to do with the models that we actually send over the wire.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486603246", "createdAt": "2020-09-10T20:06:45Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/util/TelemetryOptions.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.azure.digitaltwins.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.UUID;\n+\n+/**\n+ * The additional information to be used when processing a telemetry request.\n+ */\n+@Fluent", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4MTk0Nw=="}, "originalCommit": {"oid": "d827eef4632b80caf11411bf6e8925ff48cc1786"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzYwOTE3OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/util/TelemetryOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOToyNjowMFrOHQCqWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOToyNzozOFrOHQCtlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4Mjg3NQ==", "bodyText": "Timestamp is one word, so no need to camelcase the Stamp here and everywhere", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486582875", "createdAt": "2020-09-10T19:26:00Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/util/TelemetryOptions.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.azure.digitaltwins.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.UUID;\n+\n+/**\n+ * The additional information to be used when processing a telemetry request.\n+ */\n+@Fluent\n+public final class TelemetryOptions {\n+\n+    /**\n+     * A unique message identifier (within the scope of the digital twin id) that is commonly used for de-duplicating messages.\n+     * Defaults to a random guid.\n+     */\n+    private String messageId = UUID.randomUUID().toString();\n+\n+    /**\n+     * An RFC 3339 timestamp that identifies the time the telemetry was measured.\n+     * It defaults to the current date/time UTC.\n+     */\n+    private OffsetDateTime timeStamp = OffsetDateTime.now(ZoneOffset.UTC);\n+\n+    /**\n+     * Gets the message Id.\n+     * @return A unique message identifier (within the scope of the digital twin id) that is commonly used for de-duplicating messages.\n+     */\n+    public String getMessageId() {\n+        return this.messageId;\n+    }\n+\n+    /**\n+     * Gets the timestamp.\n+     * @return The timestamp that identifies the time the telemetry was measured.\n+     */\n+    public OffsetDateTime getTimeStamp() {\n+        return this.timeStamp;\n+    }\n+\n+    /**\n+     * Set the message Id\n+     * @param messageId A unique message identifier (within the scope of the digital twin id) that is commonly used for de-duplicating messages.\n+     * @return The TelemetryOption object itself.\n+     */\n+    public TelemetryOptions setMessageId(String messageId) {\n+        this.messageId = messageId;\n+        return this;\n+    }\n+\n+    /**\n+     * Set the timestamp\n+     * @param timeStamp The timestamp that identifies the time the telemetry was measured.\n+     * @return The TelemetryOption object itself.\n+     */\n+    public TelemetryOptions setTimeStamp(OffsetDateTime timeStamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d827eef4632b80caf11411bf6e8925ff48cc1786"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4MzcwMA==", "bodyText": "yeah, I thought so .. we have it incorrectly cased in .NET SDK", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486583700", "createdAt": "2020-09-10T19:27:38Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/util/TelemetryOptions.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.azure.digitaltwins.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.UUID;\n+\n+/**\n+ * The additional information to be used when processing a telemetry request.\n+ */\n+@Fluent\n+public final class TelemetryOptions {\n+\n+    /**\n+     * A unique message identifier (within the scope of the digital twin id) that is commonly used for de-duplicating messages.\n+     * Defaults to a random guid.\n+     */\n+    private String messageId = UUID.randomUUID().toString();\n+\n+    /**\n+     * An RFC 3339 timestamp that identifies the time the telemetry was measured.\n+     * It defaults to the current date/time UTC.\n+     */\n+    private OffsetDateTime timeStamp = OffsetDateTime.now(ZoneOffset.UTC);\n+\n+    /**\n+     * Gets the message Id.\n+     * @return A unique message identifier (within the scope of the digital twin id) that is commonly used for de-duplicating messages.\n+     */\n+    public String getMessageId() {\n+        return this.messageId;\n+    }\n+\n+    /**\n+     * Gets the timestamp.\n+     * @return The timestamp that identifies the time the telemetry was measured.\n+     */\n+    public OffsetDateTime getTimeStamp() {\n+        return this.timeStamp;\n+    }\n+\n+    /**\n+     * Set the message Id\n+     * @param messageId A unique message identifier (within the scope of the digital twin id) that is commonly used for de-duplicating messages.\n+     * @return The TelemetryOption object itself.\n+     */\n+    public TelemetryOptions setMessageId(String messageId) {\n+        this.messageId = messageId;\n+        return this;\n+    }\n+\n+    /**\n+     * Set the timestamp\n+     * @param timeStamp The timestamp that identifies the time the telemetry was measured.\n+     * @return The TelemetryOption object itself.\n+     */\n+    public TelemetryOptions setTimeStamp(OffsetDateTime timeStamp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4Mjg3NQ=="}, "originalCommit": {"oid": "d827eef4632b80caf11411bf6e8925ff48cc1786"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzYyMTA4OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOToyOTo0NlrOHQCxxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDoxNjoyMVrOHQEMeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4NDc3NQ==", "bodyText": "Careful here. The PL expects an Object, so this payload string will be serialized before being set as the http request payload, which isn't what we want.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486584775", "createdAt": "2020-09-10T19:29:46Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1338,4 +1338,112 @@ public HttpPipeline getHttpPipeline() {\n     }\n \n     //endregion Event Route APIs\n+\n+    //region Telemetry APIs\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload) {\n+        TelemetryOptions telemetryOptions = new TelemetryOptions();\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, telemetryOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param telemetryOptions The additional information to be used when processing a telemetry request.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload, TelemetryOptions telemetryOptions) {\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, telemetryOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param telemetryOptions The additional information to be used when processing a telemetry request.\n+     * @return A {@link Response} containing an empty mono.\n+     */\n+    public Mono<Response<Void>> publishTelemetryWithResponse(String digitalTwinId, String payload, TelemetryOptions telemetryOptions) {\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, telemetryOptions, context));\n+    }\n+\n+    Mono<Response<Void>> publishTelemetryWithResponse(String digitalTwinId, String payload, TelemetryOptions telemetryOptions, Context context) {\n+        return protocolLayer.getDigitalTwins().sendTelemetryWithResponseAsync(\n+            digitalTwinId,\n+            telemetryOptions.getMessageId(),\n+            payload,\n+            telemetryOptions.getTimeStamp().toString(),\n+            context);\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin's component\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param componentName The name of the DTDL component.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishComponentTelemetry(String digitalTwinId, String componentName, String payload) {\n+        TelemetryOptions telemetryOptions = new TelemetryOptions();\n+        return withContext(context -> publishComponentTelemetryWithResponse(digitalTwinId, componentName, payload, telemetryOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin's component\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param componentName The name of the DTDL component.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param telemetryOptions The additional information to be used when processing a telemetry request.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishComponentTelemetry(String digitalTwinId, String componentName, String payload, TelemetryOptions telemetryOptions) {\n+        return withContext(context -> publishComponentTelemetryWithResponse(digitalTwinId, componentName, payload, telemetryOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin's component\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param componentName The name of the DTDL component.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param telemetryOptions The additional information to be used when processing a telemetry request.\n+     * @return A {@link Response} containing an empty mono.\n+     */\n+    public Mono<Response<Void>> publishComponentTelemetryWithResponse(String digitalTwinId, String componentName, String payload, TelemetryOptions telemetryOptions) {\n+        return withContext(context -> publishComponentTelemetryWithResponse(digitalTwinId, componentName, payload, telemetryOptions, context));\n+    }\n+\n+    Mono<Response<Void>> publishComponentTelemetryWithResponse(String digitalTwinId, String componentName, String payload, TelemetryOptions telemetryOptions, Context context) {\n+        return protocolLayer.getDigitalTwins().sendComponentTelemetryWithResponseAsync(\n+            digitalTwinId,\n+            componentName,\n+            telemetryOptions.getMessageId(),\n+            payload,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d827eef4632b80caf11411bf6e8925ff48cc1786"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNzY0OQ==", "bodyText": "We have overridden the default serialization behavior to not do this extra serialization -> if you pass in an object of type String, which is a valid json, then it'll be sent over the wire as-is.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486607649", "createdAt": "2020-09-10T20:15:38Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1338,4 +1338,112 @@ public HttpPipeline getHttpPipeline() {\n     }\n \n     //endregion Event Route APIs\n+\n+    //region Telemetry APIs\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload) {\n+        TelemetryOptions telemetryOptions = new TelemetryOptions();\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, telemetryOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param telemetryOptions The additional information to be used when processing a telemetry request.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload, TelemetryOptions telemetryOptions) {\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, telemetryOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param telemetryOptions The additional information to be used when processing a telemetry request.\n+     * @return A {@link Response} containing an empty mono.\n+     */\n+    public Mono<Response<Void>> publishTelemetryWithResponse(String digitalTwinId, String payload, TelemetryOptions telemetryOptions) {\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, telemetryOptions, context));\n+    }\n+\n+    Mono<Response<Void>> publishTelemetryWithResponse(String digitalTwinId, String payload, TelemetryOptions telemetryOptions, Context context) {\n+        return protocolLayer.getDigitalTwins().sendTelemetryWithResponseAsync(\n+            digitalTwinId,\n+            telemetryOptions.getMessageId(),\n+            payload,\n+            telemetryOptions.getTimeStamp().toString(),\n+            context);\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin's component\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param componentName The name of the DTDL component.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishComponentTelemetry(String digitalTwinId, String componentName, String payload) {\n+        TelemetryOptions telemetryOptions = new TelemetryOptions();\n+        return withContext(context -> publishComponentTelemetryWithResponse(digitalTwinId, componentName, payload, telemetryOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin's component\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param componentName The name of the DTDL component.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param telemetryOptions The additional information to be used when processing a telemetry request.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishComponentTelemetry(String digitalTwinId, String componentName, String payload, TelemetryOptions telemetryOptions) {\n+        return withContext(context -> publishComponentTelemetryWithResponse(digitalTwinId, componentName, payload, telemetryOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin's component\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param componentName The name of the DTDL component.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param telemetryOptions The additional information to be used when processing a telemetry request.\n+     * @return A {@link Response} containing an empty mono.\n+     */\n+    public Mono<Response<Void>> publishComponentTelemetryWithResponse(String digitalTwinId, String componentName, String payload, TelemetryOptions telemetryOptions) {\n+        return withContext(context -> publishComponentTelemetryWithResponse(digitalTwinId, componentName, payload, telemetryOptions, context));\n+    }\n+\n+    Mono<Response<Void>> publishComponentTelemetryWithResponse(String digitalTwinId, String componentName, String payload, TelemetryOptions telemetryOptions, Context context) {\n+        return protocolLayer.getDigitalTwins().sendComponentTelemetryWithResponseAsync(\n+            digitalTwinId,\n+            componentName,\n+            telemetryOptions.getMessageId(),\n+            payload,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4NDc3NQ=="}, "originalCommit": {"oid": "d827eef4632b80caf11411bf6e8925ff48cc1786"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNzk5Mg==", "bodyText": "FYI - https://github.com/abhipsaMisra/azure-sdk-for-java/blob/master/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DigitalTwinsStringSerializer.java#L26", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486607992", "createdAt": "2020-09-10T20:16:21Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1338,4 +1338,112 @@ public HttpPipeline getHttpPipeline() {\n     }\n \n     //endregion Event Route APIs\n+\n+    //region Telemetry APIs\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload) {\n+        TelemetryOptions telemetryOptions = new TelemetryOptions();\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, telemetryOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param telemetryOptions The additional information to be used when processing a telemetry request.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload, TelemetryOptions telemetryOptions) {\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, telemetryOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param telemetryOptions The additional information to be used when processing a telemetry request.\n+     * @return A {@link Response} containing an empty mono.\n+     */\n+    public Mono<Response<Void>> publishTelemetryWithResponse(String digitalTwinId, String payload, TelemetryOptions telemetryOptions) {\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, telemetryOptions, context));\n+    }\n+\n+    Mono<Response<Void>> publishTelemetryWithResponse(String digitalTwinId, String payload, TelemetryOptions telemetryOptions, Context context) {\n+        return protocolLayer.getDigitalTwins().sendTelemetryWithResponseAsync(\n+            digitalTwinId,\n+            telemetryOptions.getMessageId(),\n+            payload,\n+            telemetryOptions.getTimeStamp().toString(),\n+            context);\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin's component\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param componentName The name of the DTDL component.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishComponentTelemetry(String digitalTwinId, String componentName, String payload) {\n+        TelemetryOptions telemetryOptions = new TelemetryOptions();\n+        return withContext(context -> publishComponentTelemetryWithResponse(digitalTwinId, componentName, payload, telemetryOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin's component\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param componentName The name of the DTDL component.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param telemetryOptions The additional information to be used when processing a telemetry request.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishComponentTelemetry(String digitalTwinId, String componentName, String payload, TelemetryOptions telemetryOptions) {\n+        return withContext(context -> publishComponentTelemetryWithResponse(digitalTwinId, componentName, payload, telemetryOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin's component\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param componentName The name of the DTDL component.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param telemetryOptions The additional information to be used when processing a telemetry request.\n+     * @return A {@link Response} containing an empty mono.\n+     */\n+    public Mono<Response<Void>> publishComponentTelemetryWithResponse(String digitalTwinId, String componentName, String payload, TelemetryOptions telemetryOptions) {\n+        return withContext(context -> publishComponentTelemetryWithResponse(digitalTwinId, componentName, payload, telemetryOptions, context));\n+    }\n+\n+    Mono<Response<Void>> publishComponentTelemetryWithResponse(String digitalTwinId, String componentName, String payload, TelemetryOptions telemetryOptions, Context context) {\n+        return protocolLayer.getDigitalTwins().sendComponentTelemetryWithResponseAsync(\n+            digitalTwinId,\n+            componentName,\n+            telemetryOptions.getMessageId(),\n+            payload,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4NDc3NQ=="}, "originalCommit": {"oid": "d827eef4632b80caf11411bf6e8925ff48cc1786"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Mzc0NTI1OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDowODo1M1rOHQD92g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTo1NjoxN1rOHQHIEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNDI1MA==", "bodyText": "Do we need this public API? Isn't the one on line 1381 enough? (max overload + with response)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486604250", "createdAt": "2020-09-10T20:08:53Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1338,4 +1338,122 @@ public HttpPipeline getHttpPipeline() {\n     }\n \n     //endregion Event Route APIs\n+\n+    //region Telemetry APIs\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload) {\n+        PublishTelemetryRequestOptions publishTelemetryRequestOptions = new PublishTelemetryRequestOptions();\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, publishTelemetryRequestOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param publishTelemetryRequestOptions The additional information to be used when processing a telemetry request.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload, PublishTelemetryRequestOptions publishTelemetryRequestOptions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82029a035cdf0932af8fad1ada0fb1d8558c11d3"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNzAwMw==", "bodyText": "I think we still need this and the withResponse that takes all and returns a response ...", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486607003", "createdAt": "2020-09-10T20:14:27Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1338,4 +1338,122 @@ public HttpPipeline getHttpPipeline() {\n     }\n \n     //endregion Event Route APIs\n+\n+    //region Telemetry APIs\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload) {\n+        PublishTelemetryRequestOptions publishTelemetryRequestOptions = new PublishTelemetryRequestOptions();\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, publishTelemetryRequestOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param publishTelemetryRequestOptions The additional information to be used when processing a telemetry request.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload, PublishTelemetryRequestOptions publishTelemetryRequestOptions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNDI1MA=="}, "originalCommit": {"oid": "82029a035cdf0932af8fad1ada0fb1d8558c11d3"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxNTgzNw==", "bodyText": "but shouldn't the max overload return a response; why do we need the variation where the max overload returns without response?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486615837", "createdAt": "2020-09-10T20:31:25Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1338,4 +1338,122 @@ public HttpPipeline getHttpPipeline() {\n     }\n \n     //endregion Event Route APIs\n+\n+    //region Telemetry APIs\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload) {\n+        PublishTelemetryRequestOptions publishTelemetryRequestOptions = new PublishTelemetryRequestOptions();\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, publishTelemetryRequestOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param publishTelemetryRequestOptions The additional information to be used when processing a telemetry request.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload, PublishTelemetryRequestOptions publishTelemetryRequestOptions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNDI1MA=="}, "originalCommit": {"oid": "82029a035cdf0932af8fad1ada0fb1d8558c11d3"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyNzY5Nw==", "bodyText": "Brought it up with Srikanta, waiting for a response. Will remove if unnecessary", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486627697", "createdAt": "2020-09-10T20:54:49Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1338,4 +1338,122 @@ public HttpPipeline getHttpPipeline() {\n     }\n \n     //endregion Event Route APIs\n+\n+    //region Telemetry APIs\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload) {\n+        PublishTelemetryRequestOptions publishTelemetryRequestOptions = new PublishTelemetryRequestOptions();\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, publishTelemetryRequestOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param publishTelemetryRequestOptions The additional information to be used when processing a telemetry request.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload, PublishTelemetryRequestOptions publishTelemetryRequestOptions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNDI1MA=="}, "originalCommit": {"oid": "82029a035cdf0932af8fad1ada0fb1d8558c11d3"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyOTU2Ng==", "bodyText": "I'm with Abhipsa on this one. Optional parameters are only present on the \"WithResponse\" overloads in our APIs so far, so I don't see this one as needed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486629566", "createdAt": "2020-09-10T20:58:25Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1338,4 +1338,122 @@ public HttpPipeline getHttpPipeline() {\n     }\n \n     //endregion Event Route APIs\n+\n+    //region Telemetry APIs\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload) {\n+        PublishTelemetryRequestOptions publishTelemetryRequestOptions = new PublishTelemetryRequestOptions();\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, publishTelemetryRequestOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param publishTelemetryRequestOptions The additional information to be used when processing a telemetry request.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload, PublishTelemetryRequestOptions publishTelemetryRequestOptions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNDI1MA=="}, "originalCommit": {"oid": "82029a035cdf0932af8fad1ada0fb1d8558c11d3"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY1NjAxNg==", "bodyText": "Done.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486656016", "createdAt": "2020-09-10T21:56:17Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1338,4 +1338,122 @@ public HttpPipeline getHttpPipeline() {\n     }\n \n     //endregion Event Route APIs\n+\n+    //region Telemetry APIs\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload) {\n+        PublishTelemetryRequestOptions publishTelemetryRequestOptions = new PublishTelemetryRequestOptions();\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, publishTelemetryRequestOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param publishTelemetryRequestOptions The additional information to be used when processing a telemetry request.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload, PublishTelemetryRequestOptions publishTelemetryRequestOptions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNDI1MA=="}, "originalCommit": {"oid": "82029a035cdf0932af8fad1ada0fb1d8558c11d3"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzkxNzc2OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTowMTowNlrOHQFl3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTowNDoyOVrOHQFsjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMDg3OQ==", "bodyText": "Don't you need to pre-emptively serialize this string so that the PL deserializes it back into the string that the user provided?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486630879", "createdAt": "2020-09-10T21:01:06Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1338,4 +1338,122 @@ public HttpPipeline getHttpPipeline() {\n     }\n \n     //endregion Event Route APIs\n+\n+    //region Telemetry APIs\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload) {\n+        PublishTelemetryRequestOptions publishTelemetryRequestOptions = new PublishTelemetryRequestOptions();\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, publishTelemetryRequestOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param publishTelemetryRequestOptions The additional information to be used when processing a telemetry request.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload, PublishTelemetryRequestOptions publishTelemetryRequestOptions) {\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, publishTelemetryRequestOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param publishTelemetryRequestOptions The additional information to be used when processing a telemetry request.\n+     * @return A {@link Response} containing an empty mono.\n+     */\n+    public Mono<Response<Void>> publishTelemetryWithResponse(String digitalTwinId, String payload, PublishTelemetryRequestOptions publishTelemetryRequestOptions) {\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, publishTelemetryRequestOptions, context));\n+    }\n+\n+    Mono<Response<Void>> publishTelemetryWithResponse(String digitalTwinId, String payload, PublishTelemetryRequestOptions publishTelemetryRequestOptions, Context context) {\n+        return protocolLayer.getDigitalTwins().sendTelemetryWithResponseAsync(\n+            digitalTwinId,\n+            publishTelemetryRequestOptions.getMessageId(),\n+            payload,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82029a035cdf0932af8fad1ada0fb1d8558c11d3"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMTA5Mg==", "bodyText": "You did it in the publishComponentTelemetry but not this method", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486631092", "createdAt": "2020-09-10T21:01:31Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1338,4 +1338,122 @@ public HttpPipeline getHttpPipeline() {\n     }\n \n     //endregion Event Route APIs\n+\n+    //region Telemetry APIs\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload) {\n+        PublishTelemetryRequestOptions publishTelemetryRequestOptions = new PublishTelemetryRequestOptions();\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, publishTelemetryRequestOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param publishTelemetryRequestOptions The additional information to be used when processing a telemetry request.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload, PublishTelemetryRequestOptions publishTelemetryRequestOptions) {\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, publishTelemetryRequestOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param publishTelemetryRequestOptions The additional information to be used when processing a telemetry request.\n+     * @return A {@link Response} containing an empty mono.\n+     */\n+    public Mono<Response<Void>> publishTelemetryWithResponse(String digitalTwinId, String payload, PublishTelemetryRequestOptions publishTelemetryRequestOptions) {\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, publishTelemetryRequestOptions, context));\n+    }\n+\n+    Mono<Response<Void>> publishTelemetryWithResponse(String digitalTwinId, String payload, PublishTelemetryRequestOptions publishTelemetryRequestOptions, Context context) {\n+        return protocolLayer.getDigitalTwins().sendTelemetryWithResponseAsync(\n+            digitalTwinId,\n+            publishTelemetryRequestOptions.getMessageId(),\n+            payload,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMDg3OQ=="}, "originalCommit": {"oid": "82029a035cdf0932af8fad1ada0fb1d8558c11d3"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMjU5MA==", "bodyText": "yeah .... :D", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486632590", "createdAt": "2020-09-10T21:04:29Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1338,4 +1338,122 @@ public HttpPipeline getHttpPipeline() {\n     }\n \n     //endregion Event Route APIs\n+\n+    //region Telemetry APIs\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload) {\n+        PublishTelemetryRequestOptions publishTelemetryRequestOptions = new PublishTelemetryRequestOptions();\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, publishTelemetryRequestOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param publishTelemetryRequestOptions The additional information to be used when processing a telemetry request.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload, PublishTelemetryRequestOptions publishTelemetryRequestOptions) {\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, publishTelemetryRequestOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param publishTelemetryRequestOptions The additional information to be used when processing a telemetry request.\n+     * @return A {@link Response} containing an empty mono.\n+     */\n+    public Mono<Response<Void>> publishTelemetryWithResponse(String digitalTwinId, String payload, PublishTelemetryRequestOptions publishTelemetryRequestOptions) {\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, publishTelemetryRequestOptions, context));\n+    }\n+\n+    Mono<Response<Void>> publishTelemetryWithResponse(String digitalTwinId, String payload, PublishTelemetryRequestOptions publishTelemetryRequestOptions, Context context) {\n+        return protocolLayer.getDigitalTwins().sendTelemetryWithResponseAsync(\n+            digitalTwinId,\n+            publishTelemetryRequestOptions.getMessageId(),\n+            payload,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMDg3OQ=="}, "originalCommit": {"oid": "82029a035cdf0932af8fad1ada0fb1d8558c11d3"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1177, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}