{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNzkzOTcy", "number": 8055, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwNjoxMToyMVrODeQWVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMTo1OTo0OVrODeqwfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDUxNzM1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwNjoxMToyMVrOFnTfYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwNzo0ODo1NlrOFnTw3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1ODExNQ==", "bodyText": "Could this be static?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r376758115", "createdAt": "2020-02-09T06:11:21Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClient.java", "diffHunk": "@@ -190,7 +195,24 @@ public HttpHeaders getHeaders() {\n                 if (!reactorNettyConnection.isDisposed()) {\n                     reactorNettyConnection.channel().eventLoop().execute(reactorNettyConnection::dispose);\n                 }\n-            }).map(ByteBuf::nioBuffer);\n+            }).map(byteBuf -> {\n+                if (this.disableBufferCopy) {\n+                    return byteBuf.nioBuffer();\n+                }\n+                return deepCopyBuffer(byteBuf);\n+            });\n+        }\n+\n+        private ByteBuffer deepCopyBuffer(ByteBuf byteBuf) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa4ffe501e9965dbd7d0be0e37cfa86c1408f0fe"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2MjU4OQ==", "bodyText": "yeah, this can be static too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r376762589", "createdAt": "2020-02-09T07:48:56Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClient.java", "diffHunk": "@@ -190,7 +195,24 @@ public HttpHeaders getHeaders() {\n                 if (!reactorNettyConnection.isDisposed()) {\n                     reactorNettyConnection.channel().eventLoop().execute(reactorNettyConnection::dispose);\n                 }\n-            }).map(ByteBuf::nioBuffer);\n+            }).map(byteBuf -> {\n+                if (this.disableBufferCopy) {\n+                    return byteBuf.nioBuffer();\n+                }\n+                return deepCopyBuffer(byteBuf);\n+            });\n+        }\n+\n+        private ByteBuffer deepCopyBuffer(ByteBuf byteBuf) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1ODExNQ=="}, "originalCommit": {"oid": "aa4ffe501e9965dbd7d0be0e37cfa86c1408f0fe"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDUxNzc5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClientBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwNjoxMjozMFrOFnTfng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwNzo0OTozM1rOFnTw_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1ODE3NA==", "bodyText": "Should the name be inverse and take a boolean to allow for this to be flipped back?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r376758174", "createdAt": "2020-02-09T06:12:30Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClientBuilder.java", "diffHunk": "@@ -203,4 +204,9 @@ private ProxyHandler getProxyHandler(AuthorizationChallengeHandler challengeHand\n                     String.format(INVALID_PROXY_MESSAGE, proxyOptions.getType())));\n         }\n     }\n+\n+    public NettyAsyncHttpClientBuilder disableBufferCopy() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa4ffe501e9965dbd7d0be0e37cfa86c1408f0fe"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2MjYyMA==", "bodyText": "The name should be disable as, by default, it will be enabled. I can add a param to toggle.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r376762620", "createdAt": "2020-02-09T07:49:33Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClientBuilder.java", "diffHunk": "@@ -203,4 +204,9 @@ private ProxyHandler getProxyHandler(AuthorizationChallengeHandler challengeHand\n                     String.format(INVALID_PROXY_MESSAGE, proxyOptions.getType())));\n         }\n     }\n+\n+    public NettyAsyncHttpClientBuilder disableBufferCopy() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1ODE3NA=="}, "originalCommit": {"oid": "aa4ffe501e9965dbd7d0be0e37cfa86c1408f0fe"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDUxNzg4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClientBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwNjoxMjo0NlrOFnTfqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwNzo1MDoxN1rOFnTxGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1ODE4NA==", "bodyText": "Missing Javadoc", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r376758184", "createdAt": "2020-02-09T06:12:46Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClientBuilder.java", "diffHunk": "@@ -203,4 +204,9 @@ private ProxyHandler getProxyHandler(AuthorizationChallengeHandler challengeHand\n                     String.format(INVALID_PROXY_MESSAGE, proxyOptions.getType())));\n         }\n     }\n+\n+    public NettyAsyncHttpClientBuilder disableBufferCopy() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa4ffe501e9965dbd7d0be0e37cfa86c1408f0fe"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2MjY0OQ==", "bodyText": "will do all the javadoc, checkstyle, spotbugs stuff once we are happy with the shape of the code", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r376762649", "createdAt": "2020-02-09T07:50:17Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClientBuilder.java", "diffHunk": "@@ -203,4 +204,9 @@ private ProxyHandler getProxyHandler(AuthorizationChallengeHandler challengeHand\n                     String.format(INVALID_PROXY_MESSAGE, proxyOptions.getType())));\n         }\n     }\n+\n+    public NettyAsyncHttpClientBuilder disableBufferCopy() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1ODE4NA=="}, "originalCommit": {"oid": "aa4ffe501e9965dbd7d0be0e37cfa86c1408f0fe"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDUyMjkyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwNjoyNzowM1rOFnTiJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwNzo1MTowNlrOFnTxTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1ODgyMA==", "bodyText": "Should this be in the bodyIntern method instead?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r376758820", "createdAt": "2020-02-09T06:27:03Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClient.java", "diffHunk": "@@ -190,7 +195,24 @@ public HttpHeaders getHeaders() {\n                 if (!reactorNettyConnection.isDisposed()) {\n                     reactorNettyConnection.channel().eventLoop().execute(reactorNettyConnection::dispose);\n                 }\n-            }).map(ByteBuf::nioBuffer);\n+            }).map(byteBuf -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa4ffe501e9965dbd7d0be0e37cfa86c1408f0fe"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2MjcwMg==", "bodyText": "As discussed, changing bodyIntern will result in double copy for other getBody* methods that don't return Flux<ByteBuffer>", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r376762702", "createdAt": "2020-02-09T07:51:06Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClient.java", "diffHunk": "@@ -190,7 +195,24 @@ public HttpHeaders getHeaders() {\n                 if (!reactorNettyConnection.isDisposed()) {\n                     reactorNettyConnection.channel().eventLoop().execute(reactorNettyConnection::dispose);\n                 }\n-            }).map(ByteBuf::nioBuffer);\n+            }).map(byteBuf -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1ODgyMA=="}, "originalCommit": {"oid": "aa4ffe501e9965dbd7d0be0e37cfa86c1408f0fe"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDU1OTAxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/HttpPipelineCallContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwODowMzoyMVrOFnTz6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwODowMzoyMVrOFnTz6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2MzM2OQ==", "bodyText": "can this be package private? given HttpPipeline type calls HttpClient::send()?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r376763369", "createdAt": "2020-02-09T08:03:21Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/HttpPipelineCallContext.java", "diffHunk": "@@ -85,4 +85,8 @@ public HttpPipelineCallContext setHttpRequest(HttpRequest request) {\n         this.httpRequest = request;\n         return this;\n     }\n+\n+    public Context getContext() {\n+        return this.getContext();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec548c331fe62230817486bccf780d09df718dea"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDU4NDU0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwOTowMzoyNVrOFnUBSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwOTowMzoyNVrOFnUBSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2Njc5Mg==", "bodyText": "minor; maybe not now, but we could have a static empty ByteBuffer in class level and if size == 0, we can just return that, instead of creating a new empty duplicate reference every time.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r376766792", "createdAt": "2020-02-09T09:03:25Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClient.java", "diffHunk": "@@ -235,5 +258,17 @@ private ByteBufFlux bodyIntern() {\n         Connection internConnection() {\n             return reactorNettyConnection;\n         }\n+\n+        private static ByteBuffer deepCopyBuffer(ByteBuf byteBuf) {\n+            ByteBuffer buffer = byteBuf.nioBuffer();\n+            int offset = buffer.position();\n+            int size = buffer.remaining();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05a5f8e509a1e722b6b40f67d3b85dd73b7a3c0b"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDU4ODgzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/HttpPipelineNextPolicy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwOToxMjozNlrOFnUDWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwOToxMjozNlrOFnUDWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2NzMyMQ==", "bodyText": "nit: commented code.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r376767321", "createdAt": "2020-02-09T09:12:36Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/HttpPipelineNextPolicy.java", "diffHunk": "@@ -41,7 +41,8 @@\n \n         this.currentPolicyIndex++;\n         if (this.currentPolicyIndex == size) {\n-            return this.pipeline.getHttpClient().send(this.context.getHttpRequest());\n+            return this.pipeline.getHttpClient().send(this.context.getHttpRequest(), this.context.getContext());\n+            // return this.pipeline.getHttpClient().send(this.context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05a5f8e509a1e722b6b40f67d3b85dd73b7a3c0b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDU4OTg5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/CoreConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwOToxNDo0MVrOFnUD3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwOToxNDo0MVrOFnUD3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2NzQ1NQ==", "bodyText": "nit; good to add bit more context on this const.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r376767455", "createdAt": "2020-02-09T09:14:41Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/CoreConstants.java", "diffHunk": "@@ -0,0 +1,19 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+/**\n+ * Class to hold commonly used constants.\n+ */\n+public final class CoreConstants {\n+\n+    /**\n+     * This constant is used as key in {@link Context}.\n+     */\n+    public static final String DISABLE_BUFFER_COPY = \"disable-buffer-copy\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05a5f8e509a1e722b6b40f67d3b85dd73b7a3c0b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDU5MDMxOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobClientBase.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwOToxNToyOVrOFnUEFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMDowOToxNlrOFnWvkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2NzUwOA==", "bodyText": "nit; Context.NONE.addData(CoreConstants.DISABLE_BUFFER_COPY, true)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r376767508", "createdAt": "2020-02-09T09:15:29Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobClientBase.java", "diffHunk": "@@ -549,8 +554,11 @@ public BlobProperties downloadToFile(String filePath, boolean overwrite) {\n         ParallelTransferOptions parallelTransferOptions, DownloadRetryOptions downloadRetryOptions,\n         BlobRequestConditions requestConditions, boolean rangeGetContentMd5, Set<OpenOption> openOptions,\n         Duration timeout, Context context) {\n+        Context updatedContext = context == null ? Context.NONE.addData(CoreConstants.DISABLE_BUFFER_COPY, true)\n+            : context.addData(\"disable-buffer-copy\", true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05a5f8e509a1e722b6b40f67d3b85dd73b7a3c0b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwMjc2Mg==", "bodyText": "Do we need to use Context.NONE in this situation? Instead could a new Context be used?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r376802762", "createdAt": "2020-02-09T18:04:29Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobClientBase.java", "diffHunk": "@@ -549,8 +554,11 @@ public BlobProperties downloadToFile(String filePath, boolean overwrite) {\n         ParallelTransferOptions parallelTransferOptions, DownloadRetryOptions downloadRetryOptions,\n         BlobRequestConditions requestConditions, boolean rangeGetContentMd5, Set<OpenOption> openOptions,\n         Duration timeout, Context context) {\n+        Context updatedContext = context == null ? Context.NONE.addData(CoreConstants.DISABLE_BUFFER_COPY, true)\n+            : context.addData(\"disable-buffer-copy\", true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2NzUwOA=="}, "originalCommit": {"oid": "05a5f8e509a1e722b6b40f67d3b85dd73b7a3c0b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxMTQxMA==", "bodyText": "Context doesn't have a simple helper method to create one with just 1 key-value pair. I had to create a map first and then create context, instead, I used this alternative which was simpler.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r376811410", "createdAt": "2020-02-09T20:09:16Z", "author": {"login": "srnagar"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobClientBase.java", "diffHunk": "@@ -549,8 +554,11 @@ public BlobProperties downloadToFile(String filePath, boolean overwrite) {\n         ParallelTransferOptions parallelTransferOptions, DownloadRetryOptions downloadRetryOptions,\n         BlobRequestConditions requestConditions, boolean rangeGetContentMd5, Set<OpenOption> openOptions,\n         Duration timeout, Context context) {\n+        Context updatedContext = context == null ? Context.NONE.addData(CoreConstants.DISABLE_BUFFER_COPY, true)\n+            : context.addData(\"disable-buffer-copy\", true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2NzUwOA=="}, "originalCommit": {"oid": "05a5f8e509a1e722b6b40f67d3b85dd73b7a3c0b"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDg1ODM0OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-common/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxODowNTozOFrOFnWOJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxODowNTozOFrOFnWOJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwMjg1Mg==", "bodyText": "Shouldn't the version of Netty be updated as well?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r376802852", "createdAt": "2020-02-09T18:05:38Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-common/pom.xml", "diffHunk": "@@ -41,7 +41,7 @@\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-core</artifactId>\n-      <version>1.2.0</version> <!-- {x-version-update;com.azure:azure-core;dependency} -->\n+      <version>1.3.0-beta.1</version> <!-- {x-version-update;com.azure:azure-core;current} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05a5f8e509a1e722b6b40f67d3b85dd73b7a3c0b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDkyNDk5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMDoxMDo0NlrOFnWv1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMDoxMDo0NlrOFnWv1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxMTQ3Nw==", "bodyText": "Reduce this to a one-liner: return disableBufferCopy ? byteBuf.nioBuffer() : deepCopyBuffer(byteBuf);", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r376811477", "createdAt": "2020-02-09T20:10:46Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClient.java", "diffHunk": "@@ -190,7 +208,12 @@ public HttpHeaders getHeaders() {\n                 if (!reactorNettyConnection.isDisposed()) {\n                     reactorNettyConnection.channel().eventLoop().execute(reactorNettyConnection::dispose);\n                 }\n-            }).map(ByteBuf::nioBuffer);\n+            }).map(byteBuf -> {\n+                if (this.disableBufferCopy) {\n+                    return byteBuf.nioBuffer();\n+                }\n+                return deepCopyBuffer(byteBuf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05a5f8e509a1e722b6b40f67d3b85dd73b7a3c0b"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDkyNjMyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClientBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMDoxMzoxNFrOFnWwfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMToyMzowNVrOFnXDvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxMTY0NQ==", "bodyText": "It would be good to include code here to demonstrate how to use the buffer correctly if the user chooses to disable this, and to also talk about how this will benefit throughput and memory pressure.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r376811645", "createdAt": "2020-02-09T20:13:14Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClientBuilder.java", "diffHunk": "@@ -180,6 +182,22 @@ public NettyAsyncHttpClientBuilder configuration(Configuration configuration) {\n         return this;\n     }\n \n+    /**\n+     * Disables deep copy of response {@link ByteBuffer} into a heap location that is managed by this client as\n+     * opposed to the underlying netty library which may use direct buffer pool.\n+     * <br>\n+     * <b>\n+     * Caution: Disabling this is not recommended as it can lead to data corruption if the downstream consumers\n+     * of the response do not handle the byte buffers before netty releases them.\n+     * </b>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05a5f8e509a1e722b6b40f67d3b85dd73b7a3c0b"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxNjU3Mw==", "bodyText": "I will add more docs for this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r376816573", "createdAt": "2020-02-09T21:23:05Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClientBuilder.java", "diffHunk": "@@ -180,6 +182,22 @@ public NettyAsyncHttpClientBuilder configuration(Configuration configuration) {\n         return this;\n     }\n \n+    /**\n+     * Disables deep copy of response {@link ByteBuffer} into a heap location that is managed by this client as\n+     * opposed to the underlying netty library which may use direct buffer pool.\n+     * <br>\n+     * <b>\n+     * Caution: Disabling this is not recommended as it can lead to data corruption if the downstream consumers\n+     * of the response do not handle the byte buffers before netty releases them.\n+     * </b>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxMTY0NQ=="}, "originalCommit": {"oid": "05a5f8e509a1e722b6b40f67d3b85dd73b7a3c0b"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDkzMjEzOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobClientBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMDoyMzozNlrOFnWzfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMDoyMzozNlrOFnWzfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxMjQxMw==", "bodyText": "nit: Unnecessary newline", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r376812413", "createdAt": "2020-02-09T20:23:36Z", "author": {"login": "JonathanGiles"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobClientBase.java", "diffHunk": "@@ -385,6 +386,7 @@ public String copyFromUrl(String copySource) {\n      */\n     public void download(OutputStream stream) {\n         downloadWithResponse(stream, null, null, null, false, null, Context.NONE);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05a5f8e509a1e722b6b40f67d3b85dd73b7a3c0b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDkzMjY2OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobClientBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMDoyNDo1NVrOFnWzzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMDoyNDo1NVrOFnWzzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxMjQ5Mw==", "bodyText": "I'd like to see this kind of repetitive (and verbose) code moved into a utility method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r376812493", "createdAt": "2020-02-09T20:24:55Z", "author": {"login": "JonathanGiles"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobClientBase.java", "diffHunk": "@@ -412,9 +414,12 @@ public void download(OutputStream stream) {\n     public BlobDownloadResponse downloadWithResponse(OutputStream stream, BlobRange range,\n         DownloadRetryOptions options, BlobRequestConditions requestConditions, boolean getRangeContentMd5,\n         Duration timeout, Context context) {\n+        Context updatedContext = context == null ? Context.NONE.addData(CoreConstants.DISABLE_BUFFER_COPY, true)\n+            : context.addData(CoreConstants.DISABLE_BUFFER_COPY, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05a5f8e509a1e722b6b40f67d3b85dd73b7a3c0b"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDkzMzI4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/CoreConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMDoyNTo0OVrOFnW0GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMDoyNTo0OVrOFnW0GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxMjU2OQ==", "bodyText": "I feel a little uneasy with making this public API right now. I would rather it be impl to start with?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r376812569", "createdAt": "2020-02-09T20:25:49Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/CoreConstants.java", "diffHunk": "@@ -0,0 +1,19 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+/**\n+ * Class to hold commonly used constants.\n+ */\n+public final class CoreConstants {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05a5f8e509a1e722b6b40f67d3b85dd73b7a3c0b"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTAwNTM1OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobClientBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMjozMzo1MFrOFnXZDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMjozMzo1MFrOFnXZDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgyMjAzMA==", "bodyText": "This class looks like it can now be reverted", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r376822030", "createdAt": "2020-02-09T22:33:50Z", "author": {"login": "JonathanGiles"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobClientBase.java", "diffHunk": "@@ -550,7 +551,8 @@ public BlobProperties downloadToFile(String filePath, boolean overwrite) {\n         BlobRequestConditions requestConditions, boolean rangeGetContentMd5, Set<OpenOption> openOptions,\n         Duration timeout, Context context) {\n         Mono<Response<BlobProperties>> download = client.downloadToFileWithResponse(filePath, range,\n-            parallelTransferOptions, downloadRetryOptions, requestConditions, rangeGetContentMd5, openOptions, context);\n+            parallelTransferOptions, downloadRetryOptions, requestConditions, rangeGetContentMd5, openOptions,\n+            context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee15bbeede181df7cdbab65ec8dea64f5a2d9868"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzQzMzMyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-http-netty/src/test/java/com/azure/core/http/netty/ReactorNettyClientTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzowNTozMlrOFnuJcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzowNTozMlrOFnuJcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE5NDg2Ng==", "bodyText": "Since these two methods deepCopyBufferConfiguredInBuilder and ignoreDeepCopyBufferConfiguredInBuilder  only differs in boolean values for disableBufferCopy. Could we use dataprovider to pass the Boolean and just have one method which test both use cases ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r377194866", "createdAt": "2020-02-10T17:05:32Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core-http-netty/src/test/java/com/azure/core/http/netty/ReactorNettyClientTests.java", "diffHunk": "@@ -281,6 +291,102 @@ public void testConcurrentRequests() {\n         Assertions.fail(\"Method needs to be reimplemented\");\n     }\n \n+    /**\n+     * Tests that deep copying the buffers returned by Netty will make the stream returned to the customer resilient to\n+     * Netty reclaiming them once the 'onNext' operator chain has completed.\n+     */\n+    @Test\n+    public void deepCopyBufferConfiguredInBuilder() {\n+        HttpClient client = new NettyAsyncHttpClientBuilder().disableBufferCopy(false).build();\n+\n+        HttpResponse response = client.send(new HttpRequest(HttpMethod.GET, url(server, LONG_BODY_PATH))).block();\n+        assertNotNull(response);\n+        assertEquals(200, response.getStatusCode());\n+\n+        DelayWriteStream delayWriteStream = new DelayWriteStream();\n+        response.getBody().doOnNext(delayWriteStream::write).blockLast();\n+        assertEquals(LONG_BODY, delayWriteStream.aggregateAsString());\n+    }\n+\n+    /**\n+     * Tests that preventing deep copying the buffers returned by Netty won't make the stream returned to the customer\n+     * resilient to Netty reclaiming them once the 'onNext' operator chain has completed.\n+     */\n+    @Test\n+    public void ignoreDeepCopyBufferConfiguredInBuilder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61666e55abe3b7953990309063e6f58c666366ec"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzQzODExOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-http-netty/src/test/java/com/azure/core/http/netty/ReactorNettyClientTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzowNjo0OFrOFnuMUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzowNjo0OFrOFnuMUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE5NTYwMg==", "bodyText": "Same comment , dataprovider for Boolean value ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r377195602", "createdAt": "2020-02-10T17:06:48Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core-http-netty/src/test/java/com/azure/core/http/netty/ReactorNettyClientTests.java", "diffHunk": "@@ -281,6 +291,102 @@ public void testConcurrentRequests() {\n         Assertions.fail(\"Method needs to be reimplemented\");\n     }\n \n+    /**\n+     * Tests that deep copying the buffers returned by Netty will make the stream returned to the customer resilient to\n+     * Netty reclaiming them once the 'onNext' operator chain has completed.\n+     */\n+    @Test\n+    public void deepCopyBufferConfiguredInBuilder() {\n+        HttpClient client = new NettyAsyncHttpClientBuilder().disableBufferCopy(false).build();\n+\n+        HttpResponse response = client.send(new HttpRequest(HttpMethod.GET, url(server, LONG_BODY_PATH))).block();\n+        assertNotNull(response);\n+        assertEquals(200, response.getStatusCode());\n+\n+        DelayWriteStream delayWriteStream = new DelayWriteStream();\n+        response.getBody().doOnNext(delayWriteStream::write).blockLast();\n+        assertEquals(LONG_BODY, delayWriteStream.aggregateAsString());\n+    }\n+\n+    /**\n+     * Tests that preventing deep copying the buffers returned by Netty won't make the stream returned to the customer\n+     * resilient to Netty reclaiming them once the 'onNext' operator chain has completed.\n+     */\n+    @Test\n+    public void ignoreDeepCopyBufferConfiguredInBuilder() {\n+        HttpClient client = new NettyAsyncHttpClientBuilder().disableBufferCopy(true).build();\n+\n+        HttpResponse response = client.send(new HttpRequest(HttpMethod.GET, url(server, LONG_BODY_PATH))).block();\n+        assertNotNull(response);\n+        assertEquals(200, response.getStatusCode());\n+\n+        DelayWriteStream delayWriteStream = new DelayWriteStream();\n+        response.getBody().doOnNext(delayWriteStream::write).blockLast();\n+        assertNotEquals(LONG_BODY, delayWriteStream.aggregateAsString());\n+    }\n+\n+    /**\n+     * Tests that deep copying of buffers is able to be configured via {@link Context}.\n+     */\n+    @Test\n+    public void deepCopyBufferConfiguredByContext() {\n+        HttpClient client = new ReactorNettyClientProvider().createInstance()\n+            .initContext(new Context(CoreConstants.DISABLE_BUFFER_COPY, false));\n+\n+        HttpResponse response = client.send(new HttpRequest(HttpMethod.GET, url(server, LONG_BODY_PATH))).block();\n+        assertNotNull(response);\n+        assertEquals(200, response.getStatusCode());\n+\n+        DelayWriteStream delayWriteStream = new DelayWriteStream();\n+        response.getBody().doOnNext(delayWriteStream::write).blockLast();\n+        assertEquals(LONG_BODY, delayWriteStream.aggregateAsString());\n+    }\n+\n+    /**\n+     * Tests that deep copying of buffers is able to be suppressed via {@link Context}.\n+     */\n+    @Test\n+    public void ignoreDeepCopyBufferConfiguredByContext() {\n+        HttpClient client = new ReactorNettyClientProvider().createInstance()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61666e55abe3b7953990309063e6f58c666366ec"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzQ3NTIzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClientBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzoxNzowOVrOFnujAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDo1OToyNlrOFn67zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwMTQwOQ==", "bodyText": "Also This would be a good candidate to add sample in samples\\README.md showing how user can use this.\nAlso changelog entry for this change.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r377201409", "createdAt": "2020-02-10T17:17:09Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClientBuilder.java", "diffHunk": "@@ -180,6 +182,24 @@ public NettyAsyncHttpClientBuilder configuration(Configuration configuration) {\n         return this;\n     }\n \n+    /**\n+     * Disables deep copy of response {@link ByteBuffer} into a heap location that is managed by this client as\n+     * opposed to the underlying netty library which may use direct buffer pool.\n+     * <br>\n+     * <b>\n+     * Caution: Disabling this is not recommended as it can lead to data corruption if the downstream consumers\n+     * of the response do not handle the byte buffers before netty releases them.\n+     * </b>\n+     *\n+     * @param disableBufferCopy If set to {@code true}, the client built from this builder will not deep-copy\n+     * response {@link ByteBuffer ByteBuffers}.\n+     * @return The updated {@link NettyAsyncHttpClientBuilder} object.\n+     */\n+    public NettyAsyncHttpClientBuilder disableBufferCopy(boolean disableBufferCopy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61666e55abe3b7953990309063e6f58c666366ec"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwNDM2Nw==", "bodyText": "Since this behavior is not something we want users to eagerly use, I don't want to put this in README. I have the javadoc updated with codesnippets. So, if they really want to use, they can find it's usage in javadocs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r377404367", "createdAt": "2020-02-11T00:59:26Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClientBuilder.java", "diffHunk": "@@ -180,6 +182,24 @@ public NettyAsyncHttpClientBuilder configuration(Configuration configuration) {\n         return this;\n     }\n \n+    /**\n+     * Disables deep copy of response {@link ByteBuffer} into a heap location that is managed by this client as\n+     * opposed to the underlying netty library which may use direct buffer pool.\n+     * <br>\n+     * <b>\n+     * Caution: Disabling this is not recommended as it can lead to data corruption if the downstream consumers\n+     * of the response do not handle the byte buffers before netty releases them.\n+     * </b>\n+     *\n+     * @param disableBufferCopy If set to {@code true}, the client built from this builder will not deep-copy\n+     * response {@link ByteBuffer ByteBuffers}.\n+     * @return The updated {@link NettyAsyncHttpClientBuilder} object.\n+     */\n+    public NettyAsyncHttpClientBuilder disableBufferCopy(boolean disableBufferCopy) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwMTQwOQ=="}, "originalCommit": {"oid": "61666e55abe3b7953990309063e6f58c666366ec"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDAzMDU2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/CoreUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMDoxMTo1OVrOFnz_SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMDoyMDoyNVrOFn0O9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5MDU2OQ==", "bodyText": "Can you add some sort of comment here that mentions this method should be called when building any sync clients because the underlying issue is not a problem in those cases? I think it'll help document why we default to using this in a bunch of our builders.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r377290569", "createdAt": "2020-02-10T20:11:59Z", "author": {"login": "rickle-msft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/CoreUtils.java", "diffHunk": "@@ -183,4 +184,17 @@ public static boolean isNullOrEmpty(CharSequence charSequence) {\n         }\n         return Collections.emptyMap();\n     }\n+\n+    /**\n+     * Convenience method to update the input context to disable copying of HTTP response byte buffers. If the input\n+     * context is null, a new instance of context is created with a single entry to disable copying of HTTP response\n+     * byte buffers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3df1acbb6844aa0ca5f334e3d5768701ad3370bf"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NDU4Mw==", "bodyText": "Our plan has just evolved to also do buffer copy on sync clients too. Srikanta is just beginning the process of removing these changes so that sync and async both copy the buffer. This is to remove any possibility of data loss in sync clients when there are intermediate operations during which time the buffer may still be lost.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r377294583", "createdAt": "2020-02-10T20:20:25Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/CoreUtils.java", "diffHunk": "@@ -183,4 +184,17 @@ public static boolean isNullOrEmpty(CharSequence charSequence) {\n         }\n         return Collections.emptyMap();\n     }\n+\n+    /**\n+     * Convenience method to update the input context to disable copying of HTTP response byte buffers. If the input\n+     * context is null, a new instance of context is created with a single entry to disable copying of HTTP response\n+     * byte buffers.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5MDU2OQ=="}, "originalCommit": {"oid": "3df1acbb6844aa0ca5f334e3d5768701ad3370bf"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDM2NjYxOnYy", "diffSide": "LEFT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/HttpPipelineBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjowMzo1NlrOFn3QAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjowMzo1NlrOFn3QAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM0NDAwMA==", "bodyText": "nit: Random newline change", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r377344000", "createdAt": "2020-02-10T22:03:56Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/HttpPipelineBuilder.java", "diffHunk": "@@ -40,7 +40,6 @@\n     private HttpClient httpClient;\n     private List<HttpPipelinePolicy> pipelinePolicies;\n \n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ab444657ec38fda45db1bb980963476550f62bd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDM2NzE0OnYy", "diffSide": "LEFT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/http/HttpClientProviders.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjowNDowNVrOFn3QXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjowNDowNVrOFn3QXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM0NDA5NQ==", "bodyText": "nit: Random newline change", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r377344095", "createdAt": "2020-02-10T22:04:05Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/http/HttpClientProviders.java", "diffHunk": "@@ -32,7 +32,6 @@ public static HttpClient createInstance() {\n         if (defaultProvider == null) {\n             throw new IllegalStateException(CANNOT_FIND_HTTP_CLIENT);\n         }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ab444657ec38fda45db1bb980963476550f62bd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDYyNjAzOnYy", "diffSide": "RIGHT", "path": "sdk/appconfiguration/azure-data-appconfiguration/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMzo0NzoxM1rOFn5tXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDo0ODo0NlrOFn6wSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM4NDI4Ng==", "bodyText": "This change and the version of core above are not the correct changes. Dependencies built outside of an area should only ever use the dependency version of a library. If the current version is needed then there should be an unreleased tag and that should exist there until that version is released. This would apply to all of the changes below where dependency was changed to current.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r377384286", "createdAt": "2020-02-10T23:47:13Z", "author": {"login": "JimSuplizio"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/pom.xml", "diffHunk": "@@ -36,12 +36,12 @@\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-core</artifactId>\n-      <version>1.3.0-beta.1</version> <!-- {x-version-update;unreleased_com.azure:azure-core;dependency} -->\n+      <version>1.3.0-beta.1</version> <!-- {x-version-update;com.azure:azure-core;current} -->\n     </dependency>\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-core-http-netty</artifactId>\n-      <version>1.2.0</version> <!-- {x-version-update;com.azure:azure-core-http-netty;dependency} -->\n+      <version>1.3.0-beta.1</version> <!-- {x-version-update;com.azure:azure-core-http-netty;current} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1a60a0df57b97ab0595aa0199baac59a7c8d786"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5MjkzMw==", "bodyText": "{x-version-update;unreleased_com:azure-core-http-netty;current} the right tag to use for storage then?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r377392933", "createdAt": "2020-02-11T00:17:27Z", "author": {"login": "srnagar"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/pom.xml", "diffHunk": "@@ -36,12 +36,12 @@\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-core</artifactId>\n-      <version>1.3.0-beta.1</version> <!-- {x-version-update;unreleased_com.azure:azure-core;dependency} -->\n+      <version>1.3.0-beta.1</version> <!-- {x-version-update;com.azure:azure-core;current} -->\n     </dependency>\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-core-http-netty</artifactId>\n-      <version>1.2.0</version> <!-- {x-version-update;com.azure:azure-core-http-netty;dependency} -->\n+      <version>1.3.0-beta.1</version> <!-- {x-version-update;com.azure:azure-core-http-netty;current} -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM4NDI4Ng=="}, "originalCommit": {"oid": "a1a60a0df57b97ab0595aa0199baac59a7c8d786"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMTQxOQ==", "bodyText": "Got it to work, I was missing the unreleased tag in version_client.txt", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r377401419", "createdAt": "2020-02-11T00:48:46Z", "author": {"login": "srnagar"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/pom.xml", "diffHunk": "@@ -36,12 +36,12 @@\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-core</artifactId>\n-      <version>1.3.0-beta.1</version> <!-- {x-version-update;unreleased_com.azure:azure-core;dependency} -->\n+      <version>1.3.0-beta.1</version> <!-- {x-version-update;com.azure:azure-core;current} -->\n     </dependency>\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-core-http-netty</artifactId>\n-      <version>1.2.0</version> <!-- {x-version-update;com.azure:azure-core-http-netty;dependency} -->\n+      <version>1.3.0-beta.1</version> <!-- {x-version-update;com.azure:azure-core-http-netty;current} -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM4NDI4Ng=="}, "originalCommit": {"oid": "a1a60a0df57b97ab0595aa0199baac59a7c8d786"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDg0NDEzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-http-netty/src/test/java/com/azure/core/http/netty/ReactorNettyClientTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMTo1OTo0OVrOFn7uiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMjowMDo0N1rOFn7vUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQxNzM1Mg==", "bodyText": "Why not use StepVerifier here to expect next rather than blockLast()?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r377417352", "createdAt": "2020-02-11T01:59:49Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-http-netty/src/test/java/com/azure/core/http/netty/ReactorNettyClientTests.java", "diffHunk": "@@ -281,6 +289,56 @@ public void testConcurrentRequests() {\n         Assertions.fail(\"Method needs to be reimplemented\");\n     }\n \n+    /**\n+     * Tests that deep copying the buffers returned by Netty will make the stream returned to the customer resilient to\n+     * Netty reclaiming them once the 'onNext' operator chain has completed.\n+     */\n+    @Test\n+    public void deepCopyBufferConfiguredInBuilder() {\n+        HttpClient client = new NettyAsyncHttpClientBuilder().disableBufferCopy(false).build();\n+\n+        HttpResponse response = client.send(new HttpRequest(HttpMethod.GET, url(server, LONG_BODY_PATH))).block();\n+        assertNotNull(response);\n+        assertEquals(200, response.getStatusCode());\n+\n+        DelayWriteStream delayWriteStream = new DelayWriteStream();\n+        response.getBody().doOnNext(delayWriteStream::write).blockLast();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde7065bb62780dfaa2b6b1b4a8ae57f0dfb4415"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQxNzU1NA==", "bodyText": "StepVerifier.create(response.getBody())\n.assertNext(body -> {\n     // deserialize and assert\n})\n.expectComplete()\n.verify();", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8055#discussion_r377417554", "createdAt": "2020-02-11T02:00:47Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-http-netty/src/test/java/com/azure/core/http/netty/ReactorNettyClientTests.java", "diffHunk": "@@ -281,6 +289,56 @@ public void testConcurrentRequests() {\n         Assertions.fail(\"Method needs to be reimplemented\");\n     }\n \n+    /**\n+     * Tests that deep copying the buffers returned by Netty will make the stream returned to the customer resilient to\n+     * Netty reclaiming them once the 'onNext' operator chain has completed.\n+     */\n+    @Test\n+    public void deepCopyBufferConfiguredInBuilder() {\n+        HttpClient client = new NettyAsyncHttpClientBuilder().disableBufferCopy(false).build();\n+\n+        HttpResponse response = client.send(new HttpRequest(HttpMethod.GET, url(server, LONG_BODY_PATH))).block();\n+        assertNotNull(response);\n+        assertEquals(200, response.getStatusCode());\n+\n+        DelayWriteStream delayWriteStream = new DelayWriteStream();\n+        response.getBody().doOnNext(delayWriteStream::write).blockLast();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQxNzM1Mg=="}, "originalCommit": {"oid": "dde7065bb62780dfaa2b6b1b4a8ae57f0dfb4415"}, "originalPosition": 115}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3152, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}