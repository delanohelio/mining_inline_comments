{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MDAzMDk4", "number": 9653, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzoyODo1MFrODsQUIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjowMjoyMVrODuBXUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzMxMjMyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzoyODo1MFrOF9EieA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzoyODo1MFrOF9EieA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MTgxNg==", "bodyText": "Do on next is for side effects like logging, you should use the first overload of subscribe", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r399581816", "createdAt": "2020-03-27T23:28:50Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleSample.java", "diffHunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import reactor.core.Disposable;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Sample demonstrates how to receive an {@link ServiceBusReceivedMessage} from an Azure Service Bus Queue and settle\n+ * it. Settling of message include accept, defer and abandon the message as needed.\n+ */\n+public class ReceiveMessageAndSettleSample {\n+    /**\n+     * Main method to invoke this demo on how to receive an {@link ServiceBusMessage} from an Azure Service Bus\n+     * Queue\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+\n+        // The connection string value can be obtained by:\n+        // 1. Going to your Service Bus namespace in Azure Portal.\n+        // 2. Go to \"Shared access policies\"\n+        // 3. Copy the connection string for the \"RootManageSharedAccessKey\" policy.\n+        String connectionString = System.getenv(\"AZURE_SERVICEBUS_CONNECTION_STRING\");\n+\n+        // Create a receiver.\n+        // \"<<fully-qualified-namespace>>\" will look similar to \"{your-namespace}.servicebus.windows.net\"\n+        // \"<<queue-name>>\" will be the name of the Service Bus queue instance you created\n+        // inside the Service Bus namespace.\n+\n+        ServiceBusReceiverAsyncClient receiverAsyncClient = new ServiceBusClientBuilder()\n+            .connectionString(connectionString)\n+            .buildReceiverClientBuilder()\n+            .receiveMode(ReceiveMode.PEEK_LOCK)\n+            .isLockAutoRenewed(true)\n+            .queueName(\"<<queue-name>>\")\n+            .maxAutoLockRenewalDuration(Duration.ofSeconds(2))\n+            .buildAsyncClient();\n+\n+        Disposable subscription = receiverAsyncClient.receive()\n+            .doOnNext(received -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec8c29f9f7fa1653e0b243a89b7dbad1e4e2a8b9"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjM1MTI3OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo0NDo0N1rOF9wJ5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo0NDo0N1rOF9wJ5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5NjQyMg==", "bodyText": "A stream could be infinite. It's a batch of messages.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r400296422", "createdAt": "2020-03-30T15:44:47Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/README.md", "diffHunk": "@@ -29,7 +29,10 @@ have to be online at the same time.\n   - [Send Message to Queue or Topic](#send-message-to-queue-or-topic)\n   - [Receive message from Queue or Subscription](#receive-message-from-queue-or-subscription)\n   - [Send message with Azure Active Directory credentials](#send-message-with-azure-active-directory-credentials)\n+  - [Send a batch of messages](#send-a-batch-of-messages)\n   - [Receive message with Azure Active Directory credentials](#receive-message-with-azure-active-directory-credentials)\n+  - [Receive messages and settle them](#receive-messages-and-settle-them)\n+  - [Receive stream of messages synchronously](#receive-stream-of-messages-synchronously)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a49d81d867716a99ce02b1666ca70436f3ae1466"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjM1Mzg4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/README.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo0NToyNVrOF9wLnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo1NjoxM1rOF_0hHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5Njg2MA==", "bodyText": "iirc, we want to showcase DefaultAzureCredential. I would use that instead of explicitly choosing ClientSecretCredential.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r400296860", "createdAt": "2020-03-30T15:45:25Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/README.md", "diffHunk": "@@ -89,14 +92,44 @@ Follow the instructions in [Creating a service principal using Azure Portal][app\n service principal and a client secret. The corresponding `clientId` and `tenantId` for the service principal can be\n obtained from the [App registration page][app_registration_page].\n \n+<!-- embedme ./src/samples/java/com/azure/messaging/servicebus/ReadmeSamples.java#L60-L69 -->\n+```java\n+ClientSecretCredential credential = new ClientSecretCredentialBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a49d81d867716a99ce02b1666ca70436f3ae1466"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyNTI5NQ==", "bodyText": "This is unresolved. The section for this snippet is to highlight using AAD. We still want to highlight showing DefaultAzureCredential.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r402425295", "createdAt": "2020-04-02T15:57:00Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/README.md", "diffHunk": "@@ -89,14 +92,44 @@ Follow the instructions in [Creating a service principal using Azure Portal][app\n service principal and a client secret. The corresponding `clientId` and `tenantId` for the service principal can be\n obtained from the [App registration page][app_registration_page].\n \n+<!-- embedme ./src/samples/java/com/azure/messaging/servicebus/ReadmeSamples.java#L60-L69 -->\n+```java\n+ClientSecretCredential credential = new ClientSecretCredentialBuilder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5Njg2MA=="}, "originalCommit": {"oid": "a49d81d867716a99ce02b1666ca70436f3ae1466"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2NTA1Mw==", "bodyText": "For now I am removing ClientSecretCredentialBuilder sample, and  use DefaultAzureCredential. Later if  we want we can add it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r402465053", "createdAt": "2020-04-02T16:56:13Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/README.md", "diffHunk": "@@ -89,14 +92,44 @@ Follow the instructions in [Creating a service principal using Azure Portal][app\n service principal and a client secret. The corresponding `clientId` and `tenantId` for the service principal can be\n obtained from the [App registration page][app_registration_page].\n \n+<!-- embedme ./src/samples/java/com/azure/messaging/servicebus/ReadmeSamples.java#L60-L69 -->\n+```java\n+ClientSecretCredential credential = new ClientSecretCredentialBuilder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5Njg2MA=="}, "originalCommit": {"oid": "a49d81d867716a99ce02b1666ca70436f3ae1466"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjM1Njc0OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo0NjoxMVrOF9wNsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo0NjoxMVrOF9wNsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5NzM5Mw==", "bodyText": "We don't need method names in our code snippets.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r400297393", "createdAt": "2020-03-30T15:46:11Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/README.md", "diffHunk": "@@ -109,26 +142,39 @@ Both the asynchronous and synchronous Service Bus sender and receiver clients ca\n \n The snippet below creates an asynchronous Service Bus sender.\n \n-<!-- embedme ./src/samples/java/com/azure/messaging/servicebus/ReadmeSamples.java#L18-L23 -->\n+<!-- embedme ./src/samples/java/com/azure/messaging/servicebus/ReadmeSamples.java#L21-L26 -->\n ```java\n-String connectionString = \"<< CONNECTION STRING FOR THE SERVICE BUS NAMESPACE >>\";\n-ServiceBusSenderAsyncClient sender = new ServiceBusClientBuilder()\n-    .connectionString(connectionString)\n-    .buildSenderClientBuilder()\n-    .entityName(\"<< QUEUE OR TOPIC NAME >>\")\n-    .buildAsyncClient();\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a49d81d867716a99ce02b1666ca70436f3ae1466"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjM1ODY2OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo0NjozOFrOF9wO7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjoxODo1MVrOF-dvaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5NzcwOQ==", "bodyText": "The namespace connection string is not sufficient, they need to also set the entityPath.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r400297709", "createdAt": "2020-03-30T15:46:38Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/README.md", "diffHunk": "@@ -109,26 +142,39 @@ Both the asynchronous and synchronous Service Bus sender and receiver clients ca\n \n The snippet below creates an asynchronous Service Bus sender.\n \n-<!-- embedme ./src/samples/java/com/azure/messaging/servicebus/ReadmeSamples.java#L18-L23 -->\n+<!-- embedme ./src/samples/java/com/azure/messaging/servicebus/ReadmeSamples.java#L21-L26 -->\n ```java\n-String connectionString = \"<< CONNECTION STRING FOR THE SERVICE BUS NAMESPACE >>\";\n-ServiceBusSenderAsyncClient sender = new ServiceBusClientBuilder()\n-    .connectionString(connectionString)\n-    .buildSenderClientBuilder()\n-    .entityName(\"<< QUEUE OR TOPIC NAME >>\")\n-    .buildAsyncClient();\n+ */\n+public void createAsynchronousServiceBusSender() {\n+    String connectionString = \"<< CONNECTION STRING FOR THE SERVICE BUS NAMESPACE >>\";\n+    ServiceBusSenderAsyncClient sender = new ServiceBusClientBuilder()\n+        .connectionString(connectionString)\n+        .buildSenderClientBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a49d81d867716a99ce02b1666ca70436f3ae1466"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA0MzMwNw==", "bodyText": "I am setting .queueName(\"<< QUEUE NAME >>\")  in updated sampels.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r401043307", "createdAt": "2020-03-31T16:18:51Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/README.md", "diffHunk": "@@ -109,26 +142,39 @@ Both the asynchronous and synchronous Service Bus sender and receiver clients ca\n \n The snippet below creates an asynchronous Service Bus sender.\n \n-<!-- embedme ./src/samples/java/com/azure/messaging/servicebus/ReadmeSamples.java#L18-L23 -->\n+<!-- embedme ./src/samples/java/com/azure/messaging/servicebus/ReadmeSamples.java#L21-L26 -->\n ```java\n-String connectionString = \"<< CONNECTION STRING FOR THE SERVICE BUS NAMESPACE >>\";\n-ServiceBusSenderAsyncClient sender = new ServiceBusClientBuilder()\n-    .connectionString(connectionString)\n-    .buildSenderClientBuilder()\n-    .entityName(\"<< QUEUE OR TOPIC NAME >>\")\n-    .buildAsyncClient();\n+ */\n+public void createAsynchronousServiceBusSender() {\n+    String connectionString = \"<< CONNECTION STRING FOR THE SERVICE BUS NAMESPACE >>\";\n+    ServiceBusSenderAsyncClient sender = new ServiceBusClientBuilder()\n+        .connectionString(connectionString)\n+        .buildSenderClientBuilder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5NzcwOQ=="}, "originalCommit": {"oid": "a49d81d867716a99ce02b1666ca70436f3ae1466"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjM2MDE1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo0Njo1N1rOF9wP2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo0Njo1N1rOF9wP2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5Nzk0NA==", "bodyText": "Same for these ones below. I would make sure they run.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r400297944", "createdAt": "2020-03-30T15:46:57Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/README.md", "diffHunk": "@@ -109,26 +142,39 @@ Both the asynchronous and synchronous Service Bus sender and receiver clients ca\n \n The snippet below creates an asynchronous Service Bus sender.\n \n-<!-- embedme ./src/samples/java/com/azure/messaging/servicebus/ReadmeSamples.java#L18-L23 -->\n+<!-- embedme ./src/samples/java/com/azure/messaging/servicebus/ReadmeSamples.java#L21-L26 -->\n ```java\n-String connectionString = \"<< CONNECTION STRING FOR THE SERVICE BUS NAMESPACE >>\";\n-ServiceBusSenderAsyncClient sender = new ServiceBusClientBuilder()\n-    .connectionString(connectionString)\n-    .buildSenderClientBuilder()\n-    .entityName(\"<< QUEUE OR TOPIC NAME >>\")\n-    .buildAsyncClient();\n+ */\n+public void createAsynchronousServiceBusSender() {\n+    String connectionString = \"<< CONNECTION STRING FOR THE SERVICE BUS NAMESPACE >>\";\n+    ServiceBusSenderAsyncClient sender = new ServiceBusClientBuilder()\n+        .connectionString(connectionString)\n+        .buildSenderClientBuilder()\n ```\n \n The snippet below creates an asynchronous Service Bus receiver.\n \n-<!-- embedme ./src/samples/java/com/azure/messaging/servicebus/ReadmeSamples.java#L30-L35 -->\n+<!-- embedme ./src/samples/java/com/azure/messaging/servicebus/ReadmeSamples.java#L33-L38 -->\n ```java\n-String connectionString = \"<< CONNECTION STRING FOR THE SERVICE BUS NAMESPACE >>\";\n-ServiceBusReceiverAsyncClient receiver = new ServiceBusClientBuilder()\n-    .connectionString(connectionString)\n-    .buildReceiverClientBuilder()\n-    .queueName(\"<< QUEUE NAME >>\")\n-    .buildAsyncClient();\n+ */\n+public void createAsynchronousServiceBusReceiver() {\n+    String connectionString = \"<< CONNECTION STRING FOR THE SERVICE BUS NAMESPACE >>\";\n+    ServiceBusReceiverAsyncClient receiver = new ServiceBusClientBuilder()\n+        .connectionString(connectionString)\n+        .buildReceiverClientBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a49d81d867716a99ce02b1666ca70436f3ae1466"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjM2NTkxOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo0ODoxOFrOF9wThg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo0ODoxOFrOF9wThg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5ODg4Ng==", "bodyText": "This is a lot of headers. It could be condensed into a list of links.\n* [Sending a batch of messages][sample-send-batch-messages]\n* [Receive messages and settle them][ ... ]\n...", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r400298886", "createdAt": "2020-03-30T15:48:18Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/README.md", "diffHunk": "@@ -151,9 +197,18 @@ Example of receiving a message asynchronously is documented [here][sample-receiv\n ### Send message with Azure Active Directory credentials\n Example of sending a message asynchronously using active directory credential is documented [here][sample-send-async-aad-message].\n \n+### Send a batch of messages ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a49d81d867716a99ce02b1666ca70436f3ae1466"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjM3MjU1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo0OTo0MFrOF9wXiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo0OTo0MFrOF9wXiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5OTkxNQ==", "bodyText": "nit: Consistency with spacing. Space should follow //. (ie. // This)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r400299915", "createdAt": "2020-03-30T15:49:40Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleSample.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import reactor.core.Disposable;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Sample demonstrates how to receive an {@link ServiceBusReceivedMessage} from an Azure Service Bus Queue and settle\n+ * it. Settling of message include accept, defer and abandon the message as needed.\n+ */\n+public class ReceiveMessageAndSettleSample {\n+    /**\n+     * Main method to invoke this demo on how to receive an {@link ServiceBusMessage} from an Azure Service Bus\n+     * Queue\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+\n+        // The connection string value can be obtained by:\n+        // 1. Going to your Service Bus namespace in Azure Portal.\n+        // 2. Go to \"Shared access policies\"\n+        // 3. Copy the connection string for the \"RootManageSharedAccessKey\" policy.\n+        String connectionString = System.getenv(\"AZURE_SERVICEBUS_CONNECTION_STRING\");\n+\n+        // Create a receiver.\n+        // \"<<fully-qualified-namespace>>\" will look similar to \"{your-namespace}.servicebus.windows.net\"\n+        // \"<<queue-name>>\" will be the name of the Service Bus queue instance you created\n+        // inside the Service Bus namespace.\n+\n+        ServiceBusReceiverAsyncClient receiverAsyncClient = new ServiceBusClientBuilder()\n+            .connectionString(connectionString)\n+            .buildReceiverClientBuilder()\n+            .receiveMode(ReceiveMode.PEEK_LOCK)\n+            .isLockAutoRenewed(true)\n+            .queueName(\"<<queue-name>>\")\n+            .maxAutoLockRenewalDuration(Duration.ofSeconds(2))\n+            .buildAsyncClient();\n+\n+        Disposable subscription = receiverAsyncClient.receive()\n+            .subscribe(received -> {\n+                Instant latest = Instant.MIN;\n+\n+                // Simulate some sort of long processing. Sleep should not be used in production system.\n+                for (int i = 0; i < 3; i++) {\n+                    try {\n+                        TimeUnit.SECONDS.sleep(15);\n+                    } catch (InterruptedException error) {\n+                        System.out.println(\"Error occurred while sleeping: \" + error);\n+                    }\n+                    latest = received.getLockedUntil();\n+                    System.out.println(\"Message Locked Until \" + latest);\n+                }\n+\n+                //This is application business logic to take action based on some application logic.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a49d81d867716a99ce02b1666ca70436f3ae1466"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjM4MzQxOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1MTo1MFrOF9weBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1MTo1MFrOF9weBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwMTU3NA==", "bodyText": "You need to set \"isAutoComplete\" to false when building this client. Or it'll try to complete or abandon the message again.\n\"Duration.ofSeconds()\" is used multiple times and can be a final variable.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r400301574", "createdAt": "2020-03-30T15:51:50Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleSample.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import reactor.core.Disposable;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Sample demonstrates how to receive an {@link ServiceBusReceivedMessage} from an Azure Service Bus Queue and settle\n+ * it. Settling of message include accept, defer and abandon the message as needed.\n+ */\n+public class ReceiveMessageAndSettleSample {\n+    /**\n+     * Main method to invoke this demo on how to receive an {@link ServiceBusMessage} from an Azure Service Bus\n+     * Queue\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+\n+        // The connection string value can be obtained by:\n+        // 1. Going to your Service Bus namespace in Azure Portal.\n+        // 2. Go to \"Shared access policies\"\n+        // 3. Copy the connection string for the \"RootManageSharedAccessKey\" policy.\n+        String connectionString = System.getenv(\"AZURE_SERVICEBUS_CONNECTION_STRING\");\n+\n+        // Create a receiver.\n+        // \"<<fully-qualified-namespace>>\" will look similar to \"{your-namespace}.servicebus.windows.net\"\n+        // \"<<queue-name>>\" will be the name of the Service Bus queue instance you created\n+        // inside the Service Bus namespace.\n+\n+        ServiceBusReceiverAsyncClient receiverAsyncClient = new ServiceBusClientBuilder()\n+            .connectionString(connectionString)\n+            .buildReceiverClientBuilder()\n+            .receiveMode(ReceiveMode.PEEK_LOCK)\n+            .isLockAutoRenewed(true)\n+            .queueName(\"<<queue-name>>\")\n+            .maxAutoLockRenewalDuration(Duration.ofSeconds(2))\n+            .buildAsyncClient();\n+\n+        Disposable subscription = receiverAsyncClient.receive()\n+            .subscribe(received -> {\n+                Instant latest = Instant.MIN;\n+\n+                // Simulate some sort of long processing. Sleep should not be used in production system.\n+                for (int i = 0; i < 3; i++) {\n+                    try {\n+                        TimeUnit.SECONDS.sleep(15);\n+                    } catch (InterruptedException error) {\n+                        System.out.println(\"Error occurred while sleeping: \" + error);\n+                    }\n+                    latest = received.getLockedUntil();\n+                    System.out.println(\"Message Locked Until \" + latest);\n+                }\n+\n+                //This is application business logic to take action based on some application logic.\n+                // For demo purpose we are using a property for application logic.\n+                String propertyValue = \"UNDEFINED\";\n+                if (received.getProperties().get(\"SOME_USER_PROPERTY\") != null) {\n+                    propertyValue = (String) received.getProperties().get(\"SOME_USER_PROPERTY\");\n+                }\n+\n+                switch (propertyValue) {\n+                    case \"VALUE-1\":\n+                        System.out.println(\"Completing message.\");\n+                        receiverAsyncClient.complete(received).block(Duration.ofSeconds(15));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a49d81d867716a99ce02b1666ca70436f3ae1466"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjM4NTg4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1MjoxOVrOF9wffw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1MjoxOVrOF9wffw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwMTk1MQ==", "bodyText": "You sleep for 20 seconds, but each iteration is 15 seconds in the subscribe. Have you run these samples?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r400301951", "createdAt": "2020-03-30T15:52:19Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleSample.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import reactor.core.Disposable;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Sample demonstrates how to receive an {@link ServiceBusReceivedMessage} from an Azure Service Bus Queue and settle\n+ * it. Settling of message include accept, defer and abandon the message as needed.\n+ */\n+public class ReceiveMessageAndSettleSample {\n+    /**\n+     * Main method to invoke this demo on how to receive an {@link ServiceBusMessage} from an Azure Service Bus\n+     * Queue\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+\n+        // The connection string value can be obtained by:\n+        // 1. Going to your Service Bus namespace in Azure Portal.\n+        // 2. Go to \"Shared access policies\"\n+        // 3. Copy the connection string for the \"RootManageSharedAccessKey\" policy.\n+        String connectionString = System.getenv(\"AZURE_SERVICEBUS_CONNECTION_STRING\");\n+\n+        // Create a receiver.\n+        // \"<<fully-qualified-namespace>>\" will look similar to \"{your-namespace}.servicebus.windows.net\"\n+        // \"<<queue-name>>\" will be the name of the Service Bus queue instance you created\n+        // inside the Service Bus namespace.\n+\n+        ServiceBusReceiverAsyncClient receiverAsyncClient = new ServiceBusClientBuilder()\n+            .connectionString(connectionString)\n+            .buildReceiverClientBuilder()\n+            .receiveMode(ReceiveMode.PEEK_LOCK)\n+            .isLockAutoRenewed(true)\n+            .queueName(\"<<queue-name>>\")\n+            .maxAutoLockRenewalDuration(Duration.ofSeconds(2))\n+            .buildAsyncClient();\n+\n+        Disposable subscription = receiverAsyncClient.receive()\n+            .subscribe(received -> {\n+                Instant latest = Instant.MIN;\n+\n+                // Simulate some sort of long processing. Sleep should not be used in production system.\n+                for (int i = 0; i < 3; i++) {\n+                    try {\n+                        TimeUnit.SECONDS.sleep(15);\n+                    } catch (InterruptedException error) {\n+                        System.out.println(\"Error occurred while sleeping: \" + error);\n+                    }\n+                    latest = received.getLockedUntil();\n+                    System.out.println(\"Message Locked Until \" + latest);\n+                }\n+\n+                //This is application business logic to take action based on some application logic.\n+                // For demo purpose we are using a property for application logic.\n+                String propertyValue = \"UNDEFINED\";\n+                if (received.getProperties().get(\"SOME_USER_PROPERTY\") != null) {\n+                    propertyValue = (String) received.getProperties().get(\"SOME_USER_PROPERTY\");\n+                }\n+\n+                switch (propertyValue) {\n+                    case \"VALUE-1\":\n+                        System.out.println(\"Completing message.\");\n+                        receiverAsyncClient.complete(received).block(Duration.ofSeconds(15));\n+                        break;\n+                    case \"VALUE-2\":\n+                        System.out.println(\"Abandon message.\");\n+                        receiverAsyncClient.abandon(received).block(Duration.ofSeconds(15));\n+                        break;\n+                    case \"VALUE-3\":\n+                        System.out.println(\"Defer message.\");\n+                        receiverAsyncClient.defer(received).block(Duration.ofSeconds(15));\n+                        break;\n+                    default:\n+                        System.out.println(\"Deadletter message.\");\n+                        receiverAsyncClient.deadLetter(received).block(Duration.ofSeconds(15));\n+                }\n+            });\n+\n+        // Receiving messages from the queue for a duration of 20 seconds.\n+        // Subscribe is not a blocking call so we sleep here so the program does not end.\n+        try {\n+            Thread.sleep(Duration.ofSeconds(20).toMillis());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a49d81d867716a99ce02b1666ca70436f3ae1466"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzIwNDMxOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReadmeSamples.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjo1MDoxMVrOF-fAoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNTo1MToyNFrOF-xsYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA2NDA5Nw==", "bodyText": "This is the same as the code sample above in 44 - 52.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r401064097", "createdAt": "2020-03-31T16:50:11Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReadmeSamples.java", "diffHunk": "@@ -34,4 +38,31 @@ public void createAsynchronousServiceBusReceiver() {\n             .queueName(\"<< QUEUE NAME >>\")\n             .buildAsyncClient();\n     }\n+\n+    /**\n+     * Code sample for creating an asynchronous Service Bus receiver using {@link DefaultAzureCredentialBuilder}.\n+     */\n+    public void createAsynchronousServiceBusReceiverWithAzureIdentity() {\n+        TokenCredential credential = new DefaultAzureCredentialBuilder()\n+            .build();\n+        ServiceBusReceiverAsyncClient receiver = new ServiceBusClientBuilder()\n+            .credential(\"<<fully-qualified-namespace>>\", credential)\n+            .buildReceiverClientBuilder()\n+            .queueName(\"<<queue-name>>\")\n+            .buildAsyncClient();\n+    }\n+\n+    /**\n+     * Code sample for creating an asynchronous Service Bus receiver using Aad.\n+     */\n+    public void createAsynchronousServiceBusReceiverWithAad() {\n+        DefaultAzureCredential credential = new DefaultAzureCredentialBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "313d5decbdbcb88f1202023fb1570881bb78c5f1"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM3MDIxMQ==", "bodyText": "Updated tis to use ClientSecretCredential because it provides a way to service principal and a client secret .", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r401370211", "createdAt": "2020-04-01T05:51:24Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReadmeSamples.java", "diffHunk": "@@ -34,4 +38,31 @@ public void createAsynchronousServiceBusReceiver() {\n             .queueName(\"<< QUEUE NAME >>\")\n             .buildAsyncClient();\n     }\n+\n+    /**\n+     * Code sample for creating an asynchronous Service Bus receiver using {@link DefaultAzureCredentialBuilder}.\n+     */\n+    public void createAsynchronousServiceBusReceiverWithAzureIdentity() {\n+        TokenCredential credential = new DefaultAzureCredentialBuilder()\n+            .build();\n+        ServiceBusReceiverAsyncClient receiver = new ServiceBusClientBuilder()\n+            .credential(\"<<fully-qualified-namespace>>\", credential)\n+            .buildReceiverClientBuilder()\n+            .queueName(\"<<queue-name>>\")\n+            .buildAsyncClient();\n+    }\n+\n+    /**\n+     * Code sample for creating an asynchronous Service Bus receiver using Aad.\n+     */\n+    public void createAsynchronousServiceBusReceiverWithAad() {\n+        DefaultAzureCredential credential = new DefaultAzureCredentialBuilder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA2NDA5Nw=="}, "originalCommit": {"oid": "313d5decbdbcb88f1202023fb1570881bb78c5f1"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzIwODA5OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjo1MToxMFrOF-fDGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjo1MToxMFrOF-fDGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA2NDczMQ==", "bodyText": "TIME_OUT -> TIMEOUT", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r401064731", "createdAt": "2020-03-31T16:51:10Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleSample.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import reactor.core.Disposable;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Sample demonstrates how to receive an {@link ServiceBusReceivedMessage} from an Azure Service Bus Queue and settle\n+ * it. Settling of message include accept, defer and abandon the message as needed.\n+ */\n+public class ReceiveMessageAndSettleSample {\n+    private static final Duration TIME_OUT = Duration.ofSeconds(15);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "313d5decbdbcb88f1202023fb1570881bb78c5f1"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzIxMDYyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjo1MTo0N1rOF-fErg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjo1MTo0N1rOF-fErg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA2NTEzNA==", "bodyText": "Rather than using an environment variable, the template of how one should look is easier to digest. Some of the other samples use this template.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r401065134", "createdAt": "2020-03-31T16:51:47Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleSample.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import reactor.core.Disposable;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Sample demonstrates how to receive an {@link ServiceBusReceivedMessage} from an Azure Service Bus Queue and settle\n+ * it. Settling of message include accept, defer and abandon the message as needed.\n+ */\n+public class ReceiveMessageAndSettleSample {\n+    private static final Duration TIME_OUT = Duration.ofSeconds(15);\n+\n+    /**\n+     * Main method to invoke this demo on how to receive an {@link ServiceBusMessage} from an Azure Service Bus\n+     * Queue\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+\n+        // The connection string value can be obtained by:\n+        // 1. Going to your Service Bus namespace in Azure Portal.\n+        // 2. Go to \"Shared access policies\"\n+        // 3. Copy the connection string for the \"RootManageSharedAccessKey\" policy.\n+        String connectionString = System.getenv(\"AZURE_SERVICEBUS_CONNECTION_STRING\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "313d5decbdbcb88f1202023fb1570881bb78c5f1"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzI3MDk4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleSample.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzowNzozNFrOF-fryg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjo1Mjo1M1rOF_diJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA3NTE0Ng==", "bodyText": "I don't think this is a good sample, I think it would be better to show chained reactor operations that could take longer than the 15 seconds.\nFor example:\nclient.receive().flatMap(message -> {\n    // A sample of processing the message followed by a persisting the message logic.\n    return Mono.delay(Duration.ofSeconds(15).thenReturn(message);\n}).onErrorContinue((message, error) -> {\n    // Handle the message that caused the error while processing above. In this case, we'll abandon it and let someone else handle it.\n    client.abandon(message).block();\n})\n.flatMap(message -> {\n  // This is a message that was successfully processed. So we complete it.\n  return client.complete(message);\n})\n.subscribe();", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r401075146", "createdAt": "2020-03-31T17:07:34Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleSample.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import reactor.core.Disposable;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Sample demonstrates how to receive an {@link ServiceBusReceivedMessage} from an Azure Service Bus Queue and settle\n+ * it. Settling of message include accept, defer and abandon the message as needed.\n+ */\n+public class ReceiveMessageAndSettleSample {\n+    private static final Duration TIME_OUT = Duration.ofSeconds(15);\n+\n+    /**\n+     * Main method to invoke this demo on how to receive an {@link ServiceBusMessage} from an Azure Service Bus\n+     * Queue\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+\n+        // The connection string value can be obtained by:\n+        // 1. Going to your Service Bus namespace in Azure Portal.\n+        // 2. Go to \"Shared access policies\"\n+        // 3. Copy the connection string for the \"RootManageSharedAccessKey\" policy.\n+        String connectionString = System.getenv(\"AZURE_SERVICEBUS_CONNECTION_STRING\");\n+\n+        // Create a receiver.\n+        // \"<<fully-qualified-namespace>>\" will look similar to \"{your-namespace}.servicebus.windows.net\"\n+        // \"<<queue-name>>\" will be the name of the Service Bus queue instance you created\n+        // inside the Service Bus namespace.\n+\n+        ServiceBusReceiverAsyncClient receiverAsyncClient = new ServiceBusClientBuilder()\n+            .connectionString(connectionString)\n+            .buildReceiverClientBuilder()\n+            .receiveMode(ReceiveMode.PEEK_LOCK)\n+            .isLockAutoRenewed(true)\n+            .queueName(\"<<queue-name>>\")\n+            .isAutoComplete(false)\n+            .maxAutoLockRenewalDuration(Duration.ofSeconds(2))\n+            .buildAsyncClient();\n+\n+        Disposable subscription = receiverAsyncClient.receive()\n+            .subscribe(received -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "313d5decbdbcb88f1202023fb1570881bb78c5f1"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4ODQ4Ng==", "bodyText": "I do not think we can get message in onErrorContinue  . But I have changed the sample as you told.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r402088486", "createdAt": "2020-04-02T06:52:53Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleSample.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import reactor.core.Disposable;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Sample demonstrates how to receive an {@link ServiceBusReceivedMessage} from an Azure Service Bus Queue and settle\n+ * it. Settling of message include accept, defer and abandon the message as needed.\n+ */\n+public class ReceiveMessageAndSettleSample {\n+    private static final Duration TIME_OUT = Duration.ofSeconds(15);\n+\n+    /**\n+     * Main method to invoke this demo on how to receive an {@link ServiceBusMessage} from an Azure Service Bus\n+     * Queue\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+\n+        // The connection string value can be obtained by:\n+        // 1. Going to your Service Bus namespace in Azure Portal.\n+        // 2. Go to \"Shared access policies\"\n+        // 3. Copy the connection string for the \"RootManageSharedAccessKey\" policy.\n+        String connectionString = System.getenv(\"AZURE_SERVICEBUS_CONNECTION_STRING\");\n+\n+        // Create a receiver.\n+        // \"<<fully-qualified-namespace>>\" will look similar to \"{your-namespace}.servicebus.windows.net\"\n+        // \"<<queue-name>>\" will be the name of the Service Bus queue instance you created\n+        // inside the Service Bus namespace.\n+\n+        ServiceBusReceiverAsyncClient receiverAsyncClient = new ServiceBusClientBuilder()\n+            .connectionString(connectionString)\n+            .buildReceiverClientBuilder()\n+            .receiveMode(ReceiveMode.PEEK_LOCK)\n+            .isLockAutoRenewed(true)\n+            .queueName(\"<<queue-name>>\")\n+            .isAutoComplete(false)\n+            .maxAutoLockRenewalDuration(Duration.ofSeconds(2))\n+            .buildAsyncClient();\n+\n+        Disposable subscription = receiverAsyncClient.receive()\n+            .subscribe(received -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA3NTE0Ng=="}, "originalCommit": {"oid": "313d5decbdbcb88f1202023fb1570881bb78c5f1"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzI4NjU0OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAsyncSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzoxMToxMVrOF-f1NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzoxMToxMVrOF-f1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA3NzU1Nw==", "bodyText": "Should we describe that these messages are also autocompleted?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r401077557", "createdAt": "2020-03-31T17:11:11Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAsyncSample.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import reactor.core.Disposable;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Sample demonstrates how to receive an {@link ServiceBusReceivedMessage} from an Azure Service Bus Queue using\n+ * connection string.\n+ */\n+public class ReceiveMessageAsyncSample {\n+    /**\n+     * Main method to invoke this demo on how to receive an {@link ServiceBusMessage} from an Azure Service Bus\n+     * Queue\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+\n+        // The connection string value can be obtained by:\n+        // 1. Going to your Service Bus namespace in Azure Portal.\n+        // 2. Go to \"Shared access policies\"\n+        // 3. Copy the connection string for the \"RootManageSharedAccessKey\" policy.\n+        String connectionString = System.getenv(\"AZURE_SERVICEBUS_CONNECTION_STRING\");\n+\n+        // Create a receiver.\n+        // \"<<fully-qualified-namespace>>\" will look similar to \"{your-namespace}.servicebus.windows.net\"\n+        // \"<<queue-name>>\" will be the name of the Service Bus queue instance you created\n+        // inside the Service Bus namespace.\n+        ServiceBusReceiverAsyncClient receiverAsyncClient = new ServiceBusClientBuilder()\n+            .connectionString(connectionString)\n+            .buildReceiverClientBuilder()\n+            .queueName(\"<<queue-name>>\")\n+            .buildAsyncClient();\n+\n+        Disposable subscription = receiverAsyncClient.receive()\n+            .subscribe(message -> {\n+                System.out.println(\"Received Message Id:\" + message.getMessageId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "313d5decbdbcb88f1202023fb1570881bb78c5f1"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzI5MDU4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageStreamSyncSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzoxMjoxOVrOF-f32A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzoxMjoxOVrOF-f32A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA3ODIzMg==", "bodyText": "It's not a stream. You received a batch of, at most, 5 messages from the service bus queue. The data structure we return could be streamed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r401078232", "createdAt": "2020-03-31T17:12:19Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageStreamSyncSample.java", "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.IterableStream;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Sample demonstrates how to receive a stream of {@link ServiceBusReceivedMessage} from an Azure Service Bus Queue", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "313d5decbdbcb88f1202023fb1570881bb78c5f1"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzI5NTA0OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/SendMessageBatchWithConnectionStringSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzoxMzozMlrOF-f60A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzoxMzozMlrOF-f60A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA3ODk5Mg==", "bodyText": "Some of your samples you prefix with Async or SyncSample. It is not clear that it is a sync sample until you delve into the code.\nI don't think you need to highlight \"ConnectionString\" in the title.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r401078992", "createdAt": "2020-03-31T17:13:32Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/SendMessageBatchWithConnectionStringSample.java", "diffHunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.messaging.servicebus.models.CreateBatchOptions;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+public class SendMessageBatchWithConnectionStringSample {\n+\n+    /**\n+     * Main method to invoke this demo on how to send an {@link ServiceBusMessageBatch} to an Azure Service Bus.\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "313d5decbdbcb88f1202023fb1570881bb78c5f1"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTgxNDkyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo1Nzo0N1rOF_yIBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo1Nzo0N1rOF_yIBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyNTg2MQ==", "bodyText": "This snippet is unnecessary.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r402425861", "createdAt": "2020-04-02T15:57:47Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/README.md", "diffHunk": "@@ -131,28 +148,38 @@ ServiceBusReceiverAsyncClient receiver = new ServiceBusClientBuilder()\n     .buildAsyncClient();\n ```\n \n-### Send message to Queue or Topic\n+The snippet below creates an asynchronous Service Bus receiver with default token credential.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7013b271eca494a2e5d8ab0a81944101f57120"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTgxNzIwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo1ODoxNlrOF_yJeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo1ODoxNlrOF_yJeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyNjIzMw==", "bodyText": "The backticks are not needed. These are not pieces of code or a particular class. Same with your other links for receiving.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r402426233", "createdAt": "2020-04-02T15:58:16Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/README.md", "diffHunk": "@@ -131,28 +148,38 @@ ServiceBusReceiverAsyncClient receiver = new ServiceBusClientBuilder()\n     .buildAsyncClient();\n ```\n \n-### Send message to Queue or Topic\n+The snippet below creates an asynchronous Service Bus receiver with default token credential.\n+\n+<!-- embedme ./src/samples/java/com/azure/messaging/servicebus/ReadmeSamples.java#L47-L53 -->\n+```java\n+TokenCredential credential = new DefaultAzureCredentialBuilder()\n+    .build();\n+ServiceBusReceiverAsyncClient receiver = new ServiceBusClientBuilder()\n+    .credential(\"<<fully-qualified-namespace>>\", credential)\n+    .receiver()\n+    .queueName(\"<<queue-name>>\")\n+    .buildAsyncClient();\n+```\n+### Send Message Examples\n \n You'll need to create an asynchronous [`ServiceBusSenderAsyncClient`][ServiceBusSenderAsyncClient] or\n a synchronous [`ServiceBusSenderClient`][ServiceBusSenderClient] to send message. Each sender can send message to either, a queue,\n or topic.\n \n-#### Create a Sender and send message to queue or topic\n-Example of sending a message asynchronously is documented [here][sample-send-async-message].\n+* [`Sending a message asynchronously`][sample-send-async-message].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7013b271eca494a2e5d8ab0a81944101f57120"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTgyMTYxOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo1OToxMlrOF_yMOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo1OToxMlrOF_yMOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyNjkzNg==", "bodyText": "Do not check in binaries. Delete: jacoco.exec", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r402426936", "createdAt": "2020-04-02T15:59:12Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/README.md", "diffHunk": "@@ -252,11 +279,16 @@ Guidelines](./CONTRIBUTING.md) for more information.\n [LogLevels]: ../../core/azure-core/src/main/java/com/azure/core/util/logging/ClientLogger.java\n [RetryOptions]: ../../core/azure-core-amqp/src/main/java/com/azure/core/amqp/AmqpRetryOptions.java\n [ServiceBusSenderAsyncClient]: ./src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n-[ServiceBusReceiverAsyncClient]: ./src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\n+[ServiceBusSenderClient]: ./src/main/java/com/azure/messaging/servicebus/ServiceBusSenderClient.java\n+[ServiceBusReceiverClient]: ./src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java\n+[ServiceBusReceiverAsyncClient]: ./src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n [service_bus_connection_string]: https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-create-namespace-portal#get-the-connection-string\n-[sample-send-async-message]: ./src/samples/java/com/azure/messaging/servicebus/MessageSendAsyncSample.java\n-[sample-receive-async-message]: ./src/samples/java/com/azure/messaging/servicebus/MessageReceiverAsyncClient.java\n-[sample-send-async-aad-message]: ./src/samples/java/com/azure/messaging/servicebus/SendMessageWithAzureIdentity.java\n-[sample-receive-async-aad-message]: ./src/samples/java/com/azure/messaging/servicebus/ReceiveMessageWithAzureIDentity.java\n+[sample-send-async-message]: ./src/samples/java/com/azure/messaging/servicebus/SendMessageAsyncSample.java\n+[sample-receive-async-message]: ./src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAsyncSample.java\n+[sample-send-async-aad-message]: ./src/samples/java/com/azure/messaging/servicebus/SendMessageWithAzureIdentityAsyncSample.java\n+[sample-receive-async-aad-message]: ./src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAzureIdentityAsyncSample.java\n+[sample-send-batch-messages]: ./src/samples/java/com/azure/messaging/servicebus/SendMessageBatchSyncSample.java\n+[sample-receive-message-and-settle]: ./src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleAsyncSample.java\n+[sample-receive-message-batch-synchronously]: ./src/samples/java/com/azure/messaging/servicebus/ReceiveMessageBatchSyncSample.java\n \n ![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fservicebus%2Fazure-messaging-servicebus%2FREADME.png)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7013b271eca494a2e5d8ab0a81944101f57120"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTgyNTc1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjowMDoxNVrOF_yO-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjowMDoxNVrOF_yO-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyNzY0Mw==", "bodyText": "One of the receive samples can be co-opted to create a topic subscription.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r402427643", "createdAt": "2020-04-02T16:00:15Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/README.md", "diffHunk": "@@ -121,7 +138,7 @@ ServiceBusSenderAsyncClient sender = new ServiceBusClientBuilder()\n \n The snippet below creates an asynchronous Service Bus receiver.\n \n-<!-- embedme ./src/samples/java/com/azure/messaging/servicebus/ReadmeSamples.java#L30-L35 -->\n+<!-- embedme ./src/samples/java/com/azure/messaging/servicebus/ReadmeSamples.java#L35-L40 -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7013b271eca494a2e5d8ab0a81944101f57120"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTgzNDQwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageBatchSyncSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjowMjoyMVrOF_yUsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjowMjoyMVrOF_yUsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyOTEwNg==", "bodyText": "ReceiveMessageSyncSample is sufficient. We are returning a collection, the batch is implied by the return type.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r402429106", "createdAt": "2020-04-02T16:02:21Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageBatchSyncSample.java", "diffHunk": "@@ -0,0 +1,52 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7013b271eca494a2e5d8ab0a81944101f57120"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2132, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}