{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MTUwNTEy", "number": 16767, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMzoxMjo0OFrOEyH2bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjo0Mjo0OVrOEzB2ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTkyODc3OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMzoxMjo0OFrOHolwtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOTowNTowM1rOHpgHiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMyMzc2NA==", "bodyText": "Why did we duplicate createBatch() logic? By default it uses the default batch size.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16767#discussion_r512323764", "createdAt": "2020-10-26T23:12:48Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -371,13 +372,36 @@ public String getEntityPath() {\n             return fluxError(logger, new NullPointerException(\"'scheduledEnqueueTime' cannot be null.\"));\n         }\n \n-        return createBatch().flatMapMany(messageBatch -> {\n-            messages.forEach(message -> messageBatch.tryAdd(message));\n-            return getSendLink().flatMapMany(link -> connectionProcessor\n-                .flatMap(connection -> connection.getManagementNode(entityName, entityType))\n-                .flatMapMany(managementNode -> managementNode.schedule(messageBatch.getMessages(), scheduledEnqueueTime,\n-                    messageBatch.getMaxSizeInBytes(), link.getLinkName(), transactionContext)));\n-        });\n+        return getSendLink().flatMapMany(link -> link.getLinkSize()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dcea5b7c715c20eacf882db862e5ab55083a034"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI3OTg4Mw==", "bodyText": "I was checking size on the link but changed it to use default size.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16767#discussion_r513279883", "createdAt": "2020-10-28T09:05:03Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -371,13 +372,36 @@ public String getEntityPath() {\n             return fluxError(logger, new NullPointerException(\"'scheduledEnqueueTime' cannot be null.\"));\n         }\n \n-        return createBatch().flatMapMany(messageBatch -> {\n-            messages.forEach(message -> messageBatch.tryAdd(message));\n-            return getSendLink().flatMapMany(link -> connectionProcessor\n-                .flatMap(connection -> connection.getManagementNode(entityName, entityType))\n-                .flatMapMany(managementNode -> managementNode.schedule(messageBatch.getMessages(), scheduledEnqueueTime,\n-                    messageBatch.getMaxSizeInBytes(), link.getLinkName(), transactionContext)));\n-        });\n+        return getSendLink().flatMapMany(link -> link.getLinkSize()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMyMzc2NA=="}, "originalCommit": {"oid": "8dcea5b7c715c20eacf882db862e5ab55083a034"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTkyOTM4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMzoxMzowOFrOHolxEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMzoxMzowOFrOHolxEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMyMzg1OA==", "bodyText": "Why are you keeping an atomic integer? We can just use a for loop", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16767#discussion_r512323858", "createdAt": "2020-10-26T23:13:08Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -371,13 +372,36 @@ public String getEntityPath() {\n             return fluxError(logger, new NullPointerException(\"'scheduledEnqueueTime' cannot be null.\"));\n         }\n \n-        return createBatch().flatMapMany(messageBatch -> {\n-            messages.forEach(message -> messageBatch.tryAdd(message));\n-            return getSendLink().flatMapMany(link -> connectionProcessor\n-                .flatMap(connection -> connection.getManagementNode(entityName, entityType))\n-                .flatMapMany(managementNode -> managementNode.schedule(messageBatch.getMessages(), scheduledEnqueueTime,\n-                    messageBatch.getMaxSizeInBytes(), link.getLinkName(), transactionContext)));\n-        });\n+        return getSendLink().flatMapMany(link -> link.getLinkSize()\n+            .flatMapMany(size -> {\n+                int maxSize =  size > 0\n+                    ? size\n+                    : MAX_MESSAGE_LENGTH_BYTES;\n+                final CreateBatchOptions batchOptions =  new CreateBatchOptions();\n+                batchOptions.setMaximumSizeInBytes(maxSize);\n+\n+                return createBatch(batchOptions).flatMapMany(messageBatch ->  {\n+                    AtomicInteger index = new AtomicInteger();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dcea5b7c715c20eacf882db862e5ab55083a034"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTQzMTQxOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjo0Mjo0OVrOHqAK6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjo0Mjo0OVrOHqAK6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgwNTAzMg==", "bodyText": "nitpick only:\n\nif(messageBatch.tryAddMessage(message)) is pretty readable. No need to have an additional variable if no other use.\nSuggest index=0 instead of 1 for the first message because Java uses 0-based index.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16767#discussion_r513805032", "createdAt": "2020-10-28T22:42:49Z", "author": {"login": "YijunXieMS"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -371,13 +371,27 @@ public String getEntityPath() {\n             return fluxError(logger, new NullPointerException(\"'scheduledEnqueueTime' cannot be null.\"));\n         }\n \n-        return createMessageBatch().flatMapMany(messageBatch -> {\n-            messages.forEach(message -> messageBatch.tryAddMessage(message));\n-            return getSendLink().flatMapMany(link -> connectionProcessor\n-                .flatMap(connection -> connection.getManagementNode(entityName, entityType))\n-                .flatMapMany(managementNode -> managementNode.schedule(messageBatch.getMessages(), scheduledEnqueueTime,\n-                    messageBatch.getMaxSizeInBytes(), link.getLinkName(), transactionContext)));\n-        });\n+        return getSendLink().flatMapMany(link -> createMessageBatch()\n+            .flatMapMany(messageBatch -> {\n+                int index = 0;\n+                for (ServiceBusMessage message : messages) {\n+                    ++index;\n+                    boolean added = messageBatch.tryAddMessage(message);\n+                    if (!added) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e2dc9279f7568447e238eb3768eb4a38be3607"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3933, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}