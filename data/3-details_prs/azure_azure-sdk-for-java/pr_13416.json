{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MTUyNzY5", "number": 13416, "title": "support multiple database for azure-spring-data-cosmos", "bodyText": "Support single cosmos account multiple databases config #microsoft/spring-data-cosmosdb#520 and #12713", "createdAt": "2020-07-22T14:24:22Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416", "merged": true, "mergeCommit": {"oid": "a7fd6f29d7bd31ac612e37536723af0489786064"}, "closed": true, "closedAt": "2020-07-23T06:42:15Z", "author": {"login": "zhoufenqin"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3f8BYAFqTQ1MzU5MzgwNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3og2YAFqTQ1Mzg0MjM1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNTkzODA3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#pullrequestreview-453593807", "createdAt": "2020-07-22T18:50:52Z", "commit": {"oid": "30d40a71e3eb69e3c7e5f74b203856d5941f8766"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODo1MDo1MlrOG1vyeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOToyMzoxMFrOG1w44w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxMDY4MQ==", "bodyText": "init -> initialize", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459010681", "createdAt": "2020-07-22T18:50:52Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/README.md", "diffHunk": "@@ -365,17 +388,21 @@ azure.cosmos.secondary.populateQueryMetrics=if-populate-query-metrics\n ```\n \n ### Define Entities and Repositories\n-The [Entity](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/cosmos/azure-spring-data-cosmos#create-repositories) definition is same as above.\n+The [Entity](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/cosmos/azure-spring-data-cosmos#define-an-entity)  and [Repository](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/cosmos/azure-spring-data-cosmos#create-repositories) definition is similar as above.\n You can put different database entities into different packages.\n \n ### Setup configuration\n The `@EnableReactiveCosmosRepositories` or `@EnableCosmosRepositories` support user-define the cosmos template, use `reactiveCosmosTemplateRef` or `cosmosTemplateRef` to config the name of the `ReactiveCosmosTemplate` or `CosmosTemplate` bean to be used with the repositories detected.\n-<!-- embedme src/samples/java/com/azure/cosmos/multidatasource/DatabaseConfiguration.java#L25-L76 -->\n+If you have multiple cosmos database accounts, you can define multiple `CosmosAsyncClient`. If the single cosmos account has multiple databases, you can use the same `CosmosAsyncClient` to init the cosmos template.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d40a71e3eb69e3c7e5f74b203856d5941f8766"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxNzUzMQ==", "bodyText": "We can make this inline.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return suffix;\n          \n          \n            \n                    return \";\" + USER_AGENT_SUFFIX;", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459017531", "createdAt": "2020-07-22T19:02:34Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/CosmosFactory.java", "diffHunk": "@@ -26,70 +21,73 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(CosmosFactory.class);\n \n-    private final CosmosConfig config;\n+    private final CosmosAsyncClient cosmosAsyncClient;\n \n-    private static final boolean IS_TELEMETRY_ALLOWED =\n-        PropertyLoader.isApplicationTelemetryAllowed();\n+    private final String databaseName;\n \n     private static final String USER_AGENT_SUFFIX =\n         Constants.USER_AGENT_SUFFIX + PropertyLoader.getProjectVersion();\n \n-    private String getUserAgentSuffix() {\n+    private static String getUserAgentSuffix() {\n         String suffix = \";\" + USER_AGENT_SUFFIX;\n-\n-        if (IS_TELEMETRY_ALLOWED || config.isAllowTelemetry()) {\n-            suffix += \";\" + MacAddress.getHashMac();\n-        }\n-\n         return suffix;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d40a71e3eb69e3c7e5f74b203856d5941f8766"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxNzgwNQ==", "bodyText": "Rename this method to getCosmosAsyncClient()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459017805", "createdAt": "2020-07-22T19:03:05Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/CosmosFactory.java", "diffHunk": "@@ -26,70 +21,73 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(CosmosFactory.class);\n \n-    private final CosmosConfig config;\n+    private final CosmosAsyncClient cosmosAsyncClient;\n \n-    private static final boolean IS_TELEMETRY_ALLOWED =\n-        PropertyLoader.isApplicationTelemetryAllowed();\n+    private final String databaseName;\n \n     private static final String USER_AGENT_SUFFIX =\n         Constants.USER_AGENT_SUFFIX + PropertyLoader.getProjectVersion();\n \n-    private String getUserAgentSuffix() {\n+    private static String getUserAgentSuffix() {\n         String suffix = \";\" + USER_AGENT_SUFFIX;\n-\n-        if (IS_TELEMETRY_ALLOWED || config.isAllowTelemetry()) {\n-            suffix += \";\" + MacAddress.getHashMac();\n-        }\n-\n         return suffix;\n     }\n \n     /**\n      * Validate config and initialization\n      *\n-     * @param cosmosConfig cosmosConfig\n+     * @param cosmosAsyncClient cosmosAsyncClient\n+     * @param databaseName databaseName\n      */\n-    public CosmosFactory(@NonNull CosmosConfig cosmosConfig) {\n-        validateConfig(cosmosConfig);\n+    public CosmosFactory(CosmosAsyncClient cosmosAsyncClient, String databaseName) {\n+        Assert.notNull(cosmosAsyncClient, \"cosmosAsyncClient must not be null!\");\n+        Assert.notNull(databaseName, \"databaseName must not be null!\");\n \n-        this.config = cosmosConfig;\n+        this.cosmosAsyncClient = cosmosAsyncClient;\n+        this.databaseName = databaseName;\n     }\n \n     /**\n      * To create a CosmosAsyncClient\n      *\n-     * @return CosmosClient\n+     * @return CosmosAsyncClient\n      */\n-    public CosmosAsyncClient getCosmosAsyncClient() {\n-        final CosmosClientBuilder cosmosClientBuilderFromConfig =\n-            getCosmosClientBuilderFromConfig(config);\n-        return cosmosClientBuilderFromConfig.buildAsyncClient();\n+    public CosmosAsyncClient getCosmosClient() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d40a71e3eb69e3c7e5f74b203856d5941f8766"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxODA4NA==", "bodyText": "Thanks for getting rid of this \ud83d\udc4d", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459018084", "createdAt": "2020-07-22T19:03:35Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/CosmosFactory.java", "diffHunk": "@@ -100,27 +98,4 @@ private String getUserAgentSuffixValue(CosmosClientBuilder cosmosClientBuilder)\n         }\n         return \"\";\n     }\n-\n-    private void validateConfig(@NonNull CosmosConfig config) {\n-        Assert.hasText(config.getDatabase(), \"cosmos database should have text!\");\n-    }\n-\n-    @PostConstruct\n-    private void sendTelemetry() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d40a71e3eb69e3c7e5f74b203856d5941f8766"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxODI0MQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459018241", "createdAt": "2020-07-22T19:03:52Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/common/PropertyLoader.java", "diffHunk": "@@ -19,8 +19,6 @@\n \n     private static final String APPLICATION_YML_FILE = \"/application.yml\";\n \n-    private static final String TELEMETRY_CONFIG_FILE = \"/telemetry.config\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d40a71e3eb69e3c7e5f74b203856d5941f8766"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxODI4Mw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459018283", "createdAt": "2020-07-22T19:03:58Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/common/PropertyLoader.java", "diffHunk": "@@ -33,35 +31,6 @@ public static String getProjectVersion() {\n         return getPropertyByName(\"project.version\", PROJECT_PROPERTY_FILE);\n     }\n \n-    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d40a71e3eb69e3c7e5f74b203856d5941f8766"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxODk3NA==", "bodyText": "I guess I missed this when rebranding, but we should rename this API to -> cosmosFactory()\nWe don't want cosmosDB", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459018974", "createdAt": "2020-07-22T19:05:09Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/config/AbstractCosmosConfiguration.java", "diffHunk": "@@ -26,12 +25,12 @@\n     /**\n      * Declare CosmosDbFactory bean.\n      *\n-     * @param config of cosmosDbFactory\n+     * @param cosmosAsyncClient of cosmosDbFactory\n      * @return CosmosDbFactory bean\n      */\n     @Bean\n-    public CosmosFactory cosmosDBFactory(CosmosConfig config) {\n-        return new CosmosFactory(config);\n+    public CosmosFactory cosmosDBFactory(CosmosAsyncClient cosmosAsyncClient) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d40a71e3eb69e3c7e5f74b203856d5941f8766"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxOTgxNw==", "bodyText": "We can make these two instance variables final", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459019817", "createdAt": "2020-07-22T19:06:40Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/config/CosmosClientConfig.java", "diffHunk": "@@ -0,0 +1,105 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.data.cosmos.config;\n+\n+import com.azure.cosmos.CosmosClientBuilder;\n+\n+import java.beans.ConstructorProperties;\n+\n+/**\n+ * Config properties of CosmosDB\n+ */\n+public class CosmosClientConfig {\n+\n+    private String database;\n+\n+    private CosmosClientBuilder cosmosClientBuilder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d40a71e3eb69e3c7e5f74b203856d5941f8766"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyMzg5NQ==", "bodyText": "We can keep these three instance variables and populate them in the constructor instead of getting them from CosmosFactory and CosmosConfig - that way, throughout CosmosTemplate we can just use these instance variables and not get them every time using the APIs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459023895", "createdAt": "2020-07-22T19:14:19Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/CosmosTemplate.java", "diffHunk": "@@ -58,34 +59,42 @@\n     private static final Logger LOGGER = LoggerFactory.getLogger(CosmosTemplate.class);\n \n     private final MappingCosmosConverter mappingCosmosConverter;\n-    private final String databaseName;\n-    private final ResponseDiagnosticsProcessor responseDiagnosticsProcessor;\n-    private final boolean enableQueryMetrics;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d40a71e3eb69e3c7e5f74b203856d5941f8766"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyNDcxMw==", "bodyText": "Same here, please keep the variables, and populate them in the constructor.\nAlso, I missed it in my earlier PR, but can you please rename isPopulateQueryMetrics -> enableQueryMetrics", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459024713", "createdAt": "2020-07-22T19:15:40Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java", "diffHunk": "@@ -46,35 +47,42 @@\n public class ReactiveCosmosTemplate implements ReactiveCosmosOperations, ApplicationContextAware {\n \n     private final MappingCosmosConverter mappingCosmosConverter;\n-    private final String databaseName;\n-\n+    private final CosmosFactory cosmosFactory;\n+    private final CosmosConfig cosmosConfig;\n     private final CosmosAsyncClient cosmosAsyncClient;\n-    private final ResponseDiagnosticsProcessor responseDiagnosticsProcessor;\n-    private final boolean isPopulateQueryMetrics;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d40a71e3eb69e3c7e5f74b203856d5941f8766"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyNDk1Mg==", "bodyText": "Rename -> CosmosDbFactory to CosmosFactory", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459024952", "createdAt": "2020-07-22T19:16:12Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java", "diffHunk": "@@ -46,35 +47,42 @@\n public class ReactiveCosmosTemplate implements ReactiveCosmosOperations, ApplicationContextAware {\n \n     private final MappingCosmosConverter mappingCosmosConverter;\n-    private final String databaseName;\n-\n+    private final CosmosFactory cosmosFactory;\n+    private final CosmosConfig cosmosConfig;\n     private final CosmosAsyncClient cosmosAsyncClient;\n-    private final ResponseDiagnosticsProcessor responseDiagnosticsProcessor;\n-    private final boolean isPopulateQueryMetrics;\n-\n     private final Function<Class<?>, CosmosEntityInformation<?, ?>> entityInfoCreator =\n         Memoizer.memoize(this::getCosmosEntityInformation);\n \n+    /**\n+     * Initialization\n+     *\n+     * @param client must not be {@literal null}\n+     * @param databaseName must not be {@literal null}\n+     * @param cosmosConfig must not be {@literal null}\n+     * @param mappingCosmosConverter must not be {@literal null}\n+     */\n+    public ReactiveCosmosTemplate(CosmosAsyncClient client, String databaseName,\n+                                  CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter) {\n+        this(new CosmosFactory(client, databaseName), cosmosConfig, mappingCosmosConverter);\n+    }\n+\n     /**\n      * Constructor\n      *\n      * @param cosmosFactory the cosmos db factory\n+     * @param cosmosConfig the cosmos config\n      * @param mappingCosmosConverter the mappingCosmosConverter\n-     * @param dbName database name\n      */\n     public ReactiveCosmosTemplate(CosmosFactory cosmosFactory,\n-                                  MappingCosmosConverter mappingCosmosConverter,\n-                                  String dbName) {\n+                                  CosmosConfig cosmosConfig,\n+                                  MappingCosmosConverter mappingCosmosConverter) {\n         Assert.notNull(cosmosFactory, \"CosmosDbFactory must not be null!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d40a71e3eb69e3c7e5f74b203856d5941f8766"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyNTEyMg==", "bodyText": "Rename -> CosmosDbFactory to CosmosFactory", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459025122", "createdAt": "2020-07-22T19:16:30Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/CosmosTemplate.java", "diffHunk": "@@ -58,34 +59,42 @@\n     private static final Logger LOGGER = LoggerFactory.getLogger(CosmosTemplate.class);\n \n     private final MappingCosmosConverter mappingCosmosConverter;\n-    private final String databaseName;\n-    private final ResponseDiagnosticsProcessor responseDiagnosticsProcessor;\n-    private final boolean enableQueryMetrics;\n-\n+    private final CosmosFactory cosmosFactory;\n+    private final CosmosConfig cosmosConfig;\n     private final CosmosAsyncClient cosmosAsyncClient;\n     private final Function<Class<?>, CosmosEntityInformation<?, ?>> entityInfoCreator =\n         Memoizer.memoize(this::getCosmosEntityInformation);\n \n+    /**\n+     * Initialization\n+     *\n+     * @param client must not be {@literal null}\n+     * @param databaseName must not be {@literal null}\n+     * @param cosmosConfig must not be {@literal null}\n+     * @param mappingCosmosConverter must not be {@literal null}\n+     */\n+    public CosmosTemplate(CosmosAsyncClient client, String databaseName,\n+                          CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter) {\n+        this(new CosmosFactory(client, databaseName), cosmosConfig, mappingCosmosConverter);\n+    }\n+\n     /**\n      * Initialization\n      *\n      * @param cosmosFactory must not be {@literal null}\n+     * @param cosmosConfig must not be {@literal null}\n      * @param mappingCosmosConverter must not be {@literal null}\n-     * @param dbName must not be {@literal null}\n      */\n     public CosmosTemplate(CosmosFactory cosmosFactory,\n-                          MappingCosmosConverter mappingCosmosConverter,\n-                          String dbName) {\n+                          CosmosConfig cosmosConfig,\n+                          MappingCosmosConverter mappingCosmosConverter) {\n         Assert.notNull(cosmosFactory, \"CosmosDbFactory must not be null!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d40a71e3eb69e3c7e5f74b203856d5941f8766"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyNTYyMw==", "bodyText": "We should get this import from springframework\nPlease use this and everywhere else -> import org.springframework.lang.Nullable;\nSpring should not take a dependency on micrometer module as it is not required.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459025623", "createdAt": "2020-07-22T19:17:31Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/samples/java/com/azure/cosmos/multidatasource/DatabaseConfiguration.java", "diffHunk": "@@ -2,14 +2,22 @@\n // Licensed under the MIT License.\n package com.azure.cosmos.multidatasource;\n \n+import com.azure.cosmos.CosmosAsyncClient;\n import com.azure.cosmos.CosmosClientBuilder;\n import com.azure.cosmos.CosmosProperties;\n import com.azure.spring.data.cosmos.CosmosFactory;\n import com.azure.spring.data.cosmos.config.AbstractCosmosConfiguration;\n+import com.azure.spring.data.cosmos.config.CosmosClientConfig;\n import com.azure.spring.data.cosmos.config.CosmosConfig;\n+import com.azure.spring.data.cosmos.core.CosmosTemplate;\n import com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate;\n+import com.azure.spring.data.cosmos.core.ResponseDiagnostics;\n+import com.azure.spring.data.cosmos.core.ResponseDiagnosticsProcessor;\n import com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter;\n import com.azure.spring.data.cosmos.repository.config.EnableReactiveCosmosRepositories;\n+import io.micrometer.core.lang.Nullable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d40a71e3eb69e3c7e5f74b203856d5941f8766"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyODMxMA==", "bodyText": "There is also one more place where this is used -> AppConfiguration.java - please update that one as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459028310", "createdAt": "2020-07-22T19:22:21Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/samples/java/com/azure/cosmos/multidatasource/DatabaseConfiguration.java", "diffHunk": "@@ -2,14 +2,22 @@\n // Licensed under the MIT License.\n package com.azure.cosmos.multidatasource;\n \n+import com.azure.cosmos.CosmosAsyncClient;\n import com.azure.cosmos.CosmosClientBuilder;\n import com.azure.cosmos.CosmosProperties;\n import com.azure.spring.data.cosmos.CosmosFactory;\n import com.azure.spring.data.cosmos.config.AbstractCosmosConfiguration;\n+import com.azure.spring.data.cosmos.config.CosmosClientConfig;\n import com.azure.spring.data.cosmos.config.CosmosConfig;\n+import com.azure.spring.data.cosmos.core.CosmosTemplate;\n import com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate;\n+import com.azure.spring.data.cosmos.core.ResponseDiagnostics;\n+import com.azure.spring.data.cosmos.core.ResponseDiagnosticsProcessor;\n import com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter;\n import com.azure.spring.data.cosmos.repository.config.EnableReactiveCosmosRepositories;\n+import io.micrometer.core.lang.Nullable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyNTYyMw=="}, "originalCommit": {"oid": "30d40a71e3eb69e3c7e5f74b203856d5941f8766"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyODcwNw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459028707", "createdAt": "2020-07-22T19:23:10Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/test/resources/application.properties", "diffHunk": "@@ -3,14 +3,10 @@ cosmos.key=${ACCOUNT_KEY}\n cosmos.secondaryKey=${SECONDARY_ACCOUNT_KEY}\n \n dynamic.collection.name=spel-property-collection\n-# Performance test configurations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d40a71e3eb69e3c7e5f74b203856d5941f8766"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "30d40a71e3eb69e3c7e5f74b203856d5941f8766", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/30d40a71e3eb69e3c7e5f74b203856d5941f8766", "committedDate": "2020-07-22T14:19:20Z", "message": "support multiple database for azure-spring-data-cosmos"}, "afterCommit": {"oid": "2c88980cd29b7146e677108ea3409d270e103643", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2c88980cd29b7146e677108ea3409d270e103643", "committedDate": "2020-07-23T02:05:12Z", "message": "support multiple database for azure-spring-data-cosmos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8e03b066e49d8335b9900ef297e344cfbdf6492", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a8e03b066e49d8335b9900ef297e344cfbdf6492", "committedDate": "2020-07-23T05:06:00Z", "message": "support multiple database for azure-spring-data-cosmos"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c88980cd29b7146e677108ea3409d270e103643", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2c88980cd29b7146e677108ea3409d270e103643", "committedDate": "2020-07-23T02:05:12Z", "message": "support multiple database for azure-spring-data-cosmos"}, "afterCommit": {"oid": "a8e03b066e49d8335b9900ef297e344cfbdf6492", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a8e03b066e49d8335b9900ef297e344cfbdf6492", "committedDate": "2020-07-23T05:06:00Z", "message": "support multiple database for azure-spring-data-cosmos"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzODQyMzUx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#pullrequestreview-453842351", "createdAt": "2020-07-23T05:24:00Z", "commit": {"oid": "a8e03b066e49d8335b9900ef297e344cfbdf6492"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1066, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}