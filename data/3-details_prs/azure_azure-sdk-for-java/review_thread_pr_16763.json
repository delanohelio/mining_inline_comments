{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MDUyMDE1", "number": 16763, "reviewThreads": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjowODo0NFrOEy41vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwODowMzo0MFrOE6cQkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNzk1NTE4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkItemRequestOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjowODo0NFrOHpx7EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMzozNzo1MlrOHsfTVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3MTYwMA==", "bodyText": "4.8.0 is out", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r513571600", "createdAt": "2020-10-28T16:08:44Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkItemRequestOptions.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.RequestOptions;\n+import com.azure.cosmos.util.Beta;\n+\n+/**\n+ * Encapsulates options that can be specified for an operation used in Bulk execution. It can be passed while\n+ * creating bulk request using {@link BulkProcessingUtil}.\n+ */\n+@Beta(Beta.SinceVersion.V4_7_0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxMjI0Nw==", "bodyText": "Ack. Changed. Thanks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r516412247", "createdAt": "2020-11-03T03:37:52Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkItemRequestOptions.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.RequestOptions;\n+import com.azure.cosmos.util.Beta;\n+\n+/**\n+ * Encapsulates options that can be specified for an operation used in Bulk execution. It can be passed while\n+ * creating bulk request using {@link BulkProcessingUtil}.\n+ */\n+@Beta(Beta.SinceVersion.V4_7_0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3MTYwMA=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNzk2NTg4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjoxMDo1NFrOHpyCCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMzozODoxOVrOHsfTpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3MzM4Ng==", "bodyText": "I don't see the api for CosmosContianer (sync version). could you please add that too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r513573386", "createdAt": "2020-10-28T16:10:54Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -585,6 +586,71 @@ public String getId() {\n             });\n     }\n \n+    /**\n+     * Executes flux of operations in Bulk.\n+     *\n+     * @param <TContext> The context for the bulk processing.\n+     *\n+     * @param operations Flux of operation which will be executed by this container.\n+     *\n+     * @return A Flux of {@link CosmosBulkOperationRequestAndResponse} which contains operation and it's response or exception.\n+     * <p>\n+     *     To create a operation which can be executed here, use {@link BulkProcessingUtil}. For eg.\n+     *     for a upsert operation use {@link BulkProcessingUtil#getBulkUpsertItemOperation(Object, PartitionKey)}\n+     * </p>\n+     * <p>\n+     *     We can get the corresponding operation using {@link CosmosBulkOperationRequestAndResponse#getOperation()} and\n+     *     it's response using {@link CosmosBulkOperationRequestAndResponse#getResponse()}. If the operation was executed\n+     *     successfully, the value returned by {@link CosmosBulkItemResponse#isSuccessStatusCode()} will be true. To get\n+     *     actual status use {@link CosmosBulkItemResponse#getStatusCode()}.\n+     * </p>\n+     * To check if the operation had any exception, use {@link CosmosBulkOperationRequestAndResponse#getThrowable()} to\n+     * get the exception.\n+     */\n+    @Beta(Beta.SinceVersion.V4_7_0)\n+    public <TContext> Flux<CosmosBulkOperationRequestAndResponse<TContext>> processBulkOperations(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY0OTU0Nw==", "bodyText": "Yeah I meant to ask you, should be take a list of operations there(without flux) and pass it to async one?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r513649547", "createdAt": "2020-10-28T17:54:20Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -585,6 +586,71 @@ public String getId() {\n             });\n     }\n \n+    /**\n+     * Executes flux of operations in Bulk.\n+     *\n+     * @param <TContext> The context for the bulk processing.\n+     *\n+     * @param operations Flux of operation which will be executed by this container.\n+     *\n+     * @return A Flux of {@link CosmosBulkOperationRequestAndResponse} which contains operation and it's response or exception.\n+     * <p>\n+     *     To create a operation which can be executed here, use {@link BulkProcessingUtil}. For eg.\n+     *     for a upsert operation use {@link BulkProcessingUtil#getBulkUpsertItemOperation(Object, PartitionKey)}\n+     * </p>\n+     * <p>\n+     *     We can get the corresponding operation using {@link CosmosBulkOperationRequestAndResponse#getOperation()} and\n+     *     it's response using {@link CosmosBulkOperationRequestAndResponse#getResponse()}. If the operation was executed\n+     *     successfully, the value returned by {@link CosmosBulkItemResponse#isSuccessStatusCode()} will be true. To get\n+     *     actual status use {@link CosmosBulkItemResponse#getStatusCode()}.\n+     * </p>\n+     * To check if the operation had any exception, use {@link CosmosBulkOperationRequestAndResponse#getThrowable()} to\n+     * get the exception.\n+     */\n+    @Beta(Beta.SinceVersion.V4_7_0)\n+    public <TContext> Flux<CosmosBulkOperationRequestAndResponse<TContext>> processBulkOperations(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3MzM4Ng=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxMjMyNQ==", "bodyText": "Have added sync api which takes list of operation and return list of responses.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r516412325", "createdAt": "2020-11-03T03:38:19Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -585,6 +586,71 @@ public String getId() {\n             });\n     }\n \n+    /**\n+     * Executes flux of operations in Bulk.\n+     *\n+     * @param <TContext> The context for the bulk processing.\n+     *\n+     * @param operations Flux of operation which will be executed by this container.\n+     *\n+     * @return A Flux of {@link CosmosBulkOperationRequestAndResponse} which contains operation and it's response or exception.\n+     * <p>\n+     *     To create a operation which can be executed here, use {@link BulkProcessingUtil}. For eg.\n+     *     for a upsert operation use {@link BulkProcessingUtil#getBulkUpsertItemOperation(Object, PartitionKey)}\n+     * </p>\n+     * <p>\n+     *     We can get the corresponding operation using {@link CosmosBulkOperationRequestAndResponse#getOperation()} and\n+     *     it's response using {@link CosmosBulkOperationRequestAndResponse#getResponse()}. If the operation was executed\n+     *     successfully, the value returned by {@link CosmosBulkItemResponse#isSuccessStatusCode()} will be true. To get\n+     *     actual status use {@link CosmosBulkItemResponse#getStatusCode()}.\n+     * </p>\n+     * To check if the operation had any exception, use {@link CosmosBulkOperationRequestAndResponse#getThrowable()} to\n+     * get the exception.\n+     */\n+    @Beta(Beta.SinceVersion.V4_7_0)\n+    public <TContext> Flux<CosmosBulkOperationRequestAndResponse<TContext>> processBulkOperations(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3MzM4Ng=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNzk4NjE4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosBulkTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjoxNToxNlrOHpyO5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMzozODoyOVrOHsfTxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3NjY3Nw==", "bodyText": "please eat the \"Assertions\" into static import similar to other tests. here and elsewhere.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r513576677", "createdAt": "2020-10-28T16:15:16Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosBulkTest.java", "diffHunk": "@@ -0,0 +1,401 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.models.PartitionKey;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import org.assertj.core.api.Assertions;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class CosmosBulkTest extends BatchTestBase {\n+\n+    private CosmosAsyncClient bulkClient;\n+    private CosmosAsyncContainer bulkAsyncContainer;\n+\n+    @Factory(dataProvider = \"clientBuildersWithDirectSession\")\n+    public CosmosBulkTest(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }\n+\n+    @BeforeClass(groups = {\"simple\"}, timeOut = SETUP_TIMEOUT)\n+    public void before_CosmosBulkTest() {\n+        assertThat(this.bulkClient).isNull();\n+        this.bulkClient = getClientBuilder().buildAsyncClient();\n+        bulkAsyncContainer = getSharedMultiPartitionCosmosContainer(this.bulkClient);\n+    }\n+\n+    @AfterClass(groups = {\"simple\"}, timeOut = SHUTDOWN_TIMEOUT, alwaysRun = true)\n+    public void afterClass() {\n+        safeCloseAsync(this.bulkClient);\n+    }\n+\n+    @Test(groups = {\"simple\"}, timeOut = TIMEOUT)\n+    public void createItem_withBulk() {\n+        int totalRequest = getTotalRequest();\n+\n+        Flux<CosmosItemOperation> cosmosItemOperationFlux = Flux.merge(\n+            Flux.range(0, totalRequest).map(i -> {\n+                String partitionKey = UUID.randomUUID().toString();\n+                TestDoc testDoc = this.populateTestDoc(partitionKey);\n+\n+                return BulkProcessingUtil.getBulkCreateItemOperation(testDoc, new PartitionKey(partitionKey));\n+            }),\n+            Flux.range(0, totalRequest).map(i -> {\n+                String partitionKey = UUID.randomUUID().toString();\n+                EventDoc eventDoc = new EventDoc(UUID.randomUUID().toString(), 2, 4, \"type1\", partitionKey);\n+\n+                return BulkProcessingUtil.getBulkCreateItemOperation(eventDoc, new PartitionKey(partitionKey));\n+            }));\n+\n+        BulkProcessingOptions<CosmosBulkTest> bulkProcessingOptions = new BulkProcessingOptions<>();\n+        bulkProcessingOptions.setMaxMicroBatchSize(100);\n+        bulkProcessingOptions.setMaxMicroBatchConcurrency(5);\n+\n+        Flux<CosmosBulkOperationRequestAndResponse<CosmosBulkTest>> responseFlux = bulkAsyncContainer\n+            .processBulkOperations(cosmosItemOperationFlux, bulkProcessingOptions);\n+\n+        AtomicInteger processedDoc = new AtomicInteger(0);\n+        responseFlux\n+            .flatMap((CosmosBulkOperationRequestAndResponse<CosmosBulkTest> cosmosBulkOperationRequestAndResponse) -> {\n+\n+                processedDoc.incrementAndGet();\n+\n+                CosmosBulkItemResponse cosmosBulkItemResponse = cosmosBulkOperationRequestAndResponse.getResponse();\n+                Assertions.assertThat(cosmosBulkItemResponse.getStatusCode()).isEqualTo(HttpResponseStatus.CREATED.code());\n+                Assertions.assertThat(cosmosBulkItemResponse.getRequestCharge()).isGreaterThan(0);\n+                Assertions.assertThat(cosmosBulkItemResponse.getCosmosDiagnostics().toString()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getSessionToken()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getActivityId()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getRequestCharge()).isNotNull();\n+\n+                return Mono.just(cosmosBulkItemResponse);\n+            }).blockLast();\n+\n+        Assertions.assertThat(processedDoc.get()).isEqualTo(totalRequest * 2);\n+    }\n+\n+    @Test(groups = {\"simple\"}, timeOut = TIMEOUT)\n+    public void upsertItem_withbulk() {\n+        int totalRequest = getTotalRequest();\n+\n+        List<CosmosItemOperation> cosmosItemOperations = new ArrayList<>();\n+\n+        for (int i = 0; i < totalRequest; i++) {\n+            String partitionKey = UUID.randomUUID().toString();\n+\n+            // use i as a identifier for re check.\n+            TestDoc testDoc = this.populateTestDoc(partitionKey, i, 20);\n+\n+            cosmosItemOperations.add(BulkProcessingUtil.getBulkUpsertItemOperation(testDoc, new PartitionKey(partitionKey)));\n+        }\n+\n+        BulkProcessingOptions<Object> bulkProcessingOptions = new BulkProcessingOptions<>();\n+        bulkProcessingOptions.setMaxMicroBatchSize(100);\n+        bulkProcessingOptions.setMaxMicroBatchConcurrency(1);\n+\n+        Flux<CosmosBulkOperationRequestAndResponse<Object>> responseFlux = bulkAsyncContainer\n+            .processBulkOperations(Flux.fromIterable(cosmosItemOperations));\n+\n+        AtomicInteger processedDoc = new AtomicInteger(0);\n+        responseFlux\n+            .flatMap((CosmosBulkOperationRequestAndResponse<Object> cosmosBulkOperationRequestAndResponse) -> {\n+\n+                processedDoc.incrementAndGet();\n+\n+                CosmosBulkItemResponse cosmosBulkItemResponse = cosmosBulkOperationRequestAndResponse.getResponse();\n+                Assertions.assertThat(cosmosBulkItemResponse.getStatusCode()).isEqualTo(HttpResponseStatus.CREATED.code());\n+                Assertions.assertThat(cosmosBulkItemResponse.getRequestCharge()).isGreaterThan(0);\n+                Assertions.assertThat(cosmosBulkItemResponse.getCosmosDiagnostics().toString()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getSessionToken()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getActivityId()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getRequestCharge()).isNotNull();\n+\n+                // Using cost as list index like we assigned\n+                TestDoc testDoc = cosmosBulkItemResponse.getItem(TestDoc.class);\n+                Assertions.assertThat(cosmosBulkOperationRequestAndResponse.getOperation()).isEqualTo(cosmosItemOperations.get(testDoc.getCost()));\n+                Assertions.assertThat(testDoc).isEqualTo(cosmosBulkOperationRequestAndResponse.getOperation().getItem());\n+                Assertions.assertThat(testDoc).isEqualTo(cosmosItemOperations.get(testDoc.getCost()).getItem());\n+\n+                return Mono.just(cosmosBulkItemResponse);\n+            }).blockLast();\n+\n+        Assertions.assertThat(processedDoc.get()).isEqualTo(totalRequest);\n+    }\n+\n+    @Test(groups = {\"simple\"}, timeOut = TIMEOUT)\n+    public void deleteItem_withBulk() {\n+        int totalRequest = getTotalRequest();\n+\n+        List<CosmosItemOperation> cosmosItemOperations = new ArrayList<>();\n+\n+        for (int i = 0; i < totalRequest; i++) {\n+            String partitionKey = UUID.randomUUID().toString();\n+\n+            // use i as a identifier for re check.\n+            TestDoc testDoc = this.populateTestDoc(partitionKey, i, 20);\n+\n+            cosmosItemOperations.add(BulkProcessingUtil.getBulkCreateItemOperation(testDoc, new PartitionKey(partitionKey)));\n+        }\n+        createItemsAndVerify(cosmosItemOperations);\n+\n+        Flux<CosmosItemOperation> deleteCosmosItemOperationFlux =\n+            Flux.fromIterable(cosmosItemOperations).map((CosmosItemOperation cosmosItemOperation) -> {\n+                TestDoc testDoc = cosmosItemOperation.getItem();\n+                return BulkProcessingUtil.getBulkDeleteItemOperation(testDoc.getId(), cosmosItemOperation.getPartitionKeyValue());\n+            });\n+\n+        BulkProcessingOptions<TestDoc> bulkProcessingOptions = new BulkProcessingOptions<>();\n+        bulkProcessingOptions.setMaxMicroBatchSize(30);\n+        bulkProcessingOptions.setMaxMicroBatchConcurrency(1);\n+\n+        AtomicInteger processedDoc = new AtomicInteger(0);\n+        bulkAsyncContainer\n+            .processBulkOperations(deleteCosmosItemOperationFlux, bulkProcessingOptions)\n+            .flatMap((CosmosBulkOperationRequestAndResponse<TestDoc> cosmosBulkOperationRequestAndResponse) -> {\n+\n+                processedDoc.incrementAndGet();\n+\n+                CosmosBulkItemResponse cosmosBulkItemResponse = cosmosBulkOperationRequestAndResponse.getResponse();\n+                Assertions.assertThat(cosmosBulkItemResponse.getStatusCode()).isEqualTo(HttpResponseStatus.NO_CONTENT.code());\n+                Assertions.assertThat(cosmosBulkItemResponse.getRequestCharge()).isGreaterThan(0);\n+                Assertions.assertThat(cosmosBulkItemResponse.getCosmosDiagnostics().toString()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getSessionToken()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getActivityId()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getRequestCharge()).isNotNull();\n+\n+                return Mono.just(cosmosBulkItemResponse);\n+            }).blockLast();\n+\n+        Assertions.assertThat(processedDoc.get()).isEqualTo(totalRequest);\n+    }\n+\n+    @Test(groups = {\"simple\"}, timeOut = TIMEOUT)\n+    public void readItem_withBulk() {\n+        int totalRequest = getTotalRequest();\n+\n+        List<CosmosItemOperation> cosmosItemOperations = new ArrayList<>();\n+\n+        for (int i = 0; i < totalRequest; i++) {\n+            String partitionKey = UUID.randomUUID().toString();\n+\n+            // use i as a identifier for re check.\n+            TestDoc testDoc = this.populateTestDoc(partitionKey, i, 20);\n+\n+            cosmosItemOperations.add(BulkProcessingUtil.getBulkUpsertItemOperation(testDoc, new PartitionKey(partitionKey)));\n+        }\n+\n+        createItemsAndVerify(cosmosItemOperations);\n+\n+        Flux<CosmosItemOperation> readCosmosItemOperationFlux =\n+            Flux.fromIterable(cosmosItemOperations).map((CosmosItemOperation cosmosItemOperation) -> {\n+                TestDoc testDoc = cosmosItemOperation.getItem();\n+                return BulkProcessingUtil.getBulkReadItemOperation(testDoc.getId(), cosmosItemOperation.getPartitionKeyValue());\n+            });\n+\n+        BulkProcessingOptions<Object> bulkProcessingOptions = new BulkProcessingOptions<>(Object.class);\n+        bulkProcessingOptions.setMaxMicroBatchSize(30);\n+        bulkProcessingOptions.setMaxMicroBatchConcurrency(5);\n+\n+        AtomicInteger processedDoc = new AtomicInteger(0);\n+        bulkAsyncContainer\n+            .processBulkOperations(readCosmosItemOperationFlux, bulkProcessingOptions)\n+            .flatMap((CosmosBulkOperationRequestAndResponse<Object> cosmosBulkOperationRequestAndResponse) -> {\n+\n+                processedDoc.incrementAndGet();\n+\n+                CosmosBulkItemResponse cosmosBulkItemResponse = cosmosBulkOperationRequestAndResponse.getResponse();\n+                Assertions.assertThat(cosmosBulkItemResponse.getStatusCode()).isEqualTo(HttpResponseStatus.OK.code());\n+                Assertions.assertThat(cosmosBulkItemResponse.getRequestCharge()).isGreaterThan(0);\n+                Assertions.assertThat(cosmosBulkItemResponse.getCosmosDiagnostics().toString()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getSessionToken()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getActivityId()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getRequestCharge()).isNotNull();\n+\n+                // Using cost as list index like we assigned\n+                TestDoc testDoc = cosmosBulkItemResponse.getItem(TestDoc.class);\n+                Assertions.assertThat(testDoc).isEqualTo(cosmosItemOperations.get(testDoc.getCost()).getItem());\n+\n+                return Mono.just(cosmosBulkItemResponse);\n+            }).blockLast();\n+\n+        Assertions.assertThat(processedDoc.get()).isEqualTo(totalRequest);\n+    }\n+\n+    @Test(groups = {\"simple\"}, timeOut = TIMEOUT)\n+    public void readItemMultipleTimes_withBulk() {\n+        int totalRequest = getTotalRequest();\n+\n+        List<CosmosItemOperation> cosmosItemOperations = new ArrayList<>();\n+\n+        for (int i = 0; i < totalRequest; i++) {\n+            String partitionKey = UUID.randomUUID().toString();\n+\n+            // use i as a identifier for re check.\n+            TestDoc testDoc = this.populateTestDoc(partitionKey, i, 20);\n+\n+            cosmosItemOperations.add(BulkProcessingUtil.getBulkUpsertItemOperation(testDoc, new PartitionKey(partitionKey)));\n+        }\n+\n+        createItemsAndVerify(cosmosItemOperations);\n+\n+        Flux<CosmosItemOperation> readCosmosItemOperationFlux =\n+            Flux.fromIterable(cosmosItemOperations).map((CosmosItemOperation cosmosItemOperation) -> {\n+                TestDoc testDoc = cosmosItemOperation.getItem();\n+                return BulkProcessingUtil.getBulkReadItemOperation(testDoc.getId(), cosmosItemOperation.getPartitionKeyValue());\n+            });\n+\n+        BulkProcessingOptions<Object> bulkProcessingOptions = new BulkProcessingOptions<>(Object.class);\n+        bulkProcessingOptions.setMaxMicroBatchSize(30);\n+        bulkProcessingOptions.setMaxMicroBatchConcurrency(5);\n+\n+        HashSet<TestDoc> distinctDocs = new HashSet<>();\n+        AtomicInteger processedDoc = new AtomicInteger(0);\n+\n+        Flux<CosmosBulkOperationRequestAndResponse<Object>> readResponseFlux = bulkAsyncContainer\n+            .processBulkOperations(readCosmosItemOperationFlux, bulkProcessingOptions)\n+            .flatMap((CosmosBulkOperationRequestAndResponse<Object> cosmosBulkOperationRequestAndResponse) -> {\n+\n+                processedDoc.incrementAndGet();\n+\n+                CosmosBulkItemResponse cosmosBulkItemResponse = cosmosBulkOperationRequestAndResponse.getResponse();\n+                Assertions.assertThat(cosmosBulkItemResponse.getStatusCode()).isEqualTo(HttpResponseStatus.OK.code());\n+                Assertions.assertThat(cosmosBulkItemResponse.getRequestCharge()).isGreaterThan(0);\n+                Assertions.assertThat(cosmosBulkItemResponse.getCosmosDiagnostics().toString()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getSessionToken()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getActivityId()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getRequestCharge()).isNotNull();\n+\n+                // Using cost as list index like we assigned\n+                TestDoc testDoc = cosmosBulkItemResponse.getItem(TestDoc.class);\n+                distinctDocs.add(testDoc);\n+                Assertions.assertThat(testDoc).isEqualTo(cosmosItemOperations.get(testDoc.getCost()).getItem());\n+\n+                return Mono.just(cosmosBulkOperationRequestAndResponse);\n+            });\n+\n+        // Subscribe first time\n+        readResponseFlux\n+            .blockLast();\n+\n+        Assertions.assertThat(processedDoc.get()).isEqualTo(totalRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 295}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxMjM1Ng==", "bodyText": "Ack. Done. Thanks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r516412356", "createdAt": "2020-11-03T03:38:29Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosBulkTest.java", "diffHunk": "@@ -0,0 +1,401 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.models.PartitionKey;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import org.assertj.core.api.Assertions;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class CosmosBulkTest extends BatchTestBase {\n+\n+    private CosmosAsyncClient bulkClient;\n+    private CosmosAsyncContainer bulkAsyncContainer;\n+\n+    @Factory(dataProvider = \"clientBuildersWithDirectSession\")\n+    public CosmosBulkTest(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }\n+\n+    @BeforeClass(groups = {\"simple\"}, timeOut = SETUP_TIMEOUT)\n+    public void before_CosmosBulkTest() {\n+        assertThat(this.bulkClient).isNull();\n+        this.bulkClient = getClientBuilder().buildAsyncClient();\n+        bulkAsyncContainer = getSharedMultiPartitionCosmosContainer(this.bulkClient);\n+    }\n+\n+    @AfterClass(groups = {\"simple\"}, timeOut = SHUTDOWN_TIMEOUT, alwaysRun = true)\n+    public void afterClass() {\n+        safeCloseAsync(this.bulkClient);\n+    }\n+\n+    @Test(groups = {\"simple\"}, timeOut = TIMEOUT)\n+    public void createItem_withBulk() {\n+        int totalRequest = getTotalRequest();\n+\n+        Flux<CosmosItemOperation> cosmosItemOperationFlux = Flux.merge(\n+            Flux.range(0, totalRequest).map(i -> {\n+                String partitionKey = UUID.randomUUID().toString();\n+                TestDoc testDoc = this.populateTestDoc(partitionKey);\n+\n+                return BulkProcessingUtil.getBulkCreateItemOperation(testDoc, new PartitionKey(partitionKey));\n+            }),\n+            Flux.range(0, totalRequest).map(i -> {\n+                String partitionKey = UUID.randomUUID().toString();\n+                EventDoc eventDoc = new EventDoc(UUID.randomUUID().toString(), 2, 4, \"type1\", partitionKey);\n+\n+                return BulkProcessingUtil.getBulkCreateItemOperation(eventDoc, new PartitionKey(partitionKey));\n+            }));\n+\n+        BulkProcessingOptions<CosmosBulkTest> bulkProcessingOptions = new BulkProcessingOptions<>();\n+        bulkProcessingOptions.setMaxMicroBatchSize(100);\n+        bulkProcessingOptions.setMaxMicroBatchConcurrency(5);\n+\n+        Flux<CosmosBulkOperationRequestAndResponse<CosmosBulkTest>> responseFlux = bulkAsyncContainer\n+            .processBulkOperations(cosmosItemOperationFlux, bulkProcessingOptions);\n+\n+        AtomicInteger processedDoc = new AtomicInteger(0);\n+        responseFlux\n+            .flatMap((CosmosBulkOperationRequestAndResponse<CosmosBulkTest> cosmosBulkOperationRequestAndResponse) -> {\n+\n+                processedDoc.incrementAndGet();\n+\n+                CosmosBulkItemResponse cosmosBulkItemResponse = cosmosBulkOperationRequestAndResponse.getResponse();\n+                Assertions.assertThat(cosmosBulkItemResponse.getStatusCode()).isEqualTo(HttpResponseStatus.CREATED.code());\n+                Assertions.assertThat(cosmosBulkItemResponse.getRequestCharge()).isGreaterThan(0);\n+                Assertions.assertThat(cosmosBulkItemResponse.getCosmosDiagnostics().toString()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getSessionToken()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getActivityId()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getRequestCharge()).isNotNull();\n+\n+                return Mono.just(cosmosBulkItemResponse);\n+            }).blockLast();\n+\n+        Assertions.assertThat(processedDoc.get()).isEqualTo(totalRequest * 2);\n+    }\n+\n+    @Test(groups = {\"simple\"}, timeOut = TIMEOUT)\n+    public void upsertItem_withbulk() {\n+        int totalRequest = getTotalRequest();\n+\n+        List<CosmosItemOperation> cosmosItemOperations = new ArrayList<>();\n+\n+        for (int i = 0; i < totalRequest; i++) {\n+            String partitionKey = UUID.randomUUID().toString();\n+\n+            // use i as a identifier for re check.\n+            TestDoc testDoc = this.populateTestDoc(partitionKey, i, 20);\n+\n+            cosmosItemOperations.add(BulkProcessingUtil.getBulkUpsertItemOperation(testDoc, new PartitionKey(partitionKey)));\n+        }\n+\n+        BulkProcessingOptions<Object> bulkProcessingOptions = new BulkProcessingOptions<>();\n+        bulkProcessingOptions.setMaxMicroBatchSize(100);\n+        bulkProcessingOptions.setMaxMicroBatchConcurrency(1);\n+\n+        Flux<CosmosBulkOperationRequestAndResponse<Object>> responseFlux = bulkAsyncContainer\n+            .processBulkOperations(Flux.fromIterable(cosmosItemOperations));\n+\n+        AtomicInteger processedDoc = new AtomicInteger(0);\n+        responseFlux\n+            .flatMap((CosmosBulkOperationRequestAndResponse<Object> cosmosBulkOperationRequestAndResponse) -> {\n+\n+                processedDoc.incrementAndGet();\n+\n+                CosmosBulkItemResponse cosmosBulkItemResponse = cosmosBulkOperationRequestAndResponse.getResponse();\n+                Assertions.assertThat(cosmosBulkItemResponse.getStatusCode()).isEqualTo(HttpResponseStatus.CREATED.code());\n+                Assertions.assertThat(cosmosBulkItemResponse.getRequestCharge()).isGreaterThan(0);\n+                Assertions.assertThat(cosmosBulkItemResponse.getCosmosDiagnostics().toString()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getSessionToken()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getActivityId()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getRequestCharge()).isNotNull();\n+\n+                // Using cost as list index like we assigned\n+                TestDoc testDoc = cosmosBulkItemResponse.getItem(TestDoc.class);\n+                Assertions.assertThat(cosmosBulkOperationRequestAndResponse.getOperation()).isEqualTo(cosmosItemOperations.get(testDoc.getCost()));\n+                Assertions.assertThat(testDoc).isEqualTo(cosmosBulkOperationRequestAndResponse.getOperation().getItem());\n+                Assertions.assertThat(testDoc).isEqualTo(cosmosItemOperations.get(testDoc.getCost()).getItem());\n+\n+                return Mono.just(cosmosBulkItemResponse);\n+            }).blockLast();\n+\n+        Assertions.assertThat(processedDoc.get()).isEqualTo(totalRequest);\n+    }\n+\n+    @Test(groups = {\"simple\"}, timeOut = TIMEOUT)\n+    public void deleteItem_withBulk() {\n+        int totalRequest = getTotalRequest();\n+\n+        List<CosmosItemOperation> cosmosItemOperations = new ArrayList<>();\n+\n+        for (int i = 0; i < totalRequest; i++) {\n+            String partitionKey = UUID.randomUUID().toString();\n+\n+            // use i as a identifier for re check.\n+            TestDoc testDoc = this.populateTestDoc(partitionKey, i, 20);\n+\n+            cosmosItemOperations.add(BulkProcessingUtil.getBulkCreateItemOperation(testDoc, new PartitionKey(partitionKey)));\n+        }\n+        createItemsAndVerify(cosmosItemOperations);\n+\n+        Flux<CosmosItemOperation> deleteCosmosItemOperationFlux =\n+            Flux.fromIterable(cosmosItemOperations).map((CosmosItemOperation cosmosItemOperation) -> {\n+                TestDoc testDoc = cosmosItemOperation.getItem();\n+                return BulkProcessingUtil.getBulkDeleteItemOperation(testDoc.getId(), cosmosItemOperation.getPartitionKeyValue());\n+            });\n+\n+        BulkProcessingOptions<TestDoc> bulkProcessingOptions = new BulkProcessingOptions<>();\n+        bulkProcessingOptions.setMaxMicroBatchSize(30);\n+        bulkProcessingOptions.setMaxMicroBatchConcurrency(1);\n+\n+        AtomicInteger processedDoc = new AtomicInteger(0);\n+        bulkAsyncContainer\n+            .processBulkOperations(deleteCosmosItemOperationFlux, bulkProcessingOptions)\n+            .flatMap((CosmosBulkOperationRequestAndResponse<TestDoc> cosmosBulkOperationRequestAndResponse) -> {\n+\n+                processedDoc.incrementAndGet();\n+\n+                CosmosBulkItemResponse cosmosBulkItemResponse = cosmosBulkOperationRequestAndResponse.getResponse();\n+                Assertions.assertThat(cosmosBulkItemResponse.getStatusCode()).isEqualTo(HttpResponseStatus.NO_CONTENT.code());\n+                Assertions.assertThat(cosmosBulkItemResponse.getRequestCharge()).isGreaterThan(0);\n+                Assertions.assertThat(cosmosBulkItemResponse.getCosmosDiagnostics().toString()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getSessionToken()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getActivityId()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getRequestCharge()).isNotNull();\n+\n+                return Mono.just(cosmosBulkItemResponse);\n+            }).blockLast();\n+\n+        Assertions.assertThat(processedDoc.get()).isEqualTo(totalRequest);\n+    }\n+\n+    @Test(groups = {\"simple\"}, timeOut = TIMEOUT)\n+    public void readItem_withBulk() {\n+        int totalRequest = getTotalRequest();\n+\n+        List<CosmosItemOperation> cosmosItemOperations = new ArrayList<>();\n+\n+        for (int i = 0; i < totalRequest; i++) {\n+            String partitionKey = UUID.randomUUID().toString();\n+\n+            // use i as a identifier for re check.\n+            TestDoc testDoc = this.populateTestDoc(partitionKey, i, 20);\n+\n+            cosmosItemOperations.add(BulkProcessingUtil.getBulkUpsertItemOperation(testDoc, new PartitionKey(partitionKey)));\n+        }\n+\n+        createItemsAndVerify(cosmosItemOperations);\n+\n+        Flux<CosmosItemOperation> readCosmosItemOperationFlux =\n+            Flux.fromIterable(cosmosItemOperations).map((CosmosItemOperation cosmosItemOperation) -> {\n+                TestDoc testDoc = cosmosItemOperation.getItem();\n+                return BulkProcessingUtil.getBulkReadItemOperation(testDoc.getId(), cosmosItemOperation.getPartitionKeyValue());\n+            });\n+\n+        BulkProcessingOptions<Object> bulkProcessingOptions = new BulkProcessingOptions<>(Object.class);\n+        bulkProcessingOptions.setMaxMicroBatchSize(30);\n+        bulkProcessingOptions.setMaxMicroBatchConcurrency(5);\n+\n+        AtomicInteger processedDoc = new AtomicInteger(0);\n+        bulkAsyncContainer\n+            .processBulkOperations(readCosmosItemOperationFlux, bulkProcessingOptions)\n+            .flatMap((CosmosBulkOperationRequestAndResponse<Object> cosmosBulkOperationRequestAndResponse) -> {\n+\n+                processedDoc.incrementAndGet();\n+\n+                CosmosBulkItemResponse cosmosBulkItemResponse = cosmosBulkOperationRequestAndResponse.getResponse();\n+                Assertions.assertThat(cosmosBulkItemResponse.getStatusCode()).isEqualTo(HttpResponseStatus.OK.code());\n+                Assertions.assertThat(cosmosBulkItemResponse.getRequestCharge()).isGreaterThan(0);\n+                Assertions.assertThat(cosmosBulkItemResponse.getCosmosDiagnostics().toString()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getSessionToken()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getActivityId()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getRequestCharge()).isNotNull();\n+\n+                // Using cost as list index like we assigned\n+                TestDoc testDoc = cosmosBulkItemResponse.getItem(TestDoc.class);\n+                Assertions.assertThat(testDoc).isEqualTo(cosmosItemOperations.get(testDoc.getCost()).getItem());\n+\n+                return Mono.just(cosmosBulkItemResponse);\n+            }).blockLast();\n+\n+        Assertions.assertThat(processedDoc.get()).isEqualTo(totalRequest);\n+    }\n+\n+    @Test(groups = {\"simple\"}, timeOut = TIMEOUT)\n+    public void readItemMultipleTimes_withBulk() {\n+        int totalRequest = getTotalRequest();\n+\n+        List<CosmosItemOperation> cosmosItemOperations = new ArrayList<>();\n+\n+        for (int i = 0; i < totalRequest; i++) {\n+            String partitionKey = UUID.randomUUID().toString();\n+\n+            // use i as a identifier for re check.\n+            TestDoc testDoc = this.populateTestDoc(partitionKey, i, 20);\n+\n+            cosmosItemOperations.add(BulkProcessingUtil.getBulkUpsertItemOperation(testDoc, new PartitionKey(partitionKey)));\n+        }\n+\n+        createItemsAndVerify(cosmosItemOperations);\n+\n+        Flux<CosmosItemOperation> readCosmosItemOperationFlux =\n+            Flux.fromIterable(cosmosItemOperations).map((CosmosItemOperation cosmosItemOperation) -> {\n+                TestDoc testDoc = cosmosItemOperation.getItem();\n+                return BulkProcessingUtil.getBulkReadItemOperation(testDoc.getId(), cosmosItemOperation.getPartitionKeyValue());\n+            });\n+\n+        BulkProcessingOptions<Object> bulkProcessingOptions = new BulkProcessingOptions<>(Object.class);\n+        bulkProcessingOptions.setMaxMicroBatchSize(30);\n+        bulkProcessingOptions.setMaxMicroBatchConcurrency(5);\n+\n+        HashSet<TestDoc> distinctDocs = new HashSet<>();\n+        AtomicInteger processedDoc = new AtomicInteger(0);\n+\n+        Flux<CosmosBulkOperationRequestAndResponse<Object>> readResponseFlux = bulkAsyncContainer\n+            .processBulkOperations(readCosmosItemOperationFlux, bulkProcessingOptions)\n+            .flatMap((CosmosBulkOperationRequestAndResponse<Object> cosmosBulkOperationRequestAndResponse) -> {\n+\n+                processedDoc.incrementAndGet();\n+\n+                CosmosBulkItemResponse cosmosBulkItemResponse = cosmosBulkOperationRequestAndResponse.getResponse();\n+                Assertions.assertThat(cosmosBulkItemResponse.getStatusCode()).isEqualTo(HttpResponseStatus.OK.code());\n+                Assertions.assertThat(cosmosBulkItemResponse.getRequestCharge()).isGreaterThan(0);\n+                Assertions.assertThat(cosmosBulkItemResponse.getCosmosDiagnostics().toString()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getSessionToken()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getActivityId()).isNotNull();\n+                Assertions.assertThat(cosmosBulkItemResponse.getRequestCharge()).isNotNull();\n+\n+                // Using cost as list index like we assigned\n+                TestDoc testDoc = cosmosBulkItemResponse.getItem(TestDoc.class);\n+                distinctDocs.add(testDoc);\n+                Assertions.assertThat(testDoc).isEqualTo(cosmosItemOperations.get(testDoc.getCost()).getItem());\n+\n+                return Mono.just(cosmosBulkOperationRequestAndResponse);\n+            });\n+\n+        // Subscribe first time\n+        readResponseFlux\n+            .blockLast();\n+\n+        Assertions.assertThat(processedDoc.get()).isEqualTo(totalRequest);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3NjY3Nw=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 295}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODI3MTM4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkProcessingUtil.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzoxNjoxMFrOHp1Crw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzo0MToyMVrOHua4lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyMjcwMw==", "bodyText": "@FabianMeiswinkel @kushagraThapar @kirankumarkolli thought on the naming?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r513622703", "createdAt": "2020-10-28T17:16:10Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkProcessingUtil.java", "diffHunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.batch.ItemBulkOperation;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.Beta;\n+import reactor.core.publisher.Flux;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Utility for creating bulk operations which can be executed by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)} .\n+ *\n+ * Also while creating these operation, if some options which are only for individual operation can be provided by passing\n+ * a {@link BulkItemRequestOptions} while creating the bulk operation.\n+ *\n+ * See also {@link BulkProcessingOptions}.\n+ */\n+@Beta(Beta.SinceVersion.V4_7_0)\n+public final class BulkProcessingUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5MTAwMQ==", "bodyText": "My preference would be:\nBulkOperations as the class name\nFactory method names as newCreateItemOperation(T item, PartitionKey partitionKey) or newReadItemOperation(String id, PartitionKey partitionKey)\nI think the bulk can get removed because that is clear from the class name of the factory\nI like the newXXX naming convention for factory methods beter than createXXX - but would prefer either of them over getXXX", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r515891001", "createdAt": "2020-11-02T10:54:15Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkProcessingUtil.java", "diffHunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.batch.ItemBulkOperation;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.Beta;\n+import reactor.core.publisher.Flux;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Utility for creating bulk operations which can be executed by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)} .\n+ *\n+ * Also while creating these operation, if some options which are only for individual operation can be provided by passing\n+ * a {@link BulkItemRequestOptions} while creating the bulk operation.\n+ *\n+ * See also {@link BulkProcessingOptions}.\n+ */\n+@Beta(Beta.SinceVersion.V4_7_0)\n+public final class BulkProcessingUtil {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyMjcwMw=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxMjc2Mg==", "bodyText": "Have changed class to BulkOperations, seems better actually. Have changed function names too. CreateXXX is confusing to me too as we have create as an operation too. newXXX seems fine, so changed it for now.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r516412762", "createdAt": "2020-11-03T03:40:31Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkProcessingUtil.java", "diffHunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.batch.ItemBulkOperation;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.Beta;\n+import reactor.core.publisher.Flux;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Utility for creating bulk operations which can be executed by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)} .\n+ *\n+ * Also while creating these operation, if some options which are only for individual operation can be provided by passing\n+ * a {@link BulkItemRequestOptions} while creating the bulk operation.\n+ *\n+ * See also {@link BulkProcessingOptions}.\n+ */\n+@Beta(Beta.SinceVersion.V4_7_0)\n+public final class BulkProcessingUtil {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyMjcwMw=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA0MjY5MA==", "bodyText": "LGTM now - thanks!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r518042690", "createdAt": "2020-11-05T13:17:49Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkProcessingUtil.java", "diffHunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.batch.ItemBulkOperation;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.Beta;\n+import reactor.core.publisher.Flux;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Utility for creating bulk operations which can be executed by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)} .\n+ *\n+ * Also while creating these operation, if some options which are only for individual operation can be provided by passing\n+ * a {@link BulkItemRequestOptions} while creating the bulk operation.\n+ *\n+ * See also {@link BulkProcessingOptions}.\n+ */\n+@Beta(Beta.SinceVersion.V4_7_0)\n+public final class BulkProcessingUtil {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyMjcwMw=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzNzAxMw==", "bodyText": "BulkOperations looks good to me too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r518437013", "createdAt": "2020-11-05T23:41:21Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkProcessingUtil.java", "diffHunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.batch.ItemBulkOperation;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.Beta;\n+import reactor.core.publisher.Flux;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Utility for creating bulk operations which can be executed by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)} .\n+ *\n+ * Also while creating these operation, if some options which are only for individual operation can be provided by passing\n+ * a {@link BulkItemRequestOptions} while creating the bulk operation.\n+ *\n+ * See also {@link BulkProcessingOptions}.\n+ */\n+@Beta(Beta.SinceVersion.V4_7_0)\n+public final class BulkProcessingUtil {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyMjcwMw=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODI4OTQxOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzoyMDoxNlrOHp1Ntw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxODowMjo0NFrOHp3CoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyNTUyNw==", "bodyText": "if the input operations Flux sends error signal, what is the expected behaviour?\nWe should have a test for this scenario to validate the behaviour.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r513625527", "createdAt": "2020-10-28T17:20:16Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -585,6 +586,71 @@ public String getId() {\n             });\n     }\n \n+    /**\n+     * Executes flux of operations in Bulk.\n+     *\n+     * @param <TContext> The context for the bulk processing.\n+     *\n+     * @param operations Flux of operation which will be executed by this container.\n+     *\n+     * @return A Flux of {@link CosmosBulkOperationRequestAndResponse} which contains operation and it's response or exception.\n+     * <p>\n+     *     To create a operation which can be executed here, use {@link BulkProcessingUtil}. For eg.\n+     *     for a upsert operation use {@link BulkProcessingUtil#getBulkUpsertItemOperation(Object, PartitionKey)}\n+     * </p>\n+     * <p>\n+     *     We can get the corresponding operation using {@link CosmosBulkOperationRequestAndResponse#getOperation()} and\n+     *     it's response using {@link CosmosBulkOperationRequestAndResponse#getResponse()}. If the operation was executed\n+     *     successfully, the value returned by {@link CosmosBulkItemResponse#isSuccessStatusCode()} will be true. To get\n+     *     actual status use {@link CosmosBulkItemResponse#getStatusCode()}.\n+     * </p>\n+     * To check if the operation had any exception, use {@link CosmosBulkOperationRequestAndResponse#getThrowable()} to\n+     * get the exception.\n+     */\n+    @Beta(Beta.SinceVersion.V4_7_0)\n+    public <TContext> Flux<CosmosBulkOperationRequestAndResponse<TContext>> processBulkOperations(\n+        Flux<CosmosItemOperation> operations) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1NTQ1Nw==", "bodyText": "Ack. Will do that. Thanks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r513655457", "createdAt": "2020-10-28T18:02:44Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -585,6 +586,71 @@ public String getId() {\n             });\n     }\n \n+    /**\n+     * Executes flux of operations in Bulk.\n+     *\n+     * @param <TContext> The context for the bulk processing.\n+     *\n+     * @param operations Flux of operation which will be executed by this container.\n+     *\n+     * @return A Flux of {@link CosmosBulkOperationRequestAndResponse} which contains operation and it's response or exception.\n+     * <p>\n+     *     To create a operation which can be executed here, use {@link BulkProcessingUtil}. For eg.\n+     *     for a upsert operation use {@link BulkProcessingUtil#getBulkUpsertItemOperation(Object, PartitionKey)}\n+     * </p>\n+     * <p>\n+     *     We can get the corresponding operation using {@link CosmosBulkOperationRequestAndResponse#getOperation()} and\n+     *     it's response using {@link CosmosBulkOperationRequestAndResponse#getResponse()}. If the operation was executed\n+     *     successfully, the value returned by {@link CosmosBulkItemResponse#isSuccessStatusCode()} will be true. To get\n+     *     actual status use {@link CosmosBulkItemResponse#getStatusCode()}.\n+     * </p>\n+     * To check if the operation had any exception, use {@link CosmosBulkOperationRequestAndResponse#getThrowable()} to\n+     * get the exception.\n+     */\n+    @Beta(Beta.SinceVersion.V4_7_0)\n+    public <TContext> Flux<CosmosBulkOperationRequestAndResponse<TContext>> processBulkOperations(\n+        Flux<CosmosItemOperation> operations) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyNTUyNw=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODMwNDE2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkItemResponse.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzoyMzoxMlrOHp1XJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDo1Njo0N1rOHsypDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyNzk0MQ==", "bodyText": "Could you paste a sample CosmosDiagnostics for bulk operation somewhere in the PR description? I wonder with all the newly introduced retries how it will look like.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r513627941", "createdAt": "2020-10-28T17:23:12Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkItemResponse.java", "diffHunk": "@@ -0,0 +1,189 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.implementation.batch.BatchExecUtils;\n+import com.azure.cosmos.util.Beta;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import reactor.core.publisher.Flux;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Response of a {@link CosmosItemOperation} request when processed using Bulk by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)}.\n+ *\n+ */\n+@Beta(Beta.SinceVersion.V4_7_0)\n+public final class CosmosBulkItemResponse {\n+\n+    private final String eTag;\n+    private final double requestCharge;\n+    private final ObjectNode resourceObject;\n+    private final int statusCode;\n+    private final Duration retryAfter;\n+    private final int subStatusCode;\n+    private final Map<String, String> responseHeaders;\n+    private final CosmosDiagnostics cosmosDiagnostics;\n+\n+    /**\n+     * Initializes a new instance of the {@link CosmosBulkItemResponse} class.\n+     */\n+    CosmosBulkItemResponse(String eTag,\n+                           double requestCharge,\n+                           ObjectNode resourceObject,\n+                           int statusCode,\n+                           Duration retryAfter,\n+                           int subStatusCode,\n+                           Map<String, String> responseHeaders,\n+                           CosmosDiagnostics cosmosDiagnostics) {\n+\n+        checkNotNull(statusCode, \"expected non-null statusCode\");\n+        checkNotNull(responseHeaders, \"expected non-null responseHeaders\");\n+\n+        this.eTag = eTag;\n+        this.requestCharge = requestCharge;\n+        this.resourceObject = resourceObject;\n+        this.statusCode = statusCode;\n+        this.retryAfter = retryAfter;\n+        this.subStatusCode = subStatusCode;\n+        this.responseHeaders = responseHeaders;\n+        this.cosmosDiagnostics = cosmosDiagnostics;\n+    }\n+\n+    /**\n+     * Gets the activity ID that identifies the server request made to execute this operation.\n+     *\n+     * @return the activity ID that identifies the server request made to execute this operation.\n+     */\n+    public String getActivityId() {\n+        return BatchExecUtils.getActivityId(this.responseHeaders);\n+    }\n+\n+    /**\n+     * Gets the entity tag associated with the current item.\n+     *\n+     * ETags are used for concurrency checking when updating resources.\n+     *\n+     * @return Entity tag associated with the current item.\n+     */\n+    public String getETag() {\n+        return this.eTag;\n+    }\n+\n+    /**\n+     * Gets the request charge as request units (RU) consumed by the current operation.\n+     * <p>\n+     * For more information about the RU and factors that can impact the effective charges please visit\n+     * <a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/request-units\">Request Units in Azure Cosmos DB</a>\n+     *\n+     * @return the request charge.\n+     */\n+    public double getRequestCharge() {\n+        return this.requestCharge;\n+    }\n+\n+    /**\n+     * Gets the item associated with the current result.\n+     *\n+     * @param <T> the type parameter\n+     *\n+     * @param type class type for which deserialization is needed.\n+     *\n+     * @return item associated with the current result.\n+     */\n+    public <T> T getItem(final Class<T> type) {\n+        T item = null;\n+\n+        if (this.getResourceObject() != null) {\n+            item = new JsonSerializable(this.getResourceObject()).toObject(type);\n+        }\n+\n+        return item;\n+    }\n+\n+    /**\n+     * Gets retry after.\n+     *\n+     * @return the retry after\n+     */\n+    public Duration getRetryAfterDuration() {\n+        return this.retryAfter;\n+    }\n+\n+    /**\n+     * Gets sub status code associated with the current result.\n+     *\n+     * @return the sub status code\n+     */\n+    public int getSubStatusCode() {\n+        return this.subStatusCode;\n+    }\n+\n+    /**\n+     * Gets a value indicating whether the current operation completed successfully.\n+     *\n+     * @return {@code true} if the current operation completed successfully; {@code false} otherwise.\n+     */\n+    public boolean isSuccessStatusCode() {\n+        return 200 <= this.statusCode && this.statusCode <= 299;\n+    }\n+\n+    /**\n+     * Gets the HTTP status code associated with the current result.\n+     *\n+     * @return the status code.\n+     */\n+    public int getStatusCode() {\n+        return this.statusCode;\n+    }\n+\n+    /**\n+     * Gets the cosmos diagnostic for this operation.\n+     *\n+     * @return the CosmosDiagnostics{@link CosmosDiagnostics}\n+     */\n+    public CosmosDiagnostics getCosmosDiagnostics() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1MjI1Mg==", "bodyText": "Right now in case there is a partial retry, it will have diagnostic for the last successful batch request as we don't have diagnostic operation wise.\nIf it's permissible to initialize one diagnostic operation wise then we can do some sort of merging there every time a batch request is executed? This will also help in adding diagnostic for getting partition key range id.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r513652252", "createdAt": "2020-10-28T17:58:13Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkItemResponse.java", "diffHunk": "@@ -0,0 +1,189 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.implementation.batch.BatchExecUtils;\n+import com.azure.cosmos.util.Beta;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import reactor.core.publisher.Flux;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Response of a {@link CosmosItemOperation} request when processed using Bulk by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)}.\n+ *\n+ */\n+@Beta(Beta.SinceVersion.V4_7_0)\n+public final class CosmosBulkItemResponse {\n+\n+    private final String eTag;\n+    private final double requestCharge;\n+    private final ObjectNode resourceObject;\n+    private final int statusCode;\n+    private final Duration retryAfter;\n+    private final int subStatusCode;\n+    private final Map<String, String> responseHeaders;\n+    private final CosmosDiagnostics cosmosDiagnostics;\n+\n+    /**\n+     * Initializes a new instance of the {@link CosmosBulkItemResponse} class.\n+     */\n+    CosmosBulkItemResponse(String eTag,\n+                           double requestCharge,\n+                           ObjectNode resourceObject,\n+                           int statusCode,\n+                           Duration retryAfter,\n+                           int subStatusCode,\n+                           Map<String, String> responseHeaders,\n+                           CosmosDiagnostics cosmosDiagnostics) {\n+\n+        checkNotNull(statusCode, \"expected non-null statusCode\");\n+        checkNotNull(responseHeaders, \"expected non-null responseHeaders\");\n+\n+        this.eTag = eTag;\n+        this.requestCharge = requestCharge;\n+        this.resourceObject = resourceObject;\n+        this.statusCode = statusCode;\n+        this.retryAfter = retryAfter;\n+        this.subStatusCode = subStatusCode;\n+        this.responseHeaders = responseHeaders;\n+        this.cosmosDiagnostics = cosmosDiagnostics;\n+    }\n+\n+    /**\n+     * Gets the activity ID that identifies the server request made to execute this operation.\n+     *\n+     * @return the activity ID that identifies the server request made to execute this operation.\n+     */\n+    public String getActivityId() {\n+        return BatchExecUtils.getActivityId(this.responseHeaders);\n+    }\n+\n+    /**\n+     * Gets the entity tag associated with the current item.\n+     *\n+     * ETags are used for concurrency checking when updating resources.\n+     *\n+     * @return Entity tag associated with the current item.\n+     */\n+    public String getETag() {\n+        return this.eTag;\n+    }\n+\n+    /**\n+     * Gets the request charge as request units (RU) consumed by the current operation.\n+     * <p>\n+     * For more information about the RU and factors that can impact the effective charges please visit\n+     * <a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/request-units\">Request Units in Azure Cosmos DB</a>\n+     *\n+     * @return the request charge.\n+     */\n+    public double getRequestCharge() {\n+        return this.requestCharge;\n+    }\n+\n+    /**\n+     * Gets the item associated with the current result.\n+     *\n+     * @param <T> the type parameter\n+     *\n+     * @param type class type for which deserialization is needed.\n+     *\n+     * @return item associated with the current result.\n+     */\n+    public <T> T getItem(final Class<T> type) {\n+        T item = null;\n+\n+        if (this.getResourceObject() != null) {\n+            item = new JsonSerializable(this.getResourceObject()).toObject(type);\n+        }\n+\n+        return item;\n+    }\n+\n+    /**\n+     * Gets retry after.\n+     *\n+     * @return the retry after\n+     */\n+    public Duration getRetryAfterDuration() {\n+        return this.retryAfter;\n+    }\n+\n+    /**\n+     * Gets sub status code associated with the current result.\n+     *\n+     * @return the sub status code\n+     */\n+    public int getSubStatusCode() {\n+        return this.subStatusCode;\n+    }\n+\n+    /**\n+     * Gets a value indicating whether the current operation completed successfully.\n+     *\n+     * @return {@code true} if the current operation completed successfully; {@code false} otherwise.\n+     */\n+    public boolean isSuccessStatusCode() {\n+        return 200 <= this.statusCode && this.statusCode <= 299;\n+    }\n+\n+    /**\n+     * Gets the HTTP status code associated with the current result.\n+     *\n+     * @return the status code.\n+     */\n+    public int getStatusCode() {\n+        return this.statusCode;\n+    }\n+\n+    /**\n+     * Gets the cosmos diagnostic for this operation.\n+     *\n+     * @return the CosmosDiagnostics{@link CosmosDiagnostics}\n+     */\n+    public CosmosDiagnostics getCosmosDiagnostics() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyNzk0MQ=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5Mjk3NA==", "bodyText": "Let's start with providing the sample here - then we can review whether it is sufficient or how we want to evolve it - makes sense?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r515892974", "createdAt": "2020-11-02T10:57:53Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkItemResponse.java", "diffHunk": "@@ -0,0 +1,189 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.implementation.batch.BatchExecUtils;\n+import com.azure.cosmos.util.Beta;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import reactor.core.publisher.Flux;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Response of a {@link CosmosItemOperation} request when processed using Bulk by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)}.\n+ *\n+ */\n+@Beta(Beta.SinceVersion.V4_7_0)\n+public final class CosmosBulkItemResponse {\n+\n+    private final String eTag;\n+    private final double requestCharge;\n+    private final ObjectNode resourceObject;\n+    private final int statusCode;\n+    private final Duration retryAfter;\n+    private final int subStatusCode;\n+    private final Map<String, String> responseHeaders;\n+    private final CosmosDiagnostics cosmosDiagnostics;\n+\n+    /**\n+     * Initializes a new instance of the {@link CosmosBulkItemResponse} class.\n+     */\n+    CosmosBulkItemResponse(String eTag,\n+                           double requestCharge,\n+                           ObjectNode resourceObject,\n+                           int statusCode,\n+                           Duration retryAfter,\n+                           int subStatusCode,\n+                           Map<String, String> responseHeaders,\n+                           CosmosDiagnostics cosmosDiagnostics) {\n+\n+        checkNotNull(statusCode, \"expected non-null statusCode\");\n+        checkNotNull(responseHeaders, \"expected non-null responseHeaders\");\n+\n+        this.eTag = eTag;\n+        this.requestCharge = requestCharge;\n+        this.resourceObject = resourceObject;\n+        this.statusCode = statusCode;\n+        this.retryAfter = retryAfter;\n+        this.subStatusCode = subStatusCode;\n+        this.responseHeaders = responseHeaders;\n+        this.cosmosDiagnostics = cosmosDiagnostics;\n+    }\n+\n+    /**\n+     * Gets the activity ID that identifies the server request made to execute this operation.\n+     *\n+     * @return the activity ID that identifies the server request made to execute this operation.\n+     */\n+    public String getActivityId() {\n+        return BatchExecUtils.getActivityId(this.responseHeaders);\n+    }\n+\n+    /**\n+     * Gets the entity tag associated with the current item.\n+     *\n+     * ETags are used for concurrency checking when updating resources.\n+     *\n+     * @return Entity tag associated with the current item.\n+     */\n+    public String getETag() {\n+        return this.eTag;\n+    }\n+\n+    /**\n+     * Gets the request charge as request units (RU) consumed by the current operation.\n+     * <p>\n+     * For more information about the RU and factors that can impact the effective charges please visit\n+     * <a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/request-units\">Request Units in Azure Cosmos DB</a>\n+     *\n+     * @return the request charge.\n+     */\n+    public double getRequestCharge() {\n+        return this.requestCharge;\n+    }\n+\n+    /**\n+     * Gets the item associated with the current result.\n+     *\n+     * @param <T> the type parameter\n+     *\n+     * @param type class type for which deserialization is needed.\n+     *\n+     * @return item associated with the current result.\n+     */\n+    public <T> T getItem(final Class<T> type) {\n+        T item = null;\n+\n+        if (this.getResourceObject() != null) {\n+            item = new JsonSerializable(this.getResourceObject()).toObject(type);\n+        }\n+\n+        return item;\n+    }\n+\n+    /**\n+     * Gets retry after.\n+     *\n+     * @return the retry after\n+     */\n+    public Duration getRetryAfterDuration() {\n+        return this.retryAfter;\n+    }\n+\n+    /**\n+     * Gets sub status code associated with the current result.\n+     *\n+     * @return the sub status code\n+     */\n+    public int getSubStatusCode() {\n+        return this.subStatusCode;\n+    }\n+\n+    /**\n+     * Gets a value indicating whether the current operation completed successfully.\n+     *\n+     * @return {@code true} if the current operation completed successfully; {@code false} otherwise.\n+     */\n+    public boolean isSuccessStatusCode() {\n+        return 200 <= this.statusCode && this.statusCode <= 299;\n+    }\n+\n+    /**\n+     * Gets the HTTP status code associated with the current result.\n+     *\n+     * @return the status code.\n+     */\n+    public int getStatusCode() {\n+        return this.statusCode;\n+    }\n+\n+    /**\n+     * Gets the cosmos diagnostic for this operation.\n+     *\n+     * @return the CosmosDiagnostics{@link CosmosDiagnostics}\n+     */\n+    public CosmosDiagnostics getCosmosDiagnostics() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyNzk0MQ=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcyNzMxOA==", "bodyText": "Sure. So this is the sample for a direct TCP. You can see operation type batch and it's headers here. The response has session token and all.\n{\"userAgent\":\"azsdk-java-cosmos/4.9.0-beta.1 Windows10/10.0 JRE/1.8.0_211\",\"requestLatencyInMs\":3533,\"requestStartTimeUTC\":\"2020-11-03T14:09:54.676Z\",\"requestEndTimeUTC\":\"2020-11-03T14:09:58.209Z\",\"connectionMode\":\"DIRECT\",\"responseStatisticsList\":[{\"storeResult\":{\"storePhysicalAddress\":\"rntbd://cdb-ms-stage-eastus2-fd4.documents-staging.windows-ppe.net:14013/apps/b5716ed2-296e-4856-89aa-03d65f8dd46b/services/715cd67d-5ed6-4dd0-a256-bc574a605d13/partitions/6fb56c52-6f2f-4a37-a578-199d36bac8d2/replicas/132488385023590763p/\",\"lsn\":4,\"globalCommittedLsn\":3,\"partitionKeyRangeId\":\"1\",\"isValid\":true,\"statusCode\":200,\"subStatusCode\":0,\"isGone\":false,\"isNotFound\":false,\"isInvalidPartition\":false,\"requestCharge\":606.67,\"itemLSN\":-1,\"sessionToken\":\"-1#4\",\"exception\":null,\"transportRequestTimeline\":[{\"eventName\":\"created\",\"startTimeUTC\":\"2020-11-03T14:09:55.567Z\"},{\"eventName\":\"queued\",\"startTimeUTC\":\"2020-11-03T14:09:55.652Z\"},{\"eventName\":\"channelAcquisitionStarted\",\"startTimeUTC\":\"2020-11-03T14:09:55.652Z\"},{\"eventName\":\"pipelined\",\"startTimeUTC\":\"2020-11-03T14:09:57.185Z\"},{\"eventName\":\"transitTime\",\"startTimeUTC\":\"2020-11-03T14:09:57.256Z\"},{\"eventName\":\"received\",\"startTimeUTC\":\"2020-11-03T14:09:58.195Z\"},{\"eventName\":\"completed\",\"startTimeUTC\":\"2020-11-03T14:09:58.209Z\"}],\"rntbdRequestLengthInBytes\":22674,\"rntbdResponseLengthInBytes\":43263,\"requestPayloadLengthInBytes\":22186,\"responsePayloadLengthInBytes\":42934,\"channelTaskQueueSize\":0,\"pendingRequestsCount\":0,\"serviceEndpointStatistics\":{\"availableChannels\":0,\"acquiredChannels\":0,\"executorTaskQueueSize\":0,\"inflightRequests\":1,\"lastSuccessfulRequestTime\":\"2020-11-03T14:09:55.600Z\",\"lastRequestTime\":\"2020-11-03T14:09:55.600Z\",\"createdTime\":\"2020-11-03T14:09:55.578Z\",\"isClosed\":false}},\"requestResponseTimeUTC\":\"2020-11-03T14:09:58.209Z\",\"requestResourceType\":\"Document\",\"requestOperationType\":\"Batch\"}],\"supplementalResponseStatisticsList\":[],\"addressResolutionStatistics\":{\"3fa7837d-1dde-11eb-804d-03762526cb03\":{\"startTimeUTC\":\"2020-11-03T14:09:55.282Z\",\"endTimeUTC\":\"2020-11-03T14:09:55.561Z\",\"targetEndpoint\":\"https://rakkumastage-eastus2.documents-staging.windows-ppe.net:443/addresses/?$resolveFor=dbs%2FwEo8AA%3D%3D%2Fcolls%2FwEo8AJyCb1o%3D%2Fdocs&$filter=protocol%20eq%20rntbd&$partitionKeyRangeIds=1\",\"errorMessage\":null,\"inflightRequest\":false}},\"regionsContacted\":[\"https://rakkumastage-eastus2.documents-staging.windows-ppe.net:443/\"],\"retryContext\":{\"retryCount\":0,\"statusAndSubStatusCodes\":null,\"retryLatency\":0},\"metadataDiagnosticsContext\":{\"metadataDiagnosticList\":[{\"metaDataName\":\"CONTAINER_LOOK_UP\",\"startTimeUTC\":\"2020-11-03T14:09:54.676Z\",\"endTimeUTC\":\"2020-11-03T14:09:55.281Z\",\"durationinMS\":605},{\"metaDataName\":\"SERVER_ADDRESS_LOOKUP\",\"startTimeUTC\":\"2020-11-03T14:09:55.282Z\",\"endTimeUTC\":\"2020-11-03T14:09:55.561Z\",\"durationinMS\":279}]},\"serializationDiagnosticsContext\":{\"serializationDiagnosticsList\":[{\"serializationType\":\"ITEM_SERIALIZATION\",\"startTimeUTC\":\"2020-11-03T14:09:54.676Z\",\"endTimeUTC\":\"2020-11-03T14:09:54.676Z\",\"durationInMicroSec\":0}]},\"gatewayStatistics\":null,\"systemInformation\":{\"usedMemory\":\"46861 KB\",\"availableMemory\":\"1817331 KB\",\"systemCpuLoad\":\"(2020-11-03T14:09:49.474Z 12.9%), (2020-11-03T14:09:49.474Z 12.9%), (2020-11-03T14:09:49.474Z 12.9%), (2020-11-03T14:09:49.474Z 12.9%), (2020-11-03T14:09:49.588Z 12.9%), (2020-11-03T14:09:54.596Z 8.6%)\"},\"clientCfgs\":{\"id\":-3,\"numberOfClients\":4,\"connCfg\":{\"rntbd\":\"(cto:PT5S, rto:PT5S, icto:PT0S, ieto:PT1H, mcpe:130, mrpc:30, cer:false)\",\"gw\":\"(cps:1000, rto:PT5S, icto:null, p:false)\",\"other\":\"(ed: true, cs: false)\"},\"consistencyCfg\":\"(consistency: Session, mm: true, prgns: [])\"}}\nFor a gone exception(changed the pk range in code to get a gone):\nException:\nPartitionKeyRangeGoneException{userAgent=azsdk-java-cosmos/4.9.0-beta.1 Windows10/10.0 JRE/1.8.0_211, error={\"Errors\":[\"The requested resource is no longer available at the server.\"]}, resourceAddress='null', requestUri='null', statusCode=410, message=[\"The requested resource is no longer available at the server.\"], {\"userAgent\":\"azsdk-java-cosmos/4.9.0-beta.1 Windows10/10.0 JRE/1.8.0_211\",\"requestLatencyInMs\":0,\"requestStartTimeUTC\":\"2020-11-03T14:48:12.367Z\",\"requestEndTimeUTC\":\"2020-11-03T14:48:12.367Z\",\"connectionMode\":\"DIRECT\",\"responseStatisticsList\":[],\"supplementalResponseStatisticsList\":[],\"addressResolutionStatistics\":{},\"regionsContacted\":[],\"retryContext\":{\"retryCount\":0,\"statusAndSubStatusCodes\":null,\"retryLatency\":0},\"metadataDiagnosticsContext\":{\"metadataDiagnosticList\":null},\"serializationDiagnosticsContext\":{\"serializationDiagnosticsList\":[{\"serializationType\":\"ITEM_SERIALIZATION\",\"startTimeUTC\":\"2020-11-03T14:48:12.367Z\",\"endTimeUTC\":\"2020-11-03T14:48:12.367Z\",\"durationInMicroSec\":0}]},\"gatewayStatistics\":null,\"systemInformation\":{\"usedMemory\":\"59794 KB\",\"availableMemory\":\"1804398 KB\",\"systemCpuLoad\":\"(2020-11-03T14:48:01.426Z 20.5%), (2020-11-03T14:48:05.116Z 9.8%), (2020-11-03T14:48:10.120Z 16.0%)\"},\"clientCfgs\":{\"id\":-1,\"numberOfClients\":2,\"connCfg\":{\"rntbd\":\"(cto:PT5S, rto:PT5S, icto:PT0S, ieto:PT1H, mcpe:130, mrpc:30, cer:false)\",\"gw\":\"(cps:1000, rto:PT5S, icto:null, p:false)\",\"other\":\"(ed: true, cs: false)\"},\"consistencyCfg\":\"(consistency: Session, mm: true, prgns: [])\"}}, causeInfo=null, responseHeaders={x-ms-current-replica-set-size=4, x-ms-last-state-change-utc=Fri, 30 Oct 2020 16:31:52.563 GMT, lsn=1, x-ms-request-charge=0.00, x-ms-schemaversion=1.10, x-ms-transport-request-id=2, x-ms-number-of-read-regions=0, x-ms-current-write-quorum=3, x-ms-cosmos-quorum-acked-llsn=1, x-ms-quorum-acked-lsn=1, x-ms-activity-id=98d2de0c-1de3-11eb-8335-5de6f3380958, x-ms-xp-role=1, x-ms-global-Committed-lsn=1, x-ms-item-count=10, x-ms-cosmos-llsn=1, x-ms-serviceversion= version=2.11.0.0, x-ms-substatus=1002}, requestHeaders=null}\nDiagnostic for the same:\n{\"userAgent\":\"azsdk-java-cosmos/4.9.0-beta.1 Windows10/10.0 JRE/1.8.0_211\",\"requestLatencyInMs\":0,\"requestStartTimeUTC\":\"2020-11-03T14:48:12.367Z\",\"requestEndTimeUTC\":\"2020-11-03T14:48:12.367Z\",\"connectionMode\":\"DIRECT\",\"responseStatisticsList\":[],\"supplementalResponseStatisticsList\":[],\"addressResolutionStatistics\":{},\"regionsContacted\":[],\"retryContext\":{\"retryCount\":0,\"statusAndSubStatusCodes\":null,\"retryLatency\":0},\"metadataDiagnosticsContext\":{\"metadataDiagnosticList\":null},\"serializationDiagnosticsContext\":{\"serializationDiagnosticsList\":[{\"serializationType\":\"ITEM_SERIALIZATION\",\"startTimeUTC\":\"2020-11-03T14:48:12.367Z\",\"endTimeUTC\":\"2020-11-03T14:48:12.367Z\",\"durationInMicroSec\":0}]},\"gatewayStatistics\":null,\"systemInformation\":{\"usedMemory\":\"59794 KB\",\"availableMemory\":\"1804398 KB\",\"systemCpuLoad\":\"(2020-11-03T14:48:01.426Z 20.5%), (2020-11-03T14:48:05.116Z 9.8%), (2020-11-03T14:48:10.120Z 16.0%)\"},\"clientCfgs\":{\"id\":-1,\"numberOfClients\":2,\"connCfg\":{\"rntbd\":\"(cto:PT5S, rto:PT5S, icto:PT0S, ieto:PT1H, mcpe:130, mrpc:30, cer:false)\",\"gw\":\"(cps:1000, rto:PT5S, icto:null, p:false)\",\"other\":\"(ed: true, cs: false)\"},\"consistencyCfg\":\"(consistency: Session, mm: true, prgns: [])\"}}", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r516727318", "createdAt": "2020-11-03T14:54:23Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkItemResponse.java", "diffHunk": "@@ -0,0 +1,189 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.implementation.batch.BatchExecUtils;\n+import com.azure.cosmos.util.Beta;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import reactor.core.publisher.Flux;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Response of a {@link CosmosItemOperation} request when processed using Bulk by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)}.\n+ *\n+ */\n+@Beta(Beta.SinceVersion.V4_7_0)\n+public final class CosmosBulkItemResponse {\n+\n+    private final String eTag;\n+    private final double requestCharge;\n+    private final ObjectNode resourceObject;\n+    private final int statusCode;\n+    private final Duration retryAfter;\n+    private final int subStatusCode;\n+    private final Map<String, String> responseHeaders;\n+    private final CosmosDiagnostics cosmosDiagnostics;\n+\n+    /**\n+     * Initializes a new instance of the {@link CosmosBulkItemResponse} class.\n+     */\n+    CosmosBulkItemResponse(String eTag,\n+                           double requestCharge,\n+                           ObjectNode resourceObject,\n+                           int statusCode,\n+                           Duration retryAfter,\n+                           int subStatusCode,\n+                           Map<String, String> responseHeaders,\n+                           CosmosDiagnostics cosmosDiagnostics) {\n+\n+        checkNotNull(statusCode, \"expected non-null statusCode\");\n+        checkNotNull(responseHeaders, \"expected non-null responseHeaders\");\n+\n+        this.eTag = eTag;\n+        this.requestCharge = requestCharge;\n+        this.resourceObject = resourceObject;\n+        this.statusCode = statusCode;\n+        this.retryAfter = retryAfter;\n+        this.subStatusCode = subStatusCode;\n+        this.responseHeaders = responseHeaders;\n+        this.cosmosDiagnostics = cosmosDiagnostics;\n+    }\n+\n+    /**\n+     * Gets the activity ID that identifies the server request made to execute this operation.\n+     *\n+     * @return the activity ID that identifies the server request made to execute this operation.\n+     */\n+    public String getActivityId() {\n+        return BatchExecUtils.getActivityId(this.responseHeaders);\n+    }\n+\n+    /**\n+     * Gets the entity tag associated with the current item.\n+     *\n+     * ETags are used for concurrency checking when updating resources.\n+     *\n+     * @return Entity tag associated with the current item.\n+     */\n+    public String getETag() {\n+        return this.eTag;\n+    }\n+\n+    /**\n+     * Gets the request charge as request units (RU) consumed by the current operation.\n+     * <p>\n+     * For more information about the RU and factors that can impact the effective charges please visit\n+     * <a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/request-units\">Request Units in Azure Cosmos DB</a>\n+     *\n+     * @return the request charge.\n+     */\n+    public double getRequestCharge() {\n+        return this.requestCharge;\n+    }\n+\n+    /**\n+     * Gets the item associated with the current result.\n+     *\n+     * @param <T> the type parameter\n+     *\n+     * @param type class type for which deserialization is needed.\n+     *\n+     * @return item associated with the current result.\n+     */\n+    public <T> T getItem(final Class<T> type) {\n+        T item = null;\n+\n+        if (this.getResourceObject() != null) {\n+            item = new JsonSerializable(this.getResourceObject()).toObject(type);\n+        }\n+\n+        return item;\n+    }\n+\n+    /**\n+     * Gets retry after.\n+     *\n+     * @return the retry after\n+     */\n+    public Duration getRetryAfterDuration() {\n+        return this.retryAfter;\n+    }\n+\n+    /**\n+     * Gets sub status code associated with the current result.\n+     *\n+     * @return the sub status code\n+     */\n+    public int getSubStatusCode() {\n+        return this.subStatusCode;\n+    }\n+\n+    /**\n+     * Gets a value indicating whether the current operation completed successfully.\n+     *\n+     * @return {@code true} if the current operation completed successfully; {@code false} otherwise.\n+     */\n+    public boolean isSuccessStatusCode() {\n+        return 200 <= this.statusCode && this.statusCode <= 299;\n+    }\n+\n+    /**\n+     * Gets the HTTP status code associated with the current result.\n+     *\n+     * @return the status code.\n+     */\n+    public int getStatusCode() {\n+        return this.statusCode;\n+    }\n+\n+    /**\n+     * Gets the cosmos diagnostic for this operation.\n+     *\n+     * @return the CosmosDiagnostics{@link CosmosDiagnostics}\n+     */\n+    public CosmosDiagnostics getCosmosDiagnostics() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyNzk0MQ=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcyOTEwMw==", "bodyText": "The retry logic works in gone, have tested all the test case with a one time gone exception such that if retry attempt is one, keep the valid pk range. But we need to fix the diagnostic such that it tracks this retry and any retry due to partial  throttling.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r516729103", "createdAt": "2020-11-03T14:56:47Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkItemResponse.java", "diffHunk": "@@ -0,0 +1,189 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.implementation.batch.BatchExecUtils;\n+import com.azure.cosmos.util.Beta;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import reactor.core.publisher.Flux;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Response of a {@link CosmosItemOperation} request when processed using Bulk by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)}.\n+ *\n+ */\n+@Beta(Beta.SinceVersion.V4_7_0)\n+public final class CosmosBulkItemResponse {\n+\n+    private final String eTag;\n+    private final double requestCharge;\n+    private final ObjectNode resourceObject;\n+    private final int statusCode;\n+    private final Duration retryAfter;\n+    private final int subStatusCode;\n+    private final Map<String, String> responseHeaders;\n+    private final CosmosDiagnostics cosmosDiagnostics;\n+\n+    /**\n+     * Initializes a new instance of the {@link CosmosBulkItemResponse} class.\n+     */\n+    CosmosBulkItemResponse(String eTag,\n+                           double requestCharge,\n+                           ObjectNode resourceObject,\n+                           int statusCode,\n+                           Duration retryAfter,\n+                           int subStatusCode,\n+                           Map<String, String> responseHeaders,\n+                           CosmosDiagnostics cosmosDiagnostics) {\n+\n+        checkNotNull(statusCode, \"expected non-null statusCode\");\n+        checkNotNull(responseHeaders, \"expected non-null responseHeaders\");\n+\n+        this.eTag = eTag;\n+        this.requestCharge = requestCharge;\n+        this.resourceObject = resourceObject;\n+        this.statusCode = statusCode;\n+        this.retryAfter = retryAfter;\n+        this.subStatusCode = subStatusCode;\n+        this.responseHeaders = responseHeaders;\n+        this.cosmosDiagnostics = cosmosDiagnostics;\n+    }\n+\n+    /**\n+     * Gets the activity ID that identifies the server request made to execute this operation.\n+     *\n+     * @return the activity ID that identifies the server request made to execute this operation.\n+     */\n+    public String getActivityId() {\n+        return BatchExecUtils.getActivityId(this.responseHeaders);\n+    }\n+\n+    /**\n+     * Gets the entity tag associated with the current item.\n+     *\n+     * ETags are used for concurrency checking when updating resources.\n+     *\n+     * @return Entity tag associated with the current item.\n+     */\n+    public String getETag() {\n+        return this.eTag;\n+    }\n+\n+    /**\n+     * Gets the request charge as request units (RU) consumed by the current operation.\n+     * <p>\n+     * For more information about the RU and factors that can impact the effective charges please visit\n+     * <a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/request-units\">Request Units in Azure Cosmos DB</a>\n+     *\n+     * @return the request charge.\n+     */\n+    public double getRequestCharge() {\n+        return this.requestCharge;\n+    }\n+\n+    /**\n+     * Gets the item associated with the current result.\n+     *\n+     * @param <T> the type parameter\n+     *\n+     * @param type class type for which deserialization is needed.\n+     *\n+     * @return item associated with the current result.\n+     */\n+    public <T> T getItem(final Class<T> type) {\n+        T item = null;\n+\n+        if (this.getResourceObject() != null) {\n+            item = new JsonSerializable(this.getResourceObject()).toObject(type);\n+        }\n+\n+        return item;\n+    }\n+\n+    /**\n+     * Gets retry after.\n+     *\n+     * @return the retry after\n+     */\n+    public Duration getRetryAfterDuration() {\n+        return this.retryAfter;\n+    }\n+\n+    /**\n+     * Gets sub status code associated with the current result.\n+     *\n+     * @return the sub status code\n+     */\n+    public int getSubStatusCode() {\n+        return this.subStatusCode;\n+    }\n+\n+    /**\n+     * Gets a value indicating whether the current operation completed successfully.\n+     *\n+     * @return {@code true} if the current operation completed successfully; {@code false} otherwise.\n+     */\n+    public boolean isSuccessStatusCode() {\n+        return 200 <= this.statusCode && this.statusCode <= 299;\n+    }\n+\n+    /**\n+     * Gets the HTTP status code associated with the current result.\n+     *\n+     * @return the status code.\n+     */\n+    public int getStatusCode() {\n+        return this.statusCode;\n+    }\n+\n+    /**\n+     * Gets the cosmos diagnostic for this operation.\n+     *\n+     * @return the CosmosDiagnostics{@link CosmosDiagnostics}\n+     */\n+    public CosmosDiagnostics getCosmosDiagnostics() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyNzk0MQ=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODM1MzUzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozNDoyM1rOHp11zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzoyNToxOVrOHw8Pig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNTc4OA==", "bodyText": "now that we are setting partitionKeyRangeId explicitly how do we support partition split scenario?\nIf after populating pkrangeId here partition gets splitted how do we react? what would be the the sequence of actions on partition split?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r513635788", "createdAt": "2020-10-28T17:34:23Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -1328,6 +1330,8 @@ private RxDocumentServiceRequest addBatchHeaders(RxDocumentServiceRequest reques\n \n             request.setPartitionKeyInternal(partitionKeyInternal);\n             request.getHeaders().put(HttpConstants.HttpHeaders.PARTITION_KEY, Utils.escapeNonAscii(partitionKeyInternal.toJson()));\n+        } else if(serverBatchRequest instanceof PartitionKeyRangeServerBatchRequest) {\n+            request.setPartitionKeyRangeIdentity(new PartitionKeyRangeIdentity(((PartitionKeyRangeServerBatchRequest) serverBatchRequest).getPartitionKeyRangeId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1MzY0Mw==", "bodyText": "Right now we will just return a gone and we can expect user to retry. To support that retry we have to move sink before grouping operations or keep two sinks for different retries i.e. one for throttling and one for gone.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r513653643", "createdAt": "2020-10-28T18:00:16Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -1328,6 +1330,8 @@ private RxDocumentServiceRequest addBatchHeaders(RxDocumentServiceRequest reques\n \n             request.setPartitionKeyInternal(partitionKeyInternal);\n             request.getHeaders().put(HttpConstants.HttpHeaders.PARTITION_KEY, Utils.escapeNonAscii(partitionKeyInternal.toJson()));\n+        } else if(serverBatchRequest instanceof PartitionKeyRangeServerBatchRequest) {\n+            request.setPartitionKeyRangeIdentity(new PartitionKeyRangeIdentity(((PartitionKeyRangeServerBatchRequest) serverBatchRequest).getPartitionKeyRangeId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNTc4OA=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5NTI5OQ==", "bodyText": "I think we need to provide that retry-logic out-of-the-box (vs. expecting users to do it)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r515895299", "createdAt": "2020-11-02T11:02:07Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -1328,6 +1330,8 @@ private RxDocumentServiceRequest addBatchHeaders(RxDocumentServiceRequest reques\n \n             request.setPartitionKeyInternal(partitionKeyInternal);\n             request.getHeaders().put(HttpConstants.HttpHeaders.PARTITION_KEY, Utils.escapeNonAscii(partitionKeyInternal.toJson()));\n+        } else if(serverBatchRequest instanceof PartitionKeyRangeServerBatchRequest) {\n+            request.setPartitionKeyRangeIdentity(new PartitionKeyRangeIdentity(((PartitionKeyRangeServerBatchRequest) serverBatchRequest).getPartitionKeyRangeId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNTc4OA=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwNzAyNQ==", "bodyText": "The older bulk executor has support for partition splits... we should try to get at least the same with the new implementation.\nI think this whole retry logic might need some careful thought; ideally for any CosmosItemOperation that needs to be retried, it gets added back into the producer (Flux) after some initial logic that will take care of delays or handling partition splitting...", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r520307025", "createdAt": "2020-11-10T06:04:23Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -1328,6 +1330,8 @@ private RxDocumentServiceRequest addBatchHeaders(RxDocumentServiceRequest reques\n \n             request.setPartitionKeyInternal(partitionKeyInternal);\n             request.getHeaders().put(HttpConstants.HttpHeaders.PARTITION_KEY, Utils.escapeNonAscii(partitionKeyInternal.toJson()));\n+        } else if(serverBatchRequest instanceof PartitionKeyRangeServerBatchRequest) {\n+            request.setPartitionKeyRangeIdentity(new PartitionKeyRangeIdentity(((PartitionKeyRangeServerBatchRequest) serverBatchRequest).getPartitionKeyRangeId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNTc4OA=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxNTc2Nw==", "bodyText": "Do we get any delay information for split case? If yes we can add logic for it, otherwise we have retry for individual operations and does it only once.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r520315767", "createdAt": "2020-11-10T06:18:59Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -1328,6 +1330,8 @@ private RxDocumentServiceRequest addBatchHeaders(RxDocumentServiceRequest reques\n \n             request.setPartitionKeyInternal(partitionKeyInternal);\n             request.getHeaders().put(HttpConstants.HttpHeaders.PARTITION_KEY, Utils.escapeNonAscii(partitionKeyInternal.toJson()));\n+        } else if(serverBatchRequest instanceof PartitionKeyRangeServerBatchRequest) {\n+            request.setPartitionKeyRangeIdentity(new PartitionKeyRangeIdentity(((PartitionKeyRangeServerBatchRequest) serverBatchRequest).getPartitionKeyRangeId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNTc4OA=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyMTk0Mw==", "bodyText": "Yes, there's a substatus code that indicates the failure is caused by a split; see https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/PartitionProcessorImpl.java#L128", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r520321943", "createdAt": "2020-11-10T06:31:49Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -1328,6 +1330,8 @@ private RxDocumentServiceRequest addBatchHeaders(RxDocumentServiceRequest reques\n \n             request.setPartitionKeyInternal(partitionKeyInternal);\n             request.getHeaders().put(HttpConstants.HttpHeaders.PARTITION_KEY, Utils.escapeNonAscii(partitionKeyInternal.toJson()));\n+        } else if(serverBatchRequest instanceof PartitionKeyRangeServerBatchRequest) {\n+            request.setPartitionKeyRangeIdentity(new PartitionKeyRangeIdentity(((PartitionKeyRangeServerBatchRequest) serverBatchRequest).getPartitionKeyRangeId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNTc4OA=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyMzc3Ng==", "bodyText": "Yeah, so we are using it to put the operation in correct sink or if retry option is exhausted, return the exception.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r520323776", "createdAt": "2020-11-10T06:35:42Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -1328,6 +1330,8 @@ private RxDocumentServiceRequest addBatchHeaders(RxDocumentServiceRequest reques\n \n             request.setPartitionKeyInternal(partitionKeyInternal);\n             request.getHeaders().put(HttpConstants.HttpHeaders.PARTITION_KEY, Utils.escapeNonAscii(partitionKeyInternal.toJson()));\n+        } else if(serverBatchRequest instanceof PartitionKeyRangeServerBatchRequest) {\n+            request.setPartitionKeyRangeIdentity(new PartitionKeyRangeIdentity(((PartitionKeyRangeServerBatchRequest) serverBatchRequest).getPartitionKeyRangeId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNTc4OA=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkzMDUyNw==", "bodyText": "physical partitioning of data and partition split are internal details of our service implementation. We should not expose this to the end user as contract.\nThe sdk needs to retry on partition spit internally. we do this for other operations today.\nThis can go to a different PR, but without it we can't announce bulk as feature.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r520930527", "createdAt": "2020-11-10T23:04:57Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -1328,6 +1330,8 @@ private RxDocumentServiceRequest addBatchHeaders(RxDocumentServiceRequest reques\n \n             request.setPartitionKeyInternal(partitionKeyInternal);\n             request.getHeaders().put(HttpConstants.HttpHeaders.PARTITION_KEY, Utils.escapeNonAscii(partitionKeyInternal.toJson()));\n+        } else if(serverBatchRequest instanceof PartitionKeyRangeServerBatchRequest) {\n+            request.setPartitionKeyRangeIdentity(new PartitionKeyRangeIdentity(((PartitionKeyRangeServerBatchRequest) serverBatchRequest).getPartitionKeyRangeId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNTc4OA=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA4MDcxNA==", "bodyText": "we are retrying here. And I am keeping the retry policy in ItemBulkOperation but we are not returning ItemBulkOperation, we are returning CosmosItemOperation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r521080714", "createdAt": "2020-11-11T03:25:19Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -1328,6 +1330,8 @@ private RxDocumentServiceRequest addBatchHeaders(RxDocumentServiceRequest reques\n \n             request.setPartitionKeyInternal(partitionKeyInternal);\n             request.getHeaders().put(HttpConstants.HttpHeaders.PARTITION_KEY, Utils.escapeNonAscii(partitionKeyInternal.toJson()));\n+        } else if(serverBatchRequest instanceof PartitionKeyRangeServerBatchRequest) {\n+            request.setPartitionKeyRangeIdentity(new PartitionKeyRangeIdentity(((PartitionKeyRangeServerBatchRequest) serverBatchRequest).getPartitionKeyRangeId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNTc4OA=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODM3MDU0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BulkExecutorUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozODoyMlrOHp2AVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMjo0Nzo1NlrOHstQXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzODQ4NA==", "bodyText": "previously RxClientCollectionCache was only used in RxDocumentClientImp and we always ensured that the passed connectionLink is normalized on leading or ending \"/\".\nThat's important as it ensures due to a mismatch on leading or ending \"/\" we don't get a mismatch.\nWe should ensure we are doing normalization of the containerLink similarly here.\nCould you validate this?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r513638484", "createdAt": "2020-10-28T17:38:22Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BulkExecutorUtil.java", "diffHunk": "@@ -0,0 +1,149 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.batch;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.CosmosItemOperation;\n+import com.azure.cosmos.ThrottlingRetryOptions;\n+import com.azure.cosmos.TransactionalBatchOperationResult;\n+import com.azure.cosmos.implementation.AsyncDocumentClient;\n+import com.azure.cosmos.implementation.DocumentCollection;\n+import com.azure.cosmos.implementation.HttpConstants;\n+import com.azure.cosmos.implementation.IRetryPolicy;\n+import com.azure.cosmos.implementation.ResourceThrottleRetryPolicy;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.caches.RxClientCollectionCache;\n+import com.azure.cosmos.implementation.routing.CollectionRoutingMap;\n+import com.azure.cosmos.implementation.routing.PartitionKeyInternal;\n+import com.azure.cosmos.models.ModelBridgeInternal;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.models.PartitionKeyDefinition;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+import static com.azure.cosmos.implementation.routing.PartitionKeyInternalHelper.getEffectivePartitionKeyString;\n+\n+final class BulkExecutorUtil {\n+\n+    static ServerOperationBatchRequest createBatchRequest(List<CosmosItemOperation> operations, String partitionKeyRangeId) {\n+\n+        return PartitionKeyRangeServerBatchRequest.createBatchRequest(\n+            partitionKeyRangeId,\n+            operations,\n+            BatchRequestResponseConstant.MAX_DIRECT_MODE_BATCH_REQUEST_BODY_SIZE_IN_BYTES,\n+            BatchRequestResponseConstant.MAX_OPERATIONS_IN_DIRECT_MODE_BATCH_REQUEST);\n+    }\n+\n+    static void setRetryPolicyForBulk(CosmosItemOperation cosmosItemOperation, ThrottlingRetryOptions throttlingRetryOptions) {\n+        if(cosmosItemOperation instanceof ItemBulkOperation<?>) {\n+            final ItemBulkOperation<?> itemBulkOperation = (ItemBulkOperation<?>) cosmosItemOperation;\n+\n+            ResourceThrottleRetryPolicy resourceThrottleRetryPolicy = new ResourceThrottleRetryPolicy(\n+                throttlingRetryOptions.getMaxRetryAttemptsOnThrottledRequests(),\n+                throttlingRetryOptions.getMaxRetryWaitTime());\n+\n+            itemBulkOperation.setRetryPolicy(resourceThrottleRetryPolicy);\n+        } else {\n+            throw new UnsupportedOperationException(\"Unknown CosmosItemOperation.\");\n+        }\n+    }\n+\n+    static Mono<IRetryPolicy.ShouldRetryResult> shouldRetryForOperationResult(TransactionalBatchOperationResult result) {\n+\n+        checkNotNull(result, \"expected non-null result\");\n+        CosmosItemOperation cosmosItemOperation = result.getOperation();\n+\n+        if(cosmosItemOperation instanceof ItemBulkOperation<?>) {\n+\n+            // Create CosmosException for the next retry policy to understand:\n+            CosmosException exception = BridgeInternal.createCosmosException(\n+                result.getStatusCode(),\n+                null,\n+                BulkExecutorUtil.getResponseHeadersFromBatchOperationResult(result));\n+\n+            ItemBulkOperation<?> itemBulkOperation = (ItemBulkOperation<?>) cosmosItemOperation;\n+            return itemBulkOperation.getRetryPolicy().shouldRetry(exception);\n+        } else {\n+            throw new UnsupportedOperationException(\"Unknown CosmosItemOperation.\");\n+        }\n+    }\n+\n+    private static Map<String, String> getResponseHeadersFromBatchOperationResult(TransactionalBatchOperationResult result) {\n+        final Map<String, String> headers = new HashMap<>();\n+\n+        headers.put(HttpConstants.HttpHeaders.SUB_STATUS, String.valueOf(result.getSubStatusCode()));\n+        headers.put(HttpConstants.HttpHeaders.E_TAG, result.getETag());\n+        headers.put(HttpConstants.HttpHeaders.REQUEST_CHARGE, String.valueOf(result.getRequestCharge()));\n+\n+        if (result.getRetryAfterDuration() != null) {\n+            headers.put(HttpConstants.HttpHeaders.RETRY_AFTER_IN_MILLISECONDS, String.valueOf(result.getRetryAfterDuration().toMillis()));\n+        }\n+\n+        return headers;\n+    }\n+\n+    // TODO: metaDataDiagnosticContext is passed as null. Better way is to add this context to the cosmos diagnostic.\n+    static Mono<String> resolvePartitionKeyRangeId(\n+        AsyncDocumentClient docClientWrapper,\n+        CosmosAsyncContainer container,\n+        CosmosItemOperation operation) {\n+\n+        checkNotNull(operation, \"expected non-null operation\");\n+\n+        if(operation instanceof ItemBulkOperation<?>) {\n+            final ItemBulkOperation<?> itemBulkOperation = (ItemBulkOperation<?>) operation;\n+\n+            final Mono<String> pkRangeIdMono = BulkExecutorUtil.getCollectionInfoAsync(docClientWrapper, container)\n+                .flatMap(collection -> {\n+                    final PartitionKeyDefinition definition = collection.getPartitionKey();\n+                    final PartitionKeyInternal partitionKeyInternal = getPartitionKeyInternal(operation, definition);\n+                    itemBulkOperation.setPartitionKeyJson(partitionKeyInternal.toJson());\n+\n+                    return docClientWrapper.getPartitionKeyRangeCache()\n+                        .tryLookupAsync(null, collection.getResourceId(), null, null)\n+                        .map((Utils.ValueHolder<CollectionRoutingMap> routingMap) -> {\n+\n+                            return routingMap.v.getRangeByEffectivePartitionKey(\n+                                getEffectivePartitionKeyString(\n+                                    partitionKeyInternal,\n+                                    definition)).getId();\n+                        });\n+                });\n+\n+            return pkRangeIdMono;\n+        } else {\n+            throw new UnsupportedOperationException(\"Unknown CosmosItemOperation.\");\n+        }\n+    }\n+\n+    private static PartitionKeyInternal getPartitionKeyInternal(\n+        final CosmosItemOperation operation,\n+        final PartitionKeyDefinition partitionKeyDefinition) {\n+\n+        checkNotNull(operation, \"expected non-null operation\");\n+\n+        final PartitionKey partitionKey = operation.getPartitionKeyValue();\n+        if (partitionKey == null) {\n+            return ModelBridgeInternal.getNonePartitionKey(partitionKeyDefinition);\n+        } else {\n+            return BridgeInternal.getPartitionKeyInternal(partitionKey);\n+        }\n+    }\n+\n+    private static Mono<DocumentCollection> getCollectionInfoAsync(AsyncDocumentClient documentClient,\n+                                                                   CosmosAsyncContainer container) {\n+        final RxClientCollectionCache clientCollectionCache = documentClient.getCollectionCache();\n+        return clientCollectionCache\n+            .resolveByNameAsync(\n+                null,\n+                BridgeInternal.getLink(container),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY0MDg2Mg==", "bodyText": "Have used the same way we sanitize in RxDocumentClientImp, using Utils.joinPath(BridgeInternal.getLink(container), null). This should ensure the above condition is always satisified.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r516640862", "createdAt": "2020-11-03T12:47:56Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BulkExecutorUtil.java", "diffHunk": "@@ -0,0 +1,149 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.batch;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.CosmosItemOperation;\n+import com.azure.cosmos.ThrottlingRetryOptions;\n+import com.azure.cosmos.TransactionalBatchOperationResult;\n+import com.azure.cosmos.implementation.AsyncDocumentClient;\n+import com.azure.cosmos.implementation.DocumentCollection;\n+import com.azure.cosmos.implementation.HttpConstants;\n+import com.azure.cosmos.implementation.IRetryPolicy;\n+import com.azure.cosmos.implementation.ResourceThrottleRetryPolicy;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.caches.RxClientCollectionCache;\n+import com.azure.cosmos.implementation.routing.CollectionRoutingMap;\n+import com.azure.cosmos.implementation.routing.PartitionKeyInternal;\n+import com.azure.cosmos.models.ModelBridgeInternal;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.models.PartitionKeyDefinition;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+import static com.azure.cosmos.implementation.routing.PartitionKeyInternalHelper.getEffectivePartitionKeyString;\n+\n+final class BulkExecutorUtil {\n+\n+    static ServerOperationBatchRequest createBatchRequest(List<CosmosItemOperation> operations, String partitionKeyRangeId) {\n+\n+        return PartitionKeyRangeServerBatchRequest.createBatchRequest(\n+            partitionKeyRangeId,\n+            operations,\n+            BatchRequestResponseConstant.MAX_DIRECT_MODE_BATCH_REQUEST_BODY_SIZE_IN_BYTES,\n+            BatchRequestResponseConstant.MAX_OPERATIONS_IN_DIRECT_MODE_BATCH_REQUEST);\n+    }\n+\n+    static void setRetryPolicyForBulk(CosmosItemOperation cosmosItemOperation, ThrottlingRetryOptions throttlingRetryOptions) {\n+        if(cosmosItemOperation instanceof ItemBulkOperation<?>) {\n+            final ItemBulkOperation<?> itemBulkOperation = (ItemBulkOperation<?>) cosmosItemOperation;\n+\n+            ResourceThrottleRetryPolicy resourceThrottleRetryPolicy = new ResourceThrottleRetryPolicy(\n+                throttlingRetryOptions.getMaxRetryAttemptsOnThrottledRequests(),\n+                throttlingRetryOptions.getMaxRetryWaitTime());\n+\n+            itemBulkOperation.setRetryPolicy(resourceThrottleRetryPolicy);\n+        } else {\n+            throw new UnsupportedOperationException(\"Unknown CosmosItemOperation.\");\n+        }\n+    }\n+\n+    static Mono<IRetryPolicy.ShouldRetryResult> shouldRetryForOperationResult(TransactionalBatchOperationResult result) {\n+\n+        checkNotNull(result, \"expected non-null result\");\n+        CosmosItemOperation cosmosItemOperation = result.getOperation();\n+\n+        if(cosmosItemOperation instanceof ItemBulkOperation<?>) {\n+\n+            // Create CosmosException for the next retry policy to understand:\n+            CosmosException exception = BridgeInternal.createCosmosException(\n+                result.getStatusCode(),\n+                null,\n+                BulkExecutorUtil.getResponseHeadersFromBatchOperationResult(result));\n+\n+            ItemBulkOperation<?> itemBulkOperation = (ItemBulkOperation<?>) cosmosItemOperation;\n+            return itemBulkOperation.getRetryPolicy().shouldRetry(exception);\n+        } else {\n+            throw new UnsupportedOperationException(\"Unknown CosmosItemOperation.\");\n+        }\n+    }\n+\n+    private static Map<String, String> getResponseHeadersFromBatchOperationResult(TransactionalBatchOperationResult result) {\n+        final Map<String, String> headers = new HashMap<>();\n+\n+        headers.put(HttpConstants.HttpHeaders.SUB_STATUS, String.valueOf(result.getSubStatusCode()));\n+        headers.put(HttpConstants.HttpHeaders.E_TAG, result.getETag());\n+        headers.put(HttpConstants.HttpHeaders.REQUEST_CHARGE, String.valueOf(result.getRequestCharge()));\n+\n+        if (result.getRetryAfterDuration() != null) {\n+            headers.put(HttpConstants.HttpHeaders.RETRY_AFTER_IN_MILLISECONDS, String.valueOf(result.getRetryAfterDuration().toMillis()));\n+        }\n+\n+        return headers;\n+    }\n+\n+    // TODO: metaDataDiagnosticContext is passed as null. Better way is to add this context to the cosmos diagnostic.\n+    static Mono<String> resolvePartitionKeyRangeId(\n+        AsyncDocumentClient docClientWrapper,\n+        CosmosAsyncContainer container,\n+        CosmosItemOperation operation) {\n+\n+        checkNotNull(operation, \"expected non-null operation\");\n+\n+        if(operation instanceof ItemBulkOperation<?>) {\n+            final ItemBulkOperation<?> itemBulkOperation = (ItemBulkOperation<?>) operation;\n+\n+            final Mono<String> pkRangeIdMono = BulkExecutorUtil.getCollectionInfoAsync(docClientWrapper, container)\n+                .flatMap(collection -> {\n+                    final PartitionKeyDefinition definition = collection.getPartitionKey();\n+                    final PartitionKeyInternal partitionKeyInternal = getPartitionKeyInternal(operation, definition);\n+                    itemBulkOperation.setPartitionKeyJson(partitionKeyInternal.toJson());\n+\n+                    return docClientWrapper.getPartitionKeyRangeCache()\n+                        .tryLookupAsync(null, collection.getResourceId(), null, null)\n+                        .map((Utils.ValueHolder<CollectionRoutingMap> routingMap) -> {\n+\n+                            return routingMap.v.getRangeByEffectivePartitionKey(\n+                                getEffectivePartitionKeyString(\n+                                    partitionKeyInternal,\n+                                    definition)).getId();\n+                        });\n+                });\n+\n+            return pkRangeIdMono;\n+        } else {\n+            throw new UnsupportedOperationException(\"Unknown CosmosItemOperation.\");\n+        }\n+    }\n+\n+    private static PartitionKeyInternal getPartitionKeyInternal(\n+        final CosmosItemOperation operation,\n+        final PartitionKeyDefinition partitionKeyDefinition) {\n+\n+        checkNotNull(operation, \"expected non-null operation\");\n+\n+        final PartitionKey partitionKey = operation.getPartitionKeyValue();\n+        if (partitionKey == null) {\n+            return ModelBridgeInternal.getNonePartitionKey(partitionKeyDefinition);\n+        } else {\n+            return BridgeInternal.getPartitionKeyInternal(partitionKey);\n+        }\n+    }\n+\n+    private static Mono<DocumentCollection> getCollectionInfoAsync(AsyncDocumentClient documentClient,\n+                                                                   CosmosAsyncContainer container) {\n+        final RxClientCollectionCache clientCollectionCache = documentClient.getCollectionCache();\n+        return clientCollectionCache\n+            .resolveByNameAsync(\n+                null,\n+                BridgeInternal.getLink(container),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzODQ4NA=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODM3MjM5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BulkExecutorUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozODo1MlrOHp2BjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzozNjo0NFrOHw8roA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzODc5Nw==", "bodyText": "doesn't passing null, result in missing to add this step to request diagnostics?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r513638797", "createdAt": "2020-10-28T17:38:52Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BulkExecutorUtil.java", "diffHunk": "@@ -0,0 +1,149 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.batch;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.CosmosItemOperation;\n+import com.azure.cosmos.ThrottlingRetryOptions;\n+import com.azure.cosmos.TransactionalBatchOperationResult;\n+import com.azure.cosmos.implementation.AsyncDocumentClient;\n+import com.azure.cosmos.implementation.DocumentCollection;\n+import com.azure.cosmos.implementation.HttpConstants;\n+import com.azure.cosmos.implementation.IRetryPolicy;\n+import com.azure.cosmos.implementation.ResourceThrottleRetryPolicy;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.caches.RxClientCollectionCache;\n+import com.azure.cosmos.implementation.routing.CollectionRoutingMap;\n+import com.azure.cosmos.implementation.routing.PartitionKeyInternal;\n+import com.azure.cosmos.models.ModelBridgeInternal;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.models.PartitionKeyDefinition;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+import static com.azure.cosmos.implementation.routing.PartitionKeyInternalHelper.getEffectivePartitionKeyString;\n+\n+final class BulkExecutorUtil {\n+\n+    static ServerOperationBatchRequest createBatchRequest(List<CosmosItemOperation> operations, String partitionKeyRangeId) {\n+\n+        return PartitionKeyRangeServerBatchRequest.createBatchRequest(\n+            partitionKeyRangeId,\n+            operations,\n+            BatchRequestResponseConstant.MAX_DIRECT_MODE_BATCH_REQUEST_BODY_SIZE_IN_BYTES,\n+            BatchRequestResponseConstant.MAX_OPERATIONS_IN_DIRECT_MODE_BATCH_REQUEST);\n+    }\n+\n+    static void setRetryPolicyForBulk(CosmosItemOperation cosmosItemOperation, ThrottlingRetryOptions throttlingRetryOptions) {\n+        if(cosmosItemOperation instanceof ItemBulkOperation<?>) {\n+            final ItemBulkOperation<?> itemBulkOperation = (ItemBulkOperation<?>) cosmosItemOperation;\n+\n+            ResourceThrottleRetryPolicy resourceThrottleRetryPolicy = new ResourceThrottleRetryPolicy(\n+                throttlingRetryOptions.getMaxRetryAttemptsOnThrottledRequests(),\n+                throttlingRetryOptions.getMaxRetryWaitTime());\n+\n+            itemBulkOperation.setRetryPolicy(resourceThrottleRetryPolicy);\n+        } else {\n+            throw new UnsupportedOperationException(\"Unknown CosmosItemOperation.\");\n+        }\n+    }\n+\n+    static Mono<IRetryPolicy.ShouldRetryResult> shouldRetryForOperationResult(TransactionalBatchOperationResult result) {\n+\n+        checkNotNull(result, \"expected non-null result\");\n+        CosmosItemOperation cosmosItemOperation = result.getOperation();\n+\n+        if(cosmosItemOperation instanceof ItemBulkOperation<?>) {\n+\n+            // Create CosmosException for the next retry policy to understand:\n+            CosmosException exception = BridgeInternal.createCosmosException(\n+                result.getStatusCode(),\n+                null,\n+                BulkExecutorUtil.getResponseHeadersFromBatchOperationResult(result));\n+\n+            ItemBulkOperation<?> itemBulkOperation = (ItemBulkOperation<?>) cosmosItemOperation;\n+            return itemBulkOperation.getRetryPolicy().shouldRetry(exception);\n+        } else {\n+            throw new UnsupportedOperationException(\"Unknown CosmosItemOperation.\");\n+        }\n+    }\n+\n+    private static Map<String, String> getResponseHeadersFromBatchOperationResult(TransactionalBatchOperationResult result) {\n+        final Map<String, String> headers = new HashMap<>();\n+\n+        headers.put(HttpConstants.HttpHeaders.SUB_STATUS, String.valueOf(result.getSubStatusCode()));\n+        headers.put(HttpConstants.HttpHeaders.E_TAG, result.getETag());\n+        headers.put(HttpConstants.HttpHeaders.REQUEST_CHARGE, String.valueOf(result.getRequestCharge()));\n+\n+        if (result.getRetryAfterDuration() != null) {\n+            headers.put(HttpConstants.HttpHeaders.RETRY_AFTER_IN_MILLISECONDS, String.valueOf(result.getRetryAfterDuration().toMillis()));\n+        }\n+\n+        return headers;\n+    }\n+\n+    // TODO: metaDataDiagnosticContext is passed as null. Better way is to add this context to the cosmos diagnostic.\n+    static Mono<String> resolvePartitionKeyRangeId(\n+        AsyncDocumentClient docClientWrapper,\n+        CosmosAsyncContainer container,\n+        CosmosItemOperation operation) {\n+\n+        checkNotNull(operation, \"expected non-null operation\");\n+\n+        if(operation instanceof ItemBulkOperation<?>) {\n+            final ItemBulkOperation<?> itemBulkOperation = (ItemBulkOperation<?>) operation;\n+\n+            final Mono<String> pkRangeIdMono = BulkExecutorUtil.getCollectionInfoAsync(docClientWrapper, container)\n+                .flatMap(collection -> {\n+                    final PartitionKeyDefinition definition = collection.getPartitionKey();\n+                    final PartitionKeyInternal partitionKeyInternal = getPartitionKeyInternal(operation, definition);\n+                    itemBulkOperation.setPartitionKeyJson(partitionKeyInternal.toJson());\n+\n+                    return docClientWrapper.getPartitionKeyRangeCache()\n+                        .tryLookupAsync(null, collection.getResourceId(), null, null)\n+                        .map((Utils.ValueHolder<CollectionRoutingMap> routingMap) -> {\n+\n+                            return routingMap.v.getRangeByEffectivePartitionKey(\n+                                getEffectivePartitionKeyString(\n+                                    partitionKeyInternal,\n+                                    definition)).getId();\n+                        });\n+                });\n+\n+            return pkRangeIdMono;\n+        } else {\n+            throw new UnsupportedOperationException(\"Unknown CosmosItemOperation.\");\n+        }\n+    }\n+\n+    private static PartitionKeyInternal getPartitionKeyInternal(\n+        final CosmosItemOperation operation,\n+        final PartitionKeyDefinition partitionKeyDefinition) {\n+\n+        checkNotNull(operation, \"expected non-null operation\");\n+\n+        final PartitionKey partitionKey = operation.getPartitionKeyValue();\n+        if (partitionKey == null) {\n+            return ModelBridgeInternal.getNonePartitionKey(partitionKeyDefinition);\n+        } else {\n+            return BridgeInternal.getPartitionKeyInternal(partitionKey);\n+        }\n+    }\n+\n+    private static Mono<DocumentCollection> getCollectionInfoAsync(AsyncDocumentClient documentClient,\n+                                                                   CosmosAsyncContainer container) {\n+        final RxClientCollectionCache clientCollectionCache = documentClient.getCollectionCache();\n+        return clientCollectionCache\n+            .resolveByNameAsync(\n+                null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkzMDk3OA==", "bodyText": "I still see that this hasn't been done. could you please add a TODO in the code with your alias?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r520930978", "createdAt": "2020-11-10T23:06:04Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BulkExecutorUtil.java", "diffHunk": "@@ -0,0 +1,149 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.batch;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.CosmosItemOperation;\n+import com.azure.cosmos.ThrottlingRetryOptions;\n+import com.azure.cosmos.TransactionalBatchOperationResult;\n+import com.azure.cosmos.implementation.AsyncDocumentClient;\n+import com.azure.cosmos.implementation.DocumentCollection;\n+import com.azure.cosmos.implementation.HttpConstants;\n+import com.azure.cosmos.implementation.IRetryPolicy;\n+import com.azure.cosmos.implementation.ResourceThrottleRetryPolicy;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.caches.RxClientCollectionCache;\n+import com.azure.cosmos.implementation.routing.CollectionRoutingMap;\n+import com.azure.cosmos.implementation.routing.PartitionKeyInternal;\n+import com.azure.cosmos.models.ModelBridgeInternal;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.models.PartitionKeyDefinition;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+import static com.azure.cosmos.implementation.routing.PartitionKeyInternalHelper.getEffectivePartitionKeyString;\n+\n+final class BulkExecutorUtil {\n+\n+    static ServerOperationBatchRequest createBatchRequest(List<CosmosItemOperation> operations, String partitionKeyRangeId) {\n+\n+        return PartitionKeyRangeServerBatchRequest.createBatchRequest(\n+            partitionKeyRangeId,\n+            operations,\n+            BatchRequestResponseConstant.MAX_DIRECT_MODE_BATCH_REQUEST_BODY_SIZE_IN_BYTES,\n+            BatchRequestResponseConstant.MAX_OPERATIONS_IN_DIRECT_MODE_BATCH_REQUEST);\n+    }\n+\n+    static void setRetryPolicyForBulk(CosmosItemOperation cosmosItemOperation, ThrottlingRetryOptions throttlingRetryOptions) {\n+        if(cosmosItemOperation instanceof ItemBulkOperation<?>) {\n+            final ItemBulkOperation<?> itemBulkOperation = (ItemBulkOperation<?>) cosmosItemOperation;\n+\n+            ResourceThrottleRetryPolicy resourceThrottleRetryPolicy = new ResourceThrottleRetryPolicy(\n+                throttlingRetryOptions.getMaxRetryAttemptsOnThrottledRequests(),\n+                throttlingRetryOptions.getMaxRetryWaitTime());\n+\n+            itemBulkOperation.setRetryPolicy(resourceThrottleRetryPolicy);\n+        } else {\n+            throw new UnsupportedOperationException(\"Unknown CosmosItemOperation.\");\n+        }\n+    }\n+\n+    static Mono<IRetryPolicy.ShouldRetryResult> shouldRetryForOperationResult(TransactionalBatchOperationResult result) {\n+\n+        checkNotNull(result, \"expected non-null result\");\n+        CosmosItemOperation cosmosItemOperation = result.getOperation();\n+\n+        if(cosmosItemOperation instanceof ItemBulkOperation<?>) {\n+\n+            // Create CosmosException for the next retry policy to understand:\n+            CosmosException exception = BridgeInternal.createCosmosException(\n+                result.getStatusCode(),\n+                null,\n+                BulkExecutorUtil.getResponseHeadersFromBatchOperationResult(result));\n+\n+            ItemBulkOperation<?> itemBulkOperation = (ItemBulkOperation<?>) cosmosItemOperation;\n+            return itemBulkOperation.getRetryPolicy().shouldRetry(exception);\n+        } else {\n+            throw new UnsupportedOperationException(\"Unknown CosmosItemOperation.\");\n+        }\n+    }\n+\n+    private static Map<String, String> getResponseHeadersFromBatchOperationResult(TransactionalBatchOperationResult result) {\n+        final Map<String, String> headers = new HashMap<>();\n+\n+        headers.put(HttpConstants.HttpHeaders.SUB_STATUS, String.valueOf(result.getSubStatusCode()));\n+        headers.put(HttpConstants.HttpHeaders.E_TAG, result.getETag());\n+        headers.put(HttpConstants.HttpHeaders.REQUEST_CHARGE, String.valueOf(result.getRequestCharge()));\n+\n+        if (result.getRetryAfterDuration() != null) {\n+            headers.put(HttpConstants.HttpHeaders.RETRY_AFTER_IN_MILLISECONDS, String.valueOf(result.getRetryAfterDuration().toMillis()));\n+        }\n+\n+        return headers;\n+    }\n+\n+    // TODO: metaDataDiagnosticContext is passed as null. Better way is to add this context to the cosmos diagnostic.\n+    static Mono<String> resolvePartitionKeyRangeId(\n+        AsyncDocumentClient docClientWrapper,\n+        CosmosAsyncContainer container,\n+        CosmosItemOperation operation) {\n+\n+        checkNotNull(operation, \"expected non-null operation\");\n+\n+        if(operation instanceof ItemBulkOperation<?>) {\n+            final ItemBulkOperation<?> itemBulkOperation = (ItemBulkOperation<?>) operation;\n+\n+            final Mono<String> pkRangeIdMono = BulkExecutorUtil.getCollectionInfoAsync(docClientWrapper, container)\n+                .flatMap(collection -> {\n+                    final PartitionKeyDefinition definition = collection.getPartitionKey();\n+                    final PartitionKeyInternal partitionKeyInternal = getPartitionKeyInternal(operation, definition);\n+                    itemBulkOperation.setPartitionKeyJson(partitionKeyInternal.toJson());\n+\n+                    return docClientWrapper.getPartitionKeyRangeCache()\n+                        .tryLookupAsync(null, collection.getResourceId(), null, null)\n+                        .map((Utils.ValueHolder<CollectionRoutingMap> routingMap) -> {\n+\n+                            return routingMap.v.getRangeByEffectivePartitionKey(\n+                                getEffectivePartitionKeyString(\n+                                    partitionKeyInternal,\n+                                    definition)).getId();\n+                        });\n+                });\n+\n+            return pkRangeIdMono;\n+        } else {\n+            throw new UnsupportedOperationException(\"Unknown CosmosItemOperation.\");\n+        }\n+    }\n+\n+    private static PartitionKeyInternal getPartitionKeyInternal(\n+        final CosmosItemOperation operation,\n+        final PartitionKeyDefinition partitionKeyDefinition) {\n+\n+        checkNotNull(operation, \"expected non-null operation\");\n+\n+        final PartitionKey partitionKey = operation.getPartitionKeyValue();\n+        if (partitionKey == null) {\n+            return ModelBridgeInternal.getNonePartitionKey(partitionKeyDefinition);\n+        } else {\n+            return BridgeInternal.getPartitionKeyInternal(partitionKey);\n+        }\n+    }\n+\n+    private static Mono<DocumentCollection> getCollectionInfoAsync(AsyncDocumentClient documentClient,\n+                                                                   CosmosAsyncContainer container) {\n+        final RxClientCollectionCache clientCollectionCache = documentClient.getCollectionCache();\n+        return clientCollectionCache\n+            .resolveByNameAsync(\n+                null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzODc5Nw=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA4NzkwNA==", "bodyText": "Apologise Mo. Will add one. This all should be handled when we are adding diagnostic operation wise.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r521087904", "createdAt": "2020-11-11T03:36:44Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BulkExecutorUtil.java", "diffHunk": "@@ -0,0 +1,149 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.batch;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.CosmosItemOperation;\n+import com.azure.cosmos.ThrottlingRetryOptions;\n+import com.azure.cosmos.TransactionalBatchOperationResult;\n+import com.azure.cosmos.implementation.AsyncDocumentClient;\n+import com.azure.cosmos.implementation.DocumentCollection;\n+import com.azure.cosmos.implementation.HttpConstants;\n+import com.azure.cosmos.implementation.IRetryPolicy;\n+import com.azure.cosmos.implementation.ResourceThrottleRetryPolicy;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.caches.RxClientCollectionCache;\n+import com.azure.cosmos.implementation.routing.CollectionRoutingMap;\n+import com.azure.cosmos.implementation.routing.PartitionKeyInternal;\n+import com.azure.cosmos.models.ModelBridgeInternal;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.models.PartitionKeyDefinition;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+import static com.azure.cosmos.implementation.routing.PartitionKeyInternalHelper.getEffectivePartitionKeyString;\n+\n+final class BulkExecutorUtil {\n+\n+    static ServerOperationBatchRequest createBatchRequest(List<CosmosItemOperation> operations, String partitionKeyRangeId) {\n+\n+        return PartitionKeyRangeServerBatchRequest.createBatchRequest(\n+            partitionKeyRangeId,\n+            operations,\n+            BatchRequestResponseConstant.MAX_DIRECT_MODE_BATCH_REQUEST_BODY_SIZE_IN_BYTES,\n+            BatchRequestResponseConstant.MAX_OPERATIONS_IN_DIRECT_MODE_BATCH_REQUEST);\n+    }\n+\n+    static void setRetryPolicyForBulk(CosmosItemOperation cosmosItemOperation, ThrottlingRetryOptions throttlingRetryOptions) {\n+        if(cosmosItemOperation instanceof ItemBulkOperation<?>) {\n+            final ItemBulkOperation<?> itemBulkOperation = (ItemBulkOperation<?>) cosmosItemOperation;\n+\n+            ResourceThrottleRetryPolicy resourceThrottleRetryPolicy = new ResourceThrottleRetryPolicy(\n+                throttlingRetryOptions.getMaxRetryAttemptsOnThrottledRequests(),\n+                throttlingRetryOptions.getMaxRetryWaitTime());\n+\n+            itemBulkOperation.setRetryPolicy(resourceThrottleRetryPolicy);\n+        } else {\n+            throw new UnsupportedOperationException(\"Unknown CosmosItemOperation.\");\n+        }\n+    }\n+\n+    static Mono<IRetryPolicy.ShouldRetryResult> shouldRetryForOperationResult(TransactionalBatchOperationResult result) {\n+\n+        checkNotNull(result, \"expected non-null result\");\n+        CosmosItemOperation cosmosItemOperation = result.getOperation();\n+\n+        if(cosmosItemOperation instanceof ItemBulkOperation<?>) {\n+\n+            // Create CosmosException for the next retry policy to understand:\n+            CosmosException exception = BridgeInternal.createCosmosException(\n+                result.getStatusCode(),\n+                null,\n+                BulkExecutorUtil.getResponseHeadersFromBatchOperationResult(result));\n+\n+            ItemBulkOperation<?> itemBulkOperation = (ItemBulkOperation<?>) cosmosItemOperation;\n+            return itemBulkOperation.getRetryPolicy().shouldRetry(exception);\n+        } else {\n+            throw new UnsupportedOperationException(\"Unknown CosmosItemOperation.\");\n+        }\n+    }\n+\n+    private static Map<String, String> getResponseHeadersFromBatchOperationResult(TransactionalBatchOperationResult result) {\n+        final Map<String, String> headers = new HashMap<>();\n+\n+        headers.put(HttpConstants.HttpHeaders.SUB_STATUS, String.valueOf(result.getSubStatusCode()));\n+        headers.put(HttpConstants.HttpHeaders.E_TAG, result.getETag());\n+        headers.put(HttpConstants.HttpHeaders.REQUEST_CHARGE, String.valueOf(result.getRequestCharge()));\n+\n+        if (result.getRetryAfterDuration() != null) {\n+            headers.put(HttpConstants.HttpHeaders.RETRY_AFTER_IN_MILLISECONDS, String.valueOf(result.getRetryAfterDuration().toMillis()));\n+        }\n+\n+        return headers;\n+    }\n+\n+    // TODO: metaDataDiagnosticContext is passed as null. Better way is to add this context to the cosmos diagnostic.\n+    static Mono<String> resolvePartitionKeyRangeId(\n+        AsyncDocumentClient docClientWrapper,\n+        CosmosAsyncContainer container,\n+        CosmosItemOperation operation) {\n+\n+        checkNotNull(operation, \"expected non-null operation\");\n+\n+        if(operation instanceof ItemBulkOperation<?>) {\n+            final ItemBulkOperation<?> itemBulkOperation = (ItemBulkOperation<?>) operation;\n+\n+            final Mono<String> pkRangeIdMono = BulkExecutorUtil.getCollectionInfoAsync(docClientWrapper, container)\n+                .flatMap(collection -> {\n+                    final PartitionKeyDefinition definition = collection.getPartitionKey();\n+                    final PartitionKeyInternal partitionKeyInternal = getPartitionKeyInternal(operation, definition);\n+                    itemBulkOperation.setPartitionKeyJson(partitionKeyInternal.toJson());\n+\n+                    return docClientWrapper.getPartitionKeyRangeCache()\n+                        .tryLookupAsync(null, collection.getResourceId(), null, null)\n+                        .map((Utils.ValueHolder<CollectionRoutingMap> routingMap) -> {\n+\n+                            return routingMap.v.getRangeByEffectivePartitionKey(\n+                                getEffectivePartitionKeyString(\n+                                    partitionKeyInternal,\n+                                    definition)).getId();\n+                        });\n+                });\n+\n+            return pkRangeIdMono;\n+        } else {\n+            throw new UnsupportedOperationException(\"Unknown CosmosItemOperation.\");\n+        }\n+    }\n+\n+    private static PartitionKeyInternal getPartitionKeyInternal(\n+        final CosmosItemOperation operation,\n+        final PartitionKeyDefinition partitionKeyDefinition) {\n+\n+        checkNotNull(operation, \"expected non-null operation\");\n+\n+        final PartitionKey partitionKey = operation.getPartitionKeyValue();\n+        if (partitionKey == null) {\n+            return ModelBridgeInternal.getNonePartitionKey(partitionKeyDefinition);\n+        } else {\n+            return BridgeInternal.getPartitionKeyInternal(partitionKey);\n+        }\n+    }\n+\n+    private static Mono<DocumentCollection> getCollectionInfoAsync(AsyncDocumentClient documentClient,\n+                                                                   CosmosAsyncContainer container) {\n+        final RxClientCollectionCache clientCollectionCache = documentClient.getCollectionCache();\n+        return clientCollectionCache\n+            .resolveByNameAsync(\n+                null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzODc5Nw=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODQwMDM5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/PartitionKeyRangeServerBatchRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzo0NDo1OVrOHp2SLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxODowMjowMVrOHp3A0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY0MzA1Mg==", "bodyText": "still we are passing RxDocumentServiceRequest to the lower part of stack.\nPartitionKeyRangeServerBatchRequest at some point will be translated to a RxDocumentServiceRequest. am I right?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r513643052", "createdAt": "2020-10-28T17:44:59Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/PartitionKeyRangeServerBatchRequest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.batch;\n+\n+import com.azure.cosmos.CosmosItemOperation;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.List;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+public final class PartitionKeyRangeServerBatchRequest extends ServerBatchRequest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1NDk5NA==", "bodyText": "Yeah, this is just a container to get values when we are converting to RxDocumentServiceRequest.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r513654994", "createdAt": "2020-10-28T18:02:01Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/PartitionKeyRangeServerBatchRequest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.batch;\n+\n+import com.azure.cosmos.CosmosItemOperation;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.List;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+public final class PartitionKeyRangeServerBatchRequest extends ServerBatchRequest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY0MzA1Mg=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODQxNTY3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/PartitionKeyRangeServerBatchRequest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzo0ODoyMVrOHp2bjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzozODowMlrOHw8uww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY0NTQ1NQ==", "bodyText": "PartitionKeyRangeServerBatchRequest at some point will be translated to a RxDocumentServiceRequest. right? how does partition split proofing work?\nPartitionKeyRangeServerBatchRequest may contain multiple documents. we create one RxDocumentServiceRequest out of all those documents. now if a partition split happens we cannot just retry the same RxDocumentServiceRequest as some documents may go to a left child some to the right child partition. how are we handling that scenario with retries?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r513645455", "createdAt": "2020-10-28T17:48:21Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/PartitionKeyRangeServerBatchRequest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.batch;\n+\n+import com.azure.cosmos.CosmosItemOperation;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.List;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+public final class PartitionKeyRangeServerBatchRequest extends ServerBatchRequest {\n+\n+    private final String partitionKeyRangeId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwOTA5Mg==", "bodyText": "+1 - we need a separate retry policy that will cover splitting the individual operations into the \"right\" partition. I assume this means we need to back-channel documents impacted into a GoneRetryQueue (which is handled in parallel with the incoming flux of operations). Bulk executor library is handling this similarly...", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r515909092", "createdAt": "2020-11-02T11:28:18Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/PartitionKeyRangeServerBatchRequest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.batch;\n+\n+import com.azure.cosmos.CosmosItemOperation;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.List;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+public final class PartitionKeyRangeServerBatchRequest extends ServerBatchRequest {\n+\n+    private final String partitionKeyRangeId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY0NTQ1NQ=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkzNTEyMw==", "bodyText": "Have handled it using a sink, which will re-evaluate the partition key range id. And we definitely need sink for overflows as handling overflow parallelly can multiple the parallelism factor, so seems fine to use it in case of Gone also.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r515935123", "createdAt": "2020-11-02T12:22:38Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/PartitionKeyRangeServerBatchRequest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.batch;\n+\n+import com.azure.cosmos.CosmosItemOperation;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.List;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+public final class PartitionKeyRangeServerBatchRequest extends ServerBatchRequest {\n+\n+    private final String partitionKeyRangeId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY0NTQ1NQ=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkzMzA2Mg==", "bodyText": "@rakkuma we need tests for partition split. please add TODO and create github item to track this.\nwithout partition split support we cannot announce bulk.\n\nmocked unit tests: see DocumentProducerTest as a mocked unit tests for partition split on quer.\nend to end integration tests. see ReadMyWritesConsistencyTest as a e2e tests which tests partition split. essentially some of our CIs target prod, you can scale the throughput of the cosmos container which will result in partition split.\n\nI think tests for partition split and its implementation require more work. please capture this work after this PR gets in.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r520933062", "createdAt": "2020-11-10T23:11:29Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/PartitionKeyRangeServerBatchRequest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.batch;\n+\n+import com.azure.cosmos.CosmosItemOperation;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.List;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+public final class PartitionKeyRangeServerBatchRequest extends ServerBatchRequest {\n+\n+    private final String partitionKeyRangeId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY0NTQ1NQ=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA4ODcwNw==", "bodyText": "Partition split is handled already. Yeah the test case is remaining. I will try to add those in this PR only. Thanks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r521088707", "createdAt": "2020-11-11T03:38:02Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/PartitionKeyRangeServerBatchRequest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.batch;\n+\n+import com.azure.cosmos.CosmosItemOperation;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.List;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+public final class PartitionKeyRangeServerBatchRequest extends ServerBatchRequest {\n+\n+    private final String partitionKeyRangeId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY0NTQ1NQ=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODQyMjMwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosBulkTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzo0OTo1MFrOHp2fsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMzozNzoxNVrOHsfS7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY0NjUxMg==", "bodyText": "could you please also add tests for case when the input flux cosmosItemOperationFlux errors.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r513646512", "createdAt": "2020-10-28T17:49:50Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosBulkTest.java", "diffHunk": "@@ -0,0 +1,401 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.models.PartitionKey;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import org.assertj.core.api.Assertions;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class CosmosBulkTest extends BatchTestBase {\n+\n+    private CosmosAsyncClient bulkClient;\n+    private CosmosAsyncContainer bulkAsyncContainer;\n+\n+    @Factory(dataProvider = \"clientBuildersWithDirectSession\")\n+    public CosmosBulkTest(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }\n+\n+    @BeforeClass(groups = {\"simple\"}, timeOut = SETUP_TIMEOUT)\n+    public void before_CosmosBulkTest() {\n+        assertThat(this.bulkClient).isNull();\n+        this.bulkClient = getClientBuilder().buildAsyncClient();\n+        bulkAsyncContainer = getSharedMultiPartitionCosmosContainer(this.bulkClient);\n+    }\n+\n+    @AfterClass(groups = {\"simple\"}, timeOut = SHUTDOWN_TIMEOUT, alwaysRun = true)\n+    public void afterClass() {\n+        safeCloseAsync(this.bulkClient);\n+    }\n+\n+    @Test(groups = {\"simple\"}, timeOut = TIMEOUT)\n+    public void createItem_withBulk() {\n+        int totalRequest = getTotalRequest();\n+\n+        Flux<CosmosItemOperation> cosmosItemOperationFlux = Flux.merge(\n+            Flux.range(0, totalRequest).map(i -> {\n+                String partitionKey = UUID.randomUUID().toString();\n+                TestDoc testDoc = this.populateTestDoc(partitionKey);\n+\n+                return BulkProcessingUtil.getBulkCreateItemOperation(testDoc, new PartitionKey(partitionKey));\n+            }),\n+            Flux.range(0, totalRequest).map(i -> {\n+                String partitionKey = UUID.randomUUID().toString();\n+                EventDoc eventDoc = new EventDoc(UUID.randomUUID().toString(), 2, 4, \"type1\", partitionKey);\n+\n+                return BulkProcessingUtil.getBulkCreateItemOperation(eventDoc, new PartitionKey(partitionKey));\n+            }));\n+\n+        BulkProcessingOptions<CosmosBulkTest> bulkProcessingOptions = new BulkProcessingOptions<>();\n+        bulkProcessingOptions.setMaxMicroBatchSize(100);\n+        bulkProcessingOptions.setMaxMicroBatchConcurrency(5);\n+\n+        Flux<CosmosBulkOperationRequestAndResponse<CosmosBulkTest>> responseFlux = bulkAsyncContainer\n+            .processBulkOperations(cosmosItemOperationFlux, bulkProcessingOptions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxMjE0Mw==", "bodyText": "Have added one Mo and will make it better. Right now we are eating up the errors passed, and I cannot find another way. I wanted to have a response for it too, with the operation/response null and user passed exception in CosmosBulkOperationResponse. Is ignoring the error signal a valid way?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r516412143", "createdAt": "2020-11-03T03:37:15Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosBulkTest.java", "diffHunk": "@@ -0,0 +1,401 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.models.PartitionKey;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import org.assertj.core.api.Assertions;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class CosmosBulkTest extends BatchTestBase {\n+\n+    private CosmosAsyncClient bulkClient;\n+    private CosmosAsyncContainer bulkAsyncContainer;\n+\n+    @Factory(dataProvider = \"clientBuildersWithDirectSession\")\n+    public CosmosBulkTest(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }\n+\n+    @BeforeClass(groups = {\"simple\"}, timeOut = SETUP_TIMEOUT)\n+    public void before_CosmosBulkTest() {\n+        assertThat(this.bulkClient).isNull();\n+        this.bulkClient = getClientBuilder().buildAsyncClient();\n+        bulkAsyncContainer = getSharedMultiPartitionCosmosContainer(this.bulkClient);\n+    }\n+\n+    @AfterClass(groups = {\"simple\"}, timeOut = SHUTDOWN_TIMEOUT, alwaysRun = true)\n+    public void afterClass() {\n+        safeCloseAsync(this.bulkClient);\n+    }\n+\n+    @Test(groups = {\"simple\"}, timeOut = TIMEOUT)\n+    public void createItem_withBulk() {\n+        int totalRequest = getTotalRequest();\n+\n+        Flux<CosmosItemOperation> cosmosItemOperationFlux = Flux.merge(\n+            Flux.range(0, totalRequest).map(i -> {\n+                String partitionKey = UUID.randomUUID().toString();\n+                TestDoc testDoc = this.populateTestDoc(partitionKey);\n+\n+                return BulkProcessingUtil.getBulkCreateItemOperation(testDoc, new PartitionKey(partitionKey));\n+            }),\n+            Flux.range(0, totalRequest).map(i -> {\n+                String partitionKey = UUID.randomUUID().toString();\n+                EventDoc eventDoc = new EventDoc(UUID.randomUUID().toString(), 2, 4, \"type1\", partitionKey);\n+\n+                return BulkProcessingUtil.getBulkCreateItemOperation(eventDoc, new PartitionKey(partitionKey));\n+            }));\n+\n+        BulkProcessingOptions<CosmosBulkTest> bulkProcessingOptions = new BulkProcessingOptions<>();\n+        bulkProcessingOptions.setMaxMicroBatchSize(100);\n+        bulkProcessingOptions.setMaxMicroBatchConcurrency(5);\n+\n+        Flux<CosmosBulkOperationRequestAndResponse<CosmosBulkTest>> responseFlux = bulkAsyncContainer\n+            .processBulkOperations(cosmosItemOperationFlux, bulkProcessingOptions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY0NjUxMg=="}, "originalCommit": {"oid": "83543a6cb9517cf9945c47d5b0ea3c93d1730d55"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzA1OTY2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkItemResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMDo1Njo1NFrOHr_k3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMjo0NjowMVrOHstL_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5MjQ0Ng==", "bodyText": "200 >= instead of <=", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r515892446", "createdAt": "2020-11-02T10:56:54Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkItemResponse.java", "diffHunk": "@@ -0,0 +1,189 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.implementation.batch.BatchExecUtils;\n+import com.azure.cosmos.util.Beta;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import reactor.core.publisher.Flux;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Response of a {@link CosmosItemOperation} request when processed using Bulk by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)}.\n+ *\n+ */\n+@Beta(Beta.SinceVersion.V4_7_0)\n+public final class CosmosBulkItemResponse {\n+\n+    private final String eTag;\n+    private final double requestCharge;\n+    private final ObjectNode resourceObject;\n+    private final int statusCode;\n+    private final Duration retryAfter;\n+    private final int subStatusCode;\n+    private final Map<String, String> responseHeaders;\n+    private final CosmosDiagnostics cosmosDiagnostics;\n+\n+    /**\n+     * Initializes a new instance of the {@link CosmosBulkItemResponse} class.\n+     */\n+    CosmosBulkItemResponse(String eTag,\n+                           double requestCharge,\n+                           ObjectNode resourceObject,\n+                           int statusCode,\n+                           Duration retryAfter,\n+                           int subStatusCode,\n+                           Map<String, String> responseHeaders,\n+                           CosmosDiagnostics cosmosDiagnostics) {\n+\n+        checkNotNull(statusCode, \"expected non-null statusCode\");\n+        checkNotNull(responseHeaders, \"expected non-null responseHeaders\");\n+\n+        this.eTag = eTag;\n+        this.requestCharge = requestCharge;\n+        this.resourceObject = resourceObject;\n+        this.statusCode = statusCode;\n+        this.retryAfter = retryAfter;\n+        this.subStatusCode = subStatusCode;\n+        this.responseHeaders = responseHeaders;\n+        this.cosmosDiagnostics = cosmosDiagnostics;\n+    }\n+\n+    /**\n+     * Gets the activity ID that identifies the server request made to execute this operation.\n+     *\n+     * @return the activity ID that identifies the server request made to execute this operation.\n+     */\n+    public String getActivityId() {\n+        return BatchExecUtils.getActivityId(this.responseHeaders);\n+    }\n+\n+    /**\n+     * Gets the entity tag associated with the current item.\n+     *\n+     * ETags are used for concurrency checking when updating resources.\n+     *\n+     * @return Entity tag associated with the current item.\n+     */\n+    public String getETag() {\n+        return this.eTag;\n+    }\n+\n+    /**\n+     * Gets the request charge as request units (RU) consumed by the current operation.\n+     * <p>\n+     * For more information about the RU and factors that can impact the effective charges please visit\n+     * <a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/request-units\">Request Units in Azure Cosmos DB</a>\n+     *\n+     * @return the request charge.\n+     */\n+    public double getRequestCharge() {\n+        return this.requestCharge;\n+    }\n+\n+    /**\n+     * Gets the item associated with the current result.\n+     *\n+     * @param <T> the type parameter\n+     *\n+     * @param type class type for which deserialization is needed.\n+     *\n+     * @return item associated with the current result.\n+     */\n+    public <T> T getItem(final Class<T> type) {\n+        T item = null;\n+\n+        if (this.getResourceObject() != null) {\n+            item = new JsonSerializable(this.getResourceObject()).toObject(type);\n+        }\n+\n+        return item;\n+    }\n+\n+    /**\n+     * Gets retry after.\n+     *\n+     * @return the retry after\n+     */\n+    public Duration getRetryAfterDuration() {\n+        return this.retryAfter;\n+    }\n+\n+    /**\n+     * Gets sub status code associated with the current result.\n+     *\n+     * @return the sub status code\n+     */\n+    public int getSubStatusCode() {\n+        return this.subStatusCode;\n+    }\n+\n+    /**\n+     * Gets a value indicating whether the current operation completed successfully.\n+     *\n+     * @return {@code true} if the current operation completed successfully; {@code false} otherwise.\n+     */\n+    public boolean isSuccessStatusCode() {\n+        return 200 <= this.statusCode && this.statusCode <= 299;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19697287761e083bfb1e45d7f26060b144a94a65"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYzOTc0Mg==", "bodyText": "Done. Thanks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r516639742", "createdAt": "2020-11-03T12:46:01Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkItemResponse.java", "diffHunk": "@@ -0,0 +1,189 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.implementation.batch.BatchExecUtils;\n+import com.azure.cosmos.util.Beta;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import reactor.core.publisher.Flux;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Response of a {@link CosmosItemOperation} request when processed using Bulk by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)}.\n+ *\n+ */\n+@Beta(Beta.SinceVersion.V4_7_0)\n+public final class CosmosBulkItemResponse {\n+\n+    private final String eTag;\n+    private final double requestCharge;\n+    private final ObjectNode resourceObject;\n+    private final int statusCode;\n+    private final Duration retryAfter;\n+    private final int subStatusCode;\n+    private final Map<String, String> responseHeaders;\n+    private final CosmosDiagnostics cosmosDiagnostics;\n+\n+    /**\n+     * Initializes a new instance of the {@link CosmosBulkItemResponse} class.\n+     */\n+    CosmosBulkItemResponse(String eTag,\n+                           double requestCharge,\n+                           ObjectNode resourceObject,\n+                           int statusCode,\n+                           Duration retryAfter,\n+                           int subStatusCode,\n+                           Map<String, String> responseHeaders,\n+                           CosmosDiagnostics cosmosDiagnostics) {\n+\n+        checkNotNull(statusCode, \"expected non-null statusCode\");\n+        checkNotNull(responseHeaders, \"expected non-null responseHeaders\");\n+\n+        this.eTag = eTag;\n+        this.requestCharge = requestCharge;\n+        this.resourceObject = resourceObject;\n+        this.statusCode = statusCode;\n+        this.retryAfter = retryAfter;\n+        this.subStatusCode = subStatusCode;\n+        this.responseHeaders = responseHeaders;\n+        this.cosmosDiagnostics = cosmosDiagnostics;\n+    }\n+\n+    /**\n+     * Gets the activity ID that identifies the server request made to execute this operation.\n+     *\n+     * @return the activity ID that identifies the server request made to execute this operation.\n+     */\n+    public String getActivityId() {\n+        return BatchExecUtils.getActivityId(this.responseHeaders);\n+    }\n+\n+    /**\n+     * Gets the entity tag associated with the current item.\n+     *\n+     * ETags are used for concurrency checking when updating resources.\n+     *\n+     * @return Entity tag associated with the current item.\n+     */\n+    public String getETag() {\n+        return this.eTag;\n+    }\n+\n+    /**\n+     * Gets the request charge as request units (RU) consumed by the current operation.\n+     * <p>\n+     * For more information about the RU and factors that can impact the effective charges please visit\n+     * <a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/request-units\">Request Units in Azure Cosmos DB</a>\n+     *\n+     * @return the request charge.\n+     */\n+    public double getRequestCharge() {\n+        return this.requestCharge;\n+    }\n+\n+    /**\n+     * Gets the item associated with the current result.\n+     *\n+     * @param <T> the type parameter\n+     *\n+     * @param type class type for which deserialization is needed.\n+     *\n+     * @return item associated with the current result.\n+     */\n+    public <T> T getItem(final Class<T> type) {\n+        T item = null;\n+\n+        if (this.getResourceObject() != null) {\n+            item = new JsonSerializable(this.getResourceObject()).toObject(type);\n+        }\n+\n+        return item;\n+    }\n+\n+    /**\n+     * Gets retry after.\n+     *\n+     * @return the retry after\n+     */\n+    public Duration getRetryAfterDuration() {\n+        return this.retryAfter;\n+    }\n+\n+    /**\n+     * Gets sub status code associated with the current result.\n+     *\n+     * @return the sub status code\n+     */\n+    public int getSubStatusCode() {\n+        return this.subStatusCode;\n+    }\n+\n+    /**\n+     * Gets a value indicating whether the current operation completed successfully.\n+     *\n+     * @return {@code true} if the current operation completed successfully; {@code false} otherwise.\n+     */\n+    public boolean isSuccessStatusCode() {\n+        return 200 <= this.statusCode && this.statusCode <= 299;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5MjQ0Ng=="}, "originalCommit": {"oid": "19697287761e083bfb1e45d7f26060b144a94a65"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzA2OTc2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkOperationRequestAndResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMDo1OTozOFrOHr_q2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMjo0NjoxOVrOHstMow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5Mzk3Nw==", "bodyText": "IMO CosmosBulkOperationResposne is sufficient - like in HttpClient's API HttpResponseMessage also has a link back to request.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r515893977", "createdAt": "2020-11-02T10:59:38Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkOperationRequestAndResponse.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.util.Beta;\n+import reactor.core.publisher.Flux;\n+\n+/**\n+ * Request, response and the exception(if any) for a {@link CosmosItemOperation} request when processed using Bulk by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)}.\n+ */\n+@Beta(Beta.SinceVersion.V4_7_0)\n+public final class CosmosBulkOperationRequestAndResponse<TContext> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19697287761e083bfb1e45d7f26060b144a94a65"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYzOTkwNw==", "bodyText": "Fixed. Thanks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r516639907", "createdAt": "2020-11-03T12:46:19Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkOperationRequestAndResponse.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.util.Beta;\n+import reactor.core.publisher.Flux;\n+\n+/**\n+ * Request, response and the exception(if any) for a {@link CosmosItemOperation} request when processed using Bulk by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)}.\n+ */\n+@Beta(Beta.SinceVersion.V4_7_0)\n+public final class CosmosBulkOperationRequestAndResponse<TContext> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5Mzk3Nw=="}, "originalCommit": {"oid": "19697287761e083bfb1e45d7f26060b144a94a65"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzA3MzAwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkOperationRequestAndResponse.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMTowMDoyN1rOHr_srg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNjozOTo0NFrOH1fFtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5NDQ0Ng==", "bodyText": "Do we have to keep this as Throwable - or can we make it CosmosException? When would it ever contain a Throwable which is not wrapped as CosmosException?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r515894446", "createdAt": "2020-11-02T11:00:27Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkOperationRequestAndResponse.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.util.Beta;\n+import reactor.core.publisher.Flux;\n+\n+/**\n+ * Request, response and the exception(if any) for a {@link CosmosItemOperation} request when processed using Bulk by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)}.\n+ */\n+@Beta(Beta.SinceVersion.V4_7_0)\n+public final class CosmosBulkOperationRequestAndResponse<TContext> {\n+\n+    private final CosmosItemOperation operation;\n+    private final CosmosBulkItemResponse response;\n+    private final Throwable throwable;\n+    private final TContext batchContext;\n+\n+    /**\n+     * Initialises a new instance of {@link CosmosBulkOperationRequestAndResponse}.\n+     *\n+     * @param operation the {@link CosmosItemOperation} for which this response object has values.\n+     * @param response the {@link CosmosBulkItemResponse} the bulk response.\n+     * @param batchContext the context of this bulk request.\n+     */\n+    CosmosBulkOperationRequestAndResponse(CosmosItemOperation operation, CosmosBulkItemResponse response, TContext batchContext) {\n+        this.operation = operation;\n+        this.response = response;\n+        this.throwable = null;\n+        this.batchContext = batchContext;\n+    }\n+\n+    /**\n+     * Initialises a new instance of {@link CosmosBulkOperationRequestAndResponse}.\n+     *\n+     * @param operation the {@link CosmosItemOperation} for which this response object has values.\n+     * @param throwable the {@link Throwable} for this request.\n+     * @param batchContext the context of this bulk request.\n+     */\n+    CosmosBulkOperationRequestAndResponse(CosmosItemOperation operation, Throwable throwable, TContext batchContext) {\n+        this.operation = operation;\n+        this.response = null;\n+        this.throwable = throwable;\n+        this.batchContext = batchContext;\n+    }\n+\n+    public CosmosItemOperation getOperation() {\n+        return operation;\n+    }\n+\n+    public CosmosBulkItemResponse getResponse() {\n+        return response;\n+    }\n+\n+    public Throwable getThrowable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19697287761e083bfb1e45d7f26060b144a94a65"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk0OTY5MQ==", "bodyText": "Ideally we can keep CosmosException. But At most of the places I can see in try/catch we put Exception instead of CosmosException. So I am not sure if we should keep CosmosException?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r515949691", "createdAt": "2020-11-02T12:51:34Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkOperationRequestAndResponse.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.util.Beta;\n+import reactor.core.publisher.Flux;\n+\n+/**\n+ * Request, response and the exception(if any) for a {@link CosmosItemOperation} request when processed using Bulk by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)}.\n+ */\n+@Beta(Beta.SinceVersion.V4_7_0)\n+public final class CosmosBulkOperationRequestAndResponse<TContext> {\n+\n+    private final CosmosItemOperation operation;\n+    private final CosmosBulkItemResponse response;\n+    private final Throwable throwable;\n+    private final TContext batchContext;\n+\n+    /**\n+     * Initialises a new instance of {@link CosmosBulkOperationRequestAndResponse}.\n+     *\n+     * @param operation the {@link CosmosItemOperation} for which this response object has values.\n+     * @param response the {@link CosmosBulkItemResponse} the bulk response.\n+     * @param batchContext the context of this bulk request.\n+     */\n+    CosmosBulkOperationRequestAndResponse(CosmosItemOperation operation, CosmosBulkItemResponse response, TContext batchContext) {\n+        this.operation = operation;\n+        this.response = response;\n+        this.throwable = null;\n+        this.batchContext = batchContext;\n+    }\n+\n+    /**\n+     * Initialises a new instance of {@link CosmosBulkOperationRequestAndResponse}.\n+     *\n+     * @param operation the {@link CosmosItemOperation} for which this response object has values.\n+     * @param throwable the {@link Throwable} for this request.\n+     * @param batchContext the context of this bulk request.\n+     */\n+    CosmosBulkOperationRequestAndResponse(CosmosItemOperation operation, Throwable throwable, TContext batchContext) {\n+        this.operation = operation;\n+        this.response = null;\n+        this.throwable = throwable;\n+        this.batchContext = batchContext;\n+    }\n+\n+    public CosmosItemOperation getOperation() {\n+        return operation;\n+    }\n+\n+    public CosmosBulkItemResponse getResponse() {\n+        return response;\n+    }\n+\n+    public Throwable getThrowable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5NDQ0Ng=="}, "originalCommit": {"oid": "19697287761e083bfb1e45d7f26060b144a94a65"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkzNDI5OQ==", "bodyText": "I think it would be better to translate to CosmosException or at least Exception.\nthere are very few errors which are Throwable but not Exception. (e.g. StackOverFlowError or OutofMemeryError).\nif you get a throwable which is not exception you should fail the whole operation rather than the individual request/response.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r520934299", "createdAt": "2020-11-10T23:14:42Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkOperationRequestAndResponse.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.util.Beta;\n+import reactor.core.publisher.Flux;\n+\n+/**\n+ * Request, response and the exception(if any) for a {@link CosmosItemOperation} request when processed using Bulk by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)}.\n+ */\n+@Beta(Beta.SinceVersion.V4_7_0)\n+public final class CosmosBulkOperationRequestAndResponse<TContext> {\n+\n+    private final CosmosItemOperation operation;\n+    private final CosmosBulkItemResponse response;\n+    private final Throwable throwable;\n+    private final TContext batchContext;\n+\n+    /**\n+     * Initialises a new instance of {@link CosmosBulkOperationRequestAndResponse}.\n+     *\n+     * @param operation the {@link CosmosItemOperation} for which this response object has values.\n+     * @param response the {@link CosmosBulkItemResponse} the bulk response.\n+     * @param batchContext the context of this bulk request.\n+     */\n+    CosmosBulkOperationRequestAndResponse(CosmosItemOperation operation, CosmosBulkItemResponse response, TContext batchContext) {\n+        this.operation = operation;\n+        this.response = response;\n+        this.throwable = null;\n+        this.batchContext = batchContext;\n+    }\n+\n+    /**\n+     * Initialises a new instance of {@link CosmosBulkOperationRequestAndResponse}.\n+     *\n+     * @param operation the {@link CosmosItemOperation} for which this response object has values.\n+     * @param throwable the {@link Throwable} for this request.\n+     * @param batchContext the context of this bulk request.\n+     */\n+    CosmosBulkOperationRequestAndResponse(CosmosItemOperation operation, Throwable throwable, TContext batchContext) {\n+        this.operation = operation;\n+        this.response = null;\n+        this.throwable = throwable;\n+        this.batchContext = batchContext;\n+    }\n+\n+    public CosmosItemOperation getOperation() {\n+        return operation;\n+    }\n+\n+    public CosmosBulkItemResponse getResponse() {\n+        return response;\n+    }\n+\n+    public Throwable getThrowable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5NDQ0Ng=="}, "originalCommit": {"oid": "19697287761e083bfb1e45d7f26060b144a94a65"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg0NTk0Mw==", "bodyText": "Sure. Exception is cool. will do it. Thanks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r525845943", "createdAt": "2020-11-18T06:39:44Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkOperationRequestAndResponse.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.util.Beta;\n+import reactor.core.publisher.Flux;\n+\n+/**\n+ * Request, response and the exception(if any) for a {@link CosmosItemOperation} request when processed using Bulk by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)}.\n+ */\n+@Beta(Beta.SinceVersion.V4_7_0)\n+public final class CosmosBulkOperationRequestAndResponse<TContext> {\n+\n+    private final CosmosItemOperation operation;\n+    private final CosmosBulkItemResponse response;\n+    private final Throwable throwable;\n+    private final TContext batchContext;\n+\n+    /**\n+     * Initialises a new instance of {@link CosmosBulkOperationRequestAndResponse}.\n+     *\n+     * @param operation the {@link CosmosItemOperation} for which this response object has values.\n+     * @param response the {@link CosmosBulkItemResponse} the bulk response.\n+     * @param batchContext the context of this bulk request.\n+     */\n+    CosmosBulkOperationRequestAndResponse(CosmosItemOperation operation, CosmosBulkItemResponse response, TContext batchContext) {\n+        this.operation = operation;\n+        this.response = response;\n+        this.throwable = null;\n+        this.batchContext = batchContext;\n+    }\n+\n+    /**\n+     * Initialises a new instance of {@link CosmosBulkOperationRequestAndResponse}.\n+     *\n+     * @param operation the {@link CosmosItemOperation} for which this response object has values.\n+     * @param throwable the {@link Throwable} for this request.\n+     * @param batchContext the context of this bulk request.\n+     */\n+    CosmosBulkOperationRequestAndResponse(CosmosItemOperation operation, Throwable throwable, TContext batchContext) {\n+        this.operation = operation;\n+        this.response = null;\n+        this.throwable = throwable;\n+        this.batchContext = batchContext;\n+    }\n+\n+    public CosmosItemOperation getOperation() {\n+        return operation;\n+    }\n+\n+    public CosmosBulkItemResponse getResponse() {\n+        return response;\n+    }\n+\n+    public Throwable getThrowable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5NDQ0Ng=="}, "originalCommit": {"oid": "19697287761e083bfb1e45d7f26060b144a94a65"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzE0ODczOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BulkOperationRetryPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToyMTo0N1rOHsAZEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMzowMTo1MVrOHsDa4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNTgxMA==", "bodyText": "Shouldn't this retry policy also inherit from RetryPolicyWithDiagnostics?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r515905810", "createdAt": "2020-11-02T11:21:47Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BulkOperationRetryPolicy.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.batch;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.TransactionalBatchOperationResult;\n+import com.azure.cosmos.implementation.HttpConstants.StatusCodes;\n+import com.azure.cosmos.implementation.HttpConstants.SubStatusCodes;\n+import com.azure.cosmos.implementation.IRetryPolicy;\n+import com.azure.cosmos.implementation.ResourceThrottleRetryPolicy;\n+import reactor.core.publisher.Mono;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * A container to keep retry policies and functions for bulk.\n+ */\n+final class BulkOperationRetryPolicy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19697287761e083bfb1e45d7f26060b144a94a65"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk1NTQyNg==", "bodyText": "Yeah, can help if/when we add some diagnostic info op wise.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r515955426", "createdAt": "2020-11-02T13:01:51Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BulkOperationRetryPolicy.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.batch;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.TransactionalBatchOperationResult;\n+import com.azure.cosmos.implementation.HttpConstants.StatusCodes;\n+import com.azure.cosmos.implementation.HttpConstants.SubStatusCodes;\n+import com.azure.cosmos.implementation.IRetryPolicy;\n+import com.azure.cosmos.implementation.ResourceThrottleRetryPolicy;\n+import reactor.core.publisher.Mono;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * A container to keep retry policies and functions for bulk.\n+ */\n+final class BulkOperationRetryPolicy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNTgxMA=="}, "originalCommit": {"oid": "19697287761e083bfb1e45d7f26060b144a94a65"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzE3MjkyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/ServerBatchRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToyODo1OVrOHsAnHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMzozMzo0NlrOHsfP_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwOTQwNA==", "bodyText": "Please fix this before check-in", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r515909404", "createdAt": "2020-11-02T11:28:59Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/ServerBatchRequest.java", "diffHunk": "@@ -59,27 +59,31 @@\n         final ArrayNode arrayNode =  Utils.getSimpleObjectMapper().createArrayNode();\n \n         for(CosmosItemOperation operation : operations) {\n+            JsonSerializable operationJsonSerializable;\n+\n             if (operation instanceof ItemBatchOperation<?>) {\n-                final ItemBatchOperation<?> itemBatchOperation = (ItemBatchOperation<?>) operation;\n-                final JsonSerializable operationJsonSerializable = itemBatchOperation.serializeOperation();\n+                operationJsonSerializable = ((ItemBatchOperation<?>) operation).serializeOperation();\n+            } else if (operation instanceof ItemBulkOperation<?>) {\n+                operationJsonSerializable = ((ItemBulkOperation<?>) operation).serializeOperation();\n+            } else {\n+                throw new UnsupportedOperationException(\"Unknown CosmosItemOperation.\");\n+            }\n \n-                // TODO(rakkuma): If the string contains unicode the byte encoding len will be more. Fix it.\n-                // Issue: https://github.com/Azure/azure-sdk-for-java/issues/16112\n-                final int operationSerializedLength = operationJsonSerializable.toString().length();\n+            // TODO(rakkuma): If the string contains unicode the byte encoding len will be more. Fix it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19697287761e083bfb1e45d7f26060b144a94a65"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxMTM4OQ==", "bodyText": "Done. Have added test cases too to verify size overflow. Thanks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r516411389", "createdAt": "2020-11-03T03:33:46Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/ServerBatchRequest.java", "diffHunk": "@@ -59,27 +59,31 @@\n         final ArrayNode arrayNode =  Utils.getSimpleObjectMapper().createArrayNode();\n \n         for(CosmosItemOperation operation : operations) {\n+            JsonSerializable operationJsonSerializable;\n+\n             if (operation instanceof ItemBatchOperation<?>) {\n-                final ItemBatchOperation<?> itemBatchOperation = (ItemBatchOperation<?>) operation;\n-                final JsonSerializable operationJsonSerializable = itemBatchOperation.serializeOperation();\n+                operationJsonSerializable = ((ItemBatchOperation<?>) operation).serializeOperation();\n+            } else if (operation instanceof ItemBulkOperation<?>) {\n+                operationJsonSerializable = ((ItemBulkOperation<?>) operation).serializeOperation();\n+            } else {\n+                throw new UnsupportedOperationException(\"Unknown CosmosItemOperation.\");\n+            }\n \n-                // TODO(rakkuma): If the string contains unicode the byte encoding len will be more. Fix it.\n-                // Issue: https://github.com/Azure/azure-sdk-for-java/issues/16112\n-                final int operationSerializedLength = operationJsonSerializable.toString().length();\n+            // TODO(rakkuma): If the string contains unicode the byte encoding len will be more. Fix it.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwOTQwNA=="}, "originalCommit": {"oid": "19697287761e083bfb1e45d7f26060b144a94a65"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjkzMjMzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkItemRequestOptions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzoxNjozM1rOHuCxBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzoxNjozM1rOHuCxBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA0MTg2MA==", "bodyText": "Needs to be 4.9.0 now - 4.8.0 was already released - Non-blocking of course - just make sure to update this before merging.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r518041860", "createdAt": "2020-11-05T13:16:33Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkItemRequestOptions.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.RequestOptions;\n+import com.azure.cosmos.util.Beta;\n+\n+/**\n+ * Encapsulates options that can be specified for an operation used in Bulk execution. It can be passed while\n+ * creating bulk request using {@link BulkOperations}.\n+ */\n+@Beta(Beta.SinceVersion.V4_8_0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffedbec2559ce7e719c459fdb7ad7b80a0ab8968"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0Njk4MTQ1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/batch/PartitionKeyRangeServerBatchRequestTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzoyODoyN1rOHuDO4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzoyODoyN1rOHuDO4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA0OTUwNg==", "bodyText": "NIT: normalize indentation", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r518049506", "createdAt": "2020-11-05T13:28:27Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/batch/PartitionKeyRangeServerBatchRequestTests.java", "diffHunk": "@@ -0,0 +1,172 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.batch;\n+\n+import com.azure.cosmos.CosmosItemOperation;\n+import com.azure.cosmos.CosmosItemOperationType;\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.implementation.apachecommons.lang.StringUtils;\n+import com.azure.cosmos.models.PartitionKey;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class PartitionKeyRangeServerBatchRequestTests {\n+\n+    private static final int TIMEOUT = 40000;\n+\n+    private CosmosItemOperation createItemBulkOperation(String id) {\n+        ItemBulkOperation<?> operation = new ItemBulkOperation<>(\n+            CosmosItemOperationType.CREATE,\n+            id,\n+            PartitionKey.NONE,\n+            null,\n+            null\n+        );\n+\n+        return operation;\n+    }\n+\n+    @Test(groups = {\"unit\"}, timeOut = TIMEOUT)\n+    public void fitsAllOperations() {\n+        List<CosmosItemOperation> operations = new ArrayList<CosmosItemOperation>() {{\n+            createItemBulkOperation(\"\");\n+            createItemBulkOperation(\"\");\n+        }};\n+\n+        ServerOperationBatchRequest serverOperationBatchRequest = PartitionKeyRangeServerBatchRequest.createBatchRequest(\n+        \"0\",\n+            operations,\n+        200000,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffedbec2559ce7e719c459fdb7ad7b80a0ab8968"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzgxMDA2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BatchRequestResponseConstant.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNjoyMzoxNVrOHuLT_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjowMTo1OFrOHuYaDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE4MTg4NA==", "bodyText": "nit: should it be BatchRequestResponseConstants?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r518181884", "createdAt": "2020-11-05T16:23:15Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BatchRequestResponseConstant.java", "diffHunk": "@@ -7,12 +7,15 @@\n  * This contains all the extra constants needed for batch/bulk. This will be usefull even if Hybrid row comes in.\n  * This contains all the constants we have in Backend. Any addition to backend should be added here.\n  */\n-public class BatchRequestResponseConstant {\n+public final class BatchRequestResponseConstant {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffedbec2559ce7e719c459fdb7ad7b80a0ab8968"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIwNDY3MQ==", "bodyText": "So technically bulk is also a batching, just that it is non-txn, and internally we use batch API.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r518204671", "createdAt": "2020-11-05T16:54:32Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BatchRequestResponseConstant.java", "diffHunk": "@@ -7,12 +7,15 @@\n  * This contains all the extra constants needed for batch/bulk. This will be usefull even if Hybrid row comes in.\n  * This contains all the constants we have in Backend. Any addition to backend should be added here.\n  */\n-public class BatchRequestResponseConstant {\n+public final class BatchRequestResponseConstant {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE4MTg4NA=="}, "originalCommit": {"oid": "ffedbec2559ce7e719c459fdb7ad7b80a0ab8968"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIwOTc1Ng==", "bodyText": "oh, sorry, I was more around the naming part. Since this class contains multiple constants, so i think it should also reflect on the class name as well, *Constant -> *Constants", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r518209756", "createdAt": "2020-11-05T17:01:42Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BatchRequestResponseConstant.java", "diffHunk": "@@ -7,12 +7,15 @@\n  * This contains all the extra constants needed for batch/bulk. This will be usefull even if Hybrid row comes in.\n  * This contains all the constants we have in Backend. Any addition to backend should be added here.\n  */\n-public class BatchRequestResponseConstant {\n+public final class BatchRequestResponseConstant {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE4MTg4NA=="}, "originalCommit": {"oid": "ffedbec2559ce7e719c459fdb7ad7b80a0ab8968"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxMzY1MQ==", "bodyText": "Oh. Apologies. Will change it. Nice catch! Thanks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r518213651", "createdAt": "2020-11-05T17:07:12Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BatchRequestResponseConstant.java", "diffHunk": "@@ -7,12 +7,15 @@\n  * This contains all the extra constants needed for batch/bulk. This will be usefull even if Hybrid row comes in.\n  * This contains all the constants we have in Backend. Any addition to backend should be added here.\n  */\n-public class BatchRequestResponseConstant {\n+public final class BatchRequestResponseConstant {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE4MTg4NA=="}, "originalCommit": {"oid": "ffedbec2559ce7e719c459fdb7ad7b80a0ab8968"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5NjQzMA==", "bodyText": "thanks", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r518396430", "createdAt": "2020-11-05T22:01:58Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BatchRequestResponseConstant.java", "diffHunk": "@@ -7,12 +7,15 @@\n  * This contains all the extra constants needed for batch/bulk. This will be usefull even if Hybrid row comes in.\n  * This contains all the constants we have in Backend. Any addition to backend should be added here.\n  */\n-public class BatchRequestResponseConstant {\n+public final class BatchRequestResponseConstant {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE4MTg4NA=="}, "originalCommit": {"oid": "ffedbec2559ce7e719c459fdb7ad7b80a0ab8968"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0Nzg1MTQ4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkItemResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNjozMjoxNlrOHuLt5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNjo1NTowNlrOHuMung==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE4ODUxOA==", "bodyText": "nit: statusCode is int, so may never be null?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r518188518", "createdAt": "2020-11-05T16:32:16Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkItemResponse.java", "diffHunk": "@@ -0,0 +1,189 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.implementation.batch.BatchExecUtils;\n+import com.azure.cosmos.util.Beta;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import reactor.core.publisher.Flux;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Response of a {@link CosmosItemOperation} request when processed using Bulk by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)}.\n+ *\n+ */\n+@Beta(Beta.SinceVersion.V4_8_0)\n+public final class CosmosBulkItemResponse {\n+\n+    private final String eTag;\n+    private final double requestCharge;\n+    private final ObjectNode resourceObject;\n+    private final int statusCode;\n+    private final Duration retryAfter;\n+    private final int subStatusCode;\n+    private final Map<String, String> responseHeaders;\n+    private final CosmosDiagnostics cosmosDiagnostics;\n+\n+    /**\n+     * Initializes a new instance of the {@link CosmosBulkItemResponse} class.\n+     */\n+    CosmosBulkItemResponse(String eTag,\n+                           double requestCharge,\n+                           ObjectNode resourceObject,\n+                           int statusCode,\n+                           Duration retryAfter,\n+                           int subStatusCode,\n+                           Map<String, String> responseHeaders,\n+                           CosmosDiagnostics cosmosDiagnostics) {\n+\n+        checkNotNull(statusCode, \"expected non-null statusCode\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffedbec2559ce7e719c459fdb7ad7b80a0ab8968"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIwNTA4Ng==", "bodyText": "Agreed. Will remove the check. Thanks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r518205086", "createdAt": "2020-11-05T16:55:06Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkItemResponse.java", "diffHunk": "@@ -0,0 +1,189 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.implementation.batch.BatchExecUtils;\n+import com.azure.cosmos.util.Beta;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import reactor.core.publisher.Flux;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Response of a {@link CosmosItemOperation} request when processed using Bulk by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)}.\n+ *\n+ */\n+@Beta(Beta.SinceVersion.V4_8_0)\n+public final class CosmosBulkItemResponse {\n+\n+    private final String eTag;\n+    private final double requestCharge;\n+    private final ObjectNode resourceObject;\n+    private final int statusCode;\n+    private final Duration retryAfter;\n+    private final int subStatusCode;\n+    private final Map<String, String> responseHeaders;\n+    private final CosmosDiagnostics cosmosDiagnostics;\n+\n+    /**\n+     * Initializes a new instance of the {@link CosmosBulkItemResponse} class.\n+     */\n+    CosmosBulkItemResponse(String eTag,\n+                           double requestCharge,\n+                           ObjectNode resourceObject,\n+                           int statusCode,\n+                           Duration retryAfter,\n+                           int subStatusCode,\n+                           Map<String, String> responseHeaders,\n+                           CosmosDiagnostics cosmosDiagnostics) {\n+\n+        checkNotNull(statusCode, \"expected non-null statusCode\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE4ODUxOA=="}, "originalCommit": {"oid": "ffedbec2559ce7e719c459fdb7ad7b80a0ab8968"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzkwMjIwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkItemRequestOptions.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNjo0MzozOFrOHuMN9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjoxNToyOVrOHuYyyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5NjcyNA==", "bodyText": "not sure, but just thinking should isContentResponseOnWriteEnabled add here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r518196724", "createdAt": "2020-11-05T16:43:38Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkItemRequestOptions.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.RequestOptions;\n+import com.azure.cosmos.util.Beta;\n+\n+/**\n+ * Encapsulates options that can be specified for an operation used in Bulk execution. It can be passed while\n+ * creating bulk request using {@link BulkOperations}.\n+ */\n+@Beta(Beta.SinceVersion.V4_8_0)\n+public final class BulkItemRequestOptions {\n+    private ConsistencyLevel consistencyLevel;\n+    private String sessionToken;\n+\n+    /**\n+     * Gets the consistency level required for the request.\n+     *\n+     * @return the consistency level.\n+     */\n+    ConsistencyLevel getConsistencyLevel() {\n+        return consistencyLevel;\n+    }\n+\n+    /**\n+     * Sets the consistency level required for the request.\n+     *\n+     * @param consistencyLevel the consistency level.\n+     * @return the BulkItemRequestOptions.\n+     */\n+    BulkItemRequestOptions setConsistencyLevel(ConsistencyLevel consistencyLevel) {\n+        this.consistencyLevel = consistencyLevel;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the token for use with session consistency.\n+     *\n+     * @return the session token.\n+     */\n+    public String getSessionToken() {\n+        return sessionToken;\n+    }\n+\n+    /**\n+     * Sets the token for use with session consistency.\n+     *\n+     * @param sessionToken the session token.\n+     * @return the BulkItemRequestOptions.\n+     */\n+    public BulkItemRequestOptions setSessionToken(String sessionToken) {\n+        this.sessionToken = sessionToken;\n+        return this;\n+    }\n+\n+    RequestOptions toRequestOptions() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffedbec2559ce7e719c459fdb7ad7b80a0ab8968"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIwOTEzNg==", "bodyText": "Yeah that should be added. Will add it. Thanks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r518209136", "createdAt": "2020-11-05T17:00:46Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkItemRequestOptions.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.RequestOptions;\n+import com.azure.cosmos.util.Beta;\n+\n+/**\n+ * Encapsulates options that can be specified for an operation used in Bulk execution. It can be passed while\n+ * creating bulk request using {@link BulkOperations}.\n+ */\n+@Beta(Beta.SinceVersion.V4_8_0)\n+public final class BulkItemRequestOptions {\n+    private ConsistencyLevel consistencyLevel;\n+    private String sessionToken;\n+\n+    /**\n+     * Gets the consistency level required for the request.\n+     *\n+     * @return the consistency level.\n+     */\n+    ConsistencyLevel getConsistencyLevel() {\n+        return consistencyLevel;\n+    }\n+\n+    /**\n+     * Sets the consistency level required for the request.\n+     *\n+     * @param consistencyLevel the consistency level.\n+     * @return the BulkItemRequestOptions.\n+     */\n+    BulkItemRequestOptions setConsistencyLevel(ConsistencyLevel consistencyLevel) {\n+        this.consistencyLevel = consistencyLevel;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the token for use with session consistency.\n+     *\n+     * @return the session token.\n+     */\n+    public String getSessionToken() {\n+        return sessionToken;\n+    }\n+\n+    /**\n+     * Sets the token for use with session consistency.\n+     *\n+     * @param sessionToken the session token.\n+     * @return the BulkItemRequestOptions.\n+     */\n+    public BulkItemRequestOptions setSessionToken(String sessionToken) {\n+        this.sessionToken = sessionToken;\n+        return this;\n+    }\n+\n+    RequestOptions toRequestOptions() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5NjcyNA=="}, "originalCommit": {"oid": "ffedbec2559ce7e719c459fdb7ad7b80a0ab8968"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMjc2Mg==", "bodyText": "thanks~", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r518402762", "createdAt": "2020-11-05T22:15:29Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkItemRequestOptions.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.RequestOptions;\n+import com.azure.cosmos.util.Beta;\n+\n+/**\n+ * Encapsulates options that can be specified for an operation used in Bulk execution. It can be passed while\n+ * creating bulk request using {@link BulkOperations}.\n+ */\n+@Beta(Beta.SinceVersion.V4_8_0)\n+public final class BulkItemRequestOptions {\n+    private ConsistencyLevel consistencyLevel;\n+    private String sessionToken;\n+\n+    /**\n+     * Gets the consistency level required for the request.\n+     *\n+     * @return the consistency level.\n+     */\n+    ConsistencyLevel getConsistencyLevel() {\n+        return consistencyLevel;\n+    }\n+\n+    /**\n+     * Sets the consistency level required for the request.\n+     *\n+     * @param consistencyLevel the consistency level.\n+     * @return the BulkItemRequestOptions.\n+     */\n+    BulkItemRequestOptions setConsistencyLevel(ConsistencyLevel consistencyLevel) {\n+        this.consistencyLevel = consistencyLevel;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the token for use with session consistency.\n+     *\n+     * @return the session token.\n+     */\n+    public String getSessionToken() {\n+        return sessionToken;\n+    }\n+\n+    /**\n+     * Sets the token for use with session consistency.\n+     *\n+     * @param sessionToken the session token.\n+     * @return the BulkItemRequestOptions.\n+     */\n+    public BulkItemRequestOptions setSessionToken(String sessionToken) {\n+        this.sessionToken = sessionToken;\n+        return this;\n+    }\n+\n+    RequestOptions toRequestOptions() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5NjcyNA=="}, "originalCommit": {"oid": "ffedbec2559ce7e719c459fdb7ad7b80a0ab8968"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODE0NTI2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BulkExecutor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNzozODo1N1rOHuOmTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjoxNjoxNFrOHuYz-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIzNTcyNA==", "bodyText": "This is a purely question.\nWhen I check the UnicastProcessor documentation, it says it will be removed in 3.5. Should we change to something else just in case in the future we upgrade to > 3.5.0? Currently we are using 3.3.9\n\"Deprecated.\nto be removed in 3.5, prefer clear cut usage of Sinks through variations under Sinks.many().unicast().\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r518235724", "createdAt": "2020-11-05T17:38:57Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BulkExecutor.java", "diffHunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.batch;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.BulkProcessingOptions;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosBridgeInternal;\n+import com.azure.cosmos.CosmosBulkItemResponse;\n+import com.azure.cosmos.CosmosBulkOperationResponse;\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.CosmosItemOperation;\n+import com.azure.cosmos.ThrottlingRetryOptions;\n+import com.azure.cosmos.TransactionalBatchOperationResult;\n+import com.azure.cosmos.TransactionalBatchResponse;\n+import com.azure.cosmos.implementation.AsyncDocumentClient;\n+import com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.FluxProcessor;\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.GroupedFlux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.UnicastProcessor;\n+import reactor.core.scheduler.Schedulers;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+public final class BulkExecutor<TContext> {\n+\n+    private final static Logger logger = LoggerFactory.getLogger(BulkExecutor.class);\n+\n+    private final CosmosAsyncContainer container;\n+    private final AsyncDocumentClient docClientWrapper;\n+    private final ThrottlingRetryOptions throttlingRetryOptions;\n+    private final Flux<CosmosItemOperation> inputOperations;\n+\n+    // Options for bulk execution.\n+    private final int maxMicroBatchSize;\n+    private final int maxMicroBatchConcurrency;\n+    private final Duration maxMicroBatchInterval;\n+    private final TContext batchContext;\n+\n+    // Handle gone error:\n+    private final AtomicBoolean mainSourceCompleted;\n+    private final AtomicInteger totalCount;\n+    private final FluxProcessor<CosmosItemOperation, CosmosItemOperation> mainFluxProcessor;\n+    private final FluxSink<CosmosItemOperation> mainSink;\n+    private final List<FluxSink<CosmosItemOperation>> groupSinks;\n+\n+    public BulkExecutor(CosmosAsyncContainer container,\n+                        Flux<CosmosItemOperation> inputOperations,\n+                        BulkProcessingOptions<TContext> bulkOptions) {\n+\n+        checkNotNull(container, \"expected non-null container\");\n+        checkNotNull(inputOperations, \"expected non-null inputOperations\");\n+        checkNotNull(bulkOptions, \"expected non-null bulkOptions\");\n+\n+        this.container = container;\n+        this.inputOperations = inputOperations;\n+        this.docClientWrapper = CosmosBridgeInternal.getAsyncDocumentClient(container.getDatabase());\n+        this.throttlingRetryOptions = docClientWrapper.getConnectionPolicy().getThrottlingRetryOptions();\n+\n+        // Fill the option first, to make the BulkProcessingOptions immutable, as if accessed directly, we might get\n+        // different values when a new group is created.\n+        maxMicroBatchSize = bulkOptions.getMaxMicroBatchSize();\n+        maxMicroBatchConcurrency = bulkOptions.getMaxMicroBatchConcurrency();\n+        maxMicroBatchInterval = bulkOptions.getMaxMicroBatchInterval();\n+        batchContext = bulkOptions.getBatchContext();\n+\n+        // Initialize sink for handling gone error.\n+        mainSourceCompleted = new AtomicBoolean(false);\n+        totalCount = new AtomicInteger(0);\n+        mainFluxProcessor = UnicastProcessor.<CosmosItemOperation>create().serialize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffedbec2559ce7e719c459fdb7ad7b80a0ab8968"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI1MDA2MQ==", "bodyText": "As far as I know, they are just making it bit easy to use. SInk.Many.Unicast I think will serve this purpose (i.e. multiple producer one consumer). New one also have complete and emit options, so should be few init changes when we bump up the version.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r518250061", "createdAt": "2020-11-05T17:57:26Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BulkExecutor.java", "diffHunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.batch;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.BulkProcessingOptions;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosBridgeInternal;\n+import com.azure.cosmos.CosmosBulkItemResponse;\n+import com.azure.cosmos.CosmosBulkOperationResponse;\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.CosmosItemOperation;\n+import com.azure.cosmos.ThrottlingRetryOptions;\n+import com.azure.cosmos.TransactionalBatchOperationResult;\n+import com.azure.cosmos.TransactionalBatchResponse;\n+import com.azure.cosmos.implementation.AsyncDocumentClient;\n+import com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.FluxProcessor;\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.GroupedFlux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.UnicastProcessor;\n+import reactor.core.scheduler.Schedulers;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+public final class BulkExecutor<TContext> {\n+\n+    private final static Logger logger = LoggerFactory.getLogger(BulkExecutor.class);\n+\n+    private final CosmosAsyncContainer container;\n+    private final AsyncDocumentClient docClientWrapper;\n+    private final ThrottlingRetryOptions throttlingRetryOptions;\n+    private final Flux<CosmosItemOperation> inputOperations;\n+\n+    // Options for bulk execution.\n+    private final int maxMicroBatchSize;\n+    private final int maxMicroBatchConcurrency;\n+    private final Duration maxMicroBatchInterval;\n+    private final TContext batchContext;\n+\n+    // Handle gone error:\n+    private final AtomicBoolean mainSourceCompleted;\n+    private final AtomicInteger totalCount;\n+    private final FluxProcessor<CosmosItemOperation, CosmosItemOperation> mainFluxProcessor;\n+    private final FluxSink<CosmosItemOperation> mainSink;\n+    private final List<FluxSink<CosmosItemOperation>> groupSinks;\n+\n+    public BulkExecutor(CosmosAsyncContainer container,\n+                        Flux<CosmosItemOperation> inputOperations,\n+                        BulkProcessingOptions<TContext> bulkOptions) {\n+\n+        checkNotNull(container, \"expected non-null container\");\n+        checkNotNull(inputOperations, \"expected non-null inputOperations\");\n+        checkNotNull(bulkOptions, \"expected non-null bulkOptions\");\n+\n+        this.container = container;\n+        this.inputOperations = inputOperations;\n+        this.docClientWrapper = CosmosBridgeInternal.getAsyncDocumentClient(container.getDatabase());\n+        this.throttlingRetryOptions = docClientWrapper.getConnectionPolicy().getThrottlingRetryOptions();\n+\n+        // Fill the option first, to make the BulkProcessingOptions immutable, as if accessed directly, we might get\n+        // different values when a new group is created.\n+        maxMicroBatchSize = bulkOptions.getMaxMicroBatchSize();\n+        maxMicroBatchConcurrency = bulkOptions.getMaxMicroBatchConcurrency();\n+        maxMicroBatchInterval = bulkOptions.getMaxMicroBatchInterval();\n+        batchContext = bulkOptions.getBatchContext();\n+\n+        // Initialize sink for handling gone error.\n+        mainSourceCompleted = new AtomicBoolean(false);\n+        totalCount = new AtomicInteger(0);\n+        mainFluxProcessor = UnicastProcessor.<CosmosItemOperation>create().serialize();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIzNTcyNA=="}, "originalCommit": {"oid": "ffedbec2559ce7e719c459fdb7ad7b80a0ab8968"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI1NjI4Mw==", "bodyText": "https://github.com/reactor/reactor-core/blob/master/docs/asciidoc/processors.adoc", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r518256283", "createdAt": "2020-11-05T18:02:45Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BulkExecutor.java", "diffHunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.batch;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.BulkProcessingOptions;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosBridgeInternal;\n+import com.azure.cosmos.CosmosBulkItemResponse;\n+import com.azure.cosmos.CosmosBulkOperationResponse;\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.CosmosItemOperation;\n+import com.azure.cosmos.ThrottlingRetryOptions;\n+import com.azure.cosmos.TransactionalBatchOperationResult;\n+import com.azure.cosmos.TransactionalBatchResponse;\n+import com.azure.cosmos.implementation.AsyncDocumentClient;\n+import com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.FluxProcessor;\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.GroupedFlux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.UnicastProcessor;\n+import reactor.core.scheduler.Schedulers;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+public final class BulkExecutor<TContext> {\n+\n+    private final static Logger logger = LoggerFactory.getLogger(BulkExecutor.class);\n+\n+    private final CosmosAsyncContainer container;\n+    private final AsyncDocumentClient docClientWrapper;\n+    private final ThrottlingRetryOptions throttlingRetryOptions;\n+    private final Flux<CosmosItemOperation> inputOperations;\n+\n+    // Options for bulk execution.\n+    private final int maxMicroBatchSize;\n+    private final int maxMicroBatchConcurrency;\n+    private final Duration maxMicroBatchInterval;\n+    private final TContext batchContext;\n+\n+    // Handle gone error:\n+    private final AtomicBoolean mainSourceCompleted;\n+    private final AtomicInteger totalCount;\n+    private final FluxProcessor<CosmosItemOperation, CosmosItemOperation> mainFluxProcessor;\n+    private final FluxSink<CosmosItemOperation> mainSink;\n+    private final List<FluxSink<CosmosItemOperation>> groupSinks;\n+\n+    public BulkExecutor(CosmosAsyncContainer container,\n+                        Flux<CosmosItemOperation> inputOperations,\n+                        BulkProcessingOptions<TContext> bulkOptions) {\n+\n+        checkNotNull(container, \"expected non-null container\");\n+        checkNotNull(inputOperations, \"expected non-null inputOperations\");\n+        checkNotNull(bulkOptions, \"expected non-null bulkOptions\");\n+\n+        this.container = container;\n+        this.inputOperations = inputOperations;\n+        this.docClientWrapper = CosmosBridgeInternal.getAsyncDocumentClient(container.getDatabase());\n+        this.throttlingRetryOptions = docClientWrapper.getConnectionPolicy().getThrottlingRetryOptions();\n+\n+        // Fill the option first, to make the BulkProcessingOptions immutable, as if accessed directly, we might get\n+        // different values when a new group is created.\n+        maxMicroBatchSize = bulkOptions.getMaxMicroBatchSize();\n+        maxMicroBatchConcurrency = bulkOptions.getMaxMicroBatchConcurrency();\n+        maxMicroBatchInterval = bulkOptions.getMaxMicroBatchInterval();\n+        batchContext = bulkOptions.getBatchContext();\n+\n+        // Initialize sink for handling gone error.\n+        mainSourceCompleted = new AtomicBoolean(false);\n+        totalCount = new AtomicInteger(0);\n+        mainFluxProcessor = UnicastProcessor.<CosmosItemOperation>create().serialize();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIzNTcyNA=="}, "originalCommit": {"oid": "ffedbec2559ce7e719c459fdb7ad7b80a0ab8968"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMzA2Nw==", "bodyText": "I see, thanks for sharing the doc and sharing the details~", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r518403067", "createdAt": "2020-11-05T22:16:14Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BulkExecutor.java", "diffHunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.batch;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.BulkProcessingOptions;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosBridgeInternal;\n+import com.azure.cosmos.CosmosBulkItemResponse;\n+import com.azure.cosmos.CosmosBulkOperationResponse;\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.CosmosItemOperation;\n+import com.azure.cosmos.ThrottlingRetryOptions;\n+import com.azure.cosmos.TransactionalBatchOperationResult;\n+import com.azure.cosmos.TransactionalBatchResponse;\n+import com.azure.cosmos.implementation.AsyncDocumentClient;\n+import com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.FluxProcessor;\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.GroupedFlux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.UnicastProcessor;\n+import reactor.core.scheduler.Schedulers;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+public final class BulkExecutor<TContext> {\n+\n+    private final static Logger logger = LoggerFactory.getLogger(BulkExecutor.class);\n+\n+    private final CosmosAsyncContainer container;\n+    private final AsyncDocumentClient docClientWrapper;\n+    private final ThrottlingRetryOptions throttlingRetryOptions;\n+    private final Flux<CosmosItemOperation> inputOperations;\n+\n+    // Options for bulk execution.\n+    private final int maxMicroBatchSize;\n+    private final int maxMicroBatchConcurrency;\n+    private final Duration maxMicroBatchInterval;\n+    private final TContext batchContext;\n+\n+    // Handle gone error:\n+    private final AtomicBoolean mainSourceCompleted;\n+    private final AtomicInteger totalCount;\n+    private final FluxProcessor<CosmosItemOperation, CosmosItemOperation> mainFluxProcessor;\n+    private final FluxSink<CosmosItemOperation> mainSink;\n+    private final List<FluxSink<CosmosItemOperation>> groupSinks;\n+\n+    public BulkExecutor(CosmosAsyncContainer container,\n+                        Flux<CosmosItemOperation> inputOperations,\n+                        BulkProcessingOptions<TContext> bulkOptions) {\n+\n+        checkNotNull(container, \"expected non-null container\");\n+        checkNotNull(inputOperations, \"expected non-null inputOperations\");\n+        checkNotNull(bulkOptions, \"expected non-null bulkOptions\");\n+\n+        this.container = container;\n+        this.inputOperations = inputOperations;\n+        this.docClientWrapper = CosmosBridgeInternal.getAsyncDocumentClient(container.getDatabase());\n+        this.throttlingRetryOptions = docClientWrapper.getConnectionPolicy().getThrottlingRetryOptions();\n+\n+        // Fill the option first, to make the BulkProcessingOptions immutable, as if accessed directly, we might get\n+        // different values when a new group is created.\n+        maxMicroBatchSize = bulkOptions.getMaxMicroBatchSize();\n+        maxMicroBatchConcurrency = bulkOptions.getMaxMicroBatchConcurrency();\n+        maxMicroBatchInterval = bulkOptions.getMaxMicroBatchInterval();\n+        batchContext = bulkOptions.getBatchContext();\n+\n+        // Initialize sink for handling gone error.\n+        mainSourceCompleted = new AtomicBoolean(false);\n+        totalCount = new AtomicInteger(0);\n+        mainFluxProcessor = UnicastProcessor.<CosmosItemOperation>create().serialize();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIzNTcyNA=="}, "originalCommit": {"oid": "ffedbec2559ce7e719c459fdb7ad7b80a0ab8968"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODQ1NTk3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkItemResponse.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODo1MjoyN1rOHuRovw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxODozNzozN1rOHu5Org==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI4NTUwMw==", "bodyText": "We can optimize this by not serializing and converting everytime this method is called. Also, I see that diagnostics are added at some places. So if that is in scope of this PR, we could add serialization diagnostic here.  Refer CosmosItemResponse#getItem() for ideas", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r518285503", "createdAt": "2020-11-05T18:52:27Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkItemResponse.java", "diffHunk": "@@ -0,0 +1,189 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.implementation.batch.BatchExecUtils;\n+import com.azure.cosmos.util.Beta;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import reactor.core.publisher.Flux;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Response of a {@link CosmosItemOperation} request when processed using Bulk by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)}.\n+ *\n+ */\n+@Beta(Beta.SinceVersion.V4_8_0)\n+public final class CosmosBulkItemResponse {\n+\n+    private final String eTag;\n+    private final double requestCharge;\n+    private final ObjectNode resourceObject;\n+    private final int statusCode;\n+    private final Duration retryAfter;\n+    private final int subStatusCode;\n+    private final Map<String, String> responseHeaders;\n+    private final CosmosDiagnostics cosmosDiagnostics;\n+\n+    /**\n+     * Initializes a new instance of the {@link CosmosBulkItemResponse} class.\n+     */\n+    CosmosBulkItemResponse(String eTag,\n+                           double requestCharge,\n+                           ObjectNode resourceObject,\n+                           int statusCode,\n+                           Duration retryAfter,\n+                           int subStatusCode,\n+                           Map<String, String> responseHeaders,\n+                           CosmosDiagnostics cosmosDiagnostics) {\n+\n+        checkNotNull(statusCode, \"expected non-null statusCode\");\n+        checkNotNull(responseHeaders, \"expected non-null responseHeaders\");\n+\n+        this.eTag = eTag;\n+        this.requestCharge = requestCharge;\n+        this.resourceObject = resourceObject;\n+        this.statusCode = statusCode;\n+        this.retryAfter = retryAfter;\n+        this.subStatusCode = subStatusCode;\n+        this.responseHeaders = responseHeaders;\n+        this.cosmosDiagnostics = cosmosDiagnostics;\n+    }\n+\n+    /**\n+     * Gets the activity ID that identifies the server request made to execute this operation.\n+     *\n+     * @return the activity ID that identifies the server request made to execute this operation.\n+     */\n+    public String getActivityId() {\n+        return BatchExecUtils.getActivityId(this.responseHeaders);\n+    }\n+\n+    /**\n+     * Gets the entity tag associated with the current item.\n+     *\n+     * ETags are used for concurrency checking when updating resources.\n+     *\n+     * @return Entity tag associated with the current item.\n+     */\n+    public String getETag() {\n+        return this.eTag;\n+    }\n+\n+    /**\n+     * Gets the request charge as request units (RU) consumed by the current operation.\n+     * <p>\n+     * For more information about the RU and factors that can impact the effective charges please visit\n+     * <a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/request-units\">Request Units in Azure Cosmos DB</a>\n+     *\n+     * @return the request charge.\n+     */\n+    public double getRequestCharge() {\n+        return this.requestCharge;\n+    }\n+\n+    /**\n+     * Gets the item associated with the current result.\n+     *\n+     * @param <T> the type parameter\n+     *\n+     * @param type class type for which deserialization is needed.\n+     *\n+     * @return item associated with the current result.\n+     */\n+    public <T> T getItem(final Class<T> type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffedbec2559ce7e719c459fdb7ad7b80a0ab8968"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5OTc5NQ==", "bodyText": "That optimization we thought we can do it later possibly. For the diagnostic part, the issue is for all the operations which were executed in same batch will have one instance of diagnostic, so any addition will get reflected in all the other responses which will be confusing to debug. To have a different diagnostic we need to have some kind of merge context where each bulk item response has a separate instance and the batch execution diag. context is merged in that, similarly this serialization context and pk range lookup context should be merged in that. And we can do this or some other implementation in a separate PR.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r518299795", "createdAt": "2020-11-05T19:16:42Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkItemResponse.java", "diffHunk": "@@ -0,0 +1,189 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.implementation.batch.BatchExecUtils;\n+import com.azure.cosmos.util.Beta;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import reactor.core.publisher.Flux;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Response of a {@link CosmosItemOperation} request when processed using Bulk by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)}.\n+ *\n+ */\n+@Beta(Beta.SinceVersion.V4_8_0)\n+public final class CosmosBulkItemResponse {\n+\n+    private final String eTag;\n+    private final double requestCharge;\n+    private final ObjectNode resourceObject;\n+    private final int statusCode;\n+    private final Duration retryAfter;\n+    private final int subStatusCode;\n+    private final Map<String, String> responseHeaders;\n+    private final CosmosDiagnostics cosmosDiagnostics;\n+\n+    /**\n+     * Initializes a new instance of the {@link CosmosBulkItemResponse} class.\n+     */\n+    CosmosBulkItemResponse(String eTag,\n+                           double requestCharge,\n+                           ObjectNode resourceObject,\n+                           int statusCode,\n+                           Duration retryAfter,\n+                           int subStatusCode,\n+                           Map<String, String> responseHeaders,\n+                           CosmosDiagnostics cosmosDiagnostics) {\n+\n+        checkNotNull(statusCode, \"expected non-null statusCode\");\n+        checkNotNull(responseHeaders, \"expected non-null responseHeaders\");\n+\n+        this.eTag = eTag;\n+        this.requestCharge = requestCharge;\n+        this.resourceObject = resourceObject;\n+        this.statusCode = statusCode;\n+        this.retryAfter = retryAfter;\n+        this.subStatusCode = subStatusCode;\n+        this.responseHeaders = responseHeaders;\n+        this.cosmosDiagnostics = cosmosDiagnostics;\n+    }\n+\n+    /**\n+     * Gets the activity ID that identifies the server request made to execute this operation.\n+     *\n+     * @return the activity ID that identifies the server request made to execute this operation.\n+     */\n+    public String getActivityId() {\n+        return BatchExecUtils.getActivityId(this.responseHeaders);\n+    }\n+\n+    /**\n+     * Gets the entity tag associated with the current item.\n+     *\n+     * ETags are used for concurrency checking when updating resources.\n+     *\n+     * @return Entity tag associated with the current item.\n+     */\n+    public String getETag() {\n+        return this.eTag;\n+    }\n+\n+    /**\n+     * Gets the request charge as request units (RU) consumed by the current operation.\n+     * <p>\n+     * For more information about the RU and factors that can impact the effective charges please visit\n+     * <a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/request-units\">Request Units in Azure Cosmos DB</a>\n+     *\n+     * @return the request charge.\n+     */\n+    public double getRequestCharge() {\n+        return this.requestCharge;\n+    }\n+\n+    /**\n+     * Gets the item associated with the current result.\n+     *\n+     * @param <T> the type parameter\n+     *\n+     * @param type class type for which deserialization is needed.\n+     *\n+     * @return item associated with the current result.\n+     */\n+    public <T> T getItem(final Class<T> type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI4NTUwMw=="}, "originalCommit": {"oid": "ffedbec2559ce7e719c459fdb7ad7b80a0ab8968"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkzNDE5MA==", "bodyText": "Sure, make sure these are tracked. Thankyou", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r518934190", "createdAt": "2020-11-06T18:37:37Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkItemResponse.java", "diffHunk": "@@ -0,0 +1,189 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.implementation.batch.BatchExecUtils;\n+import com.azure.cosmos.util.Beta;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import reactor.core.publisher.Flux;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Response of a {@link CosmosItemOperation} request when processed using Bulk by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)}.\n+ *\n+ */\n+@Beta(Beta.SinceVersion.V4_8_0)\n+public final class CosmosBulkItemResponse {\n+\n+    private final String eTag;\n+    private final double requestCharge;\n+    private final ObjectNode resourceObject;\n+    private final int statusCode;\n+    private final Duration retryAfter;\n+    private final int subStatusCode;\n+    private final Map<String, String> responseHeaders;\n+    private final CosmosDiagnostics cosmosDiagnostics;\n+\n+    /**\n+     * Initializes a new instance of the {@link CosmosBulkItemResponse} class.\n+     */\n+    CosmosBulkItemResponse(String eTag,\n+                           double requestCharge,\n+                           ObjectNode resourceObject,\n+                           int statusCode,\n+                           Duration retryAfter,\n+                           int subStatusCode,\n+                           Map<String, String> responseHeaders,\n+                           CosmosDiagnostics cosmosDiagnostics) {\n+\n+        checkNotNull(statusCode, \"expected non-null statusCode\");\n+        checkNotNull(responseHeaders, \"expected non-null responseHeaders\");\n+\n+        this.eTag = eTag;\n+        this.requestCharge = requestCharge;\n+        this.resourceObject = resourceObject;\n+        this.statusCode = statusCode;\n+        this.retryAfter = retryAfter;\n+        this.subStatusCode = subStatusCode;\n+        this.responseHeaders = responseHeaders;\n+        this.cosmosDiagnostics = cosmosDiagnostics;\n+    }\n+\n+    /**\n+     * Gets the activity ID that identifies the server request made to execute this operation.\n+     *\n+     * @return the activity ID that identifies the server request made to execute this operation.\n+     */\n+    public String getActivityId() {\n+        return BatchExecUtils.getActivityId(this.responseHeaders);\n+    }\n+\n+    /**\n+     * Gets the entity tag associated with the current item.\n+     *\n+     * ETags are used for concurrency checking when updating resources.\n+     *\n+     * @return Entity tag associated with the current item.\n+     */\n+    public String getETag() {\n+        return this.eTag;\n+    }\n+\n+    /**\n+     * Gets the request charge as request units (RU) consumed by the current operation.\n+     * <p>\n+     * For more information about the RU and factors that can impact the effective charges please visit\n+     * <a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/request-units\">Request Units in Azure Cosmos DB</a>\n+     *\n+     * @return the request charge.\n+     */\n+    public double getRequestCharge() {\n+        return this.requestCharge;\n+    }\n+\n+    /**\n+     * Gets the item associated with the current result.\n+     *\n+     * @param <T> the type parameter\n+     *\n+     * @param type class type for which deserialization is needed.\n+     *\n+     * @return item associated with the current result.\n+     */\n+    public <T> T getItem(final Class<T> type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI4NTUwMw=="}, "originalCommit": {"oid": "ffedbec2559ce7e719c459fdb7ad7b80a0ab8968"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTA5OTMzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BulkOperationRetryPolicy.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTo0Mzo0NFrOHuX1Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDo1Mzo0MlrOHu9Onw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM4NzAyNg==", "bodyText": "I have two questions here:\n\n\nWhen these two exceptions happens, it will go back to the main sink and re-calculate the partitionKeyRangeId, but without refreshing the cache, we may get the same/old partitionKeyRangeId back. Where the cache is refreshed?\n\n\nCurrently we check for PARTITION_KEY_RANGE_GONE  and NAME_CACHE_IS_STALE exception, what about COMPLETING_SPLIT etc?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r518387026", "createdAt": "2020-11-05T21:43:44Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BulkOperationRetryPolicy.java", "diffHunk": "@@ -0,0 +1,70 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.batch;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.TransactionalBatchOperationResult;\n+import com.azure.cosmos.implementation.HttpConstants.StatusCodes;\n+import com.azure.cosmos.implementation.HttpConstants.SubStatusCodes;\n+import com.azure.cosmos.implementation.IRetryPolicy;\n+import com.azure.cosmos.implementation.ResourceThrottleRetryPolicy;\n+import com.azure.cosmos.implementation.RetryPolicyWithDiagnostics;\n+import reactor.core.publisher.Mono;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * A container to keep retry policies and functions for bulk.\n+ */\n+final class BulkOperationRetryPolicy extends RetryPolicyWithDiagnostics {\n+\n+    private static final int MAX_RETRIES = 1;\n+\n+    private final ResourceThrottleRetryPolicy resourceThrottleRetryPolicy;\n+    private int attemptedRetries;\n+\n+    BulkOperationRetryPolicy(ResourceThrottleRetryPolicy resourceThrottleRetryPolicy) {\n+        this.resourceThrottleRetryPolicy = resourceThrottleRetryPolicy;\n+    }\n+\n+    final Mono<IRetryPolicy.ShouldRetryResult> shouldRetry(final TransactionalBatchOperationResult result) {\n+\n+        checkNotNull(result, \"expected non-null result\");\n+\n+        // Create CosmosException for the next retry policy to understand:\n+        CosmosException exception = BridgeInternal.createCosmosException(\n+            result.getStatusCode(),\n+            null,\n+            BulkExecutorUtil.getResponseHeadersFromBatchOperationResult(result));\n+\n+        if (this.resourceThrottleRetryPolicy == null) {\n+            return Mono.just(IRetryPolicy.ShouldRetryResult.noRetry());\n+        }\n+\n+        return this.resourceThrottleRetryPolicy.shouldRetry(exception);\n+    }\n+\n+    @Override\n+    public Mono<IRetryPolicy.ShouldRetryResult> shouldRetry(Exception exception) {\n+\n+        if (this.resourceThrottleRetryPolicy == null) {\n+            return Mono.just(IRetryPolicy.ShouldRetryResult.noRetry());\n+        }\n+\n+        return this.resourceThrottleRetryPolicy.shouldRetry(exception);\n+    }\n+\n+    boolean shouldRetryForGone(int statusCode, int subStatusCode) {\n+\n+        if (statusCode == StatusCodes.GONE\n+            && (subStatusCode == SubStatusCodes.PARTITION_KEY_RANGE_GONE || subStatusCode == SubStatusCodes.NAME_CACHE_IS_STALE)\n+            && this.attemptedRetries < MAX_RETRIES) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffedbec2559ce7e719c459fdb7ad7b80a0ab8968"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5MTUyMA==", "bodyText": "I can see different refreshes for different substatus codes. For pk range, I don't see any thing to handle forceRefresh. Even in function  RxPartitionKeyRangeCache::getPartitionKeyRange function, forceRefresh variable is unused. Will make some changes to address collection cache refresh.\nWill add COMPLETING_SPLIT and COMPLETING_PARTITION_MIGRATION.\n\nThanks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r518491520", "createdAt": "2020-11-06T02:43:26Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BulkOperationRetryPolicy.java", "diffHunk": "@@ -0,0 +1,70 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.batch;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.TransactionalBatchOperationResult;\n+import com.azure.cosmos.implementation.HttpConstants.StatusCodes;\n+import com.azure.cosmos.implementation.HttpConstants.SubStatusCodes;\n+import com.azure.cosmos.implementation.IRetryPolicy;\n+import com.azure.cosmos.implementation.ResourceThrottleRetryPolicy;\n+import com.azure.cosmos.implementation.RetryPolicyWithDiagnostics;\n+import reactor.core.publisher.Mono;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * A container to keep retry policies and functions for bulk.\n+ */\n+final class BulkOperationRetryPolicy extends RetryPolicyWithDiagnostics {\n+\n+    private static final int MAX_RETRIES = 1;\n+\n+    private final ResourceThrottleRetryPolicy resourceThrottleRetryPolicy;\n+    private int attemptedRetries;\n+\n+    BulkOperationRetryPolicy(ResourceThrottleRetryPolicy resourceThrottleRetryPolicy) {\n+        this.resourceThrottleRetryPolicy = resourceThrottleRetryPolicy;\n+    }\n+\n+    final Mono<IRetryPolicy.ShouldRetryResult> shouldRetry(final TransactionalBatchOperationResult result) {\n+\n+        checkNotNull(result, \"expected non-null result\");\n+\n+        // Create CosmosException for the next retry policy to understand:\n+        CosmosException exception = BridgeInternal.createCosmosException(\n+            result.getStatusCode(),\n+            null,\n+            BulkExecutorUtil.getResponseHeadersFromBatchOperationResult(result));\n+\n+        if (this.resourceThrottleRetryPolicy == null) {\n+            return Mono.just(IRetryPolicy.ShouldRetryResult.noRetry());\n+        }\n+\n+        return this.resourceThrottleRetryPolicy.shouldRetry(exception);\n+    }\n+\n+    @Override\n+    public Mono<IRetryPolicy.ShouldRetryResult> shouldRetry(Exception exception) {\n+\n+        if (this.resourceThrottleRetryPolicy == null) {\n+            return Mono.just(IRetryPolicy.ShouldRetryResult.noRetry());\n+        }\n+\n+        return this.resourceThrottleRetryPolicy.shouldRetry(exception);\n+    }\n+\n+    boolean shouldRetryForGone(int statusCode, int subStatusCode) {\n+\n+        if (statusCode == StatusCodes.GONE\n+            && (subStatusCode == SubStatusCodes.PARTITION_KEY_RANGE_GONE || subStatusCode == SubStatusCodes.NAME_CACHE_IS_STALE)\n+            && this.attemptedRetries < MAX_RETRIES) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM4NzAyNg=="}, "originalCommit": {"oid": "ffedbec2559ce7e719c459fdb7ad7b80a0ab8968"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk5OTcxMQ==", "bodyText": "Thanks Rakesh.\nI read the flow one more time, and I think I understand the general flow better now.\nSo ultimately it will be an RxDocumentServiceRequest, underlying with GoneAndRetryWithRetryPolicy, RenameCollectionAwareClientRetryPolicy will be applied. Since we do not retry for COMPLETING_SPLIT etc for write operations(but will refresh the range cache), so the exceptions will be throwned and eventually captured in BulkOperationRetryPolicy for each bulkItemOperation.\nBy the way, InvalidPartitionExceptionRetryPolicy is doing similar collection cache refresh~", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r518999711", "createdAt": "2020-11-06T20:53:42Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BulkOperationRetryPolicy.java", "diffHunk": "@@ -0,0 +1,70 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.batch;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.TransactionalBatchOperationResult;\n+import com.azure.cosmos.implementation.HttpConstants.StatusCodes;\n+import com.azure.cosmos.implementation.HttpConstants.SubStatusCodes;\n+import com.azure.cosmos.implementation.IRetryPolicy;\n+import com.azure.cosmos.implementation.ResourceThrottleRetryPolicy;\n+import com.azure.cosmos.implementation.RetryPolicyWithDiagnostics;\n+import reactor.core.publisher.Mono;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * A container to keep retry policies and functions for bulk.\n+ */\n+final class BulkOperationRetryPolicy extends RetryPolicyWithDiagnostics {\n+\n+    private static final int MAX_RETRIES = 1;\n+\n+    private final ResourceThrottleRetryPolicy resourceThrottleRetryPolicy;\n+    private int attemptedRetries;\n+\n+    BulkOperationRetryPolicy(ResourceThrottleRetryPolicy resourceThrottleRetryPolicy) {\n+        this.resourceThrottleRetryPolicy = resourceThrottleRetryPolicy;\n+    }\n+\n+    final Mono<IRetryPolicy.ShouldRetryResult> shouldRetry(final TransactionalBatchOperationResult result) {\n+\n+        checkNotNull(result, \"expected non-null result\");\n+\n+        // Create CosmosException for the next retry policy to understand:\n+        CosmosException exception = BridgeInternal.createCosmosException(\n+            result.getStatusCode(),\n+            null,\n+            BulkExecutorUtil.getResponseHeadersFromBatchOperationResult(result));\n+\n+        if (this.resourceThrottleRetryPolicy == null) {\n+            return Mono.just(IRetryPolicy.ShouldRetryResult.noRetry());\n+        }\n+\n+        return this.resourceThrottleRetryPolicy.shouldRetry(exception);\n+    }\n+\n+    @Override\n+    public Mono<IRetryPolicy.ShouldRetryResult> shouldRetry(Exception exception) {\n+\n+        if (this.resourceThrottleRetryPolicy == null) {\n+            return Mono.just(IRetryPolicy.ShouldRetryResult.noRetry());\n+        }\n+\n+        return this.resourceThrottleRetryPolicy.shouldRetry(exception);\n+    }\n+\n+    boolean shouldRetryForGone(int statusCode, int subStatusCode) {\n+\n+        if (statusCode == StatusCodes.GONE\n+            && (subStatusCode == SubStatusCodes.PARTITION_KEY_RANGE_GONE || subStatusCode == SubStatusCodes.NAME_CACHE_IS_STALE)\n+            && this.attemptedRetries < MAX_RETRIES) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM4NzAyNg=="}, "originalCommit": {"oid": "ffedbec2559ce7e719c459fdb7ad7b80a0ab8968"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTExMDMwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BulkExecutor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTo0NjozMFrOHuX7ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNDozNDoxMlrOHuf1sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM4ODY0Mw==", "bodyText": "nit: if (...) (space between)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r518388643", "createdAt": "2020-11-05T21:46:30Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BulkExecutor.java", "diffHunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.batch;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.BulkProcessingOptions;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosBridgeInternal;\n+import com.azure.cosmos.CosmosBulkItemResponse;\n+import com.azure.cosmos.CosmosBulkOperationResponse;\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.CosmosItemOperation;\n+import com.azure.cosmos.ThrottlingRetryOptions;\n+import com.azure.cosmos.TransactionalBatchOperationResult;\n+import com.azure.cosmos.TransactionalBatchResponse;\n+import com.azure.cosmos.implementation.AsyncDocumentClient;\n+import com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.FluxProcessor;\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.GroupedFlux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.UnicastProcessor;\n+import reactor.core.scheduler.Schedulers;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+public final class BulkExecutor<TContext> {\n+\n+    private final static Logger logger = LoggerFactory.getLogger(BulkExecutor.class);\n+\n+    private final CosmosAsyncContainer container;\n+    private final AsyncDocumentClient docClientWrapper;\n+    private final ThrottlingRetryOptions throttlingRetryOptions;\n+    private final Flux<CosmosItemOperation> inputOperations;\n+\n+    // Options for bulk execution.\n+    private final int maxMicroBatchSize;\n+    private final int maxMicroBatchConcurrency;\n+    private final Duration maxMicroBatchInterval;\n+    private final TContext batchContext;\n+\n+    // Handle gone error:\n+    private final AtomicBoolean mainSourceCompleted;\n+    private final AtomicInteger totalCount;\n+    private final FluxProcessor<CosmosItemOperation, CosmosItemOperation> mainFluxProcessor;\n+    private final FluxSink<CosmosItemOperation> mainSink;\n+    private final List<FluxSink<CosmosItemOperation>> groupSinks;\n+\n+    public BulkExecutor(CosmosAsyncContainer container,\n+                        Flux<CosmosItemOperation> inputOperations,\n+                        BulkProcessingOptions<TContext> bulkOptions) {\n+\n+        checkNotNull(container, \"expected non-null container\");\n+        checkNotNull(inputOperations, \"expected non-null inputOperations\");\n+        checkNotNull(bulkOptions, \"expected non-null bulkOptions\");\n+\n+        this.container = container;\n+        this.inputOperations = inputOperations;\n+        this.docClientWrapper = CosmosBridgeInternal.getAsyncDocumentClient(container.getDatabase());\n+        this.throttlingRetryOptions = docClientWrapper.getConnectionPolicy().getThrottlingRetryOptions();\n+\n+        // Fill the option first, to make the BulkProcessingOptions immutable, as if accessed directly, we might get\n+        // different values when a new group is created.\n+        maxMicroBatchSize = bulkOptions.getMaxMicroBatchSize();\n+        maxMicroBatchConcurrency = bulkOptions.getMaxMicroBatchConcurrency();\n+        maxMicroBatchInterval = bulkOptions.getMaxMicroBatchInterval();\n+        batchContext = bulkOptions.getBatchContext();\n+\n+        // Initialize sink for handling gone error.\n+        mainSourceCompleted = new AtomicBoolean(false);\n+        totalCount = new AtomicInteger(0);\n+        mainFluxProcessor = UnicastProcessor.<CosmosItemOperation>create().serialize();\n+        mainSink = mainFluxProcessor.sink(FluxSink.OverflowStrategy.BUFFER);\n+        groupSinks = new ArrayList<>();\n+    }\n+\n+    /**\n+     * The actual execution of the flux of operations. It is done in 5 steps:\n+\n+     * 1. Getting partition key range ID and grouping operations using that id.\n+     * 2. For the flux of operations in a group, adding buffering based on size and a duration.\n+     * 3. For the operation we get in after buffering, process it using a batch request and return\n+     *    a wrapper having request, response(if-any) and exception(if-any). Either response or exception will be there.\n+     *\n+     * 4. Any internal retry is done by adding in an intermediate sink for each grouped flux.\n+     * 5. Any operation which failed due to partition key range gone is retried by re calculating it's range id.\n+     */\n+    public Flux<CosmosBulkOperationResponse<TContext>> execute() {\n+\n+        Flux<CosmosBulkOperationResponse<TContext>> responseFlux = this.inputOperations\n+            .onErrorResume((error) -> {\n+                // eat up the error signals\n+                return Mono.empty();\n+            })\n+            .doOnNext((CosmosItemOperation cosmosItemOperation) -> {\n+\n+                // Set the retry policy before starting execution. Should only happens once.\n+                BulkExecutorUtil.setRetryPolicyForBulk(cosmosItemOperation, this.throttlingRetryOptions);\n+\n+                totalCount.incrementAndGet();\n+            })\n+            .doOnComplete(() -> {\n+                mainSourceCompleted.set(true);\n+\n+                if (totalCount.get() == 0) {\n+                    // This is needed as there can be case that onComplete was called after last element was processed\n+                    // So complete the sink here also if count is 0, if source has completed and count isn't zero,\n+                    // then the last element in the doOnNext will close it. Sink doesn't mind in case of a double close.\n+\n+                    completeAllSinks();\n+                }\n+            })\n+            .mergeWith(mainFluxProcessor)\n+            .flatMap(operation -> {\n+\n+                // resolve partition key range id again for operations which comes in main sink due to gone retry.\n+                return BulkExecutorUtil.resolvePartitionKeyRangeId(this.docClientWrapper, this.container, operation)\n+                    .map((String pkRangeId) -> Pair.of(pkRangeId, operation));\n+            })\n+            .groupBy(Pair::getKey, Pair::getValue)\n+            .flatMap(this::executePartitionedGroup)\n+            .doOnNext(requestAndResponse -> {\n+\n+                if (totalCount.decrementAndGet() == 0 && mainSourceCompleted.get()) {\n+                    // It is possible that count is zero but there are more elements in the source.\n+                    // Count 0 also signifies that there are no pending elements in any sink.\n+\n+                    completeAllSinks();\n+                }\n+            });\n+\n+        return responseFlux;\n+    }\n+\n+    private Flux<CosmosBulkOperationResponse<TContext>> executePartitionedGroup(\n+        GroupedFlux<String, CosmosItemOperation> partitionedGroupFluxOfInputOperations) {\n+\n+        final String pkRange = partitionedGroupFluxOfInputOperations.key();\n+\n+        final FluxProcessor<CosmosItemOperation, CosmosItemOperation> groupFluxProcessor =\n+            UnicastProcessor.<CosmosItemOperation>create().serialize();\n+        final FluxSink<CosmosItemOperation> groupSink = groupFluxProcessor.sink(FluxSink.OverflowStrategy.BUFFER);\n+        groupSinks.add(groupSink);\n+\n+        return partitionedGroupFluxOfInputOperations\n+            .mergeWith(groupFluxProcessor)\n+            .bufferTimeout(this.maxMicroBatchSize, this.maxMicroBatchInterval)\n+            .onBackpressureBuffer()\n+            .flatMap((List<CosmosItemOperation> cosmosItemOperations) -> {\n+                return executeOperations(cosmosItemOperations, pkRange, groupSink);\n+            }, this.maxMicroBatchConcurrency);\n+    }\n+\n+    private Flux<CosmosBulkOperationResponse<TContext>> executeOperations(\n+        List<CosmosItemOperation> operations,\n+        String pkRange,\n+        FluxSink<CosmosItemOperation> groupSink) {\n+\n+        ServerOperationBatchRequest serverOperationBatchRequest = BulkExecutorUtil.createBatchRequest(operations, pkRange);\n+        if (serverOperationBatchRequest.getBatchPendingOperations().size() > 0) {\n+            serverOperationBatchRequest.getBatchPendingOperations().forEach(groupSink::next);\n+        }\n+\n+        return Flux.just(serverOperationBatchRequest.getBatchRequest())\n+            .publishOn(Schedulers.elastic())\n+            .flatMap((PartitionKeyRangeServerBatchRequest serverRequest) -> {\n+                return this.executePartitionKeyRangeServerBatchRequest(serverRequest, groupSink);\n+            });\n+    }\n+\n+    private Flux<CosmosBulkOperationResponse<TContext>> executePartitionKeyRangeServerBatchRequest(\n+        PartitionKeyRangeServerBatchRequest serverRequest,\n+        FluxSink<CosmosItemOperation> groupSink) {\n+\n+        return this.executeBatchRequest(serverRequest)\n+            .flatMapMany(response -> {\n+\n+                return Flux.fromIterable(response.getResults()).flatMap((TransactionalBatchOperationResult result) -> {\n+                    return handleTransactionalBatchOperationResult(response, result, groupSink);\n+                });\n+            })\n+            .onErrorResume((Throwable throwable) -> {\n+\n+                return Flux.fromIterable(serverRequest.getOperations()).flatMap((CosmosItemOperation itemOperation) -> {\n+                    return handleTransactionalBatchExecutionException(itemOperation, throwable, groupSink);\n+                });\n+            });\n+    }\n+\n+    // Helper functions\n+    private Mono<CosmosBulkOperationResponse<TContext>> handleTransactionalBatchOperationResult(\n+        TransactionalBatchResponse response,\n+        TransactionalBatchOperationResult operationResult,\n+        FluxSink<CosmosItemOperation> groupSink) {\n+\n+        CosmosBulkItemResponse cosmosBulkItemResponse = BridgeInternal.createCosmosBulkItemResponse(operationResult, response);\n+        CosmosItemOperation itemOperation = operationResult.getOperation();\n+\n+        if (!operationResult.isSuccessStatusCode()) {\n+\n+            if(itemOperation instanceof ItemBulkOperation<?>) {\n+\n+                return ((ItemBulkOperation<?>) itemOperation).getRetryPolicy().shouldRetry(operationResult).flatMap(\n+                    result -> {\n+                        if (result.shouldRetry) {\n+                            groupSink.next(itemOperation);\n+                            return Mono.empty();\n+                        } else {\n+                            return Mono.just(BridgeInternal.createCosmosBulkOperationResponse(\n+                                itemOperation, cosmosBulkItemResponse, this.batchContext));\n+                        }\n+                    });\n+\n+            } else {\n+                throw new UnsupportedOperationException(\"Unknown CosmosItemOperation.\");\n+            }\n+        }\n+\n+        return Mono.just(BridgeInternal.createCosmosBulkOperationResponse(\n+            itemOperation,\n+            cosmosBulkItemResponse,\n+            this.batchContext));\n+    }\n+\n+    private Mono<CosmosBulkOperationResponse<TContext>> handleTransactionalBatchExecutionException(\n+        CosmosItemOperation itemOperation,\n+        Throwable throwable,\n+        FluxSink<CosmosItemOperation> groupSink) {\n+\n+        if(throwable instanceof CosmosException && itemOperation instanceof ItemBulkOperation<?>) {\n+            CosmosException cosmosException = (CosmosException) throwable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffedbec2559ce7e719c459fdb7ad7b80a0ab8968"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5MDg2NQ==", "bodyText": "I can see both \"if( \" ~ without space and \"if (\" ~ with spaces in code. Not sure what we follow.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r518490865", "createdAt": "2020-11-06T02:40:58Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BulkExecutor.java", "diffHunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.batch;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.BulkProcessingOptions;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosBridgeInternal;\n+import com.azure.cosmos.CosmosBulkItemResponse;\n+import com.azure.cosmos.CosmosBulkOperationResponse;\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.CosmosItemOperation;\n+import com.azure.cosmos.ThrottlingRetryOptions;\n+import com.azure.cosmos.TransactionalBatchOperationResult;\n+import com.azure.cosmos.TransactionalBatchResponse;\n+import com.azure.cosmos.implementation.AsyncDocumentClient;\n+import com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.FluxProcessor;\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.GroupedFlux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.UnicastProcessor;\n+import reactor.core.scheduler.Schedulers;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+public final class BulkExecutor<TContext> {\n+\n+    private final static Logger logger = LoggerFactory.getLogger(BulkExecutor.class);\n+\n+    private final CosmosAsyncContainer container;\n+    private final AsyncDocumentClient docClientWrapper;\n+    private final ThrottlingRetryOptions throttlingRetryOptions;\n+    private final Flux<CosmosItemOperation> inputOperations;\n+\n+    // Options for bulk execution.\n+    private final int maxMicroBatchSize;\n+    private final int maxMicroBatchConcurrency;\n+    private final Duration maxMicroBatchInterval;\n+    private final TContext batchContext;\n+\n+    // Handle gone error:\n+    private final AtomicBoolean mainSourceCompleted;\n+    private final AtomicInteger totalCount;\n+    private final FluxProcessor<CosmosItemOperation, CosmosItemOperation> mainFluxProcessor;\n+    private final FluxSink<CosmosItemOperation> mainSink;\n+    private final List<FluxSink<CosmosItemOperation>> groupSinks;\n+\n+    public BulkExecutor(CosmosAsyncContainer container,\n+                        Flux<CosmosItemOperation> inputOperations,\n+                        BulkProcessingOptions<TContext> bulkOptions) {\n+\n+        checkNotNull(container, \"expected non-null container\");\n+        checkNotNull(inputOperations, \"expected non-null inputOperations\");\n+        checkNotNull(bulkOptions, \"expected non-null bulkOptions\");\n+\n+        this.container = container;\n+        this.inputOperations = inputOperations;\n+        this.docClientWrapper = CosmosBridgeInternal.getAsyncDocumentClient(container.getDatabase());\n+        this.throttlingRetryOptions = docClientWrapper.getConnectionPolicy().getThrottlingRetryOptions();\n+\n+        // Fill the option first, to make the BulkProcessingOptions immutable, as if accessed directly, we might get\n+        // different values when a new group is created.\n+        maxMicroBatchSize = bulkOptions.getMaxMicroBatchSize();\n+        maxMicroBatchConcurrency = bulkOptions.getMaxMicroBatchConcurrency();\n+        maxMicroBatchInterval = bulkOptions.getMaxMicroBatchInterval();\n+        batchContext = bulkOptions.getBatchContext();\n+\n+        // Initialize sink for handling gone error.\n+        mainSourceCompleted = new AtomicBoolean(false);\n+        totalCount = new AtomicInteger(0);\n+        mainFluxProcessor = UnicastProcessor.<CosmosItemOperation>create().serialize();\n+        mainSink = mainFluxProcessor.sink(FluxSink.OverflowStrategy.BUFFER);\n+        groupSinks = new ArrayList<>();\n+    }\n+\n+    /**\n+     * The actual execution of the flux of operations. It is done in 5 steps:\n+\n+     * 1. Getting partition key range ID and grouping operations using that id.\n+     * 2. For the flux of operations in a group, adding buffering based on size and a duration.\n+     * 3. For the operation we get in after buffering, process it using a batch request and return\n+     *    a wrapper having request, response(if-any) and exception(if-any). Either response or exception will be there.\n+     *\n+     * 4. Any internal retry is done by adding in an intermediate sink for each grouped flux.\n+     * 5. Any operation which failed due to partition key range gone is retried by re calculating it's range id.\n+     */\n+    public Flux<CosmosBulkOperationResponse<TContext>> execute() {\n+\n+        Flux<CosmosBulkOperationResponse<TContext>> responseFlux = this.inputOperations\n+            .onErrorResume((error) -> {\n+                // eat up the error signals\n+                return Mono.empty();\n+            })\n+            .doOnNext((CosmosItemOperation cosmosItemOperation) -> {\n+\n+                // Set the retry policy before starting execution. Should only happens once.\n+                BulkExecutorUtil.setRetryPolicyForBulk(cosmosItemOperation, this.throttlingRetryOptions);\n+\n+                totalCount.incrementAndGet();\n+            })\n+            .doOnComplete(() -> {\n+                mainSourceCompleted.set(true);\n+\n+                if (totalCount.get() == 0) {\n+                    // This is needed as there can be case that onComplete was called after last element was processed\n+                    // So complete the sink here also if count is 0, if source has completed and count isn't zero,\n+                    // then the last element in the doOnNext will close it. Sink doesn't mind in case of a double close.\n+\n+                    completeAllSinks();\n+                }\n+            })\n+            .mergeWith(mainFluxProcessor)\n+            .flatMap(operation -> {\n+\n+                // resolve partition key range id again for operations which comes in main sink due to gone retry.\n+                return BulkExecutorUtil.resolvePartitionKeyRangeId(this.docClientWrapper, this.container, operation)\n+                    .map((String pkRangeId) -> Pair.of(pkRangeId, operation));\n+            })\n+            .groupBy(Pair::getKey, Pair::getValue)\n+            .flatMap(this::executePartitionedGroup)\n+            .doOnNext(requestAndResponse -> {\n+\n+                if (totalCount.decrementAndGet() == 0 && mainSourceCompleted.get()) {\n+                    // It is possible that count is zero but there are more elements in the source.\n+                    // Count 0 also signifies that there are no pending elements in any sink.\n+\n+                    completeAllSinks();\n+                }\n+            });\n+\n+        return responseFlux;\n+    }\n+\n+    private Flux<CosmosBulkOperationResponse<TContext>> executePartitionedGroup(\n+        GroupedFlux<String, CosmosItemOperation> partitionedGroupFluxOfInputOperations) {\n+\n+        final String pkRange = partitionedGroupFluxOfInputOperations.key();\n+\n+        final FluxProcessor<CosmosItemOperation, CosmosItemOperation> groupFluxProcessor =\n+            UnicastProcessor.<CosmosItemOperation>create().serialize();\n+        final FluxSink<CosmosItemOperation> groupSink = groupFluxProcessor.sink(FluxSink.OverflowStrategy.BUFFER);\n+        groupSinks.add(groupSink);\n+\n+        return partitionedGroupFluxOfInputOperations\n+            .mergeWith(groupFluxProcessor)\n+            .bufferTimeout(this.maxMicroBatchSize, this.maxMicroBatchInterval)\n+            .onBackpressureBuffer()\n+            .flatMap((List<CosmosItemOperation> cosmosItemOperations) -> {\n+                return executeOperations(cosmosItemOperations, pkRange, groupSink);\n+            }, this.maxMicroBatchConcurrency);\n+    }\n+\n+    private Flux<CosmosBulkOperationResponse<TContext>> executeOperations(\n+        List<CosmosItemOperation> operations,\n+        String pkRange,\n+        FluxSink<CosmosItemOperation> groupSink) {\n+\n+        ServerOperationBatchRequest serverOperationBatchRequest = BulkExecutorUtil.createBatchRequest(operations, pkRange);\n+        if (serverOperationBatchRequest.getBatchPendingOperations().size() > 0) {\n+            serverOperationBatchRequest.getBatchPendingOperations().forEach(groupSink::next);\n+        }\n+\n+        return Flux.just(serverOperationBatchRequest.getBatchRequest())\n+            .publishOn(Schedulers.elastic())\n+            .flatMap((PartitionKeyRangeServerBatchRequest serverRequest) -> {\n+                return this.executePartitionKeyRangeServerBatchRequest(serverRequest, groupSink);\n+            });\n+    }\n+\n+    private Flux<CosmosBulkOperationResponse<TContext>> executePartitionKeyRangeServerBatchRequest(\n+        PartitionKeyRangeServerBatchRequest serverRequest,\n+        FluxSink<CosmosItemOperation> groupSink) {\n+\n+        return this.executeBatchRequest(serverRequest)\n+            .flatMapMany(response -> {\n+\n+                return Flux.fromIterable(response.getResults()).flatMap((TransactionalBatchOperationResult result) -> {\n+                    return handleTransactionalBatchOperationResult(response, result, groupSink);\n+                });\n+            })\n+            .onErrorResume((Throwable throwable) -> {\n+\n+                return Flux.fromIterable(serverRequest.getOperations()).flatMap((CosmosItemOperation itemOperation) -> {\n+                    return handleTransactionalBatchExecutionException(itemOperation, throwable, groupSink);\n+                });\n+            });\n+    }\n+\n+    // Helper functions\n+    private Mono<CosmosBulkOperationResponse<TContext>> handleTransactionalBatchOperationResult(\n+        TransactionalBatchResponse response,\n+        TransactionalBatchOperationResult operationResult,\n+        FluxSink<CosmosItemOperation> groupSink) {\n+\n+        CosmosBulkItemResponse cosmosBulkItemResponse = BridgeInternal.createCosmosBulkItemResponse(operationResult, response);\n+        CosmosItemOperation itemOperation = operationResult.getOperation();\n+\n+        if (!operationResult.isSuccessStatusCode()) {\n+\n+            if(itemOperation instanceof ItemBulkOperation<?>) {\n+\n+                return ((ItemBulkOperation<?>) itemOperation).getRetryPolicy().shouldRetry(operationResult).flatMap(\n+                    result -> {\n+                        if (result.shouldRetry) {\n+                            groupSink.next(itemOperation);\n+                            return Mono.empty();\n+                        } else {\n+                            return Mono.just(BridgeInternal.createCosmosBulkOperationResponse(\n+                                itemOperation, cosmosBulkItemResponse, this.batchContext));\n+                        }\n+                    });\n+\n+            } else {\n+                throw new UnsupportedOperationException(\"Unknown CosmosItemOperation.\");\n+            }\n+        }\n+\n+        return Mono.just(BridgeInternal.createCosmosBulkOperationResponse(\n+            itemOperation,\n+            cosmosBulkItemResponse,\n+            this.batchContext));\n+    }\n+\n+    private Mono<CosmosBulkOperationResponse<TContext>> handleTransactionalBatchExecutionException(\n+        CosmosItemOperation itemOperation,\n+        Throwable throwable,\n+        FluxSink<CosmosItemOperation> groupSink) {\n+\n+        if(throwable instanceof CosmosException && itemOperation instanceof ItemBulkOperation<?>) {\n+            CosmosException cosmosException = (CosmosException) throwable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM4ODY0Mw=="}, "originalCommit": {"oid": "ffedbec2559ce7e719c459fdb7ad7b80a0ab8968"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUxODE5NQ==", "bodyText": "Will change it. The \"if (\" seems to be widely accepted elsewhere. Thanks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r518518195", "createdAt": "2020-11-06T04:34:12Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/batch/BulkExecutor.java", "diffHunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.batch;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.BulkProcessingOptions;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosBridgeInternal;\n+import com.azure.cosmos.CosmosBulkItemResponse;\n+import com.azure.cosmos.CosmosBulkOperationResponse;\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.CosmosItemOperation;\n+import com.azure.cosmos.ThrottlingRetryOptions;\n+import com.azure.cosmos.TransactionalBatchOperationResult;\n+import com.azure.cosmos.TransactionalBatchResponse;\n+import com.azure.cosmos.implementation.AsyncDocumentClient;\n+import com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.FluxProcessor;\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.GroupedFlux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.UnicastProcessor;\n+import reactor.core.scheduler.Schedulers;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+public final class BulkExecutor<TContext> {\n+\n+    private final static Logger logger = LoggerFactory.getLogger(BulkExecutor.class);\n+\n+    private final CosmosAsyncContainer container;\n+    private final AsyncDocumentClient docClientWrapper;\n+    private final ThrottlingRetryOptions throttlingRetryOptions;\n+    private final Flux<CosmosItemOperation> inputOperations;\n+\n+    // Options for bulk execution.\n+    private final int maxMicroBatchSize;\n+    private final int maxMicroBatchConcurrency;\n+    private final Duration maxMicroBatchInterval;\n+    private final TContext batchContext;\n+\n+    // Handle gone error:\n+    private final AtomicBoolean mainSourceCompleted;\n+    private final AtomicInteger totalCount;\n+    private final FluxProcessor<CosmosItemOperation, CosmosItemOperation> mainFluxProcessor;\n+    private final FluxSink<CosmosItemOperation> mainSink;\n+    private final List<FluxSink<CosmosItemOperation>> groupSinks;\n+\n+    public BulkExecutor(CosmosAsyncContainer container,\n+                        Flux<CosmosItemOperation> inputOperations,\n+                        BulkProcessingOptions<TContext> bulkOptions) {\n+\n+        checkNotNull(container, \"expected non-null container\");\n+        checkNotNull(inputOperations, \"expected non-null inputOperations\");\n+        checkNotNull(bulkOptions, \"expected non-null bulkOptions\");\n+\n+        this.container = container;\n+        this.inputOperations = inputOperations;\n+        this.docClientWrapper = CosmosBridgeInternal.getAsyncDocumentClient(container.getDatabase());\n+        this.throttlingRetryOptions = docClientWrapper.getConnectionPolicy().getThrottlingRetryOptions();\n+\n+        // Fill the option first, to make the BulkProcessingOptions immutable, as if accessed directly, we might get\n+        // different values when a new group is created.\n+        maxMicroBatchSize = bulkOptions.getMaxMicroBatchSize();\n+        maxMicroBatchConcurrency = bulkOptions.getMaxMicroBatchConcurrency();\n+        maxMicroBatchInterval = bulkOptions.getMaxMicroBatchInterval();\n+        batchContext = bulkOptions.getBatchContext();\n+\n+        // Initialize sink for handling gone error.\n+        mainSourceCompleted = new AtomicBoolean(false);\n+        totalCount = new AtomicInteger(0);\n+        mainFluxProcessor = UnicastProcessor.<CosmosItemOperation>create().serialize();\n+        mainSink = mainFluxProcessor.sink(FluxSink.OverflowStrategy.BUFFER);\n+        groupSinks = new ArrayList<>();\n+    }\n+\n+    /**\n+     * The actual execution of the flux of operations. It is done in 5 steps:\n+\n+     * 1. Getting partition key range ID and grouping operations using that id.\n+     * 2. For the flux of operations in a group, adding buffering based on size and a duration.\n+     * 3. For the operation we get in after buffering, process it using a batch request and return\n+     *    a wrapper having request, response(if-any) and exception(if-any). Either response or exception will be there.\n+     *\n+     * 4. Any internal retry is done by adding in an intermediate sink for each grouped flux.\n+     * 5. Any operation which failed due to partition key range gone is retried by re calculating it's range id.\n+     */\n+    public Flux<CosmosBulkOperationResponse<TContext>> execute() {\n+\n+        Flux<CosmosBulkOperationResponse<TContext>> responseFlux = this.inputOperations\n+            .onErrorResume((error) -> {\n+                // eat up the error signals\n+                return Mono.empty();\n+            })\n+            .doOnNext((CosmosItemOperation cosmosItemOperation) -> {\n+\n+                // Set the retry policy before starting execution. Should only happens once.\n+                BulkExecutorUtil.setRetryPolicyForBulk(cosmosItemOperation, this.throttlingRetryOptions);\n+\n+                totalCount.incrementAndGet();\n+            })\n+            .doOnComplete(() -> {\n+                mainSourceCompleted.set(true);\n+\n+                if (totalCount.get() == 0) {\n+                    // This is needed as there can be case that onComplete was called after last element was processed\n+                    // So complete the sink here also if count is 0, if source has completed and count isn't zero,\n+                    // then the last element in the doOnNext will close it. Sink doesn't mind in case of a double close.\n+\n+                    completeAllSinks();\n+                }\n+            })\n+            .mergeWith(mainFluxProcessor)\n+            .flatMap(operation -> {\n+\n+                // resolve partition key range id again for operations which comes in main sink due to gone retry.\n+                return BulkExecutorUtil.resolvePartitionKeyRangeId(this.docClientWrapper, this.container, operation)\n+                    .map((String pkRangeId) -> Pair.of(pkRangeId, operation));\n+            })\n+            .groupBy(Pair::getKey, Pair::getValue)\n+            .flatMap(this::executePartitionedGroup)\n+            .doOnNext(requestAndResponse -> {\n+\n+                if (totalCount.decrementAndGet() == 0 && mainSourceCompleted.get()) {\n+                    // It is possible that count is zero but there are more elements in the source.\n+                    // Count 0 also signifies that there are no pending elements in any sink.\n+\n+                    completeAllSinks();\n+                }\n+            });\n+\n+        return responseFlux;\n+    }\n+\n+    private Flux<CosmosBulkOperationResponse<TContext>> executePartitionedGroup(\n+        GroupedFlux<String, CosmosItemOperation> partitionedGroupFluxOfInputOperations) {\n+\n+        final String pkRange = partitionedGroupFluxOfInputOperations.key();\n+\n+        final FluxProcessor<CosmosItemOperation, CosmosItemOperation> groupFluxProcessor =\n+            UnicastProcessor.<CosmosItemOperation>create().serialize();\n+        final FluxSink<CosmosItemOperation> groupSink = groupFluxProcessor.sink(FluxSink.OverflowStrategy.BUFFER);\n+        groupSinks.add(groupSink);\n+\n+        return partitionedGroupFluxOfInputOperations\n+            .mergeWith(groupFluxProcessor)\n+            .bufferTimeout(this.maxMicroBatchSize, this.maxMicroBatchInterval)\n+            .onBackpressureBuffer()\n+            .flatMap((List<CosmosItemOperation> cosmosItemOperations) -> {\n+                return executeOperations(cosmosItemOperations, pkRange, groupSink);\n+            }, this.maxMicroBatchConcurrency);\n+    }\n+\n+    private Flux<CosmosBulkOperationResponse<TContext>> executeOperations(\n+        List<CosmosItemOperation> operations,\n+        String pkRange,\n+        FluxSink<CosmosItemOperation> groupSink) {\n+\n+        ServerOperationBatchRequest serverOperationBatchRequest = BulkExecutorUtil.createBatchRequest(operations, pkRange);\n+        if (serverOperationBatchRequest.getBatchPendingOperations().size() > 0) {\n+            serverOperationBatchRequest.getBatchPendingOperations().forEach(groupSink::next);\n+        }\n+\n+        return Flux.just(serverOperationBatchRequest.getBatchRequest())\n+            .publishOn(Schedulers.elastic())\n+            .flatMap((PartitionKeyRangeServerBatchRequest serverRequest) -> {\n+                return this.executePartitionKeyRangeServerBatchRequest(serverRequest, groupSink);\n+            });\n+    }\n+\n+    private Flux<CosmosBulkOperationResponse<TContext>> executePartitionKeyRangeServerBatchRequest(\n+        PartitionKeyRangeServerBatchRequest serverRequest,\n+        FluxSink<CosmosItemOperation> groupSink) {\n+\n+        return this.executeBatchRequest(serverRequest)\n+            .flatMapMany(response -> {\n+\n+                return Flux.fromIterable(response.getResults()).flatMap((TransactionalBatchOperationResult result) -> {\n+                    return handleTransactionalBatchOperationResult(response, result, groupSink);\n+                });\n+            })\n+            .onErrorResume((Throwable throwable) -> {\n+\n+                return Flux.fromIterable(serverRequest.getOperations()).flatMap((CosmosItemOperation itemOperation) -> {\n+                    return handleTransactionalBatchExecutionException(itemOperation, throwable, groupSink);\n+                });\n+            });\n+    }\n+\n+    // Helper functions\n+    private Mono<CosmosBulkOperationResponse<TContext>> handleTransactionalBatchOperationResult(\n+        TransactionalBatchResponse response,\n+        TransactionalBatchOperationResult operationResult,\n+        FluxSink<CosmosItemOperation> groupSink) {\n+\n+        CosmosBulkItemResponse cosmosBulkItemResponse = BridgeInternal.createCosmosBulkItemResponse(operationResult, response);\n+        CosmosItemOperation itemOperation = operationResult.getOperation();\n+\n+        if (!operationResult.isSuccessStatusCode()) {\n+\n+            if(itemOperation instanceof ItemBulkOperation<?>) {\n+\n+                return ((ItemBulkOperation<?>) itemOperation).getRetryPolicy().shouldRetry(operationResult).flatMap(\n+                    result -> {\n+                        if (result.shouldRetry) {\n+                            groupSink.next(itemOperation);\n+                            return Mono.empty();\n+                        } else {\n+                            return Mono.just(BridgeInternal.createCosmosBulkOperationResponse(\n+                                itemOperation, cosmosBulkItemResponse, this.batchContext));\n+                        }\n+                    });\n+\n+            } else {\n+                throw new UnsupportedOperationException(\"Unknown CosmosItemOperation.\");\n+            }\n+        }\n+\n+        return Mono.just(BridgeInternal.createCosmosBulkOperationResponse(\n+            itemOperation,\n+            cosmosBulkItemResponse,\n+            this.batchContext));\n+    }\n+\n+    private Mono<CosmosBulkOperationResponse<TContext>> handleTransactionalBatchExecutionException(\n+        CosmosItemOperation itemOperation,\n+        Throwable throwable,\n+        FluxSink<CosmosItemOperation> groupSink) {\n+\n+        if(throwable instanceof CosmosException && itemOperation instanceof ItemBulkOperation<?>) {\n+            CosmosException cosmosException = (CosmosException) throwable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM4ODY0Mw=="}, "originalCommit": {"oid": "ffedbec2559ce7e719c459fdb7ad7b80a0ab8968"}, "originalPosition": 242}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTcxNzM5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkOperations.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNToxODozMFrOHwMHDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMToxNTo0MVrOH4fn5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MjExMA==", "bodyText": "\"new\" prefix sounds very odd actually... are there any other options to consider here? \"insert\" or \"compose\" may be?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r520292110", "createdAt": "2020-11-10T05:18:30Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkOperations.java", "diffHunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.batch.ItemBulkOperation;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.Beta;\n+import reactor.core.publisher.Flux;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Utility for creating bulk operations which can be executed by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)} .\n+ *\n+ * Also while creating these operation, if some options which are only for individual operation can be provided by passing\n+ * a {@link BulkItemRequestOptions} while creating the bulk operation.\n+ *\n+ * See also {@link BulkProcessingOptions}.\n+ */\n+@Beta(Beta.SinceVersion.V4_9_0)\n+public final class BulkOperations {\n+\n+    /**\n+     * Instantiate an operation for Creating item in Bulk execution.\n+     *\n+     * @param <T> The type of item to be created.\n+     *\n+     * @param item A JSON serializable object that must contain an id property.\n+     * @param partitionKey the partition key for the operation\n+     *\n+     * @return the bulk operation.\n+     */\n+    public static <T> CosmosItemOperation newCreateItemOperation(T item, PartitionKey partitionKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2382a652e626a6ca0890b0401bae068245648fd4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxNjUxMA==", "bodyText": "Insert seems like we are putting in a container. But we are returning the operation right.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r520316510", "createdAt": "2020-11-10T06:20:18Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkOperations.java", "diffHunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.batch.ItemBulkOperation;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.Beta;\n+import reactor.core.publisher.Flux;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Utility for creating bulk operations which can be executed by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)} .\n+ *\n+ * Also while creating these operation, if some options which are only for individual operation can be provided by passing\n+ * a {@link BulkItemRequestOptions} while creating the bulk operation.\n+ *\n+ * See also {@link BulkProcessingOptions}.\n+ */\n+@Beta(Beta.SinceVersion.V4_9_0)\n+public final class BulkOperations {\n+\n+    /**\n+     * Instantiate an operation for Creating item in Bulk execution.\n+     *\n+     * @param <T> The type of item to be created.\n+     *\n+     * @param item A JSON serializable object that must contain an id property.\n+     * @param partitionKey the partition key for the operation\n+     *\n+     * @return the bulk operation.\n+     */\n+    public static <T> CosmosItemOperation newCreateItemOperation(T item, PartitionKey partitionKey) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MjExMA=="}, "originalCommit": {"oid": "2382a652e626a6ca0890b0401bae068245648fd4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyNjk4MQ==", "bodyText": "How about \"compose\" or a similar wording? \"newCreate...\" and \"newDelete..\" just does not sound right... Plus \"new\" has a whole different meaning in Java, and in that case it's better if using a constructor method and not a static one; though I will guess that will add an explosion of new classes, for each operation type...", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r520326981", "createdAt": "2020-11-10T06:43:53Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkOperations.java", "diffHunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.batch.ItemBulkOperation;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.Beta;\n+import reactor.core.publisher.Flux;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Utility for creating bulk operations which can be executed by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)} .\n+ *\n+ * Also while creating these operation, if some options which are only for individual operation can be provided by passing\n+ * a {@link BulkItemRequestOptions} while creating the bulk operation.\n+ *\n+ * See also {@link BulkProcessingOptions}.\n+ */\n+@Beta(Beta.SinceVersion.V4_9_0)\n+public final class BulkOperations {\n+\n+    /**\n+     * Instantiate an operation for Creating item in Bulk execution.\n+     *\n+     * @param <T> The type of item to be created.\n+     *\n+     * @param item A JSON serializable object that must contain an id property.\n+     * @param partitionKey the partition key for the operation\n+     *\n+     * @return the bulk operation.\n+     */\n+    public static <T> CosmosItemOperation newCreateItemOperation(T item, PartitionKey partitionKey) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MjExMA=="}, "originalCommit": {"oid": "2382a652e626a6ca0890b0401bae068245648fd4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkzNTQwMQ==", "bodyText": "to me as well \"new\" prefix seems odd. how about not having any prefix at all? (e.g., newCreateItemOperation() -> createItemOperation()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r520935401", "createdAt": "2020-11-10T23:17:29Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkOperations.java", "diffHunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.batch.ItemBulkOperation;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.Beta;\n+import reactor.core.publisher.Flux;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Utility for creating bulk operations which can be executed by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)} .\n+ *\n+ * Also while creating these operation, if some options which are only for individual operation can be provided by passing\n+ * a {@link BulkItemRequestOptions} while creating the bulk operation.\n+ *\n+ * See also {@link BulkProcessingOptions}.\n+ */\n+@Beta(Beta.SinceVersion.V4_9_0)\n+public final class BulkOperations {\n+\n+    /**\n+     * Instantiate an operation for Creating item in Bulk execution.\n+     *\n+     * @param <T> The type of item to be created.\n+     *\n+     * @param item A JSON serializable object that must contain an id property.\n+     * @param partitionKey the partition key for the operation\n+     *\n+     * @return the bulk operation.\n+     */\n+    public static <T> CosmosItemOperation newCreateItemOperation(T item, PartitionKey partitionKey) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MjExMA=="}, "originalCommit": {"oid": "2382a652e626a6ca0890b0401bae068245648fd4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg3Nzk0Ng==", "bodyText": "But this might seem like BulkOperation is executing the operation rather than returning the operation to be executed by another function. So that's why I was thinking to have a get/new or some similar verb.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r525877946", "createdAt": "2020-11-18T07:57:36Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkOperations.java", "diffHunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.batch.ItemBulkOperation;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.Beta;\n+import reactor.core.publisher.Flux;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Utility for creating bulk operations which can be executed by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)} .\n+ *\n+ * Also while creating these operation, if some options which are only for individual operation can be provided by passing\n+ * a {@link BulkItemRequestOptions} while creating the bulk operation.\n+ *\n+ * See also {@link BulkProcessingOptions}.\n+ */\n+@Beta(Beta.SinceVersion.V4_9_0)\n+public final class BulkOperations {\n+\n+    /**\n+     * Instantiate an operation for Creating item in Bulk execution.\n+     *\n+     * @param <T> The type of item to be created.\n+     *\n+     * @param item A JSON serializable object that must contain an id property.\n+     * @param partitionKey the partition key for the operation\n+     *\n+     * @return the bulk operation.\n+     */\n+    public static <T> CosmosItemOperation newCreateItemOperation(T item, PartitionKey partitionKey) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MjExMA=="}, "originalCommit": {"oid": "2382a652e626a6ca0890b0401bae068245648fd4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzMxMDc1MQ==", "bodyText": "I agree with @rakkuma here, without prefix, it might confuse the user. I am fine with both getCreateItemOperation() or composeCreateItemOperation().", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r527310751", "createdAt": "2020-11-20T00:39:05Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkOperations.java", "diffHunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.batch.ItemBulkOperation;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.Beta;\n+import reactor.core.publisher.Flux;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Utility for creating bulk operations which can be executed by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)} .\n+ *\n+ * Also while creating these operation, if some options which are only for individual operation can be provided by passing\n+ * a {@link BulkItemRequestOptions} while creating the bulk operation.\n+ *\n+ * See also {@link BulkProcessingOptions}.\n+ */\n+@Beta(Beta.SinceVersion.V4_9_0)\n+public final class BulkOperations {\n+\n+    /**\n+     * Instantiate an operation for Creating item in Bulk execution.\n+     *\n+     * @param <T> The type of item to be created.\n+     *\n+     * @param item A JSON serializable object that must contain an id property.\n+     * @param partitionKey the partition key for the operation\n+     *\n+     * @return the bulk operation.\n+     */\n+    public static <T> CosmosItemOperation newCreateItemOperation(T item, PartitionKey partitionKey) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MjExMA=="}, "originalCommit": {"oid": "2382a652e626a6ca0890b0401bae068245648fd4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzMzODg0NA==", "bodyText": "Is this something the central SDK team should decide?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r527338844", "createdAt": "2020-11-20T01:38:31Z", "author": {"login": "j82w"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkOperations.java", "diffHunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.batch.ItemBulkOperation;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.Beta;\n+import reactor.core.publisher.Flux;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Utility for creating bulk operations which can be executed by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)} .\n+ *\n+ * Also while creating these operation, if some options which are only for individual operation can be provided by passing\n+ * a {@link BulkItemRequestOptions} while creating the bulk operation.\n+ *\n+ * See also {@link BulkProcessingOptions}.\n+ */\n+@Beta(Beta.SinceVersion.V4_9_0)\n+public final class BulkOperations {\n+\n+    /**\n+     * Instantiate an operation for Creating item in Bulk execution.\n+     *\n+     * @param <T> The type of item to be created.\n+     *\n+     * @param item A JSON serializable object that must contain an id property.\n+     * @param partitionKey the partition key for the operation\n+     *\n+     * @return the bulk operation.\n+     */\n+    public static <T> CosmosItemOperation newCreateItemOperation(T item, PartitionKey partitionKey) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MjExMA=="}, "originalCommit": {"oid": "2382a652e626a6ca0890b0401bae068245648fd4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAwMDQyMg==", "bodyText": "the SDK team decided on the \"get\" as the prefix: e.g.: getCreateItemOperation()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r529000422", "createdAt": "2020-11-23T21:15:41Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkOperations.java", "diffHunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.batch.ItemBulkOperation;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.Beta;\n+import reactor.core.publisher.Flux;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Utility for creating bulk operations which can be executed by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)} .\n+ *\n+ * Also while creating these operation, if some options which are only for individual operation can be provided by passing\n+ * a {@link BulkItemRequestOptions} while creating the bulk operation.\n+ *\n+ * See also {@link BulkProcessingOptions}.\n+ */\n+@Beta(Beta.SinceVersion.V4_9_0)\n+public final class BulkOperations {\n+\n+    /**\n+     * Instantiate an operation for Creating item in Bulk execution.\n+     *\n+     * @param <T> The type of item to be created.\n+     *\n+     * @param item A JSON serializable object that must contain an id property.\n+     * @param partitionKey the partition key for the operation\n+     *\n+     * @return the bulk operation.\n+     */\n+    public static <T> CosmosItemOperation newCreateItemOperation(T item, PartitionKey partitionKey) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MjExMA=="}, "originalCommit": {"oid": "2382a652e626a6ca0890b0401bae068245648fd4"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTczNDAzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkProcessingOptions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNToyNzowOVrOHwMQpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMjoxNToyOFrOHwxvLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NDU2NA==", "bodyText": "do we really need the TContext here? From the content of the rest of the class and its methods, it does not look like we have any particular logic to be considered based on this TContext.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r520294564", "createdAt": "2020-11-10T05:27:09Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkProcessingOptions.java", "diffHunk": "@@ -0,0 +1,61 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.batch.BatchRequestResponseConstants;\n+import com.azure.cosmos.util.Beta;\n+import reactor.core.publisher.Flux;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Encapsulates options for executing a bulk. This is immutable once\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)} is called, changing it will have no affect.\n+ */\n+@Beta(Beta.SinceVersion.V4_9_0)\n+public final class BulkProcessingOptions<TContext> {\n+    private int maxMicroBatchSize = BatchRequestResponseConstants.MAX_OPERATIONS_IN_DIRECT_MODE_BATCH_REQUEST;\n+    private int maxMicroBatchConcurrency = BatchRequestResponseConstants.DEFAULT_MAX_MICRO_BATCH_CONCURRENCY;\n+    private Duration maxMicroBatchInterval = Duration.ofMillis(BatchRequestResponseConstants.DEFAULT_MAX_MICRO_BATCH_INTERVAL_IN_MILLISECONDS);\n+    private final TContext batchContext;\n+\n+    public BulkProcessingOptions(TContext batchContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2382a652e626a6ca0890b0401bae068245648fd4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkwODU4OQ==", "bodyText": "we'll need it - that is the way how the caller can pass through state needed to update bookmarks etc. We discussed this when we iterated over it in the public surface area discussions. Please leave it for now - we can add samples and then iterate if really needed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r520908589", "createdAt": "2020-11-10T22:15:28Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkProcessingOptions.java", "diffHunk": "@@ -0,0 +1,61 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.batch.BatchRequestResponseConstants;\n+import com.azure.cosmos.util.Beta;\n+import reactor.core.publisher.Flux;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Encapsulates options for executing a bulk. This is immutable once\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)} is called, changing it will have no affect.\n+ */\n+@Beta(Beta.SinceVersion.V4_9_0)\n+public final class BulkProcessingOptions<TContext> {\n+    private int maxMicroBatchSize = BatchRequestResponseConstants.MAX_OPERATIONS_IN_DIRECT_MODE_BATCH_REQUEST;\n+    private int maxMicroBatchConcurrency = BatchRequestResponseConstants.DEFAULT_MAX_MICRO_BATCH_CONCURRENCY;\n+    private Duration maxMicroBatchInterval = Duration.ofMillis(BatchRequestResponseConstants.DEFAULT_MAX_MICRO_BATCH_INTERVAL_IN_MILLISECONDS);\n+    private final TContext batchContext;\n+\n+    public BulkProcessingOptions(TContext batchContext) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NDU2NA=="}, "originalCommit": {"oid": "2382a652e626a6ca0890b0401bae068245648fd4"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTczOTMwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNToyODozN1rOHwMUHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMjoxNToxMFrOHwxuoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NTQ1Mg==", "bodyText": "See my previous comment on TContext... I don't think we need it, so we might just remove this and keep the BulkProcessingOptions simpler.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r520295452", "createdAt": "2020-11-10T05:28:37Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -585,6 +586,74 @@ public String getId() {\n             });\n     }\n \n+    /**\n+     * Executes flux of operations in Bulk.\n+     *\n+     * @param <TContext> The context for the bulk processing.\n+     * @param operations Flux of operation which will be executed by this container.\n+     *\n+     * @return A Flux of {@link CosmosBulkOperationResponse} which contains operation and it's response or exception.\n+     * <p>\n+     *     To create a operation which can be executed here, use {@link BulkOperations}. For eg.\n+     *     for a upsert operation use {@link BulkOperations#newUpsertItemOperation(Object, PartitionKey)}\n+     * </p>\n+     * <p>\n+     *     We can get the corresponding operation using {@link CosmosBulkOperationResponse#getOperation()} and\n+     *     it's response using {@link CosmosBulkOperationResponse#getResponse()}. If the operation was executed\n+     *     successfully, the value returned by {@link CosmosBulkItemResponse#isSuccessStatusCode()} will be true. To get\n+     *     actual status use {@link CosmosBulkItemResponse#getStatusCode()}.\n+     * </p>\n+     * To check if the operation had any exception, use {@link CosmosBulkOperationResponse#getThrowable()} to\n+     * get the exception.\n+     */\n+    @Beta(Beta.SinceVersion.V4_9_0)\n+    public <TContext> Flux<CosmosBulkOperationResponse<TContext>> processBulkOperations(\n+        Flux<CosmosItemOperation> operations) {\n+\n+        return this.processBulkOperations(operations, new BulkProcessingOptions<>());\n+    }\n+\n+    /**\n+     * Executes flux of operations in Bulk.\n+     *\n+     * @param <TContext> The context for the bulk processing.\n+     *\n+     * @param operations Flux of operation which will be executed by this container.\n+     * @param bulkOptions Options that apply for this Bulk request which specifies options regarding execution like\n+     *                    concurrency, batching size, interval and context.\n+     *\n+     * @return A Flux of {@link CosmosBulkOperationResponse} which contains operation and it's response or exception.\n+     * <p>\n+     *     To create a operation which can be executed here, use {@link BulkOperations}. For eg.\n+     *     for a upsert operation use {@link BulkOperations#newUpsertItemOperation(Object, PartitionKey)}\n+     * </p>\n+     * <p>\n+     *     We can get the corresponding operation using {@link CosmosBulkOperationResponse#getOperation()} and\n+     *     it's response using {@link CosmosBulkOperationResponse#getResponse()}. If the operation was executed\n+     *     successfully, the value returned by {@link CosmosBulkItemResponse#isSuccessStatusCode()} will be true. To get\n+     *     actual status use {@link CosmosBulkItemResponse#getStatusCode()}.\n+     * </p>\n+     * To check if the operation had any exception, use {@link CosmosBulkOperationResponse#getThrowable()} to\n+     * get the exception.\n+     */\n+    @Beta(Beta.SinceVersion.V4_9_0)\n+    public <TContext> Flux<CosmosBulkOperationResponse<TContext>> processBulkOperations(\n+        Flux<CosmosItemOperation> operations,\n+        BulkProcessingOptions<TContext> bulkOptions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2382a652e626a6ca0890b0401bae068245648fd4"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkwODQ0OA==", "bodyText": "we'll need it - that is the way how the caller can pass through state needed to update bookmarks etc. We discussed this when we iterated over it in the public surface area discussions. Please leave it for now - we can add samples and then iterate if really needed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r520908448", "createdAt": "2020-11-10T22:15:10Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -585,6 +586,74 @@ public String getId() {\n             });\n     }\n \n+    /**\n+     * Executes flux of operations in Bulk.\n+     *\n+     * @param <TContext> The context for the bulk processing.\n+     * @param operations Flux of operation which will be executed by this container.\n+     *\n+     * @return A Flux of {@link CosmosBulkOperationResponse} which contains operation and it's response or exception.\n+     * <p>\n+     *     To create a operation which can be executed here, use {@link BulkOperations}. For eg.\n+     *     for a upsert operation use {@link BulkOperations#newUpsertItemOperation(Object, PartitionKey)}\n+     * </p>\n+     * <p>\n+     *     We can get the corresponding operation using {@link CosmosBulkOperationResponse#getOperation()} and\n+     *     it's response using {@link CosmosBulkOperationResponse#getResponse()}. If the operation was executed\n+     *     successfully, the value returned by {@link CosmosBulkItemResponse#isSuccessStatusCode()} will be true. To get\n+     *     actual status use {@link CosmosBulkItemResponse#getStatusCode()}.\n+     * </p>\n+     * To check if the operation had any exception, use {@link CosmosBulkOperationResponse#getThrowable()} to\n+     * get the exception.\n+     */\n+    @Beta(Beta.SinceVersion.V4_9_0)\n+    public <TContext> Flux<CosmosBulkOperationResponse<TContext>> processBulkOperations(\n+        Flux<CosmosItemOperation> operations) {\n+\n+        return this.processBulkOperations(operations, new BulkProcessingOptions<>());\n+    }\n+\n+    /**\n+     * Executes flux of operations in Bulk.\n+     *\n+     * @param <TContext> The context for the bulk processing.\n+     *\n+     * @param operations Flux of operation which will be executed by this container.\n+     * @param bulkOptions Options that apply for this Bulk request which specifies options regarding execution like\n+     *                    concurrency, batching size, interval and context.\n+     *\n+     * @return A Flux of {@link CosmosBulkOperationResponse} which contains operation and it's response or exception.\n+     * <p>\n+     *     To create a operation which can be executed here, use {@link BulkOperations}. For eg.\n+     *     for a upsert operation use {@link BulkOperations#newUpsertItemOperation(Object, PartitionKey)}\n+     * </p>\n+     * <p>\n+     *     We can get the corresponding operation using {@link CosmosBulkOperationResponse#getOperation()} and\n+     *     it's response using {@link CosmosBulkOperationResponse#getResponse()}. If the operation was executed\n+     *     successfully, the value returned by {@link CosmosBulkItemResponse#isSuccessStatusCode()} will be true. To get\n+     *     actual status use {@link CosmosBulkItemResponse#getStatusCode()}.\n+     * </p>\n+     * To check if the operation had any exception, use {@link CosmosBulkOperationResponse#getThrowable()} to\n+     * get the exception.\n+     */\n+    @Beta(Beta.SinceVersion.V4_9_0)\n+    public <TContext> Flux<CosmosBulkOperationResponse<TContext>> processBulkOperations(\n+        Flux<CosmosItemOperation> operations,\n+        BulkProcessingOptions<TContext> bulkOptions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NTQ1Mg=="}, "originalCommit": {"oid": "2382a652e626a6ca0890b0401bae068245648fd4"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTc2MTM4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkItemResponse.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNTozNzoyNFrOHwMhmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjoxNDo0NFrOHwNZcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5ODkwNQ==", "bodyText": "how will someone use an ETAG in the bulk operation context? I don't think it can be used...", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r520298905", "createdAt": "2020-11-10T05:37:24Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkItemResponse.java", "diffHunk": "@@ -0,0 +1,188 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.implementation.batch.BatchExecUtils;\n+import com.azure.cosmos.util.Beta;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import reactor.core.publisher.Flux;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Response of a {@link CosmosItemOperation} request when processed using Bulk by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)}.\n+ *\n+ */\n+@Beta(Beta.SinceVersion.V4_9_0)\n+public final class CosmosBulkItemResponse {\n+\n+    private final String eTag;\n+    private final double requestCharge;\n+    private final ObjectNode resourceObject;\n+    private final int statusCode;\n+    private final Duration retryAfter;\n+    private final int subStatusCode;\n+    private final Map<String, String> responseHeaders;\n+    private final CosmosDiagnostics cosmosDiagnostics;\n+\n+    /**\n+     * Initializes a new instance of the {@link CosmosBulkItemResponse} class.\n+     */\n+    CosmosBulkItemResponse(String eTag,\n+                           double requestCharge,\n+                           ObjectNode resourceObject,\n+                           int statusCode,\n+                           Duration retryAfter,\n+                           int subStatusCode,\n+                           Map<String, String> responseHeaders,\n+                           CosmosDiagnostics cosmosDiagnostics) {\n+\n+        checkNotNull(responseHeaders, \"expected non-null responseHeaders\");\n+\n+        this.eTag = eTag;\n+        this.requestCharge = requestCharge;\n+        this.resourceObject = resourceObject;\n+        this.statusCode = statusCode;\n+        this.retryAfter = retryAfter;\n+        this.subStatusCode = subStatusCode;\n+        this.responseHeaders = responseHeaders;\n+        this.cosmosDiagnostics = cosmosDiagnostics;\n+    }\n+\n+    /**\n+     * Gets the activity ID that identifies the server request made to execute this operation.\n+     *\n+     * @return the activity ID that identifies the server request made to execute this operation.\n+     */\n+    public String getActivityId() {\n+        return BatchExecUtils.getActivityId(this.responseHeaders);\n+    }\n+\n+    /**\n+     * Gets the entity tag associated with the current item.\n+     *\n+     * ETags are used for concurrency checking when updating resources.\n+     *\n+     * @return Entity tag associated with the current item.\n+     */\n+    public String getETag() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2382a652e626a6ca0890b0401bae068245648fd4"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5OTQ1OA==", "bodyText": "Neve mind... the CosmosBulkItemResponse is per each operation in the bulk, right?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r520299458", "createdAt": "2020-11-10T05:39:27Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkItemResponse.java", "diffHunk": "@@ -0,0 +1,188 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.implementation.batch.BatchExecUtils;\n+import com.azure.cosmos.util.Beta;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import reactor.core.publisher.Flux;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Response of a {@link CosmosItemOperation} request when processed using Bulk by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)}.\n+ *\n+ */\n+@Beta(Beta.SinceVersion.V4_9_0)\n+public final class CosmosBulkItemResponse {\n+\n+    private final String eTag;\n+    private final double requestCharge;\n+    private final ObjectNode resourceObject;\n+    private final int statusCode;\n+    private final Duration retryAfter;\n+    private final int subStatusCode;\n+    private final Map<String, String> responseHeaders;\n+    private final CosmosDiagnostics cosmosDiagnostics;\n+\n+    /**\n+     * Initializes a new instance of the {@link CosmosBulkItemResponse} class.\n+     */\n+    CosmosBulkItemResponse(String eTag,\n+                           double requestCharge,\n+                           ObjectNode resourceObject,\n+                           int statusCode,\n+                           Duration retryAfter,\n+                           int subStatusCode,\n+                           Map<String, String> responseHeaders,\n+                           CosmosDiagnostics cosmosDiagnostics) {\n+\n+        checkNotNull(responseHeaders, \"expected non-null responseHeaders\");\n+\n+        this.eTag = eTag;\n+        this.requestCharge = requestCharge;\n+        this.resourceObject = resourceObject;\n+        this.statusCode = statusCode;\n+        this.retryAfter = retryAfter;\n+        this.subStatusCode = subStatusCode;\n+        this.responseHeaders = responseHeaders;\n+        this.cosmosDiagnostics = cosmosDiagnostics;\n+    }\n+\n+    /**\n+     * Gets the activity ID that identifies the server request made to execute this operation.\n+     *\n+     * @return the activity ID that identifies the server request made to execute this operation.\n+     */\n+    public String getActivityId() {\n+        return BatchExecUtils.getActivityId(this.responseHeaders);\n+    }\n+\n+    /**\n+     * Gets the entity tag associated with the current item.\n+     *\n+     * ETags are used for concurrency checking when updating resources.\n+     *\n+     * @return Entity tag associated with the current item.\n+     */\n+    public String getETag() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5ODkwNQ=="}, "originalCommit": {"oid": "2382a652e626a6ca0890b0401bae068245648fd4"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxMzIwMw==", "bodyText": "Yes. And like normal operations, etag will yield NotModified or condition failed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r520313203", "createdAt": "2020-11-10T06:14:44Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkItemResponse.java", "diffHunk": "@@ -0,0 +1,188 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.implementation.batch.BatchExecUtils;\n+import com.azure.cosmos.util.Beta;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import reactor.core.publisher.Flux;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Response of a {@link CosmosItemOperation} request when processed using Bulk by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)}.\n+ *\n+ */\n+@Beta(Beta.SinceVersion.V4_9_0)\n+public final class CosmosBulkItemResponse {\n+\n+    private final String eTag;\n+    private final double requestCharge;\n+    private final ObjectNode resourceObject;\n+    private final int statusCode;\n+    private final Duration retryAfter;\n+    private final int subStatusCode;\n+    private final Map<String, String> responseHeaders;\n+    private final CosmosDiagnostics cosmosDiagnostics;\n+\n+    /**\n+     * Initializes a new instance of the {@link CosmosBulkItemResponse} class.\n+     */\n+    CosmosBulkItemResponse(String eTag,\n+                           double requestCharge,\n+                           ObjectNode resourceObject,\n+                           int statusCode,\n+                           Duration retryAfter,\n+                           int subStatusCode,\n+                           Map<String, String> responseHeaders,\n+                           CosmosDiagnostics cosmosDiagnostics) {\n+\n+        checkNotNull(responseHeaders, \"expected non-null responseHeaders\");\n+\n+        this.eTag = eTag;\n+        this.requestCharge = requestCharge;\n+        this.resourceObject = resourceObject;\n+        this.statusCode = statusCode;\n+        this.retryAfter = retryAfter;\n+        this.subStatusCode = subStatusCode;\n+        this.responseHeaders = responseHeaders;\n+        this.cosmosDiagnostics = cosmosDiagnostics;\n+    }\n+\n+    /**\n+     * Gets the activity ID that identifies the server request made to execute this operation.\n+     *\n+     * @return the activity ID that identifies the server request made to execute this operation.\n+     */\n+    public String getActivityId() {\n+        return BatchExecUtils.getActivityId(this.responseHeaders);\n+    }\n+\n+    /**\n+     * Gets the entity tag associated with the current item.\n+     *\n+     * ETags are used for concurrency checking when updating resources.\n+     *\n+     * @return Entity tag associated with the current item.\n+     */\n+    public String getETag() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5ODkwNQ=="}, "originalCommit": {"oid": "2382a652e626a6ca0890b0401bae068245648fd4"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTc2NzkyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkItemResponse.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNTo0MDo1NlrOHwMldA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjozODozOFrOHwOH9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5OTg5Mg==", "bodyText": "We should try to stay consistent.. in the above classes we use TContext rather than T", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r520299892", "createdAt": "2020-11-10T05:40:56Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkItemResponse.java", "diffHunk": "@@ -0,0 +1,188 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.implementation.batch.BatchExecUtils;\n+import com.azure.cosmos.util.Beta;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import reactor.core.publisher.Flux;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Response of a {@link CosmosItemOperation} request when processed using Bulk by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)}.\n+ *\n+ */\n+@Beta(Beta.SinceVersion.V4_9_0)\n+public final class CosmosBulkItemResponse {\n+\n+    private final String eTag;\n+    private final double requestCharge;\n+    private final ObjectNode resourceObject;\n+    private final int statusCode;\n+    private final Duration retryAfter;\n+    private final int subStatusCode;\n+    private final Map<String, String> responseHeaders;\n+    private final CosmosDiagnostics cosmosDiagnostics;\n+\n+    /**\n+     * Initializes a new instance of the {@link CosmosBulkItemResponse} class.\n+     */\n+    CosmosBulkItemResponse(String eTag,\n+                           double requestCharge,\n+                           ObjectNode resourceObject,\n+                           int statusCode,\n+                           Duration retryAfter,\n+                           int subStatusCode,\n+                           Map<String, String> responseHeaders,\n+                           CosmosDiagnostics cosmosDiagnostics) {\n+\n+        checkNotNull(responseHeaders, \"expected non-null responseHeaders\");\n+\n+        this.eTag = eTag;\n+        this.requestCharge = requestCharge;\n+        this.resourceObject = resourceObject;\n+        this.statusCode = statusCode;\n+        this.retryAfter = retryAfter;\n+        this.subStatusCode = subStatusCode;\n+        this.responseHeaders = responseHeaders;\n+        this.cosmosDiagnostics = cosmosDiagnostics;\n+    }\n+\n+    /**\n+     * Gets the activity ID that identifies the server request made to execute this operation.\n+     *\n+     * @return the activity ID that identifies the server request made to execute this operation.\n+     */\n+    public String getActivityId() {\n+        return BatchExecUtils.getActivityId(this.responseHeaders);\n+    }\n+\n+    /**\n+     * Gets the entity tag associated with the current item.\n+     *\n+     * ETags are used for concurrency checking when updating resources.\n+     *\n+     * @return Entity tag associated with the current item.\n+     */\n+    public String getETag() {\n+        return this.eTag;\n+    }\n+\n+    /**\n+     * Gets the request charge as request units (RU) consumed by the current operation.\n+     * <p>\n+     * For more information about the RU and factors that can impact the effective charges please visit\n+     * <a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/request-units\">Request Units in Azure Cosmos DB</a>\n+     *\n+     * @return the request charge.\n+     */\n+    public double getRequestCharge() {\n+        return this.requestCharge;\n+    }\n+\n+    /**\n+     * Gets the item associated with the current result.\n+     *\n+     * @param <T> the type parameter\n+     *\n+     * @param type class type for which deserialization is needed.\n+     *\n+     * @return item associated with the current result.\n+     */\n+    public <T> T getItem(final Class<T> type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2382a652e626a6ca0890b0401bae068245648fd4"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxMzk1Ng==", "bodyText": "Context is different, this is item type, the same is in TransactionalBatchItemResponse.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r520313956", "createdAt": "2020-11-10T06:15:53Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkItemResponse.java", "diffHunk": "@@ -0,0 +1,188 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.implementation.batch.BatchExecUtils;\n+import com.azure.cosmos.util.Beta;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import reactor.core.publisher.Flux;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Response of a {@link CosmosItemOperation} request when processed using Bulk by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)}.\n+ *\n+ */\n+@Beta(Beta.SinceVersion.V4_9_0)\n+public final class CosmosBulkItemResponse {\n+\n+    private final String eTag;\n+    private final double requestCharge;\n+    private final ObjectNode resourceObject;\n+    private final int statusCode;\n+    private final Duration retryAfter;\n+    private final int subStatusCode;\n+    private final Map<String, String> responseHeaders;\n+    private final CosmosDiagnostics cosmosDiagnostics;\n+\n+    /**\n+     * Initializes a new instance of the {@link CosmosBulkItemResponse} class.\n+     */\n+    CosmosBulkItemResponse(String eTag,\n+                           double requestCharge,\n+                           ObjectNode resourceObject,\n+                           int statusCode,\n+                           Duration retryAfter,\n+                           int subStatusCode,\n+                           Map<String, String> responseHeaders,\n+                           CosmosDiagnostics cosmosDiagnostics) {\n+\n+        checkNotNull(responseHeaders, \"expected non-null responseHeaders\");\n+\n+        this.eTag = eTag;\n+        this.requestCharge = requestCharge;\n+        this.resourceObject = resourceObject;\n+        this.statusCode = statusCode;\n+        this.retryAfter = retryAfter;\n+        this.subStatusCode = subStatusCode;\n+        this.responseHeaders = responseHeaders;\n+        this.cosmosDiagnostics = cosmosDiagnostics;\n+    }\n+\n+    /**\n+     * Gets the activity ID that identifies the server request made to execute this operation.\n+     *\n+     * @return the activity ID that identifies the server request made to execute this operation.\n+     */\n+    public String getActivityId() {\n+        return BatchExecUtils.getActivityId(this.responseHeaders);\n+    }\n+\n+    /**\n+     * Gets the entity tag associated with the current item.\n+     *\n+     * ETags are used for concurrency checking when updating resources.\n+     *\n+     * @return Entity tag associated with the current item.\n+     */\n+    public String getETag() {\n+        return this.eTag;\n+    }\n+\n+    /**\n+     * Gets the request charge as request units (RU) consumed by the current operation.\n+     * <p>\n+     * For more information about the RU and factors that can impact the effective charges please visit\n+     * <a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/request-units\">Request Units in Azure Cosmos DB</a>\n+     *\n+     * @return the request charge.\n+     */\n+    public double getRequestCharge() {\n+        return this.requestCharge;\n+    }\n+\n+    /**\n+     * Gets the item associated with the current result.\n+     *\n+     * @param <T> the type parameter\n+     *\n+     * @param type class type for which deserialization is needed.\n+     *\n+     * @return item associated with the current result.\n+     */\n+    public <T> T getItem(final Class<T> type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5OTg5Mg=="}, "originalCommit": {"oid": "2382a652e626a6ca0890b0401bae068245648fd4"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyMjk5NQ==", "bodyText": "I'm not sure I understand... TContext is used to specify the POJO when creating a CosmosItemOperation, right? If so, should that be the same here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r520322995", "createdAt": "2020-11-10T06:34:07Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkItemResponse.java", "diffHunk": "@@ -0,0 +1,188 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.implementation.batch.BatchExecUtils;\n+import com.azure.cosmos.util.Beta;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import reactor.core.publisher.Flux;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Response of a {@link CosmosItemOperation} request when processed using Bulk by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)}.\n+ *\n+ */\n+@Beta(Beta.SinceVersion.V4_9_0)\n+public final class CosmosBulkItemResponse {\n+\n+    private final String eTag;\n+    private final double requestCharge;\n+    private final ObjectNode resourceObject;\n+    private final int statusCode;\n+    private final Duration retryAfter;\n+    private final int subStatusCode;\n+    private final Map<String, String> responseHeaders;\n+    private final CosmosDiagnostics cosmosDiagnostics;\n+\n+    /**\n+     * Initializes a new instance of the {@link CosmosBulkItemResponse} class.\n+     */\n+    CosmosBulkItemResponse(String eTag,\n+                           double requestCharge,\n+                           ObjectNode resourceObject,\n+                           int statusCode,\n+                           Duration retryAfter,\n+                           int subStatusCode,\n+                           Map<String, String> responseHeaders,\n+                           CosmosDiagnostics cosmosDiagnostics) {\n+\n+        checkNotNull(responseHeaders, \"expected non-null responseHeaders\");\n+\n+        this.eTag = eTag;\n+        this.requestCharge = requestCharge;\n+        this.resourceObject = resourceObject;\n+        this.statusCode = statusCode;\n+        this.retryAfter = retryAfter;\n+        this.subStatusCode = subStatusCode;\n+        this.responseHeaders = responseHeaders;\n+        this.cosmosDiagnostics = cosmosDiagnostics;\n+    }\n+\n+    /**\n+     * Gets the activity ID that identifies the server request made to execute this operation.\n+     *\n+     * @return the activity ID that identifies the server request made to execute this operation.\n+     */\n+    public String getActivityId() {\n+        return BatchExecUtils.getActivityId(this.responseHeaders);\n+    }\n+\n+    /**\n+     * Gets the entity tag associated with the current item.\n+     *\n+     * ETags are used for concurrency checking when updating resources.\n+     *\n+     * @return Entity tag associated with the current item.\n+     */\n+    public String getETag() {\n+        return this.eTag;\n+    }\n+\n+    /**\n+     * Gets the request charge as request units (RU) consumed by the current operation.\n+     * <p>\n+     * For more information about the RU and factors that can impact the effective charges please visit\n+     * <a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/request-units\">Request Units in Azure Cosmos DB</a>\n+     *\n+     * @return the request charge.\n+     */\n+    public double getRequestCharge() {\n+        return this.requestCharge;\n+    }\n+\n+    /**\n+     * Gets the item associated with the current result.\n+     *\n+     * @param <T> the type parameter\n+     *\n+     * @param type class type for which deserialization is needed.\n+     *\n+     * @return item associated with the current result.\n+     */\n+    public <T> T getItem(final Class<T> type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5OTg5Mg=="}, "originalCommit": {"oid": "2382a652e626a6ca0890b0401bae068245648fd4"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyNTEwOA==", "bodyText": "No no. We are not fixing the type for a bulk execution. TContext is passed in the options. Operations in a bulk can have different class type. This is something for the users to distinguish between bulk executions.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r520325108", "createdAt": "2020-11-10T06:38:38Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkItemResponse.java", "diffHunk": "@@ -0,0 +1,188 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.implementation.batch.BatchExecUtils;\n+import com.azure.cosmos.util.Beta;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import reactor.core.publisher.Flux;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Response of a {@link CosmosItemOperation} request when processed using Bulk by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)}.\n+ *\n+ */\n+@Beta(Beta.SinceVersion.V4_9_0)\n+public final class CosmosBulkItemResponse {\n+\n+    private final String eTag;\n+    private final double requestCharge;\n+    private final ObjectNode resourceObject;\n+    private final int statusCode;\n+    private final Duration retryAfter;\n+    private final int subStatusCode;\n+    private final Map<String, String> responseHeaders;\n+    private final CosmosDiagnostics cosmosDiagnostics;\n+\n+    /**\n+     * Initializes a new instance of the {@link CosmosBulkItemResponse} class.\n+     */\n+    CosmosBulkItemResponse(String eTag,\n+                           double requestCharge,\n+                           ObjectNode resourceObject,\n+                           int statusCode,\n+                           Duration retryAfter,\n+                           int subStatusCode,\n+                           Map<String, String> responseHeaders,\n+                           CosmosDiagnostics cosmosDiagnostics) {\n+\n+        checkNotNull(responseHeaders, \"expected non-null responseHeaders\");\n+\n+        this.eTag = eTag;\n+        this.requestCharge = requestCharge;\n+        this.resourceObject = resourceObject;\n+        this.statusCode = statusCode;\n+        this.retryAfter = retryAfter;\n+        this.subStatusCode = subStatusCode;\n+        this.responseHeaders = responseHeaders;\n+        this.cosmosDiagnostics = cosmosDiagnostics;\n+    }\n+\n+    /**\n+     * Gets the activity ID that identifies the server request made to execute this operation.\n+     *\n+     * @return the activity ID that identifies the server request made to execute this operation.\n+     */\n+    public String getActivityId() {\n+        return BatchExecUtils.getActivityId(this.responseHeaders);\n+    }\n+\n+    /**\n+     * Gets the entity tag associated with the current item.\n+     *\n+     * ETags are used for concurrency checking when updating resources.\n+     *\n+     * @return Entity tag associated with the current item.\n+     */\n+    public String getETag() {\n+        return this.eTag;\n+    }\n+\n+    /**\n+     * Gets the request charge as request units (RU) consumed by the current operation.\n+     * <p>\n+     * For more information about the RU and factors that can impact the effective charges please visit\n+     * <a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/request-units\">Request Units in Azure Cosmos DB</a>\n+     *\n+     * @return the request charge.\n+     */\n+    public double getRequestCharge() {\n+        return this.requestCharge;\n+    }\n+\n+    /**\n+     * Gets the item associated with the current result.\n+     *\n+     * @param <T> the type parameter\n+     *\n+     * @param type class type for which deserialization is needed.\n+     *\n+     * @return item associated with the current result.\n+     */\n+    public <T> T getItem(final Class<T> type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5OTg5Mg=="}, "originalCommit": {"oid": "2382a652e626a6ca0890b0401bae068245648fd4"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTgxNDQ4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkOperationResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMzoyMzoyMFrOHwzguQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDoyNDoxMVrOH1m4pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkzNzY1Nw==", "bodyText": "Throwable vs Exception vs CosmosException", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r520937657", "createdAt": "2020-11-10T23:23:20Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkOperationResponse.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.util.Beta;\n+import reactor.core.publisher.Flux;\n+\n+/**\n+ * Request, response and the exception(if any) for a {@link CosmosItemOperation} request when processed using Bulk by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)}.\n+ */\n+@Beta(Beta.SinceVersion.V4_9_0)\n+public final class CosmosBulkOperationResponse<TContext> {\n+\n+    private final CosmosItemOperation operation;\n+    private final CosmosBulkItemResponse response;\n+    private final Throwable throwable;\n+    private final TContext batchContext;\n+\n+    /**\n+     * Initialises a new instance of {@link CosmosBulkOperationResponse}.\n+     *\n+     * @param operation the {@link CosmosItemOperation} for which this response object has values.\n+     * @param response the {@link CosmosBulkItemResponse} the bulk response.\n+     * @param batchContext the context of this bulk request.\n+     */\n+    CosmosBulkOperationResponse(CosmosItemOperation operation, CosmosBulkItemResponse response, TContext batchContext) {\n+        this.operation = operation;\n+        this.response = response;\n+        this.throwable = null;\n+        this.batchContext = batchContext;\n+    }\n+\n+    /**\n+     * Initialises a new instance of {@link CosmosBulkOperationResponse}.\n+     *\n+     * @param operation the {@link CosmosItemOperation} for which this response object has values.\n+     * @param throwable the {@link Throwable} for this request.\n+     * @param batchContext the context of this bulk request.\n+     */\n+    CosmosBulkOperationResponse(CosmosItemOperation operation, Throwable throwable, TContext batchContext) {\n+        this.operation = operation;\n+        this.response = null;\n+        this.throwable = throwable;\n+        this.batchContext = batchContext;\n+    }\n+\n+    public CosmosItemOperation getOperation() {\n+        return operation;\n+    }\n+\n+    public CosmosBulkItemResponse getResponse() {\n+        return response;\n+    }\n+\n+    public Throwable getThrowable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2382a652e626a6ca0890b0401bae068245648fd4"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk3MzY2OA==", "bodyText": "Have kept it exception.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r525973668", "createdAt": "2020-11-18T10:24:11Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBulkOperationResponse.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.util.Beta;\n+import reactor.core.publisher.Flux;\n+\n+/**\n+ * Request, response and the exception(if any) for a {@link CosmosItemOperation} request when processed using Bulk by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)}.\n+ */\n+@Beta(Beta.SinceVersion.V4_9_0)\n+public final class CosmosBulkOperationResponse<TContext> {\n+\n+    private final CosmosItemOperation operation;\n+    private final CosmosBulkItemResponse response;\n+    private final Throwable throwable;\n+    private final TContext batchContext;\n+\n+    /**\n+     * Initialises a new instance of {@link CosmosBulkOperationResponse}.\n+     *\n+     * @param operation the {@link CosmosItemOperation} for which this response object has values.\n+     * @param response the {@link CosmosBulkItemResponse} the bulk response.\n+     * @param batchContext the context of this bulk request.\n+     */\n+    CosmosBulkOperationResponse(CosmosItemOperation operation, CosmosBulkItemResponse response, TContext batchContext) {\n+        this.operation = operation;\n+        this.response = response;\n+        this.throwable = null;\n+        this.batchContext = batchContext;\n+    }\n+\n+    /**\n+     * Initialises a new instance of {@link CosmosBulkOperationResponse}.\n+     *\n+     * @param operation the {@link CosmosItemOperation} for which this response object has values.\n+     * @param throwable the {@link Throwable} for this request.\n+     * @param batchContext the context of this bulk request.\n+     */\n+    CosmosBulkOperationResponse(CosmosItemOperation operation, Throwable throwable, TContext batchContext) {\n+        this.operation = operation;\n+        this.response = null;\n+        this.throwable = throwable;\n+        this.batchContext = batchContext;\n+    }\n+\n+    public CosmosItemOperation getOperation() {\n+        return operation;\n+    }\n+\n+    public CosmosBulkItemResponse getResponse() {\n+        return response;\n+    }\n+\n+    public Throwable getThrowable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkzNzY1Nw=="}, "originalCommit": {"oid": "2382a652e626a6ca0890b0401bae068245648fd4"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTgyMTIyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMzoyNjowM1rOHwzkpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDoyMjozNlrOH1m0Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkzODY2Mw==", "bodyText": "This should be Iterable instead of List.\nIterable is a better translation for Flux in sync world than a List.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r520938663", "createdAt": "2020-11-10T23:26:03Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosContainer.java", "diffHunk": "@@ -538,6 +554,64 @@ public TransactionalBatchResponse executeTransactionalBatch(\n         return this.blockBatchResponse(asyncContainer.executeTransactionalBatch(transactionalBatch, requestOptions));\n     }\n \n+    /**\n+     * Executes list of operations in Bulk.\n+     *\n+     * @param <TContext> The context for the bulk processing.\n+     * @param operations list of operation which will be executed by this container.\n+     *\n+     * @return A list of {@link CosmosBulkOperationResponse} which contains operation and it's response or exception.\n+     * <p>\n+     *     To create a operation which can be executed here, use {@link BulkOperations}. For eg.\n+     *     for a upsert operation use {@link BulkOperations#newUpsertItemOperation(Object, PartitionKey)}\n+     * </p>\n+     * <p>\n+     *     We can get the corresponding operation using {@link CosmosBulkOperationResponse#getOperation()} and\n+     *     it's response using {@link CosmosBulkOperationResponse#getResponse()}. If the operation was executed\n+     *     successfully, the value returned by {@link CosmosBulkItemResponse#isSuccessStatusCode()} will be true. To get\n+     *     actual status use {@link CosmosBulkItemResponse#getStatusCode()}.\n+     * </p>\n+     * To check if the operation had any exception, use {@link CosmosBulkOperationResponse#getThrowable()} to\n+     * get the exception.\n+     */\n+    @Beta(Beta.SinceVersion.V4_9_0)\n+    public <TContext> List<CosmosBulkOperationResponse<TContext>> processBulkOperations(\n+        List<CosmosItemOperation> operations) {\n+\n+        return this.blockBulkResponse(asyncContainer.processBulkOperations(Flux.fromIterable(operations)));\n+    }\n+\n+    /**\n+     * Executes list of operations in Bulk.\n+     *\n+     * @param <TContext> The context for the bulk processing.\n+     *\n+     * @param operations list of operation which will be executed by this container.\n+     * @param bulkOptions Options that apply for this Bulk request which specifies options regarding execution like\n+     *                    concurrency, batching size, interval and context.\n+     *\n+     * @return A list of {@link CosmosBulkOperationResponse} which contains operation and it's response or exception.\n+     * <p>\n+     *     To create a operation which can be executed here, use {@link BulkOperations}. For eg.\n+     *     for a upsert operation use {@link BulkOperations#newUpsertItemOperation(Object, PartitionKey)}\n+     * </p>\n+     * <p>\n+     *     We can get the corresponding operation using {@link CosmosBulkOperationResponse#getOperation()} and\n+     *     it's response using {@link CosmosBulkOperationResponse#getResponse()}. If the operation was executed\n+     *     successfully, the value returned by {@link CosmosBulkItemResponse#isSuccessStatusCode()} will be true. To get\n+     *     actual status use {@link CosmosBulkItemResponse#getStatusCode()}.\n+     * </p>\n+     * To check if the operation had any exception, use {@link CosmosBulkOperationResponse#getThrowable()} to\n+     * get the exception.\n+     */\n+    @Beta(Beta.SinceVersion.V4_9_0)\n+    public <TContext> List<CosmosBulkOperationResponse<TContext>> processBulkOperations(\n+        List<CosmosItemOperation> operations,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2382a652e626a6ca0890b0401bae068245648fd4"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk3MjU2Mg==", "bodyText": "Fixed. Thanks mo.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r525972562", "createdAt": "2020-11-18T10:22:36Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosContainer.java", "diffHunk": "@@ -538,6 +554,64 @@ public TransactionalBatchResponse executeTransactionalBatch(\n         return this.blockBatchResponse(asyncContainer.executeTransactionalBatch(transactionalBatch, requestOptions));\n     }\n \n+    /**\n+     * Executes list of operations in Bulk.\n+     *\n+     * @param <TContext> The context for the bulk processing.\n+     * @param operations list of operation which will be executed by this container.\n+     *\n+     * @return A list of {@link CosmosBulkOperationResponse} which contains operation and it's response or exception.\n+     * <p>\n+     *     To create a operation which can be executed here, use {@link BulkOperations}. For eg.\n+     *     for a upsert operation use {@link BulkOperations#newUpsertItemOperation(Object, PartitionKey)}\n+     * </p>\n+     * <p>\n+     *     We can get the corresponding operation using {@link CosmosBulkOperationResponse#getOperation()} and\n+     *     it's response using {@link CosmosBulkOperationResponse#getResponse()}. If the operation was executed\n+     *     successfully, the value returned by {@link CosmosBulkItemResponse#isSuccessStatusCode()} will be true. To get\n+     *     actual status use {@link CosmosBulkItemResponse#getStatusCode()}.\n+     * </p>\n+     * To check if the operation had any exception, use {@link CosmosBulkOperationResponse#getThrowable()} to\n+     * get the exception.\n+     */\n+    @Beta(Beta.SinceVersion.V4_9_0)\n+    public <TContext> List<CosmosBulkOperationResponse<TContext>> processBulkOperations(\n+        List<CosmosItemOperation> operations) {\n+\n+        return this.blockBulkResponse(asyncContainer.processBulkOperations(Flux.fromIterable(operations)));\n+    }\n+\n+    /**\n+     * Executes list of operations in Bulk.\n+     *\n+     * @param <TContext> The context for the bulk processing.\n+     *\n+     * @param operations list of operation which will be executed by this container.\n+     * @param bulkOptions Options that apply for this Bulk request which specifies options regarding execution like\n+     *                    concurrency, batching size, interval and context.\n+     *\n+     * @return A list of {@link CosmosBulkOperationResponse} which contains operation and it's response or exception.\n+     * <p>\n+     *     To create a operation which can be executed here, use {@link BulkOperations}. For eg.\n+     *     for a upsert operation use {@link BulkOperations#newUpsertItemOperation(Object, PartitionKey)}\n+     * </p>\n+     * <p>\n+     *     We can get the corresponding operation using {@link CosmosBulkOperationResponse#getOperation()} and\n+     *     it's response using {@link CosmosBulkOperationResponse#getResponse()}. If the operation was executed\n+     *     successfully, the value returned by {@link CosmosBulkItemResponse#isSuccessStatusCode()} will be true. To get\n+     *     actual status use {@link CosmosBulkItemResponse#getStatusCode()}.\n+     * </p>\n+     * To check if the operation had any exception, use {@link CosmosBulkOperationResponse#getThrowable()} to\n+     * get the exception.\n+     */\n+    @Beta(Beta.SinceVersion.V4_9_0)\n+    public <TContext> List<CosmosBulkOperationResponse<TContext>> processBulkOperations(\n+        List<CosmosItemOperation> operations,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkzODY2Mw=="}, "originalCommit": {"oid": "2382a652e626a6ca0890b0401bae068245648fd4"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTgyMTQ5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosContainer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMzoyNjoxMVrOHwzk1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMzoyNjoxMVrOHwzk1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkzODcwOQ==", "bodyText": "This should be Iterable instead of List.\nIterable is a better translation for Flux in sync world than a List.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r520938709", "createdAt": "2020-11-10T23:26:11Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosContainer.java", "diffHunk": "@@ -538,6 +554,64 @@ public TransactionalBatchResponse executeTransactionalBatch(\n         return this.blockBatchResponse(asyncContainer.executeTransactionalBatch(transactionalBatch, requestOptions));\n     }\n \n+    /**\n+     * Executes list of operations in Bulk.\n+     *\n+     * @param <TContext> The context for the bulk processing.\n+     * @param operations list of operation which will be executed by this container.\n+     *\n+     * @return A list of {@link CosmosBulkOperationResponse} which contains operation and it's response or exception.\n+     * <p>\n+     *     To create a operation which can be executed here, use {@link BulkOperations}. For eg.\n+     *     for a upsert operation use {@link BulkOperations#newUpsertItemOperation(Object, PartitionKey)}\n+     * </p>\n+     * <p>\n+     *     We can get the corresponding operation using {@link CosmosBulkOperationResponse#getOperation()} and\n+     *     it's response using {@link CosmosBulkOperationResponse#getResponse()}. If the operation was executed\n+     *     successfully, the value returned by {@link CosmosBulkItemResponse#isSuccessStatusCode()} will be true. To get\n+     *     actual status use {@link CosmosBulkItemResponse#getStatusCode()}.\n+     * </p>\n+     * To check if the operation had any exception, use {@link CosmosBulkOperationResponse#getThrowable()} to\n+     * get the exception.\n+     */\n+    @Beta(Beta.SinceVersion.V4_9_0)\n+    public <TContext> List<CosmosBulkOperationResponse<TContext>> processBulkOperations(\n+        List<CosmosItemOperation> operations) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2382a652e626a6ca0890b0401bae068245648fd4"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzE1ODU4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkOperations.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwODowMzo0MFrOH1hPFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMjowNjo1NlrOH2JvKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg4MTExMA==", "bodyText": "@milismsft @kushagraThapar should we keep Beta tag on class or all it's functions? What's the best way?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r525881110", "createdAt": "2020-11-18T08:03:40Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkOperations.java", "diffHunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.batch.ItemBulkOperation;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.Beta;\n+import reactor.core.publisher.Flux;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Utility for creating bulk operations which can be executed by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)} .\n+ *\n+ * Also while creating these operation, if some options which are only for individual operation can be provided by passing\n+ * a {@link BulkItemRequestOptions} while creating the bulk operation.\n+ *\n+ * See also {@link BulkProcessingOptions}.\n+ */\n+@Beta(Beta.SinceVersion.V4_9_0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2382a652e626a6ca0890b0401bae068245648fd4"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyODU5Mg==", "bodyText": "Discussed with Milis. Beta tag on class makes more sense for newly added class. Also later, if a function is added to in class which is in beta, that function will have new beta.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r526528592", "createdAt": "2020-11-19T01:17:17Z", "author": {"login": "rakkuma"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkOperations.java", "diffHunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.batch.ItemBulkOperation;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.Beta;\n+import reactor.core.publisher.Flux;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Utility for creating bulk operations which can be executed by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)} .\n+ *\n+ * Also while creating these operation, if some options which are only for individual operation can be provided by passing\n+ * a {@link BulkItemRequestOptions} while creating the bulk operation.\n+ *\n+ * See also {@link BulkProcessingOptions}.\n+ */\n+@Beta(Beta.SinceVersion.V4_9_0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg4MTExMA=="}, "originalCommit": {"oid": "2382a652e626a6ca0890b0401bae068245648fd4"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU0NDY4MA==", "bodyText": "absolutely :-)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16763#discussion_r526544680", "createdAt": "2020-11-19T02:06:56Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkOperations.java", "diffHunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.batch.ItemBulkOperation;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.Beta;\n+import reactor.core.publisher.Flux;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Utility for creating bulk operations which can be executed by calling\n+ * {@link CosmosAsyncContainer#processBulkOperations(Flux, BulkProcessingOptions)} .\n+ *\n+ * Also while creating these operation, if some options which are only for individual operation can be provided by passing\n+ * a {@link BulkItemRequestOptions} while creating the bulk operation.\n+ *\n+ * See also {@link BulkProcessingOptions}.\n+ */\n+@Beta(Beta.SinceVersion.V4_9_0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg4MTExMA=="}, "originalCommit": {"oid": "2382a652e626a6ca0890b0401bae068245648fd4"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3928, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}