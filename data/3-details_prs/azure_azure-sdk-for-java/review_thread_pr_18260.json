{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyMzg0MzQ5", "number": 18260, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMTo0NzoxMVrOFHo2jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjo0MToyOFrOFHpTpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTUzNjc3OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-webapp/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMTo0NzoxMVrOIJJ-HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMTo0NzoxMVrOIJJ-HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3MTQ1Mw==", "bodyText": "How about renaming resource-name to registration-id? Keep it same to the java doc of @RegisteredOAuth2AuthorizedClient.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18260#discussion_r546471453", "createdAt": "2020-12-21T01:47:11Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-webapp/README.md", "diffHunk": "@@ -17,15 +17,19 @@ Follow the guide [here](https://docs.microsoft.com/azure/active-directory/develo\n \n - Set redirect URIs with `http://localhost:8080/login/oauth2/code/azure`.\n - Ensure **Access tokens** and **ID tokens** are selected.\n+- To use on-demand authorization of certain resource, you need to add redirect URIs of `http://localhost:8080/login/oauth2/code/{resource-name}`. In this sample, set redirect URIs with `http://localhost:8080/login/oauth2/code/arm`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "903ae9235f70716779f227180dd1ff986708f2a7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTYwMjM4OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjozNToxNVrOIJKiHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjozNToxNVrOIJKiHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4MDY2OQ==", "bodyText": "Change\nThis starter provides a convenient way to quickly access resource servers, resources to be visited should be \nregistered as `ClientRegistration` by `@RegisteredOAuth2AuthorizedClient` annotation to mark the client \nresource. Spring Security will help automatically obtain valid access tokens based on the root refresh token, \nbusiness methods will use the corresponding access token to request client resources.\n\n\nto\nThis starter provides a convenient way to quickly access resource servers.\n1. Resource servers should be registered as `ClientRegistration`.  \n2. In Controller, `@RegisteredOAuth2AuthorizedClient` can be used to  get `OAuth2AuthorizedClient`. \n`OAuth2AuthorizedClient` contains accessToken to access related client resource.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18260#discussion_r546480669", "createdAt": "2020-12-21T02:35:15Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "diffHunk": "@@ -38,13 +38,18 @@ The authorization flow is composed of 3 phrases:\n The way to get group relationship depends on the graph api used, the default to get membership is the direct group of the user. \n To get all transitive relationships, the following configuration is required:\n \n-```properties\n-azure.activedirectory.graph-membership-uri=https://graph.microsoft.com/v1.0/me/transitiveMemberOf\n+```yaml\n+azure:\n+  activedirectory:\n+    graph-membership-uri: https://graph.microsoft.com/v1.0/me/transitiveMemberOf\n ``` \n \n ### Web application\n Based on Azure AD as a Web application, it uses OAuth2 authorization code flow to authentication, and authorizes resources based on the groups or roles claim in the access token. \n-Provide a convenient way to quickly access other resource server, other resources should be registered as `ClientRegistration`, use `@RegisteredOAuth2AuthorizedClient` annotation to mark the client resource, Spring Security will help automatically obtain valid access tokens based on the root refresh token, business methods will use the corresponding access token to request client resources.\n+This starter provides a convenient way to quickly access resource servers, resources to be visited should be registered as `ClientRegistration` by `@RegisteredOAuth2AuthorizedClient` annotation to mark the client resource. Spring Security will help automatically obtain valid access tokens based on the root refresh token, business methods will use the corresponding access token to request client resources.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "903ae9235f70716779f227180dd1ff986708f2a7"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTYwOTQ4OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjo0MDowMFrOIJKl3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjo0MDowMFrOIJKl3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4MTYzMQ==", "bodyText": "application.yml", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18260#discussion_r546481631", "createdAt": "2020-12-21T02:40:00Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "diffHunk": "@@ -119,21 +127,23 @@ public class AADOAuth2LoginConfigSample extends AzureOAuth2Configuration {\n Please refer to [azure-active-directory-spring-boot-sample](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server/README.md) for how to integrate Spring Security and Azure AD for authentication and authorization in a Single Page Application (SPA) scenario.\n \n #### Configure application.properties:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "903ae9235f70716779f227180dd1ff986708f2a7"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTYwOTY4OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjo0MDoxMVrOIJKl_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjo0MDoxMVrOIJKl_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4MTY2Mw==", "bodyText": "application.yml", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18260#discussion_r546481663", "createdAt": "2020-12-21T02:40:11Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "diffHunk": "@@ -151,9 +161,11 @@ so instead of using the `groups` claim the token has a `roles` claim which conta\n \n #### Configure your `application properties`:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "903ae9235f70716779f227180dd1ff986708f2a7"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTYxMDc0OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjo0MTowNVrOIJKmlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjo0MTowNVrOIJKmlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4MTgxNA==", "bodyText": "{resource-name} -> {registration-id}", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18260#discussion_r546481814", "createdAt": "2020-12-21T02:41:05Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "diffHunk": "@@ -199,31 +211,31 @@ public class AADAppRoleStatelessAuthenticationFilterConfigSample extends WebSecu\n The roles you want to use within your application have to be [set up in the manifest of your\n application registration](https://docs.microsoft.com/azure/active-directory/develop/howto-add-app-roles-in-azure-ad-apps).\n \n-### Using The Microsoft Graph API\n-By default, azure-spring-boot is set up to utilize the Microsoft Graph. If you would prefer, it can be set up to utilize the Azure AD Graph instead.  In order to do this, you will need to update the app registration in Azure to grant the application permissions to the Azure AD Graph API and add some properties to the application.properties file.\n-\n-* **Grant permissions to the application**: After application registration succeeded, go to API permissions - Add a permission, select `Azure Active Directory Graph`, select Delegated permissions,  tick `Directory.AccessAsUser.All - Access the directory as the signed-in user` and `Use.Read - Sign in and read user profile`. Click `Add Permissions` (Note: you will need administrator privilege to grant permission).  Furthermore, you can remove the API permissions to the Microsoft Graph, as these will not be needed.\n-\n-* **Configure your `application properties`**:\n-```properties\n-spring.security.oauth2.client.provider.azure.authorization-uri=https://login.microsoftonline.com/common/oauth2/authorize\n-spring.security.oauth2.client.provider.azure.token-uri=https://login.microsoftonline.com/common/oauth2/token\n-spring.security.oauth2.client.provider.azure.user-info-uri=https://login.microsoftonline.com/common/openid/userinfo\n-spring.security.oauth2.client.provider.azure.jwk-set-uri=https://login.microsoftonline.com/common/discovery/keys\n-#\n-spring.security.oauth2.client.registration.azure.scope=openid, https://graph.windows.net/user.read, {your-customized-scope}\n-```\n-\n-Please refer to [azure-spring-boot-sample-active-directory-webapp](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-webapp/README.md) to see a sample configured to use the Microsoft Graph API.\n+### Configure scopes of multiple resources\n \n+By default, `azure-spring-boot-starter-active-directory` configures scopes of `openid`, `profile` and `https://graph.microsoft.com/user.read` to implement OpenID Connect protocol and access of membership information of logging in users.\n \n-### Customize scopes in authorize requests\n+To customize scope configurations of multiple resources, developers need to configure the resource name and scopes in the `application.yml` as needed. Here the {resource-name} is defined by developers themselves to generate correspondding `OAuth2AuthorizedClient` to acquire access tokens, and scope names should follow the specification of `resource-uri/permission`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "903ae9235f70716779f227180dd1ff986708f2a7"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTYxMTAyOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjo0MToxNVrOIJKmtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjo0MToxNVrOIJKmtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4MTg0Ng==", "bodyText": "Same here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18260#discussion_r546481846", "createdAt": "2020-12-21T02:41:15Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "diffHunk": "@@ -199,31 +211,31 @@ public class AADAppRoleStatelessAuthenticationFilterConfigSample extends WebSecu\n The roles you want to use within your application have to be [set up in the manifest of your\n application registration](https://docs.microsoft.com/azure/active-directory/develop/howto-add-app-roles-in-azure-ad-apps).\n \n-### Using The Microsoft Graph API\n-By default, azure-spring-boot is set up to utilize the Microsoft Graph. If you would prefer, it can be set up to utilize the Azure AD Graph instead.  In order to do this, you will need to update the app registration in Azure to grant the application permissions to the Azure AD Graph API and add some properties to the application.properties file.\n-\n-* **Grant permissions to the application**: After application registration succeeded, go to API permissions - Add a permission, select `Azure Active Directory Graph`, select Delegated permissions,  tick `Directory.AccessAsUser.All - Access the directory as the signed-in user` and `Use.Read - Sign in and read user profile`. Click `Add Permissions` (Note: you will need administrator privilege to grant permission).  Furthermore, you can remove the API permissions to the Microsoft Graph, as these will not be needed.\n-\n-* **Configure your `application properties`**:\n-```properties\n-spring.security.oauth2.client.provider.azure.authorization-uri=https://login.microsoftonline.com/common/oauth2/authorize\n-spring.security.oauth2.client.provider.azure.token-uri=https://login.microsoftonline.com/common/oauth2/token\n-spring.security.oauth2.client.provider.azure.user-info-uri=https://login.microsoftonline.com/common/openid/userinfo\n-spring.security.oauth2.client.provider.azure.jwk-set-uri=https://login.microsoftonline.com/common/discovery/keys\n-#\n-spring.security.oauth2.client.registration.azure.scope=openid, https://graph.windows.net/user.read, {your-customized-scope}\n-```\n-\n-Please refer to [azure-spring-boot-sample-active-directory-webapp](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-webapp/README.md) to see a sample configured to use the Microsoft Graph API.\n+### Configure scopes of multiple resources\n \n+By default, `azure-spring-boot-starter-active-directory` configures scopes of `openid`, `profile` and `https://graph.microsoft.com/user.read` to implement OpenID Connect protocol and access of membership information of logging in users.\n \n-### Customize scopes in authorize requests\n+To customize scope configurations of multiple resources, developers need to configure the resource name and scopes in the `application.yml` as needed. Here the {resource-name} is defined by developers themselves to generate correspondding `OAuth2AuthorizedClient` to acquire access tokens, and scope names should follow the specification of `resource-uri/permission`.\n+```yaml\n+azure:\n+  activedirectory:\n+    authorization:\n+      graph:\n+        scopes: https://graph.microsoft.com/Analytics.Read, email\n+      {resource-name}:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "903ae9235f70716779f227180dd1ff986708f2a7"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTYxMTI3OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjo0MToyOFrOIJKm3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjo0MToyOFrOIJKm3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4MTg4Ng==", "bodyText": "same here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18260#discussion_r546481886", "createdAt": "2020-12-21T02:41:28Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "diffHunk": "@@ -199,31 +211,31 @@ public class AADAppRoleStatelessAuthenticationFilterConfigSample extends WebSecu\n The roles you want to use within your application have to be [set up in the manifest of your\n application registration](https://docs.microsoft.com/azure/active-directory/develop/howto-add-app-roles-in-azure-ad-apps).\n \n-### Using The Microsoft Graph API\n-By default, azure-spring-boot is set up to utilize the Microsoft Graph. If you would prefer, it can be set up to utilize the Azure AD Graph instead.  In order to do this, you will need to update the app registration in Azure to grant the application permissions to the Azure AD Graph API and add some properties to the application.properties file.\n-\n-* **Grant permissions to the application**: After application registration succeeded, go to API permissions - Add a permission, select `Azure Active Directory Graph`, select Delegated permissions,  tick `Directory.AccessAsUser.All - Access the directory as the signed-in user` and `Use.Read - Sign in and read user profile`. Click `Add Permissions` (Note: you will need administrator privilege to grant permission).  Furthermore, you can remove the API permissions to the Microsoft Graph, as these will not be needed.\n-\n-* **Configure your `application properties`**:\n-```properties\n-spring.security.oauth2.client.provider.azure.authorization-uri=https://login.microsoftonline.com/common/oauth2/authorize\n-spring.security.oauth2.client.provider.azure.token-uri=https://login.microsoftonline.com/common/oauth2/token\n-spring.security.oauth2.client.provider.azure.user-info-uri=https://login.microsoftonline.com/common/openid/userinfo\n-spring.security.oauth2.client.provider.azure.jwk-set-uri=https://login.microsoftonline.com/common/discovery/keys\n-#\n-spring.security.oauth2.client.registration.azure.scope=openid, https://graph.windows.net/user.read, {your-customized-scope}\n-```\n-\n-Please refer to [azure-spring-boot-sample-active-directory-webapp](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-webapp/README.md) to see a sample configured to use the Microsoft Graph API.\n+### Configure scopes of multiple resources\n \n+By default, `azure-spring-boot-starter-active-directory` configures scopes of `openid`, `profile` and `https://graph.microsoft.com/user.read` to implement OpenID Connect protocol and access of membership information of logging in users.\n \n-### Customize scopes in authorize requests\n+To customize scope configurations of multiple resources, developers need to configure the resource name and scopes in the `application.yml` as needed. Here the {resource-name} is defined by developers themselves to generate correspondding `OAuth2AuthorizedClient` to acquire access tokens, and scope names should follow the specification of `resource-uri/permission`.\n+```yaml\n+azure:\n+  activedirectory:\n+    authorization:\n+      graph:\n+        scopes: https://graph.microsoft.com/Analytics.Read, email\n+      {resource-name}:\n+        scopes: {scope1}, {scope2}\n+``` \n \n-By default, `azure-spring-boot-starter-active-directory` configures scopes of `openid`, `profile` and `https://graph.microsoft.com/user.read` to implement OpenID Connect protocol and access of Microsoft Graph API. For customization of scope, developers need to configure in the `application.properties`:\n+### Configure on-demand resource authorization \n+To configure the authorization of certain resource as on-demand, developers need to add following property in `application.yml`:\n ```yaml\n-azure.activedirectory.authorization.azure.scopes = openid, profile, https://graph.microsoft.com/user.read, {your-customized-scope}\n+azure:\n+  activedirectory:\n+    authorization:\n+      {resource-name}:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "903ae9235f70716779f227180dd1ff986708f2a7"}, "originalPosition": 133}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2468, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}