{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MDk3MzA2", "number": 12226, "title": "Allow overriding restricted headers for JDK 12+ HttpClient", "bodyText": "This PR enables overriding restricted request headers for JDK 12+ HttpClient. The allowed headers can be configured in either JAVA_HOME/conf/net.properties file or through Configuration or through System.properties. The key for each of these configurations is jdk.httpclient.allowRestrictedHeaders. Union of all above sources will be used to compute the effective restricted headers.", "createdAt": "2020-06-16T09:42:47Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12226", "merged": true, "mergeCommit": {"oid": "e1ca89f7a1bceb5622a5ed8795f15ca9821fc981"}, "closed": true, "closedAt": "2020-06-17T20:58:22Z", "author": {"login": "srnagar"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrx9iDgH2gAyNDM1MDk3MzA2OmYzM2Y5ZGVjOWViMDI2ZWI2ODY2NmQ4ZmRmYTI0NmIzMTEyMTZlY2U=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsDzFoAH2gAyNDM1MDk3MzA2OjI5Y2NmMDIyYWI4OTI2ZjE4ZjY5ZjQ5ODllYzY0NzAyMDNlZjY2NTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f33f9dec9eb026eb68666d8fdfa246b311216ece", "author": {"user": {"login": "srnagar", "name": "Srikanta"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f33f9dec9eb026eb68666d8fdfa246b311216ece", "committedDate": "2020-06-16T09:37:23Z", "message": "Allow overriding restricted headers for JDK 12+ HttpClient"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNjk3MDI5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12226#pullrequestreview-431697029", "createdAt": "2020-06-16T16:40:39Z", "commit": {"oid": "f33f9dec9eb026eb68666d8fdfa246b311216ece"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjo0MDozOVrOGkkDyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjo0MDozOVrOGkkDyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5MjcxMg==", "bodyText": "Does the JVM check both environment and system properties when allowing these headers to be used? If not we should use whichever it uses directly as Configuration will lookup against both.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12226#discussion_r440992712", "createdAt": "2020-06-16T16:40:39Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-http-jdk-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClientBuilder.java", "diffHunk": "@@ -144,7 +182,56 @@ public HttpClient build() {\n                         buildProxyOptions.getPassword()));\n             }\n         }\n-        return new JdkAsyncHttpClient(httpClientBuilder.build());\n+        return new JdkAsyncHttpClient(httpClientBuilder.build(), Collections.unmodifiableSet(getRestrictedHeaders()));\n+    }\n+\n+    Set<String> getRestrictedHeaders() {\n+        // Compute the effective restricted headers by removing the allowed headers from default restricted headers\n+        Set<String> allowRestrictedHeaders = getAllowRestrictedHeaders();\n+        Set<String> restrictedHeaders = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n+        restrictedHeaders.addAll(DEFAULT_RESTRICTED_HEADERS);\n+        restrictedHeaders.removeAll(allowRestrictedHeaders);\n+        return restrictedHeaders;\n+    }\n+\n+    private Set<String> getAllowRestrictedHeaders() {\n+        Properties properties = getNetworkProperties();\n+        String[] allowRestrictedHeadersNetProperties =\n+            properties.getProperty(JDK_HTTPCLIENT_ALLOW_RESTRICTED_HEADERS, \"\").split(\",\");\n+\n+        // Read all allowed restricted headers from configuration\n+        Configuration config = (this.configuration == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f33f9dec9eb026eb68666d8fdfa246b311216ece"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNzA0ODY5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12226#pullrequestreview-431704869", "createdAt": "2020-06-16T16:50:33Z", "commit": {"oid": "f33f9dec9eb026eb68666d8fdfa246b311216ece"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjo1MDozNFrOGkkbsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjo1MjoyMVrOGkkf3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5ODgzMg==", "bodyText": "There are several ways to have allowlist. Could you update the message here? Also, change whitelist wording.\nDo we want to change the log level to WARNING?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12226#discussion_r440998832", "createdAt": "2020-06-16T16:50:34Z", "author": {"login": "sima-zhu"}, "path": "sdk/core/azure-core-http-jdk-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java", "diffHunk": "@@ -89,7 +75,7 @@\n             if (headers != null) {\n                 for (HttpHeader header : headers) {\n                     final String headerName = header.getName();\n-                    if (!JDK12_RESTRICTED_HEADERS.contains(headerName)) {\n+                    if (!restrictedHeaders.contains(headerName)) {\n                         final String headerValue = header.getValue();\n                         builder.setHeader(headerName, headerValue);\n                     } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f33f9dec9eb026eb68666d8fdfa246b311216ece"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5OTkwMg==", "bodyText": "What's the purpose of having Case_Insensitive_Order?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12226#discussion_r440999902", "createdAt": "2020-06-16T16:52:21Z", "author": {"login": "sima-zhu"}, "path": "sdk/core/azure-core-http-jdk-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClientBuilder.java", "diffHunk": "@@ -144,7 +182,56 @@ public HttpClient build() {\n                         buildProxyOptions.getPassword()));\n             }\n         }\n-        return new JdkAsyncHttpClient(httpClientBuilder.build());\n+        return new JdkAsyncHttpClient(httpClientBuilder.build(), Collections.unmodifiableSet(getRestrictedHeaders()));\n+    }\n+\n+    Set<String> getRestrictedHeaders() {\n+        // Compute the effective restricted headers by removing the allowed headers from default restricted headers\n+        Set<String> allowRestrictedHeaders = getAllowRestrictedHeaders();\n+        Set<String> restrictedHeaders = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f33f9dec9eb026eb68666d8fdfa246b311216ece"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2b09e2c05d83e6765ec5503db19abc75d627617", "author": {"user": {"login": "srnagar", "name": "Srikanta"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a2b09e2c05d83e6765ec5503db19abc75d627617", "committedDate": "2020-06-16T21:10:28Z", "message": "Run rest proxy tests for JDK 12 and above only"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxOTUyOTQ3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12226#pullrequestreview-431952947", "createdAt": "2020-06-16T23:11:12Z", "commit": {"oid": "a2b09e2c05d83e6765ec5503db19abc75d627617"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMzoxMToxM1rOGkwN5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMzoxMToxM1rOGkwN5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5MTkxMA==", "bodyText": "'added to the allow list'", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12226#discussion_r441191910", "createdAt": "2020-06-16T23:11:13Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-http-jdk-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java", "diffHunk": "@@ -89,12 +75,14 @@\n             if (headers != null) {\n                 for (HttpHeader header : headers) {\n                     final String headerName = header.getName();\n-                    if (!JDK12_RESTRICTED_HEADERS.contains(headerName)) {\n+                    if (!restrictedHeaders.contains(headerName)) {\n                         final String headerValue = header.getValue();\n                         builder.setHeader(headerName, headerValue);\n                     } else {\n-                        logger.error(\"The header '\" + headerName + \"' is restricted by default in JDK HttpClient 12 \"\n-                            + \"and above (unless it is whitelisted in JAVA_HOME/conf/net.properties).\");\n+                        logger.warning(\"The header '\" + headerName + \"' is restricted by default in JDK HttpClient 12 \"\n+                            + \"and above. This header can be whitelisted in JAVA_HOME/conf/net.properties or in \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2b09e2c05d83e6765ec5503db19abc75d627617"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "226943a3758bb354ecbbfe843ea2438a39a293b7", "author": {"user": {"login": "srnagar", "name": "Srikanta"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/226943a3758bb354ecbbfe843ea2438a39a293b7", "committedDate": "2020-06-17T05:47:31Z", "message": "Run junit tests on JDK 12 or above"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29ccf022ab8926f18f69f4989ec6470203ef6652", "author": {"user": {"login": "srnagar", "name": "Srikanta"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/29ccf022ab8926f18f69f4989ec6470203ef6652", "committedDate": "2020-06-17T06:24:16Z", "message": "Skip jacoco coverage check until JDK 12 is supported in pipeline"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3045, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}