{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MjQ3OTA5", "number": 8466, "title": "Making databaseAccount read dynamic after V4 master merge", "bodyText": "This is same as PR on V4 branch - #7831\nCreated the new PR altogether as it was easier after V4 merge.\nBelow is the context\nCurrently GatewayServiceConfigurationReader initialize during client start up with one time snapshot of databaseAccount read via GlobalEndPointManager. Its value remain same throughout the lifespan of application.\nThis PR will read all the databaseAccount configurations via GatewayServiceConfigurationReader dynamically from cache which updates with its scheduling mechanism or any read/write account error.\nThis will also fix an issue in which application hits DatabaseAccount read call twice during startup.\nfixes #7668", "createdAt": "2020-02-24T21:47:12Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466", "merged": true, "mergeCommit": {"oid": "d937bf3be3a26f5c8393e631995e6826a2f0eaac"}, "closed": true, "closedAt": "2020-02-27T19:24:47Z", "author": {"login": "simplynaveen20"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHkahNAH2gAyMzc5MjQ3OTA5OjFkODg1NmExZGQxMGI5YWZhNjBkM2RhOWJhYmE3MDk2YzgyNTZlZDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIf5Z1AH2gAyMzc5MjQ3OTA5OjliNzQxODg3MzVlMmU5ZDYxMzkyNGU4ODg1YjdjMDgwODRjYWJhOGE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1d8856a1dd10b9afa60d3da9baba7096c8256ed6", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1d8856a1dd10b9afa60d3da9baba7096c8256ed6", "committedDate": "2020-02-24T21:29:06Z", "message": "making databaseAccount update dynamic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "390f8b2ff26e1e49884b860a3d35fdd216442eed", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/390f8b2ff26e1e49884b860a3d35fdd216442eed", "committedDate": "2020-02-24T21:39:51Z", "message": "Revert \"making databaseAccount update dynamic\"\n\nThis reverts commit 1d8856a1dd10b9afa60d3da9baba7096c8256ed6."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3864034a967a964eae0768fcac3d37d3fdc38276", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3864034a967a964eae0768fcac3d37d3fdc38276", "committedDate": "2020-02-24T21:42:31Z", "message": "making databaseAccount update dynamic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NDk3MDI3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#pullrequestreview-364497027", "createdAt": "2020-02-25T22:29:00Z", "commit": {"oid": "3864034a967a964eae0768fcac3d37d3fdc38276"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyOTowMVrOFuXmfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjozMjoyOVrOFuXseg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTUwMw==", "bodyText": "there is a bug here in refreshLocationAsync(.) invocation", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384165503", "createdAt": "2020-02-25T22:29:01Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java", "diffHunk": "@@ -159,6 +166,20 @@ public void close() {\n         });\n     }\n \n+    public Mono<DatabaseAccount> getDatabaseAccountFromCache(URI defaultEndpoint) {\n+        return this.databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, null, () -> this.owner.getDatabaseAccountFromEndpoint(defaultEndpoint).single().doOnSuccess(databaseAccount -> {\n+            if(databaseAccount != null) {\n+                this.latestDatabaseAccount = databaseAccount;\n+            }\n+\n+            this.refreshLocationAsync(databaseAccount, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3864034a967a964eae0768fcac3d37d3fdc38276"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NjUyMg==", "bodyText": "where are we doing the initialization blocking call now?\nIf the global endpoint manager is not fully initialized with first databaseAccount fetch could this return null?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384166522", "createdAt": "2020-02-25T22:31:18Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -250,29 +250,12 @@ private RxDocumentClientImpl(URI serviceEndpoint,\n     }\n \n     private void initializeGatewayConfigurationReader() {\n-        String resourceToken;\n-        if(this.tokenResolver != null) {\n-            resourceToken = this.tokenResolver.getAuthorizationToken(RequestVerb.GET, \"\", CosmosResourceType.System, null);\n-        } else if(!this.hasAuthKeyResourceToken && this.authorizationTokenProvider == null) {\n-            resourceToken = this.firstResourceTokenFromPermissionFeed;\n-        } else {\n-            assert  this.masterKeyOrResourceToken != null || this.cosmosKeyCredential != null;\n-            resourceToken = this.masterKeyOrResourceToken;\n-        }\n-\n-        this.gatewayConfigurationReader = new GatewayServiceConfigurationReader(this.serviceEndpoint,\n-                this.hasAuthKeyResourceToken,\n-                resourceToken,\n-                this.connectionPolicy,\n-                this.authorizationTokenProvider,\n-                this.reactorHttpClient);\n-\n-        DatabaseAccount databaseAccount = this.gatewayConfigurationReader.initializeReaderAsync().block();\n+        this.gatewayConfigurationReader = new GatewayServiceConfigurationReader(this.serviceEndpoint, this.globalEndpointManager);\n+        DatabaseAccount databaseAccount = this.globalEndpointManager.getLatestDatabaseAccount();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3864034a967a964eae0768fcac3d37d3fdc38276"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NzAzNA==", "bodyText": "there is a time window where GlobalEndpointManager is instantiated but hasn't fetched DatabaseAccount, within that period how do we ensure this never returns null?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384167034", "createdAt": "2020-02-25T22:32:29Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java", "diffHunk": "@@ -159,6 +166,20 @@ public void close() {\n         });\n     }\n \n+    public Mono<DatabaseAccount> getDatabaseAccountFromCache(URI defaultEndpoint) {\n+        return this.databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, null, () -> this.owner.getDatabaseAccountFromEndpoint(defaultEndpoint).single().doOnSuccess(databaseAccount -> {\n+            if(databaseAccount != null) {\n+                this.latestDatabaseAccount = databaseAccount;\n+            }\n+\n+            this.refreshLocationAsync(databaseAccount, false);\n+        }));\n+    }\n+\n+    public DatabaseAccount getLatestDatabaseAccount() {\n+        return this.latestDatabaseAccount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3864034a967a964eae0768fcac3d37d3fdc38276"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39fa9221dd222332b74dce47d08ca5e7e4eface3", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/39fa9221dd222332b74dce47d08ca5e7e4eface3", "committedDate": "2020-02-26T15:09:20Z", "message": "resolving comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MTcyMTcz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#pullrequestreview-365172173", "createdAt": "2020-02-26T19:18:44Z", "commit": {"oid": "39fa9221dd222332b74dce47d08ca5e7e4eface3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOToxODo0NFrOFu4tGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTozODo0NFrOFu5aYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwNzg2Nw==", "bodyText": "Please document the new API saying what you said above.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384707867", "createdAt": "2020-02-26T19:18:44Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java", "diffHunk": "@@ -159,6 +166,20 @@ public void close() {\n         });\n     }\n \n+    public Mono<DatabaseAccount> getDatabaseAccountFromCache(URI defaultEndpoint) {\n+        return this.databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, null, () -> this.owner.getDatabaseAccountFromEndpoint(defaultEndpoint).single().doOnSuccess(databaseAccount -> {\n+            if(databaseAccount != null) {\n+                this.latestDatabaseAccount = databaseAccount;\n+            }\n+\n+            this.refreshLocationAsync(databaseAccount, false);\n+        }));\n+    }\n+\n+    public DatabaseAccount getLatestDatabaseAccount() {\n+        return this.latestDatabaseAccount;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NzAzNA=="}, "originalCommit": {"oid": "3864034a967a964eae0768fcac3d37d3fdc38276"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwODU0Nw==", "bodyText": "could you please add an assert(databaseAccount != null) here. for sanity check and readibility.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384708547", "createdAt": "2020-02-26T19:20:12Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -250,29 +250,12 @@ private RxDocumentClientImpl(URI serviceEndpoint,\n     }\n \n     private void initializeGatewayConfigurationReader() {\n-        String resourceToken;\n-        if(this.tokenResolver != null) {\n-            resourceToken = this.tokenResolver.getAuthorizationToken(RequestVerb.GET, \"\", CosmosResourceType.System, null);\n-        } else if(!this.hasAuthKeyResourceToken && this.authorizationTokenProvider == null) {\n-            resourceToken = this.firstResourceTokenFromPermissionFeed;\n-        } else {\n-            assert  this.masterKeyOrResourceToken != null || this.cosmosKeyCredential != null;\n-            resourceToken = this.masterKeyOrResourceToken;\n-        }\n-\n-        this.gatewayConfigurationReader = new GatewayServiceConfigurationReader(this.serviceEndpoint,\n-                this.hasAuthKeyResourceToken,\n-                resourceToken,\n-                this.connectionPolicy,\n-                this.authorizationTokenProvider,\n-                this.reactorHttpClient);\n-\n-        DatabaseAccount databaseAccount = this.gatewayConfigurationReader.initializeReaderAsync().block();\n+        this.gatewayConfigurationReader = new GatewayServiceConfigurationReader(this.serviceEndpoint, this.globalEndpointManager);\n+        DatabaseAccount databaseAccount = this.globalEndpointManager.getLatestDatabaseAccount();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NjUyMg=="}, "originalCommit": {"oid": "3864034a967a964eae0768fcac3d37d3fdc38276"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMjYxMg==", "bodyText": "as this httpHeaders.set(HttpConstants.HttpHeaders.API_TYPE, Constants.Properties.SQL_API_TYPE); is removed, we are not passing this header to the service in the initialization time.\n\nwhat does .Net do?\nIs that ok not to set SQL_API_TYPE? what happens on non sql type account?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384712612", "createdAt": "2020-02-26T19:27:21Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayServiceConfigurationReader.java", "diffHunk": "@@ -42,118 +24,28 @@\n  */\n public class GatewayServiceConfigurationReader {\n \n-    public static final String GATEWAY_READER_NOT_INITIALIZED = \"GatewayServiceConfigurationReader has not been initialized\";\n-\n-    public ReplicationPolicy userReplicationPolicy;\n-    private ReplicationPolicy systemReplicationPolicy;\n-    private ConsistencyLevel consistencyLevel;\n-    private volatile boolean initialized;\n     private URI serviceEndpoint;\n-    private final ConnectionPolicy connectionPolicy;\n-    private Map<String, Object> queryEngineConfiguration;\n-    private final BaseAuthorizationTokenProvider baseAuthorizationTokenProvider;\n-    private final boolean hasAuthKeyResourceToken;\n-    private final String authKeyResourceToken;\n-    private HttpClient httpClient;\n+    private GlobalEndpointManager globalEndpointManager;\n \n-    public GatewayServiceConfigurationReader(URI serviceEndpoint, boolean hasResourceToken, String resourceToken,\n-            ConnectionPolicy connectionPolicy, BaseAuthorizationTokenProvider baseAuthorizationTokenProvider,\n-            HttpClient httpClient) {\n+    public GatewayServiceConfigurationReader(URI serviceEndpoint, GlobalEndpointManager globalEndpointManager) {\n         this.serviceEndpoint = serviceEndpoint;\n-        this.baseAuthorizationTokenProvider = baseAuthorizationTokenProvider;\n-        this.hasAuthKeyResourceToken = hasResourceToken;\n-        this.authKeyResourceToken = resourceToken;\n-        this.connectionPolicy = connectionPolicy;\n-        this.httpClient = httpClient;\n+        this.globalEndpointManager = globalEndpointManager;\n+        this.globalEndpointManager.getDatabaseAccountFromCache(this.serviceEndpoint).block();\n     }\n \n     public ReplicationPolicy getUserReplicationPolicy() {\n-        this.throwIfNotInitialized();\n-        return this.userReplicationPolicy;\n+        return BridgeInternal.getReplicationPolicy(this.globalEndpointManager.getLatestDatabaseAccount());\n     }\n \n     public ReplicationPolicy getSystemReplicationPolicy() {\n-        this.throwIfNotInitialized();\n-        return this.systemReplicationPolicy;\n-    }\n-\n-    public boolean enableAuthorization() {\n-        return true;\n+        return BridgeInternal.getSystemReplicationPolicy(this.globalEndpointManager.getLatestDatabaseAccount());\n     }\n \n     public ConsistencyLevel getDefaultConsistencyLevel() {\n-        this.throwIfNotInitialized();\n-        return this.consistencyLevel;\n-    }\n-\n-    public void setDefaultConsistencyLevel(ConsistencyLevel value) {\n-        this.throwIfNotInitialized();\n-        this.consistencyLevel = value;\n+        return BridgeInternal.getConsistencyPolicy(this.globalEndpointManager.getLatestDatabaseAccount()).getDefaultConsistencyLevel();\n     }\n \n     public Map<String, Object> getQueryEngineConfiguration() {\n-        this.throwIfNotInitialized();\n-        return this.queryEngineConfiguration;\n-    }\n-\n-    private Mono<DatabaseAccount> getDatabaseAccountAsync(URI serviceEndpoint) {\n-\n-        HttpHeaders httpHeaders = new HttpHeaders();\n-        httpHeaders.set(HttpConstants.HttpHeaders.VERSION, HttpConstants.Versions.CURRENT_VERSION);\n-\n-        UserAgentContainer userAgentContainer = new UserAgentContainer();\n-        String userAgentSuffix = this.connectionPolicy.getUserAgentSuffix();\n-        if (userAgentSuffix != null && userAgentSuffix.length() > 0) {\n-            userAgentContainer.setSuffix(userAgentSuffix);\n-        }\n-\n-        httpHeaders.set(HttpConstants.HttpHeaders.USER_AGENT, userAgentContainer.getUserAgent());\n-        httpHeaders.set(HttpConstants.HttpHeaders.API_TYPE, Constants.Properties.SQL_API_TYPE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39fa9221dd222332b74dce47d08ca5e7e4eface3"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxOTQ1OA==", "bodyText": "does this mean there is a window of time where there is an invalid result in the cache?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384719458", "createdAt": "2020-02-26T19:38:44Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java", "diffHunk": "@@ -253,8 +274,27 @@ private void startRefreshLocationTimerAsync() {\n     }\n \n     private Mono<DatabaseAccount> getDatabaseAccountAsync(URI serviceEndpoint) {\n-        return this.owner.getDatabaseAccountFromEndpoint(serviceEndpoint)\n-            .doOnNext(i -> logger.debug(\"account retrieved: {}\", i)).single();\n+        final GlobalEndpointManager that = this;\n+        Callable<Mono<DatabaseAccount>> fetchDatabaseAccount = () -> {\n+            return that.owner.getDatabaseAccountFromEndpoint(serviceEndpoint).doOnNext(databaseAccount -> {\n+                if(databaseAccount != null) {\n+                    this.latestDatabaseAccount = databaseAccount;\n+                }\n+\n+                logger.debug(\"account retrieved: {}\", databaseAccount);\n+            }).single();\n+        };\n+\n+        Mono<DatabaseAccount> obsoleteValueMono = databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, null, fetchDatabaseAccount);\n+        return obsoleteValueMono.flatMap(obsoleteValue -> {\n+            if (firstTimeDatabaseAccountInitialization.compareAndSet(true, false)) {\n+                return Mono.just(obsoleteValue);\n+            }\n+            return databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, obsoleteValue, fetchDatabaseAccount).doOnError(t -> {\n+                //Putting back the old value in cache, this will avoid cache corruption\n+                databaseAccountAsyncCache.set(StringUtils.EMPTY, obsoleteValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39fa9221dd222332b74dce47d08ca5e7e4eface3"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d27cde4738dbe5db8cfa725c732b34bf817f6fe2", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d27cde4738dbe5db8cfa725c732b34bf817f6fe2", "committedDate": "2020-02-26T21:06:59Z", "message": "removing cahce logic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MjgxNTgy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#pullrequestreview-365281582", "createdAt": "2020-02-26T22:11:04Z", "commit": {"oid": "d27cde4738dbe5db8cfa725c732b34bf817f6fe2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MjkyNTI0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#pullrequestreview-365292524", "createdAt": "2020-02-26T22:30:27Z", "commit": {"oid": "d27cde4738dbe5db8cfa725c732b34bf817f6fe2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b8c10c3c63f73108ecc5c1f17adc7d698ed2968", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9b8c10c3c63f73108ecc5c1f17adc7d698ed2968", "committedDate": "2020-02-27T18:01:57Z", "message": "resolving conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b74188735e2e9d613924e8885b7c08084caba8a", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9b74188735e2e9d613924e8885b7c08084caba8a", "committedDate": "2020-02-27T18:47:14Z", "message": "resolving conflicts"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1067, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}