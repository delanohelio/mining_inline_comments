{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyMTMzNjA4", "number": 17613, "title": "validate access token", "bodyText": "Make changes according to checkstyle\nadd unit tests\npom file add resource-server dependencies\nspring.factories file add autoconfiguration", "createdAt": "2020-11-17T04:38:57Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613", "merged": true, "mergeCommit": {"oid": "91651250dd98513375310904ae6e355d0cb32d06"}, "closed": true, "closedAt": "2020-11-30T02:27:39Z", "author": {"login": "ZhuXiaoBing-cn"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddR-BPAH2gAyNTIyMTMzNjA4OjI5YjVjZDAyOTQ5MDcxZDhhNDI0ZTg2OTg5YjQ2YWM1MDM4ZDVhNjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdhb5SogFqTUzODk2OTk0Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "29b5cd02949071d8a424e86989b46ac5038d5a61", "author": {"user": {"login": "ZhuXiaoBing-cn", "name": "Xiaobing Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/29b5cd02949071d8a424e86989b46ac5038d5a61", "committedDate": "2020-11-17T04:37:10Z", "message": "* Make changes according to checkstyle\n* add unit tests\n* pom file add resource-server dependencies\n* spring.factories file add autoconfiguration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "081cb825c1b3c89a3c6d80ebed3840666e83e714", "author": {"user": {"login": "ZhuXiaoBing-cn", "name": "Xiaobing Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/081cb825c1b3c89a3c6d80ebed3840666e83e714", "committedDate": "2020-11-17T05:58:28Z", "message": "* Make changes according to checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8a35081d3c9d0bb71eb4644bbe81a72cf492c8a", "author": {"user": {"login": "ZhuXiaoBing-cn", "name": "Xiaobing Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c8a35081d3c9d0bb71eb4644bbe81a72cf492c8a", "committedDate": "2020-11-17T06:24:03Z", "message": "* Make changes according to checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9aa0670c97ebcdaa2110626eb73d72e5d5c8482", "author": {"user": {"login": "ZhuXiaoBing-cn", "name": "Xiaobing Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b9aa0670c97ebcdaa2110626eb73d72e5d5c8482", "committedDate": "2020-11-17T07:14:55Z", "message": "* add JavaDoc\n* update AADResourceServerAutoConfiguration\n* update AADResourceServerAutoConfigurationTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdfb007337da1376e97c3ad7336e0b2531fcc74b", "author": {"user": {"login": "ZhuXiaoBing-cn", "name": "Xiaobing Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fdfb007337da1376e97c3ad7336e0b2531fcc74b", "committedDate": "2020-11-18T10:03:40Z", "message": "* remove tenant validator\n* issuer validator verify that the STS URI matches\n* Verify the audience through AppIdUri\n* update unit test\n* Update JwkKeySetUri to get via ServiceEndpoints"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bddc2e461448b63d0d8385cf6e1e39bbd62d406a", "author": {"user": {"login": "ZhuXiaoBing-cn", "name": "Xiaobing Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bddc2e461448b63d0d8385cf6e1e39bbd62d406a", "committedDate": "2020-11-19T07:38:52Z", "message": "* add Converter,it's effect will be to store the UserPrincipal to Authentication"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb82a9b0d172e6d170ae4bf93a4eda733565bc21", "author": {"user": {"login": "ZhuXiaoBing-cn", "name": "Xiaobing Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cb82a9b0d172e6d170ae4bf93a4eda733565bc21", "committedDate": "2020-11-19T07:49:25Z", "message": "Merge branch 'master' into access_token_validate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "073274635c3b0060bc54ee9bf640a642dbb8c306", "author": {"user": {"login": "ZhuXiaoBing-cn", "name": "Xiaobing Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/073274635c3b0060bc54ee9bf640a642dbb8c306", "committedDate": "2020-11-19T08:05:57Z", "message": "Merge branch 'master' into access_token_validate"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyOTkzOTUx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#pullrequestreview-532993951", "createdAt": "2020-11-18T02:10:33Z", "commit": {"oid": "b9aa0670c97ebcdaa2110626eb73d72e5d5c8482"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMjoxMDozNFrOH1TDyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwMjo1MjoyMVrOH27isQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0ODg0Mw==", "bodyText": "We should use another name for this field here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r525648843", "createdAt": "2020-11-18T02:10:34Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/autoconfigure/aad/AADJwtIssuerValidator.java", "diffHunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.autoconfigure.aad;\n+\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidator;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidatorResult;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.jwt.JwtClaimValidator;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * Validates the \"iss\" claim in a {@link Jwt}, that is matches a configured value\n+ */\n+public class AADJwtIssuerValidator implements OAuth2TokenValidator<Jwt> {\n+\n+    private static final String LOGIN_MICROSOFT_ONLINE_ISSUER = \"https://login.microsoftonline.com/\";\n+    private static final String STS_WINDOWS_ISSUER = \"https://sts.windows.net/\";\n+    private static final String STS_CHINA_CLOUD_API_ISSUER = \"https://sts.chinacloudapi.cn/\";\n+    private static final String COMMON = \"common\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9aa0670c97ebcdaa2110626eb73d72e5d5c8482"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM1NTU0OQ==", "bodyText": "Why convert the aud to a list instead of string?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r527355549", "createdAt": "2020-11-20T02:33:52Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/autoconfigure/aad/AADJwtAudienceValidator.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.autoconfigure.aad;\n+\n+import java.util.List;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidator;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidatorResult;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.jwt.JwtClaimValidator;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * Validates the \"aud\" claim in a {@link Jwt}, that is matches a configured value\n+ */\n+public class AADJwtAudienceValidator implements OAuth2TokenValidator<Jwt> {\n+\n+    private final JwtClaimValidator<List<String>> validator;\n+\n+    /**\n+     * Constructs a {@link AADJwtAudienceValidator} using the provided parameters\n+     *\n+     * @param audiences - The audience that each {@link Jwt} should have.\n+     */\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    public AADJwtAudienceValidator(List<String> audiences) {\n+        Assert.notNull(audiences, \"audiences cannot be null\");\n+        this.validator = new JwtClaimValidator(AADTokenClaim.AUD, aud -> audiences.containsAll((List<String>) aud));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "073274635c3b0060bc54ee9bf640a642dbb8c306"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM1OTg2Ng==", "bodyText": "need any log info here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r527359866", "createdAt": "2020-11-20T02:49:19Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/autoconfigure/aad/AzureJwtBearerTokenAuthenticationConverter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.azure.spring.autoconfigure.aad;\n+\n+import com.nimbusds.jose.JWSObject;\n+import com.nimbusds.jwt.JWTClaimsSet;\n+import com.nimbusds.jwt.JWTClaimsSet.Builder;\n+import java.text.ParseException;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.security.authentication.AbstractAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;\n+import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;\n+\n+/**\n+ *  A {@link Converter} that takes a {@link Jwt} and converts it into a {@link PreAuthenticatedAuthenticationToken}.\n+ */\n+public class AzureJwtBearerTokenAuthenticationConverter implements Converter<Jwt, AbstractAuthenticationToken> {\n+\n+    private final JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();\n+\n+    public AzureJwtBearerTokenAuthenticationConverter() {\n+    }\n+\n+    public AbstractAuthenticationToken convert(Jwt jwt) {\n+        AbstractAuthenticationToken token = this.jwtAuthenticationConverter.convert(jwt);\n+        Collection<GrantedAuthority> authorities = token.getAuthorities();\n+        OAuth2AccessToken accessToken = new OAuth2AccessToken(TokenType.BEARER, jwt.getTokenValue(), jwt.getIssuedAt(),\n+            jwt.getExpiresAt());\n+        Map<String, Object> attributes = jwt.getClaims();\n+        JWTClaimsSet.Builder builder = new Builder();\n+        for (Entry<String, Object> entry : attributes.entrySet()) {\n+            builder.claim(entry.getKey(), entry.getValue());\n+        }\n+        JWSObject jwsObject = null;\n+        try {\n+            jwsObject = JWSObject.parse(accessToken.getTokenValue());\n+        } catch (ParseException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "073274635c3b0060bc54ee9bf640a642dbb8c306"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM2MDAwNw==", "bodyText": "should we throw this exception?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r527360007", "createdAt": "2020-11-20T02:49:44Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/autoconfigure/aad/AzureJwtBearerTokenAuthenticationConverter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.azure.spring.autoconfigure.aad;\n+\n+import com.nimbusds.jose.JWSObject;\n+import com.nimbusds.jwt.JWTClaimsSet;\n+import com.nimbusds.jwt.JWTClaimsSet.Builder;\n+import java.text.ParseException;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.security.authentication.AbstractAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;\n+import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;\n+\n+/**\n+ *  A {@link Converter} that takes a {@link Jwt} and converts it into a {@link PreAuthenticatedAuthenticationToken}.\n+ */\n+public class AzureJwtBearerTokenAuthenticationConverter implements Converter<Jwt, AbstractAuthenticationToken> {\n+\n+    private final JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();\n+\n+    public AzureJwtBearerTokenAuthenticationConverter() {\n+    }\n+\n+    public AbstractAuthenticationToken convert(Jwt jwt) {\n+        AbstractAuthenticationToken token = this.jwtAuthenticationConverter.convert(jwt);\n+        Collection<GrantedAuthority> authorities = token.getAuthorities();\n+        OAuth2AccessToken accessToken = new OAuth2AccessToken(TokenType.BEARER, jwt.getTokenValue(), jwt.getIssuedAt(),\n+            jwt.getExpiresAt());\n+        Map<String, Object> attributes = jwt.getClaims();\n+        JWTClaimsSet.Builder builder = new Builder();\n+        for (Entry<String, Object> entry : attributes.entrySet()) {\n+            builder.claim(entry.getKey(), entry.getValue());\n+        }\n+        JWSObject jwsObject = null;\n+        try {\n+            jwsObject = JWSObject.parse(accessToken.getTokenValue());\n+        } catch (ParseException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM1OTg2Ng=="}, "originalCommit": {"oid": "073274635c3b0060bc54ee9bf640a642dbb8c306"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM2MDE1MA==", "bodyText": "Does this includes both scope_ and role_?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r527360150", "createdAt": "2020-11-20T02:50:16Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/autoconfigure/aad/AzureJwtBearerTokenAuthenticationConverter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.azure.spring.autoconfigure.aad;\n+\n+import com.nimbusds.jose.JWSObject;\n+import com.nimbusds.jwt.JWTClaimsSet;\n+import com.nimbusds.jwt.JWTClaimsSet.Builder;\n+import java.text.ParseException;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.security.authentication.AbstractAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;\n+import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;\n+\n+/**\n+ *  A {@link Converter} that takes a {@link Jwt} and converts it into a {@link PreAuthenticatedAuthenticationToken}.\n+ */\n+public class AzureJwtBearerTokenAuthenticationConverter implements Converter<Jwt, AbstractAuthenticationToken> {\n+\n+    private final JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();\n+\n+    public AzureJwtBearerTokenAuthenticationConverter() {\n+    }\n+\n+    public AbstractAuthenticationToken convert(Jwt jwt) {\n+        AbstractAuthenticationToken token = this.jwtAuthenticationConverter.convert(jwt);\n+        Collection<GrantedAuthority> authorities = token.getAuthorities();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "073274635c3b0060bc54ee9bf640a642dbb8c306"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM2MDU2MA==", "bodyText": "We need more test cases in this one", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r527360560", "createdAt": "2020-11-20T02:51:49Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/autoconfigure/aad/AADResourceServerAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.autoconfigure.aad;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.azure.spring.autoconfigure.aad.AADResourceServerAutoConfiguration.DefaultAzureOAuth2ResourceServerWebSecurityConfigurerAdapter;\n+import org.junit.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.oauth2.jwt.JwtDecoder;\n+import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\n+\n+public class AADResourceServerAutoConfigurationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "073274635c3b0060bc54ee9bf640a642dbb8c306"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM2MDY4OQ==", "bodyText": "Do we have tid?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r527360689", "createdAt": "2020-11-20T02:52:21Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/autoconfigure/aad/AzureJwtBearerTokenAuthenticationConverterTest.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.azure.spring.autoconfigure.aad;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.junit.Test;\n+import org.springframework.security.authentication.AbstractAuthenticationToken;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+\n+public class AzureJwtBearerTokenAuthenticationConverterTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "073274635c3b0060bc54ee9bf640a642dbb8c306"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f8dac054188fa2a20c9666017ce8b7c104ccbab", "author": {"user": {"login": "ZhuXiaoBing-cn", "name": "Xiaobing Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3f8dac054188fa2a20c9666017ce8b7c104ccbab", "committedDate": "2020-11-20T10:19:23Z", "message": "* update file name\n* add more unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b6e974ac15a64155cd1ed846e2f1f2eb270e6b1", "author": {"user": {"login": "ZhuXiaoBing-cn", "name": "Xiaobing Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4b6e974ac15a64155cd1ed846e2f1f2eb270e6b1", "committedDate": "2020-11-23T01:42:28Z", "message": "* Make changes according to checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce65efe10644fd9e111b7bda939880f46a655807", "author": {"user": {"login": "ZhuXiaoBing-cn", "name": "Xiaobing Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ce65efe10644fd9e111b7bda939880f46a655807", "committedDate": "2020-11-23T01:52:39Z", "message": "Merge branch 'master' into access_token_validate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05d929d46d405ebe6a97a7ae6437a65869afe7fe", "author": {"user": {"login": "ZhuXiaoBing-cn", "name": "Xiaobing Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/05d929d46d405ebe6a97a7ae6437a65869afe7fe", "committedDate": "2020-11-23T02:16:01Z", "message": "* Make changes according to checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MTUzODU5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#pullrequestreview-536153859", "createdAt": "2020-11-23T02:50:51Z", "commit": {"oid": "05d929d46d405ebe6a97a7ae6437a65869afe7fe"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMjo1MDo1M1rOH3-BDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMjo1NTozOFrOH3-EUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ0OTgwNw==", "bodyText": "better use resource.server here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r528449807", "createdAt": "2020-11-23T02:50:53Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/resource/AzureActiveDirectoryResourceConfiguration.java", "diffHunk": "@@ -1,8 +1,10 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n-package com.azure.spring.autoconfigure.aad;\n+package com.azure.spring.aad.resource;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05d929d46d405ebe6a97a7ae6437a65869afe7fe"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1MDE5OA==", "bodyText": "Maybe move this line up?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r528450198", "createdAt": "2020-11-23T02:53:09Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/resource/AzureActiveDirectoryResourceConfiguration.java", "diffHunk": "@@ -86,8 +82,11 @@ public JwtDecoder jwtDecoderByJwkKeySetUri() {\n \n         @Override\n         protected void configure(HttpSecurity http) throws Exception {\n-            http.authorizeRequests((requests) -> requests.anyRequest().authenticated());\n-            http.oauth2ResourceServer(OAuth2ResourceServerConfigurer::jwt);\n+            http\n+                .authorizeRequests((requests) -> requests.anyRequest().authenticated())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05d929d46d405ebe6a97a7ae6437a65869afe7fe"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1MDMzNQ==", "bodyText": "Why do we choose Azure instead of AAD here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r528450335", "createdAt": "2020-11-23T02:54:11Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/resource/AzureJwtAudienceValidator.java", "diffHunk": "@@ -12,17 +13,17 @@\n /**\n  * Validates the \"aud\" claim in a {@link Jwt}, that is matches a configured value\n  */\n-public class AADJwtAudienceValidator implements OAuth2TokenValidator<Jwt> {\n+public class AzureJwtAudienceValidator implements OAuth2TokenValidator<Jwt> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05d929d46d405ebe6a97a7ae6437a65869afe7fe"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1MDUyMg==", "bodyText": "Shouldn't we also log the exception?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r528450522", "createdAt": "2020-11-23T02:55:05Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/resource/AzureJwtBearerTokenAuthenticationConverter.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.aad.resource;\n+\n+import com.azure.spring.autoconfigure.aad.UserPrincipal;\n+import com.azure.spring.autoconfigure.aad.UserPrincipalManager;\n+import com.nimbusds.jose.JWSObject;\n+import com.nimbusds.jwt.JWTClaimsSet;\n+import com.nimbusds.jwt.JWTClaimsSet.Builder;\n+import java.text.ParseException;\n+import java.util.Collection;\n+import java.util.Map.Entry;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.security.authentication.AbstractAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;\n+import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;\n+\n+/**\n+ * A {@link Converter} that takes a {@link Jwt} and converts it into a {@link PreAuthenticatedAuthenticationToken}.\n+ */\n+public class AzureJwtBearerTokenAuthenticationConverter implements Converter<Jwt, AbstractAuthenticationToken> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UserPrincipalManager.class);\n+    private final JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();\n+\n+    public AzureJwtBearerTokenAuthenticationConverter() {\n+    }\n+\n+    public AbstractAuthenticationToken convert(Jwt jwt) {\n+        AbstractAuthenticationToken token = this.jwtAuthenticationConverter.convert(jwt);\n+        Collection<GrantedAuthority> authorities = token.getAuthorities();\n+        OAuth2AccessToken accessToken = new OAuth2AccessToken(TokenType.BEARER, jwt.getTokenValue(), jwt.getIssuedAt(),\n+            jwt.getExpiresAt());\n+        JWTClaimsSet.Builder builder = new Builder();\n+        for (Entry<String, Object> entry : jwt.getClaims().entrySet()) {\n+            builder.claim(entry.getKey(), entry.getValue());\n+        }\n+        JWTClaimsSet jwtClaimsSet = builder.build();\n+        JWSObject jwsObject = null;\n+        try {\n+            jwsObject = JWSObject.parse(accessToken.getTokenValue());\n+        } catch (ParseException e) {\n+            LOGGER.error(\"When create an instance of JWSObject, an exception is resolved on the access token.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05d929d46d405ebe6a97a7ae6437a65869afe7fe"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1MDY0Mg==", "bodyText": "Should we rethrow the exception here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r528450642", "createdAt": "2020-11-23T02:55:38Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/resource/AzureJwtBearerTokenAuthenticationConverter.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.aad.resource;\n+\n+import com.azure.spring.autoconfigure.aad.UserPrincipal;\n+import com.azure.spring.autoconfigure.aad.UserPrincipalManager;\n+import com.nimbusds.jose.JWSObject;\n+import com.nimbusds.jwt.JWTClaimsSet;\n+import com.nimbusds.jwt.JWTClaimsSet.Builder;\n+import java.text.ParseException;\n+import java.util.Collection;\n+import java.util.Map.Entry;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.security.authentication.AbstractAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;\n+import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;\n+\n+/**\n+ * A {@link Converter} that takes a {@link Jwt} and converts it into a {@link PreAuthenticatedAuthenticationToken}.\n+ */\n+public class AzureJwtBearerTokenAuthenticationConverter implements Converter<Jwt, AbstractAuthenticationToken> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UserPrincipalManager.class);\n+    private final JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();\n+\n+    public AzureJwtBearerTokenAuthenticationConverter() {\n+    }\n+\n+    public AbstractAuthenticationToken convert(Jwt jwt) {\n+        AbstractAuthenticationToken token = this.jwtAuthenticationConverter.convert(jwt);\n+        Collection<GrantedAuthority> authorities = token.getAuthorities();\n+        OAuth2AccessToken accessToken = new OAuth2AccessToken(TokenType.BEARER, jwt.getTokenValue(), jwt.getIssuedAt(),\n+            jwt.getExpiresAt());\n+        JWTClaimsSet.Builder builder = new Builder();\n+        for (Entry<String, Object> entry : jwt.getClaims().entrySet()) {\n+            builder.claim(entry.getKey(), entry.getValue());\n+        }\n+        JWTClaimsSet jwtClaimsSet = builder.build();\n+        JWSObject jwsObject = null;\n+        try {\n+            jwsObject = JWSObject.parse(accessToken.getTokenValue());\n+        } catch (ParseException e) {\n+            LOGGER.error(\"When create an instance of JWSObject, an exception is resolved on the access token.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1MDUyMg=="}, "originalCommit": {"oid": "05d929d46d405ebe6a97a7ae6437a65869afe7fe"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e4d053e2902177133a7a8e8893e60494df3538a", "author": {"user": {"login": "ZhuXiaoBing-cn", "name": "Xiaobing Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4e4d053e2902177133a7a8e8893e60494df3538a", "committedDate": "2020-11-23T06:15:43Z", "message": "* Make changes according to checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b362dfb049d7628f96fefd67611bbc5953a063ee", "author": {"user": {"login": "ZhuXiaoBing-cn", "name": "Xiaobing Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b362dfb049d7628f96fefd67611bbc5953a063ee", "committedDate": "2020-11-23T06:17:58Z", "message": "* Make changes according to checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae39fe7a00dd5ba0d73ee514f575d8d4b1e71457", "author": {"user": {"login": "ZhuXiaoBing-cn", "name": "Xiaobing Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ae39fe7a00dd5ba0d73ee514f575d8d4b1e71457", "committedDate": "2020-11-23T06:18:23Z", "message": "* Make changes according to checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acaeefa00b197d30e77c34cbc1f29482112c1a4c", "author": {"user": {"login": "ZhuXiaoBing-cn", "name": "Xiaobing Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/acaeefa00b197d30e77c34cbc1f29482112c1a4c", "committedDate": "2020-11-23T07:00:58Z", "message": "* update AzureJwtBearerTokenAuthenticationConverter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d25e9df4497c0cc87a9149e85b54554e2e0f58f2", "author": {"user": {"login": "ZhuXiaoBing-cn", "name": "Xiaobing Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d25e9df4497c0cc87a9149e85b54554e2e0f58f2", "committedDate": "2020-11-23T07:04:38Z", "message": "Merge branch 'master' into access_token_validate"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MDM1OTQx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#pullrequestreview-537035941", "createdAt": "2020-11-24T02:45:36Z", "commit": {"oid": "4e4d053e2902177133a7a8e8893e60494df3538a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMjo0NTozN1rOH4pqyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMjo0NTozN1rOH4pqyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2NTAwMg==", "bodyText": "We should use another method, error(String, Throwable) here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r529165002", "createdAt": "2020-11-24T02:45:37Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/resource/server/AzureJwtBearerTokenAuthenticationConverter.java", "diffHunk": "@@ -46,7 +45,8 @@ public AbstractAuthenticationToken convert(Jwt jwt) {\n         try {\n             jwsObject = JWSObject.parse(accessToken.getTokenValue());\n         } catch (ParseException e) {\n-            LOGGER.error(\"When create an instance of JWSObject, an exception is resolved on the access token.\");\n+            LOGGER.error(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4d053e2902177133a7a8e8893e60494df3538a"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a31f1a6e648f0c9129984be6aace6bf5282266ae", "author": {"user": {"login": "ZhuXiaoBing-cn", "name": "Xiaobing Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a31f1a6e648f0c9129984be6aace6bf5282266ae", "committedDate": "2020-11-25T01:46:55Z", "message": "* add AzureOAuth2AuthenticatedPrincipal\n* add unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7aa628113926cfb072b7e0cb3952fb73ac9dcc0", "author": {"user": {"login": "ZhuXiaoBing-cn", "name": "Xiaobing Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f7aa628113926cfb072b7e0cb3952fb73ac9dcc0", "committedDate": "2020-11-25T02:29:10Z", "message": "Merge branch 'master' into access_token_validate\n\n# Conflicts:\n#\tsdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/implementation/AzureActiveDirectoryProperties.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0851fc65054639f590a5548a2e02e9d63025746f", "author": {"user": {"login": "ZhuXiaoBing-cn", "name": "Xiaobing Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0851fc65054639f590a5548a2e02e9d63025746f", "committedDate": "2020-11-25T02:35:18Z", "message": "* update AzureActiveDirectoryResourceServerConfiguration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ac20f994bb211b20a9c7018ce0032ed6a6ee8da", "author": {"user": {"login": "ZhuXiaoBing-cn", "name": "Xiaobing Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0ac20f994bb211b20a9c7018ce0032ed6a6ee8da", "committedDate": "2020-11-25T02:57:55Z", "message": "* Make changes according to checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f80db079a731776cecbd59d5937eee4681558ed", "author": {"user": {"login": "ZhuXiaoBing-cn", "name": "Xiaobing Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9f80db079a731776cecbd59d5937eee4681558ed", "committedDate": "2020-11-25T08:12:44Z", "message": "* Make changes according to checkstyle.\n* For AzureOAuth2AuthenticatedPrincipal add multiple constructors, to implement change authoritiesClaimName, authorityPrefix.\n* Changes the PreAuthenticatedAuthenticationToken to BearerTokenAuthentication in AzureJwtBearerTokenAuthenticationConverter.\n* add unit test in AzureJwtBearerTokenAuthenticationConverterTest."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd2155b9878f438147b1387fc51b0d412036f6b4", "author": {"user": {"login": "ZhuXiaoBing-cn", "name": "Xiaobing Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fd2155b9878f438147b1387fc51b0d412036f6b4", "committedDate": "2020-11-26T01:35:27Z", "message": "* update unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4OTQzNTk2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#pullrequestreview-538943596", "createdAt": "2020-11-26T01:54:40Z", "commit": {"oid": "fd2155b9878f438147b1387fc51b0d412036f6b4"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7403602d543faa119d837cd6dfbb9dc4ab930cf0", "author": {"user": {"login": "ZhuXiaoBing-cn", "name": "Xiaobing Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7403602d543faa119d837cd6dfbb9dc4ab930cf0", "committedDate": "2020-11-26T09:32:22Z", "message": "* Modify invalid import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4OTY5OTQ2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#pullrequestreview-538969946", "createdAt": "2020-11-26T03:25:59Z", "commit": {"oid": "fd2155b9878f438147b1387fc51b0d412036f6b4"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMzoyNTo1OVrOH6KlFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMzoyNTo1OVrOH6KlFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc1Mjc5MQ==", "bodyText": "Change this doc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r530752791", "createdAt": "2020-11-26T03:25:59Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/resource/server/AzureJwtBearerTokenAuthenticationConverter.java", "diffHunk": "@@ -0,0 +1,60 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.aad.resource.server;\n+\n+import java.util.Collection;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.security.authentication.AbstractAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.server.resource.authentication.BearerTokenAuthentication;\n+import org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter;\n+import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * A {@link Converter} that takes a {@link Jwt} and converts it into a {@link PreAuthenticatedAuthenticationToken}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd2155b9878f438147b1387fc51b0d412036f6b4"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 25, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}