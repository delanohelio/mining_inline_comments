{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyOTAxMTg1", "number": 7429, "title": "Moving CosmosItem (read, replace, delete) API onto CosmosContainer", "bodyText": "Moving the following API from CosmosItem to CosmosContainer\n\nreadItem\nreplaceItem\ndeleteItem\n\nRemove CosmosItem\nAdd support to typed item API\nModifying tests to reflect the new item api", "createdAt": "2020-01-15T00:25:39Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429", "merged": true, "mergeCommit": {"oid": "82474941e22547e83a4a43f054ccc5624e5a4ce0"}, "closed": true, "closedAt": "2020-01-23T08:18:03Z", "author": {"login": "mbhaskar"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6aIhzgH2gAyMzYyOTAxMTg1OjljMjViOWJlNDkyMjdmMDQzNTQ1YTNjNDVjYWQ4MGRjYjdhNDAxYzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb9AnxWgH2gAyMzYyOTAxMTg1OjFiZGM3ZWRlYjUwM2Y0NTlhMTA5MTc5NzcwOTE3OTNhZThlMWI1MmM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9c25b9be49227f043545a3c45cad80dcb7a401c0", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9c25b9be49227f043545a3c45cad80dcb7a401c0", "committedDate": "2020-01-15T00:09:23Z", "message": "Moving CosmosItem (read, replace, delete) API onto CosmosContainer\nCosmosItem API are changed typed API\nModifying tests to reflect the new item api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyOTI1ODM5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#pullrequestreview-342925839", "createdAt": "2020-01-15T00:28:01Z", "commit": {"oid": "9c25b9be49227f043545a3c45cad80dcb7a401c0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMDoyODowMVrOFdqG4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMDozMzo0MlrOFdqMzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0MjkxNA==", "bodyText": "can't we assume that the second param is always partition key?\nthat way the caller doesn't have to explicitly wrap pk value in PartitionKey and implementation will take care of that.\nthoughts?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r366642914", "createdAt": "2020-01-15T00:28:01Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/AsyncReadBenchmark.java", "diffHunk": "@@ -53,7 +54,9 @@ protected void performWorkload(BaseSubscriber<CosmosAsyncItemResponse> baseSubsc\n         PojoizedJson doc = docsToRead.get(index);\n \n         String partitionKeyValue = doc.getId();\n-        Mono<CosmosAsyncItemResponse> result = cosmosAsyncContainer.getItem(doc.getId(), partitionKeyValue).read();\n+        Mono<CosmosAsyncItemResponse<PojoizedJson>> result = cosmosAsyncContainer.readItem(doc.getId(),\n+                                                                                           new PartitionKey(partitionKeyValue),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c25b9be49227f043545a3c45cad80dcb7a401c0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0MzE0MA==", "bodyText": "we should pass partition key to CosmosItemRequestOption here.\nThe intention of this benchmark is to measure perf when pk is passed as request options.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r366643140", "createdAt": "2020-01-15T00:28:53Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/AsyncWriteBenchmark.java", "diffHunk": "@@ -60,13 +61,13 @@ protected void hookOnError(Throwable throwable) {\n     @Override\n     protected void performWorkload(BaseSubscriber<CosmosAsyncItemResponse> baseSubscriber, long i) throws InterruptedException {\n         String partitionKey = uuid + i;\n-        Mono<CosmosAsyncItemResponse> obs;\n+        Mono<CosmosAsyncItemResponse<PojoizedJson>> obs;\n         if (configuration.isDisablePassingPartitionKeyAsOptionOnWrite()) {\n             // require parsing partition key from the doc\n             obs = cosmosAsyncContainer.createItem(generateDocument(partitionKey, dataFieldValue));\n         } else {\n             // more optimized for write as partition ke is already passed as config\n-            obs = cosmosAsyncContainer.createItem(generateDocument(partitionKey, dataFieldValue), new CosmosItemRequestOptions(partitionKey));\n+            obs = cosmosAsyncContainer.createItem(generateDocument(partitionKey, dataFieldValue), new CosmosItemRequestOptions());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c25b9be49227f043545a3c45cad80dcb7a401c0"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0NDQzMA==", "bodyText": "this will result in double serialization (which was fixed prior to this PR)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r366644430", "createdAt": "2020-01-15T00:33:42Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncItemResponse.java", "diffHunk": "@@ -6,38 +6,37 @@\n import com.azure.cosmos.implementation.ResourceResponse;\n import org.apache.commons.lang3.StringUtils;\n \n-public class CosmosAsyncItemResponse extends CosmosResponse<CosmosItemProperties> {\n-    private final CosmosAsyncItem itemClient;\n-\n-    CosmosAsyncItemResponse(ResourceResponse<Document> response, PartitionKey partitionKey,\n-                            CosmosAsyncContainer container) {\n+public class CosmosAsyncItemResponse<T> extends CosmosResponse<CosmosItemProperties> {\n+    private final Class<T> itemClassType;\n+    \n+    CosmosAsyncItemResponse(ResourceResponse<Document> response, Class<T> klass) {\n         super(response);\n+        this.itemClassType = klass;\n         String bodyAsString = response.getBodyAsString();\n-        if (StringUtils.isEmpty(bodyAsString)) {\n+        if (StringUtils.isEmpty(bodyAsString)){\n             super.setProperties(null);\n-            itemClient = null;\n         } else {\n             CosmosItemProperties props = new CosmosItemProperties(bodyAsString);\n             super.setProperties(props);\n-            itemClient = new CosmosAsyncItem(props.getId(), partitionKey, container);\n         }\n     }\n \n     /**\n-     * Gets the itemSettings\n+     * Gets the resource .\n      *\n-     * @return the itemSettings\n+     * @return the resource\n      */\n-    public CosmosItemProperties getProperties() {\n-        return super.getProperties();\n+    public T getResource(){\n+        return super.getProperties().toObject(itemClassType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c25b9be49227f043545a3c45cad80dcb7a401c0"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1eeb5610cb0d57884251845516d441559476347", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c1eeb5610cb0d57884251845516d441559476347", "committedDate": "2020-01-21T03:26:34Z", "message": "Fixing failing tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b860663c00791d4f326eb3e446abc626ed6338f", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8b860663c00791d4f326eb3e446abc626ed6338f", "committedDate": "2020-01-22T01:52:35Z", "message": "Avoiding multiple serializations/deserializations while converting to user types."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MzE0MTUy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#pullrequestreview-346314152", "createdAt": "2020-01-22T02:26:55Z", "commit": {"oid": "8b860663c00791d4f326eb3e446abc626ed6338f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMjoyNjo1NVrOFgO7Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMjo1NDo0NFrOFgPRMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0MzMyNw==", "bodyText": "Seems like an unused import, please remove it if it is.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369343327", "createdAt": "2020-01-22T02:26:55Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos-examples/src/main/java/com/azure/cosmos/examples/BasicDemo.java", "diffHunk": "@@ -2,20 +2,26 @@\n // Licensed under the MIT License.\n package com.azure.cosmos.examples;\n \n+import com.azure.cosmos.ConnectionMode;\n+import com.azure.cosmos.ConnectionPolicy;\n+import com.azure.cosmos.ConsistencyPolicy;\n import com.azure.cosmos.CosmosAsyncClient;\n import com.azure.cosmos.CosmosAsyncContainer;\n import com.azure.cosmos.CosmosAsyncDatabase;\n-import com.azure.cosmos.CosmosAsyncItem;\n import com.azure.cosmos.CosmosAsyncItemResponse;\n import com.azure.cosmos.CosmosClientBuilder;\n import com.azure.cosmos.CosmosClientException;\n import com.azure.cosmos.CosmosContainerProperties;\n+import com.azure.cosmos.CosmosItemProperties;\n import com.azure.cosmos.FeedOptions;\n import com.azure.cosmos.FeedResponse;\n+import com.azure.cosmos.PartitionKey;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n import reactor.core.scheduler.Schedulers;\n \n+import static java.lang.System.exit;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b860663c00791d4f326eb3e446abc626ed6338f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NDA1OQ==", "bodyText": "What will be the behavior if partitionKey is passed as null ?\nI see a couple of options here.\nEither default it to PartitionKey.NONE or use something like this checkNoNull(partitionKey, \"Partition Key should not be null\")\nPlease make sure this behavior is consistent across all the APIs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369344059", "createdAt": "2020-01-22T02:30:42Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -179,23 +179,34 @@ CosmosAsyncContainer setId(String id) {\n      * successful completion will contain a single resource response with the\n      * created cosmos item. In case of failure the {@link Mono} will error.\n      *\n+     * @param <T> the type parameter\n      * @param item the cosmos item represented as a POJO or cosmos item object.\n+     * @param partitionKey the partition key\n      * @param options the request options.\n-     * @return an {@link Mono} containing the single resource response with the\n-     * created cosmos item or an error.\n+     * @return an {@link Mono} containing the single resource response with the created cosmos item or an error.\n      */\n-    public Mono<CosmosAsyncItemResponse> createItem(Object item, CosmosItemRequestOptions options) {\n+    public <T> Mono<CosmosAsyncItemResponse<T>> createItem(T item,\n+                                                           PartitionKey partitionKey,\n+                                                           CosmosItemRequestOptions options) {\n+        if (options == null) {\n+            options = new CosmosItemRequestOptions();\n+        }\n+        options.setPartitionKey(partitionKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b860663c00791d4f326eb3e446abc626ed6338f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NDQ0Mw==", "bodyText": "3rd @param is missing.\nPlease replace an with a in return statement before Mono.\nPlease do this change here and everywhere else.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369344443", "createdAt": "2020-01-22T02:32:28Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -366,14 +375,138 @@ CosmosAsyncContainer setId(String id) {\n     }\n \n     /**\n-     * Gets a CosmosAsyncItem object without making a service call\n+     * Reads an item.\n+     * <p>\n+     * After subscription the operation will be performed.\n+     * The {@link Mono} upon successful completion will contain a cosmos item response with the read item\n+     * In case of failure the {@link Mono} will error.\n+     *\n+     * @param itemId the item id\n+     * @param partitionKey the partition key\n+     * @return an {@link Mono} containing the cosmos item response with the read item or an error", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b860663c00791d4f326eb3e446abc626ed6338f"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NTkxMw==", "bodyText": "I have got this feedback from various customers, that on readItem() API, in v2 SDK if the item is not found, we used to return empty Observable().\nBecause it becomes really difficult for the end user to catch 404 and do nothing.\n@moderakh @kirankumarkolli @mbhaskar what should we do with v4 ?\n@mbhaskar do you know what .net behavior is ?\nAs I have also received feedback that we should be consistent across our SDKs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369345913", "createdAt": "2020-01-22T02:39:48Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -366,14 +375,138 @@ CosmosAsyncContainer setId(String id) {\n     }\n \n     /**\n-     * Gets a CosmosAsyncItem object without making a service call\n+     * Reads an item.\n+     * <p>\n+     * After subscription the operation will be performed.\n+     * The {@link Mono} upon successful completion will contain a cosmos item response with the read item\n+     * In case of failure the {@link Mono} will error.\n+     *\n+     * @param itemId the item id\n+     * @param partitionKey the partition key\n+     * @return an {@link Mono} containing the cosmos item response with the read item or an error\n+     */\n+    public <T> Mono<CosmosAsyncItemResponse<T>>  readItem(String itemId, PartitionKey partitionKey, Class<T> itemType) {\n+        return readItem(itemId, partitionKey, new CosmosItemRequestOptions(partitionKey), itemType);\n+    }\n+\n+    /**\n+     * Reads an item.\n+     * <p>\n+     * After subscription the operation will be performed.\n+     * The {@link Mono} upon successful completion will contain a cosmos item response with the read item\n+     * In case of failure the {@link Mono} will error.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b860663c00791d4f326eb3e446abc626ed6338f"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NjUyMw==", "bodyText": "For V4, I think we can change our AsyncDocumentClient APIs to return Mono for single returns so that we won't have to call .single() APIs here.\nRight now they return Flux<> for readItem which doesn't make sense.\nI believe @moderakh raised this point with v3.\nWe should correct that behavior for v4 for all the APIs if they return a single document / item.\nCalling this extra .single() when not needed will affect the performance of these APIs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369346523", "createdAt": "2020-01-22T02:42:47Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -366,14 +375,138 @@ CosmosAsyncContainer setId(String id) {\n     }\n \n     /**\n-     * Gets a CosmosAsyncItem object without making a service call\n+     * Reads an item.\n+     * <p>\n+     * After subscription the operation will be performed.\n+     * The {@link Mono} upon successful completion will contain a cosmos item response with the read item\n+     * In case of failure the {@link Mono} will error.\n+     *\n+     * @param itemId the item id\n+     * @param partitionKey the partition key\n+     * @return an {@link Mono} containing the cosmos item response with the read item or an error\n+     */\n+    public <T> Mono<CosmosAsyncItemResponse<T>>  readItem(String itemId, PartitionKey partitionKey, Class<T> itemType) {\n+        return readItem(itemId, partitionKey, new CosmosItemRequestOptions(partitionKey), itemType);\n+    }\n+\n+    /**\n+     * Reads an item.\n+     * <p>\n+     * After subscription the operation will be performed.\n+     * The {@link Mono} upon successful completion will contain a cosmos item response with the read item\n+     * In case of failure the {@link Mono} will error.\n      *\n-     * @param id id of the item\n+     * @param itemId the item id\n      * @param partitionKey the partition key\n-     * @return a cosmos item\n+     * @param options the request cosmosItemRequestOptions\n+     * @return an {@link Mono} containing the cosmos item response with the read item or an error\n      */\n-    public CosmosAsyncItem getItem(String id, Object partitionKey) {\n-        return new CosmosAsyncItem(id, partitionKey, this);\n+    public <T> Mono<CosmosAsyncItemResponse<T>>  readItem(String itemId, PartitionKey partitionKey, \n+                                                  CosmosItemRequestOptions options, Class<T> itemType) {\n+        if (options == null) {\n+            options = new CosmosItemRequestOptions();\n+        }\n+        options.setPartitionKey(partitionKey);\n+        RequestOptions requestOptions = options.toRequestOptions();\n+        return this.getDatabase().getDocClientWrapper()\n+                   .readDocument(getItemLink(itemId), requestOptions)\n+                   .map(response -> new CosmosAsyncItemResponse<T>(response, itemType))\n+                   .single();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b860663c00791d4f326eb3e446abc626ed6338f"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NzM4OQ==", "bodyText": "Since responseBodyString can be empty string, can we please make sure it is handled well when parsing it to an itemClassType ?\nDo we want to throw error in that case, or return null ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369347389", "createdAt": "2020-01-22T02:46:57Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncItemResponse.java", "diffHunk": "@@ -4,40 +4,41 @@\n \n import com.azure.cosmos.implementation.Document;\n import com.azure.cosmos.implementation.ResourceResponse;\n+import com.azure.cosmos.implementation.Utils;\n import org.apache.commons.lang3.StringUtils;\n \n-public class CosmosAsyncItemResponse extends CosmosResponse<CosmosItemProperties> {\n-    private final CosmosAsyncItem itemClient;\n-\n-    CosmosAsyncItemResponse(ResourceResponse<Document> response, PartitionKey partitionKey,\n-                            CosmosAsyncContainer container) {\n+public class CosmosAsyncItemResponse<T> extends CosmosResponse<CosmosItemProperties> {\n+    private final Class<T> itemClassType;\n+    private final String responseBodyString;\n+    \n+    CosmosAsyncItemResponse(ResourceResponse<Document> response, Class<T> klass) {\n         super(response);\n-        String bodyAsString = response.getBodyAsString();\n-        if (StringUtils.isEmpty(bodyAsString)) {\n+        this.itemClassType = klass;\n+        responseBodyString = response.getBodyAsString();\n+        if (StringUtils.isEmpty(responseBodyString)){\n             super.setProperties(null);\n-            itemClient = null;\n         } else {\n-            CosmosItemProperties props = new CosmosItemProperties(bodyAsString);\n+            CosmosItemProperties props = new CosmosItemProperties(responseBodyString);\n             super.setProperties(props);\n-            itemClient = new CosmosAsyncItem(props.getId(), partitionKey, container);\n         }\n     }\n \n     /**\n-     * Gets the itemSettings\n+     * Gets the resource .\n      *\n-     * @return the itemSettings\n+     * @return the resource\n      */\n-    public CosmosItemProperties getProperties() {\n-        return super.getProperties();\n+    public T getResource(){\n+        return Utils.parse(responseBodyString, itemClassType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b860663c00791d4f326eb3e446abc626ed6338f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NzY3NA==", "bodyText": "I see mapItemResponseAndBlock() returns CosmosItemResponse<T>.\nDo we need this extra casting here ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369347674", "createdAt": "2020-01-22T02:48:23Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosContainer.java", "diffHunk": "@@ -175,8 +193,8 @@ public CosmosItemResponse upsertItem(Object item) throws CosmosClientException {\n      * @return the cosmos sync item response\n      * @throws CosmosClientException the cosmos client exception\n      */\n-    public CosmosItemResponse upsertItem(Object item, CosmosItemRequestOptions options) throws CosmosClientException {\n-        return this.mapItemResponseAndBlock(this.containerWrapper.createItem(item, options));\n+    public <T> CosmosItemResponse<T> upsertItem(Object item, CosmosItemRequestOptions options) throws CosmosClientException {\n+        return (CosmosItemResponse<T>) this.mapItemResponseAndBlock(this.asyncContainer.upsertItem(item, options));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b860663c00791d4f326eb3e446abc626ed6338f"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0Nzk1OQ==", "bodyText": "Please fill the gaps of missing@param here and other API docs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369347959", "createdAt": "2020-01-22T02:49:44Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosContainer.java", "diffHunk": "@@ -246,21 +280,61 @@ CosmosItemResponse mapItemResponseAndBlock(Mono<CosmosAsyncItemResponse> itemMon\n      * @return the iterator\n      */\n     public Iterator<FeedResponse<CosmosItemProperties>> queryChangeFeedItems(ChangeFeedOptions changeFeedOptions) {\n-        return getFeedIterator(this.containerWrapper.queryChangeFeedItems(changeFeedOptions));\n+        return getFeedIterator(this.asyncContainer.queryChangeFeedItems(changeFeedOptions));\n     }\n \n     /**\n-     * Gets item.\n+     * Read cosmos sync item response.\n      *\n-     * @param id the id\n+     * @param itemId the item id\n      * @param partitionKey the partition key\n-     * @return the item\n+     * @return the cosmos sync item response\n+     * @throws CosmosClientException the cosmos client exception\n+     */\n+    public <T> CosmosItemResponse<T> readItem(String itemId, PartitionKey partitionKey, Class<T> itemType) throws CosmosClientException {\n+        return this.mapItemResponseAndBlock(asyncContainer.readItem(itemId,\n+                                                                    partitionKey,\n+                                                                    new CosmosItemRequestOptions(),\n+                                                                    itemType));\n+    }\n+\n+    /**\n+     * Read cosmos sync item response.\n+     *\n+     * @param options the options\n+     * @return the cosmos sync item response\n+     * @throws CosmosClientException the cosmos client exception\n+     */\n+    public <T> CosmosItemResponse<T> readItem(String itemId, PartitionKey partitionKey,\n+                                          CosmosItemRequestOptions options, Class<T> itemType) throws CosmosClientException {\n+        return this.mapItemResponseAndBlock(asyncContainer.readItem(itemId, partitionKey, options, itemType));\n+    }\n+\n+    /**\n+     * Replace cosmos sync item response.\n+     *\n+     * @param item the item\n+     * @param options the options\n+     * @return the cosmos sync item response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b860663c00791d4f326eb3e446abc626ed6338f"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0ODEzMg==", "bodyText": "Seems like unused import.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369348132", "createdAt": "2020-01-22T02:50:45Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosResponse.java", "diffHunk": "@@ -2,13 +2,14 @@\n // Licensed under the MIT License.\n package com.azure.cosmos;\n \n+import com.azure.cosmos.implementation.Constants;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b860663c00791d4f326eb3e446abc626ed6338f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0ODkxMw==", "bodyText": "I looked up and there are 4 places where we use Utils.getsimpleObjectMapper().readValue() APIs.\nIt would be great if we can consolidate them here and have this logic at one place.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369348913", "createdAt": "2020-01-22T02:54:44Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Utils.java", "diffHunk": "@@ -548,4 +549,12 @@ public ValueHolder(V v) {\n         holder.v = dictionary.remove(key);\n         return holder.v != null;\n     }\n+\n+    public static <T> T parse(String itemResponseBodyAsString, Class<T> itemClassType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b860663c00791d4f326eb3e446abc626ed6338f"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MzA3OTk2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#pullrequestreview-346307996", "createdAt": "2020-01-22T02:02:09Z", "commit": {"oid": "8b860663c00791d4f326eb3e446abc626ed6338f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMjowMjowOVrOFgOmhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMzoyMzozNVrOFgPmqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMzNzk4OQ==", "bodyText": "ok thanks", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369337989", "createdAt": "2020-01-22T02:02:09Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/AsyncReadBenchmark.java", "diffHunk": "@@ -53,7 +54,9 @@ protected void performWorkload(BaseSubscriber<CosmosAsyncItemResponse> baseSubsc\n         PojoizedJson doc = docsToRead.get(index);\n \n         String partitionKeyValue = doc.getId();\n-        Mono<CosmosAsyncItemResponse> result = cosmosAsyncContainer.getItem(doc.getId(), partitionKeyValue).read();\n+        Mono<CosmosAsyncItemResponse<PojoizedJson>> result = cosmosAsyncContainer.readItem(doc.getId(),\n+                                                                                           new PartitionKey(partitionKeyValue),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0MjkxNA=="}, "originalCommit": {"oid": "9c25b9be49227f043545a3c45cad80dcb7a401c0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0OTkwMg==", "bodyText": "seems CosmosItemRequestOptions is redundant now. isn't there an overload which doesn't require CosmosItemRequestOptions if so we should use that one.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369349902", "createdAt": "2020-01-22T02:59:14Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/AsyncWriteBenchmark.java", "diffHunk": "@@ -60,13 +62,15 @@ protected void hookOnError(Throwable throwable) {\n     @Override\n     protected void performWorkload(BaseSubscriber<CosmosAsyncItemResponse> baseSubscriber, long i) throws InterruptedException {\n         String partitionKey = uuid + i;\n-        Mono<CosmosAsyncItemResponse> obs;\n+        Mono<CosmosAsyncItemResponse<PojoizedJson>> obs;\n         if (configuration.isDisablePassingPartitionKeyAsOptionOnWrite()) {\n             // require parsing partition key from the doc\n             obs = cosmosAsyncContainer.createItem(generateDocument(partitionKey, dataFieldValue));\n         } else {\n             // more optimized for write as partition ke is already passed as config\n-            obs = cosmosAsyncContainer.createItem(generateDocument(partitionKey, dataFieldValue), new CosmosItemRequestOptions(partitionKey));\n+            obs = cosmosAsyncContainer.createItem(generateDocument(partitionKey, dataFieldValue),\n+                                                  new PartitionKey(partitionKey),\n+                                                  new CosmosItemRequestOptions());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b860663c00791d4f326eb3e446abc626ed6338f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1MTgwOA==", "bodyText": "passing partition key has ambiguity.\n\npartition key can be passed as the second param to readItem\nCosmosItemRequestOptions has support for setPartitionKey().\n\nif we are always requiring partition key to be passed as a standalone param then the support for setting partition key in CosmosItemRequestOptions has to be removed to avoid confusion on public surface area.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369351808", "createdAt": "2020-01-22T03:09:24Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -366,14 +375,138 @@ CosmosAsyncContainer setId(String id) {\n     }\n \n     /**\n-     * Gets a CosmosAsyncItem object without making a service call\n+     * Reads an item.\n+     * <p>\n+     * After subscription the operation will be performed.\n+     * The {@link Mono} upon successful completion will contain a cosmos item response with the read item\n+     * In case of failure the {@link Mono} will error.\n+     *\n+     * @param itemId the item id\n+     * @param partitionKey the partition key\n+     * @return an {@link Mono} containing the cosmos item response with the read item or an error\n+     */\n+    public <T> Mono<CosmosAsyncItemResponse<T>>  readItem(String itemId, PartitionKey partitionKey, Class<T> itemType) {\n+        return readItem(itemId, partitionKey, new CosmosItemRequestOptions(partitionKey), itemType);\n+    }\n+\n+    /**\n+     * Reads an item.\n+     * <p>\n+     * After subscription the operation will be performed.\n+     * The {@link Mono} upon successful completion will contain a cosmos item response with the read item\n+     * In case of failure the {@link Mono} will error.\n      *\n-     * @param id id of the item\n+     * @param itemId the item id\n      * @param partitionKey the partition key\n-     * @return a cosmos item\n+     * @param options the request cosmosItemRequestOptions\n+     * @return an {@link Mono} containing the cosmos item response with the read item or an error\n      */\n-    public CosmosAsyncItem getItem(String id, Object partitionKey) {\n-        return new CosmosAsyncItem(id, partitionKey, this);\n+    public <T> Mono<CosmosAsyncItemResponse<T>>  readItem(String itemId, PartitionKey partitionKey, \n+                                                  CosmosItemRequestOptions options, Class<T> itemType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b860663c00791d4f326eb3e446abc626ed6338f"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1Mjk4Ng==", "bodyText": "the public setter for partition key needs to be removed too because the partition key is a mandatory standalone param on reading/deleting item and doesn't have to be in the cosmosItemRequestOption anymore", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369352986", "createdAt": "2020-01-22T03:15:26Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosItemRequestOptions.java", "diffHunk": "@@ -175,7 +171,7 @@ public CosmosItemRequestOptions setPartitionKey(PartitionKey partitionKey) {\n      *\n      * @return the partition key\n      */\n-    public PartitionKey getPartitionKey() {\n+    PartitionKey getPartitionKey() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b860663c00791d4f326eb3e446abc626ed6338f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1MzM1OA==", "bodyText": "if the intention is to only capture PartitionKey.None then we should probably do PartitionKey.None == key instead.\nAre there any other case other than PartitionKey.None which would get covered here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369353358", "createdAt": "2020-01-22T03:17:35Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/PartitionKey.java", "diffHunk": "@@ -25,7 +25,13 @@\n      */\n     @SuppressWarnings(\"serial\")\n     public PartitionKey(final Object key) {\n-        this.internalPartitionKey = PartitionKeyInternal.fromObjectArray(new Object[] {key}, true);\n+        // Now that we are making partitionkey as one of the parameters for creating object, just making sure nothing\n+        // wrong happens here when user does something like new PartitionKey(PartitionKey.None);\n+        if (!(key instanceof PartitionKey)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b860663c00791d4f326eb3e446abc626ed6338f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1NDAxNA==", "bodyText": "If the public API is T getResource() the instantiation of CosmosItemProperties will do double deserialization. We should remember to remove this altogether and solely rely on T getResource()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369354014", "createdAt": "2020-01-22T03:21:21Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncItemResponse.java", "diffHunk": "@@ -4,40 +4,41 @@\n \n import com.azure.cosmos.implementation.Document;\n import com.azure.cosmos.implementation.ResourceResponse;\n+import com.azure.cosmos.implementation.Utils;\n import org.apache.commons.lang3.StringUtils;\n \n-public class CosmosAsyncItemResponse extends CosmosResponse<CosmosItemProperties> {\n-    private final CosmosAsyncItem itemClient;\n-\n-    CosmosAsyncItemResponse(ResourceResponse<Document> response, PartitionKey partitionKey,\n-                            CosmosAsyncContainer container) {\n+public class CosmosAsyncItemResponse<T> extends CosmosResponse<CosmosItemProperties> {\n+    private final Class<T> itemClassType;\n+    private final String responseBodyString;\n+    \n+    CosmosAsyncItemResponse(ResourceResponse<Document> response, Class<T> klass) {\n         super(response);\n-        String bodyAsString = response.getBodyAsString();\n-        if (StringUtils.isEmpty(bodyAsString)) {\n+        this.itemClassType = klass;\n+        responseBodyString = response.getBodyAsString();\n+        if (StringUtils.isEmpty(responseBodyString)){\n             super.setProperties(null);\n-            itemClient = null;\n         } else {\n-            CosmosItemProperties props = new CosmosItemProperties(bodyAsString);\n+            CosmosItemProperties props = new CosmosItemProperties(responseBodyString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b860663c00791d4f326eb3e446abc626ed6338f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1NDIzMg==", "bodyText": "what happened to this guy?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369354232", "createdAt": "2020-01-22T03:22:37Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosResponseValidator.java", "diffHunk": "@@ -210,7 +210,8 @@ public void validate(CosmosAsyncStoredProcedureResponse resourceResponse) {\n                 @Override\n                 public void validate(T resourceResponse) {\n                     assertThat(resourceResponse.getProperties()).isNotNull();\n-                    assertThat(resourceResponse.getProperties().getETag()).isNotNull();\n+                    //TODO: Uncomment this after checking getETag()\n+//                    assertThat(resourceResponse.getETag()).isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b860663c00791d4f326eb3e446abc626ed6338f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1NDQxMA==", "bodyText": "no \"Test\" suffix or prefix in the test name to look the same as other test methods", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369354410", "createdAt": "2020-01-22T03:23:35Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/DocumentCrudTest.java", "diffHunk": "@@ -315,17 +335,121 @@ public void upsertDocument_ReplaceDocument(String documentId) throws Throwable {\n \n         // Replace document\n \n-        Mono<CosmosAsyncItemResponse> readObservable = container.upsertItem(properties, new CosmosItemRequestOptions());\n+        Mono<CosmosAsyncItemResponse<CosmosItemProperties>> readObservable = container.upsertItem(properties, new CosmosItemRequestOptions());\n         System.out.println(properties);\n \n         // Validate result\n \n-        CosmosResponseValidator<CosmosAsyncItemResponse> validator = new CosmosResponseValidator.Builder<CosmosAsyncItemResponse>()\n+        CosmosResponseValidator<CosmosAsyncItemResponse<CosmosItemProperties>> validator = new CosmosResponseValidator.Builder<CosmosAsyncItemResponse<CosmosItemProperties>>()\n             .withProperty(\"newProp\", newPropValue).build();\n \n         validateSuccess(readObservable, validator);\n     }\n \n+    @Test(groups = {\"simple\"}, timeOut = TIMEOUT)\n+    public void typedItemsTest() throws Throwable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b860663c00791d4f326eb3e446abc626ed6338f"}, "originalPosition": 299}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf4fad6bd6a33a6098e1a9dab090d7f3ba24e4c4", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bf4fad6bd6a33a6098e1a9dab090d7f3ba24e4c4", "committedDate": "2020-01-22T22:44:15Z", "message": "Addressing PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2OTY4NDE0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#pullrequestreview-346968414", "createdAt": "2020-01-22T23:10:24Z", "commit": {"oid": "bf4fad6bd6a33a6098e1a9dab090d7f3ba24e4c4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2OTkyNjIx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#pullrequestreview-346992621", "createdAt": "2020-01-23T00:18:08Z", "commit": {"oid": "bf4fad6bd6a33a6098e1a9dab090d7f3ba24e4c4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fa14259a24ca228931d940f36e65957fc103790", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6fa14259a24ca228931d940f36e65957fc103790", "committedDate": "2020-01-23T00:36:33Z", "message": "Fixing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bdc7edeb503f459a10917977091793ae8e1b52c", "author": {"user": {"login": "mbhaskar", "name": "Bhaskar Mallapragada"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1bdc7edeb503f459a10917977091793ae8e1b52c", "committedDate": "2020-01-23T02:07:45Z", "message": "Fixing tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 530, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}