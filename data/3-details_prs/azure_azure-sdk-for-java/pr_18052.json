{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1MzgyNTM3", "number": 18052, "title": "[Communication] - Common - Remove all Future and replace with Mono", "bodyText": "We had some Future references left over when Java and Android shared the same Common SDK. Now that Android has its own version, we can replace the Future with Mono", "createdAt": "2020-12-09T18:34:34Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18052", "merged": true, "mergeCommit": {"oid": "54cedfd26a73cffe703abf963253054c37754257"}, "closed": true, "closedAt": "2020-12-11T02:33:56Z", "author": {"login": "minnieliu"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkWnVXgH2gAyNTM1MzgyNTM3OjljZWQyNjM4YWZjZjU0OWU4MzA5ZDE0MmMzZDU2M2I2ZWQyNzQ5NzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdk94TcgH2gAyNTM1MzgyNTM3OmMzZGY2OTBkZTRlNDJhNGUxNjlmN2I5Y2QwZDI5MDAwZWRmYzNlNzE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9ced2638afcf549e8309d142c3d563b6ed274970", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9ced2638afcf549e8309d142c3d563b6ed274970", "committedDate": "2020-12-09T03:59:23Z", "message": ""}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ced247712ad5bee4b53025a1024a63e78366680", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8ced247712ad5bee4b53025a1024a63e78366680", "committedDate": "2020-12-09T18:30:26Z", "message": "Refacting Future to Mono"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e0bcbc14cf94ca444cec4526c7e202b2ac43d17", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6e0bcbc14cf94ca444cec4526c7e202b2ac43d17", "committedDate": "2020-12-09T18:48:21Z", "message": "Updating BearerToken"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NDg4OTI4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18052#pullrequestreview-548488928", "createdAt": "2020-12-09T18:38:00Z", "commit": {"oid": "8ced247712ad5bee4b53025a1024a63e78366680"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODozODowMFrOICjo0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODo0NTo1OVrOICj9_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU1MTk1Mw==", "bodyText": "This class name reads a bit funny to me. What about TokenAccessor? English is my second language though. :-)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18052#discussion_r539551953", "createdAt": "2020-12-09T18:38:00Z", "author": {"login": "JianpingChen"}, "path": "sdk/communication/azure-communication-common/src/main/java/com/azure/communication/common/CommunicationTokenCredential.java", "diffHunk": "@@ -92,52 +58,85 @@ public CommunicationTokenCredential(TokenRefresher tokenRefresher) {\n \n     /**\n      * Create with serialized JWT token and a token supplier to auto-refresh the\n-     * token before it expires. Callback function tokenRefresher will be called ahead\n-     * of the token expiry by the number of minutes specified by\n+     * token before it expires. Callback function tokenRefresher will be called\n+     * ahead of the token expiry by the number of minutes specified by\n      * CallbackOffsetMinutes defaulted to two minutes. To modify this default, call\n      * setCallbackOffsetMinutes after construction\n      * \n      * @param tokenRefresher implementation to supply fresh token when reqested\n      * @param initialToken serialized JWT token\n-     * @param refreshProactively when set to true, turn on proactive fetching to\n-     *                           call tokenRefresher before token expiry by minutes\n-     *                           set with setCallbackOffsetMinutes or default value\n-     *                           of two minutes\n+     * @param refreshProactively when set to true, turn on proactive fetching to call\n+     *                           tokenRefresher before token expiry by minutes set\n+     *                           with setCallbackOffsetMinutes or default value of\n+     *                           two minutes\n      */\n-    public CommunicationTokenCredential(\n-        TokenRefresher tokenRefresher, \n-        String initialToken,\n-        boolean refreshProactively) \n-    {\n+    public CommunicationTokenCredential(TokenRefresher tokenRefresher, String initialToken,\n+            boolean refreshProactively) {\n         this(tokenRefresher);\n         Objects.requireNonNull(initialToken, \"'initialToken' cannot be null.\");\n         setToken(initialToken);\n-        tokenFuture = new TokenImmediate(accessToken);\n         if (refreshProactively) {\n             OffsetDateTime nextFetchTime = accessToken.getExpiresAt().minusMinutes(DEFAULT_EXPIRING_OFFSET_MINUTES);\n             fetchingTask = new FetchingTask(this, nextFetchTime);\n         }\n     }\n \n+    private class TokenNext extends Mono<AccessToken> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ced247712ad5bee4b53025a1024a63e78366680"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU1NzM3Mg==", "bodyText": "This is a public interface. IMHO, we'd need a better name. getTokenAsync?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18052#discussion_r539557372", "createdAt": "2020-12-09T18:45:59Z", "author": {"login": "JianpingChen"}, "path": "sdk/communication/azure-communication-common/src/main/java/com/azure/communication/common/TokenRefresher.java", "diffHunk": "@@ -12,5 +12,5 @@\n      * Asynchronous call to fetch a fresh token\n      * @return Wrapper for asynchronous call\n      */\n-    Future<String> getFetchTokenFuture();\n+    Mono<String> getFetchTokenNext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ced247712ad5bee4b53025a1024a63e78366680"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0597a83d4af0423d9053d038c40c8a49affdc9f6", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0597a83d4af0423d9053d038c40c8a49affdc9f6", "committedDate": "2020-12-09T20:10:18Z", "message": "Addressing Code Review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8721da916072e3c5f4d7f8b24ec14d65cb41c924", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8721da916072e3c5f4d7f8b24ec14d65cb41c924", "committedDate": "2020-12-09T21:02:37Z", "message": "Fix naming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c9a900769c1befb4aa41ea4452700ed0f26d12c", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0c9a900769c1befb4aa41ea4452700ed0f26d12c", "committedDate": "2020-12-09T21:23:35Z", "message": "Fix spotbug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c375cfcce64448c97b6dc6e9b8d21e609b045819", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c375cfcce64448c97b6dc6e9b8d21e609b045819", "committedDate": "2020-12-09T22:00:58Z", "message": "Fix spotbug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca40ea269a9e02fffc9bfb11445a7b79d6430d1a", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ca40ea269a9e02fffc9bfb11445a7b79d6430d1a", "committedDate": "2020-12-09T22:17:01Z", "message": "Fix spotbug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3635735a19228466197b5339be738e1ec8747ae1", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3635735a19228466197b5339be738e1ec8747ae1", "committedDate": "2020-12-09T22:35:33Z", "message": "Fix spotbug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63acc8dde62d5cbcae0a590e32de664beeaca28c", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/63acc8dde62d5cbcae0a590e32de664beeaca28c", "committedDate": "2020-12-09T23:13:15Z", "message": "Updating changelog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cacbfa6e5f3c40ccd3c92cc42e07fd196686d96", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9cacbfa6e5f3c40ccd3c92cc42e07fd196686d96", "committedDate": "2020-12-10T01:07:44Z", "message": "Refactor PR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NTA5Mzg5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18052#pullrequestreview-549509389", "createdAt": "2020-12-10T18:58:42Z", "commit": {"oid": "9cacbfa6e5f3c40ccd3c92cc42e07fd196686d96"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NDgzMDc5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18052#pullrequestreview-549483079", "createdAt": "2020-12-10T18:24:45Z", "commit": {"oid": "9cacbfa6e5f3c40ccd3c92cc42e07fd196686d96"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODoyNDo0NVrOIDXRNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODoyNDo0NVrOIDXRNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5Nzg3Nw==", "bodyText": "We have a SimpleTokenCache that can be used here. It refreshes the token when it expires and also ensures that the refresh happens only once after each expiration period.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18052#discussion_r540397877", "createdAt": "2020-12-10T18:24:45Z", "author": {"login": "srnagar"}, "path": "sdk/communication/azure-communication-common/src/main/java/com/azure/communication/common/CommunicationTokenCredential.java", "diffHunk": "@@ -92,52 +55,54 @@ public CommunicationTokenCredential(TokenRefresher tokenRefresher) {\n \n     /**\n      * Create with serialized JWT token and a token supplier to auto-refresh the\n-     * token before it expires. Callback function tokenRefresher will be called ahead\n-     * of the token expiry by the number of minutes specified by\n+     * token before it expires. Callback function tokenRefresher will be called\n+     * ahead of the token expiry by the number of minutes specified by\n      * CallbackOffsetMinutes defaulted to two minutes. To modify this default, call\n      * setCallbackOffsetMinutes after construction\n      * \n      * @param tokenRefresher implementation to supply fresh token when reqested\n      * @param initialToken serialized JWT token\n-     * @param refreshProactively when set to true, turn on proactive fetching to\n-     *                           call tokenRefresher before token expiry by minutes\n-     *                           set with setCallbackOffsetMinutes or default value\n-     *                           of two minutes\n+     * @param refreshProactively when set to true, turn on proactive fetching to call\n+     *                           tokenRefresher before token expiry by minutes set\n+     *                           with setCallbackOffsetMinutes or default value of\n+     *                           two minutes\n      */\n-    public CommunicationTokenCredential(\n-        TokenRefresher tokenRefresher, \n-        String initialToken,\n-        boolean refreshProactively) \n-    {\n+    public CommunicationTokenCredential(TokenRefresher tokenRefresher, String initialToken,\n+            boolean refreshProactively) {\n         this(tokenRefresher);\n         Objects.requireNonNull(initialToken, \"'initialToken' cannot be null.\");\n         setToken(initialToken);\n-        tokenFuture = new TokenImmediate(accessToken);\n         if (refreshProactively) {\n             OffsetDateTime nextFetchTime = accessToken.getExpiresAt().minusMinutes(DEFAULT_EXPIRING_OFFSET_MINUTES);\n             fetchingTask = new FetchingTask(this, nextFetchTime);\n         }\n     }\n \n+\n     /**\n      * Get Azure core access token from credential\n      * \n      * @return Asynchronous call to fetch actual token\n      * @throws ExecutionException when supplier throws this exception\n      * @throws InterruptedException when supplier throws this exception\n      */\n-    public Future<AccessToken> getToken() throws InterruptedException, ExecutionException {\n+    public Mono<AccessToken> getToken() throws InterruptedException, ExecutionException {\n         if (isClosed) {\n             throw logger.logExceptionAsError(\n                 new RuntimeException(\"getToken called on closed CommunicationTokenCredential object\"));\n         }\n-        if ((accessToken == null || accessToken.isExpired()) // no valid token to return\n-            && refresher != null // can refresh\n-            && (tokenFuture == null || tokenFuture.isDone())) { // no fetching in progress, proactive or on-demand \n-            fetchFreshToken();\n+        synchronized (this) {\n+            // no valid token to return and can refresh\n+            if ((accessToken == null || accessToken.isExpired()) && refresher != null) {\n+                return fetchFreshToken()\n+                    .map(token -> {\n+                        accessToken = tokenParser.parseJWTToken(token);\n+                        return accessToken;\n+                    });\n+                \n+            }\n+            return Mono.just(accessToken);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cacbfa6e5f3c40ccd3c92cc42e07fd196686d96"}, "originalPosition": 137}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf63ccf4921469fae685c3ae579edf22feac73cb", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bf63ccf4921469fae685c3ae579edf22feac73cb", "committedDate": "2020-12-10T19:59:36Z", "message": "Implementing double check locking"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NzA1NTc5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18052#pullrequestreview-549705579", "createdAt": "2020-12-10T23:57:49Z", "commit": {"oid": "bf63ccf4921469fae685c3ae579edf22feac73cb"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo1Nzo1MFrOIDi7fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo1Nzo1MFrOIDi7fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4ODkyNQ==", "bodyText": "As discussed, return a Mono.error() here instead of throwing an exception.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18052#discussion_r540588925", "createdAt": "2020-12-10T23:57:50Z", "author": {"login": "srnagar"}, "path": "sdk/communication/azure-communication-common/src/main/java/com/azure/communication/common/CommunicationTokenCredential.java", "diffHunk": "@@ -92,52 +55,55 @@ public CommunicationTokenCredential(TokenRefresher tokenRefresher) {\n \n     /**\n      * Create with serialized JWT token and a token supplier to auto-refresh the\n-     * token before it expires. Callback function tokenRefresher will be called ahead\n-     * of the token expiry by the number of minutes specified by\n+     * token before it expires. Callback function tokenRefresher will be called\n+     * ahead of the token expiry by the number of minutes specified by\n      * CallbackOffsetMinutes defaulted to two minutes. To modify this default, call\n      * setCallbackOffsetMinutes after construction\n      * \n      * @param tokenRefresher implementation to supply fresh token when reqested\n      * @param initialToken serialized JWT token\n-     * @param refreshProactively when set to true, turn on proactive fetching to\n-     *                           call tokenRefresher before token expiry by minutes\n-     *                           set with setCallbackOffsetMinutes or default value\n-     *                           of two minutes\n+     * @param refreshProactively when set to true, turn on proactive fetching to call\n+     *                           tokenRefresher before token expiry by minutes set\n+     *                           with setCallbackOffsetMinutes or default value of\n+     *                           two minutes\n      */\n-    public CommunicationTokenCredential(\n-        TokenRefresher tokenRefresher, \n-        String initialToken,\n-        boolean refreshProactively) \n-    {\n+    public CommunicationTokenCredential(TokenRefresher tokenRefresher, String initialToken,\n+            boolean refreshProactively) {\n         this(tokenRefresher);\n         Objects.requireNonNull(initialToken, \"'initialToken' cannot be null.\");\n         setToken(initialToken);\n-        tokenFuture = new TokenImmediate(accessToken);\n         if (refreshProactively) {\n             OffsetDateTime nextFetchTime = accessToken.getExpiresAt().minusMinutes(DEFAULT_EXPIRING_OFFSET_MINUTES);\n             fetchingTask = new FetchingTask(this, nextFetchTime);\n         }\n     }\n \n+\n     /**\n      * Get Azure core access token from credential\n      * \n      * @return Asynchronous call to fetch actual token\n      * @throws ExecutionException when supplier throws this exception\n      * @throws InterruptedException when supplier throws this exception\n      */\n-    public Future<AccessToken> getToken() throws InterruptedException, ExecutionException {\n+    public Mono<AccessToken> getToken() throws InterruptedException, ExecutionException {\n         if (isClosed) {\n             throw logger.logExceptionAsError(\n                 new RuntimeException(\"getToken called on closed CommunicationTokenCredential object\"));\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf63ccf4921469fae685c3ae579edf22feac73cb"}, "originalPosition": 122}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b32ceca1ec66575d44a8b3fabfebe932548058ed", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b32ceca1ec66575d44a8b3fabfebe932548058ed", "committedDate": "2020-12-11T00:06:54Z", "message": "Updating error handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "deca040f8d6b33a1ee422942eae1e5d545431a74", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/deca040f8d6b33a1ee422942eae1e5d545431a74", "committedDate": "2020-12-11T00:17:45Z", "message": "Updating error handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3df690de4e42a4e169f7b9cd0d29000edfc3e71", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c3df690de4e42a4e169f7b9cd0d29000edfc3e71", "committedDate": "2020-12-11T01:44:13Z", "message": "Update tests with StepVerifier"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1433, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}