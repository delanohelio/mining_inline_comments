{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3MDA3NjQ2", "number": 16601, "title": "Communication - Refactor Chat Tests to use StepVerifier", "bodyText": "", "createdAt": "2020-10-20T18:25:40Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16601", "merged": true, "mergeCommit": {"oid": "cf024aa9fe7073b9ed0dbffbca4a13a46871a368"}, "closed": true, "closedAt": "2020-10-21T17:53:31Z", "author": {"login": "minnieliu"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUdBneAH2gAyNTA3MDA3NjQ2OmY4OTJjYTg1OTY1M2Q2NWZkMjg2MDFkM2M0ZjBkOWI2M2QzODc3MTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUwqNWAFqTUxMzk5MTA3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f892ca859653d65fd28601d3c4f0d9b63d387711", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f892ca859653d65fd28601d3c4f0d9b63d387711", "committedDate": "2020-10-20T18:24:44Z", "message": "Communication - Refactor Chat Tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edb0f2e5b4ac35b4692ae7ef146f5b7f229a4b51", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/edb0f2e5b4ac35b4692ae7ef146f5b7f229a4b51", "committedDate": "2020-10-20T18:41:02Z", "message": "Fix build"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMDg1Njk3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16601#pullrequestreview-513085697", "createdAt": "2020-10-20T19:59:39Z", "commit": {"oid": "edb0f2e5b4ac35b4692ae7ef146f5b7f229a4b51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOTo1OTozOVrOHlOzHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOTo1OTozOVrOHlOzHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwMTgyMw==", "bodyText": "still need to remove this block. It's what I was asking Srikanta about during the tutorial. Let me find his answer about how to do it", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16601#discussion_r508801823", "createdAt": "2020-10-20T19:59:39Z", "author": {"login": "angiurgiu"}, "path": "sdk/communication/azure-communication-chat/src/test/java/com/azure/communication/chat/ChatAsyncClientTest.java", "diffHunk": "@@ -57,92 +60,137 @@ protected void afterTest() {\n \n     @Test\n     public void canCreateThread() {\n+        // Arrange\n         CreateChatThreadOptions threadRequest = ChatOptionsProvider.createThreadOptions(\n             firstThreadMember.getId(), secondThreadMember.getId());\n \n-        ChatThreadAsyncClient chatThreadClient = client.createChatThread(threadRequest).block();\n-        assertNotNull(chatThreadClient);\n-        assertNotNull(chatThreadClient.getChatThreadId());\n+        // Act & Assert\n+        StepVerifier.create(client.createChatThread(threadRequest))\n+            .assertNext(chatThreadClient -> {\n+                assertNotNull(chatThreadClient);\n+                assertNotNull(chatThreadClient.getChatThreadId());\n+            })\n+            .verifyComplete();\n     }\n \n     @Test\n     public void canCreateThreadWithResponse() {\n+        // Arrange\n         CreateChatThreadOptions threadRequest = ChatOptionsProvider.createThreadOptions(\n             firstThreadMember.getId(), secondThreadMember.getId());\n \n-        ChatThreadAsyncClient chatThreadClient = client.createChatThreadWithResponse(threadRequest).block().getValue();\n-        assertNotNull(chatThreadClient);\n-        assertNotNull(chatThreadClient.getChatThreadId());\n+        // Act & Assert\n+        StepVerifier.create(client.createChatThreadWithResponse(threadRequest))\n+            .assertNext(chatThreadClientResponse -> {\n+                ChatThreadAsyncClient chatThreadClient = chatThreadClientResponse.getValue();\n+                assertNotNull(chatThreadClient);\n+                assertNotNull(chatThreadClient.getChatThreadId()); \n+            })\n+            .verifyComplete();\n     }\n \n     @Test\n     public void canGetChatThreadClient() {\n+        // Arrange\n         String threadId = \"19:fe0a2f65a7834185b29164a7de57699c@thread.v2\";\n \n+        // Act\n         ChatThreadAsyncClient chatThreadClient = client.getChatThreadClient(threadId);\n+\n+        // Assert\n         assertNotNull(chatThreadClient);\n         assertEquals(chatThreadClient.getChatThreadId(), threadId);\n     }\n \n     @Test\n     public void canGetExistingChatThread() {\n+        // Arrange\n         CreateChatThreadOptions threadRequest = ChatOptionsProvider.createThreadOptions(\n             firstThreadMember.getId(), secondThreadMember.getId());\n         ChatThreadAsyncClient chatThreadClient = client.createChatThread(threadRequest).block();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edb0f2e5b4ac35b4692ae7ef146f5b7f229a4b51"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMDg3MzI3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16601#pullrequestreview-513087327", "createdAt": "2020-10-20T20:01:57Z", "commit": {"oid": "edb0f2e5b4ac35b4692ae7ef146f5b7f229a4b51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDowMTo1N1rOHlO4OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDowMTo1N1rOHlO4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwMzEyOA==", "bodyText": "Same comment here, need to get rid of this .block() too", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16601#discussion_r508803128", "createdAt": "2020-10-20T20:01:57Z", "author": {"login": "angiurgiu"}, "path": "sdk/communication/azure-communication-chat/src/test/java/com/azure/communication/chat/ChatThreadAsyncClientTest.java", "diffHunk": "@@ -64,158 +67,219 @@ protected void afterTest() {\n \n     @Test\n     public void canUpdateThread() {\n+        // Arrange\n         UpdateChatThreadOptions threadRequest = ChatOptionsProvider.updateThreadOptions();\n \n-        chatThreadClient.updateChatThread(threadRequest).block();\n-\n-        ChatThread chatThread = client.getChatThread(threadId).block();\n-        assertEquals(chatThread.getTopic(), threadRequest.getTopic());\n+        // Act & Assert\n+        StepVerifier.create(chatThreadClient.updateChatThread(threadRequest))\n+            .assertNext(noResp -> {\n+                StepVerifier.create(client.getChatThread(threadId)).assertNext(chatThread -> {\n+                    assertEquals(chatThread.getTopic(), threadRequest.getTopic());\n+                })\n+                .verifyComplete();\n+            });\n     }\n \n     @Test\n     public void canUpdateThreadWithResponse() {\n+        // Arrange\n         UpdateChatThreadOptions threadRequest = ChatOptionsProvider.updateThreadOptions();\n \n-        chatThreadClient.updateChatThreadWithResponse(threadRequest).block().getValue();\n+        // Act & Assert\n+        StepVerifier.create(chatThreadClient.updateChatThreadWithResponse(threadRequest))\n+                .assertNext(updateThreadResponse -> {\n+                    assertEquals(updateThreadResponse.getStatusCode(), 200);\n+                    StepVerifier.create(client.getChatThread(threadId)).assertNext(chatThread -> {\n+                        assertEquals(chatThread.getTopic(), threadRequest.getTopic());\n+                    })\n+                    .verifyComplete();\n+                })\n+                .verifyComplete();\n \n-        ChatThread chatThread = client.getChatThread(threadId).block();\n-        assertEquals(chatThread.getTopic(), threadRequest.getTopic());\n     }\n \n     @Test\n     public void canAddListAndRemoveMembersAsync() throws InterruptedException {\n+        // Arrange\n         firstAddedThreadMember = communicationClient.createUser();\n         secondAddedThreadMember = communicationClient.createUser();\n \n         AddChatThreadMembersOptions options = ChatOptionsProvider.addThreadMembersOptions(\n             firstAddedThreadMember.getId(), secondAddedThreadMember.getId());\n \n-        chatThreadClient.addMembers(options).block();\n-\n-        PagedIterable<ChatThreadMember> membersResponse = new PagedIterable<>(chatThreadClient.listMembers());\n-\n-        // process the iterableByPage\n-        List<ChatThreadMember> returnedMembers = new ArrayList<ChatThreadMember>();\n-        membersResponse.iterableByPage().forEach(resp -> {\n-            assertEquals(resp.getStatusCode(), 200);\n-            resp.getItems().forEach(item -> returnedMembers.add(item));\n-        });\n-\n-        for (ChatThreadMember member: options.getMembers()) {\n-            assertTrue(checkMembersListContainsMemberId(returnedMembers, member.getUser().getId()));\n-        }\n-\n-        assertTrue(returnedMembers.size() == 4);\n+        // Act & Assert\n+        StepVerifier.create(chatThreadClient.addMembers(options))\n+            .assertNext(noResp -> {\n+                PagedIterable<ChatThreadMember> membersResponse = new PagedIterable<>(chatThreadClient.listMembers());\n+\n+                // process the iterableByPage\n+                List<ChatThreadMember> returnedMembers = new ArrayList<ChatThreadMember>();\n+                membersResponse.iterableByPage().forEach(resp -> {\n+                    assertEquals(resp.getStatusCode(), 200);\n+                    resp.getItems().forEach(item -> returnedMembers.add(item));\n+                });\n+        \n+                for (ChatThreadMember member: options.getMembers()) {\n+                    assertTrue(checkMembersListContainsMemberId(returnedMembers, member.getUser().getId()));\n+                }\n+                assertTrue(returnedMembers.size() == 4);\n+            });\n \n         for (ChatThreadMember member: options.getMembers()) {\n-            chatThreadClient.removeMember(member.getUser()).block();\n+            StepVerifier.create(chatThreadClient.removeMember(member.getUser()))\n+                .verifyComplete();\n         }\n     }\n \n     @Test\n     public void canAddListAndRemoveMembersWithResponseAsync() throws InterruptedException {\n+        // Arrange\n         firstAddedThreadMember = communicationClient.createUser();\n         secondAddedThreadMember = communicationClient.createUser();\n \n         AddChatThreadMembersOptions options = ChatOptionsProvider.addThreadMembersOptions(\n             firstAddedThreadMember.getId(), secondAddedThreadMember.getId());\n \n-        chatThreadClient.addMembersWithResponse(options).block().getValue();\n-\n-        PagedIterable<ChatThreadMember> membersResponse = new PagedIterable<>(chatThreadClient.listMembers());\n-\n-        // process the iterableByPage\n-        List<ChatThreadMember> returnedMembers = new ArrayList<ChatThreadMember>();\n-        membersResponse.iterableByPage().forEach(resp -> {\n-            assertEquals(resp.getStatusCode(), 200);\n-            resp.getItems().forEach(item -> returnedMembers.add(item));\n-        });\n-\n-        for (ChatThreadMember member: options.getMembers()) {\n-            assertTrue(checkMembersListContainsMemberId(returnedMembers, member.getUser().getId()));\n-        }\n-\n-        assertTrue(returnedMembers.size() == 4);\n-\n-        for (ChatThreadMember member: options.getMembers()) {\n-            chatThreadClient.removeMemberWithResponse(member.getUser()).block().getValue();\n-        }\n+        // Action & Assert\n+        StepVerifier.create(chatThreadClient.addMembersWithResponse(options))\n+            .assertNext(addMembersResponse -> {\n+                assertEquals(addMembersResponse.getStatusCode(), 207);\n+                PagedIterable<ChatThreadMember> membersResponse = new PagedIterable<>(chatThreadClient.listMembers());\n+\n+                // process the iterableByPage\n+                List<ChatThreadMember> returnedMembers = new ArrayList<ChatThreadMember>();\n+                membersResponse.iterableByPage().forEach(resp -> {\n+                    assertEquals(resp.getStatusCode(), 200);\n+                    resp.getItems().forEach(item -> returnedMembers.add(item));\n+                });\n+        \n+                for (ChatThreadMember member: options.getMembers()) {\n+                    assertTrue(checkMembersListContainsMemberId(returnedMembers, member.getUser().getId()));\n+                }\n+        \n+                assertTrue(returnedMembers.size() == 4);\n+\n+                for (ChatThreadMember member: options.getMembers()) {\n+                    StepVerifier.create(chatThreadClient.removeMemberWithResponse(member.getUser()))\n+                        .assertNext(resp -> {\n+                            assertEquals(resp.getStatusCode(), 204);\n+                        })\n+                        .verifyComplete();\n+                }\n+            })\n+            .verifyComplete();\n     }\n \n     @Test\n     public void canSendThenGetMessage() {\n+        // Arrange\n         SendChatMessageOptions messageRequest = ChatOptionsProvider.sendMessageOptions();\n-\n-        SendChatMessageResult response = chatThreadClient.sendMessage(messageRequest).block();\n-\n-        ChatMessage message = chatThreadClient.getMessage(response.getId()).block();\n-        assertEquals(message.getContent(), messageRequest.getContent());\n-        assertEquals(message.getPriority(), messageRequest.getPriority());\n-        assertEquals(message.getSenderDisplayName(), messageRequest.getSenderDisplayName());\n+        \n+        // Action & Assert\n+        StepVerifier.create(chatThreadClient.sendMessage(messageRequest))\n+            .assertNext(response -> {\n+                StepVerifier.create(chatThreadClient.getMessage(response.getId()))\n+                    .assertNext(message -> {\n+                        assertEquals(message.getContent(), messageRequest.getContent());\n+                        assertEquals(message.getPriority(), messageRequest.getPriority());\n+                        assertEquals(message.getSenderDisplayName(), messageRequest.getSenderDisplayName());\n+                    })\n+                    .verifyComplete();\n+            })\n+            .verifyComplete();\n     }\n \n     @Test\n     public void canSendThenGetMessageWithResponse() {\n+        // Arrange\n         SendChatMessageOptions messageRequest = ChatOptionsProvider.sendMessageOptions();\n \n-        SendChatMessageResult response = chatThreadClient.sendMessageWithResponse(messageRequest).block().getValue();\n-\n-        ChatMessage message = chatThreadClient.getMessageWithResponse(response.getId()).block().getValue();\n-        assertEquals(message.getContent(), messageRequest.getContent());\n-        assertEquals(message.getPriority(), messageRequest.getPriority());\n-        assertEquals(message.getSenderDisplayName(), messageRequest.getSenderDisplayName());\n+        // Action & Assert\n+        StepVerifier.create(chatThreadClient.sendMessageWithResponse(messageRequest))\n+            .assertNext(sendResponse -> {\n+                StepVerifier.create(chatThreadClient.getMessageWithResponse(sendResponse.getValue().getId()))\n+                    .assertNext(getResponse -> {\n+                        ChatMessage message = getResponse.getValue();\n+                        assertEquals(message.getContent(), messageRequest.getContent());\n+                        assertEquals(message.getPriority(), messageRequest.getPriority());\n+                        assertEquals(message.getSenderDisplayName(), messageRequest.getSenderDisplayName());\n+                    })\n+                    .verifyComplete();\n+            })\n+            .verifyComplete();\n     }\n \n     @Test\n     public void canDeleteExistingMessage() {\n+        // Arrange\n         SendChatMessageOptions messageRequest = ChatOptionsProvider.sendMessageOptions();\n-\n         SendChatMessageResult response = chatThreadClient.sendMessage(messageRequest).block();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edb0f2e5b4ac35b4692ae7ef146f5b7f229a4b51"}, "originalPosition": 240}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17b6acc79fc941aa30180125113e3bc38211d2ea", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/17b6acc79fc941aa30180125113e3bc38211d2ea", "committedDate": "2020-10-21T00:05:18Z", "message": "Update tests to get rid of all blocks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6ffbc1222361f199327588722fe31979e35e864", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f6ffbc1222361f199327588722fe31979e35e864", "committedDate": "2020-10-21T00:16:25Z", "message": "Clean up and fix build"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzODQ5ODgy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16601#pullrequestreview-513849882", "createdAt": "2020-10-21T16:01:45Z", "commit": {"oid": "f6ffbc1222361f199327588722fe31979e35e864"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzOTkxMDc0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16601#pullrequestreview-513991074", "createdAt": "2020-10-21T17:17:16Z", "commit": {"oid": "f6ffbc1222361f199327588722fe31979e35e864"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1855, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}