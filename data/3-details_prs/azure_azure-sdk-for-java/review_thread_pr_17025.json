{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMjUwODUz", "number": 17025, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTo1MzoyMlrOEz8IaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMTo0ODozNFrOEz-NfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODk4MDI0OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTo1MzoyMlrOHreIxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTo1MzoyMlrOHreIxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0NDU4Mw==", "bodyText": "This should be false", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17025#discussion_r515344583", "createdAt": "2020-10-30T19:53:22Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobAsyncClient.java", "diffHunk": "@@ -294,7 +294,7 @@\n             final Map<String, String> metadataFinal = options.getMetadata() == null\n                 ? new HashMap<>() : options.getMetadata();\n             Flux<ByteBuffer> data = options.getDataFlux() == null ? Utility.convertStreamToByteBuffer(\n-                options.getDataStream(), options.getLength(), BLOB_DEFAULT_UPLOAD_BLOCK_SIZE)\n+                options.getDataStream(), options.getLength(), BLOB_DEFAULT_UPLOAD_BLOCK_SIZE, true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "158db394c28ab6691f92086bd10754b8b6a64def"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODk4MzIzOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakeFileAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTo1NDoyN1rOHreKqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTo1NDoyN1rOHreKqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0NTA2NA==", "bodyText": "Should be false", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17025#discussion_r515345064", "createdAt": "2020-10-30T19:54:27Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakeFileAsyncClient.java", "diffHunk": "@@ -318,7 +318,7 @@ public String getFileName() {\n             Flux<ByteBuffer> data = options.getDataFlux() == null ? Utility.convertStreamToByteBuffer(\n                 options.getDataStream(), options.getLength(),\n                 // We can only buffer up to max int due to restrictions in ByteBuffer.\n-                (int) Math.min(Integer.MAX_VALUE, validatedParallelTransferOptions.getBlockSizeLong()))\n+                (int) Math.min(Integer.MAX_VALUE, validatedParallelTransferOptions.getBlockSizeLong()), true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "158db394c28ab6691f92086bd10754b8b6a64def"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODk4NDMxOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakeFileClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTo1NDo1MlrOHreLUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTo1NDo1MlrOHreLUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0NTIzNQ==", "bodyText": "Should add a test for this", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17025#discussion_r515345235", "createdAt": "2020-10-30T19:54:52Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakeFileClient.java", "diffHunk": "@@ -341,7 +341,7 @@ public void append(InputStream data, long fileOffset, long length) {\n \n         Objects.requireNonNull(data);\n         Flux<ByteBuffer> fbb = Utility.convertStreamToByteBuffer(data, length,\n-            BlobAsyncClient.BLOB_DEFAULT_UPLOAD_BLOCK_SIZE);\n+            BlobAsyncClient.BLOB_DEFAULT_UPLOAD_BLOCK_SIZE, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "158db394c28ab6691f92086bd10754b8b6a64def"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODk4NTIyOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareFileClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTo1NToxMlrOHreL5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTo1NToxMlrOHreL5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0NTM4MQ==", "bodyText": "Should add a test for this", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17025#discussion_r515345381", "createdAt": "2020-10-30T19:55:12Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareFileClient.java", "diffHunk": "@@ -971,7 +971,7 @@ public ShareFileUploadInfo upload(InputStream data, long length) {\n     public Response<ShareFileUploadInfo> uploadWithResponse(InputStream data, long length, Long offset,\n         ShareRequestConditions requestConditions, Duration timeout, Context context) {\n         return StorageImplUtils.blockWithOptionalTimeout(shareFileAsyncClient.uploadWithResponse(Utility\n-                .convertStreamToByteBuffer(data, length, (int) ShareFileAsyncClient.FILE_DEFAULT_BLOCK_SIZE),\n+                .convertStreamToByteBuffer(data, length, (int) ShareFileAsyncClient.FILE_DEFAULT_BLOCK_SIZE, true),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "158db394c28ab6691f92086bd10754b8b6a64def"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTA3MTc3OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/specialized/BlockBlobAPITest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDoyNjo0NFrOHrfAqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDoyNjo0NFrOHrfAqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1ODg5MQ==", "bodyText": "Can you also make sure the extra length tests get in datalake too?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17025#discussion_r515358891", "createdAt": "2020-10-30T20:26:44Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/specialized/BlockBlobAPITest.groovy", "diffHunk": "@@ -1433,10 +1471,43 @@ class BlockBlobAPITest extends APISpec {\n \n         where:\n         dataSizeList                         | blockCount\n+        [10, 100, 1000, 10000]               | 0\n         [4 * Constants.MB + 1, 10]           | 2\n         [4 * Constants.MB, 4 * Constants.MB] | 2\n     }\n \n+    @Unroll\n+    @Requires({ liveMode() })\n+    def \"Buffered upload sync handle pathing with transient failure\"() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "158db394c28ab6691f92086bd10754b8b6a64def"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTMyMDkyOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/Utility.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMTo0ODozNFrOHrhYNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMTo0ODozNFrOHrhYNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5NzY4NA==", "bodyText": "Given this is a public API should make this a new overload and have the previous method pass the default case which appears to be true.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17025#discussion_r515397684", "createdAt": "2020-10-30T21:48:34Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/Utility.java", "diffHunk": "@@ -220,22 +220,30 @@ public static OffsetDateTime parseDate(String dateString) {\n      * @param data The input data which needs to convert to ByteBuffer.\n      * @param length The expected input data length.\n      * @param blockSize The size of each ByteBuffer.\n+     * @param markAndReset Whether the stream needs to be marked and reset. This should generally always be true to\n+     * support retries. It is false in the case of buffered upload to support non markable streams because buffered\n+     * upload uses its own mechanisms to support retries.\n      * @return {@link ByteBuffer} which contains the input data.\n      * @throws UnexpectedLengthException when input data length mismatch input length.\n      * @throws RuntimeException When I/O error occurs.\n      */\n-    public static Flux<ByteBuffer> convertStreamToByteBuffer(InputStream data, long length, int blockSize) {\n-        data.mark(Integer.MAX_VALUE);\n+    public static Flux<ByteBuffer> convertStreamToByteBuffer(InputStream data, long length, int blockSize,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "158db394c28ab6691f92086bd10754b8b6a64def"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3816, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}