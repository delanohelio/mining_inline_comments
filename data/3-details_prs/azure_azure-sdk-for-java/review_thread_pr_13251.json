{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwNDQ1NDcz", "number": 13251, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODoxODowMVrOEPoa_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODoyMDoxNFrOEPodrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODI2MzY2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/repository/query/ReactiveCosmosQueryExecution.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODoxODowMVrOGzcwlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOTowNjo1MVrOGzeKlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMTc0OA==", "bodyText": "why do we need this buffer(2) ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13251#discussion_r456601748", "createdAt": "2020-07-17T18:18:01Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/repository/query/ReactiveCosmosQueryExecution.java", "diffHunk": "@@ -54,6 +56,34 @@ public Object execute(DocumentQuery query, Class<?> type, String container) {\n         }\n     }\n \n+    /**\n+     * Find operation implementation to execute a find query for a single item\n+     */\n+    final class SingleEntityExecution implements ReactiveCosmosQueryExecution {\n+\n+        private final ReactiveCosmosOperations operations;\n+        private final ReturnedType returnedType;\n+\n+        public SingleEntityExecution(ReactiveCosmosOperations operations, ReturnedType returnedType) {\n+            this.operations = operations;\n+            this.returnedType = returnedType;\n+        }\n+\n+        @Override\n+        public Object execute(DocumentQuery query, Class<?> type, String container) {\n+            return operations.find(query, type, container)\n+                .buffer(2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcca5455416a38563e2909b669c6332b1e81c71e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxMTAyNg==", "bodyText": "We want to ensure only a single result is returned by the query. However, the results are returned as a stream. This allows us to check that the stream only contains a single item without retrieving all of the streams contents.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13251#discussion_r456611026", "createdAt": "2020-07-17T18:37:09Z", "author": {"login": "Blackbaud-EricSlater"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/repository/query/ReactiveCosmosQueryExecution.java", "diffHunk": "@@ -54,6 +56,34 @@ public Object execute(DocumentQuery query, Class<?> type, String container) {\n         }\n     }\n \n+    /**\n+     * Find operation implementation to execute a find query for a single item\n+     */\n+    final class SingleEntityExecution implements ReactiveCosmosQueryExecution {\n+\n+        private final ReactiveCosmosOperations operations;\n+        private final ReturnedType returnedType;\n+\n+        public SingleEntityExecution(ReactiveCosmosOperations operations, ReturnedType returnedType) {\n+            this.operations = operations;\n+            this.returnedType = returnedType;\n+        }\n+\n+        @Override\n+        public Object execute(DocumentQuery query, Class<?> type, String container) {\n+            return operations.find(query, type, container)\n+                .buffer(2)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMTc0OA=="}, "originalCommit": {"oid": "bcca5455416a38563e2909b669c6332b1e81c71e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyNDc4OA==", "bodyText": "Sounds good!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13251#discussion_r456624788", "createdAt": "2020-07-17T19:06:51Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/repository/query/ReactiveCosmosQueryExecution.java", "diffHunk": "@@ -54,6 +56,34 @@ public Object execute(DocumentQuery query, Class<?> type, String container) {\n         }\n     }\n \n+    /**\n+     * Find operation implementation to execute a find query for a single item\n+     */\n+    final class SingleEntityExecution implements ReactiveCosmosQueryExecution {\n+\n+        private final ReactiveCosmosOperations operations;\n+        private final ReturnedType returnedType;\n+\n+        public SingleEntityExecution(ReactiveCosmosOperations operations, ReturnedType returnedType) {\n+            this.operations = operations;\n+            this.returnedType = returnedType;\n+        }\n+\n+        @Override\n+        public Object execute(DocumentQuery query, Class<?> type, String container) {\n+            return operations.find(query, type, container)\n+                .buffer(2)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMTc0OA=="}, "originalCommit": {"oid": "bcca5455416a38563e2909b669c6332b1e81c71e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODI3MDU0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos/src/test/java/com/azure/spring/data/cosmos/repository/repository/ReactiveCourseRepository.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODoyMDoxNFrOGzc0qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOTowNjo0MVrOGzeKQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMjc5NA==", "bodyText": "Shouldn't this also be findOneByName ?\nI am still unclear on what if there are multiple items by name ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13251#discussion_r456602794", "createdAt": "2020-07-17T18:20:14Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/test/java/com/azure/spring/data/cosmos/repository/repository/ReactiveCourseRepository.java", "diffHunk": "@@ -34,4 +35,12 @@\n      * @return Course list\n      */\n     Flux<Course> findByNameOrDepartmentAllIgnoreCase(String name, String department);\n+\n+    /**\n+     * Find a single Course list by name\n+     * @param name name\n+     * @return Course list\n+     */\n+    Mono<Course> findByName(String name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcca5455416a38563e2909b669c6332b1e81c71e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwOTE2Mw==", "bodyText": "yea i will rename that for clarity. But i do want to point out that the determination of the execution path is based on the return type. We are not using the PartTree class to parse the method name to determine the users intent so it behaves the same regardless of whether the user specifies \"findOne\". The fact that the method is returning a Mono is what makes it expect one item.\nIn the event that there are multiple items returned, we will throw a CosmosAccessException with an error message saying \"Too many results - Expected Mono but query returned multiple results\".\nThis is consistent with the non reactive path and is demonstrated in the test ReactiveCourseRepositoryIT.testFindOneShouldFailIfMultipleResultsReturned", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13251#discussion_r456609163", "createdAt": "2020-07-17T18:33:16Z", "author": {"login": "Blackbaud-EricSlater"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/test/java/com/azure/spring/data/cosmos/repository/repository/ReactiveCourseRepository.java", "diffHunk": "@@ -34,4 +35,12 @@\n      * @return Course list\n      */\n     Flux<Course> findByNameOrDepartmentAllIgnoreCase(String name, String department);\n+\n+    /**\n+     * Find a single Course list by name\n+     * @param name name\n+     * @return Course list\n+     */\n+    Mono<Course> findByName(String name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMjc5NA=="}, "originalCommit": {"oid": "bcca5455416a38563e2909b669c6332b1e81c71e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyNDcwNg==", "bodyText": "Sounds great, thank you for the explanation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13251#discussion_r456624706", "createdAt": "2020-07-17T19:06:41Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/test/java/com/azure/spring/data/cosmos/repository/repository/ReactiveCourseRepository.java", "diffHunk": "@@ -34,4 +35,12 @@\n      * @return Course list\n      */\n     Flux<Course> findByNameOrDepartmentAllIgnoreCase(String name, String department);\n+\n+    /**\n+     * Find a single Course list by name\n+     * @param name name\n+     * @return Course list\n+     */\n+    Mono<Course> findByName(String name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMjc5NA=="}, "originalCommit": {"oid": "bcca5455416a38563e2909b669c6332b1e81c71e"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4988, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}