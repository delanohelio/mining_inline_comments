{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNjIyNTg0", "number": 12622, "title": "Cosmos: preview for AAD support", "bodyText": "Add implementation to support AAD auth.", "createdAt": "2020-06-29T20:08:14Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622", "merged": true, "mergeCommit": {"oid": "5bb484faceb54fae4c41e5e3af7386b2fba05285"}, "closed": true, "closedAt": "2020-09-30T19:02:40Z", "author": {"login": "milismsft"}, "timelineItems": {"totalCount": 52, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccgMtEAH2gAyNDQxNjIyNTg0OjdhM2U3YWE2Y2QxN2I0YWNiNTRmMGJkMzc4ZmJiZTY0OTdjYTQyZjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOAVpQgH2gAyNDQxNjIyNTg0OjcyZjBiYWE0NGY2MGFjNjg2YzNhZWE1NGFmZjMzNDUxYTRjNjNhZDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7a3e7aa6cd17b4acb54f0bd378fbbe6497ca42f0", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7a3e7aa6cd17b4acb54f0bd378fbbe6497ca42f0", "committedDate": "2020-04-29T22:26:48Z", "message": "Add initial implementation to pass an AAD token to the backend."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "551baf34ddf19e8dc1d7f9f94a18e8c34c7cf360", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/551baf34ddf19e8dc1d7f9f94a18e8c34c7cf360", "committedDate": "2020-06-23T22:20:53Z", "message": "Merge remote-tracking branch 'upstream/master' into milismsft-AAD\n\n# Conflicts:\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/AsyncDocumentClient.java\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java\n#\tsdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/RxDocumentClientUnderTest.java\n#\tsdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/SpyClientUnderTestFactory.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NDc4ODYx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#pullrequestreview-439478861", "createdAt": "2020-06-29T20:33:06Z", "commit": {"oid": "551baf34ddf19e8dc1d7f9f94a18e8c34c7cf360"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDozMzowNlrOGqhJjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDozMzowNlrOGqhJjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzNjQ5NQ==", "bodyText": "Is Direct dependency needed?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r447236495", "createdAt": "2020-06-29T20:33:06Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/pom.xml", "diffHunk": "@@ -132,6 +132,20 @@ Licensed under the MIT License.\n       </exclusions>\n     </dependency>\n \n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-identity</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "551baf34ddf19e8dc1d7f9f94a18e8c34c7cf360"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "700b8b8667bddae5eb4a9aad424cba77fc4ff22e", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/700b8b8667bddae5eb4a9aad424cba77fc4ff22e", "committedDate": "2020-06-29T21:27:53Z", "message": "Merge branch 'master' into milismsft-AAD\n\n# Conflicts:\n#\tsdk/cosmos/azure-cosmos/pom.xml\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/AsyncDocumentClient.java\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java\n#\tsdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/RxDocumentClientUnderTest.java\n#\tsdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/SpyClientUnderTestFactory.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae636ddf4ef58562318383bc14c109055bbe7992", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ae636ddf4ef58562318383bc14c109055bbe7992", "committedDate": "2020-06-29T21:31:41Z", "message": "Merge branch 'master' into milismsft-AAD"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMDc2NDU0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#pullrequestreview-442076454", "createdAt": "2020-07-02T23:55:57Z", "commit": {"oid": "ae636ddf4ef58562318383bc14c109055bbe7992"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzo1NTo1N1rOGsf-sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMDoyMDoyOVrOGsgT-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMxNDQ4Mw==", "bodyText": "String.format() will do regex underneath which is CPU intensive. if possible please use String concat/StringBuilder on the hot path:\nhttps://stackoverflow.com/questions/513600/should-i-use-javas-string-format-if-performance-is-important?answertab=votes#tab-top", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r449314483", "createdAt": "2020-07-02T23:55:57Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/AadTokenAuthorizationHelper.java", "diffHunk": "@@ -0,0 +1,61 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.core.credential.SimpleTokenCache;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+\n+/**\n+ * This class is used internally and act as a helper in authorization of\n+ * AAD tokens and its supporting method.\n+ *\n+ */\n+public class AadTokenAuthorizationHelper {\n+    public static final String AAD_AUTH_SCHEMA_TYPE_SEGMENT = \"type\";\n+    public static final String AAD_AUTH_VERSION_SEGMENT = \"ver\";\n+    public static final String AAD_AUTH_SIGNATURE_SEGMENT = \"sig\";\n+    public static final String AAD_AUTH_SCHEMA_TYPE_VALUE = \"aad\";\n+    public static final String AAD_AUTH_VERSION_VALUE = \"1.0\";\n+    public static final String AAD_AUTH_TOKEN_FORMAT = \"%s=%s&%s=%s&%s=%s\";\n+    public static final String AAD_AUTH_TOKEN_GENERAL_SCOPE = \"https://management.azure.com/.default\";\n+    private static final String AUTH_PREFIX = \"type=aad&ver=1.0&sig=\";\n+    private static final Logger logger = LoggerFactory.getLogger(AadTokenAuthorizationHelper.class);\n+\n+    /**\n+     * This method will try to fetch the AAD token to access the resource and add it to the rquest headers.\n+     *\n+     * @param request the request headers.\n+     * @param simpleTokenCache token cache that supports caching a token and refreshing it.\n+     * @return the request headers with authorization header updated.\n+     */\n+    public static Mono<RxDocumentServiceRequest> populateAuthorizationHeader(RxDocumentServiceRequest request, SimpleTokenCache simpleTokenCache) {\n+        if (request == null) {\n+            return Mono.error(new IllegalArgumentException(\"request\"));\n+        }\n+        if (simpleTokenCache == null) {\n+            return Mono.error(new IllegalArgumentException(\"simpleTokenCache\"));\n+        }\n+\n+        return simpleTokenCache.getToken()\n+            .map(accessToken -> {\n+                String authorization = String.format(AAD_AUTH_TOKEN_FORMAT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae636ddf4ef58562318383bc14c109055bbe7992"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMxNDc2Mw==", "bodyText": "throwing the exception here should work too. that simpler to read.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r449314763", "createdAt": "2020-07-02T23:56:56Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/AadTokenAuthorizationHelper.java", "diffHunk": "@@ -0,0 +1,61 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.core.credential.SimpleTokenCache;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+\n+/**\n+ * This class is used internally and act as a helper in authorization of\n+ * AAD tokens and its supporting method.\n+ *\n+ */\n+public class AadTokenAuthorizationHelper {\n+    public static final String AAD_AUTH_SCHEMA_TYPE_SEGMENT = \"type\";\n+    public static final String AAD_AUTH_VERSION_SEGMENT = \"ver\";\n+    public static final String AAD_AUTH_SIGNATURE_SEGMENT = \"sig\";\n+    public static final String AAD_AUTH_SCHEMA_TYPE_VALUE = \"aad\";\n+    public static final String AAD_AUTH_VERSION_VALUE = \"1.0\";\n+    public static final String AAD_AUTH_TOKEN_FORMAT = \"%s=%s&%s=%s&%s=%s\";\n+    public static final String AAD_AUTH_TOKEN_GENERAL_SCOPE = \"https://management.azure.com/.default\";\n+    private static final String AUTH_PREFIX = \"type=aad&ver=1.0&sig=\";\n+    private static final Logger logger = LoggerFactory.getLogger(AadTokenAuthorizationHelper.class);\n+\n+    /**\n+     * This method will try to fetch the AAD token to access the resource and add it to the rquest headers.\n+     *\n+     * @param request the request headers.\n+     * @param simpleTokenCache token cache that supports caching a token and refreshing it.\n+     * @return the request headers with authorization header updated.\n+     */\n+    public static Mono<RxDocumentServiceRequest> populateAuthorizationHeader(RxDocumentServiceRequest request, SimpleTokenCache simpleTokenCache) {\n+        if (request == null) {\n+            return Mono.error(new IllegalArgumentException(\"request\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae636ddf4ef58562318383bc14c109055bbe7992"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMxOTkzMA==", "bodyText": "I am guessing this will be optional dependency right? if AAD integration is needed this would be needed at runtime. no?\nshouldn't this be the following?\n    <dependency>\n      <groupId>com.azure</groupId>\n      <artifactId>azure-identity</artifactId>\n      <version>1.1.0-beta.3</version> <!-- {x-version-update;com.azure:azure-identity;dependency} -->\n      <optional>true</optional>\n    </dependency>", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r449319930", "createdAt": "2020-07-03T00:20:29Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/pom.xml", "diffHunk": "@@ -132,6 +132,20 @@ Licensed under the MIT License.\n       </exclusions>\n     </dependency>\n \n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-identity</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzNjQ5NQ=="}, "originalCommit": {"oid": "551baf34ddf19e8dc1d7f9f94a18e8c34c7cf360"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNjMxMzMw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#pullrequestreview-442631330", "createdAt": "2020-07-04T20:58:24Z", "commit": {"oid": "ae636ddf4ef58562318383bc14c109055bbe7992"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74f2d0c0a8e803fdaba57e390633b1a45570fbe7", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/74f2d0c0a8e803fdaba57e390633b1a45570fbe7", "committedDate": "2020-07-06T17:10:45Z", "message": "Address PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08267b2fbe83b67ca29835ebe49957db4264443b", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/08267b2fbe83b67ca29835ebe49957db4264443b", "committedDate": "2020-08-19T07:18:57Z", "message": "Merge branch 'master' into milismsft-AAD\n\n# Conflicts:\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d6dfcdd71cadf2abca321ac885ba46dc241e1e1", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9d6dfcdd71cadf2abca321ac885ba46dc241e1e1", "committedDate": "2020-08-19T08:46:47Z", "message": "Add AAD authorization test against Cosmos public emulator.\nAdd implementation for missed cases where authorization token migt be computed."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2dace1819d32ef9b2a757048751bd8e3b6f40c6", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e2dace1819d32ef9b2a757048751bd8e3b6f40c6", "committedDate": "2020-08-20T16:24:10Z", "message": "Merge branch 'master' into milismsft-AAD"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01efb74129c407128bde632dd161d15ff86032ec", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/01efb74129c407128bde632dd161d15ff86032ec", "committedDate": "2020-08-20T17:09:51Z", "message": "update pom related dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54b34497c9382b61e03d233af3292e357d855e09", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/54b34497c9382b61e03d233af3292e357d855e09", "committedDate": "2020-08-20T17:33:15Z", "message": "update pom dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0de74f887d5f38bde1e45c0f047753942c5fc6bb", "committedDate": "2020-08-21T16:24:20Z", "message": "test updates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjMyNjIz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#pullrequestreview-472632623", "createdAt": "2020-08-21T16:34:29Z", "commit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjozNDoyOVrOHEz0NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoxNjo0NVrOHE1Emw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwNTMwMQ==", "bodyText": "wrong merge, undo please.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474805301", "createdAt": "2020-08-21T16:34:29Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -246,8 +250,19 @@ boolean isContentResponseOnWriteEnabled() {\n      * @return the mono.\n      */\n     public Mono<CosmosDatabaseResponse> createDatabaseIfNotExists(String id, ThroughputProperties throughputProperties) {\n-        return withContext(context -> createDatabaseIfNotExistsInternal(getDatabase(id),\n-            throughputProperties, context));\n+        return this.getDatabase(id).read().onErrorResume(exception -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwNjE0OA==", "bodyText": "we are doing validation in build() for other cases.\nI wonder if we should set the others to null or we should validation in build()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474806148", "createdAt": "2020-08-21T16:36:10Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "diffHunk": "@@ -199,7 +202,12 @@ CosmosAuthorizationTokenResolver getAuthorizationTokenResolver() {\n      */\n     CosmosClientBuilder authorizationTokenResolver(\n         CosmosAuthorizationTokenResolver cosmosAuthorizationTokenResolver) {\n-        this.cosmosAuthorizationTokenResolver = cosmosAuthorizationTokenResolver;\n+        this.cosmosAuthorizationTokenResolver = Objects.requireNonNull(cosmosAuthorizationTokenResolver,\n+            \"'cosmosAuthorizationTokenResolver' cannot be null.\");\n+        this.keyOrResourceToken = null;\n+        this.credential = null;\n+        this.permissions = null;\n+        this.tokenCredential = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwODI1Nw==", "bodyText": "this seems to be all constants except the last token. it has additional overhead.\nyou could have another constant which holds\nprivate static final String AUTH_PREFIX = \n AAD_AUTH_SCHEMA_TYPE_SEGMENT +\"=\" + AAD_AUTH_SCHEMA_TYPE_VALUE + \n AAD_AUTH_VERSION_SEGMENT + \"=\" + AAD_AUTH_VERSION_VALUE\n + AAD_AUTH_SIGNATURE_SEGMENT+ \"=\";", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474808257", "createdAt": "2020-08-21T16:40:29Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/AadTokenAuthorizationHelper.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.core.credential.SimpleTokenCache;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+\n+/**\n+ * This class is used internally and act as a helper in authorization of\n+ * AAD tokens and its supporting method.\n+ *\n+ */\n+public class AadTokenAuthorizationHelper {\n+    public static final String AAD_AUTH_SCHEMA_TYPE_SEGMENT = \"type\";\n+    public static final String AAD_AUTH_VERSION_SEGMENT = \"ver\";\n+    public static final String AAD_AUTH_SIGNATURE_SEGMENT = \"sig\";\n+    public static final String AAD_AUTH_SCHEMA_TYPE_VALUE = \"aad\";\n+    public static final String AAD_AUTH_VERSION_VALUE = \"1.0\";\n+    public static final String AAD_AUTH_TOKEN_COSMOS_SCOPE = \"https://cosmos.azure.com/.default\";\n+    private static final String AUTH_PREFIX = \"type=aad&ver=1.0&sig=\";\n+    private static final Logger logger = LoggerFactory.getLogger(AadTokenAuthorizationHelper.class);\n+\n+    /**\n+     * This method will try to fetch the AAD token to access the resource and add it to the request headers.\u2028\n+     *\n+     * @param request the request headers.\n+     * @param simpleTokenCache token cache that supports caching a token and refreshing it.\n+     * @return the request headers with authorization header updated.\n+     */\n+    public static Mono<RxDocumentServiceRequest> populateAuthorizationHeader(RxDocumentServiceRequest request, SimpleTokenCache simpleTokenCache) {\n+        if (request == null || request.getHeaders() == null) {\n+            throw new IllegalArgumentException(\"request\");\n+        }\n+        if (simpleTokenCache == null) {\n+            throw new IllegalArgumentException(\"simpleTokenCache\");\n+        }\n+\n+        return getAuthorizationToken(simpleTokenCache)\n+            .map(authorization -> {\n+                request.getHeaders().put(HttpConstants.HttpHeaders.AUTHORIZATION, authorization);\n+                return request;\n+            });\n+    }\n+\n+    public static Mono<String> getAuthorizationToken(SimpleTokenCache simpleTokenCache) {\n+        return simpleTokenCache.getToken()\n+            .map(accessToken -> {\n+                String authorization;\n+                StringBuilder authorizationBuilder = new StringBuilder()\n+                    .append(AAD_AUTH_SCHEMA_TYPE_SEGMENT).append(\"=\").append(AAD_AUTH_SCHEMA_TYPE_VALUE)\n+                    .append(AAD_AUTH_VERSION_SEGMENT).append(\"=\").append(AAD_AUTH_VERSION_VALUE)\n+                    .append(AAD_AUTH_SIGNATURE_SEGMENT).append(\"=\").append(accessToken.getToken());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwOTI1Mg==", "bodyText": "These are available in TestConfiguration please use those.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474809252", "createdAt": "2020-08-21T16:42:40Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "diffHunk": "@@ -0,0 +1,218 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.rx;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosAsyncDatabase;\n+import com.azure.cosmos.CosmosClientBuilder;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.apachecommons.lang.RandomStringUtils;\n+import com.azure.cosmos.models.CosmosContainerResponse;\n+import com.azure.cosmos.models.CosmosDatabaseResponse;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+public class AadAuthorizationTests extends TestSuiteBase {\n+    private final static Logger log = LoggerFactory.getLogger(AadAuthorizationTests.class);\n+    private static final ObjectMapper OBJECT_MAPPER = Utils.getSimpleObjectMapper();\n+\n+    protected AadAuthorizationTests() {\n+        super();\n+    }\n+\n+    private static Properties properties = System.getProperties();\n+\n+    private final static String EMULATOR_KEY = \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\";\n+    private final static String HOST = \"https://localhost:8081/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxODU5OQ==", "bodyText": "we use a pattern for the database test-names. This will also ensure if there is a any db left over, gets cleanup by the next test run:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final String databaseId = \"dbAad\" + RandomStringUtils.randomAlphabetic(6);;\n          \n          \n            \n                private final String databaseId = CosmosDatabaseForTest.generateId();\n          \n      \n    \n    \n  \n\nplease follow this pattern.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474818599", "createdAt": "2020-08-21T17:01:24Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "diffHunk": "@@ -0,0 +1,218 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.rx;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosAsyncDatabase;\n+import com.azure.cosmos.CosmosClientBuilder;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.apachecommons.lang.RandomStringUtils;\n+import com.azure.cosmos.models.CosmosContainerResponse;\n+import com.azure.cosmos.models.CosmosDatabaseResponse;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+public class AadAuthorizationTests extends TestSuiteBase {\n+    private final static Logger log = LoggerFactory.getLogger(AadAuthorizationTests.class);\n+    private static final ObjectMapper OBJECT_MAPPER = Utils.getSimpleObjectMapper();\n+\n+    protected AadAuthorizationTests() {\n+        super();\n+    }\n+\n+    private static Properties properties = System.getProperties();\n+\n+    private final static String EMULATOR_KEY = \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\";\n+    private final static String HOST = \"https://localhost:8081/\";\n+\n+    private final static String PARTITION_KEY_PATH = \"/mypk\";\n+    private final String databaseId = \"dbAad\" + RandomStringUtils.randomAlphabetic(6);;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxOTk4NQ==", "bodyText": "you are creating the clients yourself, so please remove this constructor. This will confuse the test infra and will re-run this test multiple times unnecessarily.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474819985", "createdAt": "2020-08-21T17:04:31Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "diffHunk": "@@ -0,0 +1,218 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.rx;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosAsyncDatabase;\n+import com.azure.cosmos.CosmosClientBuilder;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.apachecommons.lang.RandomStringUtils;\n+import com.azure.cosmos.models.CosmosContainerResponse;\n+import com.azure.cosmos.models.CosmosDatabaseResponse;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+public class AadAuthorizationTests extends TestSuiteBase {\n+    private final static Logger log = LoggerFactory.getLogger(AadAuthorizationTests.class);\n+    private static final ObjectMapper OBJECT_MAPPER = Utils.getSimpleObjectMapper();\n+\n+    protected AadAuthorizationTests() {\n+        super();\n+    }\n+\n+    private static Properties properties = System.getProperties();\n+\n+    private final static String EMULATOR_KEY = \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\";\n+    private final static String HOST = \"https://localhost:8081/\";\n+\n+    private final static String PARTITION_KEY_PATH = \"/mypk\";\n+    private final String databaseId = \"dbAad\" + RandomStringUtils.randomAlphabetic(6);;\n+\n+\n+    @Test(groups = { \"emulator\" }, timeOut = 2 * TIMEOUT)\n+    public void createAadTokenCredential() throws InterruptedException {\n+        TokenCredential emulatorCredential = new AadSimpleEmulatorTokenCredential(EMULATOR_KEY);\n+\n+        CosmosAsyncDatabase db = null;\n+\n+        CosmosAsyncClient cosmosAsyncClient = new CosmosClientBuilder()\n+            .endpoint(HOST)\n+            .key(EMULATOR_KEY)\n+            .credential(emulatorCredential)\n+            .buildAsyncClient();\n+\n+        CosmosAsyncClient cosmosAadClient = new CosmosClientBuilder()\n+            .endpoint(HOST)\n+            .credential(emulatorCredential)\n+            .buildAsyncClient();\n+\n+        try {\n+            CosmosDatabaseResponse databaseResponse = cosmosAsyncClient.createDatabase(databaseId).block();\n+\n+            db = cosmosAadClient.getDatabase(databaseId).read()\n+                .map(dabaseResponse -> {\n+                    CosmosAsyncDatabase database = cosmosAadClient.getDatabase(dabaseResponse.getProperties().getId());\n+                    log.info(\"Found database {} with {}\", database.getId(), dabaseResponse.getProperties().getETag());\n+                    return database;\n+                }).block();\n+\n+            // CREATE collection\n+            assert db != null;\n+            String containerName = UUID.randomUUID().toString();\n+            CosmosContainerResponse containerResponse = cosmosAsyncClient.getDatabase(databaseId).createContainer(containerName, PARTITION_KEY_PATH).block();\n+\n+            CosmosAsyncContainer container = db.getContainer(containerName).read()\n+                .map(cosmosContainerResponse -> {\n+                    CosmosAsyncContainer container1 = cosmosAadClient.getDatabase(databaseId).getContainer(cosmosContainerResponse.getProperties().getId());\n+                    log.info(\"Found container {} with {}\", container1.getId(), cosmosContainerResponse.getProperties().getETag());\n+                    return container1;\n+                }).block();\n+\n+            // CREATE document\n+            assert container != null;\n+            String itemName = UUID.randomUUID().toString();\n+            String partitionKeyValue = UUID.randomUUID().toString();\n+            InternalObjectNode properties = getDocumentDefinition(itemName, partitionKeyValue);\n+\n+            CosmosItemResponse<InternalObjectNode> cosmosItemResponse = container.createItem(properties, new CosmosItemRequestOptions()).block();\n+\n+            CosmosItemRequestOptions options = new CosmosItemRequestOptions();\n+            InternalObjectNode item = container\n+                .readItem(itemName, new PartitionKey(partitionKeyValue), options, InternalObjectNode.class)\n+                .map(CosmosItemResponse::getItem)\n+                .map(jsonNode -> {\n+                    log.info(\"Found item with content: \" + jsonNode.toString());\n+                    return jsonNode;\n+                }).block();\n+            assert item != null;\n+\n+            // QUERY document\n+            CosmosQueryRequestOptions requestOptions = new CosmosQueryRequestOptions();\n+            CosmosPagedFlux<JsonNode> queryPagedFlux = container\n+                .queryItems(\"SELECT * FROM c\", requestOptions, JsonNode.class);\n+            List<JsonNode> feedResponse = queryPagedFlux.byPage()\n+                .flatMap(jsonNodeFeedResponse -> {\n+                    return Flux.fromIterable(jsonNodeFeedResponse.getResults());\n+                }).map(jsonNode -> {\n+                    log.info(\"Found item with content: \" + jsonNode.toString());\n+                    return jsonNode;\n+                })\n+                .collectList()\n+                .block();\n+\n+            // DELETE document\n+            container.deleteItem(item.getId(), new PartitionKey(partitionKeyValue));\n+\n+        } finally {\n+            if (db != null) {\n+                cosmosAsyncClient.getDatabase(databaseId).delete().block();\n+            }\n+\n+            if (cosmosAadClient != null) {\n+                safeClose(cosmosAadClient);\n+            }\n+\n+            if (cosmosAsyncClient != null) {\n+                safeClose(cosmosAsyncClient);\n+            }\n+        }\n+\n+        Thread.sleep(5000);\n+    }\n+\n+    private InternalObjectNode getDocumentDefinition(String itemId, String partitionKeyValue) {\n+        final InternalObjectNode properties = new InternalObjectNode(String.format(\"{ \"\n+                + \"\\\"id\\\": \\\"%s\\\", \"\n+                + \"\\\"mypk\\\": \\\"%s\\\", \"\n+                + \"\\\"sgmts\\\": [[6519456, 1471916863], [2498434, 1455671440]]\"\n+                + \"}\"\n+            , itemId, partitionKeyValue));\n+        return properties;\n+    }\n+\n+    @Factory(dataProvider = \"clientBuilders\")\n+    public AadAuthorizationTests(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMDkzMA==", "bodyText": "please don't rely on InternalObjectNode for the new tests. we want to move away the end users to use ObjectNode instead and these tests may get used as samples.\nPlease either use a pojo or use ObjectNode.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474820930", "createdAt": "2020-08-21T17:06:29Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "diffHunk": "@@ -0,0 +1,218 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.rx;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosAsyncDatabase;\n+import com.azure.cosmos.CosmosClientBuilder;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.apachecommons.lang.RandomStringUtils;\n+import com.azure.cosmos.models.CosmosContainerResponse;\n+import com.azure.cosmos.models.CosmosDatabaseResponse;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+public class AadAuthorizationTests extends TestSuiteBase {\n+    private final static Logger log = LoggerFactory.getLogger(AadAuthorizationTests.class);\n+    private static final ObjectMapper OBJECT_MAPPER = Utils.getSimpleObjectMapper();\n+\n+    protected AadAuthorizationTests() {\n+        super();\n+    }\n+\n+    private static Properties properties = System.getProperties();\n+\n+    private final static String EMULATOR_KEY = \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\";\n+    private final static String HOST = \"https://localhost:8081/\";\n+\n+    private final static String PARTITION_KEY_PATH = \"/mypk\";\n+    private final String databaseId = \"dbAad\" + RandomStringUtils.randomAlphabetic(6);;\n+\n+\n+    @Test(groups = { \"emulator\" }, timeOut = 2 * TIMEOUT)\n+    public void createAadTokenCredential() throws InterruptedException {\n+        TokenCredential emulatorCredential = new AadSimpleEmulatorTokenCredential(EMULATOR_KEY);\n+\n+        CosmosAsyncDatabase db = null;\n+\n+        CosmosAsyncClient cosmosAsyncClient = new CosmosClientBuilder()\n+            .endpoint(HOST)\n+            .key(EMULATOR_KEY)\n+            .credential(emulatorCredential)\n+            .buildAsyncClient();\n+\n+        CosmosAsyncClient cosmosAadClient = new CosmosClientBuilder()\n+            .endpoint(HOST)\n+            .credential(emulatorCredential)\n+            .buildAsyncClient();\n+\n+        try {\n+            CosmosDatabaseResponse databaseResponse = cosmosAsyncClient.createDatabase(databaseId).block();\n+\n+            db = cosmosAadClient.getDatabase(databaseId).read()\n+                .map(dabaseResponse -> {\n+                    CosmosAsyncDatabase database = cosmosAadClient.getDatabase(dabaseResponse.getProperties().getId());\n+                    log.info(\"Found database {} with {}\", database.getId(), dabaseResponse.getProperties().getETag());\n+                    return database;\n+                }).block();\n+\n+            // CREATE collection\n+            assert db != null;\n+            String containerName = UUID.randomUUID().toString();\n+            CosmosContainerResponse containerResponse = cosmosAsyncClient.getDatabase(databaseId).createContainer(containerName, PARTITION_KEY_PATH).block();\n+\n+            CosmosAsyncContainer container = db.getContainer(containerName).read()\n+                .map(cosmosContainerResponse -> {\n+                    CosmosAsyncContainer container1 = cosmosAadClient.getDatabase(databaseId).getContainer(cosmosContainerResponse.getProperties().getId());\n+                    log.info(\"Found container {} with {}\", container1.getId(), cosmosContainerResponse.getProperties().getETag());\n+                    return container1;\n+                }).block();\n+\n+            // CREATE document\n+            assert container != null;\n+            String itemName = UUID.randomUUID().toString();\n+            String partitionKeyValue = UUID.randomUUID().toString();\n+            InternalObjectNode properties = getDocumentDefinition(itemName, partitionKeyValue);\n+\n+            CosmosItemResponse<InternalObjectNode> cosmosItemResponse = container.createItem(properties, new CosmosItemRequestOptions()).block();\n+\n+            CosmosItemRequestOptions options = new CosmosItemRequestOptions();\n+            InternalObjectNode item = container\n+                .readItem(itemName, new PartitionKey(partitionKeyValue), options, InternalObjectNode.class)\n+                .map(CosmosItemResponse::getItem)\n+                .map(jsonNode -> {\n+                    log.info(\"Found item with content: \" + jsonNode.toString());\n+                    return jsonNode;\n+                }).block();\n+            assert item != null;\n+\n+            // QUERY document\n+            CosmosQueryRequestOptions requestOptions = new CosmosQueryRequestOptions();\n+            CosmosPagedFlux<JsonNode> queryPagedFlux = container\n+                .queryItems(\"SELECT * FROM c\", requestOptions, JsonNode.class);\n+            List<JsonNode> feedResponse = queryPagedFlux.byPage()\n+                .flatMap(jsonNodeFeedResponse -> {\n+                    return Flux.fromIterable(jsonNodeFeedResponse.getResults());\n+                }).map(jsonNode -> {\n+                    log.info(\"Found item with content: \" + jsonNode.toString());\n+                    return jsonNode;\n+                })\n+                .collectList()\n+                .block();\n+\n+            // DELETE document\n+            container.deleteItem(item.getId(), new PartitionKey(partitionKeyValue));\n+\n+        } finally {\n+            if (db != null) {\n+                cosmosAsyncClient.getDatabase(databaseId).delete().block();\n+            }\n+\n+            if (cosmosAadClient != null) {\n+                safeClose(cosmosAadClient);\n+            }\n+\n+            if (cosmosAsyncClient != null) {\n+                safeClose(cosmosAsyncClient);\n+            }\n+        }\n+\n+        Thread.sleep(5000);\n+    }\n+\n+    private InternalObjectNode getDocumentDefinition(String itemId, String partitionKeyValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMTY0NQ==", "bodyText": "good change. thanks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474821645", "createdAt": "2020-08-21T17:08:01Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayAddressCache.java", "diffHunk": "@@ -267,42 +267,48 @@ public GatewayAddressCache(\n \n         addressQuery.put(HttpConstants.QueryStrings.PARTITION_KEY_RANGE_IDS, String.join(\",\", partitionKeyRangeIds));\n         headers.put(HttpConstants.HttpHeaders.X_DATE, Utils.nowAsRFC1123());\n-        String token;\n-\n-        token = this.tokenProvider.getUserAuthorizationToken(\n-                collectionRid,\n-                ResourceType.Document,\n-                RequestVerb.GET,\n-                headers,\n-                AuthorizationTokenType.PrimaryMasterKey,\n-                request.properties);\n-\n-        if (token == null && request.getIsNameBased()) {\n-            // User doesn't have rid based resource token. Maybe user has name based.\n-            String collectionAltLink = PathsHelper.getCollectionPath(request.getResourceAddress());\n-            token = this.tokenProvider.getUserAuthorizationToken(\n-                    collectionAltLink,\n+\n+        if (tokenProvider.getAuthorizationTokenType() != AuthorizationTokenType.AadToken) {\n+            String token = this.tokenProvider.getUserAuthorizationToken(\n+                    collectionRid,\n                     ResourceType.Document,\n                     RequestVerb.GET,\n                     headers,\n                     AuthorizationTokenType.PrimaryMasterKey,\n                     request.properties);\n+\n+            if (token == null && request.getIsNameBased()) {\n+                // User doesn't have rid based resource token. Maybe user has name based.\n+                String collectionAltLink = PathsHelper.getCollectionPath(request.getResourceAddress());\n+                token = this.tokenProvider.getUserAuthorizationToken(\n+                        collectionAltLink,\n+                        ResourceType.Document,\n+                        RequestVerb.GET,\n+                        headers,\n+                        AuthorizationTokenType.PrimaryMasterKey,\n+                        request.properties);\n+            }\n+\n+            token = HttpUtils.urlEncode(token);\n+            headers.put(HttpConstants.HttpHeaders.AUTHORIZATION, token);\n         }\n \n-        token = HttpUtils.urlEncode(token);\n-        headers.put(HttpConstants.HttpHeaders.AUTHORIZATION, token);\n         URI targetEndpoint = Utils.setQuery(this.addressEndpoint.toString(), Utils.createQuery(addressQuery));\n         String identifier = logAddressResolutionStart(request, targetEndpoint);\n \n-        HttpHeaders httpHeaders = new HttpHeaders(headers.size());\n-        for (Map.Entry<String, String> entry : headers.entrySet()) {\n-            httpHeaders.set(entry.getKey(), entry.getValue());\n-        }\n+        HttpHeaders httpHeaders = new HttpHeaders(headers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMjQ5OA==", "bodyText": "good change. thanks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474822498", "createdAt": "2020-08-21T17:09:55Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/TestConfigurations.java", "diffHunk": "@@ -51,7 +51,7 @@\n         properties.getProperty(\"ACCOUNT_HOST\",\n                     StringUtils.defaultString(Strings.emptyToNull(\n                             System.getenv().get(\"ACCOUNT_HOST\")),\n-                            \"https://localhost:443/\"));\n+                            \"https://localhost:8081/\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMjk3MA==", "bodyText": "why do we need this one?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474822970", "createdAt": "2020-08-21T17:10:49Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/pom.xml", "diffHunk": "@@ -128,6 +128,20 @@ Licensed under the MIT License.\n         </exclusion>\n       </exclusions>\n     </dependency>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-identity</artifactId>\n+      <version>1.1.0</version> <!-- {x-version-update;com.azure:azure-identity;dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core-http-netty</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNDMxMg==", "bodyText": "once everything is ready on this PR we need to do a perf test to ensure we don't have perf degradation.\nIf you haven't done perf tests before, ping me offline I will show you how to run the perf tests.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474824312", "createdAt": "2020-08-21T17:13:35Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -783,38 +820,42 @@ private String parentResourceLinkToQueryLink(String parentResouceLink, ResourceT\n     }\n \n     private Mono<RxDocumentServiceResponse> delete(RxDocumentServiceRequest request, DocumentClientRetryPolicy documentClientRetryPolicy) {\n-        populateHeaders(request, RequestVerb.DELETE);\n-        if(request.requestContext != null && documentClientRetryPolicy.getRetryCount() > 0) {\n-            documentClientRetryPolicy.updateEndTime();\n-            request.requestContext.updateRetryContext(documentClientRetryPolicy, true);\n-        }\n+        return populateHeaders(request, RequestVerb.DELETE)\n+            .flatMap(requestPopulated -> {\n+                if (requestPopulated.requestContext != null && documentClientRetryPolicy.getRetryCount() > 0) {\n+                    documentClientRetryPolicy.updateEndTime();\n+                    requestPopulated.requestContext.updateRetryContext(documentClientRetryPolicy, true);\n+                }\n \n-        return getStoreProxy(request).processMessage(request);\n+                return getStoreProxy(requestPopulated).processMessage(requestPopulated);\n+            });\n     }\n \n     private Mono<RxDocumentServiceResponse> read(RxDocumentServiceRequest request, DocumentClientRetryPolicy documentClientRetryPolicy) {\n-        populateHeaders(request, RequestVerb.GET);\n-        if(request.requestContext != null && documentClientRetryPolicy.getRetryCount() > 0) {\n-            documentClientRetryPolicy.updateEndTime();\n-            request.requestContext.updateRetryContext(documentClientRetryPolicy, true);\n-        }\n-\n-        return getStoreProxy(request).processMessage(request);\n+        return populateHeaders(request, RequestVerb.GET)\n+            .flatMap(requestPopulated -> {\n+                    if (requestPopulated.requestContext != null && documentClientRetryPolicy.getRetryCount() > 0) {\n+                        documentClientRetryPolicy.updateEndTime();\n+                        requestPopulated.requestContext.updateRetryContext(documentClientRetryPolicy, true);\n+                    }\n+                return getStoreProxy(requestPopulated).processMessage(requestPopulated);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNTg4Mw==", "bodyText": "I thought authorization token is always set on the RxDocumentServiceRequest directly.\ndo we need to set it on HttpHeaders too?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474825883", "createdAt": "2020-08-21T17:16:45Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/IAuthorizationTokenProvider.java", "diffHunk": "@@ -11,4 +14,9 @@ String getUserAuthorizationToken(String resourceAddress,\n                                      Map<String, String> headers,\n                                      AuthorizationTokenType primarymasterkey,\n                                      Map<String, Object> properties);\n+\n+    Mono<RxDocumentServiceRequest> populateAuthorizationHeader(RxDocumentServiceRequest request);\n+    Mono<HttpHeaders> populateAuthorizationHeader(HttpHeaders httpHeaders);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjU5ODE5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#pullrequestreview-472659819", "createdAt": "2020-08-21T17:18:25Z", "commit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71164d553f4d1adfd44aac3b38be0a3828283238", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/71164d553f4d1adfd44aac3b38be0a3828283238", "committedDate": "2020-08-21T20:38:14Z", "message": "address PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d59df4db2a231bdac6d3a3a4a52062f926f4d106", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d59df4db2a231bdac6d3a3a4a52062f926f4d106", "committedDate": "2020-08-21T20:43:46Z", "message": "address PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9850b6782c187562bca04768a6dfb54da39635f0", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9850b6782c187562bca04768a6dfb54da39635f0", "committedDate": "2020-08-22T06:07:36Z", "message": "Bug fixes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a74f59f5fbcd548194e157f26418146f85b780a", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3a74f59f5fbcd548194e157f26418146f85b780a", "committedDate": "2020-08-22T19:15:10Z", "message": "enable AAD auth in the Cosmos public emulator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2308cab17633eda4450e9cba176f85cd371fe3a3", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2308cab17633eda4450e9cba176f85cd371fe3a3", "committedDate": "2020-08-23T18:18:08Z", "message": "update Cosmos emulator startup switch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "baf4dba090de7112d03bff3969a1af9599b0ad57", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/baf4dba090de7112d03bff3969a1af9599b0ad57", "committedDate": "2020-08-24T05:02:56Z", "message": "update test case to separate access via different clients"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45c777f4e16a5bb54917ded4e18b5bc5315fd76d", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/45c777f4e16a5bb54917ded4e18b5bc5315fd76d", "committedDate": "2020-08-24T05:05:46Z", "message": "Merge branch 'milismsft-AAD' of https://github.com/milismsft/azure-sdk-for-java into milismsft-AAD"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNjMwNzgy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#pullrequestreview-473630782", "createdAt": "2020-08-24T15:49:49Z", "commit": {"oid": "45c777f4e16a5bb54917ded4e18b5bc5315fd76d"}, "state": "DISMISSED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTo1MToxNlrOHFrYHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTo1NjoxM1rOHFrlGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxNTYxMw==", "bodyText": "makes sense. thanks for the explanation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r475715613", "createdAt": "2020-08-24T15:51:16Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/IAuthorizationTokenProvider.java", "diffHunk": "@@ -11,4 +14,9 @@ String getUserAuthorizationToken(String resourceAddress,\n                                      Map<String, String> headers,\n                                      AuthorizationTokenType primarymasterkey,\n                                      Map<String, Object> properties);\n+\n+    Mono<RxDocumentServiceRequest> populateAuthorizationHeader(RxDocumentServiceRequest request);\n+    Mono<HttpHeaders> populateAuthorizationHeader(HttpHeaders httpHeaders);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNTg4Mw=="}, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxNzkxMg==", "bodyText": "for both CI to pass and also local debugging for all tests we are relying on the TestConfiguration file.\nPlease change to follow the same pattern. If you need different pattern for sample, please create a sample file:\nhttps://github.com/Azure/azure-sdk-for-java/tree/master/sdk/cosmos/azure-cosmos/src/samples/java/com/azure/cosmos", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r475717912", "createdAt": "2020-08-24T15:54:50Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "diffHunk": "@@ -0,0 +1,218 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.rx;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosAsyncDatabase;\n+import com.azure.cosmos.CosmosClientBuilder;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.apachecommons.lang.RandomStringUtils;\n+import com.azure.cosmos.models.CosmosContainerResponse;\n+import com.azure.cosmos.models.CosmosDatabaseResponse;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+public class AadAuthorizationTests extends TestSuiteBase {\n+    private final static Logger log = LoggerFactory.getLogger(AadAuthorizationTests.class);\n+    private static final ObjectMapper OBJECT_MAPPER = Utils.getSimpleObjectMapper();\n+\n+    protected AadAuthorizationTests() {\n+        super();\n+    }\n+\n+    private static Properties properties = System.getProperties();\n+\n+    private final static String EMULATOR_KEY = \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\";\n+    private final static String HOST = \"https://localhost:8081/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwOTI1Mg=="}, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxODkzNg==", "bodyText": "seems this one is missed. Please remove.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r475718936", "createdAt": "2020-08-24T15:56:13Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "diffHunk": "@@ -0,0 +1,218 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.rx;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosAsyncDatabase;\n+import com.azure.cosmos.CosmosClientBuilder;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.apachecommons.lang.RandomStringUtils;\n+import com.azure.cosmos.models.CosmosContainerResponse;\n+import com.azure.cosmos.models.CosmosDatabaseResponse;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+public class AadAuthorizationTests extends TestSuiteBase {\n+    private final static Logger log = LoggerFactory.getLogger(AadAuthorizationTests.class);\n+    private static final ObjectMapper OBJECT_MAPPER = Utils.getSimpleObjectMapper();\n+\n+    protected AadAuthorizationTests() {\n+        super();\n+    }\n+\n+    private static Properties properties = System.getProperties();\n+\n+    private final static String EMULATOR_KEY = \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\";\n+    private final static String HOST = \"https://localhost:8081/\";\n+\n+    private final static String PARTITION_KEY_PATH = \"/mypk\";\n+    private final String databaseId = \"dbAad\" + RandomStringUtils.randomAlphabetic(6);;\n+\n+\n+    @Test(groups = { \"emulator\" }, timeOut = 2 * TIMEOUT)\n+    public void createAadTokenCredential() throws InterruptedException {\n+        TokenCredential emulatorCredential = new AadSimpleEmulatorTokenCredential(EMULATOR_KEY);\n+\n+        CosmosAsyncDatabase db = null;\n+\n+        CosmosAsyncClient cosmosAsyncClient = new CosmosClientBuilder()\n+            .endpoint(HOST)\n+            .key(EMULATOR_KEY)\n+            .credential(emulatorCredential)\n+            .buildAsyncClient();\n+\n+        CosmosAsyncClient cosmosAadClient = new CosmosClientBuilder()\n+            .endpoint(HOST)\n+            .credential(emulatorCredential)\n+            .buildAsyncClient();\n+\n+        try {\n+            CosmosDatabaseResponse databaseResponse = cosmosAsyncClient.createDatabase(databaseId).block();\n+\n+            db = cosmosAadClient.getDatabase(databaseId).read()\n+                .map(dabaseResponse -> {\n+                    CosmosAsyncDatabase database = cosmosAadClient.getDatabase(dabaseResponse.getProperties().getId());\n+                    log.info(\"Found database {} with {}\", database.getId(), dabaseResponse.getProperties().getETag());\n+                    return database;\n+                }).block();\n+\n+            // CREATE collection\n+            assert db != null;\n+            String containerName = UUID.randomUUID().toString();\n+            CosmosContainerResponse containerResponse = cosmosAsyncClient.getDatabase(databaseId).createContainer(containerName, PARTITION_KEY_PATH).block();\n+\n+            CosmosAsyncContainer container = db.getContainer(containerName).read()\n+                .map(cosmosContainerResponse -> {\n+                    CosmosAsyncContainer container1 = cosmosAadClient.getDatabase(databaseId).getContainer(cosmosContainerResponse.getProperties().getId());\n+                    log.info(\"Found container {} with {}\", container1.getId(), cosmosContainerResponse.getProperties().getETag());\n+                    return container1;\n+                }).block();\n+\n+            // CREATE document\n+            assert container != null;\n+            String itemName = UUID.randomUUID().toString();\n+            String partitionKeyValue = UUID.randomUUID().toString();\n+            InternalObjectNode properties = getDocumentDefinition(itemName, partitionKeyValue);\n+\n+            CosmosItemResponse<InternalObjectNode> cosmosItemResponse = container.createItem(properties, new CosmosItemRequestOptions()).block();\n+\n+            CosmosItemRequestOptions options = new CosmosItemRequestOptions();\n+            InternalObjectNode item = container\n+                .readItem(itemName, new PartitionKey(partitionKeyValue), options, InternalObjectNode.class)\n+                .map(CosmosItemResponse::getItem)\n+                .map(jsonNode -> {\n+                    log.info(\"Found item with content: \" + jsonNode.toString());\n+                    return jsonNode;\n+                }).block();\n+            assert item != null;\n+\n+            // QUERY document\n+            CosmosQueryRequestOptions requestOptions = new CosmosQueryRequestOptions();\n+            CosmosPagedFlux<JsonNode> queryPagedFlux = container\n+                .queryItems(\"SELECT * FROM c\", requestOptions, JsonNode.class);\n+            List<JsonNode> feedResponse = queryPagedFlux.byPage()\n+                .flatMap(jsonNodeFeedResponse -> {\n+                    return Flux.fromIterable(jsonNodeFeedResponse.getResults());\n+                }).map(jsonNode -> {\n+                    log.info(\"Found item with content: \" + jsonNode.toString());\n+                    return jsonNode;\n+                })\n+                .collectList()\n+                .block();\n+\n+            // DELETE document\n+            container.deleteItem(item.getId(), new PartitionKey(partitionKeyValue));\n+\n+        } finally {\n+            if (db != null) {\n+                cosmosAsyncClient.getDatabase(databaseId).delete().block();\n+            }\n+\n+            if (cosmosAadClient != null) {\n+                safeClose(cosmosAadClient);\n+            }\n+\n+            if (cosmosAsyncClient != null) {\n+                safeClose(cosmosAsyncClient);\n+            }\n+        }\n+\n+        Thread.sleep(5000);\n+    }\n+\n+    private InternalObjectNode getDocumentDefinition(String itemId, String partitionKeyValue) {\n+        final InternalObjectNode properties = new InternalObjectNode(String.format(\"{ \"\n+                + \"\\\"id\\\": \\\"%s\\\", \"\n+                + \"\\\"mypk\\\": \\\"%s\\\", \"\n+                + \"\\\"sgmts\\\": [[6519456, 1471916863], [2498434, 1455671440]]\"\n+                + \"}\"\n+            , itemId, partitionKeyValue));\n+        return properties;\n+    }\n+\n+    @Factory(dataProvider = \"clientBuilders\")\n+    public AadAuthorizationTests(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxOTk4NQ=="}, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 162}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNjQ2NTEy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#pullrequestreview-473646512", "createdAt": "2020-08-24T16:08:12Z", "commit": {"oid": "45c777f4e16a5bb54917ded4e18b5bc5315fd76d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjowODoxMlrOHFsEMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjowODoxMlrOHFsEMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcyNjg5Nw==", "bodyText": "thanks for fixing the javadoc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r475726897", "createdAt": "2020-08-24T16:08:12Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "diffHunk": "@@ -241,12 +249,16 @@ String getKey() {\n      * @return current Builder.\n      */\n     public CosmosClientBuilder key(String key) {\n-        this.keyOrResourceToken = key;\n+        this.keyOrResourceToken = Objects.requireNonNull(key, \"'key' cannot be null.\");\n+        this.cosmosAuthorizationTokenResolver = null;\n+        this.credential = null;\n+        this.permissions = null;\n+        this.tokenCredential = null;\n         return this;\n     }\n \n     /**\n-     * Sets a resource token used to perform authentication\n+     * Gets a resource token used to perform authentication", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c777f4e16a5bb54917ded4e18b5bc5315fd76d"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d33634427268eed7ec7df9bc0656c452d45cb6c", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0d33634427268eed7ec7df9bc0656c452d45cb6c", "committedDate": "2020-08-25T00:38:32Z", "message": "Address PR feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "689cf963c0b3ed2bffd0d1d6d6399f975882e913", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/689cf963c0b3ed2bffd0d1d6d6399f975882e913", "committedDate": "2020-08-25T00:55:39Z", "message": "Remove constructor which creates unused Cosmos resources."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MDI0MDE0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#pullrequestreview-474024014", "createdAt": "2020-08-25T01:02:16Z", "commit": {"oid": "689cf963c0b3ed2bffd0d1d6d6399f975882e913"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTowMjoxNlrOHF-DPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTowMjoxNlrOHF-DPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAyMTU2NA==", "bodyText": "why are we defining new public property for something which is already available?\nI thought the plan was to reuse TestConfiguration.HOST\non the CI the value for TestConfiguration.HOST will be populated by the CI.\nin local debugging that can be populated from a properties file from user home.\nThis breaks that.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r476021564", "createdAt": "2020-08-25T01:02:16Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/TestConfigurations.java", "diffHunk": "@@ -32,26 +32,28 @@\n     private static Logger logger = LoggerFactory.getLogger(TestConfigurations.class);\n     private static Properties properties = loadProperties();\n \n+    public final static String COSMOS_EMULATOR_KEY = \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\";\n+    public final static String COSMOS_EMULATOR_HOST = \"https://localhost:8081/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "689cf963c0b3ed2bffd0d1d6d6399f975882e913"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MDI0Mjg1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#pullrequestreview-474024285", "createdAt": "2020-08-25T01:03:13Z", "commit": {"oid": "689cf963c0b3ed2bffd0d1d6d6399f975882e913"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTowMzoxM1rOHF-Fig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTowMzoxM1rOHF-Fig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAyMjE1NA==", "bodyText": "why are we defining new public property for something which is already available?\nI thought the plan was to reuse TestConfiguration.HOST and not redefine a constant for the same thing.\n\non the CI the value for TestConfiguration.HOST will be populated by the CI.\nin local debugging that can be populated from a properties file from user home.\n\nThis breaks both 1) and 2).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r476022154", "createdAt": "2020-08-25T01:03:13Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "diffHunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.rx;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosAsyncDatabase;\n+import com.azure.cosmos.CosmosClientBuilder;\n+import com.azure.cosmos.CosmosDatabaseForTest;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.models.CosmosContainerResponse;\n+import com.azure.cosmos.models.CosmosDatabaseResponse;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+public class AadAuthorizationTests extends TestSuiteBase {\n+    private final static Logger log = LoggerFactory.getLogger(AadAuthorizationTests.class);\n+    private static final ObjectMapper OBJECT_MAPPER = Utils.getSimpleObjectMapper();\n+\n+    private final static String PARTITION_KEY_PATH = \"/mypk\";\n+    private final String databaseId = CosmosDatabaseForTest.generateId();\n+\n+    protected AadAuthorizationTests() {\n+    }\n+\n+    @Test(groups = { \"emulator\" }, timeOut = 10 * TIMEOUT)\n+    public void createAadTokenCredential() throws InterruptedException {\n+        CosmosAsyncDatabase db = null;\n+\n+        CosmosAsyncClient cosmosAsyncClient = new CosmosClientBuilder()\n+            .endpoint(TestConfigurations.COSMOS_EMULATOR_HOST)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "689cf963c0b3ed2bffd0d1d6d6399f975882e913"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3a0bcd584b3cc43d4eb767b369277b987b59c3c", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f3a0bcd584b3cc43d4eb767b369277b987b59c3c", "committedDate": "2020-08-25T01:30:36Z", "message": "use HOST and MASTER_KEY for Cosmos connections; these will default to Cosmos public emulator settings."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "026ae2a19195b7831fbce5ebaf0900b9bd80aad1", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/026ae2a19195b7831fbce5ebaf0900b9bd80aad1", "committedDate": "2020-08-25T03:40:47Z", "message": "Update test case expectations."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MTI3Mzcx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#pullrequestreview-474127371", "createdAt": "2020-08-25T04:32:08Z", "commit": {"oid": "026ae2a19195b7831fbce5ebaf0900b9bd80aad1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNDozMjowOFrOHGGcsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNDozMjowOFrOHGGcsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE1OTE1NA==", "bodyText": "/cc: @j82w", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r476159154", "createdAt": "2020-08-25T04:32:08Z", "author": {"login": "kirankumarkolli"}, "path": "eng/pipelines/templates/stages/cosmos-sdk-client.yml", "diffHunk": "@@ -129,7 +129,7 @@ stages:\n         PreRunSteps:\n         - template: /eng/common/pipelines/templates/steps/cosmos-emulator.yml\n           parameters:\n-            StartParameters: '-PartitionCount 50 -Consistency Strong -Timeout 600'\n+            StartParameters: '-EnableAadAuthentication -PartitionCount 50 -Consistency Strong -Timeout 600'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "026ae2a19195b7831fbce5ebaf0900b9bd80aad1"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f0ef85b32737ac069b1048e76a74d8bfd8f6873", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0f0ef85b32737ac069b1048e76a74d8bfd8f6873", "committedDate": "2020-08-25T06:01:11Z", "message": "update Sping related test expectations."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e76ae2715fd727018e6377b886dc48998abb008", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7e76ae2715fd727018e6377b886dc48998abb008", "committedDate": "2020-08-25T18:47:32Z", "message": "Update Spring tests expectations and fix couple error cases when passing empty strings for endpoints and master keys."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0Nzc0ODU3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#pullrequestreview-474774857", "createdAt": "2020-08-25T19:10:37Z", "commit": {"oid": "7e76ae2715fd727018e6377b886dc48998abb008"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOToxMDozN1rOHGmC1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOToxMDozN1rOHGmC1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY3NjgyMw==", "bodyText": "Any reason to not do null or whitespace?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r476676823", "createdAt": "2020-08-25T19:10:37Z", "author": {"login": "j82w"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "diffHunk": "@@ -199,7 +202,12 @@ CosmosAuthorizationTokenResolver getAuthorizationTokenResolver() {\n      */\n     CosmosClientBuilder authorizationTokenResolver(\n         CosmosAuthorizationTokenResolver cosmosAuthorizationTokenResolver) {\n-        this.cosmosAuthorizationTokenResolver = cosmosAuthorizationTokenResolver;\n+        this.cosmosAuthorizationTokenResolver = Objects.requireNonNull(cosmosAuthorizationTokenResolver,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e76ae2715fd727018e6377b886dc48998abb008"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98b41c5a209c41f577b122f38ecf8f7ee1482001", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/98b41c5a209c41f577b122f38ecf8f7ee1482001", "committedDate": "2020-08-29T07:43:48Z", "message": "Fix for scope resolution"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b17ba65cdd35ee7095ba4e172eb091c45f66e8a", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1b17ba65cdd35ee7095ba4e172eb091c45f66e8a", "committedDate": "2020-08-29T07:56:06Z", "message": "Merge branch 'master' into milismsft-AAD"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da704ddc52612669a81876e40470b49f3866833b", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/da704ddc52612669a81876e40470b49f3866833b", "committedDate": "2020-09-08T23:44:11Z", "message": "Merge branch 'master' into milismsft-AAD\n\n# Conflicts:\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fc6e9b41da5cc4150ec6a7fa37d2b3c43fa7f62", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6fc6e9b41da5cc4150ec6a7fa37d2b3c43fa7f62", "committedDate": "2020-09-17T16:59:48Z", "message": "Merge branch 'master' into milismsft-AAD"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2305c033326cd14068cb02eb04657408c00c3bde", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2305c033326cd14068cb02eb04657408c00c3bde", "committedDate": "2020-09-17T17:27:32Z", "message": "comment out the test until the CI only failure running public emulator is understood."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cc4c7cca056c65504a47f8eede97abac3b51db1", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8cc4c7cca056c65504a47f8eede97abac3b51db1", "committedDate": "2020-09-17T17:54:03Z", "message": "update POM dependencies."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1c05e381fe6f03bba3f0367d3780c348f75ec62", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d1c05e381fe6f03bba3f0367d3780c348f75ec62", "committedDate": "2020-09-23T19:45:07Z", "message": "Merge branch 'master' into milismsft-AAD"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a05e4bce133db86eb0b5866c39d27b2c30b66e2", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9a05e4bce133db86eb0b5866c39d27b2c30b66e2", "committedDate": "2020-09-23T20:55:46Z", "message": "Fix merge related issue."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb80111cf2b4b8ed78d7f9cf236a2ba8279b5a27", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/eb80111cf2b4b8ed78d7f9cf236a2ba8279b5a27", "committedDate": "2020-09-25T21:56:59Z", "message": "various fixes related to copy/clone of an existing Cosmos client instance."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8c7df5367a94ec6b1913e1565ea3bb379f6c4d6", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c8c7df5367a94ec6b1913e1565ea3bb379f6c4d6", "committedDate": "2020-09-26T03:43:37Z", "message": "update test to account for null values such as key, endpoint or credential properties."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "327cb6f04d51a9f0d4af206e94f1d119db81fa00", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/327cb6f04d51a9f0d4af206e94f1d119db81fa00", "committedDate": "2020-09-26T03:46:40Z", "message": "Merge branch 'master' into milismsft-AAD"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MDMzNDcy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#pullrequestreview-497033472", "createdAt": "2020-09-26T21:57:48Z", "commit": {"oid": "327cb6f04d51a9f0d4af206e94f1d119db81fa00"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMTo1Nzo0OFrOHYi5UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMTo1Nzo0OFrOHYi5UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ5OTYwMQ==", "bodyText": "Is special handling for performance?\nIs there perf data to prove that it impacts performance?\nFor now NON-BLOCKER, but worth revisiting perf vs maintenance forward.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r495499601", "createdAt": "2020-09-26T21:57:48Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/caches/RxClientCollectionCache.java", "diffHunk": "@@ -80,27 +80,38 @@ public RxClientCollectionCache(ISessionContainer sessionContainer,\n \n         request.getHeaders().put(HttpConstants.HttpHeaders.X_DATE, Utils.nowAsRFC1123());\n \n-        String resourceName = request.getResourceAddress();\n-        String authorizationToken = tokenProvider.getUserAuthorizationToken(\n-                resourceName,\n-                request.getResourceType(),\n-                RequestVerb.GET,\n-                request.getHeaders(),\n-                AuthorizationTokenType.PrimaryMasterKey,\n-                properties);\n-\n-        try {\n-            authorizationToken = URLEncoder.encode(authorizationToken, \"UTF-8\");\n-        } catch (UnsupportedEncodingException e) {\n-            return Mono.error(new IllegalStateException(\"Failed to encode authtoken.\", e));\n+        if (tokenProvider.getAuthorizationTokenType() != AuthorizationTokenType.AadToken) {\n+            String resourceName = request.getResourceAddress();\n+            String authorizationToken = tokenProvider.getUserAuthorizationToken(\n+                    resourceName,\n+                    request.getResourceType(),\n+                    RequestVerb.GET,\n+                    request.getHeaders(),\n+                    AuthorizationTokenType.PrimaryMasterKey,\n+                    properties);\n+\n+            try {\n+                authorizationToken = URLEncoder.encode(authorizationToken, \"UTF-8\");\n+            } catch (UnsupportedEncodingException e) {\n+                return Mono.error(new IllegalStateException(\"Failed to encode authtoken.\", e));\n+            }\n+            request.getHeaders().put(HttpConstants.HttpHeaders.AUTHORIZATION, authorizationToken);\n         }\n-        request.getHeaders().put(HttpConstants.HttpHeaders.AUTHORIZATION, authorizationToken);\n \n         if (retryPolicyInstance != null){\n             retryPolicyInstance.onBeforeSendRequest(request);\n         }\n+\n         Instant addressCallStartTime = Instant.now();\n-        Mono<RxDocumentServiceResponse> responseObs = this.storeModel.processMessage(request);\n+        Mono<RxDocumentServiceResponse> responseObs;\n+        if (tokenProvider.getAuthorizationTokenType() != AuthorizationTokenType.AadToken) {\n+            responseObs = this.storeModel.processMessage(request);\n+        } else {\n+            responseObs = tokenProvider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327cb6f04d51a9f0d4af206e94f1d119db81fa00"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MDMzNTYy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#pullrequestreview-497033562", "createdAt": "2020-09-26T21:59:12Z", "commit": {"oid": "327cb6f04d51a9f0d4af206e94f1d119db81fa00"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMTo1OToxMlrOHYi5nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMTo1OToxMlrOHYi5nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ5OTY3Ng==", "bodyText": "Base64 doesn't have new lines or line feed, isn't that a bug if it happens?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r495499676", "createdAt": "2020-09-26T21:59:12Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Utils.java", "diffHunk": "@@ -116,6 +118,15 @@ public static String decodeAsUTF8String(String inputString) {\n         }\n     }\n \n+    public static String encodeUrlBase64String(byte[] binaryData) {\n+        String encodedString = Base64UrlEncoder.withoutPadding().encodeToString(binaryData);\n+\n+        if (encodedString.endsWith(\"\\r\\n\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327cb6f04d51a9f0d4af206e94f1d119db81fa00"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MDMzNzAz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#pullrequestreview-497033703", "createdAt": "2020-09-26T22:01:44Z", "commit": {"oid": "327cb6f04d51a9f0d4af206e94f1d119db81fa00"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMjowMTo0NFrOHYi6Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMjowMTo0NFrOHYi6Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ5OTg3OA==", "bodyText": "Why is test configuration in source path?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r495499878", "createdAt": "2020-09-26T22:01:44Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/TestConfigurations.java", "diffHunk": "@@ -32,26 +32,29 @@\n     private static Logger logger = LoggerFactory.getLogger(TestConfigurations.class);\n     private static Properties properties = loadProperties();\n \n+    private final static String COSMOS_EMULATOR_KEY = \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327cb6f04d51a9f0d4af206e94f1d119db81fa00"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MDMzNzcw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#pullrequestreview-497033770", "createdAt": "2020-09-26T22:03:14Z", "commit": {"oid": "327cb6f04d51a9f0d4af206e94f1d119db81fa00"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTA3NzIz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#pullrequestreview-497907723", "createdAt": "2020-09-28T21:26:15Z", "commit": {"oid": "327cb6f04d51a9f0d4af206e94f1d119db81fa00"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMToyNjoxNVrOHZQNhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMToyNjoxNVrOHZQNhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI0MjA1Mg==", "bodyText": "why are we disabling the emulator test?\ncould you enable it for the PR? if the emulator is readly?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r496242052", "createdAt": "2020-09-28T21:26:15Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "diffHunk": "@@ -0,0 +1,223 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.rx;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosAsyncDatabase;\n+import com.azure.cosmos.CosmosClientBuilder;\n+import com.azure.cosmos.CosmosDatabaseForTest;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.models.CosmosContainerResponse;\n+import com.azure.cosmos.models.CosmosDatabaseResponse;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+public class AadAuthorizationTests extends TestSuiteBase {\n+    private final static Logger log = LoggerFactory.getLogger(AadAuthorizationTests.class);\n+    private static final ObjectMapper OBJECT_MAPPER = Utils.getSimpleObjectMapper();\n+\n+    private final static String PARTITION_KEY_PATH = \"/mypk\";\n+    private final String databaseId = CosmosDatabaseForTest.generateId();\n+\n+    protected AadAuthorizationTests() {\n+    }\n+\n+    // Cosmos public emulator only test; this test will fail if run against Azure Cosmos endpoint at this time.\n+    //   We customize the Aad token to be specifically constructed for the Cosmos public emulator only; for Azure Cosmos\n+    //   the token will be requested and generated from an Azure Identity service.\n+    //@Test(groups = { \"emulator\" }, timeOut = 10 * TIMEOUT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327cb6f04d51a9f0d4af206e94f1d119db81fa00"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72f0baa44f60ac686c3aea54aff33451a4c63ad7", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/72f0baa44f60ac686c3aea54aff33451a4c63ad7", "committedDate": "2020-09-30T17:35:49Z", "message": "Merge branch 'master' into milismsft-AAD\n\n# Conflicts:\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayAddressCache.java"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2855, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}