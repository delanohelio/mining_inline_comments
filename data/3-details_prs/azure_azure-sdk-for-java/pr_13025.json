{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NTIxOTgx", "number": 13025, "title": "Refactor poller's activate, polling, fetching operation helper function", "bodyText": "Refactor poller's activate, polling, fetching operation helper function. fixes: #10187\nJavaDoc: don't use annotation @code for null value. refer to https://blog.joda.org/2012/11/javadoc-coding-standards.html", "createdAt": "2020-07-10T16:05:31Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025", "merged": true, "mergeCommit": {"oid": "464d82609a1b6d739a455c6e0f31df4293d73f8d"}, "closed": true, "closedAt": "2020-07-30T19:22:56Z", "author": {"login": "mssfang"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczlxwJgH2gAyNDQ3NTIxOTgxOjQ2N2U2MmZlZTAwOWM4MTY3YmEyNWZjY2Y5ODU5N2I3Yzg4ODE2NDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6EAINgH2gAyNDQ3NTIxOTgxOjhhOWViMjhlNWZmYWVhNzQxOTA1N2JkYWQ5NGQwOTRkZTU5ZmM3NDI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "467e62fee009c8167ba25fccf98597b7c8881642", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/467e62fee009c8167ba25fccf98597b7c8881642", "committedDate": "2020-07-10T15:57:03Z", "message": "refactor poller's activate, polling, fetching operation helper and some javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67b2ce57dc65b12440bd43b0e303c8f7ab46fc4a", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/67b2ce57dc65b12440bd43b0e303c8f7ab46fc4a", "committedDate": "2020-07-10T16:13:16Z", "message": "nit, period at the end of sentence"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NTUxNzQ5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#pullrequestreview-446551749", "createdAt": "2020-07-10T16:52:05Z", "commit": {"oid": "67b2ce57dc65b12440bd43b0e303c8f7ab46fc4a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjo1MjowNVrOGv-c1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjo1MjowNVrOGv-c1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1OTQ0NA==", "bodyText": "Why not update the fetching operation here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#discussion_r452959444", "createdAt": "2020-07-10T16:52:05Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -305,17 +328,23 @@\n      * been cancelled. The completed operation returns a List of {@link FormPage}.\n      * @throws FormRecognizerException If recognize operation fails and the {@link AnalyzeOperationResult} returned with\n      * an {@link OperationStatus#FAILED}.\n-     * @throws NullPointerException If {@code recognizeOptions} is {@code null}.\n+     * @throws NullPointerException If {@code form} is null.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n     public PollerFlux<OperationResult, List<FormPage>> beginRecognizeContent(Flux<ByteBuffer> form, long length,\n         RecognizeOptions recognizeOptions) {\n         try {\n+            Objects.requireNonNull(form, \"'form' is required and cannot be null.\");\n+\n             recognizeOptions = getRecognizeOptionsProperties(recognizeOptions);\n             return new PollerFlux<>(\n                 recognizeOptions.getPollInterval(),\n-                contentStreamActivationOperation(form, length, recognizeOptions.getContentType()),\n-                extractContentPollOperation(),\n+                streamActivationOperation(\n+                    contentType -> service.analyzeLayoutAsyncWithResponseAsync(contentType, form, length)\n+                        .map(response -> new OperationResult(\n+                            parseModelId(response.getDeserializedHeaders().getOperationLocation()))),\n+                    form, recognizeOptions.getContentType()),\n+                pollingOperation(service::getAnalyzeLayoutResultWithResponseAsync),\n                 (activationResponse, context) ->\n                     monoError(logger, new RuntimeException(\"Cancellation is not supported\")),\n                 fetchExtractContentResult());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67b2ce57dc65b12440bd43b0e303c8f7ab46fc4a"}, "originalPosition": 174}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NjcwNTg0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#pullrequestreview-446670584", "createdAt": "2020-07-10T20:04:01Z", "commit": {"oid": "67b2ce57dc65b12440bd43b0e303c8f7ab46fc4a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDowNDowMlrOGwELWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDowNDowMlrOGwELWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1MzI3Mw==", "bodyText": "To make this method common to all the API's we could have it return the modelSimpleResponse and let the respective API's do their conversion toRecognizedForm() or toFormPage?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#discussion_r453053273", "createdAt": "2020-07-10T20:04:02Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -512,12 +514,17 @@\n         };\n     }\n \n-    private Function<PollingContext<OperationResult>, Mono<List<RecognizedForm>>>\n-        fetchExtractReceiptResult(boolean includeFieldElements) {\n+    /*\n+     * Poller's FETCHING operation that fetch a list of RecognizedForm.\n+     */\n+    private Function<PollingContext<OperationResult>, Mono<List<RecognizedForm>>> fetchingOperation(\n+        Function<UUID, Mono<SimpleResponse<AnalyzeOperationResult>>> fetchingFunction,\n+        boolean includeFieldElements) {\n+\n         return (pollingContext) -> {\n             try {\n                 final UUID resultUid = UUID.fromString(pollingContext.getLatestResponse().getValue().getResultId());\n-                return service.getAnalyzeReceiptResultWithResponseAsync(resultUid)\n+                return fetchingFunction.apply(resultUid)\n                     .map(modelSimpleResponse -> {\n                         throwIfAnalyzeStatusInvalid(modelSimpleResponse.getValue());\n                         return toRecognizedForm(modelSimpleResponse.getValue().getAnalyzeResult(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67b2ce57dc65b12440bd43b0e303c8f7ab46fc4a"}, "originalPosition": 340}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9adaf530fdc27f5804aff955ff57651bcdfd15d", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a9adaf530fdc27f5804aff955ff57651bcdfd15d", "committedDate": "2020-07-10T22:49:45Z", "message": "remove fetchExtractContentResult() and use the updated fetchingOperation() method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NDk4NDI2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#pullrequestreview-447498426", "createdAt": "2020-07-13T18:30:12Z", "commit": {"oid": "a9adaf530fdc27f5804aff955ff57651bcdfd15d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODozMDoxMlrOGw0sKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODozMzowNVrOGw0zOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0ODEwNA==", "bodyText": "nit: activationOperation::apply", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#discussion_r453848104", "createdAt": "2020-07-13T18:30:12Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -512,192 +540,55 @@\n         };\n     }\n \n-    private Function<PollingContext<OperationResult>, Mono<List<RecognizedForm>>>\n-        fetchExtractReceiptResult(boolean includeFieldElements) {\n-        return (pollingContext) -> {\n-            try {\n-                final UUID resultUid = UUID.fromString(pollingContext.getLatestResponse().getValue().getResultId());\n-                return service.getAnalyzeReceiptResultWithResponseAsync(resultUid)\n-                    .map(modelSimpleResponse -> {\n-                        throwIfAnalyzeStatusInvalid(modelSimpleResponse.getValue());\n-                        return toRecognizedForm(modelSimpleResponse.getValue().getAnalyzeResult(),\n-                            includeFieldElements);\n-                    })\n-                    .onErrorMap(Utility::mapToHttpResponseExceptionIfExist);\n-            } catch (RuntimeException ex) {\n-                return monoError(logger, ex);\n-            }\n-        };\n-    }\n+    /*\n+     * Poller's FETCHING operation.\n+     */\n+    private Function<PollingContext<OperationResult>, Mono<SimpleResponse<AnalyzeOperationResult>>> fetchingOperation(\n+        Function<UUID, Mono<SimpleResponse<AnalyzeOperationResult>>> fetchingFunction) {\n \n-    private Function<PollingContext<OperationResult>, Mono<OperationResult>> contentAnalyzeActivationOperation(\n-        String formUrl) {\n         return (pollingContext) -> {\n             try {\n-                Objects.requireNonNull(formUrl, \"'formUrl' is required and cannot be null.\");\n-                return service.analyzeLayoutAsyncWithResponseAsync(new SourcePath().setSource(formUrl))\n-                    .map(response ->\n-                        new OperationResult(parseModelId(response.getDeserializedHeaders().getOperationLocation())))\n-                    .onErrorMap(Utility::mapToHttpResponseExceptionIfExist);\n+                final UUID resultUid = UUID.fromString(pollingContext.getLatestResponse().getValue().getResultId());\n+                return fetchingFunction.apply(resultUid);\n             } catch (RuntimeException ex) {\n                 return monoError(logger, ex);\n             }\n         };\n     }\n \n-    private Function<PollingContext<OperationResult>, Mono<OperationResult>> contentStreamActivationOperation(\n-        Flux<ByteBuffer> form, long length, FormContentType contentType) {\n+    /*\n+     * Poller's ACTIVATION operation that takes stream as input.\n+     */\n+    private Function<PollingContext<OperationResult>, Mono<OperationResult>> streamActivationOperation(\n+        Function<ContentType, Mono<OperationResult>> activationOperation, Flux<ByteBuffer> form,\n+        FormContentType contentType) {\n         return pollingContext -> {\n+            Mono<OperationResult> operationResultMono;\n             try {\n-                Objects.requireNonNull(form, \"'form' is required and cannot be null.\");\n                 if (contentType != null) {\n-                    return service.analyzeLayoutAsyncWithResponseAsync(\n-                        ContentType.fromString(contentType.toString()), form, length)\n-                        .map(response -> new OperationResult(parseModelId(\n-                            response.getDeserializedHeaders().getOperationLocation())))\n-                        .onErrorMap(Utility::mapToHttpResponseExceptionIfExist);\n+                    final ContentType givenContentType = ContentType.fromString(contentType.toString());\n+                    operationResultMono = activationOperation.apply(givenContentType);\n                 } else {\n-                    return detectContentType(form)\n-                        .flatMap(detectedContentType ->\n-                            service.analyzeLayoutAsyncWithResponseAsync(detectedContentType, form, length)\n-                                .map(response -> new OperationResult(\n-                                    parseModelId(response.getDeserializedHeaders().getOperationLocation()))))\n-                        .onErrorMap(Utility::mapToHttpResponseExceptionIfExist);\n+                    operationResultMono = detectContentType(form)\n+                        .flatMap(detectedContentType -> activationOperation.apply(detectedContentType));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9adaf530fdc27f5804aff955ff57651bcdfd15d"}, "originalPosition": 426}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0OTkxMw==", "bodyText": "Not sure, if we are using this publisher's value", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#discussion_r453849913", "createdAt": "2020-07-13T18:33:05Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -512,192 +540,55 @@\n         };\n     }\n \n-    private Function<PollingContext<OperationResult>, Mono<List<RecognizedForm>>>\n-        fetchExtractReceiptResult(boolean includeFieldElements) {\n-        return (pollingContext) -> {\n-            try {\n-                final UUID resultUid = UUID.fromString(pollingContext.getLatestResponse().getValue().getResultId());\n-                return service.getAnalyzeReceiptResultWithResponseAsync(resultUid)\n-                    .map(modelSimpleResponse -> {\n-                        throwIfAnalyzeStatusInvalid(modelSimpleResponse.getValue());\n-                        return toRecognizedForm(modelSimpleResponse.getValue().getAnalyzeResult(),\n-                            includeFieldElements);\n-                    })\n-                    .onErrorMap(Utility::mapToHttpResponseExceptionIfExist);\n-            } catch (RuntimeException ex) {\n-                return monoError(logger, ex);\n-            }\n-        };\n-    }\n+    /*\n+     * Poller's FETCHING operation.\n+     */\n+    private Function<PollingContext<OperationResult>, Mono<SimpleResponse<AnalyzeOperationResult>>> fetchingOperation(\n+        Function<UUID, Mono<SimpleResponse<AnalyzeOperationResult>>> fetchingFunction) {\n \n-    private Function<PollingContext<OperationResult>, Mono<OperationResult>> contentAnalyzeActivationOperation(\n-        String formUrl) {\n         return (pollingContext) -> {\n             try {\n-                Objects.requireNonNull(formUrl, \"'formUrl' is required and cannot be null.\");\n-                return service.analyzeLayoutAsyncWithResponseAsync(new SourcePath().setSource(formUrl))\n-                    .map(response ->\n-                        new OperationResult(parseModelId(response.getDeserializedHeaders().getOperationLocation())))\n-                    .onErrorMap(Utility::mapToHttpResponseExceptionIfExist);\n+                final UUID resultUid = UUID.fromString(pollingContext.getLatestResponse().getValue().getResultId());\n+                return fetchingFunction.apply(resultUid);\n             } catch (RuntimeException ex) {\n                 return monoError(logger, ex);\n             }\n         };\n     }\n \n-    private Function<PollingContext<OperationResult>, Mono<OperationResult>> contentStreamActivationOperation(\n-        Flux<ByteBuffer> form, long length, FormContentType contentType) {\n+    /*\n+     * Poller's ACTIVATION operation that takes stream as input.\n+     */\n+    private Function<PollingContext<OperationResult>, Mono<OperationResult>> streamActivationOperation(\n+        Function<ContentType, Mono<OperationResult>> activationOperation, Flux<ByteBuffer> form,\n+        FormContentType contentType) {\n         return pollingContext -> {\n+            Mono<OperationResult> operationResultMono;\n             try {\n-                Objects.requireNonNull(form, \"'form' is required and cannot be null.\");\n                 if (contentType != null) {\n-                    return service.analyzeLayoutAsyncWithResponseAsync(\n-                        ContentType.fromString(contentType.toString()), form, length)\n-                        .map(response -> new OperationResult(parseModelId(\n-                            response.getDeserializedHeaders().getOperationLocation())))\n-                        .onErrorMap(Utility::mapToHttpResponseExceptionIfExist);\n+                    final ContentType givenContentType = ContentType.fromString(contentType.toString());\n+                    operationResultMono = activationOperation.apply(givenContentType);\n                 } else {\n-                    return detectContentType(form)\n-                        .flatMap(detectedContentType ->\n-                            service.analyzeLayoutAsyncWithResponseAsync(detectedContentType, form, length)\n-                                .map(response -> new OperationResult(\n-                                    parseModelId(response.getDeserializedHeaders().getOperationLocation()))))\n-                        .onErrorMap(Utility::mapToHttpResponseExceptionIfExist);\n+                    operationResultMono = detectContentType(form)\n+                        .flatMap(detectedContentType -> activationOperation.apply(detectedContentType));\n                 }\n+                operationResultMono.onErrorMap(Utility::mapToHttpResponseExceptionIfExist);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9adaf530fdc27f5804aff955ff57651bcdfd15d"}, "originalPosition": 428}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ed04f782179459a1b37340c62c34444ef32b243", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3ed04f782179459a1b37340c62c34444ef32b243", "committedDate": "2020-07-13T23:37:32Z", "message": "address feedbacks 1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NzA0MzA5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#pullrequestreview-447704309", "createdAt": "2020-07-14T00:32:52Z", "commit": {"oid": "3ed04f782179459a1b37340c62c34444ef32b243"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NzExMTI4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#pullrequestreview-447711128", "createdAt": "2020-07-14T00:53:23Z", "commit": {"oid": "3ed04f782179459a1b37340c62c34444ef32b243"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0ea7f8d7ae4a7959c76c00b2e4fdf31337e4dc4", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a0ea7f8d7ae4a7959c76c00b2e4fdf31337e4dc4", "committedDate": "2020-07-14T01:27:51Z", "message": "using == instead of equals()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MjYyNTcw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#pullrequestreview-449262570", "createdAt": "2020-07-15T19:24:10Z", "commit": {"oid": "a0ea7f8d7ae4a7959c76c00b2e4fdf31337e4dc4"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxOToyNDoxMFrOGyMkyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxOTozNTowNlrOGyM8ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI4ODAxMQ==", "bodyText": "nit: rename resultUid to resultUuid", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#discussion_r455288011", "createdAt": "2020-07-15T19:24:10Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -512,56 +540,37 @@\n         };\n     }\n \n-    private Function<PollingContext<OperationResult>, Mono<List<RecognizedForm>>>\n-        fetchExtractReceiptResult(boolean includeFieldElements) {\n-        return (pollingContext) -> {\n-            try {\n-                final UUID resultUid = UUID.fromString(pollingContext.getLatestResponse().getValue().getResultId());\n-                return service.getAnalyzeReceiptResultWithResponseAsync(resultUid)\n-                    .map(modelSimpleResponse -> {\n-                        throwIfAnalyzeStatusInvalid(modelSimpleResponse.getValue());\n-                        return toRecognizedForm(modelSimpleResponse.getValue().getAnalyzeResult(),\n-                            includeFieldElements);\n-                    })\n-                    .onErrorMap(Utility::mapToHttpResponseExceptionIfExist);\n-            } catch (RuntimeException ex) {\n-                return monoError(logger, ex);\n-            }\n-        };\n-    }\n+    /*\n+     * Poller's FETCHING operation.\n+     */\n+    private Function<PollingContext<OperationResult>, Mono<SimpleResponse<AnalyzeOperationResult>>> fetchingOperation(\n+        Function<UUID, Mono<SimpleResponse<AnalyzeOperationResult>>> fetchingFunction) {\n \n-    private Function<PollingContext<OperationResult>, Mono<OperationResult>> contentAnalyzeActivationOperation(\n-        String formUrl) {\n         return (pollingContext) -> {\n             try {\n-                Objects.requireNonNull(formUrl, \"'formUrl' is required and cannot be null.\");\n-                return service.analyzeLayoutAsyncWithResponseAsync(new SourcePath().setSource(formUrl))\n-                    .map(response ->\n-                        new OperationResult(parseModelId(response.getDeserializedHeaders().getOperationLocation())))\n-                    .onErrorMap(Utility::mapToHttpResponseExceptionIfExist);\n+                final UUID resultUid = UUID.fromString(pollingContext.getLatestResponse().getValue().getResultId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0ea7f8d7ae4a7959c76c00b2e4fdf31337e4dc4"}, "originalPosition": 390}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI5MTc5NA==", "bodyText": "Throwing an exception inside a map operator is odd. In this case, use handle() operator to either sink.error() or sink.next() depending on whether the response is an error or success.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#discussion_r455291794", "createdAt": "2020-07-15T19:30:48Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -434,75 +490,47 @@\n      * or has been cancelled. The completed operation returns a List of {@link RecognizedForm}.\n      * @throws FormRecognizerException If recognize operation fails and the {@link AnalyzeOperationResult} returned with\n      * an {@link OperationStatus#FAILED}.\n-     * @throws NullPointerException If {@code recognizeOptions} is {@code null}.\n+     * @throws NullPointerException If {@code receipt} is null.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n     public PollerFlux<OperationResult, List<RecognizedForm>>\n         beginRecognizeReceipts(Flux<ByteBuffer> receipt, long length, RecognizeOptions recognizeOptions) {\n         try {\n+            Objects.requireNonNull(receipt, \"'receipt' is required and cannot be null.\");\n+\n             recognizeOptions = getRecognizeOptionsProperties(recognizeOptions);\n+            final boolean isIncludeFieldElements = recognizeOptions.isIncludeFieldElements();\n             return new PollerFlux<>(\n                 recognizeOptions.getPollInterval(),\n-                receiptStreamActivationOperation(receipt, length,\n-                    recognizeOptions.getContentType(), recognizeOptions.isIncludeFieldElements()),\n-                extractReceiptPollOperation(),\n+                streamActivationOperation(\n+                    (contentType -> service.analyzeReceiptAsyncWithResponseAsync(\n+                        contentType, receipt, length, isIncludeFieldElements).map(response -> new OperationResult(\n+                            parseModelId(response.getDeserializedHeaders().getOperationLocation())))),\n+                    receipt, recognizeOptions.getContentType()),\n+                pollingOperation(service::getAnalyzeReceiptResultWithResponseAsync),\n                 (activationResponse, context) -> monoError(logger,\n                     new RuntimeException(\"Cancellation is not supported\")),\n-                fetchExtractReceiptResult(recognizeOptions.isIncludeFieldElements()));\n+                fetchingOperation(service::getAnalyzeReceiptResultWithResponseAsync)\n+                    .andThen(after -> after.map(modelSimpleResponse -> {\n+                        throwIfAnalyzeStatusInvalid(modelSimpleResponse.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0ea7f8d7ae4a7959c76c00b2e4fdf31337e4dc4"}, "originalPosition": 285}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI5NDA1Mg==", "bodyText": "What happens if the errorInformationList is null or empty? The status has failed but this method won't throw any exception which might result in the map operation above to continue with the transformation instead of throwing.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#discussion_r455294052", "createdAt": "2020-07-15T19:35:06Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -734,4 +623,20 @@ private RecognizeOptions getRecognizeOptionsProperties(RecognizeOptions userProv\n             return new RecognizeOptions();\n         }\n     }\n+\n+    /**\n+     * Helper method that throws a {@link FormRecognizerException} if {@link AnalyzeOperationResult#getStatus()} is\n+     * {@link OperationStatus#FAILED}.\n+     *\n+     * @param analyzeResponse The response returned from the service.\n+     */\n+    private void throwIfAnalyzeStatusInvalid(AnalyzeOperationResult analyzeResponse) {\n+        if (OperationStatus.FAILED == analyzeResponse.getStatus()) {\n+            List<ErrorInformation> errorInformationList = analyzeResponse.getAnalyzeResult().getErrors();\n+            if (!CoreUtils.isNullOrEmpty(errorInformationList)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0ea7f8d7ae4a7959c76c00b2e4fdf31337e4dc4"}, "originalPosition": 581}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69ad97c84cd681a303112635174c6939264acf65", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/69ad97c84cd681a303112635174c6939264acf65", "committedDate": "2020-07-16T05:40:46Z", "message": "resultUid to resultUuid"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNjc4MjY2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#pullrequestreview-452678266", "createdAt": "2020-07-21T17:29:14Z", "commit": {"oid": "69ad97c84cd681a303112635174c6939264acf65"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27f80c7c0a285c34bd5963acab516ad9846d70fd", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/27f80c7c0a285c34bd5963acab516ad9846d70fd", "committedDate": "2020-07-29T05:26:24Z", "message": "resolved conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7690bb61384fb3ec27ef52cf08583b6355b99985", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7690bb61384fb3ec27ef52cf08583b6355b99985", "committedDate": "2020-07-29T06:29:06Z", "message": "fixes checkstyle error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de1edc42a90766bb4e73d0c2e1b2e81e528f2e56", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/de1edc42a90766bb4e73d0c2e1b2e81e528f2e56", "committedDate": "2020-07-30T18:10:48Z", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into FR-PollerHelper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d02d7569dc6ca0f050e183b4b7ace0605a917776", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d02d7569dc6ca0f050e183b4b7ace0605a917776", "committedDate": "2020-07-30T18:13:38Z", "message": "fixed live-test failures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a9eb28e5ffaea7419057bdad94d094de59fc742", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8a9eb28e5ffaea7419057bdad94d094de59fc742", "committedDate": "2020-07-30T18:33:27Z", "message": "remove unused import"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2667, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}