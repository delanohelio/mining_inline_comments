{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNDQ2OTU4", "number": 13762, "title": "Sb track2 Do not wait till maxWaitTime timeout If no message arrive", "bodyText": "Do not wait till maxWaitTime timeout If no message arrive\nIf we get one or message < maxMessages : We should not wait all the way till maxWaitTime.\nUse  20 MS as timeout after we have received messages >= 1  and <  maxMessages .\nFixes #12062", "createdAt": "2020-08-03T23:33:50Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762", "merged": true, "mergeCommit": {"oid": "aa587c2877b679706b71cab1891df02fc8c8436e"}, "closed": true, "closedAt": "2020-08-11T15:46:43Z", "author": {"login": "hemanttanwar"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc6E1gOgH2gAyNDYyNDQ2OTU4OjczZGNmYjJjOTcyM2NiNDYwMDllMTU0NTIxM2RmMDc1NjAwMmFjMzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc94gMxgH2gAyNDYyNDQ2OTU4OjAwMjI5ODE4YmU3ZmVkMmJhMGU2MzM4ZDQ3OWRmMDA2ZDBkYjdjZmI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "73dcfb2c9723cb46009e1545213df0756002ac39", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/73dcfb2c9723cb46009e1545213df0756002ac39", "committedDate": "2020-07-30T19:31:45Z", "message": "adding test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38c9403afa7ff80399c40c073d9b32c86df5fd9e", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/38c9403afa7ff80399c40c073d9b32c86df5fd9e", "committedDate": "2020-07-31T18:27:05Z", "message": "more work on integration test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3553c6e74a1faa92516d23e0dc01a616b7edbed", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b3553c6e74a1faa92516d23e0dc01a616b7edbed", "committedDate": "2020-08-03T19:56:59Z", "message": "Merge branch 'master' into sb-track2-maxwait-timeout-12062"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec534b106e440e490ea14c97d7339f20f1fd96b9", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ec534b106e440e490ea14c97d7339f20f1fd96b9", "committedDate": "2020-08-03T23:30:16Z", "message": "SyncClient : Adding short timeout in between messages"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNDMwMzA5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#pullrequestreview-460430309", "createdAt": "2020-08-04T01:05:35Z", "commit": {"oid": "ec534b106e440e490ea14c97d7339f20f1fd96b9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMTowNTozNlrOG7Ngwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMTowNTozNlrOG7Ngwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc0MDU0Ng==", "bodyText": "I'm not sure why this is passed in as a parameter. It seems very specific to a type of algorithm.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#discussion_r464740546", "createdAt": "2020-08-04T01:05:36Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -753,7 +753,8 @@ public ServiceBusReceiverAsyncClient buildAsyncClient() {\n          *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n          */\n         public ServiceBusReceiverClient buildClient() {\n-            return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n+            return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout(),\n+                ServiceBusConstants.SHORT_TIMEOUT_BETWEEN_MESSAGES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec534b106e440e490ea14c97d7339f20f1fd96b9"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNDMwOTYz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#pullrequestreview-460430963", "createdAt": "2020-08-04T01:07:53Z", "commit": {"oid": "ec534b106e440e490ea14c97d7339f20f1fd96b9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMTowNzo1M1rOG7Ni-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMTowNzo1M1rOG7Ni-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc0MTExMg==", "bodyText": "This is not reactive. There are other operations like switch you can use.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#discussion_r464741112", "createdAt": "2020-08-04T01:07:53Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousMessageSubscriber.java", "diffHunk": "@@ -205,6 +224,22 @@ private Disposable getTimeoutOperation(SynchronousReceiveWork work) {\n             });\n     }\n \n+    /**\n+     * @param work on which short timeout between message timeout thread need to start.\n+     *\n+     * @return {@link Disposable} for the timeout operation.\n+     */\n+    private Disposable getShortTimeoutBetweenMessages(SynchronousReceiveWork work) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec534b106e440e490ea14c97d7339f20f1fd96b9"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e50d2c82450458c1b0c948729e576672ce23f65", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4e50d2c82450458c1b0c948729e576672ce23f65", "committedDate": "2020-08-04T23:16:55Z", "message": "Moving the logic of shortTimer to SynchronousReceiveWork"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d57ac96506e6d31c58d558671d1e25c0c5694a18", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d57ac96506e6d31c58d558671d1e25c0c5694a18", "committedDate": "2020-08-04T23:19:48Z", "message": "Moving the logic of shortTimer to SynchronousReceiveWork"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b31d28ba19476b90c1f873841649d02f41c83d15", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b31d28ba19476b90c1f873841649d02f41c83d15", "committedDate": "2020-08-04T23:21:48Z", "message": "Moving the logic of shortTimer to SynchronousReceiveWork"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13db52e838c7b315cdf7f3699c3f2be0ae9cd7f3", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/13db52e838c7b315cdf7f3699c3f2be0ae9cd7f3", "committedDate": "2020-08-06T06:23:09Z", "message": "move the logic of timeout in worker class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6953ea4c5b7c9cf8d17f242555ba7e04ae6171fa", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6953ea4c5b7c9cf8d17f242555ba7e04ae6171fa", "committedDate": "2020-08-06T19:34:03Z", "message": "Increasing wait time to 200 MS between messages."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTAwMDY1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#pullrequestreview-462900065", "createdAt": "2020-08-06T21:49:32Z", "commit": {"oid": "6953ea4c5b7c9cf8d17f242555ba7e04ae6171fa"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMTo0OTozMlrOG9FaRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMjowNDoxNVrOG9Fwxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwNDk2NQ==", "bodyText": "Why not make implement Closeable rather than this private close?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#discussion_r466704965", "createdAt": "2020-08-06T21:49:32Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java", "diffHunk": "@@ -153,4 +168,32 @@ void startedProcessing() {\n     boolean isProcessingStarted() {\n         return this.processingStarted;\n     }\n+\n+    private void close() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6953ea4c5b7c9cf8d17f242555ba7e04ae6171fa"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwNTUxMQ==", "bodyText": "This doesn't need to be a public constant.  It can just live inside the synchronous work class.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#discussion_r466705511", "createdAt": "2020-08-06T21:50:41Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusConstants.java", "diffHunk": "@@ -11,6 +11,7 @@\n public class ServiceBusConstants {\n     public static final String AZURE_ACTIVE_DIRECTORY_SCOPE = \"https://servicebus.azure.net/.default\";\n     public static final Duration OPERATION_TIMEOUT = Duration.ofSeconds(60);\n+    public static final Duration SHORT_TIMEOUT_BETWEEN_MESSAGES = Duration.ofMillis(200);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6953ea4c5b7c9cf8d17f242555ba7e04ae6171fa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxMDI4OQ==", "bodyText": "This isn't reactive to have to create a new Mono operation everytime a message come in. How about a combination of Flux.swithOnNext(publisher).takeUntil(notCancelled) where a new item is emitted from the publisher if there is a next message? And for each item emitted, delay at an interval. So if the item is emitted, then cancel the emitter.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#discussion_r466710289", "createdAt": "2020-08-06T22:02:58Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java", "diffHunk": "@@ -96,8 +104,12 @@ boolean isTerminal() {\n      */\n     void next(ServiceBusReceivedMessageContext message) {\n         try {\n+            if (timeoutBeforeNextMessageOperation != null && !timeoutBeforeNextMessageOperation.isDisposed()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6953ea4c5b7c9cf8d17f242555ba7e04ae6171fa"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxMDYzOQ==", "bodyText": "When is this used?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#discussion_r466710639", "createdAt": "2020-08-06T22:03:59Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/SynchronousMessageSubscriberTest.java", "diffHunk": "@@ -24,7 +24,7 @@\n  * Unit test for sync subscriber.\n  */\n public class SynchronousMessageSubscriberTest {\n-\n+    public static final Duration SHORT_TIMEOUT_BETWEEN_MESSAGES = Duration.ofMillis(1000 * 15);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6953ea4c5b7c9cf8d17f242555ba7e04ae6171fa"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxMDcyNw==", "bodyText": "This is commented out.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#discussion_r466710727", "createdAt": "2020-08-06T22:04:15Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -809,6 +815,7 @@ private void setSenderAndReceiver(MessagingEntityType entityType, int entityInde\n                 .buildClient();\n         } else {\n             this.receiver = getReceiverBuilder(false, entityType, entityIndex, Function.identity(), sharedConnection)\n+                //.prefetchCount(5)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6953ea4c5b7c9cf8d17f242555ba7e04ae6171fa"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed25a83932203c01fa879c77421a78bca0e11378", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ed25a83932203c01fa879c77421a78bca0e11378", "committedDate": "2020-08-07T06:17:41Z", "message": "continue test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "357899c43e6155f956a200ce8fc1a3937d18a177", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/357899c43e6155f956a200ce8fc1a3937d18a177", "committedDate": "2020-08-07T15:47:44Z", "message": "Removed unwanted variable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e76d66898d93d3bf02b48ffede57854bd8e6873f", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e76d66898d93d3bf02b48ffede57854bd8e6873f", "committedDate": "2020-08-07T22:57:17Z", "message": "REview comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNjg0MzMz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#pullrequestreview-463684333", "createdAt": "2020-08-07T23:16:54Z", "commit": {"oid": "e76d66898d93d3bf02b48ffede57854bd8e6873f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzoxNjo1NFrOG9rMUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzoxNjo1NFrOG9rMUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyMzk4Ng==", "bodyText": "You don't need any logic to be in here. In the onNext() override, is where you would call emitter.next. And wherever the flux is attached to the Emitter could be the messageReceivedEmitter. MessageReceivedEmitter shouldn't have to exist.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#discussion_r467323986", "createdAt": "2020-08-07T23:16:54Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java", "diffHunk": "@@ -43,6 +57,20 @@\n         this.numberToReceive = numberToReceive;\n         this.timeout = timeout;\n         this.emitter = emitter;\n+\n+        nextMessageSubscriber = Flux.switchOnNext(messageReceivedEmitter\n+            .map(messageContext -> {\n+                emitter.next(messageContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e76d66898d93d3bf02b48ffede57854bd8e6873f"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "825528d5d5de0130258d78dfce8cabb76948d7d6", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/825528d5d5de0130258d78dfce8cabb76948d7d6", "committedDate": "2020-08-08T00:50:57Z", "message": "Review comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47395a170520686966bbe0ea5fd905af017c193e", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/47395a170520686966bbe0ea5fd905af017c193e", "committedDate": "2020-08-09T18:13:12Z", "message": "testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b04255a8485875dda80a86367f9620e025149b86", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b04255a8485875dda80a86367f9620e025149b86", "committedDate": "2020-08-10T22:38:46Z", "message": "Fixing short timeout."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb40d338041fbbd3ca66de2b458e854625b4dd70", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bb40d338041fbbd3ca66de2b458e854625b4dd70", "committedDate": "2020-08-10T22:50:01Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ebaa7c8400eb44e665485dbd6ce2e67a1c7c343", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3ebaa7c8400eb44e665485dbd6ce2e67a1c7c343", "committedDate": "2020-08-10T22:56:30Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52102e5eb6fddbc0e3c03b67befc1bcb9d67de1f", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/52102e5eb6fddbc0e3c03b67befc1bcb9d67de1f", "committedDate": "2020-08-10T23:11:33Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3453e163444f608a38a020d492b50f28b368248", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b3453e163444f608a38a020d492b50f28b368248", "committedDate": "2020-08-10T23:13:16Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f766b5f66e9069aa925842b672a9ea3b80d7590", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9f766b5f66e9069aa925842b672a9ea3b80d7590", "committedDate": "2020-08-11T04:30:35Z", "message": "Checkstyle fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MjQ4ODU4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#pullrequestreview-464248858", "createdAt": "2020-08-10T13:54:10Z", "commit": {"oid": "47395a170520686966bbe0ea5fd905af017c193e"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMzo1NDoxMFrOG-PjuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDozOToxOVrOG-7GRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkxOTgwMA==", "bodyText": "TIMEOUT_BETWEEN_MESSAGES is sufficient.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#discussion_r467919800", "createdAt": "2020-08-10T13:54:10Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java", "diffHunk": "@@ -4,15 +4,22 @@\n package com.azure.messaging.servicebus;\n \n import com.azure.core.util.logging.ClientLogger;\n+import reactor.core.Disposable;\n+import reactor.core.publisher.DirectProcessor;\n+import reactor.core.publisher.EmitterProcessor;\n+import reactor.core.publisher.Flux;\n import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Mono;\n \n import java.time.Duration;\n import java.util.concurrent.atomic.AtomicInteger;\n \n /**\n  * Synchronous work for receiving messages.\n  */\n-class SynchronousReceiveWork {\n+class SynchronousReceiveWork implements AutoCloseable{\n+    private static final Duration SHORT_TIMEOUT_BETWEEN_MESSAGES = Duration.ofMillis(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47395a170520686966bbe0ea5fd905af017c193e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzMTYyMA==", "bodyText": "When it leaves the scope of the method, doesn't this get collected?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#discussion_r468631620", "createdAt": "2020-08-11T14:37:11Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java", "diffHunk": "@@ -43,6 +54,18 @@\n         this.numberToReceive = numberToReceive;\n         this.timeout = timeout;\n         this.emitter = emitter;\n+\n+        DirectProcessor<ServiceBusReceivedMessageContext> emitterProcessor = DirectProcessor.create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f766b5f66e9069aa925842b672a9ea3b80d7590"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzMjYyMg==", "bodyText": "is the null check necessary? Isn't this always set in the constructor. You can just call dispose.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#discussion_r468632622", "createdAt": "2020-08-11T14:38:32Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java", "diffHunk": "@@ -153,4 +180,11 @@ void startedProcessing() {\n     boolean isProcessingStarted() {\n         return this.processingStarted;\n     }\n+\n+    @Override\n+    public void close() {\n+        if (nextMessageSubscriber != null && !nextMessageSubscriber.isDisposed()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f766b5f66e9069aa925842b672a9ea3b80d7590"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzMzE1Ng==", "bodyText": "TIMEOUT_BETWEEN_MESSAGES is enough.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#discussion_r468633156", "createdAt": "2020-08-11T14:39:19Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java", "diffHunk": "@@ -12,13 +15,21 @@\n /**\n  * Synchronous work for receiving messages.\n  */\n-class SynchronousReceiveWork {\n+class SynchronousReceiveWork implements AutoCloseable {\n+\n+    /* When we have received at-least one message and next message does not arrive in this time. The work will\n+    complete.*/\n+    private static final Duration SHORT_TIMEOUT_BETWEEN_MESSAGES = Duration.ofMillis(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f766b5f66e9069aa925842b672a9ea3b80d7590"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00229818be7fed2ba0e6338d479df006d0db7cfb", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/00229818be7fed2ba0e6338d479df006d0db7cfb", "committedDate": "2020-08-11T15:25:19Z", "message": "Review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 963, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}