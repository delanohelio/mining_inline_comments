{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5MTM3MDA4", "number": 14801, "title": "Enhance Playback Record Naming", "bodyText": "Fixes #14789\nThis PR enhances playback record naming to include the test's class name and its permutation (if applicable). The new test recording name is now className.testName[permutation]. When loading for test playback both the new and old format, just test name, will be checked before throwing an exception. Recordings are now saved using the new naming convention. This change will reduce the likelihood of test recording name collisions.", "createdAt": "2020-09-04T00:39:23Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14801", "merged": true, "mergeCommit": {"oid": "3d9d9904ca59ec672d6ed55851024289abe45e32"}, "closed": true, "closedAt": "2020-09-10T16:55:42Z", "author": {"login": "alzimmermsft"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFZ-KhgH2gAyNDc5MTM3MDA4OmI0ODQ2MDVkYjdkYTc2Y2Y2MzAyNTI5NzhhMmY5ZDcwN2RjNDkzMmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHUGLIgH2gAyNDc5MTM3MDA4OjFlMzMzODc4MjQ0ZTIwNDJhYjFlYTMyZTJiMzBlNjg3MzUxNGU5ZTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b484605db7da76cf630252978a2f9d707dc4932b", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b484605db7da76cf630252978a2f9d707dc4932b", "committedDate": "2020-09-04T00:22:23Z", "message": "Add enhanced playback record names"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMjg4NjU2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14801#pullrequestreview-482288656", "createdAt": "2020-09-04T00:46:18Z", "commit": {"oid": "b484605db7da76cf630252978a2f9d707dc4932b"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMDo0NjoxOFrOHM73gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMDo0NjoxOFrOHM73gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMyNTgyNg==", "bodyText": "If playbackRecordName is null, should this fallback to testName?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14801#discussion_r483325826", "createdAt": "2020-09-04T00:46:18Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/InterceptorManager.java", "diffHunk": "@@ -96,13 +98,15 @@ public InterceptorManager(String testName, TestMode testMode) {\n      * @throws NullPointerException If {@code testName} is {@code null}.\n      */\n     public InterceptorManager(TestContextManager testContextManager) {\n-        this(testContextManager.getTestName(), testContextManager.getTestMode(), testContextManager.doNotRecordTest());\n+        this(testContextManager.getTestName(), testContextManager.getTestPlaybackRecordingName(),\n+            testContextManager.getTestMode(), testContextManager.doNotRecordTest());\n     }\n \n-    private InterceptorManager(String testName, TestMode testMode, boolean doNotRecord) {\n+    private InterceptorManager(String testName, String playbackRecordName, TestMode testMode, boolean doNotRecord) {\n         Objects.requireNonNull(testName, \"'testName' cannot be null.\");\n \n         this.testName = testName;\n+        this.playbackRecordName = playbackRecordName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b484605db7da76cf630252978a2f9d707dc4932b"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cba01f7098003e46446faea9cc898d217d8f1674", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cba01f7098003e46446faea9cc898d217d8f1674", "committedDate": "2020-09-04T01:20:53Z", "message": "Fixed incorrect conditional and added missing Javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNzM3MTMx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14801#pullrequestreview-482737131", "createdAt": "2020-09-04T15:16:05Z", "commit": {"oid": "cba01f7098003e46446faea9cc898d217d8f1674"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNToxNjowNVrOHNRqOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNToyNDozMlrOHNR8hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY4Mjg3Mw==", "bodyText": "I'm used to adding new parameters at the end rather than inserting them in between because this is an \"optional\" parameter.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14801#discussion_r483682873", "createdAt": "2020-09-04T15:16:05Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/InterceptorManager.java", "diffHunk": "@@ -152,12 +156,36 @@ public InterceptorManager(String testName, Map<String, String> textReplacementRu\n      * @throws UncheckedIOException An existing test session record could not be located or the data could not be\n      * deserialized into an instance of {@link RecordedData}.\n      * @throws NullPointerException If {@code testName} or {@code textReplacementRules} is {@code null}.\n+     * @deprecated Use {@link #InterceptorManager(String, String, Map, boolean)} instead.\n      */\n+    @Deprecated\n     public InterceptorManager(String testName, Map<String, String> textReplacementRules, boolean doNotRecord) {\n+        this(testName, testName, textReplacementRules, doNotRecord);\n+    }\n+\n+    /**\n+     * Creates a new InterceptorManager that replays test session records. It takes a set of {@code\n+     * textReplacementRules}, that can be used by {@link PlaybackClient} to replace values in a {@link\n+     * NetworkCallRecord#getResponse()}.\n+     *\n+     * The test session records are read from: \"<i>session-records/{@code testName}.json</i>\"\n+     *\n+     * @param testName Name of the test.\n+     * @param playbackRecordName Full name of the test including its iteration, used as the playback record name.\n+     * @param textReplacementRules A set of rules to replace text in {@link NetworkCallRecord#getResponse()} when\n+     * playing back network calls.\n+     * @param doNotRecord Flag indicating whether network calls should be record or played back.\n+     * @throws UncheckedIOException An existing test session record could not be located or the data could not be\n+     * deserialized into an instance of {@link RecordedData}.\n+     * @throws NullPointerException If {@code testName} or {@code textReplacementRules} is {@code null}.\n+     */\n+    public InterceptorManager(String testName, String playbackRecordName, Map<String, String> textReplacementRules,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cba01f7098003e46446faea9cc898d217d8f1674"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY4MzY5NQ==", "bodyText": "Do we need this as a method? It's only invoked once.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14801#discussion_r483683695", "createdAt": "2020-09-04T15:17:26Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/InterceptorManager.java", "diffHunk": "@@ -252,23 +275,32 @@ private File getRecordFolder() {\n     /*\n      * Attempts to retrieve the playback file, if it is not found an exception is thrown as playback can't continue.\n      */\n-    private File getRecordFile(String testName) {\n-        File playbackFile = new File(getRecordFolder(), testName + \".json\");\n+    private File getRecordFile() {\n+        File playbackFile = new File(getRecordFolder(), playbackRecordName + \".json\");\n+        File oldPlaybackFile = new File(getRecordFolder(), testName + \".json\");\n \n-        if (!playbackFile.exists()) {\n+        if (!playbackFile.exists() && !oldPlaybackFile.exists()) {\n             throw logger.logExceptionAsError(new RuntimeException(String.format(\n-                \"Missing playback file. File path: %s. \", playbackFile.getPath())));\n+                \"Missing both new and old playback files. Files are %s and %s.\", playbackFile.getPath(),\n+                oldPlaybackFile.getPath())));\n         }\n \n-        logger.info(\"==> Playback file path: \" + playbackFile.getPath());\n-        return playbackFile;\n+        if (playbackFile.exists()) {\n+            logger.info(\"==> Playback file path: {}\", playbackFile.getPath());\n+            return playbackFile;\n+        } else {\n+            logger.info(\"==> Playback file path: {}\", oldPlaybackFile.getPath());\n+            return oldPlaybackFile;\n+        }\n     }\n \n-    private void writeDataToFile() throws IOException {\n-        ObjectMapper mapper = new ObjectMapper();\n-        mapper.enable(SerializationFeature.INDENT_OUTPUT);\n-        File recordFile = createRecordFile(testName);\n-        mapper.writeValue(recordFile, recordedData);\n+    private void writeDataToFile() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cba01f7098003e46446faea9cc898d217d8f1674"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY4Mzc3MQ==", "bodyText": "nit: empty line", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14801#discussion_r483683771", "createdAt": "2020-09-04T15:17:35Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/InterceptorManager.java", "diffHunk": "@@ -252,23 +275,32 @@ private File getRecordFolder() {\n     /*\n      * Attempts to retrieve the playback file, if it is not found an exception is thrown as playback can't continue.\n      */\n-    private File getRecordFile(String testName) {\n-        File playbackFile = new File(getRecordFolder(), testName + \".json\");\n+    private File getRecordFile() {\n+        File playbackFile = new File(getRecordFolder(), playbackRecordName + \".json\");\n+        File oldPlaybackFile = new File(getRecordFolder(), testName + \".json\");\n \n-        if (!playbackFile.exists()) {\n+        if (!playbackFile.exists() && !oldPlaybackFile.exists()) {\n             throw logger.logExceptionAsError(new RuntimeException(String.format(\n-                \"Missing playback file. File path: %s. \", playbackFile.getPath())));\n+                \"Missing both new and old playback files. Files are %s and %s.\", playbackFile.getPath(),\n+                oldPlaybackFile.getPath())));\n         }\n \n-        logger.info(\"==> Playback file path: \" + playbackFile.getPath());\n-        return playbackFile;\n+        if (playbackFile.exists()) {\n+            logger.info(\"==> Playback file path: {}\", playbackFile.getPath());\n+            return playbackFile;\n+        } else {\n+            logger.info(\"==> Playback file path: {}\", oldPlaybackFile.getPath());\n+            return oldPlaybackFile;\n+        }\n     }\n \n-    private void writeDataToFile() throws IOException {\n-        ObjectMapper mapper = new ObjectMapper();\n-        mapper.enable(SerializationFeature.INDENT_OUTPUT);\n-        File recordFile = createRecordFile(testName);\n-        mapper.writeValue(recordFile, recordedData);\n+    private void writeDataToFile() {\n+        try {\n+            RECORD_MAPPER.writeValue(createRecordFile(playbackRecordName), recordedData);\n+        } catch (IOException ex) {\n+            throw logger.logExceptionAsError(new UncheckedIOException(\"Unable to write data to playback file.\", ex));\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cba01f7098003e46446faea9cc898d217d8f1674"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY4NzU1Ng==", "bodyText": "Do we need this TEST_ITERATION_CACHE? It is a static variable that never gets cleared. I can imagine if we have a test suite like storage this growing.\nAnother concern is that we use this test iteration to name our files. It assumes that the resolution of the test matrix for paramterised tests will be the same. If the parameters get resolved in a different order, our tests will break and it'll be hard to debug. \"What set of parameters did foo[1].json represent?\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14801#discussion_r483687556", "createdAt": "2020-09-04T15:24:32Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestContextManager.java", "diffHunk": "@@ -4,21 +4,38 @@\n \n import com.azure.core.test.annotation.DoNotRecord;\n \n+import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n import static org.junit.jupiter.api.Assumptions.assumeTrue;\n \n /**\n  * This class handles managing context about a test, such as custom testing annotations and verifying whether the test\n  * is capable of running.\n  */\n+@SuppressWarnings(\"unchecked\")\n public class TestContextManager {\n+    private static final Map<String, AtomicInteger> TEST_ITERATION_CACHE = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cba01f7098003e46446faea9cc898d217d8f1674"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "752cde7d8800d77eecca135843ab7edc5d7bd480", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/752cde7d8800d77eecca135843ab7edc5d7bd480", "committedDate": "2020-09-08T16:35:09Z", "message": "Merge branch 'master' into AzTest_EnhanceTestingRecording"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "376e17b6fb46f1bb4982082e74ad6b979fd1ca14", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/376e17b6fb46f1bb4982082e74ad6b979fd1ca14", "committedDate": "2020-09-08T18:12:59Z", "message": "Changes based an feedback, updating loading of all HttpClients on the class path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2aa16a93e56091f44a36e907495a3e7527f1390a", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2aa16a93e56091f44a36e907495a3e7527f1390a", "committedDate": "2020-09-09T16:20:58Z", "message": "Merged in master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e333878244e2042ab1ea32e2b30e6873514e9e3", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1e333878244e2042ab1ea32e2b30e6873514e9e3", "committedDate": "2020-09-09T22:39:33Z", "message": "Updated to get iteration number from ExtensionContext which includes it as part of its unique ID"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4908, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}