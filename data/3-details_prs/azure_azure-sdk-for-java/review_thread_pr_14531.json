{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0OTMyNjU0", "number": 14531, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDozODoxMVrOEdYSow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDozMjoxNlrOEgJXuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MjQyMTQ3OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/implementation/Constants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDozODoxMVrOHIgaHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDozODoxMVrOHIgaHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY4MTYyOA==", "bodyText": "rename to SAS_AUTHORIZED_AAD_OBJECT_ID", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14531#discussion_r478681628", "createdAt": "2020-08-27T20:38:11Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/implementation/Constants.java", "diffHunk": "@@ -347,6 +347,26 @@ private HeaderConstants() {\n          */\n         public static final String SAS_SIGNED_KEY_VERSION = \"skv\";\n \n+        /**\n+         * The SAS AAD object id parameter for user delegation SAS.\n+         */\n+        public static final String SAS_AAD_OBJECT_ID = \"saoid\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd5dc6e0be6480b27a2c11c63fd097b32771a2af"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MjQyMjM4OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/sas/CommonSasQueryParameters.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDozODozMlrOHIgauw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDozODozMlrOHIgauw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY4MTc4Nw==", "bodyText": "rename to authorized", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14531#discussion_r478681787", "createdAt": "2020-08-27T20:38:32Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/sas/CommonSasQueryParameters.java", "diffHunk": "@@ -62,6 +63,14 @@\n \n     private final String contentType;\n \n+    private final Integer directoryDepth;\n+\n+    private final String aadObjectId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd5dc6e0be6480b27a2c11c63fd097b32771a2af"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNjkzMjIzOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/util/BlobSasImplUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjoxNTo1NFrOHMLMlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjoxNTo1NFrOHMLMlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUyODQwNQ==", "bodyText": "Can you comment these lines to explain we set it to null to force the latest version?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14531#discussion_r482528405", "createdAt": "2020-09-02T22:15:54Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/util/BlobSasImplUtil.java", "diffHunk": "@@ -110,7 +110,7 @@ public BlobSasImplUtil(BlobServiceSasSignatureValues sasValues, String container\n             throw logger.logExceptionAsError(\n                 new IllegalArgumentException(\"'snapshot' and 'versionId' cannot be used at the same time.\"));\n         }\n-        this.version = sasValues.getVersion();\n+        this.version = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78448a933f2ce1242d122c5db5f6654b0a32fa35"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzAwMjYzOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/SasClientTests.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjoyNzozN1rOHML65A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzowODoyNVrOHMv-SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU0MDI2MA==", "bodyText": "Delete", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14531#discussion_r482540260", "createdAt": "2020-09-02T22:27:37Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/SasClientTests.groovy", "diffHunk": "@@ -209,7 +209,7 @@ class SasClientTests extends APISpec {\n         validateSasProperties(properties)\n     }\n \n-    @Ignore(\"User Delegation SAS string to sign has changed. Reenable when working on feature.\")\n+//    @Ignore(\"User Delegation SAS string to sign has changed. Reenable when working on feature.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78448a933f2ce1242d122c5db5f6654b0a32fa35"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEzMDk1Mg==", "bodyText": "deleted", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14531#discussion_r483130952", "createdAt": "2020-09-03T17:08:25Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/SasClientTests.groovy", "diffHunk": "@@ -209,7 +209,7 @@ class SasClientTests extends APISpec {\n         validateSasProperties(properties)\n     }\n \n-    @Ignore(\"User Delegation SAS string to sign has changed. Reenable when working on feature.\")\n+//    @Ignore(\"User Delegation SAS string to sign has changed. Reenable when working on feature.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU0MDI2MA=="}, "originalCommit": {"oid": "78448a933f2ce1242d122c5db5f6654b0a32fa35"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzAyNTM5OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/util/BlobSasImplUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjozMDo0NlrOHMMJ-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjozMDo0NlrOHMMJ-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU0NDEyMA==", "bodyText": "Can you leave a comment that these only apply to hns?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14531#discussion_r482544120", "createdAt": "2020-09-02T22:30:46Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/util/BlobSasImplUtil.java", "diffHunk": "@@ -314,6 +314,9 @@ private String stringToSign(final UserDelegationKey key, String canonicalName) {\n             key.getSignedExpiry() == null ? \"\" : Constants.ISO_8601_UTC_DATE_FORMATTER.format(key.getSignedExpiry()),\n             key.getSignedService() == null ? \"\" : key.getSignedService(),\n             key.getSignedVersion() == null ? \"\" : key.getSignedVersion(),\n+            \"\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78448a933f2ce1242d122c5db5f6654b0a32fa35"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzA5MDM0OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/implementation/util/DataLakeSasImplUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjo0MDowMlrOHMM1FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzoxMToyNVrOHMwErg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU1NTE1Ng==", "bodyText": "Is this comment not true for the whole if block?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14531#discussion_r482555156", "createdAt": "2020-09-02T22:40:02Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/implementation/util/DataLakeSasImplUtil.java", "diffHunk": "@@ -0,0 +1,342 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.implementation.util;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.file.datalake.DataLakeServiceVersion;\n+import com.azure.storage.file.datalake.models.UserDelegationKey;\n+import com.azure.storage.common.StorageSharedKeyCredential;\n+import com.azure.storage.common.implementation.Constants;\n+import com.azure.storage.common.implementation.StorageImplUtils;\n+import com.azure.storage.common.sas.SasIpRange;\n+import com.azure.storage.common.sas.SasProtocol;\n+import com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues;\n+import com.azure.storage.file.datalake.sas.FileSystemSasPermission;\n+import com.azure.storage.file.datalake.sas.PathSasPermission;\n+\n+import java.time.OffsetDateTime;\n+import java.util.Objects;\n+\n+import static com.azure.storage.common.implementation.SasImplUtils.formatQueryParameterDate;\n+import static com.azure.storage.common.implementation.SasImplUtils.tryAppendQueryParameter;\n+\n+/**\n+ * This class provides helper methods for common datalake service sas patterns.\n+ *\n+ * RESERVED FOR INTERNAL USE.\n+ */\n+public class DataLakeSasImplUtil {\n+    /**\n+     * The SAS blob (datalake file) constant.\n+     */\n+    private static final String SAS_BLOB_CONSTANT = \"b\";\n+\n+    /**\n+     * The SAS directory (datalake directory) constant.\n+     */\n+    private static final String SAS_DIRECTORY_CONSTANT = \"d\";\n+\n+    /**\n+     * The SAS blob container (datalake file system) constant.\n+     */\n+    private static final String SAS_CONTAINER_CONSTANT = \"c\";\n+\n+    private final ClientLogger logger = new ClientLogger(DataLakeSasImplUtil.class);\n+\n+    private static String version = DataLakeServiceVersion.getLatest().getVersion();\n+\n+    private SasProtocol protocol;\n+\n+    private OffsetDateTime startTime;\n+\n+    private OffsetDateTime expiryTime;\n+\n+    private String permissions;\n+\n+    private SasIpRange sasIpRange;\n+\n+    private String fileSystemName;\n+\n+    private String pathName;\n+\n+    private String resource;\n+\n+    private String identifier;\n+\n+    private String cacheControl;\n+\n+    private String contentDisposition;\n+\n+    private String contentEncoding;\n+\n+    private String contentLanguage;\n+\n+    private String contentType;\n+\n+    private Boolean isDirectory;\n+\n+    private Integer directoryDepth;\n+\n+    private String authorizedAadObjectId;\n+\n+    private String unauthorizedAadObjectId;\n+\n+    private String correlationId;\n+\n+    /**\n+     * Creates a new {@link DataLakeSasImplUtil} with the specified parameters\n+     *\n+     * @param sasValues {@link DataLakeServiceSasSignatureValues}\n+     * @param fileSystemName The file system name\n+     */\n+    public DataLakeSasImplUtil(DataLakeServiceSasSignatureValues sasValues, String fileSystemName) {\n+        this(sasValues, fileSystemName, null, false);\n+    }\n+\n+    /**\n+     * Creates a new {@link DataLakeSasImplUtil} with the specified parameters\n+     *\n+     * @param sasValues {@link DataLakeServiceSasSignatureValues}\n+     * @param fileSystemName The file system name\n+     * @param pathName The path name\n+     * @param isDirectory Whether or not the path points to a directory.\n+     */\n+    public DataLakeSasImplUtil(DataLakeServiceSasSignatureValues sasValues, String fileSystemName, String pathName,\n+        boolean isDirectory) {\n+        Objects.requireNonNull(sasValues);\n+        this.protocol = sasValues.getProtocol();\n+        this.startTime = sasValues.getStartTime();\n+        this.expiryTime = sasValues.getExpiryTime();\n+        this.permissions = sasValues.getPermissions();\n+        this.sasIpRange = sasValues.getSasIpRange();\n+        this.fileSystemName = fileSystemName;\n+        this.pathName = pathName;\n+        this.identifier = sasValues.getIdentifier();\n+        this.cacheControl = sasValues.getCacheControl();\n+        this.contentDisposition = sasValues.getContentDisposition();\n+        this.contentEncoding = sasValues.getContentEncoding();\n+        this.contentLanguage = sasValues.getContentLanguage();\n+        this.contentType = sasValues.getContentType();\n+        if (sasValues.isPosixCheckPerformed()) {\n+            this.unauthorizedAadObjectId = sasValues.getObjectId();\n+        } else {\n+            this.authorizedAadObjectId = sasValues.getObjectId();\n+        }\n+        this.correlationId = sasValues.getCorrelationId();\n+        this.isDirectory = isDirectory;\n+    }\n+\n+    /**\n+     * Generates a Sas signed with a {@link StorageSharedKeyCredential}\n+     *\n+     * @param storageSharedKeyCredentials {@link StorageSharedKeyCredential}\n+     * @return A String representing the Sas\n+     */\n+    public String generateSas(StorageSharedKeyCredential storageSharedKeyCredentials) {\n+        StorageImplUtils.assertNotNull(\"storageSharedKeyCredentials\", storageSharedKeyCredentials);\n+\n+        ensureState();\n+\n+        // Signature is generated on the un-url-encoded values.\n+        final String canonicalName = getCanonicalName(storageSharedKeyCredentials.getAccountName());\n+        final String signature = storageSharedKeyCredentials.computeHmac256(stringToSign(canonicalName));\n+\n+        return encode(null /* userDelegationKey */, signature);\n+    }\n+\n+    /**\n+     * Generates a Sas signed with a {@link UserDelegationKey}\n+     *\n+     * @param delegationKey {@link UserDelegationKey}\n+     * @param accountName The account name\n+     * @return A String representing the Sas\n+     */\n+    public String generateUserDelegationSas(UserDelegationKey delegationKey, String accountName) {\n+        StorageImplUtils.assertNotNull(\"delegationKey\", delegationKey);\n+        StorageImplUtils.assertNotNull(\"accountName\", accountName);\n+\n+        ensureState();\n+\n+        // Signature is generated on the un-url-encoded values.\n+        final String canonicalName = getCanonicalName(accountName);\n+        String signature = StorageImplUtils.computeHMac256(\n+            delegationKey.getValue(), stringToSign(delegationKey, canonicalName));\n+\n+        return encode(delegationKey, signature);\n+    }\n+\n+    /**\n+     * Encodes a Sas from the values in this type.\n+     * @param userDelegationKey {@link UserDelegationKey}\n+     * @param signature The signature of the Sas.\n+     * @return A String representing the Sas.\n+     */\n+    private String encode(UserDelegationKey userDelegationKey, String signature) {\n+        /*\n+         We should be url-encoding each key and each value, but because we know all the keys and values will encode to\n+         themselves, we cheat except for the signature value.\n+         */\n+        StringBuilder sb = new StringBuilder();\n+\n+        tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_SERVICE_VERSION, version);\n+        tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_PROTOCOL, this.protocol);\n+        tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_START_TIME, formatQueryParameterDate(this.startTime));\n+        tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_EXPIRY_TIME, formatQueryParameterDate(this.expiryTime));\n+        tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_IP_RANGE, this.sasIpRange);\n+        tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_SIGNED_IDENTIFIER, this.identifier);\n+\n+        if (userDelegationKey != null) {\n+            tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_SIGNED_OBJECT_ID,\n+                userDelegationKey.getSignedObjectId());\n+            tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_SIGNED_TENANT_ID,\n+                userDelegationKey.getSignedTenantId());\n+            tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_SIGNED_KEY_START,\n+                formatQueryParameterDate(userDelegationKey.getSignedStart()));\n+            tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_SIGNED_KEY_EXPIRY,\n+                formatQueryParameterDate(userDelegationKey.getSignedExpiry()));\n+            tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_SIGNED_KEY_SERVICE,\n+                userDelegationKey.getSignedService());\n+            tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_SIGNED_KEY_VERSION,\n+                userDelegationKey.getSignedVersion());\n+\n+            /* Only parameters relevant for user delegation SAS. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78448a933f2ce1242d122c5db5f6654b0a32fa35"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEzMjU5MA==", "bodyText": "Yeah I wanted to more be like these are the only params relevant to user delegation sas but not actually tied to the user delegation key", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14531#discussion_r483132590", "createdAt": "2020-09-03T17:11:25Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/implementation/util/DataLakeSasImplUtil.java", "diffHunk": "@@ -0,0 +1,342 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.implementation.util;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.file.datalake.DataLakeServiceVersion;\n+import com.azure.storage.file.datalake.models.UserDelegationKey;\n+import com.azure.storage.common.StorageSharedKeyCredential;\n+import com.azure.storage.common.implementation.Constants;\n+import com.azure.storage.common.implementation.StorageImplUtils;\n+import com.azure.storage.common.sas.SasIpRange;\n+import com.azure.storage.common.sas.SasProtocol;\n+import com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues;\n+import com.azure.storage.file.datalake.sas.FileSystemSasPermission;\n+import com.azure.storage.file.datalake.sas.PathSasPermission;\n+\n+import java.time.OffsetDateTime;\n+import java.util.Objects;\n+\n+import static com.azure.storage.common.implementation.SasImplUtils.formatQueryParameterDate;\n+import static com.azure.storage.common.implementation.SasImplUtils.tryAppendQueryParameter;\n+\n+/**\n+ * This class provides helper methods for common datalake service sas patterns.\n+ *\n+ * RESERVED FOR INTERNAL USE.\n+ */\n+public class DataLakeSasImplUtil {\n+    /**\n+     * The SAS blob (datalake file) constant.\n+     */\n+    private static final String SAS_BLOB_CONSTANT = \"b\";\n+\n+    /**\n+     * The SAS directory (datalake directory) constant.\n+     */\n+    private static final String SAS_DIRECTORY_CONSTANT = \"d\";\n+\n+    /**\n+     * The SAS blob container (datalake file system) constant.\n+     */\n+    private static final String SAS_CONTAINER_CONSTANT = \"c\";\n+\n+    private final ClientLogger logger = new ClientLogger(DataLakeSasImplUtil.class);\n+\n+    private static String version = DataLakeServiceVersion.getLatest().getVersion();\n+\n+    private SasProtocol protocol;\n+\n+    private OffsetDateTime startTime;\n+\n+    private OffsetDateTime expiryTime;\n+\n+    private String permissions;\n+\n+    private SasIpRange sasIpRange;\n+\n+    private String fileSystemName;\n+\n+    private String pathName;\n+\n+    private String resource;\n+\n+    private String identifier;\n+\n+    private String cacheControl;\n+\n+    private String contentDisposition;\n+\n+    private String contentEncoding;\n+\n+    private String contentLanguage;\n+\n+    private String contentType;\n+\n+    private Boolean isDirectory;\n+\n+    private Integer directoryDepth;\n+\n+    private String authorizedAadObjectId;\n+\n+    private String unauthorizedAadObjectId;\n+\n+    private String correlationId;\n+\n+    /**\n+     * Creates a new {@link DataLakeSasImplUtil} with the specified parameters\n+     *\n+     * @param sasValues {@link DataLakeServiceSasSignatureValues}\n+     * @param fileSystemName The file system name\n+     */\n+    public DataLakeSasImplUtil(DataLakeServiceSasSignatureValues sasValues, String fileSystemName) {\n+        this(sasValues, fileSystemName, null, false);\n+    }\n+\n+    /**\n+     * Creates a new {@link DataLakeSasImplUtil} with the specified parameters\n+     *\n+     * @param sasValues {@link DataLakeServiceSasSignatureValues}\n+     * @param fileSystemName The file system name\n+     * @param pathName The path name\n+     * @param isDirectory Whether or not the path points to a directory.\n+     */\n+    public DataLakeSasImplUtil(DataLakeServiceSasSignatureValues sasValues, String fileSystemName, String pathName,\n+        boolean isDirectory) {\n+        Objects.requireNonNull(sasValues);\n+        this.protocol = sasValues.getProtocol();\n+        this.startTime = sasValues.getStartTime();\n+        this.expiryTime = sasValues.getExpiryTime();\n+        this.permissions = sasValues.getPermissions();\n+        this.sasIpRange = sasValues.getSasIpRange();\n+        this.fileSystemName = fileSystemName;\n+        this.pathName = pathName;\n+        this.identifier = sasValues.getIdentifier();\n+        this.cacheControl = sasValues.getCacheControl();\n+        this.contentDisposition = sasValues.getContentDisposition();\n+        this.contentEncoding = sasValues.getContentEncoding();\n+        this.contentLanguage = sasValues.getContentLanguage();\n+        this.contentType = sasValues.getContentType();\n+        if (sasValues.isPosixCheckPerformed()) {\n+            this.unauthorizedAadObjectId = sasValues.getObjectId();\n+        } else {\n+            this.authorizedAadObjectId = sasValues.getObjectId();\n+        }\n+        this.correlationId = sasValues.getCorrelationId();\n+        this.isDirectory = isDirectory;\n+    }\n+\n+    /**\n+     * Generates a Sas signed with a {@link StorageSharedKeyCredential}\n+     *\n+     * @param storageSharedKeyCredentials {@link StorageSharedKeyCredential}\n+     * @return A String representing the Sas\n+     */\n+    public String generateSas(StorageSharedKeyCredential storageSharedKeyCredentials) {\n+        StorageImplUtils.assertNotNull(\"storageSharedKeyCredentials\", storageSharedKeyCredentials);\n+\n+        ensureState();\n+\n+        // Signature is generated on the un-url-encoded values.\n+        final String canonicalName = getCanonicalName(storageSharedKeyCredentials.getAccountName());\n+        final String signature = storageSharedKeyCredentials.computeHmac256(stringToSign(canonicalName));\n+\n+        return encode(null /* userDelegationKey */, signature);\n+    }\n+\n+    /**\n+     * Generates a Sas signed with a {@link UserDelegationKey}\n+     *\n+     * @param delegationKey {@link UserDelegationKey}\n+     * @param accountName The account name\n+     * @return A String representing the Sas\n+     */\n+    public String generateUserDelegationSas(UserDelegationKey delegationKey, String accountName) {\n+        StorageImplUtils.assertNotNull(\"delegationKey\", delegationKey);\n+        StorageImplUtils.assertNotNull(\"accountName\", accountName);\n+\n+        ensureState();\n+\n+        // Signature is generated on the un-url-encoded values.\n+        final String canonicalName = getCanonicalName(accountName);\n+        String signature = StorageImplUtils.computeHMac256(\n+            delegationKey.getValue(), stringToSign(delegationKey, canonicalName));\n+\n+        return encode(delegationKey, signature);\n+    }\n+\n+    /**\n+     * Encodes a Sas from the values in this type.\n+     * @param userDelegationKey {@link UserDelegationKey}\n+     * @param signature The signature of the Sas.\n+     * @return A String representing the Sas.\n+     */\n+    private String encode(UserDelegationKey userDelegationKey, String signature) {\n+        /*\n+         We should be url-encoding each key and each value, but because we know all the keys and values will encode to\n+         themselves, we cheat except for the signature value.\n+         */\n+        StringBuilder sb = new StringBuilder();\n+\n+        tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_SERVICE_VERSION, version);\n+        tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_PROTOCOL, this.protocol);\n+        tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_START_TIME, formatQueryParameterDate(this.startTime));\n+        tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_EXPIRY_TIME, formatQueryParameterDate(this.expiryTime));\n+        tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_IP_RANGE, this.sasIpRange);\n+        tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_SIGNED_IDENTIFIER, this.identifier);\n+\n+        if (userDelegationKey != null) {\n+            tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_SIGNED_OBJECT_ID,\n+                userDelegationKey.getSignedObjectId());\n+            tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_SIGNED_TENANT_ID,\n+                userDelegationKey.getSignedTenantId());\n+            tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_SIGNED_KEY_START,\n+                formatQueryParameterDate(userDelegationKey.getSignedStart()));\n+            tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_SIGNED_KEY_EXPIRY,\n+                formatQueryParameterDate(userDelegationKey.getSignedExpiry()));\n+            tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_SIGNED_KEY_SERVICE,\n+                userDelegationKey.getSignedService());\n+            tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_SIGNED_KEY_VERSION,\n+                userDelegationKey.getSignedVersion());\n+\n+            /* Only parameters relevant for user delegation SAS. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU1NTE1Ng=="}, "originalCommit": {"oid": "78448a933f2ce1242d122c5db5f6654b0a32fa35"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTM3MzcxOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/sas/CommonSasQueryParameters.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoxNDo1MFrOHM17xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoxNDo1MFrOHM17xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyODYxNA==", "bodyText": "NIT - remove extra new line", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14531#discussion_r483228614", "createdAt": "2020-09-03T20:14:50Z", "author": {"login": "amnguye"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/sas/CommonSasQueryParameters.java", "diffHunk": "@@ -11,6 +11,7 @@\n import java.util.Map;\n import java.util.function.Function;\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b71fea6ffe7fb9514b5cc59777c1443a8d50523"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTM3ODIzOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-datalake/CHANGELOG.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoxNjowMlrOHM1-Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoxNjowMlrOHM1-Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyOTI0Ng==", "bodyText": "NIT - double space after \"..correlation ids for\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14531#discussion_r483229246", "createdAt": "2020-09-03T20:16:02Z", "author": {"login": "amnguye"}, "path": "sdk/storage/azure-storage-file-datalake/CHANGELOG.md", "diffHunk": "@@ -4,6 +4,7 @@\n - Added support for the 2019-02-10 service version.\n - Added support to schedule file expiration. \n - Added support to specify Arrow Output Serialization when querying a file. \n+- Added support to generate directory SAS and added support to specify additional user ids and correlation ids for  user delegation SAS.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b71fea6ffe7fb9514b5cc59777c1443a8d50523"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTQzNDE5OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/implementation/util/DataLakeSasImplUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDozMjoxNlrOHM2hSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDozMjoxNlrOHM2hSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzODIxNw==", "bodyText": "NIT - unrecognised -> unrecognized", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14531#discussion_r483238217", "createdAt": "2020-09-03T20:32:16Z", "author": {"login": "amnguye"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/implementation/util/DataLakeSasImplUtil.java", "diffHunk": "@@ -0,0 +1,342 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.implementation.util;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.file.datalake.DataLakeServiceVersion;\n+import com.azure.storage.file.datalake.models.UserDelegationKey;\n+import com.azure.storage.common.StorageSharedKeyCredential;\n+import com.azure.storage.common.implementation.Constants;\n+import com.azure.storage.common.implementation.StorageImplUtils;\n+import com.azure.storage.common.sas.SasIpRange;\n+import com.azure.storage.common.sas.SasProtocol;\n+import com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues;\n+import com.azure.storage.file.datalake.sas.FileSystemSasPermission;\n+import com.azure.storage.file.datalake.sas.PathSasPermission;\n+\n+import java.time.OffsetDateTime;\n+import java.util.Objects;\n+\n+import static com.azure.storage.common.implementation.SasImplUtils.formatQueryParameterDate;\n+import static com.azure.storage.common.implementation.SasImplUtils.tryAppendQueryParameter;\n+\n+/**\n+ * This class provides helper methods for common datalake service sas patterns.\n+ *\n+ * RESERVED FOR INTERNAL USE.\n+ */\n+public class DataLakeSasImplUtil {\n+    /**\n+     * The SAS blob (datalake file) constant.\n+     */\n+    private static final String SAS_BLOB_CONSTANT = \"b\";\n+\n+    /**\n+     * The SAS directory (datalake directory) constant.\n+     */\n+    private static final String SAS_DIRECTORY_CONSTANT = \"d\";\n+\n+    /**\n+     * The SAS blob container (datalake file system) constant.\n+     */\n+    private static final String SAS_CONTAINER_CONSTANT = \"c\";\n+\n+    private final ClientLogger logger = new ClientLogger(DataLakeSasImplUtil.class);\n+\n+    private static String version = DataLakeServiceVersion.getLatest().getVersion();\n+\n+    private SasProtocol protocol;\n+\n+    private OffsetDateTime startTime;\n+\n+    private OffsetDateTime expiryTime;\n+\n+    private String permissions;\n+\n+    private SasIpRange sasIpRange;\n+\n+    private String fileSystemName;\n+\n+    private String pathName;\n+\n+    private String resource;\n+\n+    private String identifier;\n+\n+    private String cacheControl;\n+\n+    private String contentDisposition;\n+\n+    private String contentEncoding;\n+\n+    private String contentLanguage;\n+\n+    private String contentType;\n+\n+    private Boolean isDirectory;\n+\n+    private Integer directoryDepth;\n+\n+    private String authorizedAadObjectId;\n+\n+    private String unauthorizedAadObjectId;\n+\n+    private String correlationId;\n+\n+    /**\n+     * Creates a new {@link DataLakeSasImplUtil} with the specified parameters\n+     *\n+     * @param sasValues {@link DataLakeServiceSasSignatureValues}\n+     * @param fileSystemName The file system name\n+     */\n+    public DataLakeSasImplUtil(DataLakeServiceSasSignatureValues sasValues, String fileSystemName) {\n+        this(sasValues, fileSystemName, null, false);\n+    }\n+\n+    /**\n+     * Creates a new {@link DataLakeSasImplUtil} with the specified parameters\n+     *\n+     * @param sasValues {@link DataLakeServiceSasSignatureValues}\n+     * @param fileSystemName The file system name\n+     * @param pathName The path name\n+     * @param isDirectory Whether or not the path points to a directory.\n+     */\n+    public DataLakeSasImplUtil(DataLakeServiceSasSignatureValues sasValues, String fileSystemName, String pathName,\n+        boolean isDirectory) {\n+        Objects.requireNonNull(sasValues);\n+        this.protocol = sasValues.getProtocol();\n+        this.startTime = sasValues.getStartTime();\n+        this.expiryTime = sasValues.getExpiryTime();\n+        this.permissions = sasValues.getPermissions();\n+        this.sasIpRange = sasValues.getSasIpRange();\n+        this.fileSystemName = fileSystemName;\n+        this.pathName = pathName;\n+        this.identifier = sasValues.getIdentifier();\n+        this.cacheControl = sasValues.getCacheControl();\n+        this.contentDisposition = sasValues.getContentDisposition();\n+        this.contentEncoding = sasValues.getContentEncoding();\n+        this.contentLanguage = sasValues.getContentLanguage();\n+        this.contentType = sasValues.getContentType();\n+        if (sasValues.isPosixCheckPerformed()) {\n+            this.unauthorizedAadObjectId = sasValues.getObjectId();\n+        } else {\n+            this.authorizedAadObjectId = sasValues.getObjectId();\n+        }\n+        this.correlationId = sasValues.getCorrelationId();\n+        this.isDirectory = isDirectory;\n+    }\n+\n+    /**\n+     * Generates a Sas signed with a {@link StorageSharedKeyCredential}\n+     *\n+     * @param storageSharedKeyCredentials {@link StorageSharedKeyCredential}\n+     * @return A String representing the Sas\n+     */\n+    public String generateSas(StorageSharedKeyCredential storageSharedKeyCredentials) {\n+        StorageImplUtils.assertNotNull(\"storageSharedKeyCredentials\", storageSharedKeyCredentials);\n+\n+        ensureState();\n+\n+        // Signature is generated on the un-url-encoded values.\n+        final String canonicalName = getCanonicalName(storageSharedKeyCredentials.getAccountName());\n+        final String signature = storageSharedKeyCredentials.computeHmac256(stringToSign(canonicalName));\n+\n+        return encode(null /* userDelegationKey */, signature);\n+    }\n+\n+    /**\n+     * Generates a Sas signed with a {@link UserDelegationKey}\n+     *\n+     * @param delegationKey {@link UserDelegationKey}\n+     * @param accountName The account name\n+     * @return A String representing the Sas\n+     */\n+    public String generateUserDelegationSas(UserDelegationKey delegationKey, String accountName) {\n+        StorageImplUtils.assertNotNull(\"delegationKey\", delegationKey);\n+        StorageImplUtils.assertNotNull(\"accountName\", accountName);\n+\n+        ensureState();\n+\n+        // Signature is generated on the un-url-encoded values.\n+        final String canonicalName = getCanonicalName(accountName);\n+        String signature = StorageImplUtils.computeHMac256(\n+            delegationKey.getValue(), stringToSign(delegationKey, canonicalName));\n+\n+        return encode(delegationKey, signature);\n+    }\n+\n+    /**\n+     * Encodes a Sas from the values in this type.\n+     * @param userDelegationKey {@link UserDelegationKey}\n+     * @param signature The signature of the Sas.\n+     * @return A String representing the Sas.\n+     */\n+    private String encode(UserDelegationKey userDelegationKey, String signature) {\n+        /*\n+         We should be url-encoding each key and each value, but because we know all the keys and values will encode to\n+         themselves, we cheat except for the signature value.\n+         */\n+        StringBuilder sb = new StringBuilder();\n+\n+        tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_SERVICE_VERSION, version);\n+        tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_PROTOCOL, this.protocol);\n+        tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_START_TIME, formatQueryParameterDate(this.startTime));\n+        tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_EXPIRY_TIME, formatQueryParameterDate(this.expiryTime));\n+        tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_IP_RANGE, this.sasIpRange);\n+        tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_SIGNED_IDENTIFIER, this.identifier);\n+\n+        if (userDelegationKey != null) {\n+            tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_SIGNED_OBJECT_ID,\n+                userDelegationKey.getSignedObjectId());\n+            tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_SIGNED_TENANT_ID,\n+                userDelegationKey.getSignedTenantId());\n+            tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_SIGNED_KEY_START,\n+                formatQueryParameterDate(userDelegationKey.getSignedStart()));\n+            tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_SIGNED_KEY_EXPIRY,\n+                formatQueryParameterDate(userDelegationKey.getSignedExpiry()));\n+            tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_SIGNED_KEY_SERVICE,\n+                userDelegationKey.getSignedService());\n+            tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_SIGNED_KEY_VERSION,\n+                userDelegationKey.getSignedVersion());\n+\n+            /* Only parameters relevant for user delegation SAS. */\n+            tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_AUTHORIZED_OBJECT_ID, this.authorizedAadObjectId);\n+            tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_UNAUTHORIZED_OBJECT_ID, this.unauthorizedAadObjectId);\n+            tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_CORRELATION_ID, this.correlationId);\n+        }\n+\n+        tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_SIGNED_RESOURCE, this.resource);\n+        tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_SIGNED_PERMISSIONS, this.permissions);\n+\n+        if (this.isDirectory) {\n+            tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_DIRECTORY_DEPTH, this.directoryDepth);\n+        }\n+\n+        tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_SIGNATURE, signature);\n+        tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_CACHE_CONTROL, this.cacheControl);\n+        tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_CONTENT_DISPOSITION, this.contentDisposition);\n+        tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_CONTENT_ENCODING, this.contentEncoding);\n+        tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_CONTENT_LANGUAGE, this.contentLanguage);\n+        tryAppendQueryParameter(sb, Constants.UrlConstants.SAS_CONTENT_TYPE, this.contentType);\n+\n+        return sb.toString();\n+\n+    }\n+\n+    /**\n+     * Ensures that the builder's properties are in a consistent state.\n+\n+     * 1. If there is no identifier set, ensure expiryTime and permissions are set.\n+     * 2. Resource name is chosen by:\n+     *    a. If \"BlobName\" is _not_ set, it is a container resource.\n+     *    b. Otherwise, if \"SnapshotId\" is set, it is a blob snapshot resource.\n+     *    c. Otherwise, if \"VersionId\" is set, it is a blob version resource.\n+     *    d. Otherwise, it is a blob resource.\n+     * 3. Reparse permissions depending on what the resource is. If it is an unrecognised resource, do nothing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b71fea6ffe7fb9514b5cc59777c1443a8d50523"}, "originalPosition": 237}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1432, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}