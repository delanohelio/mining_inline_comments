{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNTMxODkx", "number": 12610, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoxMzo1N1rOEJwPwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzo1NDoxNVrOEJxH_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjYzMTA2OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoxMzo1N1rOGqacpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoxNzozMlrOGqalGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyNjY5NQ==", "bodyText": "Was Azure.Search.Documents pulled from .NET? For Java should it be azure-search-documents?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12610#discussion_r447126695", "createdAt": "2020-06-29T17:13:57Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/README.md", "diffHunk": "@@ -113,61 +168,252 @@ SearchAsyncClient searchAsyncClient = new SearchClientBuilder()\n     .buildAsyncClient();\n ```\n \n-## Key concepts\n+### Send your first search query\n \n-Azure Cognitive Search service has the concepts of search services and indexes and documents, where a search service contains \n-one or more indexes that provides persistent storage of searchable data, and data is loaded in the form of JSON documents. \n-Data can be pushed to an index from an external data source, but if you use an indexer, it's possible to crawl a data \n-source to extract and load data into an index.\n+To get running immediately, we're going to connect to a well-known sandbox\n+Search service provided by Microsoft. This means you do not need an Azure\n+subscription or Azure Cognitive Search service to try out this query.\n \n-There are several types of operations that can be executed against the service:\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L122-L147 -->\n+```Java\n+// We'll connect to the Azure Cognitive Search public sandbox and send a\n+// query to its \"nycjobs\" index built from a public dataset of available jobs\n+// in New York.\n+String serviceName = \"azs-playground\";\n+String indexName = \"nycjobs\";\n+String apiKey = \"252044BE3886FE4A8E3BAA4F595114BB\";\n+\n+// Create a SearchClient to send queries\n+String serviceEndpoint = String.format(\"https://%s.search.windows.net/\", serviceName);\n+AzureKeyCredential credential = new AzureKeyCredential(apiKey);\n+SearchClient client = new SearchClientBuilder()\n+    .endpoint(serviceEndpoint)\n+    .credential(credential)\n+    .indexName(indexName)\n+    .buildClient();\n \n--   [Index management operations](https://docs.microsoft.com/en-us/rest/api/searchservice/index-operations). Create, delete, update, or configure a search index.\n--   [Document operations](https://docs.microsoft.com/en-us/rest/api/searchservice/document-operations). Add, update, or delete documents in the index, query the index, or look up specific documents by ID.\n--   [Indexer operations](https://docs.microsoft.com/en-us/rest/api/searchservice/indexer-operations). Automate aspects of an indexing operation by configuring a data source and an indexer that you can schedule or run on demand. This feature is supported for a limited number of data source types.\n--   [Skillset operations](https://docs.microsoft.com/en-us/rest/api/searchservice/skillset-operations). Part of AI workload, a skillset defines a series of a series of enrichment processing steps. A skillset is consumed by an indexer.\n--   [Synonym map operations](https://docs.microsoft.com/en-us/rest/api/searchservice/synonym-map-operations). A synonym map is a service-level resource that contains user-defined synonyms. This resource is maintained independently from search indexes. Once uploaded, you can point any searchable field to the synonym map (one per field).\n+// Let's get the top 5 jobs related to Microsoft\n+SearchPagedIterable searchResultsIterable = client.search(\"Microsoft\", new SearchOptions().setTop(5),\n+    Context.NONE);\n+for (SearchResult searchResult: searchResultsIterable) {\n+    SearchDocument document = searchResult.getDocument(SearchDocument.class);\n+    String title = (String) document.get(\"business_title\");\n+    String description = (String) document.get(\"job_description\");\n+    System.out.println(String.format(\"The business title is %s, and here is the description: %s\",\n+        title, description));\n+}\n+```\n+\n+## Key concepts\n+\n+An Azure Cognitive Search service contains one or more indexes that provide\n+persistent storage of searchable data in the form of JSON documents.  _(If\n+you're brand new to search, you can make a very rough analogy between\n+indexes and database tables.)_  The Azure.Search.Documents client library", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1b315d2a937f50dd07bd75df482239e68ee96eb"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyODg1Nw==", "bodyText": "Yes, changed in latest commits.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12610#discussion_r447128857", "createdAt": "2020-06-29T17:17:32Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/README.md", "diffHunk": "@@ -113,61 +168,252 @@ SearchAsyncClient searchAsyncClient = new SearchClientBuilder()\n     .buildAsyncClient();\n ```\n \n-## Key concepts\n+### Send your first search query\n \n-Azure Cognitive Search service has the concepts of search services and indexes and documents, where a search service contains \n-one or more indexes that provides persistent storage of searchable data, and data is loaded in the form of JSON documents. \n-Data can be pushed to an index from an external data source, but if you use an indexer, it's possible to crawl a data \n-source to extract and load data into an index.\n+To get running immediately, we're going to connect to a well-known sandbox\n+Search service provided by Microsoft. This means you do not need an Azure\n+subscription or Azure Cognitive Search service to try out this query.\n \n-There are several types of operations that can be executed against the service:\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L122-L147 -->\n+```Java\n+// We'll connect to the Azure Cognitive Search public sandbox and send a\n+// query to its \"nycjobs\" index built from a public dataset of available jobs\n+// in New York.\n+String serviceName = \"azs-playground\";\n+String indexName = \"nycjobs\";\n+String apiKey = \"252044BE3886FE4A8E3BAA4F595114BB\";\n+\n+// Create a SearchClient to send queries\n+String serviceEndpoint = String.format(\"https://%s.search.windows.net/\", serviceName);\n+AzureKeyCredential credential = new AzureKeyCredential(apiKey);\n+SearchClient client = new SearchClientBuilder()\n+    .endpoint(serviceEndpoint)\n+    .credential(credential)\n+    .indexName(indexName)\n+    .buildClient();\n \n--   [Index management operations](https://docs.microsoft.com/en-us/rest/api/searchservice/index-operations). Create, delete, update, or configure a search index.\n--   [Document operations](https://docs.microsoft.com/en-us/rest/api/searchservice/document-operations). Add, update, or delete documents in the index, query the index, or look up specific documents by ID.\n--   [Indexer operations](https://docs.microsoft.com/en-us/rest/api/searchservice/indexer-operations). Automate aspects of an indexing operation by configuring a data source and an indexer that you can schedule or run on demand. This feature is supported for a limited number of data source types.\n--   [Skillset operations](https://docs.microsoft.com/en-us/rest/api/searchservice/skillset-operations). Part of AI workload, a skillset defines a series of a series of enrichment processing steps. A skillset is consumed by an indexer.\n--   [Synonym map operations](https://docs.microsoft.com/en-us/rest/api/searchservice/synonym-map-operations). A synonym map is a service-level resource that contains user-defined synonyms. This resource is maintained independently from search indexes. Once uploaded, you can point any searchable field to the synonym map (one per field).\n+// Let's get the top 5 jobs related to Microsoft\n+SearchPagedIterable searchResultsIterable = client.search(\"Microsoft\", new SearchOptions().setTop(5),\n+    Context.NONE);\n+for (SearchResult searchResult: searchResultsIterable) {\n+    SearchDocument document = searchResult.getDocument(SearchDocument.class);\n+    String title = (String) document.get(\"business_title\");\n+    String description = (String) document.get(\"job_description\");\n+    System.out.println(String.format(\"The business title is %s, and here is the description: %s\",\n+        title, description));\n+}\n+```\n+\n+## Key concepts\n+\n+An Azure Cognitive Search service contains one or more indexes that provide\n+persistent storage of searchable data in the form of JSON documents.  _(If\n+you're brand new to search, you can make a very rough analogy between\n+indexes and database tables.)_  The Azure.Search.Documents client library", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyNjY5NQ=="}, "originalCommit": {"oid": "f1b315d2a937f50dd07bd75df482239e68ee96eb"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjY0MDQxOnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/README.md", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoxNjoyM1rOGqaidA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoyODoyNVrOGqa9Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyODE4MA==", "bodyText": "This is a duplicate of line 507. https://github.com/Azure/azure-sdk-for-java/pull/12610/files#diff-5a9f18c5455b82f6c43ef589b69b48ddR507", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12610#discussion_r447128180", "createdAt": "2020-06-29T17:16:23Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/README.md", "diffHunk": "@@ -210,6 +478,8 @@ do this once across all repos using our CLA.\n This project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] \n or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n \n+![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fsearch%2Fazure-search-documents%2FREADME.png)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1b315d2a937f50dd07bd75df482239e68ee96eb"}, "originalPosition": 466}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyOTk5MA==", "bodyText": "I guess the line number got updated for the latest commits. I did not see the duplication.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12610#discussion_r447129990", "createdAt": "2020-06-29T17:19:35Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/README.md", "diffHunk": "@@ -210,6 +478,8 @@ do this once across all repos using our CLA.\n This project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] \n or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n \n+![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fsearch%2Fazure-search-documents%2FREADME.png)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyODE4MA=="}, "originalCommit": {"oid": "f1b315d2a937f50dd07bd75df482239e68ee96eb"}, "originalPosition": 466}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNDYyNw==", "bodyText": "Looks like it is line 513 now, https://github.com/Azure/azure-sdk-for-java/pull/12610/files#diff-5a9f18c5455b82f6c43ef589b69b48ddR513", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12610#discussion_r447134627", "createdAt": "2020-06-29T17:27:44Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/README.md", "diffHunk": "@@ -210,6 +478,8 @@ do this once across all repos using our CLA.\n This project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] \n or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n \n+![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fsearch%2Fazure-search-documents%2FREADME.png)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyODE4MA=="}, "originalCommit": {"oid": "f1b315d2a937f50dd07bd75df482239e68ee96eb"}, "originalPosition": 466}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNTAyNg==", "bodyText": "Found it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12610#discussion_r447135026", "createdAt": "2020-06-29T17:28:25Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/README.md", "diffHunk": "@@ -210,6 +478,8 @@ do this once across all repos using our CLA.\n This project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] \n or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n \n+![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fsearch%2Fazure-search-documents%2FREADME.png)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyODE4MA=="}, "originalCommit": {"oid": "f1b315d2a937f50dd07bd75df482239e68ee96eb"}, "originalPosition": 466}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjY3NzQ0OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoyNjo0MlrOGqa5cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzozMDoxMFrOGqbBQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNDA2NA==", "bodyText": "Is there a reason we want to show an example with the Context overload?\nusually readme snippets show the easier use-cases?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12610#discussion_r447134064", "createdAt": "2020-06-29T17:26:42Z", "author": {"login": "samvaity"}, "path": "sdk/search/azure-search-documents/README.md", "diffHunk": "@@ -113,61 +168,258 @@ SearchAsyncClient searchAsyncClient = new SearchClientBuilder()\n     .buildAsyncClient();\n ```\n \n-## Key concepts\n+### Send your first search query\n \n-Azure Cognitive Search service has the concepts of search services and indexes and documents, where a search service contains \n-one or more indexes that provides persistent storage of searchable data, and data is loaded in the form of JSON documents. \n-Data can be pushed to an index from an external data source, but if you use an indexer, it's possible to crawl a data \n-source to extract and load data into an index.\n+To get running immediately, we're going to connect to a well-known sandbox\n+Search service provided by Microsoft. This means you do not need an Azure\n+subscription or Azure Cognitive Search service to try out this query.\n \n-There are several types of operations that can be executed against the service:\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L122-L147 -->\n+```Java\n+// We'll connect to the Azure Cognitive Search public sandbox and send a\n+// query to its \"nycjobs\" index built from a public dataset of available jobs\n+// in New York.\n+String serviceName = \"azs-playground\";\n+String indexName = \"nycjobs\";\n+String apiKey = \"252044BE3886FE4A8E3BAA4F595114BB\";\n+\n+// Create a SearchClient to send queries\n+String serviceEndpoint = String.format(\"https://%s.search.windows.net/\", serviceName);\n+AzureKeyCredential credential = new AzureKeyCredential(apiKey);\n+SearchClient client = new SearchClientBuilder()\n+    .endpoint(serviceEndpoint)\n+    .credential(credential)\n+    .indexName(indexName)\n+    .buildClient();\n \n--   [Index management operations](https://docs.microsoft.com/en-us/rest/api/searchservice/index-operations). Create, delete, update, or configure a search index.\n--   [Document operations](https://docs.microsoft.com/en-us/rest/api/searchservice/document-operations). Add, update, or delete documents in the index, query the index, or look up specific documents by ID.\n--   [Indexer operations](https://docs.microsoft.com/en-us/rest/api/searchservice/indexer-operations). Automate aspects of an indexing operation by configuring a data source and an indexer that you can schedule or run on demand. This feature is supported for a limited number of data source types.\n--   [Skillset operations](https://docs.microsoft.com/en-us/rest/api/searchservice/skillset-operations). Part of AI workload, a skillset defines a series of a series of enrichment processing steps. A skillset is consumed by an indexer.\n--   [Synonym map operations](https://docs.microsoft.com/en-us/rest/api/searchservice/synonym-map-operations). A synonym map is a service-level resource that contains user-defined synonyms. This resource is maintained independently from search indexes. Once uploaded, you can point any searchable field to the synonym map (one per field).\n+// Let's get the top 5 jobs related to Microsoft\n+SearchPagedIterable searchResultsIterable = client.search(\"Microsoft\", new SearchOptions().setTop(5),\n+    Context.NONE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce3e3a1878849adbcfdcaf931f29e5fc278e7d96"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNjA2Nw==", "bodyText": "This is one of the champion scenarios to search the top 5 results which has to use maximum overload.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12610#discussion_r447136067", "createdAt": "2020-06-29T17:30:10Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/README.md", "diffHunk": "@@ -113,61 +168,258 @@ SearchAsyncClient searchAsyncClient = new SearchClientBuilder()\n     .buildAsyncClient();\n ```\n \n-## Key concepts\n+### Send your first search query\n \n-Azure Cognitive Search service has the concepts of search services and indexes and documents, where a search service contains \n-one or more indexes that provides persistent storage of searchable data, and data is loaded in the form of JSON documents. \n-Data can be pushed to an index from an external data source, but if you use an indexer, it's possible to crawl a data \n-source to extract and load data into an index.\n+To get running immediately, we're going to connect to a well-known sandbox\n+Search service provided by Microsoft. This means you do not need an Azure\n+subscription or Azure Cognitive Search service to try out this query.\n \n-There are several types of operations that can be executed against the service:\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L122-L147 -->\n+```Java\n+// We'll connect to the Azure Cognitive Search public sandbox and send a\n+// query to its \"nycjobs\" index built from a public dataset of available jobs\n+// in New York.\n+String serviceName = \"azs-playground\";\n+String indexName = \"nycjobs\";\n+String apiKey = \"252044BE3886FE4A8E3BAA4F595114BB\";\n+\n+// Create a SearchClient to send queries\n+String serviceEndpoint = String.format(\"https://%s.search.windows.net/\", serviceName);\n+AzureKeyCredential credential = new AzureKeyCredential(apiKey);\n+SearchClient client = new SearchClientBuilder()\n+    .endpoint(serviceEndpoint)\n+    .credential(credential)\n+    .indexName(indexName)\n+    .buildClient();\n \n--   [Index management operations](https://docs.microsoft.com/en-us/rest/api/searchservice/index-operations). Create, delete, update, or configure a search index.\n--   [Document operations](https://docs.microsoft.com/en-us/rest/api/searchservice/document-operations). Add, update, or delete documents in the index, query the index, or look up specific documents by ID.\n--   [Indexer operations](https://docs.microsoft.com/en-us/rest/api/searchservice/indexer-operations). Automate aspects of an indexing operation by configuring a data source and an indexer that you can schedule or run on demand. This feature is supported for a limited number of data source types.\n--   [Skillset operations](https://docs.microsoft.com/en-us/rest/api/searchservice/skillset-operations). Part of AI workload, a skillset defines a series of a series of enrichment processing steps. A skillset is consumed by an indexer.\n--   [Synonym map operations](https://docs.microsoft.com/en-us/rest/api/searchservice/synonym-map-operations). A synonym map is a service-level resource that contains user-defined synonyms. This resource is maintained independently from search indexes. Once uploaded, you can point any searchable field to the synonym map (one per field).\n+// Let's get the top 5 jobs related to Microsoft\n+SearchPagedIterable searchResultsIterable = client.search(\"Microsoft\", new SearchOptions().setTop(5),\n+    Context.NONE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNDA2NA=="}, "originalCommit": {"oid": "ce3e3a1878849adbcfdcaf931f29e5fc278e7d96"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjY4Nzk1OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/README.md", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoyOTozOFrOGqa_6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzo0OTowMlrOGqbq_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNTcyMA==", "bodyText": "hotelId --> hotel Id:", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12610#discussion_r447135720", "createdAt": "2020-06-29T17:29:38Z", "author": {"login": "samvaity"}, "path": "sdk/search/azure-search-documents/README.md", "diffHunk": "@@ -113,61 +168,258 @@ SearchAsyncClient searchAsyncClient = new SearchClientBuilder()\n     .buildAsyncClient();\n ```\n \n-## Key concepts\n+### Send your first search query\n+\n+To get running immediately, we're going to connect to a well-known sandbox\n+Search service provided by Microsoft. This means you do not need an Azure\n+subscription or Azure Cognitive Search service to try out this query.\n+\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L122-L147 -->\n+```Java\n+// We'll connect to the Azure Cognitive Search public sandbox and send a\n+// query to its \"nycjobs\" index built from a public dataset of available jobs\n+// in New York.\n+String serviceName = \"azs-playground\";\n+String indexName = \"nycjobs\";\n+String apiKey = \"252044BE3886FE4A8E3BAA4F595114BB\";\n+\n+// Create a SearchClient to send queries\n+String serviceEndpoint = String.format(\"https://%s.search.windows.net/\", serviceName);\n+AzureKeyCredential credential = new AzureKeyCredential(apiKey);\n+SearchClient client = new SearchClientBuilder()\n+    .endpoint(serviceEndpoint)\n+    .credential(credential)\n+    .indexName(indexName)\n+    .buildClient();\n \n-Azure Cognitive Search service has the concepts of search services and indexes and documents, where a search service contains \n-one or more indexes that provides persistent storage of searchable data, and data is loaded in the form of JSON documents. \n-Data can be pushed to an index from an external data source, but if you use an indexer, it's possible to crawl a data \n-source to extract and load data into an index.\n+// Let's get the top 5 jobs related to Microsoft\n+SearchPagedIterable searchResultsIterable = client.search(\"Microsoft\", new SearchOptions().setTop(5),\n+    Context.NONE);\n+for (SearchResult searchResult: searchResultsIterable) {\n+    SearchDocument document = searchResult.getDocument(SearchDocument.class);\n+    String title = (String) document.get(\"business_title\");\n+    String description = (String) document.get(\"job_description\");\n+    System.out.println(String.format(\"The business title is %s, and here is the description: %s\",\n+        title, description));\n+}\n+```\n \n-There are several types of operations that can be executed against the service:\n+## Key concepts\n \n--   [Index management operations](https://docs.microsoft.com/en-us/rest/api/searchservice/index-operations). Create, delete, update, or configure a search index.\n--   [Document operations](https://docs.microsoft.com/en-us/rest/api/searchservice/document-operations). Add, update, or delete documents in the index, query the index, or look up specific documents by ID.\n--   [Indexer operations](https://docs.microsoft.com/en-us/rest/api/searchservice/indexer-operations). Automate aspects of an indexing operation by configuring a data source and an indexer that you can schedule or run on demand. This feature is supported for a limited number of data source types.\n--   [Skillset operations](https://docs.microsoft.com/en-us/rest/api/searchservice/skillset-operations). Part of AI workload, a skillset defines a series of a series of enrichment processing steps. A skillset is consumed by an indexer.\n--   [Synonym map operations](https://docs.microsoft.com/en-us/rest/api/searchservice/synonym-map-operations). A synonym map is a service-level resource that contains user-defined synonyms. This resource is maintained independently from search indexes. Once uploaded, you can point any searchable field to the synonym map (one per field).\n+An Azure Cognitive Search service contains one or more indexes that provide\n+persistent storage of searchable data in the form of JSON documents.  _(If\n+you're brand new to search, you can make a very rough analogy between\n+indexes and database tables.)_  The Azure.Search.Documents client library\n+exposes operations on these resources through two main client types.\n+\n+* `SearchClient` helps with:\n+  * [Searching](https://docs.microsoft.com/azure/search/search-lucene-query-architecture)\n+    your indexed documents using\n+    [rich queries](https://docs.microsoft.com/azure/search/search-query-overview)\n+    and [powerful data shaping](https://docs.microsoft.com/azure/search/search-filters)\n+  * [Autocompleting](https://docs.microsoft.com/rest/api/searchservice/autocomplete)\n+    partially typed search terms based on documents in the index\n+  * [Suggesting](https://docs.microsoft.com/rest/api/searchservice/suggestions)\n+    the most likely matching text in documents as a user types\n+  * [Adding, Updating or Deleting Documents](https://docs.microsoft.com/rest/api/searchservice/addupdate-or-delete-documents)\n+    documents from an index\n+\n+* `SearchIndexClient` allows you to:\n+  * [Create, delete, update, or configure a search index](https://docs.microsoft.com/rest/api/searchservice/index-operations)\n+  * [Declare custom synonym maps to expand or rewrite queries](https://docs.microsoft.com/rest/api/searchservice/synonym-map-operations)\n+  * Most of the `SearchServiceClient` functionality is not yet available in our current preview\n+\n+* `SearchIndexerClient` allows you to:\n+  * [Start indexers to automatically crawl data sources](https://docs.microsoft.com/rest/api/searchservice/indexer-operations)\n+  * [Define AI powered Skillsets to transform and enrich your data](https://docs.microsoft.com/rest/api/searchservice/skillset-operations)\n \n ## Examples\n \n-### Create an index\n+#### Use `SearchDocument` like a dictionary\n \n-Create Index using `searchIndexClient` instantiated in [Create a SearchIndexClient](#create-a-searchindexclient)\n+`SearchDocument` is the default type returned from queries when you don't\n+provide your own.  Here we perform the search, enumerate over the results, and\n+extract data using `SearchDocument`'s dictionary indexer.\n \n-<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L116-L121 -->\n-```java\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L151-L157 -->\n+```Java\n+SearchPagedIterable searchResultsIterable = searchClient.search(\"luxury\");\n+for (SearchResult searchResult: searchResultsIterable) {\n+    SearchDocument doc = searchResult.getDocument(SearchDocument.class);\n+    String id = (String) doc.get(\"hotelId\");\n+    String name = (String) doc.get(\"hotelName\");\n+    System.out.println(String.format(\"This is hotelId %s, and this is hotel name %s.\", id, name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24e6c399c9b73adb52f501ad288638860a293944"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNjA2NA==", "bodyText": "end of the line %s%n", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12610#discussion_r447136064", "createdAt": "2020-06-29T17:30:10Z", "author": {"login": "samvaity"}, "path": "sdk/search/azure-search-documents/README.md", "diffHunk": "@@ -113,61 +168,258 @@ SearchAsyncClient searchAsyncClient = new SearchClientBuilder()\n     .buildAsyncClient();\n ```\n \n-## Key concepts\n+### Send your first search query\n+\n+To get running immediately, we're going to connect to a well-known sandbox\n+Search service provided by Microsoft. This means you do not need an Azure\n+subscription or Azure Cognitive Search service to try out this query.\n+\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L122-L147 -->\n+```Java\n+// We'll connect to the Azure Cognitive Search public sandbox and send a\n+// query to its \"nycjobs\" index built from a public dataset of available jobs\n+// in New York.\n+String serviceName = \"azs-playground\";\n+String indexName = \"nycjobs\";\n+String apiKey = \"252044BE3886FE4A8E3BAA4F595114BB\";\n+\n+// Create a SearchClient to send queries\n+String serviceEndpoint = String.format(\"https://%s.search.windows.net/\", serviceName);\n+AzureKeyCredential credential = new AzureKeyCredential(apiKey);\n+SearchClient client = new SearchClientBuilder()\n+    .endpoint(serviceEndpoint)\n+    .credential(credential)\n+    .indexName(indexName)\n+    .buildClient();\n \n-Azure Cognitive Search service has the concepts of search services and indexes and documents, where a search service contains \n-one or more indexes that provides persistent storage of searchable data, and data is loaded in the form of JSON documents. \n-Data can be pushed to an index from an external data source, but if you use an indexer, it's possible to crawl a data \n-source to extract and load data into an index.\n+// Let's get the top 5 jobs related to Microsoft\n+SearchPagedIterable searchResultsIterable = client.search(\"Microsoft\", new SearchOptions().setTop(5),\n+    Context.NONE);\n+for (SearchResult searchResult: searchResultsIterable) {\n+    SearchDocument document = searchResult.getDocument(SearchDocument.class);\n+    String title = (String) document.get(\"business_title\");\n+    String description = (String) document.get(\"job_description\");\n+    System.out.println(String.format(\"The business title is %s, and here is the description: %s\",\n+        title, description));\n+}\n+```\n \n-There are several types of operations that can be executed against the service:\n+## Key concepts\n \n--   [Index management operations](https://docs.microsoft.com/en-us/rest/api/searchservice/index-operations). Create, delete, update, or configure a search index.\n--   [Document operations](https://docs.microsoft.com/en-us/rest/api/searchservice/document-operations). Add, update, or delete documents in the index, query the index, or look up specific documents by ID.\n--   [Indexer operations](https://docs.microsoft.com/en-us/rest/api/searchservice/indexer-operations). Automate aspects of an indexing operation by configuring a data source and an indexer that you can schedule or run on demand. This feature is supported for a limited number of data source types.\n--   [Skillset operations](https://docs.microsoft.com/en-us/rest/api/searchservice/skillset-operations). Part of AI workload, a skillset defines a series of a series of enrichment processing steps. A skillset is consumed by an indexer.\n--   [Synonym map operations](https://docs.microsoft.com/en-us/rest/api/searchservice/synonym-map-operations). A synonym map is a service-level resource that contains user-defined synonyms. This resource is maintained independently from search indexes. Once uploaded, you can point any searchable field to the synonym map (one per field).\n+An Azure Cognitive Search service contains one or more indexes that provide\n+persistent storage of searchable data in the form of JSON documents.  _(If\n+you're brand new to search, you can make a very rough analogy between\n+indexes and database tables.)_  The Azure.Search.Documents client library\n+exposes operations on these resources through two main client types.\n+\n+* `SearchClient` helps with:\n+  * [Searching](https://docs.microsoft.com/azure/search/search-lucene-query-architecture)\n+    your indexed documents using\n+    [rich queries](https://docs.microsoft.com/azure/search/search-query-overview)\n+    and [powerful data shaping](https://docs.microsoft.com/azure/search/search-filters)\n+  * [Autocompleting](https://docs.microsoft.com/rest/api/searchservice/autocomplete)\n+    partially typed search terms based on documents in the index\n+  * [Suggesting](https://docs.microsoft.com/rest/api/searchservice/suggestions)\n+    the most likely matching text in documents as a user types\n+  * [Adding, Updating or Deleting Documents](https://docs.microsoft.com/rest/api/searchservice/addupdate-or-delete-documents)\n+    documents from an index\n+\n+* `SearchIndexClient` allows you to:\n+  * [Create, delete, update, or configure a search index](https://docs.microsoft.com/rest/api/searchservice/index-operations)\n+  * [Declare custom synonym maps to expand or rewrite queries](https://docs.microsoft.com/rest/api/searchservice/synonym-map-operations)\n+  * Most of the `SearchServiceClient` functionality is not yet available in our current preview\n+\n+* `SearchIndexerClient` allows you to:\n+  * [Start indexers to automatically crawl data sources](https://docs.microsoft.com/rest/api/searchservice/indexer-operations)\n+  * [Define AI powered Skillsets to transform and enrich your data](https://docs.microsoft.com/rest/api/searchservice/skillset-operations)\n \n ## Examples\n \n-### Create an index\n+#### Use `SearchDocument` like a dictionary\n \n-Create Index using `searchIndexClient` instantiated in [Create a SearchIndexClient](#create-a-searchindexclient)\n+`SearchDocument` is the default type returned from queries when you don't\n+provide your own.  Here we perform the search, enumerate over the results, and\n+extract data using `SearchDocument`'s dictionary indexer.\n \n-<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L116-L121 -->\n-```java\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L151-L157 -->\n+```Java\n+SearchPagedIterable searchResultsIterable = searchClient.search(\"luxury\");\n+for (SearchResult searchResult: searchResultsIterable) {\n+    SearchDocument doc = searchResult.getDocument(SearchDocument.class);\n+    String id = (String) doc.get(\"hotelId\");\n+    String name = (String) doc.get(\"hotelName\");\n+    System.out.println(String.format(\"This is hotelId %s, and this is hotel name %s.\", id, name));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNTcyMA=="}, "originalCommit": {"oid": "24e6c399c9b73adb52f501ad288638860a293944"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE0MDM5Nw==", "bodyText": "Is %n needed here? We use System.out.println which definitely start a new line", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12610#discussion_r447140397", "createdAt": "2020-06-29T17:37:42Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/README.md", "diffHunk": "@@ -113,61 +168,258 @@ SearchAsyncClient searchAsyncClient = new SearchClientBuilder()\n     .buildAsyncClient();\n ```\n \n-## Key concepts\n+### Send your first search query\n+\n+To get running immediately, we're going to connect to a well-known sandbox\n+Search service provided by Microsoft. This means you do not need an Azure\n+subscription or Azure Cognitive Search service to try out this query.\n+\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L122-L147 -->\n+```Java\n+// We'll connect to the Azure Cognitive Search public sandbox and send a\n+// query to its \"nycjobs\" index built from a public dataset of available jobs\n+// in New York.\n+String serviceName = \"azs-playground\";\n+String indexName = \"nycjobs\";\n+String apiKey = \"252044BE3886FE4A8E3BAA4F595114BB\";\n+\n+// Create a SearchClient to send queries\n+String serviceEndpoint = String.format(\"https://%s.search.windows.net/\", serviceName);\n+AzureKeyCredential credential = new AzureKeyCredential(apiKey);\n+SearchClient client = new SearchClientBuilder()\n+    .endpoint(serviceEndpoint)\n+    .credential(credential)\n+    .indexName(indexName)\n+    .buildClient();\n \n-Azure Cognitive Search service has the concepts of search services and indexes and documents, where a search service contains \n-one or more indexes that provides persistent storage of searchable data, and data is loaded in the form of JSON documents. \n-Data can be pushed to an index from an external data source, but if you use an indexer, it's possible to crawl a data \n-source to extract and load data into an index.\n+// Let's get the top 5 jobs related to Microsoft\n+SearchPagedIterable searchResultsIterable = client.search(\"Microsoft\", new SearchOptions().setTop(5),\n+    Context.NONE);\n+for (SearchResult searchResult: searchResultsIterable) {\n+    SearchDocument document = searchResult.getDocument(SearchDocument.class);\n+    String title = (String) document.get(\"business_title\");\n+    String description = (String) document.get(\"job_description\");\n+    System.out.println(String.format(\"The business title is %s, and here is the description: %s\",\n+        title, description));\n+}\n+```\n \n-There are several types of operations that can be executed against the service:\n+## Key concepts\n \n--   [Index management operations](https://docs.microsoft.com/en-us/rest/api/searchservice/index-operations). Create, delete, update, or configure a search index.\n--   [Document operations](https://docs.microsoft.com/en-us/rest/api/searchservice/document-operations). Add, update, or delete documents in the index, query the index, or look up specific documents by ID.\n--   [Indexer operations](https://docs.microsoft.com/en-us/rest/api/searchservice/indexer-operations). Automate aspects of an indexing operation by configuring a data source and an indexer that you can schedule or run on demand. This feature is supported for a limited number of data source types.\n--   [Skillset operations](https://docs.microsoft.com/en-us/rest/api/searchservice/skillset-operations). Part of AI workload, a skillset defines a series of a series of enrichment processing steps. A skillset is consumed by an indexer.\n--   [Synonym map operations](https://docs.microsoft.com/en-us/rest/api/searchservice/synonym-map-operations). A synonym map is a service-level resource that contains user-defined synonyms. This resource is maintained independently from search indexes. Once uploaded, you can point any searchable field to the synonym map (one per field).\n+An Azure Cognitive Search service contains one or more indexes that provide\n+persistent storage of searchable data in the form of JSON documents.  _(If\n+you're brand new to search, you can make a very rough analogy between\n+indexes and database tables.)_  The Azure.Search.Documents client library\n+exposes operations on these resources through two main client types.\n+\n+* `SearchClient` helps with:\n+  * [Searching](https://docs.microsoft.com/azure/search/search-lucene-query-architecture)\n+    your indexed documents using\n+    [rich queries](https://docs.microsoft.com/azure/search/search-query-overview)\n+    and [powerful data shaping](https://docs.microsoft.com/azure/search/search-filters)\n+  * [Autocompleting](https://docs.microsoft.com/rest/api/searchservice/autocomplete)\n+    partially typed search terms based on documents in the index\n+  * [Suggesting](https://docs.microsoft.com/rest/api/searchservice/suggestions)\n+    the most likely matching text in documents as a user types\n+  * [Adding, Updating or Deleting Documents](https://docs.microsoft.com/rest/api/searchservice/addupdate-or-delete-documents)\n+    documents from an index\n+\n+* `SearchIndexClient` allows you to:\n+  * [Create, delete, update, or configure a search index](https://docs.microsoft.com/rest/api/searchservice/index-operations)\n+  * [Declare custom synonym maps to expand or rewrite queries](https://docs.microsoft.com/rest/api/searchservice/synonym-map-operations)\n+  * Most of the `SearchServiceClient` functionality is not yet available in our current preview\n+\n+* `SearchIndexerClient` allows you to:\n+  * [Start indexers to automatically crawl data sources](https://docs.microsoft.com/rest/api/searchservice/indexer-operations)\n+  * [Define AI powered Skillsets to transform and enrich your data](https://docs.microsoft.com/rest/api/searchservice/skillset-operations)\n \n ## Examples\n \n-### Create an index\n+#### Use `SearchDocument` like a dictionary\n \n-Create Index using `searchIndexClient` instantiated in [Create a SearchIndexClient](#create-a-searchindexclient)\n+`SearchDocument` is the default type returned from queries when you don't\n+provide your own.  Here we perform the search, enumerate over the results, and\n+extract data using `SearchDocument`'s dictionary indexer.\n \n-<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L116-L121 -->\n-```java\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L151-L157 -->\n+```Java\n+SearchPagedIterable searchResultsIterable = searchClient.search(\"luxury\");\n+for (SearchResult searchResult: searchResultsIterable) {\n+    SearchDocument doc = searchResult.getDocument(SearchDocument.class);\n+    String id = (String) doc.get(\"hotelId\");\n+    String name = (String) doc.get(\"hotelName\");\n+    System.out.println(String.format(\"This is hotelId %s, and this is hotel name %s.\", id, name));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNTcyMA=="}, "originalCommit": {"oid": "24e6c399c9b73adb52f501ad288638860a293944"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE0Njc1MQ==", "bodyText": "Is %n needed here? We use System.out.println which definitely start a new line\n\ndidn't notice, ignore me!\nnit: rather than System.out.println(String.format...) -->  System.out.printf(...) ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12610#discussion_r447146751", "createdAt": "2020-06-29T17:49:02Z", "author": {"login": "samvaity"}, "path": "sdk/search/azure-search-documents/README.md", "diffHunk": "@@ -113,61 +168,258 @@ SearchAsyncClient searchAsyncClient = new SearchClientBuilder()\n     .buildAsyncClient();\n ```\n \n-## Key concepts\n+### Send your first search query\n+\n+To get running immediately, we're going to connect to a well-known sandbox\n+Search service provided by Microsoft. This means you do not need an Azure\n+subscription or Azure Cognitive Search service to try out this query.\n+\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L122-L147 -->\n+```Java\n+// We'll connect to the Azure Cognitive Search public sandbox and send a\n+// query to its \"nycjobs\" index built from a public dataset of available jobs\n+// in New York.\n+String serviceName = \"azs-playground\";\n+String indexName = \"nycjobs\";\n+String apiKey = \"252044BE3886FE4A8E3BAA4F595114BB\";\n+\n+// Create a SearchClient to send queries\n+String serviceEndpoint = String.format(\"https://%s.search.windows.net/\", serviceName);\n+AzureKeyCredential credential = new AzureKeyCredential(apiKey);\n+SearchClient client = new SearchClientBuilder()\n+    .endpoint(serviceEndpoint)\n+    .credential(credential)\n+    .indexName(indexName)\n+    .buildClient();\n \n-Azure Cognitive Search service has the concepts of search services and indexes and documents, where a search service contains \n-one or more indexes that provides persistent storage of searchable data, and data is loaded in the form of JSON documents. \n-Data can be pushed to an index from an external data source, but if you use an indexer, it's possible to crawl a data \n-source to extract and load data into an index.\n+// Let's get the top 5 jobs related to Microsoft\n+SearchPagedIterable searchResultsIterable = client.search(\"Microsoft\", new SearchOptions().setTop(5),\n+    Context.NONE);\n+for (SearchResult searchResult: searchResultsIterable) {\n+    SearchDocument document = searchResult.getDocument(SearchDocument.class);\n+    String title = (String) document.get(\"business_title\");\n+    String description = (String) document.get(\"job_description\");\n+    System.out.println(String.format(\"The business title is %s, and here is the description: %s\",\n+        title, description));\n+}\n+```\n \n-There are several types of operations that can be executed against the service:\n+## Key concepts\n \n--   [Index management operations](https://docs.microsoft.com/en-us/rest/api/searchservice/index-operations). Create, delete, update, or configure a search index.\n--   [Document operations](https://docs.microsoft.com/en-us/rest/api/searchservice/document-operations). Add, update, or delete documents in the index, query the index, or look up specific documents by ID.\n--   [Indexer operations](https://docs.microsoft.com/en-us/rest/api/searchservice/indexer-operations). Automate aspects of an indexing operation by configuring a data source and an indexer that you can schedule or run on demand. This feature is supported for a limited number of data source types.\n--   [Skillset operations](https://docs.microsoft.com/en-us/rest/api/searchservice/skillset-operations). Part of AI workload, a skillset defines a series of a series of enrichment processing steps. A skillset is consumed by an indexer.\n--   [Synonym map operations](https://docs.microsoft.com/en-us/rest/api/searchservice/synonym-map-operations). A synonym map is a service-level resource that contains user-defined synonyms. This resource is maintained independently from search indexes. Once uploaded, you can point any searchable field to the synonym map (one per field).\n+An Azure Cognitive Search service contains one or more indexes that provide\n+persistent storage of searchable data in the form of JSON documents.  _(If\n+you're brand new to search, you can make a very rough analogy between\n+indexes and database tables.)_  The Azure.Search.Documents client library\n+exposes operations on these resources through two main client types.\n+\n+* `SearchClient` helps with:\n+  * [Searching](https://docs.microsoft.com/azure/search/search-lucene-query-architecture)\n+    your indexed documents using\n+    [rich queries](https://docs.microsoft.com/azure/search/search-query-overview)\n+    and [powerful data shaping](https://docs.microsoft.com/azure/search/search-filters)\n+  * [Autocompleting](https://docs.microsoft.com/rest/api/searchservice/autocomplete)\n+    partially typed search terms based on documents in the index\n+  * [Suggesting](https://docs.microsoft.com/rest/api/searchservice/suggestions)\n+    the most likely matching text in documents as a user types\n+  * [Adding, Updating or Deleting Documents](https://docs.microsoft.com/rest/api/searchservice/addupdate-or-delete-documents)\n+    documents from an index\n+\n+* `SearchIndexClient` allows you to:\n+  * [Create, delete, update, or configure a search index](https://docs.microsoft.com/rest/api/searchservice/index-operations)\n+  * [Declare custom synonym maps to expand or rewrite queries](https://docs.microsoft.com/rest/api/searchservice/synonym-map-operations)\n+  * Most of the `SearchServiceClient` functionality is not yet available in our current preview\n+\n+* `SearchIndexerClient` allows you to:\n+  * [Start indexers to automatically crawl data sources](https://docs.microsoft.com/rest/api/searchservice/indexer-operations)\n+  * [Define AI powered Skillsets to transform and enrich your data](https://docs.microsoft.com/rest/api/searchservice/skillset-operations)\n \n ## Examples\n \n-### Create an index\n+#### Use `SearchDocument` like a dictionary\n \n-Create Index using `searchIndexClient` instantiated in [Create a SearchIndexClient](#create-a-searchindexclient)\n+`SearchDocument` is the default type returned from queries when you don't\n+provide your own.  Here we perform the search, enumerate over the results, and\n+extract data using `SearchDocument`'s dictionary indexer.\n \n-<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L116-L121 -->\n-```java\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L151-L157 -->\n+```Java\n+SearchPagedIterable searchResultsIterable = searchClient.search(\"luxury\");\n+for (SearchResult searchResult: searchResultsIterable) {\n+    SearchDocument doc = searchResult.getDocument(SearchDocument.class);\n+    String id = (String) doc.get(\"hotelId\");\n+    String name = (String) doc.get(\"hotelName\");\n+    System.out.println(String.format(\"This is hotelId %s, and this is hotel name %s.\", id, name));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNTcyMA=="}, "originalCommit": {"oid": "24e6c399c9b73adb52f501ad288638860a293944"}, "originalPosition": 241}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjY5NTMxOnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzozMToyNVrOGqbEcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzozMToyNVrOGqbEcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNjg4MA==", "bodyText": "Should this be Search Options?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12610#discussion_r447136880", "createdAt": "2020-06-29T17:31:25Z", "author": {"login": "samvaity"}, "path": "sdk/search/azure-search-documents/README.md", "diffHunk": "@@ -113,61 +168,258 @@ SearchAsyncClient searchAsyncClient = new SearchClientBuilder()\n     .buildAsyncClient();\n ```\n \n-## Key concepts\n+### Send your first search query\n+\n+To get running immediately, we're going to connect to a well-known sandbox\n+Search service provided by Microsoft. This means you do not need an Azure\n+subscription or Azure Cognitive Search service to try out this query.\n+\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L122-L147 -->\n+```Java\n+// We'll connect to the Azure Cognitive Search public sandbox and send a\n+// query to its \"nycjobs\" index built from a public dataset of available jobs\n+// in New York.\n+String serviceName = \"azs-playground\";\n+String indexName = \"nycjobs\";\n+String apiKey = \"252044BE3886FE4A8E3BAA4F595114BB\";\n+\n+// Create a SearchClient to send queries\n+String serviceEndpoint = String.format(\"https://%s.search.windows.net/\", serviceName);\n+AzureKeyCredential credential = new AzureKeyCredential(apiKey);\n+SearchClient client = new SearchClientBuilder()\n+    .endpoint(serviceEndpoint)\n+    .credential(credential)\n+    .indexName(indexName)\n+    .buildClient();\n \n-Azure Cognitive Search service has the concepts of search services and indexes and documents, where a search service contains \n-one or more indexes that provides persistent storage of searchable data, and data is loaded in the form of JSON documents. \n-Data can be pushed to an index from an external data source, but if you use an indexer, it's possible to crawl a data \n-source to extract and load data into an index.\n+// Let's get the top 5 jobs related to Microsoft\n+SearchPagedIterable searchResultsIterable = client.search(\"Microsoft\", new SearchOptions().setTop(5),\n+    Context.NONE);\n+for (SearchResult searchResult: searchResultsIterable) {\n+    SearchDocument document = searchResult.getDocument(SearchDocument.class);\n+    String title = (String) document.get(\"business_title\");\n+    String description = (String) document.get(\"job_description\");\n+    System.out.println(String.format(\"The business title is %s, and here is the description: %s\",\n+        title, description));\n+}\n+```\n \n-There are several types of operations that can be executed against the service:\n+## Key concepts\n \n--   [Index management operations](https://docs.microsoft.com/en-us/rest/api/searchservice/index-operations). Create, delete, update, or configure a search index.\n--   [Document operations](https://docs.microsoft.com/en-us/rest/api/searchservice/document-operations). Add, update, or delete documents in the index, query the index, or look up specific documents by ID.\n--   [Indexer operations](https://docs.microsoft.com/en-us/rest/api/searchservice/indexer-operations). Automate aspects of an indexing operation by configuring a data source and an indexer that you can schedule or run on demand. This feature is supported for a limited number of data source types.\n--   [Skillset operations](https://docs.microsoft.com/en-us/rest/api/searchservice/skillset-operations). Part of AI workload, a skillset defines a series of a series of enrichment processing steps. A skillset is consumed by an indexer.\n--   [Synonym map operations](https://docs.microsoft.com/en-us/rest/api/searchservice/synonym-map-operations). A synonym map is a service-level resource that contains user-defined synonyms. This resource is maintained independently from search indexes. Once uploaded, you can point any searchable field to the synonym map (one per field).\n+An Azure Cognitive Search service contains one or more indexes that provide\n+persistent storage of searchable data in the form of JSON documents.  _(If\n+you're brand new to search, you can make a very rough analogy between\n+indexes and database tables.)_  The Azure.Search.Documents client library\n+exposes operations on these resources through two main client types.\n+\n+* `SearchClient` helps with:\n+  * [Searching](https://docs.microsoft.com/azure/search/search-lucene-query-architecture)\n+    your indexed documents using\n+    [rich queries](https://docs.microsoft.com/azure/search/search-query-overview)\n+    and [powerful data shaping](https://docs.microsoft.com/azure/search/search-filters)\n+  * [Autocompleting](https://docs.microsoft.com/rest/api/searchservice/autocomplete)\n+    partially typed search terms based on documents in the index\n+  * [Suggesting](https://docs.microsoft.com/rest/api/searchservice/suggestions)\n+    the most likely matching text in documents as a user types\n+  * [Adding, Updating or Deleting Documents](https://docs.microsoft.com/rest/api/searchservice/addupdate-or-delete-documents)\n+    documents from an index\n+\n+* `SearchIndexClient` allows you to:\n+  * [Create, delete, update, or configure a search index](https://docs.microsoft.com/rest/api/searchservice/index-operations)\n+  * [Declare custom synonym maps to expand or rewrite queries](https://docs.microsoft.com/rest/api/searchservice/synonym-map-operations)\n+  * Most of the `SearchServiceClient` functionality is not yet available in our current preview\n+\n+* `SearchIndexerClient` allows you to:\n+  * [Start indexers to automatically crawl data sources](https://docs.microsoft.com/rest/api/searchservice/indexer-operations)\n+  * [Define AI powered Skillsets to transform and enrich your data](https://docs.microsoft.com/rest/api/searchservice/skillset-operations)\n \n ## Examples\n \n-### Create an index\n+#### Use `SearchDocument` like a dictionary\n \n-Create Index using `searchIndexClient` instantiated in [Create a SearchIndexClient](#create-a-searchindexclient)\n+`SearchDocument` is the default type returned from queries when you don't\n+provide your own.  Here we perform the search, enumerate over the results, and\n+extract data using `SearchDocument`'s dictionary indexer.\n \n-<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L116-L121 -->\n-```java\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L151-L157 -->\n+```Java\n+SearchPagedIterable searchResultsIterable = searchClient.search(\"luxury\");\n+for (SearchResult searchResult: searchResultsIterable) {\n+    SearchDocument doc = searchResult.getDocument(SearchDocument.class);\n+    String id = (String) doc.get(\"hotelId\");\n+    String name = (String) doc.get(\"hotelName\");\n+    System.out.println(String.format(\"This is hotelId %s, and this is hotel name %s.\", id, name));\n+}\n ```\n-### Upload a Document\n \n-Upload hotel document to Search Index using `searchClient` instantiated [Create a SearchClient](#create-a-searchclient)\n+#### Use Java model class\n+Define a `Hotel` class.\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L160-L181 -->\n+```Java\n+public class Hotel {\n+    private String id;\n+    private String name;\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public Hotel setId(String id) {\n+        this.id = id;\n+        return this;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public Hotel setName(String name) {\n+        this.name = name;\n+        return this;\n+    }\n+}\n+```\n \n-<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L123-L128 -->\n-```java\n-List<Hotel> hotels = new ArrayList<>();\n-hotels.add(new Hotel().setHotelId(\"100\"));\n-hotels.add(new Hotel().setHotelId(\"200\"));\n-hotels.add(new Hotel().setHotelId(\"300\"));\n-// Upload hotel.\n-searchClient.uploadDocuments(hotels);\n+And use them in place of `SearchDocument` when querying.\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L184-L190 -->\n+```Java\n+SearchPagedIterable searchResultsIterable = searchClient.search(\"luxury\");\n+for (SearchResult searchResult: searchResultsIterable) {\n+    Hotel doc = searchResult.getDocument(Hotel.class);\n+    String id = doc.getId();\n+    String name = doc.getName();\n+    System.out.println(String.format(\"This is hotelId %s, and this is hotel name %s.\", id, name));\n+}\n ```\n \n-### Search on hotel name\n+If you're working with a search index and know the schema, creating Java model class\n+is recommended.\n \n-Search hotel using keyword using `searchClient` instantiated in [Create a SearchClient](#create-a-searchclient)\n+#### SearchOptions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24e6c399c9b73adb52f501ad288638860a293944"}, "originalPosition": 300}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjcwMjI3OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/README.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzozMzoyNlrOGqbIyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzo0OTozMVrOGqbsCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNzk5NQ==", "bodyText": "Should this be a subsection of ### Troubleshooting", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12610#discussion_r447137995", "createdAt": "2020-06-29T17:33:26Z", "author": {"login": "samvaity"}, "path": "sdk/search/azure-search-documents/README.md", "diffHunk": "@@ -180,6 +432,28 @@ When you interact with Azure Cognitive Search using this Java client library, er\n to the same HTTP status codes returned for [REST API][rest_api] requests. For example, if you try to retrieve a document \n that doesn't exist in your index, a `404` error is returned, indicating `Not Found`.\n \n+### Handling Search Error Response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24e6c399c9b73adb52f501ad288638860a293944"}, "originalPosition": 443}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE0MjU4MQ==", "bodyText": "It is already in a subsection under TroubleShooting\nDo you mean is it better to move to Examples?\nThis is a general case over SDKs. Customer might have experience on how to catch the problem, so we don't need to make it so obvious.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12610#discussion_r447142581", "createdAt": "2020-06-29T17:41:42Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/README.md", "diffHunk": "@@ -180,6 +432,28 @@ When you interact with Azure Cognitive Search using this Java client library, er\n to the same HTTP status codes returned for [REST API][rest_api] requests. For example, if you try to retrieve a document \n that doesn't exist in your index, a `404` error is returned, indicating `Not Found`.\n \n+### Handling Search Error Response", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNzk5NQ=="}, "originalCommit": {"oid": "24e6c399c9b73adb52f501ad288638860a293944"}, "originalPosition": 443}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE0NzAxNw==", "bodyText": "If it is already in Troubleshooting then we are good!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12610#discussion_r447147017", "createdAt": "2020-06-29T17:49:31Z", "author": {"login": "samvaity"}, "path": "sdk/search/azure-search-documents/README.md", "diffHunk": "@@ -180,6 +432,28 @@ When you interact with Azure Cognitive Search using this Java client library, er\n to the same HTTP status codes returned for [REST API][rest_api] requests. For example, if you try to retrieve a document \n that doesn't exist in your index, a `404` error is returned, indicating `Not Found`.\n \n+### Handling Search Error Response", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNzk5NQ=="}, "originalCommit": {"oid": "24e6c399c9b73adb52f501ad288638860a293944"}, "originalPosition": 443}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Njc3NTAyOnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzo1NDoxNVrOGqb29g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxODowMTozMVrOGqcHPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE0OTgxNA==", "bodyText": "Should this be highlighted better?\nhttps://github.com/Azure/azure-sdk-for-java/tree/master/sdk/formrecognizer/azure-ai-formrecognizer#more-sample-code", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12610#discussion_r447149814", "createdAt": "2020-06-29T17:54:15Z", "author": {"login": "samvaity"}, "path": "sdk/search/azure-search-documents/README.md", "diffHunk": "@@ -113,61 +168,258 @@ SearchAsyncClient searchAsyncClient = new SearchClientBuilder()\n     .buildAsyncClient();\n ```\n \n-## Key concepts\n+### Send your first search query\n+\n+To get running immediately, we're going to connect to a well-known sandbox\n+Search service provided by Microsoft. This means you do not need an Azure\n+subscription or Azure Cognitive Search service to try out this query.\n+\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L122-L147 -->\n+```Java\n+// We'll connect to the Azure Cognitive Search public sandbox and send a\n+// query to its \"nycjobs\" index built from a public dataset of available jobs\n+// in New York.\n+String serviceName = \"azs-playground\";\n+String indexName = \"nycjobs\";\n+String apiKey = \"252044BE3886FE4A8E3BAA4F595114BB\";\n+\n+// Create a SearchClient to send queries\n+String serviceEndpoint = String.format(\"https://%s.search.windows.net/\", serviceName);\n+AzureKeyCredential credential = new AzureKeyCredential(apiKey);\n+SearchClient client = new SearchClientBuilder()\n+    .endpoint(serviceEndpoint)\n+    .credential(credential)\n+    .indexName(indexName)\n+    .buildClient();\n \n-Azure Cognitive Search service has the concepts of search services and indexes and documents, where a search service contains \n-one or more indexes that provides persistent storage of searchable data, and data is loaded in the form of JSON documents. \n-Data can be pushed to an index from an external data source, but if you use an indexer, it's possible to crawl a data \n-source to extract and load data into an index.\n+// Let's get the top 5 jobs related to Microsoft\n+SearchPagedIterable searchResultsIterable = client.search(\"Microsoft\", new SearchOptions().setTop(5),\n+    Context.NONE);\n+for (SearchResult searchResult: searchResultsIterable) {\n+    SearchDocument document = searchResult.getDocument(SearchDocument.class);\n+    String title = (String) document.get(\"business_title\");\n+    String description = (String) document.get(\"job_description\");\n+    System.out.println(String.format(\"The business title is %s, and here is the description: %s\",\n+        title, description));\n+}\n+```\n \n-There are several types of operations that can be executed against the service:\n+## Key concepts\n \n--   [Index management operations](https://docs.microsoft.com/en-us/rest/api/searchservice/index-operations). Create, delete, update, or configure a search index.\n--   [Document operations](https://docs.microsoft.com/en-us/rest/api/searchservice/document-operations). Add, update, or delete documents in the index, query the index, or look up specific documents by ID.\n--   [Indexer operations](https://docs.microsoft.com/en-us/rest/api/searchservice/indexer-operations). Automate aspects of an indexing operation by configuring a data source and an indexer that you can schedule or run on demand. This feature is supported for a limited number of data source types.\n--   [Skillset operations](https://docs.microsoft.com/en-us/rest/api/searchservice/skillset-operations). Part of AI workload, a skillset defines a series of a series of enrichment processing steps. A skillset is consumed by an indexer.\n--   [Synonym map operations](https://docs.microsoft.com/en-us/rest/api/searchservice/synonym-map-operations). A synonym map is a service-level resource that contains user-defined synonyms. This resource is maintained independently from search indexes. Once uploaded, you can point any searchable field to the synonym map (one per field).\n+An Azure Cognitive Search service contains one or more indexes that provide\n+persistent storage of searchable data in the form of JSON documents.  _(If\n+you're brand new to search, you can make a very rough analogy between\n+indexes and database tables.)_  The Azure.Search.Documents client library\n+exposes operations on these resources through two main client types.\n+\n+* `SearchClient` helps with:\n+  * [Searching](https://docs.microsoft.com/azure/search/search-lucene-query-architecture)\n+    your indexed documents using\n+    [rich queries](https://docs.microsoft.com/azure/search/search-query-overview)\n+    and [powerful data shaping](https://docs.microsoft.com/azure/search/search-filters)\n+  * [Autocompleting](https://docs.microsoft.com/rest/api/searchservice/autocomplete)\n+    partially typed search terms based on documents in the index\n+  * [Suggesting](https://docs.microsoft.com/rest/api/searchservice/suggestions)\n+    the most likely matching text in documents as a user types\n+  * [Adding, Updating or Deleting Documents](https://docs.microsoft.com/rest/api/searchservice/addupdate-or-delete-documents)\n+    documents from an index\n+\n+* `SearchIndexClient` allows you to:\n+  * [Create, delete, update, or configure a search index](https://docs.microsoft.com/rest/api/searchservice/index-operations)\n+  * [Declare custom synonym maps to expand or rewrite queries](https://docs.microsoft.com/rest/api/searchservice/synonym-map-operations)\n+  * Most of the `SearchServiceClient` functionality is not yet available in our current preview\n+\n+* `SearchIndexerClient` allows you to:\n+  * [Start indexers to automatically crawl data sources](https://docs.microsoft.com/rest/api/searchservice/indexer-operations)\n+  * [Define AI powered Skillsets to transform and enrich your data](https://docs.microsoft.com/rest/api/searchservice/skillset-operations)\n \n ## Examples\n \n-### Create an index\n+#### Use `SearchDocument` like a dictionary\n \n-Create Index using `searchIndexClient` instantiated in [Create a SearchIndexClient](#create-a-searchindexclient)\n+`SearchDocument` is the default type returned from queries when you don't\n+provide your own.  Here we perform the search, enumerate over the results, and\n+extract data using `SearchDocument`'s dictionary indexer.\n \n-<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L116-L121 -->\n-```java\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L151-L157 -->\n+```Java\n+SearchPagedIterable searchResultsIterable = searchClient.search(\"luxury\");\n+for (SearchResult searchResult: searchResultsIterable) {\n+    SearchDocument doc = searchResult.getDocument(SearchDocument.class);\n+    String id = (String) doc.get(\"hotelId\");\n+    String name = (String) doc.get(\"hotelName\");\n+    System.out.println(String.format(\"This is hotel Id %s, and this is hotel name %s%n.\", id, name));\n+}\n ```\n-### Upload a Document\n \n-Upload hotel document to Search Index using `searchClient` instantiated [Create a SearchClient](#create-a-searchclient)\n+#### Use Java model class\n+Define a `Hotel` class.\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L160-L181 -->\n+```Java\n+public class Hotel {\n+    private String id;\n+    private String name;\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public Hotel setId(String id) {\n+        this.id = id;\n+        return this;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public Hotel setName(String name) {\n+        this.name = name;\n+        return this;\n+    }\n+}\n+```\n \n-<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L123-L128 -->\n-```java\n-List<Hotel> hotels = new ArrayList<>();\n-hotels.add(new Hotel().setHotelId(\"100\"));\n-hotels.add(new Hotel().setHotelId(\"200\"));\n-hotels.add(new Hotel().setHotelId(\"300\"));\n-// Upload hotel.\n-searchClient.uploadDocuments(hotels);\n+And use them in place of `SearchDocument` when querying.\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L184-L190 -->\n+```Java\n+SearchPagedIterable searchResultsIterable = searchClient.search(\"luxury\");\n+for (SearchResult searchResult: searchResultsIterable) {\n+    Hotel doc = searchResult.getDocument(Hotel.class);\n+    String id = doc.getId();\n+    String name = doc.getName();\n+    System.out.println(String.format(\"This is hotelId %s, and this is hotel name %s.\", id, name));\n+}\n ```\n \n-### Search on hotel name\n+If you're working with a search index and know the schema, creating Java model class\n+is recommended.\n \n-Search hotel using keyword using `searchClient` instantiated in [Create a SearchClient](#create-a-searchclient)\n+#### Search Options\n \n-<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L132-L142 -->\n-```java\n-// Perform a text-based search\n-for (SearchResult result : searchClient.search(\"luxury hotel\",\n-    new SearchOptions(), Context.NONE)) {\n+The `SearchOptions` provide powerful control over the behavior of our queries.\n+Let's search for the top 5 luxury hotels with a good rating.\n \n-    // Each result is a dynamic Map\n-    SearchDocument doc = result.getDocument(SearchDocument.class);\n-    String hotelName = (String) doc.get(\"HotelName\");\n-    Double rating = (Double) doc.get(\"Rating\");\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L194-L200 -->\n+```Java \n+int stars = 4;\n+SearchOptions options = new SearchOptions()\n+    .setFilter(String.format(\"rating ge %s\", stars))\n+    .setOrderBy(\"rating desc\")\n+    .setTop(5);\n+SearchPagedIterable searchResultsIterable = searchClient.search(\"luxury\", options, Context.NONE);\n+// ...\n+```\n \n-    System.out.printf(\"%s: %s%n\", hotelName, rating);\n-}\n+### Creating an index\n+\n+You can use the [`SearchIndexClient`](#Create-a-SearchIndexClient) to create a search index. Fields can be\n+defined using convenient `SimpleField`, `SearchableField`, or `ComplexField`\n+classes. Indexes can also define suggesters, lexical analyzers, and more.\n+\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L226-L276 -->\n+```Java\n+// Prepare SearchFields with SimpleFieldBuilder, SearchableFieldBuilder and ComplexFieldBuilder.\n+List<SearchField> searchFieldList = new ArrayList<>();\n+searchFieldList.add(new SimpleFieldBuilder(\"hotelId\", SearchFieldDataType.STRING, false)\n+    .setKey(true)\n+    .setFilterable(true)\n+    .setSortable(true)\n+    .build());\n+searchFieldList.add(new SearchableFieldBuilder(\"hotelName\", false)\n+    .setFilterable(true)\n+    .setSortable(true)\n+    .build());\n+searchFieldList.add(new SearchableFieldBuilder(\"description\", false)\n+    .setAnalyzerName(LexicalAnalyzerName.EU_LUCENE)\n+    .build());\n+searchFieldList.add(new SearchableFieldBuilder(\"tags\", true)\n+    .setKey(true)\n+    .setFilterable(true)\n+    .setFacetable(true)\n+    .build());\n+searchFieldList.add(new ComplexFieldBuilder(\"address\", false)\n+    .setFields(Arrays.asList(\n+        new SearchableFieldBuilder(\"streetAddress\", false).build(),\n+        new SearchableFieldBuilder(\"city\", false)\n+            .setFilterable(true)\n+            .setFacetable(true)\n+            .setSortable(true)\n+            .build(),\n+        new SearchableFieldBuilder(\"stateProvince\", false)\n+            .setFilterable(true)\n+            .setFacetable(true)\n+            .setSortable(true)\n+            .build(),\n+        new SearchableFieldBuilder(\"country\", false)\n+            .setFilterable(true)\n+            .setFacetable(true)\n+            .setSortable(true)\n+            .build(),\n+        new SearchableFieldBuilder(\"postalCode\", false)\n+            .setFilterable(true)\n+            .setFacetable(true)\n+            .setSortable(true)\n+            .build()\n+    ))\n+    .build());\n+// Prepare suggester.\n+SearchSuggester suggester = new SearchSuggester(\"sg\", Collections.singletonList(\"hotelName\"));\n+// Prepare SearchIndex with index name and search fields.\n+SearchIndex index = new SearchIndex(\"hotels\").setFields(searchFieldList).setSuggesters(\n+    Collections.singletonList(suggester));\n+// Create an index\n+searchIndexClient.createIndex(index);\n+```\n+\n+### Retrieving a specific document from your index\n+\n+In addition to querying for documents using keywords and optional filters,\n+you can retrieve a specific document from your index if you already know the\n+key. You could get the key from a query, for example, and want to show more\n+information about it or navigate your customer to that document.\n+\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L213-L215 -->\n+```Java \n+Hotel hotel = searchClient.getDocument(\"1\", Hotel.class);\n+System.out.println(String.format(\"This is hotelId %s, and this is hotel name %s.\",\n+    hotel.getId(), hotel.getName()));\n+```\n+\n+### Adding documents to your index\n+\n+You can `Upload`, `Merge`, `MergeOrUpload`, and `Delete` multiple documents from\n+an index in a single batched request.  There are\n+[a few special rules for merging](https://docs.microsoft.com/rest/api/searchservice/addupdate-or-delete-documents#document-actions)\n+to be aware of.\n+\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L219-L222 -->\n+```Java\n+IndexDocumentsBatch<Hotel> batch = new IndexDocumentsBatch<Hotel>();\n+batch.addUploadActions(new Hotel().setId(\"783\").setName(\"Upload Inn\"));\n+batch.addMergeActions(new Hotel().setId(\"12\").setName(\"Renovated Ranch\"));\n+searchClient.indexDocuments(batch);\n+```\n+\n+The request will throw `IndexBatchException` by default if any of the individual actions fail, and you can use \n+`findFailedActionsToRetry` to retry on failed documents.\n+There's also a `ThrowOnAnyError` option, and you can set it to `false` to get a successful response\n+with an `IndexDocumentsResult` for inspection.\n+\n+\n+### Async APIs\n+\n+All of the examples so far have been using synchronous APIs, but we provide full\n+support for async APIs as well. You'll need to use [SearchAsyncClient](#Create-a-SearchClient)\n+\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L204-L209 -->\n+```Java\n+searchAsyncClient.search(\"luxury\")\n+    .subscribe(result -> {\n+        Hotel hotel = result.getDocument(Hotel.class);\n+        System.out.println(String.format(\"This is hotelId %s, and this is hotel name %s.\",\n+            hotel.getId(), hotel.getName()));\n+    });\n ```\n \n - Samples are explained in detail [here][samples_readme].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6156605ba41ff63fb285936f042c81e2f06d68d4"}, "originalPosition": 438}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE1Mzk4Mg==", "bodyText": "I will make it look better.\nSearch has over 10 sample codes. We will take a lot of spaces to list samples codes, so we align to have link to sample Readme only across languages.\nWe have a link on the top as well.\nSource Code | API Documents | .. | Samples", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12610#discussion_r447153982", "createdAt": "2020-06-29T18:01:31Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/README.md", "diffHunk": "@@ -113,61 +168,258 @@ SearchAsyncClient searchAsyncClient = new SearchClientBuilder()\n     .buildAsyncClient();\n ```\n \n-## Key concepts\n+### Send your first search query\n+\n+To get running immediately, we're going to connect to a well-known sandbox\n+Search service provided by Microsoft. This means you do not need an Azure\n+subscription or Azure Cognitive Search service to try out this query.\n+\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L122-L147 -->\n+```Java\n+// We'll connect to the Azure Cognitive Search public sandbox and send a\n+// query to its \"nycjobs\" index built from a public dataset of available jobs\n+// in New York.\n+String serviceName = \"azs-playground\";\n+String indexName = \"nycjobs\";\n+String apiKey = \"252044BE3886FE4A8E3BAA4F595114BB\";\n+\n+// Create a SearchClient to send queries\n+String serviceEndpoint = String.format(\"https://%s.search.windows.net/\", serviceName);\n+AzureKeyCredential credential = new AzureKeyCredential(apiKey);\n+SearchClient client = new SearchClientBuilder()\n+    .endpoint(serviceEndpoint)\n+    .credential(credential)\n+    .indexName(indexName)\n+    .buildClient();\n \n-Azure Cognitive Search service has the concepts of search services and indexes and documents, where a search service contains \n-one or more indexes that provides persistent storage of searchable data, and data is loaded in the form of JSON documents. \n-Data can be pushed to an index from an external data source, but if you use an indexer, it's possible to crawl a data \n-source to extract and load data into an index.\n+// Let's get the top 5 jobs related to Microsoft\n+SearchPagedIterable searchResultsIterable = client.search(\"Microsoft\", new SearchOptions().setTop(5),\n+    Context.NONE);\n+for (SearchResult searchResult: searchResultsIterable) {\n+    SearchDocument document = searchResult.getDocument(SearchDocument.class);\n+    String title = (String) document.get(\"business_title\");\n+    String description = (String) document.get(\"job_description\");\n+    System.out.println(String.format(\"The business title is %s, and here is the description: %s\",\n+        title, description));\n+}\n+```\n \n-There are several types of operations that can be executed against the service:\n+## Key concepts\n \n--   [Index management operations](https://docs.microsoft.com/en-us/rest/api/searchservice/index-operations). Create, delete, update, or configure a search index.\n--   [Document operations](https://docs.microsoft.com/en-us/rest/api/searchservice/document-operations). Add, update, or delete documents in the index, query the index, or look up specific documents by ID.\n--   [Indexer operations](https://docs.microsoft.com/en-us/rest/api/searchservice/indexer-operations). Automate aspects of an indexing operation by configuring a data source and an indexer that you can schedule or run on demand. This feature is supported for a limited number of data source types.\n--   [Skillset operations](https://docs.microsoft.com/en-us/rest/api/searchservice/skillset-operations). Part of AI workload, a skillset defines a series of a series of enrichment processing steps. A skillset is consumed by an indexer.\n--   [Synonym map operations](https://docs.microsoft.com/en-us/rest/api/searchservice/synonym-map-operations). A synonym map is a service-level resource that contains user-defined synonyms. This resource is maintained independently from search indexes. Once uploaded, you can point any searchable field to the synonym map (one per field).\n+An Azure Cognitive Search service contains one or more indexes that provide\n+persistent storage of searchable data in the form of JSON documents.  _(If\n+you're brand new to search, you can make a very rough analogy between\n+indexes and database tables.)_  The Azure.Search.Documents client library\n+exposes operations on these resources through two main client types.\n+\n+* `SearchClient` helps with:\n+  * [Searching](https://docs.microsoft.com/azure/search/search-lucene-query-architecture)\n+    your indexed documents using\n+    [rich queries](https://docs.microsoft.com/azure/search/search-query-overview)\n+    and [powerful data shaping](https://docs.microsoft.com/azure/search/search-filters)\n+  * [Autocompleting](https://docs.microsoft.com/rest/api/searchservice/autocomplete)\n+    partially typed search terms based on documents in the index\n+  * [Suggesting](https://docs.microsoft.com/rest/api/searchservice/suggestions)\n+    the most likely matching text in documents as a user types\n+  * [Adding, Updating or Deleting Documents](https://docs.microsoft.com/rest/api/searchservice/addupdate-or-delete-documents)\n+    documents from an index\n+\n+* `SearchIndexClient` allows you to:\n+  * [Create, delete, update, or configure a search index](https://docs.microsoft.com/rest/api/searchservice/index-operations)\n+  * [Declare custom synonym maps to expand or rewrite queries](https://docs.microsoft.com/rest/api/searchservice/synonym-map-operations)\n+  * Most of the `SearchServiceClient` functionality is not yet available in our current preview\n+\n+* `SearchIndexerClient` allows you to:\n+  * [Start indexers to automatically crawl data sources](https://docs.microsoft.com/rest/api/searchservice/indexer-operations)\n+  * [Define AI powered Skillsets to transform and enrich your data](https://docs.microsoft.com/rest/api/searchservice/skillset-operations)\n \n ## Examples\n \n-### Create an index\n+#### Use `SearchDocument` like a dictionary\n \n-Create Index using `searchIndexClient` instantiated in [Create a SearchIndexClient](#create-a-searchindexclient)\n+`SearchDocument` is the default type returned from queries when you don't\n+provide your own.  Here we perform the search, enumerate over the results, and\n+extract data using `SearchDocument`'s dictionary indexer.\n \n-<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L116-L121 -->\n-```java\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L151-L157 -->\n+```Java\n+SearchPagedIterable searchResultsIterable = searchClient.search(\"luxury\");\n+for (SearchResult searchResult: searchResultsIterable) {\n+    SearchDocument doc = searchResult.getDocument(SearchDocument.class);\n+    String id = (String) doc.get(\"hotelId\");\n+    String name = (String) doc.get(\"hotelName\");\n+    System.out.println(String.format(\"This is hotel Id %s, and this is hotel name %s%n.\", id, name));\n+}\n ```\n-### Upload a Document\n \n-Upload hotel document to Search Index using `searchClient` instantiated [Create a SearchClient](#create-a-searchclient)\n+#### Use Java model class\n+Define a `Hotel` class.\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L160-L181 -->\n+```Java\n+public class Hotel {\n+    private String id;\n+    private String name;\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public Hotel setId(String id) {\n+        this.id = id;\n+        return this;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public Hotel setName(String name) {\n+        this.name = name;\n+        return this;\n+    }\n+}\n+```\n \n-<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L123-L128 -->\n-```java\n-List<Hotel> hotels = new ArrayList<>();\n-hotels.add(new Hotel().setHotelId(\"100\"));\n-hotels.add(new Hotel().setHotelId(\"200\"));\n-hotels.add(new Hotel().setHotelId(\"300\"));\n-// Upload hotel.\n-searchClient.uploadDocuments(hotels);\n+And use them in place of `SearchDocument` when querying.\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L184-L190 -->\n+```Java\n+SearchPagedIterable searchResultsIterable = searchClient.search(\"luxury\");\n+for (SearchResult searchResult: searchResultsIterable) {\n+    Hotel doc = searchResult.getDocument(Hotel.class);\n+    String id = doc.getId();\n+    String name = doc.getName();\n+    System.out.println(String.format(\"This is hotelId %s, and this is hotel name %s.\", id, name));\n+}\n ```\n \n-### Search on hotel name\n+If you're working with a search index and know the schema, creating Java model class\n+is recommended.\n \n-Search hotel using keyword using `searchClient` instantiated in [Create a SearchClient](#create-a-searchclient)\n+#### Search Options\n \n-<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L132-L142 -->\n-```java\n-// Perform a text-based search\n-for (SearchResult result : searchClient.search(\"luxury hotel\",\n-    new SearchOptions(), Context.NONE)) {\n+The `SearchOptions` provide powerful control over the behavior of our queries.\n+Let's search for the top 5 luxury hotels with a good rating.\n \n-    // Each result is a dynamic Map\n-    SearchDocument doc = result.getDocument(SearchDocument.class);\n-    String hotelName = (String) doc.get(\"HotelName\");\n-    Double rating = (Double) doc.get(\"Rating\");\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L194-L200 -->\n+```Java \n+int stars = 4;\n+SearchOptions options = new SearchOptions()\n+    .setFilter(String.format(\"rating ge %s\", stars))\n+    .setOrderBy(\"rating desc\")\n+    .setTop(5);\n+SearchPagedIterable searchResultsIterable = searchClient.search(\"luxury\", options, Context.NONE);\n+// ...\n+```\n \n-    System.out.printf(\"%s: %s%n\", hotelName, rating);\n-}\n+### Creating an index\n+\n+You can use the [`SearchIndexClient`](#Create-a-SearchIndexClient) to create a search index. Fields can be\n+defined using convenient `SimpleField`, `SearchableField`, or `ComplexField`\n+classes. Indexes can also define suggesters, lexical analyzers, and more.\n+\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L226-L276 -->\n+```Java\n+// Prepare SearchFields with SimpleFieldBuilder, SearchableFieldBuilder and ComplexFieldBuilder.\n+List<SearchField> searchFieldList = new ArrayList<>();\n+searchFieldList.add(new SimpleFieldBuilder(\"hotelId\", SearchFieldDataType.STRING, false)\n+    .setKey(true)\n+    .setFilterable(true)\n+    .setSortable(true)\n+    .build());\n+searchFieldList.add(new SearchableFieldBuilder(\"hotelName\", false)\n+    .setFilterable(true)\n+    .setSortable(true)\n+    .build());\n+searchFieldList.add(new SearchableFieldBuilder(\"description\", false)\n+    .setAnalyzerName(LexicalAnalyzerName.EU_LUCENE)\n+    .build());\n+searchFieldList.add(new SearchableFieldBuilder(\"tags\", true)\n+    .setKey(true)\n+    .setFilterable(true)\n+    .setFacetable(true)\n+    .build());\n+searchFieldList.add(new ComplexFieldBuilder(\"address\", false)\n+    .setFields(Arrays.asList(\n+        new SearchableFieldBuilder(\"streetAddress\", false).build(),\n+        new SearchableFieldBuilder(\"city\", false)\n+            .setFilterable(true)\n+            .setFacetable(true)\n+            .setSortable(true)\n+            .build(),\n+        new SearchableFieldBuilder(\"stateProvince\", false)\n+            .setFilterable(true)\n+            .setFacetable(true)\n+            .setSortable(true)\n+            .build(),\n+        new SearchableFieldBuilder(\"country\", false)\n+            .setFilterable(true)\n+            .setFacetable(true)\n+            .setSortable(true)\n+            .build(),\n+        new SearchableFieldBuilder(\"postalCode\", false)\n+            .setFilterable(true)\n+            .setFacetable(true)\n+            .setSortable(true)\n+            .build()\n+    ))\n+    .build());\n+// Prepare suggester.\n+SearchSuggester suggester = new SearchSuggester(\"sg\", Collections.singletonList(\"hotelName\"));\n+// Prepare SearchIndex with index name and search fields.\n+SearchIndex index = new SearchIndex(\"hotels\").setFields(searchFieldList).setSuggesters(\n+    Collections.singletonList(suggester));\n+// Create an index\n+searchIndexClient.createIndex(index);\n+```\n+\n+### Retrieving a specific document from your index\n+\n+In addition to querying for documents using keywords and optional filters,\n+you can retrieve a specific document from your index if you already know the\n+key. You could get the key from a query, for example, and want to show more\n+information about it or navigate your customer to that document.\n+\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L213-L215 -->\n+```Java \n+Hotel hotel = searchClient.getDocument(\"1\", Hotel.class);\n+System.out.println(String.format(\"This is hotelId %s, and this is hotel name %s.\",\n+    hotel.getId(), hotel.getName()));\n+```\n+\n+### Adding documents to your index\n+\n+You can `Upload`, `Merge`, `MergeOrUpload`, and `Delete` multiple documents from\n+an index in a single batched request.  There are\n+[a few special rules for merging](https://docs.microsoft.com/rest/api/searchservice/addupdate-or-delete-documents#document-actions)\n+to be aware of.\n+\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L219-L222 -->\n+```Java\n+IndexDocumentsBatch<Hotel> batch = new IndexDocumentsBatch<Hotel>();\n+batch.addUploadActions(new Hotel().setId(\"783\").setName(\"Upload Inn\"));\n+batch.addMergeActions(new Hotel().setId(\"12\").setName(\"Renovated Ranch\"));\n+searchClient.indexDocuments(batch);\n+```\n+\n+The request will throw `IndexBatchException` by default if any of the individual actions fail, and you can use \n+`findFailedActionsToRetry` to retry on failed documents.\n+There's also a `ThrowOnAnyError` option, and you can set it to `false` to get a successful response\n+with an `IndexDocumentsResult` for inspection.\n+\n+\n+### Async APIs\n+\n+All of the examples so far have been using synchronous APIs, but we provide full\n+support for async APIs as well. You'll need to use [SearchAsyncClient](#Create-a-SearchClient)\n+\n+<!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L204-L209 -->\n+```Java\n+searchAsyncClient.search(\"luxury\")\n+    .subscribe(result -> {\n+        Hotel hotel = result.getDocument(Hotel.class);\n+        System.out.println(String.format(\"This is hotelId %s, and this is hotel name %s.\",\n+            hotel.getId(), hotel.getName()));\n+    });\n ```\n \n - Samples are explained in detail [here][samples_readme].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE0OTgxNA=="}, "originalCommit": {"oid": "6156605ba41ff63fb285936f042c81e2f06d68d4"}, "originalPosition": 438}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3694, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}