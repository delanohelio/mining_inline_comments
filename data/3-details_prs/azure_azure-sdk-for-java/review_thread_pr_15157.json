{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2MzM3NTgy", "number": 15157, "reviewThreads": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODo1Mzo0MFrOEjBvgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTozNzoyOVrOEjpvKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTY0MTYzOnYy", "diffSide": "LEFT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdServiceEndpoint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODo1Mzo0MFrOHRKKlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDo0MDoxM1rOHRYQzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc1NDM5MA==", "bodyText": "Both metrics below are not consistent right?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487754390", "createdAt": "2020-09-14T08:53:40Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdServiceEndpoint.java", "diffHunk": "@@ -111,12 +111,12 @@ private RntbdServiceEndpoint(\n \n     @Override\n     public int channelsAcquired() {\n-        return this.channelPool.channelsAcquired();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4NTM1Nw==", "bodyText": "ACK - renamed to *metric and added explanation", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487985357", "createdAt": "2020-09-14T14:40:13Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdServiceEndpoint.java", "diffHunk": "@@ -111,12 +111,12 @@ private RntbdServiceEndpoint(\n \n     @Override\n     public int channelsAcquired() {\n-        return this.channelPool.channelsAcquired();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc1NDM5MA=="}, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTY1MDEwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODo1NTo0MVrOHRKPmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDozNjoxMVrOHRYEgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc1NTY3NA==", "bodyText": "requestExpirator [](start = 39, length = 16)\n\nnaming: suffix executor", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487755674", "createdAt": "2020-09-14T08:55:41Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -81,6 +84,11 @@\n     private static final ClosedChannelException ON_DEREGISTER =\n         ThrowableUtil.unknownStackTrace(new ClosedChannelException(), RntbdRequestManager.class, \"deregister\");\n \n+    private static final EventExecutor requestExpirator = new DefaultEventExecutor(new RntbdThreadFactory(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4MjIxMQ==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487982211", "createdAt": "2020-09-14T14:36:11Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -81,6 +84,11 @@\n     private static final ClosedChannelException ON_DEREGISTER =\n         ThrowableUtil.unknownStackTrace(new ClosedChannelException(), RntbdRequestManager.class, \"deregister\");\n \n+    private static final EventExecutor requestExpirator = new DefaultEventExecutor(new RntbdThreadFactory(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc1NTY3NA=="}, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTcyMjkzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOToxNDozN1rOHRK7hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNTozMzowNlrOHRa3SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc2NjkxOQ==", "bodyText": "New requestManager is created per channel. #ThreadFactorys ~ #channels.\nIs this intentional?\nFor large outbound channels (ex: 6K parttions, how does it manifest?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487766919", "createdAt": "2020-09-14T09:14:37Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -81,6 +84,11 @@\n     private static final ClosedChannelException ON_DEREGISTER =\n         ThrowableUtil.unknownStackTrace(new ClosedChannelException(), RntbdRequestManager.class, \"deregister\");\n \n+    private static final EventExecutor requestExpirator = new DefaultEventExecutor(new RntbdThreadFactory(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4MTI1OA==", "bodyText": "Not sure I understand the question - all new event loops are static - so independent of instance count, correct?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487981258", "createdAt": "2020-09-14T14:34:58Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -81,6 +84,11 @@\n     private static final ClosedChannelException ON_DEREGISTER =\n         ThrowableUtil.unknownStackTrace(new ClosedChannelException(), RntbdRequestManager.class, \"deregister\");\n \n+    private static final EventExecutor requestExpirator = new DefaultEventExecutor(new RntbdThreadFactory(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc2NjkxOQ=="}, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAyNzk3Nw==", "bodyText": "Its static please ignore it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r488027977", "createdAt": "2020-09-14T15:33:06Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -81,6 +84,11 @@\n     private static final ClosedChannelException ON_DEREGISTER =\n         ThrowableUtil.unknownStackTrace(new ClosedChannelException(), RntbdRequestManager.class, \"deregister\");\n \n+    private static final EventExecutor requestExpirator = new DefaultEventExecutor(new RntbdThreadFactory(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc2NjkxOQ=="}, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTg0MDExOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo0NToxNlrOHRMCLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDozNToxMVrOHRYBlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4NTAwNQ==", "bodyText": "Clarification: Scheduling is to unblock timer-wheel right?\nThought: Leaving the choice to consumers is error prone, is it possible to force timer wheel it-self own and schedule on them (Of-course follow-up)?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487785005", "createdAt": "2020-09-14T09:45:16Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -567,13 +575,7 @@ private RntbdRequestRecord addPendingRequestRecord(final ChannelHandlerContext c\n             final Timeout pendingRequestTimeout = record.newTimeout(timeout -> {\n \n                 // We don't wish to complete on the timeout thread, but rather on a thread doled out by our executor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4MTQ2Mg==", "bodyText": "Correct", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487981462", "createdAt": "2020-09-14T14:35:11Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -567,13 +575,7 @@ private RntbdRequestRecord addPendingRequestRecord(final ChannelHandlerContext c\n             final Timeout pendingRequestTimeout = record.newTimeout(timeout -> {\n \n                 // We don't wish to complete on the timeout thread, but rather on a thread doled out by our executor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4NTAwNQ=="}, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTg3MTQ5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo1MzoxOFrOHRMVGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDoyODo0NFrOHRXubQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4OTg0OA==", "bodyText": "BacklogItem: gate the validation and detect future regressions.\nIts a generic comments not just spcific to this change.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487789848", "createdAt": "2020-09-14T09:53:18Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -567,13 +575,7 @@ private RntbdRequestRecord addPendingRequestRecord(final ChannelHandlerContext c\n             final Timeout pendingRequestTimeout = record.newTimeout(timeout -> {\n \n                 // We don't wish to complete on the timeout thread, but rather on a thread doled out by our executor\n-                final EventExecutor executor = context.executor();\n-\n-                if (executor.inEventLoop()) {\n-                    record.expire();\n-                } else {\n-                    executor.next().execute(record::expire);\n-                }\n+                requestExpirator.execute(record::expire);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk3NjU1Nw==", "bodyText": "ACK - but let's please track this in work items - not in this PR. We need to make progress on this PR quickly to ship the hotfix.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487976557", "createdAt": "2020-09-14T14:28:44Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -567,13 +575,7 @@ private RntbdRequestRecord addPendingRequestRecord(final ChannelHandlerContext c\n             final Timeout pendingRequestTimeout = record.newTimeout(timeout -> {\n \n                 // We don't wish to complete on the timeout thread, but rather on a thread doled out by our executor\n-                final EventExecutor executor = context.executor();\n-\n-                if (executor.inEventLoop()) {\n-                    record.expire();\n-                } else {\n-                    executor.next().execute(record::expire);\n-                }\n+                requestExpirator.execute(record::expire);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4OTg0OA=="}, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTkyMTIwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDowNTo0NFrOHRMydg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDozMToxMVrOHRX2Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5NzM2Ng==", "bodyText": "Is the move to do-while for readability?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487797366", "createdAt": "2020-09-14T10:05:44Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1108,7 +1206,7 @@ private void runTasksInPendingAcquisitionQueue() {\n \n             task.acquired(true);\n             this.acquire(task.promise);\n-        }\n+        } while (--channelsAvailable> 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 508}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk3ODQ5OA==", "bodyText": "No - it is intentionally executing at least once (even if no channels available to allow for more eager connection initiation. Worst case we pull one pendingAcquisition task from the head and re-enqueue it at the tail. Can result in some unfairness - but from test tests we ran and the discussions/analysis in the last couple of days that trade-off is reasonable. Mo's comment above explains the possible unfairness - so I think we are good here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487978498", "createdAt": "2020-09-14T14:31:11Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1108,7 +1206,7 @@ private void runTasksInPendingAcquisitionQueue() {\n \n             task.acquired(true);\n             this.acquire(task.promise);\n-        }\n+        } while (--channelsAvailable> 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5NzM2Ng=="}, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 508}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTkyMjUyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDowNjowM1rOHRMzJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDo0Mzo0OFrOHRYbhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5NzU0Mg==", "bodyText": "nit: (style) space before >", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487797542", "createdAt": "2020-09-14T10:06:03Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1108,7 +1206,7 @@ private void runTasksInPendingAcquisitionQueue() {\n \n             task.acquired(true);\n             this.acquire(task.promise);\n-        }\n+        } while (--channelsAvailable> 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 508}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4ODEwMw==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487988103", "createdAt": "2020-09-14T14:43:48Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1108,7 +1206,7 @@ private void runTasksInPendingAcquisitionQueue() {\n \n             task.acquired(true);\n             this.acquire(task.promise);\n-        }\n+        } while (--channelsAvailable> 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5NzU0Mg=="}, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 508}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTkzMTI3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDowODoyNFrOHRM4QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDo0MzoyNlrOHRYagw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5ODg0OQ==", "bodyText": "Is this same as above ensureInEventLoop?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487798849", "createdAt": "2020-09-14T10:08:24Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1088,14 +1180,20 @@ private void releaseChannel(final Channel channel, final Promise<Void> promise)\n      * {@link #acquire}.\n      */\n     private void runTasksInPendingAcquisitionQueue() {\n+        ensureInEventLoop();\n \n         this.ensureInEventLoop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 487}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4Nzg0Mw==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487987843", "createdAt": "2020-09-14T14:43:26Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1088,14 +1180,20 @@ private void releaseChannel(final Channel channel, final Promise<Void> promise)\n      * {@link #acquire}.\n      */\n     private void runTasksInPendingAcquisitionQueue() {\n+        ensureInEventLoop();\n \n         this.ensureInEventLoop();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5ODg0OQ=="}, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 487}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTk0MTU4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDoxMTowNFrOHRM-XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzo0NzoxMFrOHRU85A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwMDQxMw==", "bodyText": "Its very easy to slip stream changes violating the assumptions.\nWe need a mechanism to guard/detect (in order of preference) for these critical aspects.\nHow about fail in our gates/CTL/perf runs at-least?\nHow about doing all our current validations with fail semantics?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487800413", "createdAt": "2020-09-14T10:11:04Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1088,14 +1180,20 @@ private void releaseChannel(final Channel channel, final Promise<Void> promise)\n      * {@link #acquire}.\n      */\n     private void runTasksInPendingAcquisitionQueue() {\n+        ensureInEventLoop();\n \n         this.ensureInEventLoop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 487}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxMDA0Mw==", "bodyText": "its error trace and I am not seeing them at-least in my runs.\n\nIn reply to: 487800413 [](ancestors = 487800413)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487810043", "createdAt": "2020-09-14T10:28:11Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1088,14 +1180,20 @@ private void releaseChannel(final Channel channel, final Promise<Void> promise)\n      * {@link #acquire}.\n      */\n     private void runTasksInPendingAcquisitionQueue() {\n+        ensureInEventLoop();\n \n         this.ensureInEventLoop();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwMDQxMw=="}, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 487}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkzMTEwOA==", "bodyText": "ACK - but I think we all agree that making the changes to fail fast will result in additional risk and need for validation (probably with changes to test infrastructure) - so IMO this is something we should do after releasing the hot fix. Makes sense?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487931108", "createdAt": "2020-09-14T13:47:10Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1088,14 +1180,20 @@ private void releaseChannel(final Channel channel, final Promise<Void> promise)\n      * {@link #acquire}.\n      */\n     private void runTasksInPendingAcquisitionQueue() {\n+        ensureInEventLoop();\n \n         this.ensureInEventLoop();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwMDQxMw=="}, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 487}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTk1MTI1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDoxMzozM1rOHRNEEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDo0MzowMlrOHRYZbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwMTg3Mg==", "bodyText": "In my runs instrumented to include the remoteendpoint and it was super useful too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487801872", "createdAt": "2020-09-14T10:13:33Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1332,4 +1430,36 @@ public synchronized Throwable fillInStackTrace() {\n     }\n \n     // endregion\n+\n+    // TODO: remove when we are confident of RNTBD OOM bug\n+    @SuppressWarnings(\"unchecked\")\n+    private ScheduledFuture<?> startMonitoring() {\n+        return monitoringRntbdChannelPool.scheduleAtFixedRate(() -> {\n+            int i = getTaskCount();\n+            if (isInterestingEndpoint()) {\n+                logger.debug(\"{} total number of tasks on the executor [{}], connecting [{}], acquiredChannel [{}], availableChannel [{}], pending acquisition [{}]\",\n+                    this.hashCode(), i, connecting.get(), acquiredChannels.size(), availableChannels.size(), pendingAcquisitions.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 535}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4NzU2Nw==", "bodyText": "Added", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487987567", "createdAt": "2020-09-14T14:43:02Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1332,4 +1430,36 @@ public synchronized Throwable fillInStackTrace() {\n     }\n \n     // endregion\n+\n+    // TODO: remove when we are confident of RNTBD OOM bug\n+    @SuppressWarnings(\"unchecked\")\n+    private ScheduledFuture<?> startMonitoring() {\n+        return monitoringRntbdChannelPool.scheduleAtFixedRate(() -> {\n+            int i = getTaskCount();\n+            if (isInterestingEndpoint()) {\n+                logger.debug(\"{} total number of tasks on the executor [{}], connecting [{}], acquiredChannel [{}], availableChannel [{}], pending acquisition [{}]\",\n+                    this.hashCode(), i, connecting.get(), acquiredChannels.size(), availableChannels.size(), pendingAcquisitions.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwMTg3Mg=="}, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 535}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTk1Njk0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDoxNTowMFrOHRNHZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDoyNzo1OFrOHRXsPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwMjcyNw==", "bodyText": "One more I found useful is to list the channels and their interesting states (specifically the pendingoperations on channel was super useful).\nIt can be filtered on some threshold.\nMay be isInterestingEndpoint() can even be based on that threshold.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487802727", "createdAt": "2020-09-14T10:15:00Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1332,4 +1430,36 @@ public synchronized Throwable fillInStackTrace() {\n     }\n \n     // endregion\n+\n+    // TODO: remove when we are confident of RNTBD OOM bug\n+    @SuppressWarnings(\"unchecked\")\n+    private ScheduledFuture<?> startMonitoring() {\n+        return monitoringRntbdChannelPool.scheduleAtFixedRate(() -> {\n+            int i = getTaskCount();\n+            if (isInterestingEndpoint()) {\n+                logger.debug(\"{} total number of tasks on the executor [{}], connecting [{}], acquiredChannel [{}], availableChannel [{}], pending acquisition [{}]\",\n+                    this.hashCode(), i, connecting.get(), acquiredChannels.size(), availableChannels.size(), pendingAcquisitions.size());\n+            }\n+        }, 0, 60, TimeUnit.SECONDS);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 538}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk3NTk5OQ==", "bodyText": "ACK - But i think we can decide that when we want to remove this additional logging. IMO for now we should leave it in here until we have confirmation that the hotfix addressed all scenarios.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487975999", "createdAt": "2020-09-14T14:27:58Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1332,4 +1430,36 @@ public synchronized Throwable fillInStackTrace() {\n     }\n \n     // endregion\n+\n+    // TODO: remove when we are confident of RNTBD OOM bug\n+    @SuppressWarnings(\"unchecked\")\n+    private ScheduledFuture<?> startMonitoring() {\n+        return monitoringRntbdChannelPool.scheduleAtFixedRate(() -> {\n+            int i = getTaskCount();\n+            if (isInterestingEndpoint()) {\n+                logger.debug(\"{} total number of tasks on the executor [{}], connecting [{}], acquiredChannel [{}], availableChannel [{}], pending acquisition [{}]\",\n+                    this.hashCode(), i, connecting.get(), acquiredChannels.size(), availableChannels.size(), pendingAcquisitions.size());\n+            }\n+        }, 0, 60, TimeUnit.SECONDS);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwMjcyNw=="}, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 538}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjA2OTk3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDo0Nzo0N1rOHROLeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDoyNjoxMVrOHRXl2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyMDE1NA==", "bodyText": "Clarification(non-blocking): Any idea if netty duplex channel support timeout OOB?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487820154", "createdAt": "2020-09-14T10:47:47Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -567,13 +575,7 @@ private RntbdRequestRecord addPendingRequestRecord(final ChannelHandlerContext c\n             final Timeout pendingRequestTimeout = record.newTimeout(timeout -> {\n \n                 // We don't wish to complete on the timeout thread, but rather on a thread doled out by our executor\n-                final EventExecutor executor = context.executor();\n-\n-                if (executor.inEventLoop()) {\n-                    record.expire();\n-                } else {\n-                    executor.next().execute(record::expire);\n-                }\n+                requestExpirator.execute(record::expire);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk3NDM2Mg==", "bodyText": "Can be discussed offline.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487974362", "createdAt": "2020-09-14T14:26:11Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -567,13 +575,7 @@ private RntbdRequestRecord addPendingRequestRecord(final ChannelHandlerContext c\n             final Timeout pendingRequestTimeout = record.newTimeout(timeout -> {\n \n                 // We don't wish to complete on the timeout thread, but rather on a thread doled out by our executor\n-                final EventExecutor executor = context.executor();\n-\n-                if (executor.inEventLoop()) {\n-                    record.expire();\n-                } else {\n-                    executor.next().execute(record::expire);\n-                }\n+                requestExpirator.execute(record::expire);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyMDE1NA=="}, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjU1NDIxOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMToyMFrOHRSpcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzo0OToxMFrOHRVE-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MzM2Mg==", "bodyText": "RntbdClientChannelPool is a ChannelPool.\nSo far my understanding is its an abstraction facilitating the pooling mechanism. Haven't seen it coupled with the core netty Channels or handlers.\nThe attribute is a way of correlating it with the pool. Below mechanism is to purely ensure that release done on the same pool.\nelse case is interesting. Closing on this channel will only release the underlying channel but the associated pool state will be in-consistent.\nMi-targeting can happen if there are multiple ServcieEndpints for the same remote address, which means idle-time handling.\nLets not gate these fixes on it.\nPlease remove this comment.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487893362", "createdAt": "2020-09-14T13:01:20Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1044,9 +1136,9 @@ private void releaseAndOfferChannelIfHealthy(\n      * promise} completes with an {@link IllegalStateException}.\n      */\n     private void releaseChannel(final Channel channel, final Promise<Void> promise) {\n-\n         checkState(channel.eventLoop().inEventLoop());\n \n+        // TODO: moderakh what is ChannelPool", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 477}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkzMzE3Nw==", "bodyText": "Agreed. Removed the TODO.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487933177", "createdAt": "2020-09-14T13:49:10Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1044,9 +1136,9 @@ private void releaseAndOfferChannelIfHealthy(\n      * promise} completes with an {@link IllegalStateException}.\n      */\n     private void releaseChannel(final Channel channel, final Promise<Void> promise) {\n-\n         checkState(channel.eventLoop().inEventLoop());\n \n+        // TODO: moderakh what is ChannelPool", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MzM2Mg=="}, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 477}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjYxMDk1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoxNDo0MFrOHRTLeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDoyNTo0NlrOHRXkmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwMjA3Mw==", "bodyText": "Did it help in any scenario or is it a defensive programming?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487902073", "createdAt": "2020-09-14T13:14:40Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -980,6 +1069,9 @@ private Channel pollChannel() {\n     private void releaseAndOfferChannel(final Channel channel, final Promise<Void> promise) {\n         this.ensureInEventLoop();\n         try {\n+\n+            // TODO: moderakh is this right?!!!!!\n+            this.acquiredChannels.remove(channel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 466}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk3NDA0MA==", "bodyText": "Yes - removed the comment. There was one scenario where we ended up leaving a channel in acquiredChannels and availableChannels. This was part of the fix to make sure we don't establish more connections than MaxChannels...", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487974040", "createdAt": "2020-09-14T14:25:46Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -980,6 +1069,9 @@ private Channel pollChannel() {\n     private void releaseAndOfferChannel(final Channel channel, final Promise<Void> promise) {\n         this.ensureInEventLoop();\n         try {\n+\n+            // TODO: moderakh is this right?!!!!!\n+            this.acquiredChannels.remove(channel);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwMjA3Mw=="}, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 466}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjYxOTIyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoxNjoyNFrOHRTQbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDowMDoxM1rOHRVzaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwMzM0MA==", "bodyText": "Please add comments on reason for \"false' choice.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487903340", "createdAt": "2020-09-14T13:16:24Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -947,19 +1038,17 @@ private Channel pollChannel() {\n             return first;  // because this.close -> this.close0 -> this.pollChannel\n         }\n \n-        if (this.isChannelServiceable(first)) {\n+        if (this.isChannelServiceable(first, false)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 442}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk0NTA2NQ==", "bodyText": "Added comments", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487945065", "createdAt": "2020-09-14T14:00:13Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -947,19 +1038,17 @@ private Channel pollChannel() {\n             return first;  // because this.close -> this.close0 -> this.pollChannel\n         }\n \n-        if (this.isChannelServiceable(first)) {\n+        if (this.isChannelServiceable(first, false)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwMzM0MA=="}, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 442}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjYyNDAyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoxNzozMVrOHRTTTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDowMjoxMFrOHRV7mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwNDA3Nw==", "bodyText": "Clarification: Any idea on why the first channel short circuit has a different pre-condition (isClosed())?\nOr why can't it be a simple loop and pick the one which is available?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487904077", "createdAt": "2020-09-14T13:17:31Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -947,19 +1038,17 @@ private Channel pollChannel() {\n             return first;  // because this.close -> this.close0 -> this.pollChannel\n         }\n \n-        if (this.isChannelServiceable(first)) {\n+        if (this.isChannelServiceable(first, false)) {\n             return first;\n         }\n \n         this.availableChannels.offer(first);  // because we need a non-null sentinel to stop the search for a channel\n \n-        for (Channel next = this.availableChannels.pollLast(); next != first; next =\n-            this.availableChannels.pollLast()) {\n-\n+        for (Channel next = this.availableChannels.pollLast(); next != first; next = this.availableChannels.pollLast()) {\n             assert next != null : \"impossible\";\n \n             if (next.isActive()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 454}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk0NzE2MA==", "bodyText": "The is a comment in the short-circuit above already - to avoid an infinite loop in the close code sequence.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487947160", "createdAt": "2020-09-14T14:02:10Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -947,19 +1038,17 @@ private Channel pollChannel() {\n             return first;  // because this.close -> this.close0 -> this.pollChannel\n         }\n \n-        if (this.isChannelServiceable(first)) {\n+        if (this.isChannelServiceable(first, false)) {\n             return first;\n         }\n \n         this.availableChannels.offer(first);  // because we need a non-null sentinel to stop the search for a channel\n \n-        for (Channel next = this.availableChannels.pollLast(); next != first; next =\n-            this.availableChannels.pollLast()) {\n-\n+        for (Channel next = this.availableChannels.pollLast(); next != first; next = this.availableChannels.pollLast()) {\n             assert next != null : \"impossible\";\n \n             if (next.isActive()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwNDA3Nw=="}, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 454}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjYzNDkwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoyMDowMlrOHRTZ_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoyMDowMlrOHRTZ_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwNTc4OQ==", "bodyText": "pollChannel [](start = 20, length = 11)\n\nI like the 'safe' naming convention used for new code.\nWorth adding that prefix for the same for other existing safe methods as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487905789", "createdAt": "2020-09-14T13:20:02Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -936,6 +1026,7 @@ private boolean offerChannel(final Channel channel) {\n      * @see #acquire(Promise)\n      */\n     private Channel pollChannel() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 432}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjY0MzIzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoyMTo0OFrOHRTe5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDowMzoyMlrOHRWAYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwNzA0NA==", "bodyText": "nit: remove extra line", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487907044", "createdAt": "2020-09-14T13:21:48Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -884,8 +974,8 @@ private void notifyChannelHealthCheck(\n                 try {\n                     channel.attr(POOL_KEY).set(this);\n                     this.poolHandler.channelAcquired(channel);\n-                    this.acquiredChannels.put(channel, channel);\n                     promise.setSuccess(channel);\n+\n                 } catch (Throwable cause) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 426}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk0ODM4Ng==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487948386", "createdAt": "2020-09-14T14:03:22Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -884,8 +974,8 @@ private void notifyChannelHealthCheck(\n                 try {\n                     channel.attr(POOL_KEY).set(this);\n                     this.poolHandler.channelAcquired(channel);\n-                    this.acquiredChannels.put(channel, channel);\n                     promise.setSuccess(channel);\n+\n                 } catch (Throwable cause) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwNzA0NA=="}, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 426}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjY5OTgzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzozMjoxN1rOHRUARA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDowNzo1MFrOHRWWrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxNTU4OA==", "bodyText": "Why is it pulled out of EventLoop ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487915588", "createdAt": "2020-09-14T13:32:17Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -661,6 +707,7 @@ private double computeLoadFactor() {\n     }\n \n     private void doAcquireChannel(final Promise<Channel> promise, final Channel candidate) {\n+        acquiredChannels.put(candidate, candidate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 271}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk1NDA5Mg==", "bodyText": "doChannelHealthChecks interacts with the Channel and needs to be executed on the channel's eventLoop thread. This usually is a different thread than the channel pool's event loop thread - technically could be the same thought as well.\nFor clarity added a this.ensureInEventLoop (which happened already before - so just to make it more robust)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487954092", "createdAt": "2020-09-14T14:07:50Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -661,6 +707,7 @@ private double computeLoadFactor() {\n     }\n \n     private void doAcquireChannel(final Promise<Channel> promise, final Channel candidate) {\n+        acquiredChannels.put(candidate, candidate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxNTU4OA=="}, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 271}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjcxNzEwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzozNDo0MFrOHRUKCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDoxMTo0OVrOHRWr1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxODA4OA==", "bodyText": "Can these be made fully deterministic (like do either in the EventLoop or !EventLoop)?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487918088", "createdAt": "2020-09-14T13:34:40Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -561,15 +608,15 @@ private void acquireChannel(final Promise<Channel> promise) {\n      */\n     private void addTaskToPendingAcquisitionQueue(Promise<Channel> promise) {\n \n-        this.ensureInEventLoop();\n+//        this.ensureInEventLoop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk1OTUxMA==", "bodyText": "There is simply no need for this to run on the event loop's thread - but no harm in doing so either - actually for perf it is better to do this inline to eagerly pump pending acquisitions.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487959510", "createdAt": "2020-09-14T14:11:49Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -561,15 +608,15 @@ private void acquireChannel(final Promise<Channel> promise) {\n      */\n     private void addTaskToPendingAcquisitionQueue(Promise<Channel> promise) {\n \n-        this.ensureInEventLoop();\n+//        this.ensureInEventLoop();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxODA4OA=="}, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 216}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjcyOTQ4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzozNjoyMlrOHRURJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDoxMzo1OFrOHRW0gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxOTkxMA==", "bodyText": "Much of troubleshooting/investigation context is fresh in minds but will have a high decay factor.\nThoughts on capturing that fully context in the code.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487919910", "createdAt": "2020-09-14T13:36:22Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -495,7 +531,7 @@ private void acquireChannel(final Promise<Channel> promise) {\n                 return;\n             }\n \n-            final int channelCount = this.channels();\n+            final int channelCount = this.channels(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk2MTczMA==", "bodyText": "Added comment", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487961730", "createdAt": "2020-09-14T14:13:58Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -495,7 +531,7 @@ private void acquireChannel(final Promise<Channel> promise) {\n                 return;\n             }\n \n-            final int channelCount = this.channels();\n+            final int channelCount = this.channels(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxOTkxMA=="}, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Mjc3NzI3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzo0MzowM1rOHRUslQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDoyMTo0OFrOHRXWpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkyNjkzMw==", "bodyText": "Tracing the remoteendpint of channel will be quite useful during troubleshooting.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487926933", "createdAt": "2020-09-14T13:43:03Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -525,20 +561,31 @@ private void acquireChannel(final Promise<Channel> promise) {\n                 for (Channel channel : this.availableChannels) {\n \n                     final RntbdRequestManager manager = channel.pipeline().get(RntbdRequestManager.class);\n-                    final long pendingRequestCount = manager.pendingRequestCount();\n \n-                    if (pendingRequestCount < pendingRequestCountMin) {\n-                        pendingRequestCountMin = pendingRequestCount;\n-                        candidate = channel;\n+                    if (manager == null) {\n+                        logger.warn(\"Channel({}) closed\", channel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk3MDQ3MQ==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487970471", "createdAt": "2020-09-14T14:21:48Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -525,20 +561,31 @@ private void acquireChannel(final Promise<Channel> promise) {\n                 for (Channel channel : this.availableChannels) {\n \n                     final RntbdRequestManager manager = channel.pipeline().get(RntbdRequestManager.class);\n-                    final long pendingRequestCount = manager.pendingRequestCount();\n \n-                    if (pendingRequestCount < pendingRequestCountMin) {\n-                        pendingRequestCountMin = pendingRequestCount;\n-                        candidate = channel;\n+                    if (manager == null) {\n+                        logger.warn(\"Channel({}) closed\", channel);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkyNjkzMw=="}, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjkyMzU2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDowMzoyNFrOHRWAeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDoxNzo0OVrOHRXFaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk0ODQwOA==", "bodyText": "Concurrent select of a channel is fine right?\nIf so will there be multple release calls for the channel as well?\nWill this looped over long time lead to un-intended overload of channels?\nMy assumption is the channel usage is guarded by the EvetnLoop so even the same channel is given back multiple timeback then it should be okey right?\nWith the same assumption and assuming that uneven load-balacing with-in limits is acceptable, then will a single queue and linear check of availability work?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487948408", "createdAt": "2020-09-14T14:03:24Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -525,20 +561,31 @@ private void acquireChannel(final Promise<Channel> promise) {\n                 for (Channel channel : this.availableChannels) {\n \n                     final RntbdRequestManager manager = channel.pipeline().get(RntbdRequestManager.class);\n-                    final long pendingRequestCount = manager.pendingRequestCount();\n \n-                    if (pendingRequestCount < pendingRequestCountMin) {\n-                        pendingRequestCountMin = pendingRequestCount;\n-                        candidate = channel;\n+                    if (manager == null) {\n+                        logger.warn(\"Channel({}) closed\", channel);\n+                    } else {\n+                        final long pendingRequestCount = manager.pendingRequestCount();\n+                        if (isChannelServiceable(channel, true) && pendingRequestCount < pendingRequestCountMin) {\n+                            pendingRequestCountMin = pendingRequestCount;\n+                            candidate = channel;\n+                        }\n                     }\n                 }\n \n-                assert candidate != null;\n-\n-                this.availableChannels.remove(candidate);\n-                doAcquireChannel(promise, candidate);\n-\n-                return;\n+                if (candidate != null && this.availableChannels.remove(candidate)) {\n+                    this.doAcquireChannel(promise, candidate);\n+                    return;\n+                }\n+            } else {\n+                for (Channel channel : this.availableChannels) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk2NjA1Nw==", "bodyText": "Added comment with explanation", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487966057", "createdAt": "2020-09-14T14:17:49Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -525,20 +561,31 @@ private void acquireChannel(final Promise<Channel> promise) {\n                 for (Channel channel : this.availableChannels) {\n \n                     final RntbdRequestManager manager = channel.pipeline().get(RntbdRequestManager.class);\n-                    final long pendingRequestCount = manager.pendingRequestCount();\n \n-                    if (pendingRequestCount < pendingRequestCountMin) {\n-                        pendingRequestCountMin = pendingRequestCount;\n-                        candidate = channel;\n+                    if (manager == null) {\n+                        logger.warn(\"Channel({}) closed\", channel);\n+                    } else {\n+                        final long pendingRequestCount = manager.pendingRequestCount();\n+                        if (isChannelServiceable(channel, true) && pendingRequestCount < pendingRequestCountMin) {\n+                            pendingRequestCountMin = pendingRequestCount;\n+                            candidate = channel;\n+                        }\n                     }\n                 }\n \n-                assert candidate != null;\n-\n-                this.availableChannels.remove(candidate);\n-                doAcquireChannel(promise, candidate);\n-\n-                return;\n+                if (candidate != null && this.availableChannels.remove(candidate)) {\n+                    this.doAcquireChannel(promise, candidate);\n+                    return;\n+                }\n+            } else {\n+                for (Channel channel : this.availableChannels) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk0ODQwOA=="}, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzAwOTg0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDoxNDoxN1rOHRW14A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDoxNDoxN1rOHRW14A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk2MjA4MA==", "bodyText": "+1 to this pattern.\nearlier might look okey as poolHandler notification is very light weight and almost doesn't fail, but this is a pattern we should force in reviews.\nThanks,", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487962080", "createdAt": "2020-09-14T14:14:17Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -839,43 +902,70 @@ private void newTimeout(\n             }, requestTimerResolutionInNanos, TimeUnit.NANOSECONDS));\n     }\n \n+    private void safeNotifyChannelConnect(final ChannelFuture future, final Promise<Channel> promise) {\n+        if (this.executor.inEventLoop()) {\n+            notifyChannelConnect(future, promise);\n+        } else {\n+            this.executor.submit(() ->  notifyChannelConnect(future, promise));\n+        }\n+    }\n+\n     private void notifyChannelConnect(final ChannelFuture future, final Promise<Channel> promise) {\n+        ensureInEventLoop();\n \n         reportIssueUnless(logger, this.connecting.get(), this, \"connecting: false\");\n \n-        if (future.isSuccess()) {\n+        try {\n+            if (future.isSuccess()) {\n+                final Channel channel = future.channel();\n \n-            final Channel channel = future.channel();\n+                try {\n+                    this.poolHandler.channelAcquired(channel);\n+                } catch (Throwable error) {\n+                    this.closeChannelAndFail(channel, error, promise);\n+                    return;\n+                }\n \n-            try {\n-                this.poolHandler.channelAcquired(channel);\n-            } catch (Throwable error) {\n-                this.closeChannelAndFail(channel, error, promise);\n-                return;\n-            }\n+                if (promise.trySuccess(channel)) {\n+\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"established a channel local {}, remote {}\", channel.localAddress(), channel.remoteAddress());\n+                    }\n+                    this.acquiredChannels.compute(channel, (ignored, acquiredChannel) -> {\n+                        //                    reportIssueUnless(logger, v == null, this, \"expected null channel, not {}\", v);\n+\n+                        reportIssueUnless(logger, acquiredChannel == null, this,\n+                            \"Channel({}) to be acquired has already been acquired\",\n+                            channel);\n+                        reportIssueUnless(logger, !this.availableChannels.remove(channel), this,\n+                            \"Channel({}) to be acquired is still in the list of available channels\",\n+                            channel);\n+\n+                        return channel;\n+                    });\n+                } else {\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"notifyChannelConnect promise.trySuccess(channel)=false\");\n+                    }\n+                    // Promise was completed in the meantime (like cancelled), just close the channel\n+                    this.closeChannel(channel);\n+                }\n \n-            if (promise.trySuccess(channel)) {\n-                this.acquiredChannels.compute(channel, (k, v) -> {\n-                    reportIssueUnless(logger, v == null, this, \"expected null channel, not {}\", v);\n-                    this.connecting.set(false);\n-                    return channel;\n-                });\n             } else {\n-                // Promise was completed in the meantime (like cancelled), just close the channel\n-                this.closeChannel(channel);\n-                this.connecting.set(false);\n+                if (logger.isDebugEnabled()) {\n+                    logger.debug(\"notifyChannelConnect future was not successful\");\n+                }\n+                promise.tryFailure(future.cause());\n             }\n-\n-        } else {\n-            promise.tryFailure(future.cause());\n+        } finally {\n+            this.connecting.set(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 407}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzAxODQzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDoxNToyOVrOHRW7Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDoxOTowNFrOHRXKow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk2MzM5OQ==", "bodyText": "nit: new line before.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487963399", "createdAt": "2020-09-14T14:15:29Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -839,43 +902,70 @@ private void newTimeout(\n             }, requestTimerResolutionInNanos, TimeUnit.NANOSECONDS));\n     }\n \n+    private void safeNotifyChannelConnect(final ChannelFuture future, final Promise<Channel> promise) {\n+        if (this.executor.inEventLoop()) {\n+            notifyChannelConnect(future, promise);\n+        } else {\n+            this.executor.submit(() ->  notifyChannelConnect(future, promise));\n+        }\n+    }\n+\n     private void notifyChannelConnect(final ChannelFuture future, final Promise<Channel> promise) {\n+        ensureInEventLoop();\n \n         reportIssueUnless(logger, this.connecting.get(), this, \"connecting: false\");\n \n-        if (future.isSuccess()) {\n+        try {\n+            if (future.isSuccess()) {\n+                final Channel channel = future.channel();\n \n-            final Channel channel = future.channel();\n+                try {\n+                    this.poolHandler.channelAcquired(channel);\n+                } catch (Throwable error) {\n+                    this.closeChannelAndFail(channel, error, promise);\n+                    return;\n+                }\n \n-            try {\n-                this.poolHandler.channelAcquired(channel);\n-            } catch (Throwable error) {\n-                this.closeChannelAndFail(channel, error, promise);\n-                return;\n-            }\n+                if (promise.trySuccess(channel)) {\n+\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"established a channel local {}, remote {}\", channel.localAddress(), channel.remoteAddress());\n+                    }\n+                    this.acquiredChannels.compute(channel, (ignored, acquiredChannel) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 368}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk2NzM5NQ==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487967395", "createdAt": "2020-09-14T14:19:04Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -839,43 +902,70 @@ private void newTimeout(\n             }, requestTimerResolutionInNanos, TimeUnit.NANOSECONDS));\n     }\n \n+    private void safeNotifyChannelConnect(final ChannelFuture future, final Promise<Channel> promise) {\n+        if (this.executor.inEventLoop()) {\n+            notifyChannelConnect(future, promise);\n+        } else {\n+            this.executor.submit(() ->  notifyChannelConnect(future, promise));\n+        }\n+    }\n+\n     private void notifyChannelConnect(final ChannelFuture future, final Promise<Channel> promise) {\n+        ensureInEventLoop();\n \n         reportIssueUnless(logger, this.connecting.get(), this, \"connecting: false\");\n \n-        if (future.isSuccess()) {\n+        try {\n+            if (future.isSuccess()) {\n+                final Channel channel = future.channel();\n \n-            final Channel channel = future.channel();\n+                try {\n+                    this.poolHandler.channelAcquired(channel);\n+                } catch (Throwable error) {\n+                    this.closeChannelAndFail(channel, error, promise);\n+                    return;\n+                }\n \n-            try {\n-                this.poolHandler.channelAcquired(channel);\n-            } catch (Throwable error) {\n-                this.closeChannelAndFail(channel, error, promise);\n-                return;\n-            }\n+                if (promise.trySuccess(channel)) {\n+\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"established a channel local {}, remote {}\", channel.localAddress(), channel.remoteAddress());\n+                    }\n+                    this.acquiredChannels.compute(channel, (ignored, acquiredChannel) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk2MzM5OQ=="}, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 368}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDg3NzgxOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMjoxMjoxOVrOHRotlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMjo0Nzo1NVrOHRuh0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI1NDg3MA==", "bodyText": "Do we need to repeat finding channel if this.availableChannels.remove(candidate)  is false . The way we are going to next channel in else block ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r488254870", "createdAt": "2020-09-14T22:12:19Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -525,20 +560,38 @@ private void acquireChannel(final Promise<Channel> promise) {\n                 for (Channel channel : this.availableChannels) {\n \n                     final RntbdRequestManager manager = channel.pipeline().get(RntbdRequestManager.class);\n-                    final long pendingRequestCount = manager.pendingRequestCount();\n \n-                    if (pendingRequestCount < pendingRequestCountMin) {\n-                        pendingRequestCountMin = pendingRequestCount;\n-                        candidate = channel;\n+                    if (manager == null) {\n+                        logger.warn(\"Channel({} --> {}) closed\", channel, this.remoteAddress());\n+                    } else {\n+                        final long pendingRequestCount = manager.pendingRequestCount();\n+\n+                        // we accept the risk of reusing the channel even if more than maxPendingRequests are\n+                        // queued - by picking the channel with the least number of outstanding requests we load\n+                        // balance reasonably\n+                        if (isChannelServiceable(channel, true) && pendingRequestCount < pendingRequestCountMin) {\n+                            pendingRequestCountMin = pendingRequestCount;\n+                            candidate = channel;\n+                        }\n                     }\n                 }\n \n-                assert candidate != null;\n-\n-                this.availableChannels.remove(candidate);\n-                doAcquireChannel(promise, candidate);\n+                if (candidate != null && this.availableChannels.remove(candidate)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d611df90c1a689865cd5f6e69579aeddff438adc"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM1MDE2MA==", "bodyText": "Talked through this offline - current behavior when loadFactor is above 90% is intentional.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r488350160", "createdAt": "2020-09-15T02:47:55Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -525,20 +560,38 @@ private void acquireChannel(final Promise<Channel> promise) {\n                 for (Channel channel : this.availableChannels) {\n \n                     final RntbdRequestManager manager = channel.pipeline().get(RntbdRequestManager.class);\n-                    final long pendingRequestCount = manager.pendingRequestCount();\n \n-                    if (pendingRequestCount < pendingRequestCountMin) {\n-                        pendingRequestCountMin = pendingRequestCount;\n-                        candidate = channel;\n+                    if (manager == null) {\n+                        logger.warn(\"Channel({} --> {}) closed\", channel, this.remoteAddress());\n+                    } else {\n+                        final long pendingRequestCount = manager.pendingRequestCount();\n+\n+                        // we accept the risk of reusing the channel even if more than maxPendingRequests are\n+                        // queued - by picking the channel with the least number of outstanding requests we load\n+                        // balance reasonably\n+                        if (isChannelServiceable(channel, true) && pendingRequestCount < pendingRequestCountMin) {\n+                            pendingRequestCountMin = pendingRequestCount;\n+                            candidate = channel;\n+                        }\n                     }\n                 }\n \n-                assert candidate != null;\n-\n-                this.availableChannels.remove(candidate);\n-                doAcquireChannel(promise, candidate);\n+                if (candidate != null && this.availableChannels.remove(candidate)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI1NDg3MA=="}, "originalCommit": {"oid": "d611df90c1a689865cd5f6e69579aeddff438adc"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODE2NDkzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTozMTowMFrOHSHqHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTozMTowMFrOHSHqHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc2MTg4NA==", "bodyText": "Can it be connectionTimeout?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r488761884", "createdAt": "2020-09-15T15:31:00Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "diffHunk": "@@ -340,7 +340,7 @@ private Options(final Builder builder) {\n \n         private Options(final ConnectionPolicy connectionPolicy) {\n             this.bufferPageSize = 8192;\n-            this.connectionAcquisitionTimeout = Duration.ZERO;\n+            this.connectionAcquisitionTimeout = Duration.ofSeconds(5L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aaa7f208ea46b86e348cf11a032aa30b8eb88a7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODE5NDMyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTozNzoyOVrOHSH8EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTozNzoyOVrOHSH8EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc2NjQ4MA==", "bodyText": "Lets discuss the static executors thread-pooling impact.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r488766480", "createdAt": "2020-09-15T15:37:29Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -81,6 +84,11 @@\n     private static final ClosedChannelException ON_DEREGISTER =\n         ThrowableUtil.unknownStackTrace(new ClosedChannelException(), RntbdRequestManager.class, \"deregister\");\n \n+    private static final EventExecutor requestExpirationExecutor = new DefaultEventExecutor(new RntbdThreadFactory(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aaa7f208ea46b86e348cf11a032aa30b8eb88a7"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1118, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}