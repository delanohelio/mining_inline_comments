{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNjg0OTYw", "number": 16319, "title": "Binarydata api update - Default json serializer", "bodyText": "Adding default json serializer\n\nAPI View : https://apiview.dev/Assemblies/Review/22274ac987a04a7589b6d5e6ee6b7554#com.azure.core.experimental.util.BinaryData", "createdAt": "2020-10-14T22:19:15Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319", "merged": true, "mergeCommit": {"oid": "8928a8d054c8fd0c1048a0f2c3cdd9a7a22b5747"}, "closed": true, "closedAt": "2020-10-23T19:39:14Z", "author": {"login": "hemanttanwar"}, "timelineItems": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSjaw7gH2gAyNTAzNjg0OTYwOmQwOWRlNmM1YjUyMDIxNWU3NGNmYmFlYTRmZTFjNzkwNDdkM2RlZDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdVZoFJgH2gAyNTAzNjg0OTYwOmE4YjUyNzM2NjRmZTQ0YjczYTRjZGE5MWMzMzQwY2U5Y2JkNGQxYTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d09de6c5b520215e74cfbaea4fe1c79047d3ded5", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d09de6c5b520215e74cfbaea4fe1c79047d3ded5", "committedDate": "2020-10-14T20:43:47Z", "message": "Adding default json serializer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "138b2a58dcf17197dac507d4161ecdafddcca336", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/138b2a58dcf17197dac507d4161ecdafddcca336", "committedDate": "2020-10-14T22:09:05Z", "message": "Adding default json serializer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a70876a564977f21c703c828bceb521de127bede", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a70876a564977f21c703c828bceb521de127bede", "committedDate": "2020-10-14T22:14:53Z", "message": "Adding default json serializer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de98cc4e7fea35c0600eb419afbd63870f9f717f", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/de98cc4e7fea35c0600eb419afbd63870f9f717f", "committedDate": "2020-10-14T22:41:24Z", "message": "Changed to use JsonSerializerProviders"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5047c7a0eed0ece8f252045b263ede3dd6e022f7", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5047c7a0eed0ece8f252045b263ede3dd6e022f7", "committedDate": "2020-10-14T22:48:07Z", "message": "Added java doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed4edd8d71ef0421d55d4522f7540f492cc285e3", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ed4edd8d71ef0421d55d4522f7540f492cc285e3", "committedDate": "2020-10-14T22:50:47Z", "message": "Added changelog"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4ODI3NTg3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#pullrequestreview-508827587", "createdAt": "2020-10-14T22:56:54Z", "commit": {"oid": "ed4edd8d71ef0421d55d4522f7540f492cc285e3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMjo1Njo1NFrOHhpcPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMjo1Njo1NFrOHhpcPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA0NDAyOQ==", "bodyText": "@JonathanGiles, @srnagar, I'd like to see us create a guideline around the default serializer to be used when one isn't passed. In some locations we use JsonSerializer/ObjectSerializer and in others we default to using JacksonAdapter. I have a feeling we may need to go down the route of always falling back to JacksonAdapter, except with serialization formats we didn't previously support such as Avro and Protobuf, as using JsonSerializerProviders.createInstance may result in customer applications throwing an exception when they previously didn't. This restriction may only apply to logic in azure-core which could accept an ObjectSerializer/JsonSerializer as it cannot take a dependency on the implementation libraries.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r505044029", "createdAt": "2020-10-14T22:56:54Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -185,6 +187,25 @@ public static BinaryData fromBytes(byte[] data) {\n         return new BinaryData(data);\n     }\n \n+    /**\n+     * Serialize the given {@link Object} into {@link BinaryData} using the provided {@link JsonSerializer}. This will\n+     * require the client to configure Json serializer in classpath.\n+     *\n+     * @param data The {@link Object} which needs to be serialized into bytes.\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws IllegalStateException If cannot find any JSON serializer provider on the classpath.\n+     * @return {@link BinaryData} representing binary data. Or {@code null} if it fails to serialize the data.\n+     *\n+     * @see JsonSerializer\n+     */\n+    public static BinaryData fromObject(Object data) {\n+        Objects.requireNonNull(data, \"'data' cannot be null.\");\n+\n+        final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+        JsonSerializerProviders.createInstance().serialize(outputStream, data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed4edd8d71ef0421d55d4522f7540f492cc285e3"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4ODI5NTA4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#pullrequestreview-508829508", "createdAt": "2020-10-14T23:01:43Z", "commit": {"oid": "ed4edd8d71ef0421d55d4522f7540f492cc285e3"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMzowMTo0M1rOHhpnsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMzowNzoxMlrOHhp2tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA0Njk2MQ==", "bodyText": "This API doesn't accept a JsonSerializer.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r505046961", "createdAt": "2020-10-14T23:01:43Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -185,6 +187,25 @@ public static BinaryData fromBytes(byte[] data) {\n         return new BinaryData(data);\n     }\n \n+    /**\n+     * Serialize the given {@link Object} into {@link BinaryData} using the provided {@link JsonSerializer}. This will", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed4edd8d71ef0421d55d4522f7540f492cc285e3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA0ODQxNg==", "bodyText": "In the case of a null object do we want to throw or return an empty BinaryData? Do we want to force the caller to handle null checking or return them an object which represents no data.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r505048416", "createdAt": "2020-10-14T23:03:53Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -185,6 +187,25 @@ public static BinaryData fromBytes(byte[] data) {\n         return new BinaryData(data);\n     }\n \n+    /**\n+     * Serialize the given {@link Object} into {@link BinaryData} using the provided {@link JsonSerializer}. This will\n+     * require the client to configure Json serializer in classpath.\n+     *\n+     * @param data The {@link Object} which needs to be serialized into bytes.\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws IllegalStateException If cannot find any JSON serializer provider on the classpath.\n+     * @return {@link BinaryData} representing binary data. Or {@code null} if it fails to serialize the data.\n+     *\n+     * @see JsonSerializer\n+     */\n+    public static BinaryData fromObject(Object data) {\n+        Objects.requireNonNull(data, \"'data' cannot be null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed4edd8d71ef0421d55d4522f7540f492cc285e3"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA0OTg1Nw==", "bodyText": "Do we actually return null if we fail to serialize the object?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r505049857", "createdAt": "2020-10-14T23:05:52Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -185,6 +187,25 @@ public static BinaryData fromBytes(byte[] data) {\n         return new BinaryData(data);\n     }\n \n+    /**\n+     * Serialize the given {@link Object} into {@link BinaryData} using the provided {@link JsonSerializer}. This will\n+     * require the client to configure Json serializer in classpath.\n+     *\n+     * @param data The {@link Object} which needs to be serialized into bytes.\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws IllegalStateException If cannot find any JSON serializer provider on the classpath.\n+     * @return {@link BinaryData} representing binary data. Or {@code null} if it fails to serialize the data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed4edd8d71ef0421d55d4522f7540f492cc285e3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA1MDEzOQ==", "bodyText": "nit: Casing\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws NullPointerException if {@code data} is null.\n          \n          \n            \n                 * @throws NullPointerException If {@code data} is null.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r505050139", "createdAt": "2020-10-14T23:06:18Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -185,6 +187,25 @@ public static BinaryData fromBytes(byte[] data) {\n         return new BinaryData(data);\n     }\n \n+    /**\n+     * Serialize the given {@link Object} into {@link BinaryData} using the provided {@link JsonSerializer}. This will\n+     * require the client to configure Json serializer in classpath.\n+     *\n+     * @param data The {@link Object} which needs to be serialized into bytes.\n+     * @throws NullPointerException if {@code data} is null.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed4edd8d71ef0421d55d4522f7540f492cc285e3"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA1MDgwNw==", "bodyText": "nit: Wording\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws IllegalStateException If cannot find any JSON serializer provider on the classpath.\n          \n          \n            \n                 * @throws IllegalStateException If a {@link JsonSerializer} cannot be found on the classpath.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r505050807", "createdAt": "2020-10-14T23:07:12Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -185,6 +187,25 @@ public static BinaryData fromBytes(byte[] data) {\n         return new BinaryData(data);\n     }\n \n+    /**\n+     * Serialize the given {@link Object} into {@link BinaryData} using the provided {@link JsonSerializer}. This will\n+     * require the client to configure Json serializer in classpath.\n+     *\n+     * @param data The {@link Object} which needs to be serialized into bytes.\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws IllegalStateException If cannot find any JSON serializer provider on the classpath.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed4edd8d71ef0421d55d4522f7540f492cc285e3"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af836cecf9b842bcc144a5e5914f9f76b8595e82", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/af836cecf9b842bcc144a5e5914f9f76b8595e82", "committedDate": "2020-10-15T05:39:04Z", "message": "Api changes based on review comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92a611b08523c646c028430e9f7f722a5fe14d93", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/92a611b08523c646c028430e9f7f722a5fe14d93", "committedDate": "2020-10-19T16:02:14Z", "message": "incorporated review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bcd6787a97803413015fc009353ba277fb50b63", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5bcd6787a97803413015fc009353ba277fb50b63", "committedDate": "2020-10-19T21:09:23Z", "message": "Making JsonSerializer singleton"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ee660aff0bb5cb8372868414127caa11092595b", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7ee660aff0bb5cb8372868414127caa11092595b", "committedDate": "2020-10-19T21:13:00Z", "message": "Making JsonSerializer singleton"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMTcxMjU3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#pullrequestreview-512171257", "createdAt": "2020-10-19T21:25:29Z", "commit": {"oid": "7ee660aff0bb5cb8372868414127caa11092595b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyNTozMFrOHkiPiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyNTozMFrOHkiPiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MTgxOQ==", "bodyText": "These could be made final and instantiated in a static constructor", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508071819", "createdAt": "2020-10-19T21:25:30Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -47,15 +48,20 @@\n  */\n public final class  BinaryData {\n     private static final ClientLogger LOGGER = new ClientLogger(BinaryData.class);\n+\n+    private static JsonSerializer defaultJsonSerializer;\n+    private static byte[] EMPTY_DATA = new byte[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ee660aff0bb5cb8372868414127caa11092595b"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMTcxNTgz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#pullrequestreview-512171583", "createdAt": "2020-10-19T21:26:04Z", "commit": {"oid": "7ee660aff0bb5cb8372868414127caa11092595b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyNjowNVrOHkiQoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyNjowNVrOHkiQoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MjA5Ng==", "bodyText": "The property name may not be complying with coding styles.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508072096", "createdAt": "2020-10-19T21:26:05Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -47,15 +48,20 @@\n  */\n public final class  BinaryData {\n     private static final ClientLogger LOGGER = new ClientLogger(BinaryData.class);\n+\n+    private static JsonSerializer defaultJsonSerializer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ee660aff0bb5cb8372868414127caa11092595b"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMTcxOTU1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#pullrequestreview-512171955", "createdAt": "2020-10-19T21:26:40Z", "commit": {"oid": "7ee660aff0bb5cb8372868414127caa11092595b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyNjo0MVrOHkiRyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyNjo0MVrOHkiRyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MjM5NA==", "bodyText": "May want to check CoreUtils.isNullOrEmpty, this may end up copying a 0 length array.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508072394", "createdAt": "2020-10-19T21:26:41Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -47,15 +48,20 @@\n  */\n public final class  BinaryData {\n     private static final ClientLogger LOGGER = new ClientLogger(BinaryData.class);\n+\n+    private static JsonSerializer defaultJsonSerializer;\n+    private static byte[] EMPTY_DATA = new byte[0];\n     private final byte[] data;\n \n     /**\n-     * Create instance of {@link BinaryData} given the data.\n+     * Create instance of {@link BinaryData} given the data. If {@code null} value is provided , it will be converted\n+     * into empty byte array.\n      * @param data to represent as bytes.\n-     * @throws NullPointerException If {@code data} is null.\n      */\n     BinaryData(byte[] data) {\n-        Objects.requireNonNull(data, \"'data' cannot be null.\");\n+        if (Objects.isNull(data)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ee660aff0bb5cb8372868414127caa11092595b"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMTcyMjk4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#pullrequestreview-512172298", "createdAt": "2020-10-19T21:27:17Z", "commit": {"oid": "7ee660aff0bb5cb8372868414127caa11092595b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyNzoxN1rOHkiS1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyNzoxN1rOHkiS1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MjY2Mw==", "bodyText": "What does getBytes return for a zero length string?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508072663", "createdAt": "2020-10-19T21:27:17Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -144,39 +141,26 @@ public static BinaryData fromStream(InputStream inputStream) {\n             .flatMap(bytes -> Mono.just(fromBytes(bytes)));\n     }\n \n-    /**\n-     * Create {@link BinaryData} instance with given data and character set.\n-     *\n-     * <p><strong>Create an instance from String</strong></p>\n-     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#String}\n-     *\n-     * @param data to use.\n-     * @param charSet to use.\n-     * @throws NullPointerException if {@code inputStream} is null.\n-     * @return {@link BinaryData} representing the binary data.\n-     */\n-    public static BinaryData fromString(String data, Charset charSet) {\n-        Objects.requireNonNull(data, \"'data' cannot be null.\");\n-\n-        return new BinaryData(data.getBytes(charSet));\n-    }\n-\n     /**\n      * Create {@link BinaryData} instance with given data. The {@link String} is converted into bytes  using\n-     * {@link StandardCharsets#UTF_8} character set.\n+     * {@link StandardCharsets#UTF_8} character set. If {@code null} data is provided , it will be converted into\n+     * empty byte array.\n      *\n      * @param data to use.\n-     * @throws NullPointerException if {@code inputStream} is null.\n      * @return {@link BinaryData} representing binary data.\n      */\n     public static BinaryData fromString(String data) {\n-        Objects.requireNonNull(data, \"'data' cannot be null.\");\n+        if (Objects.isNull(data)) {\n+            return new BinaryData(EMPTY_DATA);\n+        } else {\n+            return new BinaryData(data.getBytes(StandardCharsets.UTF_8));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ee660aff0bb5cb8372868414127caa11092595b"}, "originalPosition": 94}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d5e3f5a503dc94f2f6047dfea255d3bc065f04c", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6d5e3f5a503dc94f2f6047dfea255d3bc065f04c", "committedDate": "2020-10-19T23:08:25Z", "message": "Review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjY3OTk2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#pullrequestreview-512267996", "createdAt": "2020-10-20T01:29:46Z", "commit": {"oid": "6d5e3f5a503dc94f2f6047dfea255d3bc065f04c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToyOTo0NlrOHknTwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToyOTo0NlrOHknTwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE1NDgxOA==", "bodyText": "new up a static final instance of this BinaryData so that you don't need to do it every time, and just reuse that.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508154818", "createdAt": "2020-10-20T01:29:46Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -144,39 +141,26 @@ public static BinaryData fromStream(InputStream inputStream) {\n             .flatMap(bytes -> Mono.just(fromBytes(bytes)));\n     }\n \n-    /**\n-     * Create {@link BinaryData} instance with given data and character set.\n-     *\n-     * <p><strong>Create an instance from String</strong></p>\n-     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#String}\n-     *\n-     * @param data to use.\n-     * @param charSet to use.\n-     * @throws NullPointerException if {@code inputStream} is null.\n-     * @return {@link BinaryData} representing the binary data.\n-     */\n-    public static BinaryData fromString(String data, Charset charSet) {\n-        Objects.requireNonNull(data, \"'data' cannot be null.\");\n-\n-        return new BinaryData(data.getBytes(charSet));\n-    }\n-\n     /**\n      * Create {@link BinaryData} instance with given data. The {@link String} is converted into bytes  using\n-     * {@link StandardCharsets#UTF_8} character set.\n+     * {@link StandardCharsets#UTF_8} character set. If {@code null} data is provided , it will be converted into\n+     * empty byte array.\n      *\n      * @param data to use.\n-     * @throws NullPointerException if {@code inputStream} is null.\n      * @return {@link BinaryData} representing binary data.\n      */\n     public static BinaryData fromString(String data) {\n-        Objects.requireNonNull(data, \"'data' cannot be null.\");\n+        if (Objects.isNull(data) || data.length() == 0) {\n+            return new BinaryData(EMPTY_DATA);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d5e3f5a503dc94f2f6047dfea255d3bc065f04c"}, "originalPosition": 119}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "689fb25cd9f0d0aab7013af01d2121c45be9cff6", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/689fb25cd9f0d0aab7013af01d2121c45be9cff6", "committedDate": "2020-10-20T06:13:21Z", "message": "review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62e41b03165380e7eee83c8507e79797e3062fc8", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/62e41b03165380e7eee83c8507e79797e3062fc8", "committedDate": "2020-10-20T22:35:46Z", "message": "Taking review comment into consideration."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b56472675c706723afcf725199a8127e1f618b1", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8b56472675c706723afcf725199a8127e1f618b1", "committedDate": "2020-10-20T23:12:16Z", "message": "Lazy Serialization for json serializer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMjA3OTIw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#pullrequestreview-513207920", "createdAt": "2020-10-20T23:34:06Z", "commit": {"oid": "8b56472675c706723afcf725199a8127e1f618b1"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMzozNDowN1rOHlUzwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMzo0NzoyMFrOHlVEHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwMDI4OQ==", "bodyText": "I don't think we need to call out how we store data internally.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508900289", "createdAt": "2020-10-20T23:34:07Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -18,18 +20,27 @@\n import java.io.InputStream;\n import java.io.UncheckedIOException;\n import java.nio.ByteBuffer;\n-import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Objects;\n \n /**\n- * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n- * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n- * array. The data is collected from provided sources and stored into a byte array.\n+ * This class is an abstraction over many different ways that binary data can be represented. The data represented by\n+ * {@link BinaryData} is immutable. The {@link BinaryData} can be created from {@link InputStream}, {@link Flux} of\n+ * {@link ByteBuffer}, {@link String}, {@link Object} and byte array. This type internally store given data in byte\n+ * array.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b56472675c706723afcf725199a8127e1f618b1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwMDQ4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * {@link ByteBuffer}, {@link String}, {@link Object} and byte array. This type internally store given data in byte\n          \n          \n            \n             * {@link ByteBuffer}, {@link String}, {@link Object}, or byte array. This type internally store given data in byte\n          \n      \n    \n    \n  \n\nWe're listing all types we can create BinaryData from, should use an or.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508900486", "createdAt": "2020-10-20T23:34:46Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -18,18 +20,27 @@\n import java.io.InputStream;\n import java.io.UncheckedIOException;\n import java.nio.ByteBuffer;\n-import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Objects;\n \n /**\n- * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n- * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n- * array. The data is collected from provided sources and stored into a byte array.\n+ * This class is an abstraction over many different ways that binary data can be represented. The data represented by\n+ * {@link BinaryData} is immutable. The {@link BinaryData} can be created from {@link InputStream}, {@link Flux} of\n+ * {@link ByteBuffer}, {@link String}, {@link Object} and byte array. This type internally store given data in byte", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b56472675c706723afcf725199a8127e1f618b1"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwMDg0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Create {@link BinaryData} instance with given data. The {@link String} is converted into bytes  using\n          \n          \n            \n                 * Create {@link BinaryData} instance with given data. The {@link String} is converted into bytes using", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508900841", "createdAt": "2020-10-20T23:35:51Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -144,39 +159,26 @@ public static BinaryData fromStream(InputStream inputStream) {\n             .flatMap(bytes -> Mono.just(fromBytes(bytes)));\n     }\n \n-    /**\n-     * Create {@link BinaryData} instance with given data and character set.\n-     *\n-     * <p><strong>Create an instance from String</strong></p>\n-     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#String}\n-     *\n-     * @param data to use.\n-     * @param charSet to use.\n-     * @throws NullPointerException if {@code inputStream} is null.\n-     * @return {@link BinaryData} representing the binary data.\n-     */\n-    public static BinaryData fromString(String data, Charset charSet) {\n-        Objects.requireNonNull(data, \"'data' cannot be null.\");\n-\n-        return new BinaryData(data.getBytes(charSet));\n-    }\n-\n     /**\n      * Create {@link BinaryData} instance with given data. The {@link String} is converted into bytes  using", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b56472675c706723afcf725199a8127e1f618b1"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwMTE3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * {@link StandardCharsets#UTF_8} character set. If {@code null} data is provided , it will be converted into\n          \n          \n            \n                 * the UTF-8 character set. If {@code null} data is provided , it will be converted into\n          \n      \n    \n    \n  \n\nStandardCharsets#UTF-8 is just an implementation of Charset, don't need to call out implementation handling.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508901173", "createdAt": "2020-10-20T23:36:56Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -144,39 +159,26 @@ public static BinaryData fromStream(InputStream inputStream) {\n             .flatMap(bytes -> Mono.just(fromBytes(bytes)));\n     }\n \n-    /**\n-     * Create {@link BinaryData} instance with given data and character set.\n-     *\n-     * <p><strong>Create an instance from String</strong></p>\n-     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#String}\n-     *\n-     * @param data to use.\n-     * @param charSet to use.\n-     * @throws NullPointerException if {@code inputStream} is null.\n-     * @return {@link BinaryData} representing the binary data.\n-     */\n-    public static BinaryData fromString(String data, Charset charSet) {\n-        Objects.requireNonNull(data, \"'data' cannot be null.\");\n-\n-        return new BinaryData(data.getBytes(charSet));\n-    }\n-\n     /**\n      * Create {@link BinaryData} instance with given data. The {@link String} is converted into bytes  using\n-     * {@link StandardCharsets#UTF_8} character set.\n+     * {@link StandardCharsets#UTF_8} character set. If {@code null} data is provided , it will be converted into", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b56472675c706723afcf725199a8127e1f618b1"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwMTMxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Create {@link BinaryData} instance with given byte array data. If {@code null} value is provided , it will be\n          \n          \n            \n                 * Create {@link BinaryData} instance with given byte array data. If the byte array is {@code null}, an empty BinaryData will be returned.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508901310", "createdAt": "2020-10-20T23:37:23Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -144,39 +159,26 @@ public static BinaryData fromStream(InputStream inputStream) {\n             .flatMap(bytes -> Mono.just(fromBytes(bytes)));\n     }\n \n-    /**\n-     * Create {@link BinaryData} instance with given data and character set.\n-     *\n-     * <p><strong>Create an instance from String</strong></p>\n-     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#String}\n-     *\n-     * @param data to use.\n-     * @param charSet to use.\n-     * @throws NullPointerException if {@code inputStream} is null.\n-     * @return {@link BinaryData} representing the binary data.\n-     */\n-    public static BinaryData fromString(String data, Charset charSet) {\n-        Objects.requireNonNull(data, \"'data' cannot be null.\");\n-\n-        return new BinaryData(data.getBytes(charSet));\n-    }\n-\n     /**\n      * Create {@link BinaryData} instance with given data. The {@link String} is converted into bytes  using\n-     * {@link StandardCharsets#UTF_8} character set.\n+     * {@link StandardCharsets#UTF_8} character set. If {@code null} data is provided , it will be converted into\n+     * empty byte array.\n      *\n      * @param data to use.\n-     * @throws NullPointerException if {@code inputStream} is null.\n      * @return {@link BinaryData} representing binary data.\n      */\n     public static BinaryData fromString(String data) {\n-        Objects.requireNonNull(data, \"'data' cannot be null.\");\n+        if (Objects.isNull(data) || data.length() == 0) {\n+            return EMPTY_DATA;\n+        } else {\n+            return new BinaryData(data.getBytes(StandardCharsets.UTF_8));\n+        }\n \n-        return new BinaryData(data.getBytes(StandardCharsets.UTF_8));\n     }\n \n     /**\n-     * Create {@link BinaryData} instance with given byte array data.\n+     * Create {@link BinaryData} instance with given byte array data. If {@code null} value is provided , it will be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b56472675c706723afcf725199a8127e1f618b1"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwMTczOA==", "bodyText": "I think this sentence can be left out. Either an implementation will be in the classpath or an exception will be thrown on how to resolve the issue.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508901738", "createdAt": "2020-10-20T23:38:53Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -185,16 +187,44 @@ public static BinaryData fromBytes(byte[] data) {\n         return new BinaryData(data);\n     }\n \n+    /**\n+     * Serialize the given {@link Object} into {@link BinaryData} using json serializer which is available in classpath.\n+     * The serializer must implement {@link JsonSerializer} interface. A singleton instance of {@link JsonSerializer}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b56472675c706723afcf725199a8127e1f618b1"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwMjA0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * is kept for this class to use. If {@code null} data is provided , it will be converted into empty byte array.\n          \n          \n            \n                 * is kept for this class to use. If the object is {@code null}, an empty BinaryData will be returned.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508902047", "createdAt": "2020-10-20T23:39:46Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -185,16 +187,44 @@ public static BinaryData fromBytes(byte[] data) {\n         return new BinaryData(data);\n     }\n \n+    /**\n+     * Serialize the given {@link Object} into {@link BinaryData} using json serializer which is available in classpath.\n+     * The serializer must implement {@link JsonSerializer} interface. A singleton instance of {@link JsonSerializer}\n+     * is kept for this class to use. If {@code null} data is provided , it will be converted into empty byte array.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b56472675c706723afcf725199a8127e1f618b1"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwMzYyMg==", "bodyText": "Given this API is converting into JSON we may want to call it fromObjectJson.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508903622", "createdAt": "2020-10-20T23:44:30Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -185,16 +187,44 @@ public static BinaryData fromBytes(byte[] data) {\n         return new BinaryData(data);\n     }\n \n+    /**\n+     * Serialize the given {@link Object} into {@link BinaryData} using json serializer which is available in classpath.\n+     * The serializer must implement {@link JsonSerializer} interface. A singleton instance of {@link JsonSerializer}\n+     * is kept for this class to use. If {@code null} data is provided , it will be converted into empty byte array.\n+     *\n+     * @param data The {@link Object} which needs to be serialized into bytes.\n+     * @throws IllegalStateException If a {@link JsonSerializer} cannot be found on the classpath.\n+     * @return {@link BinaryData} representing binary data.\n+     *\n+     * @see JsonSerializer\n+     */\n+    public static BinaryData fromObject(Object data) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b56472675c706723afcf725199a8127e1f618b1"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwNDAxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return {@link BinaryData} representing binary data.\n          \n          \n            \n                 * @return {@link BinaryData} representing the JSON serialized object.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508904011", "createdAt": "2020-10-20T23:45:34Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -185,16 +187,44 @@ public static BinaryData fromBytes(byte[] data) {\n         return new BinaryData(data);\n     }\n \n+    /**\n+     * Serialize the given {@link Object} into {@link BinaryData} using json serializer which is available in classpath.\n+     * The serializer must implement {@link JsonSerializer} interface. A singleton instance of {@link JsonSerializer}\n+     * is kept for this class to use. If {@code null} data is provided , it will be converted into empty byte array.\n+     *\n+     * @param data The {@link Object} which needs to be serialized into bytes.\n+     * @throws IllegalStateException If a {@link JsonSerializer} cannot be found on the classpath.\n+     * @return {@link BinaryData} representing binary data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b56472675c706723afcf725199a8127e1f618b1"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwNDQ3Nw==", "bodyText": "Should we rename this API to something JSON specific? toJsonObject?\n@JonathanGiles @srnagar", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508904477", "createdAt": "2020-10-20T23:47:20Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -276,10 +293,55 @@ public String toString(Charset charSet) {\n      * @param clazz representing the type of the Object.\n      * @param serializer to use deserialize data into type.\n      * @param <T> Generic type that the data is deserialized into.\n-     * @throws NullPointerException if {@code clazz} or {@code serializer} is null.\n+     * @throws NullPointerException If {@code clazz} or {@code serializer} is null.\n      * @return The {@link Object} of given type after deserializing the bytes.\n      */\n     public  <T> Mono<T> toObjectAsync(Class<T> clazz, ObjectSerializer serializer) {\n         return Mono.fromCallable(() -> toObject(clazz, serializer));\n     }\n+\n+    /**\n+     * Deserialize the bytes into the {@link Object} of given type by using json serializer which is available in\n+     * classpath. The serializer must implement {@link JsonSerializer} interface. A singleton instance of\n+     * {@link JsonSerializer} is kept for this class to use.\n+     *\n+     * @param clazz representing the type of the Object.\n+     * @param <T> Generic type that the data is deserialized into.\n+     * @return The {@link Object} of given type after deserializing the bytes.\n+     */\n+    public <T> T toObject(Class<T> clazz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b56472675c706723afcf725199a8127e1f618b1"}, "originalPosition": 279}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6dee1b4bc2e84340d7c892779dce012bf2dc522e", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6dee1b4bc2e84340d7c892779dce012bf2dc522e", "committedDate": "2020-10-21T08:54:33Z", "message": "java doc change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcd54572daf21e3dbf145b9fa1a8291707727756", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/dcd54572daf21e3dbf145b9fa1a8291707727756", "committedDate": "2020-10-21T16:10:26Z", "message": "Updated javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MTUzMzU5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#pullrequestreview-514153359", "createdAt": "2020-10-21T20:19:38Z", "commit": {"oid": "dcd54572daf21e3dbf145b9fa1a8291707727756"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDoxOTozOFrOHmDOJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDoyMToyMFrOHmDUzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY2MDcxMA==", "bodyText": "The other toObject() overload also checks if the clazz is null. We should add that check here as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r509660710", "createdAt": "2020-10-21T20:19:38Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -276,10 +295,63 @@ public String toString(Charset charSet) {\n      * @param clazz representing the type of the Object.\n      * @param serializer to use deserialize data into type.\n      * @param <T> Generic type that the data is deserialized into.\n-     * @throws NullPointerException if {@code clazz} or {@code serializer} is null.\n+     * @throws NullPointerException If {@code clazz} or {@code serializer} is null.\n      * @return The {@link Object} of given type after deserializing the bytes.\n      */\n     public  <T> Mono<T> toObjectAsync(Class<T> clazz, ObjectSerializer serializer) {\n+\n+        if (Objects.isNull(serializer)) {\n+            return monoError(LOGGER, new NullPointerException(\"'serializer' cannot be null.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcd54572daf21e3dbf145b9fa1a8291707727756"}, "originalPosition": 303}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY2MjQxMw==", "bodyText": "Is this required?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r509662413", "createdAt": "2020-10-21T20:21:20Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-experimental/src/samples/java/com/azure/core/experimental/util/BinaryDateJavaDocCodeSnippet.java", "diffHunk": "@@ -191,5 +226,10 @@ public void serialize(OutputStream stream, Object value) {\n             return Mono.fromRunnable(() -> serialize(stream, value));\n         }\n     }\n-}\n \n+    public static void main(String[] args) {\n+\n+        BinaryDateJavaDocCodeSnippet s = new BinaryDateJavaDocCodeSnippet();\n+        s.createFromObject();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcd54572daf21e3dbf145b9fa1a8291707727756"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MTU3NzI1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#pullrequestreview-514157725", "createdAt": "2020-10-21T20:25:35Z", "commit": {"oid": "dcd54572daf21e3dbf145b9fa1a8291707727756"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDoyNTozNVrOHmDipw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDoyNTozNVrOHmDipw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY2NTk1OQ==", "bodyText": "Update name to DEFAULT_JSON_SERIALIZER.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r509665959", "createdAt": "2020-10-21T20:25:35Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -43,19 +53,32 @@\n  * <p><strong>Get an Object from {@link BinaryData}</strong></p>\n  * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#ObjectAsync}\n  *\n+ * <p><strong>Create an instance from Object</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Object}\n+ *\n  * @see ObjectSerializer\n  */\n public final class  BinaryData {\n     private static final ClientLogger LOGGER = new ClientLogger(BinaryData.class);\n+    private static final byte[] EMPTY_BYTES = new byte[0];\n+    private static final BinaryData EMPTY_DATA = new BinaryData(new byte[0]);\n+\n+    private static final Object LOCK = new Object();\n+\n     private final byte[] data;\n \n+    private static volatile JsonSerializer defaultJsonSerializer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcd54572daf21e3dbf145b9fa1a8291707727756"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e12c492017f0253b22f26c0f5745daec01ffdb0", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7e12c492017f0253b22f26c0f5745daec01ffdb0", "committedDate": "2020-10-21T20:58:13Z", "message": "Added validation."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MjY0MDE2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#pullrequestreview-514264016", "createdAt": "2020-10-21T23:41:15Z", "commit": {"oid": "7e12c492017f0253b22f26c0f5745daec01ffdb0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMzo0MToxNVrOHmLgXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMzo1MzoyOVrOHmLuvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5NjQ0Ng==", "bodyText": "\"The data represented by {@link BinaryData} is immutable\" is an odd statement to make? It is taken into BinaryData and presumably copied, but when given back to the user is mutable again. Perhaps clarify what you mean by this statement.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r509796446", "createdAt": "2020-10-21T23:41:15Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -18,18 +20,26 @@\n import java.io.InputStream;\n import java.io.UncheckedIOException;\n import java.nio.ByteBuffer;\n-import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Objects;\n \n /**\n- * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n- * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n- * array. The data is collected from provided sources and stored into a byte array.\n+ * This class is an abstraction over many different ways that binary data can be represented. The data represented by\n+ * {@link BinaryData} is immutable. The {@link BinaryData} can be created from {@link InputStream}, {@link Flux} of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e12c492017f0253b22f26c0f5745daec01ffdb0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5ODAxMg==", "bodyText": "There feels like an inconsistency in how you handle null or empty data. Sometimes you turn it into an empty BinaryData, other times you throw an exception. Is there a reason for this?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r509798012", "createdAt": "2020-10-21T23:46:28Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -72,24 +95,15 @@ public InputStream toStream() {\n     }\n \n     /**\n-     * Provides {@link Mono} of {@link InputStream} for the data represented by this {@link BinaryData} object.\n-     *\n-     * @return {@link InputStream} representation of the {@link BinaryData}.\n-     */\n-    public Mono<InputStream> toStreamAsync() {\n-        return Mono.fromCallable(() -> toStream());\n-    }\n-\n-    /**\n-     * Create {@link BinaryData} instance with given {@link InputStream} as source of data. The {@link InputStream} is\n-     * not closed by this function.\n+     * Creates a {@link BinaryData} instance with given {@link InputStream} as source of data. The {@link InputStream}\n+     * is not closed by this function.\n      *\n      * <p><strong>Create an instance from InputStream</strong></p>\n      * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Stream}\n      *\n      * @param inputStream to read bytes from.\n      * @throws UncheckedIOException If any error in reading from {@link InputStream}.\n-     * @throws NullPointerException if {@code inputStream} is null.\n+     * @throws NullPointerException If {@code inputStream} is null.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e12c492017f0253b22f26c0f5745daec01ffdb0"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5ODY2Ng==", "bodyText": "Are we not able to handle this in a more efficient manner? As it stands this means that the entire input stream is read into a buffer, converted into a byte array, and then copied into a new byte array? At the very least you can avoid the byte array copy.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r509798666", "createdAt": "2020-10-21T23:48:43Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -111,11 +125,11 @@ public static BinaryData fromStream(InputStream inputStream) {\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e12c492017f0253b22f26c0f5745daec01ffdb0"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwMDEyNQ==", "bodyText": "This documentation should link through an aka.ms link to the appropriate json serializer documentation (which will soon move to docs.microsoft.com, which is why in the meanwhile we will use an aka.ms link)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r509800125", "createdAt": "2020-10-21T23:53:29Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -185,16 +185,44 @@ public static BinaryData fromBytes(byte[] data) {\n         return new BinaryData(data);\n     }\n \n+    /**\n+     * Serialize the given {@link Object} into {@link BinaryData} using json serializer which is available on classpath.\n+     * The serializer on classpath must implement {@link JsonSerializer} interface. If the given Object is {@code null},\n+     * an empty {@link BinaryData} will be returned.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e12c492017f0253b22f26c0f5745daec01ffdb0"}, "originalPosition": 193}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d61107207ba1c3dd22de155663ad1b2a9f302817", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d61107207ba1c3dd22de155663ad1b2a9f302817", "committedDate": "2020-10-22T05:43:13Z", "message": "Review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6576ab5691e5b247576b1e4d86809e4a684390c2", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6576ab5691e5b247576b1e4d86809e4a684390c2", "committedDate": "2020-10-22T06:00:49Z", "message": "Java doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09c4632aa3fca41dd3895aafef146cb146cd62e6", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/09c4632aa3fca41dd3895aafef146cb146cd62e6", "committedDate": "2020-10-22T06:13:14Z", "message": "Java doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9be5791c5bec1e78a2f2091bbda1d0a7b43e2a31", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9be5791c5bec1e78a2f2091bbda1d0a7b43e2a31", "committedDate": "2020-10-22T17:45:57Z", "message": "Added aka.ms link for serializer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MTg0MTQy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#pullrequestreview-515184142", "createdAt": "2020-10-22T23:23:19Z", "commit": {"oid": "9be5791c5bec1e78a2f2091bbda1d0a7b43e2a31"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzoyMzoxOVrOHm3IKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzozMTowMFrOHm3Q8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxMTE0Nw==", "bodyText": "typos:\n\ncoping\nit's", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r510511147", "createdAt": "2020-10-22T23:23:19Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -18,18 +20,32 @@\n import java.io.InputStream;\n import java.io.UncheckedIOException;\n import java.nio.ByteBuffer;\n-import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Objects;\n \n /**\n  * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n- * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n- * array. The data is collected from provided sources and stored into a byte array.\n+ * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object}, or byte\n+ * array.\n+ * <p><strong>Immutable data</strong></p>\n+ * {@link BinaryData} is constructed by coping the given data. Once {@link BinaryData} is instantiated, it's data can", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9be5791c5bec1e78a2f2091bbda1d0a7b43e2a31"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxMTIwNQ==", "bodyText": "'starts'", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r510511205", "createdAt": "2020-10-22T23:23:31Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -18,18 +20,32 @@\n import java.io.InputStream;\n import java.io.UncheckedIOException;\n import java.nio.ByteBuffer;\n-import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Objects;\n \n /**\n  * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n- * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n- * array. The data is collected from provided sources and stored into a byte array.\n+ * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object}, or byte\n+ * array.\n+ * <p><strong>Immutable data</strong></p>\n+ * {@link BinaryData} is constructed by coping the given data. Once {@link BinaryData} is instantiated, it's data can\n+ * not be changed. It provides various convenient APIs to get data out of {@link BinaryData}, they all starts with the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9be5791c5bec1e78a2f2091bbda1d0a7b43e2a31"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxMTQxMQ==", "bodyText": "\"start with the 'to' prefix, for example\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r510511411", "createdAt": "2020-10-22T23:24:13Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -18,18 +20,32 @@\n import java.io.InputStream;\n import java.io.UncheckedIOException;\n import java.nio.ByteBuffer;\n-import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Objects;\n \n /**\n  * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n- * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n- * array. The data is collected from provided sources and stored into a byte array.\n+ * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object}, or byte\n+ * array.\n+ * <p><strong>Immutable data</strong></p>\n+ * {@link BinaryData} is constructed by coping the given data. Once {@link BinaryData} is instantiated, it's data can\n+ * not be changed. It provides various convenient APIs to get data out of {@link BinaryData}, they all starts with the\n+ * <b>BinaryData.to...()</b>, For example {@link BinaryData#toBytes()}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9be5791c5bec1e78a2f2091bbda1d0a7b43e2a31"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxMjI5NA==", "bodyText": "This seems to just be restating the API in the class, and is probably unnecessary. I would focus more on pointing users to the appropriate JavaDoc documentation, e.g. JsonSerializer, etc", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r510512294", "createdAt": "2020-10-22T23:27:02Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -18,18 +20,32 @@\n import java.io.InputStream;\n import java.io.UncheckedIOException;\n import java.nio.ByteBuffer;\n-import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Objects;\n \n /**\n  * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n- * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n- * array. The data is collected from provided sources and stored into a byte array.\n+ * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object}, or byte\n+ * array.\n+ * <p><strong>Immutable data</strong></p>\n+ * {@link BinaryData} is constructed by coping the given data. Once {@link BinaryData} is instantiated, it's data can\n+ * not be changed. It provides various convenient APIs to get data out of {@link BinaryData}, they all starts with the\n+ * <b>BinaryData.to...()</b>, For example {@link BinaryData#toBytes()}.\n  * <p>\n- * It also provides a way to serialize and deserialize an {@link Object} into {@link BinaryData} given an\n- * {@link ObjectSerializer}. Code samples are explained below.\n+ * It provides a way to serialize {@link Object} into {@link BinaryData} using\n+ * {@link BinaryData#fromObject(Object, ObjectSerializer)} where you can provide your {@link ObjectSerializer}.\n+ * <p>\n+ * It provides a way to de-serialize {@link BinaryData} into specified {@link Object} using\n+ * {@link BinaryData#toObject(Class, ObjectSerializer)} where you can provide object type and your\n+ * {@link ObjectSerializer}.\n+ * <p>\n+ * It provides API to use default json serializer which is available in classpath. The serializer on classpath must\n+ * implement {@link JsonSerializer} interface.\n+ * <p>Read more about <a href=\"http://aka.ms/azsdk/java/wiki/serialization\">serialization</a>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9be5791c5bec1e78a2f2091bbda1d0a7b43e2a31"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxMjQ2MQ==", "bodyText": "\"are presented below\".\nCan you also generate the JavaDoc to ensure that this formats correctly?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r510512461", "createdAt": "2020-10-22T23:27:42Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -18,18 +20,32 @@\n import java.io.InputStream;\n import java.io.UncheckedIOException;\n import java.nio.ByteBuffer;\n-import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Objects;\n \n /**\n  * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n- * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n- * array. The data is collected from provided sources and stored into a byte array.\n+ * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object}, or byte\n+ * array.\n+ * <p><strong>Immutable data</strong></p>\n+ * {@link BinaryData} is constructed by coping the given data. Once {@link BinaryData} is instantiated, it's data can\n+ * not be changed. It provides various convenient APIs to get data out of {@link BinaryData}, they all starts with the\n+ * <b>BinaryData.to...()</b>, For example {@link BinaryData#toBytes()}.\n  * <p>\n- * It also provides a way to serialize and deserialize an {@link Object} into {@link BinaryData} given an\n- * {@link ObjectSerializer}. Code samples are explained below.\n+ * It provides a way to serialize {@link Object} into {@link BinaryData} using\n+ * {@link BinaryData#fromObject(Object, ObjectSerializer)} where you can provide your {@link ObjectSerializer}.\n+ * <p>\n+ * It provides a way to de-serialize {@link BinaryData} into specified {@link Object} using\n+ * {@link BinaryData#toObject(Class, ObjectSerializer)} where you can provide object type and your\n+ * {@link ObjectSerializer}.\n+ * <p>\n+ * It provides API to use default json serializer which is available in classpath. The serializer on classpath must\n+ * implement {@link JsonSerializer} interface.\n+ * <p>Read more about <a href=\"http://aka.ms/azsdk/java/wiki/serialization\">serialization</a>.\n+ *\n+ * <p>\n+ * Code samples are explained below.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9be5791c5bec1e78a2f2091bbda1d0a7b43e2a31"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxMjU4Ng==", "bodyText": "should reference JsonSerializer too", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r510512586", "createdAt": "2020-10-22T23:28:05Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -43,57 +59,47 @@\n  * <p><strong>Get an Object from {@link BinaryData}</strong></p>\n  * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#ObjectAsync}\n  *\n+ * <p><strong>Create an instance from Object</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Object}\n+ *\n  * @see ObjectSerializer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9be5791c5bec1e78a2f2091bbda1d0a7b43e2a31"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxMzM5Mg==", "bodyText": "\"deserializing\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r510513392", "createdAt": "2020-10-22T23:31:00Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -276,10 +289,77 @@ public String toString(Charset charSet) {\n      * @param clazz representing the type of the Object.\n      * @param serializer to use deserialize data into type.\n      * @param <T> Generic type that the data is deserialized into.\n-     * @throws NullPointerException if {@code clazz} or {@code serializer} is null.\n+     * @throws NullPointerException If {@code clazz} or {@code serializer} is null.\n      * @return The {@link Object} of given type after deserializing the bytes.\n      */\n     public  <T> Mono<T> toObjectAsync(Class<T> clazz, ObjectSerializer serializer) {\n+\n+        if (Objects.isNull(clazz)) {\n+            return monoError(LOGGER, new NullPointerException(\"'clazz' cannot be null.\"));\n+        } else if (Objects.isNull(serializer)) {\n+            return monoError(LOGGER, new NullPointerException(\"'serializer' cannot be null.\"));\n+        }\n         return Mono.fromCallable(() -> toObject(clazz, serializer));\n     }\n+\n+    /**\n+     * Deserialize the bytes into the {@link Object} of given type by using json serializer which is available in\n+     * classpath. The serializer must implement {@link JsonSerializer} interface. A singleton instance of\n+     * {@link JsonSerializer} is kept for this class to use.\n+     *\n+     * @param clazz representing the type of the Object.\n+     * @param <T> Generic type that the data is deserialized into.\n+     * @throws NullPointerException If {@code clazz} is null.\n+     * @return The {@link Object} of given type after deserializing the bytes.\n+     */\n+    public <T> T toObject(Class<T> clazz) {\n+        Objects.requireNonNull(clazz, \"'clazz' cannot be null.\");\n+\n+        TypeReference<T>  ref = TypeReference.createInstance(clazz);\n+        InputStream jsonStream = new ByteArrayInputStream(this.data);\n+        return getDefaultSerializer().deserialize(jsonStream, ref);\n+    }\n+\n+    /**\n+     * Return a {@link Mono} by deserialize the bytes into the {@link Object} of given type after applying the Json", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9be5791c5bec1e78a2f2091bbda1d0a7b43e2a31"}, "originalPosition": 372}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ed8f7df278ef812a003636b224b055769d00235", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7ed8f7df278ef812a003636b224b055769d00235", "committedDate": "2020-10-23T03:54:18Z", "message": "Review comments/javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32a3ef392e60eda5e8b368f4a95fd06b598b5b5e", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/32a3ef392e60eda5e8b368f4a95fd06b598b5b5e", "committedDate": "2020-10-23T04:02:44Z", "message": "Review comments/javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26712550d14f09c93a00b57e6a9f7ab6f2b3cc4a", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/26712550d14f09c93a00b57e6a9f7ab6f2b3cc4a", "committedDate": "2020-10-23T05:27:05Z", "message": "Checkstyle fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1Mzk2Mzc1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#pullrequestreview-515396375", "createdAt": "2020-10-23T07:07:02Z", "commit": {"oid": "26712550d14f09c93a00b57e6a9f7ab6f2b3cc4a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8b5273664fe44b73a4cda91c3340ce9cbd4d1a9", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a8b5273664fe44b73a4cda91c3340ce9cbd4d1a9", "committedDate": "2020-10-23T17:01:03Z", "message": "More java doc added"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2078, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}