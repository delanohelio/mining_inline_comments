{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MjU3ODEy", "number": 14585, "title": "Sbtrack2 cancel schedule plural messages 14138", "bodyText": "This PR implements\nschedule message(s)\ncancel scheduled message(s)\nOne of the change for ServiceBusManagementNode : Use single schedule(..) API for one or list of messages to schedule.\nfixes #14138", "createdAt": "2020-08-28T08:14:58Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585", "merged": true, "mergeCommit": {"oid": "e982376c351a2fa04aed3f48f48de28b67526c1b"}, "closed": true, "closedAt": "2020-09-30T20:11:31Z", "author": {"login": "hemanttanwar"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCIBLugH2gAyNDc1MjU3ODEyOmU4ZWNkMzM5N2I4NWUyM2Q0YzA1YmFlYTVlZjlkNGFjOWVhNWY1Njc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOB7lrAH2gAyNDc1MjU3ODEyOmIzNjZhYjVmNGMxM2YwNTdiM2ZlMGI3YTVkMDE5NWY3MTNkN2YxZjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e8ecd3397b85e23d4c05baea5ef9d4ac9ea5f567", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e8ecd3397b85e23d4c05baea5ef9d4ac9ea5f567", "committedDate": "2020-08-24T19:45:37Z", "message": "Continute to implement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eee8d08cc648d322425a48790521bdf5bd71cc82", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/eee8d08cc648d322425a48790521bdf5bd71cc82", "committedDate": "2020-08-27T00:30:36Z", "message": "Merge branch 'master' into sbtrack2-cancel-schedule-plural-messages-14138"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a273d5aed510f8f67bf1e359235670a3e1055c85", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a273d5aed510f8f67bf1e359235670a3e1055c85", "committedDate": "2020-08-27T16:03:48Z", "message": "continue implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d68649729177553398d64d6928d8ad6ad77b5627", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d68649729177553398d64d6928d8ad6ad77b5627", "committedDate": "2020-08-28T08:12:54Z", "message": "Schedule and cancel schedule plural messges"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4OTc2NTI0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#pullrequestreview-478976524", "createdAt": "2020-08-31T21:44:10Z", "commit": {"oid": "d68649729177553398d64d6928d8ad6ad77b5627"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMTo0NDoxMFrOHKKSOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMTo0NTo0NFrOHKKU7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQxNjMxNQ==", "bodyText": "This should be OffsetDateTime or it will conflict with @YijunXieMS 's changes.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r480416315", "createdAt": "2020-08-31T21:44:10Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -326,6 +327,38 @@ public String getEntityPath() {\n         return scheduleMessageInternal(message, scheduledEnqueueTime, null);\n     }\n \n+    /**\n+     * Sends a scheduled messages to the Azure Service Bus entity this sender is connected to. A scheduled message is\n+     * enqueued and made available to receivers only at the scheduled enqueue time.\n+     *\n+     * @param messages Message to be sent to the Service Bus Queue.\n+     * @param scheduledEnqueueTime Instant at which the message should appear in the Service Bus queue or topic.\n+     *\n+     * @return The sequence number of the scheduled message which can be used to cancel the scheduling of the message.\n+     *\n+     * @throws NullPointerException if {@code messages} or {@code scheduledEnqueueTime} is {@code null}.\n+     */\n+    public Flux<Long> scheduleMessages(Iterable<ServiceBusMessage> messages, Instant scheduledEnqueueTime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d68649729177553398d64d6928d8ad6ad77b5627"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQxNjc5NA==", "bodyText": "IIRC you said that your tests were failing for this? If that's the case, we should remove this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r480416794", "createdAt": "2020-08-31T21:45:13Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -342,7 +375,83 @@ public String getEntityPath() {\n \n         return connectionProcessor\n             .flatMap(connection -> connection.getManagementNode(entityName, entityType))\n-            .flatMap(managementNode -> managementNode.cancelScheduledMessage(sequenceNumber, linkName.get()));\n+            .flatMap(managementNode -> managementNode.cancelScheduledMessage(sequenceNumber, linkName.get(),\n+                null));\n+    }\n+\n+    /**\n+     * Cancels the enqueuing of an already scheduled message, if it was not already enqueued.\n+     *\n+     * @param sequenceNumber of the scheduled message to cancel.\n+     * @param transactionContext to be set on batch message before scheduling them on Service Bus.\n+     *\n+     * @return The {@link Mono} that finishes this operation on service bus resource.\n+     *\n+     * @throws IllegalArgumentException if {@code sequenceNumber} is negative.\n+     */\n+    public Mono<Void> cancelScheduledMessage(long sequenceNumber, ServiceBusTransactionContext transactionContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d68649729177553398d64d6928d8ad6ad77b5627"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQxNzAwNg==", "bodyText": "I don't remember. Did cancelling work with a transaction?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r480417006", "createdAt": "2020-08-31T21:45:44Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -342,7 +375,83 @@ public String getEntityPath() {\n \n         return connectionProcessor\n             .flatMap(connection -> connection.getManagementNode(entityName, entityType))\n-            .flatMap(managementNode -> managementNode.cancelScheduledMessage(sequenceNumber, linkName.get()));\n+            .flatMap(managementNode -> managementNode.cancelScheduledMessage(sequenceNumber, linkName.get(),\n+                null));\n+    }\n+\n+    /**\n+     * Cancels the enqueuing of an already scheduled message, if it was not already enqueued.\n+     *\n+     * @param sequenceNumber of the scheduled message to cancel.\n+     * @param transactionContext to be set on batch message before scheduling them on Service Bus.\n+     *\n+     * @return The {@link Mono} that finishes this operation on service bus resource.\n+     *\n+     * @throws IllegalArgumentException if {@code sequenceNumber} is negative.\n+     */\n+    public Mono<Void> cancelScheduledMessage(long sequenceNumber, ServiceBusTransactionContext transactionContext) {\n+        if (sequenceNumber < 0) {\n+            return monoError(logger, new IllegalArgumentException(\"'sequenceNumber' cannot be negative.\"));\n+        }\n+\n+        return connectionProcessor\n+            .flatMap(connection -> connection.getManagementNode(entityName, entityType))\n+            .flatMap(managementNode -> managementNode.cancelScheduledMessage(sequenceNumber, linkName.get(),\n+                transactionContext));\n+    }\n+\n+    /**\n+     * Cancels the enqueuing of an already scheduled message, if it was not already enqueued.\n+     *\n+     * @param sequenceNumbers of the scheduled messages to cancel.\n+     *\n+     * @return The {@link Mono} that finishes this operation on service bus resource.\n+     *\n+     * @throws NullPointerException if {@code sequenceNumbers} is null.\n+     */\n+    public Mono<Void> cancelScheduledMessages(Iterable<Long> sequenceNumbers) {\n+\n+        if (isDisposed.get()) {\n+            return monoError(logger, new IllegalStateException(\n+                String.format(INVALID_OPERATION_DISPOSED_RECEIVER, \"cancelScheduledMessages\")));\n+        }\n+\n+        if (Objects.isNull(sequenceNumbers)) {\n+            return monoError(logger, new NullPointerException(\"'messages' cannot be null.\"));\n+        }\n+\n+        return connectionProcessor\n+            .flatMap(connection -> connection.getManagementNode(entityName, entityType))\n+            .flatMap(managementNode -> managementNode.cancelScheduledMessages(sequenceNumbers, linkName.get(),\n+                null));\n+    }\n+\n+    /**\n+     * Cancels the enqueuing of an already scheduled message, if it was not already enqueued.\n+     *\n+     * @param sequenceNumbers of the scheduled messages to cancel.\n+     * @param transactionContext to be set on batch sequence numbers for this operation on Service Bus.\n+     *\n+     * @return The {@link Mono} that finishes this operation on service bus resource.\n+     *\n+     * @throws NullPointerException if {@code sequenceNumbers} is null.\n+     */\n+    public Mono<Void> cancelScheduledMessages(Iterable<Long> sequenceNumbers,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d68649729177553398d64d6928d8ad6ad77b5627"}, "originalPosition": 113}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acf9763f12398950efbaa1237a1c4980330f62f4", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/acf9763f12398950efbaa1237a1c4980330f62f4", "committedDate": "2020-08-31T23:31:46Z", "message": "Removed API for cancelScheduledMessage using transaction."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5OTY4NDgz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#pullrequestreview-479968483", "createdAt": "2020-09-01T17:30:51Z", "commit": {"oid": "acf9763f12398950efbaa1237a1c4980330f62f4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzozMDo1MVrOHLBGXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzozMTozN1rOHLBIBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNDM5OQ==", "bodyText": "we don't need this transactioncontext anymore.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r481314399", "createdAt": "2020-09-01T17:30:51Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -96,7 +98,40 @@\n                 requestMessage.setBody(new AmqpValue(Collections.singletonMap(ManagementConstants.SEQUENCE_NUMBERS,\n                     new Long[]{sequenceNumber})));\n \n-                return sendWithVerify(channel, requestMessage, null);\n+                TransactionalState transactionalState = null;\n+                if (transactionContext != null && transactionContext.getTransactionId() != null) {\n+                    transactionalState = new TransactionalState();\n+                    transactionalState.setTxnId(new Binary(transactionContext.getTransactionId().array()));\n+                }\n+\n+                return sendWithVerify(channel, requestMessage, transactionalState);\n+            })).then();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Mono<Void> cancelScheduledMessages(Iterable<Long> sequenceNumbers, String associatedLinkName,\n+        ServiceBusTransactionContext transactionContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acf9763f12398950efbaa1237a1c4980330f62f4"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNDgyMg==", "bodyText": "Can we condense this? It is a copy of all the logic from the single send. same with cancel.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r481314822", "createdAt": "2020-09-01T17:31:37Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -282,6 +317,87 @@\n         });\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Flux<Long> schedule(final List<ServiceBusMessage> messages, Instant scheduledEnqueueTime, int maxLinkSize,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acf9763f12398950efbaa1237a1c4980330f62f4"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5OTc0ODcx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#pullrequestreview-479974871", "createdAt": "2020-09-01T17:39:46Z", "commit": {"oid": "acf9763f12398950efbaa1237a1c4980330f62f4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzozOTo0N1rOHLBZjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzozOTo0N1rOHLBZjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxOTMxMQ==", "bodyText": "Can you run all the live tests? I'm afraid we'll run into dirty tests and conflicts like what Yijun experienced", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r481319311", "createdAt": "2020-09-01T17:39:47Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java", "diffHunk": "@@ -301,6 +303,89 @@ void scheduleMessageWithTransaction() {\n         verify(asyncSender).scheduleMessage(testData, scheduledEnqueueTime, transactionContext);\n     }\n \n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acf9763f12398950efbaa1237a1c4980330f62f4"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d20fb4769335cab227d426a12a5bfc8c17f3e59f", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d20fb4769335cab227d426a12a5bfc8c17f3e59f", "committedDate": "2020-09-22T22:46:00Z", "message": "Continue implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d96b1bec03dc6e8fb288a091a67a93c16a9af5e8", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d96b1bec03dc6e8fb288a091a67a93c16a9af5e8", "committedDate": "2020-09-26T00:03:35Z", "message": "Removed API for single and using List to schedule."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2bd166d718480256dbdfba677446889983e1969", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c2bd166d718480256dbdfba677446889983e1969", "committedDate": "2020-09-26T00:09:17Z", "message": "Removed API for single and using List to schedule."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3ODMwNDY1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#pullrequestreview-497830465", "createdAt": "2020-09-28T19:26:26Z", "commit": {"oid": "c2bd166d718480256dbdfba677446889983e1969"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOToyNjoyNlrOHZMg2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOToyNzozN1rOHZMjGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4MTQ2Nw==", "bodyText": "final Long[] longs to be consistent.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r496181467", "createdAt": "2020-09-28T19:26:26Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -97,6 +99,32 @@\n                 requestMessage.setBody(new AmqpValue(Collections.singletonMap(ManagementConstants.SEQUENCE_NUMBERS,\n                     new Long[]{sequenceNumber})));\n \n+                TransactionalState transactionalState = null;\n+                if (transactionContext != null && transactionContext.getTransactionId() != null) {\n+                    transactionalState = new TransactionalState();\n+                    transactionalState.setTxnId(new Binary(transactionContext.getTransactionId().array()));\n+                }\n+\n+                return sendWithVerify(channel, requestMessage, transactionalState);\n+            })).then();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Mono<Void> cancelScheduledMessages(Iterable<Long> sequenceNumbers, String associatedLinkName) {\n+        return isAuthorized(ManagementConstants.OPERATION_CANCEL_SCHEDULED_MESSAGE)\n+            .then(createChannel.flatMap(channel -> {\n+                final Message requestMessage = createManagementMessage(\n+                    ManagementConstants.OPERATION_CANCEL_SCHEDULED_MESSAGE, associatedLinkName);\n+\n+                final List<Long> numbers = new ArrayList<>();\n+                sequenceNumbers.forEach(s -> numbers.add(s));\n+                Long[] longs = numbers.toArray(new Long[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2bd166d718480256dbdfba677446889983e1969"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4MjA0MA==", "bodyText": "Why duplicate logic, the logic in cancel and with iterable and single item are exactly the same.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r496182040", "createdAt": "2020-09-28T19:27:37Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -97,6 +99,32 @@\n                 requestMessage.setBody(new AmqpValue(Collections.singletonMap(ManagementConstants.SEQUENCE_NUMBERS,\n                     new Long[]{sequenceNumber})));\n \n+                TransactionalState transactionalState = null;\n+                if (transactionContext != null && transactionContext.getTransactionId() != null) {\n+                    transactionalState = new TransactionalState();\n+                    transactionalState.setTxnId(new Binary(transactionContext.getTransactionId().array()));\n+                }\n+\n+                return sendWithVerify(channel, requestMessage, transactionalState);\n+            })).then();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Mono<Void> cancelScheduledMessages(Iterable<Long> sequenceNumbers, String associatedLinkName) {\n+        return isAuthorized(ManagementConstants.OPERATION_CANCEL_SCHEDULED_MESSAGE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2bd166d718480256dbdfba677446889983e1969"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3ODMyMDI4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#pullrequestreview-497832028", "createdAt": "2020-09-28T19:28:52Z", "commit": {"oid": "c2bd166d718480256dbdfba677446889983e1969"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOToyODo1MlrOHZMllQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOToyODo1MlrOHZMllQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4MjY3Nw==", "bodyText": "Consistent use of final.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r496182677", "createdAt": "2020-09-28T19:28:52Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -287,53 +315,57 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    public Mono<Long> schedule(ServiceBusMessage message, OffsetDateTime scheduledEnqueueTime, int maxLinkSize,\n-        String associatedLinkName, ServiceBusTransactionContext transactionContext) {\n-        message.setScheduledEnqueueTime(scheduledEnqueueTime);\n-\n-        return isAuthorized(OPERATION_SCHEDULE_MESSAGE).then(createChannel.flatMap(channel -> {\n-            // Serialize the request.\n-            final Message amqpMessage = messageSerializer.serialize(message);\n-\n-            // The maxsize allowed logic is from ReactorSender, this logic should be kept in sync.\n-            final int payloadSize = messageSerializer.getSize(amqpMessage);\n-            final int allocationSize =\n-                Math.min(payloadSize + ManagementConstants.MAX_MESSAGING_AMQP_HEADER_SIZE_BYTES, maxLinkSize);\n-            final byte[] bytes = new byte[allocationSize];\n-\n-            int encodedSize;\n-            try {\n-                encodedSize = amqpMessage.encode(bytes, 0, allocationSize);\n-            } catch (BufferOverflowException exception) {\n-                final String errorMessage = String.format(\n-                    \"Error sending. Size of the payload exceeded maximum message size: %s kb\", maxLinkSize / 1024);\n-                final AmqpErrorContext errorContext = channel.getErrorContext();\n-\n-                return monoError(logger, Exceptions.propagate(new AmqpException(false,\n-                    AmqpErrorCondition.LINK_PAYLOAD_SIZE_EXCEEDED, errorMessage, exception, errorContext)));\n-            }\n+    public Flux<Long> schedule(final List<ServiceBusMessage> messages, OffsetDateTime scheduledEnqueueTime,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2bd166d718480256dbdfba677446889983e1969"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3770950a6735547199a42cb5671a129fdf493a96", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3770950a6735547199a42cb5671a129fdf493a96", "committedDate": "2020-09-29T17:18:18Z", "message": "Incorporating review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NzMxNjA2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#pullrequestreview-498731606", "createdAt": "2020-09-29T17:43:42Z", "commit": {"oid": "3770950a6735547199a42cb5671a129fdf493a96"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNzo0Mzo0M1rOHZ52fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNzo0OTozM1rOHZ6Esg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkyNDI4Ng==", "bodyText": "You don't need this internal method at all. The overload on top can call this method with transaction context as null.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r496924286", "createdAt": "2020-09-29T17:43:43Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -326,6 +328,38 @@ public String getEntityPath() {\n         return scheduleMessageInternal(message, scheduledEnqueueTime, null);\n     }\n \n+    /**\n+     * Sends a scheduled messages to the Azure Service Bus entity this sender is connected to. A scheduled message is\n+     * enqueued and made available to receivers only at the scheduled enqueue time.\n+     *\n+     * @param messages Message to be sent to the Service Bus Queue.\n+     * @param scheduledEnqueueTime OffsetDateTime at which the message should appear in the Service Bus queue or topic.\n+     *\n+     * @return The sequence number of the scheduled message which can be used to cancel the scheduling of the message.\n+     *\n+     * @throws NullPointerException if {@code messages} or {@code scheduledEnqueueTime} is {@code null}.\n+     */\n+    public Flux<Long> scheduleMessages(Iterable<ServiceBusMessage> messages, OffsetDateTime scheduledEnqueueTime) {\n+        return scheduleMessagesInternal(messages, scheduledEnqueueTime, null);\n+    }\n+\n+    /**\n+     * Sends a scheduled messages to the Azure Service Bus entity this sender is connected to. A scheduled message is\n+     * enqueued and made available to receivers only at the scheduled enqueue time.\n+     *\n+     * @param messages Message to be sent to the Service Bus Queue.\n+     * @param scheduledEnqueueTime Instant at which the message should appear in the Service Bus queue or topic.\n+     * @param transactionContext to be set on batch message before scheduling them on Service Bus.\n+     *\n+     * @return The sequence number of the scheduled message which can be used to cancel the scheduling of the message.\n+     *\n+     * @throws NullPointerException if {@code message} or {@code scheduledEnqueueTime} is {@code null}.\n+     */\n+    public Flux<Long> scheduleMessages(Iterable<ServiceBusMessage> messages, OffsetDateTime scheduledEnqueueTime,\n+        ServiceBusTransactionContext transactionContext) {\n+        return scheduleMessagesInternal(messages, scheduledEnqueueTime, transactionContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3770950a6735547199a42cb5671a129fdf493a96"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkyNTk0Mw==", "bodyText": "This method is only used once.. why not roll it up into one?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r496925943", "createdAt": "2020-09-29T17:46:23Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -426,6 +486,46 @@ public void close() {\n         });\n     }\n \n+\n+    private Flux<Long> scheduleMessagesInternal(Iterable<ServiceBusMessage> messages,\n+        OffsetDateTime scheduledEnqueueTime, ServiceBusTransactionContext transaction) {\n+        if (Objects.isNull(messages)) {\n+            return fluxError(logger, new NullPointerException(\"'messages' cannot be null.\"));\n+        }\n+\n+        if (Objects.isNull(scheduledEnqueueTime)) {\n+            return fluxError(logger, new NullPointerException(\"'scheduledEnqueueTime' cannot be null.\"));\n+        }\n+\n+        return createBatch().flatMapMany(messageBatch -> {\n+            messages.forEach(message -> messageBatch.tryAdd(message));\n+            return scheduleMessagesInternal(messageBatch, scheduledEnqueueTime, transaction);\n+        });\n+    }\n+\n+    private Flux<Long> scheduleMessagesInternal(ServiceBusMessageBatch message, OffsetDateTime scheduledEnqueueTime,\n+        ServiceBusTransactionContext transactionContext) {\n+        if (Objects.isNull(message)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3770950a6735547199a42cb5671a129fdf493a96"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkyNjMwMw==", "bodyText": "Why are we getting link size again instead of just using the batch's max size???", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r496926303", "createdAt": "2020-09-29T17:46:57Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -426,6 +486,46 @@ public void close() {\n         });\n     }\n \n+\n+    private Flux<Long> scheduleMessagesInternal(Iterable<ServiceBusMessage> messages,\n+        OffsetDateTime scheduledEnqueueTime, ServiceBusTransactionContext transaction) {\n+        if (Objects.isNull(messages)) {\n+            return fluxError(logger, new NullPointerException(\"'messages' cannot be null.\"));\n+        }\n+\n+        if (Objects.isNull(scheduledEnqueueTime)) {\n+            return fluxError(logger, new NullPointerException(\"'scheduledEnqueueTime' cannot be null.\"));\n+        }\n+\n+        return createBatch().flatMapMany(messageBatch -> {\n+            messages.forEach(message -> messageBatch.tryAdd(message));\n+            return scheduleMessagesInternal(messageBatch, scheduledEnqueueTime, transaction);\n+        });\n+    }\n+\n+    private Flux<Long> scheduleMessagesInternal(ServiceBusMessageBatch message, OffsetDateTime scheduledEnqueueTime,\n+        ServiceBusTransactionContext transactionContext) {\n+        if (Objects.isNull(message)) {\n+            return fluxError(logger, new NullPointerException(\"'message' cannot be null.\"));\n+        }\n+\n+        if (Objects.isNull(scheduledEnqueueTime)) {\n+            return fluxError(logger, new NullPointerException(\"'scheduledEnqueueTime' cannot be null.\"));\n+        }\n+\n+        return getSendLink()\n+            .flatMapMany(link -> link.getLinkSize().flatMapMany(size -> {\n+                int maxSize =  size > 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3770950a6735547199a42cb5671a129fdf493a96"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkyNzkyMg==", "bodyText": "We're basically creating our own message batch here. Why not just have a schedule that takes MessageBatch? Then we don't need the maxLinkSize anymore.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r496927922", "createdAt": "2020-09-29T17:49:33Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -287,53 +291,57 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    public Mono<Long> schedule(ServiceBusMessage message, OffsetDateTime scheduledEnqueueTime, int maxLinkSize,\n-        String associatedLinkName, ServiceBusTransactionContext transactionContext) {\n-        message.setScheduledEnqueueTime(scheduledEnqueueTime);\n-\n-        return isAuthorized(OPERATION_SCHEDULE_MESSAGE).then(createChannel.flatMap(channel -> {\n-            // Serialize the request.\n-            final Message amqpMessage = messageSerializer.serialize(message);\n-\n-            // The maxsize allowed logic is from ReactorSender, this logic should be kept in sync.\n-            final int payloadSize = messageSerializer.getSize(amqpMessage);\n-            final int allocationSize =\n-                Math.min(payloadSize + ManagementConstants.MAX_MESSAGING_AMQP_HEADER_SIZE_BYTES, maxLinkSize);\n-            final byte[] bytes = new byte[allocationSize];\n-\n-            int encodedSize;\n-            try {\n-                encodedSize = amqpMessage.encode(bytes, 0, allocationSize);\n-            } catch (BufferOverflowException exception) {\n-                final String errorMessage = String.format(\n-                    \"Error sending. Size of the payload exceeded maximum message size: %s kb\", maxLinkSize / 1024);\n-                final AmqpErrorContext errorContext = channel.getErrorContext();\n-\n-                return monoError(logger, Exceptions.propagate(new AmqpException(false,\n-                    AmqpErrorCondition.LINK_PAYLOAD_SIZE_EXCEEDED, errorMessage, exception, errorContext)));\n-            }\n+    public Flux<Long> schedule(List<ServiceBusMessage> messages, OffsetDateTime scheduledEnqueueTime,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3770950a6735547199a42cb5671a129fdf493a96"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10cbe40b5da85906e468a3ece863c017af26d80f", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/10cbe40b5da85906e468a3ece863c017af26d80f", "committedDate": "2020-09-29T21:39:41Z", "message": "Incorporating review comment and adding integration test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c83056608115d6ef0f058a59847e05b90b281dc0", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c83056608115d6ef0f058a59847e05b90b281dc0", "committedDate": "2020-09-29T21:48:08Z", "message": "merge master into branch"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NzI5MzI1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#pullrequestreview-499729325", "createdAt": "2020-09-30T19:05:06Z", "commit": {"oid": "c83056608115d6ef0f058a59847e05b90b281dc0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b366ab5f4c13f057b3fe0b7a5d0195f713d7f1f0", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b366ab5f4c13f057b3fe0b7a5d0195f713d7f1f0", "committedDate": "2020-09-30T19:27:10Z", "message": "merge master into the branch"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 163, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}