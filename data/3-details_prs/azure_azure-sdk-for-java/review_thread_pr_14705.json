{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3NDA1MDA1", "number": 14705, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTozMzozM1rOEgIO3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTozMzozM1rOEgIO3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTI0NzY3OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/LockRenewalOperation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTozMzozM1rOHM0ujg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTozMzozM1rOHM0ujg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwODg0Ng==", "bodyText": "Is this duration to cache should be configuration by user ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14705#discussion_r483208846", "createdAt": "2020-09-03T19:33:33Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/LockRenewalOperation.java", "diffHunk": "@@ -53,35 +53,63 @@\n      * Creates a new lock renewal operation.\n      *\n      * @param lockToken Lock or session id to renew.\n-     * @param lockedUntil The initial period the message or session is locked until.\n+     * @param tokenLockedUntil The initial period the message or session is locked until.\n      * @param maxLockRenewalDuration The maximum duration this lock should be renewed.\n      * @param isSession Whether the lock represents a session lock or message lock.\n      * @param renewalOperation The renewal operation to call.\n      */\n     LockRenewalOperation(String lockToken, Duration maxLockRenewalDuration, boolean isSession,\n-        Function<String, Mono<OffsetDateTime>> renewalOperation, OffsetDateTime lockedUntil) {\n+        Function<String, Mono<OffsetDateTime>> renewalOperation, OffsetDateTime tokenLockedUntil) {\n         this.lockToken = Objects.requireNonNull(lockToken, \"'lockToken' cannot be null.\");\n         this.renewalOperation = Objects.requireNonNull(renewalOperation, \"'renewalOperation' cannot be null.\");\n         this.isSession = isSession;\n \n-        Objects.requireNonNull(lockedUntil, \"'lockedUntil cannot be null.'\");\n+        Objects.requireNonNull(tokenLockedUntil, \"'lockedUntil cannot be null.'\");\n         Objects.requireNonNull(maxLockRenewalDuration, \"'maxLockRenewalDuration' cannot be null.\");\n \n         if (maxLockRenewalDuration.isNegative()) {\n-            throw logger.logThrowableAsError(new IllegalArgumentException(\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\n                 \"'maxLockRenewalDuration' cannot be negative.\"));\n         }\n \n-        this.lockedUntil.set(lockedUntil);\n-        this.subscription = getRenewLockOperation(lockedUntil, maxLockRenewalDuration);\n+        this.lockedUntil.set(tokenLockedUntil);\n+\n+        final Flux<OffsetDateTime> renewLockOperation = getRenewLockOperation(tokenLockedUntil,\n+            maxLockRenewalDuration)\n+            .takeUntilOther(cancellationProcessor)\n+            .cache(Duration.ofMinutes(2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59dd155bbc2839c91f92073d5c6f93488540b3e9"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1383, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}