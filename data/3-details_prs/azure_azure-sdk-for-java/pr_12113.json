{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMzcxNDQy", "number": 12113, "title": "Updated beta release based on 73 apiview feedback", "bodyText": "Update the changes made for the beta release to include new guidelines for options bag types.", "createdAt": "2020-06-11T22:51:51Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12113", "merged": true, "mergeCommit": {"oid": "b23448e3685b60f8eb82d9035fa5f39de7c6c71e"}, "closed": true, "closedAt": "2020-06-12T16:36:26Z", "author": {"login": "rickle-msft"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqWTaagH2gAyNDMzMzcxNDQyOjI2YTYzODAzNWRjZTYwMmJlNWViYzIzNzMwNTBjZDY2ODAzOTM1ZGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqXWXkgFqTQyOTM3ODA0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "26a638035dce602be5ebc2373050cd66803935dc", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/26a638035dce602be5ebc2373050cd66803935dc", "committedDate": "2020-06-11T22:50:01Z", "message": "Updated beta release based on 73 apiview feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MzQ3NjE0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12113#pullrequestreview-429347614", "createdAt": "2020-06-11T22:56:17Z", "commit": {"oid": "26a638035dce602be5ebc2373050cd66803935dc"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMjo1NjoxN1rOGixcFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMjo1NzoyOFrOGixddw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExNDc3Mg==", "bodyText": "This was added in a preview right?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12113#discussion_r439114772", "createdAt": "2020-06-11T22:56:17Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobClient.java", "diffHunk": "@@ -170,39 +171,33 @@ public void upload(InputStream data, long length, boolean overwrite) {\n     public void uploadWithResponse(InputStream data, long length, ParallelTransferOptions parallelTransferOptions,\n         BlobHttpHeaders headers, Map<String, String> metadata, AccessTier tier, BlobRequestConditions requestConditions,\n         Duration timeout, Context context) {\n-        uploadWithResponse(data, length, new BlobParallelUploadOptions()\n+        uploadWithResponse(new BlobParallelUploadOptions(data, length)\n             .setParallelTransferOptions(parallelTransferOptions).setHeaders(headers).setMetadata(metadata).setTier(tier)\n-            .setRequestConditions(requestConditions), timeout, context);\n+            .setRequestConditions(requestConditions).setTimeout(timeout), context);\n     }\n \n     /**\n      * Creates a new blob, or updates the content of an existing blob.\n      * <p>\n      * To avoid overwriting, pass \"*\" to {@link BlobRequestConditions#setIfNoneMatch(String)}.\n-     *\n-     * @param data The data to write to the blob.\n-     * @param length The exact length of the data. It is important that this value match precisely the length of the\n-     * data provided in the {@link InputStream}.\n      * @param options {@link BlobParallelUploadOptions}\n-     * @param timeout An optional timeout value beyond which a {@link RuntimeException} will be raised.\n      * @param context Additional context that is passed through the Http pipeline during the service call.\n      * @return Information about the uploaded block blob.\n      */\n-    public Response<BlockBlobItem> uploadWithResponse(InputStream data, long length, BlobParallelUploadOptions options,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26a638035dce602be5ebc2373050cd66803935dc"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExNTEyNw==", "bodyText": "Does the corresponding async method have an options bag as well?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12113#discussion_r439115127", "createdAt": "2020-06-11T22:57:28Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobClient.java", "diffHunk": "@@ -170,39 +171,33 @@ public void upload(InputStream data, long length, boolean overwrite) {\n     public void uploadWithResponse(InputStream data, long length, ParallelTransferOptions parallelTransferOptions,\n         BlobHttpHeaders headers, Map<String, String> metadata, AccessTier tier, BlobRequestConditions requestConditions,\n         Duration timeout, Context context) {\n-        uploadWithResponse(data, length, new BlobParallelUploadOptions()\n+        uploadWithResponse(new BlobParallelUploadOptions(data, length)\n             .setParallelTransferOptions(parallelTransferOptions).setHeaders(headers).setMetadata(metadata).setTier(tier)\n-            .setRequestConditions(requestConditions), timeout, context);\n+            .setRequestConditions(requestConditions).setTimeout(timeout), context);\n     }\n \n     /**\n      * Creates a new blob, or updates the content of an existing blob.\n      * <p>\n      * To avoid overwriting, pass \"*\" to {@link BlobRequestConditions#setIfNoneMatch(String)}.\n-     *\n-     * @param data The data to write to the blob.\n-     * @param length The exact length of the data. It is important that this value match precisely the length of the\n-     * data provided in the {@link InputStream}.\n      * @param options {@link BlobParallelUploadOptions}\n-     * @param timeout An optional timeout value beyond which a {@link RuntimeException} will be raised.\n      * @param context Additional context that is passed through the Http pipeline during the service call.\n      * @return Information about the uploaded block blob.\n      */\n-    public Response<BlockBlobItem> uploadWithResponse(InputStream data, long length, BlobParallelUploadOptions options,\n-        Duration timeout, Context context) {\n-        BlobParallelUploadOptions blobParallelUploadOptions = options == null ? new BlobParallelUploadOptions()\n-            : options;\n+    public Response<BlockBlobItem> uploadWithResponse(BlobParallelUploadOptions options, Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26a638035dce602be5ebc2373050cd66803935dc"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MzQ3MDkz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12113#pullrequestreview-429347093", "createdAt": "2020-06-11T22:55:01Z", "commit": {"oid": "26a638035dce602be5ebc2373050cd66803935dc"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMjo1NTowMVrOGixaSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzowNDoxOVrOGixlng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExNDMxNQ==", "bodyText": "nit: add method-level javadocs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12113#discussion_r439114315", "createdAt": "2020-06-11T22:55:01Z", "author": {"login": "srnagar"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/options/BlobParallelUploadOptions.java", "diffHunk": "@@ -1,22 +1,58 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n \n-package com.azure.storage.blob.models;\n+package com.azure.storage.blob.options;\n \n import com.azure.core.annotation.Fluent;\n+import com.azure.storage.blob.models.AccessTier;\n+import com.azure.storage.blob.models.BlobHttpHeaders;\n+import com.azure.storage.blob.models.BlobRequestConditions;\n+import com.azure.storage.blob.models.ParallelTransferOptions;\n+import reactor.core.publisher.Flux;\n \n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.time.Duration;\n import java.util.Map;\n \n /**\n  * Extended options that may be passed when uploading a Block Blob in parallel.\n  */\n @Fluent\n public class BlobParallelUploadOptions {\n+    private final InputStream dataStream;\n+    private final long length;\n     private ParallelTransferOptions parallelTransferOptions;\n     private BlobHttpHeaders headers;\n     private Map<String, String> metadata;\n     private AccessTier tier;\n     private BlobRequestConditions requestConditions;\n+    private Duration timeout;\n+\n+    /**\n+     * @param dataStream The data to write to the blob.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26a638035dce602be5ebc2373050cd66803935dc"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExNzAzMQ==", "bodyText": "This should include Flux<ByteBuffer> as well and a ctor overload for it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12113#discussion_r439117031", "createdAt": "2020-06-11T23:03:44Z", "author": {"login": "srnagar"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/options/BlobParallelUploadOptions.java", "diffHunk": "@@ -1,22 +1,58 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n \n-package com.azure.storage.blob.models;\n+package com.azure.storage.blob.options;\n \n import com.azure.core.annotation.Fluent;\n+import com.azure.storage.blob.models.AccessTier;\n+import com.azure.storage.blob.models.BlobHttpHeaders;\n+import com.azure.storage.blob.models.BlobRequestConditions;\n+import com.azure.storage.blob.models.ParallelTransferOptions;\n+import reactor.core.publisher.Flux;\n \n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.time.Duration;\n import java.util.Map;\n \n /**\n  * Extended options that may be passed when uploading a Block Blob in parallel.\n  */\n @Fluent\n public class BlobParallelUploadOptions {\n+    private final InputStream dataStream;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26a638035dce602be5ebc2373050cd66803935dc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExNzIxNA==", "bodyText": "Also, document that this will be ignored for async operations.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12113#discussion_r439117214", "createdAt": "2020-06-11T23:04:19Z", "author": {"login": "srnagar"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/options/BlobParallelUploadOptions.java", "diffHunk": "@@ -97,4 +133,17 @@ public BlobParallelUploadOptions setRequestConditions(BlobRequestConditions requ\n         this.requestConditions = requestConditions;\n         return this;\n     }\n+\n+    public Duration getTimeout() {\n+        return this.timeout;\n+    }\n+\n+    /**\n+     * @param timeout An optional timeout value beyond which a {@link RuntimeException} will be raised.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26a638035dce602be5ebc2373050cd66803935dc"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c2854cf8f1908e8884f383f8e0bd7270bb581ff", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7c2854cf8f1908e8884f383f8e0bd7270bb581ff", "committedDate": "2020-06-11T23:19:36Z", "message": "PR feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MzU4Nzk5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12113#pullrequestreview-429358799", "createdAt": "2020-06-11T23:24:39Z", "commit": {"oid": "7c2854cf8f1908e8884f383f8e0bd7270bb581ff"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5Mzc4MDQw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12113#pullrequestreview-429378040", "createdAt": "2020-06-12T00:03:09Z", "commit": {"oid": "7c2854cf8f1908e8884f383f8e0bd7270bb581ff"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3708, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}