{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MjU0ODg1", "number": 12999, "title": "Cosmos: preview for a more detailed CFP state reporting", "bodyText": "Add implementation to allow for \"preview\" API to be annotated as such (see Beta.java).\nAdd preview implementation for ChangeFeedProcessor which allows for a more detailed view of the current state.", "createdAt": "2020-07-10T06:35:28Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999", "merged": true, "mergeCommit": {"oid": "0c052cd1540543e704bc48c790a1add0478c1f21"}, "closed": true, "closedAt": "2020-09-18T18:40:55Z", "author": {"login": "milismsft"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczddGTgH2gAyNDQ3MjU0ODg1OjE0MjM0NTRkOGZiNTM5NTU0NDU2YmM4NTQwZWU4NWNjNWQ1MTU0NzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJz-NuAH2gAyNDQ3MjU0ODg1OjI5MjE0MTRhMWVmMDNlM2Q2NmVkNzQ5Zjk1ZThkZjU3MzZhYTAzNDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1423454d8fb539554456bc8540ee85cc5d515475", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1423454d8fb539554456bc8540ee85cc5d515475", "committedDate": "2020-07-10T06:15:15Z", "message": "Add preview implementation for a more detailed lag estimator."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad1c44525c9dbd923ffd7d90c125424d469b7d52", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ad1c44525c9dbd923ffd7d90c125424d469b7d52", "committedDate": "2020-07-10T06:31:02Z", "message": "add test case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MTU5MjU5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#pullrequestreview-446159259", "createdAt": "2020-07-10T06:49:35Z", "commit": {"oid": "ad1c44525c9dbd923ffd7d90c125424d469b7d52"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo0OTozNVrOGvrzmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo0OTozNVrOGvrzmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1Mzk3OQ==", "bodyText": "This would need to be of type FeedRange soon. https://github.com/FabianMeiswinkel/azure-sdk-for-java/blob/master/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/FeedRange.java\nI think we have 3 Options:\n\nKeep it String here, to avoid breaking change use the FeedRange.toSjon as the value and expect customers to do the transformations upstream\nMake a breaking change to this preview contract when I merge the FeedRange changes - would probably be good to set expectations with Walmart that we expect some breaking changes here\nAdd FeedRange as an additional field - make Id the FeedRange.toJson() - this way it doesn't break and the Id might not be very useful anymore but also doesn't really cause harm\n\nI think 3) is an acceptable solution - le me know whether you agree/disagree", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452653979", "createdAt": "2020-07-10T06:49:35Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java", "diffHunk": "@@ -0,0 +1,172 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.ChangeFeedProcessor;\n+import com.azure.cosmos.util.Beta;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Specifies the {@link ChangeFeedProcessor} state for a particular lease/worker.\n+ */\n+@Beta(Beta.SinceVersion.V4_2_0)\n+public class ChangeFeedProcessorState {\n+    private String id;\n+    private String leaseToken;\n+    private String hostName;\n+    private Instant lastUpdate;\n+    private String continuationToken;\n+    private Instant continuationTokenTimestamp;\n+    private int estimatedLag;\n+\n+    /**\n+     * Gets the ID of the lease item representing the persistent state of a change feed processor worker.\n+     *\n+     * @return the ID of the lease item.\n+     */\n+    public String getId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad1c44525c9dbd923ffd7d90c125424d469b7d52"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MTYwNDk1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#pullrequestreview-446160495", "createdAt": "2020-07-10T06:52:13Z", "commit": {"oid": "ad1c44525c9dbd923ffd7d90c125424d469b7d52"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo1MjoxM1rOGvr3tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo1MjoxM1rOGvr3tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1NTAyOA==", "bodyText": "NIT: final static \"consts\" as class level to avoid allocation for every execution", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452655028", "createdAt": "2020-07-10T06:52:13Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java", "diffHunk": "@@ -209,6 +214,92 @@ public boolean isStarted() {\n             });\n     }\n \n+    /**\n+     * Returns a list of states each representing one scoped worker item.\n+     * <p>\n+     * An empty list will be returned if the processor was not started or no lease items matching the current\n+     *   {@link ChangeFeedProcessor} instance's lease prefix could be found.\n+     *\n+     * @return a list of states each representing one scoped worker item.\n+     */\n+    @Override\n+    public Mono<List<ChangeFeedProcessorState>> getCurrentState() {\n+        List<ChangeFeedProcessorState> earlyResult = new ArrayList<>();\n+\n+        if (this.leaseStoreManager == null || this.feedContextClient == null) {\n+            return Mono.just(earlyResult);\n+        }\n+\n+        return this.leaseStoreManager.getAllLeases()\n+            .flatMap(lease -> {\n+                ChangeFeedOptions options = new ChangeFeedOptions()\n+                    .setMaxItemCount(1)\n+                    .setPartitionKeyRangeId(lease.getLeaseToken())\n+                    .setStartFromBeginning(true)\n+                    .setRequestContinuation(lease.getContinuationToken());\n+\n+                return this.feedContextClient.createDocumentChangeFeedQuery(this.feedContextClient.getContainerClient(), options)\n+                    .take(1)\n+                    .map(feedResponse -> {\n+                        final String pkRangeIdSeparator = \":\";\n+                        final String segmentSeparator = \"#\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad1c44525c9dbd923ffd7d90c125424d469b7d52"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MTYwOTU5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#pullrequestreview-446160959", "createdAt": "2020-07-10T06:53:09Z", "commit": {"oid": "ad1c44525c9dbd923ffd7d90c125424d469b7d52"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo1MzowOVrOGvr5MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo1MzowOVrOGvr5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1NTQwOA==", "bodyText": "NIT: final", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452655408", "createdAt": "2020-07-10T06:53:09Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java", "diffHunk": "@@ -209,6 +214,92 @@ public boolean isStarted() {\n             });\n     }\n \n+    /**\n+     * Returns a list of states each representing one scoped worker item.\n+     * <p>\n+     * An empty list will be returned if the processor was not started or no lease items matching the current\n+     *   {@link ChangeFeedProcessor} instance's lease prefix could be found.\n+     *\n+     * @return a list of states each representing one scoped worker item.\n+     */\n+    @Override\n+    public Mono<List<ChangeFeedProcessorState>> getCurrentState() {\n+        List<ChangeFeedProcessorState> earlyResult = new ArrayList<>();\n+\n+        if (this.leaseStoreManager == null || this.feedContextClient == null) {\n+            return Mono.just(earlyResult);\n+        }\n+\n+        return this.leaseStoreManager.getAllLeases()\n+            .flatMap(lease -> {\n+                ChangeFeedOptions options = new ChangeFeedOptions()\n+                    .setMaxItemCount(1)\n+                    .setPartitionKeyRangeId(lease.getLeaseToken())\n+                    .setStartFromBeginning(true)\n+                    .setRequestContinuation(lease.getContinuationToken());\n+\n+                return this.feedContextClient.createDocumentChangeFeedQuery(this.feedContextClient.getContainerClient(), options)\n+                    .take(1)\n+                    .map(feedResponse -> {\n+                        final String pkRangeIdSeparator = \":\";\n+                        final String segmentSeparator = \"#\";\n+                        final String lsnPropertyName = \"_lsn\";\n+                        final String tsPropertyName = \"_ts\";\n+\n+                        String sessionTokenLsn = feedResponse.getSessionToken();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad1c44525c9dbd923ffd7d90c125424d469b7d52"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MTYyNzM2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#pullrequestreview-446162736", "createdAt": "2020-07-10T06:56:57Z", "commit": {"oid": "ad1c44525c9dbd923ffd7d90c125424d469b7d52"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo1Njo1N1rOGvr-2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo1Njo1N1rOGvr-2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1Njg1Ng==", "bodyText": "NIT: assign local variable for feedResponse.getResults() to avoid repetitive invocation of the property getter", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452656856", "createdAt": "2020-07-10T06:56:57Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java", "diffHunk": "@@ -209,6 +214,92 @@ public boolean isStarted() {\n             });\n     }\n \n+    /**\n+     * Returns a list of states each representing one scoped worker item.\n+     * <p>\n+     * An empty list will be returned if the processor was not started or no lease items matching the current\n+     *   {@link ChangeFeedProcessor} instance's lease prefix could be found.\n+     *\n+     * @return a list of states each representing one scoped worker item.\n+     */\n+    @Override\n+    public Mono<List<ChangeFeedProcessorState>> getCurrentState() {\n+        List<ChangeFeedProcessorState> earlyResult = new ArrayList<>();\n+\n+        if (this.leaseStoreManager == null || this.feedContextClient == null) {\n+            return Mono.just(earlyResult);\n+        }\n+\n+        return this.leaseStoreManager.getAllLeases()\n+            .flatMap(lease -> {\n+                ChangeFeedOptions options = new ChangeFeedOptions()\n+                    .setMaxItemCount(1)\n+                    .setPartitionKeyRangeId(lease.getLeaseToken())\n+                    .setStartFromBeginning(true)\n+                    .setRequestContinuation(lease.getContinuationToken());\n+\n+                return this.feedContextClient.createDocumentChangeFeedQuery(this.feedContextClient.getContainerClient(), options)\n+                    .take(1)\n+                    .map(feedResponse -> {\n+                        final String pkRangeIdSeparator = \":\";\n+                        final String segmentSeparator = \"#\";\n+                        final String lsnPropertyName = \"_lsn\";\n+                        final String tsPropertyName = \"_ts\";\n+\n+                        String sessionTokenLsn = feedResponse.getSessionToken();\n+                        String parsedSessionToken = sessionTokenLsn.substring(sessionTokenLsn.indexOf(pkRangeIdSeparator));\n+                        String[] segments = parsedSessionToken.split(segmentSeparator);\n+                        String latestLsn = segments[0];\n+\n+                        if (segments.length >= 2) {\n+                            // default to Global LSN\n+                            latestLsn = segments[1];\n+                        }\n+\n+                        ChangeFeedProcessorState changeFeedProcessorState = new ChangeFeedProcessorState()\n+                            .setId(lease.getId())\n+                            .setHostName(lease.getOwner())\n+                            .setLeaseToken(lease.getLeaseToken())\n+                            .setLastUpdate(ZonedDateTime.parse(lease.getTimestamp()).toInstant());\n+\n+\n+                        // An empty list of documents returned means that we are current (zero lag)\n+                        if (feedResponse.getResults() == null || feedResponse.getResults().size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad1c44525c9dbd923ffd7d90c125424d469b7d52"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MTYzNTMw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#pullrequestreview-446163530", "createdAt": "2020-07-10T06:58:36Z", "commit": {"oid": "ad1c44525c9dbd923ffd7d90c125424d469b7d52"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo1ODozNlrOGvsBUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo1ODozNlrOGvsBUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1NzQ4OA==", "bodyText": "Not sure - my style-preference would be\nchangeFeedProcessorState\n.setEstimatedLag(0)\n.setContinuationToken(latestLsn);\nBut feel free to ignore if the non-fluent style is what makes the code more consistent etc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452657488", "createdAt": "2020-07-10T06:58:36Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java", "diffHunk": "@@ -209,6 +214,92 @@ public boolean isStarted() {\n             });\n     }\n \n+    /**\n+     * Returns a list of states each representing one scoped worker item.\n+     * <p>\n+     * An empty list will be returned if the processor was not started or no lease items matching the current\n+     *   {@link ChangeFeedProcessor} instance's lease prefix could be found.\n+     *\n+     * @return a list of states each representing one scoped worker item.\n+     */\n+    @Override\n+    public Mono<List<ChangeFeedProcessorState>> getCurrentState() {\n+        List<ChangeFeedProcessorState> earlyResult = new ArrayList<>();\n+\n+        if (this.leaseStoreManager == null || this.feedContextClient == null) {\n+            return Mono.just(earlyResult);\n+        }\n+\n+        return this.leaseStoreManager.getAllLeases()\n+            .flatMap(lease -> {\n+                ChangeFeedOptions options = new ChangeFeedOptions()\n+                    .setMaxItemCount(1)\n+                    .setPartitionKeyRangeId(lease.getLeaseToken())\n+                    .setStartFromBeginning(true)\n+                    .setRequestContinuation(lease.getContinuationToken());\n+\n+                return this.feedContextClient.createDocumentChangeFeedQuery(this.feedContextClient.getContainerClient(), options)\n+                    .take(1)\n+                    .map(feedResponse -> {\n+                        final String pkRangeIdSeparator = \":\";\n+                        final String segmentSeparator = \"#\";\n+                        final String lsnPropertyName = \"_lsn\";\n+                        final String tsPropertyName = \"_ts\";\n+\n+                        String sessionTokenLsn = feedResponse.getSessionToken();\n+                        String parsedSessionToken = sessionTokenLsn.substring(sessionTokenLsn.indexOf(pkRangeIdSeparator));\n+                        String[] segments = parsedSessionToken.split(segmentSeparator);\n+                        String latestLsn = segments[0];\n+\n+                        if (segments.length >= 2) {\n+                            // default to Global LSN\n+                            latestLsn = segments[1];\n+                        }\n+\n+                        ChangeFeedProcessorState changeFeedProcessorState = new ChangeFeedProcessorState()\n+                            .setId(lease.getId())\n+                            .setHostName(lease.getOwner())\n+                            .setLeaseToken(lease.getLeaseToken())\n+                            .setLastUpdate(ZonedDateTime.parse(lease.getTimestamp()).toInstant());\n+\n+\n+                        // An empty list of documents returned means that we are current (zero lag)\n+                        if (feedResponse.getResults() == null || feedResponse.getResults().size() == 0) {\n+                            changeFeedProcessorState.setEstimatedLag(0);\n+                            changeFeedProcessorState.setContinuationToken(latestLsn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad1c44525c9dbd923ffd7d90c125424d469b7d52"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MTY0NTU3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#pullrequestreview-446164557", "createdAt": "2020-07-10T07:00:37Z", "commit": {"oid": "ad1c44525c9dbd923ffd7d90c125424d469b7d52"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNzowMDozN1rOGvsETQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNzowMDozN1rOGvsETQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1ODI1Mw==", "bodyText": "Wouldn't this indicate a critical failure - tracing as warning and ignoring unexpected backend response seems to make it harder than necessary to identify breaking changes / debug it?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452658253", "createdAt": "2020-07-10T07:00:37Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java", "diffHunk": "@@ -209,6 +214,92 @@ public boolean isStarted() {\n             });\n     }\n \n+    /**\n+     * Returns a list of states each representing one scoped worker item.\n+     * <p>\n+     * An empty list will be returned if the processor was not started or no lease items matching the current\n+     *   {@link ChangeFeedProcessor} instance's lease prefix could be found.\n+     *\n+     * @return a list of states each representing one scoped worker item.\n+     */\n+    @Override\n+    public Mono<List<ChangeFeedProcessorState>> getCurrentState() {\n+        List<ChangeFeedProcessorState> earlyResult = new ArrayList<>();\n+\n+        if (this.leaseStoreManager == null || this.feedContextClient == null) {\n+            return Mono.just(earlyResult);\n+        }\n+\n+        return this.leaseStoreManager.getAllLeases()\n+            .flatMap(lease -> {\n+                ChangeFeedOptions options = new ChangeFeedOptions()\n+                    .setMaxItemCount(1)\n+                    .setPartitionKeyRangeId(lease.getLeaseToken())\n+                    .setStartFromBeginning(true)\n+                    .setRequestContinuation(lease.getContinuationToken());\n+\n+                return this.feedContextClient.createDocumentChangeFeedQuery(this.feedContextClient.getContainerClient(), options)\n+                    .take(1)\n+                    .map(feedResponse -> {\n+                        final String pkRangeIdSeparator = \":\";\n+                        final String segmentSeparator = \"#\";\n+                        final String lsnPropertyName = \"_lsn\";\n+                        final String tsPropertyName = \"_ts\";\n+\n+                        String sessionTokenLsn = feedResponse.getSessionToken();\n+                        String parsedSessionToken = sessionTokenLsn.substring(sessionTokenLsn.indexOf(pkRangeIdSeparator));\n+                        String[] segments = parsedSessionToken.split(segmentSeparator);\n+                        String latestLsn = segments[0];\n+\n+                        if (segments.length >= 2) {\n+                            // default to Global LSN\n+                            latestLsn = segments[1];\n+                        }\n+\n+                        ChangeFeedProcessorState changeFeedProcessorState = new ChangeFeedProcessorState()\n+                            .setId(lease.getId())\n+                            .setHostName(lease.getOwner())\n+                            .setLeaseToken(lease.getLeaseToken())\n+                            .setLastUpdate(ZonedDateTime.parse(lease.getTimestamp()).toInstant());\n+\n+\n+                        // An empty list of documents returned means that we are current (zero lag)\n+                        if (feedResponse.getResults() == null || feedResponse.getResults().size() == 0) {\n+                            changeFeedProcessorState.setEstimatedLag(0);\n+                            changeFeedProcessorState.setContinuationToken(latestLsn);\n+\n+                            return changeFeedProcessorState;\n+                        }\n+\n+                        changeFeedProcessorState.setContinuationToken(feedResponse.getResults().get(0).get(lsnPropertyName).asText(null));\n+\n+                        try {\n+                            changeFeedProcessorState.setContinuationTokenTimestamp(Instant.ofEpochMilli(Long.valueOf(\n+                                    feedResponse.getResults().get(0).get(tsPropertyName).asText(\"0\"))));\n+                        } catch (NumberFormatException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad1c44525c9dbd923ffd7d90c125424d469b7d52"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MTY2MzM0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#pullrequestreview-446166334", "createdAt": "2020-07-10T07:03:41Z", "commit": {"oid": "ad1c44525c9dbd923ffd7d90c125424d469b7d52"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNzowMzo0MlrOGvsJ0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNzowMzo0MlrOGvsJ0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1OTY2Ng==", "bodyText": "Again - feel free to ignore for consistency etc. - I am still struggling with Java not having a clear way to distinguish ReadOnlyList in the contract. But form my intuition I would expect it to be clearly documented in the Api doc comments if a method returns an unmodifiable list - so would it make sense to add a comment along tehse lines above? Also wouldn't it make sense to also return an unmodifiable list in the short-cut - when the list is empty) above to be consistent?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452659666", "createdAt": "2020-07-10T07:03:42Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java", "diffHunk": "@@ -209,6 +214,92 @@ public boolean isStarted() {\n             });\n     }\n \n+    /**\n+     * Returns a list of states each representing one scoped worker item.\n+     * <p>\n+     * An empty list will be returned if the processor was not started or no lease items matching the current\n+     *   {@link ChangeFeedProcessor} instance's lease prefix could be found.\n+     *\n+     * @return a list of states each representing one scoped worker item.\n+     */\n+    @Override\n+    public Mono<List<ChangeFeedProcessorState>> getCurrentState() {\n+        List<ChangeFeedProcessorState> earlyResult = new ArrayList<>();\n+\n+        if (this.leaseStoreManager == null || this.feedContextClient == null) {\n+            return Mono.just(earlyResult);\n+        }\n+\n+        return this.leaseStoreManager.getAllLeases()\n+            .flatMap(lease -> {\n+                ChangeFeedOptions options = new ChangeFeedOptions()\n+                    .setMaxItemCount(1)\n+                    .setPartitionKeyRangeId(lease.getLeaseToken())\n+                    .setStartFromBeginning(true)\n+                    .setRequestContinuation(lease.getContinuationToken());\n+\n+                return this.feedContextClient.createDocumentChangeFeedQuery(this.feedContextClient.getContainerClient(), options)\n+                    .take(1)\n+                    .map(feedResponse -> {\n+                        final String pkRangeIdSeparator = \":\";\n+                        final String segmentSeparator = \"#\";\n+                        final String lsnPropertyName = \"_lsn\";\n+                        final String tsPropertyName = \"_ts\";\n+\n+                        String sessionTokenLsn = feedResponse.getSessionToken();\n+                        String parsedSessionToken = sessionTokenLsn.substring(sessionTokenLsn.indexOf(pkRangeIdSeparator));\n+                        String[] segments = parsedSessionToken.split(segmentSeparator);\n+                        String latestLsn = segments[0];\n+\n+                        if (segments.length >= 2) {\n+                            // default to Global LSN\n+                            latestLsn = segments[1];\n+                        }\n+\n+                        ChangeFeedProcessorState changeFeedProcessorState = new ChangeFeedProcessorState()\n+                            .setId(lease.getId())\n+                            .setHostName(lease.getOwner())\n+                            .setLeaseToken(lease.getLeaseToken())\n+                            .setLastUpdate(ZonedDateTime.parse(lease.getTimestamp()).toInstant());\n+\n+\n+                        // An empty list of documents returned means that we are current (zero lag)\n+                        if (feedResponse.getResults() == null || feedResponse.getResults().size() == 0) {\n+                            changeFeedProcessorState.setEstimatedLag(0);\n+                            changeFeedProcessorState.setContinuationToken(latestLsn);\n+\n+                            return changeFeedProcessorState;\n+                        }\n+\n+                        changeFeedProcessorState.setContinuationToken(feedResponse.getResults().get(0).get(lsnPropertyName).asText(null));\n+\n+                        try {\n+                            changeFeedProcessorState.setContinuationTokenTimestamp(Instant.ofEpochMilli(Long.valueOf(\n+                                    feedResponse.getResults().get(0).get(tsPropertyName).asText(\"0\"))));\n+                        } catch (NumberFormatException ex) {\n+                            logger.warn(\"Unexpected Cosmos _ts found\", ex);\n+                            changeFeedProcessorState.setContinuationTokenTimestamp(null);\n+                        }\n+\n+                        Integer currentLsn = 0;\n+                        Integer estimatedLag = 0;\n+                        try {\n+                            currentLsn = Integer.valueOf(feedResponse.getResults().get(0).get(lsnPropertyName).asText(\"0\"));\n+                            estimatedLag = Integer.valueOf(latestLsn);\n+                            estimatedLag = estimatedLag - currentLsn + 1;\n+                            changeFeedProcessorState.setEstimatedLag(estimatedLag);\n+                        } catch (NumberFormatException ex) {\n+                            logger.warn(\"Unexpected Cosmos LSN found\", ex);\n+                            changeFeedProcessorState.setEstimatedLag(-1);\n+                        }\n+\n+                        return changeFeedProcessorState;\n+                    });\n+            })\n+            .collectList()\n+            .map(Collections::unmodifiableList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad1c44525c9dbd923ffd7d90c125424d469b7d52"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MTY2NzIx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#pullrequestreview-446166721", "createdAt": "2020-07-10T07:04:20Z", "commit": {"oid": "ad1c44525c9dbd923ffd7d90c125424d469b7d52"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNzowNDoyMFrOGvsLHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNzowNDoyMFrOGvsLHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1OTk5Ng==", "bodyText": "Nice - thanks for taking care of this :-)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452659996", "createdAt": "2020-07-10T07:04:20Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/Beta.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad1c44525c9dbd923ffd7d90c125424d469b7d52"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NTA0OTE5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#pullrequestreview-446504919", "createdAt": "2020-07-10T15:41:51Z", "commit": {"oid": "ad1c44525c9dbd923ffd7d90c125424d469b7d52"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTo0MTo1MVrOGv8N1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTo0MTo1MVrOGv8N1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyMjgzNg==", "bodyText": "Capturing the comment from above...\nThis would need to be of type FeedRange soon. https://github.com/FabianMeiswinkel/azure-sdk-for-java/blob/master/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/FeedRange.java\nI think we have 3 Options:\nKeep it String here, to avoid breaking change use the FeedRange.toSjon as the value and expect customers to do the transformations upstream\nMake a breaking change to this preview contract when I merge the FeedRange changes - would probably be good to set expectations with Walmart that we expect some breaking changes here\nAdd FeedRange as an additional field - make Id the FeedRange.toJson() - this way it doesn't break and the Id might not be very useful anymore but also doesn't really cause harm\nI think 3) is an acceptable solution - le me know whether you agree/disagree", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452922836", "createdAt": "2020-07-10T15:41:51Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java", "diffHunk": "@@ -0,0 +1,172 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.ChangeFeedProcessor;\n+import com.azure.cosmos.util.Beta;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Specifies the {@link ChangeFeedProcessor} state for a particular lease/worker.\n+ */\n+@Beta(Beta.SinceVersion.V4_2_0)\n+public class ChangeFeedProcessorState {\n+    private String id;\n+    private String leaseToken;\n+    private String hostName;\n+    private Instant lastUpdate;\n+    private String continuationToken;\n+    private Instant continuationTokenTimestamp;\n+    private int estimatedLag;\n+\n+    /**\n+     * Gets the ID of the lease item representing the persistent state of a change feed processor worker.\n+     *\n+     * @return the ID of the lease item.\n+     */\n+    public String getId() {\n+        return this.id;\n+    }\n+\n+    /**\n+     * Sets the ID of the lease item representing the persistent state of a chenge feed processor worker.\n+     *\n+     * @param id a unique string.\n+     * @return the current ChangeFeedProcessorState instance.\n+     */\n+    public ChangeFeedProcessorState setId(String id) {\n+        this.id = id;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the token of the lease item representing the persistent state of a change feed processor worker.\n+     * <p>\n+     * A lease token is a unique identifier representing a specific scope that a CFP worker will operate on.\n+     *\n+     * @return a string token uniquely representing the scope for one worker unit.\n+     */\n+    public String getLeaseToken() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad1c44525c9dbd923ffd7d90c125424d469b7d52"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "995efd2c40c18208fd769eaf31d322f402993d5e", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/995efd2c40c18208fd769eaf31d322f402993d5e", "committedDate": "2020-07-10T18:24:05Z", "message": "Addressing PR related feedback."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NjExNDgw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#pullrequestreview-446611480", "createdAt": "2020-07-10T18:28:45Z", "commit": {"oid": "995efd2c40c18208fd769eaf31d322f402993d5e"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxODoyODo0NVrOGwBQtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxODozMzowMlrOGwBYrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNTQ5NQ==", "bodyText": "String.split(.) uses regex (CPU intensive), Use StringUtils.split instead", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r453005495", "createdAt": "2020-07-10T18:28:45Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java", "diffHunk": "@@ -162,13 +172,10 @@ public boolean isStarted() {\n                 return this.feedContextClient.createDocumentChangeFeedQuery(this.feedContextClient.getContainerClient(), options)\n                     .take(1)\n                     .map(feedResponse -> {\n-                        final String pkRangeIdSeparator = \":\";\n-                        final String segmentSeparator = \"#\";\n-                        final String lsnPropertyName = \"_lsn\";\n                         String ownerValue = lease.getOwner();\n                         String sessionTokenLsn = feedResponse.getSessionToken();\n-                        String parsedSessionToken = sessionTokenLsn.substring(sessionTokenLsn.indexOf(pkRangeIdSeparator));\n-                        String[] segments = parsedSessionToken.split(segmentSeparator);\n+                        String parsedSessionToken = sessionTokenLsn.substring(sessionTokenLsn.indexOf(PK_RANGE_ID_SEPARATOR));\n+                        String[] segments = parsedSessionToken.split(SEGMENT_SEPARATOR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "995efd2c40c18208fd769eaf31d322f402993d5e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNTkxMg==", "bodyText": "String.split uses regex underneath which is cpu intensive.\nuse StringUtils.split instead.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r453005912", "createdAt": "2020-07-10T18:29:37Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java", "diffHunk": "@@ -209,6 +216,87 @@ public boolean isStarted() {\n             });\n     }\n \n+    /**\n+     * Returns a list of states each representing one scoped worker item.\n+     * <p>\n+     * An empty list will be returned if the processor was not started or no lease items matching the current\n+     *   {@link ChangeFeedProcessor} instance's lease prefix could be found.\n+     *\n+     * @return a list of states each representing one scoped worker item.\n+     */\n+    @Override\n+    public Mono<List<ChangeFeedProcessorState>> getCurrentState() {\n+        List<ChangeFeedProcessorState> earlyResult = new ArrayList<>();\n+\n+        if (this.leaseStoreManager == null || this.feedContextClient == null) {\n+            return Mono.just(Collections.unmodifiableList(earlyResult));\n+        }\n+\n+        return this.leaseStoreManager.getAllLeases()\n+            .flatMap(lease -> {\n+                ChangeFeedOptions options = new ChangeFeedOptions()\n+                    .setMaxItemCount(1)\n+                    .setPartitionKeyRangeId(lease.getLeaseToken())\n+                    .setStartFromBeginning(true)\n+                    .setRequestContinuation(lease.getContinuationToken());\n+\n+                return this.feedContextClient.createDocumentChangeFeedQuery(this.feedContextClient.getContainerClient(), options)\n+                    .take(1)\n+                    .map(feedResponse -> {\n+                        String sessionTokenLsn = feedResponse.getSessionToken();\n+                        String parsedSessionToken = sessionTokenLsn.substring(sessionTokenLsn.indexOf(PK_RANGE_ID_SEPARATOR));\n+                        String[] segments = parsedSessionToken.split(SEGMENT_SEPARATOR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "995efd2c40c18208fd769eaf31d322f402993d5e"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNjIxMA==", "bodyText": "also java compiler may inline these. so shouldn't be a perf hit.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r453006210", "createdAt": "2020-07-10T18:30:13Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java", "diffHunk": "@@ -209,6 +214,92 @@ public boolean isStarted() {\n             });\n     }\n \n+    /**\n+     * Returns a list of states each representing one scoped worker item.\n+     * <p>\n+     * An empty list will be returned if the processor was not started or no lease items matching the current\n+     *   {@link ChangeFeedProcessor} instance's lease prefix could be found.\n+     *\n+     * @return a list of states each representing one scoped worker item.\n+     */\n+    @Override\n+    public Mono<List<ChangeFeedProcessorState>> getCurrentState() {\n+        List<ChangeFeedProcessorState> earlyResult = new ArrayList<>();\n+\n+        if (this.leaseStoreManager == null || this.feedContextClient == null) {\n+            return Mono.just(earlyResult);\n+        }\n+\n+        return this.leaseStoreManager.getAllLeases()\n+            .flatMap(lease -> {\n+                ChangeFeedOptions options = new ChangeFeedOptions()\n+                    .setMaxItemCount(1)\n+                    .setPartitionKeyRangeId(lease.getLeaseToken())\n+                    .setStartFromBeginning(true)\n+                    .setRequestContinuation(lease.getContinuationToken());\n+\n+                return this.feedContextClient.createDocumentChangeFeedQuery(this.feedContextClient.getContainerClient(), options)\n+                    .take(1)\n+                    .map(feedResponse -> {\n+                        final String pkRangeIdSeparator = \":\";\n+                        final String segmentSeparator = \"#\";\n+                        final String lsnPropertyName = \"_lsn\";\n+                        final String tsPropertyName = \"_ts\";\n+\n+                        String sessionTokenLsn = feedResponse.getSessionToken();\n+                        String parsedSessionToken = sessionTokenLsn.substring(sessionTokenLsn.indexOf(pkRangeIdSeparator));\n+                        String[] segments = parsedSessionToken.split(segmentSeparator);\n+                        String latestLsn = segments[0];\n+\n+                        if (segments.length >= 2) {\n+                            // default to Global LSN\n+                            latestLsn = segments[1];\n+                        }\n+\n+                        ChangeFeedProcessorState changeFeedProcessorState = new ChangeFeedProcessorState()\n+                            .setId(lease.getId())\n+                            .setHostName(lease.getOwner())\n+                            .setLeaseToken(lease.getLeaseToken())\n+                            .setLastUpdate(ZonedDateTime.parse(lease.getTimestamp()).toInstant());\n+\n+\n+                        // An empty list of documents returned means that we are current (zero lag)\n+                        if (feedResponse.getResults() == null || feedResponse.getResults().size() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1Njg1Ng=="}, "originalCommit": {"oid": "ad1c44525c9dbd923ffd7d90c125424d469b7d52"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNjk4Nw==", "bodyText": "getLastUpdate vs getLastUpdateTime ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r453006987", "createdAt": "2020-07-10T18:31:51Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java", "diffHunk": "@@ -0,0 +1,172 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.ChangeFeedProcessor;\n+import com.azure.cosmos.util.Beta;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Specifies the {@link ChangeFeedProcessor} state for a particular lease/worker.\n+ */\n+@Beta(Beta.SinceVersion.V4_2_0)\n+public class ChangeFeedProcessorState {\n+    private String id;\n+    private String leaseToken;\n+    private String hostName;\n+    private Instant lastUpdate;\n+    private String continuationToken;\n+    private Instant continuationTokenTimestamp;\n+    private int estimatedLag;\n+\n+    /**\n+     * Gets the ID of the lease item representing the persistent state of a change feed processor worker.\n+     *\n+     * @return the ID of the lease item.\n+     */\n+    public String getId() {\n+        return this.id;\n+    }\n+\n+    /**\n+     * Sets the ID of the lease item representing the persistent state of a chenge feed processor worker.\n+     *\n+     * @param id a unique string.\n+     * @return the current ChangeFeedProcessorState instance.\n+     */\n+    public ChangeFeedProcessorState setId(String id) {\n+        this.id = id;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the token of the lease item representing the persistent state of a change feed processor worker.\n+     * <p>\n+     * A lease token is a unique identifier representing a specific scope that a CFP worker will operate on.\n+     *\n+     * @return a string token uniquely representing the scope for one worker unit.\n+     */\n+    public String getLeaseToken() {\n+        return this.leaseToken;\n+    }\n+\n+    /**\n+     * Sets the token of the lease item representing the persistent state of a change feed processor worker.\n+     * <p>\n+     * A lease token is a unique identifier representing a specific scope that a CFP worker will operate on.\n+     *\n+     * @param leaseToken a unique string representing a specific scope that a CFP worker will operate on.\n+     * @return the current ChangeFeedProcessorState instance.\n+     */\n+    public ChangeFeedProcessorState setLeaseToken(String leaseToken) {\n+        this.leaseToken = leaseToken;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the name of the host which operates on the lease item.\n+     * <p>\n+     * When using multiple CFP instances distributing the work for a given feed container, each host must have a unique name.\n+     *\n+     * @return the host name that has ownership of this lease item or null if no host is currently operating on this lease.\n+     */\n+    public String getHostName() {\n+        return this.hostName;\n+    }\n+\n+    /**\n+     * Sets the name of the host which operates on the lease item.\n+     * <p>\n+     * When using multiple CFP instances distributing the work for a given feed container, each host must have a unique name.\n+     *\n+     * @param hostName the host name that has ownership of this lease item.\n+     * @return the current ChangeFeedProcessorState instance.\n+     */\n+    public ChangeFeedProcessorState setHostName(String hostName) {\n+        this.hostName = hostName;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the time when the lease item was last updated.\n+     *\n+     * @return time when the lease item was last updated.\n+     */\n+    public Instant getLastUpdate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "995efd2c40c18208fd769eaf31d322f402993d5e"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNzA0Mw==", "bodyText": "ditto", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r453007043", "createdAt": "2020-07-10T18:31:57Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java", "diffHunk": "@@ -0,0 +1,172 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.ChangeFeedProcessor;\n+import com.azure.cosmos.util.Beta;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Specifies the {@link ChangeFeedProcessor} state for a particular lease/worker.\n+ */\n+@Beta(Beta.SinceVersion.V4_2_0)\n+public class ChangeFeedProcessorState {\n+    private String id;\n+    private String leaseToken;\n+    private String hostName;\n+    private Instant lastUpdate;\n+    private String continuationToken;\n+    private Instant continuationTokenTimestamp;\n+    private int estimatedLag;\n+\n+    /**\n+     * Gets the ID of the lease item representing the persistent state of a change feed processor worker.\n+     *\n+     * @return the ID of the lease item.\n+     */\n+    public String getId() {\n+        return this.id;\n+    }\n+\n+    /**\n+     * Sets the ID of the lease item representing the persistent state of a chenge feed processor worker.\n+     *\n+     * @param id a unique string.\n+     * @return the current ChangeFeedProcessorState instance.\n+     */\n+    public ChangeFeedProcessorState setId(String id) {\n+        this.id = id;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the token of the lease item representing the persistent state of a change feed processor worker.\n+     * <p>\n+     * A lease token is a unique identifier representing a specific scope that a CFP worker will operate on.\n+     *\n+     * @return a string token uniquely representing the scope for one worker unit.\n+     */\n+    public String getLeaseToken() {\n+        return this.leaseToken;\n+    }\n+\n+    /**\n+     * Sets the token of the lease item representing the persistent state of a change feed processor worker.\n+     * <p>\n+     * A lease token is a unique identifier representing a specific scope that a CFP worker will operate on.\n+     *\n+     * @param leaseToken a unique string representing a specific scope that a CFP worker will operate on.\n+     * @return the current ChangeFeedProcessorState instance.\n+     */\n+    public ChangeFeedProcessorState setLeaseToken(String leaseToken) {\n+        this.leaseToken = leaseToken;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the name of the host which operates on the lease item.\n+     * <p>\n+     * When using multiple CFP instances distributing the work for a given feed container, each host must have a unique name.\n+     *\n+     * @return the host name that has ownership of this lease item or null if no host is currently operating on this lease.\n+     */\n+    public String getHostName() {\n+        return this.hostName;\n+    }\n+\n+    /**\n+     * Sets the name of the host which operates on the lease item.\n+     * <p>\n+     * When using multiple CFP instances distributing the work for a given feed container, each host must have a unique name.\n+     *\n+     * @param hostName the host name that has ownership of this lease item.\n+     * @return the current ChangeFeedProcessorState instance.\n+     */\n+    public ChangeFeedProcessorState setHostName(String hostName) {\n+        this.hostName = hostName;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the time when the lease item was last updated.\n+     *\n+     * @return time when the lease item was last updated.\n+     */\n+    public Instant getLastUpdate() {\n+        return this.lastUpdate;\n+    }\n+\n+    /**\n+     * Sets time when the lease item was last updated.\n+     *\n+     * @param lastUpdate a unique string.\n+     * @return the current ChangeFeedProcessorState instance.\n+     */\n+    public ChangeFeedProcessorState setLastUpdate(Instant lastUpdate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "995efd2c40c18208fd769eaf31d322f402993d5e"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNzUzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        assertThat(totalLag == FEED_COUNT).as(\"Change Feed Processor estimated total lag\").isTrue();\n          \n          \n            \n            assertThat(totalLag).equalTo(FEED_COUNT).as(\"...\")", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r453007532", "createdAt": "2020-07-10T18:33:02Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java", "diffHunk": "@@ -277,6 +278,91 @@ public void getEstimatedLag() throws InterruptedException {\n         }\n     }\n \n+    @Test(groups = { \"emulator\" }, timeOut = 50 * CHANGE_FEED_PROCESSOR_TIMEOUT)\n+    public void getCurrentState() throws InterruptedException {\n+        CosmosAsyncContainer createdFeedCollection = createFeedCollection(FEED_COLLECTION_THROUGHPUT);\n+        CosmosAsyncContainer createdLeaseCollection = createLeaseCollection(LEASE_COLLECTION_THROUGHPUT);\n+\n+        try {\n+            List<InternalObjectNode> createdDocuments = new ArrayList<>();\n+            Map<String, JsonNode> receivedDocuments = new ConcurrentHashMap<>();\n+            ChangeFeedProcessor changeFeedProcessor = new ChangeFeedProcessorBuilder()\n+                .hostName(hostName)\n+                .handleChanges((List<JsonNode> docs) -> {\n+                    ChangeFeedProcessorTest.log.info(\"START processing from thread {}\", Thread.currentThread().getId());\n+                    for (JsonNode item : docs) {\n+                        processItem(item, receivedDocuments);\n+                    }\n+                    ChangeFeedProcessorTest.log.info(\"END processing from thread {}\", Thread.currentThread().getId());\n+                })\n+                .feedContainer(createdFeedCollection)\n+                .leaseContainer(createdLeaseCollection)\n+                .buildChangeFeedProcessor();\n+\n+            try {\n+                changeFeedProcessor.start().subscribeOn(Schedulers.elastic())\n+                    .timeout(Duration.ofMillis(2 * CHANGE_FEED_PROCESSOR_TIMEOUT))\n+                    .then(Mono.just(changeFeedProcessor)\n+                        .delayElement(Duration.ofMillis(2 * CHANGE_FEED_PROCESSOR_TIMEOUT))\n+                        .flatMap(value -> changeFeedProcessor.stop()\n+                            .subscribeOn(Schedulers.elastic())\n+                            .timeout(Duration.ofMillis(2 * CHANGE_FEED_PROCESSOR_TIMEOUT))\n+                        ))\n+                    .subscribe();\n+            } catch (Exception ex) {\n+                log.error(\"Change feed processor did not start and stopped in the expected time\", ex);\n+                throw ex;\n+            }\n+\n+            Thread.sleep(4 * CHANGE_FEED_PROCESSOR_TIMEOUT);\n+\n+            // Test for \"zero\" lag\n+            List<ChangeFeedProcessorState> cfpCurrentState = changeFeedProcessor.getCurrentState()\n+                .map(state -> {\n+                    try {\n+                        log.info(OBJECT_MAPPER.writeValueAsString(state));\n+                    } catch (JsonProcessingException ex) {\n+                        log.error(\"Unexpected\", ex);\n+                    }\n+                    return state;\n+                }).block();\n+\n+            int totalLag = 0;\n+            for (ChangeFeedProcessorState item : cfpCurrentState) {\n+                totalLag += item.getEstimatedLag();\n+            }\n+\n+            assertThat(totalLag == 0).as(\"Change Feed Processor estimated total lag at start\").isTrue();\n+\n+            // Test for \"FEED_COUNT total lag\n+            setupReadFeedDocuments(createdDocuments, receivedDocuments, createdFeedCollection, FEED_COUNT);\n+\n+            cfpCurrentState = changeFeedProcessor.getCurrentState()\n+                .map(state -> {\n+                    try {\n+                        log.info(OBJECT_MAPPER.writeValueAsString(state));\n+                    } catch (JsonProcessingException ex) {\n+                        log.error(\"Unexpected\", ex);\n+                    }\n+                    return state;\n+                }).block();\n+\n+            totalLag = 0;\n+            for (ChangeFeedProcessorState item : cfpCurrentState) {\n+                totalLag += item.getEstimatedLag();\n+            }\n+\n+            assertThat(totalLag == FEED_COUNT).as(\"Change Feed Processor estimated total lag\").isTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "995efd2c40c18208fd769eaf31d322f402993d5e"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NjE5MDU2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#pullrequestreview-446619056", "createdAt": "2020-07-10T18:34:38Z", "commit": {"oid": "995efd2c40c18208fd769eaf31d322f402993d5e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f664c5ef775520771f6e63aa759a7aa75c7eb27", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2f664c5ef775520771f6e63aa759a7aa75c7eb27", "committedDate": "2020-07-10T18:38:28Z", "message": "use StringUtils.split() instead of regular split."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e139effc6464808424c46f03849261cbde95b76", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9e139effc6464808424c46f03849261cbde95b76", "committedDate": "2020-07-10T18:49:16Z", "message": "Address PR feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8feb2952d5059824a7da54c87e8909a88e116a3", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d8feb2952d5059824a7da54c87e8909a88e116a3", "committedDate": "2020-07-10T19:06:07Z", "message": "lastUpdate -> lastUpdatedTime"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NjY3NTI3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#pullrequestreview-446667527", "createdAt": "2020-07-10T19:58:33Z", "commit": {"oid": "d8feb2952d5059824a7da54c87e8909a88e116a3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0780af7ed99bf099e3cd3d0276cffae3a01ccbd6", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0780af7ed99bf099e3cd3d0276cffae3a01ccbd6", "committedDate": "2020-07-10T23:33:51Z", "message": "Merge branch 'master' into milismsft-cfp-state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43d31725e1884ead069fed2af4406e18fc1c5557", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/43d31725e1884ead069fed2af4406e18fc1c5557", "committedDate": "2020-07-14T07:22:40Z", "message": "Update the CFP estimator to also capture the latest token (see session token) which represent the newest created or updated item."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MTQxNzI5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#pullrequestreview-455141729", "createdAt": "2020-07-24T19:41:16Z", "commit": {"oid": "43d31725e1884ead069fed2af4406e18fc1c5557"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOTo0MToxNlrOG27nEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOTo0MToxNlrOG27nEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1Mjk0NQ==", "bodyText": "_ts is implementation detail. And it might get impacted by the clock skews on service side.\nIts better for any application to not take dependency on this concept/value.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r460252945", "createdAt": "2020-07-24T19:41:16Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java", "diffHunk": "@@ -0,0 +1,193 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.ChangeFeedProcessor;\n+import com.azure.cosmos.util.Beta;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Specifies the {@link ChangeFeedProcessor} state for a particular lease/worker.\n+ */\n+@Beta(Beta.SinceVersion.V4_2_0)\n+public class ChangeFeedProcessorState {\n+    private String id;\n+    private String leaseToken;\n+    private String hostName;\n+    private Instant lastUpdatedTime;\n+    private String continuationToken;\n+    private Instant continuationTokenTimestamp;\n+    private String latestToken;\n+    private int estimatedLag;\n+\n+    /**\n+     * Gets the ID of the lease item representing the persistent state of a change feed processor worker.\n+     *\n+     * @return the ID of the lease item.\n+     */\n+    public String getId() {\n+        return this.id;\n+    }\n+\n+    /**\n+     * Sets the ID of the lease item representing the persistent state of a chenge feed processor worker.\n+     *\n+     * @param id a unique string.\n+     * @return the current ChangeFeedProcessorState instance.\n+     */\n+    public ChangeFeedProcessorState setId(String id) {\n+        this.id = id;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the token of the lease item representing the persistent state of a change feed processor worker.\n+     * <p>\n+     * A lease token is a unique identifier representing a specific scope that a CFP worker will operate on.\n+     *\n+     * @return a string token uniquely representing the scope for one worker unit.\n+     */\n+    public String getLeaseToken() {\n+        return this.leaseToken;\n+    }\n+\n+    /**\n+     * Sets the token of the lease item representing the persistent state of a change feed processor worker.\n+     * <p>\n+     * A lease token is a unique identifier representing a specific scope that a CFP worker will operate on.\n+     *\n+     * @param leaseToken a unique string representing a specific scope that a CFP worker will operate on.\n+     * @return the current ChangeFeedProcessorState instance.\n+     */\n+    public ChangeFeedProcessorState setLeaseToken(String leaseToken) {\n+        this.leaseToken = leaseToken;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the name of the host which operates on the lease item.\n+     * <p>\n+     * When using multiple CFP instances distributing the work for a given feed container, each host must have a unique name.\n+     *\n+     * @return the host name that has ownership of this lease item or null if no host is currently operating on this lease.\n+     */\n+    public String getHostName() {\n+        return this.hostName;\n+    }\n+\n+    /**\n+     * Sets the name of the host which operates on the lease item.\n+     * <p>\n+     * When using multiple CFP instances distributing the work for a given feed container, each host must have a unique name.\n+     *\n+     * @param hostName the host name that has ownership of this lease item.\n+     * @return the current ChangeFeedProcessorState instance.\n+     */\n+    public ChangeFeedProcessorState setHostName(String hostName) {\n+        this.hostName = hostName;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the time when the lease item was last updated.\n+     *\n+     * @return time when the lease item was last updated.\n+     */\n+    public Instant getLastUpdatedTime() {\n+        return this.lastUpdatedTime;\n+    }\n+\n+    /**\n+     * Sets time when the lease item was last updated.\n+     *\n+     * @param lastUpdatedTime a unique string.\n+     * @return the current ChangeFeedProcessorState instance.\n+     */\n+    public ChangeFeedProcessorState setLastUpdatedTime(Instant lastUpdatedTime) {\n+        this.lastUpdatedTime = lastUpdatedTime;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets a marker representing the last item that was processed.\n+     *\n+     * @return the marker representing the last item that was processed.\n+     */\n+    public String getContinuationToken() {\n+        return this.continuationToken;\n+    }\n+\n+    /**\n+     * Sets a marker representing the last item that was processed.\n+     *\n+     * @param continuationToken the marker representing the last item that was processed.\n+     * @return the current ChangeFeedProcessorState instance.\n+     */\n+    public ChangeFeedProcessorState setContinuationToken(String continuationToken) {\n+        this.continuationToken = continuationToken;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the system time for the last item that was processed.\n+     *\n+     * @return the system time for the last item that was processed.\n+     */\n+    public Instant getContinuationTokenTimestamp() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43d31725e1884ead069fed2af4406e18fc1c5557"}, "originalPosition": 138}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MTQyMDEx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#pullrequestreview-455142011", "createdAt": "2020-07-24T19:41:49Z", "commit": {"oid": "43d31725e1884ead069fed2af4406e18fc1c5557"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76aff813bdefabd0e3e3b4aa95bb3e00d5685eb5", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/76aff813bdefabd0e3e3b4aa95bb3e00d5685eb5", "committedDate": "2020-07-27T19:09:54Z", "message": "remove the system time from the state being reported"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9250d23af5b6cd4e366d25f5d62abdeeed43e86d", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9250d23af5b6cd4e366d25f5d62abdeeed43e86d", "committedDate": "2020-08-10T15:28:05Z", "message": "Merge branch 'master' into milismsft-cfp-state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82369865399dcfd20676164bc7f7bfe5c427cbfd", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/82369865399dcfd20676164bc7f7bfe5c427cbfd", "committedDate": "2020-08-10T15:56:04Z", "message": "Updates following the API review."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6c9743c686612cdb1ef39865df46f9ef3516a2e", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e6c9743c686612cdb1ef39865df46f9ef3516a2e", "committedDate": "2020-08-19T04:37:02Z", "message": "Merge branch 'master' into milismsft-cfp-state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bb68ad50c7f4f5a96a7c6874a42095bd20519ad", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8bb68ad50c7f4f5a96a7c6874a42095bd20519ad", "committedDate": "2020-08-21T16:34:25Z", "message": "Merge remote-tracking branch 'upstream/master' into milismsft-cfp-state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf610e52f846e0205e098446d683aaf03ee60389", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bf610e52f846e0205e098446d683aaf03ee60389", "committedDate": "2020-08-29T07:52:30Z", "message": "Merge branch 'master' into milismsft-cfp-state\n\n# Conflicts:\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/Beta.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd8acea2942968c9a44d91d244542bb931d6db9f", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fd8acea2942968c9a44d91d244542bb931d6db9f", "committedDate": "2020-09-08T18:17:07Z", "message": "Merge branch 'master' into milismsft-cfp-state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8974114797230f5efb0027bef7365eee0595cfd3", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8974114797230f5efb0027bef7365eee0595cfd3", "committedDate": "2020-09-10T23:30:30Z", "message": "Address bug/issues described in https://github.com/Azure/azure-sdk-for-java/issues/13329"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d048d7375c271578f9cebc3c6ecbbdb989af74c", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1d048d7375c271578f9cebc3c6ecbbdb989af74c", "committedDate": "2020-09-11T17:23:09Z", "message": "null pointer related fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "366cfdf3e3f3b81345586f60a1cb896b032ab3b3", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/366cfdf3e3f3b81345586f60a1cb896b032ab3b3", "committedDate": "2020-09-15T17:15:11Z", "message": "Merge branch 'master' into milismsft-cfp-state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2921414a1ef03e3d66ed749f95e8df5736aa0345", "author": {"user": {"login": "milismsft", "name": "Milis"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2921414a1ef03e3d66ed749f95e8df5736aa0345", "committedDate": "2020-09-17T16:55:40Z", "message": "Merge branch 'master' into milismsft-cfp-state"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2662, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}