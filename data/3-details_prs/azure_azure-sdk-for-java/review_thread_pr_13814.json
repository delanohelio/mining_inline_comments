{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzNjE2NzY3", "number": 13814, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDoxOTo1MlrOEVkCRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDozMDo0MVrOEVkP5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDQ1OTU5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/microsoft-azure-cosmos/src/main/java/com/azure/data/cosmos/internal/ClientRetryPolicy.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDoxOTo1MlrOG8ZLIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDozODoyMFrOG8Zvzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4MDE5NA==", "bodyText": "If you send another iteration, can we please use variable itself in logger for canUseMultipleWriteLocations , instead of true and false", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13814#discussion_r465980194", "createdAt": "2020-08-05T20:19:52Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/microsoft-azure-cosmos/src/main/java/com/azure/data/cosmos/internal/ClientRetryPolicy.java", "diffHunk": "@@ -127,17 +128,22 @@ private ShouldRetryResult shouldRetryOnSessionNotAvailable() {\n                 if (this.sessionTokenRetryCount > endpoints.size()) {\n                     // When use multiple write locations is true and the request has been tried\n                     // on all locations, then don't retry the request\n+\n+                    logger.warn(\"SessionNotAvailable: canUseMultipleWriteLocations = true, sessionTokenRetryCount = {}, retried all locations. retry exhausted!\", sessionTokenRetryCount);\n                     return ShouldRetryResult.noRetry();\n                 } else {\n+                    logger.info(\"SessionNotAvailable: canUseMultipleWriteLocations = true, sessionTokenRetryCount = {}, going to retry on next location\", sessionTokenRetryCount);\n                     this.retryContext = new RetryContext(this.sessionTokenRetryCount - 1, this.sessionTokenRetryCount > 1);\n                     return ShouldRetryResult.retryAfter(Duration.ZERO);\n                 }\n             } else {\n                 if (this.sessionTokenRetryCount > 1) {\n                     // When cannot use multiple write locations, then don't retry the request if\n                     // we have already tried this request on the write location\n+                    logger.warn(\"SessionNotAvailable: canUseMultipleWriteLocations = false, sessionTokenRetryCount = {}, no more retries\", sessionTokenRetryCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54cf0fcc7f5a6e2dee806b7c0bc4fa0cc3dfeee3"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4NTE5NA==", "bodyText": "what's the advantage? in the if branch the value is deterministic", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13814#discussion_r465985194", "createdAt": "2020-08-05T20:29:32Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/microsoft-azure-cosmos/src/main/java/com/azure/data/cosmos/internal/ClientRetryPolicy.java", "diffHunk": "@@ -127,17 +128,22 @@ private ShouldRetryResult shouldRetryOnSessionNotAvailable() {\n                 if (this.sessionTokenRetryCount > endpoints.size()) {\n                     // When use multiple write locations is true and the request has been tried\n                     // on all locations, then don't retry the request\n+\n+                    logger.warn(\"SessionNotAvailable: canUseMultipleWriteLocations = true, sessionTokenRetryCount = {}, retried all locations. retry exhausted!\", sessionTokenRetryCount);\n                     return ShouldRetryResult.noRetry();\n                 } else {\n+                    logger.info(\"SessionNotAvailable: canUseMultipleWriteLocations = true, sessionTokenRetryCount = {}, going to retry on next location\", sessionTokenRetryCount);\n                     this.retryContext = new RetryContext(this.sessionTokenRetryCount - 1, this.sessionTokenRetryCount > 1);\n                     return ShouldRetryResult.retryAfter(Duration.ZERO);\n                 }\n             } else {\n                 if (this.sessionTokenRetryCount > 1) {\n                     // When cannot use multiple write locations, then don't retry the request if\n                     // we have already tried this request on the write location\n+                    logger.warn(\"SessionNotAvailable: canUseMultipleWriteLocations = false, sessionTokenRetryCount = {}, no more retries\", sessionTokenRetryCount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4MDE5NA=="}, "originalCommit": {"oid": "54cf0fcc7f5a6e2dee806b7c0bc4fa0cc3dfeee3"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4NTcxOA==", "bodyText": "Good point @simplynaveen20", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13814#discussion_r465985718", "createdAt": "2020-08-05T20:30:28Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/microsoft-azure-cosmos/src/main/java/com/azure/data/cosmos/internal/ClientRetryPolicy.java", "diffHunk": "@@ -127,17 +128,22 @@ private ShouldRetryResult shouldRetryOnSessionNotAvailable() {\n                 if (this.sessionTokenRetryCount > endpoints.size()) {\n                     // When use multiple write locations is true and the request has been tried\n                     // on all locations, then don't retry the request\n+\n+                    logger.warn(\"SessionNotAvailable: canUseMultipleWriteLocations = true, sessionTokenRetryCount = {}, retried all locations. retry exhausted!\", sessionTokenRetryCount);\n                     return ShouldRetryResult.noRetry();\n                 } else {\n+                    logger.info(\"SessionNotAvailable: canUseMultipleWriteLocations = true, sessionTokenRetryCount = {}, going to retry on next location\", sessionTokenRetryCount);\n                     this.retryContext = new RetryContext(this.sessionTokenRetryCount - 1, this.sessionTokenRetryCount > 1);\n                     return ShouldRetryResult.retryAfter(Duration.ZERO);\n                 }\n             } else {\n                 if (this.sessionTokenRetryCount > 1) {\n                     // When cannot use multiple write locations, then don't retry the request if\n                     // we have already tried this request on the write location\n+                    logger.warn(\"SessionNotAvailable: canUseMultipleWriteLocations = false, sessionTokenRetryCount = {}, no more retries\", sessionTokenRetryCount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4MDE5NA=="}, "originalCommit": {"oid": "54cf0fcc7f5a6e2dee806b7c0bc4fa0cc3dfeee3"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4OTU4Mw==", "bodyText": "intellj gives a recommendation in general to use\nif (flag) {\n  func(true)\n}\ninstead of\nif (flag) {\n  func(flag)\n}\nthat's why I am not using a variable here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13814#discussion_r465989583", "createdAt": "2020-08-05T20:38:20Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/microsoft-azure-cosmos/src/main/java/com/azure/data/cosmos/internal/ClientRetryPolicy.java", "diffHunk": "@@ -127,17 +128,22 @@ private ShouldRetryResult shouldRetryOnSessionNotAvailable() {\n                 if (this.sessionTokenRetryCount > endpoints.size()) {\n                     // When use multiple write locations is true and the request has been tried\n                     // on all locations, then don't retry the request\n+\n+                    logger.warn(\"SessionNotAvailable: canUseMultipleWriteLocations = true, sessionTokenRetryCount = {}, retried all locations. retry exhausted!\", sessionTokenRetryCount);\n                     return ShouldRetryResult.noRetry();\n                 } else {\n+                    logger.info(\"SessionNotAvailable: canUseMultipleWriteLocations = true, sessionTokenRetryCount = {}, going to retry on next location\", sessionTokenRetryCount);\n                     this.retryContext = new RetryContext(this.sessionTokenRetryCount - 1, this.sessionTokenRetryCount > 1);\n                     return ShouldRetryResult.retryAfter(Duration.ZERO);\n                 }\n             } else {\n                 if (this.sessionTokenRetryCount > 1) {\n                     // When cannot use multiple write locations, then don't retry the request if\n                     // we have already tried this request on the write location\n+                    logger.warn(\"SessionNotAvailable: canUseMultipleWriteLocations = false, sessionTokenRetryCount = {}, no more retries\", sessionTokenRetryCount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4MDE5NA=="}, "originalCommit": {"oid": "54cf0fcc7f5a6e2dee806b7c0bc4fa0cc3dfeee3"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDQ5MjgyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/microsoft-azure-cosmos/src/main/java/com/azure/data/cosmos/internal/ClientRetryPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDozMDoxMlrOG8ZgKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDozMjo1MFrOG8Zldw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4NTU3OQ==", "bodyText": "Since these are specifically for Walmart, why not use DEBUG and not warn, since warning logs will be difficult to diagnose, as they are a lot.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13814#discussion_r465985579", "createdAt": "2020-08-05T20:30:12Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/microsoft-azure-cosmos/src/main/java/com/azure/data/cosmos/internal/ClientRetryPolicy.java", "diffHunk": "@@ -116,8 +117,8 @@ public ClientRetryPolicy(GlobalEndpointManager globalEndpointManager,\n \n     private ShouldRetryResult shouldRetryOnSessionNotAvailable() {\n         this.sessionTokenRetryCount++;\n-\n         if (!this.enableEndpointDiscovery) {\n+            logger.warn(\"SessionNotAvailable: no retry due to enableEndpointDiscovery=false\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54cf0fcc7f5a6e2dee806b7c0bc4fa0cc3dfeee3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4NjkzNQ==", "bodyText": "DEBUG is not feasible.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13814#discussion_r465986935", "createdAt": "2020-08-05T20:32:50Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/microsoft-azure-cosmos/src/main/java/com/azure/data/cosmos/internal/ClientRetryPolicy.java", "diffHunk": "@@ -116,8 +117,8 @@ public ClientRetryPolicy(GlobalEndpointManager globalEndpointManager,\n \n     private ShouldRetryResult shouldRetryOnSessionNotAvailable() {\n         this.sessionTokenRetryCount++;\n-\n         if (!this.enableEndpointDiscovery) {\n+            logger.warn(\"SessionNotAvailable: no retry due to enableEndpointDiscovery=false\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4NTU3OQ=="}, "originalCommit": {"oid": "54cf0fcc7f5a6e2dee806b7c0bc4fa0cc3dfeee3"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDQ5MzI2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/microsoft-azure-cosmos/src/main/java/com/azure/data/cosmos/internal/ClientRetryPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDozMDoxOFrOG8Zgag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDozMzoxMFrOG8Zl_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4NTY0Mg==", "bodyText": "Same here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13814#discussion_r465985642", "createdAt": "2020-08-05T20:30:18Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/microsoft-azure-cosmos/src/main/java/com/azure/data/cosmos/internal/ClientRetryPolicy.java", "diffHunk": "@@ -127,17 +128,22 @@ private ShouldRetryResult shouldRetryOnSessionNotAvailable() {\n                 if (this.sessionTokenRetryCount > endpoints.size()) {\n                     // When use multiple write locations is true and the request has been tried\n                     // on all locations, then don't retry the request\n+\n+                    logger.warn(\"SessionNotAvailable: canUseMultipleWriteLocations = true, sessionTokenRetryCount = {}, retried all locations. retry exhausted!\", sessionTokenRetryCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54cf0fcc7f5a6e2dee806b7c0bc4fa0cc3dfeee3"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4NzA2OQ==", "bodyText": "DEBUG is not feasible.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13814#discussion_r465987069", "createdAt": "2020-08-05T20:33:10Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/microsoft-azure-cosmos/src/main/java/com/azure/data/cosmos/internal/ClientRetryPolicy.java", "diffHunk": "@@ -127,17 +128,22 @@ private ShouldRetryResult shouldRetryOnSessionNotAvailable() {\n                 if (this.sessionTokenRetryCount > endpoints.size()) {\n                     // When use multiple write locations is true and the request has been tried\n                     // on all locations, then don't retry the request\n+\n+                    logger.warn(\"SessionNotAvailable: canUseMultipleWriteLocations = true, sessionTokenRetryCount = {}, retried all locations. retry exhausted!\", sessionTokenRetryCount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4NTY0Mg=="}, "originalCommit": {"oid": "54cf0fcc7f5a6e2dee806b7c0bc4fa0cc3dfeee3"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDQ5NDQ2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/microsoft-azure-cosmos/src/main/java/com/azure/data/cosmos/internal/ClientRetryPolicy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDozMDo0MVrOG8ZhNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDozMDo0MVrOG8ZhNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4NTg0NA==", "bodyText": "Same here - let's use the variable", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13814#discussion_r465985844", "createdAt": "2020-08-05T20:30:41Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/microsoft-azure-cosmos/src/main/java/com/azure/data/cosmos/internal/ClientRetryPolicy.java", "diffHunk": "@@ -127,17 +128,22 @@ private ShouldRetryResult shouldRetryOnSessionNotAvailable() {\n                 if (this.sessionTokenRetryCount > endpoints.size()) {\n                     // When use multiple write locations is true and the request has been tried\n                     // on all locations, then don't retry the request\n+\n+                    logger.warn(\"SessionNotAvailable: canUseMultipleWriteLocations = true, sessionTokenRetryCount = {}, retried all locations. retry exhausted!\", sessionTokenRetryCount);\n                     return ShouldRetryResult.noRetry();\n                 } else {\n+                    logger.info(\"SessionNotAvailable: canUseMultipleWriteLocations = true, sessionTokenRetryCount = {}, going to retry on next location\", sessionTokenRetryCount);\n                     this.retryContext = new RetryContext(this.sessionTokenRetryCount - 1, this.sessionTokenRetryCount > 1);\n                     return ShouldRetryResult.retryAfter(Duration.ZERO);\n                 }\n             } else {\n                 if (this.sessionTokenRetryCount > 1) {\n                     // When cannot use multiple write locations, then don't retry the request if\n                     // we have already tried this request on the write location\n+                    logger.warn(\"SessionNotAvailable: canUseMultipleWriteLocations = false, sessionTokenRetryCount = {}, no more retries\", sessionTokenRetryCount);\n                     return ShouldRetryResult.noRetry();\n                 } else {\n+                    logger.info(\"SessionNotAvailable: canUseMultipleWriteLocations = false, sessionTokenRetryCount = {}, going to retry\", sessionTokenRetryCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54cf0fcc7f5a6e2dee806b7c0bc4fa0cc3dfeee3"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4641, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}