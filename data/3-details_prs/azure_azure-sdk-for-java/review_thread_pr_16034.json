{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5MzI3MDQ2", "number": 16034, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNToxNjo1MFrOErOs6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjozNzoxM1rOErQ6Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzY1MDk3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Configs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNToxNjo1MFrOHd4hXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNToxNjo1MFrOHd4hXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA5Njc5OQ==", "bodyText": "In .Net we allow overriding these defaults via Environment variables - this is the reason why I added it here as well. But to be honest I don't expect this to be an often used extensibility - most likely the configuration was allowed in .Net for Compute/Mongo/Cassandra - so I would be ok with removing and hard-coding the settings instead as well. Let me know what you think...", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#discussion_r501096799", "createdAt": "2020-10-07T15:16:50Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Configs.java", "diffHunk": "@@ -72,6 +72,20 @@\n     private static final int DEFAULT_QUERY_PLAN_RESPONSE_TIMEOUT_IN_SECONDS = 5;\n     private static final int DEFAULT_ADDRESS_REFRESH_RESPONSE_TIMEOUT_IN_SECONDS = 5;\n \n+    // SessionTokenMismatchRetryPolicy Constants\n+    // TODO fabianm - do we really want to keep these config overrides like in .Net", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce18f96b55de5a4634e5f5718a98fb14e49add93"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzY5ODMzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionTokenMismatchRetryPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNToyNjoyMVrOHd4-ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzo0NTowMlrOHd-pJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEwNDMyMw==", "bodyText": "info vs warn?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#discussion_r501104323", "createdAt": "2020-10-07T15:26:21Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionTokenMismatchRetryPolicy.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.implementation.directconnectivity.TimeoutHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class SessionTokenMismatchRetryPolicy extends RetryPolicyWithDiagnostics {\n+\n+    private final static Logger LOGGER = LoggerFactory.getLogger(SessionTokenMismatchRetryPolicy.class);\n+\n+    private static final int BACKOFF_MULTIPLIER = 2;\n+\n+    private final Duration maximumBackoff;\n+    private final TimeoutHelper waitTimeTimeoutHelper;\n+    private final AtomicInteger retryCount;\n+\n+    private Duration currentBackoff;\n+\n+    public SessionTokenMismatchRetryPolicy(int waitTimeInMilliSeconds)\n+    {\n+        this.waitTimeTimeoutHelper = new TimeoutHelper(Duration.ofMillis(waitTimeInMilliSeconds));\n+        this.maximumBackoff = Duration.ofMillis(Configs.getSessionTokenMismatchMaximumBackoffTimeInMs());\n+\n+        this.retryCount = new AtomicInteger();\n+        this.retryCount.set(0);\n+        this.currentBackoff = Duration.ofMillis(Configs.getSessionTokenMismatchInitialBackoffTimeInMs());\n+    }\n+\n+    public SessionTokenMismatchRetryPolicy() {\n+        this(Configs.getSessionTokenMismatchDefaultWaitTimeInMs());\n+    }\n+\n+    @Override\n+    public Mono<ShouldRetryResult> shouldRetry(Exception e) {\n+\n+        if (!(e instanceof CosmosException)) {\n+            return Mono.just(ShouldRetryResult.noRetry());\n+        }\n+\n+        CosmosException cosmosException = (CosmosException)e;\n+\n+        if (cosmosException.getStatusCode() != HttpConstants.StatusCodes.NOTFOUND ||\n+            cosmosException.getSubStatusCode() != HttpConstants.SubStatusCodes.READ_SESSION_NOT_AVAILABLE) {\n+\n+            LOGGER.debug(\n+                \"SessionTokenMismatchRetryPolicy not retrying because StatusCode or SubStatusCode not found.\");\n+\n+            return Mono.just(ShouldRetryResult.noRetry());\n+        }\n+\n+        if (this.waitTimeTimeoutHelper.isElapsed()) {\n+\n+            LOGGER.info(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce18f96b55de5a4634e5f5718a98fb14e49add93"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE5NzA5Mg==", "bodyText": "ACK - Fixed in next iteration", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#discussion_r501197092", "createdAt": "2020-10-07T17:45:02Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionTokenMismatchRetryPolicy.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.implementation.directconnectivity.TimeoutHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class SessionTokenMismatchRetryPolicy extends RetryPolicyWithDiagnostics {\n+\n+    private final static Logger LOGGER = LoggerFactory.getLogger(SessionTokenMismatchRetryPolicy.class);\n+\n+    private static final int BACKOFF_MULTIPLIER = 2;\n+\n+    private final Duration maximumBackoff;\n+    private final TimeoutHelper waitTimeTimeoutHelper;\n+    private final AtomicInteger retryCount;\n+\n+    private Duration currentBackoff;\n+\n+    public SessionTokenMismatchRetryPolicy(int waitTimeInMilliSeconds)\n+    {\n+        this.waitTimeTimeoutHelper = new TimeoutHelper(Duration.ofMillis(waitTimeInMilliSeconds));\n+        this.maximumBackoff = Duration.ofMillis(Configs.getSessionTokenMismatchMaximumBackoffTimeInMs());\n+\n+        this.retryCount = new AtomicInteger();\n+        this.retryCount.set(0);\n+        this.currentBackoff = Duration.ofMillis(Configs.getSessionTokenMismatchInitialBackoffTimeInMs());\n+    }\n+\n+    public SessionTokenMismatchRetryPolicy() {\n+        this(Configs.getSessionTokenMismatchDefaultWaitTimeInMs());\n+    }\n+\n+    @Override\n+    public Mono<ShouldRetryResult> shouldRetry(Exception e) {\n+\n+        if (!(e instanceof CosmosException)) {\n+            return Mono.just(ShouldRetryResult.noRetry());\n+        }\n+\n+        CosmosException cosmosException = (CosmosException)e;\n+\n+        if (cosmosException.getStatusCode() != HttpConstants.StatusCodes.NOTFOUND ||\n+            cosmosException.getSubStatusCode() != HttpConstants.SubStatusCodes.READ_SESSION_NOT_AVAILABLE) {\n+\n+            LOGGER.debug(\n+                \"SessionTokenMismatchRetryPolicy not retrying because StatusCode or SubStatusCode not found.\");\n+\n+            return Mono.just(ShouldRetryResult.noRetry());\n+        }\n+\n+        if (this.waitTimeTimeoutHelper.isElapsed()) {\n+\n+            LOGGER.info(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEwNDMyMw=="}, "originalCommit": {"oid": "ce18f96b55de5a4634e5f5718a98fb14e49add93"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzk3Njg3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Configs.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjoyODoyN1rOHd7tQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzo0MzozNlrOHd-luQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0ODk5Mw==", "bodyText": "the new config names not consistent with the existing ones.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"session-token-mismatch-policy-default-maximum-backoff-milliseconds\";\n          \n          \n            \n                    \"COSMOS.SESSION_TOKEN_MISMATCH_POLICY_DEFAULT_MAX_BACKOF_IN_MILLISECONDS\"\n          \n      \n    \n    \n  \n\nsame for the other configs", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#discussion_r501148993", "createdAt": "2020-10-07T16:28:27Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Configs.java", "diffHunk": "@@ -72,6 +72,20 @@\n     private static final int DEFAULT_QUERY_PLAN_RESPONSE_TIMEOUT_IN_SECONDS = 5;\n     private static final int DEFAULT_ADDRESS_REFRESH_RESPONSE_TIMEOUT_IN_SECONDS = 5;\n \n+    // SessionTokenMismatchRetryPolicy Constants\n+    // TODO fabianm - do we really want to keep these config overrides like in .Net\n+    private static final String DEFAULT_SESSION_TOKEN_MISMATCH_WAIT_TIME_IN_MILLISECONDS_NAME =\n+        \"session-token-mismatch-policy-default-wait-time-milliseconds\";\n+    private static final int DEFAULT_SESSION_TOKEN_MISMATCH_WAIT_TIME_IN_MILLISECONDS = 5000;\n+\n+    private static final String DEFAULT_SESSION_TOKEN_MISMATCH_INITIAL_BACKOFF_TIME_IN_MILLISECONDS_NAME =\n+        \"session-token-mismatch-policy-default-initial-backoff-milliseconds\";\n+    private static final int DEFAULT_SESSION_TOKEN_MISMATCH_INITIAL_BACKOFF_TIME_IN_MILLISECONDS = 5;\n+\n+    private static final String DEFAULT_SESSION_TOKEN_MISMATCH_MAXIMUM_BACKOFF_TIME_IN_MILLISECONDS_NAME =\n+        \"session-token-mismatch-policy-default-maximum-backoff-milliseconds\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce18f96b55de5a4634e5f5718a98fb14e49add93"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE5NjIxNw==", "bodyText": "Fixed in next iteration", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#discussion_r501196217", "createdAt": "2020-10-07T17:43:36Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Configs.java", "diffHunk": "@@ -72,6 +72,20 @@\n     private static final int DEFAULT_QUERY_PLAN_RESPONSE_TIMEOUT_IN_SECONDS = 5;\n     private static final int DEFAULT_ADDRESS_REFRESH_RESPONSE_TIMEOUT_IN_SECONDS = 5;\n \n+    // SessionTokenMismatchRetryPolicy Constants\n+    // TODO fabianm - do we really want to keep these config overrides like in .Net\n+    private static final String DEFAULT_SESSION_TOKEN_MISMATCH_WAIT_TIME_IN_MILLISECONDS_NAME =\n+        \"session-token-mismatch-policy-default-wait-time-milliseconds\";\n+    private static final int DEFAULT_SESSION_TOKEN_MISMATCH_WAIT_TIME_IN_MILLISECONDS = 5000;\n+\n+    private static final String DEFAULT_SESSION_TOKEN_MISMATCH_INITIAL_BACKOFF_TIME_IN_MILLISECONDS_NAME =\n+        \"session-token-mismatch-policy-default-initial-backoff-milliseconds\";\n+    private static final int DEFAULT_SESSION_TOKEN_MISMATCH_INITIAL_BACKOFF_TIME_IN_MILLISECONDS = 5;\n+\n+    private static final String DEFAULT_SESSION_TOKEN_MISMATCH_MAXIMUM_BACKOFF_TIME_IN_MILLISECONDS_NAME =\n+        \"session-token-mismatch-policy-default-maximum-backoff-milliseconds\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0ODk5Mw=="}, "originalCommit": {"oid": "ce18f96b55de5a4634e5f5718a98fb14e49add93"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzk5MzYwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionTokenMismatchRetryPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjozMjoxN1rOHd73fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzo0MToyNFrOHd-geA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1MTYxNA==", "bodyText": "code style: in java \"{\" should be on the same line as if.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#discussion_r501151614", "createdAt": "2020-10-07T16:32:17Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionTokenMismatchRetryPolicy.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.implementation.directconnectivity.TimeoutHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class SessionTokenMismatchRetryPolicy extends RetryPolicyWithDiagnostics {\n+\n+    private final static Logger LOGGER = LoggerFactory.getLogger(SessionTokenMismatchRetryPolicy.class);\n+\n+    private static final int BACKOFF_MULTIPLIER = 2;\n+\n+    private final Duration maximumBackoff;\n+    private final TimeoutHelper waitTimeTimeoutHelper;\n+    private final AtomicInteger retryCount;\n+\n+    private Duration currentBackoff;\n+\n+    public SessionTokenMismatchRetryPolicy(int waitTimeInMilliSeconds)\n+    {\n+        this.waitTimeTimeoutHelper = new TimeoutHelper(Duration.ofMillis(waitTimeInMilliSeconds));\n+        this.maximumBackoff = Duration.ofMillis(Configs.getSessionTokenMismatchMaximumBackoffTimeInMs());\n+\n+        this.retryCount = new AtomicInteger();\n+        this.retryCount.set(0);\n+        this.currentBackoff = Duration.ofMillis(Configs.getSessionTokenMismatchInitialBackoffTimeInMs());\n+    }\n+\n+    public SessionTokenMismatchRetryPolicy() {\n+        this(Configs.getSessionTokenMismatchDefaultWaitTimeInMs());\n+    }\n+\n+    @Override\n+    public Mono<ShouldRetryResult> shouldRetry(Exception e) {\n+\n+        if (!(e instanceof CosmosException)) {\n+            return Mono.just(ShouldRetryResult.noRetry());\n+        }\n+\n+        CosmosException cosmosException = (CosmosException)e;\n+\n+        if (cosmosException.getStatusCode() != HttpConstants.StatusCodes.NOTFOUND ||\n+            cosmosException.getSubStatusCode() != HttpConstants.SubStatusCodes.READ_SESSION_NOT_AVAILABLE) {\n+\n+            LOGGER.debug(\n+                \"SessionTokenMismatchRetryPolicy not retrying because StatusCode or SubStatusCode not found.\");\n+\n+            return Mono.just(ShouldRetryResult.noRetry());\n+        }\n+\n+        if (this.waitTimeTimeoutHelper.isElapsed()) {\n+\n+            LOGGER.info(\n+                \"SessionTokenMismatchRetryPolicy not retrying because it has exceeded \" +\n+                    \"the time limit. Retry count = {}\",\n+                this.retryCount);\n+\n+            return Mono.just(ShouldRetryResult.noRetry());\n+        }\n+\n+        Duration effectiveBackoff = Duration.ZERO;\n+\n+        // Don't penalize first retry with delay\n+        if (this.retryCount.getAndIncrement() > 0)\n+        {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce18f96b55de5a4634e5f5718a98fb14e49add93"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE5NDg3Mg==", "bodyText": "ACK - Fixed in next iteartion", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#discussion_r501194872", "createdAt": "2020-10-07T17:41:24Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionTokenMismatchRetryPolicy.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.implementation.directconnectivity.TimeoutHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class SessionTokenMismatchRetryPolicy extends RetryPolicyWithDiagnostics {\n+\n+    private final static Logger LOGGER = LoggerFactory.getLogger(SessionTokenMismatchRetryPolicy.class);\n+\n+    private static final int BACKOFF_MULTIPLIER = 2;\n+\n+    private final Duration maximumBackoff;\n+    private final TimeoutHelper waitTimeTimeoutHelper;\n+    private final AtomicInteger retryCount;\n+\n+    private Duration currentBackoff;\n+\n+    public SessionTokenMismatchRetryPolicy(int waitTimeInMilliSeconds)\n+    {\n+        this.waitTimeTimeoutHelper = new TimeoutHelper(Duration.ofMillis(waitTimeInMilliSeconds));\n+        this.maximumBackoff = Duration.ofMillis(Configs.getSessionTokenMismatchMaximumBackoffTimeInMs());\n+\n+        this.retryCount = new AtomicInteger();\n+        this.retryCount.set(0);\n+        this.currentBackoff = Duration.ofMillis(Configs.getSessionTokenMismatchInitialBackoffTimeInMs());\n+    }\n+\n+    public SessionTokenMismatchRetryPolicy() {\n+        this(Configs.getSessionTokenMismatchDefaultWaitTimeInMs());\n+    }\n+\n+    @Override\n+    public Mono<ShouldRetryResult> shouldRetry(Exception e) {\n+\n+        if (!(e instanceof CosmosException)) {\n+            return Mono.just(ShouldRetryResult.noRetry());\n+        }\n+\n+        CosmosException cosmosException = (CosmosException)e;\n+\n+        if (cosmosException.getStatusCode() != HttpConstants.StatusCodes.NOTFOUND ||\n+            cosmosException.getSubStatusCode() != HttpConstants.SubStatusCodes.READ_SESSION_NOT_AVAILABLE) {\n+\n+            LOGGER.debug(\n+                \"SessionTokenMismatchRetryPolicy not retrying because StatusCode or SubStatusCode not found.\");\n+\n+            return Mono.just(ShouldRetryResult.noRetry());\n+        }\n+\n+        if (this.waitTimeTimeoutHelper.isElapsed()) {\n+\n+            LOGGER.info(\n+                \"SessionTokenMismatchRetryPolicy not retrying because it has exceeded \" +\n+                    \"the time limit. Retry count = {}\",\n+                this.retryCount);\n+\n+            return Mono.just(ShouldRetryResult.noRetry());\n+        }\n+\n+        Duration effectiveBackoff = Duration.ZERO;\n+\n+        // Don't penalize first retry with delay\n+        if (this.retryCount.getAndIncrement() > 0)\n+        {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1MTYxNA=="}, "originalCommit": {"oid": "ce18f96b55de5a4634e5f5718a98fb14e49add93"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODAwMTM1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/directconnectivity/ConsistencyReaderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjozNDoxM1rOHd78cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjozNDoxM1rOHd78cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1Mjg4MA==", "bodyText": "great test. thanks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#discussion_r501152880", "createdAt": "2020-10-07T16:34:13Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/directconnectivity/ConsistencyReaderTest.java", "diffHunk": "@@ -424,6 +423,122 @@ public void sessionNotAvailableFromSomeReplicasThrowingNotFound_FindReplicaSatis\n \n         StoreResponseValidator validator = StoreResponseValidator.create().isSameAs(storeResponse).isSameAs(storeResponse).build();\n         validateSuccess(storeResponseSingle, validator);\n+        transportClientWrapper.verifyNumberOfInvocations(4);\n+    }\n+\n+    /**\n+     * reading in session consistency, if the requested session token cannot be supported by some replicas\n+     * tries others till we find a replica which can support the given session token\n+     */\n+    @Test(groups = \"unit\")\n+    public void sessionNotAvailableFromAllReplicasThrowingNotFound_FindReplicaSatisfyingRequestedSessionOnRetry() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce18f96b55de5a4634e5f5718a98fb14e49add93"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODAxMzExOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/ConsistencyReader.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjozNzoxM1rOHd8D0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDozNDo1M1rOHeEgWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1NDc3MQ==", "bodyText": "we should consider doing a quick perf test for session consistency to see the perf impact of having retry logic hooked up here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#discussion_r501154771", "createdAt": "2020-10-07T16:37:13Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/ConsistencyReader.java", "diffHunk": "@@ -235,7 +231,9 @@ public ConsistencyReader(\n \n             case Any:\n                 if (targetConsistencyLevel.v == ConsistencyLevel.SESSION) {\n-                    return this.readSessionAsync(entity, desiredReadMode);\n+                    return BackoffRetryUtility.executeRetry(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce18f96b55de5a4634e5f5718a98fb14e49add93"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE5NTE3MA==", "bodyText": "Will do that before merging", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#discussion_r501195170", "createdAt": "2020-10-07T17:41:51Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/ConsistencyReader.java", "diffHunk": "@@ -235,7 +231,9 @@ public ConsistencyReader(\n \n             case Any:\n                 if (targetConsistencyLevel.v == ConsistencyLevel.SESSION) {\n-                    return this.readSessionAsync(entity, desiredReadMode);\n+                    return BackoffRetryUtility.executeRetry(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1NDc3MQ=="}, "originalCommit": {"oid": "ce18f96b55de5a4634e5f5718a98fb14e49add93"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI5MzE0NA==", "bodyText": "Results - are in the same ballpark - if any regression it is minimal (around 1%).....\nBaseline\n[2000000] operations performed in [296] seconds.\n-- Timers ----------------------------------------------------------------------\nlatency\ncount = 2000000\n1-minute rate = 6770.75 calls/second\n5-minute rate = 4997.96 calls/second\n95% <= 1.98 milliseconds\n98% <= 2.75 milliseconds\n99% <= 4.39 milliseconds\n99.9% <= 11.47 milliseconds\nCandidate (with SessionTokenMismatchRetryPolicy)\n[2000000] operations performed in [301] seconds.\n-- Timers ----------------------------------------------------------------------\nlatency\ncount = 2000000\n1-minute rate = 6691.68 calls/second\n5-minute rate = 4945.42 calls/second\n95% <= 2.09 milliseconds\n98% <= 3.16 milliseconds\n99% <= 4.52 milliseconds\n99.9% <= 11.01 milliseconds", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#discussion_r501293144", "createdAt": "2020-10-07T20:34:53Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/ConsistencyReader.java", "diffHunk": "@@ -235,7 +231,9 @@ public ConsistencyReader(\n \n             case Any:\n                 if (targetConsistencyLevel.v == ConsistencyLevel.SESSION) {\n-                    return this.readSessionAsync(entity, desiredReadMode);\n+                    return BackoffRetryUtility.executeRetry(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1NDc3MQ=="}, "originalCommit": {"oid": "ce18f96b55de5a4634e5f5718a98fb14e49add93"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3548, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}