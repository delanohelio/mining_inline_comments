{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1ODM0NTM1", "number": 13955, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo1MjoxMVrOEXfp5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo1MjoxMVrOEXfp5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDcxMzM1OnYy", "diffSide": "RIGHT", "path": "sdk/resourcemanager/azure-resourcemanager-resources/src/main/java/com/azure/resourcemanager/resources/fluentcore/model/implementation/AcceptedImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo1MjoxMVrOG_UFKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzozMzoxOFrOG_VTLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MjQ3Mw==", "bodyText": "Is it better to use Function<InnerT, ?> due to the return value will not be used.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13955#discussion_r469042473", "createdAt": "2020-08-12T06:52:11Z", "author": {"login": "ChenTanyi"}, "path": "sdk/resourcemanager/azure-resourcemanager-resources/src/main/java/com/azure/resourcemanager/resources/fluentcore/model/implementation/AcceptedImpl.java", "diffHunk": "@@ -230,4 +232,64 @@ public void cancelOperation() {\n             return new PollResponse<>(pollResponse.getStatus(), null, pollResponse.getRetryAfter());\n         }\n     }\n+\n+    public static <T, InnerT> Accepted<T> newAccepted(\n+        ClientLogger logger,\n+        Supplier<Response<Flux<ByteBuffer>>> activationOperation,\n+        Function<InnerT, T> convertOperation,\n+        SerializerAdapter serializerAdapter,\n+        HttpPipeline httpPipeline,\n+        Type innerType,\n+        Runnable preActivation) {\n+\n+        if (preActivation != null) {\n+            preActivation.run();\n+        }\n+\n+        Response<Flux<ByteBuffer>> activationResponse = activationOperation.get();\n+        if (activationResponse == null) {\n+            throw logger.logExceptionAsError(new NullPointerException());\n+        } else {\n+            Accepted<T> accepted = new AcceptedImpl<InnerT, T>(\n+                activationResponse,\n+                serializerAdapter,\n+                httpPipeline,\n+                innerType, innerType,\n+                convertOperation);\n+\n+            return accepted;\n+        }\n+    }\n+\n+    public static <T extends HasInner<InnerT>, InnerT> Accepted<T> newAccepted(\n+        ClientLogger logger,\n+        Supplier<Response<Flux<ByteBuffer>>> activationOperation,\n+        Function<InnerT, T> convertOperation,\n+        SerializerAdapter serializerAdapter,\n+        HttpPipeline httpPipeline,\n+        Type innerType,\n+        Runnable preActivation, Function<InnerT, T> postActivation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec6825a2a7ec64361947fccdb7773fea3a8f750"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA2MjQ0NA==", "bodyText": "For current functionality, it only need Consumer<InnerT>, which has no return value. One reason is that I am not sure whether I will use the return value later; another reason is that a typical input is innerToFluentMap(this), which is a Function<InnerT, T> so I do not need another lambda for it.\nI will try to change it to Consumer<InnerT>", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13955#discussion_r469062444", "createdAt": "2020-08-12T07:33:18Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resourcemanager/azure-resourcemanager-resources/src/main/java/com/azure/resourcemanager/resources/fluentcore/model/implementation/AcceptedImpl.java", "diffHunk": "@@ -230,4 +232,64 @@ public void cancelOperation() {\n             return new PollResponse<>(pollResponse.getStatus(), null, pollResponse.getRetryAfter());\n         }\n     }\n+\n+    public static <T, InnerT> Accepted<T> newAccepted(\n+        ClientLogger logger,\n+        Supplier<Response<Flux<ByteBuffer>>> activationOperation,\n+        Function<InnerT, T> convertOperation,\n+        SerializerAdapter serializerAdapter,\n+        HttpPipeline httpPipeline,\n+        Type innerType,\n+        Runnable preActivation) {\n+\n+        if (preActivation != null) {\n+            preActivation.run();\n+        }\n+\n+        Response<Flux<ByteBuffer>> activationResponse = activationOperation.get();\n+        if (activationResponse == null) {\n+            throw logger.logExceptionAsError(new NullPointerException());\n+        } else {\n+            Accepted<T> accepted = new AcceptedImpl<InnerT, T>(\n+                activationResponse,\n+                serializerAdapter,\n+                httpPipeline,\n+                innerType, innerType,\n+                convertOperation);\n+\n+            return accepted;\n+        }\n+    }\n+\n+    public static <T extends HasInner<InnerT>, InnerT> Accepted<T> newAccepted(\n+        ClientLogger logger,\n+        Supplier<Response<Flux<ByteBuffer>>> activationOperation,\n+        Function<InnerT, T> convertOperation,\n+        SerializerAdapter serializerAdapter,\n+        HttpPipeline httpPipeline,\n+        Type innerType,\n+        Runnable preActivation, Function<InnerT, T> postActivation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MjQ3Mw=="}, "originalCommit": {"oid": "1ec6825a2a7ec64361947fccdb7773fea3a8f750"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1715, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}