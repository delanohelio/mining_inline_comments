{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNDkzNDM2", "number": 14287, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTo0Mzo0OFrOEamDKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMjo1NTo1MVrOEfG6tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzIxODM0OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTo0Mzo0OFrOHEH02w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTo0Mzo0OFrOHEH02w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA4NDU3MQ==", "bodyText": "TODO: Add tests for getSnapshot client", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14287#discussion_r474084571", "createdAt": "2020-08-20T15:43:48Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareClient.java", "diffHunk": "@@ -107,6 +114,17 @@ public ShareFileClient getFileClient(String filePath) {\n         return new ShareFileClient(client.getFileClient(filePath));\n     }\n \n+\n+    /**\n+     * Creates a new {@link ShareAsyncClient} linked to the {@code snapshot} of this share resource.\n+     *\n+     * @param snapshot the identifier for a specific snapshot of this share\n+     * @return a {@link ShareClient} used to interact with the specific snapshot.\n+     */\n+    public ShareClient getSnapshotClient(String snapshot) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3117a7cb35f1b04d48a6d4f92241da8babec20d7"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzI0MTk1OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/options/ShareDeleteOptions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTo0OToyOFrOHEIDrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTo0OToyOFrOHEIDrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA4ODM2Nw==", "bodyText": "Change this to ShareRequestConditions", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14287#discussion_r474088367", "createdAt": "2020-08-20T15:49:28Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/options/ShareDeleteOptions.java", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.share.options;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.storage.file.share.models.DeleteSnapshotsOptionType;\n+\n+/**\n+ * Extended options that may be passed when deleting a share.\n+ */\n+@Fluent\n+public class ShareDeleteOptions {\n+\n+    private DeleteSnapshotsOptionType deleteSnapshotsOptions;\n+    private String leaseId;\n+\n+    /**\n+     * @return The lease id that the share must match.\n+     */\n+    public String getLeaseId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3117a7cb35f1b04d48a6d4f92241da8babec20d7"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzI5ODc2OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjowMzoxM1rOHEInSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoxMToxOFrOHEI72A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA5NzQ4MA==", "bodyText": "was that a bug ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14287#discussion_r474097480", "createdAt": "2020-08-20T16:03:13Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java", "diffHunk": "@@ -102,7 +110,7 @@\n     public String getShareUrl() {\n         StringBuilder shareUrlString = new StringBuilder(azureFileStorageClient.getUrl()).append(\"/\").append(shareName);\n         if (snapshot != null) {\n-            shareUrlString.append(\"?snapshot=\").append(snapshot);\n+            shareUrlString.append(\"?sharesnapshot=\").append(snapshot);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3117a7cb35f1b04d48a6d4f92241da8babec20d7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwMjc0NA==", "bodyText": "Yeah, I need to add it to the changelog", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14287#discussion_r474102744", "createdAt": "2020-08-20T16:11:18Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java", "diffHunk": "@@ -102,7 +110,7 @@\n     public String getShareUrl() {\n         StringBuilder shareUrlString = new StringBuilder(azureFileStorageClient.getUrl()).append(\"/\").append(shareName);\n         if (snapshot != null) {\n-            shareUrlString.append(\"?snapshot=\").append(snapshot);\n+            shareUrlString.append(\"?sharesnapshot=\").append(snapshot);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA5NzQ4MA=="}, "originalCommit": {"oid": "3117a7cb35f1b04d48a6d4f92241da8babec20d7"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDI3Mjg0OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMToxMjozNFrOHLIbtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo0NzozMVrOHL1tiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNDU0OA==", "bodyText": "I think this should call the max public overload rather than the internal one", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14287#discussion_r481434548", "createdAt": "2020-09-01T21:12:34Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java", "diffHunk": "@@ -415,16 +462,45 @@ public ShareFileAsyncClient getFileClient(String filePath) {\n      */\n     public Mono<Response<ShareProperties>> getPropertiesWithResponse() {\n         try {\n-            return withContext(context -> getPropertiesWithResponse(context));\n+            return withContext(context -> getPropertiesWithResponse(new ShareGetPropertiesOptions(), context));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fac9132dc5e992a74a7dda333cd88b17a24bfae2"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE3NjM5Mw==", "bodyText": "fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14287#discussion_r482176393", "createdAt": "2020-09-02T15:47:31Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java", "diffHunk": "@@ -415,16 +462,45 @@ public ShareFileAsyncClient getFileClient(String filePath) {\n      */\n     public Mono<Response<ShareProperties>> getPropertiesWithResponse() {\n         try {\n-            return withContext(context -> getPropertiesWithResponse(context));\n+            return withContext(context -> getPropertiesWithResponse(new ShareGetPropertiesOptions(), context));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNDU0OA=="}, "originalCommit": {"oid": "fac9132dc5e992a74a7dda333cd88b17a24bfae2"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDI3ODIzOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMToxNDowNlrOHLIe6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo0NzowNFrOHL1sZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNTM2OA==", "bodyText": "\"metadata associated with it\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14287#discussion_r481435368", "createdAt": "2020-09-01T21:14:06Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java", "diffHunk": "@@ -415,16 +462,45 @@ public ShareFileAsyncClient getFileClient(String filePath) {\n      */\n     public Mono<Response<ShareProperties>> getPropertiesWithResponse() {\n         try {\n-            return withContext(context -> getPropertiesWithResponse(context));\n+            return withContext(context -> getPropertiesWithResponse(new ShareGetPropertiesOptions(), context));\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Retrieves the properties of the share, these include the metadata associated to it and the quota that the share", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fac9132dc5e992a74a7dda333cd88b17a24bfae2"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE3NjEwMA==", "bodyText": "fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14287#discussion_r482176100", "createdAt": "2020-09-02T15:47:04Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java", "diffHunk": "@@ -415,16 +462,45 @@ public ShareFileAsyncClient getFileClient(String filePath) {\n      */\n     public Mono<Response<ShareProperties>> getPropertiesWithResponse() {\n         try {\n-            return withContext(context -> getPropertiesWithResponse(context));\n+            return withContext(context -> getPropertiesWithResponse(new ShareGetPropertiesOptions(), context));\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Retrieves the properties of the share, these include the metadata associated to it and the quota that the share", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNTM2OA=="}, "originalCommit": {"oid": "fac9132dc5e992a74a7dda333cd88b17a24bfae2"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDQ5MjU5OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/options/ShareSetMetadataOptions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMjozMTozMVrOHLKfwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMjozMjozNFrOHLKg7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2ODM1NA==", "bodyText": "Do we need to make it an unmodifiableMap in both the setter and getter?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14287#discussion_r481468354", "createdAt": "2020-09-01T22:31:31Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/options/ShareSetMetadataOptions.java", "diffHunk": "@@ -0,0 +1,52 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.share.options;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.storage.file.share.models.ShareRequestConditions;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+/**\n+ * Extended options that may be passed when setting metadata on a share.\n+ */\n+@Fluent\n+public class ShareSetMetadataOptions {\n+\n+    private Map<String, String> metadata;\n+    private ShareRequestConditions requestConditions;\n+\n+    /**\n+     * @return Metadata to set on the share, if null is passed the metadata for the share is cleared.\n+     */\n+    public Map<String, String> getMetadata() {\n+        return metadata == null ? null : Collections.unmodifiableMap(metadata);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fac9132dc5e992a74a7dda333cd88b17a24bfae2"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2ODY1NQ==", "bodyText": "I think yes cause otherwise a user could get the map and then modify it and theyd be modifying the map we care about", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14287#discussion_r481468655", "createdAt": "2020-09-01T22:32:34Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/options/ShareSetMetadataOptions.java", "diffHunk": "@@ -0,0 +1,52 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.share.options;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.storage.file.share.models.ShareRequestConditions;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+/**\n+ * Extended options that may be passed when setting metadata on a share.\n+ */\n+@Fluent\n+public class ShareSetMetadataOptions {\n+\n+    private Map<String, String> metadata;\n+    private ShareRequestConditions requestConditions;\n+\n+    /**\n+     * @return Metadata to set on the share, if null is passed the metadata for the share is cleared.\n+     */\n+    public Map<String, String> getMetadata() {\n+        return metadata == null ? null : Collections.unmodifiableMap(metadata);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2ODM1NA=="}, "originalCommit": {"oid": "fac9132dc5e992a74a7dda333cd88b17a24bfae2"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDU0MTk4OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/specialized/ShareLeaseAsyncClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMjo1Mzo1N1rOHLK9OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo0NjozNlrOHL1rEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3NTg5Ng==", "bodyText": "This is only true of files, right? Shares will respect the break period", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14287#discussion_r481475896", "createdAt": "2020-09-01T22:53:57Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/specialized/ShareLeaseAsyncClient.java", "diffHunk": "@@ -193,17 +242,46 @@ public String getLeaseId() {\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<Response<Void>> breakLeaseWithResponse() {\n         try {\n-            return withContext(this::breakLeaseWithResponse);\n+            return breakLeaseWithResponse(new ShareBreakLeaseOptions());\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Breaks the previously acquired lease, if it exists. Leases will break immediately.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fac9132dc5e992a74a7dda333cd88b17a24bfae2"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE3NTc2MA==", "bodyText": "yep, broke it up into behavior for shares and files.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14287#discussion_r482175760", "createdAt": "2020-09-02T15:46:36Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/specialized/ShareLeaseAsyncClient.java", "diffHunk": "@@ -193,17 +242,46 @@ public String getLeaseId() {\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<Response<Void>> breakLeaseWithResponse() {\n         try {\n-            return withContext(this::breakLeaseWithResponse);\n+            return breakLeaseWithResponse(new ShareBreakLeaseOptions());\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Breaks the previously acquired lease, if it exists. Leases will break immediately.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3NTg5Ng=="}, "originalCommit": {"oid": "fac9132dc5e992a74a7dda333cd88b17a24bfae2"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDU0NjQ3OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/specialized/ShareLeaseAsyncClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMjo1NTo1MVrOHLK_2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo0NDoyM1rOHL1lKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3NjU3MQ==", "bodyText": "Should this be an UnsupportedOperationException?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14287#discussion_r481476571", "createdAt": "2020-09-01T22:55:51Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/specialized/ShareLeaseAsyncClient.java", "diffHunk": "@@ -246,9 +324,62 @@ public String getLeaseId() {\n \n     Mono<Response<String>> changeLeaseWithResponse(String proposedId, Context context) {\n         context = context == null ? Context.NONE : context;\n-        return this.client.files().changeLeaseWithRestResponseAsync(null, null, this.leaseId, null, proposedId,\n-            null, context.addData(AZ_TRACING_NAMESPACE_KEY, STORAGE_TRACING_NAMESPACE_VALUE))\n-            .map(rb -> new SimpleResponse<>(rb, rb.getDeserializedHeaders().getLeaseId()));\n+        if (this.isShareFile) {\n+            return this.client.files().changeLeaseWithRestResponseAsync(null, null, this.leaseId, null, proposedId,\n+                null, context.addData(AZ_TRACING_NAMESPACE_KEY, STORAGE_TRACING_NAMESPACE_VALUE))\n+                .map(rb -> new SimpleResponse<>(rb, rb.getDeserializedHeaders().getLeaseId()));\n+        } else {\n+            return this.client.shares().changeLeaseWithRestResponseAsync(null, this.leaseId, null, proposedId, null,\n+                null, context.addData(AZ_TRACING_NAMESPACE_KEY, STORAGE_TRACING_NAMESPACE_VALUE))\n+                .map(rb -> new SimpleResponse<>(rb, rb.getDeserializedHeaders().getLeaseId()));\n+        }\n+    }\n+\n+    /**\n+     * Renews the previously acquired lease on a share.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.renewLease}\n+     *\n+     * @return A reactive response containing the renewed lease ID.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> renewLease() {\n+        try {\n+            return renewLeaseWithResponse().flatMap(FluxUtil::toMono);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Renews the previously acquired lease on a share.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.renewLeaseWithResponse}\n+     *\n+     * @return A reactive response containing the renewed lease ID.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<String>> renewLeaseWithResponse() {\n+        try {\n+            return withContext(this::renewLeaseWithResponse);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    Mono<Response<String>> renewLeaseWithResponse(Context context) {\n+        context = context == null ? Context.NONE : context;\n+        if (this.isShareFile) {\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\"Cannot renew a lease on a share file.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fac9132dc5e992a74a7dda333cd88b17a24bfae2"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE3NDI0OQ==", "bodyText": "Yeah youre right. I will change this", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14287#discussion_r482174249", "createdAt": "2020-09-02T15:44:23Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/specialized/ShareLeaseAsyncClient.java", "diffHunk": "@@ -246,9 +324,62 @@ public String getLeaseId() {\n \n     Mono<Response<String>> changeLeaseWithResponse(String proposedId, Context context) {\n         context = context == null ? Context.NONE : context;\n-        return this.client.files().changeLeaseWithRestResponseAsync(null, null, this.leaseId, null, proposedId,\n-            null, context.addData(AZ_TRACING_NAMESPACE_KEY, STORAGE_TRACING_NAMESPACE_VALUE))\n-            .map(rb -> new SimpleResponse<>(rb, rb.getDeserializedHeaders().getLeaseId()));\n+        if (this.isShareFile) {\n+            return this.client.files().changeLeaseWithRestResponseAsync(null, null, this.leaseId, null, proposedId,\n+                null, context.addData(AZ_TRACING_NAMESPACE_KEY, STORAGE_TRACING_NAMESPACE_VALUE))\n+                .map(rb -> new SimpleResponse<>(rb, rb.getDeserializedHeaders().getLeaseId()));\n+        } else {\n+            return this.client.shares().changeLeaseWithRestResponseAsync(null, this.leaseId, null, proposedId, null,\n+                null, context.addData(AZ_TRACING_NAMESPACE_KEY, STORAGE_TRACING_NAMESPACE_VALUE))\n+                .map(rb -> new SimpleResponse<>(rb, rb.getDeserializedHeaders().getLeaseId()));\n+        }\n+    }\n+\n+    /**\n+     * Renews the previously acquired lease on a share.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.renewLease}\n+     *\n+     * @return A reactive response containing the renewed lease ID.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> renewLease() {\n+        try {\n+            return renewLeaseWithResponse().flatMap(FluxUtil::toMono);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Renews the previously acquired lease on a share.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.renewLeaseWithResponse}\n+     *\n+     * @return A reactive response containing the renewed lease ID.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<String>> renewLeaseWithResponse() {\n+        try {\n+            return withContext(this::renewLeaseWithResponse);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    Mono<Response<String>> renewLeaseWithResponse(Context context) {\n+        context = context == null ? Context.NONE : context;\n+        if (this.isShareFile) {\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\"Cannot renew a lease on a share file.\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3NjU3MQ=="}, "originalCommit": {"oid": "fac9132dc5e992a74a7dda333cd88b17a24bfae2"}, "originalPosition": 249}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1559, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}