{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3Nzc5OTAz", "number": 14099, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNjo0NjowOFrOEYWxxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNjo1OToyOVrOEYW-Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTc0NDY4OnYy", "diffSide": "RIGHT", "path": "sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisPatchSchedulesImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNjo0NjowOFrOHApaSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwODoxNDozMlrOHArrSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0MDUyMQ==", "bodyText": "Seems better to put to a shared method like ensureCollectionLoaded etc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14099#discussion_r470440521", "createdAt": "2020-08-14T06:46:08Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisPatchSchedulesImpl.java", "diffHunk": "@@ -25,15 +26,17 @@\n         RedisCache> {\n     // Currently Redis Cache has one PatchSchedule\n     private final String patchScheduleName = \"default\";\n+    private boolean load = false;\n \n     RedisPatchSchedulesImpl(RedisCacheImpl parent) {\n         super(parent, parent.taskGroup(), \"PatchSchedule\");\n-        if (parent.id() != null) {\n-            this.cacheCollection();\n-        }\n     }\n \n     Map<String, RedisPatchSchedule> patchSchedulesAsMap() {\n+        if (!load) {\n+            load = true;\n+            cacheCollection();\n+        }\n         Map<String, RedisPatchSchedule> result = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c894d491662925517fd688398aa3cb446fe1283b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ3NzY0Mw==", "bodyText": "done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14099#discussion_r470477643", "createdAt": "2020-08-14T08:14:32Z", "author": {"login": "ChenTanyi"}, "path": "sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisPatchSchedulesImpl.java", "diffHunk": "@@ -25,15 +26,17 @@\n         RedisCache> {\n     // Currently Redis Cache has one PatchSchedule\n     private final String patchScheduleName = \"default\";\n+    private boolean load = false;\n \n     RedisPatchSchedulesImpl(RedisCacheImpl parent) {\n         super(parent, parent.taskGroup(), \"PatchSchedule\");\n-        if (parent.id() != null) {\n-            this.cacheCollection();\n-        }\n     }\n \n     Map<String, RedisPatchSchedule> patchSchedulesAsMap() {\n+        if (!load) {\n+            load = true;\n+            cacheCollection();\n+        }\n         Map<String, RedisPatchSchedule> result = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0MDUyMQ=="}, "originalCommit": {"oid": "c894d491662925517fd688398aa3cb446fe1283b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTc0ODUzOnYy", "diffSide": "RIGHT", "path": "sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisFirewallRulesImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNjo0Nzo0OFrOHApcgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzozNjo1MVrOHAqoGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0MTA5MQ==", "bodyText": "Is these method guaranteed to be called only by sync method (at least from us)?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14099#discussion_r470441091", "createdAt": "2020-08-14T06:47:48Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisFirewallRulesImpl.java", "diffHunk": "@@ -41,14 +44,26 @@\n     }\n \n     public void addRule(RedisFirewallRuleImpl rule) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c894d491662925517fd688398aa3cb446fe1283b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1Nzg3NA==", "bodyText": "We didn't use it in async method. But it can't be guaranteed when using by customer.\nAfter discussion, the ExternalChildResourcesCachedImpl implementation would be removed later, due to the cache is blocking.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14099#discussion_r470457874", "createdAt": "2020-08-14T07:30:59Z", "author": {"login": "ChenTanyi"}, "path": "sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisFirewallRulesImpl.java", "diffHunk": "@@ -41,14 +44,26 @@\n     }\n \n     public void addRule(RedisFirewallRuleImpl rule) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0MTA5MQ=="}, "originalCommit": {"oid": "c894d491662925517fd688398aa3cb446fe1283b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ2MDQ0MA==", "bodyText": "Issue add Azure/azure-libraries-for-java#1261", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14099#discussion_r470460440", "createdAt": "2020-08-14T07:36:51Z", "author": {"login": "ChenTanyi"}, "path": "sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisFirewallRulesImpl.java", "diffHunk": "@@ -41,14 +44,26 @@\n     }\n \n     public void addRule(RedisFirewallRuleImpl rule) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0MTA5MQ=="}, "originalCommit": {"oid": "c894d491662925517fd688398aa3cb446fe1283b"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTc2OTEwOnYy", "diffSide": "RIGHT", "path": "sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisCacheImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNjo1NjozOFrOHApotw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNjo1ODo1MFrOHApr_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0NDIxNQ==", "bodyText": "Another fake LRO?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14099#discussion_r470444215", "createdAt": "2020-08-14T06:56:38Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisCacheImpl.java", "diffHunk": "@@ -568,23 +568,27 @@ public RedisCacheImpl update() {\n \n     @Override\n     public Mono<RedisCache> updateResourceAsync() {\n-        final RedisCacheImpl self = this;\n+        updateParameters.withTags(this.inner().tags());\n         return this.manager().inner().getRedis().updateAsync(resourceGroupName(), name(), updateParameters)\n                 .map(innerToFluentMap(this))\n-                .doOnNext(redisCache -> {\n-                    while (!redisCache.provisioningState().equalsIgnoreCase(\"Succeeded\")) {\n-                        SdkContext.sleep(30 * 1000);\n-\n-                        RedisResourceInner innerResource = self.manager().inner().getRedis().getByResourceGroup(resourceGroupName(), name());\n-                        ((RedisCacheImpl) redisCache).setInner(innerResource);\n-                        self.setInner(innerResource);\n-                        self.patchScheduleAdded = false;\n+                .filter(redisCache -> !redisCache.provisioningState().equalsIgnoreCase(ProvisioningState.SUCCEEDED.toString()))\n+                .flatMap(redisCache -> {\n+                    SdkContext.sleep(30 * 1000);\n+                    this.patchScheduleAdded = false;\n+                    return this.manager().inner().getRedis().getByResourceGroupAsync(resourceGroupName(), name())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d31aa1a63e1ad118631d75bc33e334c3d681a11"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0NTA1Mg==", "bodyText": "Yes, the redis doesn't go through official LRO, like cosmos", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14099#discussion_r470445052", "createdAt": "2020-08-14T06:58:50Z", "author": {"login": "ChenTanyi"}, "path": "sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisCacheImpl.java", "diffHunk": "@@ -568,23 +568,27 @@ public RedisCacheImpl update() {\n \n     @Override\n     public Mono<RedisCache> updateResourceAsync() {\n-        final RedisCacheImpl self = this;\n+        updateParameters.withTags(this.inner().tags());\n         return this.manager().inner().getRedis().updateAsync(resourceGroupName(), name(), updateParameters)\n                 .map(innerToFluentMap(this))\n-                .doOnNext(redisCache -> {\n-                    while (!redisCache.provisioningState().equalsIgnoreCase(\"Succeeded\")) {\n-                        SdkContext.sleep(30 * 1000);\n-\n-                        RedisResourceInner innerResource = self.manager().inner().getRedis().getByResourceGroup(resourceGroupName(), name());\n-                        ((RedisCacheImpl) redisCache).setInner(innerResource);\n-                        self.setInner(innerResource);\n-                        self.patchScheduleAdded = false;\n+                .filter(redisCache -> !redisCache.provisioningState().equalsIgnoreCase(ProvisioningState.SUCCEEDED.toString()))\n+                .flatMap(redisCache -> {\n+                    SdkContext.sleep(30 * 1000);\n+                    this.patchScheduleAdded = false;\n+                    return this.manager().inner().getRedis().getByResourceGroupAsync(resourceGroupName(), name())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0NDIxNQ=="}, "originalCommit": {"oid": "8d31aa1a63e1ad118631d75bc33e334c3d681a11"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTc3NjU4OnYy", "diffSide": "RIGHT", "path": "sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisCacheImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNjo1OToyOVrOHAps_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwODoxNDoyNlrOHArrFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0NTMwOQ==", "bodyText": "Should we use delaySubscription + repeat?\nhttps://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java#L214-L238", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14099#discussion_r470445309", "createdAt": "2020-08-14T06:59:29Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisCacheImpl.java", "diffHunk": "@@ -568,23 +568,27 @@ public RedisCacheImpl update() {\n \n     @Override\n     public Mono<RedisCache> updateResourceAsync() {\n-        final RedisCacheImpl self = this;\n+        updateParameters.withTags(this.inner().tags());\n         return this.manager().inner().getRedis().updateAsync(resourceGroupName(), name(), updateParameters)\n                 .map(innerToFluentMap(this))\n-                .doOnNext(redisCache -> {\n-                    while (!redisCache.provisioningState().equalsIgnoreCase(\"Succeeded\")) {\n-                        SdkContext.sleep(30 * 1000);\n-\n-                        RedisResourceInner innerResource = self.manager().inner().getRedis().getByResourceGroup(resourceGroupName(), name());\n-                        ((RedisCacheImpl) redisCache).setInner(innerResource);\n-                        self.setInner(innerResource);\n-                        self.patchScheduleAdded = false;\n+                .filter(redisCache -> !redisCache.provisioningState().equalsIgnoreCase(ProvisioningState.SUCCEEDED.toString()))\n+                .flatMap(redisCache -> {\n+                    SdkContext.sleep(30 * 1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d31aa1a63e1ad118631d75bc33e334c3d681a11"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ3NzU4OA==", "bodyText": "done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14099#discussion_r470477588", "createdAt": "2020-08-14T08:14:26Z", "author": {"login": "ChenTanyi"}, "path": "sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisCacheImpl.java", "diffHunk": "@@ -568,23 +568,27 @@ public RedisCacheImpl update() {\n \n     @Override\n     public Mono<RedisCache> updateResourceAsync() {\n-        final RedisCacheImpl self = this;\n+        updateParameters.withTags(this.inner().tags());\n         return this.manager().inner().getRedis().updateAsync(resourceGroupName(), name(), updateParameters)\n                 .map(innerToFluentMap(this))\n-                .doOnNext(redisCache -> {\n-                    while (!redisCache.provisioningState().equalsIgnoreCase(\"Succeeded\")) {\n-                        SdkContext.sleep(30 * 1000);\n-\n-                        RedisResourceInner innerResource = self.manager().inner().getRedis().getByResourceGroup(resourceGroupName(), name());\n-                        ((RedisCacheImpl) redisCache).setInner(innerResource);\n-                        self.setInner(innerResource);\n-                        self.patchScheduleAdded = false;\n+                .filter(redisCache -> !redisCache.provisioningState().equalsIgnoreCase(ProvisioningState.SUCCEEDED.toString()))\n+                .flatMap(redisCache -> {\n+                    SdkContext.sleep(30 * 1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0NTMwOQ=="}, "originalCommit": {"oid": "8d31aa1a63e1ad118631d75bc33e334c3d681a11"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1692, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}