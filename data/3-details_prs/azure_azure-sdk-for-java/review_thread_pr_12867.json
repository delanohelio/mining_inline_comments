{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1NDc3ODE2", "number": 12867, "reviewThreads": {"totalCount": 57, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo0MToxNVrOEMKGCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMTo1NDoxOVrOEPr3XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTgzNzU0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/pom.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo0MToxNVrOGuG4Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjowNjoyN1rOGwG9EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwMDMzNQ==", "bodyText": "What is the timeline for GA of this package - Seems weird if a part of the SDK officially GAed (azure-cosmos) takes a dependency on a component still in Beta.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r451000335", "createdAt": "2020-07-07T16:41:15Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/pom.xml", "diffHunk": "@@ -128,7 +128,18 @@ Licensed under the MIT License.\n         </exclusion>\n       </exclusions>\n     </dependency>\n-\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core-tracing-opentelemetry</artifactId>\n+      <scope>test</scope>\n+      <version>1.0.0-beta.5</version> <!-- {x-version-update;com.azure:azure-core-tracing-opentelemetry;dependency} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxMDEyNA==", "bodyText": "@FabianMeiswinkel Since this is a test dependency  -> <scope>tests<scope>.I think we should be fine, right @simplynaveen20  ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r451010124", "createdAt": "2020-07-07T16:57:24Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/pom.xml", "diffHunk": "@@ -128,7 +128,18 @@ Licensed under the MIT License.\n         </exclusion>\n       </exclusions>\n     </dependency>\n-\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core-tracing-opentelemetry</artifactId>\n+      <scope>test</scope>\n+      <version>1.0.0-beta.5</version> <!-- {x-version-update;com.azure:azure-core-tracing-opentelemetry;dependency} -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwMDMzNQ=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxNTUyMg==", "bodyText": "That is correct, this is test dependency . Mostly users gonna onboard tracing with GA version version only . And once we have that we can move this test dependency to GA as well . So overall we should be good now,", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r451015522", "createdAt": "2020-07-07T17:06:29Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/pom.xml", "diffHunk": "@@ -128,7 +128,18 @@ Licensed under the MIT License.\n         </exclusion>\n       </exclusions>\n     </dependency>\n-\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core-tracing-opentelemetry</artifactId>\n+      <scope>test</scope>\n+      <version>1.0.0-beta.5</version> <!-- {x-version-update;com.azure:azure-core-tracing-opentelemetry;dependency} -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwMDMzNQ=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5ODc2OQ==", "bodyText": "we are now not using this test dependency", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453098769", "createdAt": "2020-07-10T22:06:27Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/pom.xml", "diffHunk": "@@ -128,7 +128,18 @@ Licensed under the MIT License.\n         </exclusion>\n       </exclusions>\n     </dependency>\n-\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core-tracing-opentelemetry</artifactId>\n+      <scope>test</scope>\n+      <version>1.0.0-beta.5</version> <!-- {x-version-update;com.azure:azure-core-tracing-opentelemetry;dependency} -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwMDMzNQ=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjM2OTU0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOToxNDoxOVrOGuMGjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMToyNzowMVrOGwGGRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4NTk2Nw==", "bodyText": "Not sure if I understand why would we need this to be a context object. Could this be a Map or an optional object?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r451085967", "createdAt": "2020-07-07T19:14:19Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -473,4 +450,77 @@ public CosmosAsyncDatabase getDatabase(String id) {\n     public void close() {\n         asyncDocumentClient.close();\n     }\n+\n+    TracerProvider getTracerProvider(){\n+        return this.tracerProvider;\n+    }\n+\n+    private CosmosPagedFlux<CosmosDatabaseProperties> queryDatabasesInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options){\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryDatabases\";\n+            pagedFluxOptions.setTracerInformation(this.tracerProvider, spanName, this.serviceEndpoint, null);\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryDatabases(querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponse(\n+                    ModelBridgeInternal.getCosmosDatabasePropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders()));\n+        });\n+    }\n+\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(CosmosAsyncDatabase database,\n+                                                                           ThroughputProperties throughputProperties, Context context) {\n+        String spanName = \"createDatabaseIfNotExists.\" + database.getId();\n+        Context nestedContext = context.addData(TracerProvider.COSMOS_CALL_DEPTH, TracerProvider.COSMOS_CALL_DEPTH_VAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ3MTE0Ng==", "bodyText": "So this is to avoid nesting tracer call. Initially we were using subscriberContext for this purpose, and found some perf regression. Then we moved to this model, we already have internal methods that are taking context, and eventually we can filter the nesting call in TracerProvide.  If we have taken map, this logic would be more complex in code readability and we have to handle this case by changing code at many places, and also it is more efficient .\nAnd we are using optional when we are reading it back, please check this", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452471146", "createdAt": "2020-07-09T20:28:18Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -473,4 +450,77 @@ public CosmosAsyncDatabase getDatabase(String id) {\n     public void close() {\n         asyncDocumentClient.close();\n     }\n+\n+    TracerProvider getTracerProvider(){\n+        return this.tracerProvider;\n+    }\n+\n+    private CosmosPagedFlux<CosmosDatabaseProperties> queryDatabasesInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options){\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryDatabases\";\n+            pagedFluxOptions.setTracerInformation(this.tracerProvider, spanName, this.serviceEndpoint, null);\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryDatabases(querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponse(\n+                    ModelBridgeInternal.getCosmosDatabasePropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders()));\n+        });\n+    }\n+\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(CosmosAsyncDatabase database,\n+                                                                           ThroughputProperties throughputProperties, Context context) {\n+        String spanName = \"createDatabaseIfNotExists.\" + database.getId();\n+        Context nestedContext = context.addData(TracerProvider.COSMOS_CALL_DEPTH, TracerProvider.COSMOS_CALL_DEPTH_VAL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4NTk2Nw=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxNDkzMw==", "bodyText": "I was just suggesting if we could use a different data structure than the Context type here since the Context object is a linked list representation and if its populated enough could result the getData to get slower.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452514933", "createdAt": "2020-07-09T22:02:00Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -473,4 +450,77 @@ public CosmosAsyncDatabase getDatabase(String id) {\n     public void close() {\n         asyncDocumentClient.close();\n     }\n+\n+    TracerProvider getTracerProvider(){\n+        return this.tracerProvider;\n+    }\n+\n+    private CosmosPagedFlux<CosmosDatabaseProperties> queryDatabasesInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options){\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryDatabases\";\n+            pagedFluxOptions.setTracerInformation(this.tracerProvider, spanName, this.serviceEndpoint, null);\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryDatabases(querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponse(\n+                    ModelBridgeInternal.getCosmosDatabasePropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders()));\n+        });\n+    }\n+\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(CosmosAsyncDatabase database,\n+                                                                           ThroughputProperties throughputProperties, Context context) {\n+        String spanName = \"createDatabaseIfNotExists.\" + database.getId();\n+        Context nestedContext = context.addData(TracerProvider.COSMOS_CALL_DEPTH, TracerProvider.COSMOS_CALL_DEPTH_VAL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4NTk2Nw=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU1ODkwMw==", "bodyText": "This is only used for api with nested call , and putting just one data. This is the proper way as nested call will be treated as user send context,  and tracer provider will filter it. This code flow is inline with non nested call, and code readability is also good here.\nAlso did the perf testing with this approach and numbers look good. I fear if we change anything we might introduce some perf regression as current approach is working best for us.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452558903", "createdAt": "2020-07-10T00:22:45Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -473,4 +450,77 @@ public CosmosAsyncDatabase getDatabase(String id) {\n     public void close() {\n         asyncDocumentClient.close();\n     }\n+\n+    TracerProvider getTracerProvider(){\n+        return this.tracerProvider;\n+    }\n+\n+    private CosmosPagedFlux<CosmosDatabaseProperties> queryDatabasesInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options){\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryDatabases\";\n+            pagedFluxOptions.setTracerInformation(this.tracerProvider, spanName, this.serviceEndpoint, null);\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryDatabases(querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponse(\n+                    ModelBridgeInternal.getCosmosDatabasePropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders()));\n+        });\n+    }\n+\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(CosmosAsyncDatabase database,\n+                                                                           ThroughputProperties throughputProperties, Context context) {\n+        String spanName = \"createDatabaseIfNotExists.\" + database.getId();\n+        Context nestedContext = context.addData(TracerProvider.COSMOS_CALL_DEPTH, TracerProvider.COSMOS_CALL_DEPTH_VAL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4NTk2Nw=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4NDc0Mw==", "bodyText": "We will go by this approach,i.e adding nested data only on the api it needed , as this gave the best perf result, and adding data on all api might have an impact .", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453084743", "createdAt": "2020-07-10T21:27:01Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -473,4 +450,77 @@ public CosmosAsyncDatabase getDatabase(String id) {\n     public void close() {\n         asyncDocumentClient.close();\n     }\n+\n+    TracerProvider getTracerProvider(){\n+        return this.tracerProvider;\n+    }\n+\n+    private CosmosPagedFlux<CosmosDatabaseProperties> queryDatabasesInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options){\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryDatabases\";\n+            pagedFluxOptions.setTracerInformation(this.tracerProvider, spanName, this.serviceEndpoint, null);\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryDatabases(querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponse(\n+                    ModelBridgeInternal.getCosmosDatabasePropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders()));\n+        });\n+    }\n+\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(CosmosAsyncDatabase database,\n+                                                                           ThroughputProperties throughputProperties, Context context) {\n+        String spanName = \"createDatabaseIfNotExists.\" + database.getId();\n+        Context nestedContext = context.addData(TracerProvider.COSMOS_CALL_DEPTH, TracerProvider.COSMOS_CALL_DEPTH_VAL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4NTk2Nw=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjM3MjI3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOToxNTowOFrOGuMIRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDo1MTo1NVrOGwFSww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4NjQwNw==", "bodyText": "Could store database.getId() in a variable.\nAlso, some places below.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r451086407", "createdAt": "2020-07-07T19:15:08Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -473,4 +450,77 @@ public CosmosAsyncDatabase getDatabase(String id) {\n     public void close() {\n         asyncDocumentClient.close();\n     }\n+\n+    TracerProvider getTracerProvider(){\n+        return this.tracerProvider;\n+    }\n+\n+    private CosmosPagedFlux<CosmosDatabaseProperties> queryDatabasesInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options){\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryDatabases\";\n+            pagedFluxOptions.setTracerInformation(this.tracerProvider, spanName, this.serviceEndpoint, null);\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryDatabases(querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponse(\n+                    ModelBridgeInternal.getCosmosDatabasePropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders()));\n+        });\n+    }\n+\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(CosmosAsyncDatabase database,\n+                                                                           ThroughputProperties throughputProperties, Context context) {\n+        String spanName = \"createDatabaseIfNotExists.\" + database.getId();\n+        Context nestedContext = context.addData(TracerProvider.COSMOS_CALL_DEPTH, TracerProvider.COSMOS_CALL_DEPTH_VAL);\n+        Mono<CosmosDatabaseResponse> responseMono = createDatabaseIfNotExistsInternal(database.readInternal(new CosmosDatabaseRequestOptions(), nestedContext), database, throughputProperties, nestedContext);\n+        return tracerProvider.traceEnabledCosmosResponsePublisher(responseMono,\n+            context,\n+            spanName,\n+            database.getId(),\n+            this.serviceEndpoint);\n+    }\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(Mono<CosmosDatabaseResponse> responseMono, CosmosAsyncDatabase database, ThroughputProperties throughputProperties, Context context) {\n+        return responseMono.onErrorResume(exception -> {\n+            final Throwable unwrappedException = Exceptions.unwrap(exception);\n+            if (unwrappedException instanceof CosmosException) {\n+                final CosmosException cosmosException = (CosmosException) unwrappedException;\n+                if (cosmosException.getStatusCode() == HttpConstants.StatusCodes.NOTFOUND) {\n+                    CosmosDatabaseRequestOptions requestOptions = new CosmosDatabaseRequestOptions();\n+                    if(throughputProperties != null) {\n+                        ModelBridgeInternal.setThroughputProperties(requestOptions, throughputProperties);\n+                    }\n+\n+                    if (context != null) {\n+                        Database wrappedDatabase = new Database();\n+                        wrappedDatabase.setId(database.getId());\n+                        return createDatabaseInternal(wrappedDatabase,\n+                            requestOptions, context);\n+                    }\n+\n+                    return createDatabase(new CosmosDatabaseProperties(database.getId()),\n+                        requestOptions);\n+                }\n+            }\n+            return Mono.error(unwrappedException);\n+        });\n+    }\n+\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseInternal(Database database, CosmosDatabaseRequestOptions options,\n+                                                             Context context) {\n+        String spanName = \"createDatabase.\" + database.getId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ2NzIyNg==", "bodyText": "We cant store database.getId() as database object is coming from user in each api. User can have multiple database sin a single client.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452467226", "createdAt": "2020-07-09T20:20:23Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -473,4 +450,77 @@ public CosmosAsyncDatabase getDatabase(String id) {\n     public void close() {\n         asyncDocumentClient.close();\n     }\n+\n+    TracerProvider getTracerProvider(){\n+        return this.tracerProvider;\n+    }\n+\n+    private CosmosPagedFlux<CosmosDatabaseProperties> queryDatabasesInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options){\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryDatabases\";\n+            pagedFluxOptions.setTracerInformation(this.tracerProvider, spanName, this.serviceEndpoint, null);\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryDatabases(querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponse(\n+                    ModelBridgeInternal.getCosmosDatabasePropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders()));\n+        });\n+    }\n+\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(CosmosAsyncDatabase database,\n+                                                                           ThroughputProperties throughputProperties, Context context) {\n+        String spanName = \"createDatabaseIfNotExists.\" + database.getId();\n+        Context nestedContext = context.addData(TracerProvider.COSMOS_CALL_DEPTH, TracerProvider.COSMOS_CALL_DEPTH_VAL);\n+        Mono<CosmosDatabaseResponse> responseMono = createDatabaseIfNotExistsInternal(database.readInternal(new CosmosDatabaseRequestOptions(), nestedContext), database, throughputProperties, nestedContext);\n+        return tracerProvider.traceEnabledCosmosResponsePublisher(responseMono,\n+            context,\n+            spanName,\n+            database.getId(),\n+            this.serviceEndpoint);\n+    }\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(Mono<CosmosDatabaseResponse> responseMono, CosmosAsyncDatabase database, ThroughputProperties throughputProperties, Context context) {\n+        return responseMono.onErrorResume(exception -> {\n+            final Throwable unwrappedException = Exceptions.unwrap(exception);\n+            if (unwrappedException instanceof CosmosException) {\n+                final CosmosException cosmosException = (CosmosException) unwrappedException;\n+                if (cosmosException.getStatusCode() == HttpConstants.StatusCodes.NOTFOUND) {\n+                    CosmosDatabaseRequestOptions requestOptions = new CosmosDatabaseRequestOptions();\n+                    if(throughputProperties != null) {\n+                        ModelBridgeInternal.setThroughputProperties(requestOptions, throughputProperties);\n+                    }\n+\n+                    if (context != null) {\n+                        Database wrappedDatabase = new Database();\n+                        wrappedDatabase.setId(database.getId());\n+                        return createDatabaseInternal(wrappedDatabase,\n+                            requestOptions, context);\n+                    }\n+\n+                    return createDatabase(new CosmosDatabaseProperties(database.getId()),\n+                        requestOptions);\n+                }\n+            }\n+            return Mono.error(unwrappedException);\n+        });\n+    }\n+\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseInternal(Database database, CosmosDatabaseRequestOptions options,\n+                                                             Context context) {\n+        String spanName = \"createDatabase.\" + database.getId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4NjQwNw=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU1Mjg3Nw==", "bodyText": "Oh I was suggesting in the same method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452552877", "createdAt": "2020-07-10T00:00:05Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -473,4 +450,77 @@ public CosmosAsyncDatabase getDatabase(String id) {\n     public void close() {\n         asyncDocumentClient.close();\n     }\n+\n+    TracerProvider getTracerProvider(){\n+        return this.tracerProvider;\n+    }\n+\n+    private CosmosPagedFlux<CosmosDatabaseProperties> queryDatabasesInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options){\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryDatabases\";\n+            pagedFluxOptions.setTracerInformation(this.tracerProvider, spanName, this.serviceEndpoint, null);\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryDatabases(querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponse(\n+                    ModelBridgeInternal.getCosmosDatabasePropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders()));\n+        });\n+    }\n+\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(CosmosAsyncDatabase database,\n+                                                                           ThroughputProperties throughputProperties, Context context) {\n+        String spanName = \"createDatabaseIfNotExists.\" + database.getId();\n+        Context nestedContext = context.addData(TracerProvider.COSMOS_CALL_DEPTH, TracerProvider.COSMOS_CALL_DEPTH_VAL);\n+        Mono<CosmosDatabaseResponse> responseMono = createDatabaseIfNotExistsInternal(database.readInternal(new CosmosDatabaseRequestOptions(), nestedContext), database, throughputProperties, nestedContext);\n+        return tracerProvider.traceEnabledCosmosResponsePublisher(responseMono,\n+            context,\n+            spanName,\n+            database.getId(),\n+            this.serviceEndpoint);\n+    }\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(Mono<CosmosDatabaseResponse> responseMono, CosmosAsyncDatabase database, ThroughputProperties throughputProperties, Context context) {\n+        return responseMono.onErrorResume(exception -> {\n+            final Throwable unwrappedException = Exceptions.unwrap(exception);\n+            if (unwrappedException instanceof CosmosException) {\n+                final CosmosException cosmosException = (CosmosException) unwrappedException;\n+                if (cosmosException.getStatusCode() == HttpConstants.StatusCodes.NOTFOUND) {\n+                    CosmosDatabaseRequestOptions requestOptions = new CosmosDatabaseRequestOptions();\n+                    if(throughputProperties != null) {\n+                        ModelBridgeInternal.setThroughputProperties(requestOptions, throughputProperties);\n+                    }\n+\n+                    if (context != null) {\n+                        Database wrappedDatabase = new Database();\n+                        wrappedDatabase.setId(database.getId());\n+                        return createDatabaseInternal(wrappedDatabase,\n+                            requestOptions, context);\n+                    }\n+\n+                    return createDatabase(new CosmosDatabaseProperties(database.getId()),\n+                        requestOptions);\n+                }\n+            }\n+            return Mono.error(unwrappedException);\n+        });\n+    }\n+\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseInternal(Database database, CosmosDatabaseRequestOptions options,\n+                                                             Context context) {\n+        String spanName = \"createDatabase.\" + database.getId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4NjQwNw=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU1OTk5Mg==", "bodyText": "Ohk got it , still I don't see any benefit of using extra variable in this private method to hold database.getId().", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452559992", "createdAt": "2020-07-10T00:27:21Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -473,4 +450,77 @@ public CosmosAsyncDatabase getDatabase(String id) {\n     public void close() {\n         asyncDocumentClient.close();\n     }\n+\n+    TracerProvider getTracerProvider(){\n+        return this.tracerProvider;\n+    }\n+\n+    private CosmosPagedFlux<CosmosDatabaseProperties> queryDatabasesInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options){\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryDatabases\";\n+            pagedFluxOptions.setTracerInformation(this.tracerProvider, spanName, this.serviceEndpoint, null);\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryDatabases(querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponse(\n+                    ModelBridgeInternal.getCosmosDatabasePropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders()));\n+        });\n+    }\n+\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(CosmosAsyncDatabase database,\n+                                                                           ThroughputProperties throughputProperties, Context context) {\n+        String spanName = \"createDatabaseIfNotExists.\" + database.getId();\n+        Context nestedContext = context.addData(TracerProvider.COSMOS_CALL_DEPTH, TracerProvider.COSMOS_CALL_DEPTH_VAL);\n+        Mono<CosmosDatabaseResponse> responseMono = createDatabaseIfNotExistsInternal(database.readInternal(new CosmosDatabaseRequestOptions(), nestedContext), database, throughputProperties, nestedContext);\n+        return tracerProvider.traceEnabledCosmosResponsePublisher(responseMono,\n+            context,\n+            spanName,\n+            database.getId(),\n+            this.serviceEndpoint);\n+    }\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(Mono<CosmosDatabaseResponse> responseMono, CosmosAsyncDatabase database, ThroughputProperties throughputProperties, Context context) {\n+        return responseMono.onErrorResume(exception -> {\n+            final Throwable unwrappedException = Exceptions.unwrap(exception);\n+            if (unwrappedException instanceof CosmosException) {\n+                final CosmosException cosmosException = (CosmosException) unwrappedException;\n+                if (cosmosException.getStatusCode() == HttpConstants.StatusCodes.NOTFOUND) {\n+                    CosmosDatabaseRequestOptions requestOptions = new CosmosDatabaseRequestOptions();\n+                    if(throughputProperties != null) {\n+                        ModelBridgeInternal.setThroughputProperties(requestOptions, throughputProperties);\n+                    }\n+\n+                    if (context != null) {\n+                        Database wrappedDatabase = new Database();\n+                        wrappedDatabase.setId(database.getId());\n+                        return createDatabaseInternal(wrappedDatabase,\n+                            requestOptions, context);\n+                    }\n+\n+                    return createDatabase(new CosmosDatabaseProperties(database.getId()),\n+                        requestOptions);\n+                }\n+            }\n+            return Mono.error(unwrappedException);\n+        });\n+    }\n+\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseInternal(Database database, CosmosDatabaseRequestOptions options,\n+                                                             Context context) {\n+        String spanName = \"createDatabase.\" + database.getId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4NjQwNw=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2NzEzMA==", "bodyText": "It doesn't have to be computed twice.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452567130", "createdAt": "2020-07-10T00:57:12Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -473,4 +450,77 @@ public CosmosAsyncDatabase getDatabase(String id) {\n     public void close() {\n         asyncDocumentClient.close();\n     }\n+\n+    TracerProvider getTracerProvider(){\n+        return this.tracerProvider;\n+    }\n+\n+    private CosmosPagedFlux<CosmosDatabaseProperties> queryDatabasesInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options){\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryDatabases\";\n+            pagedFluxOptions.setTracerInformation(this.tracerProvider, spanName, this.serviceEndpoint, null);\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryDatabases(querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponse(\n+                    ModelBridgeInternal.getCosmosDatabasePropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders()));\n+        });\n+    }\n+\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(CosmosAsyncDatabase database,\n+                                                                           ThroughputProperties throughputProperties, Context context) {\n+        String spanName = \"createDatabaseIfNotExists.\" + database.getId();\n+        Context nestedContext = context.addData(TracerProvider.COSMOS_CALL_DEPTH, TracerProvider.COSMOS_CALL_DEPTH_VAL);\n+        Mono<CosmosDatabaseResponse> responseMono = createDatabaseIfNotExistsInternal(database.readInternal(new CosmosDatabaseRequestOptions(), nestedContext), database, throughputProperties, nestedContext);\n+        return tracerProvider.traceEnabledCosmosResponsePublisher(responseMono,\n+            context,\n+            spanName,\n+            database.getId(),\n+            this.serviceEndpoint);\n+    }\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(Mono<CosmosDatabaseResponse> responseMono, CosmosAsyncDatabase database, ThroughputProperties throughputProperties, Context context) {\n+        return responseMono.onErrorResume(exception -> {\n+            final Throwable unwrappedException = Exceptions.unwrap(exception);\n+            if (unwrappedException instanceof CosmosException) {\n+                final CosmosException cosmosException = (CosmosException) unwrappedException;\n+                if (cosmosException.getStatusCode() == HttpConstants.StatusCodes.NOTFOUND) {\n+                    CosmosDatabaseRequestOptions requestOptions = new CosmosDatabaseRequestOptions();\n+                    if(throughputProperties != null) {\n+                        ModelBridgeInternal.setThroughputProperties(requestOptions, throughputProperties);\n+                    }\n+\n+                    if (context != null) {\n+                        Database wrappedDatabase = new Database();\n+                        wrappedDatabase.setId(database.getId());\n+                        return createDatabaseInternal(wrappedDatabase,\n+                            requestOptions, context);\n+                    }\n+\n+                    return createDatabase(new CosmosDatabaseProperties(database.getId()),\n+                        requestOptions);\n+                }\n+            }\n+            return Mono.error(unwrappedException);\n+        });\n+    }\n+\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseInternal(Database database, CosmosDatabaseRequestOptions options,\n+                                                             Context context) {\n+        String spanName = \"createDatabase.\" + database.getId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4NjQwNw=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3MTU1NQ==", "bodyText": "getId doesn't compute anything, it just returns an instance variable, so we should be good here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453071555", "createdAt": "2020-07-10T20:51:55Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -473,4 +450,77 @@ public CosmosAsyncDatabase getDatabase(String id) {\n     public void close() {\n         asyncDocumentClient.close();\n     }\n+\n+    TracerProvider getTracerProvider(){\n+        return this.tracerProvider;\n+    }\n+\n+    private CosmosPagedFlux<CosmosDatabaseProperties> queryDatabasesInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options){\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryDatabases\";\n+            pagedFluxOptions.setTracerInformation(this.tracerProvider, spanName, this.serviceEndpoint, null);\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryDatabases(querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponse(\n+                    ModelBridgeInternal.getCosmosDatabasePropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders()));\n+        });\n+    }\n+\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(CosmosAsyncDatabase database,\n+                                                                           ThroughputProperties throughputProperties, Context context) {\n+        String spanName = \"createDatabaseIfNotExists.\" + database.getId();\n+        Context nestedContext = context.addData(TracerProvider.COSMOS_CALL_DEPTH, TracerProvider.COSMOS_CALL_DEPTH_VAL);\n+        Mono<CosmosDatabaseResponse> responseMono = createDatabaseIfNotExistsInternal(database.readInternal(new CosmosDatabaseRequestOptions(), nestedContext), database, throughputProperties, nestedContext);\n+        return tracerProvider.traceEnabledCosmosResponsePublisher(responseMono,\n+            context,\n+            spanName,\n+            database.getId(),\n+            this.serviceEndpoint);\n+    }\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(Mono<CosmosDatabaseResponse> responseMono, CosmosAsyncDatabase database, ThroughputProperties throughputProperties, Context context) {\n+        return responseMono.onErrorResume(exception -> {\n+            final Throwable unwrappedException = Exceptions.unwrap(exception);\n+            if (unwrappedException instanceof CosmosException) {\n+                final CosmosException cosmosException = (CosmosException) unwrappedException;\n+                if (cosmosException.getStatusCode() == HttpConstants.StatusCodes.NOTFOUND) {\n+                    CosmosDatabaseRequestOptions requestOptions = new CosmosDatabaseRequestOptions();\n+                    if(throughputProperties != null) {\n+                        ModelBridgeInternal.setThroughputProperties(requestOptions, throughputProperties);\n+                    }\n+\n+                    if (context != null) {\n+                        Database wrappedDatabase = new Database();\n+                        wrappedDatabase.setId(database.getId());\n+                        return createDatabaseInternal(wrappedDatabase,\n+                            requestOptions, context);\n+                    }\n+\n+                    return createDatabase(new CosmosDatabaseProperties(database.getId()),\n+                        requestOptions);\n+                }\n+            }\n+            return Mono.error(unwrappedException);\n+        });\n+    }\n+\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseInternal(Database database, CosmosDatabaseRequestOptions options,\n+                                                             Context context) {\n+        String spanName = \"createDatabase.\" + database.getId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4NjQwNw=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 234}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjM3Nzk0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncConflict.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOToxNjo0NVrOGuMLtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMDoxODo0OVrOGvgW9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4NzI4NA==", "bodyText": "Is the getId() on L111 the same database Id as on this line?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r451087284", "createdAt": "2020-07-07T19:16:45Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncConflict.java", "diffHunk": "@@ -106,4 +106,33 @@ String getLink() {\n         builder.append(getId());\n         return builder.toString();\n     }\n+\n+    private Mono<CosmosConflictResponse> readInternal(RequestOptions options, Context context) {\n+        String spanName = \"readConflict.\" + getId();\n+        Mono<CosmosConflictResponse> responseMono = this.readInternal(options);\n+        return this.container.getDatabase().getClient().getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,\n+            this.container.getDatabase().getId(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ2NjQyMA==", "bodyText": "getId() on L111 is conflict id and not database id", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452466420", "createdAt": "2020-07-09T20:18:49Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncConflict.java", "diffHunk": "@@ -106,4 +106,33 @@ String getLink() {\n         builder.append(getId());\n         return builder.toString();\n     }\n+\n+    private Mono<CosmosConflictResponse> readInternal(RequestOptions options, Context context) {\n+        String spanName = \"readConflict.\" + getId();\n+        Mono<CosmosConflictResponse> responseMono = this.readInternal(options);\n+        return this.container.getDatabase().getClient().getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,\n+            this.container.getDatabase().getId(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4NzI4NA=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjQ4MjI0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOTo0OTozMFrOGuNNwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMDoxNzo0MVrOGvgUrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwNDE5NA==", "bodyText": "nit: space before .", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r451104194", "createdAt": "2020-07-07T19:49:30Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -628,35 +673,13 @@ public CosmosAsyncConflict getConflict(String id) {\n     }\n \n     /**\n-     * Replace the throughput provisioned for the current container.\n+     * Replace the throughput .", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 318}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ2NTgzNw==", "bodyText": "done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452465837", "createdAt": "2020-07-09T20:17:41Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -628,35 +673,13 @@ public CosmosAsyncConflict getConflict(String id) {\n     }\n \n     /**\n-     * Replace the throughput provisioned for the current container.\n+     * Replace the throughput .", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwNDE5NA=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 318}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjQ5MjYyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOTo1MjoyNVrOGuNUBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMToyNzo1OFrOGwGHkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwNTc5Nw==", "bodyText": "Do we need to define these here if they are only used once?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r451105797", "createdAt": "2020-07-07T19:52:25Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -43,12 +46,40 @@\n     private final CosmosAsyncDatabase database;\n     private final String id;\n     private final String link;\n+    private final String replaceContainerSpanName;\n+    private final String deleteContainerSpanName;\n+    private final String replaceThroughputSpanName;\n+    private final String readThroughputSpanName;\n+    private final String readContainerSpanName;\n+    private final String readItemSpanName;\n+    private final String upsertItemSpanName;\n+    private final String deleteItemSpanName;\n+    private final String replaceItemSpanName;\n+    private final String createItemSpanName;\n+    private final String readAllItemsSpanName;\n+    private final String queryItemsSpanName;\n+    private final String readAllConflictsSpanName;\n+    private final String queryConflictsSpanName;\n     private CosmosAsyncScripts scripts;\n \n     CosmosAsyncContainer(String id, CosmosAsyncDatabase database) {\n         this.id = id;\n         this.database = database;\n         this.link = getParentLink() + \"/\" + getURIPathSegment() + \"/\" + getId();\n+        this.replaceContainerSpanName = \"replaceContainer.\" + this.id;\n+        this.deleteContainerSpanName = \"deleteContainer.\" + this.id;\n+        this.replaceThroughputSpanName = \"replaceThroughput.\" + this.id;\n+        this.readThroughputSpanName = \"readThroughput.\" + this.id;\n+        this.readContainerSpanName = \"readContainer.\" + this.id;\n+        this.readItemSpanName = \"readItem.\" + this.id;\n+        this.upsertItemSpanName = \"upsertItem.\" + this.id;\n+        this.deleteItemSpanName = \"deleteItem.\" + this.id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ2NTc1Mw==", "bodyText": "This is intentionally done here , to avoid string computation on each api call.  This class has most used apis so it will save us some computation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452465753", "createdAt": "2020-07-09T20:17:31Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -43,12 +46,40 @@\n     private final CosmosAsyncDatabase database;\n     private final String id;\n     private final String link;\n+    private final String replaceContainerSpanName;\n+    private final String deleteContainerSpanName;\n+    private final String replaceThroughputSpanName;\n+    private final String readThroughputSpanName;\n+    private final String readContainerSpanName;\n+    private final String readItemSpanName;\n+    private final String upsertItemSpanName;\n+    private final String deleteItemSpanName;\n+    private final String replaceItemSpanName;\n+    private final String createItemSpanName;\n+    private final String readAllItemsSpanName;\n+    private final String queryItemsSpanName;\n+    private final String readAllConflictsSpanName;\n+    private final String queryConflictsSpanName;\n     private CosmosAsyncScripts scripts;\n \n     CosmosAsyncContainer(String id, CosmosAsyncDatabase database) {\n         this.id = id;\n         this.database = database;\n         this.link = getParentLink() + \"/\" + getURIPathSegment() + \"/\" + getId();\n+        this.replaceContainerSpanName = \"replaceContainer.\" + this.id;\n+        this.deleteContainerSpanName = \"deleteContainer.\" + this.id;\n+        this.replaceThroughputSpanName = \"replaceThroughput.\" + this.id;\n+        this.readThroughputSpanName = \"readThroughput.\" + this.id;\n+        this.readContainerSpanName = \"readContainer.\" + this.id;\n+        this.readItemSpanName = \"readItem.\" + this.id;\n+        this.upsertItemSpanName = \"upsertItem.\" + this.id;\n+        this.deleteItemSpanName = \"deleteItem.\" + this.id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwNTc5Nw=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2MDQ2MQ==", "bodyText": "It would rather help with computation being per api call than on instantiating this model?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452560461", "createdAt": "2020-07-10T00:29:16Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -43,12 +46,40 @@\n     private final CosmosAsyncDatabase database;\n     private final String id;\n     private final String link;\n+    private final String replaceContainerSpanName;\n+    private final String deleteContainerSpanName;\n+    private final String replaceThroughputSpanName;\n+    private final String readThroughputSpanName;\n+    private final String readContainerSpanName;\n+    private final String readItemSpanName;\n+    private final String upsertItemSpanName;\n+    private final String deleteItemSpanName;\n+    private final String replaceItemSpanName;\n+    private final String createItemSpanName;\n+    private final String readAllItemsSpanName;\n+    private final String queryItemsSpanName;\n+    private final String readAllConflictsSpanName;\n+    private final String queryConflictsSpanName;\n     private CosmosAsyncScripts scripts;\n \n     CosmosAsyncContainer(String id, CosmosAsyncDatabase database) {\n         this.id = id;\n         this.database = database;\n         this.link = getParentLink() + \"/\" + getURIPathSegment() + \"/\" + getId();\n+        this.replaceContainerSpanName = \"replaceContainer.\" + this.id;\n+        this.deleteContainerSpanName = \"deleteContainer.\" + this.id;\n+        this.replaceThroughputSpanName = \"replaceThroughput.\" + this.id;\n+        this.readThroughputSpanName = \"readThroughput.\" + this.id;\n+        this.readContainerSpanName = \"readContainer.\" + this.id;\n+        this.readItemSpanName = \"readItem.\" + this.id;\n+        this.upsertItemSpanName = \"upsertItem.\" + this.id;\n+        this.deleteItemSpanName = \"deleteItem.\" + this.id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwNTc5Nw=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2MzU5Mg==", "bodyText": "Yes we dont want per api computation", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452563592", "createdAt": "2020-07-10T00:42:39Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -43,12 +46,40 @@\n     private final CosmosAsyncDatabase database;\n     private final String id;\n     private final String link;\n+    private final String replaceContainerSpanName;\n+    private final String deleteContainerSpanName;\n+    private final String replaceThroughputSpanName;\n+    private final String readThroughputSpanName;\n+    private final String readContainerSpanName;\n+    private final String readItemSpanName;\n+    private final String upsertItemSpanName;\n+    private final String deleteItemSpanName;\n+    private final String replaceItemSpanName;\n+    private final String createItemSpanName;\n+    private final String readAllItemsSpanName;\n+    private final String queryItemsSpanName;\n+    private final String readAllConflictsSpanName;\n+    private final String queryConflictsSpanName;\n     private CosmosAsyncScripts scripts;\n \n     CosmosAsyncContainer(String id, CosmosAsyncDatabase database) {\n         this.id = id;\n         this.database = database;\n         this.link = getParentLink() + \"/\" + getURIPathSegment() + \"/\" + getId();\n+        this.replaceContainerSpanName = \"replaceContainer.\" + this.id;\n+        this.deleteContainerSpanName = \"deleteContainer.\" + this.id;\n+        this.replaceThroughputSpanName = \"replaceThroughput.\" + this.id;\n+        this.readThroughputSpanName = \"readThroughput.\" + this.id;\n+        this.readContainerSpanName = \"readContainer.\" + this.id;\n+        this.readItemSpanName = \"readItem.\" + this.id;\n+        this.upsertItemSpanName = \"upsertItem.\" + this.id;\n+        this.deleteItemSpanName = \"deleteItem.\" + this.id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwNTc5Nw=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2NjQ0MQ==", "bodyText": "I was saying it is better if we have computation on per api call as it would just create one span name, rthaer than all of them that the user wouldn't end up using anyway.\nAlso, this seems to be deviating from the approach we have followed in other places.\nAlso, it is a per API property vs class level?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452566441", "createdAt": "2020-07-10T00:54:32Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -43,12 +46,40 @@\n     private final CosmosAsyncDatabase database;\n     private final String id;\n     private final String link;\n+    private final String replaceContainerSpanName;\n+    private final String deleteContainerSpanName;\n+    private final String replaceThroughputSpanName;\n+    private final String readThroughputSpanName;\n+    private final String readContainerSpanName;\n+    private final String readItemSpanName;\n+    private final String upsertItemSpanName;\n+    private final String deleteItemSpanName;\n+    private final String replaceItemSpanName;\n+    private final String createItemSpanName;\n+    private final String readAllItemsSpanName;\n+    private final String queryItemsSpanName;\n+    private final String readAllConflictsSpanName;\n+    private final String queryConflictsSpanName;\n     private CosmosAsyncScripts scripts;\n \n     CosmosAsyncContainer(String id, CosmosAsyncDatabase database) {\n         this.id = id;\n         this.database = database;\n         this.link = getParentLink() + \"/\" + getURIPathSegment() + \"/\" + getId();\n+        this.replaceContainerSpanName = \"replaceContainer.\" + this.id;\n+        this.deleteContainerSpanName = \"deleteContainer.\" + this.id;\n+        this.replaceThroughputSpanName = \"replaceThroughput.\" + this.id;\n+        this.readThroughputSpanName = \"readThroughput.\" + this.id;\n+        this.readContainerSpanName = \"readContainer.\" + this.id;\n+        this.readItemSpanName = \"readItem.\" + this.id;\n+        this.upsertItemSpanName = \"upsertItem.\" + this.id;\n+        this.deleteItemSpanName = \"deleteItem.\" + this.id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwNTc5Nw=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkzOTkzNg==", "bodyText": "We are doing trade off all initializing in the starting vs computing in each api. And reason why we are doing only here , as this class has majority of customer workflow, so any gain in computation in each api will be helpful.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452939936", "createdAt": "2020-07-10T16:13:22Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -43,12 +46,40 @@\n     private final CosmosAsyncDatabase database;\n     private final String id;\n     private final String link;\n+    private final String replaceContainerSpanName;\n+    private final String deleteContainerSpanName;\n+    private final String replaceThroughputSpanName;\n+    private final String readThroughputSpanName;\n+    private final String readContainerSpanName;\n+    private final String readItemSpanName;\n+    private final String upsertItemSpanName;\n+    private final String deleteItemSpanName;\n+    private final String replaceItemSpanName;\n+    private final String createItemSpanName;\n+    private final String readAllItemsSpanName;\n+    private final String queryItemsSpanName;\n+    private final String readAllConflictsSpanName;\n+    private final String queryConflictsSpanName;\n     private CosmosAsyncScripts scripts;\n \n     CosmosAsyncContainer(String id, CosmosAsyncDatabase database) {\n         this.id = id;\n         this.database = database;\n         this.link = getParentLink() + \"/\" + getURIPathSegment() + \"/\" + getId();\n+        this.replaceContainerSpanName = \"replaceContainer.\" + this.id;\n+        this.deleteContainerSpanName = \"deleteContainer.\" + this.id;\n+        this.replaceThroughputSpanName = \"replaceThroughput.\" + this.id;\n+        this.readThroughputSpanName = \"readThroughput.\" + this.id;\n+        this.readContainerSpanName = \"readContainer.\" + this.id;\n+        this.readItemSpanName = \"readItem.\" + this.id;\n+        this.upsertItemSpanName = \"upsertItem.\" + this.id;\n+        this.deleteItemSpanName = \"deleteItem.\" + this.id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwNTc5Nw=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4NTA3NA==", "bodyText": "Cosmos will use this approach for container api for better perf", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453085074", "createdAt": "2020-07-10T21:27:58Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -43,12 +46,40 @@\n     private final CosmosAsyncDatabase database;\n     private final String id;\n     private final String link;\n+    private final String replaceContainerSpanName;\n+    private final String deleteContainerSpanName;\n+    private final String replaceThroughputSpanName;\n+    private final String readThroughputSpanName;\n+    private final String readContainerSpanName;\n+    private final String readItemSpanName;\n+    private final String upsertItemSpanName;\n+    private final String deleteItemSpanName;\n+    private final String replaceItemSpanName;\n+    private final String createItemSpanName;\n+    private final String readAllItemsSpanName;\n+    private final String queryItemsSpanName;\n+    private final String readAllConflictsSpanName;\n+    private final String queryConflictsSpanName;\n     private CosmosAsyncScripts scripts;\n \n     CosmosAsyncContainer(String id, CosmosAsyncDatabase database) {\n         this.id = id;\n         this.database = database;\n         this.link = getParentLink() + \"/\" + getURIPathSegment() + \"/\" + getId();\n+        this.replaceContainerSpanName = \"replaceContainer.\" + this.id;\n+        this.deleteContainerSpanName = \"deleteContainer.\" + this.id;\n+        this.replaceThroughputSpanName = \"replaceThroughput.\" + this.id;\n+        this.readThroughputSpanName = \"readThroughput.\" + this.id;\n+        this.readContainerSpanName = \"readContainer.\" + this.id;\n+        this.readItemSpanName = \"readItem.\" + this.id;\n+        this.upsertItemSpanName = \"upsertItem.\" + this.id;\n+        this.deleteItemSpanName = \"deleteItem.\" + this.id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwNTc5Nw=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzIxMTExOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMjowNDo0M1rOGu6ycg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMToyODoxMVrOGwGH4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg1MDg2Ng==", "bodyText": "Not completely sure if we need this dependency. I don't see it being used in the Tests either.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r451850866", "createdAt": "2020-07-08T22:04:43Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/pom.xml", "diffHunk": "@@ -128,7 +128,18 @@ Licensed under the MIT License.\n         </exclusion>\n       </exclusions>\n     </dependency>\n-\n+    <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ2NDk5OQ==", "bodyText": "This is needed in CosmosTracerTest., we are actually doing the integration testing there. And the Mockito.verify you noticed in  CosmosTracerTest is the spy tracer to valid the tracer pipeline, but the request are actual backend call.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452464999", "createdAt": "2020-07-09T20:15:51Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/pom.xml", "diffHunk": "@@ -128,7 +128,18 @@ Licensed under the MIT License.\n         </exclusion>\n       </exclusions>\n     </dependency>\n-\n+    <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg1MDg2Ng=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4NTE1NA==", "bodyText": "Removed the dependency", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453085154", "createdAt": "2020-07-10T21:28:11Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/pom.xml", "diffHunk": "@@ -128,7 +128,18 @@ Licensed under the MIT License.\n         </exclusion>\n       </exclusions>\n     </dependency>\n-\n+    <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg1MDg2Ng=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzIxNTYwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMjowNjoyNFrOGu61FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzo0NjoyNVrOG04vWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg1MTU0MQ==", "bodyText": "Could we update these tests to check for the attributes that are needed to be set for the particular request, rather than just checking for anyString()?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r451851541", "createdAt": "2020-07-08T22:06:24Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "diffHunk": "@@ -0,0 +1,245 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos;\n+\n+import com.azure.core.util.Context;\n+import com.azure.core.util.tracing.Tracer;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.LifeCycleUtils;\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.implementation.TracerProvider;\n+import com.azure.cosmos.implementation.directconnectivity.ReflectionUtils;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.CosmosStoredProcedureProperties;\n+import com.azure.cosmos.models.CosmosTriggerProperties;\n+import com.azure.cosmos.models.CosmosUserDefinedFunctionProperties;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.models.TriggerOperation;\n+import com.azure.cosmos.models.TriggerType;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import org.mockito.Matchers;\n+import org.mockito.Mockito;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.ServiceLoader;\n+import java.util.UUID;\n+\n+public class CosmosTracerTest extends TestSuiteBase {\n+    private static final String ITEM_ID = \"tracerDoc\";\n+    CosmosAsyncClient client;\n+    CosmosAsyncDatabase cosmosAsyncDatabase;\n+    CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @BeforeClass(groups = {\"emulator\"}, timeOut = SETUP_TIMEOUT)\n+    public void beforeClass() {\n+        client = new CosmosClientBuilder()\n+            .endpoint(TestConfigurations.HOST)\n+            .key(TestConfigurations.MASTER_KEY)\n+            .directMode(DirectConnectionConfig.getDefaultConfig())\n+            .buildAsyncClient();\n+        cosmosAsyncDatabase = getSharedCosmosDatabase(client);\n+        cosmosAsyncContainer = getSharedMultiPartitionCosmosContainer(client);\n+\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncClient() {\n+        TracerProvider tracer = Mockito.spy(new TracerProvider(ServiceLoader.load(Tracer.class)));\n+        ReflectionUtils.setTracerProvider(client, tracer);\n+\n+        client.createDatabaseIfNotExists(cosmosAsyncDatabase.getId()).block();\n+        Mockito.verify(tracer, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        client.readAllDatabases(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        String query = \"select * from c where c.id = '\" + cosmosAsyncDatabase.getId() + \"'\";\n+        client.queryDatabases(query, new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncDatabase() {\n+        TracerProvider tracer = Mockito.spy(new TracerProvider(ServiceLoader.load(Tracer.class)));\n+        ReflectionUtils.setTracerProvider(client, tracer);\n+\n+        cosmosAsyncDatabase.createContainerIfNotExists(cosmosAsyncContainer.getId(),\n+                \"/pk\", 5000).block();\n+        Mockito.verify(tracer, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        try {\n+            cosmosAsyncDatabase.readThroughput().block();\n+        } catch (CosmosException ex) {\n+            //do nothing\n+        }\n+\n+        Mockito.verify(tracer, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncDatabase.readAllUsers().byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncDatabase.readAllContainers().byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncContainer() {\n+        TracerProvider tracer = Mockito.spy(new TracerProvider(ServiceLoader.load(Tracer.class)));\n+        ReflectionUtils.setTracerProvider(client, tracer);\n+\n+        cosmosAsyncContainer.read().block();\n+        Mockito.verify(tracer, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        try {\n+            cosmosAsyncContainer.readThroughput().block();\n+        } catch (CosmosException ex) {\n+            //do nothing\n+        }\n+        Mockito.verify(tracer, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        InternalObjectNode item = new InternalObjectNode();\n+        item.setId(ITEM_ID);\n+        cosmosAsyncContainer.createItem(item).block();\n+        Mockito.verify(tracer, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.upsertItem(item,\n+            new CosmosItemRequestOptions()).block();\n+        Mockito.verify(tracer, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.readItem(ITEM_ID, PartitionKey.NONE,\n+            InternalObjectNode.class).block();\n+        Mockito.verify(tracer, Mockito.times(5)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.deleteItem(ITEM_ID, PartitionKey.NONE).block();\n+        Mockito.verify(tracer, Mockito.times(6)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        cosmosAsyncContainer.readAllItems(new CosmosQueryRequestOptions(), CosmosItemRequestOptions.class).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(7)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        String query = \"select * from c where c.id = '\" + ITEM_ID + \"'\";\n+        cosmosAsyncContainer.queryItems(query, new CosmosQueryRequestOptions(), CosmosItemRequestOptions.class).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(8)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncScripts() {\n+        TracerProvider tracer = Mockito.spy(new TracerProvider(ServiceLoader.load(Tracer.class)));\n+        ReflectionUtils.setTracerProvider(client, tracer);\n+\n+        cosmosAsyncContainer.getScripts().readAllStoredProcedures(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().readAllTriggers(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().readAllUserDefinedFunctions(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        CosmosUserDefinedFunctionProperties cosmosUserDefinedFunctionProperties =\n+            getCosmosUserDefinedFunctionProperties();\n+        CosmosUserDefinedFunctionProperties resultUdf =\n+            cosmosAsyncContainer.getScripts().createUserDefinedFunction(cosmosUserDefinedFunctionProperties).block().getProperties();\n+        Mockito.verify(tracer, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getUserDefinedFunction(cosmosUserDefinedFunctionProperties.getId()).read().block();\n+        Mockito.verify(tracer, Mockito.times(5)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosUserDefinedFunctionProperties.setBody(\"function() {var x = 15;}\");\n+        cosmosAsyncContainer.getScripts().getUserDefinedFunction(resultUdf.getId()).replace(resultUdf).block();\n+        Mockito.verify(tracer, Mockito.times(6)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().readAllUserDefinedFunctions(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(7)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getUserDefinedFunction(cosmosUserDefinedFunctionProperties.getId()).delete().block();\n+        Mockito.verify(tracer, Mockito.times(8)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        CosmosTriggerProperties cosmosTriggerProperties = getCosmosTriggerProperties();\n+        CosmosTriggerProperties resultTrigger =\n+            cosmosAsyncContainer.getScripts().createTrigger(cosmosTriggerProperties).block().getProperties();\n+        Mockito.verify(tracer, Mockito.times(9)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getTrigger(cosmosTriggerProperties.getId()).read().block();\n+        Mockito.verify(tracer, Mockito.times(10)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getTrigger(cosmosTriggerProperties.getId()).replace(resultTrigger).block();\n+        Mockito.verify(tracer, Mockito.times(11)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        cosmosAsyncContainer.getScripts().readAllTriggers(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(12)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getTrigger(cosmosTriggerProperties.getId()).delete().block();\n+        Mockito.verify(tracer, Mockito.times(13)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        CosmosStoredProcedureProperties procedureProperties = getCosmosStoredProcedureProperties();\n+        CosmosStoredProcedureProperties resultSproc =\n+            cosmosAsyncContainer.getScripts().createStoredProcedure(procedureProperties).block().getProperties();\n+        Mockito.verify(tracer, Mockito.times(14)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getStoredProcedure(procedureProperties.getId()).read().block();\n+        Mockito.verify(tracer, Mockito.times(15)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ2MzU3Mw==", "bodyText": "This comment was also there in last pr which was reverted , and as I stated earlier we will do much more attributes check once we will have the diagnostic tracer support pr , which is next in line. And also as mentioned in the description of this PR that scope of this pr is basically re merging earlier PR without short circuiting.\nCan we please this take this in next PR unless this is blocker. Also I manually verified  the attributes in Jagger UI .", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452463573", "createdAt": "2020-07-09T20:13:02Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "diffHunk": "@@ -0,0 +1,245 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos;\n+\n+import com.azure.core.util.Context;\n+import com.azure.core.util.tracing.Tracer;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.LifeCycleUtils;\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.implementation.TracerProvider;\n+import com.azure.cosmos.implementation.directconnectivity.ReflectionUtils;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.CosmosStoredProcedureProperties;\n+import com.azure.cosmos.models.CosmosTriggerProperties;\n+import com.azure.cosmos.models.CosmosUserDefinedFunctionProperties;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.models.TriggerOperation;\n+import com.azure.cosmos.models.TriggerType;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import org.mockito.Matchers;\n+import org.mockito.Mockito;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.ServiceLoader;\n+import java.util.UUID;\n+\n+public class CosmosTracerTest extends TestSuiteBase {\n+    private static final String ITEM_ID = \"tracerDoc\";\n+    CosmosAsyncClient client;\n+    CosmosAsyncDatabase cosmosAsyncDatabase;\n+    CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @BeforeClass(groups = {\"emulator\"}, timeOut = SETUP_TIMEOUT)\n+    public void beforeClass() {\n+        client = new CosmosClientBuilder()\n+            .endpoint(TestConfigurations.HOST)\n+            .key(TestConfigurations.MASTER_KEY)\n+            .directMode(DirectConnectionConfig.getDefaultConfig())\n+            .buildAsyncClient();\n+        cosmosAsyncDatabase = getSharedCosmosDatabase(client);\n+        cosmosAsyncContainer = getSharedMultiPartitionCosmosContainer(client);\n+\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncClient() {\n+        TracerProvider tracer = Mockito.spy(new TracerProvider(ServiceLoader.load(Tracer.class)));\n+        ReflectionUtils.setTracerProvider(client, tracer);\n+\n+        client.createDatabaseIfNotExists(cosmosAsyncDatabase.getId()).block();\n+        Mockito.verify(tracer, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        client.readAllDatabases(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        String query = \"select * from c where c.id = '\" + cosmosAsyncDatabase.getId() + \"'\";\n+        client.queryDatabases(query, new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncDatabase() {\n+        TracerProvider tracer = Mockito.spy(new TracerProvider(ServiceLoader.load(Tracer.class)));\n+        ReflectionUtils.setTracerProvider(client, tracer);\n+\n+        cosmosAsyncDatabase.createContainerIfNotExists(cosmosAsyncContainer.getId(),\n+                \"/pk\", 5000).block();\n+        Mockito.verify(tracer, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        try {\n+            cosmosAsyncDatabase.readThroughput().block();\n+        } catch (CosmosException ex) {\n+            //do nothing\n+        }\n+\n+        Mockito.verify(tracer, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncDatabase.readAllUsers().byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncDatabase.readAllContainers().byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncContainer() {\n+        TracerProvider tracer = Mockito.spy(new TracerProvider(ServiceLoader.load(Tracer.class)));\n+        ReflectionUtils.setTracerProvider(client, tracer);\n+\n+        cosmosAsyncContainer.read().block();\n+        Mockito.verify(tracer, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        try {\n+            cosmosAsyncContainer.readThroughput().block();\n+        } catch (CosmosException ex) {\n+            //do nothing\n+        }\n+        Mockito.verify(tracer, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        InternalObjectNode item = new InternalObjectNode();\n+        item.setId(ITEM_ID);\n+        cosmosAsyncContainer.createItem(item).block();\n+        Mockito.verify(tracer, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.upsertItem(item,\n+            new CosmosItemRequestOptions()).block();\n+        Mockito.verify(tracer, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.readItem(ITEM_ID, PartitionKey.NONE,\n+            InternalObjectNode.class).block();\n+        Mockito.verify(tracer, Mockito.times(5)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.deleteItem(ITEM_ID, PartitionKey.NONE).block();\n+        Mockito.verify(tracer, Mockito.times(6)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        cosmosAsyncContainer.readAllItems(new CosmosQueryRequestOptions(), CosmosItemRequestOptions.class).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(7)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        String query = \"select * from c where c.id = '\" + ITEM_ID + \"'\";\n+        cosmosAsyncContainer.queryItems(query, new CosmosQueryRequestOptions(), CosmosItemRequestOptions.class).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(8)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncScripts() {\n+        TracerProvider tracer = Mockito.spy(new TracerProvider(ServiceLoader.load(Tracer.class)));\n+        ReflectionUtils.setTracerProvider(client, tracer);\n+\n+        cosmosAsyncContainer.getScripts().readAllStoredProcedures(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().readAllTriggers(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().readAllUserDefinedFunctions(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        CosmosUserDefinedFunctionProperties cosmosUserDefinedFunctionProperties =\n+            getCosmosUserDefinedFunctionProperties();\n+        CosmosUserDefinedFunctionProperties resultUdf =\n+            cosmosAsyncContainer.getScripts().createUserDefinedFunction(cosmosUserDefinedFunctionProperties).block().getProperties();\n+        Mockito.verify(tracer, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getUserDefinedFunction(cosmosUserDefinedFunctionProperties.getId()).read().block();\n+        Mockito.verify(tracer, Mockito.times(5)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosUserDefinedFunctionProperties.setBody(\"function() {var x = 15;}\");\n+        cosmosAsyncContainer.getScripts().getUserDefinedFunction(resultUdf.getId()).replace(resultUdf).block();\n+        Mockito.verify(tracer, Mockito.times(6)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().readAllUserDefinedFunctions(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(7)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getUserDefinedFunction(cosmosUserDefinedFunctionProperties.getId()).delete().block();\n+        Mockito.verify(tracer, Mockito.times(8)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        CosmosTriggerProperties cosmosTriggerProperties = getCosmosTriggerProperties();\n+        CosmosTriggerProperties resultTrigger =\n+            cosmosAsyncContainer.getScripts().createTrigger(cosmosTriggerProperties).block().getProperties();\n+        Mockito.verify(tracer, Mockito.times(9)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getTrigger(cosmosTriggerProperties.getId()).read().block();\n+        Mockito.verify(tracer, Mockito.times(10)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getTrigger(cosmosTriggerProperties.getId()).replace(resultTrigger).block();\n+        Mockito.verify(tracer, Mockito.times(11)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        cosmosAsyncContainer.getScripts().readAllTriggers(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(12)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getTrigger(cosmosTriggerProperties.getId()).delete().block();\n+        Mockito.verify(tracer, Mockito.times(13)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        CosmosStoredProcedureProperties procedureProperties = getCosmosStoredProcedureProperties();\n+        CosmosStoredProcedureProperties resultSproc =\n+            cosmosAsyncContainer.getScripts().createStoredProcedure(procedureProperties).block().getProperties();\n+        Mockito.verify(tracer, Mockito.times(14)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getStoredProcedure(procedureProperties.getId()).read().block();\n+        Mockito.verify(tracer, Mockito.times(15)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg1MTU0MQ=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2MTY5NA==", "bodyText": "Also I manually verified the attributes in Jagger UI .\n\nSuggesting the same attributes to be checked when making the tracer calls. Sill related to this PR work and not so concerned about the diagnostic information which should be future work PR items.\nIf you want to do it ina follow up PR, please open an issue to track it. But it is still a part of this feature testing and think could go in the same PR as we already have tests that just need to be updated.\nIt should help us validate the tracing changes.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452561694", "createdAt": "2020-07-10T00:34:26Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "diffHunk": "@@ -0,0 +1,245 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos;\n+\n+import com.azure.core.util.Context;\n+import com.azure.core.util.tracing.Tracer;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.LifeCycleUtils;\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.implementation.TracerProvider;\n+import com.azure.cosmos.implementation.directconnectivity.ReflectionUtils;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.CosmosStoredProcedureProperties;\n+import com.azure.cosmos.models.CosmosTriggerProperties;\n+import com.azure.cosmos.models.CosmosUserDefinedFunctionProperties;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.models.TriggerOperation;\n+import com.azure.cosmos.models.TriggerType;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import org.mockito.Matchers;\n+import org.mockito.Mockito;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.ServiceLoader;\n+import java.util.UUID;\n+\n+public class CosmosTracerTest extends TestSuiteBase {\n+    private static final String ITEM_ID = \"tracerDoc\";\n+    CosmosAsyncClient client;\n+    CosmosAsyncDatabase cosmosAsyncDatabase;\n+    CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @BeforeClass(groups = {\"emulator\"}, timeOut = SETUP_TIMEOUT)\n+    public void beforeClass() {\n+        client = new CosmosClientBuilder()\n+            .endpoint(TestConfigurations.HOST)\n+            .key(TestConfigurations.MASTER_KEY)\n+            .directMode(DirectConnectionConfig.getDefaultConfig())\n+            .buildAsyncClient();\n+        cosmosAsyncDatabase = getSharedCosmosDatabase(client);\n+        cosmosAsyncContainer = getSharedMultiPartitionCosmosContainer(client);\n+\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncClient() {\n+        TracerProvider tracer = Mockito.spy(new TracerProvider(ServiceLoader.load(Tracer.class)));\n+        ReflectionUtils.setTracerProvider(client, tracer);\n+\n+        client.createDatabaseIfNotExists(cosmosAsyncDatabase.getId()).block();\n+        Mockito.verify(tracer, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        client.readAllDatabases(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        String query = \"select * from c where c.id = '\" + cosmosAsyncDatabase.getId() + \"'\";\n+        client.queryDatabases(query, new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncDatabase() {\n+        TracerProvider tracer = Mockito.spy(new TracerProvider(ServiceLoader.load(Tracer.class)));\n+        ReflectionUtils.setTracerProvider(client, tracer);\n+\n+        cosmosAsyncDatabase.createContainerIfNotExists(cosmosAsyncContainer.getId(),\n+                \"/pk\", 5000).block();\n+        Mockito.verify(tracer, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        try {\n+            cosmosAsyncDatabase.readThroughput().block();\n+        } catch (CosmosException ex) {\n+            //do nothing\n+        }\n+\n+        Mockito.verify(tracer, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncDatabase.readAllUsers().byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncDatabase.readAllContainers().byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncContainer() {\n+        TracerProvider tracer = Mockito.spy(new TracerProvider(ServiceLoader.load(Tracer.class)));\n+        ReflectionUtils.setTracerProvider(client, tracer);\n+\n+        cosmosAsyncContainer.read().block();\n+        Mockito.verify(tracer, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        try {\n+            cosmosAsyncContainer.readThroughput().block();\n+        } catch (CosmosException ex) {\n+            //do nothing\n+        }\n+        Mockito.verify(tracer, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        InternalObjectNode item = new InternalObjectNode();\n+        item.setId(ITEM_ID);\n+        cosmosAsyncContainer.createItem(item).block();\n+        Mockito.verify(tracer, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.upsertItem(item,\n+            new CosmosItemRequestOptions()).block();\n+        Mockito.verify(tracer, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.readItem(ITEM_ID, PartitionKey.NONE,\n+            InternalObjectNode.class).block();\n+        Mockito.verify(tracer, Mockito.times(5)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.deleteItem(ITEM_ID, PartitionKey.NONE).block();\n+        Mockito.verify(tracer, Mockito.times(6)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        cosmosAsyncContainer.readAllItems(new CosmosQueryRequestOptions(), CosmosItemRequestOptions.class).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(7)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        String query = \"select * from c where c.id = '\" + ITEM_ID + \"'\";\n+        cosmosAsyncContainer.queryItems(query, new CosmosQueryRequestOptions(), CosmosItemRequestOptions.class).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(8)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncScripts() {\n+        TracerProvider tracer = Mockito.spy(new TracerProvider(ServiceLoader.load(Tracer.class)));\n+        ReflectionUtils.setTracerProvider(client, tracer);\n+\n+        cosmosAsyncContainer.getScripts().readAllStoredProcedures(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().readAllTriggers(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().readAllUserDefinedFunctions(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        CosmosUserDefinedFunctionProperties cosmosUserDefinedFunctionProperties =\n+            getCosmosUserDefinedFunctionProperties();\n+        CosmosUserDefinedFunctionProperties resultUdf =\n+            cosmosAsyncContainer.getScripts().createUserDefinedFunction(cosmosUserDefinedFunctionProperties).block().getProperties();\n+        Mockito.verify(tracer, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getUserDefinedFunction(cosmosUserDefinedFunctionProperties.getId()).read().block();\n+        Mockito.verify(tracer, Mockito.times(5)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosUserDefinedFunctionProperties.setBody(\"function() {var x = 15;}\");\n+        cosmosAsyncContainer.getScripts().getUserDefinedFunction(resultUdf.getId()).replace(resultUdf).block();\n+        Mockito.verify(tracer, Mockito.times(6)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().readAllUserDefinedFunctions(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(7)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getUserDefinedFunction(cosmosUserDefinedFunctionProperties.getId()).delete().block();\n+        Mockito.verify(tracer, Mockito.times(8)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        CosmosTriggerProperties cosmosTriggerProperties = getCosmosTriggerProperties();\n+        CosmosTriggerProperties resultTrigger =\n+            cosmosAsyncContainer.getScripts().createTrigger(cosmosTriggerProperties).block().getProperties();\n+        Mockito.verify(tracer, Mockito.times(9)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getTrigger(cosmosTriggerProperties.getId()).read().block();\n+        Mockito.verify(tracer, Mockito.times(10)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getTrigger(cosmosTriggerProperties.getId()).replace(resultTrigger).block();\n+        Mockito.verify(tracer, Mockito.times(11)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        cosmosAsyncContainer.getScripts().readAllTriggers(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(12)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getTrigger(cosmosTriggerProperties.getId()).delete().block();\n+        Mockito.verify(tracer, Mockito.times(13)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        CosmosStoredProcedureProperties procedureProperties = getCosmosStoredProcedureProperties();\n+        CosmosStoredProcedureProperties resultSproc =\n+            cosmosAsyncContainer.getScripts().createStoredProcedure(procedureProperties).block().getProperties();\n+        Mockito.verify(tracer, Mockito.times(14)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getStoredProcedure(procedureProperties.getId()).read().block();\n+        Mockito.verify(tracer, Mockito.times(15)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg1MTU0MQ=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2NDc1MA==", "bodyText": "Checking attributes will be extension of this test class. It will be non minimal work, created github issue which is assigned to me\n#12988", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452564750", "createdAt": "2020-07-10T00:47:22Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "diffHunk": "@@ -0,0 +1,245 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos;\n+\n+import com.azure.core.util.Context;\n+import com.azure.core.util.tracing.Tracer;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.LifeCycleUtils;\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.implementation.TracerProvider;\n+import com.azure.cosmos.implementation.directconnectivity.ReflectionUtils;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.CosmosStoredProcedureProperties;\n+import com.azure.cosmos.models.CosmosTriggerProperties;\n+import com.azure.cosmos.models.CosmosUserDefinedFunctionProperties;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.models.TriggerOperation;\n+import com.azure.cosmos.models.TriggerType;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import org.mockito.Matchers;\n+import org.mockito.Mockito;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.ServiceLoader;\n+import java.util.UUID;\n+\n+public class CosmosTracerTest extends TestSuiteBase {\n+    private static final String ITEM_ID = \"tracerDoc\";\n+    CosmosAsyncClient client;\n+    CosmosAsyncDatabase cosmosAsyncDatabase;\n+    CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @BeforeClass(groups = {\"emulator\"}, timeOut = SETUP_TIMEOUT)\n+    public void beforeClass() {\n+        client = new CosmosClientBuilder()\n+            .endpoint(TestConfigurations.HOST)\n+            .key(TestConfigurations.MASTER_KEY)\n+            .directMode(DirectConnectionConfig.getDefaultConfig())\n+            .buildAsyncClient();\n+        cosmosAsyncDatabase = getSharedCosmosDatabase(client);\n+        cosmosAsyncContainer = getSharedMultiPartitionCosmosContainer(client);\n+\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncClient() {\n+        TracerProvider tracer = Mockito.spy(new TracerProvider(ServiceLoader.load(Tracer.class)));\n+        ReflectionUtils.setTracerProvider(client, tracer);\n+\n+        client.createDatabaseIfNotExists(cosmosAsyncDatabase.getId()).block();\n+        Mockito.verify(tracer, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        client.readAllDatabases(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        String query = \"select * from c where c.id = '\" + cosmosAsyncDatabase.getId() + \"'\";\n+        client.queryDatabases(query, new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncDatabase() {\n+        TracerProvider tracer = Mockito.spy(new TracerProvider(ServiceLoader.load(Tracer.class)));\n+        ReflectionUtils.setTracerProvider(client, tracer);\n+\n+        cosmosAsyncDatabase.createContainerIfNotExists(cosmosAsyncContainer.getId(),\n+                \"/pk\", 5000).block();\n+        Mockito.verify(tracer, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        try {\n+            cosmosAsyncDatabase.readThroughput().block();\n+        } catch (CosmosException ex) {\n+            //do nothing\n+        }\n+\n+        Mockito.verify(tracer, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncDatabase.readAllUsers().byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncDatabase.readAllContainers().byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncContainer() {\n+        TracerProvider tracer = Mockito.spy(new TracerProvider(ServiceLoader.load(Tracer.class)));\n+        ReflectionUtils.setTracerProvider(client, tracer);\n+\n+        cosmosAsyncContainer.read().block();\n+        Mockito.verify(tracer, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        try {\n+            cosmosAsyncContainer.readThroughput().block();\n+        } catch (CosmosException ex) {\n+            //do nothing\n+        }\n+        Mockito.verify(tracer, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        InternalObjectNode item = new InternalObjectNode();\n+        item.setId(ITEM_ID);\n+        cosmosAsyncContainer.createItem(item).block();\n+        Mockito.verify(tracer, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.upsertItem(item,\n+            new CosmosItemRequestOptions()).block();\n+        Mockito.verify(tracer, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.readItem(ITEM_ID, PartitionKey.NONE,\n+            InternalObjectNode.class).block();\n+        Mockito.verify(tracer, Mockito.times(5)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.deleteItem(ITEM_ID, PartitionKey.NONE).block();\n+        Mockito.verify(tracer, Mockito.times(6)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        cosmosAsyncContainer.readAllItems(new CosmosQueryRequestOptions(), CosmosItemRequestOptions.class).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(7)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        String query = \"select * from c where c.id = '\" + ITEM_ID + \"'\";\n+        cosmosAsyncContainer.queryItems(query, new CosmosQueryRequestOptions(), CosmosItemRequestOptions.class).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(8)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncScripts() {\n+        TracerProvider tracer = Mockito.spy(new TracerProvider(ServiceLoader.load(Tracer.class)));\n+        ReflectionUtils.setTracerProvider(client, tracer);\n+\n+        cosmosAsyncContainer.getScripts().readAllStoredProcedures(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().readAllTriggers(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().readAllUserDefinedFunctions(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        CosmosUserDefinedFunctionProperties cosmosUserDefinedFunctionProperties =\n+            getCosmosUserDefinedFunctionProperties();\n+        CosmosUserDefinedFunctionProperties resultUdf =\n+            cosmosAsyncContainer.getScripts().createUserDefinedFunction(cosmosUserDefinedFunctionProperties).block().getProperties();\n+        Mockito.verify(tracer, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getUserDefinedFunction(cosmosUserDefinedFunctionProperties.getId()).read().block();\n+        Mockito.verify(tracer, Mockito.times(5)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosUserDefinedFunctionProperties.setBody(\"function() {var x = 15;}\");\n+        cosmosAsyncContainer.getScripts().getUserDefinedFunction(resultUdf.getId()).replace(resultUdf).block();\n+        Mockito.verify(tracer, Mockito.times(6)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().readAllUserDefinedFunctions(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(7)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getUserDefinedFunction(cosmosUserDefinedFunctionProperties.getId()).delete().block();\n+        Mockito.verify(tracer, Mockito.times(8)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        CosmosTriggerProperties cosmosTriggerProperties = getCosmosTriggerProperties();\n+        CosmosTriggerProperties resultTrigger =\n+            cosmosAsyncContainer.getScripts().createTrigger(cosmosTriggerProperties).block().getProperties();\n+        Mockito.verify(tracer, Mockito.times(9)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getTrigger(cosmosTriggerProperties.getId()).read().block();\n+        Mockito.verify(tracer, Mockito.times(10)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getTrigger(cosmosTriggerProperties.getId()).replace(resultTrigger).block();\n+        Mockito.verify(tracer, Mockito.times(11)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        cosmosAsyncContainer.getScripts().readAllTriggers(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(12)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getTrigger(cosmosTriggerProperties.getId()).delete().block();\n+        Mockito.verify(tracer, Mockito.times(13)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        CosmosStoredProcedureProperties procedureProperties = getCosmosStoredProcedureProperties();\n+        CosmosStoredProcedureProperties resultSproc =\n+            cosmosAsyncContainer.getScripts().createStoredProcedure(procedureProperties).block().getProperties();\n+        Mockito.verify(tracer, Mockito.times(14)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getStoredProcedure(procedureProperties.getId()).read().block();\n+        Mockito.verify(tracer, Mockito.times(15)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg1MTU0MQ=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwODc2MQ==", "bodyText": "Attributes checking is added in the test case", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r458108761", "createdAt": "2020-07-21T13:46:25Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "diffHunk": "@@ -0,0 +1,245 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos;\n+\n+import com.azure.core.util.Context;\n+import com.azure.core.util.tracing.Tracer;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.LifeCycleUtils;\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.implementation.TracerProvider;\n+import com.azure.cosmos.implementation.directconnectivity.ReflectionUtils;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.CosmosStoredProcedureProperties;\n+import com.azure.cosmos.models.CosmosTriggerProperties;\n+import com.azure.cosmos.models.CosmosUserDefinedFunctionProperties;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.models.TriggerOperation;\n+import com.azure.cosmos.models.TriggerType;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import org.mockito.Matchers;\n+import org.mockito.Mockito;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.ServiceLoader;\n+import java.util.UUID;\n+\n+public class CosmosTracerTest extends TestSuiteBase {\n+    private static final String ITEM_ID = \"tracerDoc\";\n+    CosmosAsyncClient client;\n+    CosmosAsyncDatabase cosmosAsyncDatabase;\n+    CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @BeforeClass(groups = {\"emulator\"}, timeOut = SETUP_TIMEOUT)\n+    public void beforeClass() {\n+        client = new CosmosClientBuilder()\n+            .endpoint(TestConfigurations.HOST)\n+            .key(TestConfigurations.MASTER_KEY)\n+            .directMode(DirectConnectionConfig.getDefaultConfig())\n+            .buildAsyncClient();\n+        cosmosAsyncDatabase = getSharedCosmosDatabase(client);\n+        cosmosAsyncContainer = getSharedMultiPartitionCosmosContainer(client);\n+\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncClient() {\n+        TracerProvider tracer = Mockito.spy(new TracerProvider(ServiceLoader.load(Tracer.class)));\n+        ReflectionUtils.setTracerProvider(client, tracer);\n+\n+        client.createDatabaseIfNotExists(cosmosAsyncDatabase.getId()).block();\n+        Mockito.verify(tracer, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        client.readAllDatabases(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        String query = \"select * from c where c.id = '\" + cosmosAsyncDatabase.getId() + \"'\";\n+        client.queryDatabases(query, new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncDatabase() {\n+        TracerProvider tracer = Mockito.spy(new TracerProvider(ServiceLoader.load(Tracer.class)));\n+        ReflectionUtils.setTracerProvider(client, tracer);\n+\n+        cosmosAsyncDatabase.createContainerIfNotExists(cosmosAsyncContainer.getId(),\n+                \"/pk\", 5000).block();\n+        Mockito.verify(tracer, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        try {\n+            cosmosAsyncDatabase.readThroughput().block();\n+        } catch (CosmosException ex) {\n+            //do nothing\n+        }\n+\n+        Mockito.verify(tracer, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncDatabase.readAllUsers().byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncDatabase.readAllContainers().byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncContainer() {\n+        TracerProvider tracer = Mockito.spy(new TracerProvider(ServiceLoader.load(Tracer.class)));\n+        ReflectionUtils.setTracerProvider(client, tracer);\n+\n+        cosmosAsyncContainer.read().block();\n+        Mockito.verify(tracer, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        try {\n+            cosmosAsyncContainer.readThroughput().block();\n+        } catch (CosmosException ex) {\n+            //do nothing\n+        }\n+        Mockito.verify(tracer, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        InternalObjectNode item = new InternalObjectNode();\n+        item.setId(ITEM_ID);\n+        cosmosAsyncContainer.createItem(item).block();\n+        Mockito.verify(tracer, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.upsertItem(item,\n+            new CosmosItemRequestOptions()).block();\n+        Mockito.verify(tracer, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.readItem(ITEM_ID, PartitionKey.NONE,\n+            InternalObjectNode.class).block();\n+        Mockito.verify(tracer, Mockito.times(5)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.deleteItem(ITEM_ID, PartitionKey.NONE).block();\n+        Mockito.verify(tracer, Mockito.times(6)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        cosmosAsyncContainer.readAllItems(new CosmosQueryRequestOptions(), CosmosItemRequestOptions.class).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(7)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        String query = \"select * from c where c.id = '\" + ITEM_ID + \"'\";\n+        cosmosAsyncContainer.queryItems(query, new CosmosQueryRequestOptions(), CosmosItemRequestOptions.class).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(8)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncScripts() {\n+        TracerProvider tracer = Mockito.spy(new TracerProvider(ServiceLoader.load(Tracer.class)));\n+        ReflectionUtils.setTracerProvider(client, tracer);\n+\n+        cosmosAsyncContainer.getScripts().readAllStoredProcedures(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().readAllTriggers(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().readAllUserDefinedFunctions(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        CosmosUserDefinedFunctionProperties cosmosUserDefinedFunctionProperties =\n+            getCosmosUserDefinedFunctionProperties();\n+        CosmosUserDefinedFunctionProperties resultUdf =\n+            cosmosAsyncContainer.getScripts().createUserDefinedFunction(cosmosUserDefinedFunctionProperties).block().getProperties();\n+        Mockito.verify(tracer, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getUserDefinedFunction(cosmosUserDefinedFunctionProperties.getId()).read().block();\n+        Mockito.verify(tracer, Mockito.times(5)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosUserDefinedFunctionProperties.setBody(\"function() {var x = 15;}\");\n+        cosmosAsyncContainer.getScripts().getUserDefinedFunction(resultUdf.getId()).replace(resultUdf).block();\n+        Mockito.verify(tracer, Mockito.times(6)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().readAllUserDefinedFunctions(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(7)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getUserDefinedFunction(cosmosUserDefinedFunctionProperties.getId()).delete().block();\n+        Mockito.verify(tracer, Mockito.times(8)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        CosmosTriggerProperties cosmosTriggerProperties = getCosmosTriggerProperties();\n+        CosmosTriggerProperties resultTrigger =\n+            cosmosAsyncContainer.getScripts().createTrigger(cosmosTriggerProperties).block().getProperties();\n+        Mockito.verify(tracer, Mockito.times(9)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getTrigger(cosmosTriggerProperties.getId()).read().block();\n+        Mockito.verify(tracer, Mockito.times(10)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getTrigger(cosmosTriggerProperties.getId()).replace(resultTrigger).block();\n+        Mockito.verify(tracer, Mockito.times(11)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        cosmosAsyncContainer.getScripts().readAllTriggers(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracer, Mockito.times(12)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getTrigger(cosmosTriggerProperties.getId()).delete().block();\n+        Mockito.verify(tracer, Mockito.times(13)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        CosmosStoredProcedureProperties procedureProperties = getCosmosStoredProcedureProperties();\n+        CosmosStoredProcedureProperties resultSproc =\n+            cosmosAsyncContainer.getScripts().createStoredProcedure(procedureProperties).block().getProperties();\n+        Mockito.verify(tracer, Mockito.times(14)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getStoredProcedure(procedureProperties.getId()).read().block();\n+        Mockito.verify(tracer, Mockito.times(15)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg1MTU0MQ=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzIxOTA0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ReadFeedExceptionHandlingTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMjowNzozMlrOGu629w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMToyODozNFrOGwGIWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg1MjAyMw==", "bodyText": "what update is this related to?\nWe don't validate anything related to tracing here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r451852023", "createdAt": "2020-07-08T22:07:32Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ReadFeedExceptionHandlingTest.java", "diffHunk": "@@ -46,7 +49,10 @@ public void readFeedException() throws Exception {\n                                                                     .mergeWith(Flux.fromIterable(frps));\n \n         final CosmosAsyncClientWrapper mockedClientWrapper = Mockito.spy(new CosmosAsyncClientWrapper(client));\n-        Mockito.when(mockedClientWrapper.readAllDatabases()).thenReturn(UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> response));\n+        Mockito.when(mockedClientWrapper.readAllDatabases()).thenReturn(UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            pagedFluxOptions.setTracerInformation(new TracerProvider(ServiceLoader.load(Tracer.class)), \"testSpan\", \"testEndpoint,\", \"testDb\");\n+            return response;\n+        }));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ2MTE3NA==", "bodyText": "This is mock readAllDatabases() api which does not set tracer information. With the new tracer code all the query should go through tracer code pipeline and this is mandatory. If we dont do this, it will return null pointer  in page flux here .\nWe can avoid this by doing null check in page flux, but the problem comes if someone add new query api , there are chances they will forget to send the request via tracer pipeline, and we don't want this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452461174", "createdAt": "2020-07-09T20:08:14Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ReadFeedExceptionHandlingTest.java", "diffHunk": "@@ -46,7 +49,10 @@ public void readFeedException() throws Exception {\n                                                                     .mergeWith(Flux.fromIterable(frps));\n \n         final CosmosAsyncClientWrapper mockedClientWrapper = Mockito.spy(new CosmosAsyncClientWrapper(client));\n-        Mockito.when(mockedClientWrapper.readAllDatabases()).thenReturn(UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> response));\n+        Mockito.when(mockedClientWrapper.readAllDatabases()).thenReturn(UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            pagedFluxOptions.setTracerInformation(new TracerProvider(ServiceLoader.load(Tracer.class)), \"testSpan\", \"testEndpoint,\", \"testDb\");\n+            return response;\n+        }));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg1MjAyMw=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4NTI3NA==", "bodyText": "Explained offline", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453085274", "createdAt": "2020-07-10T21:28:34Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ReadFeedExceptionHandlingTest.java", "diffHunk": "@@ -46,7 +49,10 @@ public void readFeedException() throws Exception {\n                                                                     .mergeWith(Flux.fromIterable(frps));\n \n         final CosmosAsyncClientWrapper mockedClientWrapper = Mockito.spy(new CosmosAsyncClientWrapper(client));\n-        Mockito.when(mockedClientWrapper.readAllDatabases()).thenReturn(UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> response));\n+        Mockito.when(mockedClientWrapper.readAllDatabases()).thenReturn(UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            pagedFluxOptions.setTracerInformation(new TracerProvider(ServiceLoader.load(Tracer.class)), \"testSpan\", \"testEndpoint,\", \"testDb\");\n+            return response;\n+        }));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg1MjAyMw=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzY2Mzg3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMTo1Mzo1M1rOGu-9Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjo0NDoxN1rOGw9TYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkxOTIwNg==", "bodyText": "From a code style perspective, it would be better to do lines 255-257 and 260 on a single line:\nfinal CosmosDatabaseRequestOptions requestOptions = options == null ? new CosmosDatabaseRequestOptions() : options;", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r451919206", "createdAt": "2020-07-09T01:53:53Z", "author": {"login": "JonathanGiles"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -274,9 +257,8 @@ boolean isContentResponseOnWriteEnabled() {\n         }\n         Database wrappedDatabase = new Database();\n         wrappedDatabase.setId(databaseProperties.getId());\n-        return asyncDocumentClient.createDatabase(wrappedDatabase, ModelBridgeInternal.toRequestOptions(options))\n-                   .map(databaseResourceResponse -> ModelBridgeInternal.createCosmosDatabaseResponse(databaseResourceResponse))\n-                   .single();\n+        final CosmosDatabaseRequestOptions requestOptions = options;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ1NjgzMA==", "bodyText": "done, here and other places", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452456830", "createdAt": "2020-07-09T19:58:53Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -274,9 +257,8 @@ boolean isContentResponseOnWriteEnabled() {\n         }\n         Database wrappedDatabase = new Database();\n         wrappedDatabase.setId(databaseProperties.getId());\n-        return asyncDocumentClient.createDatabase(wrappedDatabase, ModelBridgeInternal.toRequestOptions(options))\n-                   .map(databaseResourceResponse -> ModelBridgeInternal.createCosmosDatabaseResponse(databaseResourceResponse))\n-                   .single();\n+        final CosmosDatabaseRequestOptions requestOptions = options;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkxOTIwNg=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk4OTIxNg==", "bodyText": "Any possibility of including such as style guides?\nVS has some (only works in IDE) but not as gates as of now.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453989216", "createdAt": "2020-07-13T22:44:17Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -274,9 +257,8 @@ boolean isContentResponseOnWriteEnabled() {\n         }\n         Database wrappedDatabase = new Database();\n         wrappedDatabase.setId(databaseProperties.getId());\n-        return asyncDocumentClient.createDatabase(wrappedDatabase, ModelBridgeInternal.toRequestOptions(options))\n-                   .map(databaseResourceResponse -> ModelBridgeInternal.createCosmosDatabaseResponse(databaseResourceResponse))\n-                   .single();\n+        final CosmosDatabaseRequestOptions requestOptions = options;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkxOTIwNg=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzY2NTU0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMTo1NDo0N1rOGu--ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMDoyODoyM1rOGvmFhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkxOTQ2MA==", "bodyText": "Could you save a variable declaration and set by just directly passing the string into the method call?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r451919460", "createdAt": "2020-07-09T01:54:47Z", "author": {"login": "JonathanGiles"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -397,12 +378,14 @@ boolean isContentResponseOnWriteEnabled() {\n      */\n     CosmosPagedFlux<CosmosDatabaseProperties> readAllDatabases(CosmosQueryRequestOptions options) {\n         return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"readAllDatabases\";\n+            pagedFluxOptions.setTracerInformation(this.tracerProvider, spanName, this.serviceEndpoint, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2MDI2MA==", "bodyText": "done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452560260", "createdAt": "2020-07-10T00:28:23Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -397,12 +378,14 @@ boolean isContentResponseOnWriteEnabled() {\n      */\n     CosmosPagedFlux<CosmosDatabaseProperties> readAllDatabases(CosmosQueryRequestOptions options) {\n         return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"readAllDatabases\";\n+            pagedFluxOptions.setTracerInformation(this.tracerProvider, spanName, this.serviceEndpoint, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkxOTQ2MA=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzY3MTk2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMTo1ODozN1rOGu_CYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxOTo1ODoyNlrOGvfwig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkyMDQ4Mg==", "bodyText": "Why are you removing full stops? We should keep them", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r451920482", "createdAt": "2020-07-09T01:58:37Z", "author": {"login": "JonathanGiles"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -628,35 +673,13 @@ public CosmosAsyncConflict getConflict(String id) {\n     }\n \n     /**\n-     * Replace the throughput provisioned for the current container.\n+     * Replace the throughput .\n      *\n-     * @param throughputProperties the throughput properties.\n-     * @return the mono containing throughput response.\n+     * @param throughputProperties the throughput properties\n+     * @return the mono containing throughput response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 323}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ1NjU4Ng==", "bodyText": "done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452456586", "createdAt": "2020-07-09T19:58:26Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -628,35 +673,13 @@ public CosmosAsyncConflict getConflict(String id) {\n     }\n \n     /**\n-     * Replace the throughput provisioned for the current container.\n+     * Replace the throughput .\n      *\n-     * @param throughputProperties the throughput properties.\n-     * @return the mono containing throughput response.\n+     * @param throughputProperties the throughput properties\n+     * @return the mono containing throughput response", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkyMDQ4Mg=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 323}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzcyMDY5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/CosmosPagedFluxOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMjoyNzoxN1rOGu_fqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxOTo1ODoxOFrOGvfwTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkyNzk3Nw==", "bodyText": "This feels out of place, but because it is implementation API it is fine.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r451927977", "createdAt": "2020-07-09T02:27:17Z", "author": {"login": "JonathanGiles"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/CosmosPagedFluxOptions.java", "diffHunk": "@@ -57,4 +64,43 @@ public CosmosPagedFluxOptions setMaxItemCount(Integer maxItemCount) {\n         this.maxItemCount = maxItemCount;\n         return this;\n     }\n+\n+    /**\n+     * Gets the tracer provider\n+     * @return tracerProvider\n+     */\n+    public TracerProvider getTracerProvider() {\n+        return this.tracerProvider;\n+    }\n+\n+    /**\n+     * Gets the tracer span name\n+     * @return tracerSpanName\n+     */\n+    public String getTracerSpanName() {\n+        return tracerSpanName;\n+    }\n+\n+    /**\n+     * Gets the databaseId\n+     * @return databaseId\n+     */\n+    public String getDatabaseId() {\n+        return databaseId;\n+    }\n+\n+    /**\n+     * Gets the service end point\n+     * @return serviceEndpoint\n+     */\n+    public String getServiceEndpoint() {\n+        return serviceEndpoint;\n+    }\n+\n+    public void setTracerInformation(TracerProvider tracerProvider, String tracerSpanName, String serviceEndpoint, String databaseId) {\n+        this.databaseId = databaseId;\n+        this.serviceEndpoint = serviceEndpoint;\n+        this.tracerSpanName = tracerSpanName;\n+        this.tracerProvider = tracerProvider;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ1NjUyNg==", "bodyText": "Yes this is  an implementation api.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452456526", "createdAt": "2020-07-09T19:58:18Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/CosmosPagedFluxOptions.java", "diffHunk": "@@ -57,4 +64,43 @@ public CosmosPagedFluxOptions setMaxItemCount(Integer maxItemCount) {\n         this.maxItemCount = maxItemCount;\n         return this;\n     }\n+\n+    /**\n+     * Gets the tracer provider\n+     * @return tracerProvider\n+     */\n+    public TracerProvider getTracerProvider() {\n+        return this.tracerProvider;\n+    }\n+\n+    /**\n+     * Gets the tracer span name\n+     * @return tracerSpanName\n+     */\n+    public String getTracerSpanName() {\n+        return tracerSpanName;\n+    }\n+\n+    /**\n+     * Gets the databaseId\n+     * @return databaseId\n+     */\n+    public String getDatabaseId() {\n+        return databaseId;\n+    }\n+\n+    /**\n+     * Gets the service end point\n+     * @return serviceEndpoint\n+     */\n+    public String getServiceEndpoint() {\n+        return serviceEndpoint;\n+    }\n+\n+    public void setTracerInformation(TracerProvider tracerProvider, String tracerSpanName, String serviceEndpoint, String databaseId) {\n+        this.databaseId = databaseId;\n+        this.serviceEndpoint = serviceEndpoint;\n+        this.tracerSpanName = tracerSpanName;\n+        this.tracerProvider = tracerProvider;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkyNzk3Nw=="}, "originalCommit": {"oid": "eb398d9091cf47354129e61a5d90040fadd6f0d0"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTczOTU5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMDo0MTo1NVrOGvmR-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDo1NzowOFrOGwFaqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2MzQ1MQ==", "bodyText": "Can this method call the method on L204", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452563451", "createdAt": "2020-07-10T00:41:55Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -209,21 +217,7 @@ boolean isContentResponseOnWriteEnabled() {\n      * an error.\n      */\n     public Mono<CosmosDatabaseResponse> createDatabaseIfNotExists(String id) {\n-        return createDatabaseIfNotExistsInternal(getDatabase(id));\n-    }\n-\n-    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(CosmosAsyncDatabase database) {\n-        return database.read().onErrorResume(exception -> {\n-            final Throwable unwrappedException = Exceptions.unwrap(exception);\n-            if (unwrappedException instanceof CosmosException) {\n-                final CosmosException cosmosException = (CosmosException) unwrappedException;\n-                if (cosmosException.getStatusCode() == HttpConstants.StatusCodes.NOTFOUND) {\n-                    return createDatabase(new CosmosDatabaseProperties(database.getId()),\n-                        new CosmosDatabaseRequestOptions());\n-                }\n-            }\n-            return Mono.error(unwrappedException);\n-        });\n+        return withContext(context -> createDatabaseIfNotExistsInternal(getDatabase(id), null, context));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkzNzQ2OA==", "bodyText": "We could do that, but avoiding nesting call in public api. Also it would be easier to read and debug. And our tracer goal getting fulfill with current design, so if you don't mind, can we keep current state?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452937468", "createdAt": "2020-07-10T16:08:38Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -209,21 +217,7 @@ boolean isContentResponseOnWriteEnabled() {\n      * an error.\n      */\n     public Mono<CosmosDatabaseResponse> createDatabaseIfNotExists(String id) {\n-        return createDatabaseIfNotExistsInternal(getDatabase(id));\n-    }\n-\n-    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(CosmosAsyncDatabase database) {\n-        return database.read().onErrorResume(exception -> {\n-            final Throwable unwrappedException = Exceptions.unwrap(exception);\n-            if (unwrappedException instanceof CosmosException) {\n-                final CosmosException cosmosException = (CosmosException) unwrappedException;\n-                if (cosmosException.getStatusCode() == HttpConstants.StatusCodes.NOTFOUND) {\n-                    return createDatabase(new CosmosDatabaseProperties(database.getId()),\n-                        new CosmosDatabaseRequestOptions());\n-                }\n-            }\n-            return Mono.error(unwrappedException);\n-        });\n+        return withContext(context -> createDatabaseIfNotExistsInternal(getDatabase(id), null, context));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2MzQ1MQ=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3MjkyNQ==", "bodyText": "@kushagraThapar Could you clarify if this is a design decision to not reuse the methods here?\nAnd if it is, why is it followed in some files and not all the time?\nMore context - #12867 (comment)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453072925", "createdAt": "2020-07-10T20:55:35Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -209,21 +217,7 @@ boolean isContentResponseOnWriteEnabled() {\n      * an error.\n      */\n     public Mono<CosmosDatabaseResponse> createDatabaseIfNotExists(String id) {\n-        return createDatabaseIfNotExistsInternal(getDatabase(id));\n-    }\n-\n-    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(CosmosAsyncDatabase database) {\n-        return database.read().onErrorResume(exception -> {\n-            final Throwable unwrappedException = Exceptions.unwrap(exception);\n-            if (unwrappedException instanceof CosmosException) {\n-                final CosmosException cosmosException = (CosmosException) unwrappedException;\n-                if (cosmosException.getStatusCode() == HttpConstants.StatusCodes.NOTFOUND) {\n-                    return createDatabase(new CosmosDatabaseProperties(database.getId()),\n-                        new CosmosDatabaseRequestOptions());\n-                }\n-            }\n-            return Mono.error(unwrappedException);\n-        });\n+        return withContext(context -> createDatabaseIfNotExistsInternal(getDatabase(id), null, context));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2MzQ1MQ=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3MzU3Nw==", "bodyText": "Sure we can, but we should not touch public surface implementations here as this PR should only target the tracing APIs.\nI have created a work item for this refactor work : #13031", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453073577", "createdAt": "2020-07-10T20:57:08Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -209,21 +217,7 @@ boolean isContentResponseOnWriteEnabled() {\n      * an error.\n      */\n     public Mono<CosmosDatabaseResponse> createDatabaseIfNotExists(String id) {\n-        return createDatabaseIfNotExistsInternal(getDatabase(id));\n-    }\n-\n-    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(CosmosAsyncDatabase database) {\n-        return database.read().onErrorResume(exception -> {\n-            final Throwable unwrappedException = Exceptions.unwrap(exception);\n-            if (unwrappedException instanceof CosmosException) {\n-                final CosmosException cosmosException = (CosmosException) unwrappedException;\n-                if (cosmosException.getStatusCode() == HttpConstants.StatusCodes.NOTFOUND) {\n-                    return createDatabase(new CosmosDatabaseProperties(database.getId()),\n-                        new CosmosDatabaseRequestOptions());\n-                }\n-            }\n-            return Mono.error(unwrappedException);\n-        });\n+        return withContext(context -> createDatabaseIfNotExistsInternal(getDatabase(id), null, context));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2MzQ1MQ=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTc0Njg0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMDo0NjowN1rOGvmV6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDo1NzoyOVrOGwFbSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2NDQ1Nw==", "bodyText": "same here.\nSome methods could be reused instead of having the code repetition of withContext", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452564457", "createdAt": "2020-07-10T00:46:07Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -240,19 +234,8 @@ boolean isContentResponseOnWriteEnabled() {\n      * @return the mono.\n      */\n     public Mono<CosmosDatabaseResponse> createDatabaseIfNotExists(String id, ThroughputProperties throughputProperties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkzODI5NA==", "bodyText": "We could do that, but avoiding nesting call in public api. Also it would be easier to read and debug. And our tracer goal getting fulfill with current design, so if you don't mind, can we keep it in current state?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452938294", "createdAt": "2020-07-10T16:10:12Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -240,19 +234,8 @@ boolean isContentResponseOnWriteEnabled() {\n      * @return the mono.\n      */\n     public Mono<CosmosDatabaseResponse> createDatabaseIfNotExists(String id, ThroughputProperties throughputProperties) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2NDQ1Nw=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3MzczNw==", "bodyText": "same here, tracking the work item here: #13031", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453073737", "createdAt": "2020-07-10T20:57:29Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -240,19 +234,8 @@ boolean isContentResponseOnWriteEnabled() {\n      * @return the mono.\n      */\n     public Mono<CosmosDatabaseResponse> createDatabaseIfNotExists(String id, ThroughputProperties throughputProperties) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2NDQ1Nw=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTc0ODM4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMDo0NzowNFrOGvmWwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDo1NzozNlrOGwFbeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2NDY3Mg==", "bodyText": "same here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452564672", "createdAt": "2020-07-10T00:47:04Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -328,12 +307,12 @@ boolean isContentResponseOnWriteEnabled() {\n         if (options == null) {\n             options = new CosmosDatabaseRequestOptions();\n         }\n+\n         ModelBridgeInternal.setThroughputProperties(options, throughputProperties);\n         Database wrappedDatabase = new Database();\n         wrappedDatabase.setId(databaseProperties.getId());\n-        return asyncDocumentClient.createDatabase(wrappedDatabase, ModelBridgeInternal.toRequestOptions(options))\n-                   .map(databaseResourceResponse -> ModelBridgeInternal.createCosmosDatabaseResponse(databaseResourceResponse))\n-                   .single();\n+        final CosmosDatabaseRequestOptions requestOptions = options;\n+        return withContext(context -> createDatabaseInternal(wrappedDatabase, requestOptions, context));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3Mzc4NQ==", "bodyText": "same here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453073785", "createdAt": "2020-07-10T20:57:36Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -328,12 +307,12 @@ boolean isContentResponseOnWriteEnabled() {\n         if (options == null) {\n             options = new CosmosDatabaseRequestOptions();\n         }\n+\n         ModelBridgeInternal.setThroughputProperties(options, throughputProperties);\n         Database wrappedDatabase = new Database();\n         wrappedDatabase.setId(databaseProperties.getId());\n-        return asyncDocumentClient.createDatabase(wrappedDatabase, ModelBridgeInternal.toRequestOptions(options))\n-                   .map(databaseResourceResponse -> ModelBridgeInternal.createCosmosDatabaseResponse(databaseResourceResponse))\n-                   .single();\n+        final CosmosDatabaseRequestOptions requestOptions = options;\n+        return withContext(context -> createDatabaseInternal(wrappedDatabase, requestOptions, context));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2NDY3Mg=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTc1MTk5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMDo0OToxMFrOGvmYyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzowNDo1NFrOGwxnmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2NTE5Mw==", "bodyText": "Cannot comment but the package-private method on L348 doesn't seem to be used anywhere?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452565193", "createdAt": "2020-07-10T00:49:10Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -397,12 +376,13 @@ boolean isContentResponseOnWriteEnabled() {\n      */\n     CosmosPagedFlux<CosmosDatabaseProperties> readAllDatabases(CosmosQueryRequestOptions options) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2ODYwMQ==", "bodyText": "it was there in master too , however delete it now", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452968601", "createdAt": "2020-07-10T17:10:36Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -397,12 +376,13 @@ boolean isContentResponseOnWriteEnabled() {\n      */\n     CosmosPagedFlux<CosmosDatabaseProperties> readAllDatabases(CosmosQueryRequestOptions options) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2NTE5Mw=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3NDk2OA==", "bodyText": "We need to keep those APIs @samvaity  - because they will be introduced later.\nWe intentionally made them package-private. They will be introduced in upcoming versions once we have the correct \"read feed\" implementation.\n@simplynaveen20 - please introduce it back.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453074968", "createdAt": "2020-07-10T21:00:28Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -397,12 +376,13 @@ boolean isContentResponseOnWriteEnabled() {\n      */\n     CosmosPagedFlux<CosmosDatabaseProperties> readAllDatabases(CosmosQueryRequestOptions options) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2NTE5Mw=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5Nzc4Nw==", "bodyText": "I think Sameekha was taking about createDatabase on L348 , it is not needed . so we good here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453797787", "createdAt": "2020-07-13T17:04:54Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -397,12 +376,13 @@ boolean isContentResponseOnWriteEnabled() {\n      */\n     CosmosPagedFlux<CosmosDatabaseProperties> readAllDatabases(CosmosQueryRequestOptions options) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2NTE5Mw=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTc1NTcwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMDo1MToxOFrOGvma8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTo1Mzo0OVrOGv8nmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2NTc0Ng==", "bodyText": "This public API seems to be missing tracing instrumentation?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452565746", "createdAt": "2020-07-10T00:51:18Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -432,7 +412,7 @@ boolean isContentResponseOnWriteEnabled() {\n      * @return a {@link CosmosPagedFlux} containing one or several feed response pages of read databases or an error.\n      */\n     public CosmosPagedFlux<CosmosDatabaseProperties> queryDatabases(String query, CosmosQueryRequestOptions options) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyOTQzMw==", "bodyText": "This is query code and all tracer logic in query is here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452929433", "createdAt": "2020-07-10T15:53:49Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -432,7 +412,7 @@ boolean isContentResponseOnWriteEnabled() {\n      * @return a {@link CosmosPagedFlux} containing one or several feed response pages of read databases or an error.\n      */\n     public CosmosPagedFlux<CosmosDatabaseProperties> queryDatabases(String query, CosmosQueryRequestOptions options) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2NTc0Ng=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTc2OTkwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMTowMDowOVrOGvmjQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMzoyMjoxNVrOGwIKlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2Nzg3Mg==", "bodyText": "I see we don't set the context object with nested data info for this method.\nI was wondering if it would be a better approach to always set the key but the value should determine if the call is nested or not. That should give us a more robust way to future developer don't miss this out.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452567872", "createdAt": "2020-07-10T01:00:09Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -473,4 +447,76 @@ public CosmosAsyncDatabase getDatabase(String id) {\n     public void close() {\n         asyncDocumentClient.close();\n     }\n+\n+    TracerProvider getTracerProvider(){\n+        return this.tracerProvider;\n+    }\n+\n+    private CosmosPagedFlux<CosmosDatabaseProperties> queryDatabasesInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options){\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            pagedFluxOptions.setTracerInformation(this.tracerProvider, \"queryDatabases\", this.serviceEndpoint, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyODg4OQ==", "bodyText": "I think this comment is misplaced, please clarify. This is query code and all tracer logic in query is here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452928889", "createdAt": "2020-07-10T15:52:46Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -473,4 +447,76 @@ public CosmosAsyncDatabase getDatabase(String id) {\n     public void close() {\n         asyncDocumentClient.close();\n     }\n+\n+    TracerProvider getTracerProvider(){\n+        return this.tracerProvider;\n+    }\n+\n+    private CosmosPagedFlux<CosmosDatabaseProperties> queryDatabasesInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options){\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            pagedFluxOptions.setTracerInformation(this.tracerProvider, \"queryDatabases\", this.serviceEndpoint, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2Nzg3Mg=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4NTY4NQ==", "bodyText": "We will go by this approach,i.e adding nested data only on the api it needed , as this gave the best perf result, and adding data on all api might have an impact .", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453085685", "createdAt": "2020-07-10T21:29:48Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -473,4 +447,76 @@ public CosmosAsyncDatabase getDatabase(String id) {\n     public void close() {\n         asyncDocumentClient.close();\n     }\n+\n+    TracerProvider getTracerProvider(){\n+        return this.tracerProvider;\n+    }\n+\n+    private CosmosPagedFlux<CosmosDatabaseProperties> queryDatabasesInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options){\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            pagedFluxOptions.setTracerInformation(this.tracerProvider, \"queryDatabases\", this.serviceEndpoint, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2Nzg3Mg=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzExODYxNQ==", "bodyText": "@samvaity - agreed, we can add nested / non-nested information on context always irrespective of the API if it doesn't result in a perf hit. Added it to this issue: #13031", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453118615", "createdAt": "2020-07-10T23:22:15Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -473,4 +447,76 @@ public CosmosAsyncDatabase getDatabase(String id) {\n     public void close() {\n         asyncDocumentClient.close();\n     }\n+\n+    TracerProvider getTracerProvider(){\n+        return this.tracerProvider;\n+    }\n+\n+    private CosmosPagedFlux<CosmosDatabaseProperties> queryDatabasesInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options){\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            pagedFluxOptions.setTracerInformation(this.tracerProvider, \"queryDatabases\", this.serviceEndpoint, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2Nzg3Mg=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTc3NDc0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMTowMzoyNlrOGvmmCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMTowMjowNlrOGwFi5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2ODU4Ng==", "bodyText": "nit: doesn;t need the extra variable assignment.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452568586", "createdAt": "2020-07-10T01:03:26Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -473,4 +447,76 @@ public CosmosAsyncDatabase getDatabase(String id) {\n     public void close() {\n         asyncDocumentClient.close();\n     }\n+\n+    TracerProvider getTracerProvider(){\n+        return this.tracerProvider;\n+    }\n+\n+    private CosmosPagedFlux<CosmosDatabaseProperties> queryDatabasesInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options){\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            pagedFluxOptions.setTracerInformation(this.tracerProvider, \"queryDatabases\", this.serviceEndpoint, null);\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryDatabases(querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponse(\n+                    ModelBridgeInternal.getCosmosDatabasePropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders()));\n+        });\n+    }\n+\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(CosmosAsyncDatabase database,\n+                                                                           ThroughputProperties throughputProperties, Context context) {\n+        String spanName = \"createDatabaseIfNotExists.\" + database.getId();\n+        Context nestedContext = context.addData(TracerProvider.COSMOS_CALL_DEPTH, TracerProvider.COSMOS_CALL_DEPTH_VAL);\n+        Mono<CosmosDatabaseResponse> responseMono = createDatabaseIfNotExistsInternal(database.readInternal(new CosmosDatabaseRequestOptions(), nestedContext), database, throughputProperties, nestedContext);\n+        return tracerProvider.traceEnabledCosmosResponsePublisher(responseMono,\n+            context,\n+            spanName,\n+            database.getId(),\n+            this.serviceEndpoint);\n+    }\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(Mono<CosmosDatabaseResponse> responseMono, CosmosAsyncDatabase database, ThroughputProperties throughputProperties, Context context) {\n+        return responseMono.onErrorResume(exception -> {\n+            final Throwable unwrappedException = Exceptions.unwrap(exception);\n+            if (unwrappedException instanceof CosmosException) {\n+                final CosmosException cosmosException = (CosmosException) unwrappedException;\n+                if (cosmosException.getStatusCode() == HttpConstants.StatusCodes.NOTFOUND) {\n+                    CosmosDatabaseRequestOptions requestOptions = new CosmosDatabaseRequestOptions();\n+                    if(throughputProperties != null) {\n+                        ModelBridgeInternal.setThroughputProperties(requestOptions, throughputProperties);\n+                    }\n+\n+                    if (context != null) {\n+                        Database wrappedDatabase = new Database();\n+                        wrappedDatabase.setId(database.getId());\n+                        return createDatabaseInternal(wrappedDatabase,\n+                            requestOptions, context);\n+                    }\n+\n+                    return createDatabase(new CosmosDatabaseProperties(database.getId()),\n+                        requestOptions);\n+                }\n+            }\n+            return Mono.error(unwrappedException);\n+        });\n+    }\n+\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseInternal(Database database, CosmosDatabaseRequestOptions options,\n+                                                             Context context) {\n+        String spanName = \"createDatabase.\" + database.getId();\n+        Mono<CosmosDatabaseResponse> responseMono = createDatabaseInternal(database, options);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyNzEwNA==", "bodyText": "Would like to keep it for readability", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452927104", "createdAt": "2020-07-10T15:49:46Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -473,4 +447,76 @@ public CosmosAsyncDatabase getDatabase(String id) {\n     public void close() {\n         asyncDocumentClient.close();\n     }\n+\n+    TracerProvider getTracerProvider(){\n+        return this.tracerProvider;\n+    }\n+\n+    private CosmosPagedFlux<CosmosDatabaseProperties> queryDatabasesInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options){\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            pagedFluxOptions.setTracerInformation(this.tracerProvider, \"queryDatabases\", this.serviceEndpoint, null);\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryDatabases(querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponse(\n+                    ModelBridgeInternal.getCosmosDatabasePropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders()));\n+        });\n+    }\n+\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(CosmosAsyncDatabase database,\n+                                                                           ThroughputProperties throughputProperties, Context context) {\n+        String spanName = \"createDatabaseIfNotExists.\" + database.getId();\n+        Context nestedContext = context.addData(TracerProvider.COSMOS_CALL_DEPTH, TracerProvider.COSMOS_CALL_DEPTH_VAL);\n+        Mono<CosmosDatabaseResponse> responseMono = createDatabaseIfNotExistsInternal(database.readInternal(new CosmosDatabaseRequestOptions(), nestedContext), database, throughputProperties, nestedContext);\n+        return tracerProvider.traceEnabledCosmosResponsePublisher(responseMono,\n+            context,\n+            spanName,\n+            database.getId(),\n+            this.serviceEndpoint);\n+    }\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(Mono<CosmosDatabaseResponse> responseMono, CosmosAsyncDatabase database, ThroughputProperties throughputProperties, Context context) {\n+        return responseMono.onErrorResume(exception -> {\n+            final Throwable unwrappedException = Exceptions.unwrap(exception);\n+            if (unwrappedException instanceof CosmosException) {\n+                final CosmosException cosmosException = (CosmosException) unwrappedException;\n+                if (cosmosException.getStatusCode() == HttpConstants.StatusCodes.NOTFOUND) {\n+                    CosmosDatabaseRequestOptions requestOptions = new CosmosDatabaseRequestOptions();\n+                    if(throughputProperties != null) {\n+                        ModelBridgeInternal.setThroughputProperties(requestOptions, throughputProperties);\n+                    }\n+\n+                    if (context != null) {\n+                        Database wrappedDatabase = new Database();\n+                        wrappedDatabase.setId(database.getId());\n+                        return createDatabaseInternal(wrappedDatabase,\n+                            requestOptions, context);\n+                    }\n+\n+                    return createDatabase(new CosmosDatabaseProperties(database.getId()),\n+                        requestOptions);\n+                }\n+            }\n+            return Mono.error(unwrappedException);\n+        });\n+    }\n+\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseInternal(Database database, CosmosDatabaseRequestOptions options,\n+                                                             Context context) {\n+        String spanName = \"createDatabase.\" + database.getId();\n+        Mono<CosmosDatabaseResponse> responseMono = createDatabaseInternal(database, options);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2ODU4Ng=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3NTY4NQ==", "bodyText": "@samvaity - we want more readability in these scenarios, where we are doing string concatenation inside the APIs.\nThis doesn't cause any perf hits, since this spanName will just reference the already created string.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453075685", "createdAt": "2020-07-10T21:02:06Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -473,4 +447,76 @@ public CosmosAsyncDatabase getDatabase(String id) {\n     public void close() {\n         asyncDocumentClient.close();\n     }\n+\n+    TracerProvider getTracerProvider(){\n+        return this.tracerProvider;\n+    }\n+\n+    private CosmosPagedFlux<CosmosDatabaseProperties> queryDatabasesInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options){\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            pagedFluxOptions.setTracerInformation(this.tracerProvider, \"queryDatabases\", this.serviceEndpoint, null);\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryDatabases(querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponse(\n+                    ModelBridgeInternal.getCosmosDatabasePropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders()));\n+        });\n+    }\n+\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(CosmosAsyncDatabase database,\n+                                                                           ThroughputProperties throughputProperties, Context context) {\n+        String spanName = \"createDatabaseIfNotExists.\" + database.getId();\n+        Context nestedContext = context.addData(TracerProvider.COSMOS_CALL_DEPTH, TracerProvider.COSMOS_CALL_DEPTH_VAL);\n+        Mono<CosmosDatabaseResponse> responseMono = createDatabaseIfNotExistsInternal(database.readInternal(new CosmosDatabaseRequestOptions(), nestedContext), database, throughputProperties, nestedContext);\n+        return tracerProvider.traceEnabledCosmosResponsePublisher(responseMono,\n+            context,\n+            spanName,\n+            database.getId(),\n+            this.serviceEndpoint);\n+    }\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(Mono<CosmosDatabaseResponse> responseMono, CosmosAsyncDatabase database, ThroughputProperties throughputProperties, Context context) {\n+        return responseMono.onErrorResume(exception -> {\n+            final Throwable unwrappedException = Exceptions.unwrap(exception);\n+            if (unwrappedException instanceof CosmosException) {\n+                final CosmosException cosmosException = (CosmosException) unwrappedException;\n+                if (cosmosException.getStatusCode() == HttpConstants.StatusCodes.NOTFOUND) {\n+                    CosmosDatabaseRequestOptions requestOptions = new CosmosDatabaseRequestOptions();\n+                    if(throughputProperties != null) {\n+                        ModelBridgeInternal.setThroughputProperties(requestOptions, throughputProperties);\n+                    }\n+\n+                    if (context != null) {\n+                        Database wrappedDatabase = new Database();\n+                        wrappedDatabase.setId(database.getId());\n+                        return createDatabaseInternal(wrappedDatabase,\n+                            requestOptions, context);\n+                    }\n+\n+                    return createDatabase(new CosmosDatabaseProperties(database.getId()),\n+                        requestOptions);\n+                }\n+            }\n+            return Mono.error(unwrappedException);\n+        });\n+    }\n+\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseInternal(Database database, CosmosDatabaseRequestOptions options,\n+                                                             Context context) {\n+        String spanName = \"createDatabase.\" + database.getId();\n+        Mono<CosmosDatabaseResponse> responseMono = createDatabaseInternal(database, options);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2ODU4Ng=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 242}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTc4Mjc0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMTowODowNVrOGvmqiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTo0OToxOVrOGv8dig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2OTczNg==", "bodyText": "When do we expect this context to be null?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452569736", "createdAt": "2020-07-10T01:08:05Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -473,4 +447,76 @@ public CosmosAsyncDatabase getDatabase(String id) {\n     public void close() {\n         asyncDocumentClient.close();\n     }\n+\n+    TracerProvider getTracerProvider(){\n+        return this.tracerProvider;\n+    }\n+\n+    private CosmosPagedFlux<CosmosDatabaseProperties> queryDatabasesInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options){\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            pagedFluxOptions.setTracerInformation(this.tracerProvider, \"queryDatabases\", this.serviceEndpoint, null);\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryDatabases(querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponse(\n+                    ModelBridgeInternal.getCosmosDatabasePropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders()));\n+        });\n+    }\n+\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(CosmosAsyncDatabase database,\n+                                                                           ThroughputProperties throughputProperties, Context context) {\n+        String spanName = \"createDatabaseIfNotExists.\" + database.getId();\n+        Context nestedContext = context.addData(TracerProvider.COSMOS_CALL_DEPTH, TracerProvider.COSMOS_CALL_DEPTH_VAL);\n+        Mono<CosmosDatabaseResponse> responseMono = createDatabaseIfNotExistsInternal(database.readInternal(new CosmosDatabaseRequestOptions(), nestedContext), database, throughputProperties, nestedContext);\n+        return tracerProvider.traceEnabledCosmosResponsePublisher(responseMono,\n+            context,\n+            spanName,\n+            database.getId(),\n+            this.serviceEndpoint);\n+    }\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(Mono<CosmosDatabaseResponse> responseMono, CosmosAsyncDatabase database, ThroughputProperties throughputProperties, Context context) {\n+        return responseMono.onErrorResume(exception -> {\n+            final Throwable unwrappedException = Exceptions.unwrap(exception);\n+            if (unwrappedException instanceof CosmosException) {\n+                final CosmosException cosmosException = (CosmosException) unwrappedException;\n+                if (cosmosException.getStatusCode() == HttpConstants.StatusCodes.NOTFOUND) {\n+                    CosmosDatabaseRequestOptions requestOptions = new CosmosDatabaseRequestOptions();\n+                    if(throughputProperties != null) {\n+                        ModelBridgeInternal.setThroughputProperties(requestOptions, throughputProperties);\n+                    }\n+\n+                    if (context != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyNjg1OA==", "bodyText": "it was needed when shortcuit was there. Not needed anymore, removed it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452926858", "createdAt": "2020-07-10T15:49:19Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -473,4 +447,76 @@ public CosmosAsyncDatabase getDatabase(String id) {\n     public void close() {\n         asyncDocumentClient.close();\n     }\n+\n+    TracerProvider getTracerProvider(){\n+        return this.tracerProvider;\n+    }\n+\n+    private CosmosPagedFlux<CosmosDatabaseProperties> queryDatabasesInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options){\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            pagedFluxOptions.setTracerInformation(this.tracerProvider, \"queryDatabases\", this.serviceEndpoint, null);\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryDatabases(querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponse(\n+                    ModelBridgeInternal.getCosmosDatabasePropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders()));\n+        });\n+    }\n+\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(CosmosAsyncDatabase database,\n+                                                                           ThroughputProperties throughputProperties, Context context) {\n+        String spanName = \"createDatabaseIfNotExists.\" + database.getId();\n+        Context nestedContext = context.addData(TracerProvider.COSMOS_CALL_DEPTH, TracerProvider.COSMOS_CALL_DEPTH_VAL);\n+        Mono<CosmosDatabaseResponse> responseMono = createDatabaseIfNotExistsInternal(database.readInternal(new CosmosDatabaseRequestOptions(), nestedContext), database, throughputProperties, nestedContext);\n+        return tracerProvider.traceEnabledCosmosResponsePublisher(responseMono,\n+            context,\n+            spanName,\n+            database.getId(),\n+            this.serviceEndpoint);\n+    }\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(Mono<CosmosDatabaseResponse> responseMono, CosmosAsyncDatabase database, ThroughputProperties throughputProperties, Context context) {\n+        return responseMono.onErrorResume(exception -> {\n+            final Throwable unwrappedException = Exceptions.unwrap(exception);\n+            if (unwrappedException instanceof CosmosException) {\n+                final CosmosException cosmosException = (CosmosException) unwrappedException;\n+                if (cosmosException.getStatusCode() == HttpConstants.StatusCodes.NOTFOUND) {\n+                    CosmosDatabaseRequestOptions requestOptions = new CosmosDatabaseRequestOptions();\n+                    if(throughputProperties != null) {\n+                        ModelBridgeInternal.setThroughputProperties(requestOptions, throughputProperties);\n+                    }\n+\n+                    if (context != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2OTczNg=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTgwNjkzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMToyMjoyN1rOGvm4Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTo0ODoxMFrOGv8bFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3MzI4Nw==", "bodyText": "nit:  withContext(this::readThroughputInternal)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452573287", "createdAt": "2020-07-10T01:22:27Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -665,30 +672,9 @@ public CosmosAsyncConflict getConflict(String id) {\n      * @return the mono containing throughput response.\n      */\n     public Mono<ThroughputResponse> readThroughput() {\n-        return this.read()\n-                   .flatMap(response -> this.database.getDocClientWrapper()\n-                                            .queryOffers(database.getOfferQuerySpecFromResourceId(response.getProperties()\n-                                                                                                      .getResourceId())\n-                                                , new CosmosQueryRequestOptions())\n-                                            .single()\n-                                            .flatMap(offerFeedResponse -> {\n-                                                if (offerFeedResponse.getResults().isEmpty()) {\n-                                                    return Mono.error(BridgeInternal\n-                                                                          .createCosmosException(\n-                                                                              HttpConstants.StatusCodes.BADREQUEST,\n-                                                                              \"No offers found for the resource \"\n-                                                                                  + this.getId()));\n-                                                }\n-                                                return this.database.getDocClientWrapper()\n-                                                           .readOffer(offerFeedResponse.getResults()\n-                                                                          .get(0)\n-                                                                          .getSelfLink())\n-                                                           .single();\n-                                            })\n-                                            .map(ModelBridgeInternal::createThroughputRespose));\n+        return withContext(context -> readThroughputInternal(context));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 384}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyNjIyOQ==", "bodyText": "Would like to keep it in current state as it will be in line with other withContext having more parameter apart from context", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452926229", "createdAt": "2020-07-10T15:48:10Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -665,30 +672,9 @@ public CosmosAsyncConflict getConflict(String id) {\n      * @return the mono containing throughput response.\n      */\n     public Mono<ThroughputResponse> readThroughput() {\n-        return this.read()\n-                   .flatMap(response -> this.database.getDocClientWrapper()\n-                                            .queryOffers(database.getOfferQuerySpecFromResourceId(response.getProperties()\n-                                                                                                      .getResourceId())\n-                                                , new CosmosQueryRequestOptions())\n-                                            .single()\n-                                            .flatMap(offerFeedResponse -> {\n-                                                if (offerFeedResponse.getResults().isEmpty()) {\n-                                                    return Mono.error(BridgeInternal\n-                                                                          .createCosmosException(\n-                                                                              HttpConstants.StatusCodes.BADREQUEST,\n-                                                                              \"No offers found for the resource \"\n-                                                                                  + this.getId()));\n-                                                }\n-                                                return this.database.getDocClientWrapper()\n-                                                           .readOffer(offerFeedResponse.getResults()\n-                                                                          .get(0)\n-                                                                          .getSelfLink())\n-                                                           .single();\n-                                            })\n-                                            .map(ModelBridgeInternal::createThroughputRespose));\n+        return withContext(context -> readThroughputInternal(context));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3MzI4Nw=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 384}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTgxMTk0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMToyNToyOVrOGvm7YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTo0NzowNFrOGv8Yzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3NDA0OQ==", "bodyText": "Don't need to create an extra variable for options.\nreturn withContext(context -> readInternal(options == null ? new CosmosDatabaseRequestOptions() : options,\n            context));\nMore instances in the PR for this update.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452574049", "createdAt": "2020-07-10T01:25:29Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -79,11 +82,8 @@ public String getId() {\n      * the read database or an error.\n      */\n     public Mono<CosmosDatabaseResponse> read(CosmosDatabaseRequestOptions options) {\n-        if (options == null) {\n-            options = new CosmosDatabaseRequestOptions();\n-        }\n-        return getDocClientWrapper().readDatabase(getLink(), ModelBridgeInternal.toRequestOptions(options))\n-                   .map(response -> ModelBridgeInternal.createCosmosDatabaseResponse(response)).single();\n+        final CosmosDatabaseRequestOptions requestOptions = options == null ? new CosmosDatabaseRequestOptions() : options;\n+        return withContext(context -> readInternal(requestOptions, context));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyNTY0Ng==", "bodyText": "We do need a final variable if we are using in labda. Otherwise it gives compile error", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452925646", "createdAt": "2020-07-10T15:47:04Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -79,11 +82,8 @@ public String getId() {\n      * the read database or an error.\n      */\n     public Mono<CosmosDatabaseResponse> read(CosmosDatabaseRequestOptions options) {\n-        if (options == null) {\n-            options = new CosmosDatabaseRequestOptions();\n-        }\n-        return getDocClientWrapper().readDatabase(getLink(), ModelBridgeInternal.toRequestOptions(options))\n-                   .map(response -> ModelBridgeInternal.createCosmosDatabaseResponse(response)).single();\n+        final CosmosDatabaseRequestOptions requestOptions = options == null ? new CosmosDatabaseRequestOptions() : options;\n+        return withContext(context -> readInternal(requestOptions, context));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3NDA0OQ=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTgxNzUxOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMToyOTowNFrOGvm-3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMTowMzo0OFrOGwFlZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3NDk0Mw==", "bodyText": "Rather than calling the withContext you can call the method on L342.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452574943", "createdAt": "2020-07-10T01:29:04Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -328,7 +323,8 @@ public String getId() {\n         CosmosContainerRequestOptions options = new CosmosContainerRequestOptions();\n         ModelBridgeInternal.setThroughputProperties(options, throughputProperties);\n         CosmosAsyncContainer container = getContainer(containerProperties.getId());\n-        return createContainerIfNotExistsInternal(containerProperties, container, options);\n+        return withContext(context -> createContainerIfNotExistsInternal(containerProperties, container, options,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyNTE2MQ==", "bodyText": "Api mentioned at L342 is different. Current one take throughput from user", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452925161", "createdAt": "2020-07-10T15:46:18Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -328,7 +323,8 @@ public String getId() {\n         CosmosContainerRequestOptions options = new CosmosContainerRequestOptions();\n         ModelBridgeInternal.setThroughputProperties(options, throughputProperties);\n         CosmosAsyncContainer container = getContainer(containerProperties.getId());\n-        return createContainerIfNotExistsInternal(containerProperties, container, options);\n+        return withContext(context -> createContainerIfNotExistsInternal(containerProperties, container, options,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3NDk0Mw=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3NjMyNA==", "bodyText": "Tracking this refactor API issue here: #13031\nNo need to block the tracing PR for this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453076324", "createdAt": "2020-07-10T21:03:48Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -328,7 +323,8 @@ public String getId() {\n         CosmosContainerRequestOptions options = new CosmosContainerRequestOptions();\n         ModelBridgeInternal.setThroughputProperties(options, throughputProperties);\n         CosmosAsyncContainer container = getContainer(containerProperties.getId());\n-        return createContainerIfNotExistsInternal(containerProperties, container, options);\n+        return withContext(context -> createContainerIfNotExistsInternal(containerProperties, container, options,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3NDk0Mw=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTgxOTA3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMToyOTo1OVrOGvm_1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTo0NDo0N1rOGv8TvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3NTE5MQ==", "bodyText": "therefor --> therefore/hence", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452575191", "createdAt": "2020-07-10T01:29:59Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -345,76 +341,61 @@ public String getId() {\n      */\n     public Mono<CosmosContainerResponse> createContainerIfNotExists(String id, String partitionKeyPath) {\n         CosmosAsyncContainer container = getContainer(id);\n-        return createContainerIfNotExistsInternal(new CosmosContainerProperties(id, partitionKeyPath),\n-                                                  container,\n-                                                  null);\n+        return withContext(context -> createContainerIfNotExistsInternal(new CosmosContainerProperties(id,\n+                partitionKeyPath), container, null,\n+            context));\n     }\n \n     /**\n      * Creates a Cosmos container if it does not exist on the service.\n      * <p>\n-     * The throughput setting will only be used if the specified container\n-     * does not exist and a new container will be created.\n+     * The throughput properties will only be used if the specified container\n+     * does not exist and therefor a new container will be created.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyNDM0OQ==", "bodyText": "done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452924349", "createdAt": "2020-07-10T15:44:47Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -345,76 +341,61 @@ public String getId() {\n      */\n     public Mono<CosmosContainerResponse> createContainerIfNotExists(String id, String partitionKeyPath) {\n         CosmosAsyncContainer container = getContainer(id);\n-        return createContainerIfNotExistsInternal(new CosmosContainerProperties(id, partitionKeyPath),\n-                                                  container,\n-                                                  null);\n+        return withContext(context -> createContainerIfNotExistsInternal(new CosmosContainerProperties(id,\n+                partitionKeyPath), container, null,\n+            context));\n     }\n \n     /**\n      * Creates a Cosmos container if it does not exist on the service.\n      * <p>\n-     * The throughput setting will only be used if the specified container\n-     * does not exist and a new container will be created.\n+     * The throughput properties will only be used if the specified container\n+     * does not exist and therefor a new container will be created.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3NTE5MQ=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTgyMDE4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMTozMDoyOVrOGvnAcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTo0NDozOVrOGv8TeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3NTM0Ng==", "bodyText": "This API was made public, intentional?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452575346", "createdAt": "2020-07-10T01:30:29Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -345,76 +341,61 @@ public String getId() {\n      */\n     public Mono<CosmosContainerResponse> createContainerIfNotExists(String id, String partitionKeyPath) {\n         CosmosAsyncContainer container = getContainer(id);\n-        return createContainerIfNotExistsInternal(new CosmosContainerProperties(id, partitionKeyPath),\n-                                                  container,\n-                                                  null);\n+        return withContext(context -> createContainerIfNotExistsInternal(new CosmosContainerProperties(id,\n+                partitionKeyPath), container, null,\n+            context));\n     }\n \n     /**\n      * Creates a Cosmos container if it does not exist on the service.\n      * <p>\n-     * The throughput setting will only be used if the specified container\n-     * does not exist and a new container will be created.\n+     * The throughput properties will only be used if the specified container\n+     * does not exist and therefor a new container will be created.\n      *\n      * After subscription the operation will be performed. The {@link Mono} upon\n      * successful completion will contain a cosmos container response with the\n      * created container. In case of failure the {@link Mono} will error.\n      *\n      * @param id the cosmos container id.\n      * @param partitionKeyPath the partition key path.\n-     * @param throughput the throughput for the container.\n+     * @param throughputProperties the throughput properties for the container.\n      * @return a {@link Mono} containing the cosmos container response with the\n      * created container or an error.\n      */\n-    Mono<CosmosContainerResponse> createContainerIfNotExists(\n+    public Mono<CosmosContainerResponse> createContainerIfNotExists(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyNDI4MA==", "bodyText": "Havent made it public. Your are seeing this due to git hub diff. Check both are different api with different parameters.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452924280", "createdAt": "2020-07-10T15:44:39Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -345,76 +341,61 @@ public String getId() {\n      */\n     public Mono<CosmosContainerResponse> createContainerIfNotExists(String id, String partitionKeyPath) {\n         CosmosAsyncContainer container = getContainer(id);\n-        return createContainerIfNotExistsInternal(new CosmosContainerProperties(id, partitionKeyPath),\n-                                                  container,\n-                                                  null);\n+        return withContext(context -> createContainerIfNotExistsInternal(new CosmosContainerProperties(id,\n+                partitionKeyPath), container, null,\n+            context));\n     }\n \n     /**\n      * Creates a Cosmos container if it does not exist on the service.\n      * <p>\n-     * The throughput setting will only be used if the specified container\n-     * does not exist and a new container will be created.\n+     * The throughput properties will only be used if the specified container\n+     * does not exist and therefor a new container will be created.\n      *\n      * After subscription the operation will be performed. The {@link Mono} upon\n      * successful completion will contain a cosmos container response with the\n      * created container. In case of failure the {@link Mono} will error.\n      *\n      * @param id the cosmos container id.\n      * @param partitionKeyPath the partition key path.\n-     * @param throughput the throughput for the container.\n+     * @param throughputProperties the throughput properties for the container.\n      * @return a {@link Mono} containing the cosmos container response with the\n      * created container or an error.\n      */\n-    Mono<CosmosContainerResponse> createContainerIfNotExists(\n+    public Mono<CosmosContainerResponse> createContainerIfNotExists(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3NTM0Ng=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTgyMjQ1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMTozMTo0OVrOGvnBwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMTowNDoxNlrOGwFmEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3NTY4MQ==", "bodyText": "same with the withContext call can it be deferred to the last/final internal call.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452575681", "createdAt": "2020-07-10T01:31:49Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -345,76 +341,61 @@ public String getId() {\n      */\n     public Mono<CosmosContainerResponse> createContainerIfNotExists(String id, String partitionKeyPath) {\n         CosmosAsyncContainer container = getContainer(id);\n-        return createContainerIfNotExistsInternal(new CosmosContainerProperties(id, partitionKeyPath),\n-                                                  container,\n-                                                  null);\n+        return withContext(context -> createContainerIfNotExistsInternal(new CosmosContainerProperties(id,\n+                partitionKeyPath), container, null,\n+            context));\n     }\n \n     /**\n      * Creates a Cosmos container if it does not exist on the service.\n      * <p>\n-     * The throughput setting will only be used if the specified container\n-     * does not exist and a new container will be created.\n+     * The throughput properties will only be used if the specified container\n+     * does not exist and therefor a new container will be created.\n      *\n      * After subscription the operation will be performed. The {@link Mono} upon\n      * successful completion will contain a cosmos container response with the\n      * created container. In case of failure the {@link Mono} will error.\n      *\n      * @param id the cosmos container id.\n      * @param partitionKeyPath the partition key path.\n-     * @param throughput the throughput for the container.\n+     * @param throughputProperties the throughput properties for the container.\n      * @return a {@link Mono} containing the cosmos container response with the\n      * created container or an error.\n      */\n-    Mono<CosmosContainerResponse> createContainerIfNotExists(\n+    public Mono<CosmosContainerResponse> createContainerIfNotExists(\n         String id, String partitionKeyPath,\n-        int throughput) {\n+        ThroughputProperties throughputProperties) {\n         CosmosContainerRequestOptions options = new CosmosContainerRequestOptions();\n-        ModelBridgeInternal.setThroughputProperties(options, ThroughputProperties.createManualThroughput(throughput));\n+        ModelBridgeInternal.setThroughputProperties(options, throughputProperties);\n         CosmosAsyncContainer container = getContainer(id);\n-        return createContainerIfNotExistsInternal(new CosmosContainerProperties(id, partitionKeyPath), container,\n-                                                  options);\n+        return withContext(context -> createContainerIfNotExistsInternal(new CosmosContainerProperties(id,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3ODgwOA==", "bodyText": "and below", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452578808", "createdAt": "2020-07-10T01:45:56Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -345,76 +341,61 @@ public String getId() {\n      */\n     public Mono<CosmosContainerResponse> createContainerIfNotExists(String id, String partitionKeyPath) {\n         CosmosAsyncContainer container = getContainer(id);\n-        return createContainerIfNotExistsInternal(new CosmosContainerProperties(id, partitionKeyPath),\n-                                                  container,\n-                                                  null);\n+        return withContext(context -> createContainerIfNotExistsInternal(new CosmosContainerProperties(id,\n+                partitionKeyPath), container, null,\n+            context));\n     }\n \n     /**\n      * Creates a Cosmos container if it does not exist on the service.\n      * <p>\n-     * The throughput setting will only be used if the specified container\n-     * does not exist and a new container will be created.\n+     * The throughput properties will only be used if the specified container\n+     * does not exist and therefor a new container will be created.\n      *\n      * After subscription the operation will be performed. The {@link Mono} upon\n      * successful completion will contain a cosmos container response with the\n      * created container. In case of failure the {@link Mono} will error.\n      *\n      * @param id the cosmos container id.\n      * @param partitionKeyPath the partition key path.\n-     * @param throughput the throughput for the container.\n+     * @param throughputProperties the throughput properties for the container.\n      * @return a {@link Mono} containing the cosmos container response with the\n      * created container or an error.\n      */\n-    Mono<CosmosContainerResponse> createContainerIfNotExists(\n+    public Mono<CosmosContainerResponse> createContainerIfNotExists(\n         String id, String partitionKeyPath,\n-        int throughput) {\n+        ThroughputProperties throughputProperties) {\n         CosmosContainerRequestOptions options = new CosmosContainerRequestOptions();\n-        ModelBridgeInternal.setThroughputProperties(options, ThroughputProperties.createManualThroughput(throughput));\n+        ModelBridgeInternal.setThroughputProperties(options, throughputProperties);\n         CosmosAsyncContainer container = getContainer(id);\n-        return createContainerIfNotExistsInternal(new CosmosContainerProperties(id, partitionKeyPath), container,\n-                                                  options);\n+        return withContext(context -> createContainerIfNotExistsInternal(new CosmosContainerProperties(id,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3NTY4MQ=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3NjQ5Nw==", "bodyText": "Internal implementation change : #13031", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453076497", "createdAt": "2020-07-10T21:04:16Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -345,76 +341,61 @@ public String getId() {\n      */\n     public Mono<CosmosContainerResponse> createContainerIfNotExists(String id, String partitionKeyPath) {\n         CosmosAsyncContainer container = getContainer(id);\n-        return createContainerIfNotExistsInternal(new CosmosContainerProperties(id, partitionKeyPath),\n-                                                  container,\n-                                                  null);\n+        return withContext(context -> createContainerIfNotExistsInternal(new CosmosContainerProperties(id,\n+                partitionKeyPath), container, null,\n+            context));\n     }\n \n     /**\n      * Creates a Cosmos container if it does not exist on the service.\n      * <p>\n-     * The throughput setting will only be used if the specified container\n-     * does not exist and a new container will be created.\n+     * The throughput properties will only be used if the specified container\n+     * does not exist and therefor a new container will be created.\n      *\n      * After subscription the operation will be performed. The {@link Mono} upon\n      * successful completion will contain a cosmos container response with the\n      * created container. In case of failure the {@link Mono} will error.\n      *\n      * @param id the cosmos container id.\n      * @param partitionKeyPath the partition key path.\n-     * @param throughput the throughput for the container.\n+     * @param throughputProperties the throughput properties for the container.\n      * @return a {@link Mono} containing the cosmos container response with the\n      * created container or an error.\n      */\n-    Mono<CosmosContainerResponse> createContainerIfNotExists(\n+    public Mono<CosmosContainerResponse> createContainerIfNotExists(\n         String id, String partitionKeyPath,\n-        int throughput) {\n+        ThroughputProperties throughputProperties) {\n         CosmosContainerRequestOptions options = new CosmosContainerRequestOptions();\n-        ModelBridgeInternal.setThroughputProperties(options, ThroughputProperties.createManualThroughput(throughput));\n+        ModelBridgeInternal.setThroughputProperties(options, throughputProperties);\n         CosmosAsyncContainer container = getContainer(id);\n-        return createContainerIfNotExistsInternal(new CosmosContainerProperties(id, partitionKeyPath), container,\n-                                                  options);\n+        return withContext(context -> createContainerIfNotExistsInternal(new CosmosContainerProperties(id,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3NTY4MQ=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTgyNTA5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMTozMzo1MFrOGvnDcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTo0MjowNVrOGv8OSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3NjExMw==", "bodyText": "readAllContainers missing tracing/withContext intrumentation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452576113", "createdAt": "2020-07-10T01:33:50Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -464,7 +448,7 @@ public String getId() {\n      * obtained containers or an error.\n      */\n     public CosmosPagedFlux<CosmosContainerProperties> queryContainers(String query) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyMjk1Mg==", "bodyText": "All query instrumentation with tracer are at single place in CosmosPageFlux , where we are using fluxContext", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452922952", "createdAt": "2020-07-10T15:42:05Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -464,7 +448,7 @@ public String getId() {\n      * obtained containers or an error.\n      */\n     public CosmosPagedFlux<CosmosContainerProperties> queryContainers(String query) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3NjExMw=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 230}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTgyODI5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMTozNjowMlrOGvnFbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzo0NToyMVrOG04sRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3NjYyMA==", "bodyText": "CosmosQueryRequestOptions options could be null resulting in NPE?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452576620", "createdAt": "2020-07-10T01:36:02Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -627,7 +604,7 @@ public CosmosAsyncContainer getContainer(String id) {\n      * obtained users or an error.\n      */\n     public CosmosPagedFlux<CosmosUserProperties> queryUsers(String query, CosmosQueryRequestOptions options) {\n-        return queryUsers(new SqlQuerySpec(query), options);\n+        return queryUsersInternal(new SqlQuerySpec(query), options);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 327}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyMjc5NA==", "bodyText": "There are two apis  for queryUsers, with option and without . With option, it need to be non null. Existing design", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452922794", "createdAt": "2020-07-10T15:41:47Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -627,7 +604,7 @@ public CosmosAsyncContainer getContainer(String id) {\n      * obtained users or an error.\n      */\n     public CosmosPagedFlux<CosmosUserProperties> queryUsers(String query, CosmosQueryRequestOptions options) {\n-        return queryUsers(new SqlQuerySpec(query), options);\n+        return queryUsersInternal(new SqlQuerySpec(query), options);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3NjYyMA=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 327}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3NzMzOQ==", "bodyText": "This was discussed in API review versions earlier, we want these overriding APIs to provide better public surface access to end user.\nIf the user provides null with this API, its their fault, because the overriding API exists which doesn't take CosmosQueryRequestOptions", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453077339", "createdAt": "2020-07-10T21:06:31Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -627,7 +604,7 @@ public CosmosAsyncContainer getContainer(String id) {\n      * obtained users or an error.\n      */\n     public CosmosPagedFlux<CosmosUserProperties> queryUsers(String query, CosmosQueryRequestOptions options) {\n-        return queryUsers(new SqlQuerySpec(query), options);\n+        return queryUsersInternal(new SqlQuerySpec(query), options);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3NjYyMA=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 327}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4NDExMQ==", "bodyText": "[Not Blocking for this PR]\nInteresting..So by \"user fault\" you mean its acceptable for Cosmos API's to throw an NPE?\nJust curious why don't we do a null check upfront and let it flow through the code.  If it is an expected param, you could use a  Objects.requireNonNull(..)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453084111", "createdAt": "2020-07-10T21:25:18Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -627,7 +604,7 @@ public CosmosAsyncContainer getContainer(String id) {\n      * obtained users or an error.\n      */\n     public CosmosPagedFlux<CosmosUserProperties> queryUsers(String query, CosmosQueryRequestOptions options) {\n-        return queryUsers(new SqlQuerySpec(query), options);\n+        return queryUsersInternal(new SqlQuerySpec(query), options);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3NjYyMA=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 327}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyNDI1Mg==", "bodyText": "A method that returns a reactor publisher (CosmosPagedFlux here) should not throw an exception directly. The error has to flow through the error channel and the user should be able to use onError handler to gracefully handle exceptions. Also, since options are optional, the user should still be able to pass a null value and this method should not throw.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r456324252", "createdAt": "2020-07-17T09:18:16Z", "author": {"login": "srnagar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -627,7 +604,7 @@ public CosmosAsyncContainer getContainer(String id) {\n      * obtained users or an error.\n      */\n     public CosmosPagedFlux<CosmosUserProperties> queryUsers(String query, CosmosQueryRequestOptions options) {\n-        return queryUsers(new SqlQuerySpec(query), options);\n+        return queryUsersInternal(new SqlQuerySpec(query), options);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3NjYyMA=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 327}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwNzk3Mg==", "bodyText": "tracking in #13298", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r458107972", "createdAt": "2020-07-21T13:45:21Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -627,7 +604,7 @@ public CosmosAsyncContainer getContainer(String id) {\n      * obtained users or an error.\n      */\n     public CosmosPagedFlux<CosmosUserProperties> queryUsers(String query, CosmosQueryRequestOptions options) {\n-        return queryUsers(new SqlQuerySpec(query), options);\n+        return queryUsersInternal(new SqlQuerySpec(query), options);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3NjYyMA=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 327}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTgzMjAwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMTozODozOFrOGvnHvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMTowNjo1NFrOGwFp-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3NzIxMw==", "bodyText": "Don't need to an extra variable here, can directly be replaced by \"createUser.\" + this.getId().", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452577213", "createdAt": "2020-07-10T01:38:38Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -768,4 +697,219 @@ String getLink() {\n         return this.link;\n     }\n \n+    private CosmosPagedFlux<CosmosContainerProperties> queryContainersInternal(SqlQuerySpec querySpec\n+        , CosmosQueryRequestOptions options) {\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryContainers.\" + this.getId();\n+            pagedFluxOptions.setTracerInformation(this.getClient().getTracerProvider(), spanName,\n+                this.getClient().getServiceEndpoint(), getId());\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryCollections(getLink(), querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponse(\n+                    ModelBridgeInternal.getCosmosContainerPropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders()));\n+        });\n+    }\n+\n+    private CosmosPagedFlux<CosmosUserProperties> queryUsersInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options) {\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryUsers.\" + this.getId();\n+            pagedFluxOptions.setTracerInformation(this.getClient().getTracerProvider(), spanName,\n+                this.getClient().getServiceEndpoint(), getId());\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryUsers(getLink(), querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponseWithQueryMetrics(\n+                    ModelBridgeInternal.getCosmosUserPropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders(),\n+                    ModelBridgeInternal.queryMetrics(response)));\n+        });\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerIfNotExistsInternal(\n+        CosmosContainerProperties containerProperties,\n+        CosmosAsyncContainer container,\n+        CosmosContainerRequestOptions options,\n+        Context context) {\n+        String spanName = \"createContainerIfNotExistsInternal.\" + containerProperties.getId();\n+        Context nestedContext = context.addData(TracerProvider.COSMOS_CALL_DEPTH, TracerProvider.COSMOS_CALL_DEPTH_VAL);\n+        if (options == null) {\n+            options = new CosmosContainerRequestOptions();\n+        }\n+\n+        Mono<CosmosContainerResponse> responseMono = createContainerIfNotExistsInternal(container.read(options, nestedContext), containerProperties, options, nestedContext);\n+        return this.client.getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,\n+            getId(),\n+            getClient().getServiceEndpoint());\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerIfNotExistsInternal(\n+        Mono<CosmosContainerResponse> responseMono,\n+        CosmosContainerProperties containerProperties,\n+        CosmosContainerRequestOptions options,\n+        Context context) {\n+        return responseMono.onErrorResume(exception -> {\n+            final Throwable unwrappedException = Exceptions.unwrap(exception);\n+            if (unwrappedException instanceof CosmosException) {\n+                final CosmosException cosmosException = (CosmosException) unwrappedException;\n+                if (cosmosException.getStatusCode() == HttpConstants.StatusCodes.NOTFOUND) {\n+                    if(context != null) {\n+                        return createContainerInternal(containerProperties, options, context);\n+                    }\n+\n+                    return createContainer(containerProperties, options);\n+                }\n+            }\n+            return Mono.error(unwrappedException);\n+        });\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerInternal(\n+        CosmosContainerProperties containerProperties,\n+        CosmosContainerRequestOptions options,\n+        Context context) {\n+        String spanName = \"createContainer.\" + containerProperties.getId();\n+        Mono<CosmosContainerResponse> responseMono = createContainerInternal(containerProperties, options);\n+        return this.client.getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,\n+            getId(),\n+            getClient().getServiceEndpoint());\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerInternal(\n+        CosmosContainerProperties containerProperties,\n+        CosmosContainerRequestOptions options) {\n+        return getDocClientWrapper()\n+            .createCollection(this.getLink(), ModelBridgeInternal.getV2Collection(containerProperties),\n+                ModelBridgeInternal.toRequestOptions(options))\n+            .map(response -> ModelBridgeInternal.createCosmosContainerResponse(response)).single();\n+    }\n+\n+    Mono<CosmosDatabaseResponse> readInternal(CosmosDatabaseRequestOptions options, Context context) {\n+        String spanName = \"readDatabase.\" + this.getId();\n+        Mono<CosmosDatabaseResponse> responseMono = readInternal(options);\n+        return this.client.getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,\n+            getId(),\n+            getClient().getServiceEndpoint());\n+    }\n+\n+    private Mono<CosmosDatabaseResponse> readInternal(CosmosDatabaseRequestOptions options) {\n+        return getDocClientWrapper().readDatabase(getLink(),\n+            ModelBridgeInternal.toRequestOptions(options))\n+            .map(response -> ModelBridgeInternal.createCosmosDatabaseResponse(response)).single();\n+    }\n+\n+    private Mono<CosmosDatabaseResponse> deleteInternal(CosmosDatabaseRequestOptions options, Context context) {\n+        String spanName = \"deleteDatabase.\" + this.getId();\n+        Mono<CosmosDatabaseResponse> responseMono = deleteInternal(options);\n+        return this.client.getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,\n+            getId(),\n+            getClient().getServiceEndpoint());\n+    }\n+\n+    private Mono<CosmosDatabaseResponse> deleteInternal(CosmosDatabaseRequestOptions options) {\n+        return getDocClientWrapper().deleteDatabase(getLink(),\n+            ModelBridgeInternal.toRequestOptions(options))\n+            .map(response -> ModelBridgeInternal.createCosmosDatabaseResponse(response)).single();\n+    }\n+\n+    private Mono<CosmosUserResponse> createUserInternal(CosmosUserProperties userProperties, Context context) {\n+        String spanName = \"createUser.\" + this.getId();\n+        Mono<CosmosUserResponse> responseMono = createUserInternal(userProperties);\n+        return this.client.getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 541}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyMTgyNg==", "bodyText": "We could remove the extra variable span name , but we would like to keep a separate, as it is more readable .", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452921826", "createdAt": "2020-07-10T15:40:01Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -768,4 +697,219 @@ String getLink() {\n         return this.link;\n     }\n \n+    private CosmosPagedFlux<CosmosContainerProperties> queryContainersInternal(SqlQuerySpec querySpec\n+        , CosmosQueryRequestOptions options) {\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryContainers.\" + this.getId();\n+            pagedFluxOptions.setTracerInformation(this.getClient().getTracerProvider(), spanName,\n+                this.getClient().getServiceEndpoint(), getId());\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryCollections(getLink(), querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponse(\n+                    ModelBridgeInternal.getCosmosContainerPropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders()));\n+        });\n+    }\n+\n+    private CosmosPagedFlux<CosmosUserProperties> queryUsersInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options) {\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryUsers.\" + this.getId();\n+            pagedFluxOptions.setTracerInformation(this.getClient().getTracerProvider(), spanName,\n+                this.getClient().getServiceEndpoint(), getId());\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryUsers(getLink(), querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponseWithQueryMetrics(\n+                    ModelBridgeInternal.getCosmosUserPropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders(),\n+                    ModelBridgeInternal.queryMetrics(response)));\n+        });\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerIfNotExistsInternal(\n+        CosmosContainerProperties containerProperties,\n+        CosmosAsyncContainer container,\n+        CosmosContainerRequestOptions options,\n+        Context context) {\n+        String spanName = \"createContainerIfNotExistsInternal.\" + containerProperties.getId();\n+        Context nestedContext = context.addData(TracerProvider.COSMOS_CALL_DEPTH, TracerProvider.COSMOS_CALL_DEPTH_VAL);\n+        if (options == null) {\n+            options = new CosmosContainerRequestOptions();\n+        }\n+\n+        Mono<CosmosContainerResponse> responseMono = createContainerIfNotExistsInternal(container.read(options, nestedContext), containerProperties, options, nestedContext);\n+        return this.client.getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,\n+            getId(),\n+            getClient().getServiceEndpoint());\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerIfNotExistsInternal(\n+        Mono<CosmosContainerResponse> responseMono,\n+        CosmosContainerProperties containerProperties,\n+        CosmosContainerRequestOptions options,\n+        Context context) {\n+        return responseMono.onErrorResume(exception -> {\n+            final Throwable unwrappedException = Exceptions.unwrap(exception);\n+            if (unwrappedException instanceof CosmosException) {\n+                final CosmosException cosmosException = (CosmosException) unwrappedException;\n+                if (cosmosException.getStatusCode() == HttpConstants.StatusCodes.NOTFOUND) {\n+                    if(context != null) {\n+                        return createContainerInternal(containerProperties, options, context);\n+                    }\n+\n+                    return createContainer(containerProperties, options);\n+                }\n+            }\n+            return Mono.error(unwrappedException);\n+        });\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerInternal(\n+        CosmosContainerProperties containerProperties,\n+        CosmosContainerRequestOptions options,\n+        Context context) {\n+        String spanName = \"createContainer.\" + containerProperties.getId();\n+        Mono<CosmosContainerResponse> responseMono = createContainerInternal(containerProperties, options);\n+        return this.client.getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,\n+            getId(),\n+            getClient().getServiceEndpoint());\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerInternal(\n+        CosmosContainerProperties containerProperties,\n+        CosmosContainerRequestOptions options) {\n+        return getDocClientWrapper()\n+            .createCollection(this.getLink(), ModelBridgeInternal.getV2Collection(containerProperties),\n+                ModelBridgeInternal.toRequestOptions(options))\n+            .map(response -> ModelBridgeInternal.createCosmosContainerResponse(response)).single();\n+    }\n+\n+    Mono<CosmosDatabaseResponse> readInternal(CosmosDatabaseRequestOptions options, Context context) {\n+        String spanName = \"readDatabase.\" + this.getId();\n+        Mono<CosmosDatabaseResponse> responseMono = readInternal(options);\n+        return this.client.getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,\n+            getId(),\n+            getClient().getServiceEndpoint());\n+    }\n+\n+    private Mono<CosmosDatabaseResponse> readInternal(CosmosDatabaseRequestOptions options) {\n+        return getDocClientWrapper().readDatabase(getLink(),\n+            ModelBridgeInternal.toRequestOptions(options))\n+            .map(response -> ModelBridgeInternal.createCosmosDatabaseResponse(response)).single();\n+    }\n+\n+    private Mono<CosmosDatabaseResponse> deleteInternal(CosmosDatabaseRequestOptions options, Context context) {\n+        String spanName = \"deleteDatabase.\" + this.getId();\n+        Mono<CosmosDatabaseResponse> responseMono = deleteInternal(options);\n+        return this.client.getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,\n+            getId(),\n+            getClient().getServiceEndpoint());\n+    }\n+\n+    private Mono<CosmosDatabaseResponse> deleteInternal(CosmosDatabaseRequestOptions options) {\n+        return getDocClientWrapper().deleteDatabase(getLink(),\n+            ModelBridgeInternal.toRequestOptions(options))\n+            .map(response -> ModelBridgeInternal.createCosmosDatabaseResponse(response)).single();\n+    }\n+\n+    private Mono<CosmosUserResponse> createUserInternal(CosmosUserProperties userProperties, Context context) {\n+        String spanName = \"createUser.\" + this.getId();\n+        Mono<CosmosUserResponse> responseMono = createUserInternal(userProperties);\n+        return this.client.getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3NzIxMw=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 541}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3NzQ5OQ==", "bodyText": "Readability is concern here, lets keep it as it is.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453077499", "createdAt": "2020-07-10T21:06:54Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -768,4 +697,219 @@ String getLink() {\n         return this.link;\n     }\n \n+    private CosmosPagedFlux<CosmosContainerProperties> queryContainersInternal(SqlQuerySpec querySpec\n+        , CosmosQueryRequestOptions options) {\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryContainers.\" + this.getId();\n+            pagedFluxOptions.setTracerInformation(this.getClient().getTracerProvider(), spanName,\n+                this.getClient().getServiceEndpoint(), getId());\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryCollections(getLink(), querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponse(\n+                    ModelBridgeInternal.getCosmosContainerPropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders()));\n+        });\n+    }\n+\n+    private CosmosPagedFlux<CosmosUserProperties> queryUsersInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options) {\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryUsers.\" + this.getId();\n+            pagedFluxOptions.setTracerInformation(this.getClient().getTracerProvider(), spanName,\n+                this.getClient().getServiceEndpoint(), getId());\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryUsers(getLink(), querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponseWithQueryMetrics(\n+                    ModelBridgeInternal.getCosmosUserPropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders(),\n+                    ModelBridgeInternal.queryMetrics(response)));\n+        });\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerIfNotExistsInternal(\n+        CosmosContainerProperties containerProperties,\n+        CosmosAsyncContainer container,\n+        CosmosContainerRequestOptions options,\n+        Context context) {\n+        String spanName = \"createContainerIfNotExistsInternal.\" + containerProperties.getId();\n+        Context nestedContext = context.addData(TracerProvider.COSMOS_CALL_DEPTH, TracerProvider.COSMOS_CALL_DEPTH_VAL);\n+        if (options == null) {\n+            options = new CosmosContainerRequestOptions();\n+        }\n+\n+        Mono<CosmosContainerResponse> responseMono = createContainerIfNotExistsInternal(container.read(options, nestedContext), containerProperties, options, nestedContext);\n+        return this.client.getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,\n+            getId(),\n+            getClient().getServiceEndpoint());\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerIfNotExistsInternal(\n+        Mono<CosmosContainerResponse> responseMono,\n+        CosmosContainerProperties containerProperties,\n+        CosmosContainerRequestOptions options,\n+        Context context) {\n+        return responseMono.onErrorResume(exception -> {\n+            final Throwable unwrappedException = Exceptions.unwrap(exception);\n+            if (unwrappedException instanceof CosmosException) {\n+                final CosmosException cosmosException = (CosmosException) unwrappedException;\n+                if (cosmosException.getStatusCode() == HttpConstants.StatusCodes.NOTFOUND) {\n+                    if(context != null) {\n+                        return createContainerInternal(containerProperties, options, context);\n+                    }\n+\n+                    return createContainer(containerProperties, options);\n+                }\n+            }\n+            return Mono.error(unwrappedException);\n+        });\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerInternal(\n+        CosmosContainerProperties containerProperties,\n+        CosmosContainerRequestOptions options,\n+        Context context) {\n+        String spanName = \"createContainer.\" + containerProperties.getId();\n+        Mono<CosmosContainerResponse> responseMono = createContainerInternal(containerProperties, options);\n+        return this.client.getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,\n+            getId(),\n+            getClient().getServiceEndpoint());\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerInternal(\n+        CosmosContainerProperties containerProperties,\n+        CosmosContainerRequestOptions options) {\n+        return getDocClientWrapper()\n+            .createCollection(this.getLink(), ModelBridgeInternal.getV2Collection(containerProperties),\n+                ModelBridgeInternal.toRequestOptions(options))\n+            .map(response -> ModelBridgeInternal.createCosmosContainerResponse(response)).single();\n+    }\n+\n+    Mono<CosmosDatabaseResponse> readInternal(CosmosDatabaseRequestOptions options, Context context) {\n+        String spanName = \"readDatabase.\" + this.getId();\n+        Mono<CosmosDatabaseResponse> responseMono = readInternal(options);\n+        return this.client.getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,\n+            getId(),\n+            getClient().getServiceEndpoint());\n+    }\n+\n+    private Mono<CosmosDatabaseResponse> readInternal(CosmosDatabaseRequestOptions options) {\n+        return getDocClientWrapper().readDatabase(getLink(),\n+            ModelBridgeInternal.toRequestOptions(options))\n+            .map(response -> ModelBridgeInternal.createCosmosDatabaseResponse(response)).single();\n+    }\n+\n+    private Mono<CosmosDatabaseResponse> deleteInternal(CosmosDatabaseRequestOptions options, Context context) {\n+        String spanName = \"deleteDatabase.\" + this.getId();\n+        Mono<CosmosDatabaseResponse> responseMono = deleteInternal(options);\n+        return this.client.getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,\n+            getId(),\n+            getClient().getServiceEndpoint());\n+    }\n+\n+    private Mono<CosmosDatabaseResponse> deleteInternal(CosmosDatabaseRequestOptions options) {\n+        return getDocClientWrapper().deleteDatabase(getLink(),\n+            ModelBridgeInternal.toRequestOptions(options))\n+            .map(response -> ModelBridgeInternal.createCosmosDatabaseResponse(response)).single();\n+    }\n+\n+    private Mono<CosmosUserResponse> createUserInternal(CosmosUserProperties userProperties, Context context) {\n+        String spanName = \"createUser.\" + this.getId();\n+        Mono<CosmosUserResponse> responseMono = createUserInternal(userProperties);\n+        return this.client.getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3NzIxMw=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 541}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTg0MDMzOnYy", "diffSide": "LEFT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMTo0NDozOVrOGvnMyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTozOTozNVrOGv8IyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3ODUwNw==", "bodyText": "Same with queryContainers, don't seem to be having withContext update.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452578507", "createdAt": "2020-07-10T01:44:39Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -464,7 +448,7 @@ public String getId() {\n      * obtained containers or an error.\n      */\n     public CosmosPagedFlux<CosmosContainerProperties> queryContainers(String query) {\n-        return queryContainers(new SqlQuerySpec(query));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyMTU0NA==", "bodyText": "All query instrumentation with tracer are at single place in CosmosPageFlux , where we are using fluxContext", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452921544", "createdAt": "2020-07-10T15:39:35Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -464,7 +448,7 @@ public String getId() {\n      * obtained containers or an error.\n      */\n     public CosmosPagedFlux<CosmosContainerProperties> queryContainers(String query) {\n-        return queryContainers(new SqlQuerySpec(query));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3ODUwNw=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTg0NDI3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMTo0NzoyN1rOGvnPTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMTo0NzoyN1rOGvnPTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3OTE0OA==", "bodyText": "Same here, does not have context propagation of withContext", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452579148", "createdAt": "2020-07-10T01:47:27Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -642,7 +619,7 @@ public CosmosAsyncContainer getContainer(String id) {\n      * obtained users or an error.\n      */\n     public CosmosPagedFlux<CosmosUserProperties> queryUsers(SqlQuerySpec querySpec) {\n-        return queryUsers(querySpec, new CosmosQueryRequestOptions());\n+        return queryUsersInternal(querySpec, new CosmosQueryRequestOptions());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 336}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTg0NjQ2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMTo0OTowNlrOGvnQxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTozODozOVrOGv8G6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3OTUyNw==", "bodyText": "Why two methods for createContainerIfNotExistsInternal?\nCould we combine them?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452579527", "createdAt": "2020-07-10T01:49:06Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -768,4 +697,219 @@ String getLink() {\n         return this.link;\n     }\n \n+    private CosmosPagedFlux<CosmosContainerProperties> queryContainersInternal(SqlQuerySpec querySpec\n+        , CosmosQueryRequestOptions options) {\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryContainers.\" + this.getId();\n+            pagedFluxOptions.setTracerInformation(this.getClient().getTracerProvider(), spanName,\n+                this.getClient().getServiceEndpoint(), getId());\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryCollections(getLink(), querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponse(\n+                    ModelBridgeInternal.getCosmosContainerPropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders()));\n+        });\n+    }\n+\n+    private CosmosPagedFlux<CosmosUserProperties> queryUsersInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options) {\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryUsers.\" + this.getId();\n+            pagedFluxOptions.setTracerInformation(this.getClient().getTracerProvider(), spanName,\n+                this.getClient().getServiceEndpoint(), getId());\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryUsers(getLink(), querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponseWithQueryMetrics(\n+                    ModelBridgeInternal.getCosmosUserPropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders(),\n+                    ModelBridgeInternal.queryMetrics(response)));\n+        });\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerIfNotExistsInternal(\n+        CosmosContainerProperties containerProperties,\n+        CosmosAsyncContainer container,\n+        CosmosContainerRequestOptions options,\n+        Context context) {\n+        String spanName = \"createContainerIfNotExistsInternal.\" + containerProperties.getId();\n+        Context nestedContext = context.addData(TracerProvider.COSMOS_CALL_DEPTH, TracerProvider.COSMOS_CALL_DEPTH_VAL);\n+        if (options == null) {\n+            options = new CosmosContainerRequestOptions();\n+        }\n+\n+        Mono<CosmosContainerResponse> responseMono = createContainerIfNotExistsInternal(container.read(options, nestedContext), containerProperties, options, nestedContext);\n+        return this.client.getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,\n+            getId(),\n+            getClient().getServiceEndpoint());\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerIfNotExistsInternal(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 465}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyMTA2NQ==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452921065", "createdAt": "2020-07-10T15:38:39Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -768,4 +697,219 @@ String getLink() {\n         return this.link;\n     }\n \n+    private CosmosPagedFlux<CosmosContainerProperties> queryContainersInternal(SqlQuerySpec querySpec\n+        , CosmosQueryRequestOptions options) {\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryContainers.\" + this.getId();\n+            pagedFluxOptions.setTracerInformation(this.getClient().getTracerProvider(), spanName,\n+                this.getClient().getServiceEndpoint(), getId());\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryCollections(getLink(), querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponse(\n+                    ModelBridgeInternal.getCosmosContainerPropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders()));\n+        });\n+    }\n+\n+    private CosmosPagedFlux<CosmosUserProperties> queryUsersInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options) {\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryUsers.\" + this.getId();\n+            pagedFluxOptions.setTracerInformation(this.getClient().getTracerProvider(), spanName,\n+                this.getClient().getServiceEndpoint(), getId());\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryUsers(getLink(), querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponseWithQueryMetrics(\n+                    ModelBridgeInternal.getCosmosUserPropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders(),\n+                    ModelBridgeInternal.queryMetrics(response)));\n+        });\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerIfNotExistsInternal(\n+        CosmosContainerProperties containerProperties,\n+        CosmosAsyncContainer container,\n+        CosmosContainerRequestOptions options,\n+        Context context) {\n+        String spanName = \"createContainerIfNotExistsInternal.\" + containerProperties.getId();\n+        Context nestedContext = context.addData(TracerProvider.COSMOS_CALL_DEPTH, TracerProvider.COSMOS_CALL_DEPTH_VAL);\n+        if (options == null) {\n+            options = new CosmosContainerRequestOptions();\n+        }\n+\n+        Mono<CosmosContainerResponse> responseMono = createContainerIfNotExistsInternal(container.read(options, nestedContext), containerProperties, options, nestedContext);\n+        return this.client.getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,\n+            getId(),\n+            getClient().getServiceEndpoint());\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerIfNotExistsInternal(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3OTUyNw=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 465}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTg0ODkyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMTo1MDozOVrOGvnSNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTozODoyMlrOGv8GOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3OTg5NA==", "bodyText": "This wouldn't be a good idea to be checking for context, since it can be anything and expected to be a property bag.\nRather check for a specific property/property value for which you would like to call a different method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452579894", "createdAt": "2020-07-10T01:50:39Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -768,4 +697,219 @@ String getLink() {\n         return this.link;\n     }\n \n+    private CosmosPagedFlux<CosmosContainerProperties> queryContainersInternal(SqlQuerySpec querySpec\n+        , CosmosQueryRequestOptions options) {\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryContainers.\" + this.getId();\n+            pagedFluxOptions.setTracerInformation(this.getClient().getTracerProvider(), spanName,\n+                this.getClient().getServiceEndpoint(), getId());\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryCollections(getLink(), querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponse(\n+                    ModelBridgeInternal.getCosmosContainerPropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders()));\n+        });\n+    }\n+\n+    private CosmosPagedFlux<CosmosUserProperties> queryUsersInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options) {\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryUsers.\" + this.getId();\n+            pagedFluxOptions.setTracerInformation(this.getClient().getTracerProvider(), spanName,\n+                this.getClient().getServiceEndpoint(), getId());\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryUsers(getLink(), querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponseWithQueryMetrics(\n+                    ModelBridgeInternal.getCosmosUserPropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders(),\n+                    ModelBridgeInternal.queryMetrics(response)));\n+        });\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerIfNotExistsInternal(\n+        CosmosContainerProperties containerProperties,\n+        CosmosAsyncContainer container,\n+        CosmosContainerRequestOptions options,\n+        Context context) {\n+        String spanName = \"createContainerIfNotExistsInternal.\" + containerProperties.getId();\n+        Context nestedContext = context.addData(TracerProvider.COSMOS_CALL_DEPTH, TracerProvider.COSMOS_CALL_DEPTH_VAL);\n+        if (options == null) {\n+            options = new CosmosContainerRequestOptions();\n+        }\n+\n+        Mono<CosmosContainerResponse> responseMono = createContainerIfNotExistsInternal(container.read(options, nestedContext), containerProperties, options, nestedContext);\n+        return this.client.getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,\n+            getId(),\n+            getClient().getServiceEndpoint());\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerIfNotExistsInternal(\n+        Mono<CosmosContainerResponse> responseMono,\n+        CosmosContainerProperties containerProperties,\n+        CosmosContainerRequestOptions options,\n+        Context context) {\n+        return responseMono.onErrorResume(exception -> {\n+            final Throwable unwrappedException = Exceptions.unwrap(exception);\n+            if (unwrappedException instanceof CosmosException) {\n+                final CosmosException cosmosException = (CosmosException) unwrappedException;\n+                if (cosmosException.getStatusCode() == HttpConstants.StatusCodes.NOTFOUND) {\n+                    if(context != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 475}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyMDg5MQ==", "bodyText": "Removed the null check , it was getting used when we were doing short circuiting.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452920891", "createdAt": "2020-07-10T15:38:22Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -768,4 +697,219 @@ String getLink() {\n         return this.link;\n     }\n \n+    private CosmosPagedFlux<CosmosContainerProperties> queryContainersInternal(SqlQuerySpec querySpec\n+        , CosmosQueryRequestOptions options) {\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryContainers.\" + this.getId();\n+            pagedFluxOptions.setTracerInformation(this.getClient().getTracerProvider(), spanName,\n+                this.getClient().getServiceEndpoint(), getId());\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryCollections(getLink(), querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponse(\n+                    ModelBridgeInternal.getCosmosContainerPropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders()));\n+        });\n+    }\n+\n+    private CosmosPagedFlux<CosmosUserProperties> queryUsersInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options) {\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryUsers.\" + this.getId();\n+            pagedFluxOptions.setTracerInformation(this.getClient().getTracerProvider(), spanName,\n+                this.getClient().getServiceEndpoint(), getId());\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryUsers(getLink(), querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponseWithQueryMetrics(\n+                    ModelBridgeInternal.getCosmosUserPropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders(),\n+                    ModelBridgeInternal.queryMetrics(response)));\n+        });\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerIfNotExistsInternal(\n+        CosmosContainerProperties containerProperties,\n+        CosmosAsyncContainer container,\n+        CosmosContainerRequestOptions options,\n+        Context context) {\n+        String spanName = \"createContainerIfNotExistsInternal.\" + containerProperties.getId();\n+        Context nestedContext = context.addData(TracerProvider.COSMOS_CALL_DEPTH, TracerProvider.COSMOS_CALL_DEPTH_VAL);\n+        if (options == null) {\n+            options = new CosmosContainerRequestOptions();\n+        }\n+\n+        Mono<CosmosContainerResponse> responseMono = createContainerIfNotExistsInternal(container.read(options, nestedContext), containerProperties, options, nestedContext);\n+        return this.client.getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,\n+            getId(),\n+            getClient().getServiceEndpoint());\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerIfNotExistsInternal(\n+        Mono<CosmosContainerResponse> responseMono,\n+        CosmosContainerProperties containerProperties,\n+        CosmosContainerRequestOptions options,\n+        Context context) {\n+        return responseMono.onErrorResume(exception -> {\n+            final Throwable unwrappedException = Exceptions.unwrap(exception);\n+            if (unwrappedException instanceof CosmosException) {\n+                final CosmosException cosmosException = (CosmosException) unwrappedException;\n+                if (cosmosException.getStatusCode() == HttpConstants.StatusCodes.NOTFOUND) {\n+                    if(context != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3OTg5NA=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 475}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTg1MDM2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMTo1MToyN1rOGvnTCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMTowNzoyNVrOGwFqtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4MDEwNw==", "bodyText": "general comment, spanNames don't need to be created outside of the method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452580107", "createdAt": "2020-07-10T01:51:27Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -768,4 +697,219 @@ String getLink() {\n         return this.link;\n     }\n \n+    private CosmosPagedFlux<CosmosContainerProperties> queryContainersInternal(SqlQuerySpec querySpec\n+        , CosmosQueryRequestOptions options) {\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryContainers.\" + this.getId();\n+            pagedFluxOptions.setTracerInformation(this.getClient().getTracerProvider(), spanName,\n+                this.getClient().getServiceEndpoint(), getId());\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryCollections(getLink(), querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponse(\n+                    ModelBridgeInternal.getCosmosContainerPropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders()));\n+        });\n+    }\n+\n+    private CosmosPagedFlux<CosmosUserProperties> queryUsersInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options) {\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryUsers.\" + this.getId();\n+            pagedFluxOptions.setTracerInformation(this.getClient().getTracerProvider(), spanName,\n+                this.getClient().getServiceEndpoint(), getId());\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryUsers(getLink(), querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponseWithQueryMetrics(\n+                    ModelBridgeInternal.getCosmosUserPropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders(),\n+                    ModelBridgeInternal.queryMetrics(response)));\n+        });\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerIfNotExistsInternal(\n+        CosmosContainerProperties containerProperties,\n+        CosmosAsyncContainer container,\n+        CosmosContainerRequestOptions options,\n+        Context context) {\n+        String spanName = \"createContainerIfNotExistsInternal.\" + containerProperties.getId();\n+        Context nestedContext = context.addData(TracerProvider.COSMOS_CALL_DEPTH, TracerProvider.COSMOS_CALL_DEPTH_VAL);\n+        if (options == null) {\n+            options = new CosmosContainerRequestOptions();\n+        }\n+\n+        Mono<CosmosContainerResponse> responseMono = createContainerIfNotExistsInternal(container.read(options, nestedContext), containerProperties, options, nestedContext);\n+        return this.client.getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,\n+            getId(),\n+            getClient().getServiceEndpoint());\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerIfNotExistsInternal(\n+        Mono<CosmosContainerResponse> responseMono,\n+        CosmosContainerProperties containerProperties,\n+        CosmosContainerRequestOptions options,\n+        Context context) {\n+        return responseMono.onErrorResume(exception -> {\n+            final Throwable unwrappedException = Exceptions.unwrap(exception);\n+            if (unwrappedException instanceof CosmosException) {\n+                final CosmosException cosmosException = (CosmosException) unwrappedException;\n+                if (cosmosException.getStatusCode() == HttpConstants.StatusCodes.NOTFOUND) {\n+                    if(context != null) {\n+                        return createContainerInternal(containerProperties, options, context);\n+                    }\n+\n+                    return createContainer(containerProperties, options);\n+                }\n+            }\n+            return Mono.error(unwrappedException);\n+        });\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerInternal(\n+        CosmosContainerProperties containerProperties,\n+        CosmosContainerRequestOptions options,\n+        Context context) {\n+        String spanName = \"createContainer.\" + containerProperties.getId();\n+        Mono<CosmosContainerResponse> responseMono = createContainerInternal(containerProperties, options);\n+        return this.client.getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 493}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxOTQ4MA==", "bodyText": "Here it is inside the method", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452919480", "createdAt": "2020-07-10T15:35:55Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -768,4 +697,219 @@ String getLink() {\n         return this.link;\n     }\n \n+    private CosmosPagedFlux<CosmosContainerProperties> queryContainersInternal(SqlQuerySpec querySpec\n+        , CosmosQueryRequestOptions options) {\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryContainers.\" + this.getId();\n+            pagedFluxOptions.setTracerInformation(this.getClient().getTracerProvider(), spanName,\n+                this.getClient().getServiceEndpoint(), getId());\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryCollections(getLink(), querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponse(\n+                    ModelBridgeInternal.getCosmosContainerPropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders()));\n+        });\n+    }\n+\n+    private CosmosPagedFlux<CosmosUserProperties> queryUsersInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options) {\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryUsers.\" + this.getId();\n+            pagedFluxOptions.setTracerInformation(this.getClient().getTracerProvider(), spanName,\n+                this.getClient().getServiceEndpoint(), getId());\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryUsers(getLink(), querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponseWithQueryMetrics(\n+                    ModelBridgeInternal.getCosmosUserPropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders(),\n+                    ModelBridgeInternal.queryMetrics(response)));\n+        });\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerIfNotExistsInternal(\n+        CosmosContainerProperties containerProperties,\n+        CosmosAsyncContainer container,\n+        CosmosContainerRequestOptions options,\n+        Context context) {\n+        String spanName = \"createContainerIfNotExistsInternal.\" + containerProperties.getId();\n+        Context nestedContext = context.addData(TracerProvider.COSMOS_CALL_DEPTH, TracerProvider.COSMOS_CALL_DEPTH_VAL);\n+        if (options == null) {\n+            options = new CosmosContainerRequestOptions();\n+        }\n+\n+        Mono<CosmosContainerResponse> responseMono = createContainerIfNotExistsInternal(container.read(options, nestedContext), containerProperties, options, nestedContext);\n+        return this.client.getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,\n+            getId(),\n+            getClient().getServiceEndpoint());\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerIfNotExistsInternal(\n+        Mono<CosmosContainerResponse> responseMono,\n+        CosmosContainerProperties containerProperties,\n+        CosmosContainerRequestOptions options,\n+        Context context) {\n+        return responseMono.onErrorResume(exception -> {\n+            final Throwable unwrappedException = Exceptions.unwrap(exception);\n+            if (unwrappedException instanceof CosmosException) {\n+                final CosmosException cosmosException = (CosmosException) unwrappedException;\n+                if (cosmosException.getStatusCode() == HttpConstants.StatusCodes.NOTFOUND) {\n+                    if(context != null) {\n+                        return createContainerInternal(containerProperties, options, context);\n+                    }\n+\n+                    return createContainer(containerProperties, options);\n+                }\n+            }\n+            return Mono.error(unwrappedException);\n+        });\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerInternal(\n+        CosmosContainerProperties containerProperties,\n+        CosmosContainerRequestOptions options,\n+        Context context) {\n+        String spanName = \"createContainer.\" + containerProperties.getId();\n+        Mono<CosmosContainerResponse> responseMono = createContainerInternal(containerProperties, options);\n+        return this.client.getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4MDEwNw=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 493}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3NzY4NA==", "bodyText": "Readability is concern here, lets keep it as it is.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453077684", "createdAt": "2020-07-10T21:07:25Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -768,4 +697,219 @@ String getLink() {\n         return this.link;\n     }\n \n+    private CosmosPagedFlux<CosmosContainerProperties> queryContainersInternal(SqlQuerySpec querySpec\n+        , CosmosQueryRequestOptions options) {\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryContainers.\" + this.getId();\n+            pagedFluxOptions.setTracerInformation(this.getClient().getTracerProvider(), spanName,\n+                this.getClient().getServiceEndpoint(), getId());\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryCollections(getLink(), querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponse(\n+                    ModelBridgeInternal.getCosmosContainerPropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders()));\n+        });\n+    }\n+\n+    private CosmosPagedFlux<CosmosUserProperties> queryUsersInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options) {\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            String spanName = \"queryUsers.\" + this.getId();\n+            pagedFluxOptions.setTracerInformation(this.getClient().getTracerProvider(), spanName,\n+                this.getClient().getServiceEndpoint(), getId());\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryUsers(getLink(), querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponseWithQueryMetrics(\n+                    ModelBridgeInternal.getCosmosUserPropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders(),\n+                    ModelBridgeInternal.queryMetrics(response)));\n+        });\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerIfNotExistsInternal(\n+        CosmosContainerProperties containerProperties,\n+        CosmosAsyncContainer container,\n+        CosmosContainerRequestOptions options,\n+        Context context) {\n+        String spanName = \"createContainerIfNotExistsInternal.\" + containerProperties.getId();\n+        Context nestedContext = context.addData(TracerProvider.COSMOS_CALL_DEPTH, TracerProvider.COSMOS_CALL_DEPTH_VAL);\n+        if (options == null) {\n+            options = new CosmosContainerRequestOptions();\n+        }\n+\n+        Mono<CosmosContainerResponse> responseMono = createContainerIfNotExistsInternal(container.read(options, nestedContext), containerProperties, options, nestedContext);\n+        return this.client.getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,\n+            getId(),\n+            getClient().getServiceEndpoint());\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerIfNotExistsInternal(\n+        Mono<CosmosContainerResponse> responseMono,\n+        CosmosContainerProperties containerProperties,\n+        CosmosContainerRequestOptions options,\n+        Context context) {\n+        return responseMono.onErrorResume(exception -> {\n+            final Throwable unwrappedException = Exceptions.unwrap(exception);\n+            if (unwrappedException instanceof CosmosException) {\n+                final CosmosException cosmosException = (CosmosException) unwrappedException;\n+                if (cosmosException.getStatusCode() == HttpConstants.StatusCodes.NOTFOUND) {\n+                    if(context != null) {\n+                        return createContainerInternal(containerProperties, options, context);\n+                    }\n+\n+                    return createContainer(containerProperties, options);\n+                }\n+            }\n+            return Mono.error(unwrappedException);\n+        });\n+    }\n+\n+    private Mono<CosmosContainerResponse> createContainerInternal(\n+        CosmosContainerProperties containerProperties,\n+        CosmosContainerRequestOptions options,\n+        Context context) {\n+        String spanName = \"createContainer.\" + containerProperties.getId();\n+        Mono<CosmosContainerResponse> responseMono = createContainerInternal(containerProperties, options);\n+        return this.client.getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4MDEwNw=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 493}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTg1NjgyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncPermission.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMTo1NToyNFrOGvnW1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMTowODowM1rOGwFrvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4MTA3Nw==", "bodyText": "Same comment about the span name.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452581077", "createdAt": "2020-07-10T01:55:24Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncPermission.java", "diffHunk": "@@ -126,4 +121,67 @@ String getLink() {\n         builder.append(getId());\n         return builder.toString();\n     }\n+\n+    private Mono<CosmosPermissionResponse> readInternal(CosmosPermissionRequestOptions options, Context context) {\n+\n+        String spanName = \"readPermission.\" + cosmosUser.getId();\n+        Mono<CosmosPermissionResponse> responseMono = readInternal(options);\n+        return cosmosUser.getDatabase().getClient().getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyMDQwOA==", "bodyText": "We could remove the extra variable span name , but we would like to keep a separate, as it is more readable .", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452920408", "createdAt": "2020-07-10T15:37:31Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncPermission.java", "diffHunk": "@@ -126,4 +121,67 @@ String getLink() {\n         builder.append(getId());\n         return builder.toString();\n     }\n+\n+    private Mono<CosmosPermissionResponse> readInternal(CosmosPermissionRequestOptions options, Context context) {\n+\n+        String spanName = \"readPermission.\" + cosmosUser.getId();\n+        Mono<CosmosPermissionResponse> responseMono = readInternal(options);\n+        return cosmosUser.getDatabase().getClient().getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4MTA3Nw=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3Nzk1MQ==", "bodyText": "Readability is concern here, lets keep it as it is.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453077951", "createdAt": "2020-07-10T21:08:03Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncPermission.java", "diffHunk": "@@ -126,4 +121,67 @@ String getLink() {\n         builder.append(getId());\n         return builder.toString();\n     }\n+\n+    private Mono<CosmosPermissionResponse> readInternal(CosmosPermissionRequestOptions options, Context context) {\n+\n+        String spanName = \"readPermission.\" + cosmosUser.getId();\n+        Mono<CosmosPermissionResponse> responseMono = readInternal(options);\n+        return cosmosUser.getDatabase().getClient().getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4MTA3Nw=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTg1ODY2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncPermission.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMTo1NjozM1rOGvnX_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTozNDo0NlrOGv7-OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4MTM3NA==", "bodyText": "No too inclined on these two internal functions. If only called once could they be combined to a single method?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452581374", "createdAt": "2020-07-10T01:56:33Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncPermission.java", "diffHunk": "@@ -126,4 +121,67 @@ String getLink() {\n         builder.append(getId());\n         return builder.toString();\n     }\n+\n+    private Mono<CosmosPermissionResponse> readInternal(CosmosPermissionRequestOptions options, Context context) {\n+\n+        String spanName = \"readPermission.\" + cosmosUser.getId();\n+        Mono<CosmosPermissionResponse> responseMono = readInternal(options);\n+        return cosmosUser.getDatabase().getClient().getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,\n+            cosmosUser.getDatabase().getId(),\n+            cosmosUser.getDatabase().getClient().getServiceEndpoint());\n+    }\n+\n+    private Mono<CosmosPermissionResponse> readInternal(CosmosPermissionRequestOptions options) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxODg0MQ==", "bodyText": "it was done previously for short circuit ,  combined now", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452918841", "createdAt": "2020-07-10T15:34:46Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncPermission.java", "diffHunk": "@@ -126,4 +121,67 @@ String getLink() {\n         builder.append(getId());\n         return builder.toString();\n     }\n+\n+    private Mono<CosmosPermissionResponse> readInternal(CosmosPermissionRequestOptions options, Context context) {\n+\n+        String spanName = \"readPermission.\" + cosmosUser.getId();\n+        Mono<CosmosPermissionResponse> responseMono = readInternal(options);\n+        return cosmosUser.getDatabase().getClient().getTracerProvider().traceEnabledCosmosResponsePublisher(responseMono, context,\n+            spanName,\n+            cosmosUser.getDatabase().getId(),\n+            cosmosUser.getDatabase().getClient().getServiceEndpoint());\n+    }\n+\n+    private Mono<CosmosPermissionResponse> readInternal(CosmosPermissionRequestOptions options) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4MTM3NA=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTg2MDg1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncScripts.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMTo1ODowM1rOGvnZVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTozMDo1N1rOGv715A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4MTcxNw==", "bodyText": "readAllStoredProcedures doesn't have withContext instrumentation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452581717", "createdAt": "2020-07-10T01:58:03Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncScripts.java", "diffHunk": "@@ -108,6 +108,11 @@\n      */\n     CosmosPagedFlux<CosmosStoredProcedureProperties> readAllStoredProcedures(CosmosQueryRequestOptions options) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxNjcwOA==", "bodyText": "All query instrumentation with tracer are at single place in CosmosPageFlux", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452916708", "createdAt": "2020-07-10T15:30:57Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncScripts.java", "diffHunk": "@@ -108,6 +108,11 @@\n      */\n     CosmosPagedFlux<CosmosStoredProcedureProperties> readAllStoredProcedures(CosmosQueryRequestOptions options) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4MTcxNw=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTg2Njg1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/TracerProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMjowMToxOFrOGvnczQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNToyODo1N1rOGv7xfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4MjYwNQ==", "bodyText": "Don't see this used in the class.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452582605", "createdAt": "2020-07-10T02:01:18Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/TracerProvider.java", "diffHunk": "@@ -0,0 +1,155 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.core.util.Context;\n+import com.azure.core.util.tracing.Tracer;\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.CosmosResponse;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.Signal;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+public class TracerProvider {\n+    private Tracer tracer;\n+    public final static String DB_TYPE_VALUE = \"Cosmos\";\n+    public final static String DB_TYPE = \"db.type\";\n+    public final static String DB_INSTANCE = \"db.instance\";\n+    public final static String DB_URL = \"db.url\";\n+    public static final String DB_STATEMENT = \"db.statement\";\n+    public static final String ERROR_MSG = \"error.msg\";\n+    public static final String ERROR_TYPE = \"error.type\";\n+    public static final String ERROR_STACK = \"error.stack\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxNTU4Mg==", "bodyText": "done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452915582", "createdAt": "2020-07-10T15:28:57Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/TracerProvider.java", "diffHunk": "@@ -0,0 +1,155 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.core.util.Context;\n+import com.azure.core.util.tracing.Tracer;\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.CosmosResponse;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.Signal;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+public class TracerProvider {\n+    private Tracer tracer;\n+    public final static String DB_TYPE_VALUE = \"Cosmos\";\n+    public final static String DB_TYPE = \"db.type\";\n+    public final static String DB_INSTANCE = \"db.instance\";\n+    public final static String DB_URL = \"db.url\";\n+    public static final String DB_STATEMENT = \"db.statement\";\n+    public static final String ERROR_MSG = \"error.msg\";\n+    public static final String ERROR_TYPE = \"error.type\";\n+    public static final String ERROR_STACK = \"error.stack\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4MjYwNQ=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTg3Mzg4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/TracerProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMjowNTo1NlrOGvng6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNToyODo0NlrOGv7xFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4MzY1OQ==", "bodyText": "Rather than this defaulting to 0 we should get the error status code from the Throwable itself.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452583659", "createdAt": "2020-07-10T02:05:56Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/TracerProvider.java", "diffHunk": "@@ -0,0 +1,155 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.core.util.Context;\n+import com.azure.core.util.tracing.Tracer;\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.CosmosResponse;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.Signal;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+public class TracerProvider {\n+    private Tracer tracer;\n+    public final static String DB_TYPE_VALUE = \"Cosmos\";\n+    public final static String DB_TYPE = \"db.type\";\n+    public final static String DB_INSTANCE = \"db.instance\";\n+    public final static String DB_URL = \"db.url\";\n+    public static final String DB_STATEMENT = \"db.statement\";\n+    public static final String ERROR_MSG = \"error.msg\";\n+    public static final String ERROR_TYPE = \"error.type\";\n+    public static final String ERROR_STACK = \"error.stack\";\n+    public static final String COSMOS_CALL_DEPTH = \"cosmosCallDepth\";\n+    public static final String COSMOS_CALL_DEPTH_VAL = \"nested\";\n+    public static final int ERROR_CODE = 0;\n+    public static final String RESOURCE_PROVIDER_NAME = \"Microsoft.DocumentDB\";\n+\n+    public TracerProvider(Iterable<Tracer> tracers) {\n+        Objects.requireNonNull(tracers, \"'tracers' cannot be null.\");\n+        if (tracers.iterator().hasNext()) {\n+            tracer = tracers.iterator().next();\n+        }\n+    }\n+\n+    public boolean isEnabled() {\n+        return tracer != null;\n+    }\n+\n+    /**\n+     * For each tracer plugged into the SDK a new tracing span is created.\n+     * <p>\n+     * The {@code context} will be checked for containing information about a parent span. If a parent span is found the\n+     * new span will be added as a child, otherwise the span will be created and added to the context and any downstream\n+     * start calls will use the created span as the parent.\n+     *\n+     * @param context Additional metadata that is passed through the call stack.\n+     * @return An updated context object.\n+     */\n+    public Context startSpan(String methodName, String databaseId, String endpoint, Context context) {\n+        Context local = Objects.requireNonNull(context, \"'context' cannot be null.\");\n+        local = local.addData(AZ_TRACING_NAMESPACE_KEY, RESOURCE_PROVIDER_NAME);\n+        local = tracer.start(methodName, local); // start the span and return the started span\n+        if (databaseId != null) {\n+            tracer.setAttribute(TracerProvider.DB_INSTANCE, databaseId, local);\n+        }\n+\n+        tracer.setAttribute(TracerProvider.DB_TYPE, DB_TYPE_VALUE, local);\n+        tracer.setAttribute(TracerProvider.DB_URL, endpoint, local);\n+        tracer.setAttribute(TracerProvider.DB_STATEMENT, methodName, local);\n+        return local;\n+    }\n+\n+    /**\n+     * Given a context containing the current tracing span the span is marked completed with status info from\n+     * {@link Signal}.  For each tracer plugged into the SDK the current tracing span is marked as completed.\n+     *\n+     * @param context Additional metadata that is passed through the call stack.\n+     * @param signal  The signal indicates the status and contains the metadata we need to end the tracing span.\n+     */\n+    public <T extends CosmosResponse<? extends Resource>> void endSpan(Context context, Signal<T> signal, int statusCode) {\n+        Objects.requireNonNull(context, \"'context' cannot be null.\");\n+        Objects.requireNonNull(signal, \"'signal' cannot be null.\");\n+\n+        switch (signal.getType()) {\n+            case ON_COMPLETE:\n+                end(statusCode, null, context);\n+                break;\n+            case ON_ERROR:\n+                Throwable throwable = null;\n+                if (signal.hasError()) {\n+                    // The last status available is on error, this contains the thrown error.\n+                    throwable = signal.getThrowable();\n+\n+                    if (throwable instanceof CosmosException) {\n+                        CosmosException exception = (CosmosException) throwable;\n+                        statusCode = exception.getStatusCode();\n+                    }\n+                }\n+                end(statusCode, throwable, context);\n+                break;\n+            default:\n+                // ON_SUBSCRIBE and ON_NEXT don't have the information to end the span so just return.\n+                break;\n+        }\n+    }\n+\n+    public <T extends CosmosResponse<?>> Mono<T> traceEnabledCosmosResponsePublisher(Mono<T> resultPublisher,\n+                                                                                                             Context context,\n+                                                                                                             String spanName,\n+                                                                                                             String databaseId,\n+                                                                                                             String endpoint) {\n+        return traceEnabledPublisher(resultPublisher,  context, spanName,databaseId, endpoint,\n+            (T response) -> response.getStatusCode());\n+    }\n+\n+    public <T> Mono<CosmosItemResponse<T>> traceEnabledCosmosItemResponsePublisher(Mono<CosmosItemResponse<T>> resultPublisher,\n+                                                                                   Context context,\n+                                                                                   String spanName,\n+                                                                                   String databaseId,\n+                                                                                   String endpoint) {\n+        return traceEnabledPublisher(resultPublisher, context, spanName,databaseId, endpoint,\n+            CosmosItemResponse::getStatusCode);\n+    }\n+\n+    public <T> Mono<T> traceEnabledPublisher(Mono<T> resultPublisher,\n+                                             Context context,\n+                                             String spanName,\n+                                             String databaseId,\n+                                             String endpoint,\n+                                             Function<T, Integer> statusCodeFunc) {\n+        final AtomicReference<Context> parentContext = new AtomicReference<>(Context.NONE);\n+        Optional<Object> callDepth = context.getData(COSMOS_CALL_DEPTH);\n+        final boolean isNestedCall = callDepth.isPresent();\n+        return resultPublisher\n+            .doOnSubscribe(ignoredValue -> {\n+                if (isEnabled() && !isNestedCall) {\n+                    parentContext.set(this.startSpan(spanName, databaseId, endpoint,\n+                        context));\n+                }\n+            }).doOnSuccess(response -> {\n+                if (isEnabled() && !isNestedCall) {\n+                    this.endSpan(parentContext.get(), Signal.complete(), statusCodeFunc.apply(response));\n+                }\n+            }).doOnError(throwable -> {\n+                if (isEnabled() && !isNestedCall) {\n+                    this.endSpan(parentContext.get(), Signal.error(throwable), ERROR_CODE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxNTQ3Ng==", "bodyText": "We are already doing at the end by converting throwable to cosmos here  . And if it is non cosmos error , this 0 will be used", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452915476", "createdAt": "2020-07-10T15:28:46Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/TracerProvider.java", "diffHunk": "@@ -0,0 +1,155 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.core.util.Context;\n+import com.azure.core.util.tracing.Tracer;\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.CosmosResponse;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.Signal;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+public class TracerProvider {\n+    private Tracer tracer;\n+    public final static String DB_TYPE_VALUE = \"Cosmos\";\n+    public final static String DB_TYPE = \"db.type\";\n+    public final static String DB_INSTANCE = \"db.instance\";\n+    public final static String DB_URL = \"db.url\";\n+    public static final String DB_STATEMENT = \"db.statement\";\n+    public static final String ERROR_MSG = \"error.msg\";\n+    public static final String ERROR_TYPE = \"error.type\";\n+    public static final String ERROR_STACK = \"error.stack\";\n+    public static final String COSMOS_CALL_DEPTH = \"cosmosCallDepth\";\n+    public static final String COSMOS_CALL_DEPTH_VAL = \"nested\";\n+    public static final int ERROR_CODE = 0;\n+    public static final String RESOURCE_PROVIDER_NAME = \"Microsoft.DocumentDB\";\n+\n+    public TracerProvider(Iterable<Tracer> tracers) {\n+        Objects.requireNonNull(tracers, \"'tracers' cannot be null.\");\n+        if (tracers.iterator().hasNext()) {\n+            tracer = tracers.iterator().next();\n+        }\n+    }\n+\n+    public boolean isEnabled() {\n+        return tracer != null;\n+    }\n+\n+    /**\n+     * For each tracer plugged into the SDK a new tracing span is created.\n+     * <p>\n+     * The {@code context} will be checked for containing information about a parent span. If a parent span is found the\n+     * new span will be added as a child, otherwise the span will be created and added to the context and any downstream\n+     * start calls will use the created span as the parent.\n+     *\n+     * @param context Additional metadata that is passed through the call stack.\n+     * @return An updated context object.\n+     */\n+    public Context startSpan(String methodName, String databaseId, String endpoint, Context context) {\n+        Context local = Objects.requireNonNull(context, \"'context' cannot be null.\");\n+        local = local.addData(AZ_TRACING_NAMESPACE_KEY, RESOURCE_PROVIDER_NAME);\n+        local = tracer.start(methodName, local); // start the span and return the started span\n+        if (databaseId != null) {\n+            tracer.setAttribute(TracerProvider.DB_INSTANCE, databaseId, local);\n+        }\n+\n+        tracer.setAttribute(TracerProvider.DB_TYPE, DB_TYPE_VALUE, local);\n+        tracer.setAttribute(TracerProvider.DB_URL, endpoint, local);\n+        tracer.setAttribute(TracerProvider.DB_STATEMENT, methodName, local);\n+        return local;\n+    }\n+\n+    /**\n+     * Given a context containing the current tracing span the span is marked completed with status info from\n+     * {@link Signal}.  For each tracer plugged into the SDK the current tracing span is marked as completed.\n+     *\n+     * @param context Additional metadata that is passed through the call stack.\n+     * @param signal  The signal indicates the status and contains the metadata we need to end the tracing span.\n+     */\n+    public <T extends CosmosResponse<? extends Resource>> void endSpan(Context context, Signal<T> signal, int statusCode) {\n+        Objects.requireNonNull(context, \"'context' cannot be null.\");\n+        Objects.requireNonNull(signal, \"'signal' cannot be null.\");\n+\n+        switch (signal.getType()) {\n+            case ON_COMPLETE:\n+                end(statusCode, null, context);\n+                break;\n+            case ON_ERROR:\n+                Throwable throwable = null;\n+                if (signal.hasError()) {\n+                    // The last status available is on error, this contains the thrown error.\n+                    throwable = signal.getThrowable();\n+\n+                    if (throwable instanceof CosmosException) {\n+                        CosmosException exception = (CosmosException) throwable;\n+                        statusCode = exception.getStatusCode();\n+                    }\n+                }\n+                end(statusCode, throwable, context);\n+                break;\n+            default:\n+                // ON_SUBSCRIBE and ON_NEXT don't have the information to end the span so just return.\n+                break;\n+        }\n+    }\n+\n+    public <T extends CosmosResponse<?>> Mono<T> traceEnabledCosmosResponsePublisher(Mono<T> resultPublisher,\n+                                                                                                             Context context,\n+                                                                                                             String spanName,\n+                                                                                                             String databaseId,\n+                                                                                                             String endpoint) {\n+        return traceEnabledPublisher(resultPublisher,  context, spanName,databaseId, endpoint,\n+            (T response) -> response.getStatusCode());\n+    }\n+\n+    public <T> Mono<CosmosItemResponse<T>> traceEnabledCosmosItemResponsePublisher(Mono<CosmosItemResponse<T>> resultPublisher,\n+                                                                                   Context context,\n+                                                                                   String spanName,\n+                                                                                   String databaseId,\n+                                                                                   String endpoint) {\n+        return traceEnabledPublisher(resultPublisher, context, spanName,databaseId, endpoint,\n+            CosmosItemResponse::getStatusCode);\n+    }\n+\n+    public <T> Mono<T> traceEnabledPublisher(Mono<T> resultPublisher,\n+                                             Context context,\n+                                             String spanName,\n+                                             String databaseId,\n+                                             String endpoint,\n+                                             Function<T, Integer> statusCodeFunc) {\n+        final AtomicReference<Context> parentContext = new AtomicReference<>(Context.NONE);\n+        Optional<Object> callDepth = context.getData(COSMOS_CALL_DEPTH);\n+        final boolean isNestedCall = callDepth.isPresent();\n+        return resultPublisher\n+            .doOnSubscribe(ignoredValue -> {\n+                if (isEnabled() && !isNestedCall) {\n+                    parentContext.set(this.startSpan(spanName, databaseId, endpoint,\n+                        context));\n+                }\n+            }).doOnSuccess(response -> {\n+                if (isEnabled() && !isNestedCall) {\n+                    this.endSpan(parentContext.get(), Signal.complete(), statusCodeFunc.apply(response));\n+                }\n+            }).doOnError(throwable -> {\n+                if (isEnabled() && !isNestedCall) {\n+                    this.endSpan(parentContext.get(), Signal.error(throwable), ERROR_CODE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4MzY1OQ=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTg3NTQyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/TracerProvider.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMjowNjo1MFrOGvnhxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzo0Mzo0NlrOG04nkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4Mzg3OA==", "bodyText": "Need unit tests for this class.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452583878", "createdAt": "2020-07-10T02:06:50Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/TracerProvider.java", "diffHunk": "@@ -0,0 +1,155 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxMzkwMw==", "bodyText": "Can you please give the specifics, what all scenario would be good for unit testing.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r452913903", "createdAt": "2020-07-10T15:26:03Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/TracerProvider.java", "diffHunk": "@@ -0,0 +1,155 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4Mzg3OA=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3OTIyMA==", "bodyText": "@samvaity - good idea, can you please suggest some ideas on how other SDKs are testing this and the coverage of TracerProvider?\nI am tracking the issue here : #13032\nCan you please provide the context on the issue and we will take care of it.\n@simplynaveen20 - please take this up on a follow up PR.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453079220", "createdAt": "2020-07-10T21:11:39Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/TracerProvider.java", "diffHunk": "@@ -0,0 +1,155 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4Mzg3OA=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4NzQwMg==", "bodyText": "Some existing examples of unit testing this class could be found here https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core-amqp/src/test/java/com/azure/core/amqp/implementation/TracerProviderTest.java\nIt may need to be updated (or not) to fit Cosmos scenarios.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453087402", "createdAt": "2020-07-10T21:34:43Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/TracerProvider.java", "diffHunk": "@@ -0,0 +1,155 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4Mzg3OA=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwNjc3MQ==", "bodyText": "as mentioned by Kushagra , tracking in #13032", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r458106771", "createdAt": "2020-07-21T13:43:46Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/TracerProvider.java", "diffHunk": "@@ -0,0 +1,155 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4Mzg3OA=="}, "originalCommit": {"oid": "deb6978f7642675623ae06dcb34d2a186d66cadf"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTAzNDMzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMToxMToxM1rOGwFwEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzoxMTo1OVrOGwx4Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3OTA1Ng==", "bodyText": "missing space before context", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453079056", "createdAt": "2020-07-10T21:11:13Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -500,11 +530,8 @@ public String getId() {\n         ModelBridgeInternal.setPartitionKey(options, partitionKey);\n         @SuppressWarnings(\"unchecked\")\n         Class<T> itemType = (Class<T>) item.getClass();\n-        return this.getDatabase()\n-                   .getDocClientWrapper()\n-                   .replaceDocument(getItemLink(itemId), doc, ModelBridgeInternal.toRequestOptions(options))\n-                   .map(response -> ModelBridgeInternal.createCosmosAsyncItemResponse(response, itemType))\n-                   .single();\n+        final CosmosItemRequestOptions requestOptions = options;\n+        return withContext(context -> replaceItemInternal(itemType, itemId, doc, requestOptions,context));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8d7ebbdd6ca856946093d058fa3045b56316fd"}, "originalPosition": 268}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5ODczNg==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453798736", "createdAt": "2020-07-13T17:06:34Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -500,11 +530,8 @@ public String getId() {\n         ModelBridgeInternal.setPartitionKey(options, partitionKey);\n         @SuppressWarnings(\"unchecked\")\n         Class<T> itemType = (Class<T>) item.getClass();\n-        return this.getDatabase()\n-                   .getDocClientWrapper()\n-                   .replaceDocument(getItemLink(itemId), doc, ModelBridgeInternal.toRequestOptions(options))\n-                   .map(response -> ModelBridgeInternal.createCosmosAsyncItemResponse(response, itemType))\n-                   .single();\n+        final CosmosItemRequestOptions requestOptions = options;\n+        return withContext(context -> replaceItemInternal(itemType, itemId, doc, requestOptions,context));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3OTA1Ng=="}, "originalCommit": {"oid": "be8d7ebbdd6ca856946093d058fa3045b56316fd"}, "originalPosition": 268}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwMjAzMQ==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453802031", "createdAt": "2020-07-13T17:11:59Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -500,11 +530,8 @@ public String getId() {\n         ModelBridgeInternal.setPartitionKey(options, partitionKey);\n         @SuppressWarnings(\"unchecked\")\n         Class<T> itemType = (Class<T>) item.getClass();\n-        return this.getDatabase()\n-                   .getDocClientWrapper()\n-                   .replaceDocument(getItemLink(itemId), doc, ModelBridgeInternal.toRequestOptions(options))\n-                   .map(response -> ModelBridgeInternal.createCosmosAsyncItemResponse(response, itemType))\n-                   .single();\n+        final CosmosItemRequestOptions requestOptions = options;\n+        return withContext(context -> replaceItemInternal(itemType, itemId, doc, requestOptions,context));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3OTA1Ng=="}, "originalCommit": {"oid": "be8d7ebbdd6ca856946093d058fa3045b56316fd"}, "originalPosition": 268}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTA0OTM0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMToxNzo0NlrOGwF5IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMzowODozOFrOGwH87A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4MTM3Nw==", "bodyText": "@simplynaveen20 Was thinking about this a little bit. Would it be acceptable for Cosmos behavior to throw an NPE if the tracer failed to load?\nAs tracing being an added functionality would it rather be acceptable to log that the tracer could not be loaded rather than to throw and make it completely impossible for the users to use this functionality just because we want to mandate a code pattern for the developers?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453081377", "createdAt": "2020-07-10T21:17:46Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -580,11 +603,14 @@ public CosmosAsyncScripts getScripts() {\n      */\n     public CosmosPagedFlux<CosmosConflictProperties> readAllConflicts(CosmosQueryRequestOptions options) {\n         return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            pagedFluxOptions.setTracerInformation(this.getDatabase().getClient().getTracerProvider(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8d7ebbdd6ca856946093d058fa3045b56316fd"}, "originalPosition": 289}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4NzU4OQ==", "bodyText": "Its not about tracer , its about tracerProvider. Null pointer wont come for non tracer user. It will only come for dev who will not use the tracer pipeline, irrespective of tracer present or not", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453087589", "createdAt": "2020-07-10T21:35:11Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -580,11 +603,14 @@ public CosmosAsyncScripts getScripts() {\n      */\n     public CosmosPagedFlux<CosmosConflictProperties> readAllConflicts(CosmosQueryRequestOptions options) {\n         return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            pagedFluxOptions.setTracerInformation(this.getDatabase().getClient().getTracerProvider(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4MTM3Nw=="}, "originalCommit": {"oid": "be8d7ebbdd6ca856946093d058fa3045b56316fd"}, "originalPosition": 289}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwOTQxOA==", "bodyText": "Null pointer exceptions should be an eager check.\ncc: @kushagraThapar", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453109418", "createdAt": "2020-07-10T22:45:44Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -580,11 +603,14 @@ public CosmosAsyncScripts getScripts() {\n      */\n     public CosmosPagedFlux<CosmosConflictProperties> readAllConflicts(CosmosQueryRequestOptions options) {\n         return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            pagedFluxOptions.setTracerInformation(this.getDatabase().getClient().getTracerProvider(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4MTM3Nw=="}, "originalCommit": {"oid": "be8d7ebbdd6ca856946093d058fa3045b56316fd"}, "originalPosition": 289}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzExNTExNg==", "bodyText": "Agreed, we should check them upfront.\nUpdated the tracking issue to include this as well - #13031", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453115116", "createdAt": "2020-07-10T23:08:38Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -580,11 +603,14 @@ public CosmosAsyncScripts getScripts() {\n      */\n     public CosmosPagedFlux<CosmosConflictProperties> readAllConflicts(CosmosQueryRequestOptions options) {\n         return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            pagedFluxOptions.setTracerInformation(this.getDatabase().getClient().getTracerProvider(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4MTM3Nw=="}, "originalCommit": {"oid": "be8d7ebbdd6ca856946093d058fa3045b56316fd"}, "originalPosition": 289}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTIzODA1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncConflict.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjo0NzozNVrOGwHoRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzoxMTozOFrOGwx3Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwOTgzMQ==", "bodyText": "Can the internal methods be combined here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453109831", "createdAt": "2020-07-10T22:47:35Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncConflict.java", "diffHunk": "@@ -106,4 +106,33 @@ String getLink() {\n         builder.append(getId());\n         return builder.toString();\n     }\n+\n+    private Mono<CosmosConflictResponse> readInternal(RequestOptions options, Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8d7ebbdd6ca856946093d058fa3045b56316fd"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5ODgwOA==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453798808", "createdAt": "2020-07-13T17:06:41Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncConflict.java", "diffHunk": "@@ -106,4 +106,33 @@ String getLink() {\n         builder.append(getId());\n         return builder.toString();\n     }\n+\n+    private Mono<CosmosConflictResponse> readInternal(RequestOptions options, Context context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwOTgzMQ=="}, "originalCommit": {"oid": "be8d7ebbdd6ca856946093d058fa3045b56316fd"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwMTgxMA==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453801810", "createdAt": "2020-07-13T17:11:38Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncConflict.java", "diffHunk": "@@ -106,4 +106,33 @@ String getLink() {\n         builder.append(getId());\n         return builder.toString();\n     }\n+\n+    private Mono<CosmosConflictResponse> readInternal(RequestOptions options, Context context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwOTgzMQ=="}, "originalCommit": {"oid": "be8d7ebbdd6ca856946093d058fa3045b56316fd"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTMyMjY0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMzozNzo0NFrOGwIXsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzoxMTo0OVrOGwx3xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEyMTk3MA==", "bodyText": "@simplynaveen20 Non-blocking, what are your thoughts about combing these?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453121970", "createdAt": "2020-07-10T23:37:44Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -709,4 +695,214 @@ String getParentLink() {\n     String getLink() {\n         return this.link;\n     }\n+\n+    private Mono<CosmosItemResponse<Object>> deleteItemInternal(\n+        String itemId,\n+        RequestOptions requestOptions,\n+        Context context) {\n+        Mono<CosmosItemResponse<Object>> responseMono = deleteItemInternal(itemId, requestOptions);\n+        return database.getClient().getTracerProvider().traceEnabledCosmosItemResponsePublisher(responseMono,\n+            context,\n+            this.deleteItemSpanName,\n+            database.getId(),\n+            database.getClient().getServiceEndpoint());\n+    }\n+\n+    private Mono<CosmosItemResponse<Object>> deleteItemInternal(\n+        String itemId,\n+        RequestOptions requestOptions) {\n+        return this.getDatabase()\n+            .getDocClientWrapper()\n+            .deleteDocument(getItemLink(itemId), requestOptions)\n+            .map(response -> ModelBridgeInternal.createCosmosAsyncItemResponseWithObjectType(response))\n+            .single();\n+    }\n+\n+    private <T> Mono<CosmosItemResponse<T>> replaceItemInternal(\n+        Class<T> itemType,\n+        String itemId,\n+        Document doc,\n+        CosmosItemRequestOptions options,\n+        Context context) {\n+        Mono<CosmosItemResponse<T>> responseMono = replaceItemInternal(itemType, itemId, doc, options);\n+        return database.getClient().getTracerProvider().traceEnabledCosmosItemResponsePublisher(responseMono,\n+            context, this.replaceItemSpanName, database.getId(), database.getClient().getServiceEndpoint());\n+    }\n+\n+    private <T> Mono<CosmosItemResponse<T>> replaceItemInternal(\n+        Class<T> itemType,\n+        String itemId,\n+        Document doc,\n+        CosmosItemRequestOptions options) {\n+       return this.getDatabase()\n+            .getDocClientWrapper()\n+            .replaceDocument(getItemLink(itemId), doc, ModelBridgeInternal.toRequestOptions(options))\n+            .map(response -> ModelBridgeInternal.createCosmosAsyncItemResponse(response, itemType))\n+            .single();\n+    }\n+\n+    private <T> Mono<CosmosItemResponse<T>> upsertItemInternal(T item, CosmosItemRequestOptions options, Context context) {\n+        Mono<CosmosItemResponse<T>> responseMono = upsertItemInternal(item, options);\n+        return database.getClient().getTracerProvider().traceEnabledCosmosItemResponsePublisher(responseMono,\n+            context,\n+            this.upsertItemSpanName,\n+            database.getId(),\n+            database.getClient().getServiceEndpoint());\n+    }\n+\n+    private <T> Mono<CosmosItemResponse<T>> upsertItemInternal(T item, CosmosItemRequestOptions options) {\n+        @SuppressWarnings(\"unchecked\")\n+        Class<T> itemType = (Class<T>) item.getClass();\n+        return this.getDatabase().getDocClientWrapper()\n+            .upsertDocument(this.getLink(), item,\n+                ModelBridgeInternal.toRequestOptions(options),\n+                true)\n+            .map(response -> ModelBridgeInternal.createCosmosAsyncItemResponse(response, itemType))\n+            .single();\n+    }\n+\n+    private <T> Mono<CosmosItemResponse<T>> readItemInternal(\n+        String itemId,\n+        RequestOptions requestOptions, Class<T> itemType,\n+        Context context) {\n+        Mono<CosmosItemResponse<T>> responseMono = readItemInternal(itemId, requestOptions, itemType);\n+        return database.getClient().getTracerProvider().traceEnabledCosmosItemResponsePublisher(responseMono,\n+            context,\n+            this.readItemSpanName,\n+            database.getId(),\n+            database.getClient().getServiceEndpoint());\n+    }\n+\n+    private <T> Mono<CosmosItemResponse<T>> readItemInternal(\n+        String itemId,\n+        RequestOptions requestOptions, Class<T> itemType) {\n+        return this.getDatabase().getDocClientWrapper()\n+            .readDocument(getItemLink(itemId), requestOptions)\n+            .map(response -> ModelBridgeInternal.createCosmosAsyncItemResponse(response, itemType))\n+            .single();\n+    }\n+\n+    Mono<CosmosContainerResponse> read(CosmosContainerRequestOptions options, Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8d7ebbdd6ca856946093d058fa3045b56316fd"}, "originalPosition": 482}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwMDUzMA==", "bodyText": "done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453800530", "createdAt": "2020-07-13T17:09:33Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -709,4 +695,214 @@ String getParentLink() {\n     String getLink() {\n         return this.link;\n     }\n+\n+    private Mono<CosmosItemResponse<Object>> deleteItemInternal(\n+        String itemId,\n+        RequestOptions requestOptions,\n+        Context context) {\n+        Mono<CosmosItemResponse<Object>> responseMono = deleteItemInternal(itemId, requestOptions);\n+        return database.getClient().getTracerProvider().traceEnabledCosmosItemResponsePublisher(responseMono,\n+            context,\n+            this.deleteItemSpanName,\n+            database.getId(),\n+            database.getClient().getServiceEndpoint());\n+    }\n+\n+    private Mono<CosmosItemResponse<Object>> deleteItemInternal(\n+        String itemId,\n+        RequestOptions requestOptions) {\n+        return this.getDatabase()\n+            .getDocClientWrapper()\n+            .deleteDocument(getItemLink(itemId), requestOptions)\n+            .map(response -> ModelBridgeInternal.createCosmosAsyncItemResponseWithObjectType(response))\n+            .single();\n+    }\n+\n+    private <T> Mono<CosmosItemResponse<T>> replaceItemInternal(\n+        Class<T> itemType,\n+        String itemId,\n+        Document doc,\n+        CosmosItemRequestOptions options,\n+        Context context) {\n+        Mono<CosmosItemResponse<T>> responseMono = replaceItemInternal(itemType, itemId, doc, options);\n+        return database.getClient().getTracerProvider().traceEnabledCosmosItemResponsePublisher(responseMono,\n+            context, this.replaceItemSpanName, database.getId(), database.getClient().getServiceEndpoint());\n+    }\n+\n+    private <T> Mono<CosmosItemResponse<T>> replaceItemInternal(\n+        Class<T> itemType,\n+        String itemId,\n+        Document doc,\n+        CosmosItemRequestOptions options) {\n+       return this.getDatabase()\n+            .getDocClientWrapper()\n+            .replaceDocument(getItemLink(itemId), doc, ModelBridgeInternal.toRequestOptions(options))\n+            .map(response -> ModelBridgeInternal.createCosmosAsyncItemResponse(response, itemType))\n+            .single();\n+    }\n+\n+    private <T> Mono<CosmosItemResponse<T>> upsertItemInternal(T item, CosmosItemRequestOptions options, Context context) {\n+        Mono<CosmosItemResponse<T>> responseMono = upsertItemInternal(item, options);\n+        return database.getClient().getTracerProvider().traceEnabledCosmosItemResponsePublisher(responseMono,\n+            context,\n+            this.upsertItemSpanName,\n+            database.getId(),\n+            database.getClient().getServiceEndpoint());\n+    }\n+\n+    private <T> Mono<CosmosItemResponse<T>> upsertItemInternal(T item, CosmosItemRequestOptions options) {\n+        @SuppressWarnings(\"unchecked\")\n+        Class<T> itemType = (Class<T>) item.getClass();\n+        return this.getDatabase().getDocClientWrapper()\n+            .upsertDocument(this.getLink(), item,\n+                ModelBridgeInternal.toRequestOptions(options),\n+                true)\n+            .map(response -> ModelBridgeInternal.createCosmosAsyncItemResponse(response, itemType))\n+            .single();\n+    }\n+\n+    private <T> Mono<CosmosItemResponse<T>> readItemInternal(\n+        String itemId,\n+        RequestOptions requestOptions, Class<T> itemType,\n+        Context context) {\n+        Mono<CosmosItemResponse<T>> responseMono = readItemInternal(itemId, requestOptions, itemType);\n+        return database.getClient().getTracerProvider().traceEnabledCosmosItemResponsePublisher(responseMono,\n+            context,\n+            this.readItemSpanName,\n+            database.getId(),\n+            database.getClient().getServiceEndpoint());\n+    }\n+\n+    private <T> Mono<CosmosItemResponse<T>> readItemInternal(\n+        String itemId,\n+        RequestOptions requestOptions, Class<T> itemType) {\n+        return this.getDatabase().getDocClientWrapper()\n+            .readDocument(getItemLink(itemId), requestOptions)\n+            .map(response -> ModelBridgeInternal.createCosmosAsyncItemResponse(response, itemType))\n+            .single();\n+    }\n+\n+    Mono<CosmosContainerResponse> read(CosmosContainerRequestOptions options, Context context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEyMTk3MA=="}, "originalCommit": {"oid": "be8d7ebbdd6ca856946093d058fa3045b56316fd"}, "originalPosition": 482}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwMTkyNQ==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453801925", "createdAt": "2020-07-13T17:11:49Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -709,4 +695,214 @@ String getParentLink() {\n     String getLink() {\n         return this.link;\n     }\n+\n+    private Mono<CosmosItemResponse<Object>> deleteItemInternal(\n+        String itemId,\n+        RequestOptions requestOptions,\n+        Context context) {\n+        Mono<CosmosItemResponse<Object>> responseMono = deleteItemInternal(itemId, requestOptions);\n+        return database.getClient().getTracerProvider().traceEnabledCosmosItemResponsePublisher(responseMono,\n+            context,\n+            this.deleteItemSpanName,\n+            database.getId(),\n+            database.getClient().getServiceEndpoint());\n+    }\n+\n+    private Mono<CosmosItemResponse<Object>> deleteItemInternal(\n+        String itemId,\n+        RequestOptions requestOptions) {\n+        return this.getDatabase()\n+            .getDocClientWrapper()\n+            .deleteDocument(getItemLink(itemId), requestOptions)\n+            .map(response -> ModelBridgeInternal.createCosmosAsyncItemResponseWithObjectType(response))\n+            .single();\n+    }\n+\n+    private <T> Mono<CosmosItemResponse<T>> replaceItemInternal(\n+        Class<T> itemType,\n+        String itemId,\n+        Document doc,\n+        CosmosItemRequestOptions options,\n+        Context context) {\n+        Mono<CosmosItemResponse<T>> responseMono = replaceItemInternal(itemType, itemId, doc, options);\n+        return database.getClient().getTracerProvider().traceEnabledCosmosItemResponsePublisher(responseMono,\n+            context, this.replaceItemSpanName, database.getId(), database.getClient().getServiceEndpoint());\n+    }\n+\n+    private <T> Mono<CosmosItemResponse<T>> replaceItemInternal(\n+        Class<T> itemType,\n+        String itemId,\n+        Document doc,\n+        CosmosItemRequestOptions options) {\n+       return this.getDatabase()\n+            .getDocClientWrapper()\n+            .replaceDocument(getItemLink(itemId), doc, ModelBridgeInternal.toRequestOptions(options))\n+            .map(response -> ModelBridgeInternal.createCosmosAsyncItemResponse(response, itemType))\n+            .single();\n+    }\n+\n+    private <T> Mono<CosmosItemResponse<T>> upsertItemInternal(T item, CosmosItemRequestOptions options, Context context) {\n+        Mono<CosmosItemResponse<T>> responseMono = upsertItemInternal(item, options);\n+        return database.getClient().getTracerProvider().traceEnabledCosmosItemResponsePublisher(responseMono,\n+            context,\n+            this.upsertItemSpanName,\n+            database.getId(),\n+            database.getClient().getServiceEndpoint());\n+    }\n+\n+    private <T> Mono<CosmosItemResponse<T>> upsertItemInternal(T item, CosmosItemRequestOptions options) {\n+        @SuppressWarnings(\"unchecked\")\n+        Class<T> itemType = (Class<T>) item.getClass();\n+        return this.getDatabase().getDocClientWrapper()\n+            .upsertDocument(this.getLink(), item,\n+                ModelBridgeInternal.toRequestOptions(options),\n+                true)\n+            .map(response -> ModelBridgeInternal.createCosmosAsyncItemResponse(response, itemType))\n+            .single();\n+    }\n+\n+    private <T> Mono<CosmosItemResponse<T>> readItemInternal(\n+        String itemId,\n+        RequestOptions requestOptions, Class<T> itemType,\n+        Context context) {\n+        Mono<CosmosItemResponse<T>> responseMono = readItemInternal(itemId, requestOptions, itemType);\n+        return database.getClient().getTracerProvider().traceEnabledCosmosItemResponsePublisher(responseMono,\n+            context,\n+            this.readItemSpanName,\n+            database.getId(),\n+            database.getClient().getServiceEndpoint());\n+    }\n+\n+    private <T> Mono<CosmosItemResponse<T>> readItemInternal(\n+        String itemId,\n+        RequestOptions requestOptions, Class<T> itemType) {\n+        return this.getDatabase().getDocClientWrapper()\n+            .readDocument(getItemLink(itemId), requestOptions)\n+            .map(response -> ModelBridgeInternal.createCosmosAsyncItemResponse(response, itemType))\n+            .single();\n+    }\n+\n+    Mono<CosmosContainerResponse> read(CosmosContainerRequestOptions options, Context context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEyMTk3MA=="}, "originalCommit": {"oid": "be8d7ebbdd6ca856946093d058fa3045b56316fd"}, "originalPosition": 482}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDI4NjI2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzoyOToxNFrOGwyhOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzo0MjozNVrOG04kSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgxMjUzOA==", "bodyText": "same here, can combine these.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453812538", "createdAt": "2020-07-13T17:29:14Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -221,16 +241,31 @@ public String getId() {\n         if (options == null) {\n             options = new CosmosItemRequestOptions();\n         }\n+\n+        final CosmosItemRequestOptions requestOptions = options;\n+        return withContext(context -> createItemInternal(item, requestOptions, context));\n+    }\n+\n+    private <T> Mono<CosmosItemResponse<T>> createItemInternal(T item, CosmosItemRequestOptions options, Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1296f69012aaf51b1b229ed1e36625cec14bc6"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwNTkyOA==", "bodyText": "done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r458105928", "createdAt": "2020-07-21T13:42:35Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -221,16 +241,31 @@ public String getId() {\n         if (options == null) {\n             options = new CosmosItemRequestOptions();\n         }\n+\n+        final CosmosItemRequestOptions requestOptions = options;\n+        return withContext(context -> createItemInternal(item, requestOptions, context));\n+    }\n+\n+    private <T> Mono<CosmosItemResponse<T>> createItemInternal(T item, CosmosItemRequestOptions options, Context context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgxMjUzOA=="}, "originalCommit": {"oid": "fc1296f69012aaf51b1b229ed1e36625cec14bc6"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDI5MDg4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzozMDoyNVrOGwykDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzo0MjoyNlrOG04j5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgxMzI2Mw==", "bodyText": "same here combine these internal methods.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453813263", "createdAt": "2020-07-13T17:30:25Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -709,4 +695,210 @@ String getParentLink() {\n     String getLink() {\n         return this.link;\n     }\n+\n+    private Mono<CosmosItemResponse<Object>> deleteItemInternal(\n+        String itemId,\n+        RequestOptions requestOptions,\n+        Context context) {\n+        Mono<CosmosItemResponse<Object>> responseMono = deleteItemInternal(itemId, requestOptions);\n+        return database.getClient().getTracerProvider().traceEnabledCosmosItemResponsePublisher(responseMono,\n+            context,\n+            this.deleteItemSpanName,\n+            database.getId(),\n+            database.getClient().getServiceEndpoint());\n+    }\n+\n+    private Mono<CosmosItemResponse<Object>> deleteItemInternal(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1296f69012aaf51b1b229ed1e36625cec14bc6"}, "originalPosition": 408}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwNTgzMA==", "bodyText": "done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r458105830", "createdAt": "2020-07-21T13:42:26Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -709,4 +695,210 @@ String getParentLink() {\n     String getLink() {\n         return this.link;\n     }\n+\n+    private Mono<CosmosItemResponse<Object>> deleteItemInternal(\n+        String itemId,\n+        RequestOptions requestOptions,\n+        Context context) {\n+        Mono<CosmosItemResponse<Object>> responseMono = deleteItemInternal(itemId, requestOptions);\n+        return database.getClient().getTracerProvider().traceEnabledCosmosItemResponsePublisher(responseMono,\n+            context,\n+            this.deleteItemSpanName,\n+            database.getId(),\n+            database.getClient().getServiceEndpoint());\n+    }\n+\n+    private Mono<CosmosItemResponse<Object>> deleteItemInternal(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgxMzI2Mw=="}, "originalCommit": {"oid": "fc1296f69012aaf51b1b229ed1e36625cec14bc6"}, "originalPosition": 408}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTE1NDM4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTozNTo0M1rOGw6wKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo1NzoyNVrOGw7hCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0NzQzNA==", "bodyText": "What is happening here, why are we setting attributes in a method that's verifying tracer attributes?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453947434", "createdAt": "2020-07-13T21:35:43Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "diffHunk": "@@ -0,0 +1,375 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos;\n+\n+import com.azure.core.util.Context;\n+import com.azure.core.util.tracing.Tracer;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.LifeCycleUtils;\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.implementation.TracerProvider;\n+import com.azure.cosmos.implementation.directconnectivity.ReflectionUtils;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.CosmosStoredProcedureProperties;\n+import com.azure.cosmos.models.CosmosTriggerProperties;\n+import com.azure.cosmos.models.CosmosUserDefinedFunctionProperties;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.models.TriggerOperation;\n+import com.azure.cosmos.models.TriggerType;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import org.mockito.Matchers;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class CosmosTracerTest extends TestSuiteBase {\n+    private static final String ITEM_ID = \"tracerDoc\";\n+    CosmosAsyncClient client;\n+    CosmosAsyncDatabase cosmosAsyncDatabase;\n+    CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @BeforeClass(groups = {\"emulator\"}, timeOut = SETUP_TIMEOUT)\n+    public void beforeClass() {\n+        client = new CosmosClientBuilder()\n+            .endpoint(TestConfigurations.HOST)\n+            .key(TestConfigurations.MASTER_KEY)\n+            .directMode(DirectConnectionConfig.getDefaultConfig())\n+            .buildAsyncClient();\n+        cosmosAsyncDatabase = getSharedCosmosDatabase(client);\n+        cosmosAsyncContainer = getSharedMultiPartitionCosmosContainer(client);\n+\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncClient() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        client.createDatabaseIfNotExists(cosmosAsyncDatabase.getId()).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createDatabaseIfNotExists.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        client.readAllDatabases(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllDatabases\", context, null, 2);\n+\n+\n+        String query = \"select * from c where c.id = '\" + cosmosAsyncDatabase.getId() + \"'\";\n+        client.queryDatabases(query, new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"queryDatabases\", context, null, 3);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncDatabase() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncDatabase.createContainerIfNotExists(cosmosAsyncContainer.getId(),\n+            \"/pk\", 5000).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createContainerIfNotExists.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        try {\n+            cosmosAsyncDatabase.readThroughput().block();\n+        } catch (CosmosException ex) {\n+            //do nothing\n+        }\n+\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readThroughput.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 2);\n+\n+        cosmosAsyncDatabase.readAllUsers().byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllUsers.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 3);\n+\n+        cosmosAsyncDatabase.readAllContainers().byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllContainers.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 4);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncContainer() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.read().block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readContainer.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        try {\n+            cosmosAsyncContainer.readThroughput().block();\n+        } catch (CosmosException ex) {\n+            //do nothing\n+        }\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readThroughput.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 2);\n+\n+        InternalObjectNode item = new InternalObjectNode();\n+        item.setId(ITEM_ID);\n+        cosmosAsyncContainer.createItem(item).block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createItem.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 3);\n+\n+        cosmosAsyncContainer.upsertItem(item,\n+            new CosmosItemRequestOptions()).block();\n+        Mockito.verify(tracerProvider, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"upsertItem.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 4);\n+\n+        cosmosAsyncContainer.readItem(ITEM_ID, PartitionKey.NONE,\n+            InternalObjectNode.class).block();\n+        Mockito.verify(tracerProvider, Mockito.times(5)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readItem.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 5);\n+\n+        cosmosAsyncContainer.deleteItem(ITEM_ID, PartitionKey.NONE).block();\n+        Mockito.verify(tracerProvider, Mockito.times(6)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"deleteItem.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 6);\n+\n+        cosmosAsyncContainer.readAllItems(new CosmosQueryRequestOptions(), CosmosItemRequestOptions.class).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(7)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllItems.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 7);\n+\n+        String query = \"select * from c where c.id = '\" + ITEM_ID + \"'\";\n+        cosmosAsyncContainer.queryItems(query, new CosmosQueryRequestOptions(), CosmosItemRequestOptions.class).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(8)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"queryItems.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 8);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncScripts() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().readAllStoredProcedures(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Context context = tracerProviderCapture.getResult();\n+\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllStoredProcedures.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        cosmosAsyncContainer.getScripts().readAllTriggers(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllTriggers.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 2);\n+\n+        cosmosAsyncContainer.getScripts().readAllUserDefinedFunctions(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllUserDefinedFunctions.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 3);\n+\n+        CosmosUserDefinedFunctionProperties cosmosUserDefinedFunctionProperties =\n+            getCosmosUserDefinedFunctionProperties();\n+        CosmosUserDefinedFunctionProperties resultUdf =\n+            cosmosAsyncContainer.getScripts().createUserDefinedFunction(cosmosUserDefinedFunctionProperties).block().getProperties();\n+        Mockito.verify(tracerProvider, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createUserDefinedFunction.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 4);\n+\n+        cosmosAsyncContainer.getScripts().getUserDefinedFunction(cosmosUserDefinedFunctionProperties.getId()).read().block();\n+        Mockito.verify(tracerProvider, Mockito.times(5)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readUDF.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 5);\n+\n+        cosmosUserDefinedFunctionProperties.setBody(\"function() {var x = 15;}\");\n+        cosmosAsyncContainer.getScripts().getUserDefinedFunction(resultUdf.getId()).replace(resultUdf).block();\n+        Mockito.verify(tracerProvider, Mockito.times(6)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"replaceUDF.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 6);\n+\n+        cosmosAsyncContainer.getScripts().readAllUserDefinedFunctions(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(7)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getUserDefinedFunction(cosmosUserDefinedFunctionProperties.getId()).delete().block();\n+        Mockito.verify(tracerProvider, Mockito.times(8)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"deleteUDF.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 8);\n+\n+        CosmosTriggerProperties cosmosTriggerProperties = getCosmosTriggerProperties();\n+        CosmosTriggerProperties resultTrigger =\n+            cosmosAsyncContainer.getScripts().createTrigger(cosmosTriggerProperties).block().getProperties();\n+        Mockito.verify(tracerProvider, Mockito.times(9)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createTrigger.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 9);\n+\n+        cosmosAsyncContainer.getScripts().getTrigger(cosmosTriggerProperties.getId()).read().block();\n+        Mockito.verify(tracerProvider, Mockito.times(10)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readTrigger.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 10);\n+\n+        cosmosAsyncContainer.getScripts().getTrigger(cosmosTriggerProperties.getId()).replace(resultTrigger).block();\n+        Mockito.verify(tracerProvider, Mockito.times(11)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"replaceTrigger.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 11);\n+\n+        cosmosAsyncContainer.getScripts().readAllTriggers(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(12)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getTrigger(cosmosTriggerProperties.getId()).delete().block();\n+        Mockito.verify(tracerProvider, Mockito.times(13)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"deleteTrigger.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 13);\n+\n+        CosmosStoredProcedureProperties procedureProperties = getCosmosStoredProcedureProperties();\n+        CosmosStoredProcedureProperties resultSproc =\n+            cosmosAsyncContainer.getScripts().createStoredProcedure(procedureProperties).block().getProperties();\n+        Mockito.verify(tracerProvider, Mockito.times(14)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createStoredProcedure.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 14);\n+\n+        cosmosAsyncContainer.getScripts().getStoredProcedure(procedureProperties.getId()).read().block();\n+        Mockito.verify(tracerProvider, Mockito.times(15)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readStoredProcedure.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 15);\n+\n+\n+        cosmosAsyncContainer.getScripts().getStoredProcedure(procedureProperties.getId()).replace(resultSproc).block();\n+        Mockito.verify(tracerProvider, Mockito.times(16)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"replaceStoredProcedure.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 16);\n+\n+        cosmosAsyncContainer.getScripts().readAllStoredProcedures(new CosmosQueryRequestOptions()).byPage().single().block();\n+\n+        cosmosAsyncContainer.getScripts().getStoredProcedure(procedureProperties.getId()).delete().block();\n+        Mockito.verify(tracerProvider, Mockito.times(18)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"deleteStoredProcedure.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 18);\n+    }\n+\n+    @AfterClass(groups = {\"emulator\"}, timeOut = SETUP_TIMEOUT)\n+    public void afterClass() {\n+        LifeCycleUtils.closeQuietly(client);\n+    }\n+\n+    private static CosmosUserDefinedFunctionProperties getCosmosUserDefinedFunctionProperties() {\n+        CosmosUserDefinedFunctionProperties udf =\n+            new CosmosUserDefinedFunctionProperties(UUID.randomUUID().toString(), \"function() {var x = 10;}\");\n+        return udf;\n+    }\n+\n+    private static CosmosTriggerProperties getCosmosTriggerProperties() {\n+        CosmosTriggerProperties trigger = new CosmosTriggerProperties(UUID.randomUUID().toString(), \"function() {var \" +\n+            \"x = 10;}\");\n+        trigger.setTriggerOperation(TriggerOperation.CREATE);\n+        trigger.setTriggerType(TriggerType.PRE);\n+        return trigger;\n+    }\n+\n+    private static CosmosStoredProcedureProperties getCosmosStoredProcedureProperties() {\n+        CosmosStoredProcedureProperties storedProcedureDef =\n+            new CosmosStoredProcedureProperties(UUID.randomUUID().toString(), \"function() {var x = 10;}\");\n+        return storedProcedureDef;\n+    }\n+\n+    private List<Tracer> getMockTracer(Tracer tracer) {\n+        List<Tracer> tracerList = new ArrayList<>();\n+        tracerList.add(tracer);\n+        Mockito.when(tracer.start(Matchers.anyString(), Matchers.any(Context.class))).thenReturn(Context.NONE);\n+        return tracerList;\n+    }\n+\n+    private void verifyTracerAttributes(Tracer mockTracer, String methodName, Context context, String databaseName,\n+                                        int numberOfTimesCalledWithinTest) {\n+        if (databaseName != null) {\n+            Mockito.verify(mockTracer, Mockito.times(numberOfTimesCalledWithinTest)).setAttribute(TracerProvider.DB_INSTANCE,\n+                databaseName, context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1296f69012aaf51b1b229ed1e36625cec14bc6"}, "originalPosition": 351}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1OTk0NA==", "bodyText": "This   will not set any attribute,it is just mockito verify.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453959944", "createdAt": "2020-07-13T21:57:25Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "diffHunk": "@@ -0,0 +1,375 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos;\n+\n+import com.azure.core.util.Context;\n+import com.azure.core.util.tracing.Tracer;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.LifeCycleUtils;\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.implementation.TracerProvider;\n+import com.azure.cosmos.implementation.directconnectivity.ReflectionUtils;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.CosmosStoredProcedureProperties;\n+import com.azure.cosmos.models.CosmosTriggerProperties;\n+import com.azure.cosmos.models.CosmosUserDefinedFunctionProperties;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.models.TriggerOperation;\n+import com.azure.cosmos.models.TriggerType;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import org.mockito.Matchers;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class CosmosTracerTest extends TestSuiteBase {\n+    private static final String ITEM_ID = \"tracerDoc\";\n+    CosmosAsyncClient client;\n+    CosmosAsyncDatabase cosmosAsyncDatabase;\n+    CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @BeforeClass(groups = {\"emulator\"}, timeOut = SETUP_TIMEOUT)\n+    public void beforeClass() {\n+        client = new CosmosClientBuilder()\n+            .endpoint(TestConfigurations.HOST)\n+            .key(TestConfigurations.MASTER_KEY)\n+            .directMode(DirectConnectionConfig.getDefaultConfig())\n+            .buildAsyncClient();\n+        cosmosAsyncDatabase = getSharedCosmosDatabase(client);\n+        cosmosAsyncContainer = getSharedMultiPartitionCosmosContainer(client);\n+\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncClient() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        client.createDatabaseIfNotExists(cosmosAsyncDatabase.getId()).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createDatabaseIfNotExists.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        client.readAllDatabases(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllDatabases\", context, null, 2);\n+\n+\n+        String query = \"select * from c where c.id = '\" + cosmosAsyncDatabase.getId() + \"'\";\n+        client.queryDatabases(query, new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"queryDatabases\", context, null, 3);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncDatabase() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncDatabase.createContainerIfNotExists(cosmosAsyncContainer.getId(),\n+            \"/pk\", 5000).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createContainerIfNotExists.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        try {\n+            cosmosAsyncDatabase.readThroughput().block();\n+        } catch (CosmosException ex) {\n+            //do nothing\n+        }\n+\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readThroughput.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 2);\n+\n+        cosmosAsyncDatabase.readAllUsers().byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllUsers.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 3);\n+\n+        cosmosAsyncDatabase.readAllContainers().byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllContainers.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 4);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncContainer() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.read().block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readContainer.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        try {\n+            cosmosAsyncContainer.readThroughput().block();\n+        } catch (CosmosException ex) {\n+            //do nothing\n+        }\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readThroughput.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 2);\n+\n+        InternalObjectNode item = new InternalObjectNode();\n+        item.setId(ITEM_ID);\n+        cosmosAsyncContainer.createItem(item).block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createItem.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 3);\n+\n+        cosmosAsyncContainer.upsertItem(item,\n+            new CosmosItemRequestOptions()).block();\n+        Mockito.verify(tracerProvider, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"upsertItem.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 4);\n+\n+        cosmosAsyncContainer.readItem(ITEM_ID, PartitionKey.NONE,\n+            InternalObjectNode.class).block();\n+        Mockito.verify(tracerProvider, Mockito.times(5)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readItem.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 5);\n+\n+        cosmosAsyncContainer.deleteItem(ITEM_ID, PartitionKey.NONE).block();\n+        Mockito.verify(tracerProvider, Mockito.times(6)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"deleteItem.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 6);\n+\n+        cosmosAsyncContainer.readAllItems(new CosmosQueryRequestOptions(), CosmosItemRequestOptions.class).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(7)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllItems.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 7);\n+\n+        String query = \"select * from c where c.id = '\" + ITEM_ID + \"'\";\n+        cosmosAsyncContainer.queryItems(query, new CosmosQueryRequestOptions(), CosmosItemRequestOptions.class).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(8)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"queryItems.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 8);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncScripts() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().readAllStoredProcedures(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Context context = tracerProviderCapture.getResult();\n+\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllStoredProcedures.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        cosmosAsyncContainer.getScripts().readAllTriggers(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllTriggers.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 2);\n+\n+        cosmosAsyncContainer.getScripts().readAllUserDefinedFunctions(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllUserDefinedFunctions.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 3);\n+\n+        CosmosUserDefinedFunctionProperties cosmosUserDefinedFunctionProperties =\n+            getCosmosUserDefinedFunctionProperties();\n+        CosmosUserDefinedFunctionProperties resultUdf =\n+            cosmosAsyncContainer.getScripts().createUserDefinedFunction(cosmosUserDefinedFunctionProperties).block().getProperties();\n+        Mockito.verify(tracerProvider, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createUserDefinedFunction.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 4);\n+\n+        cosmosAsyncContainer.getScripts().getUserDefinedFunction(cosmosUserDefinedFunctionProperties.getId()).read().block();\n+        Mockito.verify(tracerProvider, Mockito.times(5)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readUDF.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 5);\n+\n+        cosmosUserDefinedFunctionProperties.setBody(\"function() {var x = 15;}\");\n+        cosmosAsyncContainer.getScripts().getUserDefinedFunction(resultUdf.getId()).replace(resultUdf).block();\n+        Mockito.verify(tracerProvider, Mockito.times(6)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"replaceUDF.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 6);\n+\n+        cosmosAsyncContainer.getScripts().readAllUserDefinedFunctions(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(7)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getUserDefinedFunction(cosmosUserDefinedFunctionProperties.getId()).delete().block();\n+        Mockito.verify(tracerProvider, Mockito.times(8)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"deleteUDF.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 8);\n+\n+        CosmosTriggerProperties cosmosTriggerProperties = getCosmosTriggerProperties();\n+        CosmosTriggerProperties resultTrigger =\n+            cosmosAsyncContainer.getScripts().createTrigger(cosmosTriggerProperties).block().getProperties();\n+        Mockito.verify(tracerProvider, Mockito.times(9)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createTrigger.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 9);\n+\n+        cosmosAsyncContainer.getScripts().getTrigger(cosmosTriggerProperties.getId()).read().block();\n+        Mockito.verify(tracerProvider, Mockito.times(10)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readTrigger.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 10);\n+\n+        cosmosAsyncContainer.getScripts().getTrigger(cosmosTriggerProperties.getId()).replace(resultTrigger).block();\n+        Mockito.verify(tracerProvider, Mockito.times(11)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"replaceTrigger.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 11);\n+\n+        cosmosAsyncContainer.getScripts().readAllTriggers(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(12)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().getTrigger(cosmosTriggerProperties.getId()).delete().block();\n+        Mockito.verify(tracerProvider, Mockito.times(13)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"deleteTrigger.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 13);\n+\n+        CosmosStoredProcedureProperties procedureProperties = getCosmosStoredProcedureProperties();\n+        CosmosStoredProcedureProperties resultSproc =\n+            cosmosAsyncContainer.getScripts().createStoredProcedure(procedureProperties).block().getProperties();\n+        Mockito.verify(tracerProvider, Mockito.times(14)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createStoredProcedure.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 14);\n+\n+        cosmosAsyncContainer.getScripts().getStoredProcedure(procedureProperties.getId()).read().block();\n+        Mockito.verify(tracerProvider, Mockito.times(15)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readStoredProcedure.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 15);\n+\n+\n+        cosmosAsyncContainer.getScripts().getStoredProcedure(procedureProperties.getId()).replace(resultSproc).block();\n+        Mockito.verify(tracerProvider, Mockito.times(16)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"replaceStoredProcedure.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 16);\n+\n+        cosmosAsyncContainer.getScripts().readAllStoredProcedures(new CosmosQueryRequestOptions()).byPage().single().block();\n+\n+        cosmosAsyncContainer.getScripts().getStoredProcedure(procedureProperties.getId()).delete().block();\n+        Mockito.verify(tracerProvider, Mockito.times(18)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"deleteStoredProcedure.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 18);\n+    }\n+\n+    @AfterClass(groups = {\"emulator\"}, timeOut = SETUP_TIMEOUT)\n+    public void afterClass() {\n+        LifeCycleUtils.closeQuietly(client);\n+    }\n+\n+    private static CosmosUserDefinedFunctionProperties getCosmosUserDefinedFunctionProperties() {\n+        CosmosUserDefinedFunctionProperties udf =\n+            new CosmosUserDefinedFunctionProperties(UUID.randomUUID().toString(), \"function() {var x = 10;}\");\n+        return udf;\n+    }\n+\n+    private static CosmosTriggerProperties getCosmosTriggerProperties() {\n+        CosmosTriggerProperties trigger = new CosmosTriggerProperties(UUID.randomUUID().toString(), \"function() {var \" +\n+            \"x = 10;}\");\n+        trigger.setTriggerOperation(TriggerOperation.CREATE);\n+        trigger.setTriggerType(TriggerType.PRE);\n+        return trigger;\n+    }\n+\n+    private static CosmosStoredProcedureProperties getCosmosStoredProcedureProperties() {\n+        CosmosStoredProcedureProperties storedProcedureDef =\n+            new CosmosStoredProcedureProperties(UUID.randomUUID().toString(), \"function() {var x = 10;}\");\n+        return storedProcedureDef;\n+    }\n+\n+    private List<Tracer> getMockTracer(Tracer tracer) {\n+        List<Tracer> tracerList = new ArrayList<>();\n+        tracerList.add(tracer);\n+        Mockito.when(tracer.start(Matchers.anyString(), Matchers.any(Context.class))).thenReturn(Context.NONE);\n+        return tracerList;\n+    }\n+\n+    private void verifyTracerAttributes(Tracer mockTracer, String methodName, Context context, String databaseName,\n+                                        int numberOfTimesCalledWithinTest) {\n+        if (databaseName != null) {\n+            Mockito.verify(mockTracer, Mockito.times(numberOfTimesCalledWithinTest)).setAttribute(TracerProvider.DB_INSTANCE,\n+                databaseName, context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0NzQzNA=="}, "originalCommit": {"oid": "fc1296f69012aaf51b1b229ed1e36625cec14bc6"}, "originalPosition": 351}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTE2MDUxOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTozNzo1NFrOGw60CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo1ODo1OVrOGw7lIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0ODQyNQ==", "bodyText": "We shouldn't be grouping more than one use case in a testing scenario. Please consider breaking this up, to be unit testing cases.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453948425", "createdAt": "2020-07-13T21:37:54Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "diffHunk": "@@ -0,0 +1,375 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos;\n+\n+import com.azure.core.util.Context;\n+import com.azure.core.util.tracing.Tracer;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.LifeCycleUtils;\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.implementation.TracerProvider;\n+import com.azure.cosmos.implementation.directconnectivity.ReflectionUtils;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.CosmosStoredProcedureProperties;\n+import com.azure.cosmos.models.CosmosTriggerProperties;\n+import com.azure.cosmos.models.CosmosUserDefinedFunctionProperties;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.models.TriggerOperation;\n+import com.azure.cosmos.models.TriggerType;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import org.mockito.Matchers;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class CosmosTracerTest extends TestSuiteBase {\n+    private static final String ITEM_ID = \"tracerDoc\";\n+    CosmosAsyncClient client;\n+    CosmosAsyncDatabase cosmosAsyncDatabase;\n+    CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @BeforeClass(groups = {\"emulator\"}, timeOut = SETUP_TIMEOUT)\n+    public void beforeClass() {\n+        client = new CosmosClientBuilder()\n+            .endpoint(TestConfigurations.HOST)\n+            .key(TestConfigurations.MASTER_KEY)\n+            .directMode(DirectConnectionConfig.getDefaultConfig())\n+            .buildAsyncClient();\n+        cosmosAsyncDatabase = getSharedCosmosDatabase(client);\n+        cosmosAsyncContainer = getSharedMultiPartitionCosmosContainer(client);\n+\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncClient() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        client.createDatabaseIfNotExists(cosmosAsyncDatabase.getId()).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createDatabaseIfNotExists.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        client.readAllDatabases(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllDatabases\", context, null, 2);\n+\n+\n+        String query = \"select * from c where c.id = '\" + cosmosAsyncDatabase.getId() + \"'\";\n+        client.queryDatabases(query, new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"queryDatabases\", context, null, 3);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncDatabase() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1296f69012aaf51b1b229ed1e36625cec14bc6"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk2MDk5Mg==", "bodyText": "We will cover unit tests  and refactoring as discuss in #13032", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453960992", "createdAt": "2020-07-13T21:58:59Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "diffHunk": "@@ -0,0 +1,375 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos;\n+\n+import com.azure.core.util.Context;\n+import com.azure.core.util.tracing.Tracer;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.LifeCycleUtils;\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.implementation.TracerProvider;\n+import com.azure.cosmos.implementation.directconnectivity.ReflectionUtils;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.CosmosStoredProcedureProperties;\n+import com.azure.cosmos.models.CosmosTriggerProperties;\n+import com.azure.cosmos.models.CosmosUserDefinedFunctionProperties;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.models.TriggerOperation;\n+import com.azure.cosmos.models.TriggerType;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import org.mockito.Matchers;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class CosmosTracerTest extends TestSuiteBase {\n+    private static final String ITEM_ID = \"tracerDoc\";\n+    CosmosAsyncClient client;\n+    CosmosAsyncDatabase cosmosAsyncDatabase;\n+    CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @BeforeClass(groups = {\"emulator\"}, timeOut = SETUP_TIMEOUT)\n+    public void beforeClass() {\n+        client = new CosmosClientBuilder()\n+            .endpoint(TestConfigurations.HOST)\n+            .key(TestConfigurations.MASTER_KEY)\n+            .directMode(DirectConnectionConfig.getDefaultConfig())\n+            .buildAsyncClient();\n+        cosmosAsyncDatabase = getSharedCosmosDatabase(client);\n+        cosmosAsyncContainer = getSharedMultiPartitionCosmosContainer(client);\n+\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncClient() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        client.createDatabaseIfNotExists(cosmosAsyncDatabase.getId()).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createDatabaseIfNotExists.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        client.readAllDatabases(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllDatabases\", context, null, 2);\n+\n+\n+        String query = \"select * from c where c.id = '\" + cosmosAsyncDatabase.getId() + \"'\";\n+        client.queryDatabases(query, new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"queryDatabases\", context, null, 3);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncDatabase() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0ODQyNQ=="}, "originalCommit": {"oid": "fc1296f69012aaf51b1b229ed1e36625cec14bc6"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTE2Mzk1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTozOTowOVrOGw62HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzo0MjowNVrOG04jAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0ODk1Nw==", "bodyText": "Does this mean we are expecting, there would be 5 spans for a single readItem?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453948957", "createdAt": "2020-07-13T21:39:09Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "diffHunk": "@@ -0,0 +1,375 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos;\n+\n+import com.azure.core.util.Context;\n+import com.azure.core.util.tracing.Tracer;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.LifeCycleUtils;\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.implementation.TracerProvider;\n+import com.azure.cosmos.implementation.directconnectivity.ReflectionUtils;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.CosmosStoredProcedureProperties;\n+import com.azure.cosmos.models.CosmosTriggerProperties;\n+import com.azure.cosmos.models.CosmosUserDefinedFunctionProperties;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.models.TriggerOperation;\n+import com.azure.cosmos.models.TriggerType;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import org.mockito.Matchers;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class CosmosTracerTest extends TestSuiteBase {\n+    private static final String ITEM_ID = \"tracerDoc\";\n+    CosmosAsyncClient client;\n+    CosmosAsyncDatabase cosmosAsyncDatabase;\n+    CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @BeforeClass(groups = {\"emulator\"}, timeOut = SETUP_TIMEOUT)\n+    public void beforeClass() {\n+        client = new CosmosClientBuilder()\n+            .endpoint(TestConfigurations.HOST)\n+            .key(TestConfigurations.MASTER_KEY)\n+            .directMode(DirectConnectionConfig.getDefaultConfig())\n+            .buildAsyncClient();\n+        cosmosAsyncDatabase = getSharedCosmosDatabase(client);\n+        cosmosAsyncContainer = getSharedMultiPartitionCosmosContainer(client);\n+\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncClient() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        client.createDatabaseIfNotExists(cosmosAsyncDatabase.getId()).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createDatabaseIfNotExists.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        client.readAllDatabases(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllDatabases\", context, null, 2);\n+\n+\n+        String query = \"select * from c where c.id = '\" + cosmosAsyncDatabase.getId() + \"'\";\n+        client.queryDatabases(query, new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"queryDatabases\", context, null, 3);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncDatabase() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncDatabase.createContainerIfNotExists(cosmosAsyncContainer.getId(),\n+            \"/pk\", 5000).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createContainerIfNotExists.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        try {\n+            cosmosAsyncDatabase.readThroughput().block();\n+        } catch (CosmosException ex) {\n+            //do nothing\n+        }\n+\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readThroughput.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 2);\n+\n+        cosmosAsyncDatabase.readAllUsers().byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllUsers.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 3);\n+\n+        cosmosAsyncDatabase.readAllContainers().byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllContainers.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 4);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncContainer() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.read().block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readContainer.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        try {\n+            cosmosAsyncContainer.readThroughput().block();\n+        } catch (CosmosException ex) {\n+            //do nothing\n+        }\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readThroughput.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 2);\n+\n+        InternalObjectNode item = new InternalObjectNode();\n+        item.setId(ITEM_ID);\n+        cosmosAsyncContainer.createItem(item).block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createItem.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 3);\n+\n+        cosmosAsyncContainer.upsertItem(item,\n+            new CosmosItemRequestOptions()).block();\n+        Mockito.verify(tracerProvider, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"upsertItem.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 4);\n+\n+        cosmosAsyncContainer.readItem(ITEM_ID, PartitionKey.NONE,\n+            InternalObjectNode.class).block();\n+        Mockito.verify(tracerProvider, Mockito.times(5)).startSpan(Matchers.anyString(), Matchers.anyString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1296f69012aaf51b1b229ed1e36625cec14bc6"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk2MTg4OQ==", "bodyText": "No there will be only 1 span for readItem. This is to verify how many times this method is called in test function.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453961889", "createdAt": "2020-07-13T22:00:15Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "diffHunk": "@@ -0,0 +1,375 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos;\n+\n+import com.azure.core.util.Context;\n+import com.azure.core.util.tracing.Tracer;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.LifeCycleUtils;\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.implementation.TracerProvider;\n+import com.azure.cosmos.implementation.directconnectivity.ReflectionUtils;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.CosmosStoredProcedureProperties;\n+import com.azure.cosmos.models.CosmosTriggerProperties;\n+import com.azure.cosmos.models.CosmosUserDefinedFunctionProperties;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.models.TriggerOperation;\n+import com.azure.cosmos.models.TriggerType;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import org.mockito.Matchers;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class CosmosTracerTest extends TestSuiteBase {\n+    private static final String ITEM_ID = \"tracerDoc\";\n+    CosmosAsyncClient client;\n+    CosmosAsyncDatabase cosmosAsyncDatabase;\n+    CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @BeforeClass(groups = {\"emulator\"}, timeOut = SETUP_TIMEOUT)\n+    public void beforeClass() {\n+        client = new CosmosClientBuilder()\n+            .endpoint(TestConfigurations.HOST)\n+            .key(TestConfigurations.MASTER_KEY)\n+            .directMode(DirectConnectionConfig.getDefaultConfig())\n+            .buildAsyncClient();\n+        cosmosAsyncDatabase = getSharedCosmosDatabase(client);\n+        cosmosAsyncContainer = getSharedMultiPartitionCosmosContainer(client);\n+\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncClient() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        client.createDatabaseIfNotExists(cosmosAsyncDatabase.getId()).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createDatabaseIfNotExists.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        client.readAllDatabases(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllDatabases\", context, null, 2);\n+\n+\n+        String query = \"select * from c where c.id = '\" + cosmosAsyncDatabase.getId() + \"'\";\n+        client.queryDatabases(query, new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"queryDatabases\", context, null, 3);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncDatabase() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncDatabase.createContainerIfNotExists(cosmosAsyncContainer.getId(),\n+            \"/pk\", 5000).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createContainerIfNotExists.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        try {\n+            cosmosAsyncDatabase.readThroughput().block();\n+        } catch (CosmosException ex) {\n+            //do nothing\n+        }\n+\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readThroughput.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 2);\n+\n+        cosmosAsyncDatabase.readAllUsers().byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllUsers.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 3);\n+\n+        cosmosAsyncDatabase.readAllContainers().byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllContainers.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 4);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncContainer() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.read().block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readContainer.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        try {\n+            cosmosAsyncContainer.readThroughput().block();\n+        } catch (CosmosException ex) {\n+            //do nothing\n+        }\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readThroughput.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 2);\n+\n+        InternalObjectNode item = new InternalObjectNode();\n+        item.setId(ITEM_ID);\n+        cosmosAsyncContainer.createItem(item).block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createItem.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 3);\n+\n+        cosmosAsyncContainer.upsertItem(item,\n+            new CosmosItemRequestOptions()).block();\n+        Mockito.verify(tracerProvider, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"upsertItem.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 4);\n+\n+        cosmosAsyncContainer.readItem(ITEM_ID, PartitionKey.NONE,\n+            InternalObjectNode.class).block();\n+        Mockito.verify(tracerProvider, Mockito.times(5)).startSpan(Matchers.anyString(), Matchers.anyString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0ODk1Nw=="}, "originalCommit": {"oid": "fc1296f69012aaf51b1b229ed1e36625cec14bc6"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk3NDgzNw==", "bodyText": "Then that is an incorrect representation of the use case. As unit testing, the test should ideally be expecting 1 span for a single API call?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453974837", "createdAt": "2020-07-13T22:18:52Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "diffHunk": "@@ -0,0 +1,375 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos;\n+\n+import com.azure.core.util.Context;\n+import com.azure.core.util.tracing.Tracer;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.LifeCycleUtils;\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.implementation.TracerProvider;\n+import com.azure.cosmos.implementation.directconnectivity.ReflectionUtils;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.CosmosStoredProcedureProperties;\n+import com.azure.cosmos.models.CosmosTriggerProperties;\n+import com.azure.cosmos.models.CosmosUserDefinedFunctionProperties;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.models.TriggerOperation;\n+import com.azure.cosmos.models.TriggerType;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import org.mockito.Matchers;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class CosmosTracerTest extends TestSuiteBase {\n+    private static final String ITEM_ID = \"tracerDoc\";\n+    CosmosAsyncClient client;\n+    CosmosAsyncDatabase cosmosAsyncDatabase;\n+    CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @BeforeClass(groups = {\"emulator\"}, timeOut = SETUP_TIMEOUT)\n+    public void beforeClass() {\n+        client = new CosmosClientBuilder()\n+            .endpoint(TestConfigurations.HOST)\n+            .key(TestConfigurations.MASTER_KEY)\n+            .directMode(DirectConnectionConfig.getDefaultConfig())\n+            .buildAsyncClient();\n+        cosmosAsyncDatabase = getSharedCosmosDatabase(client);\n+        cosmosAsyncContainer = getSharedMultiPartitionCosmosContainer(client);\n+\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncClient() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        client.createDatabaseIfNotExists(cosmosAsyncDatabase.getId()).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createDatabaseIfNotExists.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        client.readAllDatabases(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllDatabases\", context, null, 2);\n+\n+\n+        String query = \"select * from c where c.id = '\" + cosmosAsyncDatabase.getId() + \"'\";\n+        client.queryDatabases(query, new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"queryDatabases\", context, null, 3);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncDatabase() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncDatabase.createContainerIfNotExists(cosmosAsyncContainer.getId(),\n+            \"/pk\", 5000).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createContainerIfNotExists.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        try {\n+            cosmosAsyncDatabase.readThroughput().block();\n+        } catch (CosmosException ex) {\n+            //do nothing\n+        }\n+\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readThroughput.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 2);\n+\n+        cosmosAsyncDatabase.readAllUsers().byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllUsers.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 3);\n+\n+        cosmosAsyncDatabase.readAllContainers().byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllContainers.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 4);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncContainer() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.read().block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readContainer.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        try {\n+            cosmosAsyncContainer.readThroughput().block();\n+        } catch (CosmosException ex) {\n+            //do nothing\n+        }\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readThroughput.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 2);\n+\n+        InternalObjectNode item = new InternalObjectNode();\n+        item.setId(ITEM_ID);\n+        cosmosAsyncContainer.createItem(item).block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createItem.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 3);\n+\n+        cosmosAsyncContainer.upsertItem(item,\n+            new CosmosItemRequestOptions()).block();\n+        Mockito.verify(tracerProvider, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"upsertItem.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 4);\n+\n+        cosmosAsyncContainer.readItem(ITEM_ID, PartitionKey.NONE,\n+            InternalObjectNode.class).block();\n+        Mockito.verify(tracerProvider, Mockito.times(5)).startSpan(Matchers.anyString(), Matchers.anyString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0ODk1Nw=="}, "originalCommit": {"oid": "fc1296f69012aaf51b1b229ed1e36625cec14bc6"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwNTYwMQ==", "bodyText": "We are checking incremental invocation based on api calls in single test case , which is clubbed together as per our object model , like all container apis are under one test", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r458105601", "createdAt": "2020-07-21T13:42:05Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "diffHunk": "@@ -0,0 +1,375 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos;\n+\n+import com.azure.core.util.Context;\n+import com.azure.core.util.tracing.Tracer;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.LifeCycleUtils;\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.implementation.TracerProvider;\n+import com.azure.cosmos.implementation.directconnectivity.ReflectionUtils;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.CosmosStoredProcedureProperties;\n+import com.azure.cosmos.models.CosmosTriggerProperties;\n+import com.azure.cosmos.models.CosmosUserDefinedFunctionProperties;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.models.TriggerOperation;\n+import com.azure.cosmos.models.TriggerType;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import org.mockito.Matchers;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class CosmosTracerTest extends TestSuiteBase {\n+    private static final String ITEM_ID = \"tracerDoc\";\n+    CosmosAsyncClient client;\n+    CosmosAsyncDatabase cosmosAsyncDatabase;\n+    CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @BeforeClass(groups = {\"emulator\"}, timeOut = SETUP_TIMEOUT)\n+    public void beforeClass() {\n+        client = new CosmosClientBuilder()\n+            .endpoint(TestConfigurations.HOST)\n+            .key(TestConfigurations.MASTER_KEY)\n+            .directMode(DirectConnectionConfig.getDefaultConfig())\n+            .buildAsyncClient();\n+        cosmosAsyncDatabase = getSharedCosmosDatabase(client);\n+        cosmosAsyncContainer = getSharedMultiPartitionCosmosContainer(client);\n+\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncClient() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        client.createDatabaseIfNotExists(cosmosAsyncDatabase.getId()).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createDatabaseIfNotExists.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        client.readAllDatabases(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllDatabases\", context, null, 2);\n+\n+\n+        String query = \"select * from c where c.id = '\" + cosmosAsyncDatabase.getId() + \"'\";\n+        client.queryDatabases(query, new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"queryDatabases\", context, null, 3);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncDatabase() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncDatabase.createContainerIfNotExists(cosmosAsyncContainer.getId(),\n+            \"/pk\", 5000).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createContainerIfNotExists.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        try {\n+            cosmosAsyncDatabase.readThroughput().block();\n+        } catch (CosmosException ex) {\n+            //do nothing\n+        }\n+\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readThroughput.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 2);\n+\n+        cosmosAsyncDatabase.readAllUsers().byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllUsers.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 3);\n+\n+        cosmosAsyncDatabase.readAllContainers().byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllContainers.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 4);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncContainer() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.read().block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readContainer.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        try {\n+            cosmosAsyncContainer.readThroughput().block();\n+        } catch (CosmosException ex) {\n+            //do nothing\n+        }\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readThroughput.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 2);\n+\n+        InternalObjectNode item = new InternalObjectNode();\n+        item.setId(ITEM_ID);\n+        cosmosAsyncContainer.createItem(item).block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createItem.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 3);\n+\n+        cosmosAsyncContainer.upsertItem(item,\n+            new CosmosItemRequestOptions()).block();\n+        Mockito.verify(tracerProvider, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"upsertItem.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 4);\n+\n+        cosmosAsyncContainer.readItem(ITEM_ID, PartitionKey.NONE,\n+            InternalObjectNode.class).block();\n+        Mockito.verify(tracerProvider, Mockito.times(5)).startSpan(Matchers.anyString(), Matchers.anyString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0ODk1Nw=="}, "originalCommit": {"oid": "fc1296f69012aaf51b1b229ed1e36625cec14bc6"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTE2NzY3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo0MDoyM1rOGw64WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjowNTozN1rOGw73Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0OTUyOA==", "bodyText": "I thought we got rid of the span name readUDF and should be using the same public API name for user -API visibility concerns.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453949528", "createdAt": "2020-07-13T21:40:23Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "diffHunk": "@@ -0,0 +1,375 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos;\n+\n+import com.azure.core.util.Context;\n+import com.azure.core.util.tracing.Tracer;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.LifeCycleUtils;\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.implementation.TracerProvider;\n+import com.azure.cosmos.implementation.directconnectivity.ReflectionUtils;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.CosmosStoredProcedureProperties;\n+import com.azure.cosmos.models.CosmosTriggerProperties;\n+import com.azure.cosmos.models.CosmosUserDefinedFunctionProperties;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.models.TriggerOperation;\n+import com.azure.cosmos.models.TriggerType;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import org.mockito.Matchers;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class CosmosTracerTest extends TestSuiteBase {\n+    private static final String ITEM_ID = \"tracerDoc\";\n+    CosmosAsyncClient client;\n+    CosmosAsyncDatabase cosmosAsyncDatabase;\n+    CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @BeforeClass(groups = {\"emulator\"}, timeOut = SETUP_TIMEOUT)\n+    public void beforeClass() {\n+        client = new CosmosClientBuilder()\n+            .endpoint(TestConfigurations.HOST)\n+            .key(TestConfigurations.MASTER_KEY)\n+            .directMode(DirectConnectionConfig.getDefaultConfig())\n+            .buildAsyncClient();\n+        cosmosAsyncDatabase = getSharedCosmosDatabase(client);\n+        cosmosAsyncContainer = getSharedMultiPartitionCosmosContainer(client);\n+\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncClient() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        client.createDatabaseIfNotExists(cosmosAsyncDatabase.getId()).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createDatabaseIfNotExists.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        client.readAllDatabases(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllDatabases\", context, null, 2);\n+\n+\n+        String query = \"select * from c where c.id = '\" + cosmosAsyncDatabase.getId() + \"'\";\n+        client.queryDatabases(query, new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"queryDatabases\", context, null, 3);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncDatabase() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncDatabase.createContainerIfNotExists(cosmosAsyncContainer.getId(),\n+            \"/pk\", 5000).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createContainerIfNotExists.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        try {\n+            cosmosAsyncDatabase.readThroughput().block();\n+        } catch (CosmosException ex) {\n+            //do nothing\n+        }\n+\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readThroughput.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 2);\n+\n+        cosmosAsyncDatabase.readAllUsers().byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllUsers.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 3);\n+\n+        cosmosAsyncDatabase.readAllContainers().byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllContainers.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 4);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncContainer() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.read().block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readContainer.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        try {\n+            cosmosAsyncContainer.readThroughput().block();\n+        } catch (CosmosException ex) {\n+            //do nothing\n+        }\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readThroughput.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 2);\n+\n+        InternalObjectNode item = new InternalObjectNode();\n+        item.setId(ITEM_ID);\n+        cosmosAsyncContainer.createItem(item).block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createItem.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 3);\n+\n+        cosmosAsyncContainer.upsertItem(item,\n+            new CosmosItemRequestOptions()).block();\n+        Mockito.verify(tracerProvider, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"upsertItem.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 4);\n+\n+        cosmosAsyncContainer.readItem(ITEM_ID, PartitionKey.NONE,\n+            InternalObjectNode.class).block();\n+        Mockito.verify(tracerProvider, Mockito.times(5)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readItem.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 5);\n+\n+        cosmosAsyncContainer.deleteItem(ITEM_ID, PartitionKey.NONE).block();\n+        Mockito.verify(tracerProvider, Mockito.times(6)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"deleteItem.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 6);\n+\n+        cosmosAsyncContainer.readAllItems(new CosmosQueryRequestOptions(), CosmosItemRequestOptions.class).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(7)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllItems.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 7);\n+\n+        String query = \"select * from c where c.id = '\" + ITEM_ID + \"'\";\n+        cosmosAsyncContainer.queryItems(query, new CosmosQueryRequestOptions(), CosmosItemRequestOptions.class).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(8)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"queryItems.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 8);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncScripts() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().readAllStoredProcedures(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Context context = tracerProviderCapture.getResult();\n+\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllStoredProcedures.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        cosmosAsyncContainer.getScripts().readAllTriggers(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllTriggers.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 2);\n+\n+        cosmosAsyncContainer.getScripts().readAllUserDefinedFunctions(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllUserDefinedFunctions.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 3);\n+\n+        CosmosUserDefinedFunctionProperties cosmosUserDefinedFunctionProperties =\n+            getCosmosUserDefinedFunctionProperties();\n+        CosmosUserDefinedFunctionProperties resultUdf =\n+            cosmosAsyncContainer.getScripts().createUserDefinedFunction(cosmosUserDefinedFunctionProperties).block().getProperties();\n+        Mockito.verify(tracerProvider, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createUserDefinedFunction.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 4);\n+\n+        cosmosAsyncContainer.getScripts().getUserDefinedFunction(cosmosUserDefinedFunctionProperties.getId()).read().block();\n+        Mockito.verify(tracerProvider, Mockito.times(5)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readUDF.\" + cosmosAsyncContainer.getId(), context,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1296f69012aaf51b1b229ed1e36625cec14bc6"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk2NTY1MQ==", "bodyText": "we can do readUDF -> readUserDefinedFunction  ?, but cant do just read() as we have hierarchy model in cosmos and all resources use read() api", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453965651", "createdAt": "2020-07-13T22:05:37Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "diffHunk": "@@ -0,0 +1,375 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos;\n+\n+import com.azure.core.util.Context;\n+import com.azure.core.util.tracing.Tracer;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.LifeCycleUtils;\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.implementation.TracerProvider;\n+import com.azure.cosmos.implementation.directconnectivity.ReflectionUtils;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.CosmosStoredProcedureProperties;\n+import com.azure.cosmos.models.CosmosTriggerProperties;\n+import com.azure.cosmos.models.CosmosUserDefinedFunctionProperties;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.models.TriggerOperation;\n+import com.azure.cosmos.models.TriggerType;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import org.mockito.Matchers;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class CosmosTracerTest extends TestSuiteBase {\n+    private static final String ITEM_ID = \"tracerDoc\";\n+    CosmosAsyncClient client;\n+    CosmosAsyncDatabase cosmosAsyncDatabase;\n+    CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @BeforeClass(groups = {\"emulator\"}, timeOut = SETUP_TIMEOUT)\n+    public void beforeClass() {\n+        client = new CosmosClientBuilder()\n+            .endpoint(TestConfigurations.HOST)\n+            .key(TestConfigurations.MASTER_KEY)\n+            .directMode(DirectConnectionConfig.getDefaultConfig())\n+            .buildAsyncClient();\n+        cosmosAsyncDatabase = getSharedCosmosDatabase(client);\n+        cosmosAsyncContainer = getSharedMultiPartitionCosmosContainer(client);\n+\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncClient() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        client.createDatabaseIfNotExists(cosmosAsyncDatabase.getId()).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createDatabaseIfNotExists.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        client.readAllDatabases(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllDatabases\", context, null, 2);\n+\n+\n+        String query = \"select * from c where c.id = '\" + cosmosAsyncDatabase.getId() + \"'\";\n+        client.queryDatabases(query, new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"queryDatabases\", context, null, 3);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncDatabase() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncDatabase.createContainerIfNotExists(cosmosAsyncContainer.getId(),\n+            \"/pk\", 5000).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createContainerIfNotExists.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        try {\n+            cosmosAsyncDatabase.readThroughput().block();\n+        } catch (CosmosException ex) {\n+            //do nothing\n+        }\n+\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readThroughput.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 2);\n+\n+        cosmosAsyncDatabase.readAllUsers().byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllUsers.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 3);\n+\n+        cosmosAsyncDatabase.readAllContainers().byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllContainers.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 4);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncContainer() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.read().block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readContainer.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        try {\n+            cosmosAsyncContainer.readThroughput().block();\n+        } catch (CosmosException ex) {\n+            //do nothing\n+        }\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readThroughput.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 2);\n+\n+        InternalObjectNode item = new InternalObjectNode();\n+        item.setId(ITEM_ID);\n+        cosmosAsyncContainer.createItem(item).block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createItem.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 3);\n+\n+        cosmosAsyncContainer.upsertItem(item,\n+            new CosmosItemRequestOptions()).block();\n+        Mockito.verify(tracerProvider, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"upsertItem.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 4);\n+\n+        cosmosAsyncContainer.readItem(ITEM_ID, PartitionKey.NONE,\n+            InternalObjectNode.class).block();\n+        Mockito.verify(tracerProvider, Mockito.times(5)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readItem.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 5);\n+\n+        cosmosAsyncContainer.deleteItem(ITEM_ID, PartitionKey.NONE).block();\n+        Mockito.verify(tracerProvider, Mockito.times(6)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"deleteItem.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 6);\n+\n+        cosmosAsyncContainer.readAllItems(new CosmosQueryRequestOptions(), CosmosItemRequestOptions.class).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(7)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllItems.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 7);\n+\n+        String query = \"select * from c where c.id = '\" + ITEM_ID + \"'\";\n+        cosmosAsyncContainer.queryItems(query, new CosmosQueryRequestOptions(), CosmosItemRequestOptions.class).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(8)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"queryItems.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 8);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncScripts() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncContainer.getScripts().readAllStoredProcedures(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Context context = tracerProviderCapture.getResult();\n+\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllStoredProcedures.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        cosmosAsyncContainer.getScripts().readAllTriggers(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllTriggers.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 2);\n+\n+        cosmosAsyncContainer.getScripts().readAllUserDefinedFunctions(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllUserDefinedFunctions.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 3);\n+\n+        CosmosUserDefinedFunctionProperties cosmosUserDefinedFunctionProperties =\n+            getCosmosUserDefinedFunctionProperties();\n+        CosmosUserDefinedFunctionProperties resultUdf =\n+            cosmosAsyncContainer.getScripts().createUserDefinedFunction(cosmosUserDefinedFunctionProperties).block().getProperties();\n+        Mockito.verify(tracerProvider, Mockito.times(4)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createUserDefinedFunction.\" + cosmosAsyncContainer.getId(), context,\n+            cosmosAsyncDatabase.getId(), 4);\n+\n+        cosmosAsyncContainer.getScripts().getUserDefinedFunction(cosmosUserDefinedFunctionProperties.getId()).read().block();\n+        Mockito.verify(tracerProvider, Mockito.times(5)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readUDF.\" + cosmosAsyncContainer.getId(), context,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0OTUyOA=="}, "originalCommit": {"oid": "fc1296f69012aaf51b1b229ed1e36625cec14bc6"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTE3Mjk4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo0MjowNFrOGw67bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzo0MDoyN1rOG04ecg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MDMxNg==", "bodyText": "Suggestion can be updated to check for the span name here\nMockito.verify(tracerProvider, Mockito.times(1)).startSpan(eq(\"createContainerIfNotExists\"), Matchers.anyString()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453950316", "createdAt": "2020-07-13T21:42:04Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "diffHunk": "@@ -0,0 +1,375 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos;\n+\n+import com.azure.core.util.Context;\n+import com.azure.core.util.tracing.Tracer;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.LifeCycleUtils;\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.implementation.TracerProvider;\n+import com.azure.cosmos.implementation.directconnectivity.ReflectionUtils;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.CosmosStoredProcedureProperties;\n+import com.azure.cosmos.models.CosmosTriggerProperties;\n+import com.azure.cosmos.models.CosmosUserDefinedFunctionProperties;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.models.TriggerOperation;\n+import com.azure.cosmos.models.TriggerType;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import org.mockito.Matchers;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class CosmosTracerTest extends TestSuiteBase {\n+    private static final String ITEM_ID = \"tracerDoc\";\n+    CosmosAsyncClient client;\n+    CosmosAsyncDatabase cosmosAsyncDatabase;\n+    CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @BeforeClass(groups = {\"emulator\"}, timeOut = SETUP_TIMEOUT)\n+    public void beforeClass() {\n+        client = new CosmosClientBuilder()\n+            .endpoint(TestConfigurations.HOST)\n+            .key(TestConfigurations.MASTER_KEY)\n+            .directMode(DirectConnectionConfig.getDefaultConfig())\n+            .buildAsyncClient();\n+        cosmosAsyncDatabase = getSharedCosmosDatabase(client);\n+        cosmosAsyncContainer = getSharedMultiPartitionCosmosContainer(client);\n+\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncClient() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        client.createDatabaseIfNotExists(cosmosAsyncDatabase.getId()).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createDatabaseIfNotExists.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        client.readAllDatabases(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllDatabases\", context, null, 2);\n+\n+\n+        String query = \"select * from c where c.id = '\" + cosmosAsyncDatabase.getId() + \"'\";\n+        client.queryDatabases(query, new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"queryDatabases\", context, null, 3);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncDatabase() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncDatabase.createContainerIfNotExists(cosmosAsyncContainer.getId(),\n+            \"/pk\", 5000).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1296f69012aaf51b1b229ed1e36625cec14bc6"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1Njg3Nw==", "bodyText": "Mockito does not work with partial matching, it will give runtime error , and anyway we are checking span name on mock tracer so this does not needed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453956877", "createdAt": "2020-07-13T21:53:02Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "diffHunk": "@@ -0,0 +1,375 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos;\n+\n+import com.azure.core.util.Context;\n+import com.azure.core.util.tracing.Tracer;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.LifeCycleUtils;\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.implementation.TracerProvider;\n+import com.azure.cosmos.implementation.directconnectivity.ReflectionUtils;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.CosmosStoredProcedureProperties;\n+import com.azure.cosmos.models.CosmosTriggerProperties;\n+import com.azure.cosmos.models.CosmosUserDefinedFunctionProperties;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.models.TriggerOperation;\n+import com.azure.cosmos.models.TriggerType;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import org.mockito.Matchers;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class CosmosTracerTest extends TestSuiteBase {\n+    private static final String ITEM_ID = \"tracerDoc\";\n+    CosmosAsyncClient client;\n+    CosmosAsyncDatabase cosmosAsyncDatabase;\n+    CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @BeforeClass(groups = {\"emulator\"}, timeOut = SETUP_TIMEOUT)\n+    public void beforeClass() {\n+        client = new CosmosClientBuilder()\n+            .endpoint(TestConfigurations.HOST)\n+            .key(TestConfigurations.MASTER_KEY)\n+            .directMode(DirectConnectionConfig.getDefaultConfig())\n+            .buildAsyncClient();\n+        cosmosAsyncDatabase = getSharedCosmosDatabase(client);\n+        cosmosAsyncContainer = getSharedMultiPartitionCosmosContainer(client);\n+\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncClient() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        client.createDatabaseIfNotExists(cosmosAsyncDatabase.getId()).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createDatabaseIfNotExists.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        client.readAllDatabases(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllDatabases\", context, null, 2);\n+\n+\n+        String query = \"select * from c where c.id = '\" + cosmosAsyncDatabase.getId() + \"'\";\n+        client.queryDatabases(query, new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"queryDatabases\", context, null, 3);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncDatabase() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncDatabase.createContainerIfNotExists(cosmosAsyncContainer.getId(),\n+            \"/pk\", 5000).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MDMxNg=="}, "originalCommit": {"oid": "fc1296f69012aaf51b1b229ed1e36625cec14bc6"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk2MDA0Mg==", "bodyText": "Not sure what you mean, an example of what I am suggesting https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/eventhubs/azure-messaging-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClientTest.java#L426", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453960042", "createdAt": "2020-07-13T21:57:36Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "diffHunk": "@@ -0,0 +1,375 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos;\n+\n+import com.azure.core.util.Context;\n+import com.azure.core.util.tracing.Tracer;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.LifeCycleUtils;\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.implementation.TracerProvider;\n+import com.azure.cosmos.implementation.directconnectivity.ReflectionUtils;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.CosmosStoredProcedureProperties;\n+import com.azure.cosmos.models.CosmosTriggerProperties;\n+import com.azure.cosmos.models.CosmosUserDefinedFunctionProperties;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.models.TriggerOperation;\n+import com.azure.cosmos.models.TriggerType;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import org.mockito.Matchers;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class CosmosTracerTest extends TestSuiteBase {\n+    private static final String ITEM_ID = \"tracerDoc\";\n+    CosmosAsyncClient client;\n+    CosmosAsyncDatabase cosmosAsyncDatabase;\n+    CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @BeforeClass(groups = {\"emulator\"}, timeOut = SETUP_TIMEOUT)\n+    public void beforeClass() {\n+        client = new CosmosClientBuilder()\n+            .endpoint(TestConfigurations.HOST)\n+            .key(TestConfigurations.MASTER_KEY)\n+            .directMode(DirectConnectionConfig.getDefaultConfig())\n+            .buildAsyncClient();\n+        cosmosAsyncDatabase = getSharedCosmosDatabase(client);\n+        cosmosAsyncContainer = getSharedMultiPartitionCosmosContainer(client);\n+\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncClient() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        client.createDatabaseIfNotExists(cosmosAsyncDatabase.getId()).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createDatabaseIfNotExists.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        client.readAllDatabases(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllDatabases\", context, null, 2);\n+\n+\n+        String query = \"select * from c where c.id = '\" + cosmosAsyncDatabase.getId() + \"'\";\n+        client.queryDatabases(query, new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"queryDatabases\", context, null, 3);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncDatabase() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncDatabase.createContainerIfNotExists(cosmosAsyncContainer.getId(),\n+            \"/pk\", 5000).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MDMxNg=="}, "originalCommit": {"oid": "fc1296f69012aaf51b1b229ed1e36625cec14bc6"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAwMjU4MQ==", "bodyText": "@simplynaveen20 - we should an incrementing counter instead of using numeral literal values in Mockito.times(1) call - so that it is much clear to us.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r454002581", "createdAt": "2020-07-13T23:24:22Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "diffHunk": "@@ -0,0 +1,375 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos;\n+\n+import com.azure.core.util.Context;\n+import com.azure.core.util.tracing.Tracer;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.LifeCycleUtils;\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.implementation.TracerProvider;\n+import com.azure.cosmos.implementation.directconnectivity.ReflectionUtils;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.CosmosStoredProcedureProperties;\n+import com.azure.cosmos.models.CosmosTriggerProperties;\n+import com.azure.cosmos.models.CosmosUserDefinedFunctionProperties;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.models.TriggerOperation;\n+import com.azure.cosmos.models.TriggerType;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import org.mockito.Matchers;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class CosmosTracerTest extends TestSuiteBase {\n+    private static final String ITEM_ID = \"tracerDoc\";\n+    CosmosAsyncClient client;\n+    CosmosAsyncDatabase cosmosAsyncDatabase;\n+    CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @BeforeClass(groups = {\"emulator\"}, timeOut = SETUP_TIMEOUT)\n+    public void beforeClass() {\n+        client = new CosmosClientBuilder()\n+            .endpoint(TestConfigurations.HOST)\n+            .key(TestConfigurations.MASTER_KEY)\n+            .directMode(DirectConnectionConfig.getDefaultConfig())\n+            .buildAsyncClient();\n+        cosmosAsyncDatabase = getSharedCosmosDatabase(client);\n+        cosmosAsyncContainer = getSharedMultiPartitionCosmosContainer(client);\n+\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncClient() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        client.createDatabaseIfNotExists(cosmosAsyncDatabase.getId()).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createDatabaseIfNotExists.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        client.readAllDatabases(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllDatabases\", context, null, 2);\n+\n+\n+        String query = \"select * from c where c.id = '\" + cosmosAsyncDatabase.getId() + \"'\";\n+        client.queryDatabases(query, new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"queryDatabases\", context, null, 3);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncDatabase() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncDatabase.createContainerIfNotExists(cosmosAsyncContainer.getId(),\n+            \"/pk\", 5000).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MDMxNg=="}, "originalCommit": {"oid": "fc1296f69012aaf51b1b229ed1e36625cec14bc6"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwNDQzNA==", "bodyText": "added incremental variable instead of numeral literal", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r458104434", "createdAt": "2020-07-21T13:40:27Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "diffHunk": "@@ -0,0 +1,375 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos;\n+\n+import com.azure.core.util.Context;\n+import com.azure.core.util.tracing.Tracer;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.LifeCycleUtils;\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.implementation.TracerProvider;\n+import com.azure.cosmos.implementation.directconnectivity.ReflectionUtils;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.CosmosStoredProcedureProperties;\n+import com.azure.cosmos.models.CosmosTriggerProperties;\n+import com.azure.cosmos.models.CosmosUserDefinedFunctionProperties;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.models.TriggerOperation;\n+import com.azure.cosmos.models.TriggerType;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import org.mockito.Matchers;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class CosmosTracerTest extends TestSuiteBase {\n+    private static final String ITEM_ID = \"tracerDoc\";\n+    CosmosAsyncClient client;\n+    CosmosAsyncDatabase cosmosAsyncDatabase;\n+    CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @BeforeClass(groups = {\"emulator\"}, timeOut = SETUP_TIMEOUT)\n+    public void beforeClass() {\n+        client = new CosmosClientBuilder()\n+            .endpoint(TestConfigurations.HOST)\n+            .key(TestConfigurations.MASTER_KEY)\n+            .directMode(DirectConnectionConfig.getDefaultConfig())\n+            .buildAsyncClient();\n+        cosmosAsyncDatabase = getSharedCosmosDatabase(client);\n+        cosmosAsyncContainer = getSharedMultiPartitionCosmosContainer(client);\n+\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncClient() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        client.createDatabaseIfNotExists(cosmosAsyncDatabase.getId()).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createDatabaseIfNotExists.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        client.readAllDatabases(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllDatabases\", context, null, 2);\n+\n+\n+        String query = \"select * from c where c.id = '\" + cosmosAsyncDatabase.getId() + \"'\";\n+        client.queryDatabases(query, new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"queryDatabases\", context, null, 3);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncDatabase() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        cosmosAsyncDatabase.createContainerIfNotExists(cosmosAsyncContainer.getId(),\n+            \"/pk\", 5000).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MDMxNg=="}, "originalCommit": {"oid": "fc1296f69012aaf51b1b229ed1e36625cec14bc6"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTI3ODI0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjowNDowMlrOGw7y9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzozOTozN1rOG04cMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk2NDUzNA==", "bodyText": "Do we need the spy if we have a mock of tracer list for a valid tracerProvider object?\nnit: Consider adding static import for Mockito methods.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453964534", "createdAt": "2020-07-13T22:04:02Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "diffHunk": "@@ -0,0 +1,375 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos;\n+\n+import com.azure.core.util.Context;\n+import com.azure.core.util.tracing.Tracer;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.LifeCycleUtils;\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.implementation.TracerProvider;\n+import com.azure.cosmos.implementation.directconnectivity.ReflectionUtils;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.CosmosStoredProcedureProperties;\n+import com.azure.cosmos.models.CosmosTriggerProperties;\n+import com.azure.cosmos.models.CosmosUserDefinedFunctionProperties;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.models.TriggerOperation;\n+import com.azure.cosmos.models.TriggerType;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import org.mockito.Matchers;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class CosmosTracerTest extends TestSuiteBase {\n+    private static final String ITEM_ID = \"tracerDoc\";\n+    CosmosAsyncClient client;\n+    CosmosAsyncDatabase cosmosAsyncDatabase;\n+    CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @BeforeClass(groups = {\"emulator\"}, timeOut = SETUP_TIMEOUT)\n+    public void beforeClass() {\n+        client = new CosmosClientBuilder()\n+            .endpoint(TestConfigurations.HOST)\n+            .key(TestConfigurations.MASTER_KEY)\n+            .directMode(DirectConnectionConfig.getDefaultConfig())\n+            .buildAsyncClient();\n+        cosmosAsyncDatabase = getSharedCosmosDatabase(client);\n+        cosmosAsyncContainer = getSharedMultiPartitionCosmosContainer(client);\n+\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncClient() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        client.createDatabaseIfNotExists(cosmosAsyncDatabase.getId()).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createDatabaseIfNotExists.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        client.readAllDatabases(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllDatabases\", context, null, 2);\n+\n+\n+        String query = \"select * from c where c.id = '\" + cosmosAsyncDatabase.getId() + \"'\";\n+        client.queryDatabases(query, new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"queryDatabases\", context, null, 3);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncDatabase() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1296f69012aaf51b1b229ed1e36625cec14bc6"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwMzg1Nw==", "bodyText": "we need spy to get the context from startSpan  to verify attributes , and also we are checking on number of timer startSpan is called on provider", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r458103857", "createdAt": "2020-07-21T13:39:37Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosTracerTest.java", "diffHunk": "@@ -0,0 +1,375 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos;\n+\n+import com.azure.core.util.Context;\n+import com.azure.core.util.tracing.Tracer;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.LifeCycleUtils;\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.implementation.TracerProvider;\n+import com.azure.cosmos.implementation.directconnectivity.ReflectionUtils;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.CosmosStoredProcedureProperties;\n+import com.azure.cosmos.models.CosmosTriggerProperties;\n+import com.azure.cosmos.models.CosmosUserDefinedFunctionProperties;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.models.TriggerOperation;\n+import com.azure.cosmos.models.TriggerType;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import org.mockito.Matchers;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class CosmosTracerTest extends TestSuiteBase {\n+    private static final String ITEM_ID = \"tracerDoc\";\n+    CosmosAsyncClient client;\n+    CosmosAsyncDatabase cosmosAsyncDatabase;\n+    CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @BeforeClass(groups = {\"emulator\"}, timeOut = SETUP_TIMEOUT)\n+    public void beforeClass() {\n+        client = new CosmosClientBuilder()\n+            .endpoint(TestConfigurations.HOST)\n+            .key(TestConfigurations.MASTER_KEY)\n+            .directMode(DirectConnectionConfig.getDefaultConfig())\n+            .buildAsyncClient();\n+        cosmosAsyncDatabase = getSharedCosmosDatabase(client);\n+        cosmosAsyncContainer = getSharedMultiPartitionCosmosContainer(client);\n+\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncClient() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));\n+        ReflectionUtils.setTracerProvider(client, tracerProvider);\n+\n+        TracerProviderCapture tracerProviderCapture = new TracerProviderCapture();\n+        Mockito.doAnswer(tracerProviderCapture).when(tracerProvider).startSpan(Matchers.anyString(),\n+            Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+\n+        client.createDatabaseIfNotExists(cosmosAsyncDatabase.getId()).block();\n+        Context context = tracerProviderCapture.getResult();\n+        Mockito.verify(tracerProvider, Mockito.times(1)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"createDatabaseIfNotExists.\" + cosmosAsyncDatabase.getId(), context,\n+            cosmosAsyncDatabase.getId(), 1);\n+\n+        client.readAllDatabases(new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(2)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"readAllDatabases\", context, null, 2);\n+\n+\n+        String query = \"select * from c where c.id = '\" + cosmosAsyncDatabase.getId() + \"'\";\n+        client.queryDatabases(query, new CosmosQueryRequestOptions()).byPage().single().block();\n+        Mockito.verify(tracerProvider, Mockito.times(3)).startSpan(Matchers.anyString(), Matchers.anyString(),\n+            Matchers.anyString(), Matchers.any(Context.class));\n+        verifyTracerAttributes(mockTracer, \"queryDatabases\", context, null, 3);\n+    }\n+\n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void cosmosAsyncDatabase() {\n+        Tracer mockTracer = Mockito.mock(Tracer.class);\n+        TracerProvider tracerProvider = Mockito.spy(new TracerProvider(getMockTracer(mockTracer)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk2NDUzNA=="}, "originalCommit": {"oid": "fc1296f69012aaf51b1b229ed1e36625cec14bc6"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjIyMTA1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODowMDozOVrOGzJVcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDozMDowMFrOG0P5Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI4MzUwNg==", "bodyText": "Calling ServiceLoader.load() for each instance of the client is not required. This can be done once as the result of the loader doesn't change during the lifespan of the application.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r456283506", "createdAt": "2020-07-17T08:00:39Z", "author": {"login": "srnagar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -65,6 +71,7 @@\n         this.sessionCapturingOverride = builder.isSessionCapturingOverrideEnabled();\n         this.enableTransportClientSharing = builder.isConnectionSharingAcrossClientsEnabled();\n         this.contentResponseOnWriteEnabled = builder.isContentResponseOnWriteEnabled();\n+        this.tracerProvider = new TracerProvider(ServiceLoader.load(Tracer.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7aab07efdce2088ef79cd27ad62576d6064a25"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzOTU3MA==", "bodyText": "Moved to static , during class load", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r457439570", "createdAt": "2020-07-20T14:30:00Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -65,6 +71,7 @@\n         this.sessionCapturingOverride = builder.isSessionCapturingOverrideEnabled();\n         this.enableTransportClientSharing = builder.isConnectionSharingAcrossClientsEnabled();\n         this.contentResponseOnWriteEnabled = builder.isContentResponseOnWriteEnabled();\n+        this.tracerProvider = new TracerProvider(ServiceLoader.load(Tracer.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI4MzUwNg=="}, "originalCommit": {"oid": "0a7aab07efdce2088ef79cd27ad62576d6064a25"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjI0ODU2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODowOToyM1rOGzJmlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMTo1MTo1OFrOGziHYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI4Nzg5NA==", "bodyText": "Should this be using the nestedContext instead since a new key, value pair is added to the original context?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r456287894", "createdAt": "2020-07-17T08:09:23Z", "author": {"login": "srnagar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -473,4 +429,63 @@ public CosmosAsyncDatabase getDatabase(String id) {\n     public void close() {\n         asyncDocumentClient.close();\n     }\n+\n+    TracerProvider getTracerProvider(){\n+        return this.tracerProvider;\n+    }\n+\n+    private CosmosPagedFlux<CosmosDatabaseProperties> queryDatabasesInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options){\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            pagedFluxOptions.setTracerInformation(this.tracerProvider, \"queryDatabases\", this.serviceEndpoint, null);\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryDatabases(querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponse(\n+                    ModelBridgeInternal.getCosmosDatabasePropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders()));\n+        });\n+    }\n+\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(CosmosAsyncDatabase database,\n+                                                                           ThroughputProperties throughputProperties, Context context) {\n+        String spanName = \"createDatabaseIfNotExists.\" + database.getId();\n+        Context nestedContext = context.addData(TracerProvider.COSMOS_CALL_DEPTH, TracerProvider.COSMOS_CALL_DEPTH_VAL);\n+        Mono<CosmosDatabaseResponse> responseMono = database.readInternal(new CosmosDatabaseRequestOptions(),\n+            nestedContext).onErrorResume(exception -> {\n+            final Throwable unwrappedException = Exceptions.unwrap(exception);\n+            if (unwrappedException instanceof CosmosException) {\n+                final CosmosException cosmosException = (CosmosException) unwrappedException;\n+                if (cosmosException.getStatusCode() == HttpConstants.StatusCodes.NOTFOUND) {\n+                    CosmosDatabaseRequestOptions requestOptions = new CosmosDatabaseRequestOptions();\n+                    if (throughputProperties != null) {\n+                        ModelBridgeInternal.setThroughputProperties(requestOptions, throughputProperties);\n+                    }\n+\n+                    Database wrappedDatabase = new Database();\n+                    wrappedDatabase.setId(database.getId());\n+                    return createDatabaseInternal(wrappedDatabase,\n+                        requestOptions, nestedContext);\n+                }\n+            }\n+            return Mono.error(unwrappedException);\n+        });\n+        return tracerProvider.traceEnabledCosmosResponsePublisher(responseMono,\n+            context,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7aab07efdce2088ef79cd27ad62576d6064a25"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4OTUwNA==", "bodyText": "This to to avoid tracing for internal public api. Parent context is not affected by this. Initially we used subscriber context on all apis to filter nested/non nested apis, but due to perf hit moved to this model. Also explained  Srikanta offline", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r456689504", "createdAt": "2020-07-17T21:51:58Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -473,4 +429,63 @@ public CosmosAsyncDatabase getDatabase(String id) {\n     public void close() {\n         asyncDocumentClient.close();\n     }\n+\n+    TracerProvider getTracerProvider(){\n+        return this.tracerProvider;\n+    }\n+\n+    private CosmosPagedFlux<CosmosDatabaseProperties> queryDatabasesInternal(SqlQuerySpec querySpec, CosmosQueryRequestOptions options){\n+        return UtilBridgeInternal.createCosmosPagedFlux(pagedFluxOptions -> {\n+            pagedFluxOptions.setTracerInformation(this.tracerProvider, \"queryDatabases\", this.serviceEndpoint, null);\n+            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n+            return getDocClientWrapper().queryDatabases(querySpec, options)\n+                .map(response -> BridgeInternal.createFeedResponse(\n+                    ModelBridgeInternal.getCosmosDatabasePropertiesFromV2Results(response.getResults()),\n+                    response.getResponseHeaders()));\n+        });\n+    }\n+\n+\n+    private Mono<CosmosDatabaseResponse> createDatabaseIfNotExistsInternal(CosmosAsyncDatabase database,\n+                                                                           ThroughputProperties throughputProperties, Context context) {\n+        String spanName = \"createDatabaseIfNotExists.\" + database.getId();\n+        Context nestedContext = context.addData(TracerProvider.COSMOS_CALL_DEPTH, TracerProvider.COSMOS_CALL_DEPTH_VAL);\n+        Mono<CosmosDatabaseResponse> responseMono = database.readInternal(new CosmosDatabaseRequestOptions(),\n+            nestedContext).onErrorResume(exception -> {\n+            final Throwable unwrappedException = Exceptions.unwrap(exception);\n+            if (unwrappedException instanceof CosmosException) {\n+                final CosmosException cosmosException = (CosmosException) unwrappedException;\n+                if (cosmosException.getStatusCode() == HttpConstants.StatusCodes.NOTFOUND) {\n+                    CosmosDatabaseRequestOptions requestOptions = new CosmosDatabaseRequestOptions();\n+                    if (throughputProperties != null) {\n+                        ModelBridgeInternal.setThroughputProperties(requestOptions, throughputProperties);\n+                    }\n+\n+                    Database wrappedDatabase = new Database();\n+                    wrappedDatabase.setId(database.getId());\n+                    return createDatabaseInternal(wrappedDatabase,\n+                        requestOptions, nestedContext);\n+                }\n+            }\n+            return Mono.error(unwrappedException);\n+        });\n+        return tracerProvider.traceEnabledCosmosResponsePublisher(responseMono,\n+            context,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI4Nzg5NA=="}, "originalCommit": {"oid": "0a7aab07efdce2088ef79cd27ad62576d6064a25"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjUxNTA4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/TracerProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToyODowNFrOGzMJCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToyODowNFrOGzMJCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyOTQ4MQ==", "bodyText": "nit: fix formatting.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r456329481", "createdAt": "2020-07-17T09:28:04Z", "author": {"login": "srnagar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/TracerProvider.java", "diffHunk": "@@ -0,0 +1,154 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.core.util.Context;\n+import com.azure.core.util.tracing.Tracer;\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.CosmosResponse;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.Signal;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+public class TracerProvider {\n+    private Tracer tracer;\n+    public final static String DB_TYPE_VALUE = \"Cosmos\";\n+    public final static String DB_TYPE = \"db.type\";\n+    public final static String DB_INSTANCE = \"db.instance\";\n+    public final static String DB_URL = \"db.url\";\n+    public static final String DB_STATEMENT = \"db.statement\";\n+    public static final String ERROR_MSG = \"error.msg\";\n+    public static final String ERROR_TYPE = \"error.type\";\n+    public static final String COSMOS_CALL_DEPTH = \"cosmosCallDepth\";\n+    public static final String COSMOS_CALL_DEPTH_VAL = \"nested\";\n+    public static final int ERROR_CODE = 0;\n+    public static final String RESOURCE_PROVIDER_NAME = \"Microsoft.DocumentDB\";\n+\n+    public TracerProvider(Iterable<Tracer> tracers) {\n+        Objects.requireNonNull(tracers, \"'tracers' cannot be null.\");\n+        if (tracers.iterator().hasNext()) {\n+            tracer = tracers.iterator().next();\n+        }\n+    }\n+\n+    public boolean isEnabled() {\n+        return tracer != null;\n+    }\n+\n+    /**\n+     * For each tracer plugged into the SDK a new tracing span is created.\n+     * <p>\n+     * The {@code context} will be checked for containing information about a parent span. If a parent span is found the\n+     * new span will be added as a child, otherwise the span will be created and added to the context and any downstream\n+     * start calls will use the created span as the parent.\n+     *\n+     * @param context Additional metadata that is passed through the call stack.\n+     * @return An updated context object.\n+     */\n+    public Context startSpan(String methodName, String databaseId, String endpoint, Context context) {\n+        Context local = Objects.requireNonNull(context, \"'context' cannot be null.\");\n+        local = local.addData(AZ_TRACING_NAMESPACE_KEY, RESOURCE_PROVIDER_NAME);\n+        local = tracer.start(methodName, local); // start the span and return the started span\n+        if (databaseId != null) {\n+            tracer.setAttribute(TracerProvider.DB_INSTANCE, databaseId, local);\n+        }\n+\n+        tracer.setAttribute(TracerProvider.DB_TYPE, DB_TYPE_VALUE, local);\n+        tracer.setAttribute(TracerProvider.DB_URL, endpoint, local);\n+        tracer.setAttribute(TracerProvider.DB_STATEMENT, methodName, local);\n+        return local;\n+    }\n+\n+    /**\n+     * Given a context containing the current tracing span the span is marked completed with status info from\n+     * {@link Signal}.  For each tracer plugged into the SDK the current tracing span is marked as completed.\n+     *\n+     * @param context Additional metadata that is passed through the call stack.\n+     * @param signal  The signal indicates the status and contains the metadata we need to end the tracing span.\n+     */\n+    public <T extends CosmosResponse<? extends Resource>> void endSpan(Context context, Signal<T> signal, int statusCode) {\n+        Objects.requireNonNull(context, \"'context' cannot be null.\");\n+        Objects.requireNonNull(signal, \"'signal' cannot be null.\");\n+\n+        switch (signal.getType()) {\n+            case ON_COMPLETE:\n+                end(statusCode, null, context);\n+                break;\n+            case ON_ERROR:\n+                Throwable throwable = null;\n+                if (signal.hasError()) {\n+                    // The last status available is on error, this contains the thrown error.\n+                    throwable = signal.getThrowable();\n+\n+                    if (throwable instanceof CosmosException) {\n+                        CosmosException exception = (CosmosException) throwable;\n+                        statusCode = exception.getStatusCode();\n+                    }\n+                }\n+                end(statusCode, throwable, context);\n+                break;\n+            default:\n+                // ON_SUBSCRIBE and ON_NEXT don't have the information to end the span so just return.\n+                break;\n+        }\n+    }\n+\n+    public <T extends CosmosResponse<?>> Mono<T> traceEnabledCosmosResponsePublisher(Mono<T> resultPublisher,\n+                                                                                                             Context context,\n+                                                                                                             String spanName,\n+                                                                                                             String databaseId,\n+                                                                                                             String endpoint) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7aab07efdce2088ef79cd27ad62576d6064a25"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODgyNzgwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMTo1NDoxOVrOGziJ-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMjowNjozOVrOGziYyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5MDE2OA==", "bodyText": "what happens if there are multiple implementation for Tracer on the classpath? is that possible?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r456690168", "createdAt": "2020-07-17T21:54:19Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -52,8 +58,20 @@\n     private final AzureKeyCredential credential;\n     private final boolean sessionCapturingOverride;\n     private final boolean enableTransportClientSharing;\n+    private final TracerProvider tracerProvider;\n     private final DataEncryptionKeyProvider dataEncryptionKeyProvider;\n     private final boolean contentResponseOnWriteEnabled;\n+    private static final Tracer TRACER;\n+\n+    static {\n+        ServiceLoader<Tracer> serviceLoader = ServiceLoader.load(Tracer.class);\n+        Iterator<?> iterator = serviceLoader.iterator();\n+        if (iterator.hasNext()) {\n+            TRACER = serviceLoader.iterator().next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8292a8342d170644c4fcc3fe91087008183b9ac1"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5Mzk2Mw==", "bodyText": "There can be multiple implementations in the classpath. But there is no real use case to support multiple implementations as the user will always tie a specific implementation to an exporter.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r456693963", "createdAt": "2020-07-17T22:06:39Z", "author": {"login": "samvaity"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -52,8 +58,20 @@\n     private final AzureKeyCredential credential;\n     private final boolean sessionCapturingOverride;\n     private final boolean enableTransportClientSharing;\n+    private final TracerProvider tracerProvider;\n     private final DataEncryptionKeyProvider dataEncryptionKeyProvider;\n     private final boolean contentResponseOnWriteEnabled;\n+    private static final Tracer TRACER;\n+\n+    static {\n+        ServiceLoader<Tracer> serviceLoader = ServiceLoader.load(Tracer.class);\n+        Iterator<?> iterator = serviceLoader.iterator();\n+        if (iterator.hasNext()) {\n+            TRACER = serviceLoader.iterator().next();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5MDE2OA=="}, "originalCommit": {"oid": "8292a8342d170644c4fcc3fe91087008183b9ac1"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3644, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}