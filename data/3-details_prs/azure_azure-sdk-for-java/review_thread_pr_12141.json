{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNTAxNDAx", "number": 12141, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjo1OTowMFrOEE9Arg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzozNzo1MVrOEH2Zww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjI5MzU4OnYy", "diffSide": "RIGHT", "path": "sdk/resources/mgmt/src/test/java/com/azure/resourcemanager/resources/DeploymentsTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjo1OTowMFrOGi5M7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjo1OTowMFrOGi5M7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI0MTk2NQ==", "bodyText": "Support polling by user.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12141#discussion_r439241965", "createdAt": "2020-06-12T06:59:00Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resources/mgmt/src/test/java/com/azure/resourcemanager/resources/DeploymentsTests.java", "diffHunk": "@@ -224,4 +229,29 @@ public void canUpdateVirtualNetworkDeployment() throws Exception {\n         Assertions.assertNotNull(genericVnet);\n         resourceClient.genericResources().delete(rgName, \"Microsoft.Network\", \"\", \"virtualnetworks\", \"VNet2\", \"2015-06-15\");\n     }\n+\n+    @Test\n+    public void canDeployVirtualNetworkSyncPoll() throws Exception {\n+        final String dp = \"dpD\" + testId;\n+\n+        // Begin create\n+        Accepted<Deployment> acceptedDeployment = resourceClient.deployments()\n+            .define(dp)\n+            .withExistingResourceGroup(rgName)\n+            .withTemplateLink(templateUri, contentVersion)\n+            .withParametersLink(parametersUri, contentVersion)\n+            .withMode(DeploymentMode.COMPLETE)\n+            .beginCreate();\n+        Deployment createdDeployment = acceptedDeployment.getAcceptedResult();\n+        Assertions.assertNotEquals(\"Succeeded\", createdDeployment.provisioningState());\n+        PollResponse<Void> pollResponse = acceptedDeployment.getSyncPoller().poll();\n+        while (pollResponse.getStatus() != LongRunningOperationStatus.SUCCESSFULLY_COMPLETED) {\n+            SdkContext.sleep(1000);\n+            pollResponse = acceptedDeployment.getSyncPoller().poll();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d619f208f58c55e669d76f9a2c59a6e904b1685e"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjQxMzM3OnYy", "diffSide": "RIGHT", "path": "sdk/resources/mgmt/src/main/java/com/azure/resourcemanager/resources/fluentcore/model/Accepted.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzo0NTozMlrOGi6Xww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzo0NTozMlrOGi6Xww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI2MTEyMw==", "bodyText": "Plan is to make this call return the resource, after LRO and after all following-up operations finished.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12141#discussion_r439261123", "createdAt": "2020-06-12T07:45:32Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/resourcemanager/resources/fluentcore/model/Accepted.java", "diffHunk": "@@ -0,0 +1,35 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.resourcemanager.resources.fluentcore.model;\n+\n+import com.azure.core.util.polling.SyncPoller;\n+\n+/**\n+ * The accepted LRO (long running operation).\n+ *\n+ * @param <T> the type of final result\n+ */\n+public interface Accepted<T> {\n+\n+    /**\n+     * Gets the accepted result of LRO.\n+     *\n+     * @return the accepted result\n+     */\n+    T getAcceptedResult();\n+\n+    /**\n+     * Gets the {@link SyncPoller} of LRO.\n+     *\n+     * @return the sync poller.\n+     */\n+    SyncPoller<Void, T> getSyncPoller();\n+\n+    /**\n+     * Gets the final result of LRO.\n+     *\n+     * @return the final result.\n+     */\n+    T getFinalResult();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d619f208f58c55e669d76f9a2c59a6e904b1685e"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDkzODQ5OnYy", "diffSide": "RIGHT", "path": "sdk/resources/mgmt/src/main/java/com/azure/resourcemanager/resources/fluentcore/model/implementation/AcceptedImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDozMTozM1rOGkK3JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDozMTozM1rOGkK3JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3OTg3Ng==", "bodyText": "Next plan is to give a concrete class for this current Void in PollResponse, to provide more information about the poll, e.g. poll url, response body, etc.\nBut that would require more changes in core-management, so it would likely be delayed to another PR.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12141#discussion_r440579876", "createdAt": "2020-06-16T04:31:33Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resources/mgmt/src/main/java/com/azure/resourcemanager/resources/fluentcore/model/implementation/AcceptedImpl.java", "diffHunk": "@@ -0,0 +1,161 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.resourcemanager.resources.fluentcore.model.implementation;\n+\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.management.polling.PollResult;\n+import com.azure.core.management.polling.PollerFactory;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollResponse;\n+import com.azure.core.util.polling.PollerFlux;\n+import com.azure.core.util.polling.SyncPoller;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+import com.azure.core.util.serializer.SerializerEncoding;\n+import com.azure.resourcemanager.resources.fluentcore.model.Accepted;\n+import com.azure.resourcemanager.resources.fluentcore.utils.SdkContext;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Type;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+public class AcceptedImpl<InnerT, T> implements Accepted<T> {\n+\n+    private final Response<Flux<ByteBuffer>> activationResponse;\n+    private byte[] responseBytes;\n+    private final SerializerAdapter serializerAdapter;\n+    private final HttpPipeline httpPipeline;\n+    private final Type pollResultType;\n+    private final Type finalResultType;\n+    private final Function<InnerT, T> wrapOperation;\n+\n+    private PollerFlux<PollResult<InnerT>, InnerT> pollerFlux;\n+    private SyncPoller<Void, T> syncPoller;\n+\n+    public AcceptedImpl(Response<Flux<ByteBuffer>> activationResponse,\n+                        SerializerAdapter serializerAdapter,\n+                        HttpPipeline httpPipeline,\n+                        Type pollResultType,\n+                        Type finalResultType,\n+                        Function<InnerT, T> wrapOperation) {\n+        this.activationResponse = Objects.requireNonNull(activationResponse);\n+        this.serializerAdapter = Objects.requireNonNull(serializerAdapter);\n+        this.httpPipeline = Objects.requireNonNull(httpPipeline);\n+        this.pollResultType = Objects.requireNonNull(pollResultType);\n+        this.finalResultType = Objects.requireNonNull(finalResultType);\n+        this.wrapOperation = Objects.requireNonNull(wrapOperation);\n+    }\n+\n+    @Override\n+    public T getAcceptedResult() {\n+        try {\n+            return wrapOperation.apply(serializerAdapter.deserialize(\n+                new String(getResponse(), StandardCharsets.UTF_8),\n+                finalResultType,\n+                SerializerEncoding.JSON));\n+        } catch (IOException e) {\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public SyncPoller<Void, T> getSyncPoller() {\n+        if (syncPoller == null) {\n+            syncPoller = new SyncPollerImpl<InnerT, T>(this.getPollerFlux().getSyncPoller(), wrapOperation);\n+        }\n+        return syncPoller;\n+    }\n+\n+    private PollerFlux<PollResult<InnerT>, InnerT> getPollerFlux() {\n+        if (pollerFlux == null) {\n+            Flux<ByteBuffer> content = Flux.just(ByteBuffer.wrap(getResponse()));\n+            Response<Flux<ByteBuffer>> clonedResponse = new SimpleResponse<>(activationResponse, content);\n+\n+            pollerFlux = PollerFactory.create(\n+                serializerAdapter,\n+                httpPipeline,\n+                pollResultType,\n+                finalResultType,\n+                SdkContext.getLroRetryDuration(),\n+                Mono.just(clonedResponse)\n+            );\n+        }\n+        return pollerFlux;\n+    }\n+\n+    @Override\n+    public T getFinalResult() {\n+        return this.getSyncPoller().getFinalResult();\n+    }\n+\n+    private byte[] getResponse() {\n+        if (responseBytes == null) {\n+            responseBytes = FluxUtil.collectBytesInByteBufferStream(activationResponse.getValue()).block();\n+        }\n+        return responseBytes;\n+    }\n+\n+    private static class SyncPollerImpl<InnerT, T>\n+        implements SyncPoller<Void, T> {\n+\n+        private final SyncPoller<PollResult<InnerT>, InnerT> syncPoller;\n+        private final Function<InnerT, T> wrapOperation;\n+        private T finalResult;\n+\n+        SyncPollerImpl(SyncPoller<PollResult<InnerT>, InnerT> syncPoller, Function<InnerT, T> wrapOperation) {\n+            this.syncPoller = syncPoller;\n+            this.wrapOperation = wrapOperation;\n+        }\n+\n+        @Override\n+        public PollResponse<Void> poll() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06e171a8d239f0bcf3bbe31b33191660aca5fa81"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjY2ODE5OnYy", "diffSide": "RIGHT", "path": "sdk/compute/mgmt/src/main/java/com/azure/resourcemanager/compute/implementation/VirtualMachineImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzozNzo1MVrOGnc-8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODowODowNFrOGneC3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyMjUxNQ==", "bodyText": "Is there any usage of the authorizationManager?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12141#discussion_r444022515", "createdAt": "2020-06-23T07:37:51Z", "author": {"login": "ChenTanyi"}, "path": "sdk/compute/mgmt/src/main/java/com/azure/resourcemanager/compute/implementation/VirtualMachineImpl.java", "diffHunk": "@@ -184,6 +191,7 @@\n         super(name, innerModel, computeManager);\n         this.storageManager = storageManager;\n         this.networkManager = networkManager;\n+        this.authorizationManager = authorizationManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd4d5f0f5abbfad81e0c7c9d192ba1f0892723ad"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAzODU0MQ==", "bodyText": "To create a new VirtualMachine, after polling is complete (line 1737)\n                inner -> new VirtualMachineImpl(inner.name(), inner, this.manager(),\n                    this.storageManager, this.networkManager, this.authorizationManager));", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12141#discussion_r444038541", "createdAt": "2020-06-23T08:05:27Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/compute/mgmt/src/main/java/com/azure/resourcemanager/compute/implementation/VirtualMachineImpl.java", "diffHunk": "@@ -184,6 +191,7 @@\n         super(name, innerModel, computeManager);\n         this.storageManager = storageManager;\n         this.networkManager = networkManager;\n+        this.authorizationManager = authorizationManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyMjUxNQ=="}, "originalCommit": {"oid": "dd4d5f0f5abbfad81e0c7c9d192ba1f0892723ad"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAzOTkwMw==", "bodyText": "ok, I found it was used in a private resource", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12141#discussion_r444039903", "createdAt": "2020-06-23T08:08:04Z", "author": {"login": "ChenTanyi"}, "path": "sdk/compute/mgmt/src/main/java/com/azure/resourcemanager/compute/implementation/VirtualMachineImpl.java", "diffHunk": "@@ -184,6 +191,7 @@\n         super(name, innerModel, computeManager);\n         this.storageManager = storageManager;\n         this.networkManager = networkManager;\n+        this.authorizationManager = authorizationManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyMjUxNQ=="}, "originalCommit": {"oid": "dd4d5f0f5abbfad81e0c7c9d192ba1f0892723ad"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3899, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}