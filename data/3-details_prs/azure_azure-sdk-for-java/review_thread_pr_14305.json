{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwODQ5MDYw", "number": 14305, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNToyNDo0NlrOEbApng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToxMjo1OFrOEcfHuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzU3NjYyOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNToyNDo0NlrOHExjiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjoxMjoyNVrOHIXhQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc2ODI2Nw==", "bodyText": "Ah, yes, we have guidance around adding dependencies. Is there a reason this is required?\nThere is guidance around how to add dependencies. https://github.com/Azure/azure-sdk-for-java/blob/master/CONTRIBUTING.md#current-version-dependency-version-unreleased-dependency-version-and-released-beta-dependency-version", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14305#discussion_r474768267", "createdAt": "2020-08-21T15:24:46Z", "author": {"login": "conniey"}, "path": "sdk/spring/azure-spring-boot/pom.xml", "diffHunk": "@@ -197,6 +197,12 @@\n       <version>2.11.2</version> <!-- {x-version-update;com.fasterxml.jackson.core:jackson-databind;external_dependency} -->\n     </dependency>\n \n+    <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd5ed7040e637bb3df6d8e04595081b099821b39"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc2NDE2Nw==", "bodyText": "Dependencies should be introduced after discussing with our architect. https://azure.github.io/azure-sdk/java_implementation.html#java-dependencies-archboard\n@JonathanGiles Is this dependency okay with you?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14305#discussion_r475764167", "createdAt": "2020-08-24T17:05:45Z", "author": {"login": "conniey"}, "path": "sdk/spring/azure-spring-boot/pom.xml", "diffHunk": "@@ -197,6 +197,12 @@\n       <version>2.11.2</version> <!-- {x-version-update;com.fasterxml.jackson.core:jackson-databind;external_dependency} -->\n     </dependency>\n \n+    <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc2ODI2Nw=="}, "originalCommit": {"oid": "fd5ed7040e637bb3df6d8e04595081b099821b39"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUzNjAwMA==", "bodyText": "@JonathanGiles @conniey I removed this dependency in b864a8e by using a String instead of an Optional<String> for odataNextLink in UserGroups.java", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14305#discussion_r478536000", "createdAt": "2020-08-27T16:12:25Z", "author": {"login": "ppartarr"}, "path": "sdk/spring/azure-spring-boot/pom.xml", "diffHunk": "@@ -197,6 +197,12 @@\n       <version>2.11.2</version> <!-- {x-version-update;com.fasterxml.jackson.core:jackson-databind;external_dependency} -->\n     </dependency>\n \n+    <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc2ODI2Nw=="}, "originalCommit": {"oid": "fd5ed7040e637bb3df6d8e04595081b099821b39"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjYxNzMyOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/spring/autoconfigure/aad/AzureADGraphClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwOTo0NjoyM1rOHFc4Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNTo1NDoyMVrOHHSu_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ3ODA2Ng==", "bodyText": "odataNextLink is not used?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14305#discussion_r475478066", "createdAt": "2020-08-24T09:46:23Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/spring/autoconfigure/aad/AzureADGraphClient.java", "diffHunk": "@@ -77,7 +77,7 @@ private void initAADMicrosoftGraphApiBool(String endpointEnv) {\n         this.aadMicrosoftGraphApiBool = endpointEnv.contains(V2_VERSION_ENV_FLAG);\n     }\n \n-    private String getUserMembershipsV1(String accessToken) throws IOException {\n+    private String getUserMemberships(String accessToken, Optional<String> odataNextLink) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42467b4341c1fb56f051453a19e5879247f4406c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQwOTAyMQ==", "bodyText": "It is being used now to properly build the url, depending on if the request is v1 or v2. see cc20c05", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14305#discussion_r477409021", "createdAt": "2020-08-26T15:54:21Z", "author": {"login": "ppartarr"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/spring/autoconfigure/aad/AzureADGraphClient.java", "diffHunk": "@@ -77,7 +77,7 @@ private void initAADMicrosoftGraphApiBool(String endpointEnv) {\n         this.aadMicrosoftGraphApiBool = endpointEnv.contains(V2_VERSION_ENV_FLAG);\n     }\n \n-    private String getUserMembershipsV1(String accessToken) throws IOException {\n+    private String getUserMemberships(String accessToken, Optional<String> odataNextLink) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ3ODA2Ng=="}, "originalCommit": {"oid": "42467b4341c1fb56f051453a19e5879247f4406c"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MTg4Mzk3OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/spring/autoconfigure/aad/AzureADGraphClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMTo1NjozOFrOHG3_QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNTo1ODo0M1rOHHS6xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk3MDgxNw==", "bodyText": "Is Jdk8Module is used for support Optional type in json?\nCan we use null instead of Optional?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14305#discussion_r476970817", "createdAt": "2020-08-26T01:56:38Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/spring/autoconfigure/aad/AzureADGraphClient.java", "diffHunk": "@@ -121,22 +121,21 @@ private static String getResponseStringFromConn(HttpURLConnection conn) throws I\n     }\n \n     private List<UserGroup> loadUserGroups(String graphApiToken) throws IOException {\n-        final String responseInJson = getUserMembershipsV1(graphApiToken);\n+        String responseInJson = getUserMemberships(graphApiToken, Optional.empty());\n         final List<UserGroup> lUserGroups = new ArrayList<>();\n         final ObjectMapper objectMapper = JacksonObjectMapperFactory.getInstance();\n-        final JsonNode rootNode = objectMapper.readValue(responseInJson, JsonNode.class);\n-        final JsonNode valuesNode = rootNode.get(\"value\");\n-\n-        if (valuesNode != null) {\n-            lUserGroups\n-                .addAll(StreamSupport.stream(valuesNode.spliterator(), false).filter(this::isMatchingUserGroupKey)\n-                    .map(node -> {\n-                        final String objectID = node.\n-                            get(aadAuthenticationProperties.getUserGroup().getObjectIDKey()).asText();\n-                        final String displayName = node.get(\"displayName\").asText();\n-                        return new UserGroup(objectID, displayName);\n-                    }).collect(Collectors.toList()));\n+        objectMapper.registerModule(new Jdk8Module());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42467b4341c1fb56f051453a19e5879247f4406c"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQxMjAzOQ==", "bodyText": "made the change in cc20c05", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14305#discussion_r477412039", "createdAt": "2020-08-26T15:58:43Z", "author": {"login": "ppartarr"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/spring/autoconfigure/aad/AzureADGraphClient.java", "diffHunk": "@@ -121,22 +121,21 @@ private static String getResponseStringFromConn(HttpURLConnection conn) throws I\n     }\n \n     private List<UserGroup> loadUserGroups(String graphApiToken) throws IOException {\n-        final String responseInJson = getUserMembershipsV1(graphApiToken);\n+        String responseInJson = getUserMemberships(graphApiToken, Optional.empty());\n         final List<UserGroup> lUserGroups = new ArrayList<>();\n         final ObjectMapper objectMapper = JacksonObjectMapperFactory.getInstance();\n-        final JsonNode rootNode = objectMapper.readValue(responseInJson, JsonNode.class);\n-        final JsonNode valuesNode = rootNode.get(\"value\");\n-\n-        if (valuesNode != null) {\n-            lUserGroups\n-                .addAll(StreamSupport.stream(valuesNode.spliterator(), false).filter(this::isMatchingUserGroupKey)\n-                    .map(node -> {\n-                        final String objectID = node.\n-                            get(aadAuthenticationProperties.getUserGroup().getObjectIDKey()).asText();\n-                        final String displayName = node.get(\"displayName\").asText();\n-                        return new UserGroup(objectID, displayName);\n-                    }).collect(Collectors.toList()));\n+        objectMapper.registerModule(new Jdk8Module());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk3MDgxNw=="}, "originalCommit": {"oid": "42467b4341c1fb56f051453a19e5879247f4406c"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjY1MTQ0OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/spring/autoconfigure/aad/AzureADGraphClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzoyNzo1OFrOHG_TaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNTo1MjowOVrOHHSo8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5MDY2NQ==", "bodyText": "I debugged in my localhost, groupsFromJson.getOdataNextLink() will return null, not Optional.empty(), so groupsFromJson.getOdataNextLink().isPresent() will throw NullPointerExceotion.\nJson:\n\nScreenshot of IDE:", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14305#discussion_r477090665", "createdAt": "2020-08-26T07:27:58Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/spring/autoconfigure/aad/AzureADGraphClient.java", "diffHunk": "@@ -121,22 +121,21 @@ private static String getResponseStringFromConn(HttpURLConnection conn) throws I\n     }\n \n     private List<UserGroup> loadUserGroups(String graphApiToken) throws IOException {\n-        final String responseInJson = getUserMembershipsV1(graphApiToken);\n+        String responseInJson = getUserMemberships(graphApiToken, Optional.empty());\n         final List<UserGroup> lUserGroups = new ArrayList<>();\n         final ObjectMapper objectMapper = JacksonObjectMapperFactory.getInstance();\n-        final JsonNode rootNode = objectMapper.readValue(responseInJson, JsonNode.class);\n-        final JsonNode valuesNode = rootNode.get(\"value\");\n-\n-        if (valuesNode != null) {\n-            lUserGroups\n-                .addAll(StreamSupport.stream(valuesNode.spliterator(), false).filter(this::isMatchingUserGroupKey)\n-                    .map(node -> {\n-                        final String objectID = node.\n-                            get(aadAuthenticationProperties.getUserGroup().getObjectIDKey()).asText();\n-                        final String displayName = node.get(\"displayName\").asText();\n-                        return new UserGroup(objectID, displayName);\n-                    }).collect(Collectors.toList()));\n+        objectMapper.registerModule(new Jdk8Module());\n+        UserGroups groupsFromJson = objectMapper.readValue(responseInJson, UserGroups.class);\n \n+        if (groupsFromJson.getValue() != null) {\n+            lUserGroups.addAll(groupsFromJson.getValue().stream().filter(this::isMatchingUserGroupKey)\n+                .collect(Collectors.toList()));\n+        }\n+        while (groupsFromJson.getOdataNextLink().isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42467b4341c1fb56f051453a19e5879247f4406c"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQwNzQ3Mg==", "bodyText": "thanks for the debugging. The change from Optional<String>  to String means that getOdataNextLink() now returns a string or null if there is no odata.nextLink in the response. I replaced isPresent() with a null check in cc20c05", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14305#discussion_r477407472", "createdAt": "2020-08-26T15:52:09Z", "author": {"login": "ppartarr"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/spring/autoconfigure/aad/AzureADGraphClient.java", "diffHunk": "@@ -121,22 +121,21 @@ private static String getResponseStringFromConn(HttpURLConnection conn) throws I\n     }\n \n     private List<UserGroup> loadUserGroups(String graphApiToken) throws IOException {\n-        final String responseInJson = getUserMembershipsV1(graphApiToken);\n+        String responseInJson = getUserMemberships(graphApiToken, Optional.empty());\n         final List<UserGroup> lUserGroups = new ArrayList<>();\n         final ObjectMapper objectMapper = JacksonObjectMapperFactory.getInstance();\n-        final JsonNode rootNode = objectMapper.readValue(responseInJson, JsonNode.class);\n-        final JsonNode valuesNode = rootNode.get(\"value\");\n-\n-        if (valuesNode != null) {\n-            lUserGroups\n-                .addAll(StreamSupport.stream(valuesNode.spliterator(), false).filter(this::isMatchingUserGroupKey)\n-                    .map(node -> {\n-                        final String objectID = node.\n-                            get(aadAuthenticationProperties.getUserGroup().getObjectIDKey()).asText();\n-                        final String displayName = node.get(\"displayName\").asText();\n-                        return new UserGroup(objectID, displayName);\n-                    }).collect(Collectors.toList()));\n+        objectMapper.registerModule(new Jdk8Module());\n+        UserGroups groupsFromJson = objectMapper.readValue(responseInJson, UserGroups.class);\n \n+        if (groupsFromJson.getValue() != null) {\n+            lUserGroups.addAll(groupsFromJson.getValue().stream().filter(this::isMatchingUserGroupKey)\n+                .collect(Collectors.toList()));\n+        }\n+        while (groupsFromJson.getOdataNextLink().isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5MDY2NQ=="}, "originalCommit": {"oid": "42467b4341c1fb56f051453a19e5879247f4406c"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjcyNDUwOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/spring/autoconfigure/aad/AzureADGraphClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzo0ODozNVrOHG__4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzo0ODozNVrOHG__4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwMjA0OQ==", "bodyText": "Please update java doc in line 147.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14305#discussion_r477102049", "createdAt": "2020-08-26T07:48:35Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/spring/autoconfigure/aad/AzureADGraphClient.java", "diffHunk": "@@ -149,9 +148,8 @@ private static String getResponseStringFromConn(HttpURLConnection conn) throws I\n      *             {@link AADAuthenticationProperties.UserGroupProperties}\n      * @return true if the json node contains the correct key, and expected value to identify a user group.\n      */\n-    private boolean isMatchingUserGroupKey(final JsonNode node) {\n-        return node.get(aadAuthenticationProperties.getUserGroup().getKey()).asText()\n-            .equals(aadAuthenticationProperties.getUserGroup().getValue());\n+    private boolean isMatchingUserGroupKey(final UserGroup group) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42467b4341c1fb56f051453a19e5879247f4406c"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4Mjc1MDEyOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/spring/autoconfigure/aad/UserGroup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzo1NToxOFrOHHAPpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNTo1Nzo1N1rOHHS4uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwNjA4Nw==", "bodyText": "When will id and objectType been used? In the json I get, it only have objectId and odata.type.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14305#discussion_r477106087", "createdAt": "2020-08-26T07:55:18Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/spring/autoconfigure/aad/UserGroup.java", "diffHunk": "@@ -6,21 +6,42 @@\n import java.io.Serializable;\n import java.util.Objects;\n \n+import com.fasterxml.jackson.annotation.JsonAlias;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n public class UserGroup implements Serializable {\n     private static final long serialVersionUID = 9064197572478554735L;\n \n+    @JsonProperty(\"objectId\")\n+    @JsonAlias(\"id\")\n     private String objectID;\n+\n+    @JsonProperty(\"objectType\")\n+    @JsonAlias(\"@odata.type\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42467b4341c1fb56f051453a19e5879247f4406c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQxMTUxNQ==", "bodyText": "id and objectType are used depending on if the request is to Azure AD Graph API (v1) or the Microsoft Graph API (v2). See example responses here: https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/spring/azure-spring-boot/src/test/resources/aad\nFor reference, here are the docs for the /memberOf request/response for both versions:\nAzure Graph API: https://docs.microsoft.com/en-us/previous-versions/azure/ad/graph/api/users-operations#get-a-users-group-and-directory-role-memberships--\nMicrosoft Graph API: https://docs.microsoft.com/en-us/graph/api/user-list-memberof?view=graph-rest-1.0&tabs=http", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14305#discussion_r477411515", "createdAt": "2020-08-26T15:57:57Z", "author": {"login": "ppartarr"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/spring/autoconfigure/aad/UserGroup.java", "diffHunk": "@@ -6,21 +6,42 @@\n import java.io.Serializable;\n import java.util.Objects;\n \n+import com.fasterxml.jackson.annotation.JsonAlias;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n public class UserGroup implements Serializable {\n     private static final long serialVersionUID = 9064197572478554735L;\n \n+    @JsonProperty(\"objectId\")\n+    @JsonAlias(\"id\")\n     private String objectID;\n+\n+    @JsonProperty(\"objectType\")\n+    @JsonAlias(\"@odata.type\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwNjA4Nw=="}, "originalCommit": {"oid": "42467b4341c1fb56f051453a19e5879247f4406c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzA1NDY3OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/spring/autoconfigure/aad/UserGroups.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToxMjo1OFrOHHDKfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNTo1MzoxM1rOHHSr0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1MzkxOA==", "bodyText": "We can set default value to Optional.empty() to avoid NullPointerException.\nRefs: https://stackoverflow.com/questions/18805455/setting-default-values-to-null-fields-when-mapping-with-jackson\nBut having an Optional in a class field or in a data structure, is considered a misuse of the API,\nRefs: https://stackoverflow.com/questions/23454952/uses-for-optional\nSo I suggest to use\nprivate String odataNextLink;\n\ninstead of\nprivate Optional<String> odataNextLink;", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14305#discussion_r477153918", "createdAt": "2020-08-26T09:12:58Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/spring/autoconfigure/aad/UserGroups.java", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.spring.autoconfigure.aad;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class UserGroups {\n+\n+    @JsonProperty(\"odata.nextLink\")\n+    private Optional<String> odataNextLink;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42467b4341c1fb56f051453a19e5879247f4406c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQwODIxMQ==", "bodyText": "Thanks for pointing this out, using a String is the better approach! I made the change in cc20c05", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14305#discussion_r477408211", "createdAt": "2020-08-26T15:53:13Z", "author": {"login": "ppartarr"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/spring/autoconfigure/aad/UserGroups.java", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.spring.autoconfigure.aad;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class UserGroups {\n+\n+    @JsonProperty(\"odata.nextLink\")\n+    private Optional<String> odataNextLink;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1MzkxOA=="}, "originalCommit": {"oid": "42467b4341c1fb56f051453a19e5879247f4406c"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1565, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}