{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0NzM4MjE3", "number": 10310, "title": "Serialization and deserialization handling of types with discriminator", "bodyText": "This PR brings in complete support for serialization and deserialization of discriminator types. Discriminator support and flattening bug fixes were the work I already did for the track1 runtime. But that runtime work and my initial work on azure-core overlapped, and the feature never gets sync-ed.\nThe main improvements are -\n(1. handling of type-Id containing dots that were colliding with flattening dots.\n(2. Flattening of nested types\n(3. Increase flattening code coverage.", "createdAt": "2020-04-16T21:13:07Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10310", "merged": true, "mergeCommit": {"oid": "026df30c69e94988954461ef8a80bd98a517415f"}, "closed": true, "closedAt": "2020-04-18T01:24:09Z", "author": {"login": "anuchandy"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYTAS5gH2gAyNDA0NzM4MjE3OjFmODk0NTdlMmRhZWViY2ZmODJlNDQ1MTQzNWE2NTc4Yjg3YzIyZWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYqUf4AH2gAyNDA0NzM4MjE3OjMxODNkNmZjYTVlMDQ4ODNmZjExZTVhNWEzYjdlOGY3ZGE0NGFiYjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1f89457e2daeebcff82e4451435a6578b87c22ee", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1f89457e2daeebcff82e4451435a6578b87c22ee", "committedDate": "2020-04-16T20:48:47Z", "message": "Updating Flattening serializer and deserializer to fully support discriminator, nested types with flattening properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aeaf8195de479f04954d789a55740b2c0fddd9a4", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/aeaf8195de479f04954d789a55740b2c0fddd9a4", "committedDate": "2020-04-16T20:54:04Z", "message": "moving model types from test entities to test serializer package."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa3baef3cd3882de7d805ce60f3262c39b1b9dfc", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/aa3baef3cd3882de7d805ce60f3262c39b1b9dfc", "committedDate": "2020-04-16T20:55:23Z", "message": "Minor addition to AdditionalPropertiesSerializerTests to validate extra cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14715214f0bf97316d3bf536047be8202200fb57", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/14715214f0bf97316d3bf536047be8202200fb57", "committedDate": "2020-04-16T20:57:40Z", "message": "Adding more code coverage to flattening and typeId scenarios."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f08fd5315cbe2fb1f8b7c14a3c30a01b64a36b2", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9f08fd5315cbe2fb1f8b7c14a3c30a01b64a36b2", "committedDate": "2020-04-16T21:58:46Z", "message": "opening test models in azure-core-test entities pkg to azure-core"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MDUyMjIz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10310#pullrequestreview-395052223", "createdAt": "2020-04-16T22:50:44Z", "commit": {"oid": "9f08fd5315cbe2fb1f8b7c14a3c30a01b64a36b2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MDU2Nzcy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10310#pullrequestreview-395056772", "createdAt": "2020-04-16T23:02:06Z", "commit": {"oid": "9f08fd5315cbe2fb1f8b7c14a3c30a01b64a36b2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MDQzODky", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10310#pullrequestreview-395043892", "createdAt": "2020-04-16T22:30:50Z", "commit": {"oid": "9f08fd5315cbe2fb1f8b7c14a3c30a01b64a36b2"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjozMDo1MFrOGG5dIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMzo0MDoxNFrOGG666Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NTk4Ng==", "bodyText": "Given this is in a for loop could the failing if checks be inverted and continue? It'll flatten the indentation level and should me this easier to read.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10310#discussion_r409885986", "createdAt": "2020-04-16T22:30:50Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/FlatteningDeserializer.java", "diffHunk": "@@ -65,58 +68,185 @@ public static SimpleModule getModule(final ObjectMapper mapper) {\n         SimpleModule module = new SimpleModule();\n         module.setDeserializerModifier(new BeanDeserializerModifier() {\n             @Override\n-            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config, BeanDescription beanDesc,\n+            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config,\n+                                                          BeanDescription beanDesc,\n                                                           JsonDeserializer<?> deserializer) {\n-                if (beanDesc.getBeanClass().getAnnotation(JsonFlatten.class) != null) {\n+                if (BeanDeserializer.class.isAssignableFrom(deserializer.getClass())) {\n+                    // Register 'FlatteningDeserializer' for complex type so that 'deserializeWithType'\n+                    // will get called for complex types and it can analyze typeId discriminator.\n                     return new FlatteningDeserializer(beanDesc.getBeanClass(), deserializer, mapper);\n+                } else {\n+                    return deserializer;\n                 }\n-                return deserializer;\n             }\n         });\n         return module;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n-    public Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n-        JsonNode root = mapper.readTree(jp);\n+    public Object deserializeWithType(JsonParser jp,\n+                                      DeserializationContext cxt,\n+                                      TypeDeserializer tDeserializer) throws IOException {\n+        // This method will be called from Jackson for each \"Json object with TypeId\" as it\n+        // process the input data. This enable us to pre-process then give it to the next\n+        // deserializer in the Jackson pipeline.\n+        //\n+        // The parameter 'jp' is the reader to read \"Json object with TypeId\"\n+        //\n+        JsonNode currentJsonNode = mapper.readTree(jp);\n         final Class<?> tClass = this.defaultDeserializer.handledType();\n         for (Class<?> c : TypeUtil.getAllClasses(tClass)) {\n-            // Ignore checks for Object type.\n             if (c.isAssignableFrom(Object.class)) {\n                 continue;\n-            }\n-            for (Field field : c.getDeclaredFields()) {\n-                JsonNode node = root;\n-                JsonProperty property = field.getAnnotation(JsonProperty.class);\n-                if (property != null) {\n-                    String value = property.value();\n-                    if (value.matches(\".+[^\\\\\\\\]\\\\..+\")) {\n-                        String[] values = value.split(\"((?<!\\\\\\\\))\\\\.\");\n-                        for (String val : values) {\n-                            val = val.replace(\"\\\\.\", \".\");\n-                            node = node.get(val);\n-                            if (node == null) {\n-                                break;\n-                            }\n-                        }\n-                        // If additional properties have a conflicting key, escape the additional property's key\n-                        if (root.has(value)) {\n-                            String escapedValue = value.replace(\".\", \"\\\\.\");\n-                            ((ObjectNode) root).set(escapedValue, root.get(value));\n+            } else {\n+                final JsonTypeInfo typeInfo = c.getAnnotation(com.fasterxml.jackson.annotation.JsonTypeInfo.class);\n+                if (typeInfo != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f08fd5315cbe2fb1f8b7c14a3c30a01b64a36b2"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwODkxNg==", "bodyText": "Should we just cast this to ObjectNode ahead of time so we don't need to cast all the time later in the method?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10310#discussion_r409908916", "createdAt": "2020-04-16T23:36:52Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/FlatteningDeserializer.java", "diffHunk": "@@ -65,58 +68,185 @@ public static SimpleModule getModule(final ObjectMapper mapper) {\n         SimpleModule module = new SimpleModule();\n         module.setDeserializerModifier(new BeanDeserializerModifier() {\n             @Override\n-            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config, BeanDescription beanDesc,\n+            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config,\n+                                                          BeanDescription beanDesc,\n                                                           JsonDeserializer<?> deserializer) {\n-                if (beanDesc.getBeanClass().getAnnotation(JsonFlatten.class) != null) {\n+                if (BeanDeserializer.class.isAssignableFrom(deserializer.getClass())) {\n+                    // Register 'FlatteningDeserializer' for complex type so that 'deserializeWithType'\n+                    // will get called for complex types and it can analyze typeId discriminator.\n                     return new FlatteningDeserializer(beanDesc.getBeanClass(), deserializer, mapper);\n+                } else {\n+                    return deserializer;\n                 }\n-                return deserializer;\n             }\n         });\n         return module;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n-    public Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n-        JsonNode root = mapper.readTree(jp);\n+    public Object deserializeWithType(JsonParser jp,\n+                                      DeserializationContext cxt,\n+                                      TypeDeserializer tDeserializer) throws IOException {\n+        // This method will be called from Jackson for each \"Json object with TypeId\" as it\n+        // process the input data. This enable us to pre-process then give it to the next\n+        // deserializer in the Jackson pipeline.\n+        //\n+        // The parameter 'jp' is the reader to read \"Json object with TypeId\"\n+        //\n+        JsonNode currentJsonNode = mapper.readTree(jp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f08fd5315cbe2fb1f8b7c14a3c30a01b64a36b2"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwOTk5Mw==", "bodyText": "Should we just use ObjectNode?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10310#discussion_r409909993", "createdAt": "2020-04-16T23:40:14Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/FlatteningDeserializer.java", "diffHunk": "@@ -65,58 +68,185 @@ public static SimpleModule getModule(final ObjectMapper mapper) {\n         SimpleModule module = new SimpleModule();\n         module.setDeserializerModifier(new BeanDeserializerModifier() {\n             @Override\n-            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config, BeanDescription beanDesc,\n+            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config,\n+                                                          BeanDescription beanDesc,\n                                                           JsonDeserializer<?> deserializer) {\n-                if (beanDesc.getBeanClass().getAnnotation(JsonFlatten.class) != null) {\n+                if (BeanDeserializer.class.isAssignableFrom(deserializer.getClass())) {\n+                    // Register 'FlatteningDeserializer' for complex type so that 'deserializeWithType'\n+                    // will get called for complex types and it can analyze typeId discriminator.\n                     return new FlatteningDeserializer(beanDesc.getBeanClass(), deserializer, mapper);\n+                } else {\n+                    return deserializer;\n                 }\n-                return deserializer;\n             }\n         });\n         return module;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n-    public Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n-        JsonNode root = mapper.readTree(jp);\n+    public Object deserializeWithType(JsonParser jp,\n+                                      DeserializationContext cxt,\n+                                      TypeDeserializer tDeserializer) throws IOException {\n+        // This method will be called from Jackson for each \"Json object with TypeId\" as it\n+        // process the input data. This enable us to pre-process then give it to the next\n+        // deserializer in the Jackson pipeline.\n+        //\n+        // The parameter 'jp' is the reader to read \"Json object with TypeId\"\n+        //\n+        JsonNode currentJsonNode = mapper.readTree(jp);\n         final Class<?> tClass = this.defaultDeserializer.handledType();\n         for (Class<?> c : TypeUtil.getAllClasses(tClass)) {\n-            // Ignore checks for Object type.\n             if (c.isAssignableFrom(Object.class)) {\n                 continue;\n-            }\n-            for (Field field : c.getDeclaredFields()) {\n-                JsonNode node = root;\n-                JsonProperty property = field.getAnnotation(JsonProperty.class);\n-                if (property != null) {\n-                    String value = property.value();\n-                    if (value.matches(\".+[^\\\\\\\\]\\\\..+\")) {\n-                        String[] values = value.split(\"((?<!\\\\\\\\))\\\\.\");\n-                        for (String val : values) {\n-                            val = val.replace(\"\\\\.\", \".\");\n-                            node = node.get(val);\n-                            if (node == null) {\n-                                break;\n-                            }\n-                        }\n-                        // If additional properties have a conflicting key, escape the additional property's key\n-                        if (root.has(value)) {\n-                            String escapedValue = value.replace(\".\", \"\\\\.\");\n-                            ((ObjectNode) root).set(escapedValue, root.get(value));\n+            } else {\n+                final JsonTypeInfo typeInfo = c.getAnnotation(com.fasterxml.jackson.annotation.JsonTypeInfo.class);\n+                if (typeInfo != null) {\n+                    String typeId = typeInfo.property();\n+                    if (containsDot(typeId)) {\n+                        final String typeIdOnWire = unescapeEscapedDots(typeId);\n+                        JsonNode typeIdValue = ((ObjectNode) currentJsonNode).remove(typeIdOnWire);\n+                        if (typeIdValue != null) {\n+                            ((ObjectNode) currentJsonNode).put(typeId, typeIdValue);\n                         }\n-                        ((ObjectNode) root).set(value, node);\n                     }\n                 }\n             }\n         }\n-        JsonParser parser = new JsonFactory().createParser(root.toString());\n-        parser.nextToken();\n-        return defaultDeserializer.deserialize(parser, ctxt);\n+        return tDeserializer.deserializeTypedFromAny(newJsonParserForNode(currentJsonNode), cxt);\n+    }\n+\n+    @Override\n+    public Object deserialize(JsonParser jp, DeserializationContext cxt) throws IOException {\n+        // This method will be called by Jackson for each \"Json object\" in the input wire stream\n+        // it is trying to deserialize.\n+        //\n+        // The parameter 'jp' is the reader to read \"Json object with TypeId\"\n+        //\n+        JsonNode currentJsonNode = mapper.readTree(jp);\n+        if (currentJsonNode.isNull()) {\n+            currentJsonNode = mapper.getNodeFactory().objectNode();\n+        }\n+        final Class<?> tClass = this.defaultDeserializer.handledType();\n+        for (Class<?> c : TypeUtil.getAllClasses(tClass)) {\n+            if (c.isAssignableFrom(Object.class)) {\n+                continue;\n+            } else {\n+                for (Field classField : c.getDeclaredFields()) {\n+                    handleFlatteningForField(classField, currentJsonNode);\n+                }\n+            }\n+        }\n+        return this.defaultDeserializer.deserialize(newJsonParserForNode(currentJsonNode), cxt);\n     }\n \n     @Override\n-    public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n-        ((ResolvableDeserializer) defaultDeserializer).resolve(ctxt);\n+    public void resolve(DeserializationContext cxt) throws JsonMappingException {\n+        ((ResolvableDeserializer) this.defaultDeserializer).resolve(cxt);\n+    }\n+\n+    /**\n+     * Given a field of a POJO class and JsonNode corresponds to the same POJO class,\n+     * check field's {@link JsonProperty} has flattening dots in it if so\n+     * flatten the nested child JsonNode corresponds to the field in the given JsonNode.\n+     *\n+     * @param classField the field in a POJO class\n+     * @param jsonNode the json node corresponds to POJO class that field belongs to\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    private static void handleFlatteningForField(Field classField, JsonNode jsonNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f08fd5315cbe2fb1f8b7c14a3c30a01b64a36b2"}, "originalPosition": 145}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MTEzNzcz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10310#pullrequestreview-395113773", "createdAt": "2020-04-17T02:03:00Z", "commit": {"oid": "9f08fd5315cbe2fb1f8b7c14a3c30a01b64a36b2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjowMzowMFrOGG9V7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjowMzowMFrOGG9V7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0OTY3OQ==", "bodyText": "I am not sure if opening it up is good or bad at this point.\nHere is a bug in track1 that kind of caused by open-up (not really, but previous class not under \"@JsonFlatten\" will not be affected, but now it will, and hence the bug)\nAzure/autorest-clientruntime-for-java#663\nAnd we got this one there\n#8372\nJust saying it could be risky if there is unfixed or even unknown bug.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10310#discussion_r409949679", "createdAt": "2020-04-17T02:03:00Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/FlatteningDeserializer.java", "diffHunk": "@@ -65,58 +68,185 @@ public static SimpleModule getModule(final ObjectMapper mapper) {\n         SimpleModule module = new SimpleModule();\n         module.setDeserializerModifier(new BeanDeserializerModifier() {\n             @Override\n-            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config, BeanDescription beanDesc,\n+            public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config,\n+                                                          BeanDescription beanDesc,\n                                                           JsonDeserializer<?> deserializer) {\n-                if (beanDesc.getBeanClass().getAnnotation(JsonFlatten.class) != null) {\n+                if (BeanDeserializer.class.isAssignableFrom(deserializer.getClass())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f08fd5315cbe2fb1f8b7c14a3c30a01b64a36b2"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27c8b79cd197360afc120ad27520893c59642837", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/27c8b79cd197360afc120ad27520893c59642837", "committedDate": "2020-04-17T18:26:50Z", "message": "Reverting FlatteningSerializer: same as current FlatteningSerlizer ou there, updating newly added tests to include JsonFlatten"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "092dbd1f81962178e8a4cc0a7b97033d7d5f04c5", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/092dbd1f81962178e8a4cc0a7b97033d7d5f04c5", "committedDate": "2020-04-17T18:27:31Z", "message": "FlattteningDeserializer: improve code readbility"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NzIwMTAy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10310#pullrequestreview-395720102", "createdAt": "2020-04-17T19:32:04Z", "commit": {"oid": "092dbd1f81962178e8a4cc0a7b97033d7d5f04c5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef473fea365ccc109482f2c9a07d45abe7f22e18", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ef473fea365ccc109482f2c9a07d45abe7f22e18", "committedDate": "2020-04-17T20:34:23Z", "message": "removing jacoco.exec that was added by mistake"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3183d6fca5e04883ff11e5a5a3b7e8f7da44abb2", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3183d6fca5e04883ff11e5a5a3b7e8f7da44abb2", "committedDate": "2020-04-17T23:58:40Z", "message": "Limit FlatteningDeserializer to JsonFlatten annotated type"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 993, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}