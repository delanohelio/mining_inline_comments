{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxOTg2NDEy", "number": 15565, "title": "JSON-Merge-Patch and Option type to represent value (null value or non-null value) or no-value.", "bodyText": "Introduction com.azure.core.util.Option<T>:\nThe com.azure.core.util.Option<T> type has:\n\nempty() or of(null) to indicate a null value\nof(non-null-value) to indicate a non-null value\nuninitialized() to indicate no-value.\n\nWhy com.azure.core.util.Option<T> type:\nWhile the Option type in-general express presence (null and non-null) and the absence of a value , the main use-case is to support JSON-Merge-Patch.\nWe are seeing more services supporting \"JSON-Merge-Patch\" protocol for the update operation, it has the following feature:\n\nThe wire JSON can contain only the properties user wants to update (partial).\nProperties of wire JSON can have a null value, to clear the property of resources stored in the service.\n\nitem 2 requires us to distinguish between an explicit NULL vs. default NULL.\nHow  com.azure.core.util.Option<T> type will be used in PATCH models:\nThe JSON-Merge-Patch model properties will have type as com.azure.core.util.Option<T>, where T is the wire type.\n\nWhen com.azure.core.util.Option.empty() or com.azure.core.util.Option.of(null)  is used then we send null to the service.\nWhen com.azure.core.util.Option.of(non-null-value) is used then we send non-null-value to the service.\nWhen com.azure.core.util.Option.uninitialized() is used then we don't send any value to the service.\n\nToday, our default serializer will not include null value in the JSON.\nExample for Patch models:\npublic class ContactPatch {\n    private final String name;\n    private final com.azure.core.util.Option<AddressPatch> address;\n\n    public ContactPatch(String name, com.azure.core.util.Option<AddressPatch> address) {\n        this.name = name;\n        this. address = Objects.requireNonNull(address);\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public com.azure.core.util.Option<AddressPatch> getAddress() {\n        return this.address;\n    }\n}\npublic class AddressPatch {\n    private String houseNumber;\n    privatecom.azure.core.util.Option<String> lane;\n\n    public AddressPatch(String houseNumber, com.azure.core.util.Option<String> lane) {\n        this.houseNumber = houseNumber;\n        this.lane = Objects.requireNonNull(lane);\n    }\n\n    public String getHouseNumber() {\n        return this.houseNumber;\n    }\n\n    public com.azure.core.util.Option<String> getLane() {\n        return this.lane;\n    }\n}\nExample for usage of Patch models:\nContactPatch withUninitializedAddress = new ContactPatch(\"Example Co.\", Option.uninitialized());\nString withUninitializedAddressJson = mapper.writeValueAsString(withUninitializedAddress);\nSystem.out.println(withUninitializedAddressJson);\n{\"name\":\"Example Co.\"}\n\nContactPatch withNullAddress = new ContactPatch(\"Example Co.\", Option.empty());\nString withNullAddressJson = mapper.writeValueAsString(withNullAddress);\nSystem.out.println(withNullAddressJson);\n{\"name\":\"Example Co.\",\"address\":null}\n\nContactPatch withUninitializedLaneAddress = new ContactPatch(\"Example Co.\",\n        Option.of(new AddressPatch(\"12345\", Option.uninitialized())));\nString withUninitializedLaneAddressJson = mapper.writeValueAsString(withUninitializedLaneAddress);\nSystem.out.println(withUninitializedLaneAddressJson);\n{\"name\":\"Example Co.\",\"address\":{\"houseNumber\":\"12345\"}}\n\nContactPatch withNullLaneAddress = new ContactPatch(\"Example Co.\",\n        Option.of(new AddressPatch(\"12345\", Option.empty())));\nString withNullLaneAddressJson = mapper.writeValueAsString(withNullLaneAddress);\nSystem.out.println(withNullLaneAddressJson);\n{\"name\":\"Example Co.\",\"address\":{\"houseNumber\":\"12345\",\"lane\":null}}\n\nContactPatch withFullAddress = new ContactPatch(\"Example Co.\",\n        Option.of(new AddressPatch(\"12345\", Option.of(\"lane_1\"))));\nString withAddressJson = mapper.writeValueAsString(withFullAddress);\nSystem.out.println(withAddressJson);\n{\"name\":\"Example Co.\",\"address\":{\"houseNumber\":\"12345\",\"lane\":\"lane_1\"}}\n\nWhy not java.util.Optional<T>\nWhile we could use java.util.Optional<T> for this, the problem is, java.util.Optional<T> is not designed for  tri-state functionality. A getter that returns a java.util.Optional must never return null or else it breaks all the guarantees of null safety that Optional is intending to provide.\nHow com.azure.core.util.Option<T> is serialized\nWhen serializing, we need to serialize the value that an Option object is holding not the Option object itself. Additionally, when Option is in uninitialized state, no serialization should happen. We're achieving this by adding a custom Jackson module for Option type and it is registered with the default JackonAdapter.", "createdAt": "2020-09-23T19:13:15Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565", "merged": true, "mergeCommit": {"oid": "1ac001b65f0703074dd92e2bfb652b726323ff1f"}, "closed": true, "closedAt": "2020-10-19T19:14:01Z", "author": {"login": "anuchandy"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLxHdhAH2gAyNDkxOTg2NDEyOjc5N2EzNGNlODJiNjBkOTk2MTVhMWQ0Mjk0MzFjZTU5NDdhYjI0YTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUJA9jgFqTUxMjA3NTk2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "797a34ce82b60d99615a1d429431ce5947ab24a6", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/797a34ce82b60d99615a1d429431ce5947ab24a6", "committedDate": "2020-09-23T18:43:54Z", "message": "Adding Option type that can represent value (null value or non-null value) or no value."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "893fe861abbf5a56c6d8a2ab0eae06cea12ed6f0", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/893fe861abbf5a56c6d8a2ab0eae06cea12ed6f0", "committedDate": "2020-09-24T01:14:27Z", "message": "split some(null|non-null) into empty() and of(non-null), adding ofNullable(non|non-null), rename none() to unset()."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NjYwNTM0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#pullrequestreview-499660534", "createdAt": "2020-09-30T17:30:40Z", "commit": {"oid": "893fe861abbf5a56c6d8a2ab0eae06cea12ed6f0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzozMDo0MFrOHaoM7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzozMDo0MFrOHaoM7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4MzY5Mw==", "bodyText": "Can make this into a singleton as we have with UNSET.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r497683693", "createdAt": "2020-09-30T17:30:40Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * The Option type, every Option is either has a value present including null,\n+ * or has no value present.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNSET = new Option<>();\n+    private final boolean isSet;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} instance with no value.\n+     *\n+     * @param <T> The value type.\n+     * @return An Option type with no value present.\n+     */\n+    public static <T> Option<T> unset() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> none = (Option<T>) UNSET;\n+        return none;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with an empty value.\n+     *\n+     * @param <T> The value type.\n+     * @return an {@link Option} with the empty value present.\n+     */\n+    public static <T> Option<T> empty() {\n+        return new Option<>(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "893fe861abbf5a56c6d8a2ab0eae06cea12ed6f0"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NjYxMjc3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#pullrequestreview-499661277", "createdAt": "2020-09-30T17:31:43Z", "commit": {"oid": "893fe861abbf5a56c6d8a2ab0eae06cea12ed6f0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzozMTo0M1rOHaoPLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzozMTo0M1rOHaoPLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4NDI2OQ==", "bodyText": "We'll need to expand on these Javadocs because isSet will be true when the value is null and for many null indicates that a value isn't present.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r497684269", "createdAt": "2020-09-30T17:31:43Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * The Option type, every Option is either has a value present including null,\n+ * or has no value present.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNSET = new Option<>();\n+    private final boolean isSet;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} instance with no value.\n+     *\n+     * @param <T> The value type.\n+     * @return An Option type with no value present.\n+     */\n+    public static <T> Option<T> unset() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> none = (Option<T>) UNSET;\n+        return none;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with an empty value.\n+     *\n+     * @param <T> The value type.\n+     * @return an {@link Option} with the empty value present.\n+     */\n+    public static <T> Option<T> empty() {\n+        return new Option<>(null);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with the specified non-null value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value, which must be non-null.\n+     * @return an {@link Option} with the non-null value present.\n+     * @throws NullPointerException if value is null.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        Objects.requireNonNull(value);\n+        return new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with the specified nullable value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the null or non-null value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> ofNullable(T value) {\n+        return new Option<>(value);\n+    }\n+\n+    /**\n+     * Return {@code true} if there is a value present, otherwise {@code false}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "893fe861abbf5a56c6d8a2ab0eae06cea12ed6f0"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwODEyMjAy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#pullrequestreview-500812202", "createdAt": "2020-10-02T01:19:57Z", "commit": {"oid": "893fe861abbf5a56c6d8a2ab0eae06cea12ed6f0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMToxOTo1N1rOHbfEPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMToxOTo1N1rOHbfEPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU4MjU5MA==", "bodyText": "I think we should change this into empty and make the current empty clear. This pattern will follow more closely with what Optional types in Java do, where it is expected that isPresent on empty will return false. With the current design empty will return true for isSet, which makes it a better candidate to be called clear.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r498582590", "createdAt": "2020-10-02T01:19:57Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * The Option type, every Option is either has a value present including null,\n+ * or has no value present.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNSET = new Option<>();\n+    private final boolean isSet;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} instance with no value.\n+     *\n+     * @param <T> The value type.\n+     * @return An Option type with no value present.\n+     */\n+    public static <T> Option<T> unset() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "893fe861abbf5a56c6d8a2ab0eae06cea12ed6f0"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20acbe56b0086c338612468be9ccb6d882f5172d", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/20acbe56b0086c338612468be9ccb6d882f5172d", "committedDate": "2020-10-12T15:00:03Z", "message": "sync with upstream"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2ODYxOTkz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#pullrequestreview-506861993", "createdAt": "2020-10-12T19:23:34Z", "commit": {"oid": "20acbe56b0086c338612468be9ccb6d882f5172d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOToyMzozNVrOHgKgbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOToyNjowM1rOHgKkxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4ODYyMg==", "bodyText": "I think these two can be combined. We can just have Option.of(T value) if the value is null we know it represents empty. Do we have any added benefit of having two separate methods? With these two methods - the user will either always use ofNullable just to be safe or will have to write something like\nOption<T> patchValue;\nif( value != null) { \n      patchValue = Option.of(value); \n} else { \n     patchValue = Option.empty();\n}", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r503488622", "createdAt": "2020-10-12T19:23:35Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * The Option type, every Option is either has a value present including null,\n+ * or has no value present.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNSET = new Option<>();\n+    private final boolean isSet;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} instance with no value.\n+     *\n+     * @param <T> The value type.\n+     * @return An Option type with no value present.\n+     */\n+    public static <T> Option<T> unset() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> none = (Option<T>) UNSET;\n+        return none;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with an empty value.\n+     *\n+     * @param <T> The value type.\n+     * @return an {@link Option} with the empty value present.\n+     */\n+    public static <T> Option<T> empty() {\n+        return new Option<>(null);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with the specified non-null value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value, which must be non-null.\n+     * @return an {@link Option} with the non-null value present.\n+     * @throws NullPointerException if value is null.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        Objects.requireNonNull(value);\n+        return new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with the specified nullable value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the null or non-null value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> ofNullable(T value) {\n+        return new Option<>(value);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20acbe56b0086c338612468be9ccb6d882f5172d"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4OTczMg==", "bodyText": "If we use the JS terminology, we can change this method name to isInitialized(). We should also consider adding isPresent() to return true if isInitialized() && value != null.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r503489732", "createdAt": "2020-10-12T19:26:03Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * The Option type, every Option is either has a value present including null,\n+ * or has no value present.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNSET = new Option<>();\n+    private final boolean isSet;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} instance with no value.\n+     *\n+     * @param <T> The value type.\n+     * @return An Option type with no value present.\n+     */\n+    public static <T> Option<T> unset() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> none = (Option<T>) UNSET;\n+        return none;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with an empty value.\n+     *\n+     * @param <T> The value type.\n+     * @return an {@link Option} with the empty value present.\n+     */\n+    public static <T> Option<T> empty() {\n+        return new Option<>(null);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with the specified non-null value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value, which must be non-null.\n+     * @return an {@link Option} with the non-null value present.\n+     * @throws NullPointerException if value is null.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        Objects.requireNonNull(value);\n+        return new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with the specified nullable value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the null or non-null value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> ofNullable(T value) {\n+        return new Option<>(value);\n+    }\n+\n+    /**\n+     * Return {@code true} if there is a value present, otherwise {@code false}.\n+     *\n+     * @return {@code true} if there is a value present, otherwise {@code false}\n+     */\n+    public boolean isSet() {\n+        return this.isSet;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20acbe56b0086c338612468be9ccb6d882f5172d"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3726ae207d133ba40047d59d93298c744a5037d9", "committedDate": "2020-10-13T02:25:48Z", "message": "rename unset to uninitialized"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3NjM0Mjk2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#pullrequestreview-507634296", "createdAt": "2020-10-13T16:38:55Z", "commit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjozODo1NVrOHgv5ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjo0NTowMFrOHgwQFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwMTI3OA==", "bodyText": "Do we want to state No value initialized?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r504101278", "createdAt": "2020-10-13T16:38:55Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Option type to describe tri-state. Every Option instance is in one of\n+ * the three states: a state representing a non-null-value, null-value, or no-value.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNINITIALIZED = new Option<>();\n+    private static final Option<?> EMPTY = new Option<>(null);\n+    private final boolean isInitialized;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} with the specified null-value or non-null-value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        return value == null ? empty() : new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with null-value.\n+     * <p>\n+     * {@code Option.empty()} is a syntactic sugar for {@code Option.of(null)}.\n+     * </p>\n+     * @param <T> The value type.\n+     * @return an {@link Option} with a null-value.\n+     */\n+    public static <T> Option<T> empty() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> empty = (Option<T>) EMPTY;\n+        return empty;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} instance with no-value.\n+     *\n+     * @param <T> Type of the non-existent value.\n+     * @return An Option type with no-value.\n+     */\n+    public static <T> Option<T> uninitialized() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> uninitialized = (Option<T>) UNINITIALIZED;\n+        return uninitialized;\n+    }\n+\n+    /**\n+     * Return {@code true} if this instance is initialized with a null-value or non-null-value,\n+     * otherwise {@code false}.\n+     *\n+     * @return {@code true} if there is a value present, otherwise {@code false}\n+     */\n+    public boolean isInitialized() {\n+        return this.isInitialized;\n+    }\n+\n+    /**\n+     * Gets the value in the {@link Option}.\n+     *\n+     * @return The value.\n+     * @throws NoSuchElementException thrown if the {@link Option} has no value.\n+     */\n+    public T getValue() {\n+        if (!this.isInitialized) {\n+            throw new NoSuchElementException(\"No value present\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwMTYzNQ==", "bodyText": "May want to discuss that the value could be null.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r504101635", "createdAt": "2020-10-13T16:39:14Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Option type to describe tri-state. Every Option instance is in one of\n+ * the three states: a state representing a non-null-value, null-value, or no-value.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNINITIALIZED = new Option<>();\n+    private static final Option<?> EMPTY = new Option<>(null);\n+    private final boolean isInitialized;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} with the specified null-value or non-null-value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        return value == null ? empty() : new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with null-value.\n+     * <p>\n+     * {@code Option.empty()} is a syntactic sugar for {@code Option.of(null)}.\n+     * </p>\n+     * @param <T> The value type.\n+     * @return an {@link Option} with a null-value.\n+     */\n+    public static <T> Option<T> empty() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> empty = (Option<T>) EMPTY;\n+        return empty;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} instance with no-value.\n+     *\n+     * @param <T> Type of the non-existent value.\n+     * @return An Option type with no-value.\n+     */\n+    public static <T> Option<T> uninitialized() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> uninitialized = (Option<T>) UNINITIALIZED;\n+        return uninitialized;\n+    }\n+\n+    /**\n+     * Return {@code true} if this instance is initialized with a null-value or non-null-value,\n+     * otherwise {@code false}.\n+     *\n+     * @return {@code true} if there is a value present, otherwise {@code false}\n+     */\n+    public boolean isInitialized() {\n+        return this.isInitialized;\n+    }\n+\n+    /**\n+     * Gets the value in the {@link Option}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwMjk5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return {@code true} if there is a value present, otherwise {@code false}\n          \n          \n            \n                 * @return {@code true} if a value has been initialized, otherwise {@code false}\n          \n      \n    \n    \n  \n\nThink it would be good to use the terminology initialized everywhere instead of present as present usually has a different connotation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r504102996", "createdAt": "2020-10-13T16:40:32Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Option type to describe tri-state. Every Option instance is in one of\n+ * the three states: a state representing a non-null-value, null-value, or no-value.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNINITIALIZED = new Option<>();\n+    private static final Option<?> EMPTY = new Option<>(null);\n+    private final boolean isInitialized;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} with the specified null-value or non-null-value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        return value == null ? empty() : new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with null-value.\n+     * <p>\n+     * {@code Option.empty()} is a syntactic sugar for {@code Option.of(null)}.\n+     * </p>\n+     * @param <T> The value type.\n+     * @return an {@link Option} with a null-value.\n+     */\n+    public static <T> Option<T> empty() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> empty = (Option<T>) EMPTY;\n+        return empty;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} instance with no-value.\n+     *\n+     * @param <T> Type of the non-existent value.\n+     * @return An Option type with no-value.\n+     */\n+    public static <T> Option<T> uninitialized() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> uninitialized = (Option<T>) UNINITIALIZED;\n+        return uninitialized;\n+    }\n+\n+    /**\n+     * Return {@code true} if this instance is initialized with a null-value or non-null-value,\n+     * otherwise {@code false}.\n+     *\n+     * @return {@code true} if there is a value present, otherwise {@code false}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwNzAzMA==", "bodyText": "We should add code snippets which outline the three scenarios with calls to isInitialized and getValue and have comments on what their expected result would be, for the non-null and uninitialized scenarios:\nOption<String> endpointOption = Option.of(\"https://example.com\");\n\nif (endpointOption.isInitialized()) { // Returns true\n  System.out.println(endpointOption.getValue());\n}\n\nOption<String> unitializedOption = Option.unitialized();\n\nif (unitializedOption.isInitialized()) { // Returns false\n\n}\n\nunitializedOption.getValue(); // Throws NoSuchElementException", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r504107030", "createdAt": "2020-10-13T16:45:00Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Option type to describe tri-state. Every Option instance is in one of\n+ * the three states: a state representing a non-null-value, null-value, or no-value.\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4NjMwNDkz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#pullrequestreview-508630493", "createdAt": "2020-10-14T18:44:35Z", "commit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxODo0NDozNVrOHhgYXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxODo0NDozNVrOHhgYXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg5NTU4Mw==", "bodyText": "Are we going to add a JsonSerializer<Option> implementation to JacksonAdapter?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r504895583", "createdAt": "2020-10-14T18:44:35Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Option type to describe tri-state. Every Option instance is in one of\n+ * the three states: a state representing a non-null-value, null-value, or no-value.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwODM0MTE1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#pullrequestreview-510834115", "createdAt": "2020-10-16T22:40:56Z", "commit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjo0MDo1NlrOHjRm8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjo0NjoyM1rOHjRr0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1MDcwNw==", "bodyText": "Should we allow uninitialized Option to be initialized later after creation by calling setValue(T value)?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r506750707", "createdAt": "2020-10-16T22:40:56Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Option type to describe tri-state. Every Option instance is in one of\n+ * the three states: a state representing a non-null-value, null-value, or no-value.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNINITIALIZED = new Option<>();\n+    private static final Option<?> EMPTY = new Option<>(null);\n+    private final boolean isInitialized;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} with the specified null-value or non-null-value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        return value == null ? empty() : new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with null-value.\n+     * <p>\n+     * {@code Option.empty()} is a syntactic sugar for {@code Option.of(null)}.\n+     * </p>\n+     * @param <T> The value type.\n+     * @return an {@link Option} with a null-value.\n+     */\n+    public static <T> Option<T> empty() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> empty = (Option<T>) EMPTY;\n+        return empty;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} instance with no-value.\n+     *\n+     * @param <T> Type of the non-existent value.\n+     * @return An Option type with no-value.\n+     */\n+    public static <T> Option<T> uninitialized() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1MTUwNA==", "bodyText": "This should log and throw.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r506751504", "createdAt": "2020-10-16T22:44:33Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Option type to describe tri-state. Every Option instance is in one of\n+ * the three states: a state representing a non-null-value, null-value, or no-value.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNINITIALIZED = new Option<>();\n+    private static final Option<?> EMPTY = new Option<>(null);\n+    private final boolean isInitialized;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} with the specified null-value or non-null-value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        return value == null ? empty() : new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with null-value.\n+     * <p>\n+     * {@code Option.empty()} is a syntactic sugar for {@code Option.of(null)}.\n+     * </p>\n+     * @param <T> The value type.\n+     * @return an {@link Option} with a null-value.\n+     */\n+    public static <T> Option<T> empty() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> empty = (Option<T>) EMPTY;\n+        return empty;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} instance with no-value.\n+     *\n+     * @param <T> Type of the non-existent value.\n+     * @return An Option type with no-value.\n+     */\n+    public static <T> Option<T> uninitialized() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> uninitialized = (Option<T>) UNINITIALIZED;\n+        return uninitialized;\n+    }\n+\n+    /**\n+     * Return {@code true} if this instance is initialized with a null-value or non-null-value,\n+     * otherwise {@code false}.\n+     *\n+     * @return {@code true} if there is a value present, otherwise {@code false}\n+     */\n+    public boolean isInitialized() {\n+        return this.isInitialized;\n+    }\n+\n+    /**\n+     * Gets the value in the {@link Option}.\n+     *\n+     * @return The value.\n+     * @throws NoSuchElementException thrown if the {@link Option} has no value.\n+     */\n+    public T getValue() {\n+        if (!this.isInitialized) {\n+            throw new NoSuchElementException(\"No value present\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1MTk1Mw==", "bodyText": "We need a setValue() method as well. Otherwise, this will be immutable resulting in many Option objects being created to mutate the value.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r506751953", "createdAt": "2020-10-16T22:46:23Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Option type to describe tri-state. Every Option instance is in one of\n+ * the three states: a state representing a non-null-value, null-value, or no-value.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNINITIALIZED = new Option<>();\n+    private static final Option<?> EMPTY = new Option<>(null);\n+    private final boolean isInitialized;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} with the specified null-value or non-null-value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        return value == null ? empty() : new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with null-value.\n+     * <p>\n+     * {@code Option.empty()} is a syntactic sugar for {@code Option.of(null)}.\n+     * </p>\n+     * @param <T> The value type.\n+     * @return an {@link Option} with a null-value.\n+     */\n+    public static <T> Option<T> empty() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> empty = (Option<T>) EMPTY;\n+        return empty;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} instance with no-value.\n+     *\n+     * @param <T> Type of the non-existent value.\n+     * @return An Option type with no-value.\n+     */\n+    public static <T> Option<T> uninitialized() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> uninitialized = (Option<T>) UNINITIALIZED;\n+        return uninitialized;\n+    }\n+\n+    /**\n+     * Return {@code true} if this instance is initialized with a null-value or non-null-value,\n+     * otherwise {@code false}.\n+     *\n+     * @return {@code true} if there is a value present, otherwise {@code false}\n+     */\n+    public boolean isInitialized() {\n+        return this.isInitialized;\n+    }\n+\n+    /**\n+     * Gets the value in the {@link Option}.\n+     *\n+     * @return The value.\n+     * @throws NoSuchElementException thrown if the {@link Option} has no value.\n+     */\n+    public T getValue() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b74aab1d1fd0b2c35edfb634be258596ac3ec68a", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b74aab1d1fd0b2c35edfb634be258596ac3ec68a", "committedDate": "2020-10-17T00:16:38Z", "message": "Adding jackson serializer for Option type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f1fde0d09b076ecf57a8ab5bf86b624e95bebb9", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1f1fde0d09b076ecf57a8ab5bf86b624e95bebb9", "committedDate": "2020-10-17T01:08:08Z", "message": "Option code-snippet and test cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "700d802638f70b03b2717b76dec187fc81240fc8", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/700d802638f70b03b2717b76dec187fc81240fc8", "committedDate": "2020-10-19T17:12:26Z", "message": "Option: update OptionTypeModifier JavaDoc and adding a test when T in Option is raw type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMDQwNDIz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#pullrequestreview-512040423", "createdAt": "2020-10-19T18:21:06Z", "commit": {"oid": "700d802638f70b03b2717b76dec187fc81240fc8"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0NjoxM1rOHkc5bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0NjoxM1rOHkc5bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk4NDIzNg==", "bodyText": "It might be easier to use stream().filter().foreach() here. Also, is it better to create a new list with new property writers instead of mutating the input list?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r507984236", "createdAt": "2020-10-19T18:46:13Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/OptionPropertiesModifier.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2013 FasterXML.com\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License. You may obtain\n+ * a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+\n+/*\n+ * Portions Copyright (c) Microsoft Corporation\n+ */\n+\n+package com.azure.core.util.serializer;\n+\n+import com.azure.core.util.Option;\n+import com.fasterxml.jackson.databind.BeanDescription;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n+import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n+import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;\n+\n+import java.util.List;\n+\n+/**\n+ * The Serializer modifier for {@link Option} properties to not serialize them when\n+ * those properties are in uninitialized state.\n+ */\n+final class OptionPropertiesModifier extends BeanSerializerModifier {\n+    @Override\n+    public List<BeanPropertyWriter> changeProperties(SerializationConfig config,\n+                                                     BeanDescription beanDesc,\n+                                                     List<BeanPropertyWriter> beanPropertyWriters) {\n+        for (int i = 0; i < beanPropertyWriters.size(); i++) {\n+            final BeanPropertyWriter writer = beanPropertyWriters.get(i);\n+            if (writer.getType().isTypeOrSubTypeOf(Option.class)) {\n+                beanPropertyWriters.set(i, new OptionBeanPropertyWriter(writer));\n+            }\n+        }\n+        return beanPropertyWriters;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700d802638f70b03b2717b76dec187fc81240fc8"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMDc1OTYw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#pullrequestreview-512075960", "createdAt": "2020-10-19T19:05:55Z", "commit": {"oid": "700d802638f70b03b2717b76dec187fc81240fc8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3277, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}