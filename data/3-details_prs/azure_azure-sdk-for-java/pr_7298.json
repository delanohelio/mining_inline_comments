{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwNzQyOTc4", "number": 7298, "title": "Implements a slf4j logger impl as default logger in azure core", "bodyText": "", "createdAt": "2020-01-09T02:43:34Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298", "merged": true, "mergeCommit": {"oid": "6b2c11e270b06326a718a0026459e04e092f341f"}, "closed": true, "closedAt": "2020-01-16T02:16:20Z", "author": {"login": "sima-zhu"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4hrWHAFqTM0MDI3NjM4Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb65lYEgFqTM0Mzg4NjI0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMjc2Mzg3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#pullrequestreview-340276387", "createdAt": "2020-01-09T03:48:54Z", "commit": {"oid": "f2296c0e94b14d23043a29ec1d4215e184c63a0b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMzo0ODo1NFrOFbqSfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMzo0ODo1NFrOFbqSfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU0ODczMg==", "bodyText": "missing description for param level and format", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r364548732", "createdAt": "2020-01-09T03:48:54Z", "author": {"login": "mssfang"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLogger.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import com.azure.core.util.logging.LogLevel;\n+import java.io.PrintStream;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+\n+/**\n+ * This class is an internal implementation of slf4j logger.\n+ */\n+public class DefaultLogger extends DefaultLoggerBase {\n+    private final String classPath;\n+    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\n+\n+    /**\n+     * Construct DefaultLogger for the given class.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public DefaultLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Construct DefaultLogger for the given class name.\n+     *\n+     * @param className Class name creating the logger.\n+     * @throws RuntimeException it is an error.\n+     */\n+    public DefaultLogger(String className) {\n+        try {\n+            this.classPath = Class.forName(className).getCanonicalName();\n+        } catch (ClassNotFoundException e) {\n+            throw new RuntimeException(String.format(\"We are not able to find the class %s in default logger.\",\n+                className));\n+        }\n+    }\n+\n+    /**\n+     * Perform double parameter substitution before logging the message of level\n+     * DEBUG according to the format outlined above.\n+     */\n+    public void debug(String format, Object... argArray) {\n+        formatAndLog(LogLevel.VERBOSE, format, argArray);\n+    }\n+\n+    /**\n+     * Perform double parameter substitution before logging the message of level\n+     * DEBUG according to the format outlined above.\n+     */\n+    public void info(String format, Object... argArray) {\n+        formatAndLog(LogLevel.INFORMATIONAL, format, argArray);\n+    }\n+\n+    /**\n+     * Perform double parameter substitution before logging the message of level\n+     * DEBUG according to the format outlined above.\n+     */\n+    public void warn(String format, Object... argArray) {\n+        formatAndLog(LogLevel.WARNING, format, argArray);\n+    }\n+\n+    /**\n+     * Perform double parameter substitution before logging the message of level\n+     * DEBUG according to the format outlined above.\n+     */\n+    public void error(String format, Object... argArray) {\n+        formatAndLog(LogLevel.ERROR, format, argArray);\n+    }\n+\n+    /**\n+     * For formatted messages, first substitute arguments and then log.\n+     *\n+     * @param level", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2296c0e94b14d23043a29ec1d4215e184c63a0b"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMjc4Njcy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#pullrequestreview-340278672", "createdAt": "2020-01-09T04:00:07Z", "commit": {"oid": "f2296c0e94b14d23043a29ec1d4215e184c63a0b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNDowMDowN1rOFbqaEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNDowMDowN1rOFbqaEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU1MDY3NA==", "bodyText": "At leastt do not use 'java.util.Date'.  https://programminghints.com/2017/05/still-using-java-util-date-dont/", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r364550674", "createdAt": "2020-01-09T04:00:07Z", "author": {"login": "mssfang"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLogger.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import com.azure.core.util.logging.LogLevel;\n+import java.io.PrintStream;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2296c0e94b14d23043a29ec1d4215e184c63a0b"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMjc3NDE1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#pullrequestreview-340277415", "createdAt": "2020-01-09T03:54:05Z", "commit": {"oid": "f2296c0e94b14d23043a29ec1d4215e184c63a0b"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMzo1NDowNlrOFbqWEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNjowMzoxNVrOFbrpPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU0OTY0OA==", "bodyText": "I think we should implement this and remove the class name tracking from ClientLogger", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r364549648", "createdAt": "2020-01-09T03:54:06Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLoggerBase.java", "diffHunk": "@@ -0,0 +1,841 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.Marker;\n+\n+public abstract class DefaultLoggerBase implements Logger {\n+\n+    /**\n+     * Return the name of this <code>Logger</code> instance.\n+     *\n+     * @return name of this logger instance\n+     */\n+    @Override\n+    public String getName() {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2296c0e94b14d23043a29ec1d4215e184c63a0b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU0OTk4Ng==", "bodyText": "Given that we don't want to implement these we may want to throw an exception here to enforce that this shouldn't be used.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r364549986", "createdAt": "2020-01-09T03:55:58Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLoggerBase.java", "diffHunk": "@@ -0,0 +1,841 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.Marker;\n+\n+public abstract class DefaultLoggerBase implements Logger {\n+\n+    /**\n+     * Return the name of this <code>Logger</code> instance.\n+     *\n+     * @return name of this logger instance\n+     */\n+    @Override\n+    public String getName() {\n+        return null;\n+    }\n+\n+    /**\n+     * Is the logger instance enabled for the TRACE level?\n+     *\n+     * @return True if this Logger is enabled for the TRACE level,\n+     * false otherwise.\n+     * @since 1.4\n+     */\n+    @Override\n+    public boolean isTraceEnabled() {\n+        return false;\n+    }\n+\n+    /**\n+     * Log a message at the TRACE level.\n+     *\n+     * @param msg the message string to be logged\n+     * @since 1.4\n+     */\n+    @Override\n+    public void trace(final String msg) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2296c0e94b14d23043a29ec1d4215e184c63a0b"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU1MDE5OQ==", "bodyText": "Let's implement this to validate against the environment variable, same goes for the other log levels we want to support", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r364550199", "createdAt": "2020-01-09T03:57:06Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLoggerBase.java", "diffHunk": "@@ -0,0 +1,841 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.Marker;\n+\n+public abstract class DefaultLoggerBase implements Logger {\n+\n+    /**\n+     * Return the name of this <code>Logger</code> instance.\n+     *\n+     * @return name of this logger instance\n+     */\n+    @Override\n+    public String getName() {\n+        return null;\n+    }\n+\n+    /**\n+     * Is the logger instance enabled for the TRACE level?\n+     *\n+     * @return True if this Logger is enabled for the TRACE level,\n+     * false otherwise.\n+     * @since 1.4\n+     */\n+    @Override\n+    public boolean isTraceEnabled() {\n+        return false;\n+    }\n+\n+    /**\n+     * Log a message at the TRACE level.\n+     *\n+     * @param msg the message string to be logged\n+     * @since 1.4\n+     */\n+    @Override\n+    public void trace(final String msg) {\n+\n+    }\n+\n+    /**\n+     * Log a message at the TRACE level according to the specified format\n+     * and argument.\n+     * <p/>\n+     * <p>This form avoids superfluous object creation when the logger\n+     * is disabled for the TRACE level. </p>\n+     *\n+     * @param format the format string\n+     * @param arg the argument\n+     * @since 1.4\n+     */\n+    @Override\n+    public void trace(final String format, final Object arg) {\n+\n+    }\n+\n+    /**\n+     * Log a message at the TRACE level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous object creation when the logger\n+     * is disabled for the TRACE level. </p>\n+     *\n+     * @param format the format string\n+     * @param arg1 the first argument\n+     * @param arg2 the second argument\n+     * @since 1.4\n+     */\n+    @Override\n+    public void trace(final String format, final Object arg1, final Object arg2) {\n+\n+    }\n+\n+    /**\n+     * Log a message at the TRACE level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the TRACE level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for TRACE. The variants taking {@link #trace(String, Object) one} and\n+     * {@link #trace(String, Object, Object) two} arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param arguments a list of 3 or more arguments\n+     * @since 1.4\n+     */\n+    @Override\n+    public void trace(final String format, final Object... arguments) {\n+\n+    }\n+\n+    /**\n+     * Log an exception (throwable) at the TRACE level with an\n+     * accompanying message.\n+     *\n+     * @param msg the message accompanying the exception\n+     * @param t the exception (throwable) to log\n+     * @since 1.4\n+     */\n+    @Override\n+    public void trace(final String msg, final Throwable t) {\n+\n+    }\n+\n+    /**\n+     * Similar to {@link #isTraceEnabled()} method except that the\n+     * marker data is also taken into account.\n+     *\n+     * @param marker The marker data to take into consideration\n+     * @return True if this Logger is enabled for the TRACE level,\n+     * false otherwise.\n+     * @since 1.4\n+     */\n+    @Override\n+    public boolean isTraceEnabled(final Marker marker) {\n+        return false;\n+    }\n+\n+    /**\n+     * Log a message with the specific Marker at the TRACE level.\n+     *\n+     * @param marker the marker data specific to this log statement\n+     * @param msg the message string to be logged\n+     * @since 1.4\n+     */\n+    @Override\n+    public void trace(final Marker marker, final String msg) {\n+\n+    }\n+\n+    /**\n+     * This method is similar to {@link #trace(String, Object)} method except that the\n+     * marker data is also taken into consideration.\n+     *\n+     * @param marker the marker data specific to this log statement\n+     * @param format the format string\n+     * @param arg the argument\n+     * @since 1.4\n+     */\n+    @Override\n+    public void trace(final Marker marker, final String format, final Object arg) {\n+\n+    }\n+\n+    /**\n+     * This method is similar to {@link #trace(String, Object, Object)}\n+     * method except that the marker data is also taken into\n+     * consideration.\n+     *\n+     * @param marker the marker data specific to this log statement\n+     * @param format the format string\n+     * @param arg1 the first argument\n+     * @param arg2 the second argument\n+     * @since 1.4\n+     */\n+    @Override\n+    public void trace(final Marker marker, final String format, final Object arg1, final Object arg2) {\n+\n+    }\n+\n+    /**\n+     * This method is similar to {@link #trace(String, Object...)}\n+     * method except that the marker data is also taken into\n+     * consideration.\n+     *\n+     * @param marker the marker data specific to this log statement\n+     * @param format the format string\n+     * @param argArray an array of arguments\n+     * @since 1.4\n+     */\n+    @Override\n+    public void trace(final Marker marker, final String format, final Object... argArray) {\n+\n+    }\n+\n+    /**\n+     * This method is similar to {@link #trace(String, Throwable)} method except that the\n+     * marker data is also taken into consideration.\n+     *\n+     * @param marker the marker data specific to this log statement\n+     * @param msg the message accompanying the exception\n+     * @param t the exception (throwable) to log\n+     * @since 1.4\n+     */\n+    @Override\n+    public void trace(final Marker marker, final String msg, final Throwable t) {\n+\n+    }\n+\n+    /**\n+     * Is the logger instance enabled for the DEBUG level?\n+     *\n+     * @return True if this Logger is enabled for the DEBUG level,\n+     * false otherwise.\n+     */\n+    @Override\n+    public boolean isDebugEnabled() {\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2296c0e94b14d23043a29ec1d4215e184c63a0b"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU2OTQ2Mg==", "bodyText": "Shouldn't assume this is always a class, I believe any arbitrary string could be used", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r364569462", "createdAt": "2020-01-09T05:55:44Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLogger.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import com.azure.core.util.logging.LogLevel;\n+import java.io.PrintStream;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+\n+/**\n+ * This class is an internal implementation of slf4j logger.\n+ */\n+public class DefaultLogger extends DefaultLoggerBase {\n+    private final String classPath;\n+    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\n+\n+    /**\n+     * Construct DefaultLogger for the given class.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public DefaultLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Construct DefaultLogger for the given class name.\n+     *\n+     * @param className Class name creating the logger.\n+     * @throws RuntimeException it is an error.\n+     */\n+    public DefaultLogger(String className) {\n+        try {\n+            this.classPath = Class.forName(className).getCanonicalName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2296c0e94b14d23043a29ec1d4215e184c63a0b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU2OTY5NA==", "bodyText": "Do we actually want this to be a publicly extendible class?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r364569694", "createdAt": "2020-01-09T05:56:57Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLoggerBase.java", "diffHunk": "@@ -0,0 +1,841 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.Marker;\n+\n+public abstract class DefaultLoggerBase implements Logger {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2296c0e94b14d23043a29ec1d4215e184c63a0b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3MDI3Nw==", "bodyText": "Should make the entire print statement a single operation to prevent race conditions interleaving messages", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r364570277", "createdAt": "2020-01-09T05:59:38Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLogger.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import com.azure.core.util.logging.LogLevel;\n+import java.io.PrintStream;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+\n+/**\n+ * This class is an internal implementation of slf4j logger.\n+ */\n+public class DefaultLogger extends DefaultLoggerBase {\n+    private final String classPath;\n+    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\n+\n+    /**\n+     * Construct DefaultLogger for the given class.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public DefaultLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Construct DefaultLogger for the given class name.\n+     *\n+     * @param className Class name creating the logger.\n+     * @throws RuntimeException it is an error.\n+     */\n+    public DefaultLogger(String className) {\n+        try {\n+            this.classPath = Class.forName(className).getCanonicalName();\n+        } catch (ClassNotFoundException e) {\n+            throw new RuntimeException(String.format(\"We are not able to find the class %s in default logger.\",\n+                className));\n+        }\n+    }\n+\n+    /**\n+     * Perform double parameter substitution before logging the message of level\n+     * DEBUG according to the format outlined above.\n+     */\n+    public void debug(String format, Object... argArray) {\n+        formatAndLog(LogLevel.VERBOSE, format, argArray);\n+    }\n+\n+    /**\n+     * Perform double parameter substitution before logging the message of level\n+     * DEBUG according to the format outlined above.\n+     */\n+    public void info(String format, Object... argArray) {\n+        formatAndLog(LogLevel.INFORMATIONAL, format, argArray);\n+    }\n+\n+    /**\n+     * Perform double parameter substitution before logging the message of level\n+     * DEBUG according to the format outlined above.\n+     */\n+    public void warn(String format, Object... argArray) {\n+        formatAndLog(LogLevel.WARNING, format, argArray);\n+    }\n+\n+    /**\n+     * Perform double parameter substitution before logging the message of level\n+     * DEBUG according to the format outlined above.\n+     */\n+    public void error(String format, Object... argArray) {\n+        formatAndLog(LogLevel.ERROR, format, argArray);\n+    }\n+\n+    /**\n+     * For formatted messages, first substitute arguments and then log.\n+     *\n+     * @param level\n+     * @param format\n+     * @param arguments\n+     *            a list of 3 ore more arguments\n+     */\n+    private void formatAndLog(LogLevel level, String format, Object... arguments) {\n+        FormattingTuple tp = MessageFormatter.arrayFormat(format, arguments);\n+        log(level, tp.getMessage(), tp.getThrowable());\n+    }\n+\n+    /**\n+     * This is our internal implementation for logging regular\n+     * (non-parameterized) log messages.\n+     *\n+     * @param level\n+     *            One of the LOG_LEVEL_XXX constants defining the log level\n+     * @param message\n+     *            The message itself\n+     * @param t\n+     *            The exception whose stack trace should be logged\n+     */\n+    private void log(LogLevel level, String message, Throwable t) {\n+        StringBuilder buf = new StringBuilder(32);\n+\n+        // Append date-time.\n+        buf.append(getFormattedDate());\n+        buf.append(' ');\n+\n+        // Append current thread name if so configured\n+        buf.append('[');\n+        buf.append(Thread.currentThread().getName());\n+        buf.append(\"] \");\n+\n+\n+        // Append a readable representation of the log level\n+        buf.append('[');\n+        buf.append(level.name());\n+        buf.append(']');\n+        buf.append(' ');\n+\n+        // Append the name of the log instance if so configured\n+        buf.append(classPath).append(\" - \");\n+\n+        // Append the message\n+        buf.append(message);\n+\n+        write(buf, t);\n+    }\n+\n+    private String getFormattedDate() {\n+        Date now = new Date();\n+        return DATE_FORMAT.format(now);\n+    }\n+\n+    void write(StringBuilder buf, Throwable t) {\n+        PrintStream targetStream = System.out;\n+\n+        targetStream.println(buf.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2296c0e94b14d23043a29ec1d4215e184c63a0b"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3MDM3OQ==", "bodyText": "Should this be final?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r364570379", "createdAt": "2020-01-09T06:00:17Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLogger.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import com.azure.core.util.logging.LogLevel;\n+import java.io.PrintStream;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+\n+/**\n+ * This class is an internal implementation of slf4j logger.\n+ */\n+public class DefaultLogger extends DefaultLoggerBase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2296c0e94b14d23043a29ec1d4215e184c63a0b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3MDk0MA==", "bodyText": "Why is this no longer final? Instead load the SLF4J binded instance into a temp variable then set this based on that being a NOPLogger.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r364570940", "createdAt": "2020-01-09T06:03:15Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/logging/ClientLogger.java", "diffHunk": "@@ -35,7 +36,8 @@\n  * @see Configuration\n  */\n public class ClientLogger {\n-    private final Logger logger;\n+    private Logger logger;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2296c0e94b14d23043a29ec1d4215e184c63a0b"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwNzU4NTU2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#pullrequestreview-340758556", "createdAt": "2020-01-09T19:23:11Z", "commit": {"oid": "074bad8c798c274f1ac2fd24f41909ee7caea9ff"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxOToyMzoxMVrOFcA0EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxOToyODowM1rOFcA8VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkxNzc3Nw==", "bodyText": "This can be removed now that the fields in ClientLogger are final", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r364917777", "createdAt": "2020-01-09T19:23:11Z", "author": {"login": "alzimmermsft"}, "path": "eng/code-quality-reports/src/main/resources/checkstyle/checkstyle-suppressions.xml", "diffHunk": "@@ -96,6 +96,9 @@\n   <!-- Custom checkstyle rules only check track 2 libraries -->\n   <suppress checks=\"com\\.azure\\.tools\\.checkstyle\\.checks\\..+\" files=\".*[/\\\\]com[/\\\\]microsoft[/\\\\].*\"/>\n \n+  <!-- There is a need to check whether assign logger to the slf4j binding one or default one. -->\n+  <suppress checks=\"com.azure.tools.checkstyle.checks.EnforceFinalFieldsCheck\" files=\".*ClientLogger.java\"/>\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "074bad8c798c274f1ac2fd24f41909ee7caea9ff"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkxOTg5Mg==", "bodyText": "Let's remove these Javadocs and just use\n/**\n * {@inheritDoc}\n */", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r364919892", "createdAt": "2020-01-09T19:28:03Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLoggerBase.java", "diffHunk": "@@ -0,0 +1,886 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.Marker;\n+\n+abstract class DefaultLoggerBase implements Logger {\n+\n+    /**\n+     * Return the name of this <code>Logger</code> instance. It is currently not supported.\n+     *\n+     * @return name of this logger instance\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public String getName() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Is the logger instance enabled for the TRACE level? It is currently not supported.\n+     *\n+     * @return True if this Logger is enabled for the TRACE level,\n+     * false otherwise.\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public boolean isTraceEnabled() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log a message at the TRACE level. It is currently not supported.\n+     *\n+     * @param msg the message string to be logged\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "074bad8c798c274f1ac2fd24f41909ee7caea9ff"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwNzc4NTE0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#pullrequestreview-340778514", "createdAt": "2020-01-09T19:58:09Z", "commit": {"oid": "07e4921ce72b6074a713346d563ea8b168b96583"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxOTo1ODowOVrOFcBv0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMjowMzo0MFrOFcEvSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkzMzA3NA==", "bodyText": "javadoc", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r364933074", "createdAt": "2020-01-09T19:58:09Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLoggerBase.java", "diffHunk": "@@ -0,0 +1,886 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.Marker;\n+\n+abstract class DefaultLoggerBase implements Logger {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07e4921ce72b6074a713346d563ea8b168b96583"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk2ODc5MQ==", "bodyText": "Both StringWriter and PrintWriter should be closed after use", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r364968791", "createdAt": "2020-01-09T21:30:08Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLogger.java", "diffHunk": "@@ -0,0 +1,559 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import com.azure.core.util.logging.LogLevel;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MarkerIgnoringBase;\n+import org.slf4j.helpers.MessageFormatter;\n+\n+/**\n+ * This class is an internal implementation of slf4j logger.\n+ */\n+public final class DefaultLogger extends MarkerIgnoringBase {\n+    private static final long serialVersionUID = -144261058636441630L;\n+\n+    private String classPath;\n+    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\n+\n+    /**\n+     * Construct DefaultLogger for the given class.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public DefaultLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Construct DefaultLogger for the given class name.\n+     *\n+     * @param className Class name creating the logger.\n+     * @throws RuntimeException it is an error.\n+     */\n+    public DefaultLogger(String className) {\n+        try {\n+            this.classPath = Class.forName(className).getCanonicalName();\n+        } catch (ClassNotFoundException e) {\n+            this.classPath = className;\n+        }\n+    }\n+\n+    /**\n+     * Log a message at the DEBUG level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the DEBUG level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for DEBUG. The variants taking\n+     * {@link #debug(String, Object) one} and {@link #debug(String, Object, Object) two}\n+     * arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param argArray a list of arbitrary arguments\n+     */\n+    public void debug(String format, Object... argArray) {\n+        formatAndLog(LogLevel.VERBOSE, format, argArray);\n+    }\n+\n+    /**\n+     * Log a message at the INFO level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the INFO level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for INFO. The variants taking\n+     * {@link #info(String, Object) one} and {@link #info(String, Object, Object) two}\n+     * arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param argArray a list of arbitrary arguments\n+     */\n+    public void info(String format, Object... argArray) {\n+        formatAndLog(LogLevel.INFORMATIONAL, format, argArray);\n+    }\n+\n+    /**\n+     * Log a message at the WARN level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the WARN level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for WARN. The variants taking\n+     * {@link #warn(String, Object) one} and {@link #warn(String, Object, Object) two}\n+     * arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param argArray a list of arbitrary arguments\n+     */\n+    public void warn(String format, Object... argArray) {\n+        formatAndLog(LogLevel.WARNING, format, argArray);\n+    }\n+\n+    /**\n+     * Log a message at the ERROR level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the ERROR level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for ERROR. The variants taking\n+     * {@link #error(String, Object) one} and {@link #error(String, Object, Object) two}\n+     * arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param argArray a list of arbitrary arguments\n+     */\n+    public void error(String format, Object... argArray) {\n+        formatAndLog(LogLevel.ERROR, format, argArray);\n+    }\n+\n+    /**\n+     * For formatted messages, first substitute arguments and then log.\n+     *\n+     * @param level The level to log.\n+     * @param format The log message format.\n+     * @param arguments a list of arbitrary arguments taken in by format.\n+     */\n+    private void formatAndLog(LogLevel level, String format, Object... arguments) {\n+        FormattingTuple tp = MessageFormatter.arrayFormat(format, arguments);\n+        log(level, tp.getMessage(), tp.getThrowable());\n+    }\n+\n+    /**\n+     * This is our internal implementation for logging regular\n+     * (non-parameterized) log messages.\n+     *\n+     * @param level\n+     *            One of the LOG_LEVEL_XXX constants defining the log level\n+     * @param message\n+     *            The message itself\n+     * @param t\n+     *            The exception whose stack trace should be logged\n+     */\n+    private void log(LogLevel level, String message, Throwable t) {\n+        StringBuilder buf = new StringBuilder(32);\n+\n+        // Append date-time.\n+        buf.append(getFormattedDate());\n+        buf.append(' ');\n+\n+        // Append current thread name if so configured\n+        buf.append('[');\n+        buf.append(Thread.currentThread().getName());\n+        buf.append(\"] \");\n+\n+\n+        // Append a readable representation of the log level\n+        buf.append('[');\n+        buf.append(level.name());\n+        buf.append(']');\n+        buf.append(' ');\n+\n+        // Append the name of the log instance if so configured\n+        buf.append(classPath).append(\" - \");\n+\n+        // Append the message\n+        buf.append(message);\n+\n+        write(buf, t);\n+    }\n+\n+    private String getFormattedDate() {\n+        LocalDateTime now = LocalDateTime.now();\n+        return DATE_FORMAT.format(now);\n+    }\n+\n+    void write(StringBuilder buf, Throwable t) {\n+        if (t != null) {\n+            StringWriter sw = new StringWriter();\n+            PrintWriter pw = new PrintWriter(sw);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cc5822ffbb08042d165667437e5a72e01ad71c3"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk3Nzc1NA==", "bodyText": "nit: fix formatting.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r364977754", "createdAt": "2020-01-09T21:52:30Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLogger.java", "diffHunk": "@@ -0,0 +1,559 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import com.azure.core.util.logging.LogLevel;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MarkerIgnoringBase;\n+import org.slf4j.helpers.MessageFormatter;\n+\n+/**\n+ * This class is an internal implementation of slf4j logger.\n+ */\n+public final class DefaultLogger extends MarkerIgnoringBase {\n+    private static final long serialVersionUID = -144261058636441630L;\n+\n+    private String classPath;\n+    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\n+\n+    /**\n+     * Construct DefaultLogger for the given class.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public DefaultLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Construct DefaultLogger for the given class name.\n+     *\n+     * @param className Class name creating the logger.\n+     * @throws RuntimeException it is an error.\n+     */\n+    public DefaultLogger(String className) {\n+        try {\n+            this.classPath = Class.forName(className).getCanonicalName();\n+        } catch (ClassNotFoundException e) {\n+            this.classPath = className;\n+        }\n+    }\n+\n+    /**\n+     * Log a message at the DEBUG level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the DEBUG level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for DEBUG. The variants taking\n+     * {@link #debug(String, Object) one} and {@link #debug(String, Object, Object) two}\n+     * arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param argArray a list of arbitrary arguments\n+     */\n+    public void debug(String format, Object... argArray) {\n+        formatAndLog(LogLevel.VERBOSE, format, argArray);\n+    }\n+\n+    /**\n+     * Log a message at the INFO level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the INFO level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for INFO. The variants taking\n+     * {@link #info(String, Object) one} and {@link #info(String, Object, Object) two}\n+     * arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param argArray a list of arbitrary arguments\n+     */\n+    public void info(String format, Object... argArray) {\n+        formatAndLog(LogLevel.INFORMATIONAL, format, argArray);\n+    }\n+\n+    /**\n+     * Log a message at the WARN level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the WARN level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for WARN. The variants taking\n+     * {@link #warn(String, Object) one} and {@link #warn(String, Object, Object) two}\n+     * arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param argArray a list of arbitrary arguments\n+     */\n+    public void warn(String format, Object... argArray) {\n+        formatAndLog(LogLevel.WARNING, format, argArray);\n+    }\n+\n+    /**\n+     * Log a message at the ERROR level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the ERROR level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for ERROR. The variants taking\n+     * {@link #error(String, Object) one} and {@link #error(String, Object, Object) two}\n+     * arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param argArray a list of arbitrary arguments\n+     */\n+    public void error(String format, Object... argArray) {\n+        formatAndLog(LogLevel.ERROR, format, argArray);\n+    }\n+\n+    /**\n+     * For formatted messages, first substitute arguments and then log.\n+     *\n+     * @param level The level to log.\n+     * @param format The log message format.\n+     * @param arguments a list of arbitrary arguments taken in by format.\n+     */\n+    private void formatAndLog(LogLevel level, String format, Object... arguments) {\n+        FormattingTuple tp = MessageFormatter.arrayFormat(format, arguments);\n+        log(level, tp.getMessage(), tp.getThrowable());\n+    }\n+\n+    /**\n+     * This is our internal implementation for logging regular\n+     * (non-parameterized) log messages.\n+     *\n+     * @param level\n+     *            One of the LOG_LEVEL_XXX constants defining the log level", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cc5822ffbb08042d165667437e5a72e01ad71c3"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk3ODc1Mw==", "bodyText": "This should be supported since we have an implementation for debug(String format, Object.. argArray) on line 61.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r364978753", "createdAt": "2020-01-09T21:55:05Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLogger.java", "diffHunk": "@@ -0,0 +1,559 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import com.azure.core.util.logging.LogLevel;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MarkerIgnoringBase;\n+import org.slf4j.helpers.MessageFormatter;\n+\n+/**\n+ * This class is an internal implementation of slf4j logger.\n+ */\n+public final class DefaultLogger extends MarkerIgnoringBase {\n+    private static final long serialVersionUID = -144261058636441630L;\n+\n+    private String classPath;\n+    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\n+\n+    /**\n+     * Construct DefaultLogger for the given class.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public DefaultLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Construct DefaultLogger for the given class name.\n+     *\n+     * @param className Class name creating the logger.\n+     * @throws RuntimeException it is an error.\n+     */\n+    public DefaultLogger(String className) {\n+        try {\n+            this.classPath = Class.forName(className).getCanonicalName();\n+        } catch (ClassNotFoundException e) {\n+            this.classPath = className;\n+        }\n+    }\n+\n+    /**\n+     * Log a message at the DEBUG level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the DEBUG level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for DEBUG. The variants taking\n+     * {@link #debug(String, Object) one} and {@link #debug(String, Object, Object) two}\n+     * arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param argArray a list of arbitrary arguments\n+     */\n+    public void debug(String format, Object... argArray) {\n+        formatAndLog(LogLevel.VERBOSE, format, argArray);\n+    }\n+\n+    /**\n+     * Log a message at the INFO level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the INFO level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for INFO. The variants taking\n+     * {@link #info(String, Object) one} and {@link #info(String, Object, Object) two}\n+     * arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param argArray a list of arbitrary arguments\n+     */\n+    public void info(String format, Object... argArray) {\n+        formatAndLog(LogLevel.INFORMATIONAL, format, argArray);\n+    }\n+\n+    /**\n+     * Log a message at the WARN level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the WARN level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for WARN. The variants taking\n+     * {@link #warn(String, Object) one} and {@link #warn(String, Object, Object) two}\n+     * arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param argArray a list of arbitrary arguments\n+     */\n+    public void warn(String format, Object... argArray) {\n+        formatAndLog(LogLevel.WARNING, format, argArray);\n+    }\n+\n+    /**\n+     * Log a message at the ERROR level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the ERROR level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for ERROR. The variants taking\n+     * {@link #error(String, Object) one} and {@link #error(String, Object, Object) two}\n+     * arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param argArray a list of arbitrary arguments\n+     */\n+    public void error(String format, Object... argArray) {\n+        formatAndLog(LogLevel.ERROR, format, argArray);\n+    }\n+\n+    /**\n+     * For formatted messages, first substitute arguments and then log.\n+     *\n+     * @param level The level to log.\n+     * @param format The log message format.\n+     * @param arguments a list of arbitrary arguments taken in by format.\n+     */\n+    private void formatAndLog(LogLevel level, String format, Object... arguments) {\n+        FormattingTuple tp = MessageFormatter.arrayFormat(format, arguments);\n+        log(level, tp.getMessage(), tp.getThrowable());\n+    }\n+\n+    /**\n+     * This is our internal implementation for logging regular\n+     * (non-parameterized) log messages.\n+     *\n+     * @param level\n+     *            One of the LOG_LEVEL_XXX constants defining the log level\n+     * @param message\n+     *            The message itself\n+     * @param t\n+     *            The exception whose stack trace should be logged\n+     */\n+    private void log(LogLevel level, String message, Throwable t) {\n+        StringBuilder buf = new StringBuilder(32);\n+\n+        // Append date-time.\n+        buf.append(getFormattedDate());\n+        buf.append(' ');\n+\n+        // Append current thread name if so configured\n+        buf.append('[');\n+        buf.append(Thread.currentThread().getName());\n+        buf.append(\"] \");\n+\n+\n+        // Append a readable representation of the log level\n+        buf.append('[');\n+        buf.append(level.name());\n+        buf.append(']');\n+        buf.append(' ');\n+\n+        // Append the name of the log instance if so configured\n+        buf.append(classPath).append(\" - \");\n+\n+        // Append the message\n+        buf.append(message);\n+\n+        write(buf, t);\n+    }\n+\n+    private String getFormattedDate() {\n+        LocalDateTime now = LocalDateTime.now();\n+        return DATE_FORMAT.format(now);\n+    }\n+\n+    void write(StringBuilder buf, Throwable t) {\n+        if (t != null) {\n+            StringWriter sw = new StringWriter();\n+            PrintWriter pw = new PrintWriter(sw);\n+            t.printStackTrace(pw);\n+            buf.append(sw.toString());\n+        }\n+        System.out.println(buf.toString());\n+    }\n+\n+    /**\n+     * Return the name of this <code>Logger</code> instance. It is currently not supported.\n+     *\n+     * @return name of this logger instance\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public String getName() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Is the logger instance enabled for the TRACE level? It is currently not supported.\n+     *\n+     * @return True if this Logger is enabled for the TRACE level,\n+     * false otherwise.\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public boolean isTraceEnabled() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log a message at the TRACE level. It is currently not supported.\n+     *\n+     * @param msg the message string to be logged\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void trace(final String msg) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log a message at the TRACE level according to the specified format\n+     * and argument. It is currently not supported.\n+     * <p/>\n+     * <p>This form avoids superfluous object creation when the logger\n+     * is disabled for the TRACE level. </p>\n+     *\n+     * @param format the format string\n+     * @param arg the argument\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void trace(final String format, final Object arg) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log a message at the TRACE level according to the specified format\n+     * and arguments. It is currently not supported.\n+     * <p/>\n+     * <p>This form avoids superfluous object creation when the logger\n+     * is disabled for the TRACE level. </p>\n+     *\n+     * @param format the format string\n+     * @param arg1 the first argument\n+     * @param arg2 the second argument\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void trace(final String format, final Object arg1, final Object arg2) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log a message at the TRACE level according to the specified format\n+     * and arguments. It is currently not supported.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the TRACE level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for TRACE. The variants taking {@link #trace(String, Object) one} and\n+     * {@link #trace(String, Object, Object) two} arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param arguments a list of 3 or more arguments\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void trace(final String format, final Object... arguments) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log an exception (throwable) at the TRACE level with an\n+     * accompanying message. It is currently not supported.\n+     *\n+     * @param msg the message accompanying the exception\n+     * @param t the exception (throwable) to log\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void trace(final String msg, final Throwable t) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Is the logger instance enabled for the DEBUG level? It is currently not supported.\n+     *\n+     * @return True if this Logger is enabled for the DEBUG level,\n+     * false otherwise.\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public boolean isDebugEnabled() {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cc5822ffbb08042d165667437e5a72e01ad71c3"}, "originalPosition": 293}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk3OTA4NQ==", "bodyText": "This should be supported too as we have support for debug overload with formatted strings.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r364979085", "createdAt": "2020-01-09T21:55:58Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLogger.java", "diffHunk": "@@ -0,0 +1,559 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import com.azure.core.util.logging.LogLevel;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MarkerIgnoringBase;\n+import org.slf4j.helpers.MessageFormatter;\n+\n+/**\n+ * This class is an internal implementation of slf4j logger.\n+ */\n+public final class DefaultLogger extends MarkerIgnoringBase {\n+    private static final long serialVersionUID = -144261058636441630L;\n+\n+    private String classPath;\n+    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\n+\n+    /**\n+     * Construct DefaultLogger for the given class.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public DefaultLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Construct DefaultLogger for the given class name.\n+     *\n+     * @param className Class name creating the logger.\n+     * @throws RuntimeException it is an error.\n+     */\n+    public DefaultLogger(String className) {\n+        try {\n+            this.classPath = Class.forName(className).getCanonicalName();\n+        } catch (ClassNotFoundException e) {\n+            this.classPath = className;\n+        }\n+    }\n+\n+    /**\n+     * Log a message at the DEBUG level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the DEBUG level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for DEBUG. The variants taking\n+     * {@link #debug(String, Object) one} and {@link #debug(String, Object, Object) two}\n+     * arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param argArray a list of arbitrary arguments\n+     */\n+    public void debug(String format, Object... argArray) {\n+        formatAndLog(LogLevel.VERBOSE, format, argArray);\n+    }\n+\n+    /**\n+     * Log a message at the INFO level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the INFO level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for INFO. The variants taking\n+     * {@link #info(String, Object) one} and {@link #info(String, Object, Object) two}\n+     * arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param argArray a list of arbitrary arguments\n+     */\n+    public void info(String format, Object... argArray) {\n+        formatAndLog(LogLevel.INFORMATIONAL, format, argArray);\n+    }\n+\n+    /**\n+     * Log a message at the WARN level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the WARN level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for WARN. The variants taking\n+     * {@link #warn(String, Object) one} and {@link #warn(String, Object, Object) two}\n+     * arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param argArray a list of arbitrary arguments\n+     */\n+    public void warn(String format, Object... argArray) {\n+        formatAndLog(LogLevel.WARNING, format, argArray);\n+    }\n+\n+    /**\n+     * Log a message at the ERROR level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the ERROR level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for ERROR. The variants taking\n+     * {@link #error(String, Object) one} and {@link #error(String, Object, Object) two}\n+     * arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param argArray a list of arbitrary arguments\n+     */\n+    public void error(String format, Object... argArray) {\n+        formatAndLog(LogLevel.ERROR, format, argArray);\n+    }\n+\n+    /**\n+     * For formatted messages, first substitute arguments and then log.\n+     *\n+     * @param level The level to log.\n+     * @param format The log message format.\n+     * @param arguments a list of arbitrary arguments taken in by format.\n+     */\n+    private void formatAndLog(LogLevel level, String format, Object... arguments) {\n+        FormattingTuple tp = MessageFormatter.arrayFormat(format, arguments);\n+        log(level, tp.getMessage(), tp.getThrowable());\n+    }\n+\n+    /**\n+     * This is our internal implementation for logging regular\n+     * (non-parameterized) log messages.\n+     *\n+     * @param level\n+     *            One of the LOG_LEVEL_XXX constants defining the log level\n+     * @param message\n+     *            The message itself\n+     * @param t\n+     *            The exception whose stack trace should be logged\n+     */\n+    private void log(LogLevel level, String message, Throwable t) {\n+        StringBuilder buf = new StringBuilder(32);\n+\n+        // Append date-time.\n+        buf.append(getFormattedDate());\n+        buf.append(' ');\n+\n+        // Append current thread name if so configured\n+        buf.append('[');\n+        buf.append(Thread.currentThread().getName());\n+        buf.append(\"] \");\n+\n+\n+        // Append a readable representation of the log level\n+        buf.append('[');\n+        buf.append(level.name());\n+        buf.append(']');\n+        buf.append(' ');\n+\n+        // Append the name of the log instance if so configured\n+        buf.append(classPath).append(\" - \");\n+\n+        // Append the message\n+        buf.append(message);\n+\n+        write(buf, t);\n+    }\n+\n+    private String getFormattedDate() {\n+        LocalDateTime now = LocalDateTime.now();\n+        return DATE_FORMAT.format(now);\n+    }\n+\n+    void write(StringBuilder buf, Throwable t) {\n+        if (t != null) {\n+            StringWriter sw = new StringWriter();\n+            PrintWriter pw = new PrintWriter(sw);\n+            t.printStackTrace(pw);\n+            buf.append(sw.toString());\n+        }\n+        System.out.println(buf.toString());\n+    }\n+\n+    /**\n+     * Return the name of this <code>Logger</code> instance. It is currently not supported.\n+     *\n+     * @return name of this logger instance\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public String getName() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Is the logger instance enabled for the TRACE level? It is currently not supported.\n+     *\n+     * @return True if this Logger is enabled for the TRACE level,\n+     * false otherwise.\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public boolean isTraceEnabled() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log a message at the TRACE level. It is currently not supported.\n+     *\n+     * @param msg the message string to be logged\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void trace(final String msg) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log a message at the TRACE level according to the specified format\n+     * and argument. It is currently not supported.\n+     * <p/>\n+     * <p>This form avoids superfluous object creation when the logger\n+     * is disabled for the TRACE level. </p>\n+     *\n+     * @param format the format string\n+     * @param arg the argument\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void trace(final String format, final Object arg) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log a message at the TRACE level according to the specified format\n+     * and arguments. It is currently not supported.\n+     * <p/>\n+     * <p>This form avoids superfluous object creation when the logger\n+     * is disabled for the TRACE level. </p>\n+     *\n+     * @param format the format string\n+     * @param arg1 the first argument\n+     * @param arg2 the second argument\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void trace(final String format, final Object arg1, final Object arg2) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log a message at the TRACE level according to the specified format\n+     * and arguments. It is currently not supported.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the TRACE level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for TRACE. The variants taking {@link #trace(String, Object) one} and\n+     * {@link #trace(String, Object, Object) two} arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param arguments a list of 3 or more arguments\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void trace(final String format, final Object... arguments) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log an exception (throwable) at the TRACE level with an\n+     * accompanying message. It is currently not supported.\n+     *\n+     * @param msg the message accompanying the exception\n+     * @param t the exception (throwable) to log\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void trace(final String msg, final Throwable t) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Is the logger instance enabled for the DEBUG level? It is currently not supported.\n+     *\n+     * @return True if this Logger is enabled for the DEBUG level,\n+     * false otherwise.\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public boolean isDebugEnabled() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log a message at the DEBUG level. It is currently not supported.\n+     *\n+     * @param msg the message string to be logged\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void debug(final String msg) {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cc5822ffbb08042d165667437e5a72e01ad71c3"}, "originalPosition": 304}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk3OTI0OQ==", "bodyText": "This should be supported. We should return the name of this logger instance.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r364979249", "createdAt": "2020-01-09T21:56:23Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLogger.java", "diffHunk": "@@ -0,0 +1,559 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import com.azure.core.util.logging.LogLevel;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MarkerIgnoringBase;\n+import org.slf4j.helpers.MessageFormatter;\n+\n+/**\n+ * This class is an internal implementation of slf4j logger.\n+ */\n+public final class DefaultLogger extends MarkerIgnoringBase {\n+    private static final long serialVersionUID = -144261058636441630L;\n+\n+    private String classPath;\n+    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\n+\n+    /**\n+     * Construct DefaultLogger for the given class.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public DefaultLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Construct DefaultLogger for the given class name.\n+     *\n+     * @param className Class name creating the logger.\n+     * @throws RuntimeException it is an error.\n+     */\n+    public DefaultLogger(String className) {\n+        try {\n+            this.classPath = Class.forName(className).getCanonicalName();\n+        } catch (ClassNotFoundException e) {\n+            this.classPath = className;\n+        }\n+    }\n+\n+    /**\n+     * Log a message at the DEBUG level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the DEBUG level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for DEBUG. The variants taking\n+     * {@link #debug(String, Object) one} and {@link #debug(String, Object, Object) two}\n+     * arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param argArray a list of arbitrary arguments\n+     */\n+    public void debug(String format, Object... argArray) {\n+        formatAndLog(LogLevel.VERBOSE, format, argArray);\n+    }\n+\n+    /**\n+     * Log a message at the INFO level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the INFO level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for INFO. The variants taking\n+     * {@link #info(String, Object) one} and {@link #info(String, Object, Object) two}\n+     * arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param argArray a list of arbitrary arguments\n+     */\n+    public void info(String format, Object... argArray) {\n+        formatAndLog(LogLevel.INFORMATIONAL, format, argArray);\n+    }\n+\n+    /**\n+     * Log a message at the WARN level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the WARN level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for WARN. The variants taking\n+     * {@link #warn(String, Object) one} and {@link #warn(String, Object, Object) two}\n+     * arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param argArray a list of arbitrary arguments\n+     */\n+    public void warn(String format, Object... argArray) {\n+        formatAndLog(LogLevel.WARNING, format, argArray);\n+    }\n+\n+    /**\n+     * Log a message at the ERROR level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the ERROR level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for ERROR. The variants taking\n+     * {@link #error(String, Object) one} and {@link #error(String, Object, Object) two}\n+     * arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param argArray a list of arbitrary arguments\n+     */\n+    public void error(String format, Object... argArray) {\n+        formatAndLog(LogLevel.ERROR, format, argArray);\n+    }\n+\n+    /**\n+     * For formatted messages, first substitute arguments and then log.\n+     *\n+     * @param level The level to log.\n+     * @param format The log message format.\n+     * @param arguments a list of arbitrary arguments taken in by format.\n+     */\n+    private void formatAndLog(LogLevel level, String format, Object... arguments) {\n+        FormattingTuple tp = MessageFormatter.arrayFormat(format, arguments);\n+        log(level, tp.getMessage(), tp.getThrowable());\n+    }\n+\n+    /**\n+     * This is our internal implementation for logging regular\n+     * (non-parameterized) log messages.\n+     *\n+     * @param level\n+     *            One of the LOG_LEVEL_XXX constants defining the log level\n+     * @param message\n+     *            The message itself\n+     * @param t\n+     *            The exception whose stack trace should be logged\n+     */\n+    private void log(LogLevel level, String message, Throwable t) {\n+        StringBuilder buf = new StringBuilder(32);\n+\n+        // Append date-time.\n+        buf.append(getFormattedDate());\n+        buf.append(' ');\n+\n+        // Append current thread name if so configured\n+        buf.append('[');\n+        buf.append(Thread.currentThread().getName());\n+        buf.append(\"] \");\n+\n+\n+        // Append a readable representation of the log level\n+        buf.append('[');\n+        buf.append(level.name());\n+        buf.append(']');\n+        buf.append(' ');\n+\n+        // Append the name of the log instance if so configured\n+        buf.append(classPath).append(\" - \");\n+\n+        // Append the message\n+        buf.append(message);\n+\n+        write(buf, t);\n+    }\n+\n+    private String getFormattedDate() {\n+        LocalDateTime now = LocalDateTime.now();\n+        return DATE_FORMAT.format(now);\n+    }\n+\n+    void write(StringBuilder buf, Throwable t) {\n+        if (t != null) {\n+            StringWriter sw = new StringWriter();\n+            PrintWriter pw = new PrintWriter(sw);\n+            t.printStackTrace(pw);\n+            buf.append(sw.toString());\n+        }\n+        System.out.println(buf.toString());\n+    }\n+\n+    /**\n+     * Return the name of this <code>Logger</code> instance. It is currently not supported.\n+     *\n+     * @return name of this logger instance\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public String getName() {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cc5822ffbb08042d165667437e5a72e01ad71c3"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk3OTcyMQ==", "bodyText": "All is*Enabled() methods should be supported.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r364979721", "createdAt": "2020-01-09T21:57:29Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLogger.java", "diffHunk": "@@ -0,0 +1,559 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import com.azure.core.util.logging.LogLevel;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MarkerIgnoringBase;\n+import org.slf4j.helpers.MessageFormatter;\n+\n+/**\n+ * This class is an internal implementation of slf4j logger.\n+ */\n+public final class DefaultLogger extends MarkerIgnoringBase {\n+    private static final long serialVersionUID = -144261058636441630L;\n+\n+    private String classPath;\n+    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\n+\n+    /**\n+     * Construct DefaultLogger for the given class.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public DefaultLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Construct DefaultLogger for the given class name.\n+     *\n+     * @param className Class name creating the logger.\n+     * @throws RuntimeException it is an error.\n+     */\n+    public DefaultLogger(String className) {\n+        try {\n+            this.classPath = Class.forName(className).getCanonicalName();\n+        } catch (ClassNotFoundException e) {\n+            this.classPath = className;\n+        }\n+    }\n+\n+    /**\n+     * Log a message at the DEBUG level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the DEBUG level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for DEBUG. The variants taking\n+     * {@link #debug(String, Object) one} and {@link #debug(String, Object, Object) two}\n+     * arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param argArray a list of arbitrary arguments\n+     */\n+    public void debug(String format, Object... argArray) {\n+        formatAndLog(LogLevel.VERBOSE, format, argArray);\n+    }\n+\n+    /**\n+     * Log a message at the INFO level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the INFO level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for INFO. The variants taking\n+     * {@link #info(String, Object) one} and {@link #info(String, Object, Object) two}\n+     * arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param argArray a list of arbitrary arguments\n+     */\n+    public void info(String format, Object... argArray) {\n+        formatAndLog(LogLevel.INFORMATIONAL, format, argArray);\n+    }\n+\n+    /**\n+     * Log a message at the WARN level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the WARN level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for WARN. The variants taking\n+     * {@link #warn(String, Object) one} and {@link #warn(String, Object, Object) two}\n+     * arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param argArray a list of arbitrary arguments\n+     */\n+    public void warn(String format, Object... argArray) {\n+        formatAndLog(LogLevel.WARNING, format, argArray);\n+    }\n+\n+    /**\n+     * Log a message at the ERROR level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the ERROR level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for ERROR. The variants taking\n+     * {@link #error(String, Object) one} and {@link #error(String, Object, Object) two}\n+     * arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param argArray a list of arbitrary arguments\n+     */\n+    public void error(String format, Object... argArray) {\n+        formatAndLog(LogLevel.ERROR, format, argArray);\n+    }\n+\n+    /**\n+     * For formatted messages, first substitute arguments and then log.\n+     *\n+     * @param level The level to log.\n+     * @param format The log message format.\n+     * @param arguments a list of arbitrary arguments taken in by format.\n+     */\n+    private void formatAndLog(LogLevel level, String format, Object... arguments) {\n+        FormattingTuple tp = MessageFormatter.arrayFormat(format, arguments);\n+        log(level, tp.getMessage(), tp.getThrowable());\n+    }\n+\n+    /**\n+     * This is our internal implementation for logging regular\n+     * (non-parameterized) log messages.\n+     *\n+     * @param level\n+     *            One of the LOG_LEVEL_XXX constants defining the log level\n+     * @param message\n+     *            The message itself\n+     * @param t\n+     *            The exception whose stack trace should be logged\n+     */\n+    private void log(LogLevel level, String message, Throwable t) {\n+        StringBuilder buf = new StringBuilder(32);\n+\n+        // Append date-time.\n+        buf.append(getFormattedDate());\n+        buf.append(' ');\n+\n+        // Append current thread name if so configured\n+        buf.append('[');\n+        buf.append(Thread.currentThread().getName());\n+        buf.append(\"] \");\n+\n+\n+        // Append a readable representation of the log level\n+        buf.append('[');\n+        buf.append(level.name());\n+        buf.append(']');\n+        buf.append(' ');\n+\n+        // Append the name of the log instance if so configured\n+        buf.append(classPath).append(\" - \");\n+\n+        // Append the message\n+        buf.append(message);\n+\n+        write(buf, t);\n+    }\n+\n+    private String getFormattedDate() {\n+        LocalDateTime now = LocalDateTime.now();\n+        return DATE_FORMAT.format(now);\n+    }\n+\n+    void write(StringBuilder buf, Throwable t) {\n+        if (t != null) {\n+            StringWriter sw = new StringWriter();\n+            PrintWriter pw = new PrintWriter(sw);\n+            t.printStackTrace(pw);\n+            buf.append(sw.toString());\n+        }\n+        System.out.println(buf.toString());\n+    }\n+\n+    /**\n+     * Return the name of this <code>Logger</code> instance. It is currently not supported.\n+     *\n+     * @return name of this logger instance\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public String getName() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Is the logger instance enabled for the TRACE level? It is currently not supported.\n+     *\n+     * @return True if this Logger is enabled for the TRACE level,\n+     * false otherwise.\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public boolean isTraceEnabled() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log a message at the TRACE level. It is currently not supported.\n+     *\n+     * @param msg the message string to be logged\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void trace(final String msg) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log a message at the TRACE level according to the specified format\n+     * and argument. It is currently not supported.\n+     * <p/>\n+     * <p>This form avoids superfluous object creation when the logger\n+     * is disabled for the TRACE level. </p>\n+     *\n+     * @param format the format string\n+     * @param arg the argument\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void trace(final String format, final Object arg) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log a message at the TRACE level according to the specified format\n+     * and arguments. It is currently not supported.\n+     * <p/>\n+     * <p>This form avoids superfluous object creation when the logger\n+     * is disabled for the TRACE level. </p>\n+     *\n+     * @param format the format string\n+     * @param arg1 the first argument\n+     * @param arg2 the second argument\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void trace(final String format, final Object arg1, final Object arg2) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log a message at the TRACE level according to the specified format\n+     * and arguments. It is currently not supported.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the TRACE level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for TRACE. The variants taking {@link #trace(String, Object) one} and\n+     * {@link #trace(String, Object, Object) two} arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param arguments a list of 3 or more arguments\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void trace(final String format, final Object... arguments) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log an exception (throwable) at the TRACE level with an\n+     * accompanying message. It is currently not supported.\n+     *\n+     * @param msg the message accompanying the exception\n+     * @param t the exception (throwable) to log\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void trace(final String msg, final Throwable t) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Is the logger instance enabled for the DEBUG level? It is currently not supported.\n+     *\n+     * @return True if this Logger is enabled for the DEBUG level,\n+     * false otherwise.\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public boolean isDebugEnabled() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log a message at the DEBUG level. It is currently not supported.\n+     *\n+     * @param msg the message string to be logged\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void debug(final String msg) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log a message at the DEBUG level according to the specified format\n+     * and argument. It is currently not supported.\n+     * <p/>\n+     * <p>This form avoids superfluous object creation when the logger\n+     * is disabled for the DEBUG level. </p>\n+     *\n+     * @param format the format string\n+     * @param arg the argument\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void debug(final String format, final Object arg) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log a message at the DEBUG level according to the specified format\n+     * and arguments. It is currently not supported.\n+     * <p/>\n+     * <p>This form avoids superfluous object creation when the logger\n+     * is disabled for the DEBUG level. </p>\n+     *\n+     * @param format the format string\n+     * @param arg1 the first argument\n+     * @param arg2 the second argument\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void debug(final String format, final Object arg1, final Object arg2) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log an exception (throwable) at the DEBUG level with an\n+     * accompanying message. It is currently not supported.\n+     *\n+     * @param msg the message accompanying the exception\n+     * @param t the exception (throwable) to log\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void debug(final String msg, final Throwable t) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Is the logger instance enabled for the INFO level? It is currently not supported.\n+     *\n+     * @return True if this Logger is enabled for the INFO level,\n+     * false otherwise.\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public boolean isInfoEnabled() {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cc5822ffbb08042d165667437e5a72e01ad71c3"}, "originalPosition": 362}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk4MjA5MQ==", "bodyText": "These should be implemented too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r364982091", "createdAt": "2020-01-09T22:03:40Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLogger.java", "diffHunk": "@@ -0,0 +1,559 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import com.azure.core.util.logging.LogLevel;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MarkerIgnoringBase;\n+import org.slf4j.helpers.MessageFormatter;\n+\n+/**\n+ * This class is an internal implementation of slf4j logger.\n+ */\n+public final class DefaultLogger extends MarkerIgnoringBase {\n+    private static final long serialVersionUID = -144261058636441630L;\n+\n+    private String classPath;\n+    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\n+\n+    /**\n+     * Construct DefaultLogger for the given class.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public DefaultLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Construct DefaultLogger for the given class name.\n+     *\n+     * @param className Class name creating the logger.\n+     * @throws RuntimeException it is an error.\n+     */\n+    public DefaultLogger(String className) {\n+        try {\n+            this.classPath = Class.forName(className).getCanonicalName();\n+        } catch (ClassNotFoundException e) {\n+            this.classPath = className;\n+        }\n+    }\n+\n+    /**\n+     * Log a message at the DEBUG level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the DEBUG level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for DEBUG. The variants taking\n+     * {@link #debug(String, Object) one} and {@link #debug(String, Object, Object) two}\n+     * arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param argArray a list of arbitrary arguments\n+     */\n+    public void debug(String format, Object... argArray) {\n+        formatAndLog(LogLevel.VERBOSE, format, argArray);\n+    }\n+\n+    /**\n+     * Log a message at the INFO level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the INFO level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for INFO. The variants taking\n+     * {@link #info(String, Object) one} and {@link #info(String, Object, Object) two}\n+     * arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param argArray a list of arbitrary arguments\n+     */\n+    public void info(String format, Object... argArray) {\n+        formatAndLog(LogLevel.INFORMATIONAL, format, argArray);\n+    }\n+\n+    /**\n+     * Log a message at the WARN level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the WARN level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for WARN. The variants taking\n+     * {@link #warn(String, Object) one} and {@link #warn(String, Object, Object) two}\n+     * arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param argArray a list of arbitrary arguments\n+     */\n+    public void warn(String format, Object... argArray) {\n+        formatAndLog(LogLevel.WARNING, format, argArray);\n+    }\n+\n+    /**\n+     * Log a message at the ERROR level according to the specified format\n+     * and arguments.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the ERROR level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for ERROR. The variants taking\n+     * {@link #error(String, Object) one} and {@link #error(String, Object, Object) two}\n+     * arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param argArray a list of arbitrary arguments\n+     */\n+    public void error(String format, Object... argArray) {\n+        formatAndLog(LogLevel.ERROR, format, argArray);\n+    }\n+\n+    /**\n+     * For formatted messages, first substitute arguments and then log.\n+     *\n+     * @param level The level to log.\n+     * @param format The log message format.\n+     * @param arguments a list of arbitrary arguments taken in by format.\n+     */\n+    private void formatAndLog(LogLevel level, String format, Object... arguments) {\n+        FormattingTuple tp = MessageFormatter.arrayFormat(format, arguments);\n+        log(level, tp.getMessage(), tp.getThrowable());\n+    }\n+\n+    /**\n+     * This is our internal implementation for logging regular\n+     * (non-parameterized) log messages.\n+     *\n+     * @param level\n+     *            One of the LOG_LEVEL_XXX constants defining the log level\n+     * @param message\n+     *            The message itself\n+     * @param t\n+     *            The exception whose stack trace should be logged\n+     */\n+    private void log(LogLevel level, String message, Throwable t) {\n+        StringBuilder buf = new StringBuilder(32);\n+\n+        // Append date-time.\n+        buf.append(getFormattedDate());\n+        buf.append(' ');\n+\n+        // Append current thread name if so configured\n+        buf.append('[');\n+        buf.append(Thread.currentThread().getName());\n+        buf.append(\"] \");\n+\n+\n+        // Append a readable representation of the log level\n+        buf.append('[');\n+        buf.append(level.name());\n+        buf.append(']');\n+        buf.append(' ');\n+\n+        // Append the name of the log instance if so configured\n+        buf.append(classPath).append(\" - \");\n+\n+        // Append the message\n+        buf.append(message);\n+\n+        write(buf, t);\n+    }\n+\n+    private String getFormattedDate() {\n+        LocalDateTime now = LocalDateTime.now();\n+        return DATE_FORMAT.format(now);\n+    }\n+\n+    void write(StringBuilder buf, Throwable t) {\n+        if (t != null) {\n+            StringWriter sw = new StringWriter();\n+            PrintWriter pw = new PrintWriter(sw);\n+            t.printStackTrace(pw);\n+            buf.append(sw.toString());\n+        }\n+        System.out.println(buf.toString());\n+    }\n+\n+    /**\n+     * Return the name of this <code>Logger</code> instance. It is currently not supported.\n+     *\n+     * @return name of this logger instance\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public String getName() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Is the logger instance enabled for the TRACE level? It is currently not supported.\n+     *\n+     * @return True if this Logger is enabled for the TRACE level,\n+     * false otherwise.\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public boolean isTraceEnabled() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log a message at the TRACE level. It is currently not supported.\n+     *\n+     * @param msg the message string to be logged\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void trace(final String msg) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log a message at the TRACE level according to the specified format\n+     * and argument. It is currently not supported.\n+     * <p/>\n+     * <p>This form avoids superfluous object creation when the logger\n+     * is disabled for the TRACE level. </p>\n+     *\n+     * @param format the format string\n+     * @param arg the argument\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void trace(final String format, final Object arg) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log a message at the TRACE level according to the specified format\n+     * and arguments. It is currently not supported.\n+     * <p/>\n+     * <p>This form avoids superfluous object creation when the logger\n+     * is disabled for the TRACE level. </p>\n+     *\n+     * @param format the format string\n+     * @param arg1 the first argument\n+     * @param arg2 the second argument\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void trace(final String format, final Object arg1, final Object arg2) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log a message at the TRACE level according to the specified format\n+     * and arguments. It is currently not supported.\n+     * <p/>\n+     * <p>This form avoids superfluous string concatenation when the logger\n+     * is disabled for the TRACE level. However, this variant incurs the hidden\n+     * (and relatively small) cost of creating an <code>Object[]</code> before invoking the method,\n+     * even if this logger is disabled for TRACE. The variants taking {@link #trace(String, Object) one} and\n+     * {@link #trace(String, Object, Object) two} arguments exist solely in order to avoid this hidden cost.</p>\n+     *\n+     * @param format the format string\n+     * @param arguments a list of 3 or more arguments\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void trace(final String format, final Object... arguments) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log an exception (throwable) at the TRACE level with an\n+     * accompanying message. It is currently not supported.\n+     *\n+     * @param msg the message accompanying the exception\n+     * @param t the exception (throwable) to log\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void trace(final String msg, final Throwable t) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Is the logger instance enabled for the DEBUG level? It is currently not supported.\n+     *\n+     * @return True if this Logger is enabled for the DEBUG level,\n+     * false otherwise.\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public boolean isDebugEnabled() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log a message at the DEBUG level. It is currently not supported.\n+     *\n+     * @param msg the message string to be logged\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void debug(final String msg) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log a message at the DEBUG level according to the specified format\n+     * and argument. It is currently not supported.\n+     * <p/>\n+     * <p>This form avoids superfluous object creation when the logger\n+     * is disabled for the DEBUG level. </p>\n+     *\n+     * @param format the format string\n+     * @param arg the argument\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void debug(final String format, final Object arg) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log a message at the DEBUG level according to the specified format\n+     * and arguments. It is currently not supported.\n+     * <p/>\n+     * <p>This form avoids superfluous object creation when the logger\n+     * is disabled for the DEBUG level. </p>\n+     *\n+     * @param format the format string\n+     * @param arg1 the first argument\n+     * @param arg2 the second argument\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void debug(final String format, final Object arg1, final Object arg2) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log an exception (throwable) at the DEBUG level with an\n+     * accompanying message. It is currently not supported.\n+     *\n+     * @param msg the message accompanying the exception\n+     * @param t the exception (throwable) to log\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void debug(final String msg, final Throwable t) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Is the logger instance enabled for the INFO level? It is currently not supported.\n+     *\n+     * @return True if this Logger is enabled for the INFO level,\n+     * false otherwise.\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public boolean isInfoEnabled() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Log a message at the INFO level. It is currently not supported.\n+     *\n+     * @param msg the message string to be logged\n+     * @throws UnsupportedOperationException It is currently not supported.\n+     */\n+    @Override\n+    public void info(final String msg) {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cc5822ffbb08042d165667437e5a72e01ad71c3"}, "originalPosition": 373}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwOTE4ODg4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#pullrequestreview-340918888", "createdAt": "2020-01-10T01:55:48Z", "commit": {"oid": "3931f3629d26acc965e5903180dd57055645fa67"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMTo1NTo0OFrOFcIc4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMTo1NTo0OFrOFcIc4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA0MjkxMw==", "bodyText": "Use try-with-resources to ensure the resource is always closed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r365042913", "createdAt": "2020-01-10T01:55:48Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLogger.java", "diffHunk": "@@ -0,0 +1,367 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import com.azure.core.util.logging.LogLevel;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MarkerIgnoringBase;\n+import org.slf4j.helpers.MessageFormatter;\n+\n+/**\n+ * This class is an internal implementation of slf4j logger.\n+ */\n+public final class DefaultLogger extends MarkerIgnoringBase {\n+    private static final long serialVersionUID = -144261058636441630L;\n+\n+    private String classPath;\n+    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\n+\n+    // The template forms the log message in a format:\n+    // YYYY-MM-DD HH:MM [thread] [level] classpath - message\n+    // E.g: 2020-01-09 12:35 [main] [WARNING] com.azure.core.DefaultLogger - This is my log message.\n+    private static final String MESSAGE_TEMPLATE = \"%s [%s] [%s] %s - %s\";\n+\n+    /**\n+     * Construct DefaultLogger for the given class.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public DefaultLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Construct DefaultLogger for the given class name.\n+     *\n+     * @param className Class name creating the logger.\n+     * @throws RuntimeException it is an error.\n+     */\n+    public DefaultLogger(String className) {\n+        try {\n+            this.classPath = Class.forName(className).getCanonicalName();\n+        } catch (ClassNotFoundException e) {\n+            this.classPath = className;\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * @param format The formattable message to log.\n+     * @param args Arguments for the message. If an exception is being logged, the last argument should be the\n+     *     {@link Throwable}.\n+     */\n+    @Override\n+    public void debug(String format, Object... args) {\n+        logFromFormat(LogLevel.VERBOSE, format, args);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * @param format The formattable message to log.\n+     * @param args Arguments for the message. If an exception is being logged, the last argument should be the\n+     *     {@link Throwable}.\n+     */\n+    @Override\n+    public void info(String format, Object... args) {\n+        logFromFormat(LogLevel.INFORMATIONAL, format, args);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * @param format The formattable message to log.\n+     * @param args Arguments for the message. If an exception is being logged, the last argument should be the\n+     *     {@link Throwable}.\n+     */\n+    @Override\n+    public void warn(String format, Object... args) {\n+        logFromFormat(LogLevel.WARNING, format, args);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * @param format The formattable message to log.\n+     * @param args Arguments for the message. If an exception is being logged, the last argument should be the\n+     *     {@link Throwable}.\n+     */\n+    @Override\n+    public void error(String format, Object... args) {\n+        logFromFormat(LogLevel.ERROR, format, args);\n+    }\n+\n+    /**\n+     * Format and write the message according to the {@code MESSAGE_TEMPLATE}.\n+     *\n+     * @param level The level to log.\n+     * @param format The log message format.\n+     * @param arguments a list of arbitrary arguments taken in by format.\n+     */\n+    private void logFromFormat(LogLevel level, String format, Object... arguments) {\n+        FormattingTuple tp = MessageFormatter.arrayFormat(format, arguments);\n+        log(level, tp.getMessage(), tp.getThrowable());\n+    }\n+\n+    /**\n+     * Format and write the message according to the {@code MESSAGE_TEMPLATE}.\n+     *\n+     * @param level log level\n+     * @param message The message itself\n+     * @param t The exception whose stack trace should be logged\n+     */\n+    private void log(LogLevel level, String message, Throwable t) {\n+        String dateTime = getFormattedDate();\n+        String threadName = Thread.currentThread().getName();\n+        String levelName = level.name();\n+        StringBuilder buf = new StringBuilder(32);\n+        buf.append(String.format(MESSAGE_TEMPLATE, dateTime, threadName, levelName, classPath, message));\n+        writeWithThrowable(buf, t);\n+    }\n+\n+    /**\n+     * Get the current time in Local time zone.\n+     *\n+     * @return The current time in {@code DATE_FORMAT}\n+     */\n+    private String getFormattedDate() {\n+        LocalDateTime now = LocalDateTime.now();\n+        return DATE_FORMAT.format(now);\n+    }\n+\n+    /**\n+     * Write the log message with throwable stack trace if any.\n+     *\n+     * @param buf Take the log messages.\n+     * @param t The exception whose stack trace should be logged\n+     */\n+    void writeWithThrowable(StringBuilder buf, Throwable t) {\n+        if (t != null) {\n+            StringWriter sw = new StringWriter();\n+            PrintWriter pw = new PrintWriter(sw);\n+            t.printStackTrace(pw);\n+            buf.append(sw.toString());\n+            pw.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3931f3629d26acc965e5903180dd57055645fa67"}, "originalPosition": 147}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae1e40a83adec2dd113fdb74c38db3d8fee8d43d", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ae1e40a83adec2dd113fdb74c38db3d8fee8d43d", "committedDate": "2020-01-10T17:30:00Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3931f3629d26acc965e5903180dd57055645fa67", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3931f3629d26acc965e5903180dd57055645fa67", "committedDate": "2020-01-10T00:44:26Z", "message": "close a stream"}, "afterCommit": {"oid": "ae1e40a83adec2dd113fdb74c38db3d8fee8d43d", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ae1e40a83adec2dd113fdb74c38db3d8fee8d43d", "committedDate": "2020-01-10T17:30:00Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMzI1MTQ1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#pullrequestreview-341325145", "createdAt": "2020-01-10T17:53:21Z", "commit": {"oid": "ae1e40a83adec2dd113fdb74c38db3d8fee8d43d"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNzo1MzoyMlrOFcbjFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNzo1NTozM1rOFcbmWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM1NTc5Nw==", "bodyText": "If we have the default logger implement the isDebugEnabled and other similar APIs there would be no need for isFromEnv nor would there need to be any different handling here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r365355797", "createdAt": "2020-01-10T17:53:22Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/logging/ClientLogger.java", "diffHunk": "@@ -235,39 +229,47 @@ private void performLogging(LogLevel logLevel, LogLevel environmentLogLevel, boo\n                 // Don't do anything, this state shouldn't be possible.\n                 break;\n         }\n+\n     }\n \n-    /*\n-     * Determines if the environment and logger support logging at the given log level.\n+    /**\n+     * Determines if the app or environment logger support logging at the given log level.\n      *\n      * @param logLevel Logging level for the log message.\n-     * @param environmentLoggingLevel Logging level the environment is set to support.\n      * @return Flag indicating if the environment and logger are configured to support logging at the given log level.\n      */\n-    private boolean canLogAtLevel(LogLevel logLevel, LogLevel environmentLoggingLevel) {\n-        // Do not log if logLevel is null is not set.\n-        if (logLevel == null) {\n-            return false;\n-        }\n+    public boolean canLogAtLevel(LogLevel logLevel) {\n+        LogLevel rootLogLevel = getConfiguredLogLevel();\n+        return canLogAtLevel(logLevel, rootLogLevel);\n+    }\n \n-        // Attempting to log at a level not supported by the environment.\n-        if (logLevel.getLogLevel() < environmentLoggingLevel.getLogLevel()) {\n-            return false;\n-        }\n+    private boolean canLogAtLevel(LogLevel logLevel, LogLevel allowedLogLevel) {\n+        // Attempting to log at a level not supported by the SLF4J configuration or env variable.\n+        return logLevel.getLogLevel() >= allowedLogLevel.getLogLevel();\n+    }\n \n-        // Determine if the logger configuration supports logging at the level.\n-        switch (logLevel) {\n-            case VERBOSE:\n-                return logger.isDebugEnabled();\n-            case INFORMATIONAL:\n-                return logger.isInfoEnabled();\n-            case WARNING:\n-                return logger.isWarnEnabled();\n-            case ERROR:\n-                return logger.isErrorEnabled();\n-            default:\n-                return false;\n+    /**\n+     * Checking the system log with the preference order of slf4j and environment variable.\n+     *\n+     * @return The log level.\n+     */\n+    private LogLevel getConfiguredLogLevel() {\n+        if (isFromEnv) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae1e40a83adec2dd113fdb74c38db3d8fee8d43d"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM1NjMxNw==", "bodyText": "The only reason the environment logging level was passed around was to handle the fact that there was a two tiered structure of SLF4J logging level and environment logging level, not that this is being merged a lot of the logic in this class and within HttpLoggingPolicy could be cleaned up.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r365356317", "createdAt": "2020-01-10T17:54:46Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/logging/ClientLogger.java", "diffHunk": "@@ -235,39 +229,47 @@ private void performLogging(LogLevel logLevel, LogLevel environmentLogLevel, boo\n                 // Don't do anything, this state shouldn't be possible.\n                 break;\n         }\n+\n     }\n \n-    /*\n-     * Determines if the environment and logger support logging at the given log level.\n+    /**\n+     * Determines if the app or environment logger support logging at the given log level.\n      *\n      * @param logLevel Logging level for the log message.\n-     * @param environmentLoggingLevel Logging level the environment is set to support.\n      * @return Flag indicating if the environment and logger are configured to support logging at the given log level.\n      */\n-    private boolean canLogAtLevel(LogLevel logLevel, LogLevel environmentLoggingLevel) {\n-        // Do not log if logLevel is null is not set.\n-        if (logLevel == null) {\n-            return false;\n-        }\n+    public boolean canLogAtLevel(LogLevel logLevel) {\n+        LogLevel rootLogLevel = getConfiguredLogLevel();\n+        return canLogAtLevel(logLevel, rootLogLevel);\n+    }\n \n-        // Attempting to log at a level not supported by the environment.\n-        if (logLevel.getLogLevel() < environmentLoggingLevel.getLogLevel()) {\n-            return false;\n-        }\n+    private boolean canLogAtLevel(LogLevel logLevel, LogLevel allowedLogLevel) {\n+        // Attempting to log at a level not supported by the SLF4J configuration or env variable.\n+        return logLevel.getLogLevel() >= allowedLogLevel.getLogLevel();\n+    }\n \n-        // Determine if the logger configuration supports logging at the level.\n-        switch (logLevel) {\n-            case VERBOSE:\n-                return logger.isDebugEnabled();\n-            case INFORMATIONAL:\n-                return logger.isInfoEnabled();\n-            case WARNING:\n-                return logger.isWarnEnabled();\n-            case ERROR:\n-                return logger.isErrorEnabled();\n-            default:\n-                return false;\n+    /**\n+     * Checking the system log with the preference order of slf4j and environment variable.\n+     *\n+     * @return The log level.\n+     */\n+    private LogLevel getConfiguredLogLevel() {\n+        if (isFromEnv) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM1NTc5Nw=="}, "originalCommit": {"oid": "ae1e40a83adec2dd113fdb74c38db3d8fee8d43d"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM1NjYzNA==", "bodyText": "If we log an error that doesn't have any vararg arguments this will throw an exception from what I understand.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r365356634", "createdAt": "2020-01-10T17:55:33Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLogger.java", "diffHunk": "@@ -0,0 +1,366 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import com.azure.core.util.logging.LogLevel;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MarkerIgnoringBase;\n+import org.slf4j.helpers.MessageFormatter;\n+\n+/**\n+ * This class is an internal implementation of slf4j logger.\n+ */\n+public final class DefaultLogger extends MarkerIgnoringBase {\n+    private static final long serialVersionUID = -144261058636441630L;\n+\n+    private String classPath;\n+    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\n+\n+    // The template forms the log message in a format:\n+    // YYYY-MM-DD HH:MM [thread] [level] classpath - message\n+    // E.g: 2020-01-09 12:35 [main] [WARNING] com.azure.core.DefaultLogger - This is my log message.\n+    private static final String MESSAGE_TEMPLATE = \"%s [%s] [%s] %s - %s\";\n+\n+    /**\n+     * Construct DefaultLogger for the given class.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public DefaultLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Construct DefaultLogger for the given class name.\n+     *\n+     * @param className Class name creating the logger.\n+     * @throws RuntimeException it is an error.\n+     */\n+    public DefaultLogger(String className) {\n+        try {\n+            this.classPath = Class.forName(className).getCanonicalName();\n+        } catch (ClassNotFoundException e) {\n+            this.classPath = className;\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * @param format The formattable message to log.\n+     * @param args Arguments for the message. If an exception is being logged, the last argument should be the\n+     *     {@link Throwable}.\n+     */\n+    @Override\n+    public void debug(String format, Object... args) {\n+        logFromFormat(LogLevel.VERBOSE, format, args);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * @param format The formattable message to log.\n+     * @param args Arguments for the message. If an exception is being logged, the last argument should be the\n+     *     {@link Throwable}.\n+     */\n+    @Override\n+    public void info(String format, Object... args) {\n+        logFromFormat(LogLevel.INFORMATIONAL, format, args);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * @param format The formattable message to log.\n+     * @param args Arguments for the message. If an exception is being logged, the last argument should be the\n+     *     {@link Throwable}.\n+     */\n+    @Override\n+    public void warn(String format, Object... args) {\n+        logFromFormat(LogLevel.WARNING, format, args);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * @param format The formattable message to log.\n+     * @param args Arguments for the message. If an exception is being logged, the last argument should be the\n+     *     {@link Throwable}.\n+     */\n+    @Override\n+    public void error(String format, Object... args) {\n+        logFromFormat(LogLevel.ERROR, format, args);\n+    }\n+\n+    /**\n+     * Format and write the message according to the {@code MESSAGE_TEMPLATE}.\n+     *\n+     * @param level The level to log.\n+     * @param format The log message format.\n+     * @param arguments a list of arbitrary arguments taken in by format.\n+     */\n+    private void logFromFormat(LogLevel level, String format, Object... arguments) {\n+        FormattingTuple tp = MessageFormatter.arrayFormat(format, arguments);\n+        log(level, tp.getMessage(), tp.getThrowable());\n+    }\n+\n+    /**\n+     * Format and write the message according to the {@code MESSAGE_TEMPLATE}.\n+     *\n+     * @param level log level\n+     * @param message The message itself\n+     * @param t The exception whose stack trace should be logged\n+     */\n+    private void log(LogLevel level, String message, Throwable t) {\n+        String dateTime = getFormattedDate();\n+        String threadName = Thread.currentThread().getName();\n+        String levelName = level.name();\n+        StringBuilder buf = new StringBuilder(32);\n+        buf.append(String.format(MESSAGE_TEMPLATE, dateTime, threadName, levelName, classPath, message));\n+        writeWithThrowable(buf, t);\n+    }\n+\n+    /**\n+     * Get the current time in Local time zone.\n+     *\n+     * @return The current time in {@code DATE_FORMAT}\n+     */\n+    private String getFormattedDate() {\n+        LocalDateTime now = LocalDateTime.now();\n+        return DATE_FORMAT.format(now);\n+    }\n+\n+    /**\n+     * Write the log message with throwable stack trace if any.\n+     *\n+     * @param buf Take the log messages.\n+     * @param t The exception whose stack trace should be logged\n+     */\n+    void writeWithThrowable(StringBuilder buf, Throwable t) {\n+        if (t != null) {\n+            StringWriter sw = new StringWriter();\n+            try (PrintWriter pw = new PrintWriter(sw)) {\n+                t.printStackTrace(pw);\n+                buf.append(sw.toString());\n+            }\n+        }\n+        System.out.println(buf.toString());\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String getName() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isTraceEnabled() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void trace(final String msg) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void trace(final String format, final Object arg) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void trace(final String format, final Object arg1, final Object arg2) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void trace(final String format, final Object... arguments) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void trace(final String msg, final Throwable t) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isDebugEnabled() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void debug(final String msg) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void debug(final String format, final Object arg) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void debug(final String format, final Object arg1, final Object arg2) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void debug(final String msg, final Throwable t) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isInfoEnabled() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void info(final String msg) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void info(final String format, final Object arg) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void info(final String format, final Object arg1, final Object arg2) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void info(final String msg, final Throwable t) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isWarnEnabled() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void warn(final String msg) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void warn(final String format, final Object arg) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void warn(final String format, final Object arg1, final Object arg2) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void warn(final String msg, final Throwable t) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isErrorEnabled() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void error(final String msg) {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae1e40a83adec2dd113fdb74c38db3d8fee8d43d"}, "originalPosition": 340}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd8b2be2b191421c862369779b31bd14124940a6", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cd8b2be2b191421c862369779b31bd14124940a6", "committedDate": "2020-01-10T22:33:17Z", "message": "Unified logger APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e484e10cf3f19cdec69923af52d09d8770c8f749", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e484e10cf3f19cdec69923af52d09d8770c8f749", "committedDate": "2020-01-10T23:12:49Z", "message": "Fixed failed tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75bde915b1138ef615bc56ddd5a8307b224545af", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/75bde915b1138ef615bc56ddd5a8307b224545af", "committedDate": "2020-01-10T23:24:20Z", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into addlogimpl"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNDgyMzAz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#pullrequestreview-341482303", "createdAt": "2020-01-11T00:08:56Z", "commit": {"oid": "e484e10cf3f19cdec69923af52d09d8770c8f749"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMDowODo1NlrOFci92g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMDoxNDoxMFrOFcjA6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3NzMzOA==", "bodyText": "This code is common for all is*Enabled() methods. You can extract this out to a method to reduce duplication.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r365477338", "createdAt": "2020-01-11T00:08:56Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLogger.java", "diffHunk": "@@ -0,0 +1,376 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.logging.LogLevel;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MarkerIgnoringBase;\n+import org.slf4j.helpers.MessageFormatter;\n+\n+/**\n+ * This class is an internal implementation of slf4j logger.\n+ */\n+public final class DefaultLogger extends MarkerIgnoringBase {\n+    private static final long serialVersionUID = -144261058636441630L;\n+\n+    private static final String AZURE_LOG_LEVEL = \"AZURE_LOG_LEVEL\";\n+    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\n+\n+    // The template forms the log message in a format:\n+    // YYYY-MM-DD HH:MM [thread] [level] classpath - message\n+    // E.g: 2020-01-09 12:35 [main] [WARNING] com.azure.core.DefaultLogger - This is my log message.\n+    private static final String MESSAGE_TEMPLATE = \"%s [%s] [%s] %s - %s\";\n+\n+    private String classPath;\n+\n+    /**\n+     * Construct DefaultLogger for the given class.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public DefaultLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Construct DefaultLogger for the given class name.\n+     *\n+     * @param className Class name creating the logger.\n+     * @throws RuntimeException it is an error.\n+     */\n+    public DefaultLogger(String className) {\n+        try {\n+            this.classPath = Class.forName(className).getCanonicalName();\n+        } catch (ClassNotFoundException e) {\n+            this.classPath = className;\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isDebugEnabled() {\n+        String logLevelStr = Configuration.getGlobalConfiguration().get(AZURE_LOG_LEVEL);\n+        LogLevel currentLogLevel = LogLevel.fromString(logLevelStr);\n+        return LogLevel.VERBOSE.getLogLevel() >= currentLogLevel.getLogLevel();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e484e10cf3f19cdec69923af52d09d8770c8f749"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3NzUwNQ==", "bodyText": "Combination of inheritdoc and @param docs don't work correctly. Just use @inheritDoc and skip @param docs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r365477505", "createdAt": "2020-01-11T00:10:05Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLogger.java", "diffHunk": "@@ -0,0 +1,376 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.logging.LogLevel;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MarkerIgnoringBase;\n+import org.slf4j.helpers.MessageFormatter;\n+\n+/**\n+ * This class is an internal implementation of slf4j logger.\n+ */\n+public final class DefaultLogger extends MarkerIgnoringBase {\n+    private static final long serialVersionUID = -144261058636441630L;\n+\n+    private static final String AZURE_LOG_LEVEL = \"AZURE_LOG_LEVEL\";\n+    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\n+\n+    // The template forms the log message in a format:\n+    // YYYY-MM-DD HH:MM [thread] [level] classpath - message\n+    // E.g: 2020-01-09 12:35 [main] [WARNING] com.azure.core.DefaultLogger - This is my log message.\n+    private static final String MESSAGE_TEMPLATE = \"%s [%s] [%s] %s - %s\";\n+\n+    private String classPath;\n+\n+    /**\n+     * Construct DefaultLogger for the given class.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public DefaultLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Construct DefaultLogger for the given class name.\n+     *\n+     * @param className Class name creating the logger.\n+     * @throws RuntimeException it is an error.\n+     */\n+    public DefaultLogger(String className) {\n+        try {\n+            this.classPath = Class.forName(className).getCanonicalName();\n+        } catch (ClassNotFoundException e) {\n+            this.classPath = className;\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isDebugEnabled() {\n+        String logLevelStr = Configuration.getGlobalConfiguration().get(AZURE_LOG_LEVEL);\n+        LogLevel currentLogLevel = LogLevel.fromString(logLevelStr);\n+        return LogLevel.VERBOSE.getLogLevel() >= currentLogLevel.getLogLevel();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void debug(String format, Object arg) {\n+        logFromFormat(LogLevel.VERBOSE, format, arg);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void debug(String format, Object... args) {\n+        logFromFormat(LogLevel.VERBOSE, format, args);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isInfoEnabled() {\n+        String logLevelStr = Configuration.getGlobalConfiguration().get(AZURE_LOG_LEVEL);\n+        LogLevel currentLogLevel = LogLevel.fromString(logLevelStr);\n+        return LogLevel.INFORMATIONAL.getLogLevel() >= currentLogLevel.getLogLevel();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void info(String format, Object arg) {\n+        logFromFormat(LogLevel.INFORMATIONAL, format, arg);\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void info(String format, Object... args) {\n+        logFromFormat(LogLevel.INFORMATIONAL, format, args);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isWarnEnabled() {\n+        String logLevelStr = Configuration.getGlobalConfiguration().get(AZURE_LOG_LEVEL);\n+        LogLevel currentLogLevel = LogLevel.fromString(logLevelStr);\n+        return LogLevel.WARNING.getLogLevel() >= currentLogLevel.getLogLevel();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void warn(String format, Object arg) {\n+        logFromFormat(LogLevel.WARNING, format, arg);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * @param format The formattable message to log.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e484e10cf3f19cdec69923af52d09d8770c8f749"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3Nzk0Mw==", "bodyText": "I don't think you need this anymore.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r365477943", "createdAt": "2020-01-11T00:12:53Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/logging/ClientLogger.java", "diffHunk": "@@ -36,6 +35,7 @@\n  */\n public class ClientLogger {\n     private final Logger logger;\n+    private final boolean isFromEnv;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e484e10cf3f19cdec69923af52d09d8770c8f749"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3ODEyMA==", "bodyText": "This null check is still required otherwise it will cause a NPE.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r365478120", "createdAt": "2020-01-11T00:14:10Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/logging/ClientLogger.java", "diffHunk": "@@ -235,27 +236,16 @@ private void performLogging(LogLevel logLevel, LogLevel environmentLogLevel, boo\n                 // Don't do anything, this state shouldn't be possible.\n                 break;\n         }\n+\n     }\n \n-    /*\n-     * Determines if the environment and logger support logging at the given log level.\n+    /**\n+     * Determines if the app or environment logger support logging at the given log level.\n      *\n      * @param logLevel Logging level for the log message.\n-     * @param environmentLoggingLevel Logging level the environment is set to support.\n      * @return Flag indicating if the environment and logger are configured to support logging at the given log level.\n      */\n-    private boolean canLogAtLevel(LogLevel logLevel, LogLevel environmentLoggingLevel) {\n-        // Do not log if logLevel is null is not set.\n-        if (logLevel == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e484e10cf3f19cdec69923af52d09d8770c8f749"}, "originalPosition": 184}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMDE0MTQx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#pullrequestreview-342014141", "createdAt": "2020-01-13T17:32:26Z", "commit": {"oid": "e484e10cf3f19cdec69923af52d09d8770c8f749"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNzozMjoyN1rOFc-t-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNzo0MTo1N1rOFc-_ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkzMjAyNQ==", "bodyText": "Could this method be removed and all the higher level methods just call into performLogging? This previously existed to abstract a few pieces of logic away from the public API methods which no longer exists based on the changes made in this PR.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r365932025", "createdAt": "2020-01-13T17:32:27Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/logging/ClientLogger.java", "diffHunk": "@@ -131,11 +143,7 @@ public void error(String format, Object... args) {\n      * @param args Arguments for the message, if an exception is being logged last argument is the throwable.\n      */\n     private void log(LogLevel logLevel, String format, Object... args) {\n-        LogLevel environmentLoggingLevel = getEnvironmentLoggingLevel();\n-\n-        if (canLogAtLevel(logLevel, environmentLoggingLevel)) {\n-            performLogging(logLevel, environmentLoggingLevel, false, format, args);\n-        }\n+        performLogging(logLevel, false, format, args);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e484e10cf3f19cdec69923af52d09d8770c8f749"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkzMjQ3Ng==", "bodyText": "Is this being used by anything other than the instantiation in the constructor? If not let's remove it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r365932476", "createdAt": "2020-01-13T17:33:25Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/logging/ClientLogger.java", "diffHunk": "@@ -36,6 +35,7 @@\n  */\n public class ClientLogger {\n     private final Logger logger;\n+    private final boolean isFromEnv;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e484e10cf3f19cdec69923af52d09d8770c8f749"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkzMzE5OA==", "bodyText": "Should this logic be abstracted into LoggingUtils or as a private static method on this class?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r365933198", "createdAt": "2020-01-13T17:35:02Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLogger.java", "diffHunk": "@@ -0,0 +1,376 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.logging.LogLevel;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MarkerIgnoringBase;\n+import org.slf4j.helpers.MessageFormatter;\n+\n+/**\n+ * This class is an internal implementation of slf4j logger.\n+ */\n+public final class DefaultLogger extends MarkerIgnoringBase {\n+    private static final long serialVersionUID = -144261058636441630L;\n+\n+    private static final String AZURE_LOG_LEVEL = \"AZURE_LOG_LEVEL\";\n+    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\n+\n+    // The template forms the log message in a format:\n+    // YYYY-MM-DD HH:MM [thread] [level] classpath - message\n+    // E.g: 2020-01-09 12:35 [main] [WARNING] com.azure.core.DefaultLogger - This is my log message.\n+    private static final String MESSAGE_TEMPLATE = \"%s [%s] [%s] %s - %s\";\n+\n+    private String classPath;\n+\n+    /**\n+     * Construct DefaultLogger for the given class.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public DefaultLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Construct DefaultLogger for the given class name.\n+     *\n+     * @param className Class name creating the logger.\n+     * @throws RuntimeException it is an error.\n+     */\n+    public DefaultLogger(String className) {\n+        try {\n+            this.classPath = Class.forName(className).getCanonicalName();\n+        } catch (ClassNotFoundException e) {\n+            this.classPath = className;\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isDebugEnabled() {\n+        String logLevelStr = Configuration.getGlobalConfiguration().get(AZURE_LOG_LEVEL);\n+        LogLevel currentLogLevel = LogLevel.fromString(logLevelStr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e484e10cf3f19cdec69923af52d09d8770c8f749"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkzNDIxMQ==", "bodyText": "Any reason to instantiate the StringBuilder with an internal capacity of 32? Instead could it be instantiated with a capacity large enough to hold the initial string being written to it?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r365934211", "createdAt": "2020-01-13T17:37:01Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLogger.java", "diffHunk": "@@ -0,0 +1,376 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.logging.LogLevel;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MarkerIgnoringBase;\n+import org.slf4j.helpers.MessageFormatter;\n+\n+/**\n+ * This class is an internal implementation of slf4j logger.\n+ */\n+public final class DefaultLogger extends MarkerIgnoringBase {\n+    private static final long serialVersionUID = -144261058636441630L;\n+\n+    private static final String AZURE_LOG_LEVEL = \"AZURE_LOG_LEVEL\";\n+    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\n+\n+    // The template forms the log message in a format:\n+    // YYYY-MM-DD HH:MM [thread] [level] classpath - message\n+    // E.g: 2020-01-09 12:35 [main] [WARNING] com.azure.core.DefaultLogger - This is my log message.\n+    private static final String MESSAGE_TEMPLATE = \"%s [%s] [%s] %s - %s\";\n+\n+    private String classPath;\n+\n+    /**\n+     * Construct DefaultLogger for the given class.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public DefaultLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Construct DefaultLogger for the given class name.\n+     *\n+     * @param className Class name creating the logger.\n+     * @throws RuntimeException it is an error.\n+     */\n+    public DefaultLogger(String className) {\n+        try {\n+            this.classPath = Class.forName(className).getCanonicalName();\n+        } catch (ClassNotFoundException e) {\n+            this.classPath = className;\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isDebugEnabled() {\n+        String logLevelStr = Configuration.getGlobalConfiguration().get(AZURE_LOG_LEVEL);\n+        LogLevel currentLogLevel = LogLevel.fromString(logLevelStr);\n+        return LogLevel.VERBOSE.getLogLevel() >= currentLogLevel.getLogLevel();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void debug(String format, Object arg) {\n+        logFromFormat(LogLevel.VERBOSE, format, arg);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void debug(String format, Object... args) {\n+        logFromFormat(LogLevel.VERBOSE, format, args);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isInfoEnabled() {\n+        String logLevelStr = Configuration.getGlobalConfiguration().get(AZURE_LOG_LEVEL);\n+        LogLevel currentLogLevel = LogLevel.fromString(logLevelStr);\n+        return LogLevel.INFORMATIONAL.getLogLevel() >= currentLogLevel.getLogLevel();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void info(String format, Object arg) {\n+        logFromFormat(LogLevel.INFORMATIONAL, format, arg);\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void info(String format, Object... args) {\n+        logFromFormat(LogLevel.INFORMATIONAL, format, args);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isWarnEnabled() {\n+        String logLevelStr = Configuration.getGlobalConfiguration().get(AZURE_LOG_LEVEL);\n+        LogLevel currentLogLevel = LogLevel.fromString(logLevelStr);\n+        return LogLevel.WARNING.getLogLevel() >= currentLogLevel.getLogLevel();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void warn(String format, Object arg) {\n+        logFromFormat(LogLevel.WARNING, format, arg);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * @param format The formattable message to log.\n+     * @param args Arguments for the message. If an exception is being logged, the last argument should be the\n+     *     {@link Throwable}.\n+     */\n+    @Override\n+    public void warn(String format, Object... args) {\n+        logFromFormat(LogLevel.WARNING, format, args);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isErrorEnabled() {\n+        String logLevelStr = Configuration.getGlobalConfiguration().get(AZURE_LOG_LEVEL);\n+        LogLevel currentLogLevel = LogLevel.fromString(logLevelStr);\n+        return LogLevel.ERROR.getLogLevel() >= currentLogLevel.getLogLevel();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void error(String format, Object arg) {\n+        logFromFormat(LogLevel.ERROR, format, arg);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * @param format The formattable message to log.\n+     * @param args Arguments for the message. If an exception is being logged, the last argument should be the\n+     *     {@link Throwable}.\n+     */\n+    @Override\n+    public void error(String format, Object... args) {\n+        logFromFormat(LogLevel.ERROR, format, args);\n+    }\n+\n+    /**\n+     * Format and write the message according to the {@code MESSAGE_TEMPLATE}.\n+     *\n+     * @param level The level to log.\n+     * @param format The log message format.\n+     * @param arguments a list of arbitrary arguments taken in by format.\n+     */\n+    private void logFromFormat(LogLevel level, String format, Object... arguments) {\n+        FormattingTuple tp = MessageFormatter.arrayFormat(format, arguments);\n+        log(level, tp.getMessage(), tp.getThrowable());\n+    }\n+\n+    /**\n+     * Format and write the message according to the {@code MESSAGE_TEMPLATE}.\n+     *\n+     * @param level log level\n+     * @param message The message itself\n+     * @param t The exception whose stack trace should be logged\n+     */\n+    private void log(LogLevel level, String message, Throwable t) {\n+        String dateTime = getFormattedDate();\n+        String threadName = Thread.currentThread().getName();\n+        String levelName = level.name();\n+        StringBuilder buf = new StringBuilder(32);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e484e10cf3f19cdec69923af52d09d8770c8f749"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkzNTUxMw==", "bodyText": "If there is a Throwable to write is there a newline after the message template? Looking at the message template there is no newline inserted between the general log message and the stack trace.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r365935513", "createdAt": "2020-01-13T17:39:46Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLogger.java", "diffHunk": "@@ -0,0 +1,376 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.logging.LogLevel;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MarkerIgnoringBase;\n+import org.slf4j.helpers.MessageFormatter;\n+\n+/**\n+ * This class is an internal implementation of slf4j logger.\n+ */\n+public final class DefaultLogger extends MarkerIgnoringBase {\n+    private static final long serialVersionUID = -144261058636441630L;\n+\n+    private static final String AZURE_LOG_LEVEL = \"AZURE_LOG_LEVEL\";\n+    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\n+\n+    // The template forms the log message in a format:\n+    // YYYY-MM-DD HH:MM [thread] [level] classpath - message\n+    // E.g: 2020-01-09 12:35 [main] [WARNING] com.azure.core.DefaultLogger - This is my log message.\n+    private static final String MESSAGE_TEMPLATE = \"%s [%s] [%s] %s - %s\";\n+\n+    private String classPath;\n+\n+    /**\n+     * Construct DefaultLogger for the given class.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public DefaultLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Construct DefaultLogger for the given class name.\n+     *\n+     * @param className Class name creating the logger.\n+     * @throws RuntimeException it is an error.\n+     */\n+    public DefaultLogger(String className) {\n+        try {\n+            this.classPath = Class.forName(className).getCanonicalName();\n+        } catch (ClassNotFoundException e) {\n+            this.classPath = className;\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isDebugEnabled() {\n+        String logLevelStr = Configuration.getGlobalConfiguration().get(AZURE_LOG_LEVEL);\n+        LogLevel currentLogLevel = LogLevel.fromString(logLevelStr);\n+        return LogLevel.VERBOSE.getLogLevel() >= currentLogLevel.getLogLevel();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void debug(String format, Object arg) {\n+        logFromFormat(LogLevel.VERBOSE, format, arg);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void debug(String format, Object... args) {\n+        logFromFormat(LogLevel.VERBOSE, format, args);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isInfoEnabled() {\n+        String logLevelStr = Configuration.getGlobalConfiguration().get(AZURE_LOG_LEVEL);\n+        LogLevel currentLogLevel = LogLevel.fromString(logLevelStr);\n+        return LogLevel.INFORMATIONAL.getLogLevel() >= currentLogLevel.getLogLevel();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void info(String format, Object arg) {\n+        logFromFormat(LogLevel.INFORMATIONAL, format, arg);\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void info(String format, Object... args) {\n+        logFromFormat(LogLevel.INFORMATIONAL, format, args);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isWarnEnabled() {\n+        String logLevelStr = Configuration.getGlobalConfiguration().get(AZURE_LOG_LEVEL);\n+        LogLevel currentLogLevel = LogLevel.fromString(logLevelStr);\n+        return LogLevel.WARNING.getLogLevel() >= currentLogLevel.getLogLevel();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void warn(String format, Object arg) {\n+        logFromFormat(LogLevel.WARNING, format, arg);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * @param format The formattable message to log.\n+     * @param args Arguments for the message. If an exception is being logged, the last argument should be the\n+     *     {@link Throwable}.\n+     */\n+    @Override\n+    public void warn(String format, Object... args) {\n+        logFromFormat(LogLevel.WARNING, format, args);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isErrorEnabled() {\n+        String logLevelStr = Configuration.getGlobalConfiguration().get(AZURE_LOG_LEVEL);\n+        LogLevel currentLogLevel = LogLevel.fromString(logLevelStr);\n+        return LogLevel.ERROR.getLogLevel() >= currentLogLevel.getLogLevel();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void error(String format, Object arg) {\n+        logFromFormat(LogLevel.ERROR, format, arg);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * @param format The formattable message to log.\n+     * @param args Arguments for the message. If an exception is being logged, the last argument should be the\n+     *     {@link Throwable}.\n+     */\n+    @Override\n+    public void error(String format, Object... args) {\n+        logFromFormat(LogLevel.ERROR, format, args);\n+    }\n+\n+    /**\n+     * Format and write the message according to the {@code MESSAGE_TEMPLATE}.\n+     *\n+     * @param level The level to log.\n+     * @param format The log message format.\n+     * @param arguments a list of arbitrary arguments taken in by format.\n+     */\n+    private void logFromFormat(LogLevel level, String format, Object... arguments) {\n+        FormattingTuple tp = MessageFormatter.arrayFormat(format, arguments);\n+        log(level, tp.getMessage(), tp.getThrowable());\n+    }\n+\n+    /**\n+     * Format and write the message according to the {@code MESSAGE_TEMPLATE}.\n+     *\n+     * @param level log level\n+     * @param message The message itself\n+     * @param t The exception whose stack trace should be logged\n+     */\n+    private void log(LogLevel level, String message, Throwable t) {\n+        String dateTime = getFormattedDate();\n+        String threadName = Thread.currentThread().getName();\n+        String levelName = level.name();\n+        StringBuilder buf = new StringBuilder(32);\n+        buf.append(String.format(MESSAGE_TEMPLATE, dateTime, threadName, levelName, classPath, message));\n+        writeWithThrowable(buf, t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e484e10cf3f19cdec69923af52d09d8770c8f749"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkzNjA4MQ==", "bodyText": "Could this be made private? Additionally, could we change this method to simple add the stack trace to the log message. Adding the Throwable stack trace and writing the message to the console don't seem like ideas that should be merged eagerly.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r365936081", "createdAt": "2020-01-13T17:41:00Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLogger.java", "diffHunk": "@@ -0,0 +1,376 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.logging.LogLevel;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MarkerIgnoringBase;\n+import org.slf4j.helpers.MessageFormatter;\n+\n+/**\n+ * This class is an internal implementation of slf4j logger.\n+ */\n+public final class DefaultLogger extends MarkerIgnoringBase {\n+    private static final long serialVersionUID = -144261058636441630L;\n+\n+    private static final String AZURE_LOG_LEVEL = \"AZURE_LOG_LEVEL\";\n+    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\n+\n+    // The template forms the log message in a format:\n+    // YYYY-MM-DD HH:MM [thread] [level] classpath - message\n+    // E.g: 2020-01-09 12:35 [main] [WARNING] com.azure.core.DefaultLogger - This is my log message.\n+    private static final String MESSAGE_TEMPLATE = \"%s [%s] [%s] %s - %s\";\n+\n+    private String classPath;\n+\n+    /**\n+     * Construct DefaultLogger for the given class.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public DefaultLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Construct DefaultLogger for the given class name.\n+     *\n+     * @param className Class name creating the logger.\n+     * @throws RuntimeException it is an error.\n+     */\n+    public DefaultLogger(String className) {\n+        try {\n+            this.classPath = Class.forName(className).getCanonicalName();\n+        } catch (ClassNotFoundException e) {\n+            this.classPath = className;\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isDebugEnabled() {\n+        String logLevelStr = Configuration.getGlobalConfiguration().get(AZURE_LOG_LEVEL);\n+        LogLevel currentLogLevel = LogLevel.fromString(logLevelStr);\n+        return LogLevel.VERBOSE.getLogLevel() >= currentLogLevel.getLogLevel();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void debug(String format, Object arg) {\n+        logFromFormat(LogLevel.VERBOSE, format, arg);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void debug(String format, Object... args) {\n+        logFromFormat(LogLevel.VERBOSE, format, args);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isInfoEnabled() {\n+        String logLevelStr = Configuration.getGlobalConfiguration().get(AZURE_LOG_LEVEL);\n+        LogLevel currentLogLevel = LogLevel.fromString(logLevelStr);\n+        return LogLevel.INFORMATIONAL.getLogLevel() >= currentLogLevel.getLogLevel();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void info(String format, Object arg) {\n+        logFromFormat(LogLevel.INFORMATIONAL, format, arg);\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void info(String format, Object... args) {\n+        logFromFormat(LogLevel.INFORMATIONAL, format, args);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isWarnEnabled() {\n+        String logLevelStr = Configuration.getGlobalConfiguration().get(AZURE_LOG_LEVEL);\n+        LogLevel currentLogLevel = LogLevel.fromString(logLevelStr);\n+        return LogLevel.WARNING.getLogLevel() >= currentLogLevel.getLogLevel();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void warn(String format, Object arg) {\n+        logFromFormat(LogLevel.WARNING, format, arg);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * @param format The formattable message to log.\n+     * @param args Arguments for the message. If an exception is being logged, the last argument should be the\n+     *     {@link Throwable}.\n+     */\n+    @Override\n+    public void warn(String format, Object... args) {\n+        logFromFormat(LogLevel.WARNING, format, args);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isErrorEnabled() {\n+        String logLevelStr = Configuration.getGlobalConfiguration().get(AZURE_LOG_LEVEL);\n+        LogLevel currentLogLevel = LogLevel.fromString(logLevelStr);\n+        return LogLevel.ERROR.getLogLevel() >= currentLogLevel.getLogLevel();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void error(String format, Object arg) {\n+        logFromFormat(LogLevel.ERROR, format, arg);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * @param format The formattable message to log.\n+     * @param args Arguments for the message. If an exception is being logged, the last argument should be the\n+     *     {@link Throwable}.\n+     */\n+    @Override\n+    public void error(String format, Object... args) {\n+        logFromFormat(LogLevel.ERROR, format, args);\n+    }\n+\n+    /**\n+     * Format and write the message according to the {@code MESSAGE_TEMPLATE}.\n+     *\n+     * @param level The level to log.\n+     * @param format The log message format.\n+     * @param arguments a list of arbitrary arguments taken in by format.\n+     */\n+    private void logFromFormat(LogLevel level, String format, Object... arguments) {\n+        FormattingTuple tp = MessageFormatter.arrayFormat(format, arguments);\n+        log(level, tp.getMessage(), tp.getThrowable());\n+    }\n+\n+    /**\n+     * Format and write the message according to the {@code MESSAGE_TEMPLATE}.\n+     *\n+     * @param level log level\n+     * @param message The message itself\n+     * @param t The exception whose stack trace should be logged\n+     */\n+    private void log(LogLevel level, String message, Throwable t) {\n+        String dateTime = getFormattedDate();\n+        String threadName = Thread.currentThread().getName();\n+        String levelName = level.name();\n+        StringBuilder buf = new StringBuilder(32);\n+        buf.append(String.format(MESSAGE_TEMPLATE, dateTime, threadName, levelName, classPath, message));\n+        writeWithThrowable(buf, t);\n+    }\n+\n+    /**\n+     * Get the current time in Local time zone.\n+     *\n+     * @return The current time in {@code DATE_FORMAT}\n+     */\n+    private String getFormattedDate() {\n+        LocalDateTime now = LocalDateTime.now();\n+        return DATE_FORMAT.format(now);\n+    }\n+\n+    /**\n+     * Write the log message with throwable stack trace if any.\n+     *\n+     * @param buf Take the log messages.\n+     * @param t The exception whose stack trace should be logged\n+     */\n+    void writeWithThrowable(StringBuilder buf, Throwable t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e484e10cf3f19cdec69923af52d09d8770c8f749"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkzNjU3MA==", "bodyText": "One of the SDK guidelines it to only print an exception's stack trace when logging is set to verbose. In ClientLogger it was set to only log the exception message at a different level.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r365936570", "createdAt": "2020-01-13T17:41:57Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLogger.java", "diffHunk": "@@ -0,0 +1,376 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.logging.LogLevel;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MarkerIgnoringBase;\n+import org.slf4j.helpers.MessageFormatter;\n+\n+/**\n+ * This class is an internal implementation of slf4j logger.\n+ */\n+public final class DefaultLogger extends MarkerIgnoringBase {\n+    private static final long serialVersionUID = -144261058636441630L;\n+\n+    private static final String AZURE_LOG_LEVEL = \"AZURE_LOG_LEVEL\";\n+    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\n+\n+    // The template forms the log message in a format:\n+    // YYYY-MM-DD HH:MM [thread] [level] classpath - message\n+    // E.g: 2020-01-09 12:35 [main] [WARNING] com.azure.core.DefaultLogger - This is my log message.\n+    private static final String MESSAGE_TEMPLATE = \"%s [%s] [%s] %s - %s\";\n+\n+    private String classPath;\n+\n+    /**\n+     * Construct DefaultLogger for the given class.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public DefaultLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Construct DefaultLogger for the given class name.\n+     *\n+     * @param className Class name creating the logger.\n+     * @throws RuntimeException it is an error.\n+     */\n+    public DefaultLogger(String className) {\n+        try {\n+            this.classPath = Class.forName(className).getCanonicalName();\n+        } catch (ClassNotFoundException e) {\n+            this.classPath = className;\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isDebugEnabled() {\n+        String logLevelStr = Configuration.getGlobalConfiguration().get(AZURE_LOG_LEVEL);\n+        LogLevel currentLogLevel = LogLevel.fromString(logLevelStr);\n+        return LogLevel.VERBOSE.getLogLevel() >= currentLogLevel.getLogLevel();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void debug(String format, Object arg) {\n+        logFromFormat(LogLevel.VERBOSE, format, arg);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void debug(String format, Object... args) {\n+        logFromFormat(LogLevel.VERBOSE, format, args);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isInfoEnabled() {\n+        String logLevelStr = Configuration.getGlobalConfiguration().get(AZURE_LOG_LEVEL);\n+        LogLevel currentLogLevel = LogLevel.fromString(logLevelStr);\n+        return LogLevel.INFORMATIONAL.getLogLevel() >= currentLogLevel.getLogLevel();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void info(String format, Object arg) {\n+        logFromFormat(LogLevel.INFORMATIONAL, format, arg);\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void info(String format, Object... args) {\n+        logFromFormat(LogLevel.INFORMATIONAL, format, args);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isWarnEnabled() {\n+        String logLevelStr = Configuration.getGlobalConfiguration().get(AZURE_LOG_LEVEL);\n+        LogLevel currentLogLevel = LogLevel.fromString(logLevelStr);\n+        return LogLevel.WARNING.getLogLevel() >= currentLogLevel.getLogLevel();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void warn(String format, Object arg) {\n+        logFromFormat(LogLevel.WARNING, format, arg);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * @param format The formattable message to log.\n+     * @param args Arguments for the message. If an exception is being logged, the last argument should be the\n+     *     {@link Throwable}.\n+     */\n+    @Override\n+    public void warn(String format, Object... args) {\n+        logFromFormat(LogLevel.WARNING, format, args);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isErrorEnabled() {\n+        String logLevelStr = Configuration.getGlobalConfiguration().get(AZURE_LOG_LEVEL);\n+        LogLevel currentLogLevel = LogLevel.fromString(logLevelStr);\n+        return LogLevel.ERROR.getLogLevel() >= currentLogLevel.getLogLevel();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void error(String format, Object arg) {\n+        logFromFormat(LogLevel.ERROR, format, arg);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * @param format The formattable message to log.\n+     * @param args Arguments for the message. If an exception is being logged, the last argument should be the\n+     *     {@link Throwable}.\n+     */\n+    @Override\n+    public void error(String format, Object... args) {\n+        logFromFormat(LogLevel.ERROR, format, args);\n+    }\n+\n+    /**\n+     * Format and write the message according to the {@code MESSAGE_TEMPLATE}.\n+     *\n+     * @param level The level to log.\n+     * @param format The log message format.\n+     * @param arguments a list of arbitrary arguments taken in by format.\n+     */\n+    private void logFromFormat(LogLevel level, String format, Object... arguments) {\n+        FormattingTuple tp = MessageFormatter.arrayFormat(format, arguments);\n+        log(level, tp.getMessage(), tp.getThrowable());\n+    }\n+\n+    /**\n+     * Format and write the message according to the {@code MESSAGE_TEMPLATE}.\n+     *\n+     * @param level log level\n+     * @param message The message itself\n+     * @param t The exception whose stack trace should be logged\n+     */\n+    private void log(LogLevel level, String message, Throwable t) {\n+        String dateTime = getFormattedDate();\n+        String threadName = Thread.currentThread().getName();\n+        String levelName = level.name();\n+        StringBuilder buf = new StringBuilder(32);\n+        buf.append(String.format(MESSAGE_TEMPLATE, dateTime, threadName, levelName, classPath, message));\n+        writeWithThrowable(buf, t);\n+    }\n+\n+    /**\n+     * Get the current time in Local time zone.\n+     *\n+     * @return The current time in {@code DATE_FORMAT}\n+     */\n+    private String getFormattedDate() {\n+        LocalDateTime now = LocalDateTime.now();\n+        return DATE_FORMAT.format(now);\n+    }\n+\n+    /**\n+     * Write the log message with throwable stack trace if any.\n+     *\n+     * @param buf Take the log messages.\n+     * @param t The exception whose stack trace should be logged\n+     */\n+    void writeWithThrowable(StringBuilder buf, Throwable t) {\n+        if (t != null) {\n+            StringWriter sw = new StringWriter();\n+            try (PrintWriter pw = new PrintWriter(sw)) {\n+                t.printStackTrace(pw);\n+                buf.append(sw.toString());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e484e10cf3f19cdec69923af52d09d8770c8f749"}, "originalPosition": 216}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3673e218b3716acf0b80bf3c1f4ac1d299c3392", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f3673e218b3716acf0b80bf3c1f4ac1d299c3392", "committedDate": "2020-01-13T18:35:33Z", "message": "Addressed comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f0f82b979e0430582ee20c3a2c785e0817ba3ab", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5f0f82b979e0430582ee20c3a2c785e0817ba3ab", "committedDate": "2020-01-13T18:38:08Z", "message": "Some more changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMDU0NDM2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#pullrequestreview-342054436", "createdAt": "2020-01-13T18:40:02Z", "commit": {"oid": "5f0f82b979e0430582ee20c3a2c785e0817ba3ab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1a75a79fdc6d4885742bcc1c729f675a6b8f339", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f1a75a79fdc6d4885742bcc1c729f675a6b8f339", "committedDate": "2020-01-13T18:40:10Z", "message": "Remove some extra methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMDU2NDcy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#pullrequestreview-342056472", "createdAt": "2020-01-13T18:43:18Z", "commit": {"oid": "5f0f82b979e0430582ee20c3a2c785e0817ba3ab"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODo0MzoxOFrOFdAs6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODo0MzoxOFrOFdAs6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2NDUyMw==", "bodyText": "This line can now be removed as DefaultLoggerBase does not exist.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r365964523", "createdAt": "2020-01-13T18:43:18Z", "author": {"login": "srnagar"}, "path": "eng/code-quality-reports/src/main/resources/checkstyle/checkstyle-suppressions.xml", "diffHunk": "@@ -184,8 +185,10 @@\n   <!-- CodeSnippet Suppression for now, which need code owner's attention -->\n   <suppress checks=\"com.azure.tools.checkstyle.checks.JavadocCodeSnippetCheck\" files=\"com.azure.data.appconfiguration.ConfigurationAsyncClient.java\"/>\n \n-  <!-- ClientLogger class suppression -->\n+  <!-- Logger class suppression -->\n   <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\" files=\"ClientLogger.java\"/>\n+  <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\" files=\"DefaultLogger.java\"/>\n+  <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\" files=\"DefaultLoggerBase.java\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f0f82b979e0430582ee20c3a2c785e0817ba3ab"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "343ab84379d86a2ee8715b763c46034a4e1dd8a4", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/343ab84379d86a2ee8715b763c46034a4e1dd8a4", "committedDate": "2020-01-13T18:52:11Z", "message": "Remove redundant checkstyle suppression"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMjAyNzg4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#pullrequestreview-342202788", "createdAt": "2020-01-13T23:13:35Z", "commit": {"oid": "343ab84379d86a2ee8715b763c46034a4e1dd8a4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMzoxMzozNVrOFdHrug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMzoxMzozNVrOFdHrug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA3ODkwNg==", "bodyText": "nit: extra two lines", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r366078906", "createdAt": "2020-01-13T23:13:35Z", "author": {"login": "mssfang"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLogger.java", "diffHunk": "@@ -0,0 +1,368 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.logging.LogLevel;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MarkerIgnoringBase;\n+import org.slf4j.helpers.MessageFormatter;\n+\n+/**\n+ * This class is an internal implementation of slf4j logger.\n+ */\n+public final class DefaultLogger extends MarkerIgnoringBase {\n+    private static final long serialVersionUID = -144261058636441630L;\n+\n+    private static final String AZURE_LOG_LEVEL = \"AZURE_LOG_LEVEL\";\n+    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\n+\n+    // The template forms the log message in a format:\n+    // YYYY-MM-DD HH:MM [thread] [level] classpath - message\n+    // E.g: 2020-01-09 12:35 [main] [WARNING] com.azure.core.DefaultLogger - This is my log message.\n+    private static final String MESSAGE_TEMPLATE = \"%s [%s] [%s] %s - %s%n\";\n+\n+    private String classPath;\n+\n+    /**\n+     * Construct DefaultLogger for the given class.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public DefaultLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Construct DefaultLogger for the given class name.\n+     *\n+     * @param className Class name creating the logger.\n+     * @throws RuntimeException it is an error.\n+     */\n+    public DefaultLogger(String className) {\n+        try {\n+            this.classPath = Class.forName(className).getCanonicalName();\n+        } catch (ClassNotFoundException e) {\n+            this.classPath = className;\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isDebugEnabled() {\n+        return isLogLevelEnabledFromEnv(LogLevel.VERBOSE);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void debug(String format, Object arg) {\n+        logFromFormat(LogLevel.VERBOSE, format, arg);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void debug(String format, Object... args) {\n+        logFromFormat(LogLevel.VERBOSE, format, args);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isInfoEnabled() {\n+        return isLogLevelEnabledFromEnv(LogLevel.INFORMATIONAL);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void info(String format, Object arg) {\n+        logFromFormat(LogLevel.INFORMATIONAL, format, arg);\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void info(String format, Object... args) {\n+        logFromFormat(LogLevel.INFORMATIONAL, format, args);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isWarnEnabled() {\n+        return isLogLevelEnabledFromEnv(LogLevel.WARNING);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void warn(String format, Object arg) {\n+        logFromFormat(LogLevel.WARNING, format, arg);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void warn(String format, Object... args) {\n+        logFromFormat(LogLevel.WARNING, format, args);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isErrorEnabled() {\n+        return isLogLevelEnabledFromEnv(LogLevel.ERROR);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void error(String format, Object arg) {\n+        logFromFormat(LogLevel.ERROR, format, arg);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void error(String format, Object... args) {\n+        logFromFormat(LogLevel.ERROR, format, args);\n+    }\n+\n+    private boolean isLogLevelEnabledFromEnv(LogLevel logLevel) {\n+        String logLevelStr = Configuration.getGlobalConfiguration().get(AZURE_LOG_LEVEL);\n+        LogLevel currentLogLevel = LogLevel.fromString(logLevelStr);\n+        return logLevel.getLogLevel() >= currentLogLevel.getLogLevel();\n+    }\n+\n+    /**\n+     * Format and write the message according to the {@code MESSAGE_TEMPLATE}.\n+     *\n+     * @param level The level to log.\n+     * @param format The log message format.\n+     * @param arguments a list of arbitrary arguments taken in by format.\n+     */\n+    private void logFromFormat(LogLevel level, String format, Object... arguments) {\n+        FormattingTuple tp = MessageFormatter.arrayFormat(format, arguments);\n+        log(level, tp.getMessage(), tp.getThrowable());\n+    }\n+\n+    /**\n+     * Format and write the message according to the {@code MESSAGE_TEMPLATE}.\n+     *\n+     * @param level log level\n+     * @param message The message itself\n+     * @param t The exception whose stack trace should be logged\n+     */\n+    private void log(LogLevel level, String message, Throwable t) {\n+        String dateTime = getFormattedDate();\n+        String threadName = Thread.currentThread().getName();\n+        String levelName = level.name();\n+        StringBuilder buf = new StringBuilder(64);\n+        buf.append(String.format(MESSAGE_TEMPLATE, dateTime, threadName, levelName, classPath, message));\n+        writeWithThrowable(buf, t);\n+    }\n+\n+    /**\n+     * Get the current time in Local time zone.\n+     *\n+     * @return The current time in {@code DATE_FORMAT}\n+     */\n+    private String getFormattedDate() {\n+        LocalDateTime now = LocalDateTime.now();\n+        return DATE_FORMAT.format(now);\n+    }\n+\n+    /**\n+     * Write the log message with throwable stack trace if any.\n+     *\n+     * @param buf Take the log messages.\n+     * @param t The exception whose stack trace should be logged\n+     */\n+    void writeWithThrowable(StringBuilder buf, Throwable t) {\n+        if (t != null) {\n+            StringWriter sw = new StringWriter();\n+            try (PrintWriter pw = new PrintWriter(sw)) {\n+                t.printStackTrace(pw);\n+                buf.append(sw.toString());\n+            }\n+        }\n+        System.out.println(buf.toString());\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String getName() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isTraceEnabled() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void trace(final String msg) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void trace(final String format, final Object arg1) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void trace(final String format, final Object arg1, final Object arg2) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void trace(final String format, final Object... arguments) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void trace(final String msg, final Throwable t) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void debug(final String msg) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void debug(final String format, final Object arg1, final Object arg2) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void debug(final String msg, final Throwable t) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void info(final String msg) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void info(final String format, final Object arg1, final Object arg2) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void info(final String msg, final Throwable t) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "343ab84379d86a2ee8715b763c46034a4e1dd8a4"}, "originalPosition": 319}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49be4b3aa48f0b513ba8ab9e394b2c7718198d75", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/49be4b3aa48f0b513ba8ab9e394b2c7718198d75", "committedDate": "2020-01-14T00:19:10Z", "message": "Update DefaultLogger.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyNzkwMDMy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#pullrequestreview-342790032", "createdAt": "2020-01-14T19:40:13Z", "commit": {"oid": "49be4b3aa48f0b513ba8ab9e394b2c7718198d75"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyNzk2MTYx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#pullrequestreview-342796161", "createdAt": "2020-01-14T19:50:31Z", "commit": {"oid": "49be4b3aa48f0b513ba8ab9e394b2c7718198d75"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTo1MDozMlrOFdj0sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTo1MDozMlrOFdj0sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzOTk1NA==", "bodyText": "Why overload all of these methods to throw an exception when the base class has an actual useful implementation? Look at https://github.com/qos-ch/slf4j/blob/master/slf4j-api/src/main/java/org/slf4j/helpers/MarkerIgnoringBase.java", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r366539954", "createdAt": "2020-01-14T19:50:32Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLogger.java", "diffHunk": "@@ -0,0 +1,365 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.logging.LogLevel;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MarkerIgnoringBase;\n+import org.slf4j.helpers.MessageFormatter;\n+\n+/**\n+ * This class is an internal implementation of slf4j logger.\n+ */\n+public final class DefaultLogger extends MarkerIgnoringBase {\n+    private static final long serialVersionUID = -144261058636441630L;\n+\n+    private static final String AZURE_LOG_LEVEL = \"AZURE_LOG_LEVEL\";\n+    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\n+\n+    // The template forms the log message in a format:\n+    // YYYY-MM-DD HH:MM [thread] [level] classpath - message\n+    // E.g: 2020-01-09 12:35 [main] [WARNING] com.azure.core.DefaultLogger - This is my log message.\n+    private static final String MESSAGE_TEMPLATE = \"%s [%s] [%s] %s - %s%n\";\n+\n+    private String classPath;\n+\n+    /**\n+     * Construct DefaultLogger for the given class.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public DefaultLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Construct DefaultLogger for the given class name.\n+     *\n+     * @param className Class name creating the logger.\n+     * @throws RuntimeException it is an error.\n+     */\n+    public DefaultLogger(String className) {\n+        try {\n+            this.classPath = Class.forName(className).getCanonicalName();\n+        } catch (ClassNotFoundException e) {\n+            this.classPath = className;\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isDebugEnabled() {\n+        return isLogLevelEnabledFromEnv(LogLevel.VERBOSE);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void debug(String format, Object arg) {\n+        logFromFormat(LogLevel.VERBOSE, format, arg);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void debug(String format, Object... args) {\n+        logFromFormat(LogLevel.VERBOSE, format, args);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isInfoEnabled() {\n+        return isLogLevelEnabledFromEnv(LogLevel.INFORMATIONAL);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void info(String format, Object arg) {\n+        logFromFormat(LogLevel.INFORMATIONAL, format, arg);\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void info(String format, Object... args) {\n+        logFromFormat(LogLevel.INFORMATIONAL, format, args);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isWarnEnabled() {\n+        return isLogLevelEnabledFromEnv(LogLevel.WARNING);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void warn(String format, Object arg) {\n+        logFromFormat(LogLevel.WARNING, format, arg);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void warn(String format, Object... args) {\n+        logFromFormat(LogLevel.WARNING, format, args);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isErrorEnabled() {\n+        return isLogLevelEnabledFromEnv(LogLevel.ERROR);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void error(String format, Object arg) {\n+        logFromFormat(LogLevel.ERROR, format, arg);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void error(String format, Object... args) {\n+        logFromFormat(LogLevel.ERROR, format, args);\n+    }\n+\n+    private boolean isLogLevelEnabledFromEnv(LogLevel logLevel) {\n+        String logLevelStr = Configuration.getGlobalConfiguration().get(AZURE_LOG_LEVEL);\n+        LogLevel currentLogLevel = LogLevel.fromString(logLevelStr);\n+        return logLevel.getLogLevel() >= currentLogLevel.getLogLevel();\n+    }\n+\n+    /**\n+     * Format and write the message according to the {@code MESSAGE_TEMPLATE}.\n+     *\n+     * @param level The level to log.\n+     * @param format The log message format.\n+     * @param arguments a list of arbitrary arguments taken in by format.\n+     */\n+    private void logFromFormat(LogLevel level, String format, Object... arguments) {\n+        FormattingTuple tp = MessageFormatter.arrayFormat(format, arguments);\n+        log(level, tp.getMessage(), tp.getThrowable());\n+    }\n+\n+    /**\n+     * Format and write the message according to the {@code MESSAGE_TEMPLATE}.\n+     *\n+     * @param level log level\n+     * @param message The message itself\n+     * @param t The exception whose stack trace should be logged\n+     */\n+    private void log(LogLevel level, String message, Throwable t) {\n+        String dateTime = getFormattedDate();\n+        String threadName = Thread.currentThread().getName();\n+        String levelName = level.name();\n+        StringBuilder buf = new StringBuilder(64);\n+        buf.append(String.format(MESSAGE_TEMPLATE, dateTime, threadName, levelName, classPath, message));\n+        writeWithThrowable(buf, t);\n+    }\n+\n+    /**\n+     * Get the current time in Local time zone.\n+     *\n+     * @return The current time in {@code DATE_FORMAT}\n+     */\n+    private String getFormattedDate() {\n+        LocalDateTime now = LocalDateTime.now();\n+        return DATE_FORMAT.format(now);\n+    }\n+\n+    /**\n+     * Write the log message with throwable stack trace if any.\n+     *\n+     * @param buf Take the log messages.\n+     * @param t The exception whose stack trace should be logged\n+     */\n+    void writeWithThrowable(StringBuilder buf, Throwable t) {\n+        if (t != null) {\n+            StringWriter sw = new StringWriter();\n+            try (PrintWriter pw = new PrintWriter(sw)) {\n+                t.printStackTrace(pw);\n+                buf.append(sw.toString());\n+            }\n+        }\n+        System.out.println(buf.toString());\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String getName() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isTraceEnabled() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void trace(final String msg) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void trace(final String format, final Object arg1) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void trace(final String format, final Object arg1, final Object arg2) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void trace(final String format, final Object... arguments) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void trace(final String msg, final Throwable t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49be4b3aa48f0b513ba8ab9e394b2c7718198d75"}, "originalPosition": 265}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7258f7652051a46ce0fc893073ac0003b6c3c2b4", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7258f7652051a46ce0fc893073ac0003b6c3c2b4", "committedDate": "2020-01-14T21:02:52Z", "message": "Implements all APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7145d10be49bc8cedcb343e394aa6d7293c514d8", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7145d10be49bc8cedcb343e394aa6d7293c514d8", "committedDate": "2020-01-14T21:03:12Z", "message": "Merge branch 'addlogimpl' of https://github.com/sima-zhu/azure-sdk-for-java into addlogimpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0e582c142c33515dd575a264ff7a3716ddf842c", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a0e582c142c33515dd575a264ff7a3716ddf842c", "committedDate": "2020-01-14T21:17:03Z", "message": "Fixed linting issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNDgyMDcz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#pullrequestreview-343482073", "createdAt": "2020-01-15T19:56:48Z", "commit": {"oid": "a0e582c142c33515dd575a264ff7a3716ddf842c"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOTo1Njo0OFrOFeEmrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOTo1NzozOVrOFeEoIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA3NzAzNw==", "bodyText": "Will this throw an exception now that you have a catch block?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r367077037", "createdAt": "2020-01-15T19:56:48Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/logging/DefaultLogger.java", "diffHunk": "@@ -0,0 +1,362 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.implementation.logging;\n+\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.logging.LogLevel;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MarkerIgnoringBase;\n+import org.slf4j.helpers.MessageFormatter;\n+\n+/**\n+ * This class is an internal implementation of slf4j logger.\n+ */\n+public final class DefaultLogger extends MarkerIgnoringBase {\n+    private static final long serialVersionUID = -144261058636441630L;\n+\n+    private static final String AZURE_LOG_LEVEL = \"AZURE_LOG_LEVEL\";\n+    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\n+\n+    // The template forms the log message in a format:\n+    // YYYY-MM-DD HH:MM [thread] [level] classpath - message\n+    // E.g: 2020-01-09 12:35 [main] [WARNING] com.azure.core.DefaultLogger - This is my log message.\n+    private static final String MESSAGE_TEMPLATE = \"%s [%s] [%s] %s - %s%n\";\n+\n+    private String classPath;\n+\n+    /**\n+     * Construct DefaultLogger for the given class.\n+     *\n+     * @param clazz Class creating the logger.\n+     */\n+    public DefaultLogger(Class<?> clazz) {\n+        this(clazz.getName());\n+    }\n+\n+    /**\n+     * Construct DefaultLogger for the given class name.\n+     *\n+     * @param className Class name creating the logger.\n+     * @throws RuntimeException it is an error.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0e582c142c33515dd575a264ff7a3716ddf842c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA3NzQwOA==", "bodyText": "Now that all methods are implemented in DefaultLogger this exception is no longer required.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r367077408", "createdAt": "2020-01-15T19:57:39Z", "author": {"login": "srnagar"}, "path": "eng/code-quality-reports/src/main/resources/checkstyle/checkstyle-suppressions.xml", "diffHunk": "@@ -153,6 +153,7 @@\n \n   <!-- Any code in any package, it should never be a 'throw' keyword in the client library codebase except for in the client logger -->\n   <suppress checks=\"com.azure.tools.checkstyle.checks.ThrowFromClientLoggerCheck\" files=\".*[/\\\\]com[/\\\\]azure[/\\\\]core[/\\\\]util[/\\\\]logging[/\\\\]*\"/>\n+  <suppress checks=\"com.azure.tools.checkstyle.checks.ThrowFromClientLoggerCheck\" files=\".*[/\\\\]com[/\\\\]azure[/\\\\]core[/\\\\]implementation[/\\\\]logging[/\\\\]*\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0e582c142c33515dd575a264ff7a3716ddf842c"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68085b4993a16d8ff9a4f10212272b4db113b477", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/68085b4993a16d8ff9a4f10212272b4db113b477", "committedDate": "2020-01-15T20:43:00Z", "message": "Address feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNTMxODY1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#pullrequestreview-343531865", "createdAt": "2020-01-15T21:25:58Z", "commit": {"oid": "68085b4993a16d8ff9a4f10212272b4db113b477"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNjM0NTY4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#pullrequestreview-343634568", "createdAt": "2020-01-16T01:58:38Z", "commit": {"oid": "68085b4993a16d8ff9a4f10212272b4db113b477"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzODg2MjQ4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#pullrequestreview-343886248", "createdAt": "2020-01-16T12:47:56Z", "commit": {"oid": "68085b4993a16d8ff9a4f10212272b4db113b477"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjo0Nzo1NlrOFeYOUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjo0Nzo1NlrOFeYOUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5ODQ4MQ==", "bodyText": "Is this an error message?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7298#discussion_r367398481", "createdAt": "2020-01-16T12:47:56Z", "author": {"login": "mssfang"}, "path": "sdk/core/azure-core/src/test/java/com/azure/core/util/logging/ClientLoggerTests.java", "diffHunk": "@@ -144,7 +133,7 @@ public void onlyLogExceptionMessage() {\n      */\n     @Test\n     public void logExceptionStackTrace() {\n-        String logMessage = \"This is an exception\";\n+        String logMessage = \"This is an exception fdsafdafdomcklamfd fdsafdafmlkdfmalsf fdsafdcacdalmd\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68085b4993a16d8ff9a4f10212272b4db113b477"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 594, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}