{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2MzcwNDMx", "number": 13990, "title": "Add builder, sync and async digital twin clients", "bodyText": "Also add simple samples that demonstrate the creation and use of each client.\nMost of these constructors/builders follow the example set by the storage SDK. For reference on them:\nBlobClientBuilder.java\nBlobClient.java\nBlobAsyncClient.java", "createdAt": "2020-08-11T21:42:38Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13990", "merged": true, "mergeCommit": {"oid": "7156871b8c647e5ef02d676d6de96043a0b5e222"}, "closed": true, "closedAt": "2020-08-13T23:23:21Z", "author": {"login": "timtay-microsoft"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc994VMAH2gAyNDY2MzcwNDMxOjFhN2Q0M2ZhMjg1YzQ0Y2U5N2E0NWY2M2U4YWFkZTFhYmRjNjEyODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-AaZQgFqTQ2NTUxNzUwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1a7d43fa285c44ce97a45f63e8aade1abdc61280", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1a7d43fa285c44ce97a45f63e8aade1abdc61280", "committedDate": "2020-08-11T21:41:12Z", "message": "Add builder, sync and async digital twin clients\n\nAlso add simple samples that demonstrate the creation and use of each client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc984e30561cc2f448c2463046f546a2c96b809d", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/dc984e30561cc2f448c2463046f546a2c96b809d", "committedDate": "2020-08-11T21:43:04Z", "message": "squash"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a2ff3755f8fd75f88652ac3108b3216df3252e8", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0a2ff3755f8fd75f88652ac3108b3216df3252e8", "committedDate": "2020-08-11T21:46:12Z", "message": "squash"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NDY1MDc2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13990#pullrequestreview-465465076", "createdAt": "2020-08-11T22:13:56Z", "commit": {"oid": "0a2ff3755f8fd75f88652ac3108b3216df3252e8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMjoxMzo1NlrOG_LCbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMjoxMzo1NlrOG_LCbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg5NDMxNw==", "bodyText": "As an interesting aside, the actual type of the returned digital twin here is a map. Not a Json object, strictly speaking.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13990#discussion_r468894317", "createdAt": "2020-08-11T22:13:56Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/SyncSample.java", "diffHunk": "@@ -0,0 +1,35 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.digitaltwins.core.models.DigitalTwinsGetByIdResponse;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+\n+public class SyncSample\n+{\n+    public static void main(String[] args)\n+    {\n+        String tenantId = System.getenv(\"TENANT_ID\");\n+        String clientId = System.getenv(\"CLIENT_ID\");\n+        String clientSecret = System.getenv(\"CLIENT_SECRET\");\n+        String endpoint = System.getenv(\"DIGITAL_TWINS_ENDPOINT\");\n+        String digitalTwinId = System.getenv(\"DIGITAL_TWIN_ID\");\n+\n+        TokenCredential tokenCredential = new ClientSecretCredentialBuilder()\n+            .tenantId(tenantId)\n+            .clientId(clientId)\n+            .clientSecret(clientSecret)\n+            .build();\n+\n+        DigitalTwinsClient client = new DigitalTwinsClientBuilder()\n+            .tokenCredential(tokenCredential)\n+            .endpoint(endpoint)\n+            .buildClient();\n+\n+        DigitalTwinsGetByIdResponse syncResponse = client.getDigitalTwin(digitalTwinId);\n+        Object digitalTwin = syncResponse.getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a2ff3755f8fd75f88652ac3108b3216df3252e8"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NDY1MzE2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13990#pullrequestreview-465465316", "createdAt": "2020-08-11T22:14:26Z", "commit": {"oid": "0a2ff3755f8fd75f88652ac3108b3216df3252e8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMjoxNDoyNlrOG_LDOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMjoxNDoyNlrOG_LDOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg5NDUyMQ==", "bodyText": "If you are interested in trying it out, these values can be copied from your C# ADT SDK config", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13990#discussion_r468894521", "createdAt": "2020-08-11T22:14:26Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/SyncSample.java", "diffHunk": "@@ -0,0 +1,35 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.digitaltwins.core.models.DigitalTwinsGetByIdResponse;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+\n+public class SyncSample\n+{\n+    public static void main(String[] args)\n+    {\n+        String tenantId = System.getenv(\"TENANT_ID\");\n+        String clientId = System.getenv(\"CLIENT_ID\");\n+        String clientSecret = System.getenv(\"CLIENT_SECRET\");\n+        String endpoint = System.getenv(\"DIGITAL_TWINS_ENDPOINT\");\n+        String digitalTwinId = System.getenv(\"DIGITAL_TWIN_ID\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a2ff3755f8fd75f88652ac3108b3216df3252e8"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NDg4NTQ4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13990#pullrequestreview-465488548", "createdAt": "2020-08-11T23:11:48Z", "commit": {"oid": "0a2ff3755f8fd75f88652ac3108b3216df3252e8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMzoxMTo0OFrOG_MSww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMzoxMTo0OFrOG_MSww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxNDg4Mw==", "bodyText": "do we have some info on what these policies do? request Id and retry policies are self-descriptive, but I am not sure what a datepolicy() does", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13990#discussion_r468914883", "createdAt": "2020-08-11T23:11:48Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "diffHunk": "@@ -0,0 +1,202 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link DigitalTwinsClient\n+ * DigitalTwinsClients} and {@link DigitalTwinsAsyncClient DigitalTwinsAsyncClients}, call {@link #buildClient() buildClient} and {@link\n+ * #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ */\n+@ServiceClientBuilder(serviceClients = {DigitalTwinsClient.class, DigitalTwinsAsyncClient.class})\n+public class DigitalTwinsClientBuilder {\n+    private final List<HttpPipelinePolicy> additionalPolicies = new ArrayList<>();\n+    // mandatory\n+    private String endpoint;\n+    private TokenCredential tokenCredential;\n+    // optional/have default values\n+    private DigitalTwinsServiceVersion serviceVersion;\n+    private HttpPipeline httpPipeline;\n+    private HttpClient httpClient;\n+    private HttpLogOptions logOptions;\n+    private RetryPolicy retryPolicy;\n+\n+    private static HttpPipeline buildPipeline(TokenCredential tokenCredential, String endpoint,\n+                                              HttpLogOptions logOptions, HttpClient httpClient,\n+                                              List<HttpPipelinePolicy> additionalPolicies, RetryPolicy retryPolicy) {\n+        // Closest to API goes first, closest to wire goes last.\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+        policies.add(new RequestIdPolicy());\n+\n+        HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+\n+        policies.add(retryPolicy);\n+\n+        policies.add(new AddDatePolicy());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a2ff3755f8fd75f88652ac3108b3216df3252e8"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NDg5MjYw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13990#pullrequestreview-465489260", "createdAt": "2020-08-11T23:13:50Z", "commit": {"oid": "0a2ff3755f8fd75f88652ac3108b3216df3252e8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMzoxMzo1MFrOG_MU_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMzoxMzo1MFrOG_MU_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxNTQ1NQ==", "bodyText": "A comment on what is added before retry policy, and what is added after would help as well", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13990#discussion_r468915455", "createdAt": "2020-08-11T23:13:50Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "diffHunk": "@@ -0,0 +1,202 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link DigitalTwinsClient\n+ * DigitalTwinsClients} and {@link DigitalTwinsAsyncClient DigitalTwinsAsyncClients}, call {@link #buildClient() buildClient} and {@link\n+ * #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ */\n+@ServiceClientBuilder(serviceClients = {DigitalTwinsClient.class, DigitalTwinsAsyncClient.class})\n+public class DigitalTwinsClientBuilder {\n+    private final List<HttpPipelinePolicy> additionalPolicies = new ArrayList<>();\n+    // mandatory\n+    private String endpoint;\n+    private TokenCredential tokenCredential;\n+    // optional/have default values\n+    private DigitalTwinsServiceVersion serviceVersion;\n+    private HttpPipeline httpPipeline;\n+    private HttpClient httpClient;\n+    private HttpLogOptions logOptions;\n+    private RetryPolicy retryPolicy;\n+\n+    private static HttpPipeline buildPipeline(TokenCredential tokenCredential, String endpoint,\n+                                              HttpLogOptions logOptions, HttpClient httpClient,\n+                                              List<HttpPipelinePolicy> additionalPolicies, RetryPolicy retryPolicy) {\n+        // Closest to API goes first, closest to wire goes last.\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+        policies.add(new RequestIdPolicy());\n+\n+        HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+\n+        policies.add(retryPolicy);\n+\n+        policies.add(new AddDatePolicy());\n+        HttpPipelinePolicy credentialPolicy = new BearerTokenAuthenticationPolicy(tokenCredential, GetAuthorizationScopes(endpoint));\n+        policies.add(credentialPolicy);\n+        policies.addAll(additionalPolicies);\n+        HttpPolicyProviders.addAfterRetryPolicies(policies);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a2ff3755f8fd75f88652ac3108b3216df3252e8"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NDg5NDc3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13990#pullrequestreview-465489477", "createdAt": "2020-08-11T23:14:25Z", "commit": {"oid": "0a2ff3755f8fd75f88652ac3108b3216df3252e8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMzoxNDoyNVrOG_MVyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMzoxNDoyNVrOG_MVyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxNTY1Nw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13990#discussion_r468915657", "createdAt": "2020-08-11T23:14:25Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "diffHunk": "@@ -0,0 +1,202 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link DigitalTwinsClient\n+ * DigitalTwinsClients} and {@link DigitalTwinsAsyncClient DigitalTwinsAsyncClients}, call {@link #buildClient() buildClient} and {@link\n+ * #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ */\n+@ServiceClientBuilder(serviceClients = {DigitalTwinsClient.class, DigitalTwinsAsyncClient.class})\n+public class DigitalTwinsClientBuilder {\n+    private final List<HttpPipelinePolicy> additionalPolicies = new ArrayList<>();\n+    // mandatory\n+    private String endpoint;\n+    private TokenCredential tokenCredential;\n+    // optional/have default values\n+    private DigitalTwinsServiceVersion serviceVersion;\n+    private HttpPipeline httpPipeline;\n+    private HttpClient httpClient;\n+    private HttpLogOptions logOptions;\n+    private RetryPolicy retryPolicy;\n+\n+    private static HttpPipeline buildPipeline(TokenCredential tokenCredential, String endpoint,\n+                                              HttpLogOptions logOptions, HttpClient httpClient,\n+                                              List<HttpPipelinePolicy> additionalPolicies, RetryPolicy retryPolicy) {\n+        // Closest to API goes first, closest to wire goes last.\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+        policies.add(new RequestIdPolicy());\n+\n+        HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+\n+        policies.add(retryPolicy);\n+\n+        policies.add(new AddDatePolicy());\n+        HttpPipelinePolicy credentialPolicy = new BearerTokenAuthenticationPolicy(tokenCredential, GetAuthorizationScopes(endpoint));\n+        policies.add(credentialPolicy);\n+        policies.addAll(additionalPolicies);\n+        HttpPolicyProviders.addAfterRetryPolicies(policies);\n+\n+        policies.add(new HttpLoggingPolicy(logOptions));\n+\n+        return new HttpPipelineBuilder()\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .httpClient(httpClient)\n+            .build();\n+    }\n+\n+    private static String[] GetAuthorizationScopes(String endpoint) {\n+        // Uri representation for azure digital twin app Id \"0b07f429-9f4b-4714-9392-cc5e8e80c8b0\" in the public cloud.\n+        String adtPublicCloudAppId = \"https://digitaltwins.azure.net\";\n+        String defaultPermissionConsent = \"/.default\";\n+\n+        // If the endpoint is in Azure public cloud, the suffix will have \"azure.net\" or \"ppe.net\".\n+        // Once ADT becomes available in other clouds, their corresponding scope has to be matched and set.\n+        if (endpoint.indexOf(\"azure.net\") > 0\n+            || endpoint.indexOf(\"ppe.net\") > 0) {\n+            return new String[]{adtPublicCloudAppId + defaultPermissionConsent};\n+        }\n+\n+        throw new IllegalArgumentException(String.format(\"Azure digital twins instance endpoint %s is not valid.\", endpoint));\n+    }\n+\n+    /**\n+     * Create a {@link DigitalTwinsClient} based on the builder settings.\n+     *\n+     * @return the created synchronous DigitalTwinsClient\n+     */\n+    public DigitalTwinsClient buildClient() {\n+        return new DigitalTwinsClient(buildAsyncClient());\n+    }\n+\n+    /**\n+     * Create a {@link DigitalTwinsAsyncClient} based on the builder settings.\n+     *\n+     * @return the created synchronous DigitalTwinsAsyncClient\n+     */\n+    public DigitalTwinsAsyncClient buildAsyncClient() {\n+        Objects.requireNonNull(tokenCredential, \"'tokenCredential' cannot be null.\");\n+        Objects.requireNonNull(endpoint, \"'endpoint' cannot be null\");\n+\n+        // Set defaults for these fields if they were not set while building the client\n+        this.serviceVersion = this.serviceVersion != null ? this.serviceVersion : DigitalTwinsServiceVersion.getLatest();\n+        this.retryPolicy = this.retryPolicy != null ? this.retryPolicy : new RetryPolicy(); // Default is exponential backoff", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a2ff3755f8fd75f88652ac3108b3216df3252e8"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NDg5NzQz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13990#pullrequestreview-465489743", "createdAt": "2020-08-11T23:15:09Z", "commit": {"oid": "0a2ff3755f8fd75f88652ac3108b3216df3252e8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMzoxNTowOVrOG_MWxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMzoxNTowOVrOG_MWxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxNTkwOA==", "bodyText": "can we split this into multiple lines and add tab support?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13990#discussion_r468915908", "createdAt": "2020-08-11T23:15:09Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "diffHunk": "@@ -0,0 +1,202 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link DigitalTwinsClient\n+ * DigitalTwinsClients} and {@link DigitalTwinsAsyncClient DigitalTwinsAsyncClients}, call {@link #buildClient() buildClient} and {@link\n+ * #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ */\n+@ServiceClientBuilder(serviceClients = {DigitalTwinsClient.class, DigitalTwinsAsyncClient.class})\n+public class DigitalTwinsClientBuilder {\n+    private final List<HttpPipelinePolicy> additionalPolicies = new ArrayList<>();\n+    // mandatory\n+    private String endpoint;\n+    private TokenCredential tokenCredential;\n+    // optional/have default values\n+    private DigitalTwinsServiceVersion serviceVersion;\n+    private HttpPipeline httpPipeline;\n+    private HttpClient httpClient;\n+    private HttpLogOptions logOptions;\n+    private RetryPolicy retryPolicy;\n+\n+    private static HttpPipeline buildPipeline(TokenCredential tokenCredential, String endpoint,\n+                                              HttpLogOptions logOptions, HttpClient httpClient,\n+                                              List<HttpPipelinePolicy> additionalPolicies, RetryPolicy retryPolicy) {\n+        // Closest to API goes first, closest to wire goes last.\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+        policies.add(new RequestIdPolicy());\n+\n+        HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+\n+        policies.add(retryPolicy);\n+\n+        policies.add(new AddDatePolicy());\n+        HttpPipelinePolicy credentialPolicy = new BearerTokenAuthenticationPolicy(tokenCredential, GetAuthorizationScopes(endpoint));\n+        policies.add(credentialPolicy);\n+        policies.addAll(additionalPolicies);\n+        HttpPolicyProviders.addAfterRetryPolicies(policies);\n+\n+        policies.add(new HttpLoggingPolicy(logOptions));\n+\n+        return new HttpPipelineBuilder()\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .httpClient(httpClient)\n+            .build();\n+    }\n+\n+    private static String[] GetAuthorizationScopes(String endpoint) {\n+        // Uri representation for azure digital twin app Id \"0b07f429-9f4b-4714-9392-cc5e8e80c8b0\" in the public cloud.\n+        String adtPublicCloudAppId = \"https://digitaltwins.azure.net\";\n+        String defaultPermissionConsent = \"/.default\";\n+\n+        // If the endpoint is in Azure public cloud, the suffix will have \"azure.net\" or \"ppe.net\".\n+        // Once ADT becomes available in other clouds, their corresponding scope has to be matched and set.\n+        if (endpoint.indexOf(\"azure.net\") > 0\n+            || endpoint.indexOf(\"ppe.net\") > 0) {\n+            return new String[]{adtPublicCloudAppId + defaultPermissionConsent};\n+        }\n+\n+        throw new IllegalArgumentException(String.format(\"Azure digital twins instance endpoint %s is not valid.\", endpoint));\n+    }\n+\n+    /**\n+     * Create a {@link DigitalTwinsClient} based on the builder settings.\n+     *\n+     * @return the created synchronous DigitalTwinsClient\n+     */\n+    public DigitalTwinsClient buildClient() {\n+        return new DigitalTwinsClient(buildAsyncClient());\n+    }\n+\n+    /**\n+     * Create a {@link DigitalTwinsAsyncClient} based on the builder settings.\n+     *\n+     * @return the created synchronous DigitalTwinsAsyncClient\n+     */\n+    public DigitalTwinsAsyncClient buildAsyncClient() {\n+        Objects.requireNonNull(tokenCredential, \"'tokenCredential' cannot be null.\");\n+        Objects.requireNonNull(endpoint, \"'endpoint' cannot be null\");\n+\n+        // Set defaults for these fields if they were not set while building the client\n+        this.serviceVersion = this.serviceVersion != null ? this.serviceVersion : DigitalTwinsServiceVersion.getLatest();\n+        this.retryPolicy = this.retryPolicy != null ? this.retryPolicy : new RetryPolicy(); // Default is exponential backoff\n+        this.httpPipeline = this.httpPipeline != null ? httpPipeline : buildPipeline(this.tokenCredential, this.endpoint, this.logOptions, this.httpClient, this.additionalPolicies, this.retryPolicy);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a2ff3755f8fd75f88652ac3108b3216df3252e8"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NDkwMzg5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13990#pullrequestreview-465490389", "createdAt": "2020-08-11T23:16:43Z", "commit": {"oid": "0a2ff3755f8fd75f88652ac3108b3216df3252e8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMzoxNjo0M1rOG_MY6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMzoxNjo0M1rOG_MY6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxNjQ1Ng==", "bodyText": "I'd release a lock or a semaphore inside the the subscribe/ error blocks instead, cleaner than a thread.sleep. what do you think?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13990#discussion_r468916456", "createdAt": "2020-08-11T23:16:43Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/AsyncSample.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.digitaltwins.core.models.DigitalTwinsGetByIdResponse;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+import reactor.core.publisher.Mono;\n+\n+public class AsyncSample\n+{\n+    public static void main(String[] args) throws InterruptedException\n+    {\n+        String tenantId = System.getenv(\"TENANT_ID\");\n+        String clientId = System.getenv(\"CLIENT_ID\");\n+        String clientSecret = System.getenv(\"CLIENT_SECRET\");\n+        String endpoint = System.getenv(\"DIGITAL_TWINS_ENDPOINT\");\n+        String digitalTwinId = System.getenv(\"DIGITAL_TWIN_ID\");\n+\n+        TokenCredential tokenCredential = new ClientSecretCredentialBuilder()\n+            .tenantId(tenantId)\n+            .clientId(clientId)\n+            .clientSecret(clientSecret)\n+            .build();\n+\n+        DigitalTwinsAsyncClient client = new DigitalTwinsClientBuilder()\n+            .tokenCredential(tokenCredential)\n+            .endpoint(endpoint)\n+            .buildAsyncClient();\n+\n+        Mono<DigitalTwinsGetByIdResponse> asyncResponse = client.getDigitalTwin(digitalTwinId);\n+\n+        // once the async thread completes, the digital twin will be printed, or an error will be printed\n+        asyncResponse.subscribe(\n+            result -> System.out.println(result.getValue()),\n+            error -> System.err.println(\"Failed to get digital twin with Id \" + digitalTwinId + \" due to error message \" + error.getMessage()));\n+\n+        //Wait for async thread to finish before ending this thread.\n+        Thread.sleep(3000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a2ff3755f8fd75f88652ac3108b3216df3252e8"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NDkxMzgz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13990#pullrequestreview-465491383", "createdAt": "2020-08-11T23:19:36Z", "commit": {"oid": "0a2ff3755f8fd75f88652ac3108b3216df3252e8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9780ca5f0e42be498edfce7024326508ace9d20b", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9780ca5f0e42be498edfce7024326508ace9d20b", "committedDate": "2020-08-12T00:25:51Z", "message": "cr comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NTE3NTA1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13990#pullrequestreview-465517505", "createdAt": "2020-08-12T00:38:13Z", "commit": {"oid": "9780ca5f0e42be498edfce7024326508ace9d20b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 580, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}