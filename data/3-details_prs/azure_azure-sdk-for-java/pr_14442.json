{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNTUwNDgw", "number": 14442, "title": "Add convenience layer to generated code for Event Grid Track 2", "bodyText": "This PR is based on #14440, and new commits start at 51b5908.\n\nCreate Clients and public event model classes on top of generated system events.\nWrite tests for publish and consumption of events\nDocument with readme, samples, javadocs", "createdAt": "2020-08-25T23:03:57Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14442", "merged": true, "mergeCommit": {"oid": "18528bdd315cc07525b57e17e731103566923d0c"}, "closed": true, "closedAt": "2020-09-05T00:41:52Z", "author": {"login": "Soreloser2"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwxLYzAH2gAyNDczNTUwNDgwOmZmOGY0MjcyMGM4YzE5OTQ1YjIwYTQwZTI3NjQ2MzBjMjM0Mzk5MjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFuWHpgH2gAyNDczNTUwNDgwOjY1NTgyNWJiZjE1M2UzNzA3MmMwYjgyNDc2MGMwMDkwYjUyZTlhNmE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ff8f42720c8c19945b20a40e2764630c23439925", "author": {"user": {"login": "Soreloser2", "name": "Soren Dahl"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ff8f42720c8c19945b20a40e2764630c23439925", "committedDate": "2020-07-01T21:32:14Z", "message": "Regenerate SDK from Autorest v4\n\nAutorest regenerated using up to date version for track 2\npom file incorporated to jacoco and dependencies for module handled\nissue around capitalization of etag discrepancy fixed\nno test coverage yet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12bf02a14a17935eedc451005cb9dfffb2b84de7", "author": {"user": {"login": "Soreloser2", "name": "Soren Dahl"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/12bf02a14a17935eedc451005cb9dfffb2b84de7", "committedDate": "2020-07-01T21:32:22Z", "message": "Regenerate SDK from Autorest v4\n\nAutorest regenerated using up to date version for track 2\npom file incorporated to jacoco and dependencies for module handled\nissue around capitalization of etag discrepancy fixed\nno test coverage yet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9327f4c135fd0f2ea65dc4609277ea142574518e", "author": {"user": {"login": "Soreloser2", "name": "Soren Dahl"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9327f4c135fd0f2ea65dc4609277ea142574518e", "committedDate": "2020-08-25T20:13:25Z", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c24cc38c8562964e71b6e8e19ee9b590aeaf8899", "author": {"user": {"login": "Soreloser2", "name": "Soren Dahl"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c24cc38c8562964e71b6e8e19ee9b590aeaf8899", "committedDate": "2020-08-25T21:58:29Z", "message": "EventGrid Track 2 Autogenerated\n\nAutogenerate EventGrid track 2 classes using the swagger. All files except EventGridPublisherImplTests.java, pom.xml, and the swagger readme.md are autogenerated."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51b59089a3618b0ad96e7922ccada6a7cd4cc4e7", "author": {"user": {"login": "Soreloser2", "name": "Soren Dahl"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/51b59089a3618b0ad96e7922ccada6a7cd4cc4e7", "committedDate": "2020-08-25T22:35:51Z", "message": "EventGrid Track 2 written code\n\nConvenience layer for EventGrid Track 2 on top of autogenerated code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d76ebbe45d068751fe0ed87e3f63564350d3daae", "author": {"user": {"login": "Soreloser2", "name": "Soren Dahl"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d76ebbe45d068751fe0ed87e3f63564350d3daae", "committedDate": "2020-08-26T18:36:41Z", "message": "Add Javadoc comments\n\nAdd a few missing javadoc comments and remove a few comments from private methods."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "153a22e9434562399a04cce1711dc58cf959ab4a", "author": {"user": {"login": "Soreloser2", "name": "Soren Dahl"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/153a22e9434562399a04cce1711dc58cf959ab4a", "committedDate": "2020-08-27T16:46:56Z", "message": "Merge in changes from autogenerated PR\n\ntest and pom edits mostly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b247b8ef8fc275e39877d6594c89e9f157f8274c", "author": {"user": {"login": "Soreloser2", "name": "Soren Dahl"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b247b8ef8fc275e39877d6594c89e9f157f8274c", "committedDate": "2020-08-27T17:52:46Z", "message": "Fix tests\n\nRename methods and use StepVerifier instead of blocking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecb6fe259d7342a9728c70d20aa3c3b5bbdf7952", "author": {"user": {"login": "Soreloser2", "name": "Soren Dahl"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ecb6fe259d7342a9728c70d20aa3c3b5bbdf7952", "committedDate": "2020-08-27T18:37:46Z", "message": "Add Changelog"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "52dcaf87e02a780cc6675fe9eea7aa4a58ba98cb", "author": {"user": {"login": "Soreloser2", "name": "Soren Dahl"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/52dcaf87e02a780cc6675fe9eea7aa4a58ba98cb", "committedDate": "2020-08-27T18:22:37Z", "message": "Add Changelog"}, "afterCommit": {"oid": "ecb6fe259d7342a9728c70d20aa3c3b5bbdf7952", "author": {"user": {"login": "Soreloser2", "name": "Soren Dahl"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ecb6fe259d7342a9728c70d20aa3c3b5bbdf7952", "committedDate": "2020-08-27T18:37:46Z", "message": "Add Changelog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "339867e438349062df35da8e933b890510f08e8d", "author": {"user": {"login": "Soreloser2", "name": "Soren Dahl"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/339867e438349062df35da8e933b890510f08e8d", "committedDate": "2020-08-28T19:10:03Z", "message": "Rework CloudEvent serialization\n\nDrop explicit support for non-JSON data. Modify/fix tests slightly."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3927dfb99bef27267138019ea16cd55350aed78f", "author": {"user": {"login": "Soreloser2", "name": "Soren Dahl"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3927dfb99bef27267138019ea16cd55350aed78f", "committedDate": "2020-08-28T23:10:41Z", "message": "Abbreviate SAS\n\nSharedAccessSignature -> SAS, refactor methods and classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b586b2b73a08d71661fdd813b66164653c5a35e2", "author": {"user": {"login": "Soreloser2", "name": "Soren Dahl"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b586b2b73a08d71661fdd813b66164653c5a35e2", "committedDate": "2020-09-01T16:52:54Z", "message": "Small formatting changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "177d8593ca8cda0c8b47c6355ca2805c8a7e5f6a", "author": {"user": {"login": "Soreloser2", "name": "Soren Dahl"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/177d8593ca8cda0c8b47c6355ca2805c8a7e5f6a", "committedDate": "2020-09-01T17:08:33Z", "message": "Pull autogenerated PR from master\n\nNow fewer files should be changed in this written pr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dbab7b4a47fd68183b3710aba9101a0a2ff50a9", "author": {"user": {"login": "Soreloser2", "name": "Soren Dahl"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0dbab7b4a47fd68183b3710aba9101a0a2ff50a9", "committedDate": "2020-09-01T22:58:27Z", "message": "Readme and changelog formatting issues\n\nMaven artifact not included since it hasn't published yet, some github links are broken since they point to folders that are included in this commit, however they should work once the changes are merged."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d5ef375e3442a5c8c1e0c8ed54b21410a6197a5", "author": {"user": {"login": "Soreloser2", "name": "Soren Dahl"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1d5ef375e3442a5c8c1e0c8ed54b21410a6197a5", "committedDate": "2020-09-03T23:40:57Z", "message": "Changed CustomEvent test\n\nconforms to live test expected custom event properties"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyOTMwOTYy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14442#pullrequestreview-482930962", "createdAt": "2020-09-04T20:46:30Z", "commit": {"oid": "1d5ef375e3442a5c8c1e0c8ed54b21410a6197a5"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMDo0NjozMFrOHNbFoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMTowMzowMlrOHNbbGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzNzM0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            method instead of `keyCredential'. \n          \n          \n            \n            method instead of `keyCredential`.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14442#discussion_r483837345", "createdAt": "2020-09-04T20:46:30Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/README.md", "diffHunk": "@@ -0,0 +1,313 @@\n+# Azure Event Grid client library for Java\n+\n+This project provides client tools or utilities in Java that make it easy to interact with [Azure Event Grid][eventgrid].\n+\n+Azure Event Grid is a fully-managed intelligent event routing service that provides reliable and scalable event delivery.\n+\n+The client library can be used to:\n+\n+- Publish events in the Event Grid, Cloud Event (1.0), or custom schema\n+- Decode and process events and event data at the event destination\n+- Generate shared access signatures that connect to an event topic\n+\n+[Sources][sources] |\n+[API Reference Documentation][javadocs] |\n+[Product Documentation][service_docs] | \n+[Samples][samples]\n+\n+\n+## Getting started\n+\n+### Install the Package\n+\n+To get the binaries of the official Microsoft Azure Event Grid Java SDK as distributed by Microsoft, ready for use \n+within your project, you can use [Maven][maven].\n+\n+[//]: # ({x-version-update-start;com.azure:azure-messaging-eventgrid;current})\n+```xml\n+<dependency>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-messaging-eventgrid</artifactId>\n+    <version>2.0.0-beta.1</version>\n+</dependency>\n+```\n+[//]: # ({x-version-update-end})\n+\n+### Prerequisites\n+\n+- [Java Development Kit (JDK) with version 8 or above][jdk]\n+- An [Azure subscription][azure_subscription]\n+- An [Event Grid][eventgrid] topic or domain. To create the resource, you can use [Azure portal][portal] or \n+[Azure CLI][cli]\n+\n+If you use the Azure CLI, replace `<your-resource-group-name>` and `<your-resource-name>` with your own unique names \n+and `<location>` with a valid Azure service location.\n+\n+#### Creating a topic ([Azure CLI][cli])\n+\n+```bash\n+az eventgrid topic create --location <location> --resource-group <your-resource-group-name> --name <your-resource-name>\n+```\n+\n+\n+#### Creating a domain ([Azure CLI][cli])\n+\n+```bash\n+az eventgrid domain create --location <location> --resource-group <your-resource-group-name> --name <your-resource-name>\n+```\n+\n+### Authenticate the Client\n+\n+In order to send events, we need an endpoint to send to and some authentication for the endpoint, either as a \n+key credential or a shared access signature (which will in turn need an endpoint and key).\n+The endpoint and key can both be obtained through [Azure Portal][portal] or [Azure CLI][cli].\n+\n+#### Endpoint\n+\n+The endpoint is listed on the dashboard of the topic or domain in the [Azure Portal][portal],\n+or can be obtained using the following command in [Azure CLI][cli].\n+```bash\n+az eventgrid topic show --name <your-resource-name> --resource-group <your-resource-group-name> --query \"endpoint\"\n+```\n+\n+#### Access Key\n+\n+The keys are listed in the \"Access Keys\" tab of the [Azure Portal][portal], or can be obtained\n+using the following command in [Azure CLI][cli].\n+\n+#### Creating a shared access signature\n+\n+A shared access signature is an alternative way to authenticate requests to an [Event Grid][eventgrid]\n+topic or domain. They behave similarly to keys, and require a key to produce, but can be configured\n+with an expiration time, so they can be used to restrict access to a topic or domain.\n+Here is sample code to produce a shared access signature that expires after 20 minutes:\n+\n+<!-- embedme ./src/samples/java/com/azure/messaging/eventgrid/ReadmeSamples.java#L101-L104 -->\n+```java\n+OffsetDateTime expiration = OffsetDateTime.now().plusMinutes(20);\n+String credentialString = EventGridSharedAccessSignatureCredential\n+    .createSharedAccessSignature(endpoint, expiration, new AzureKeyCredential(key));\n+EventGridSharedAccessSignatureCredential signature = new EventGridSharedAccessSignatureCredential(credentialString);\n+```\n+\n+#### Creating the Client\n+\n+In order to start sending events, we need an `EventGridPublisherClient`. Here is code to \n+create the synchronous and the asynchronous versions. Note that a shared access signature can\n+be used instead of a key in any of these samples by calling the `sharedAccessSignatureCredential` \n+method instead of `keyCredential'. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d5ef375e3442a5c8c1e0c8ed54b21410a6197a5"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzODIwMA==", "bodyText": "We should consider adding async overloads for these since dataDeserializer supports async deserialization.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14442#discussion_r483838200", "createdAt": "2020-09-04T20:49:13Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridEvent.java", "diffHunk": "@@ -0,0 +1,257 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+//\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.serializer.json.jackson.JacksonJsonSerializerBuilder;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.serializer.JacksonAdapter;\n+import com.azure.core.util.serializer.JsonSerializer;\n+import com.azure.core.util.serializer.TypeReference;\n+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.OffsetDateTime;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * The EventGridEvent model. This represents events in the EventGrid schema to be used with the EventGrid service.\n+ * @see EventGridPublisherAsyncClient\n+ * @see EventGridPublisherClient\n+ **/\n+@Fluent\n+public final class EventGridEvent {\n+\n+    private final com.azure.messaging.eventgrid.implementation.models.EventGridEvent event;\n+\n+    private boolean parsed = false;\n+\n+    private static final JsonSerializer deserializer = new JacksonJsonSerializerBuilder()\n+        .serializer(new JacksonAdapter().serializer() // this is a workaround to get the FlatteningDeserializer\n+            .registerModule(new JavaTimeModule())) // probably also change this to DateTimeDeserializer when/if it\n+        .build();                                  // becomes public in core\n+\n+    /**\n+     * Create a new instance of the EventGridEvent, with the given required fields.\n+     * @param subject     the subject of the event.\n+     * @param eventType   the type of the event, e.g. \"Contoso.Items.ItemReceived\".\n+     * @param dataVersion the version of the data sent along with the event.\n+     */\n+    public EventGridEvent(String subject, String eventType, String dataVersion) {\n+        if (CoreUtils.isNullOrEmpty(subject)) {\n+            throw new IllegalArgumentException(\"subject cannot be null or empty\");\n+        } else if (CoreUtils.isNullOrEmpty(eventType)) {\n+            throw new IllegalArgumentException(\"event type cannot be null or empty\");\n+        } else if (CoreUtils.isNullOrEmpty(dataVersion)) {\n+            throw new IllegalArgumentException(\"data version cannot be null or empty\");\n+        }\n+\n+        this.event = new com.azure.messaging.eventgrid.implementation.models.EventGridEvent()\n+            .setEventTime(OffsetDateTime.now())\n+            .setId(UUID.randomUUID().toString())\n+            .setSubject(subject)\n+            .setEventType(eventType)\n+            .setDataVersion(dataVersion);\n+    }\n+\n+    /**\n+     * Parse the EventGrid Event from a JSON string. This can be used to interpret the event at the event destination\n+     * from raw JSON into rich event(s).\n+     * @param json the JSON payload containing one or more events.\n+     *\n+     * @return all of the events in the payload parsed as CloudEvents.\n+     */\n+    public static List<EventGridEvent> parse(String json) {\n+        return Flux.fromArray(deserializer\n+            .deserialize(new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8)),\n+                TypeReference.createInstance(com.azure.messaging.eventgrid.implementation.models.EventGridEvent[].class))\n+        )\n+            .map(event1 -> {\n+                if (event1.getData() == null) {\n+                    return new EventGridEvent(event1);\n+                }\n+                ByteArrayOutputStream stream = new ByteArrayOutputStream();\n+                deserializer.serialize(stream, event1.getData());\n+                return new EventGridEvent(event1).setData(stream.toByteArray()); // use BinaryData instead?\n+            })\n+            .collectList()\n+            .block();\n+    }\n+\n+\n+    /**\n+     * Get the unique id associated with this event.\n+     * @return the id.\n+     */\n+    public String getId() {\n+        return this.event.getId();\n+    }\n+\n+    /**\n+     * Set the unique id of the event. Note that a random id has already been set by default.\n+     * @param id the unique id to set.\n+     *\n+     * @return the event itself.\n+     */\n+    public EventGridEvent setId(String id) {\n+        if (CoreUtils.isNullOrEmpty(id)) {\n+            throw new IllegalArgumentException(\"id cannot be null or empty\");\n+        }\n+        this.event.setId(id);\n+        return this;\n+    }\n+\n+    /**\n+     * Get the topic associated with this event if it is associated with a domain.\n+     * @return the topic, or null if the topic is not set (i.e. the event came from or is going to a domain).\n+     */\n+    public String getTopic() {\n+        return this.event.getTopic();\n+    }\n+\n+    /**\n+     * Set the topic associated with this event. Used to route events from domain endpoints.\n+     * @param topic the topic to set.\n+     *\n+     * @return the event itself.\n+     */\n+    public EventGridEvent setTopic(String topic) {\n+        this.event.setTopic(topic);\n+        return this;\n+    }\n+\n+    /**\n+     * Get the subject associated with this event.\n+     * @return the subject.\n+     */\n+    public String getSubject() {\n+        return this.event.getSubject();\n+    }\n+\n+\n+    /**\n+     * Get the data associated with this event. For use in a parsed event only.\n+     * @return If the event was parsed from a Json, this method will return the rich\n+     * system event data if it is a system event, and a {@code byte[]} otherwise, such as in the case of custom event\n+     * data.\n+     * @throws IllegalStateException If the event was not created through {@link EventGridEvent#parse(String)}.\n+     */\n+    public Object getData() {\n+        if (!parsed) {\n+            // data was set instead of parsed, throw error\n+            throw new IllegalStateException(\"This method should only be called on events created through the parse method\");\n+        }\n+        String eventType = SystemEventMappings.canonicalizeEventType(event.getEventType());\n+        if (SystemEventMappings.getSystemEventMappings().containsKey(eventType)) {\n+            // system event\n+            return deserializer.deserialize(new ByteArrayInputStream((byte[]) this.event.getData()),\n+                TypeReference.createInstance(SystemEventMappings.getSystemEventMappings().get(eventType)));\n+        }\n+        return event.getData();\n+    }\n+\n+    /**\n+     * Get the deserialized data property from the parsed event. The behavior is undefined if this method is called\n+     * on an event that was not created through the parse method.\n+     * @param clazz the class of the type to deserialize the data into.\n+     * @param <T>   the type to deserialize the data into.\n+     *\n+     * @return the data deserialized into the given type using a default deserializer.\n+     */\n+    public <T> T getData(Class<T> clazz) {\n+        return getData(clazz, deserializer);\n+    }\n+\n+    /**\n+     * Get the deserialized data property from the parsed event.\n+     * @param clazz            the class of the type to deserialize the data into.\n+     * @param dataDeserializer the deserializer to use.\n+     * @param <T>              the type to deserialize the data into.\n+     *\n+     * @return the data deserialized into the given type using the given deserializer.\n+     * @throws IllegalStateException If the event was not created through {@link EventGridEvent#parse(String)}.\n+     */\n+    public <T> T getData(Class<T> clazz, JsonSerializer dataDeserializer) {\n+        if (!parsed) {\n+            // data was set instead of parsed, throw exception because we don't know how the data relates to clazz\n+            throw new IllegalStateException(\"This method should only be called on events created through the parse method\");\n+        }\n+\n+        return dataDeserializer.deserialize(new ByteArrayInputStream((byte[]) this.event.getData()),\n+            TypeReference.createInstance(clazz));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d5ef375e3442a5c8c1e0c8ed54b21410a6197a5"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzOTE2NQ==", "bodyText": "Instead of hardcoding the version here, the builder (since the builder should have a setter for service version) should pass this to the constructor and the client should use that as an instance variable that will be returned here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14442#discussion_r483839165", "createdAt": "2020-09-04T20:52:06Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -0,0 +1,171 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImpl;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImplBuilder;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.azure.core.util.FluxUtil.withContext;\n+\n+/**\n+ * A service client that publishes events to an EventGrid topic or domain. Use {@link EventGridPublisherClientBuilder}\n+ * to create an instance of this client. This uses Project Reactor (https://projectreactor.io/) to handle asynchronous\n+ * programming.\n+ * @see EventGridEvent\n+ * @see CloudEvent\n+ */\n+@ServiceClient(builder = EventGridPublisherClientBuilder.class, isAsync = true)\n+public final class EventGridPublisherAsyncClient {\n+\n+    private final String hostname;\n+\n+    private final EventGridPublisherClientImpl impl;\n+\n+    EventGridPublisherAsyncClient(HttpPipeline pipeline, String hostname, SerializerAdapter serializerAdapter) {\n+        this.impl = new EventGridPublisherClientImplBuilder()\n+            .pipeline(pipeline)\n+            .serializerAdapter(serializerAdapter)\n+            .buildClient();\n+\n+        this.hostname = hostname;\n+    }\n+\n+    /**\n+     * Get the service version of the Rest API.\n+     * @return the Service version of the rest API\n+     */\n+    public EventGridServiceVersion getServiceVersion() {\n+        return EventGridServiceVersion.V2018_01_01;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d5ef375e3442a5c8c1e0c8ed54b21410a6197a5"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzOTgzNw==", "bodyText": "Why is this called publish? It's better to use the same terminology even for non-public methods.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14442#discussion_r483839837", "createdAt": "2020-09-04T20:54:08Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -0,0 +1,171 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImpl;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImplBuilder;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.azure.core.util.FluxUtil.withContext;\n+\n+/**\n+ * A service client that publishes events to an EventGrid topic or domain. Use {@link EventGridPublisherClientBuilder}\n+ * to create an instance of this client. This uses Project Reactor (https://projectreactor.io/) to handle asynchronous\n+ * programming.\n+ * @see EventGridEvent\n+ * @see CloudEvent\n+ */\n+@ServiceClient(builder = EventGridPublisherClientBuilder.class, isAsync = true)\n+public final class EventGridPublisherAsyncClient {\n+\n+    private final String hostname;\n+\n+    private final EventGridPublisherClientImpl impl;\n+\n+    EventGridPublisherAsyncClient(HttpPipeline pipeline, String hostname, SerializerAdapter serializerAdapter) {\n+        this.impl = new EventGridPublisherClientImplBuilder()\n+            .pipeline(pipeline)\n+            .serializerAdapter(serializerAdapter)\n+            .buildClient();\n+\n+        this.hostname = hostname;\n+    }\n+\n+    /**\n+     * Get the service version of the Rest API.\n+     * @return the Service version of the rest API\n+     */\n+    public EventGridServiceVersion getServiceVersion() {\n+        return EventGridServiceVersion.V2018_01_01;\n+    }\n+\n+    /**\n+     * Publishes the given EventGrid events to the set topic or domain.\n+     * @param events the EventGrid events to publish.\n+     *\n+     * @return the completion.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> sendEvents(Iterable<EventGridEvent> events) {\n+        return withContext(context -> publishEvents(events, context));\n+    }\n+\n+    Mono<Void> publishEvents(Iterable<EventGridEvent> events, Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d5ef375e3442a5c8c1e0c8ed54b21410a6197a5"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0MDM3Nw==", "bodyText": "Converting to inner types should happen lazily when the Mono is subscribed. Do the same at other places too where the list operations are performed eagerly.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14442#discussion_r483840377", "createdAt": "2020-09-04T20:55:39Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -0,0 +1,171 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImpl;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImplBuilder;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.azure.core.util.FluxUtil.withContext;\n+\n+/**\n+ * A service client that publishes events to an EventGrid topic or domain. Use {@link EventGridPublisherClientBuilder}\n+ * to create an instance of this client. This uses Project Reactor (https://projectreactor.io/) to handle asynchronous\n+ * programming.\n+ * @see EventGridEvent\n+ * @see CloudEvent\n+ */\n+@ServiceClient(builder = EventGridPublisherClientBuilder.class, isAsync = true)\n+public final class EventGridPublisherAsyncClient {\n+\n+    private final String hostname;\n+\n+    private final EventGridPublisherClientImpl impl;\n+\n+    EventGridPublisherAsyncClient(HttpPipeline pipeline, String hostname, SerializerAdapter serializerAdapter) {\n+        this.impl = new EventGridPublisherClientImplBuilder()\n+            .pipeline(pipeline)\n+            .serializerAdapter(serializerAdapter)\n+            .buildClient();\n+\n+        this.hostname = hostname;\n+    }\n+\n+    /**\n+     * Get the service version of the Rest API.\n+     * @return the Service version of the rest API\n+     */\n+    public EventGridServiceVersion getServiceVersion() {\n+        return EventGridServiceVersion.V2018_01_01;\n+    }\n+\n+    /**\n+     * Publishes the given EventGrid events to the set topic or domain.\n+     * @param events the EventGrid events to publish.\n+     *\n+     * @return the completion.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> sendEvents(Iterable<EventGridEvent> events) {\n+        return withContext(context -> publishEvents(events, context));\n+    }\n+\n+    Mono<Void> publishEvents(Iterable<EventGridEvent> events, Context context) {\n+        List<com.azure.messaging.eventgrid.implementation.models.EventGridEvent> implList = new ArrayList<>();\n+        for (EventGridEvent event : events) {\n+            implList.add(event.toImpl());\n+        }\n+        return impl.publishEventsAsync(hostname, implList, context);\n+    }\n+\n+    /**\n+     * Publishes the given cloud events to the set topic or domain.\n+     * @param events the cloud events to publish.\n+     *\n+     * @return the completion.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> sendCloudEvents(Iterable<CloudEvent> events) {\n+        return withContext(context -> publishCloudEvents(events, context));\n+    }\n+\n+    Mono<Void> publishCloudEvents(Iterable<CloudEvent> events, Context context) {\n+        List<com.azure.messaging.eventgrid.implementation.models.CloudEvent> implList = new ArrayList<>();\n+        for (CloudEvent event : events) {\n+            implList.add(event.toImpl());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d5ef375e3442a5c8c1e0c8ed54b21410a6197a5"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0MTI0MQ==", "bodyText": "Builder should not have @Fluent annotation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14442#discussion_r483841241", "createdAt": "2020-09-04T20:58:20Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherClientBuilder.java", "diffHunk": "@@ -0,0 +1,273 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.*;\n+import com.azure.core.http.policy.*;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.JacksonAdapter;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * A Builder class to create service clients that can publish events to EventGrid.\n+ * @see EventGridPublisherAsyncClient\n+ * @see EventGridEvent\n+ * @see CloudEvent\n+ */\n+@ServiceClientBuilder(serviceClients = {EventGridPublisherClient.class, EventGridPublisherAsyncClient.class})\n+@Fluent", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d5ef375e3442a5c8c1e0c8ed54b21410a6197a5"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0MTg3NQ==", "bodyText": "The method should be named credential to be consistent with other SDK builders.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14442#discussion_r483841875", "createdAt": "2020-09-04T21:00:06Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherClientBuilder.java", "diffHunk": "@@ -0,0 +1,273 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.*;\n+import com.azure.core.http.policy.*;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.JacksonAdapter;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * A Builder class to create service clients that can publish events to EventGrid.\n+ * @see EventGridPublisherAsyncClient\n+ * @see EventGridEvent\n+ * @see CloudEvent\n+ */\n+@ServiceClientBuilder(serviceClients = {EventGridPublisherClient.class, EventGridPublisherAsyncClient.class})\n+@Fluent\n+public final class EventGridPublisherClientBuilder {\n+\n+    private static final String AEG_SAS_KEY = \"aeg-sas-key\";\n+\n+    private static final String AEG_SAS_TOKEN = \"aeg-sas-token\";\n+\n+    private static final String EVENTGRID_PROPERTIES = \"azure-messaging-eventgrid.properties\";\n+    private static final String NAME = \"name\";\n+    private static final String VERSION = \"version\";\n+\n+    private final String clientName;\n+\n+    private final String clientVersion;\n+\n+    private final ClientLogger logger = new ClientLogger(EventGridPublisherClientBuilder.class);\n+\n+    private final List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+    private Configuration configuration;\n+\n+    private AzureKeyCredential keyCredential;\n+\n+    private EventGridSasCredential sasToken;\n+\n+    private String endpoint;\n+\n+    private HttpClient httpClient;\n+\n+    private HttpLogOptions httpLogOptions;\n+\n+    private HttpPipeline httpPipeline;\n+\n+    private RetryPolicy retryPolicy;\n+\n+    private SerializerAdapter serializer;\n+\n+    /**\n+     * Construct a new instance with default building settings. The endpoint and one credential method must be set\n+     * in order for the client to be built.\n+     */\n+    public EventGridPublisherClientBuilder() {\n+        this.httpLogOptions = new HttpLogOptions();\n+        Map<String, String> properties = CoreUtils.getProperties(EVENTGRID_PROPERTIES);\n+        clientName = properties.getOrDefault(NAME, \"UnknownName\");\n+        clientVersion = properties.getOrDefault(VERSION, \"UnknownVersion\");\n+    }\n+\n+\n+    /**\n+     * Build a publisher client with asynchronous publishing methods and the current settings. An endpoint must be set,\n+     * and either a pipeline with correct authentication must be set, or a credential must be set in the form of\n+     * an {@link EventGridSasCredential} or a {@link AzureKeyCredential} at the respective methods.\n+     * All other settings have defaults and are optional.\n+     * @return a publisher client with asynchronous publishing methods.\n+     */\n+    public EventGridPublisherAsyncClient buildAsyncClient() {\n+        String hostname;\n+        try {\n+            hostname = new URL(Objects.requireNonNull(endpoint, \"endpoint cannot be null\")).getHost();\n+        } catch (MalformedURLException e) {\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\"Cannot parse endpoint\"));\n+        }\n+\n+        SerializerAdapter buildSerializer = serializer == null ?\n+            JacksonAdapter.createDefaultSerializerAdapter() :\n+            serializer;\n+\n+        if (httpPipeline != null) {\n+            return new EventGridPublisherAsyncClient(httpPipeline, hostname, buildSerializer);\n+        }\n+\n+        Configuration buildConfiguration = (configuration == null)\n+            ? Configuration.getGlobalConfiguration()\n+            : configuration;\n+\n+        // Closest to API goes first, closest to wire goes last.\n+        final List<HttpPipelinePolicy> httpPipelinePolicies = new ArrayList<>();\n+\n+        httpPipelinePolicies.add(new UserAgentPolicy(httpLogOptions.getApplicationId(), clientName, clientVersion,\n+            buildConfiguration));\n+        httpPipelinePolicies.add(new RequestIdPolicy());\n+\n+        HttpPolicyProviders.addBeforeRetryPolicies(httpPipelinePolicies);\n+        httpPipelinePolicies.add(retryPolicy == null ? new RetryPolicy() : retryPolicy);\n+\n+        httpPipelinePolicies.add(new AddDatePolicy());\n+\n+        // Using token before key if both are set\n+        if (sasToken != null) {\n+            httpPipelinePolicies.add((context, next) -> {\n+                context.getHttpRequest().getHeaders().put(AEG_SAS_TOKEN, sasToken.getSas());\n+                return next.process();\n+            });\n+        } else {\n+            httpPipelinePolicies.add(new AzureKeyCredentialPolicy(AEG_SAS_KEY, keyCredential));\n+        }\n+\n+        httpPipelinePolicies.addAll(policies);\n+\n+        HttpPolicyProviders.addAfterRetryPolicies(httpPipelinePolicies);\n+\n+        httpPipelinePolicies.add(new HttpLoggingPolicy(httpLogOptions));\n+\n+        HttpPipeline buildPipeline = new HttpPipelineBuilder()\n+            .httpClient(httpClient)\n+            .policies(httpPipelinePolicies.toArray(new HttpPipelinePolicy[0]))\n+            .build();\n+\n+\n+        return new EventGridPublisherAsyncClient(buildPipeline, hostname, buildSerializer);\n+    }\n+\n+    /**\n+     * Build a publisher client with synchronous publishing methods and the current settings. Endpoint and a credential\n+     * must be set (either keyCredential or sharedAccessSignatureCredential), all other settings have defaults and/or are optional.\n+     * Note that currently the asynchronous client created by the method above is the recommended version for higher\n+     * performance, as the synchronous client simply blocks on the same asynchronous calls.\n+     * @return a publisher client with synchronous publishing methods.\n+     */\n+    public EventGridPublisherClient buildClient() {\n+        return new EventGridPublisherClient(buildAsyncClient());\n+    }\n+\n+    /**\n+     * Add a policy to the current pipeline.\n+     * @param httpPipelinePolicy the policy to add.\n+     *\n+     * @return the builder itself.\n+     */\n+    public EventGridPublisherClientBuilder addPolicy(HttpPipelinePolicy httpPipelinePolicy) {\n+        this.policies.add(Objects.requireNonNull(httpPipelinePolicy));\n+        return this;\n+    }\n+\n+    /**\n+     * Add a custom retry policy to the pipeline. The default is {@link RetryPolicy#RetryPolicy()}\n+     * @param retryPolicy the retry policy to add.\n+     *\n+     * @return the builder itself.\n+     */\n+    public EventGridPublisherClientBuilder retryPolicy(RetryPolicy retryPolicy) {\n+        this.retryPolicy = retryPolicy;\n+        return this;\n+    }\n+\n+    /**\n+     * Set the configuration of HTTP and Azure values. A default is already set.\n+     * @param configuration the configuration to use.\n+     *\n+     * @return the builder itself.\n+     */\n+    public EventGridPublisherClientBuilder configuration(Configuration configuration) {\n+        this.configuration = configuration;\n+        return this;\n+    }\n+\n+    /**\n+     * Set the domain or topic authentication using a key obtained from Azure CLI, Azure portal, or the ARM SDKs.\n+     * @param credential the key credential to use to authorize the publisher client.\n+     *\n+     * @return the builder itself.\n+     */\n+    public EventGridPublisherClientBuilder keyCredential(AzureKeyCredential credential) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d5ef375e3442a5c8c1e0c8ed54b21410a6197a5"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0MjI2NQ==", "bodyText": "Use logs instead of e.printStackTrace().", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14442#discussion_r483842265", "createdAt": "2020-09-04T21:01:13Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridSasCredential.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.CoreUtils;\n+\n+import javax.crypto.Mac;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Base64;\n+\n+/**\n+ * A way to use a generated shared access signature as a credential to publish events to a topic through a client.\n+ */\n+public final class EventGridSasCredential {\n+\n+    private String sas;\n+\n+    /**\n+     * Generate a shared access signature to provide time-limited authentication for requests to the Event Grid\n+     * service.\n+     * @param endpoint       the endpoint of the Event Grid topic or domain.\n+     * @param expirationTime the time in which the signature should expire, no longer providing authentication.\n+     * @param keyCredential  the access key obtained from the Event Grid topic or domain.\n+     *\n+     * @return the shared access signature string which can be used to construct an instance of\n+     * {@link EventGridSasCredential}.\n+     */\n+    public static String createSas(String endpoint, OffsetDateTime expirationTime,\n+                                   AzureKeyCredential keyCredential) {\n+        try {\n+            String resKey = \"r\";\n+            String expKey = \"e\";\n+            String signKey = \"s\";\n+\n+            Charset charset = StandardCharsets.UTF_8;\n+            String encodedResource = URLEncoder.encode(endpoint, charset.name());\n+            String encodedExpiration = URLEncoder.encode(expirationTime.atZoneSameInstant(ZoneOffset.UTC).format(\n+                DateTimeFormatter.ofPattern(\"M/d/yyyy h:m:s a\")),\n+                charset.name());\n+\n+            String unsignedSas = String.format(\"%s=%s&%s=%s\", resKey, encodedResource, expKey, encodedExpiration);\n+\n+            Mac hmac = Mac.getInstance(\"hmacSHA256\");\n+            hmac.init(new SecretKeySpec(Base64.getDecoder().decode(keyCredential.getKey()), \"hmacSHA256\"));\n+            String signature = new String(Base64.getEncoder().encode(\n+                hmac.doFinal(unsignedSas.getBytes(charset))),\n+                charset);\n+\n+            String encodedSignature = URLEncoder.encode(signature, charset.name());\n+\n+            return String.format(\"%s&%s=%s\", unsignedSas, signKey, encodedSignature);\n+\n+        } catch (NoSuchAlgorithmException | UnsupportedEncodingException | InvalidKeyException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d5ef375e3442a5c8c1e0c8ed54b21410a6197a5"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0MjMzNw==", "bodyText": "Log and throw.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14442#discussion_r483842337", "createdAt": "2020-09-04T21:01:29Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridSasCredential.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.CoreUtils;\n+\n+import javax.crypto.Mac;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Base64;\n+\n+/**\n+ * A way to use a generated shared access signature as a credential to publish events to a topic through a client.\n+ */\n+public final class EventGridSasCredential {\n+\n+    private String sas;\n+\n+    /**\n+     * Generate a shared access signature to provide time-limited authentication for requests to the Event Grid\n+     * service.\n+     * @param endpoint       the endpoint of the Event Grid topic or domain.\n+     * @param expirationTime the time in which the signature should expire, no longer providing authentication.\n+     * @param keyCredential  the access key obtained from the Event Grid topic or domain.\n+     *\n+     * @return the shared access signature string which can be used to construct an instance of\n+     * {@link EventGridSasCredential}.\n+     */\n+    public static String createSas(String endpoint, OffsetDateTime expirationTime,\n+                                   AzureKeyCredential keyCredential) {\n+        try {\n+            String resKey = \"r\";\n+            String expKey = \"e\";\n+            String signKey = \"s\";\n+\n+            Charset charset = StandardCharsets.UTF_8;\n+            String encodedResource = URLEncoder.encode(endpoint, charset.name());\n+            String encodedExpiration = URLEncoder.encode(expirationTime.atZoneSameInstant(ZoneOffset.UTC).format(\n+                DateTimeFormatter.ofPattern(\"M/d/yyyy h:m:s a\")),\n+                charset.name());\n+\n+            String unsignedSas = String.format(\"%s=%s&%s=%s\", resKey, encodedResource, expKey, encodedExpiration);\n+\n+            Mac hmac = Mac.getInstance(\"hmacSHA256\");\n+            hmac.init(new SecretKeySpec(Base64.getDecoder().decode(keyCredential.getKey()), \"hmacSHA256\"));\n+            String signature = new String(Base64.getEncoder().encode(\n+                hmac.doFinal(unsignedSas.getBytes(charset))),\n+                charset);\n+\n+            String encodedSignature = URLEncoder.encode(signature, charset.name());\n+\n+            return String.format(\"%s&%s=%s\", unsignedSas, signKey, encodedSignature);\n+\n+        } catch (NoSuchAlgorithmException | UnsupportedEncodingException | InvalidKeyException e) {\n+            e.printStackTrace();\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Create an instance of this object to authenticate calls to the EventGrid service.\n+     * @param sas the shared access signature to use.\n+     */\n+    public EventGridSasCredential(String sas) {\n+        if (CoreUtils.isNullOrEmpty(sas)) {\n+            throw new IllegalArgumentException(\"the access signature cannot be null or empty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d5ef375e3442a5c8c1e0c8ed54b21410a6197a5"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0MjU3OA==", "bodyText": "Missing javadoc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14442#discussion_r483842578", "createdAt": "2020-09-04T21:02:15Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/SystemEventMappings.java", "diffHunk": "@@ -0,0 +1,382 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.messaging.eventgrid.systemevents.*;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public final class SystemEventMappings {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d5ef375e3442a5c8c1e0c8ed54b21410a6197a5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0Mjg0Mw==", "bodyText": "Add javadocs for all samples to explain what the sample does.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14442#discussion_r483842843", "createdAt": "2020-09-04T21:03:02Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/samples/java/com/azure/messaging/eventgrid/ClassTime.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.azure.messaging.eventgrid;\n+\n+import java.time.LocalDate;\n+import java.time.LocalTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.Random;\n+\n+public class ClassTime {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d5ef375e3442a5c8c1e0c8ed54b21410a6197a5"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyOTM4NzY1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14442#pullrequestreview-482938765", "createdAt": "2020-09-04T21:05:26Z", "commit": {"oid": "1d5ef375e3442a5c8c1e0c8ed54b21410a6197a5"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyOTkzOTk5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14442#pullrequestreview-482993999", "createdAt": "2020-09-04T22:25:22Z", "commit": {"oid": "1d5ef375e3442a5c8c1e0c8ed54b21410a6197a5"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjoyNToyMlrOHNc7aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjozMzoyM1rOHNdCEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2NzQ5Ng==", "bodyText": "Generally I think we try to avoid * imports, I know I had to go dive into IntelliJ settings to make it stop doing this by default:\nSettings > Editor > Code Style > Java > set both count to use import with '*' settings to 99.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14442#discussion_r483867496", "createdAt": "2020-09-04T22:25:22Z", "author": {"login": "bsiegel"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/CloudEvent.java", "diffHunk": "@@ -0,0 +1,325 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+//\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.serializer.json.jackson.JacksonJsonSerializerBuilder;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.serializer.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d5ef375e3442a5c8c1e0c8ed54b21410a6197a5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2ODAxOA==", "bodyText": "I think Srikanta already called this out, but instead of throwing directly, we should get a ClientLogger instance and call throw logger.logExceptionAsWarning/Error(...) instead.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14442#discussion_r483868018", "createdAt": "2020-09-04T22:27:43Z", "author": {"login": "bsiegel"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/CloudEvent.java", "diffHunk": "@@ -0,0 +1,325 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+//\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.serializer.json.jackson.JacksonJsonSerializerBuilder;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.serializer.*;\n+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.OffsetDateTime;\n+import java.util.*;\n+\n+/**\n+ * The CloudEvent model. This represents a cloud event as specified by the CNCF, for sending event based data.\n+ * @see EventGridPublisherAsyncClient\n+ * @see EventGridPublisherClient\n+ **/\n+@Fluent\n+public final class CloudEvent {\n+\n+    private static final String SPEC_VERSION = \"1.0\";\n+\n+    private final com.azure.messaging.eventgrid.implementation.models.CloudEvent cloudEvent;\n+\n+    private boolean parsed = false;\n+\n+    private static final JsonSerializer deserializer = new JacksonJsonSerializerBuilder()\n+        .serializer(new JacksonAdapter().serializer() // this is a workaround to get the FlatteningDeserializer\n+            .registerModule(new JavaTimeModule())) // probably also change this to DateTimeDeserializer when/if it\n+        .build();                                  // becomes public in core\n+\n+    /**\n+     * Create an instance of a CloudEvent. The source and type are required fields to publish.\n+     * @param source a URI identifying the origin of the event.\n+     * @param type   the type of event, e.g. \"Contoso.Items.ItemReceived\".\n+     */\n+    public CloudEvent(String source, String type) {\n+        if (CoreUtils.isNullOrEmpty(source)) {\n+            throw new IllegalArgumentException(\"Source cannot be null or empty\");\n+        } else if (CoreUtils.isNullOrEmpty(type)) {\n+            throw new IllegalArgumentException(\"type cannot be null or empty\");\n+        }\n+\n+        this.cloudEvent = new com.azure.messaging.eventgrid.implementation.models.CloudEvent()\n+            .setId(UUID.randomUUID().toString())\n+            .setSource(source)\n+            .setType(type)\n+            .setSpecversion(SPEC_VERSION);\n+    }\n+\n+    /**\n+     * Parse the Cloud Event from a JSON string. This can be used to interpret the event at the event destination\n+     * from raw JSON into rich event(s).\n+     * @param json the JSON payload containing one or more events.\n+     *\n+     * @return all of the events in the payload parsed as CloudEvents.\n+     */\n+    public static List<CloudEvent> parse(String json) {\n+        return Flux.fromArray(deserializer\n+            .deserialize(new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8)),\n+                TypeReference.createInstance(com.azure.messaging.eventgrid.implementation.models.CloudEvent[].class))\n+        )\n+            .map(event1 -> {\n+                if (event1.getData() != null) {\n+                    ByteArrayOutputStream stream = new ByteArrayOutputStream();\n+                    deserializer.serialize(stream, event1.getData());\n+                    return new CloudEvent(event1).setData(stream.toByteArray()); // use BinaryData instead?\n+                } else { // both null, don't set data and keep null\n+                    return new CloudEvent(event1);\n+                }\n+            })\n+            .collectList()\n+            .block();\n+    }\n+\n+    /**\n+     * Get the id of the cloud event.\n+     * @return the id.\n+     */\n+    public String getId() {\n+        return this.cloudEvent.getId();\n+    }\n+\n+    /**\n+     * Set a custom id. Note that a random id is already set by default.\n+     * @param id the id to set.\n+     *\n+     * @return the cloud event itself.\n+     */\n+    public CloudEvent setId(String id) {\n+        if (CoreUtils.isNullOrEmpty(id)) {\n+            throw new IllegalArgumentException(\"id cannot be null or empty\");\n+        }\n+        this.cloudEvent.setId(id);\n+        return this;\n+    }\n+\n+    /**\n+     * Get the URI source of the event.\n+     * @return the source.\n+     */\n+    public String getSource() {\n+        return this.cloudEvent.getSource();\n+    }\n+\n+    /**\n+     * Get the data associated with this event. For use in a parsed event only.\n+     * @return If the event was parsed from a Json, this method will return the rich\n+     * system event data if it is a system event, and a {@code byte[]} otherwise, such as in the case of custom event\n+     * data, including data set through {@link CloudEvent#setData(byte[], String)}.\n+     * @throws IllegalStateException If the event was not created through {@link EventGridEvent#parse(String)}.\n+     */\n+    public Object getData() {\n+        if (!parsed) {\n+            // data was set instead of parsed, throw error\n+            throw new IllegalStateException(\"This method should only be called on events created through the parse method\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d5ef375e3442a5c8c1e0c8ed54b21410a6197a5"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2OTIwMA==", "bodyText": "Make sure all source files have the copyright & license header.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14442#discussion_r483869200", "createdAt": "2020-09-04T22:33:23Z", "author": {"login": "bsiegel"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/samples/java/com/azure/messaging/eventgrid/ClassTime.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.azure.messaging.eventgrid;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d5ef375e3442a5c8c1e0c8ed54b21410a6197a5"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5ae4ad3b07604409b24f75f2dfc1bfd5d9ec8e3", "author": {"user": {"login": "Soreloser2", "name": "Soren Dahl"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f5ae4ad3b07604409b24f75f2dfc1bfd5d9ec8e3", "committedDate": "2020-09-04T23:03:30Z", "message": "Address review comments\n\nVariety of changes, major ones include:\n- Async methods on generic getData\n- Lazy list creation for send methods\n- Credential methods both renamed to `credential`\n- Logging errors instead of throwing\n- Additional missing javadoc comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMDA1MDg5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14442#pullrequestreview-483005089", "createdAt": "2020-09-04T23:16:49Z", "commit": {"oid": "f5ae4ad3b07604409b24f75f2dfc1bfd5d9ec8e3"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMzoxNjo0OVrOHNdjEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMzozMjo0M1rOHNduuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3NzY1MA==", "bodyText": "Enumerate all imports instead of using *.  Wonder why this is happening on generated code though. Is this how autorest generated? If that's the case, let me know. I will take a look.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14442#discussion_r483877650", "createdAt": "2020-09-04T23:16:49Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/CloudEvent.java", "diffHunk": "@@ -0,0 +1,361 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+//\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.serializer.json.jackson.JacksonJsonSerializerBuilder;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.JacksonAdapter;\n+import com.azure.core.util.serializer.JsonSerializer;\n+import com.azure.core.util.serializer.TypeReference;\n+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.OffsetDateTime;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5ae4ad3b07604409b24f75f2dfc1bfd5d9ec8e3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3ODIxOA==", "bodyText": "For async methods, exceptions should be passed through the publisher. Use FluxUtil.monoError().", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14442#discussion_r483878218", "createdAt": "2020-09-04T23:19:35Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridEvent.java", "diffHunk": "@@ -0,0 +1,291 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+//\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.serializer.json.jackson.JacksonJsonSerializerBuilder;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.JacksonAdapter;\n+import com.azure.core.util.serializer.JsonSerializer;\n+import com.azure.core.util.serializer.TypeReference;\n+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.OffsetDateTime;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * The EventGridEvent model. This represents events in the EventGrid schema to be used with the EventGrid service.\n+ * @see EventGridPublisherAsyncClient\n+ * @see EventGridPublisherClient\n+ **/\n+@Fluent\n+public final class EventGridEvent {\n+\n+    private final com.azure.messaging.eventgrid.implementation.models.EventGridEvent event;\n+\n+    private static final ClientLogger logger = new ClientLogger(EventGridEvent.class);\n+\n+    private boolean parsed = false;\n+\n+    private static final JsonSerializer deserializer = new JacksonJsonSerializerBuilder()\n+        .serializer(new JacksonAdapter().serializer() // this is a workaround to get the FlatteningDeserializer\n+            .registerModule(new JavaTimeModule())) // probably also change this to DateTimeDeserializer when/if it\n+        .build();                                  // becomes public in core\n+\n+    /**\n+     * Create a new instance of the EventGridEvent, with the given required fields.\n+     * @param subject     the subject of the event.\n+     * @param eventType   the type of the event, e.g. \"Contoso.Items.ItemReceived\".\n+     * @param dataVersion the version of the data sent along with the event.\n+     */\n+    public EventGridEvent(String subject, String eventType, String dataVersion) {\n+        if (CoreUtils.isNullOrEmpty(subject)) {\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\"subject cannot be null or empty\"));\n+        } else if (CoreUtils.isNullOrEmpty(eventType)) {\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\"event type cannot be null or empty\"));\n+        } else if (CoreUtils.isNullOrEmpty(dataVersion)) {\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\"data version cannot be null or empty\"));\n+        }\n+\n+        this.event = new com.azure.messaging.eventgrid.implementation.models.EventGridEvent()\n+            .setEventTime(OffsetDateTime.now())\n+            .setId(UUID.randomUUID().toString())\n+            .setSubject(subject)\n+            .setEventType(eventType)\n+            .setDataVersion(dataVersion);\n+    }\n+\n+    /**\n+     * Parse the EventGrid Event from a JSON string. This can be used to interpret the event at the event destination\n+     * from raw JSON into rich event(s).\n+     * @param json the JSON payload containing one or more events.\n+     *\n+     * @return all of the events in the payload parsed as CloudEvents.\n+     */\n+    public static List<EventGridEvent> parse(String json) {\n+        return Flux.fromArray(deserializer\n+            .deserialize(new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8)),\n+                TypeReference.createInstance(com.azure.messaging.eventgrid.implementation.models.EventGridEvent[].class))\n+            )\n+            .map(event1 -> {\n+                if (event1.getData() == null) {\n+                    return new EventGridEvent(event1);\n+                }\n+                ByteArrayOutputStream stream = new ByteArrayOutputStream();\n+                deserializer.serialize(stream, event1.getData());\n+                return new EventGridEvent(event1).setData(stream.toByteArray()); // use BinaryData instead?\n+            })\n+            .collectList()\n+            .block();\n+    }\n+\n+\n+    /**\n+     * Get the unique id associated with this event.\n+     * @return the id.\n+     */\n+    public String getId() {\n+        return this.event.getId();\n+    }\n+\n+    /**\n+     * Set the unique id of the event. Note that a random id has already been set by default.\n+     * @param id the unique id to set.\n+     *\n+     * @return the event itself.\n+     */\n+    public EventGridEvent setId(String id) {\n+        if (CoreUtils.isNullOrEmpty(id)) {\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\"id cannot be null or empty\"));\n+        }\n+        this.event.setId(id);\n+        return this;\n+    }\n+\n+    /**\n+     * Get the topic associated with this event if it is associated with a domain.\n+     * @return the topic, or null if the topic is not set (i.e. the event came from or is going to a domain).\n+     */\n+    public String getTopic() {\n+        return this.event.getTopic();\n+    }\n+\n+    /**\n+     * Set the topic associated with this event. Used to route events from domain endpoints.\n+     * @param topic the topic to set.\n+     *\n+     * @return the event itself.\n+     */\n+    public EventGridEvent setTopic(String topic) {\n+        this.event.setTopic(topic);\n+        return this;\n+    }\n+\n+    /**\n+     * Get the subject associated with this event.\n+     * @return the subject.\n+     */\n+    public String getSubject() {\n+        return this.event.getSubject();\n+    }\n+\n+\n+    /**\n+     * Get the data associated with this event. For use in a parsed event only.\n+     * @return If the event was parsed from a Json, this method will return the rich\n+     * system event data if it is a system event, and a {@code byte[]} otherwise, such as in the case of custom event\n+     * data.\n+     * @throws IllegalStateException If the event was not created through {@link EventGridEvent#parse(String)}.\n+     */\n+    public Object getData() {\n+        if (!parsed) {\n+            // data was set instead of parsed, throw error\n+            throw logger.logExceptionAsError(new IllegalStateException(\n+                \"This method should only be called on events created through the parse method\"));\n+        }\n+        String eventType = SystemEventMappings.canonicalizeEventType(event.getEventType());\n+        if (SystemEventMappings.getSystemEventMappings().containsKey(eventType)) {\n+            // system event\n+            return deserializer.deserialize(new ByteArrayInputStream((byte[]) this.event.getData()),\n+                TypeReference.createInstance(SystemEventMappings.getSystemEventMappings().get(eventType)));\n+        }\n+        return event.getData();\n+    }\n+\n+    /**\n+     * Get the deserialized data property from the parsed event. The behavior is undefined if this method is called\n+     * on an event that was not created through the parse method.\n+     * @param clazz the class of the type to deserialize the data into.\n+     * @param <T>   the type to deserialize the data into.\n+     *\n+     * @return the data deserialized into the given type using a default deserializer.\n+     * @throws IllegalStateException If the event was not created through {@link EventGridEvent#parse(String)}.\n+     */\n+    public <T> T getData(Class<T> clazz) {\n+        return getDataAsync(clazz, deserializer).block();\n+    }\n+\n+    /**\n+     * Get the deserialized data property from the parsed event.\n+     * @param clazz the class of the type to deserialize the data into.\n+     * @param <T>   the type to deserialize the data into.\n+     *\n+     * @return the data deserialized into the given type using a default deserializer, delivered asynchronously through\n+     * a {@link Mono}.\n+     * @throws IllegalStateException If the event was not created through {@link EventGridEvent#parse(String)}.\n+     */\n+    public <T> Mono<T> getDataAsync(Class<T> clazz) {\n+        return getDataAsync(clazz, deserializer);\n+    }\n+\n+    /**\n+     * Get the deserialized data property from the parsed event.\n+     * @param clazz            the class of the type to deserialize the data into.\n+     * @param dataDeserializer the deserializer to use.\n+     * @param <T>              the type to deserialize the data into.\n+     *\n+     * @return the data deserialized into the given type using the given deserializer.\n+     * @throws IllegalStateException If the event was not created through {@link EventGridEvent#parse(String)}.\n+     */\n+    public <T> T getData(Class<T> clazz, JsonSerializer dataDeserializer) {\n+        return getDataAsync(clazz, dataDeserializer).block();\n+    }\n+\n+    /**\n+     * Get the deserialized data property from the parsed event.\n+     * @param clazz            the class of the type to deserialize the data into.\n+     * @param dataDeserializer the deserializer to use.\n+     * @param <T>              the type to deserialize the data into.\n+     *\n+     * @return the data deserialized into the given type using the given deserializer, delivered asynchronously through\n+     * a {@link Mono}.\n+     * @throws IllegalStateException If the event was not created through {@link EventGridEvent#parse(String)}.\n+     */\n+    public <T> Mono<T> getDataAsync(Class<T> clazz, JsonSerializer dataDeserializer) {\n+        if (!parsed) {\n+            // data was set instead of parsed, throw exception because we don't know how the data relates to clazz\n+            throw logger.logExceptionAsError(new IllegalStateException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5ae4ad3b07604409b24f75f2dfc1bfd5d9ec8e3"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3OTQxOA==", "bodyText": "Unfortunately, we'll have to iterate through the collection twice - once to convert Iterable to list and then when serializing. This impacts performance. Not sure, if we can avoid this without changing the API to take a List instead.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14442#discussion_r483879418", "createdAt": "2020-09-04T23:25:34Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -0,0 +1,164 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImpl;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImplBuilder;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import static com.azure.core.util.FluxUtil.withContext;\n+\n+/**\n+ * A service client that publishes events to an EventGrid topic or domain. Use {@link EventGridPublisherClientBuilder}\n+ * to create an instance of this client. This uses Project Reactor (https://projectreactor.io/) to handle asynchronous\n+ * programming.\n+ * @see EventGridEvent\n+ * @see CloudEvent\n+ */\n+@ServiceClient(builder = EventGridPublisherClientBuilder.class, isAsync = true)\n+public final class EventGridPublisherAsyncClient {\n+\n+    private final String hostname;\n+\n+    private final EventGridPublisherClientImpl impl;\n+\n+    private final EventGridServiceVersion serviceVersion;\n+\n+    EventGridPublisherAsyncClient(HttpPipeline pipeline, String hostname, SerializerAdapter serializerAdapter,\n+                                  EventGridServiceVersion serviceVersion) {\n+        this.impl = new EventGridPublisherClientImplBuilder()\n+            .pipeline(pipeline)\n+            .serializerAdapter(serializerAdapter)\n+            .buildClient();\n+\n+        // currently the service version is hardcoded into the Impl client, but once another service version gets\n+        // released we should add this to the impl builder options\n+        this.serviceVersion = serviceVersion;\n+\n+        this.hostname = hostname;\n+    }\n+\n+    /**\n+     * Get the service version of the Rest API.\n+     * @return the Service version of the rest API\n+     */\n+    public EventGridServiceVersion getServiceVersion() {\n+        return this.serviceVersion;\n+    }\n+\n+    /**\n+     * Publishes the given EventGrid events to the set topic or domain.\n+     * @param events the EventGrid events to publish.\n+     *\n+     * @return the completion.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> sendEvents(Iterable<EventGridEvent> events) {\n+        return withContext(context -> sendEvents(events, context));\n+    }\n+\n+    Mono<Void> sendEvents(Iterable<EventGridEvent> events, Context context) {\n+        return Flux.fromIterable(events)\n+            .map(EventGridEvent::toImpl)\n+            .collectList()\n+            .flatMap(list -> this.impl.publishEventsAsync(this.hostname, list, context));\n+    }\n+\n+    /**\n+     * Publishes the given cloud events to the set topic or domain.\n+     * @param events the cloud events to publish.\n+     *\n+     * @return the completion.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> sendCloudEvents(Iterable<CloudEvent> events) {\n+        return withContext(context -> sendCloudEvents(events, context));\n+    }\n+\n+    Mono<Void> sendCloudEvents(Iterable<CloudEvent> events, Context context) {\n+        return Flux.fromIterable(events)\n+            .map(CloudEvent::toImpl)\n+            .collectList()\n+            .flatMap(list -> this.impl.publishCloudEventEventsAsync(this.hostname, list, context));\n+    }\n+\n+    /**\n+     * Publishes the given custom events to the set topic or domain.\n+     * @param events the custom events to publish.\n+     *\n+     * @return the completion.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> sendCustomEvents(Iterable<Object> events) {\n+        return withContext(context -> sendCustomEvents(events, context));\n+    }\n+\n+    Mono<Void> sendCustomEvents(Iterable<Object> events, Context context) {\n+        return Flux.fromIterable(events)\n+            .collectList()\n+            .flatMap(list -> this.impl.publishCustomEventEventsAsync(this.hostname, list, context));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5ae4ad3b07604409b24f75f2dfc1bfd5d9ec8e3"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3OTY3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new RuntimeException(logger.logThrowableAsError(e));\n          \n          \n            \n                        throw logger.logThrowableAsError(new RuntimeException(e));", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14442#discussion_r483879678", "createdAt": "2020-09-04T23:26:59Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridSasCredential.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import javax.crypto.Mac;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Base64;\n+\n+/**\n+ * A way to use a generated shared access signature as a credential to publish events to a topic through a client.\n+ */\n+public final class EventGridSasCredential {\n+\n+    private String sas;\n+\n+    private static final ClientLogger logger = new ClientLogger(EventGridSasCredential.class);\n+\n+    /**\n+     * Generate a shared access signature to provide time-limited authentication for requests to the Event Grid\n+     * service.\n+     * @param endpoint       the endpoint of the Event Grid topic or domain.\n+     * @param expirationTime the time in which the signature should expire, no longer providing authentication.\n+     * @param keyCredential  the access key obtained from the Event Grid topic or domain.\n+     *\n+     * @return the shared access signature string which can be used to construct an instance of\n+     * {@link EventGridSasCredential}.\n+     */\n+    public static String createSas(String endpoint, OffsetDateTime expirationTime,\n+                                   AzureKeyCredential keyCredential) {\n+        try {\n+            String resKey = \"r\";\n+            String expKey = \"e\";\n+            String signKey = \"s\";\n+\n+            Charset charset = StandardCharsets.UTF_8;\n+            String encodedResource = URLEncoder.encode(endpoint, charset.name());\n+            String encodedExpiration = URLEncoder.encode(expirationTime.atZoneSameInstant(ZoneOffset.UTC).format(\n+                DateTimeFormatter.ofPattern(\"M/d/yyyy h:m:s a\")),\n+                charset.name());\n+\n+            String unsignedSas = String.format(\"%s=%s&%s=%s\", resKey, encodedResource, expKey, encodedExpiration);\n+\n+            Mac hmac = Mac.getInstance(\"hmacSHA256\");\n+            hmac.init(new SecretKeySpec(Base64.getDecoder().decode(keyCredential.getKey()), \"hmacSHA256\"));\n+            String signature = new String(Base64.getEncoder().encode(\n+                hmac.doFinal(unsignedSas.getBytes(charset))),\n+                charset);\n+\n+            String encodedSignature = URLEncoder.encode(signature, charset.name());\n+\n+            return String.format(\"%s&%s=%s\", unsignedSas, signKey, encodedSignature);\n+\n+        } catch (NoSuchAlgorithmException | UnsupportedEncodingException | InvalidKeyException e) {\n+            throw new RuntimeException(logger.logThrowableAsError(e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5ae4ad3b07604409b24f75f2dfc1bfd5d9ec8e3"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg4MDA2MQ==", "bodyText": "https://azure.github.io/azure-sdk/java_implementation.html#java-errors-system-errors\nSplit the exception into NPE and IllegalArgumentException when the input is null and empty respectively.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14442#discussion_r483880061", "createdAt": "2020-09-04T23:29:30Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridSasCredential.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import javax.crypto.Mac;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Base64;\n+\n+/**\n+ * A way to use a generated shared access signature as a credential to publish events to a topic through a client.\n+ */\n+public final class EventGridSasCredential {\n+\n+    private String sas;\n+\n+    private static final ClientLogger logger = new ClientLogger(EventGridSasCredential.class);\n+\n+    /**\n+     * Generate a shared access signature to provide time-limited authentication for requests to the Event Grid\n+     * service.\n+     * @param endpoint       the endpoint of the Event Grid topic or domain.\n+     * @param expirationTime the time in which the signature should expire, no longer providing authentication.\n+     * @param keyCredential  the access key obtained from the Event Grid topic or domain.\n+     *\n+     * @return the shared access signature string which can be used to construct an instance of\n+     * {@link EventGridSasCredential}.\n+     */\n+    public static String createSas(String endpoint, OffsetDateTime expirationTime,\n+                                   AzureKeyCredential keyCredential) {\n+        try {\n+            String resKey = \"r\";\n+            String expKey = \"e\";\n+            String signKey = \"s\";\n+\n+            Charset charset = StandardCharsets.UTF_8;\n+            String encodedResource = URLEncoder.encode(endpoint, charset.name());\n+            String encodedExpiration = URLEncoder.encode(expirationTime.atZoneSameInstant(ZoneOffset.UTC).format(\n+                DateTimeFormatter.ofPattern(\"M/d/yyyy h:m:s a\")),\n+                charset.name());\n+\n+            String unsignedSas = String.format(\"%s=%s&%s=%s\", resKey, encodedResource, expKey, encodedExpiration);\n+\n+            Mac hmac = Mac.getInstance(\"hmacSHA256\");\n+            hmac.init(new SecretKeySpec(Base64.getDecoder().decode(keyCredential.getKey()), \"hmacSHA256\"));\n+            String signature = new String(Base64.getEncoder().encode(\n+                hmac.doFinal(unsignedSas.getBytes(charset))),\n+                charset);\n+\n+            String encodedSignature = URLEncoder.encode(signature, charset.name());\n+\n+            return String.format(\"%s&%s=%s\", unsignedSas, signKey, encodedSignature);\n+\n+        } catch (NoSuchAlgorithmException | UnsupportedEncodingException | InvalidKeyException e) {\n+            throw new RuntimeException(logger.logThrowableAsError(e));\n+        }\n+    }\n+\n+    /**\n+     * Create an instance of this object to authenticate calls to the EventGrid service.\n+     * @param sas the shared access signature to use.\n+     */\n+    public EventGridSasCredential(String sas) {\n+        if (CoreUtils.isNullOrEmpty(sas)) {\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\"the access signature cannot be null or empty\"));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5ae4ad3b07604409b24f75f2dfc1bfd5d9ec8e3"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg4MDYzMw==", "bodyText": "License headers should be the following in all Java files:\nhttps://docs.opensource.microsoft.com/content/releasing/copyright-headers.html#java\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14442#discussion_r483880633", "createdAt": "2020-09-04T23:32:43Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherClientBuilder.java", "diffHunk": "@@ -0,0 +1,298 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5ae4ad3b07604409b24f75f2dfc1bfd5d9ec8e3"}, "originalPosition": 3}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "655825bbf153e37072c0b824760c0090b52e9a6a", "author": {"user": {"login": "Soreloser2", "name": "Soren Dahl"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/655825bbf153e37072c0b824760c0090b52e9a6a", "committedDate": "2020-09-05T00:06:39Z", "message": "Final set of review comments\n\nmostly minor changes, except a small license change to all source files, including generated ones."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 253, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}