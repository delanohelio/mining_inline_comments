{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNTM3NTk3", "number": 14440, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOToyMTo0NFrOEctxLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjozNzoxNVrOEeYcIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTQ1NDUzOnYy", "diffSide": "RIGHT", "path": "eng/.docsettings.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOToyMTo0NFrOHHaalg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOToyMTo0NFrOHHaalg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzNDg3MA==", "bodyText": "Unclear why this file got re-indented, but can you restore it and just commit the added line?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14440#discussion_r477534870", "createdAt": "2020-08-26T19:21:44Z", "author": {"login": "bsiegel"}, "path": "eng/.docsettings.yml", "diffHunk": "@@ -1,160 +1,162 @@\n omitted_paths:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a9cfa08a4362d7766bfd6d83de1c15af6f04bc8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjA5MzQ4OnYy", "diffSide": "RIGHT", "path": "sdk/eventgrid/azure-messaging-eventgrid/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjo0Nzo1NlrOHHgfbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjo0Nzo1NlrOHHgfbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYzNDQxNA==", "bodyText": "This should be the dependency version, not current.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14440#discussion_r477634414", "createdAt": "2020-08-26T22:47:56Z", "author": {"login": "conniey"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/pom.xml", "diffHunk": "@@ -0,0 +1,160 @@\n+<!--\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License. See License.txt in the project root for\n+ * license information.\n+ *\n+ * Code generated by Microsoft (R) AutoRest Code Generator.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <groupId>com.azure</groupId>\n+  <artifactId>azure-messaging-eventgrid</artifactId>\n+  <version>2.0.0-beta.1</version> <!-- {x-version-update;com.azure:azure-messaging-eventgrid;current} -->\n+\n+  <packaging>jar</packaging>\n+  <name>Microsoft Azure SDK for eventgrid</name>\n+  <description>This package contains Microsoft Azure EventGrid SDK.</description>\n+  <parent>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-data-sdk-parent</artifactId>\n+    <version>1.3.0</version> <!-- {x-version-update;com.azure:azure-data-sdk-parent;current} -->\n+    <relativePath>../../parents/azure-data-sdk-parent</relativePath>\n+  </parent>\n+  <url>https://github.com/Azure/azure-sdk-for-java</url>\n+\n+  <licenses>\n+    <license>\n+      <name>The MIT License (MIT)</name>\n+      <url>http://opensource.org/licenses/MIT</url>\n+      <distribution>repo</distribution>\n+    </license>\n+  </licenses>\n+\n+  <distributionManagement>\n+    <site>\n+      <id>azure-java-build-docs</id>\n+      <url>${site.url}/site/${project.artifactId}</url>\n+    </site>\n+  </distributionManagement>\n+\n+  <scm>\n+    <url>scm:git:https://github.com/Azure/azure-sdk-for-java</url>\n+    <connection>scm:git:git@github.com:Azure/azure-sdk-for-java.git</connection>\n+    <tag>HEAD</tag>\n+  </scm>\n+\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    <legal><![CDATA[[INFO] Any downloads listed may be third party software.  Microsoft grants you no rights for third party software.]]></legal>\n+  </properties>\n+\n+  <developers>\n+    <developer>\n+      <id>microsoft</id>\n+      <name>Microsoft</name>\n+    </developer>\n+  </developers>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core</artifactId>\n+      <version>1.8.0-beta.1</version> <!-- {x-version-update;com.azure:azure-core;current} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4045d4b448328a0126cbcd949a8bd236948aa0"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjA5ODEyOnYy", "diffSide": "RIGHT", "path": "sdk/eventgrid/azure-messaging-eventgrid/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjo0ODo1NVrOHHgidg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjo0ODo1NVrOHHgidg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYzNTE5MA==", "bodyText": "Do we need this? In other libraries, I don't see them overriding the build step.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14440#discussion_r477635190", "createdAt": "2020-08-26T22:48:55Z", "author": {"login": "conniey"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/pom.xml", "diffHunk": "@@ -0,0 +1,160 @@\n+<!--\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License. See License.txt in the project root for\n+ * license information.\n+ *\n+ * Code generated by Microsoft (R) AutoRest Code Generator.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <groupId>com.azure</groupId>\n+  <artifactId>azure-messaging-eventgrid</artifactId>\n+  <version>2.0.0-beta.1</version> <!-- {x-version-update;com.azure:azure-messaging-eventgrid;current} -->\n+\n+  <packaging>jar</packaging>\n+  <name>Microsoft Azure SDK for eventgrid</name>\n+  <description>This package contains Microsoft Azure EventGrid SDK.</description>\n+  <parent>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-data-sdk-parent</artifactId>\n+    <version>1.3.0</version> <!-- {x-version-update;com.azure:azure-data-sdk-parent;current} -->\n+    <relativePath>../../parents/azure-data-sdk-parent</relativePath>\n+  </parent>\n+  <url>https://github.com/Azure/azure-sdk-for-java</url>\n+\n+  <licenses>\n+    <license>\n+      <name>The MIT License (MIT)</name>\n+      <url>http://opensource.org/licenses/MIT</url>\n+      <distribution>repo</distribution>\n+    </license>\n+  </licenses>\n+\n+  <distributionManagement>\n+    <site>\n+      <id>azure-java-build-docs</id>\n+      <url>${site.url}/site/${project.artifactId}</url>\n+    </site>\n+  </distributionManagement>\n+\n+  <scm>\n+    <url>scm:git:https://github.com/Azure/azure-sdk-for-java</url>\n+    <connection>scm:git:git@github.com:Azure/azure-sdk-for-java.git</connection>\n+    <tag>HEAD</tag>\n+  </scm>\n+\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    <legal><![CDATA[[INFO] Any downloads listed may be third party software.  Microsoft grants you no rights for third party software.]]></legal>\n+  </properties>\n+\n+  <developers>\n+    <developer>\n+      <id>microsoft</id>\n+      <name>Microsoft</name>\n+    </developer>\n+  </developers>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core</artifactId>\n+      <version>1.8.0-beta.1</version> <!-- {x-version-update;com.azure:azure-core;current} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core-http-netty</artifactId>\n+      <version>1.5.4</version> <!-- {x-version-update;com.azure:azure-core-http-netty;dependency} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core-serializer-json-jackson</artifactId>\n+      <version>1.0.0-beta.3</version> <!-- {x-version-update;com.azure:azure-core-serializer-json-jackson;dependency} -->\n+    </dependency>\n+\n+    <!-- test -->\n+    <dependency>\n+      <groupId>commons-io</groupId>\n+      <artifactId>commons-io</artifactId>\n+      <version>2.6</version> <!-- {x-version-update;eventgrid_commons-io:commons-io;external_dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-api</artifactId>\n+      <version>5.6.2</version> <!-- {x-version-update;org.junit.jupiter:junit-jupiter-api;external_dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n+      <version>5.6.2</version> <!-- {x-version-update;org.junit.jupiter:junit-jupiter-engine;external_dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-params</artifactId>\n+      <version>5.6.2</version> <!-- {x-version-update;org.junit.jupiter:junit-jupiter-params;external_dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core-test</artifactId>\n+      <version>1.4.0</version> <!-- {x-version-update;com.azure:azure-core-test;dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-core</artifactId>\n+      <version>3.3.3</version> <!-- {x-version-update;org.mockito:mockito-core;external_dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4045d4b448328a0126cbcd949a8bd236948aa0"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjEwNDg2OnYy", "diffSide": "RIGHT", "path": "sdk/eventgrid/azure-messaging-eventgrid/swagger/readme.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjo1MDoxN1rOHHgmmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjo1MDoxN1rOHHgmmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYzNjI0OA==", "bodyText": "nit: to use capitals, README.md.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14440#discussion_r477636248", "createdAt": "2020-08-26T22:50:17Z", "author": {"login": "conniey"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/swagger/readme.md", "diffHunk": "@@ -0,0 +1,62 @@\n+# Instructions for Generation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4045d4b448328a0126cbcd949a8bd236948aa0"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjEwNzMxOnYy", "diffSide": "RIGHT", "path": "sdk/eventgrid/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjo1MDo0MlrOHHgoBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjo1MDo0MlrOHHgoBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYzNjYxNQ==", "bodyText": "nit: alphabetise.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14440#discussion_r477636615", "createdAt": "2020-08-26T22:50:42Z", "author": {"login": "conniey"}, "path": "sdk/eventgrid/pom.xml", "diffHunk": "@@ -10,5 +10,6 @@\n   <version>1.0.0</version><!-- Need not change for every release-->\n   <modules>\n     <module>microsoft-azure-eventgrid</module>\n+    <module>azure-messaging-eventgrid</module>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4045d4b448328a0126cbcd949a8bd236948aa0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjEwOTg4OnYy", "diffSide": "RIGHT", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/test/java/com/azure/messaging/eventgrid/EventGridPublisherImplTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjo1MToxN1rOHHgpvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjo1MToxN1rOHHgpvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYzNzA1Mw==", "bodyText": "nit: The class name implies that this is a test, I don't think the method name needs test as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14440#discussion_r477637053", "createdAt": "2020-08-26T22:51:17Z", "author": {"login": "conniey"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/test/java/com/azure/messaging/eventgrid/EventGridPublisherImplTests.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.test.TestBase;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImpl;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImplBuilder;\n+import com.azure.messaging.eventgrid.implementation.models.CloudEvent;\n+import com.azure.messaging.eventgrid.implementation.models.EventGridEvent;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+\n+public class EventGridPublisherImplTests extends TestBase {\n+\n+    HttpPipelineBuilder builder;\n+\n+    private static final String EVENTGRID_ENDPOINT = \"EG_ENDPOINT\";\n+\n+    private static final String CLOUD_ENDPOINT = \"EG_CLOUD_ENDPOINT\";\n+\n+    private static final String CUSTOM_ENDPOINT = \"EG_CUSTOM_ENDPOINT\";\n+\n+    private static final String EVENTGRID_KEY = \"EG_KEY\";\n+\n+    private static final String CLOUD_KEY = \"EG_CLOUD_KEY\";\n+\n+    private static final String CUSTOM_KEY = \"EG_CUSTOM_KEY\";\n+\n+    private static final String DUMMY_ENDPOINT = \"https://www.dummyEndpoint.com\";\n+\n+    private static final String DUMMY_KEY = \"dummyKey\";\n+\n+    @Override\n+    protected void beforeTest() {\n+        builder = new HttpPipelineBuilder();\n+\n+        if (interceptorManager.isPlaybackMode()) {\n+            builder.httpClient(interceptorManager.getPlaybackClient());\n+        } else {\n+            builder.policies(interceptorManager.getRecordPolicy(), new RetryPolicy());\n+        }\n+    }\n+\n+    @Test\n+    public void testPublishEventGridEventsImpl() throws MalformedURLException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4045d4b448328a0126cbcd949a8bd236948aa0"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjExMTQ3OnYy", "diffSide": "RIGHT", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/test/java/com/azure/messaging/eventgrid/EventGridPublisherImplTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjo1MTozN1rOHHgquA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjo1MTozN1rOHHgquA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYzNzMwNA==", "bodyText": "nit: unnecessary new line.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14440#discussion_r477637304", "createdAt": "2020-08-26T22:51:37Z", "author": {"login": "conniey"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/test/java/com/azure/messaging/eventgrid/EventGridPublisherImplTests.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.test.TestBase;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImpl;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImplBuilder;\n+import com.azure.messaging.eventgrid.implementation.models.CloudEvent;\n+import com.azure.messaging.eventgrid.implementation.models.EventGridEvent;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+\n+public class EventGridPublisherImplTests extends TestBase {\n+\n+    HttpPipelineBuilder builder;\n+\n+    private static final String EVENTGRID_ENDPOINT = \"EG_ENDPOINT\";\n+\n+    private static final String CLOUD_ENDPOINT = \"EG_CLOUD_ENDPOINT\";\n+\n+    private static final String CUSTOM_ENDPOINT = \"EG_CUSTOM_ENDPOINT\";\n+\n+    private static final String EVENTGRID_KEY = \"EG_KEY\";\n+\n+    private static final String CLOUD_KEY = \"EG_CLOUD_KEY\";\n+\n+    private static final String CUSTOM_KEY = \"EG_CUSTOM_KEY\";\n+\n+    private static final String DUMMY_ENDPOINT = \"https://www.dummyEndpoint.com\";\n+\n+    private static final String DUMMY_KEY = \"dummyKey\";\n+\n+    @Override\n+    protected void beforeTest() {\n+        builder = new HttpPipelineBuilder();\n+\n+        if (interceptorManager.isPlaybackMode()) {\n+            builder.httpClient(interceptorManager.getPlaybackClient());\n+        } else {\n+            builder.policies(interceptorManager.getRecordPolicy(), new RetryPolicy());\n+        }\n+    }\n+\n+    @Test\n+    public void testPublishEventGridEventsImpl() throws MalformedURLException {\n+        EventGridPublisherClientImpl egClient = new EventGridPublisherClientImplBuilder()\n+            .pipeline(builder.policies(\n+                new AddHeadersPolicy(new HttpHeaders().put(\"aeg-sas-key\", getKey(EVENTGRID_KEY))))\n+                .build())\n+            .buildClient();\n+\n+        List<EventGridEvent> events = new ArrayList<>();\n+        events.add(new EventGridEvent()\n+            .setId(UUID.randomUUID().toString())\n+            .setSubject(\"Test\")\n+            .setEventType(\"Microsoft.MockPublisher.TestEvent\")\n+            .setData(new HashMap<String, String>() {{\n+                put(\"Field1\", \"Value1\");\n+                put(\"Field2\", \"Value2\");\n+                put(\"Field3\", \"Value3\");\n+            }})\n+            .setDataVersion(\"1.0\")\n+            .setEventTime(OffsetDateTime.now()));\n+\n+        String hostname = new URL(getEndpoint(EVENTGRID_ENDPOINT)).getHost();\n+        Response<Void> response = egClient.publishEventsWithResponseAsync(hostname, events).block();\n+\n+        assertNotNull(response);\n+        assertEquals(response.getStatusCode(), 200);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4045d4b448328a0126cbcd949a8bd236948aa0"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjExMjQwOnYy", "diffSide": "RIGHT", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/test/java/com/azure/messaging/eventgrid/EventGridPublisherImplTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjo1MTo0OFrOHHgrQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjo1MTo0OFrOHHgrQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYzNzQ0Mg==", "bodyText": "private?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14440#discussion_r477637442", "createdAt": "2020-08-26T22:51:48Z", "author": {"login": "conniey"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/test/java/com/azure/messaging/eventgrid/EventGridPublisherImplTests.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.test.TestBase;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImpl;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImplBuilder;\n+import com.azure.messaging.eventgrid.implementation.models.CloudEvent;\n+import com.azure.messaging.eventgrid.implementation.models.EventGridEvent;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+\n+public class EventGridPublisherImplTests extends TestBase {\n+\n+    HttpPipelineBuilder builder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4045d4b448328a0126cbcd949a8bd236948aa0"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjExNTU3OnYy", "diffSide": "RIGHT", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/test/java/com/azure/messaging/eventgrid/EventGridPublisherImplTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjo1MjozNFrOHHgtgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjo1MjozNFrOHHgtgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYzODAxOA==", "bodyText": "This can be Collections.singletonList() iirc so you don't have to allocate an ArrayList to add a single item.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14440#discussion_r477638018", "createdAt": "2020-08-26T22:52:34Z", "author": {"login": "conniey"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/test/java/com/azure/messaging/eventgrid/EventGridPublisherImplTests.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.test.TestBase;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImpl;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImplBuilder;\n+import com.azure.messaging.eventgrid.implementation.models.CloudEvent;\n+import com.azure.messaging.eventgrid.implementation.models.EventGridEvent;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+\n+public class EventGridPublisherImplTests extends TestBase {\n+\n+    HttpPipelineBuilder builder;\n+\n+    private static final String EVENTGRID_ENDPOINT = \"EG_ENDPOINT\";\n+\n+    private static final String CLOUD_ENDPOINT = \"EG_CLOUD_ENDPOINT\";\n+\n+    private static final String CUSTOM_ENDPOINT = \"EG_CUSTOM_ENDPOINT\";\n+\n+    private static final String EVENTGRID_KEY = \"EG_KEY\";\n+\n+    private static final String CLOUD_KEY = \"EG_CLOUD_KEY\";\n+\n+    private static final String CUSTOM_KEY = \"EG_CUSTOM_KEY\";\n+\n+    private static final String DUMMY_ENDPOINT = \"https://www.dummyEndpoint.com\";\n+\n+    private static final String DUMMY_KEY = \"dummyKey\";\n+\n+    @Override\n+    protected void beforeTest() {\n+        builder = new HttpPipelineBuilder();\n+\n+        if (interceptorManager.isPlaybackMode()) {\n+            builder.httpClient(interceptorManager.getPlaybackClient());\n+        } else {\n+            builder.policies(interceptorManager.getRecordPolicy(), new RetryPolicy());\n+        }\n+    }\n+\n+    @Test\n+    public void testPublishEventGridEventsImpl() throws MalformedURLException {\n+        EventGridPublisherClientImpl egClient = new EventGridPublisherClientImplBuilder()\n+            .pipeline(builder.policies(\n+                new AddHeadersPolicy(new HttpHeaders().put(\"aeg-sas-key\", getKey(EVENTGRID_KEY))))\n+                .build())\n+            .buildClient();\n+\n+        List<EventGridEvent> events = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4045d4b448328a0126cbcd949a8bd236948aa0"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjExNzE3OnYy", "diffSide": "RIGHT", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/test/java/com/azure/messaging/eventgrid/EventGridPublisherImplTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjo1Mjo1NVrOHHgujg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjo1Mjo1NVrOHHgujg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYzODI4Ng==", "bodyText": "Use StepVerifier rather than block.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14440#discussion_r477638286", "createdAt": "2020-08-26T22:52:55Z", "author": {"login": "conniey"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/test/java/com/azure/messaging/eventgrid/EventGridPublisherImplTests.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.test.TestBase;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImpl;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImplBuilder;\n+import com.azure.messaging.eventgrid.implementation.models.CloudEvent;\n+import com.azure.messaging.eventgrid.implementation.models.EventGridEvent;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+\n+public class EventGridPublisherImplTests extends TestBase {\n+\n+    HttpPipelineBuilder builder;\n+\n+    private static final String EVENTGRID_ENDPOINT = \"EG_ENDPOINT\";\n+\n+    private static final String CLOUD_ENDPOINT = \"EG_CLOUD_ENDPOINT\";\n+\n+    private static final String CUSTOM_ENDPOINT = \"EG_CUSTOM_ENDPOINT\";\n+\n+    private static final String EVENTGRID_KEY = \"EG_KEY\";\n+\n+    private static final String CLOUD_KEY = \"EG_CLOUD_KEY\";\n+\n+    private static final String CUSTOM_KEY = \"EG_CUSTOM_KEY\";\n+\n+    private static final String DUMMY_ENDPOINT = \"https://www.dummyEndpoint.com\";\n+\n+    private static final String DUMMY_KEY = \"dummyKey\";\n+\n+    @Override\n+    protected void beforeTest() {\n+        builder = new HttpPipelineBuilder();\n+\n+        if (interceptorManager.isPlaybackMode()) {\n+            builder.httpClient(interceptorManager.getPlaybackClient());\n+        } else {\n+            builder.policies(interceptorManager.getRecordPolicy(), new RetryPolicy());\n+        }\n+    }\n+\n+    @Test\n+    public void testPublishEventGridEventsImpl() throws MalformedURLException {\n+        EventGridPublisherClientImpl egClient = new EventGridPublisherClientImplBuilder()\n+            .pipeline(builder.policies(\n+                new AddHeadersPolicy(new HttpHeaders().put(\"aeg-sas-key\", getKey(EVENTGRID_KEY))))\n+                .build())\n+            .buildClient();\n+\n+        List<EventGridEvent> events = new ArrayList<>();\n+        events.add(new EventGridEvent()\n+            .setId(UUID.randomUUID().toString())\n+            .setSubject(\"Test\")\n+            .setEventType(\"Microsoft.MockPublisher.TestEvent\")\n+            .setData(new HashMap<String, String>() {{\n+                put(\"Field1\", \"Value1\");\n+                put(\"Field2\", \"Value2\");\n+                put(\"Field3\", \"Value3\");\n+            }})\n+            .setDataVersion(\"1.0\")\n+            .setEventTime(OffsetDateTime.now()));\n+\n+        String hostname = new URL(getEndpoint(EVENTGRID_ENDPOINT)).getHost();\n+        Response<Void> response = egClient.publishEventsWithResponseAsync(hostname, events).block();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4045d4b448328a0126cbcd949a8bd236948aa0"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjExOTUwOnYy", "diffSide": "RIGHT", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/test/java/com/azure/messaging/eventgrid/EventGridPublisherImplTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjo1MzoyOFrOHHgwJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjo1MzoyOFrOHHgwJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYzODY5Mw==", "bodyText": "Since this set-up is done for every test, you could push it to the @beforetest method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14440#discussion_r477638693", "createdAt": "2020-08-26T22:53:28Z", "author": {"login": "conniey"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/test/java/com/azure/messaging/eventgrid/EventGridPublisherImplTests.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.test.TestBase;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImpl;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImplBuilder;\n+import com.azure.messaging.eventgrid.implementation.models.CloudEvent;\n+import com.azure.messaging.eventgrid.implementation.models.EventGridEvent;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+\n+public class EventGridPublisherImplTests extends TestBase {\n+\n+    HttpPipelineBuilder builder;\n+\n+    private static final String EVENTGRID_ENDPOINT = \"EG_ENDPOINT\";\n+\n+    private static final String CLOUD_ENDPOINT = \"EG_CLOUD_ENDPOINT\";\n+\n+    private static final String CUSTOM_ENDPOINT = \"EG_CUSTOM_ENDPOINT\";\n+\n+    private static final String EVENTGRID_KEY = \"EG_KEY\";\n+\n+    private static final String CLOUD_KEY = \"EG_CLOUD_KEY\";\n+\n+    private static final String CUSTOM_KEY = \"EG_CUSTOM_KEY\";\n+\n+    private static final String DUMMY_ENDPOINT = \"https://www.dummyEndpoint.com\";\n+\n+    private static final String DUMMY_KEY = \"dummyKey\";\n+\n+    @Override\n+    protected void beforeTest() {\n+        builder = new HttpPipelineBuilder();\n+\n+        if (interceptorManager.isPlaybackMode()) {\n+            builder.httpClient(interceptorManager.getPlaybackClient());\n+        } else {\n+            builder.policies(interceptorManager.getRecordPolicy(), new RetryPolicy());\n+        }\n+    }\n+\n+    @Test\n+    public void testPublishEventGridEventsImpl() throws MalformedURLException {\n+        EventGridPublisherClientImpl egClient = new EventGridPublisherClientImplBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4045d4b448328a0126cbcd949a8bd236948aa0"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjEyMTcyOnYy", "diffSide": "RIGHT", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/test/java/com/azure/messaging/eventgrid/EventGridPublisherImplTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjo1Mzo1NlrOHHgxdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjo1Mzo1NlrOHHgxdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYzOTAyOQ==", "bodyText": "I believe it is assertEquals(expected, actual), not `actual, expected``", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14440#discussion_r477639029", "createdAt": "2020-08-26T22:53:56Z", "author": {"login": "conniey"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/test/java/com/azure/messaging/eventgrid/EventGridPublisherImplTests.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.test.TestBase;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImpl;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImplBuilder;\n+import com.azure.messaging.eventgrid.implementation.models.CloudEvent;\n+import com.azure.messaging.eventgrid.implementation.models.EventGridEvent;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+\n+public class EventGridPublisherImplTests extends TestBase {\n+\n+    HttpPipelineBuilder builder;\n+\n+    private static final String EVENTGRID_ENDPOINT = \"EG_ENDPOINT\";\n+\n+    private static final String CLOUD_ENDPOINT = \"EG_CLOUD_ENDPOINT\";\n+\n+    private static final String CUSTOM_ENDPOINT = \"EG_CUSTOM_ENDPOINT\";\n+\n+    private static final String EVENTGRID_KEY = \"EG_KEY\";\n+\n+    private static final String CLOUD_KEY = \"EG_CLOUD_KEY\";\n+\n+    private static final String CUSTOM_KEY = \"EG_CUSTOM_KEY\";\n+\n+    private static final String DUMMY_ENDPOINT = \"https://www.dummyEndpoint.com\";\n+\n+    private static final String DUMMY_KEY = \"dummyKey\";\n+\n+    @Override\n+    protected void beforeTest() {\n+        builder = new HttpPipelineBuilder();\n+\n+        if (interceptorManager.isPlaybackMode()) {\n+            builder.httpClient(interceptorManager.getPlaybackClient());\n+        } else {\n+            builder.policies(interceptorManager.getRecordPolicy(), new RetryPolicy());\n+        }\n+    }\n+\n+    @Test\n+    public void testPublishEventGridEventsImpl() throws MalformedURLException {\n+        EventGridPublisherClientImpl egClient = new EventGridPublisherClientImplBuilder()\n+            .pipeline(builder.policies(\n+                new AddHeadersPolicy(new HttpHeaders().put(\"aeg-sas-key\", getKey(EVENTGRID_KEY))))\n+                .build())\n+            .buildClient();\n+\n+        List<EventGridEvent> events = new ArrayList<>();\n+        events.add(new EventGridEvent()\n+            .setId(UUID.randomUUID().toString())\n+            .setSubject(\"Test\")\n+            .setEventType(\"Microsoft.MockPublisher.TestEvent\")\n+            .setData(new HashMap<String, String>() {{\n+                put(\"Field1\", \"Value1\");\n+                put(\"Field2\", \"Value2\");\n+                put(\"Field3\", \"Value3\");\n+            }})\n+            .setDataVersion(\"1.0\")\n+            .setEventTime(OffsetDateTime.now()));\n+\n+        String hostname = new URL(getEndpoint(EVENTGRID_ENDPOINT)).getHost();\n+        Response<Void> response = egClient.publishEventsWithResponseAsync(hostname, events).block();\n+\n+        assertNotNull(response);\n+        assertEquals(response.getStatusCode(), 200);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4045d4b448328a0126cbcd949a8bd236948aa0"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjEyNjY2OnYy", "diffSide": "RIGHT", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/test/java/com/azure/messaging/eventgrid/EventGridPublisherImplTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjo1NDo1OVrOHHg0vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjo1NDo1OVrOHHg0vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYzOTg2OA==", "bodyText": "If it is live mode, should you assert this is set?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14440#discussion_r477639868", "createdAt": "2020-08-26T22:54:59Z", "author": {"login": "conniey"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/test/java/com/azure/messaging/eventgrid/EventGridPublisherImplTests.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.test.TestBase;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImpl;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImplBuilder;\n+import com.azure.messaging.eventgrid.implementation.models.CloudEvent;\n+import com.azure.messaging.eventgrid.implementation.models.EventGridEvent;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+\n+public class EventGridPublisherImplTests extends TestBase {\n+\n+    HttpPipelineBuilder builder;\n+\n+    private static final String EVENTGRID_ENDPOINT = \"EG_ENDPOINT\";\n+\n+    private static final String CLOUD_ENDPOINT = \"EG_CLOUD_ENDPOINT\";\n+\n+    private static final String CUSTOM_ENDPOINT = \"EG_CUSTOM_ENDPOINT\";\n+\n+    private static final String EVENTGRID_KEY = \"EG_KEY\";\n+\n+    private static final String CLOUD_KEY = \"EG_CLOUD_KEY\";\n+\n+    private static final String CUSTOM_KEY = \"EG_CUSTOM_KEY\";\n+\n+    private static final String DUMMY_ENDPOINT = \"https://www.dummyEndpoint.com\";\n+\n+    private static final String DUMMY_KEY = \"dummyKey\";\n+\n+    @Override\n+    protected void beforeTest() {\n+        builder = new HttpPipelineBuilder();\n+\n+        if (interceptorManager.isPlaybackMode()) {\n+            builder.httpClient(interceptorManager.getPlaybackClient());\n+        } else {\n+            builder.policies(interceptorManager.getRecordPolicy(), new RetryPolicy());\n+        }\n+    }\n+\n+    @Test\n+    public void testPublishEventGridEventsImpl() throws MalformedURLException {\n+        EventGridPublisherClientImpl egClient = new EventGridPublisherClientImplBuilder()\n+            .pipeline(builder.policies(\n+                new AddHeadersPolicy(new HttpHeaders().put(\"aeg-sas-key\", getKey(EVENTGRID_KEY))))\n+                .build())\n+            .buildClient();\n+\n+        List<EventGridEvent> events = new ArrayList<>();\n+        events.add(new EventGridEvent()\n+            .setId(UUID.randomUUID().toString())\n+            .setSubject(\"Test\")\n+            .setEventType(\"Microsoft.MockPublisher.TestEvent\")\n+            .setData(new HashMap<String, String>() {{\n+                put(\"Field1\", \"Value1\");\n+                put(\"Field2\", \"Value2\");\n+                put(\"Field3\", \"Value3\");\n+            }})\n+            .setDataVersion(\"1.0\")\n+            .setEventTime(OffsetDateTime.now()));\n+\n+        String hostname = new URL(getEndpoint(EVENTGRID_ENDPOINT)).getHost();\n+        Response<Void> response = egClient.publishEventsWithResponseAsync(hostname, events).block();\n+\n+        assertNotNull(response);\n+        assertEquals(response.getStatusCode(), 200);\n+\n+    }\n+\n+    @Test\n+    public void testPublishCloudEventsImpl() throws MalformedURLException {\n+        EventGridPublisherClientImpl egClient = new EventGridPublisherClientImplBuilder()\n+            .pipeline(builder.policies(\n+                new AddHeadersPolicy(new HttpHeaders().put(\"aeg-sas-key\", getKey(CLOUD_KEY))))\n+                .build())\n+            .buildClient();\n+\n+        List<CloudEvent> events = new ArrayList<>();\n+        events.add(new CloudEvent()\n+            .setId(UUID.randomUUID().toString())\n+            .setSubject(\"Test\")\n+            .setType(\"Microsoft.MockPublisher.TestEvent\")\n+            .setData(new HashMap<String, String>() {{\n+                put(\"Field1\", \"Value1\");\n+                put(\"Field2\", \"Value2\");\n+                put(\"Field3\", \"Value3\");\n+            }})\n+            .setSpecversion(\"1.0\")\n+            .setTime(OffsetDateTime.now()));\n+\n+        String hostname = new URL(getEndpoint(CLOUD_ENDPOINT)).getHost();\n+        Response<Void> response = egClient.publishCloudEventEventsWithResponseAsync(hostname, events).block();\n+\n+        assertNotNull(response);\n+        assertEquals(response.getStatusCode(), 200);\n+    }\n+\n+    @Test\n+    public void TestPublishCustomEventsImpl() throws MalformedURLException {\n+\n+        EventGridPublisherClientImpl egClient = new EventGridPublisherClientImplBuilder()\n+            .pipeline(builder.policies(\n+                new AddHeadersPolicy(new HttpHeaders().put(\"aeg-sas-key\", getKey(CUSTOM_KEY))))\n+                .build())\n+            .buildClient();\n+\n+        List<Object> events = new ArrayList<>();\n+        for (int i = 0; i < 5; i++) {\n+            events.add(new HashMap<String, String>() {{\n+                put(\"id\", UUID.randomUUID().toString());\n+                put(\"subject\", \"Test\");\n+                put(\"foo\", \"bar\");\n+                put(\"type\", \"Microsoft.MockPublisher.TestEvent\");\n+            }});\n+        }\n+\n+        String hostname = new URL(getEndpoint(CUSTOM_ENDPOINT)).getHost();\n+        Response<Void> response = egClient.publishCustomEventEventsWithResponseAsync(hostname, events).block();\n+\n+        assertNotNull(response);\n+        assertEquals(response.getStatusCode(), 200);\n+    }\n+\n+\n+    private String getEndpoint(String liveEnvName) {\n+        if (interceptorManager.isPlaybackMode()) {\n+            return DUMMY_ENDPOINT;\n+        }\n+        return System.getenv(liveEnvName);\n+    }\n+\n+    private String getKey(String liveEnvName) {\n+        if (interceptorManager.isPlaybackMode()) {\n+            return DUMMY_KEY;\n+        }\n+        return System.getenv(liveEnvName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4045d4b448328a0126cbcd949a8bd236948aa0"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjEzMDM4OnYy", "diffSide": "RIGHT", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/test/java/com/azure/messaging/eventgrid/EventGridPublisherImplTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjo1NTo0N1rOHHg3Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjo1NTo0N1rOHHg3Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY0MDQ1MQ==", "bodyText": "The naming for these should be AZURE_EVENTGRID_, etc. We have naming conventions for environment variables in our SDK guidelines.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14440#discussion_r477640451", "createdAt": "2020-08-26T22:55:47Z", "author": {"login": "conniey"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/test/java/com/azure/messaging/eventgrid/EventGridPublisherImplTests.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.test.TestBase;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImpl;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImplBuilder;\n+import com.azure.messaging.eventgrid.implementation.models.CloudEvent;\n+import com.azure.messaging.eventgrid.implementation.models.EventGridEvent;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+\n+public class EventGridPublisherImplTests extends TestBase {\n+\n+    HttpPipelineBuilder builder;\n+\n+    private static final String EVENTGRID_ENDPOINT = \"EG_ENDPOINT\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4045d4b448328a0126cbcd949a8bd236948aa0"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjkzMTUzOnYy", "diffSide": "RIGHT", "path": "sdk/eventgrid/azure-messaging-eventgrid/swagger/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjozNzoxNVrOHKAITQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjozNzoxNVrOHKAITQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0OTkzMw==", "bodyText": "nit: trailing new lines", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14440#discussion_r480249933", "createdAt": "2020-08-31T16:37:15Z", "author": {"login": "conniey"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/swagger/README.md", "diffHunk": "@@ -0,0 +1,62 @@\n+# Instructions for Generation\n+This file is used to generate the OpenAPI files for track 2 EventGrid\n+## Requirements/Installation\n+You need the following to start generating code\n+> NodeJS v10.x - v13.x\n+>\n+> Java 8+\n+>\n+> Maven 3.x\n+\n+Install Autorest beta with NPM:\n+\n+`npm i -g @autorest/autorest`\n+\n+## Using\n+\n+Fork and clone the autorest.java repo (https://github.com/Azure/autorest.java)\n+and checkout the v4 branch. Then run `mvn clean package -Dlocal` to generate build files.\n+\n+Then fork and clone the Azure rest API specs from the repo \n+(https://github.com/Azure/azure-rest-api-specs) and run `autorest --java readme.md` \n+in this folder, with the following tags:\n+\n+`--use=<path to autorest clone>`\n+\n+`--api-spec-location=<path to rest-api-spec clone>`\n+\n+If you are adding or updating swagger files, please make sure that they are included \n+in the input file list.\n+\n+``` yaml $(java)\n+title: EventGridPublisherClient\n+description: EventGrid Publisher Client\n+openapi-type: data-plane\n+output-folder: ../\n+namespace: com.azure.messaging.eventgrid\n+license-header: MICROSOFT_MIT_NO_CODEGEN\n+generate-client-as-impl: true\n+context-client-method-parameter: true\n+models-subpackage: systemevents\n+custom-types-subpackage: implementation.models\n+custom-types: CloudEvent,EventGridEvent\n+input-file:\n+- $(api-spec-location)/specification/eventgrid/data-plane/Microsoft.Storage/stable/2018-01-01/Storage.json\n+- $(api-spec-location)/specification/eventgrid/data-plane/Microsoft.EventHub/stable/2018-01-01/EventHub.json\n+- $(api-spec-location)/specification/eventgrid/data-plane/Microsoft.Resources/stable/2018-01-01/Resources.json\n+- $(api-spec-location)/specification/eventgrid/data-plane/Microsoft.EventGrid/stable/2018-01-01/EventGrid.json\n+- $(api-spec-location)/specification/eventgrid/data-plane/Microsoft.Devices/stable/2018-01-01/IotHub.json\n+- $(api-spec-location)/specification/eventgrid/data-plane/Microsoft.ContainerRegistry/stable/2018-01-01/ContainerRegistry.json\n+- $(api-spec-location)/specification/eventgrid/data-plane/Microsoft.ServiceBus/stable/2018-01-01/ServiceBus.json\n+- $(api-spec-location)/specification/eventgrid/data-plane/Microsoft.Media/stable/2018-01-01/MediaServices.json\n+- $(api-spec-location)/specification/eventgrid/data-plane/Microsoft.Maps/stable/2018-01-01/Maps.json\n+- $(api-spec-location)/specification/eventgrid/data-plane/Microsoft.AppConfiguration/stable/2018-01-01/AppConfiguration.json\n+- $(api-spec-location)/specification/eventgrid/data-plane/Microsoft.SignalRService/stable/2018-01-01/SignalRService.json\n+- $(api-spec-location)/specification/eventgrid/data-plane/Microsoft.KeyVault/stable/2018-01-01/KeyVault.json\n+- $(api-spec-location)/specification/eventgrid/data-plane/Microsoft.MachineLearningServices/stable/2018-01-01/MachineLearningServices.json\n+- $(api-spec-location)/specification/eventgrid/data-plane/Microsoft.Cache/stable/2018-01-01/RedisCache.json\n+- $(api-spec-location)/specification/eventgrid/data-plane/Microsoft.Web/stable/2018-01-01/Web.json\n+```\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a6632f2941b98a1a3b765c2a820837d16733f85"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1519, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}