{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0OTEzOTA3", "number": 14527, "title": "Add implementation for relationship APIs", "bodyText": "This PR also adds:\n\nan UpdateOperationsUtility - for contrsucting json patches for update operations.\na BasicRelationship type to deserialize the returned relationship to.\n\nTODO:\n\nHow should exceptions be handled inside functional blocks -> currently mapped to RuntimeException.\nHow to supply custom Context for async APIs.\n\nWe can go over the impl details in Monday's meeting.", "createdAt": "2020-08-27T19:49:22Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527", "merged": true, "mergeCommit": {"oid": "28503b2043e4dd1a134568bbba24abc4ffe882ba"}, "closed": true, "closedAt": "2020-08-31T18:11:58Z", "author": {"login": "abhipsaMisra"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdDJwH3gBqjM3MDE4Njc3OTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEWseEgH2gAyNDc0OTEzOTA3OjkwNTlkZTRkZDFjYTBiN2Q1YTg5YTVmMWM4YjYyM2RiNDNmNWU2YzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9745ef69d97b4f176fe488aa98a905fbf8b2e081", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9745ef69d97b4f176fe488aa98a905fbf8b2e081", "committedDate": "2020-08-27T19:16:14Z", "message": "add code comments"}, "afterCommit": {"oid": "c2389cf503a234fbd81bedc161d707f75f093a79", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c2389cf503a234fbd81bedc161d707f75f093a79", "committedDate": "2020-08-28T00:20:30Z", "message": "add code comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cab782b48f95f1dfb35a1023f04428508dfaaaf3", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cab782b48f95f1dfb35a1023f04428508dfaaaf3", "committedDate": "2020-08-28T01:11:03Z", "message": "renaming method names"}, "afterCommit": {"oid": "18daa3c4cc50a8873c08a8513d8a73dedbf9d4d1", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/18daa3c4cc50a8873c08a8513d8a73dedbf9d4d1", "committedDate": "2020-08-28T01:11:35Z", "message": "feat(adt): Add implementation for async APIs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MjIzMTMy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#pullrequestreview-477223132", "createdAt": "2020-08-28T03:51:04Z", "commit": {"oid": "13dd72c5278af22b16abef4b449d5bb4542c6acd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMzo1MTowNFrOHIoljw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMzo1MTowNFrOHIoljw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNTYzMQ==", "bodyText": "We want to convert the item emitted by addWithResponseAsync(digitalTwinId, digitalTwin, context) into json string representation, and return it in a Mono; or return a Mono.error if the serialization fails.\nSo we need to use the Mono.flatMap API: https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html#flatMap-java.util.function.Function-", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r478815631", "createdAt": "2020-08-28T03:51:04Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -92,67 +94,282 @@ public HttpPipeline getHttpPipeline() {\n         return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, context));\n     }\n \n+    Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n+            .flatMap(response -> {\n+                try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13dd72c5278af22b16abef4b449d5bb4542c6acd"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MjIzNjM3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#pullrequestreview-477223637", "createdAt": "2020-08-28T03:52:58Z", "commit": {"oid": "13dd72c5278af22b16abef4b449d5bb4542c6acd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMzo1Mjo1OFrOHIonUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMzo1Mjo1OFrOHIonUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNjA4MA==", "bodyText": "Here we simply convert the object returned into <T>. There is no checked exception thrown, so nothing needs to be transformed into Mono.error.\nSo we can use the Mono.Map API: https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html#map-java.util.function.Function-", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r478816080", "createdAt": "2020-08-28T03:52:58Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -92,67 +94,282 @@ public HttpPipeline getHttpPipeline() {\n         return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, context));\n     }\n \n+    Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n     // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n     // Input is Object and output is Response<T>.\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> klazz) {\n-        return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, klazz, context));\n+    public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz) {\n+        return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, context));\n     }\n \n-    Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context) {\n+    <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz, Context context) {\n         return protocolLayer\n             .getDigitalTwins()\n             .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n-            .flatMap(\n-                response -> {\n-                    try {\n-                        String jsonResponse = mapper.writeValueAsString(response.getValue());\n-                        DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n-                        return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n-                    } catch (JsonProcessingException e) {\n-                        return Mono.error(e);\n-                    }\n-                });\n-    }\n-\n-    <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> klazz, Context context) {\n+            .map(response -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13dd72c5278af22b16abef4b449d5bb4542c6acd"}, "originalPosition": 77}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "13dd72c5278af22b16abef4b449d5bb4542c6acd", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/13dd72c5278af22b16abef4b449d5bb4542c6acd", "committedDate": "2020-08-28T03:41:27Z", "message": "update some mappings of flatmap and map"}, "afterCommit": {"oid": "912565496d1744420fc6c8de1453034569161656", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/912565496d1744420fc6c8de1453034569161656", "committedDate": "2020-08-28T05:17:50Z", "message": "feat(adt): Add implementation for relationship APIs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3OTkwNjM1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#pullrequestreview-477990635", "createdAt": "2020-08-28T19:55:54Z", "commit": {"oid": "912565496d1744420fc6c8de1453034569161656"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxOTo1NTo1NVrOHJSyaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxOTo1NTo1NVrOHJSyaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUwNzA0OA==", "bodyText": "when we get to the samples code, we will need to read this from the disk.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r479507048", "createdAt": "2020-08-28T19:55:55Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/AsyncSample.java", "diffHunk": "@@ -118,5 +120,39 @@ public static void main(String[] args) throws InterruptedException, JsonProcessi\n         boolean created = createTwinsSemaphore.tryAcquire(2, 20, TimeUnit.SECONDS);\n         System.out.println(\"Source twins created: \" + created);\n \n+        String targetTwin1_Id = \"targetTwin_1_\" + random.nextInt();\n+        String targetTwin_1 = \"{\\\"$metadata\\\": {\\\"$model\\\": \\\"dtmi:samples:HVAC;1\\\"}, \\\"Efficiency\\\": 10, \\\"TargetTemperature\\\": 10, \\\"TargetHumidity\\\": 10}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "912565496d1744420fc6c8de1453034569161656"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3OTkxODEw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#pullrequestreview-477991810", "createdAt": "2020-08-28T19:58:06Z", "commit": {"oid": "912565496d1744420fc6c8de1453034569161656"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3OTk2NTI0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#pullrequestreview-477996524", "createdAt": "2020-08-28T20:07:12Z", "commit": {"oid": "912565496d1744420fc6c8de1453034569161656"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMDowNzoxMlrOHJTEJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMDowNzoxMlrOHJTEJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUxMTU5MQ==", "bodyText": "it's not really returning a response", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r479511591", "createdAt": "2020-08-28T20:07:12Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -92,67 +94,282 @@ public HttpPipeline getHttpPipeline() {\n         return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, context));\n     }\n \n+    Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n     // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n     // Input is Object and output is Response<T>.\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> klazz) {\n-        return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, klazz, context));\n+    public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz) {\n+        return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, context));\n     }\n \n-    Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context) {\n+    <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz, Context context) {\n         return protocolLayer\n             .getDigitalTwins()\n             .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n-            .flatMap(\n-                response -> {\n-                    try {\n-                        String jsonResponse = mapper.writeValueAsString(response.getValue());\n-                        DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n-                        return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n-                    } catch (JsonProcessingException e) {\n-                        return Mono.error(e);\n-                    }\n-                });\n-    }\n-\n-    <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> klazz, Context context) {\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Creates a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to be created.\n+     * @param relationship The application/json relationship to be created.\n+     * @return The application/json relationship created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> createRelationship(String digitalTwinId, String relationshipId, String relationship) {\n+        return withContext(context -> createRelationship(digitalTwinId, relationshipId, relationship, context))\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Creates a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to be created.\n+     * @param relationship The application/json relationship to be created.\n+     * @return A REST response containing the application/json relationship created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, String relationship) {\n+        return withContext(context -> createRelationship(digitalTwinId, relationshipId, relationship, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> createRelationship(String digitalTwinId, String relationshipId, String relationship, Context context) {\n         return protocolLayer\n             .getDigitalTwins()\n-            .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n-            .flatMap(\n-                response -> {\n-                    T genericResponse = mapper.convertValue(response.getValue(), klazz);\n+            .addRelationshipWithResponseAsync(digitalTwinId, relationshipId, relationship, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n                     DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n-                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders));\n-                });\n+                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);\n+                }\n+            });\n     }\n \n     /**\n      * Creates a relationship on a digital twin.\n      *\n      * @param digitalTwinId The Id of the source digital twin.\n      * @param relationshipId The Id of the relationship to be created.\n-     * @param relationship The application/json relationship to be created.\n-     * @return A REST response containing the application/json relationship created.\n+     * @param relationship The relationship to be created.\n+     * @param clazz The model class to convert the relationship to.\n+     * @param <T> The generic type to convert the relationship to.\n+     * @return The relationship created.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<Response<String>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, String relationship) {\n-        return withContext(context -> createRelationshipWithResponse(digitalTwinId, relationshipId, relationship, context));\n+    public <T> Mono<T> createRelationship(String digitalTwinId, String relationshipId, Object relationship, Class<T> clazz) {\n+        return withContext(context -> createRelationship(digitalTwinId, relationshipId, relationship, clazz, context))\n+            .map(DigitalTwinsResponse::getValue);\n     }\n \n-    Mono<Response<String>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, String relationship, Context context) {\n+    /**\n+     * Creates a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to be created.\n+     * @param relationship The relationship to be created.\n+     * @param clazz The model class to convert the relationship to.\n+     * @param <T> The generic type to convert the relationship to.\n+     * @return A REST response containing the relationship created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, Object relationship, Class<T> clazz) {\n+        return withContext(context -> createRelationship(digitalTwinId, relationshipId, relationship, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> createRelationship(String digitalTwinId, String relationshipId, Object relationship, Class<T> clazz, Context context) {\n         return protocolLayer\n             .getDigitalTwins()\n             .addRelationshipWithResponseAsync(digitalTwinId, relationshipId, relationship, context)\n-            .flatMap(\n-                response -> {\n-                    try {\n-                        String jsonResponse = mapper.writeValueAsString(response.getValue());\n-                        return Mono.just(new SimpleResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse));\n-                    } catch (JsonProcessingException e) {\n-                        return Mono.error(e);\n-                    }\n-                });\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Gets a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to retrieve.\n+     * @return The application/json relationship corresponding to the provided relationshipId.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getRelationship(String digitalTwinId, String relationshipId) {\n+        return withContext(context -> getRelationship(digitalTwinId, relationshipId, context))\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to retrieve.\n+     * @return A REST response containing the application/json relationship corresponding to the provided relationshipId.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getRelationshipWithResponse(String digitalTwinId, String relationshipId) {\n+        return withContext(context -> getRelationship(digitalTwinId, relationshipId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getRelationship(String digitalTwinId, String relationshipId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getRelationshipByIdWithResponseAsync(digitalTwinId, relationshipId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to retrieve.\n+     * @param clazz The model class to convert the relationship to.\n+     * @param <T> The generic type to convert the relationship to.\n+     * @return The relationship corresponding to the provided relationshipId.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getRelationship(String digitalTwinId, String relationshipId, Class<T> clazz) {\n+        return withContext(context -> getRelationship(digitalTwinId, relationshipId, clazz, context))\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to retrieve.\n+     * @param clazz The model class to convert the relationship to.\n+     * @param <T> The generic type to convert the relationship to.\n+     * @return A REST response containing the relationship corresponding to the provided relationshipId.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getRelationshipWithResponse(String digitalTwinId, String relationshipId, Class<T> clazz) {\n+        return withContext(context -> getRelationship(digitalTwinId, relationshipId, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getRelationship(String digitalTwinId, String relationshipId, Class<T> clazz, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getRelationshipByIdWithResponseAsync(digitalTwinId, relationshipId, context)\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Updates the properties of a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to be updated.\n+     * @param relationshipUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin's relationship.\n+     * @return An empty response.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "912565496d1744420fc6c8de1453034569161656"}, "originalPosition": 274}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MDU2NDUw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#pullrequestreview-478056450", "createdAt": "2020-08-28T22:29:21Z", "commit": {"oid": "912565496d1744420fc6c8de1453034569161656"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjoyOToyMVrOHJWCEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjoyOToyMVrOHJWCEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU2MDIxMQ==", "bodyText": "\ud83c\udd92", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r479560211", "createdAt": "2020-08-28T22:29:21Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -306,23 +306,23 @@ These APIs are invoked via DigitalTwinsAsyncClient.\n      * @param digitalTwinId The Id of the source digital twin.\n      * @param relationshipId The Id of the relationship to be created.\n      * @param relationship The relationship to be created.\n-     * @param modelClass The model class to convert the relationship to.\n+     * @param clazz The model class to convert the relationship to.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "912565496d1744420fc6c8de1453034569161656"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MDU4NTA5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#pullrequestreview-478058509", "createdAt": "2020-08-28T22:36:43Z", "commit": {"oid": "912565496d1744420fc6c8de1453034569161656"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjozNjo0M1rOHJWJKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjozNjo0M1rOHJWJKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU2MjAyNA==", "bodyText": "Did we decide Rest or Http? If not yet, I'd go with Http similar to dotnet.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r479562024", "createdAt": "2020-08-28T22:36:43Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -92,67 +94,282 @@ public HttpPipeline getHttpPipeline() {\n         return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, context));\n     }\n \n+    Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n     // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n     // Input is Object and output is Response<T>.\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> klazz) {\n-        return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, klazz, context));\n+    public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz) {\n+        return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, context));\n     }\n \n-    Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context) {\n+    <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz, Context context) {\n         return protocolLayer\n             .getDigitalTwins()\n             .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n-            .flatMap(\n-                response -> {\n-                    try {\n-                        String jsonResponse = mapper.writeValueAsString(response.getValue());\n-                        DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n-                        return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n-                    } catch (JsonProcessingException e) {\n-                        return Mono.error(e);\n-                    }\n-                });\n-    }\n-\n-    <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> klazz, Context context) {\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Creates a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to be created.\n+     * @param relationship The application/json relationship to be created.\n+     * @return The application/json relationship created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> createRelationship(String digitalTwinId, String relationshipId, String relationship) {\n+        return withContext(context -> createRelationship(digitalTwinId, relationshipId, relationship, context))\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Creates a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to be created.\n+     * @param relationship The application/json relationship to be created.\n+     * @return A REST response containing the application/json relationship created.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "912565496d1744420fc6c8de1453034569161656"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MDU4Nzcz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#pullrequestreview-478058773", "createdAt": "2020-08-28T22:37:48Z", "commit": {"oid": "912565496d1744420fc6c8de1453034569161656"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjozNzo0OFrOHJWKAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjozNzo0OFrOHJWKAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU2MjI0Mw==", "bodyText": "should we also log here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r479562243", "createdAt": "2020-08-28T22:37:48Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -92,67 +94,282 @@ public HttpPipeline getHttpPipeline() {\n         return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, context));\n     }\n \n+    Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "912565496d1744420fc6c8de1453034569161656"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MDU5MzQ3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#pullrequestreview-478059347", "createdAt": "2020-08-28T22:39:57Z", "commit": {"oid": "912565496d1744420fc6c8de1453034569161656"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjozOTo1N1rOHJWMEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjozOTo1N1rOHJWMEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU2Mjc2OQ==", "bodyText": "Is this also required?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r479562769", "createdAt": "2020-08-28T22:39:57Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -92,67 +94,282 @@ public HttpPipeline getHttpPipeline() {\n         return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, context));\n     }\n \n+    Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n     // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n     // Input is Object and output is Response<T>.\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> klazz) {\n-        return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, klazz, context));\n+    public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz) {\n+        return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, context));\n     }\n \n-    Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context) {\n+    <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz, Context context) {\n         return protocolLayer\n             .getDigitalTwins()\n             .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n-            .flatMap(\n-                response -> {\n-                    try {\n-                        String jsonResponse = mapper.writeValueAsString(response.getValue());\n-                        DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n-                        return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n-                    } catch (JsonProcessingException e) {\n-                        return Mono.error(e);\n-                    }\n-                });\n-    }\n-\n-    <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> klazz, Context context) {\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Creates a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to be created.\n+     * @param relationship The application/json relationship to be created.\n+     * @return The application/json relationship created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> createRelationship(String digitalTwinId, String relationshipId, String relationship) {\n+        return withContext(context -> createRelationship(digitalTwinId, relationshipId, relationship, context))\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Creates a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to be created.\n+     * @param relationship The application/json relationship to be created.\n+     * @return A REST response containing the application/json relationship created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, String relationship) {\n+        return withContext(context -> createRelationship(digitalTwinId, relationshipId, relationship, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> createRelationship(String digitalTwinId, String relationshipId, String relationship, Context context) {\n         return protocolLayer\n             .getDigitalTwins()\n-            .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n-            .flatMap(\n-                response -> {\n-                    T genericResponse = mapper.convertValue(response.getValue(), klazz);\n+            .addRelationshipWithResponseAsync(digitalTwinId, relationshipId, relationship, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n                     DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n-                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders));\n-                });\n+                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);\n+                }\n+            });\n     }\n \n     /**\n      * Creates a relationship on a digital twin.\n      *\n      * @param digitalTwinId The Id of the source digital twin.\n      * @param relationshipId The Id of the relationship to be created.\n-     * @param relationship The application/json relationship to be created.\n-     * @return A REST response containing the application/json relationship created.\n+     * @param relationship The relationship to be created.\n+     * @param clazz The model class to convert the relationship to.\n+     * @param <T> The generic type to convert the relationship to.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "912565496d1744420fc6c8de1453034569161656"}, "originalPosition": 141}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MDYwMTQw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#pullrequestreview-478060140", "createdAt": "2020-08-28T22:42:58Z", "commit": {"oid": "912565496d1744420fc6c8de1453034569161656"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjo0Mjo1OFrOHJWO6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjo0Mjo1OFrOHJWO6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU2MzQ5Nw==", "bodyText": "How does this work?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r479563497", "createdAt": "2020-08-28T22:42:58Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -92,67 +94,282 @@ public HttpPipeline getHttpPipeline() {\n         return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, context));\n     }\n \n+    Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n     // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n     // Input is Object and output is Response<T>.\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> klazz) {\n-        return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, klazz, context));\n+    public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz) {\n+        return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, context));\n     }\n \n-    Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context) {\n+    <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz, Context context) {\n         return protocolLayer\n             .getDigitalTwins()\n             .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n-            .flatMap(\n-                response -> {\n-                    try {\n-                        String jsonResponse = mapper.writeValueAsString(response.getValue());\n-                        DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n-                        return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n-                    } catch (JsonProcessingException e) {\n-                        return Mono.error(e);\n-                    }\n-                });\n-    }\n-\n-    <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> klazz, Context context) {\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Creates a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to be created.\n+     * @param relationship The application/json relationship to be created.\n+     * @return The application/json relationship created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> createRelationship(String digitalTwinId, String relationshipId, String relationship) {\n+        return withContext(context -> createRelationship(digitalTwinId, relationshipId, relationship, context))\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Creates a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to be created.\n+     * @param relationship The application/json relationship to be created.\n+     * @return A REST response containing the application/json relationship created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, String relationship) {\n+        return withContext(context -> createRelationship(digitalTwinId, relationshipId, relationship, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> createRelationship(String digitalTwinId, String relationshipId, String relationship, Context context) {\n         return protocolLayer\n             .getDigitalTwins()\n-            .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n-            .flatMap(\n-                response -> {\n-                    T genericResponse = mapper.convertValue(response.getValue(), klazz);\n+            .addRelationshipWithResponseAsync(digitalTwinId, relationshipId, relationship, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n                     DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n-                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders));\n-                });\n+                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);\n+                }\n+            });\n     }\n \n     /**\n      * Creates a relationship on a digital twin.\n      *\n      * @param digitalTwinId The Id of the source digital twin.\n      * @param relationshipId The Id of the relationship to be created.\n-     * @param relationship The application/json relationship to be created.\n-     * @return A REST response containing the application/json relationship created.\n+     * @param relationship The relationship to be created.\n+     * @param clazz The model class to convert the relationship to.\n+     * @param <T> The generic type to convert the relationship to.\n+     * @return The relationship created.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<Response<String>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, String relationship) {\n-        return withContext(context -> createRelationshipWithResponse(digitalTwinId, relationshipId, relationship, context));\n+    public <T> Mono<T> createRelationship(String digitalTwinId, String relationshipId, Object relationship, Class<T> clazz) {\n+        return withContext(context -> createRelationship(digitalTwinId, relationshipId, relationship, clazz, context))\n+            .map(DigitalTwinsResponse::getValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "912565496d1744420fc6c8de1453034569161656"}, "originalPosition": 149}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MDY0MTMw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#pullrequestreview-478064130", "createdAt": "2020-08-28T22:58:28Z", "commit": {"oid": "912565496d1744420fc6c8de1453034569161656"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjo1ODoyOFrOHJWc_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjo1ODoyOFrOHJWc_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU2NzEwMQ==", "bodyText": "why justOrEmpty?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r479567101", "createdAt": "2020-08-28T22:58:28Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -92,67 +94,282 @@ public HttpPipeline getHttpPipeline() {\n         return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, context));\n     }\n \n+    Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n     // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n     // Input is Object and output is Response<T>.\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> klazz) {\n-        return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, klazz, context));\n+    public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz) {\n+        return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, context));\n     }\n \n-    Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context) {\n+    <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz, Context context) {\n         return protocolLayer\n             .getDigitalTwins()\n             .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n-            .flatMap(\n-                response -> {\n-                    try {\n-                        String jsonResponse = mapper.writeValueAsString(response.getValue());\n-                        DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n-                        return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n-                    } catch (JsonProcessingException e) {\n-                        return Mono.error(e);\n-                    }\n-                });\n-    }\n-\n-    <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> klazz, Context context) {\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Creates a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to be created.\n+     * @param relationship The application/json relationship to be created.\n+     * @return The application/json relationship created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> createRelationship(String digitalTwinId, String relationshipId, String relationship) {\n+        return withContext(context -> createRelationship(digitalTwinId, relationshipId, relationship, context))\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Creates a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to be created.\n+     * @param relationship The application/json relationship to be created.\n+     * @return A REST response containing the application/json relationship created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, String relationship) {\n+        return withContext(context -> createRelationship(digitalTwinId, relationshipId, relationship, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> createRelationship(String digitalTwinId, String relationshipId, String relationship, Context context) {\n         return protocolLayer\n             .getDigitalTwins()\n-            .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n-            .flatMap(\n-                response -> {\n-                    T genericResponse = mapper.convertValue(response.getValue(), klazz);\n+            .addRelationshipWithResponseAsync(digitalTwinId, relationshipId, relationship, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n                     DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n-                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders));\n-                });\n+                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);\n+                }\n+            });\n     }\n \n     /**\n      * Creates a relationship on a digital twin.\n      *\n      * @param digitalTwinId The Id of the source digital twin.\n      * @param relationshipId The Id of the relationship to be created.\n-     * @param relationship The application/json relationship to be created.\n-     * @return A REST response containing the application/json relationship created.\n+     * @param relationship The relationship to be created.\n+     * @param clazz The model class to convert the relationship to.\n+     * @param <T> The generic type to convert the relationship to.\n+     * @return The relationship created.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<Response<String>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, String relationship) {\n-        return withContext(context -> createRelationshipWithResponse(digitalTwinId, relationshipId, relationship, context));\n+    public <T> Mono<T> createRelationship(String digitalTwinId, String relationshipId, Object relationship, Class<T> clazz) {\n+        return withContext(context -> createRelationship(digitalTwinId, relationshipId, relationship, clazz, context))\n+            .map(DigitalTwinsResponse::getValue);\n     }\n \n-    Mono<Response<String>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, String relationship, Context context) {\n+    /**\n+     * Creates a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to be created.\n+     * @param relationship The relationship to be created.\n+     * @param clazz The model class to convert the relationship to.\n+     * @param <T> The generic type to convert the relationship to.\n+     * @return A REST response containing the relationship created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, Object relationship, Class<T> clazz) {\n+        return withContext(context -> createRelationship(digitalTwinId, relationshipId, relationship, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> createRelationship(String digitalTwinId, String relationshipId, Object relationship, Class<T> clazz, Context context) {\n         return protocolLayer\n             .getDigitalTwins()\n             .addRelationshipWithResponseAsync(digitalTwinId, relationshipId, relationship, context)\n-            .flatMap(\n-                response -> {\n-                    try {\n-                        String jsonResponse = mapper.writeValueAsString(response.getValue());\n-                        return Mono.just(new SimpleResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse));\n-                    } catch (JsonProcessingException e) {\n-                        return Mono.error(e);\n-                    }\n-                });\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Gets a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to retrieve.\n+     * @return The application/json relationship corresponding to the provided relationshipId.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getRelationship(String digitalTwinId, String relationshipId) {\n+        return withContext(context -> getRelationship(digitalTwinId, relationshipId, context))\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to retrieve.\n+     * @return A REST response containing the application/json relationship corresponding to the provided relationshipId.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getRelationshipWithResponse(String digitalTwinId, String relationshipId) {\n+        return withContext(context -> getRelationship(digitalTwinId, relationshipId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getRelationship(String digitalTwinId, String relationshipId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getRelationshipByIdWithResponseAsync(digitalTwinId, relationshipId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "912565496d1744420fc6c8de1453034569161656"}, "originalPosition": 221}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "560de4392a4d75dd4f1f0c91069126ca9af44177", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/560de4392a4d75dd4f1f0c91069126ca9af44177", "committedDate": "2020-08-31T17:37:02Z", "message": "feat(adt): Add implementation for relationship APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73d41160feacd2d5f6296f6caa656a02d9cd6d62", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/73d41160feacd2d5f6296f6caa656a02d9cd6d62", "committedDate": "2020-08-31T17:37:08Z", "message": "CR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0508af47a51f978a3ebaf1d991cd638c3deef1ca", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0508af47a51f978a3ebaf1d991cd638c3deef1ca", "committedDate": "2020-08-31T16:52:55Z", "message": "CR comments"}, "afterCommit": {"oid": "73d41160feacd2d5f6296f6caa656a02d9cd6d62", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/73d41160feacd2d5f6296f6caa656a02d9cd6d62", "committedDate": "2020-08-31T17:37:08Z", "message": "CR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d3469f2d8b7ab8e5e440306474053de5a67e04a", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0d3469f2d8b7ab8e5e440306474053de5a67e04a", "committedDate": "2020-08-31T17:39:42Z", "message": "fix rebase issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e3b60c4626e32ecb325f018c1ef6d77725482ff", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2e3b60c4626e32ecb325f018c1ef6d77725482ff", "committedDate": "2020-08-31T17:41:03Z", "message": "typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9059de4dd1ca0b7d5a89a5f1c8b623db43f5e6c0", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9059de4dd1ca0b7d5a89a5f1c8b623db43f5e6c0", "committedDate": "2020-08-31T17:59:25Z", "message": "spotcheck errors"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 112, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}