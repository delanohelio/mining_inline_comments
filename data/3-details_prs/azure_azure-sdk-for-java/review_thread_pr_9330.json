{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNjQ3NDA5", "number": 9330, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMDo1NDowNVrODqAwCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjowMDo1OFrODq2_sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Mzc5MDgzOnYy", "diffSide": "RIGHT", "path": "eng/scripts/inject_codesnippets.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMDo1NDowNVrOF5i6JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMDo1NDowNVrOF5i6JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4NTA5Mg==", "bodyText": "The codesnippet tooling Java uses should throw an exception during Javadoc generation if there are duplicate snippets.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9330#discussion_r395885092", "createdAt": "2020-03-20T20:54:05Z", "author": {"login": "alzimmermsft"}, "path": "eng/scripts/inject_codesnippets.py", "diffHunk": "@@ -0,0 +1,139 @@\n+import os\n+import glob\n+import re\n+import json\n+from xml.sax.saxutils import escape, unescape\n+\n+# run this from the root of the repository\n+root = os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\", \"..\"))\n+\n+SNIPPET_BEGIN = r\"\\s*\\/\\/\\s*BEGIN\\:\\s*(?P<id>[a-zA-Z0-9\\.\\#\\-\\_]*)\\s*\"\n+SNIPPET_END = r\"\\s*\\/\\/\\s*END\\:\\s*(?P<id>[a-zA-Z0-9\\.\\#\\-\\_]*)\\s*\"\n+SNIPPET_CALL = r\"(?P<leadingspace>.*)\\{\\@codesnippet(?P<snippetid>.*)\\}\"\n+\n+EXCLUSION_ARRAY = [\"JavadocCodeSnippetCheck.java\"]\n+\n+HTML_ESCAPE_TABLE = {\n+    \"&\": \"&amp;\",\n+    '\"': \"&quot;\",\n+    \">\": \"&gt;\",\n+    \"<\": \"&lt;\",\n+    \"@\": \"{@literal @}\",\n+    \"{\": \"&#123;\",\n+    \"}\": \"&#125;\",\n+    \"(\": \"&#40;\",\n+    \")\": \"&#41;\",\n+    \"/\": \"&#47;\",\n+    \"\\\\\": \"&#92;\",\n+}\n+\n+\n+class SnippetDict:\n+    def __init__(self, start_dict={}):\n+        self.snippet_dict = start_dict\n+\n+    def __nonzero__(self):\n+        return self.snippet_dict\n+\n+    def __str__(self):\n+        return json.dumps(self.snippet_dict)\n+\n+    def begin_snippet(self, key):\n+        if key not in self.snippet_dict:\n+            self.snippet_dict[key] = []\n+        else:\n+            raise \"Duplicate snippet begin.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f85444b9b81dd06c16edbf1dd340830931dc0e55"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Mzc5MjU1OnYy", "diffSide": "RIGHT", "path": "eng/scripts/inject_codesnippets.py", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMDo1NDo0NlrOF5i7Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwNzozNDo1MFrOF5oIZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4NTM1NQ==", "bodyText": "Do these regexes match what the codesnippet tool is using?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9330#discussion_r395885355", "createdAt": "2020-03-20T20:54:46Z", "author": {"login": "alzimmermsft"}, "path": "eng/scripts/inject_codesnippets.py", "diffHunk": "@@ -0,0 +1,139 @@\n+import os\n+import glob\n+import re\n+import json\n+from xml.sax.saxutils import escape, unescape\n+\n+# run this from the root of the repository\n+root = os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\", \"..\"))\n+\n+SNIPPET_BEGIN = r\"\\s*\\/\\/\\s*BEGIN\\:\\s*(?P<id>[a-zA-Z0-9\\.\\#\\-\\_]*)\\s*\"\n+SNIPPET_END = r\"\\s*\\/\\/\\s*END\\:\\s*(?P<id>[a-zA-Z0-9\\.\\#\\-\\_]*)\\s*\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f85444b9b81dd06c16edbf1dd340830931dc0e55"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwMTM5Mw==", "bodyText": "The space after BEGIN: and END: tags is mandatory.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9330#discussion_r395901393", "createdAt": "2020-03-20T21:38:18Z", "author": {"login": "srnagar"}, "path": "eng/scripts/inject_codesnippets.py", "diffHunk": "@@ -0,0 +1,139 @@\n+import os\n+import glob\n+import re\n+import json\n+from xml.sax.saxutils import escape, unescape\n+\n+# run this from the root of the repository\n+root = os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\", \"..\"))\n+\n+SNIPPET_BEGIN = r\"\\s*\\/\\/\\s*BEGIN\\:\\s*(?P<id>[a-zA-Z0-9\\.\\#\\-\\_]*)\\s*\"\n+SNIPPET_END = r\"\\s*\\/\\/\\s*END\\:\\s*(?P<id>[a-zA-Z0-9\\.\\#\\-\\_]*)\\s*\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4NTM1NQ=="}, "originalCommit": {"oid": "f85444b9b81dd06c16edbf1dd340830931dc0e55"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzODc2NQ==", "bodyText": "@srnagar Do you mean I should make this \\s and not \\s*?\nRight here: END\\:\\s*", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9330#discussion_r395938765", "createdAt": "2020-03-21T00:09:57Z", "author": {"login": "scbedd"}, "path": "eng/scripts/inject_codesnippets.py", "diffHunk": "@@ -0,0 +1,139 @@\n+import os\n+import glob\n+import re\n+import json\n+from xml.sax.saxutils import escape, unescape\n+\n+# run this from the root of the repository\n+root = os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\", \"..\"))\n+\n+SNIPPET_BEGIN = r\"\\s*\\/\\/\\s*BEGIN\\:\\s*(?P<id>[a-zA-Z0-9\\.\\#\\-\\_]*)\\s*\"\n+SNIPPET_END = r\"\\s*\\/\\/\\s*END\\:\\s*(?P<id>[a-zA-Z0-9\\.\\#\\-\\_]*)\\s*\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4NTM1NQ=="}, "originalCommit": {"oid": "f85444b9b81dd06c16edbf1dd340830931dc0e55"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk3MDY2MA==", "bodyText": "\\s* is 0 or more spaces instead you should have 1 or more spaces \\s+. See my suggested update to the regex above.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9330#discussion_r395970660", "createdAt": "2020-03-21T07:34:50Z", "author": {"login": "srnagar"}, "path": "eng/scripts/inject_codesnippets.py", "diffHunk": "@@ -0,0 +1,139 @@\n+import os\n+import glob\n+import re\n+import json\n+from xml.sax.saxutils import escape, unescape\n+\n+# run this from the root of the repository\n+root = os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\", \"..\"))\n+\n+SNIPPET_BEGIN = r\"\\s*\\/\\/\\s*BEGIN\\:\\s*(?P<id>[a-zA-Z0-9\\.\\#\\-\\_]*)\\s*\"\n+SNIPPET_END = r\"\\s*\\/\\/\\s*END\\:\\s*(?P<id>[a-zA-Z0-9\\.\\#\\-\\_]*)\\s*\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4NTM1NQ=="}, "originalCommit": {"oid": "f85444b9b81dd06c16edbf1dd340830931dc0e55"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzgwOTI0OnYy", "diffSide": "RIGHT", "path": "eng/scripts/inject_codesnippets.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTowMTozOFrOF5jFnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMDowODo0MlrOF5mLCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4ODAzMQ==", "bodyText": "Right now the only directories that can contain snippets are in src/samples/java/* if we want to tighten where we are looking for snippets.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9330#discussion_r395888031", "createdAt": "2020-03-20T21:01:38Z", "author": {"login": "alzimmermsft"}, "path": "eng/scripts/inject_codesnippets.py", "diffHunk": "@@ -0,0 +1,139 @@\n+import os\n+import glob\n+import re\n+import json\n+from xml.sax.saxutils import escape, unescape\n+\n+# run this from the root of the repository\n+root = os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\", \"..\"))\n+\n+SNIPPET_BEGIN = r\"\\s*\\/\\/\\s*BEGIN\\:\\s*(?P<id>[a-zA-Z0-9\\.\\#\\-\\_]*)\\s*\"\n+SNIPPET_END = r\"\\s*\\/\\/\\s*END\\:\\s*(?P<id>[a-zA-Z0-9\\.\\#\\-\\_]*)\\s*\"\n+SNIPPET_CALL = r\"(?P<leadingspace>.*)\\{\\@codesnippet(?P<snippetid>.*)\\}\"\n+\n+EXCLUSION_ARRAY = [\"JavadocCodeSnippetCheck.java\"]\n+\n+HTML_ESCAPE_TABLE = {\n+    \"&\": \"&amp;\",\n+    '\"': \"&quot;\",\n+    \">\": \"&gt;\",\n+    \"<\": \"&lt;\",\n+    \"@\": \"{@literal @}\",\n+    \"{\": \"&#123;\",\n+    \"}\": \"&#125;\",\n+    \"(\": \"&#40;\",\n+    \")\": \"&#41;\",\n+    \"/\": \"&#47;\",\n+    \"\\\\\": \"&#92;\",\n+}\n+\n+\n+class SnippetDict:\n+    def __init__(self, start_dict={}):\n+        self.snippet_dict = start_dict\n+\n+    def __nonzero__(self):\n+        return self.snippet_dict\n+\n+    def __str__(self):\n+        return json.dumps(self.snippet_dict)\n+\n+    def begin_snippet(self, key):\n+        if key not in self.snippet_dict:\n+            self.snippet_dict[key] = []\n+        else:\n+            raise \"Duplicate snippet begin.\"\n+\n+    def process_line(self, line):\n+        self.snippet_dict = {k: v + [line] for k, v in self.snippet_dict.items()}\n+\n+    def finalize_snippet(self, key):\n+        return self.snippet_dict.pop(key)\n+\n+\n+def get_snippets_from_file(file):\n+    finished_snippets = {}\n+    running_dict = SnippetDict()\n+\n+    with open(file, \"r\", encoding=\"utf-8\") as source:\n+        print(file)\n+        for line in source.readlines():\n+\n+            begin = re.match(SNIPPET_BEGIN, line)\n+            end = re.match(SNIPPET_END, line)\n+\n+            if begin:\n+                id_beginning = begin.groupdict()[\"id\"]\n+                running_dict.begin_snippet(id_beginning)\n+            elif end:\n+                id_ending = end.groupdict()[\"id\"]\n+                ending = running_dict.finalize_snippet(id_ending)\n+                finished_snippets[id_ending] = ending\n+            elif running_dict:\n+                running_dict.process_line(line)\n+\n+    return finished_snippets\n+\n+\n+def check_exclusion(file_name, exclusion_array):\n+    if not os.path.isdir(file_name):\n+        name = os.path.basename(file_name)\n+\n+        return name in exclusion_array\n+\n+\n+if __name__ == \"__main__\":\n+\n+    # walk the codebase, find all java files\n+    all_files = glob.glob(\"**/*.java\", recursive=True)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f85444b9b81dd06c16edbf1dd340830931dc0e55"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzODU2OA==", "bodyText": "You're right. Why I choose this method is that I need all the java files anyway to search for @codesnippet CALLS.\nGiven that I need to find all the java files anyway, I do it once, then pull from that already generated list for the snippets files.\nI will adjust the targeting in the filter though. Thanks!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9330#discussion_r395938568", "createdAt": "2020-03-21T00:08:42Z", "author": {"login": "scbedd"}, "path": "eng/scripts/inject_codesnippets.py", "diffHunk": "@@ -0,0 +1,139 @@\n+import os\n+import glob\n+import re\n+import json\n+from xml.sax.saxutils import escape, unescape\n+\n+# run this from the root of the repository\n+root = os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\", \"..\"))\n+\n+SNIPPET_BEGIN = r\"\\s*\\/\\/\\s*BEGIN\\:\\s*(?P<id>[a-zA-Z0-9\\.\\#\\-\\_]*)\\s*\"\n+SNIPPET_END = r\"\\s*\\/\\/\\s*END\\:\\s*(?P<id>[a-zA-Z0-9\\.\\#\\-\\_]*)\\s*\"\n+SNIPPET_CALL = r\"(?P<leadingspace>.*)\\{\\@codesnippet(?P<snippetid>.*)\\}\"\n+\n+EXCLUSION_ARRAY = [\"JavadocCodeSnippetCheck.java\"]\n+\n+HTML_ESCAPE_TABLE = {\n+    \"&\": \"&amp;\",\n+    '\"': \"&quot;\",\n+    \">\": \"&gt;\",\n+    \"<\": \"&lt;\",\n+    \"@\": \"{@literal @}\",\n+    \"{\": \"&#123;\",\n+    \"}\": \"&#125;\",\n+    \"(\": \"&#40;\",\n+    \")\": \"&#41;\",\n+    \"/\": \"&#47;\",\n+    \"\\\\\": \"&#92;\",\n+}\n+\n+\n+class SnippetDict:\n+    def __init__(self, start_dict={}):\n+        self.snippet_dict = start_dict\n+\n+    def __nonzero__(self):\n+        return self.snippet_dict\n+\n+    def __str__(self):\n+        return json.dumps(self.snippet_dict)\n+\n+    def begin_snippet(self, key):\n+        if key not in self.snippet_dict:\n+            self.snippet_dict[key] = []\n+        else:\n+            raise \"Duplicate snippet begin.\"\n+\n+    def process_line(self, line):\n+        self.snippet_dict = {k: v + [line] for k, v in self.snippet_dict.items()}\n+\n+    def finalize_snippet(self, key):\n+        return self.snippet_dict.pop(key)\n+\n+\n+def get_snippets_from_file(file):\n+    finished_snippets = {}\n+    running_dict = SnippetDict()\n+\n+    with open(file, \"r\", encoding=\"utf-8\") as source:\n+        print(file)\n+        for line in source.readlines():\n+\n+            begin = re.match(SNIPPET_BEGIN, line)\n+            end = re.match(SNIPPET_END, line)\n+\n+            if begin:\n+                id_beginning = begin.groupdict()[\"id\"]\n+                running_dict.begin_snippet(id_beginning)\n+            elif end:\n+                id_ending = end.groupdict()[\"id\"]\n+                ending = running_dict.finalize_snippet(id_ending)\n+                finished_snippets[id_ending] = ending\n+            elif running_dict:\n+                running_dict.process_line(line)\n+\n+    return finished_snippets\n+\n+\n+def check_exclusion(file_name, exclusion_array):\n+    if not os.path.isdir(file_name):\n+        name = os.path.basename(file_name)\n+\n+        return name in exclusion_array\n+\n+\n+if __name__ == \"__main__\":\n+\n+    # walk the codebase, find all java files\n+    all_files = glob.glob(\"**/*.java\", recursive=True)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4ODAzMQ=="}, "originalCommit": {"oid": "f85444b9b81dd06c16edbf1dd340830931dc0e55"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Mzg0ODA5OnYy", "diffSide": "RIGHT", "path": "eng/scripts/inject_codesnippets.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMToxODozOFrOF5jeZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMToxODozOFrOF5jeZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg5NDM3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            SNIPPET_BEGIN = r\"\\s*\\/\\/\\s*BEGIN\\:\\s*(?P<id>[a-zA-Z0-9\\.\\#\\-\\_]*)\\s*\"\n          \n          \n            \n            SNIPPET_BEGIN = r\"\\s*\\/\\/\\s*BEGIN\\:\\s+(?P<id>[a-zA-Z0-9\\.\\#\\-\\_]*)\\s*\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9330#discussion_r395894372", "createdAt": "2020-03-20T21:18:38Z", "author": {"login": "srnagar"}, "path": "eng/scripts/inject_codesnippets.py", "diffHunk": "@@ -0,0 +1,139 @@\n+import os\n+import glob\n+import re\n+import json\n+from xml.sax.saxutils import escape, unescape\n+\n+# run this from the root of the repository\n+root = os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\", \"..\"))\n+\n+SNIPPET_BEGIN = r\"\\s*\\/\\/\\s*BEGIN\\:\\s*(?P<id>[a-zA-Z0-9\\.\\#\\-\\_]*)\\s*\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f85444b9b81dd06c16edbf1dd340830931dc0e55"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Mzg0ODU3OnYy", "diffSide": "RIGHT", "path": "eng/scripts/inject_codesnippets.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMToxODo1MFrOF5jesg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMToxODo1MFrOF5jesg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg5NDQ1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            SNIPPET_END = r\"\\s*\\/\\/\\s*END\\:\\s*(?P<id>[a-zA-Z0-9\\.\\#\\-\\_]*)\\s*\"\n          \n          \n            \n            SNIPPET_END = r\"\\s*\\/\\/\\s*END\\:\\s+(?P<id>[a-zA-Z0-9\\.\\#\\-\\_]*)\\s*\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9330#discussion_r395894450", "createdAt": "2020-03-20T21:18:50Z", "author": {"login": "srnagar"}, "path": "eng/scripts/inject_codesnippets.py", "diffHunk": "@@ -0,0 +1,139 @@\n+import os\n+import glob\n+import re\n+import json\n+from xml.sax.saxutils import escape, unescape\n+\n+# run this from the root of the repository\n+root = os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\", \"..\"))\n+\n+SNIPPET_BEGIN = r\"\\s*\\/\\/\\s*BEGIN\\:\\s*(?P<id>[a-zA-Z0-9\\.\\#\\-\\_]*)\\s*\"\n+SNIPPET_END = r\"\\s*\\/\\/\\s*END\\:\\s*(?P<id>[a-zA-Z0-9\\.\\#\\-\\_]*)\\s*\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f85444b9b81dd06c16edbf1dd340830931dc0e55"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODk2NTczOnYy", "diffSide": "RIGHT", "path": "eng/pipelines/templates/jobs/archetype-sdk-client.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODozMjo1NlrOF6S3ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODo0MzowNFrOF6TPRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MDgyMA==", "bodyText": "/CC @weshaggard @mitchdenny\nIt's not clear to me if this is the correct place to be calling this or if this should be similar to what I'd done for the generate overview. This does differ from the replace relatively links as that is used across all the language and this is specific to Java. If it used the same approach as the generate overview stuff then it could be tested locally as part of the build with a flag instead of running a script across the entire repo and then building a given library (or submitting a PR and having to download artifacts). The code snippets for a given library are always going to be under that library's directory in the repo (typically under the /samples subdirectory) so processing as part of the library build would effectively work the same way. The changes would minimal and he could follow the same pattern which would be to declare a profile in pom.client.xml and then pass in that flag inside archetype-sdk-client.yml. It would also mean that the python script would have to change to take a single directory as an argument.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9330#discussion_r396670820", "createdAt": "2020-03-23T18:32:56Z", "author": {"login": "JimSuplizio"}, "path": "eng/pipelines/templates/jobs/archetype-sdk-client.yml", "diffHunk": "@@ -102,6 +102,11 @@ jobs:\n           BuildSHA: $(Build.SourceVersion)\n           RepoId: 'Azure/azure-sdk-for-java'\n \n+      - script: |\n+          python ./eng/scripts/inject_codesnippets.py\n+        displayName: 'Replace @codesnippet with embedded pre element'\n+        workingDirectory: $(Build.SourcesDirectory)\n+        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f85444b9b81dd06c16edbf1dd340830931dc0e55"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3NjkzMg==", "bodyText": "I'm planning on adjusting to act just like generate-overview after your feedback Jim.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9330#discussion_r396676932", "createdAt": "2020-03-23T18:43:04Z", "author": {"login": "scbedd"}, "path": "eng/pipelines/templates/jobs/archetype-sdk-client.yml", "diffHunk": "@@ -102,6 +102,11 @@ jobs:\n           BuildSHA: $(Build.SourceVersion)\n           RepoId: 'Azure/azure-sdk-for-java'\n \n+      - script: |\n+          python ./eng/scripts/inject_codesnippets.py\n+        displayName: 'Replace @codesnippet with embedded pre element'\n+        workingDirectory: $(Build.SourcesDirectory)\n+        ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MDgyMA=="}, "originalCommit": {"oid": "f85444b9b81dd06c16edbf1dd340830931dc0e55"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTg1MDExOnYy", "diffSide": "RIGHT", "path": "eng/pipelines/templates/jobs/archetype-sdk-client.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMzoxNzo0NVrOF6bmrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMzoxNzo0NVrOF6bmrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgxMzk5Ng==", "bodyText": "Oh whoops I already did this once. Fixing.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9330#discussion_r396813996", "createdAt": "2020-03-23T23:17:45Z", "author": {"login": "scbedd"}, "path": "eng/pipelines/templates/jobs/archetype-sdk-client.yml", "diffHunk": "@@ -111,7 +111,7 @@ jobs:\n         inputs:\n           mavenPomFile: pom.xml\n           goals: 'package'\n-          options: '$(DefaultOptions) \"-DpackageOutputDirectory=$(Build.ArtifactStagingDirectory)\" -DskipTests -Dgenerate-overview -pl $(ProjectList) -am' # We include template-module so we ensure it always builds in CI\n+          options: '$(DefaultOptions) \"-DpackageOutputDirectory=$(Build.ArtifactStagingDirectory)\" -DskipTests -Dinject-codesnippets -Dgenerate-overview -Dinject-codesnippets -pl $(ProjectList) -am' # We include template-module so we ensure it always builds in CI", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16c86581dccf9ce28a4f51ca0849e558d42642e1"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjY3ODI2OnYy", "diffSide": "RIGHT", "path": "pom.client.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjowMDo1OFrOF63Xjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjowMDo1OFrOF63Xjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI2ODg3OA==", "bodyText": "I'm not a big fan of calling python from maven but we already do it and you made it opt-in so I'll live with it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9330#discussion_r397268878", "createdAt": "2020-03-24T16:00:58Z", "author": {"login": "weshaggard"}, "path": "pom.client.xml", "diffHunk": "@@ -1073,6 +1073,50 @@\n       </build>\n     </profile>\n \n+    <!-- Skip codesnippet injection unless -Dinject-codesnippets is passed as an argument.\n+      This is specifically done to prevent requiring python as a pre-requisite since\n+      this is only needed by the build system. This is also necessary due to limitations in consumption\n+      from docs side. \n+       -->\n+    <profile>\n+      <id>replace-codesnippet-references</id>\n+      <activation>\n+        <property>\n+          <name>inject-codesnippets</name>\n+        </property>\n+        <file>\n+          <exists>../../../eng/pipelines/scripts/inject_codesnippets.py</exists>\n+        </file>\n+      </activation>\n+      <build>\n+        <plugins>\n+          <plugin>\n+            <groupId>org.codehaus.mojo</groupId>\n+            <artifactId>exec-maven-plugin</artifactId>\n+            <version>1.2.1</version> <!-- {x-version-update;org.codehaus.mojo:exec-maven-plugin;external_dependency} -->\n+            <executions>\n+              <execution>\n+                <id>replace-codesnippet-references</id>\n+                <phase>prepare-package</phase>\n+                <goals>\n+                  <goal>exec</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+            <configuration>\n+              <executable>python</executable>\n+              <workingDirectory>${project.basedir}</workingDirectory>\n+              <arguments>\n+                <argument>../../../eng/pipelines/scripts/inject_codesnippets.py</argument>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04edfaf8d4090e35a361e7f6c79dc141c94c990"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 74, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}