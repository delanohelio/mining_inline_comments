{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NTc0MzM0", "number": 12374, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOToxMTo1OVrOEI4_Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjoxNTozMlrOEJR66A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzU3NzIyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOToxMTo1OVrOGpIT9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToxNjo1OFrOGpr_8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc4MDk4MA==", "bodyText": "Why not just an ArrayList? rather than an AtomicReference wrapping a list.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12374#discussion_r445780980", "createdAt": "2020-06-25T19:11:59Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -46,6 +46,7 @@\n class ServiceBusReceiverAsyncClientIntegrationTest extends IntegrationTestBase {\n     private final ClientLogger logger = new ClientLogger(ServiceBusReceiverAsyncClientIntegrationTest.class);\n     private final AtomicInteger messagesPending = new AtomicInteger();\n+    private final AtomicReference<List<Long>> messagesDeferredPending = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b77c5e634648da659a780279296ddc7f873ec6ab"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2NTY4MQ==", "bodyText": "Still unsure of why we are using an AtomicReference? Tests are run sequentially. Even then, why not a ConcurrentSet.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12374#discussion_r446365681", "createdAt": "2020-06-26T19:16:58Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -46,6 +46,7 @@\n class ServiceBusReceiverAsyncClientIntegrationTest extends IntegrationTestBase {\n     private final ClientLogger logger = new ClientLogger(ServiceBusReceiverAsyncClientIntegrationTest.class);\n     private final AtomicInteger messagesPending = new AtomicInteger();\n+    private final AtomicReference<List<Long>> messagesDeferredPending = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc4MDk4MA=="}, "originalCommit": {"oid": "b77c5e634648da659a780279296ddc7f873ec6ab"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzU3ODQ2OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOToxMjoxN1rOGpIUqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOToxMjoxN1rOGpIUqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc4MTE2MA==", "bodyText": "Clean up these messageIds.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12374#discussion_r445781160", "createdAt": "2020-06-25T19:12:17Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -117,7 +133,7 @@ void createTransactionAndRollbackMessagesTest(MessagingEntityType entityType) {\n         // Arrange\n         setSenderAndReceiver(entityType, 0, isSessionEnabled);\n \n-        final String messageId = UUID.randomUUID().toString();\n+        final String messageId = \"createTransactionAndRollbackMessagesTest\";UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b77c5e634648da659a780279296ddc7f873ec6ab"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzU4MTI3OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOToxMjo1OFrOGpIWRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOTo1OTo1OVrOGptFFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc4MTU3NA==", "bodyText": "Doesn't this overlap with your pendingDeferredMessages member variable at the top?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12374#discussion_r445781574", "createdAt": "2020-06-25T19:12:58Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -988,4 +1023,12 @@ private int completeMessages(ServiceBusReceiverAsyncClient client, List<String>\n \n         return lockTokens.size();\n     }\n+\n+    private void completeDeferredMessages(ServiceBusReceiverAsyncClient client, ServiceBusReceivedMessage receivedMessage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b77c5e634648da659a780279296ddc7f873ec6ab"}, "originalPosition": 358}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM4MzM4Mg==", "bodyText": "It does not conflict, because in case of session the receiver has to be the same one which locked the session in first place.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12374#discussion_r446383382", "createdAt": "2020-06-26T19:59:59Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -988,4 +1023,12 @@ private int completeMessages(ServiceBusReceiverAsyncClient client, List<String>\n \n         return lockTokens.size();\n     }\n+\n+    private void completeDeferredMessages(ServiceBusReceiverAsyncClient client, ServiceBusReceivedMessage receivedMessage) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc4MTU3NA=="}, "originalCommit": {"oid": "b77c5e634648da659a780279296ddc7f873ec6ab"}, "originalPosition": 358}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzU4NDk0OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/UnnamedSessionManagerIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOToxMzo1NlrOGpIYZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjoxNDoyM1rOGpwIOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc4MjExNw==", "bodyText": "This method is only used once. Why don't we roll in the functionality.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12374#discussion_r445782117", "createdAt": "2020-06-25T19:13:56Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/UnnamedSessionManagerIntegrationTest.java", "diffHunk": "@@ -92,10 +95,11 @@ void singleUnnamedSession(MessagingEntityType entityType) {\n                 .assertNext(context -> assertMessageEquals(sessionId, messageId, contents, context))\n                 .assertNext(context -> assertMessageEquals(sessionId, messageId, contents, context))\n                 .assertNext(context -> assertMessageEquals(sessionId, messageId, contents, context))\n-                .expectComplete()\n+                .thenCancel()\n                 .verify(Duration.ofMinutes(2));\n         } finally {\n             subscription.dispose();\n+            completeMessages(receiver, lockTokens, sessionId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b77c5e634648da659a780279296ddc7f873ec6ab"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM4NDU1Ng==", "bodyText": "I think, it is cleaner and improve readability.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12374#discussion_r446384556", "createdAt": "2020-06-26T20:02:51Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/UnnamedSessionManagerIntegrationTest.java", "diffHunk": "@@ -92,10 +95,11 @@ void singleUnnamedSession(MessagingEntityType entityType) {\n                 .assertNext(context -> assertMessageEquals(sessionId, messageId, contents, context))\n                 .assertNext(context -> assertMessageEquals(sessionId, messageId, contents, context))\n                 .assertNext(context -> assertMessageEquals(sessionId, messageId, contents, context))\n-                .expectComplete()\n+                .thenCancel()\n                 .verify(Duration.ofMinutes(2));\n         } finally {\n             subscription.dispose();\n+            completeMessages(receiver, lockTokens, sessionId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc4MjExNw=="}, "originalCommit": {"oid": "b77c5e634648da659a780279296ddc7f873ec6ab"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzMzI2NA==", "bodyText": "I don't think so. Methods are reusable pieces of code.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12374#discussion_r446433264", "createdAt": "2020-06-26T22:14:06Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/UnnamedSessionManagerIntegrationTest.java", "diffHunk": "@@ -92,10 +95,11 @@ void singleUnnamedSession(MessagingEntityType entityType) {\n                 .assertNext(context -> assertMessageEquals(sessionId, messageId, contents, context))\n                 .assertNext(context -> assertMessageEquals(sessionId, messageId, contents, context))\n                 .assertNext(context -> assertMessageEquals(sessionId, messageId, contents, context))\n-                .expectComplete()\n+                .thenCancel()\n                 .verify(Duration.ofMinutes(2));\n         } finally {\n             subscription.dispose();\n+            completeMessages(receiver, lockTokens, sessionId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc4MjExNw=="}, "originalCommit": {"oid": "b77c5e634648da659a780279296ddc7f873ec6ab"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzMzMzNw==", "bodyText": "This is an extra 3 lines. or one statement. You don't even use the return value.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12374#discussion_r446433337", "createdAt": "2020-06-26T22:14:23Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/UnnamedSessionManagerIntegrationTest.java", "diffHunk": "@@ -92,10 +95,11 @@ void singleUnnamedSession(MessagingEntityType entityType) {\n                 .assertNext(context -> assertMessageEquals(sessionId, messageId, contents, context))\n                 .assertNext(context -> assertMessageEquals(sessionId, messageId, contents, context))\n                 .assertNext(context -> assertMessageEquals(sessionId, messageId, contents, context))\n-                .expectComplete()\n+                .thenCancel()\n                 .verify(Duration.ofMinutes(2));\n         } finally {\n             subscription.dispose();\n+            completeMessages(receiver, lockTokens, sessionId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc4MjExNw=="}, "originalCommit": {"oid": "b77c5e634648da659a780279296ddc7f873ec6ab"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzU4ODQ0OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/test-resources.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOToxNTowNVrOGpIaiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMDoxNzoxMFrOGptgjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc4MjY2NQ==", "bodyText": "Do we need the copyIndex() if we are just going to create one subscription and session subscription for each.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12374#discussion_r445782665", "createdAt": "2020-06-25T19:15:05Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/test-resources.json", "diffHunk": "@@ -141,9 +145,9 @@\n     {\n       \"type\": \"Microsoft.ServiceBus/namespaces/topics/subscriptions\",\n       \"apiVersion\": \"2017-04-01\",\n-      \"name\": \"[concat(variables('namespaceName'), '/', variables('topicName'), '/', variables('subscriptionName'), '-', copyIndex())]\",\n+      \"name\": \"[concat(variables('namespaceName'), '/', variables('topicName'), '-', copyIndex(), '/', variables('subscriptionName'), '-0')]\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b77c5e634648da659a780279296ddc7f873ec6ab"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM5MDQxNA==", "bodyText": "We still need copyIndex() for the topic name. But I will remove -0 for subscription name.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12374#discussion_r446390414", "createdAt": "2020-06-26T20:17:10Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/test-resources.json", "diffHunk": "@@ -141,9 +145,9 @@\n     {\n       \"type\": \"Microsoft.ServiceBus/namespaces/topics/subscriptions\",\n       \"apiVersion\": \"2017-04-01\",\n-      \"name\": \"[concat(variables('namespaceName'), '/', variables('topicName'), '/', variables('subscriptionName'), '-', copyIndex())]\",\n+      \"name\": \"[concat(variables('namespaceName'), '/', variables('topicName'), '-', copyIndex(), '/', variables('subscriptionName'), '-0')]\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc4MjY2NQ=="}, "originalCommit": {"oid": "b77c5e634648da659a780279296ddc7f873ec6ab"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTIyNTk4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToxMzo0N1rOGpr6aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToxMzo0N1rOGpr6aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2NDI2NQ==", "bodyText": "do we need the index parameter?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12374#discussion_r446364265", "createdAt": "2020-06-26T19:13:47Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java", "diffHunk": "@@ -159,7 +154,7 @@ public String getTopicName() {\n      * @return Name of the first subscription.\n      */\n     public String getSubscriptionName(int index) {\n-        return getEntityName(getSubscriptionBaseName(), index);\n+        return getEntityName(getSubscriptionBaseName(), 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad5023600468e9f4233aff08237c44443263239f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTIyNjUxOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToxNDowMFrOGpr6uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToxNDowMFrOGpr6uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2NDM0Nw==", "bodyText": "Same with this. the index parameter is not used.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12374#discussion_r446364347", "createdAt": "2020-06-26T19:14:00Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java", "diffHunk": "@@ -168,7 +163,7 @@ public String getSubscriptionName(int index) {\n      * @return Name of the first session-enabled subscription.\n      */\n     public String getSessionSubscriptionName(int index) {\n-        return getEntityName(getSessionSubscriptionBaseName(), index);\n+        return getEntityName(getSessionSubscriptionBaseName(), 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad5023600468e9f4233aff08237c44443263239f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTIyNzc0OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToxNDoyNlrOGpr7gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToxNDoyNlrOGpr7gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2NDU0Nw==", "bodyText": "Add back the documentation?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12374#discussion_r446364547", "createdAt": "2020-06-26T19:14:26Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java", "diffHunk": "@@ -144,13 +144,8 @@ public String getSessionQueueName(int index) {\n         return getEntityName(getSessionQueueBaseName(), index);\n     }\n \n-    /**\n-     * Gets the name of the topic.\n-     *\n-     * @return Name of the topic.\n-     */\n-    public String getTopicName() {\n-        return TestUtils.getTopicName();\n+    public String getTopicName(int index) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad5023600468e9f4233aff08237c44443263239f"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTIzMDk0OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToxNToyN1rOGpr9Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMDoyMjozNFrOGptpIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2NTAxNA==", "bodyText": "This is already fetched if you look at line 233.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12374#discussion_r446365014", "createdAt": "2020-06-26T19:15:27Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java", "diffHunk": "@@ -233,12 +228,40 @@ protected ServiceBusClientBuilder getBuilder(boolean useCredentials) {\n             .transportType(AmqpTransportType.AMQP)\n             .scheduler(scheduler);\n \n+        logger.info(\"Getting Builder using credentials : [{}] \", useCredentials);\n         if (useCredentials) {\n             final String fullyQualifiedDomainName = getFullyQualifiedDomainName();\n \n             assumeTrue(fullyQualifiedDomainName != null && !fullyQualifiedDomainName.isEmpty(),\n                 \"AZURE_SERVICEBUS_FULLY_QUALIFIED_DOMAIN_NAME variable needs to be set when using credentials.\");\n+            String clientId = System.getenv(\"AZURE_CLIENT_ID\");\n+            String domainName = System.getenv(\"AZURE_SERVICEBUS_FULLY_QUALIFIED_DOMAIN_NAME\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad5023600468e9f4233aff08237c44443263239f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM5MjYxMA==", "bodyText": "This was for debugging in pipeline because It was working on my local but not in pipeline. I will remove this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12374#discussion_r446392610", "createdAt": "2020-06-26T20:22:34Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java", "diffHunk": "@@ -233,12 +228,40 @@ protected ServiceBusClientBuilder getBuilder(boolean useCredentials) {\n             .transportType(AmqpTransportType.AMQP)\n             .scheduler(scheduler);\n \n+        logger.info(\"Getting Builder using credentials : [{}] \", useCredentials);\n         if (useCredentials) {\n             final String fullyQualifiedDomainName = getFullyQualifiedDomainName();\n \n             assumeTrue(fullyQualifiedDomainName != null && !fullyQualifiedDomainName.isEmpty(),\n                 \"AZURE_SERVICEBUS_FULLY_QUALIFIED_DOMAIN_NAME variable needs to be set when using credentials.\");\n+            String clientId = System.getenv(\"AZURE_CLIENT_ID\");\n+            String domainName = System.getenv(\"AZURE_SERVICEBUS_FULLY_QUALIFIED_DOMAIN_NAME\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2NTAxNA=="}, "originalCommit": {"oid": "ad5023600468e9f4233aff08237c44443263239f"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTIzMjM3OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToxNjowMVrOGpr-Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToxNjowMVrOGpr-Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2NTI0Mw==", "bodyText": "this is duplicated in subsequent lines 266.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12374#discussion_r446365243", "createdAt": "2020-06-26T19:16:01Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java", "diffHunk": "@@ -233,12 +228,40 @@ protected ServiceBusClientBuilder getBuilder(boolean useCredentials) {\n             .transportType(AmqpTransportType.AMQP)\n             .scheduler(scheduler);\n \n+        logger.info(\"Getting Builder using credentials : [{}] \", useCredentials);\n         if (useCredentials) {\n             final String fullyQualifiedDomainName = getFullyQualifiedDomainName();\n \n             assumeTrue(fullyQualifiedDomainName != null && !fullyQualifiedDomainName.isEmpty(),\n                 \"AZURE_SERVICEBUS_FULLY_QUALIFIED_DOMAIN_NAME variable needs to be set when using credentials.\");\n+            String clientId = System.getenv(\"AZURE_CLIENT_ID\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad5023600468e9f4233aff08237c44443263239f"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTIzMzExOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToxNjoxN1rOGpr-uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMDoyMzo0OFrOGptq6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2NTM3MQ==", "bodyText": "logging an error is not enough. the test should just fail with an assertNotNull", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12374#discussion_r446365371", "createdAt": "2020-06-26T19:16:17Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java", "diffHunk": "@@ -233,12 +228,40 @@ protected ServiceBusClientBuilder getBuilder(boolean useCredentials) {\n             .transportType(AmqpTransportType.AMQP)\n             .scheduler(scheduler);\n \n+        logger.info(\"Getting Builder using credentials : [{}] \", useCredentials);\n         if (useCredentials) {\n             final String fullyQualifiedDomainName = getFullyQualifiedDomainName();\n \n             assumeTrue(fullyQualifiedDomainName != null && !fullyQualifiedDomainName.isEmpty(),\n                 \"AZURE_SERVICEBUS_FULLY_QUALIFIED_DOMAIN_NAME variable needs to be set when using credentials.\");\n+            String clientId = System.getenv(\"AZURE_CLIENT_ID\");\n+            String domainName = System.getenv(\"AZURE_SERVICEBUS_FULLY_QUALIFIED_DOMAIN_NAME\");\n+            String clientSecret = System.getenv(\"AZURE_CLIENT_SECRET\");\n+            String tenantId = System.getenv(\"AZURE_TENANT_ID\");\n+\n+            if (domainName != null ) {\n+                logger.info(\"Getting Builder using credentials with domainName.length : [{}] \", domainName.length());\n+            } else {\n+                logger.error(\"Getting Builder using credentials domainName is null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad5023600468e9f4233aff08237c44443263239f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM5MzA2NQ==", "bodyText": "I am removing it because  this was temporary , just for testing in pipeline.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12374#discussion_r446393065", "createdAt": "2020-06-26T20:23:48Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java", "diffHunk": "@@ -233,12 +228,40 @@ protected ServiceBusClientBuilder getBuilder(boolean useCredentials) {\n             .transportType(AmqpTransportType.AMQP)\n             .scheduler(scheduler);\n \n+        logger.info(\"Getting Builder using credentials : [{}] \", useCredentials);\n         if (useCredentials) {\n             final String fullyQualifiedDomainName = getFullyQualifiedDomainName();\n \n             assumeTrue(fullyQualifiedDomainName != null && !fullyQualifiedDomainName.isEmpty(),\n                 \"AZURE_SERVICEBUS_FULLY_QUALIFIED_DOMAIN_NAME variable needs to be set when using credentials.\");\n+            String clientId = System.getenv(\"AZURE_CLIENT_ID\");\n+            String domainName = System.getenv(\"AZURE_SERVICEBUS_FULLY_QUALIFIED_DOMAIN_NAME\");\n+            String clientSecret = System.getenv(\"AZURE_CLIENT_SECRET\");\n+            String tenantId = System.getenv(\"AZURE_TENANT_ID\");\n+\n+            if (domainName != null ) {\n+                logger.info(\"Getting Builder using credentials with domainName.length : [{}] \", domainName.length());\n+            } else {\n+                logger.error(\"Getting Builder using credentials domainName is null.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2NTM3MQ=="}, "originalCommit": {"oid": "ad5023600468e9f4233aff08237c44443263239f"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTIzNjgxOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToxNzozMlrOGpsBAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToxNzozMlrOGpsBAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2NTk1NQ==", "bodyText": "format document. there should be a space.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12374#discussion_r446365955", "createdAt": "2020-06-26T19:17:32Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -63,26 +64,41 @@\n     @Override\n     protected void beforeTest() {\n         sessionId = UUID.randomUUID().toString();\n+        messagesDeferredPending.set(new ArrayList<>());\n     }\n \n     @Override\n     protected void afterTest() {\n         sharedBuilder =  null;\n         final int pending = messagesPending.get();\n-        if (pending < 1) {\n+        final int pendingDeferred = messagesDeferredPending.get().size();\n+        if (pending < 1 && pendingDeferred < 1) {\n             dispose(receiver, sender, receiveAndDeleteReceiver);\n             return;\n         }\n \n         // In the case that this test failed... we're going to drain the queue or subscription.\n         try {\n-            receiveAndDeleteReceiver.receive()\n-                .map(message -> {\n-                    logger.info(\"Message received: {}\", message.getMessage().getSequenceNumber());\n-                    return message;\n-                })\n-                .timeout(Duration.ofSeconds(15), Mono.empty())\n-                .blockLast();\n+            if (pending > 0) {\n+                receiveAndDeleteReceiver.receive()\n+                    .map(message -> {\n+                        logger.info(\"Message received: {}\", message.getMessage().getSequenceNumber());\n+                        return message;\n+                    })\n+                    .timeout(Duration.ofSeconds(15), Mono.empty())\n+                    .blockLast();\n+            }\n+            if (pendingDeferred > 0) {\n+                for(Long sequenceNumber: messagesDeferredPending.get()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad5023600468e9f4233aff08237c44443263239f"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTIzOTMyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToxODoyNVrOGpsCoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToxODoyNVrOGpsCoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2NjM2OA==", "bodyText": "There should be a try-catch finally around each block. Even if the pending > 0 portion throws an exception, I would want messagesDeferrenedPending to still run.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12374#discussion_r446366368", "createdAt": "2020-06-26T19:18:25Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -63,26 +64,41 @@\n     @Override\n     protected void beforeTest() {\n         sessionId = UUID.randomUUID().toString();\n+        messagesDeferredPending.set(new ArrayList<>());\n     }\n \n     @Override\n     protected void afterTest() {\n         sharedBuilder =  null;\n         final int pending = messagesPending.get();\n-        if (pending < 1) {\n+        final int pendingDeferred = messagesDeferredPending.get().size();\n+        if (pending < 1 && pendingDeferred < 1) {\n             dispose(receiver, sender, receiveAndDeleteReceiver);\n             return;\n         }\n \n         // In the case that this test failed... we're going to drain the queue or subscription.\n         try {\n-            receiveAndDeleteReceiver.receive()\n-                .map(message -> {\n-                    logger.info(\"Message received: {}\", message.getMessage().getSequenceNumber());\n-                    return message;\n-                })\n-                .timeout(Duration.ofSeconds(15), Mono.empty())\n-                .blockLast();\n+            if (pending > 0) {\n+                receiveAndDeleteReceiver.receive()\n+                    .map(message -> {\n+                        logger.info(\"Message received: {}\", message.getMessage().getSequenceNumber());\n+                        return message;\n+                    })\n+                    .timeout(Duration.ofSeconds(15), Mono.empty())\n+                    .blockLast();\n+            }\n+            if (pendingDeferred > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad5023600468e9f4233aff08237c44443263239f"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTI0MDA5OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToxODo0NFrOGpsDJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToxODo0NFrOGpsDJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2NjUwMQ==", "bodyText": "clean up", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12374#discussion_r446366501", "createdAt": "2020-06-26T19:18:44Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -212,9 +228,9 @@ void transactionSendReceiveAndCommit(DispositionStatus dispositionStatus) {\n \n         // Arrange\n         final MessagingEntityType entityType = MessagingEntityType.QUEUE;\n-        setSenderAndReceiver(entityType, 0, isSessionEnabled);\n+        setSenderAndReceiver(entityType, TestUtils.USE_CASE_PEEK_TRANSACTION_SENDRECEIVE_AND_COMPLETE, isSessionEnabled);\n \n-        final String messageId1 = UUID.randomUUID().toString();\n+        final String messageId1 = \"transactionSendReceiveAndCommit\";//UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad5023600468e9f4233aff08237c44443263239f"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTY1MzUwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjoxMDowOVrOGpwD4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjoxMDowOVrOGpwD4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzMjIyNQ==", "bodyText": "Do we need this method? all it does is call into another method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12374#discussion_r446432225", "createdAt": "2020-06-26T22:10:09Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java", "diffHunk": "@@ -149,26 +149,26 @@ public String getSessionQueueName(int index) {\n      *\n      * @return Name of the topic.\n      */\n-    public String getTopicName() {\n-        return TestUtils.getTopicName();\n+    public String getTopicName(int index) {\n+        return getEntityName(TestUtils.getTopicBaseName(), index);\n     }\n \n     /**\n      * Gets the name of the first subscription.\n      *\n      * @return Name of the first subscription.\n      */\n-    public String getSubscriptionName(int index) {\n-        return getEntityName(getSubscriptionBaseName(), index);\n+    public String getSubscriptionName() {\n+        return getSubscriptionBaseName();\n     }\n \n     /**\n      * Gets the name of the first session-enabled subscription.\n      *\n      * @return Name of the first session-enabled subscription.\n      */\n-    public String getSessionSubscriptionName(int index) {\n-        return getEntityName(getSessionSubscriptionBaseName(), index);\n+    public String getSessionSubscriptionName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cbcdc0be7e99977be6d7427b3fd12ea5327af42"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTY1NDc4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjoxMDo0OFrOGpwEog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjoyNjo0NFrOGpwVQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzMjQxOA==", "bodyText": "private final", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12374#discussion_r446432418", "createdAt": "2020-06-26T22:10:48Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -47,6 +47,7 @@\n     private final ClientLogger logger = new ClientLogger(ServiceBusReceiverAsyncClientIntegrationTest.class);\n     private final AtomicInteger messagesPending = new AtomicInteger();\n \n+    private List<Long> messagesDeferredPending = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cbcdc0be7e99977be6d7427b3fd12ea5327af42"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzNTE0Mg==", "bodyText": "I need to initialize it everytime in beforeTest.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12374#discussion_r446435142", "createdAt": "2020-06-26T22:21:16Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -47,6 +47,7 @@\n     private final ClientLogger logger = new ClientLogger(ServiceBusReceiverAsyncClientIntegrationTest.class);\n     private final AtomicInteger messagesPending = new AtomicInteger();\n \n+    private List<Long> messagesDeferredPending = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzMjQxOA=="}, "originalCommit": {"oid": "5cbcdc0be7e99977be6d7427b3fd12ea5327af42"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzNjY3NA==", "bodyText": "Why do we need an initialization here then? It'll be overwritten.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12374#discussion_r446436674", "createdAt": "2020-06-26T22:26:44Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -47,6 +47,7 @@\n     private final ClientLogger logger = new ClientLogger(ServiceBusReceiverAsyncClientIntegrationTest.class);\n     private final AtomicInteger messagesPending = new AtomicInteger();\n \n+    private List<Long> messagesDeferredPending = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzMjQxOA=="}, "originalCommit": {"oid": "5cbcdc0be7e99977be6d7427b3fd12ea5327af42"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTY1ODgyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjoxMzoxM1rOGpwHIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjoxMzoxM1rOGpwHIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzMzA1OA==", "bodyText": "format document. there should be spaces.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12374#discussion_r446433058", "createdAt": "2020-06-26T22:13:13Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -827,4 +836,24 @@ private void sendMessage(ServiceBusMessage message) {\n         int number = messagesPending.incrementAndGet();\n         logger.info(\"Number sent: {}\", number);\n     }\n+\n+    private int completeMessages(ServiceBusReceiverClient client, int totalMessages) {\n+        final IterableStream<ServiceBusReceivedMessageContext> contextStream = client.receive(totalMessages, TIMEOUT);\n+        final List<ServiceBusReceivedMessageContext> asList = contextStream.stream().collect(Collectors.toList());\n+        for (ServiceBusReceivedMessageContext context:asList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cbcdc0be7e99977be6d7427b3fd12ea5327af42"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTY2MjQ4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjoxNTozMlrOGpwJcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjoxNTozMlrOGpwJcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzMzY0OQ==", "bodyText": "nit: empty line.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12374#discussion_r446433649", "createdAt": "2020-06-26T22:15:32Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -827,4 +836,24 @@ private void sendMessage(ServiceBusMessage message) {\n         int number = messagesPending.incrementAndGet();\n         logger.info(\"Number sent: {}\", number);\n     }\n+\n+    private int completeMessages(ServiceBusReceiverClient client, int totalMessages) {\n+        final IterableStream<ServiceBusReceivedMessageContext> contextStream = client.receive(totalMessages, TIMEOUT);\n+        final List<ServiceBusReceivedMessageContext> asList = contextStream.stream().collect(Collectors.toList());\n+        for (ServiceBusReceivedMessageContext context:asList) {\n+            receiver.complete(context.getMessage());\n+        }\n+        return asList.size();\n+    }\n+\n+    private void completeDeferredMessages(ServiceBusReceiverClient client, ServiceBusReceivedMessage receivedMessage, boolean isSessionEnabled) {\n+        final ServiceBusReceivedMessage message;\n+        if (isSessionEnabled) {\n+            message = client.receiveDeferredMessage(receivedMessage.getSequenceNumber(), sessionId);\n+        } else {\n+            message = client.receiveDeferredMessage(receivedMessage.getSequenceNumber());\n+        }\n+        receiver.complete(message);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cbcdc0be7e99977be6d7427b3fd12ea5327af42"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3809, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}