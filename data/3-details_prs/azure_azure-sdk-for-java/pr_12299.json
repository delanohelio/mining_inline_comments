{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MTM5NTAx", "number": 12299, "title": "Sb track2 deadletter receiver 12063", "bodyText": "Added Feature receive from deadletter queue\nfixes #12063", "createdAt": "2020-06-17T23:05:03Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299", "merged": true, "mergeCommit": {"oid": "852c57847ce4aa7598ed457fcf29a1fb71a69df0"}, "closed": true, "closedAt": "2020-07-01T21:58:44Z", "author": {"login": "hemanttanwar"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcfYxlegH2gAyNDM2MTM5NTAxOjVjM2NmOTg4YWMxYzY1Y2IxYzRkMTRlNjEwNWQxZDA1ZmNjNDc2NDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwxEgXgH2gAyNDM2MTM5NTAxOmU5NDJiZDIyZTI1Zjk5NmE2OThiZjk0YmE2MTc3MTFiMzcwYTZkZDE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5c3cf988ac1c65cb1c4d14e6105d1d05fcc47648", "author": {"user": {"login": "azure-sdk", "name": "Azure SDK Bot"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5c3cf988ac1c65cb1c4d14e6105d1d05fcc47648", "committedDate": "2020-05-08T21:29:37Z", "message": "Increment package version after release of com.azure azure-messaging-servicebus"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39b9a1a6d1bfd9adf54c91fea1a90144cb02f288", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/39b9a1a6d1bfd9adf54c91fea1a90144cb02f288", "committedDate": "2020-05-12T19:40:58Z", "message": "resolve merge conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9cc7d2d82c36e62ea253071a1ec5ae29b4f1848", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f9cc7d2d82c36e62ea253071a1ec5ae29b4f1848", "committedDate": "2020-05-12T19:50:47Z", "message": "Merge branch 'azure-sdk-increment-package-version-servicebus-386162'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a4b16fd9cc42f7dbc5d746e81ffc8de94e55b6b", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3a4b16fd9cc42f7dbc5d746e81ffc8de94e55b6b", "committedDate": "2020-05-13T00:26:33Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b67ac9b65651a41709584818e2c3417b6aed44ca", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b67ac9b65651a41709584818e2c3417b6aed44ca", "committedDate": "2020-05-13T04:02:38Z", "message": "Merge branch 'master' of github.com:hemanttanwar/azure-sdk-for-java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "510e76c7ffb58e006a09779558d7b01246f054a9", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/510e76c7ffb58e006a09779558d7b01246f054a9", "committedDate": "2020-05-20T05:17:51Z", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "663dac49d053f1cb7e6d0bb7664a551b68dab004", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/663dac49d053f1cb7e6d0bb7664a551b68dab004", "committedDate": "2020-06-05T21:43:35Z", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2962fabdb5ada06fba88a10c18091f9721eeb302", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2962fabdb5ada06fba88a10c18091f9721eeb302", "committedDate": "2020-06-08T04:37:42Z", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d418224ef3addb68105e241776d19e70aca32bd0", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d418224ef3addb68105e241776d19e70aca32bd0", "committedDate": "2020-06-09T03:45:55Z", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a9dc359ca5e3ba7b40fe71ab0fa2c33d0e5e91b", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6a9dc359ca5e3ba7b40fe71ab0fa2c33d0e5e91b", "committedDate": "2020-06-09T21:00:31Z", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0d0d88de524992f7e211400d2b8724691310817", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d0d0d88de524992f7e211400d2b8724691310817", "committedDate": "2020-06-10T04:36:54Z", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80bcfd7bb9cd94cb966e71532fb1b8c39831db32", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/80bcfd7bb9cd94cb966e71532fb1b8c39831db32", "committedDate": "2020-06-11T16:59:10Z", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "136c66a13eacd2e49be05cef94879048c57115c9", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/136c66a13eacd2e49be05cef94879048c57115c9", "committedDate": "2020-06-17T00:33:06Z", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fdda79aa2d4072d6de625e8045043cccb1ca785", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5fdda79aa2d4072d6de625e8045043cccb1ca785", "committedDate": "2020-06-17T17:29:31Z", "message": "Continue implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9a79b9d98cd2f06d1dcae980b33433d52da9712", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f9a79b9d98cd2f06d1dcae980b33433d52da9712", "committedDate": "2020-06-17T23:03:42Z", "message": "receive from deadletter queue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2c7ecbf22a5c7b5d92f85089e0b2de55b67d5d8", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e2c7ecbf22a5c7b5d92f85089e0b2de55b67d5d8", "committedDate": "2020-06-17T23:23:00Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "111720871d89d521a68aaf571968eaf08cbbe96f", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/111720871d89d521a68aaf571968eaf08cbbe96f", "committedDate": "2020-06-17T23:39:37Z", "message": "Added test for subscription deadletter queue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6868bd83ac640798410b1145783d299688e475e1", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6868bd83ac640798410b1145783d299688e475e1", "committedDate": "2020-06-17T23:50:12Z", "message": " cleanup in test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb5dff8b5f4797b6621119c2c87970c75094840c", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fb5dff8b5f4797b6621119c2c87970c75094840c", "committedDate": "2020-06-18T00:31:58Z", "message": "test spot bugs cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed8488ac12c07af9e1bab02403aa35b0de90456b", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ed8488ac12c07af9e1bab02403aa35b0de90456b", "committedDate": "2020-06-18T00:32:39Z", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "874767a0ec4e8dbc72dce623ef701c96ff74c743", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/874767a0ec4e8dbc72dce623ef701c96ff74c743", "committedDate": "2020-06-24T08:19:24Z", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4c98cc4508a84d9d1537d7cdc3826cf7fb57c7a", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e4c98cc4508a84d9d1537d7cdc3826cf7fb57c7a", "committedDate": "2020-06-26T23:12:20Z", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "964c1b6891567dc1ebfe9a54aecf9de1acb58fe1", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/964c1b6891567dc1ebfe9a54aecf9de1acb58fe1", "committedDate": "2020-06-28T05:54:20Z", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4aa1fcc3ae90257f9882053d27e59d72d77a7de9", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4aa1fcc3ae90257f9882053d27e59d72d77a7de9", "committedDate": "2020-06-28T16:18:14Z", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MzUwMjYw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#pullrequestreview-439350260", "createdAt": "2020-06-29T17:21:38Z", "commit": {"oid": "fb5dff8b5f4797b6621119c2c87970c75094840c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoyMTozOVrOGqauBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoyMzo0M1rOGqayfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzMTE0MQ==", "bodyText": "format this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447131141", "createdAt": "2020-06-29T17:21:39Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -441,6 +451,12 @@ private static String getEntityPath(ClientLogger logger, MessagingEntityType ent\n         return entityPath;\n     }\n \n+    private static String getDeadLetterEntityPath(ClientLogger logger, MessagingEntityType entityType, String queueName,\n+        String topicName, String subscriptionName) {\n+        String entityPath = getEntityPath(logger, entityType, queueName, topicName, subscriptionName);\n+        return  entityPath + \"/$deadletterqueue\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb5dff8b5f4797b6621119c2c87970c75094840c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzMTY4NQ==", "bodyText": "I don't think this matches what it does. It doesn't just read messages from a queue or topic.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447131685", "createdAt": "2020-06-29T17:22:37Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -897,4 +913,162 @@ public ServiceBusReceiverClient buildClient() {\n             return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n         }\n     }\n+\n+    /**\n+     * Azure Service Bus queues and topic subscriptions provide a secondary subqueue, called a dead-letter queue (DLQ).\n+     * The dead-letter queue doesn't need to be explicitly created and can't be deleted or otherwise managed\n+     * independent of the main entity.\n+     *\n+     * This is builder for creating {@link ServiceBusReceiverClient} and {@link ServiceBusReceiverAsyncClient} to\n+     * consume dead-letter messages from Service Bus entity.\n+     *\n+     * @see ServiceBusReceiverAsyncClient\n+     * @see ServiceBusReceiverClient\n+     */\n+    @ServiceClientBuilder(serviceClients = {ServiceBusReceiverClient.class, ServiceBusReceiverAsyncClient.class})\n+    public final class ServiceBusDeadLetterReceiverClientBuilder {\n+        private int prefetchCount = DEFAULT_PREFETCH_COUNT;\n+        private String queueName;\n+        private ReceiveMode receiveMode = ReceiveMode.PEEK_LOCK;\n+        private String subscriptionName;\n+        private String topicName;\n+        private Duration maxAutoLockRenewalDuration;\n+\n+        private ServiceBusDeadLetterReceiverClientBuilder() {\n+        }\n+\n+        /**\n+         * Enables auto-lock renewal by renewing each message lock renewal until the {@code maxAutoLockRenewalDuration}\n+         * has elapsed.\n+         *\n+         * @param maxAutoLockRenewalDuration Maximum amount of time to renew the session lock.\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder maxAutoLockRenewalDuration(\n+            Duration maxAutoLockRenewalDuration) {\n+            this.maxAutoLockRenewalDuration = maxAutoLockRenewalDuration;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the prefetch count of the receiver. For both {@link ReceiveMode#PEEK_LOCK PEEK_LOCK} and {@link\n+         * ReceiveMode#RECEIVE_AND_DELETE RECEIVE_AND_DELETE} modes the default value is 1.\n+         *\n+         * Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when\n+         * and before the application asks for one using {@link ServiceBusReceiverAsyncClient#receive()}. Setting a\n+         * non-zero value will prefetch that number of messages. Setting the value to zero turns prefetch off.\n+         *\n+         * @param prefetchCount The prefetch count.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder prefetchCount(int prefetchCount) {\n+            this.prefetchCount = prefetchCount;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the queue to create a receiver for.\n+         *\n+         * @param queueName Name of the queue.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder queueName(String queueName) {\n+            this.queueName = queueName;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the receive mode for the receiver.\n+         *\n+         * @param receiveMode Mode for receiving messages.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder receiveMode(ReceiveMode receiveMode) {\n+            this.receiveMode = receiveMode;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the subscription in the topic to listen to. <b>{@link #topicName(String)} must also be set.\n+         * </b>\n+         *\n+         * @param subscriptionName Name of the subscription.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         * @see #topicName A topic name should be set as well.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder subscriptionName(String subscriptionName) {\n+            this.subscriptionName = subscriptionName;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the topic. <b>{@link #subscriptionName(String)} must also be set.</b>\n+         *\n+         * @param topicName Name of the topic.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         * @see #subscriptionName A subscription name should be set as well.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder topicName(String topicName) {\n+            this.topicName = topicName;\n+            return this;\n+        }\n+\n+        /**\n+         * Creates an <b>asynchronous</b> Service Bus receiver responsible for reading {@link ServiceBusMessage", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb5dff8b5f4797b6621119c2c87970c75094840c"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzMjI4Ng==", "bodyText": "We're cluttering IntegrationTestBase. I was hoping it was a space where every test case needed logic, so it goes here. Not where one or two required this. It can live in the actual class itself.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447132286", "createdAt": "2020-06-29T17:23:43Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java", "diffHunk": "@@ -273,6 +273,31 @@ protected ServiceBusSenderClientBuilder getSenderBuilder(boolean useCredentials,\n \n     }\n \n+    protected ServiceBusClientBuilder.ServiceBusDeadLetterReceiverClientBuilder getDeadLetterReceiverBuilder(boolean useCredentials, MessagingEntityType entityType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb5dff8b5f4797b6621119c2c87970c75094840c"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MzUyNDE1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#pullrequestreview-439352415", "createdAt": "2020-06-29T17:24:38Z", "commit": {"oid": "fb5dff8b5f4797b6621119c2c87970c75094840c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoyNDozOFrOGqa0kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoyNDozOFrOGqa0kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzMjgxOQ==", "bodyText": "The amount of duplicated logic we're amassing is concerning. This is going to be painful from a maintenance standpoint.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447132819", "createdAt": "2020-06-29T17:24:38Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -897,4 +913,162 @@ public ServiceBusReceiverClient buildClient() {\n             return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n         }\n     }\n+\n+    /**\n+     * Azure Service Bus queues and topic subscriptions provide a secondary subqueue, called a dead-letter queue (DLQ).\n+     * The dead-letter queue doesn't need to be explicitly created and can't be deleted or otherwise managed\n+     * independent of the main entity.\n+     *\n+     * This is builder for creating {@link ServiceBusReceiverClient} and {@link ServiceBusReceiverAsyncClient} to\n+     * consume dead-letter messages from Service Bus entity.\n+     *\n+     * @see ServiceBusReceiverAsyncClient\n+     * @see ServiceBusReceiverClient\n+     */\n+    @ServiceClientBuilder(serviceClients = {ServiceBusReceiverClient.class, ServiceBusReceiverAsyncClient.class})\n+    public final class ServiceBusDeadLetterReceiverClientBuilder {\n+        private int prefetchCount = DEFAULT_PREFETCH_COUNT;\n+        private String queueName;\n+        private ReceiveMode receiveMode = ReceiveMode.PEEK_LOCK;\n+        private String subscriptionName;\n+        private String topicName;\n+        private Duration maxAutoLockRenewalDuration;\n+\n+        private ServiceBusDeadLetterReceiverClientBuilder() {\n+        }\n+\n+        /**\n+         * Enables auto-lock renewal by renewing each message lock renewal until the {@code maxAutoLockRenewalDuration}\n+         * has elapsed.\n+         *\n+         * @param maxAutoLockRenewalDuration Maximum amount of time to renew the session lock.\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder maxAutoLockRenewalDuration(\n+            Duration maxAutoLockRenewalDuration) {\n+            this.maxAutoLockRenewalDuration = maxAutoLockRenewalDuration;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the prefetch count of the receiver. For both {@link ReceiveMode#PEEK_LOCK PEEK_LOCK} and {@link\n+         * ReceiveMode#RECEIVE_AND_DELETE RECEIVE_AND_DELETE} modes the default value is 1.\n+         *\n+         * Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when\n+         * and before the application asks for one using {@link ServiceBusReceiverAsyncClient#receive()}. Setting a\n+         * non-zero value will prefetch that number of messages. Setting the value to zero turns prefetch off.\n+         *\n+         * @param prefetchCount The prefetch count.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder prefetchCount(int prefetchCount) {\n+            this.prefetchCount = prefetchCount;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the queue to create a receiver for.\n+         *\n+         * @param queueName Name of the queue.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder queueName(String queueName) {\n+            this.queueName = queueName;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the receive mode for the receiver.\n+         *\n+         * @param receiveMode Mode for receiving messages.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder receiveMode(ReceiveMode receiveMode) {\n+            this.receiveMode = receiveMode;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the subscription in the topic to listen to. <b>{@link #topicName(String)} must also be set.\n+         * </b>\n+         *\n+         * @param subscriptionName Name of the subscription.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         * @see #topicName A topic name should be set as well.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder subscriptionName(String subscriptionName) {\n+            this.subscriptionName = subscriptionName;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the topic. <b>{@link #subscriptionName(String)} must also be set.</b>\n+         *\n+         * @param topicName Name of the topic.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         * @see #subscriptionName A subscription name should be set as well.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder topicName(String topicName) {\n+            this.topicName = topicName;\n+            return this;\n+        }\n+\n+        /**\n+         * Creates an <b>asynchronous</b> Service Bus receiver responsible for reading {@link ServiceBusMessage\n+         * messages} from a specific queue or topic.\n+         *\n+         * @return An new {@link ServiceBusReceiverAsyncClient} that receives messages from a queue or topic.\n+         * @throws IllegalStateException if {@link #queueName(String) queueName} or {@link #topicName(String)\n+         *     topicName} are not set or, both of these fields are set. It is also thrown if the Service Bus {@link\n+         *     #connectionString(String) connectionString} contains an {@code EntityPath} that does not match one set in\n+         *     {@link #queueName(String) queueName} or {@link #topicName(String) topicName}. Lastly, if a {@link\n+         *     #topicName(String) topicName} is set, but {@link #subscriptionName(String) subscriptionName} is not.\n+         * @throws IllegalArgumentException Queue or topic name are not set via {@link #queueName(String)\n+         *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n+         */\n+        public ServiceBusReceiverAsyncClient buildAsyncClient() {\n+            final MessagingEntityType entityType = validateEntityPaths(logger, connectionStringEntityName, topicName,\n+                queueName);\n+            final String entityPath = getDeadLetterEntityPath(logger, entityType, queueName, topicName,\n+                subscriptionName);\n+\n+            if (prefetchCount < 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb5dff8b5f4797b6621119c2c87970c75094840c"}, "originalPosition": 158}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a962a85527d88b6994e2460abef7a44035596d2", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9a962a85527d88b6994e2460abef7a44035596d2", "committedDate": "2020-06-29T19:27:52Z", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NTcxMjYw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#pullrequestreview-439571260", "createdAt": "2020-06-29T23:35:23Z", "commit": {"oid": "fb5dff8b5f4797b6621119c2c87970c75094840c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMzozNToyM1rOGqmJcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMzozNToyM1rOGqmJcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxODM4NA==", "bodyText": "This documentation is incorrect.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447318384", "createdAt": "2020-06-29T23:35:23Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -897,4 +913,162 @@ public ServiceBusReceiverClient buildClient() {\n             return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n         }\n     }\n+\n+    /**\n+     * Azure Service Bus queues and topic subscriptions provide a secondary subqueue, called a dead-letter queue (DLQ).\n+     * The dead-letter queue doesn't need to be explicitly created and can't be deleted or otherwise managed\n+     * independent of the main entity.\n+     *\n+     * This is builder for creating {@link ServiceBusReceiverClient} and {@link ServiceBusReceiverAsyncClient} to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb5dff8b5f4797b6621119c2c87970c75094840c"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35af861e4671c67b685a4b8e5b069f74c38864cd", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/35af861e4671c67b685a4b8e5b069f74c38864cd", "committedDate": "2020-06-30T14:36:32Z", "message": "Merge branch 'master' into sb-track2-deadletter-receiver-12063"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0587e34ee0e1b3633a7626775e6987919f6637c", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b0587e34ee0e1b3633a7626775e6987919f6637c", "committedDate": "2020-06-30T15:34:22Z", "message": "review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMjIwMDUw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#pullrequestreview-440220050", "createdAt": "2020-06-30T17:06:49Z", "commit": {"oid": "b0587e34ee0e1b3633a7626775e6987919f6637c"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzowNjo0OVrOGrGPSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzoxMTowMlrOGrGZ9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0NDE2OQ==", "bodyText": "Does this need to be a method? It is only used once.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447844169", "createdAt": "2020-06-30T17:06:49Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -441,6 +450,12 @@ private static String getEntityPath(ClientLogger logger, MessagingEntityType ent\n         return entityPath;\n     }\n \n+    private static String getDeadLetterEntityPath(ClientLogger logger, MessagingEntityType entityType, String queueName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0587e34ee0e1b3633a7626775e6987919f6637c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0NTE2NA==", "bodyText": "Does this link work? The see seems wrong.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447845164", "createdAt": "2020-06-30T17:08:11Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -897,4 +899,161 @@ public ServiceBusReceiverClient buildClient() {\n             return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n         }\n     }\n+\n+    /**\n+     * Azure Service Bus queues and topic subscriptions provide a secondary subqueue, called a dead-letter queue (DLQ).\n+     * The dead-letter queue doesn't need to be explicitly created and can't be deleted or otherwise managed\n+     * independent of the main entity.\n+     * <p>\n+     * This is builder for creating  {@link ServiceBusReceiverClient} and {@link ServiceBusReceiverAsyncClient} to\n+     * consume dead-letter messages from Service Bus entity.\n+     * @see ServiceBusReceiverAsyncClient\n+     * @see ServiceBusReceiverClient\n+     */\n+    @ServiceClientBuilder(serviceClients = {ServiceBusReceiverClient.class, ServiceBusReceiverAsyncClient.class})\n+    public final class ServiceBusDeadLetterReceiverClientBuilder {\n+        private int prefetchCount = DEFAULT_PREFETCH_COUNT;\n+        private String queueName;\n+        private ReceiveMode receiveMode = ReceiveMode.PEEK_LOCK;\n+        private String subscriptionName;\n+        private String topicName;\n+        private Duration maxAutoLockRenewalDuration;\n+\n+        private ServiceBusDeadLetterReceiverClientBuilder() {\n+        }\n+\n+        /**\n+         * Enables auto-lock renewal by renewing each message lock renewal until the {@code maxAutoLockRenewalDuration}\n+         * has elapsed.\n+         * @param maxAutoLockRenewalDuration Maximum amount of time to renew the session lock.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder maxAutoLockRenewalDuration(\n+            Duration maxAutoLockRenewalDuration) {\n+            this.maxAutoLockRenewalDuration = maxAutoLockRenewalDuration;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the prefetch count of the receiver. For both {@link ReceiveMode#PEEK_LOCK PEEK_LOCK} and {@link\n+         * ReceiveMode#RECEIVE_AND_DELETE RECEIVE_AND_DELETE} modes the default value is 1.\n+         * <p>\n+         * Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when\n+         * and before the application asks for one using {@link ServiceBusReceiverAsyncClient#receive()}. Setting a\n+         * non-zero value will prefetch that number of messages. Setting the value to zero turns prefetch off.\n+         * @param prefetchCount The prefetch count.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder prefetchCount(int prefetchCount) {\n+            this.prefetchCount = prefetchCount;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the queue to create a receiver for.\n+         * @param queueName Name of the queue.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder queueName(String queueName) {\n+            this.queueName = queueName;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the receive mode for the receiver.\n+         * @param receiveMode Mode for receiving messages.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder receiveMode(ReceiveMode receiveMode) {\n+            this.receiveMode = receiveMode;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the subscription in the topic to listen to. <b>{@link #topicName(String)} must also be set.\n+         * </b>\n+         * @param subscriptionName Name of the subscription.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         * @see #topicName A topic name should be set as well.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0587e34ee0e1b3633a7626775e6987919f6637c"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0NTM3OQ==", "bodyText": "Does this work? the see", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447845379", "createdAt": "2020-06-30T17:08:30Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -897,4 +899,161 @@ public ServiceBusReceiverClient buildClient() {\n             return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n         }\n     }\n+\n+    /**\n+     * Azure Service Bus queues and topic subscriptions provide a secondary subqueue, called a dead-letter queue (DLQ).\n+     * The dead-letter queue doesn't need to be explicitly created and can't be deleted or otherwise managed\n+     * independent of the main entity.\n+     * <p>\n+     * This is builder for creating  {@link ServiceBusReceiverClient} and {@link ServiceBusReceiverAsyncClient} to\n+     * consume dead-letter messages from Service Bus entity.\n+     * @see ServiceBusReceiverAsyncClient\n+     * @see ServiceBusReceiverClient\n+     */\n+    @ServiceClientBuilder(serviceClients = {ServiceBusReceiverClient.class, ServiceBusReceiverAsyncClient.class})\n+    public final class ServiceBusDeadLetterReceiverClientBuilder {\n+        private int prefetchCount = DEFAULT_PREFETCH_COUNT;\n+        private String queueName;\n+        private ReceiveMode receiveMode = ReceiveMode.PEEK_LOCK;\n+        private String subscriptionName;\n+        private String topicName;\n+        private Duration maxAutoLockRenewalDuration;\n+\n+        private ServiceBusDeadLetterReceiverClientBuilder() {\n+        }\n+\n+        /**\n+         * Enables auto-lock renewal by renewing each message lock renewal until the {@code maxAutoLockRenewalDuration}\n+         * has elapsed.\n+         * @param maxAutoLockRenewalDuration Maximum amount of time to renew the session lock.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder maxAutoLockRenewalDuration(\n+            Duration maxAutoLockRenewalDuration) {\n+            this.maxAutoLockRenewalDuration = maxAutoLockRenewalDuration;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the prefetch count of the receiver. For both {@link ReceiveMode#PEEK_LOCK PEEK_LOCK} and {@link\n+         * ReceiveMode#RECEIVE_AND_DELETE RECEIVE_AND_DELETE} modes the default value is 1.\n+         * <p>\n+         * Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when\n+         * and before the application asks for one using {@link ServiceBusReceiverAsyncClient#receive()}. Setting a\n+         * non-zero value will prefetch that number of messages. Setting the value to zero turns prefetch off.\n+         * @param prefetchCount The prefetch count.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder prefetchCount(int prefetchCount) {\n+            this.prefetchCount = prefetchCount;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the queue to create a receiver for.\n+         * @param queueName Name of the queue.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder queueName(String queueName) {\n+            this.queueName = queueName;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the receive mode for the receiver.\n+         * @param receiveMode Mode for receiving messages.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder receiveMode(ReceiveMode receiveMode) {\n+            this.receiveMode = receiveMode;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the subscription in the topic to listen to. <b>{@link #topicName(String)} must also be set.\n+         * </b>\n+         * @param subscriptionName Name of the subscription.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         * @see #topicName A topic name should be set as well.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder subscriptionName(String subscriptionName) {\n+            this.subscriptionName = subscriptionName;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the topic. <b>{@link #subscriptionName(String)} must also be set.</b>\n+         * @param topicName Name of the topic.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         * @see #subscriptionName A subscription name should be set as well.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0587e34ee0e1b3633a7626775e6987919f6637c"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0NjkwMQ==", "bodyText": "This doesn't need to be a function. We use this once.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447846901", "createdAt": "2020-06-30T17:11:02Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -1035,4 +1079,28 @@ private void completeDeferredMessages(ServiceBusReceiverAsyncClient client, Serv\n         receiver.complete(receivedDeferredMessage).block(TIMEOUT);\n     }\n \n+    private ServiceBusClientBuilder.ServiceBusDeadLetterReceiverClientBuilder getDeadLetterReceiverBuilder(boolean useCredentials,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0587e34ee0e1b3633a7626775e6987919f6637c"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0bf58e60e5342f5d65ef64b42e9d5e8b4092c1a", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b0bf58e60e5342f5d65ef64b42e9d5e8b4092c1a", "committedDate": "2020-07-01T18:19:03Z", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a923d24f6e7e6e8defe0547902038f717e37724", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1a923d24f6e7e6e8defe0547902038f717e37724", "committedDate": "2020-07-01T19:00:03Z", "message": "Merge branch 'master' into sb-track2-deadletter-receiver-12063"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e942bd22e25f996a698bf94ba617711b370a6dd1", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e942bd22e25f996a698bf94ba617711b370a6dd1", "committedDate": "2020-07-01T21:24:43Z", "message": "Review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2960, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}