{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4ODkyNjc0", "number": 11227, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwMToxMDoyN1rOD9DNYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNjo0Mjo1MFrOD9qF3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzQyMzA2OnYy", "diffSide": "LEFT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwMToxMDoyN1rOGWXN_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo0Mzo1MFrOGXFILA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEwMjI2OA==", "bodyText": "Redundant null check that catched in the code quality process.\n[ERROR] Redundant nullcheck of documentSentimentLabel, which is known to be non-null in com.azure.ai.textanalytics.AnalyzeSentimentAsyncClient.convertToAnalyzeSentimentResult(DocumentSentiment) [com.azure.ai.textanalytics.AnalyzeSentimentAsyncClient] Redundant null check at AnalyzeSentimentAsyncClient.java:[line 147] RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE\n[ERROR] Redundant nullcheck of sentenceSentimentLabel, which is known to be non-null in com.azure.ai.textanalytics.AnalyzeSentimentAsyncClient.lambda$convertToAnalyzeSentimentResult$9(SentenceSentiment) [com.azure.ai.textanalytics.AnalyzeSentimentAsyncClient] Redundant null check at AnalyzeSentimentAsyncClient.java:[line 161] RCN_REDUNDANT_NULLCHECK_OF_NONNULL_", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11227#discussion_r426102268", "createdAt": "2020-05-16T01:10:27Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -144,43 +141,21 @@\n      * @return The {@link AnalyzeSentimentResult} to be returned by the SDK.\n      */\n     private AnalyzeSentimentResult convertToAnalyzeSentimentResult(DocumentSentiment documentSentiment) {\n-        // Document text sentiment\n-        final TextSentiment documentSentimentLabel = TextSentiment.fromString(\n-            documentSentiment.getSentiment().toString());\n-        if (documentSentimentLabel == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d82c62f4b591a3c94adfaabbabd54c09854b2265"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyMzc5MQ==", "bodyText": "This started coming up from the current change?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11227#discussion_r426823791", "createdAt": "2020-05-18T18:42:50Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -144,43 +141,21 @@\n      * @return The {@link AnalyzeSentimentResult} to be returned by the SDK.\n      */\n     private AnalyzeSentimentResult convertToAnalyzeSentimentResult(DocumentSentiment documentSentiment) {\n-        // Document text sentiment\n-        final TextSentiment documentSentimentLabel = TextSentiment.fromString(\n-            documentSentiment.getSentiment().toString());\n-        if (documentSentimentLabel == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEwMjI2OA=="}, "originalCommit": {"oid": "d82c62f4b591a3c94adfaabbabd54c09854b2265"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1NDQ0NA==", "bodyText": "Yes. Null checking here is an redundant check. As the error message explained here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11227#discussion_r426854444", "createdAt": "2020-05-18T19:43:50Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -144,43 +141,21 @@\n      * @return The {@link AnalyzeSentimentResult} to be returned by the SDK.\n      */\n     private AnalyzeSentimentResult convertToAnalyzeSentimentResult(DocumentSentiment documentSentiment) {\n-        // Document text sentiment\n-        final TextSentiment documentSentimentLabel = TextSentiment.fromString(\n-            documentSentiment.getSentiment().toString());\n-        if (documentSentimentLabel == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEwMjI2OA=="}, "originalCommit": {"oid": "d82c62f4b591a3c94adfaabbabd54c09854b2265"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODI0NTY5OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/WarningCode.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODozODoxNVrOGXDHqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMTozODowNVrOGYetyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyMTU0Ng==", "bodyText": "don't need this>", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11227#discussion_r426821546", "createdAt": "2020-05-18T18:38:15Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/WarningCode.java", "diffHunk": "@@ -30,7 +30,7 @@\n      * @return The corresponding {@link WarningCode}.\n      */\n     @JsonCreator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ef54069c9a599fc03bf09ad1a957a4327023e31"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyMjAxNw==", "bodyText": "Is this a generated model https://github.com/Azure/azure-sdk-for-java/pull/11227/files#diff-2683c3cab1fd268997bc5df017c80afcL3?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11227#discussion_r426822017", "createdAt": "2020-05-18T18:39:17Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/WarningCode.java", "diffHunk": "@@ -30,7 +30,7 @@\n      * @return The corresponding {@link WarningCode}.\n      */\n     @JsonCreator", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyMTU0Ng=="}, "originalCommit": {"oid": "9ef54069c9a599fc03bf09ad1a957a4327023e31"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2MTkzNg==", "bodyText": "WarningCode is not a generated model.\nif you take a look at what JsonCreator annotation's description:\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.7/com/fasterxml/jackson/annotation/JsonCreator.html\nSpeaking of what other SDK's behavior of including this annotation. They included it as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11227#discussion_r426861936", "createdAt": "2020-05-18T19:59:03Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/WarningCode.java", "diffHunk": "@@ -30,7 +30,7 @@\n      * @return The corresponding {@link WarningCode}.\n      */\n     @JsonCreator", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyMTU0Ng=="}, "originalCommit": {"oid": "9ef54069c9a599fc03bf09ad1a957a4327023e31"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMyMjI1MQ==", "bodyText": "It should be included on the deserialization layer i.e on the service side equivalent model. Don't need it here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11227#discussion_r428322251", "createdAt": "2020-05-20T21:38:05Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/WarningCode.java", "diffHunk": "@@ -30,7 +30,7 @@\n      * @return The corresponding {@link WarningCode}.\n      */\n     @JsonCreator", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyMTU0Ng=="}, "originalCommit": {"oid": "9ef54069c9a599fc03bf09ad1a957a4327023e31"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTc5MzU4OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNjo0Mjo1MFrOGXR9HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMDoyNjoyNVrOGX3LeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA2NDYwNQ==", "bodyText": "We don't want to check for nulls anymore?\nInitially, you were checking for null for sentenceSentimentLabel and documentSentimentLabel and throwing an exception.\nIs it fine for sentimentLabel and documentSentimentLabel to be null?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11227#discussion_r427064605", "createdAt": "2020-05-19T06:42:50Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -144,43 +141,21 @@\n      * @return The {@link AnalyzeSentimentResult} to be returned by the SDK.\n      */\n     private AnalyzeSentimentResult convertToAnalyzeSentimentResult(DocumentSentiment documentSentiment) {\n-        // Document text sentiment\n-        final TextSentiment documentSentimentLabel = TextSentiment.fromString(\n-            documentSentiment.getSentiment().toString());\n-        if (documentSentimentLabel == null) {\n-            // Not throw exception for an invalid Sentiment type because we should not skip processing the\n-            // other response. It is a service issue.\n-            logger.logExceptionAsWarning(\n-                new RuntimeException(String.format(Locale.ROOT, \"'%s' is not valid text sentiment.\",\n-                    documentSentiment.getSentiment())));\n-        }\n-\n         final SentimentConfidenceScorePerLabel confidenceScorePerLabel = documentSentiment.getConfidenceScores();\n-\n         // Sentence text sentiment\n         final List<SentenceSentiment> sentenceSentiments = documentSentiment.getSentences().stream()\n             .map(sentenceSentiment -> {\n-                final TextSentiment sentenceSentimentLabel = TextSentiment.fromString(\n-                    sentenceSentiment.getSentiment().toString());\n-                if (sentenceSentimentLabel == null) {\n-                    // Not throw exception for an invalid Sentiment type because we should not skip processing the\n-                    // other response. It is a service issue.\n-                    logger.logExceptionAsWarning(\n-                        new RuntimeException(String.format(Locale.ROOT, \"'%s' is not valid text sentiment.\",\n-                            sentenceSentiment.getSentiment())));\n-                }\n                 final SentimentConfidenceScorePerLabel confidenceScorePerSentence =\n                     sentenceSentiment.getConfidenceScores();\n-\n                 return new SentenceSentiment(sentenceSentiment.getText(),\n-                    sentenceSentimentLabel,\n+                    sentenceSentiment.getSentiment().toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ef54069c9a599fc03bf09ad1a957a4327023e31"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY3NDQ4OA==", "bodyText": "Yes. Same reason as https://github.com/Azure/azure-sdk-for-java/pull/11227/files/9ef54069c9a599fc03bf09ad1a957a4327023e31#r426102268", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11227#discussion_r427674488", "createdAt": "2020-05-20T00:26:25Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -144,43 +141,21 @@\n      * @return The {@link AnalyzeSentimentResult} to be returned by the SDK.\n      */\n     private AnalyzeSentimentResult convertToAnalyzeSentimentResult(DocumentSentiment documentSentiment) {\n-        // Document text sentiment\n-        final TextSentiment documentSentimentLabel = TextSentiment.fromString(\n-            documentSentiment.getSentiment().toString());\n-        if (documentSentimentLabel == null) {\n-            // Not throw exception for an invalid Sentiment type because we should not skip processing the\n-            // other response. It is a service issue.\n-            logger.logExceptionAsWarning(\n-                new RuntimeException(String.format(Locale.ROOT, \"'%s' is not valid text sentiment.\",\n-                    documentSentiment.getSentiment())));\n-        }\n-\n         final SentimentConfidenceScorePerLabel confidenceScorePerLabel = documentSentiment.getConfidenceScores();\n-\n         // Sentence text sentiment\n         final List<SentenceSentiment> sentenceSentiments = documentSentiment.getSentences().stream()\n             .map(sentenceSentiment -> {\n-                final TextSentiment sentenceSentimentLabel = TextSentiment.fromString(\n-                    sentenceSentiment.getSentiment().toString());\n-                if (sentenceSentimentLabel == null) {\n-                    // Not throw exception for an invalid Sentiment type because we should not skip processing the\n-                    // other response. It is a service issue.\n-                    logger.logExceptionAsWarning(\n-                        new RuntimeException(String.format(Locale.ROOT, \"'%s' is not valid text sentiment.\",\n-                            sentenceSentiment.getSentiment())));\n-                }\n                 final SentimentConfidenceScorePerLabel confidenceScorePerSentence =\n                     sentenceSentiment.getConfidenceScores();\n-\n                 return new SentenceSentiment(sentenceSentiment.getText(),\n-                    sentenceSentimentLabel,\n+                    sentenceSentiment.getSentiment().toString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA2NDYwNQ=="}, "originalCommit": {"oid": "9ef54069c9a599fc03bf09ad1a957a4327023e31"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4294, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}