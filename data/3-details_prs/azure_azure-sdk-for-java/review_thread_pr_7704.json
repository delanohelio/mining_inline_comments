{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3MDMyMjQw", "number": 7704, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwMDowNjo0OFrODapC2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDowNjoyM1rODdhkGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjYyMDQwOnYy", "diffSide": "RIGHT", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwMDowNjo0OFrOFhtfCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwMDo0NTo1MlrOFht2Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5MjU1Mw==", "bodyText": "does it mean we'll send one span for the first try only?\nIt should be one span per Send call. If there is more than one try - it should wrap all of them:\n\nduration should be duration of send() call\nresult is the result of all tries (i.e. eventually sent or failed)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7704#discussion_r370892553", "createdAt": "2020-01-25T00:06:48Z", "author": {"login": "lmolkova"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -416,10 +416,11 @@ public String getEventHubName() {\n         }\n \n         final Context finalSharedContext = sharedContext != null ? sharedContext : Context.NONE;\n-\n         return withRetry(\n             getSendLink(batch.getPartitionId()).flatMap(link -> {\n-                if (isTracingEnabled) {\n+                // if parent context already has send span context data (in case of retries),\n+                // don't start a new send span\n+                if (isTracingEnabled && !parentContext.get().getData(HOST_NAME_KEY).isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01ee876f7c815b9a39ab2dbef337d416a2d0b5a6"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5MzA5MQ==", "bodyText": "does it mean we'll send one span for the first try only?\nyes, it will only start the first send span.\n\n\nit should wrap all of them\n\ndoes this mean we want to add links between all the send spans but start only a single span?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7704#discussion_r370893091", "createdAt": "2020-01-25T00:10:16Z", "author": {"login": "samvaity"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -416,10 +416,11 @@ public String getEventHubName() {\n         }\n \n         final Context finalSharedContext = sharedContext != null ? sharedContext : Context.NONE;\n-\n         return withRetry(\n             getSendLink(batch.getPartitionId()).flatMap(link -> {\n-                if (isTracingEnabled) {\n+                // if parent context already has send span context data (in case of retries),\n+                // don't start a new send span\n+                if (isTracingEnabled && !parentContext.get().getData(HOST_NAME_KEY).isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5MjU1Mw=="}, "originalCommit": {"oid": "01ee876f7c815b9a39ab2dbef337d416a2d0b5a6"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5ODQ3MQ==", "bodyText": "We still create span per message and link all of these spans to the single 'send' span", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7704#discussion_r370898471", "createdAt": "2020-01-25T00:45:52Z", "author": {"login": "lmolkova"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -416,10 +416,11 @@ public String getEventHubName() {\n         }\n \n         final Context finalSharedContext = sharedContext != null ? sharedContext : Context.NONE;\n-\n         return withRetry(\n             getSendLink(batch.getPartitionId()).flatMap(link -> {\n-                if (isTracingEnabled) {\n+                // if parent context already has send span context data (in case of retries),\n+                // don't start a new send span\n+                if (isTracingEnabled && !parentContext.get().getData(HOST_NAME_KEY).isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5MjU1Mw=="}, "originalCommit": {"oid": "01ee876f7c815b9a39ab2dbef337d416a2d0b5a6"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjg1MTQwOnYy", "diffSide": "RIGHT", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDowNjowMFrOFmLbIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODozNDoxNVrOFmlycw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NzM3Ng==", "bodyText": "is it called on each try? will it end the span after first retry?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7704#discussion_r375577376", "createdAt": "2020-02-06T00:06:00Z", "author": {"login": "lmolkova"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -415,31 +414,24 @@ public String getEventHubName() {\n             messages.add(message);\n         }\n \n-        final Context finalSharedContext = sharedContext != null ? sharedContext : Context.NONE;\n+        if (isTracingEnabled) {\n+            final Context finalSharedContext = sharedContext == null\n+                ? Context.NONE\n+                : sharedContext.addData(ENTITY_PATH_KEY, eventHubName).addData(HOST_NAME_KEY, fullyQualifiedNamespace);\n+            // Start send span and store updated context\n+            parentContext.set(tracerProvider.startSpan(finalSharedContext, ProcessKind.SEND));\n+        }\n \n-        return withRetry(\n-            getSendLink(batch.getPartitionId()).flatMap(link -> {\n-                if (isTracingEnabled) {\n-                    Context entityContext = finalSharedContext.addData(ENTITY_PATH_KEY, link.getEntityPath());\n-                    // Start send span and store updated context\n-                    parentContext.set(tracerProvider.startSpan(\n-                        entityContext.addData(HOST_NAME_KEY, link.getHostname()), ProcessKind.SEND));\n-                }\n-                return messages.size() == 1\n+        return withRetry(getSendLink(batch.getPartitionId())\n+            .flatMap(link ->\n+                messages.size() == 1\n                     ? link.send(messages.get(0))\n-                    : link.send(messages);\n-\n-            })\n+                    : link.send(messages)), retryOptions.getTryTimeout(), retryPolicy)\n             .doOnEach(signal -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8561642eb3c0caaf8cfc78ba6b8620d1b0ef2dac"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAwOTMzMQ==", "bodyText": "No, so with the updated code, it nows does doOnEach after the withRetry has completed.\nSo, once withRetry completes either with error or success , it will send a signal and the endSpan uses the signal type to set error or success.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7704#discussion_r376009331", "createdAt": "2020-02-06T18:34:15Z", "author": {"login": "samvaity"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -415,31 +414,24 @@ public String getEventHubName() {\n             messages.add(message);\n         }\n \n-        final Context finalSharedContext = sharedContext != null ? sharedContext : Context.NONE;\n+        if (isTracingEnabled) {\n+            final Context finalSharedContext = sharedContext == null\n+                ? Context.NONE\n+                : sharedContext.addData(ENTITY_PATH_KEY, eventHubName).addData(HOST_NAME_KEY, fullyQualifiedNamespace);\n+            // Start send span and store updated context\n+            parentContext.set(tracerProvider.startSpan(finalSharedContext, ProcessKind.SEND));\n+        }\n \n-        return withRetry(\n-            getSendLink(batch.getPartitionId()).flatMap(link -> {\n-                if (isTracingEnabled) {\n-                    Context entityContext = finalSharedContext.addData(ENTITY_PATH_KEY, link.getEntityPath());\n-                    // Start send span and store updated context\n-                    parentContext.set(tracerProvider.startSpan(\n-                        entityContext.addData(HOST_NAME_KEY, link.getHostname()), ProcessKind.SEND));\n-                }\n-                return messages.size() == 1\n+        return withRetry(getSendLink(batch.getPartitionId())\n+            .flatMap(link ->\n+                messages.size() == 1\n                     ? link.send(messages.get(0))\n-                    : link.send(messages);\n-\n-            })\n+                    : link.send(messages)), retryOptions.getTryTimeout(), retryPolicy)\n             .doOnEach(signal -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NzM3Ng=="}, "originalCommit": {"oid": "8561642eb3c0caaf8cfc78ba6b8620d1b0ef2dac"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjg1MjA4OnYy", "diffSide": "LEFT", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDowNjoyM1rOFmLbiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODozNDozN1rOFmlzIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NzQ4MA==", "bodyText": "does it mean we no longer set error if all retries has failed?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7704#discussion_r375577480", "createdAt": "2020-02-06T00:06:23Z", "author": {"login": "lmolkova"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -415,31 +414,24 @@ public String getEventHubName() {\n             messages.add(message);\n         }\n \n-        final Context finalSharedContext = sharedContext != null ? sharedContext : Context.NONE;\n+        if (isTracingEnabled) {\n+            final Context finalSharedContext = sharedContext == null\n+                ? Context.NONE\n+                : sharedContext.addData(ENTITY_PATH_KEY, eventHubName).addData(HOST_NAME_KEY, fullyQualifiedNamespace);\n+            // Start send span and store updated context\n+            parentContext.set(tracerProvider.startSpan(finalSharedContext, ProcessKind.SEND));\n+        }\n \n-        return withRetry(\n-            getSendLink(batch.getPartitionId()).flatMap(link -> {\n-                if (isTracingEnabled) {\n-                    Context entityContext = finalSharedContext.addData(ENTITY_PATH_KEY, link.getEntityPath());\n-                    // Start send span and store updated context\n-                    parentContext.set(tracerProvider.startSpan(\n-                        entityContext.addData(HOST_NAME_KEY, link.getHostname()), ProcessKind.SEND));\n-                }\n-                return messages.size() == 1\n+        return withRetry(getSendLink(batch.getPartitionId())\n+            .flatMap(link ->\n+                messages.size() == 1\n                     ? link.send(messages.get(0))\n-                    : link.send(messages);\n-\n-            })\n+                    : link.send(messages)), retryOptions.getTryTimeout(), retryPolicy)\n             .doOnEach(signal -> {\n                 if (isTracingEnabled) {\n                     tracerProvider.endSpan(parentContext.get(), signal);\n                 }\n-            })\n-            .doOnError(error -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8561642eb3c0caaf8cfc78ba6b8620d1b0ef2dac"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAwOTUwNw==", "bodyText": "same as above", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7704#discussion_r376009507", "createdAt": "2020-02-06T18:34:37Z", "author": {"login": "samvaity"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -415,31 +414,24 @@ public String getEventHubName() {\n             messages.add(message);\n         }\n \n-        final Context finalSharedContext = sharedContext != null ? sharedContext : Context.NONE;\n+        if (isTracingEnabled) {\n+            final Context finalSharedContext = sharedContext == null\n+                ? Context.NONE\n+                : sharedContext.addData(ENTITY_PATH_KEY, eventHubName).addData(HOST_NAME_KEY, fullyQualifiedNamespace);\n+            // Start send span and store updated context\n+            parentContext.set(tracerProvider.startSpan(finalSharedContext, ProcessKind.SEND));\n+        }\n \n-        return withRetry(\n-            getSendLink(batch.getPartitionId()).flatMap(link -> {\n-                if (isTracingEnabled) {\n-                    Context entityContext = finalSharedContext.addData(ENTITY_PATH_KEY, link.getEntityPath());\n-                    // Start send span and store updated context\n-                    parentContext.set(tracerProvider.startSpan(\n-                        entityContext.addData(HOST_NAME_KEY, link.getHostname()), ProcessKind.SEND));\n-                }\n-                return messages.size() == 1\n+        return withRetry(getSendLink(batch.getPartitionId())\n+            .flatMap(link ->\n+                messages.size() == 1\n                     ? link.send(messages.get(0))\n-                    : link.send(messages);\n-\n-            })\n+                    : link.send(messages)), retryOptions.getTryTimeout(), retryPolicy)\n             .doOnEach(signal -> {\n                 if (isTracingEnabled) {\n                     tracerProvider.endSpan(parentContext.get(), signal);\n                 }\n-            })\n-            .doOnError(error -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NzQ4MA=="}, "originalCommit": {"oid": "8561642eb3c0caaf8cfc78ba6b8620d1b0ef2dac"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 406, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}