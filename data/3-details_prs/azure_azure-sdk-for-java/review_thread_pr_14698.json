{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MzM3MDIw", "number": 14698, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMTo1NTowNVrOEfJkIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTowMzoyMlrOEgHqzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDk4MDE2OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMTo1NTowNVrOHLPJTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOToyMTowNlrOHL_H2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU0NDUyNQ==", "bodyText": "This is the only library that I know has a link to the REST API. is this something we're adding now?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14698#discussion_r481544525", "createdAt": "2020-09-02T01:55:05Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/README.md", "diffHunk": "@@ -4,15 +4,10 @@ key/attribute store with a schemaless design. Tables storage gives developers fl\n best parts of Azure cloud.\n \n [Source code][source_code] | [Package (Maven)][package] | [API reference documentation][api_documentation]\n-| [Product documentation][azconfig_docs] | [Samples][samples]\n+| [REST API documentation][rest_api] | [Product documentation][product_documentation] | [Samples][samples]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a282854eec6c93e48fa31cff3018cdfecdc31959"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMzMDU4Nw==", "bodyText": "I was following along with what the Storage libraries did, but I see that more recent READMEs don't have this. Fixed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14698#discussion_r482330587", "createdAt": "2020-09-02T19:21:06Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/README.md", "diffHunk": "@@ -4,15 +4,10 @@ key/attribute store with a schemaless design. Tables storage gives developers fl\n best parts of Azure cloud.\n \n [Source code][source_code] | [Package (Maven)][package] | [API reference documentation][api_documentation]\n-| [Product documentation][azconfig_docs] | [Samples][samples]\n+| [REST API documentation][rest_api] | [Product documentation][product_documentation] | [Samples][samples]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU0NDUyNQ=="}, "originalCommit": {"oid": "a282854eec6c93e48fa31cff3018cdfecdc31959"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDk4NTUxOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMTo1NjoyOFrOHLPMpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOToxNzoxN1rOHL-6Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU0NTM4MQ==", "bodyText": "IIRC, we have an order of titles for READMEs.. can you confirm? @czubair", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14698#discussion_r481545381", "createdAt": "2020-09-02T01:56:28Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/README.md", "diffHunk": "@@ -25,17 +20,287 @@ best parts of Azure cloud.\n ```\n [//]: # ({x-version-update-end})\n \n+### Prerequisites", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a282854eec6c93e48fa31cff3018cdfecdc31959"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMyNzE0Mg==", "bodyText": "Yep, I am following the layout documented here: https://review.docs.microsoft.com/en-us/help/contribute-ref/contribute-ref-how-to-document-sdk?branch=master#readme", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14698#discussion_r482327142", "createdAt": "2020-09-02T19:17:17Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/README.md", "diffHunk": "@@ -25,17 +20,287 @@ best parts of Azure cloud.\n ```\n [//]: # ({x-version-update-end})\n \n+### Prerequisites", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU0NTM4MQ=="}, "originalCommit": {"oid": "a282854eec6c93e48fa31cff3018cdfecdc31959"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDk5MzQyOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMTo1ODoyNFrOHLPRrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOToxNzozOVrOHL-7rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU0NjY3MQ==", "bodyText": "I'd remove the en-us so we can let user's browser locale decide where to go.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14698#discussion_r481546671", "createdAt": "2020-09-02T01:58:24Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/README.md", "diffHunk": "@@ -51,9 +316,17 @@ This project has adopted the [Microsoft Open Source Code of Conduct][coc]. For m\n [coc_contact]: mailto:opencode@microsoft.com\n [coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n [coc]: https://opensource.microsoft.com/codeofconduct/\n+[cosmosdb_create_cli]: https://docs.microsoft.com/en-us/azure/cosmos-db/scripts/cli/table/create\n+[cosmosdb_create_portal]: https://docs.microsoft.com/en-us/azure/cosmos-db/create-table-java#create-a-database-account\n+[jdk]: https://docs.microsoft.com/java/azure/jdk/\n+[log_level]: https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/util/logging/LogLevel.java\n [package]: https://search.maven.org/artifact/com.azure/azure-data-tables\n-[samples_readme]: src/samples/README.md\n+[product_documentation]: https://docs.microsoft.com/en-us/azure/cosmos-db/table-storage-overview", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a282854eec6c93e48fa31cff3018cdfecdc31959"}, "originalPosition": 318}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMyNzQ2OQ==", "bodyText": "Fixed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14698#discussion_r482327469", "createdAt": "2020-09-02T19:17:39Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/README.md", "diffHunk": "@@ -51,9 +316,17 @@ This project has adopted the [Microsoft Open Source Code of Conduct][coc]. For m\n [coc_contact]: mailto:opencode@microsoft.com\n [coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n [coc]: https://opensource.microsoft.com/codeofconduct/\n+[cosmosdb_create_cli]: https://docs.microsoft.com/en-us/azure/cosmos-db/scripts/cli/table/create\n+[cosmosdb_create_portal]: https://docs.microsoft.com/en-us/azure/cosmos-db/create-table-java#create-a-database-account\n+[jdk]: https://docs.microsoft.com/java/azure/jdk/\n+[log_level]: https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/util/logging/LogLevel.java\n [package]: https://search.maven.org/artifact/com.azure/azure-data-tables\n-[samples_readme]: src/samples/README.md\n+[product_documentation]: https://docs.microsoft.com/en-us/azure/cosmos-db/table-storage-overview", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU0NjY3MQ=="}, "originalCommit": {"oid": "a282854eec6c93e48fa31cff3018cdfecdc31959"}, "originalPosition": 318}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDc0NTc5OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/README.md", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzowMzoxMFrOHMvy3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODoyMjowNFrOHMya3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyODAyOA==", "bodyText": "looks like you intended to add connection string example after the // e.g. comment", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14698#discussion_r483128028", "createdAt": "2020-09-03T17:03:10Z", "author": {"login": "christothes"}, "path": "sdk/tables/azure-data-tables/README.md", "diffHunk": "@@ -25,17 +20,287 @@ best parts of Azure cloud.\n ```\n [//]: # ({x-version-update-end})\n \n+### Prerequisites\n+\n+- [Java Development Kit (JDK)][jdk] with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- An existing Azure storage account or Azure Cosmos DB Table API account\n+\n+#### Create a Storage Account\n+To create a Storage Account you can use the [Azure Portal][storage_account_create_portal] or [Azure CLI][storage_account_create_cli].\n+\n+```bash\n+az storage account create \\\n+    --resource-group <resource-group-name> \\\n+    --name <storage-account-name> \\\n+    --location <location>\n+```\n+\n+Your storage account URL, subsequently identified as `<your-table-account-url>`, would be formatted as follows\n+`http(s)://<storage-account-name>.table.core.windows.net`.\n+\n+#### Create a Cosmos DB Table API account\n+To create a Cosmos DB Table API account you can use the [Azure Portal][cosmosdb_create_portal] or [Azure CLI][cosmosdb_create_cli].\n+\n+```bash\n+az cosmosdb create \\\n+    --resource-group <resource-group-name> \\\n+    --name <cosmosdb-account-name> \\\n+    --capabilities EnableTable\n+```\n+\n+Your Table API account URL, subsequently identified as `<your-table-account-url>`, would be formatted as follows\n+`http(s)://<cosmosdb-account-name>.table.cosmosdb.azure.com`.\n+\n+### Authenticate the client\n+Every request made to the Table service must be authorized using a connection string, shared key credential, or shared access signature. The samples below demonstrate the usage of these methods.\n+\n+Note: Azure Tables doesn't support Azure Active Directory (AAD) authentication.\n+\n+#### Connection string\n+A connection string includes the authentication information required for your application to access data in an Azure table at runtime using Shared Key authorization. See [Authenticate with a connection string](#authenticate-with-a-connection-string) for an example of how to use a connection string with a `TableServiceClient`.\n+\n+You can obtain your connection string from the Azure Portal (click **Access keys** under **Settings** in the Portal Storage account blade, or **Connection String** under **Settings** in the Portal Cosmos DB account blade) or using the Azure CLI:\n+\n+```bash\n+# Storage account\n+az storage account show-connection-string \\\n+    --resource-group <resource-group-name> \\\n+    --name <storage-account-name>\n+\n+# Cosmos DB Table API account\n+az cosmosdb list-connection-strings \\\n+    --resource-group <resource-group-name> \\\n+    --name <cosmosdb-account-name>\n+```\n+\n+#### Shared Key credential\n+Shared Key authorization relies on your account access keys and other parameters to produce an encrypted signature string that is passed on the request in the Authorization header. See [Authenticate with a Shared Key credential](#authenticate-with-a-shared-key-credential) for an example of how to use Shared Key authorization with a `TableServiceClient`.\n+\n+To use Shared Key authorization you'll need your account name and URL, as well as an account access key. You can obtain your primary access key from the Azure Portal (click **Access keys** under **Settings** in the Portal Storage account blade, or **Connection String** under **Settings** in the Portal Cosmos DB account blade) or using the Azure CLI:\n+\n+```bash\n+# Storage account\n+az storage account keys list \\\n+    --resource-group <resource-group-name> \\\n+    --account-name <storage-account-name>\n+\n+# Cosmos DB Table API account\n+az cosmosdb list-keys \\\n+    --resource-group <resource-group-name> \\\n+    --name <cosmosdb-account-name>\n+```\n+\n+#### Shared Access Signature (SAS)\n+A shared access signature allows administrators to delegate granular access to an Azure table without sharing the access key directly. You can control what resources the client may access, what permissions it has on those resources, and how long the SAS is valid, among other parameters. It relies on your account access keys and other parameters to produce an encrypted signature string that is passed on the request in the query string. See [Authenticate with a Shared Access Signature (SAS) token](#authenticate-with-a-shared-access-signature-sas-token) for an example of how to use shared access signatures with a `TableServiceClient`.\n+\n+To use SAS token authorization you'll need your account name and URL, as well as the SAS. You can obtain your SAS from the Azure Portal (click **Shared access signature** under **Settings** in the Portal Storage account blade) or using the Azure CLI:\n+\n+```bash\n+# Account-level SAS\n+az storage account generate-sas \\\n+    --account-name <storage-or-cosmosdb-account-name> \\\n+    --services t \\\n+    --resource-types <resource-types> \\\n+    --permissions <permissions> \\\n+    --expiry <expiry-date>\n+\n+# Table-level SAS\n+az storage table generate-sas \\\n+    --name <table-name>\n+```\n+\n ## Key concepts\n \n+- **TableServiceClient** - A `TableServiceClient` is a client object that enables you to interact with the Table Service in order to create, list, and delete tables.\n+- **TableClient** - A `TableClient` is a client object that enables you to interact with a specific table in order to create, update, list, and delete entities within it.\n+- **Table** - A table is a collection of entities. Tables don't enforce a schema on entities, which means a single table can contain entities that have different sets of properties.\n+- **Entity** - An entity is a set of properties, similar to a database row. An entity in Azure Storage can be up to 1MB in size. An entity in Azure Cosmos DB can be up to 2MB in size. An entity has a partition key and a row key which together uniquely identify the entity within the table.\n+- **Properties** - A property is a name-value pair. Each entity can include up to 252 properties to store data. Each entity also has three system properties that specify a partition key, a row key, and a timestamp.\n+- **Partition Key** - An entity's partition key identifies the partition within the table to which the entity belongs. Entities with the same partition key can be queried more quickly, and inserted/updated in atomic operations.\n+- **Row Key** - An entity's row key is its unique identifier within a partition.\n+\n+Common uses of the Table service include:\n+\n+- Storing TBs of structured data capable of serving web scale applications\n+- Storing datasets that don't require complex joins, foreign keys, or stored procedures and can be de-normalized for fast access\n+- Quickly querying data using a clustered index\n+- Accessing data using the OData protocol\n+\n ## Examples\n-Use the client library for Tables to:\n-- manages tables\n-- edit and access table contents\n+\n+- [Authenticate a client](#authenticate-a-client)\n+  - [Authenticate with a connection string](#authenticate-with-a-connection-string)\n+  - [Authenticate with a Shared Key](#authenticate-with-a-shared-key)\n+  - [Authenticate with a Shared Access Signature (SAS)](#authenticate-with-a-shared-access-signature-sas)\n+- [Create, List, and Delete Azure tables](#create-list-and-delete-azure-tables)\n+  - [Construct a `TableServiceClient`](#construct-a-tableserviceclient)\n+  - [Create a table](#create-a-table)\n+  - [List tables](#list-tables)\n+  - [Delete a table](#delete-a-table)\n+- [Create, List, and Delete table entities](##create-list-and-delete-table-entities)\n+  - [Construct a `TableClient`](#construct-a-tableclient)\n+  - [Create an entity](#create-an-entity)\n+  - [List entities](#list-entities)\n+  - [Delete an entity](#delete-an-entity)\n+\n+### Authenticate a client\n+\n+#### Authenticate with a connection string\n+To use a connection string to authorize your client, call the builder's `connectionString` method with your connection string.\n+\n+```java\n+TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+    .connectionString(\"<your-connection-string>\")\n+    .buildClient();\n+```\n+\n+#### Authenticate with a Shared Key\n+To use a Shared Key to authorize your client, create an instance of `TablesSharedKeyCredential` with your account name and access key. Call the builder's `endpoint` method with your account URL and the `credential` method with the `TablesSharedKeyCredential` object you created.\n+\n+```java\n+TablesSharedKeyCredential credential = new TablesSharedKeyCredential(\"<your-account-name>\", \"<account-access-key>\");\n+TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+    .endpoint(\"<your-table-account-url>\")\n+    .credential(credential)\n+    .buildClient();\n+```\n+\n+#### Authenticate with a Shared Access Signature (SAS)\n+To use a SAS to authorize your client, call the builder's `endpoint` method with your account URL and the `sasToken` method with your SAS.\n+\n+```java\n+TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+    .endpoint(\"<your-table-account-url>\")\n+    .sasToken(\"<sas-token-string>\")\n+    .buildClient();\n+```\n+\n+### Create, List, and Delete Azure tables\n+\n+#### Construct a `TableServiceClient`\n+Construct a `TableServiceClient` by creating an instance of `TableServiceClientBuilder` and then calling the builder's `buildClient` or `buildAsyncClient` methods.\n+\n+```java\n+TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+    .connectionString(\"<your-connection-string>\") // e.g.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc618ab667715ed7f596ddf97f85471d81509425"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2MjczNA==", "bodyText": "Oh, no these are examples of how to construct the client. Since I have a real example of each authentication method, when I got down to the examples for constructing a client I had to pick one, and I used connectionString as an example, hence the comment meant to indicate you would choose whichever authentication mechanism was appropriate.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14698#discussion_r483162734", "createdAt": "2020-09-03T18:06:52Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/README.md", "diffHunk": "@@ -25,17 +20,287 @@ best parts of Azure cloud.\n ```\n [//]: # ({x-version-update-end})\n \n+### Prerequisites\n+\n+- [Java Development Kit (JDK)][jdk] with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- An existing Azure storage account or Azure Cosmos DB Table API account\n+\n+#### Create a Storage Account\n+To create a Storage Account you can use the [Azure Portal][storage_account_create_portal] or [Azure CLI][storage_account_create_cli].\n+\n+```bash\n+az storage account create \\\n+    --resource-group <resource-group-name> \\\n+    --name <storage-account-name> \\\n+    --location <location>\n+```\n+\n+Your storage account URL, subsequently identified as `<your-table-account-url>`, would be formatted as follows\n+`http(s)://<storage-account-name>.table.core.windows.net`.\n+\n+#### Create a Cosmos DB Table API account\n+To create a Cosmos DB Table API account you can use the [Azure Portal][cosmosdb_create_portal] or [Azure CLI][cosmosdb_create_cli].\n+\n+```bash\n+az cosmosdb create \\\n+    --resource-group <resource-group-name> \\\n+    --name <cosmosdb-account-name> \\\n+    --capabilities EnableTable\n+```\n+\n+Your Table API account URL, subsequently identified as `<your-table-account-url>`, would be formatted as follows\n+`http(s)://<cosmosdb-account-name>.table.cosmosdb.azure.com`.\n+\n+### Authenticate the client\n+Every request made to the Table service must be authorized using a connection string, shared key credential, or shared access signature. The samples below demonstrate the usage of these methods.\n+\n+Note: Azure Tables doesn't support Azure Active Directory (AAD) authentication.\n+\n+#### Connection string\n+A connection string includes the authentication information required for your application to access data in an Azure table at runtime using Shared Key authorization. See [Authenticate with a connection string](#authenticate-with-a-connection-string) for an example of how to use a connection string with a `TableServiceClient`.\n+\n+You can obtain your connection string from the Azure Portal (click **Access keys** under **Settings** in the Portal Storage account blade, or **Connection String** under **Settings** in the Portal Cosmos DB account blade) or using the Azure CLI:\n+\n+```bash\n+# Storage account\n+az storage account show-connection-string \\\n+    --resource-group <resource-group-name> \\\n+    --name <storage-account-name>\n+\n+# Cosmos DB Table API account\n+az cosmosdb list-connection-strings \\\n+    --resource-group <resource-group-name> \\\n+    --name <cosmosdb-account-name>\n+```\n+\n+#### Shared Key credential\n+Shared Key authorization relies on your account access keys and other parameters to produce an encrypted signature string that is passed on the request in the Authorization header. See [Authenticate with a Shared Key credential](#authenticate-with-a-shared-key-credential) for an example of how to use Shared Key authorization with a `TableServiceClient`.\n+\n+To use Shared Key authorization you'll need your account name and URL, as well as an account access key. You can obtain your primary access key from the Azure Portal (click **Access keys** under **Settings** in the Portal Storage account blade, or **Connection String** under **Settings** in the Portal Cosmos DB account blade) or using the Azure CLI:\n+\n+```bash\n+# Storage account\n+az storage account keys list \\\n+    --resource-group <resource-group-name> \\\n+    --account-name <storage-account-name>\n+\n+# Cosmos DB Table API account\n+az cosmosdb list-keys \\\n+    --resource-group <resource-group-name> \\\n+    --name <cosmosdb-account-name>\n+```\n+\n+#### Shared Access Signature (SAS)\n+A shared access signature allows administrators to delegate granular access to an Azure table without sharing the access key directly. You can control what resources the client may access, what permissions it has on those resources, and how long the SAS is valid, among other parameters. It relies on your account access keys and other parameters to produce an encrypted signature string that is passed on the request in the query string. See [Authenticate with a Shared Access Signature (SAS) token](#authenticate-with-a-shared-access-signature-sas-token) for an example of how to use shared access signatures with a `TableServiceClient`.\n+\n+To use SAS token authorization you'll need your account name and URL, as well as the SAS. You can obtain your SAS from the Azure Portal (click **Shared access signature** under **Settings** in the Portal Storage account blade) or using the Azure CLI:\n+\n+```bash\n+# Account-level SAS\n+az storage account generate-sas \\\n+    --account-name <storage-or-cosmosdb-account-name> \\\n+    --services t \\\n+    --resource-types <resource-types> \\\n+    --permissions <permissions> \\\n+    --expiry <expiry-date>\n+\n+# Table-level SAS\n+az storage table generate-sas \\\n+    --name <table-name>\n+```\n+\n ## Key concepts\n \n+- **TableServiceClient** - A `TableServiceClient` is a client object that enables you to interact with the Table Service in order to create, list, and delete tables.\n+- **TableClient** - A `TableClient` is a client object that enables you to interact with a specific table in order to create, update, list, and delete entities within it.\n+- **Table** - A table is a collection of entities. Tables don't enforce a schema on entities, which means a single table can contain entities that have different sets of properties.\n+- **Entity** - An entity is a set of properties, similar to a database row. An entity in Azure Storage can be up to 1MB in size. An entity in Azure Cosmos DB can be up to 2MB in size. An entity has a partition key and a row key which together uniquely identify the entity within the table.\n+- **Properties** - A property is a name-value pair. Each entity can include up to 252 properties to store data. Each entity also has three system properties that specify a partition key, a row key, and a timestamp.\n+- **Partition Key** - An entity's partition key identifies the partition within the table to which the entity belongs. Entities with the same partition key can be queried more quickly, and inserted/updated in atomic operations.\n+- **Row Key** - An entity's row key is its unique identifier within a partition.\n+\n+Common uses of the Table service include:\n+\n+- Storing TBs of structured data capable of serving web scale applications\n+- Storing datasets that don't require complex joins, foreign keys, or stored procedures and can be de-normalized for fast access\n+- Quickly querying data using a clustered index\n+- Accessing data using the OData protocol\n+\n ## Examples\n-Use the client library for Tables to:\n-- manages tables\n-- edit and access table contents\n+\n+- [Authenticate a client](#authenticate-a-client)\n+  - [Authenticate with a connection string](#authenticate-with-a-connection-string)\n+  - [Authenticate with a Shared Key](#authenticate-with-a-shared-key)\n+  - [Authenticate with a Shared Access Signature (SAS)](#authenticate-with-a-shared-access-signature-sas)\n+- [Create, List, and Delete Azure tables](#create-list-and-delete-azure-tables)\n+  - [Construct a `TableServiceClient`](#construct-a-tableserviceclient)\n+  - [Create a table](#create-a-table)\n+  - [List tables](#list-tables)\n+  - [Delete a table](#delete-a-table)\n+- [Create, List, and Delete table entities](##create-list-and-delete-table-entities)\n+  - [Construct a `TableClient`](#construct-a-tableclient)\n+  - [Create an entity](#create-an-entity)\n+  - [List entities](#list-entities)\n+  - [Delete an entity](#delete-an-entity)\n+\n+### Authenticate a client\n+\n+#### Authenticate with a connection string\n+To use a connection string to authorize your client, call the builder's `connectionString` method with your connection string.\n+\n+```java\n+TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+    .connectionString(\"<your-connection-string>\")\n+    .buildClient();\n+```\n+\n+#### Authenticate with a Shared Key\n+To use a Shared Key to authorize your client, create an instance of `TablesSharedKeyCredential` with your account name and access key. Call the builder's `endpoint` method with your account URL and the `credential` method with the `TablesSharedKeyCredential` object you created.\n+\n+```java\n+TablesSharedKeyCredential credential = new TablesSharedKeyCredential(\"<your-account-name>\", \"<account-access-key>\");\n+TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+    .endpoint(\"<your-table-account-url>\")\n+    .credential(credential)\n+    .buildClient();\n+```\n+\n+#### Authenticate with a Shared Access Signature (SAS)\n+To use a SAS to authorize your client, call the builder's `endpoint` method with your account URL and the `sasToken` method with your SAS.\n+\n+```java\n+TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+    .endpoint(\"<your-table-account-url>\")\n+    .sasToken(\"<sas-token-string>\")\n+    .buildClient();\n+```\n+\n+### Create, List, and Delete Azure tables\n+\n+#### Construct a `TableServiceClient`\n+Construct a `TableServiceClient` by creating an instance of `TableServiceClientBuilder` and then calling the builder's `buildClient` or `buildAsyncClient` methods.\n+\n+```java\n+TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+    .connectionString(\"<your-connection-string>\") // e.g.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyODAyOA=="}, "originalCommit": {"oid": "dc618ab667715ed7f596ddf97f85471d81509425"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2MzA1OQ==", "bodyText": "Maybe I can update the comment to something like // or your preferred authentication method", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14698#discussion_r483163059", "createdAt": "2020-09-03T18:07:27Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/README.md", "diffHunk": "@@ -25,17 +20,287 @@ best parts of Azure cloud.\n ```\n [//]: # ({x-version-update-end})\n \n+### Prerequisites\n+\n+- [Java Development Kit (JDK)][jdk] with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- An existing Azure storage account or Azure Cosmos DB Table API account\n+\n+#### Create a Storage Account\n+To create a Storage Account you can use the [Azure Portal][storage_account_create_portal] or [Azure CLI][storage_account_create_cli].\n+\n+```bash\n+az storage account create \\\n+    --resource-group <resource-group-name> \\\n+    --name <storage-account-name> \\\n+    --location <location>\n+```\n+\n+Your storage account URL, subsequently identified as `<your-table-account-url>`, would be formatted as follows\n+`http(s)://<storage-account-name>.table.core.windows.net`.\n+\n+#### Create a Cosmos DB Table API account\n+To create a Cosmos DB Table API account you can use the [Azure Portal][cosmosdb_create_portal] or [Azure CLI][cosmosdb_create_cli].\n+\n+```bash\n+az cosmosdb create \\\n+    --resource-group <resource-group-name> \\\n+    --name <cosmosdb-account-name> \\\n+    --capabilities EnableTable\n+```\n+\n+Your Table API account URL, subsequently identified as `<your-table-account-url>`, would be formatted as follows\n+`http(s)://<cosmosdb-account-name>.table.cosmosdb.azure.com`.\n+\n+### Authenticate the client\n+Every request made to the Table service must be authorized using a connection string, shared key credential, or shared access signature. The samples below demonstrate the usage of these methods.\n+\n+Note: Azure Tables doesn't support Azure Active Directory (AAD) authentication.\n+\n+#### Connection string\n+A connection string includes the authentication information required for your application to access data in an Azure table at runtime using Shared Key authorization. See [Authenticate with a connection string](#authenticate-with-a-connection-string) for an example of how to use a connection string with a `TableServiceClient`.\n+\n+You can obtain your connection string from the Azure Portal (click **Access keys** under **Settings** in the Portal Storage account blade, or **Connection String** under **Settings** in the Portal Cosmos DB account blade) or using the Azure CLI:\n+\n+```bash\n+# Storage account\n+az storage account show-connection-string \\\n+    --resource-group <resource-group-name> \\\n+    --name <storage-account-name>\n+\n+# Cosmos DB Table API account\n+az cosmosdb list-connection-strings \\\n+    --resource-group <resource-group-name> \\\n+    --name <cosmosdb-account-name>\n+```\n+\n+#### Shared Key credential\n+Shared Key authorization relies on your account access keys and other parameters to produce an encrypted signature string that is passed on the request in the Authorization header. See [Authenticate with a Shared Key credential](#authenticate-with-a-shared-key-credential) for an example of how to use Shared Key authorization with a `TableServiceClient`.\n+\n+To use Shared Key authorization you'll need your account name and URL, as well as an account access key. You can obtain your primary access key from the Azure Portal (click **Access keys** under **Settings** in the Portal Storage account blade, or **Connection String** under **Settings** in the Portal Cosmos DB account blade) or using the Azure CLI:\n+\n+```bash\n+# Storage account\n+az storage account keys list \\\n+    --resource-group <resource-group-name> \\\n+    --account-name <storage-account-name>\n+\n+# Cosmos DB Table API account\n+az cosmosdb list-keys \\\n+    --resource-group <resource-group-name> \\\n+    --name <cosmosdb-account-name>\n+```\n+\n+#### Shared Access Signature (SAS)\n+A shared access signature allows administrators to delegate granular access to an Azure table without sharing the access key directly. You can control what resources the client may access, what permissions it has on those resources, and how long the SAS is valid, among other parameters. It relies on your account access keys and other parameters to produce an encrypted signature string that is passed on the request in the query string. See [Authenticate with a Shared Access Signature (SAS) token](#authenticate-with-a-shared-access-signature-sas-token) for an example of how to use shared access signatures with a `TableServiceClient`.\n+\n+To use SAS token authorization you'll need your account name and URL, as well as the SAS. You can obtain your SAS from the Azure Portal (click **Shared access signature** under **Settings** in the Portal Storage account blade) or using the Azure CLI:\n+\n+```bash\n+# Account-level SAS\n+az storage account generate-sas \\\n+    --account-name <storage-or-cosmosdb-account-name> \\\n+    --services t \\\n+    --resource-types <resource-types> \\\n+    --permissions <permissions> \\\n+    --expiry <expiry-date>\n+\n+# Table-level SAS\n+az storage table generate-sas \\\n+    --name <table-name>\n+```\n+\n ## Key concepts\n \n+- **TableServiceClient** - A `TableServiceClient` is a client object that enables you to interact with the Table Service in order to create, list, and delete tables.\n+- **TableClient** - A `TableClient` is a client object that enables you to interact with a specific table in order to create, update, list, and delete entities within it.\n+- **Table** - A table is a collection of entities. Tables don't enforce a schema on entities, which means a single table can contain entities that have different sets of properties.\n+- **Entity** - An entity is a set of properties, similar to a database row. An entity in Azure Storage can be up to 1MB in size. An entity in Azure Cosmos DB can be up to 2MB in size. An entity has a partition key and a row key which together uniquely identify the entity within the table.\n+- **Properties** - A property is a name-value pair. Each entity can include up to 252 properties to store data. Each entity also has three system properties that specify a partition key, a row key, and a timestamp.\n+- **Partition Key** - An entity's partition key identifies the partition within the table to which the entity belongs. Entities with the same partition key can be queried more quickly, and inserted/updated in atomic operations.\n+- **Row Key** - An entity's row key is its unique identifier within a partition.\n+\n+Common uses of the Table service include:\n+\n+- Storing TBs of structured data capable of serving web scale applications\n+- Storing datasets that don't require complex joins, foreign keys, or stored procedures and can be de-normalized for fast access\n+- Quickly querying data using a clustered index\n+- Accessing data using the OData protocol\n+\n ## Examples\n-Use the client library for Tables to:\n-- manages tables\n-- edit and access table contents\n+\n+- [Authenticate a client](#authenticate-a-client)\n+  - [Authenticate with a connection string](#authenticate-with-a-connection-string)\n+  - [Authenticate with a Shared Key](#authenticate-with-a-shared-key)\n+  - [Authenticate with a Shared Access Signature (SAS)](#authenticate-with-a-shared-access-signature-sas)\n+- [Create, List, and Delete Azure tables](#create-list-and-delete-azure-tables)\n+  - [Construct a `TableServiceClient`](#construct-a-tableserviceclient)\n+  - [Create a table](#create-a-table)\n+  - [List tables](#list-tables)\n+  - [Delete a table](#delete-a-table)\n+- [Create, List, and Delete table entities](##create-list-and-delete-table-entities)\n+  - [Construct a `TableClient`](#construct-a-tableclient)\n+  - [Create an entity](#create-an-entity)\n+  - [List entities](#list-entities)\n+  - [Delete an entity](#delete-an-entity)\n+\n+### Authenticate a client\n+\n+#### Authenticate with a connection string\n+To use a connection string to authorize your client, call the builder's `connectionString` method with your connection string.\n+\n+```java\n+TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+    .connectionString(\"<your-connection-string>\")\n+    .buildClient();\n+```\n+\n+#### Authenticate with a Shared Key\n+To use a Shared Key to authorize your client, create an instance of `TablesSharedKeyCredential` with your account name and access key. Call the builder's `endpoint` method with your account URL and the `credential` method with the `TablesSharedKeyCredential` object you created.\n+\n+```java\n+TablesSharedKeyCredential credential = new TablesSharedKeyCredential(\"<your-account-name>\", \"<account-access-key>\");\n+TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+    .endpoint(\"<your-table-account-url>\")\n+    .credential(credential)\n+    .buildClient();\n+```\n+\n+#### Authenticate with a Shared Access Signature (SAS)\n+To use a SAS to authorize your client, call the builder's `endpoint` method with your account URL and the `sasToken` method with your SAS.\n+\n+```java\n+TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+    .endpoint(\"<your-table-account-url>\")\n+    .sasToken(\"<sas-token-string>\")\n+    .buildClient();\n+```\n+\n+### Create, List, and Delete Azure tables\n+\n+#### Construct a `TableServiceClient`\n+Construct a `TableServiceClient` by creating an instance of `TableServiceClientBuilder` and then calling the builder's `buildClient` or `buildAsyncClient` methods.\n+\n+```java\n+TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+    .connectionString(\"<your-connection-string>\") // e.g.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyODAyOA=="}, "originalCommit": {"oid": "dc618ab667715ed7f596ddf97f85471d81509425"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2ODU0Ng==", "bodyText": "Ah, ok - that makes sense. Yeah, I think the latter example comment would be more intuitive.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14698#discussion_r483168546", "createdAt": "2020-09-03T18:17:24Z", "author": {"login": "christothes"}, "path": "sdk/tables/azure-data-tables/README.md", "diffHunk": "@@ -25,17 +20,287 @@ best parts of Azure cloud.\n ```\n [//]: # ({x-version-update-end})\n \n+### Prerequisites\n+\n+- [Java Development Kit (JDK)][jdk] with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- An existing Azure storage account or Azure Cosmos DB Table API account\n+\n+#### Create a Storage Account\n+To create a Storage Account you can use the [Azure Portal][storage_account_create_portal] or [Azure CLI][storage_account_create_cli].\n+\n+```bash\n+az storage account create \\\n+    --resource-group <resource-group-name> \\\n+    --name <storage-account-name> \\\n+    --location <location>\n+```\n+\n+Your storage account URL, subsequently identified as `<your-table-account-url>`, would be formatted as follows\n+`http(s)://<storage-account-name>.table.core.windows.net`.\n+\n+#### Create a Cosmos DB Table API account\n+To create a Cosmos DB Table API account you can use the [Azure Portal][cosmosdb_create_portal] or [Azure CLI][cosmosdb_create_cli].\n+\n+```bash\n+az cosmosdb create \\\n+    --resource-group <resource-group-name> \\\n+    --name <cosmosdb-account-name> \\\n+    --capabilities EnableTable\n+```\n+\n+Your Table API account URL, subsequently identified as `<your-table-account-url>`, would be formatted as follows\n+`http(s)://<cosmosdb-account-name>.table.cosmosdb.azure.com`.\n+\n+### Authenticate the client\n+Every request made to the Table service must be authorized using a connection string, shared key credential, or shared access signature. The samples below demonstrate the usage of these methods.\n+\n+Note: Azure Tables doesn't support Azure Active Directory (AAD) authentication.\n+\n+#### Connection string\n+A connection string includes the authentication information required for your application to access data in an Azure table at runtime using Shared Key authorization. See [Authenticate with a connection string](#authenticate-with-a-connection-string) for an example of how to use a connection string with a `TableServiceClient`.\n+\n+You can obtain your connection string from the Azure Portal (click **Access keys** under **Settings** in the Portal Storage account blade, or **Connection String** under **Settings** in the Portal Cosmos DB account blade) or using the Azure CLI:\n+\n+```bash\n+# Storage account\n+az storage account show-connection-string \\\n+    --resource-group <resource-group-name> \\\n+    --name <storage-account-name>\n+\n+# Cosmos DB Table API account\n+az cosmosdb list-connection-strings \\\n+    --resource-group <resource-group-name> \\\n+    --name <cosmosdb-account-name>\n+```\n+\n+#### Shared Key credential\n+Shared Key authorization relies on your account access keys and other parameters to produce an encrypted signature string that is passed on the request in the Authorization header. See [Authenticate with a Shared Key credential](#authenticate-with-a-shared-key-credential) for an example of how to use Shared Key authorization with a `TableServiceClient`.\n+\n+To use Shared Key authorization you'll need your account name and URL, as well as an account access key. You can obtain your primary access key from the Azure Portal (click **Access keys** under **Settings** in the Portal Storage account blade, or **Connection String** under **Settings** in the Portal Cosmos DB account blade) or using the Azure CLI:\n+\n+```bash\n+# Storage account\n+az storage account keys list \\\n+    --resource-group <resource-group-name> \\\n+    --account-name <storage-account-name>\n+\n+# Cosmos DB Table API account\n+az cosmosdb list-keys \\\n+    --resource-group <resource-group-name> \\\n+    --name <cosmosdb-account-name>\n+```\n+\n+#### Shared Access Signature (SAS)\n+A shared access signature allows administrators to delegate granular access to an Azure table without sharing the access key directly. You can control what resources the client may access, what permissions it has on those resources, and how long the SAS is valid, among other parameters. It relies on your account access keys and other parameters to produce an encrypted signature string that is passed on the request in the query string. See [Authenticate with a Shared Access Signature (SAS) token](#authenticate-with-a-shared-access-signature-sas-token) for an example of how to use shared access signatures with a `TableServiceClient`.\n+\n+To use SAS token authorization you'll need your account name and URL, as well as the SAS. You can obtain your SAS from the Azure Portal (click **Shared access signature** under **Settings** in the Portal Storage account blade) or using the Azure CLI:\n+\n+```bash\n+# Account-level SAS\n+az storage account generate-sas \\\n+    --account-name <storage-or-cosmosdb-account-name> \\\n+    --services t \\\n+    --resource-types <resource-types> \\\n+    --permissions <permissions> \\\n+    --expiry <expiry-date>\n+\n+# Table-level SAS\n+az storage table generate-sas \\\n+    --name <table-name>\n+```\n+\n ## Key concepts\n \n+- **TableServiceClient** - A `TableServiceClient` is a client object that enables you to interact with the Table Service in order to create, list, and delete tables.\n+- **TableClient** - A `TableClient` is a client object that enables you to interact with a specific table in order to create, update, list, and delete entities within it.\n+- **Table** - A table is a collection of entities. Tables don't enforce a schema on entities, which means a single table can contain entities that have different sets of properties.\n+- **Entity** - An entity is a set of properties, similar to a database row. An entity in Azure Storage can be up to 1MB in size. An entity in Azure Cosmos DB can be up to 2MB in size. An entity has a partition key and a row key which together uniquely identify the entity within the table.\n+- **Properties** - A property is a name-value pair. Each entity can include up to 252 properties to store data. Each entity also has three system properties that specify a partition key, a row key, and a timestamp.\n+- **Partition Key** - An entity's partition key identifies the partition within the table to which the entity belongs. Entities with the same partition key can be queried more quickly, and inserted/updated in atomic operations.\n+- **Row Key** - An entity's row key is its unique identifier within a partition.\n+\n+Common uses of the Table service include:\n+\n+- Storing TBs of structured data capable of serving web scale applications\n+- Storing datasets that don't require complex joins, foreign keys, or stored procedures and can be de-normalized for fast access\n+- Quickly querying data using a clustered index\n+- Accessing data using the OData protocol\n+\n ## Examples\n-Use the client library for Tables to:\n-- manages tables\n-- edit and access table contents\n+\n+- [Authenticate a client](#authenticate-a-client)\n+  - [Authenticate with a connection string](#authenticate-with-a-connection-string)\n+  - [Authenticate with a Shared Key](#authenticate-with-a-shared-key)\n+  - [Authenticate with a Shared Access Signature (SAS)](#authenticate-with-a-shared-access-signature-sas)\n+- [Create, List, and Delete Azure tables](#create-list-and-delete-azure-tables)\n+  - [Construct a `TableServiceClient`](#construct-a-tableserviceclient)\n+  - [Create a table](#create-a-table)\n+  - [List tables](#list-tables)\n+  - [Delete a table](#delete-a-table)\n+- [Create, List, and Delete table entities](##create-list-and-delete-table-entities)\n+  - [Construct a `TableClient`](#construct-a-tableclient)\n+  - [Create an entity](#create-an-entity)\n+  - [List entities](#list-entities)\n+  - [Delete an entity](#delete-an-entity)\n+\n+### Authenticate a client\n+\n+#### Authenticate with a connection string\n+To use a connection string to authorize your client, call the builder's `connectionString` method with your connection string.\n+\n+```java\n+TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+    .connectionString(\"<your-connection-string>\")\n+    .buildClient();\n+```\n+\n+#### Authenticate with a Shared Key\n+To use a Shared Key to authorize your client, create an instance of `TablesSharedKeyCredential` with your account name and access key. Call the builder's `endpoint` method with your account URL and the `credential` method with the `TablesSharedKeyCredential` object you created.\n+\n+```java\n+TablesSharedKeyCredential credential = new TablesSharedKeyCredential(\"<your-account-name>\", \"<account-access-key>\");\n+TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+    .endpoint(\"<your-table-account-url>\")\n+    .credential(credential)\n+    .buildClient();\n+```\n+\n+#### Authenticate with a Shared Access Signature (SAS)\n+To use a SAS to authorize your client, call the builder's `endpoint` method with your account URL and the `sasToken` method with your SAS.\n+\n+```java\n+TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+    .endpoint(\"<your-table-account-url>\")\n+    .sasToken(\"<sas-token-string>\")\n+    .buildClient();\n+```\n+\n+### Create, List, and Delete Azure tables\n+\n+#### Construct a `TableServiceClient`\n+Construct a `TableServiceClient` by creating an instance of `TableServiceClientBuilder` and then calling the builder's `buildClient` or `buildAsyncClient` methods.\n+\n+```java\n+TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+    .connectionString(\"<your-connection-string>\") // e.g.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyODAyOA=="}, "originalCommit": {"oid": "dc618ab667715ed7f596ddf97f85471d81509425"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE3MTAzNg==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14698#discussion_r483171036", "createdAt": "2020-09-03T18:22:04Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/README.md", "diffHunk": "@@ -25,17 +20,287 @@ best parts of Azure cloud.\n ```\n [//]: # ({x-version-update-end})\n \n+### Prerequisites\n+\n+- [Java Development Kit (JDK)][jdk] with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- An existing Azure storage account or Azure Cosmos DB Table API account\n+\n+#### Create a Storage Account\n+To create a Storage Account you can use the [Azure Portal][storage_account_create_portal] or [Azure CLI][storage_account_create_cli].\n+\n+```bash\n+az storage account create \\\n+    --resource-group <resource-group-name> \\\n+    --name <storage-account-name> \\\n+    --location <location>\n+```\n+\n+Your storage account URL, subsequently identified as `<your-table-account-url>`, would be formatted as follows\n+`http(s)://<storage-account-name>.table.core.windows.net`.\n+\n+#### Create a Cosmos DB Table API account\n+To create a Cosmos DB Table API account you can use the [Azure Portal][cosmosdb_create_portal] or [Azure CLI][cosmosdb_create_cli].\n+\n+```bash\n+az cosmosdb create \\\n+    --resource-group <resource-group-name> \\\n+    --name <cosmosdb-account-name> \\\n+    --capabilities EnableTable\n+```\n+\n+Your Table API account URL, subsequently identified as `<your-table-account-url>`, would be formatted as follows\n+`http(s)://<cosmosdb-account-name>.table.cosmosdb.azure.com`.\n+\n+### Authenticate the client\n+Every request made to the Table service must be authorized using a connection string, shared key credential, or shared access signature. The samples below demonstrate the usage of these methods.\n+\n+Note: Azure Tables doesn't support Azure Active Directory (AAD) authentication.\n+\n+#### Connection string\n+A connection string includes the authentication information required for your application to access data in an Azure table at runtime using Shared Key authorization. See [Authenticate with a connection string](#authenticate-with-a-connection-string) for an example of how to use a connection string with a `TableServiceClient`.\n+\n+You can obtain your connection string from the Azure Portal (click **Access keys** under **Settings** in the Portal Storage account blade, or **Connection String** under **Settings** in the Portal Cosmos DB account blade) or using the Azure CLI:\n+\n+```bash\n+# Storage account\n+az storage account show-connection-string \\\n+    --resource-group <resource-group-name> \\\n+    --name <storage-account-name>\n+\n+# Cosmos DB Table API account\n+az cosmosdb list-connection-strings \\\n+    --resource-group <resource-group-name> \\\n+    --name <cosmosdb-account-name>\n+```\n+\n+#### Shared Key credential\n+Shared Key authorization relies on your account access keys and other parameters to produce an encrypted signature string that is passed on the request in the Authorization header. See [Authenticate with a Shared Key credential](#authenticate-with-a-shared-key-credential) for an example of how to use Shared Key authorization with a `TableServiceClient`.\n+\n+To use Shared Key authorization you'll need your account name and URL, as well as an account access key. You can obtain your primary access key from the Azure Portal (click **Access keys** under **Settings** in the Portal Storage account blade, or **Connection String** under **Settings** in the Portal Cosmos DB account blade) or using the Azure CLI:\n+\n+```bash\n+# Storage account\n+az storage account keys list \\\n+    --resource-group <resource-group-name> \\\n+    --account-name <storage-account-name>\n+\n+# Cosmos DB Table API account\n+az cosmosdb list-keys \\\n+    --resource-group <resource-group-name> \\\n+    --name <cosmosdb-account-name>\n+```\n+\n+#### Shared Access Signature (SAS)\n+A shared access signature allows administrators to delegate granular access to an Azure table without sharing the access key directly. You can control what resources the client may access, what permissions it has on those resources, and how long the SAS is valid, among other parameters. It relies on your account access keys and other parameters to produce an encrypted signature string that is passed on the request in the query string. See [Authenticate with a Shared Access Signature (SAS) token](#authenticate-with-a-shared-access-signature-sas-token) for an example of how to use shared access signatures with a `TableServiceClient`.\n+\n+To use SAS token authorization you'll need your account name and URL, as well as the SAS. You can obtain your SAS from the Azure Portal (click **Shared access signature** under **Settings** in the Portal Storage account blade) or using the Azure CLI:\n+\n+```bash\n+# Account-level SAS\n+az storage account generate-sas \\\n+    --account-name <storage-or-cosmosdb-account-name> \\\n+    --services t \\\n+    --resource-types <resource-types> \\\n+    --permissions <permissions> \\\n+    --expiry <expiry-date>\n+\n+# Table-level SAS\n+az storage table generate-sas \\\n+    --name <table-name>\n+```\n+\n ## Key concepts\n \n+- **TableServiceClient** - A `TableServiceClient` is a client object that enables you to interact with the Table Service in order to create, list, and delete tables.\n+- **TableClient** - A `TableClient` is a client object that enables you to interact with a specific table in order to create, update, list, and delete entities within it.\n+- **Table** - A table is a collection of entities. Tables don't enforce a schema on entities, which means a single table can contain entities that have different sets of properties.\n+- **Entity** - An entity is a set of properties, similar to a database row. An entity in Azure Storage can be up to 1MB in size. An entity in Azure Cosmos DB can be up to 2MB in size. An entity has a partition key and a row key which together uniquely identify the entity within the table.\n+- **Properties** - A property is a name-value pair. Each entity can include up to 252 properties to store data. Each entity also has three system properties that specify a partition key, a row key, and a timestamp.\n+- **Partition Key** - An entity's partition key identifies the partition within the table to which the entity belongs. Entities with the same partition key can be queried more quickly, and inserted/updated in atomic operations.\n+- **Row Key** - An entity's row key is its unique identifier within a partition.\n+\n+Common uses of the Table service include:\n+\n+- Storing TBs of structured data capable of serving web scale applications\n+- Storing datasets that don't require complex joins, foreign keys, or stored procedures and can be de-normalized for fast access\n+- Quickly querying data using a clustered index\n+- Accessing data using the OData protocol\n+\n ## Examples\n-Use the client library for Tables to:\n-- manages tables\n-- edit and access table contents\n+\n+- [Authenticate a client](#authenticate-a-client)\n+  - [Authenticate with a connection string](#authenticate-with-a-connection-string)\n+  - [Authenticate with a Shared Key](#authenticate-with-a-shared-key)\n+  - [Authenticate with a Shared Access Signature (SAS)](#authenticate-with-a-shared-access-signature-sas)\n+- [Create, List, and Delete Azure tables](#create-list-and-delete-azure-tables)\n+  - [Construct a `TableServiceClient`](#construct-a-tableserviceclient)\n+  - [Create a table](#create-a-table)\n+  - [List tables](#list-tables)\n+  - [Delete a table](#delete-a-table)\n+- [Create, List, and Delete table entities](##create-list-and-delete-table-entities)\n+  - [Construct a `TableClient`](#construct-a-tableclient)\n+  - [Create an entity](#create-an-entity)\n+  - [List entities](#list-entities)\n+  - [Delete an entity](#delete-an-entity)\n+\n+### Authenticate a client\n+\n+#### Authenticate with a connection string\n+To use a connection string to authorize your client, call the builder's `connectionString` method with your connection string.\n+\n+```java\n+TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+    .connectionString(\"<your-connection-string>\")\n+    .buildClient();\n+```\n+\n+#### Authenticate with a Shared Key\n+To use a Shared Key to authorize your client, create an instance of `TablesSharedKeyCredential` with your account name and access key. Call the builder's `endpoint` method with your account URL and the `credential` method with the `TablesSharedKeyCredential` object you created.\n+\n+```java\n+TablesSharedKeyCredential credential = new TablesSharedKeyCredential(\"<your-account-name>\", \"<account-access-key>\");\n+TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+    .endpoint(\"<your-table-account-url>\")\n+    .credential(credential)\n+    .buildClient();\n+```\n+\n+#### Authenticate with a Shared Access Signature (SAS)\n+To use a SAS to authorize your client, call the builder's `endpoint` method with your account URL and the `sasToken` method with your SAS.\n+\n+```java\n+TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+    .endpoint(\"<your-table-account-url>\")\n+    .sasToken(\"<sas-token-string>\")\n+    .buildClient();\n+```\n+\n+### Create, List, and Delete Azure tables\n+\n+#### Construct a `TableServiceClient`\n+Construct a `TableServiceClient` by creating an instance of `TableServiceClientBuilder` and then calling the builder's `buildClient` or `buildAsyncClient` methods.\n+\n+```java\n+TableServiceClient tableServiceClient = new TableServiceClientBuilder()\n+    .connectionString(\"<your-connection-string>\") // e.g.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyODAyOA=="}, "originalCommit": {"oid": "dc618ab667715ed7f596ddf97f85471d81509425"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTE1NTM1OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/README.md", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTowMzoyMlrOHMz03w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDo1MzoyOVrOHM3IEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE5NDA3OQ==", "bodyText": "Use embedme tool to add codesnippets to README. This will inject compilable code into the docs and keeps it updated when APIs change.\nhttps://github.com/Azure/azure-sdk-for-java/wiki/Building#code-snippets-in-readme", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14698#discussion_r483194079", "createdAt": "2020-09-03T19:03:22Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/README.md", "diffHunk": "@@ -25,17 +20,287 @@ best parts of Azure cloud.\n ```\n [//]: # ({x-version-update-end})\n \n+### Prerequisites\n+\n+- [Java Development Kit (JDK)][jdk] with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- An existing Azure storage account or Azure Cosmos DB Table API account\n+\n+#### Create a Storage Account\n+To create a Storage Account you can use the [Azure Portal][storage_account_create_portal] or [Azure CLI][storage_account_create_cli].\n+\n+```bash\n+az storage account create \\\n+    --resource-group <resource-group-name> \\\n+    --name <storage-account-name> \\\n+    --location <location>\n+```\n+\n+Your storage account URL, subsequently identified as `<your-table-account-url>`, would be formatted as follows\n+`http(s)://<storage-account-name>.table.core.windows.net`.\n+\n+#### Create a Cosmos DB Table API account\n+To create a Cosmos DB Table API account you can use the [Azure Portal][cosmosdb_create_portal] or [Azure CLI][cosmosdb_create_cli].\n+\n+```bash\n+az cosmosdb create \\\n+    --resource-group <resource-group-name> \\\n+    --name <cosmosdb-account-name> \\\n+    --capabilities EnableTable\n+```\n+\n+Your Table API account URL, subsequently identified as `<your-table-account-url>`, would be formatted as follows\n+`http(s)://<cosmosdb-account-name>.table.cosmosdb.azure.com`.\n+\n+### Authenticate the client\n+Every request made to the Table service must be authorized using a connection string, shared key credential, or shared access signature. The samples below demonstrate the usage of these methods.\n+\n+Note: Azure Tables doesn't support Azure Active Directory (AAD) authentication.\n+\n+#### Connection string\n+A connection string includes the authentication information required for your application to access data in an Azure table at runtime using Shared Key authorization. See [Authenticate with a connection string](#authenticate-with-a-connection-string) for an example of how to use a connection string with a `TableServiceClient`.\n+\n+You can obtain your connection string from the Azure Portal (click **Access keys** under **Settings** in the Portal Storage account blade, or **Connection String** under **Settings** in the Portal Cosmos DB account blade) or using the Azure CLI:\n+\n+```bash\n+# Storage account\n+az storage account show-connection-string \\\n+    --resource-group <resource-group-name> \\\n+    --name <storage-account-name>\n+\n+# Cosmos DB Table API account\n+az cosmosdb list-connection-strings \\\n+    --resource-group <resource-group-name> \\\n+    --name <cosmosdb-account-name>\n+```\n+\n+#### Shared Key credential\n+Shared Key authorization relies on your account access keys and other parameters to produce an encrypted signature string that is passed on the request in the Authorization header. See [Authenticate with a Shared Key credential](#authenticate-with-a-shared-key-credential) for an example of how to use Shared Key authorization with a `TableServiceClient`.\n+\n+To use Shared Key authorization you'll need your account name and URL, as well as an account access key. You can obtain your primary access key from the Azure Portal (click **Access keys** under **Settings** in the Portal Storage account blade, or **Connection String** under **Settings** in the Portal Cosmos DB account blade) or using the Azure CLI:\n+\n+```bash\n+# Storage account\n+az storage account keys list \\\n+    --resource-group <resource-group-name> \\\n+    --account-name <storage-account-name>\n+\n+# Cosmos DB Table API account\n+az cosmosdb list-keys \\\n+    --resource-group <resource-group-name> \\\n+    --name <cosmosdb-account-name>\n+```\n+\n+#### Shared Access Signature (SAS)\n+A shared access signature allows administrators to delegate granular access to an Azure table without sharing the access key directly. You can control what resources the client may access, what permissions it has on those resources, and how long the SAS is valid, among other parameters. It relies on your account access keys and other parameters to produce an encrypted signature string that is passed on the request in the query string. See [Authenticate with a Shared Access Signature (SAS) token](#authenticate-with-a-shared-access-signature-sas-token) for an example of how to use shared access signatures with a `TableServiceClient`.\n+\n+To use SAS token authorization you'll need your account name and URL, as well as the SAS. You can obtain your SAS from the Azure Portal (click **Shared access signature** under **Settings** in the Portal Storage account blade) or using the Azure CLI:\n+\n+```bash\n+# Account-level SAS\n+az storage account generate-sas \\\n+    --account-name <storage-or-cosmosdb-account-name> \\\n+    --services t \\\n+    --resource-types <resource-types> \\\n+    --permissions <permissions> \\\n+    --expiry <expiry-date>\n+\n+# Table-level SAS\n+az storage table generate-sas \\\n+    --name <table-name>\n+```\n+\n ## Key concepts\n \n+- **TableServiceClient** - A `TableServiceClient` is a client object that enables you to interact with the Table Service in order to create, list, and delete tables.\n+- **TableClient** - A `TableClient` is a client object that enables you to interact with a specific table in order to create, update, list, and delete entities within it.\n+- **Table** - A table is a collection of entities. Tables don't enforce a schema on entities, which means a single table can contain entities that have different sets of properties.\n+- **Entity** - An entity is a set of properties, similar to a database row. An entity in Azure Storage can be up to 1MB in size. An entity in Azure Cosmos DB can be up to 2MB in size. An entity has a partition key and a row key which together uniquely identify the entity within the table.\n+- **Properties** - A property is a name-value pair. Each entity can include up to 252 properties to store data. Each entity also has three system properties that specify a partition key, a row key, and a timestamp.\n+- **Partition Key** - An entity's partition key identifies the partition within the table to which the entity belongs. Entities with the same partition key can be queried more quickly, and inserted/updated in atomic operations.\n+- **Row Key** - An entity's row key is its unique identifier within a partition.\n+\n+Common uses of the Table service include:\n+\n+- Storing TBs of structured data capable of serving web scale applications\n+- Storing datasets that don't require complex joins, foreign keys, or stored procedures and can be de-normalized for fast access\n+- Quickly querying data using a clustered index\n+- Accessing data using the OData protocol\n+\n ## Examples\n-Use the client library for Tables to:\n-- manages tables\n-- edit and access table contents\n+\n+- [Authenticate a client](#authenticate-a-client)\n+  - [Authenticate with a connection string](#authenticate-with-a-connection-string)\n+  - [Authenticate with a Shared Key](#authenticate-with-a-shared-key)\n+  - [Authenticate with a Shared Access Signature (SAS)](#authenticate-with-a-shared-access-signature-sas)\n+- [Create, List, and Delete Azure tables](#create-list-and-delete-azure-tables)\n+  - [Construct a `TableServiceClient`](#construct-a-tableserviceclient)\n+  - [Create a table](#create-a-table)\n+  - [List tables](#list-tables)\n+  - [Delete a table](#delete-a-table)\n+- [Create, List, and Delete table entities](##create-list-and-delete-table-entities)\n+  - [Construct a `TableClient`](#construct-a-tableclient)\n+  - [Create an entity](#create-an-entity)\n+  - [List entities](#list-entities)\n+  - [Delete an entity](#delete-an-entity)\n+\n+### Authenticate a client\n+\n+#### Authenticate with a connection string\n+To use a connection string to authorize your client, call the builder's `connectionString` method with your connection string.\n+\n+```java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "681b140cd1fab637aa562b4d0878fe1d2b186f68"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyOTIxMQ==", "bodyText": "Working on this now. @srnagar how do I embed code snippets that are just a single line or use example variables (e.g. those that aren't a complete, compilable sample?) For example, the one-line snippet here: https://github.com/Azure/azure-sdk-for-java/blob/681b140cd1fab637aa562b4d0878fe1d2b186f68/sdk/tables/azure-data-tables/README.md#delete-a-table", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14698#discussion_r483229211", "createdAt": "2020-09-03T20:15:58Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/README.md", "diffHunk": "@@ -25,17 +20,287 @@ best parts of Azure cloud.\n ```\n [//]: # ({x-version-update-end})\n \n+### Prerequisites\n+\n+- [Java Development Kit (JDK)][jdk] with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- An existing Azure storage account or Azure Cosmos DB Table API account\n+\n+#### Create a Storage Account\n+To create a Storage Account you can use the [Azure Portal][storage_account_create_portal] or [Azure CLI][storage_account_create_cli].\n+\n+```bash\n+az storage account create \\\n+    --resource-group <resource-group-name> \\\n+    --name <storage-account-name> \\\n+    --location <location>\n+```\n+\n+Your storage account URL, subsequently identified as `<your-table-account-url>`, would be formatted as follows\n+`http(s)://<storage-account-name>.table.core.windows.net`.\n+\n+#### Create a Cosmos DB Table API account\n+To create a Cosmos DB Table API account you can use the [Azure Portal][cosmosdb_create_portal] or [Azure CLI][cosmosdb_create_cli].\n+\n+```bash\n+az cosmosdb create \\\n+    --resource-group <resource-group-name> \\\n+    --name <cosmosdb-account-name> \\\n+    --capabilities EnableTable\n+```\n+\n+Your Table API account URL, subsequently identified as `<your-table-account-url>`, would be formatted as follows\n+`http(s)://<cosmosdb-account-name>.table.cosmosdb.azure.com`.\n+\n+### Authenticate the client\n+Every request made to the Table service must be authorized using a connection string, shared key credential, or shared access signature. The samples below demonstrate the usage of these methods.\n+\n+Note: Azure Tables doesn't support Azure Active Directory (AAD) authentication.\n+\n+#### Connection string\n+A connection string includes the authentication information required for your application to access data in an Azure table at runtime using Shared Key authorization. See [Authenticate with a connection string](#authenticate-with-a-connection-string) for an example of how to use a connection string with a `TableServiceClient`.\n+\n+You can obtain your connection string from the Azure Portal (click **Access keys** under **Settings** in the Portal Storage account blade, or **Connection String** under **Settings** in the Portal Cosmos DB account blade) or using the Azure CLI:\n+\n+```bash\n+# Storage account\n+az storage account show-connection-string \\\n+    --resource-group <resource-group-name> \\\n+    --name <storage-account-name>\n+\n+# Cosmos DB Table API account\n+az cosmosdb list-connection-strings \\\n+    --resource-group <resource-group-name> \\\n+    --name <cosmosdb-account-name>\n+```\n+\n+#### Shared Key credential\n+Shared Key authorization relies on your account access keys and other parameters to produce an encrypted signature string that is passed on the request in the Authorization header. See [Authenticate with a Shared Key credential](#authenticate-with-a-shared-key-credential) for an example of how to use Shared Key authorization with a `TableServiceClient`.\n+\n+To use Shared Key authorization you'll need your account name and URL, as well as an account access key. You can obtain your primary access key from the Azure Portal (click **Access keys** under **Settings** in the Portal Storage account blade, or **Connection String** under **Settings** in the Portal Cosmos DB account blade) or using the Azure CLI:\n+\n+```bash\n+# Storage account\n+az storage account keys list \\\n+    --resource-group <resource-group-name> \\\n+    --account-name <storage-account-name>\n+\n+# Cosmos DB Table API account\n+az cosmosdb list-keys \\\n+    --resource-group <resource-group-name> \\\n+    --name <cosmosdb-account-name>\n+```\n+\n+#### Shared Access Signature (SAS)\n+A shared access signature allows administrators to delegate granular access to an Azure table without sharing the access key directly. You can control what resources the client may access, what permissions it has on those resources, and how long the SAS is valid, among other parameters. It relies on your account access keys and other parameters to produce an encrypted signature string that is passed on the request in the query string. See [Authenticate with a Shared Access Signature (SAS) token](#authenticate-with-a-shared-access-signature-sas-token) for an example of how to use shared access signatures with a `TableServiceClient`.\n+\n+To use SAS token authorization you'll need your account name and URL, as well as the SAS. You can obtain your SAS from the Azure Portal (click **Shared access signature** under **Settings** in the Portal Storage account blade) or using the Azure CLI:\n+\n+```bash\n+# Account-level SAS\n+az storage account generate-sas \\\n+    --account-name <storage-or-cosmosdb-account-name> \\\n+    --services t \\\n+    --resource-types <resource-types> \\\n+    --permissions <permissions> \\\n+    --expiry <expiry-date>\n+\n+# Table-level SAS\n+az storage table generate-sas \\\n+    --name <table-name>\n+```\n+\n ## Key concepts\n \n+- **TableServiceClient** - A `TableServiceClient` is a client object that enables you to interact with the Table Service in order to create, list, and delete tables.\n+- **TableClient** - A `TableClient` is a client object that enables you to interact with a specific table in order to create, update, list, and delete entities within it.\n+- **Table** - A table is a collection of entities. Tables don't enforce a schema on entities, which means a single table can contain entities that have different sets of properties.\n+- **Entity** - An entity is a set of properties, similar to a database row. An entity in Azure Storage can be up to 1MB in size. An entity in Azure Cosmos DB can be up to 2MB in size. An entity has a partition key and a row key which together uniquely identify the entity within the table.\n+- **Properties** - A property is a name-value pair. Each entity can include up to 252 properties to store data. Each entity also has three system properties that specify a partition key, a row key, and a timestamp.\n+- **Partition Key** - An entity's partition key identifies the partition within the table to which the entity belongs. Entities with the same partition key can be queried more quickly, and inserted/updated in atomic operations.\n+- **Row Key** - An entity's row key is its unique identifier within a partition.\n+\n+Common uses of the Table service include:\n+\n+- Storing TBs of structured data capable of serving web scale applications\n+- Storing datasets that don't require complex joins, foreign keys, or stored procedures and can be de-normalized for fast access\n+- Quickly querying data using a clustered index\n+- Accessing data using the OData protocol\n+\n ## Examples\n-Use the client library for Tables to:\n-- manages tables\n-- edit and access table contents\n+\n+- [Authenticate a client](#authenticate-a-client)\n+  - [Authenticate with a connection string](#authenticate-with-a-connection-string)\n+  - [Authenticate with a Shared Key](#authenticate-with-a-shared-key)\n+  - [Authenticate with a Shared Access Signature (SAS)](#authenticate-with-a-shared-access-signature-sas)\n+- [Create, List, and Delete Azure tables](#create-list-and-delete-azure-tables)\n+  - [Construct a `TableServiceClient`](#construct-a-tableserviceclient)\n+  - [Create a table](#create-a-table)\n+  - [List tables](#list-tables)\n+  - [Delete a table](#delete-a-table)\n+- [Create, List, and Delete table entities](##create-list-and-delete-table-entities)\n+  - [Construct a `TableClient`](#construct-a-tableclient)\n+  - [Create an entity](#create-an-entity)\n+  - [List entities](#list-entities)\n+  - [Delete an entity](#delete-an-entity)\n+\n+### Authenticate a client\n+\n+#### Authenticate with a connection string\n+To use a connection string to authorize your client, call the builder's `connectionString` method with your connection string.\n+\n+```java", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE5NDA3OQ=="}, "originalCommit": {"oid": "681b140cd1fab637aa562b4d0878fe1d2b186f68"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzNzA1OA==", "bodyText": "For a single line code, use the same pattern but the start and end range will have the same line number. See storage example here. You might have to view the raw file to see the embedme tag.\nembedme path/to/ReadmeSamples.java#L10-L10", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14698#discussion_r483237058", "createdAt": "2020-09-03T20:29:38Z", "author": {"login": "srnagar"}, "path": "sdk/tables/azure-data-tables/README.md", "diffHunk": "@@ -25,17 +20,287 @@ best parts of Azure cloud.\n ```\n [//]: # ({x-version-update-end})\n \n+### Prerequisites\n+\n+- [Java Development Kit (JDK)][jdk] with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- An existing Azure storage account or Azure Cosmos DB Table API account\n+\n+#### Create a Storage Account\n+To create a Storage Account you can use the [Azure Portal][storage_account_create_portal] or [Azure CLI][storage_account_create_cli].\n+\n+```bash\n+az storage account create \\\n+    --resource-group <resource-group-name> \\\n+    --name <storage-account-name> \\\n+    --location <location>\n+```\n+\n+Your storage account URL, subsequently identified as `<your-table-account-url>`, would be formatted as follows\n+`http(s)://<storage-account-name>.table.core.windows.net`.\n+\n+#### Create a Cosmos DB Table API account\n+To create a Cosmos DB Table API account you can use the [Azure Portal][cosmosdb_create_portal] or [Azure CLI][cosmosdb_create_cli].\n+\n+```bash\n+az cosmosdb create \\\n+    --resource-group <resource-group-name> \\\n+    --name <cosmosdb-account-name> \\\n+    --capabilities EnableTable\n+```\n+\n+Your Table API account URL, subsequently identified as `<your-table-account-url>`, would be formatted as follows\n+`http(s)://<cosmosdb-account-name>.table.cosmosdb.azure.com`.\n+\n+### Authenticate the client\n+Every request made to the Table service must be authorized using a connection string, shared key credential, or shared access signature. The samples below demonstrate the usage of these methods.\n+\n+Note: Azure Tables doesn't support Azure Active Directory (AAD) authentication.\n+\n+#### Connection string\n+A connection string includes the authentication information required for your application to access data in an Azure table at runtime using Shared Key authorization. See [Authenticate with a connection string](#authenticate-with-a-connection-string) for an example of how to use a connection string with a `TableServiceClient`.\n+\n+You can obtain your connection string from the Azure Portal (click **Access keys** under **Settings** in the Portal Storage account blade, or **Connection String** under **Settings** in the Portal Cosmos DB account blade) or using the Azure CLI:\n+\n+```bash\n+# Storage account\n+az storage account show-connection-string \\\n+    --resource-group <resource-group-name> \\\n+    --name <storage-account-name>\n+\n+# Cosmos DB Table API account\n+az cosmosdb list-connection-strings \\\n+    --resource-group <resource-group-name> \\\n+    --name <cosmosdb-account-name>\n+```\n+\n+#### Shared Key credential\n+Shared Key authorization relies on your account access keys and other parameters to produce an encrypted signature string that is passed on the request in the Authorization header. See [Authenticate with a Shared Key credential](#authenticate-with-a-shared-key-credential) for an example of how to use Shared Key authorization with a `TableServiceClient`.\n+\n+To use Shared Key authorization you'll need your account name and URL, as well as an account access key. You can obtain your primary access key from the Azure Portal (click **Access keys** under **Settings** in the Portal Storage account blade, or **Connection String** under **Settings** in the Portal Cosmos DB account blade) or using the Azure CLI:\n+\n+```bash\n+# Storage account\n+az storage account keys list \\\n+    --resource-group <resource-group-name> \\\n+    --account-name <storage-account-name>\n+\n+# Cosmos DB Table API account\n+az cosmosdb list-keys \\\n+    --resource-group <resource-group-name> \\\n+    --name <cosmosdb-account-name>\n+```\n+\n+#### Shared Access Signature (SAS)\n+A shared access signature allows administrators to delegate granular access to an Azure table without sharing the access key directly. You can control what resources the client may access, what permissions it has on those resources, and how long the SAS is valid, among other parameters. It relies on your account access keys and other parameters to produce an encrypted signature string that is passed on the request in the query string. See [Authenticate with a Shared Access Signature (SAS) token](#authenticate-with-a-shared-access-signature-sas-token) for an example of how to use shared access signatures with a `TableServiceClient`.\n+\n+To use SAS token authorization you'll need your account name and URL, as well as the SAS. You can obtain your SAS from the Azure Portal (click **Shared access signature** under **Settings** in the Portal Storage account blade) or using the Azure CLI:\n+\n+```bash\n+# Account-level SAS\n+az storage account generate-sas \\\n+    --account-name <storage-or-cosmosdb-account-name> \\\n+    --services t \\\n+    --resource-types <resource-types> \\\n+    --permissions <permissions> \\\n+    --expiry <expiry-date>\n+\n+# Table-level SAS\n+az storage table generate-sas \\\n+    --name <table-name>\n+```\n+\n ## Key concepts\n \n+- **TableServiceClient** - A `TableServiceClient` is a client object that enables you to interact with the Table Service in order to create, list, and delete tables.\n+- **TableClient** - A `TableClient` is a client object that enables you to interact with a specific table in order to create, update, list, and delete entities within it.\n+- **Table** - A table is a collection of entities. Tables don't enforce a schema on entities, which means a single table can contain entities that have different sets of properties.\n+- **Entity** - An entity is a set of properties, similar to a database row. An entity in Azure Storage can be up to 1MB in size. An entity in Azure Cosmos DB can be up to 2MB in size. An entity has a partition key and a row key which together uniquely identify the entity within the table.\n+- **Properties** - A property is a name-value pair. Each entity can include up to 252 properties to store data. Each entity also has three system properties that specify a partition key, a row key, and a timestamp.\n+- **Partition Key** - An entity's partition key identifies the partition within the table to which the entity belongs. Entities with the same partition key can be queried more quickly, and inserted/updated in atomic operations.\n+- **Row Key** - An entity's row key is its unique identifier within a partition.\n+\n+Common uses of the Table service include:\n+\n+- Storing TBs of structured data capable of serving web scale applications\n+- Storing datasets that don't require complex joins, foreign keys, or stored procedures and can be de-normalized for fast access\n+- Quickly querying data using a clustered index\n+- Accessing data using the OData protocol\n+\n ## Examples\n-Use the client library for Tables to:\n-- manages tables\n-- edit and access table contents\n+\n+- [Authenticate a client](#authenticate-a-client)\n+  - [Authenticate with a connection string](#authenticate-with-a-connection-string)\n+  - [Authenticate with a Shared Key](#authenticate-with-a-shared-key)\n+  - [Authenticate with a Shared Access Signature (SAS)](#authenticate-with-a-shared-access-signature-sas)\n+- [Create, List, and Delete Azure tables](#create-list-and-delete-azure-tables)\n+  - [Construct a `TableServiceClient`](#construct-a-tableserviceclient)\n+  - [Create a table](#create-a-table)\n+  - [List tables](#list-tables)\n+  - [Delete a table](#delete-a-table)\n+- [Create, List, and Delete table entities](##create-list-and-delete-table-entities)\n+  - [Construct a `TableClient`](#construct-a-tableclient)\n+  - [Create an entity](#create-an-entity)\n+  - [List entities](#list-entities)\n+  - [Delete an entity](#delete-an-entity)\n+\n+### Authenticate a client\n+\n+#### Authenticate with a connection string\n+To use a connection string to authorize your client, call the builder's `connectionString` method with your connection string.\n+\n+```java", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE5NDA3OQ=="}, "originalCommit": {"oid": "681b140cd1fab637aa562b4d0878fe1d2b186f68"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI0ODE0Nw==", "bodyText": "Nevermind, I solved it with some private fields in the ReadmeSamples class.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14698#discussion_r483248147", "createdAt": "2020-09-03T20:53:29Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/README.md", "diffHunk": "@@ -25,17 +20,287 @@ best parts of Azure cloud.\n ```\n [//]: # ({x-version-update-end})\n \n+### Prerequisites\n+\n+- [Java Development Kit (JDK)][jdk] with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- An existing Azure storage account or Azure Cosmos DB Table API account\n+\n+#### Create a Storage Account\n+To create a Storage Account you can use the [Azure Portal][storage_account_create_portal] or [Azure CLI][storage_account_create_cli].\n+\n+```bash\n+az storage account create \\\n+    --resource-group <resource-group-name> \\\n+    --name <storage-account-name> \\\n+    --location <location>\n+```\n+\n+Your storage account URL, subsequently identified as `<your-table-account-url>`, would be formatted as follows\n+`http(s)://<storage-account-name>.table.core.windows.net`.\n+\n+#### Create a Cosmos DB Table API account\n+To create a Cosmos DB Table API account you can use the [Azure Portal][cosmosdb_create_portal] or [Azure CLI][cosmosdb_create_cli].\n+\n+```bash\n+az cosmosdb create \\\n+    --resource-group <resource-group-name> \\\n+    --name <cosmosdb-account-name> \\\n+    --capabilities EnableTable\n+```\n+\n+Your Table API account URL, subsequently identified as `<your-table-account-url>`, would be formatted as follows\n+`http(s)://<cosmosdb-account-name>.table.cosmosdb.azure.com`.\n+\n+### Authenticate the client\n+Every request made to the Table service must be authorized using a connection string, shared key credential, or shared access signature. The samples below demonstrate the usage of these methods.\n+\n+Note: Azure Tables doesn't support Azure Active Directory (AAD) authentication.\n+\n+#### Connection string\n+A connection string includes the authentication information required for your application to access data in an Azure table at runtime using Shared Key authorization. See [Authenticate with a connection string](#authenticate-with-a-connection-string) for an example of how to use a connection string with a `TableServiceClient`.\n+\n+You can obtain your connection string from the Azure Portal (click **Access keys** under **Settings** in the Portal Storage account blade, or **Connection String** under **Settings** in the Portal Cosmos DB account blade) or using the Azure CLI:\n+\n+```bash\n+# Storage account\n+az storage account show-connection-string \\\n+    --resource-group <resource-group-name> \\\n+    --name <storage-account-name>\n+\n+# Cosmos DB Table API account\n+az cosmosdb list-connection-strings \\\n+    --resource-group <resource-group-name> \\\n+    --name <cosmosdb-account-name>\n+```\n+\n+#### Shared Key credential\n+Shared Key authorization relies on your account access keys and other parameters to produce an encrypted signature string that is passed on the request in the Authorization header. See [Authenticate with a Shared Key credential](#authenticate-with-a-shared-key-credential) for an example of how to use Shared Key authorization with a `TableServiceClient`.\n+\n+To use Shared Key authorization you'll need your account name and URL, as well as an account access key. You can obtain your primary access key from the Azure Portal (click **Access keys** under **Settings** in the Portal Storage account blade, or **Connection String** under **Settings** in the Portal Cosmos DB account blade) or using the Azure CLI:\n+\n+```bash\n+# Storage account\n+az storage account keys list \\\n+    --resource-group <resource-group-name> \\\n+    --account-name <storage-account-name>\n+\n+# Cosmos DB Table API account\n+az cosmosdb list-keys \\\n+    --resource-group <resource-group-name> \\\n+    --name <cosmosdb-account-name>\n+```\n+\n+#### Shared Access Signature (SAS)\n+A shared access signature allows administrators to delegate granular access to an Azure table without sharing the access key directly. You can control what resources the client may access, what permissions it has on those resources, and how long the SAS is valid, among other parameters. It relies on your account access keys and other parameters to produce an encrypted signature string that is passed on the request in the query string. See [Authenticate with a Shared Access Signature (SAS) token](#authenticate-with-a-shared-access-signature-sas-token) for an example of how to use shared access signatures with a `TableServiceClient`.\n+\n+To use SAS token authorization you'll need your account name and URL, as well as the SAS. You can obtain your SAS from the Azure Portal (click **Shared access signature** under **Settings** in the Portal Storage account blade) or using the Azure CLI:\n+\n+```bash\n+# Account-level SAS\n+az storage account generate-sas \\\n+    --account-name <storage-or-cosmosdb-account-name> \\\n+    --services t \\\n+    --resource-types <resource-types> \\\n+    --permissions <permissions> \\\n+    --expiry <expiry-date>\n+\n+# Table-level SAS\n+az storage table generate-sas \\\n+    --name <table-name>\n+```\n+\n ## Key concepts\n \n+- **TableServiceClient** - A `TableServiceClient` is a client object that enables you to interact with the Table Service in order to create, list, and delete tables.\n+- **TableClient** - A `TableClient` is a client object that enables you to interact with a specific table in order to create, update, list, and delete entities within it.\n+- **Table** - A table is a collection of entities. Tables don't enforce a schema on entities, which means a single table can contain entities that have different sets of properties.\n+- **Entity** - An entity is a set of properties, similar to a database row. An entity in Azure Storage can be up to 1MB in size. An entity in Azure Cosmos DB can be up to 2MB in size. An entity has a partition key and a row key which together uniquely identify the entity within the table.\n+- **Properties** - A property is a name-value pair. Each entity can include up to 252 properties to store data. Each entity also has three system properties that specify a partition key, a row key, and a timestamp.\n+- **Partition Key** - An entity's partition key identifies the partition within the table to which the entity belongs. Entities with the same partition key can be queried more quickly, and inserted/updated in atomic operations.\n+- **Row Key** - An entity's row key is its unique identifier within a partition.\n+\n+Common uses of the Table service include:\n+\n+- Storing TBs of structured data capable of serving web scale applications\n+- Storing datasets that don't require complex joins, foreign keys, or stored procedures and can be de-normalized for fast access\n+- Quickly querying data using a clustered index\n+- Accessing data using the OData protocol\n+\n ## Examples\n-Use the client library for Tables to:\n-- manages tables\n-- edit and access table contents\n+\n+- [Authenticate a client](#authenticate-a-client)\n+  - [Authenticate with a connection string](#authenticate-with-a-connection-string)\n+  - [Authenticate with a Shared Key](#authenticate-with-a-shared-key)\n+  - [Authenticate with a Shared Access Signature (SAS)](#authenticate-with-a-shared-access-signature-sas)\n+- [Create, List, and Delete Azure tables](#create-list-and-delete-azure-tables)\n+  - [Construct a `TableServiceClient`](#construct-a-tableserviceclient)\n+  - [Create a table](#create-a-table)\n+  - [List tables](#list-tables)\n+  - [Delete a table](#delete-a-table)\n+- [Create, List, and Delete table entities](##create-list-and-delete-table-entities)\n+  - [Construct a `TableClient`](#construct-a-tableclient)\n+  - [Create an entity](#create-an-entity)\n+  - [List entities](#list-entities)\n+  - [Delete an entity](#delete-an-entity)\n+\n+### Authenticate a client\n+\n+#### Authenticate with a connection string\n+To use a connection string to authorize your client, call the builder's `connectionString` method with your connection string.\n+\n+```java", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE5NDA3OQ=="}, "originalCommit": {"oid": "681b140cd1fab637aa562b4d0878fe1d2b186f68"}, "originalPosition": 153}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1377, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}