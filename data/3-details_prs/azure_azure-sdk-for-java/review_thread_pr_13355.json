{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0MDIwNzY5", "number": 13355, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMTo1Mzo1OVrOEQbuCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMjozNjowOFrOEQ3cMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjY2ODI2OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/StronglyTypedRecognizedForm.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMTo1Mzo1OVrOG0lPVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMzo0NDozMlrOG1Rmvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc4OTI3MQ==", "bodyText": "@srnagar @JonathanGiles Confirming if this ^^ is how we would be using the FormField<T> for strongly typed examples?\nSince we don't have any T value, still would need to extract the corresponding asString, or asX methods.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13355#discussion_r457789271", "createdAt": "2020-07-21T01:53:59Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/StronglyTypedRecognizedForm.java", "diffHunk": "@@ -41,36 +41,40 @@ public static void main(final String[] args) {\n             System.out.printf(\"----------- Recognized receipt info for page %d -----------%n\", i);\n             // Use Receipt model transform the recognized form to strongly typed US receipt fields\n             Receipt usReceipt = new Receipt(recognizedForm);\n-            System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\", usReceipt.getMerchantName().getValue(),\n+            System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\", usReceipt.getMerchantName().getFieldValue(),\n                 usReceipt.getMerchantName().getConfidence());\n             System.out.printf(\"Merchant Address: %s, confidence: %.2f%n\",\n-                usReceipt.getMerchantAddress().getValue(),\n+                usReceipt.getMerchantAddress().getFieldValue(),\n                 usReceipt.getMerchantAddress().getConfidence());\n+            // It will have to be this way?\n+            // System.out.printf(\"Merchant Address: %s, confidence: %.2f%n\",\n+            //     usReceipt.getMerchantAddress().getFieldValue().asString(),\n+            //     usReceipt.getMerchantAddress().getConfidence());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd6839c99b54003fc6f9dfd3d0272623d110806b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUxNjE1OQ==", "bodyText": "I don't think the generic type <T> is useful if the user still has to do getFieldValue().asString(). I think we are trying to make FormField work both ways and is causing this issue.\nHave you considered the approach below? It's not ideal but a new type that's defined once can reduce the burden on the user. They'll not have to repeatedly call getValue().asType() method which is going to be accessed a lot more frequently.\n// Receipt type\npublic final class Receipt {\n    private ReceiptType receiptType;\n    private TypedFormField<String> merchantAddress; // return a different form field type\n    \n    public Receipt(RecognizedForm recognizedForm) {\n\n       for (Map.Entry<String, FormField> entry : recognizedForm.getFields().entrySet()) {\n            String key = entry.getKey();\n            FormField fieldValue = entry.getValue();\n            switch (key) {\n                case \"MerchantAddress\":\n                    merchantAddress = new TypedFormField(fieldValue, String.class);\n                    break;\n                \n                default:\n                    break;\n            }\n        }\n        \n    }\n\n    // getter and setters here\n    public TypedFormField<String> getMerchantAddress() {\n         return merchantAddress;\n    }\n}\n\n-------------------------------------------\n\n// Strongly typed form field\npublic class TypedFormField<T> { // with a better class name\n\n    private final FormField formField;\n    private final Class<T> type;\n\n    public TypedFormField(FormField formField, Class<T> type) {\n        this.formField = formField;\n        this.type = type;\n    }\n\n    public T getValue() {\n        if (formField.getValueType() == FieldValueType.STRING && type.getClass().equals(String.class)) {\n            return formField.getValue().asDate();\n        }\n        throw new IllegalStateException(\"Type mismatch error\");\n    }\n   \n    public float getConfidence() {\n        return this.formField.getConfidence();\n    }\n \n}\n-------------------------------------------\n// User code\nReceipt usReceipt = new Receipt(recognizedForm);\nString address = usReceipt.getMerchantAddress().getValue()\nfloat confidence = usReceipt.getMerchantAddress().getConfidence();", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13355#discussion_r458516159", "createdAt": "2020-07-22T03:44:32Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/StronglyTypedRecognizedForm.java", "diffHunk": "@@ -41,36 +41,40 @@ public static void main(final String[] args) {\n             System.out.printf(\"----------- Recognized receipt info for page %d -----------%n\", i);\n             // Use Receipt model transform the recognized form to strongly typed US receipt fields\n             Receipt usReceipt = new Receipt(recognizedForm);\n-            System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\", usReceipt.getMerchantName().getValue(),\n+            System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\", usReceipt.getMerchantName().getFieldValue(),\n                 usReceipt.getMerchantName().getConfidence());\n             System.out.printf(\"Merchant Address: %s, confidence: %.2f%n\",\n-                usReceipt.getMerchantAddress().getValue(),\n+                usReceipt.getMerchantAddress().getFieldValue(),\n                 usReceipt.getMerchantAddress().getConfidence());\n+            // It will have to be this way?\n+            // System.out.printf(\"Merchant Address: %s, confidence: %.2f%n\",\n+            //     usReceipt.getMerchantAddress().getFieldValue().asString(),\n+            //     usReceipt.getMerchantAddress().getConfidence());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc4OTI3MQ=="}, "originalCommit": {"oid": "dd6839c99b54003fc6f9dfd3d0272623d110806b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDc3NjMxOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjo1MToyMVrOG1Mmcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjo1MToyMVrOG1Mmcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzNDE2Mw==", "bodyText": "nit: dot might need to be at beginning of line for style consistency.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13355#discussion_r458434163", "createdAt": "2020-07-21T22:51:21Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java", "diffHunk": "@@ -244,39 +244,57 @@ private Transforms() {\n         FormField<?> value;\n         switch (fieldValue.getType()) {\n             case PHONE_NUMBER:\n-                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, fieldValue.getValuePhoneNumber(), valueText, FieldValueType.PHONE_NUMBER);\n+                value = new FormField<>(key, labelText, valueText, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.PHONE_NUMBER).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709203a82e4c9227d7e813a8829dcc9a7b97d416"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDc4MTQzOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjo1Mzo0NVrOG1Mphw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDowMjoxOVrOG1N_Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzNDk1MQ==", "bodyText": "nit: com.azure.ai.formrecognizer.models.FieldValue can be in import list at the beginning of file", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13355#discussion_r458434951", "createdAt": "2020-07-21T22:53:45Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java", "diffHunk": "@@ -244,39 +244,57 @@ private Transforms() {\n         FormField<?> value;\n         switch (fieldValue.getType()) {\n             case PHONE_NUMBER:\n-                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, fieldValue.getValuePhoneNumber(), valueText, FieldValueType.PHONE_NUMBER);\n+                value = new FormField<>(key, labelText, valueText, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.PHONE_NUMBER).\n+                setFormFieldPhoneNumber(fieldValue.getValuePhoneNumber()), setDefaultConfidenceValue(fieldValue.getConfidence())\n+                );\n                 break;\n             case STRING:\n-                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, fieldValue.getValueString(), valueText, FieldValueType.STRING);\n+                value = new FormField<>(key, labelText, valueText, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.STRING)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709203a82e4c9227d7e813a8829dcc9a7b97d416"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NjkwNg==", "bodyText": "Can't..have FieldValue in implementation.models too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13355#discussion_r458456906", "createdAt": "2020-07-22T00:02:19Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java", "diffHunk": "@@ -244,39 +244,57 @@ private Transforms() {\n         FormField<?> value;\n         switch (fieldValue.getType()) {\n             case PHONE_NUMBER:\n-                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, fieldValue.getValuePhoneNumber(), valueText, FieldValueType.PHONE_NUMBER);\n+                value = new FormField<>(key, labelText, valueText, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.PHONE_NUMBER).\n+                setFormFieldPhoneNumber(fieldValue.getValuePhoneNumber()), setDefaultConfidenceValue(fieldValue.getConfidence())\n+                );\n                 break;\n             case STRING:\n-                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, fieldValue.getValueString(), valueText, FieldValueType.STRING);\n+                value = new FormField<>(key, labelText, valueText, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.STRING)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzNDk1MQ=="}, "originalCommit": {"oid": "709203a82e4c9227d7e813a8829dcc9a7b97d416"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDc5NjUwOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FormField.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzowMDoyOVrOG1Mykg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMjozODo0NFrOG1QlvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzNzI2Ng==", "bodyText": "no longer takes a FieldValueType?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13355#discussion_r458437266", "createdAt": "2020-07-21T23:00:29Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FormField.java", "diffHunk": "@@ -14,28 +14,25 @@\n     private final float confidence;\n     private final FieldData labelData;\n     private final String name;\n+    private final FieldValue value;\n     private final FieldData valueData;\n-    private final T value;\n-    private final FieldValueType valueType;\n \n     /**\n      * Constructs a FormField object.\n      *\n-     * @param confidence The confidence of the recognized field.\n-     * @param labelData The text, bounding box, and field elements for the field label.\n      * @param name The name the field or label.\n-     * @param value The value of the recognized field.\n+     * @param labelData The text, bounding box, and field elements for the field label.\n      * @param valueData The text, bounding box, and field elements for the field value.\n-     * @param valueType The type of the value of the recognized field.\n+     * @param value The value of the recognized field.\n+     * @param confidence The confidence of the recognized field.\n      */\n-    public FormField(final float confidence, final FieldData labelData, final String name, final T value,\n-        final FieldData valueData, FieldValueType valueType) {\n+    public FormField(final String name, final FieldData labelData, final FieldData valueData,\n+        final FieldValue value, final float confidence) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709203a82e4c9227d7e813a8829dcc9a7b97d416"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NzE0OA==", "bodyText": "It is in the FieldValue model.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13355#discussion_r458457148", "createdAt": "2020-07-22T00:03:05Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FormField.java", "diffHunk": "@@ -14,28 +14,25 @@\n     private final float confidence;\n     private final FieldData labelData;\n     private final String name;\n+    private final FieldValue value;\n     private final FieldData valueData;\n-    private final T value;\n-    private final FieldValueType valueType;\n \n     /**\n      * Constructs a FormField object.\n      *\n-     * @param confidence The confidence of the recognized field.\n-     * @param labelData The text, bounding box, and field elements for the field label.\n      * @param name The name the field or label.\n-     * @param value The value of the recognized field.\n+     * @param labelData The text, bounding box, and field elements for the field label.\n      * @param valueData The text, bounding box, and field elements for the field value.\n-     * @param valueType The type of the value of the recognized field.\n+     * @param value The value of the recognized field.\n+     * @param confidence The confidence of the recognized field.\n      */\n-    public FormField(final float confidence, final FieldData labelData, final String name, final T value,\n-        final FieldData valueData, FieldValueType valueType) {\n+    public FormField(final String name, final FieldData labelData, final FieldData valueData,\n+        final FieldValue value, final float confidence) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzNzI2Ng=="}, "originalCommit": {"oid": "709203a82e4c9227d7e813a8829dcc9a7b97d416"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5OTUxNw==", "bodyText": "@mssfang FieldValueType is now in FieldValue", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13355#discussion_r458499517", "createdAt": "2020-07-22T02:38:44Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FormField.java", "diffHunk": "@@ -14,28 +14,25 @@\n     private final float confidence;\n     private final FieldData labelData;\n     private final String name;\n+    private final FieldValue value;\n     private final FieldData valueData;\n-    private final T value;\n-    private final FieldValueType valueType;\n \n     /**\n      * Constructs a FormField object.\n      *\n-     * @param confidence The confidence of the recognized field.\n-     * @param labelData The text, bounding box, and field elements for the field label.\n      * @param name The name the field or label.\n-     * @param value The value of the recognized field.\n+     * @param labelData The text, bounding box, and field elements for the field label.\n      * @param valueData The text, bounding box, and field elements for the field value.\n-     * @param valueType The type of the value of the recognized field.\n+     * @param value The value of the recognized field.\n+     * @param confidence The confidence of the recognized field.\n      */\n-    public FormField(final float confidence, final FieldData labelData, final String name, final T value,\n-        final FieldData valueData, FieldValueType valueType) {\n+    public FormField(final String name, final FieldData labelData, final FieldData valueData,\n+        final FieldValue value, final float confidence) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzNzI2Ng=="}, "originalCommit": {"oid": "709203a82e4c9227d7e813a8829dcc9a7b97d416"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDgwMzU5OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledDataAsync.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzowMzo0OVrOG1M25Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzowMzo0OVrOG1M25Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzODM3Mw==", "bodyText": "feel strange but it is what it is.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13355#discussion_r458438373", "createdAt": "2020-07-21T23:03:49Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledDataAsync.java", "diffHunk": "@@ -168,7 +169,8 @@ public static void main(String[] args) throws IOException {\n                     .filter(formFieldEntry -> \"Vendor Name:\".equals(formFieldEntry.getValue().getLabelData().getText()))\n                     .findAny()\n                     .ifPresent(formFieldEntry ->\n-                        System.out.printf(\"The Vendor name is: %s%n\", formFieldEntry.getValue()));\n+                        System.out.printf(\"The Vendor name is: %s%n\", formFieldEntry.getValue()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709203a82e4c9227d7e813a8829dcc9a7b97d416"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDgxNzE1OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/Receipt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzowOTo0OFrOG1M-3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzowOTo0OFrOG1M-3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0MDQxNA==", "bodyText": "nit: extra line", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13355#discussion_r458440414", "createdAt": "2020-07-21T23:09:48Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/Receipt.java", "diffHunk": "@@ -357,4 +356,6 @@ public ReceiptItem(final FormField<String> name, final FormField<Float> quantity\n             return totalPrice;\n         }\n     }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709203a82e4c9227d7e813a8829dcc9a7b97d416"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDgzMjAzOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FieldValueExtensionMethodTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoxNjo0OVrOG1NHlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoxNjo0OVrOG1NHlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0MjY0NA==", "bodyText": "assertTrue(inputMap.equals(actualList));\nhttps://www.baeldung.com/java-compare-hashmaps", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13355#discussion_r458442644", "createdAt": "2020-07-21T23:16:49Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FieldValueExtensionMethodTest.java", "diffHunk": "@@ -0,0 +1,301 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FieldValue;\n+import com.azure.ai.formrecognizer.models.FieldValueType;\n+import com.azure.ai.formrecognizer.models.FormField;\n+import org.junit.jupiter.api.Test;\n+\n+import java.time.LocalDate;\n+import java.time.LocalTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class FieldValueExtensionMethodTest {\n+\n+    /**\n+     * Test for {@link FieldValue#asDate()} to Date.\n+     */\n+    @Test\n+    public void toDateFromDate() {\n+        LocalDate inputDate = LocalDate.of(2006, 6, 6);\n+        FormField<?> formField = new FormField<>(null, null, null, new FieldValue(FieldValueType.DATE)\n+            .setFormFieldDate(inputDate), 0);\n+        LocalDate actualDate = formField.getValue().asDate();\n+        assertEquals(inputDate, actualDate);\n+    }\n+\n+    /**\n+     * Test for {@link FieldValue#asDate()} to Date from String.\n+     */\n+    @Test\n+    public void toDateFromString() {\n+        String inputDateString = \"2006/06/06\";\n+        FormField<?> formField = new FormField<>(null, null, null,\n+            new FieldValue(FieldValueType.STRING).setFormFieldString(inputDateString), 0);\n+        final UnsupportedOperationException unsupportedOperationException =\n+            assertThrows(UnsupportedOperationException.class, () ->\n+                formField.getValue().asDate());\n+        assertEquals(unsupportedOperationException.getMessage(), \"Cannot get field as DATE from field value \"\n+            + \"of type STRING\");\n+    }\n+\n+    /**\n+     * Test for {@link FieldValue#asDate()} to Date from null field value.\n+     */\n+    @Test\n+    public void toDateFromNull() {\n+        FormField<?> formField = new FormField<>(null, null, null, new FieldValue(FieldValueType.DATE)\n+            .setFormFieldDate(null), 0);\n+        assertNull(formField.getValue().asDate());\n+    }\n+\n+\n+    /**\n+     * Test for {@link FieldValue#asTime()} to TIME.\n+     */\n+    @Test\n+    public void toTimeFromTime() {\n+        LocalTime inputTime = LocalTime.parse(\"13:59:00\", DateTimeFormatter.ofPattern(\"HH:mm:ss\"));\n+        FormField<?> formField = new FormField<>(null, null, null,\n+            new FieldValue(FieldValueType.TIME).setFormFieldTime(inputTime), 0);\n+        LocalTime actualTime = formField.getValue().asTime();\n+        assertEquals(inputTime, actualTime);\n+    }\n+\n+    /**\n+     * Test for {@link FieldValue#asTime()} to TIME from String.\n+     */\n+    @Test\n+    public void toTimeFromString() {\n+        String inputTimeString = \"13:59:00\";\n+        FormField<?> formField = new FormField<>(null, null, null,\n+            new FieldValue(FieldValueType.STRING).setFormFieldString(inputTimeString), 0);\n+        final UnsupportedOperationException unsupportedOperationException =\n+            assertThrows(UnsupportedOperationException.class, () ->\n+                formField.getValue().asTime());\n+        assertEquals(unsupportedOperationException.getMessage(), \"Cannot get field as TIME from field\"\n+            + \" value of type STRING\");\n+    }\n+\n+    /**\n+     * Test for {@link FieldValue#asTime()} to TIME from null field value.\n+     */\n+    @Test\n+    public void toTimeFromNull() {\n+        assertNull(new FormField<>(null, null, null,\n+            new FieldValue(FieldValueType.TIME), 0).getValue().asTime());\n+    }\n+\n+\n+    /**\n+     * Test for {@link FieldValue#asList()} to list.\n+     */\n+    @Test\n+    public void toListFromList() {\n+        List<FormField<?>> inputList = new ArrayList<>(Arrays.asList(new FormField<>(null, null, null, null, 0)));\n+        FormField<?> formField = new FormField<>(null, null, null,\n+            new FieldValue(FieldValueType.LIST).setFormFieldList(inputList), 0);\n+        List<FormField<?>> actualList = formField.getValue().asList();\n+        assertEquals(inputList, actualList);\n+    }\n+\n+    /**\n+     * Test for {@link FieldValue#asList()} to list from String.\n+     */\n+    @Test\n+    public void toListFromString() {\n+        String test = \"testString\";\n+        final UnsupportedOperationException unsupportedOperationException =\n+            assertThrows(UnsupportedOperationException.class, () ->\n+                new FormField<>(null, null, null,\n+                    new FieldValue(FieldValueType.STRING).setFormFieldString(test), 0).getValue().asList());\n+        assertEquals(unsupportedOperationException.getMessage(), \"Cannot get field as a LIST from field value \"\n+            + \"of type STRING\");\n+    }\n+\n+    /**\n+     * Test for {@link FieldValue#asList()}  to list from null field value.\n+     */\n+    @Test\n+    public void toListFromNull() {\n+        assertNull(new FormField<>(null, null, null, new FieldValue(FieldValueType.LIST), 0).getValue().asList());\n+    }\n+\n+    /**\n+     * Test for {@link FieldValue#asPhoneNumber()} to phone number.\n+     */\n+    @Test\n+    public void toPhoneNumberFromPhoneNumber() {\n+        String phoneNumber = \"19876543210\";\n+        String actualPhoneNumber = new FormField<>(null, null, null,\n+            new FieldValue(FieldValueType.PHONE_NUMBER).setFormFieldPhoneNumber(phoneNumber), 0)\n+            .getValue().asPhoneNumber();\n+        assertEquals(phoneNumber, actualPhoneNumber);\n+    }\n+\n+    /**\n+     * Test for {@link FieldValue#asPhoneNumber()} to phone number from String.\n+     */\n+    @Test\n+    public void toPhoneNumberFromString() {\n+        String phoneNumber = \"19876543210\";\n+        final UnsupportedOperationException unsupportedOperationException =\n+            assertThrows(UnsupportedOperationException.class, () ->\n+                new FormField<>(null, null, null,\n+                    new FieldValue(FieldValueType.STRING).setFormFieldString(phoneNumber), 0)\n+                    .getValue().asPhoneNumber());\n+        assertEquals(unsupportedOperationException.getMessage(), \"Cannot get field as aPHONE_NUMBER \"\n+            + \"from field value of type STRING\");\n+    }\n+\n+    /**\n+     * Test for {@link FieldValue#asPhoneNumber()} to phone number from null field value.\n+     */\n+    @Test\n+    public void toPhoneNumberFromNull() {\n+        assertNull(new FormField<>(null, null, null,\n+            new FieldValue(FieldValueType.PHONE_NUMBER), 0).getValue().asPhoneNumber());\n+    }\n+\n+    /**\n+     * Test for {@link FieldValue#asMap()} to map.\n+     */\n+    @Test\n+    public void toMapFromMap() {\n+        Map<String, FormField<?>> inputMap = new HashMap<String, FormField<?>>() {\n+            {\n+                put(\"key\", new FormField<>(null, null, null, null, 0));\n+            }\n+        };\n+        Map<String, FormField<?>> actualList = new FormField<>(null, null, null,\n+            new FieldValue(FieldValueType.MAP).setFormFieldMap(inputMap), 0).getValue().asMap();\n+        assertEquals(inputMap, actualList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709203a82e4c9227d7e813a8829dcc9a7b97d416"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTIxMDA4OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValue.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMjozNjowOFrOG1QjNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODoyNjozNFrOG1u51w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5ODg3MQ==", "bodyText": "type should be non-null. Add a  null check here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13355#discussion_r458498871", "createdAt": "2020-07-22T02:36:08Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValue.java", "diffHunk": "@@ -0,0 +1,258 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.time.LocalDate;\n+import java.time.LocalTime;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.azure.ai.formrecognizer.models.FieldValueType.DATE;\n+import static com.azure.ai.formrecognizer.models.FieldValueType.DOUBLE;\n+import static com.azure.ai.formrecognizer.models.FieldValueType.LIST;\n+import static com.azure.ai.formrecognizer.models.FieldValueType.LONG;\n+import static com.azure.ai.formrecognizer.models.FieldValueType.MAP;\n+import static com.azure.ai.formrecognizer.models.FieldValueType.PHONE_NUMBER;\n+import static com.azure.ai.formrecognizer.models.FieldValueType.STRING;\n+import static com.azure.ai.formrecognizer.models.FieldValueType.TIME;\n+\n+/**\n+ * The FieldValue model.\n+ */\n+@Fluent\n+public final class FieldValue {\n+    private final ClientLogger logger = new ClientLogger(FieldValue.class);\n+    private final FieldValueType type;\n+    private Map<String, FormField<?>> formFieldMap;\n+    private List<FormField<?>> formFieldList;\n+    private Double formFieldDouble;\n+    private Long formFieldLong;\n+    private LocalDate formFieldDate;\n+    private LocalTime formFieldTime;\n+    private String formFieldString;\n+    private String formFieldPhoneNumber;\n+\n+    /**\n+     * Constructs a FieldValue object\n+     *\n+     * @param type The type of the field.\n+     */\n+    public FieldValue(final FieldValueType type) {\n+        this.type = type;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709203a82e4c9227d7e813a8829dcc9a7b97d416"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk5NjE4Mw==", "bodyText": "type is required in swagger. Should we still check here then?\nhttps://github.com/Azure/azure-rest-api-specs/blob/master/specification/cognitiveservices/data-plane/FormRecognizer/preview/v2.0/FormRecognizer.json#L1553", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13355#discussion_r458996183", "createdAt": "2020-07-22T18:26:34Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValue.java", "diffHunk": "@@ -0,0 +1,258 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.time.LocalDate;\n+import java.time.LocalTime;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.azure.ai.formrecognizer.models.FieldValueType.DATE;\n+import static com.azure.ai.formrecognizer.models.FieldValueType.DOUBLE;\n+import static com.azure.ai.formrecognizer.models.FieldValueType.LIST;\n+import static com.azure.ai.formrecognizer.models.FieldValueType.LONG;\n+import static com.azure.ai.formrecognizer.models.FieldValueType.MAP;\n+import static com.azure.ai.formrecognizer.models.FieldValueType.PHONE_NUMBER;\n+import static com.azure.ai.formrecognizer.models.FieldValueType.STRING;\n+import static com.azure.ai.formrecognizer.models.FieldValueType.TIME;\n+\n+/**\n+ * The FieldValue model.\n+ */\n+@Fluent\n+public final class FieldValue {\n+    private final ClientLogger logger = new ClientLogger(FieldValue.class);\n+    private final FieldValueType type;\n+    private Map<String, FormField<?>> formFieldMap;\n+    private List<FormField<?>> formFieldList;\n+    private Double formFieldDouble;\n+    private Long formFieldLong;\n+    private LocalDate formFieldDate;\n+    private LocalTime formFieldTime;\n+    private String formFieldString;\n+    private String formFieldPhoneNumber;\n+\n+    /**\n+     * Constructs a FieldValue object\n+     *\n+     * @param type The type of the field.\n+     */\n+    public FieldValue(final FieldValueType type) {\n+        this.type = type;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5ODg3MQ=="}, "originalCommit": {"oid": "709203a82e4c9227d7e813a8829dcc9a7b97d416"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4936, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}