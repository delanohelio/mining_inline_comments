{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MTg5MDkw", "number": 16524, "title": "[Service Bus] Prepare tracing methods for message processor and scheduleMessage", "bodyText": "EventHubs has distributed tracing for sending out events and processing events. ServiceBus already has tracing for sending. This PR is to prepare the tracing utility functions for the message processor (to be added, feature requirement #16087).\nIt also separates method traceMessageSpan from ServiceBusMessageBatch so scheduleMessage will also be able to use it in the future.\nThe full feature of distributed tracing for ServiceBus for all languages is still under discussion with the service team.\ncloses #15622", "createdAt": "2020-10-19T18:19:42Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524", "merged": true, "mergeCommit": {"oid": "44c010394527ef802ac3296c1aa2661a414ab4e8"}, "closed": true, "closedAt": "2020-10-28T23:13:49Z", "author": {"login": "YijunXieMS"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSk8plAH2gAyNTA2MTg5MDkwOjBjZThkMjNhNzlhODU1NTUzYzc5Yjg4ZWQ1ZmYyMGQwYTllYmJmMWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWzlLQAH2gAyNTA2MTg5MDkwOmRhNzFiZWEzNDkyYTg4Mzg2MWExNmY4MDE3MGZjZGE2MWI1YzQ2MGE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0ce8d23a79a855553c79b88ed5ff20d0a9ebbf1a", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0ce8d23a79a855553c79b88ed5ff20d0a9ebbf1a", "committedDate": "2020-10-14T22:30:42Z", "message": "Remove usage of environment variable AZURE_SERVICE_BUS_CONNECTION_STRING"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2077f63f2b23aecedd31fbc2137721bab7549e6", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e2077f63f2b23aecedd31fbc2137721bab7549e6", "committedDate": "2020-10-19T17:12:28Z", "message": "Prepare tracing for MessageProcessor, schedule and other APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc988128405870a301960f02d2ee3d5aee11e7c1", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cc988128405870a301960f02d2ee3d5aee11e7c1", "committedDate": "2020-10-19T17:28:53Z", "message": "Revert \"Remove usage of environment variable AZURE_SERVICE_BUS_CONNECTION_STRING\"\n\nThis reverts commit 0ce8d23a"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4db48fe4e05e102832fb6a7bb7d846ac1ad48c92", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4db48fe4e05e102832fb6a7bb7d846ac1ad48c92", "committedDate": "2020-10-19T17:32:31Z", "message": "Merge branch 'master' into sb_tracing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0Mjg1ODk2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#pullrequestreview-514285896", "createdAt": "2020-10-22T00:46:14Z", "commit": {"oid": "4db48fe4e05e102832fb6a7bb7d846ac1ad48c92"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDo0NjoxNFrOHmMpvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDo1MTozMVrOHmMvmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxNTIzMA==", "bodyText": "Should this also include the queue name, topic name etc?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#discussion_r509815230", "createdAt": "2020-10-22T00:46:14Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -253,4 +275,75 @@ private static TransactionalState getTransactionState(ByteBuffer transactionId,\n         transactionalState.setOutcome(outcome);\n         return transactionalState;\n     }\n+\n+    public static ServiceBusMessage traceMessageSpan(ServiceBusMessage serviceBusMessage,\n+        Context messageContext, String hostname, String entityPath, TracerProvider tracerProvider) {\n+        Optional<Object> eventContextData = messageContext.getData(SPAN_CONTEXT_KEY);\n+        if (eventContextData.isPresent()) {\n+            // if message has context (in case of retries), don't start a message span or add a new context\n+            return serviceBusMessage;\n+        } else {\n+            // Starting the span makes the sampling decision (nothing is logged at this time)\n+            Context newMessageContext = messageContext\n+                .addData(AZ_TRACING_NAMESPACE_KEY, AZ_TRACING_NAMESPACE_VALUE)\n+                .addData(ENTITY_PATH_KEY, entityPath)\n+                .addData(HOST_NAME_KEY, hostname);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db48fe4e05e102832fb6a7bb7d846ac1ad48c92"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxNTc2MA==", "bodyText": "Where is this method called from?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#discussion_r509815760", "createdAt": "2020-10-22T00:48:16Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -253,4 +275,75 @@ private static TransactionalState getTransactionState(ByteBuffer transactionId,\n         transactionalState.setOutcome(outcome);\n         return transactionalState;\n     }\n+\n+    public static ServiceBusMessage traceMessageSpan(ServiceBusMessage serviceBusMessage,\n+        Context messageContext, String hostname, String entityPath, TracerProvider tracerProvider) {\n+        Optional<Object> eventContextData = messageContext.getData(SPAN_CONTEXT_KEY);\n+        if (eventContextData.isPresent()) {\n+            // if message has context (in case of retries), don't start a message span or add a new context\n+            return serviceBusMessage;\n+        } else {\n+            // Starting the span makes the sampling decision (nothing is logged at this time)\n+            Context newMessageContext = messageContext\n+                .addData(AZ_TRACING_NAMESPACE_KEY, AZ_TRACING_NAMESPACE_VALUE)\n+                .addData(ENTITY_PATH_KEY, entityPath)\n+                .addData(HOST_NAME_KEY, hostname);\n+            Context eventSpanContext = tracerProvider.startSpan(AZ_TRACING_SERVICE_NAME, newMessageContext,\n+                ProcessKind.MESSAGE);\n+            Optional<Object> eventDiagnosticIdOptional = eventSpanContext.getData(DIAGNOSTIC_ID_KEY);\n+            if (eventDiagnosticIdOptional.isPresent()) {\n+                serviceBusMessage.getApplicationProperties().put(DIAGNOSTIC_ID_KEY, eventDiagnosticIdOptional.get()\n+                    .toString());\n+                tracerProvider.endSpan(eventSpanContext, Signal.complete());\n+                serviceBusMessage.addContext(SPAN_CONTEXT_KEY, eventSpanContext);\n+            }\n+        }\n+        return serviceBusMessage;\n+    }\n+\n+    /*\n+     * Starts a new process tracing span and attaches the returned context to the EventData object for users.\n+     */\n+    public static Context startProcessTracingSpan(ServiceBusReceivedMessage receivedMessage,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db48fe4e05e102832fb6a7bb7d846ac1ad48c92"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxNTgwNw==", "bodyText": "Same here. Where is this method called from? I guess this was added for the processor only but I think the async receiver should use them since the message processor is just a wrapper around the async receiver's receive method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#discussion_r509815807", "createdAt": "2020-10-22T00:48:25Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -253,4 +275,75 @@ private static TransactionalState getTransactionState(ByteBuffer transactionId,\n         transactionalState.setOutcome(outcome);\n         return transactionalState;\n     }\n+\n+    public static ServiceBusMessage traceMessageSpan(ServiceBusMessage serviceBusMessage,\n+        Context messageContext, String hostname, String entityPath, TracerProvider tracerProvider) {\n+        Optional<Object> eventContextData = messageContext.getData(SPAN_CONTEXT_KEY);\n+        if (eventContextData.isPresent()) {\n+            // if message has context (in case of retries), don't start a message span or add a new context\n+            return serviceBusMessage;\n+        } else {\n+            // Starting the span makes the sampling decision (nothing is logged at this time)\n+            Context newMessageContext = messageContext\n+                .addData(AZ_TRACING_NAMESPACE_KEY, AZ_TRACING_NAMESPACE_VALUE)\n+                .addData(ENTITY_PATH_KEY, entityPath)\n+                .addData(HOST_NAME_KEY, hostname);\n+            Context eventSpanContext = tracerProvider.startSpan(AZ_TRACING_SERVICE_NAME, newMessageContext,\n+                ProcessKind.MESSAGE);\n+            Optional<Object> eventDiagnosticIdOptional = eventSpanContext.getData(DIAGNOSTIC_ID_KEY);\n+            if (eventDiagnosticIdOptional.isPresent()) {\n+                serviceBusMessage.getApplicationProperties().put(DIAGNOSTIC_ID_KEY, eventDiagnosticIdOptional.get()\n+                    .toString());\n+                tracerProvider.endSpan(eventSpanContext, Signal.complete());\n+                serviceBusMessage.addContext(SPAN_CONTEXT_KEY, eventSpanContext);\n+            }\n+        }\n+        return serviceBusMessage;\n+    }\n+\n+    /*\n+     * Starts a new process tracing span and attaches the returned context to the EventData object for users.\n+     */\n+    public static Context startProcessTracingSpan(ServiceBusReceivedMessage receivedMessage,\n+        String hostname, String entityPath, TracerProvider tracerProvider, ProcessKind processKind) {\n+        Object diagnosticId = receivedMessage.getApplicationProperties().get(DIAGNOSTIC_ID_KEY);\n+        if (diagnosticId == null || !tracerProvider.isEnabled()) {\n+            return Context.NONE;\n+        }\n+\n+        Context spanContext = tracerProvider.extractContext(diagnosticId.toString(), Context.NONE)\n+            .addData(ENTITY_PATH_KEY, entityPath)\n+            .addData(HOST_NAME_KEY, hostname)\n+            .addData(AZ_TRACING_NAMESPACE_KEY, AZ_TRACING_NAMESPACE_VALUE);\n+        spanContext = receivedMessage.getEnqueuedTime() == null\n+            ? spanContext\n+            : spanContext.addData(MESSAGE_ENQUEUED_TIME, receivedMessage.getEnqueuedTime().toEpochSecond());\n+        return tracerProvider.startSpan(AZ_TRACING_SERVICE_NAME, spanContext, processKind);\n+    }\n+\n+    /*\n+     * Ends the process tracing span and the scope of that span.\n+     */\n+    public static void endProcessTracingSpan(Context processSpanContext, Signal<Void> signal,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db48fe4e05e102832fb6a7bb7d846ac1ad48c92"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxNjczMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Starts a new process tracing span and attaches the returned context to the EventData object for users.\n          \n          \n            \n                 * Starts a new process tracing span and attaches the returned context to the ServiceBusReceivedMessage object for users.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#discussion_r509816730", "createdAt": "2020-10-22T00:51:31Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -253,4 +275,75 @@ private static TransactionalState getTransactionState(ByteBuffer transactionId,\n         transactionalState.setOutcome(outcome);\n         return transactionalState;\n     }\n+\n+    public static ServiceBusMessage traceMessageSpan(ServiceBusMessage serviceBusMessage,\n+        Context messageContext, String hostname, String entityPath, TracerProvider tracerProvider) {\n+        Optional<Object> eventContextData = messageContext.getData(SPAN_CONTEXT_KEY);\n+        if (eventContextData.isPresent()) {\n+            // if message has context (in case of retries), don't start a message span or add a new context\n+            return serviceBusMessage;\n+        } else {\n+            // Starting the span makes the sampling decision (nothing is logged at this time)\n+            Context newMessageContext = messageContext\n+                .addData(AZ_TRACING_NAMESPACE_KEY, AZ_TRACING_NAMESPACE_VALUE)\n+                .addData(ENTITY_PATH_KEY, entityPath)\n+                .addData(HOST_NAME_KEY, hostname);\n+            Context eventSpanContext = tracerProvider.startSpan(AZ_TRACING_SERVICE_NAME, newMessageContext,\n+                ProcessKind.MESSAGE);\n+            Optional<Object> eventDiagnosticIdOptional = eventSpanContext.getData(DIAGNOSTIC_ID_KEY);\n+            if (eventDiagnosticIdOptional.isPresent()) {\n+                serviceBusMessage.getApplicationProperties().put(DIAGNOSTIC_ID_KEY, eventDiagnosticIdOptional.get()\n+                    .toString());\n+                tracerProvider.endSpan(eventSpanContext, Signal.complete());\n+                serviceBusMessage.addContext(SPAN_CONTEXT_KEY, eventSpanContext);\n+            }\n+        }\n+        return serviceBusMessage;\n+    }\n+\n+    /*\n+     * Starts a new process tracing span and attaches the returned context to the EventData object for users.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db48fe4e05e102832fb6a7bb7d846ac1ad48c92"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1NDA0NzEw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#pullrequestreview-515404710", "createdAt": "2020-10-23T07:21:33Z", "commit": {"oid": "4db48fe4e05e102832fb6a7bb7d846ac1ad48c92"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNzoyMTozM1rOHnBtKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNzozMDoyOFrOHnB-dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY4NDQ1OA==", "bodyText": "How does Kind fits into this ?, should that be passed here ?\nhttps://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/util/tracing/ProcessKind.java\n@samvaity    Can you look into this PR ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#discussion_r510684458", "createdAt": "2020-10-23T07:21:33Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -253,4 +275,75 @@ private static TransactionalState getTransactionState(ByteBuffer transactionId,\n         transactionalState.setOutcome(outcome);\n         return transactionalState;\n     }\n+\n+    public static ServiceBusMessage traceMessageSpan(ServiceBusMessage serviceBusMessage,\n+        Context messageContext, String hostname, String entityPath, TracerProvider tracerProvider) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db48fe4e05e102832fb6a7bb7d846ac1ad48c92"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY4ODg4NA==", "bodyText": "We probably do same  what .Net have done for their processor.. If we just have to do tracing for each receive message, we can do in async receiver. But if there is addition tracing for processor, which .Net is doing, we should also do.\nFYI-> for receive and processor would both would be kind.Consumer ? @samvaity", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#discussion_r510688884", "createdAt": "2020-10-23T07:30:28Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -253,4 +275,75 @@ private static TransactionalState getTransactionState(ByteBuffer transactionId,\n         transactionalState.setOutcome(outcome);\n         return transactionalState;\n     }\n+\n+    public static ServiceBusMessage traceMessageSpan(ServiceBusMessage serviceBusMessage,\n+        Context messageContext, String hostname, String entityPath, TracerProvider tracerProvider) {\n+        Optional<Object> eventContextData = messageContext.getData(SPAN_CONTEXT_KEY);\n+        if (eventContextData.isPresent()) {\n+            // if message has context (in case of retries), don't start a message span or add a new context\n+            return serviceBusMessage;\n+        } else {\n+            // Starting the span makes the sampling decision (nothing is logged at this time)\n+            Context newMessageContext = messageContext\n+                .addData(AZ_TRACING_NAMESPACE_KEY, AZ_TRACING_NAMESPACE_VALUE)\n+                .addData(ENTITY_PATH_KEY, entityPath)\n+                .addData(HOST_NAME_KEY, hostname);\n+            Context eventSpanContext = tracerProvider.startSpan(AZ_TRACING_SERVICE_NAME, newMessageContext,\n+                ProcessKind.MESSAGE);\n+            Optional<Object> eventDiagnosticIdOptional = eventSpanContext.getData(DIAGNOSTIC_ID_KEY);\n+            if (eventDiagnosticIdOptional.isPresent()) {\n+                serviceBusMessage.getApplicationProperties().put(DIAGNOSTIC_ID_KEY, eventDiagnosticIdOptional.get()\n+                    .toString());\n+                tracerProvider.endSpan(eventSpanContext, Signal.complete());\n+                serviceBusMessage.addContext(SPAN_CONTEXT_KEY, eventSpanContext);\n+            }\n+        }\n+        return serviceBusMessage;\n+    }\n+\n+    /*\n+     * Starts a new process tracing span and attaches the returned context to the EventData object for users.\n+     */\n+    public static Context startProcessTracingSpan(ServiceBusReceivedMessage receivedMessage,\n+        String hostname, String entityPath, TracerProvider tracerProvider, ProcessKind processKind) {\n+        Object diagnosticId = receivedMessage.getApplicationProperties().get(DIAGNOSTIC_ID_KEY);\n+        if (diagnosticId == null || !tracerProvider.isEnabled()) {\n+            return Context.NONE;\n+        }\n+\n+        Context spanContext = tracerProvider.extractContext(diagnosticId.toString(), Context.NONE)\n+            .addData(ENTITY_PATH_KEY, entityPath)\n+            .addData(HOST_NAME_KEY, hostname)\n+            .addData(AZ_TRACING_NAMESPACE_KEY, AZ_TRACING_NAMESPACE_VALUE);\n+        spanContext = receivedMessage.getEnqueuedTime() == null\n+            ? spanContext\n+            : spanContext.addData(MESSAGE_ENQUEUED_TIME, receivedMessage.getEnqueuedTime().toEpochSecond());\n+        return tracerProvider.startSpan(AZ_TRACING_SERVICE_NAME, spanContext, processKind);\n+    }\n+\n+    /*\n+     * Ends the process tracing span and the scope of that span.\n+     */\n+    public static void endProcessTracingSpan(Context processSpanContext, Signal<Void> signal,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxNTgwNw=="}, "originalCommit": {"oid": "4db48fe4e05e102832fb6a7bb7d846ac1ad48c92"}, "originalPosition": 100}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab3908c55535858faa12348778637f9998c5ef4d", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ab3908c55535858faa12348778637f9998c5ef4d", "committedDate": "2020-10-27T23:43:58Z", "message": "Update sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java\n\nCo-authored-by: Srikanta <51379715+srnagar@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjI5NTk1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#pullrequestreview-518229595", "createdAt": "2020-10-27T23:44:30Z", "commit": {"oid": "4db48fe4e05e102832fb6a7bb7d846ac1ad48c92"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea7cecf2ecc383fd57a8a0c1df2b1d98630e6f69", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ea7cecf2ecc383fd57a8a0c1df2b1d98630e6f69", "committedDate": "2020-10-27T23:56:57Z", "message": "Fix checkstyle format error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjMzODAz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#pullrequestreview-518233803", "createdAt": "2020-10-27T23:56:31Z", "commit": {"oid": "ab3908c55535858faa12348778637f9998c5ef4d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMzo1NjozMVrOHpVJ7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMzo1NjozMVrOHpVJ7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEwMDI3MQ==", "bodyText": "Need to add javadoc for this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#discussion_r513100271", "createdAt": "2020-10-27T23:56:31Z", "author": {"login": "samvaity"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -253,4 +275,75 @@ private static TransactionalState getTransactionState(ByteBuffer transactionId,\n         transactionalState.setOutcome(outcome);\n         return transactionalState;\n     }\n+\n+    public static ServiceBusMessage traceMessageSpan(ServiceBusMessage serviceBusMessage,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab3908c55535858faa12348778637f9998c5ef4d"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjM2MjAx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#pullrequestreview-518236201", "createdAt": "2020-10-28T00:03:36Z", "commit": {"oid": "ea7cecf2ecc383fd57a8a0c1df2b1d98630e6f69"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjQ3MDYx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16524#pullrequestreview-518247061", "createdAt": "2020-10-28T00:37:38Z", "commit": {"oid": "ea7cecf2ecc383fd57a8a0c1df2b1d98630e6f69"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da71bea3492a883861a16f80170fcda61b5c460a", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/da71bea3492a883861a16f80170fcda61b5c460a", "committedDate": "2020-10-28T01:49:20Z", "message": "Add javadoc for traceMessageSpan"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1955, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}