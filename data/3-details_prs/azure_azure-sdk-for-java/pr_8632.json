{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMjMyNjE3", "number": 8632, "title": "HttpClient module for azure-core-http based on the JDK 11+ HttpClient", "bodyText": "This PR introduces a new http client module for use by users of the Azure SDK for Java libraries. They may opt into this in a fashion similar to what they can do today to use OkHttp.\nWhilst the HttpClient API was first introduced into JDK 9 as a preview feature, and made GA in JDK 11, there is a limiting feature in JDK 11 which means that this module will only be usable in JDK 12 and later.\nWe are actively benchmarking this module, and will soon also integrate it into our parameterised unit tests (as a follow-up PR after this PR is merged).\nThis PR is not yet complete - review is welcome but there are still tasks to be done before merging will be considered, and a comment will be left inviting PR review at that point prior to merging.", "createdAt": "2020-03-02T08:07:53Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632", "merged": true, "mergeCommit": {"oid": "7d0f1380ba586245df6a6af9485c521bc2e8e175"}, "closed": true, "closedAt": "2020-04-03T00:59:31Z", "author": {"login": "JonathanGiles"}, "timelineItems": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJpI25gH2gAyMzgyMjMyNjE3OmIzZWQ0YWJjMDhhMjJlOGY4YTJmM2U3N2Q4YzFjN2M4MTA4NWE3OTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcT17ydgH2gAyMzgyMjMyNjE3OjRjOGFjMjU0YTY3OGMwYmVmNTFhZmI1ZTFiYTkyOWZmZTc0NTA3Mjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b3ed4abc08a22e8f8a2f3e77d8c1c7c81085a791", "author": {"user": {"login": "JonathanGiles", "name": "Jonathan Giles"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b3ed4abc08a22e8f8a2f3e77d8c1c7c81085a791", "committedDate": "2020-03-02T08:07:11Z", "message": "Extremely early proof of concept JDK 11 HttpClient module for azure-core-http"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d2c4ef7b1bc8134a8360621e2d3ec64d783df88", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8d2c4ef7b1bc8134a8360621e2d3ec64d783df88", "committedDate": "2020-03-07T04:44:46Z", "message": "Switching to response body publisher from inputstream, cleanup."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzI0MTc4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#pullrequestreview-370724178", "createdAt": "2020-03-07T05:25:35Z", "commit": {"oid": "8d2c4ef7b1bc8134a8360621e2d3ec64d783df88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNToyNTozNVrOFzMtBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNToyNTozNVrOFzMtBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyOTgyOQ==", "bodyText": "@JonathanGiles I think this bug in JDK11 HttpClient may be a blocker for this HttpClient adoption. \"Date\" is a necessary header for many of the track2 libs, something we need to look into.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r389229829", "createdAt": "2020-03-07T05:25:35Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk11/httpclient/Jdk11AsyncHttpClient.java", "diffHunk": "@@ -6,57 +6,59 @@\n import com.azure.core.http.HttpClient;\n import com.azure.core.http.HttpHeader;\n import com.azure.core.http.HttpHeaders;\n-import com.azure.core.http.HttpMethod;\n import com.azure.core.http.HttpRequest;\n import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.FluxUtil;\n import reactor.adapter.JdkFlowAdapter;\n import reactor.core.Exceptions;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n \n-import java.io.IOException;\n-import java.io.InputStream;\n import java.net.URISyntaxException;\n import java.nio.ByteBuffer;\n import java.nio.charset.Charset;\n-import java.util.concurrent.CompletableFuture;\n+import java.util.Collections;\n+import java.util.List;\n \n import java.net.http.HttpRequest.BodyPublisher;\n+import java.util.Set;\n+import java.util.TreeSet;\n import java.util.concurrent.Flow;\n \n import static java.net.http.HttpResponse.BodyHandlers.*;\n import static java.net.http.HttpRequest.BodyPublishers.*;\n-import static java.net.http.HttpResponse.BodyHandlers.ofInputStream;\n \n /**\n  * HttpClient implementation for the JDK 11 HttpClient.\n  */\n class Jdk11AsyncHttpClient implements HttpClient {\n     private final java.net.http.HttpClient jdk11HttpClient;\n \n-    private static final Mono<BodyPublisher> EMPTY_BODY_PUBLISHER_MONO = Mono.just(noBody());\n+    private static final Set<String> JDK11_RESTRICTED_HEADERS;\n+    static {\n+        TreeSet<String> treeSet = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n+        treeSet.addAll(Set.of(\"connection\",\n+            \"content-length\",\n+            \"date\", // BUG: Java11: https://bugs.openjdk.java.net/browse/JDK-8213189 (Fixed in JDK12)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2c4ef7b1bc8134a8360621e2d3ec64d783df88"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a83572a308ce0261df8dc22dc1ca87e62003747", "author": {"user": {"login": "JonathanGiles", "name": "Jonathan Giles"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3a83572a308ce0261df8dc22dc1ca87e62003747", "committedDate": "2020-03-08T22:56:10Z", "message": "Minor improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32d147918ced47f684fc645ab0914bfe2277c988", "author": {"user": {"login": "JonathanGiles", "name": "Jonathan Giles"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/32d147918ced47f684fc645ab0914bfe2277c988", "committedDate": "2020-03-24T05:26:52Z", "message": "Further work"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNDU5NDU4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#pullrequestreview-383459458", "createdAt": "2020-03-29T21:52:19Z", "commit": {"oid": "32d147918ced47f684fc645ab0914bfe2277c988"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQyMTo1MjoxOVrOF9VdEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQyMjo1Nzo0MVrOF9V6oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1ODk2Mg==", "bodyText": "The name of the artifact and directory name don't match. Should this be azure-core-jdk11-httpclient? Also, since we have a known issue in JDK 11 not supporting Date, should this really only be used with jdk12 and named as such?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r399858962", "createdAt": "2020-03-29T21:52:19Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-http-jdk11-httpclient/pom.xml", "diffHunk": "@@ -0,0 +1,120 @@\n+<!--\n+  ~ Copyright (c) Microsoft Corporation. All rights reserved.\n+  ~ Licensed under the MIT License.\n+  -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-client-sdk-parent</artifactId>\n+    <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+    <relativePath>../../../pom.client.xml</relativePath>\n+  </parent>\n+\n+  <groupId>com.azure</groupId>\n+  <artifactId>azure-core-http-jdk-httpclient</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d147918ced47f684fc645ab0914bfe2277c988"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg2MDEwMg==", "bodyText": "Set this.disposed = true after diposing.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r399860102", "createdAt": "2020-03-29T22:02:07Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java", "diffHunk": "@@ -0,0 +1,197 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.jdk.httpclient;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.FluxUtil;\n+import reactor.adapter.JdkFlowAdapter;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URISyntaxException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import java.net.http.HttpRequest.BodyPublisher;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.concurrent.Flow;\n+\n+import static java.net.http.HttpResponse.BodyHandlers.*;\n+import static java.net.http.HttpRequest.BodyPublishers.*;\n+\n+/**\n+ * HttpClient implementation for the JDK 11 HttpClient.\n+ */\n+class JdkAsyncHttpClient implements HttpClient {\n+    private final java.net.http.HttpClient jdk11HttpClient;\n+\n+    private static final Set<String> JDK11_RESTRICTED_HEADERS;\n+    static {\n+        TreeSet<String> treeSet = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n+        treeSet.addAll(Set.of(\"connection\",\n+            \"content-length\",\n+            \"date\", // BUG: Java11: https://bugs.openjdk.java.net/browse/JDK-8213189 (Fixed in JDK12)\n+            \"expect\",\n+            \"from\",\n+            \"host\",\n+            \"upgrade\",\n+            \"via\",\n+            \"warning\"));\n+        JDK11_RESTRICTED_HEADERS = Collections.unmodifiableSet(treeSet);\n+    }\n+\n+    JdkAsyncHttpClient(java.net.http.HttpClient httpClient) {\n+        this.jdk11HttpClient = httpClient;\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> send(HttpRequest request) {\n+        return toJdk11HttpRequest(request)\n+            .flatMap(jdk11Request -> Mono.fromCompletionStage(jdk11HttpClient.sendAsync(jdk11Request, ofPublisher()))\n+                .map(innerResponse -> new Jdk11HttpResponse(request, innerResponse)));\n+    }\n+\n+    /**\n+     * Converts the given azure-core request to the JDK 11 HttpRequest type.\n+     *\n+     * @param request the azure-core request\n+     * @return the Mono emitting HttpRequest\n+     */\n+    private static Mono<java.net.http.HttpRequest> toJdk11HttpRequest(HttpRequest request) {\n+        return Mono.fromCallable(() -> {\n+            final java.net.http.HttpRequest.Builder builder = java.net.http.HttpRequest.newBuilder();\n+            try {\n+                builder.uri(request.getUrl().toURI());\n+            } catch (URISyntaxException e) {\n+                throw Exceptions.propagate(e);\n+            }\n+            final HttpHeaders headers = request.getHeaders();\n+            if (headers != null) {\n+                for (HttpHeader header : headers) {\n+                    final String headerName = header.getName();\n+                    if (!JDK11_RESTRICTED_HEADERS.contains(headerName)) {\n+                        final String headerValue = header.getValue();\n+                        builder.setHeader(headerName, headerValue);\n+                    }\n+                }\n+            }\n+            switch (request.getHttpMethod()) {\n+                case GET:\n+                    return builder.GET().build();\n+                case HEAD:\n+                    return builder.method(\"HEAD\", noBody()).build();\n+                default:\n+                    final String contentLength = request.getHeaders().getValue(\"content-length\");\n+                    final BodyPublisher bodyPublisher = toBodyPublisher(request.getBody(), contentLength);\n+                    return builder.method(request.getHttpMethod().toString(), bodyPublisher).build();\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Create BodyPublisher from the given java.nio.ByteBuffer publisher.\n+     *\n+     * @param bbPublisher stream of java.nio.ByteBuffer representing request content\n+     * @return the BodyPublisher\n+     */\n+    private static BodyPublisher toBodyPublisher(Flux<ByteBuffer> bbPublisher, String contentLength) {\n+        if (bbPublisher == null) {\n+            return noBody();\n+        }\n+        final Flow.Publisher<ByteBuffer> bbFlowPublisher = JdkFlowAdapter.publisherToFlowPublisher(bbPublisher);\n+        if (CoreUtils.isNullOrEmpty(contentLength)) {\n+            return fromPublisher(bbFlowPublisher);\n+        } else {\n+            long contentLengthLong = Long.parseLong(contentLength);\n+            if (contentLengthLong < 1) {\n+                return fromPublisher(bbFlowPublisher);\n+            } else {\n+                return fromPublisher(bbFlowPublisher, contentLengthLong);\n+            }\n+        }\n+    }\n+\n+    private static class Jdk11HttpResponse extends HttpResponse {\n+        private final int statusCode;\n+        private final HttpHeaders headers;\n+        private final Flux<ByteBuffer> contentFlux;\n+        private volatile boolean disposed = false;\n+\n+        protected Jdk11HttpResponse(final HttpRequest request,\n+                                    java.net.http.HttpResponse<Flow.Publisher<List<ByteBuffer>>> innerResponse) {\n+            super(request);\n+            this.statusCode = innerResponse.statusCode();\n+            this.headers = fromJdk11HttpHeaders(innerResponse.headers());\n+            this.contentFlux = JdkFlowAdapter.flowPublisherToFlux(innerResponse.body())\n+                .flatMapSequential(Flux::fromIterable);\n+        }\n+\n+        @Override\n+        public int getStatusCode() {\n+            return this.statusCode;\n+        }\n+\n+        @Override\n+        public String getHeaderValue(String name) {\n+            return this.headers.getValue(name);\n+        }\n+\n+        @Override\n+        public HttpHeaders getHeaders() {\n+            return this.headers;\n+        }\n+\n+        @Override\n+        public Flux<ByteBuffer> getBody() {\n+            return this.contentFlux\n+                .doFinally(signalType -> disposed = true);\n+        }\n+\n+        @Override\n+        public Mono<byte[]> getBodyAsByteArray() {\n+            return FluxUtil.collectBytesInByteBufferStream(getBody())\n+                .flatMap(bytes -> bytes.length == 0 ? Mono.empty() : Mono.just(bytes));\n+        }\n+\n+        @Override\n+        public Mono<String> getBodyAsString() {\n+            return getBodyAsByteArray()\n+                .map(bytes -> new String(bytes));\n+        }\n+\n+        @Override\n+        public Mono<String> getBodyAsString(Charset charset) {\n+            return getBodyAsByteArray()\n+                .map(bytes -> new String(bytes, charset));\n+        }\n+\n+        @Override\n+        public void close() {\n+            if (!this.disposed) {\n+                this.contentFlux\n+                    .subscribe()\n+                    .dispose();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d147918ced47f684fc645ab0914bfe2277c988"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg2MTE0Mw==", "bodyText": "If there are multiple values in java.net.http.HttpHeaders, instead of overwriting the value field here, we should have comma-separated values as recommended in the RFC", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r399861143", "createdAt": "2020-03-29T22:10:52Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java", "diffHunk": "@@ -0,0 +1,197 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.jdk.httpclient;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.FluxUtil;\n+import reactor.adapter.JdkFlowAdapter;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URISyntaxException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import java.net.http.HttpRequest.BodyPublisher;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.concurrent.Flow;\n+\n+import static java.net.http.HttpResponse.BodyHandlers.*;\n+import static java.net.http.HttpRequest.BodyPublishers.*;\n+\n+/**\n+ * HttpClient implementation for the JDK 11 HttpClient.\n+ */\n+class JdkAsyncHttpClient implements HttpClient {\n+    private final java.net.http.HttpClient jdk11HttpClient;\n+\n+    private static final Set<String> JDK11_RESTRICTED_HEADERS;\n+    static {\n+        TreeSet<String> treeSet = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n+        treeSet.addAll(Set.of(\"connection\",\n+            \"content-length\",\n+            \"date\", // BUG: Java11: https://bugs.openjdk.java.net/browse/JDK-8213189 (Fixed in JDK12)\n+            \"expect\",\n+            \"from\",\n+            \"host\",\n+            \"upgrade\",\n+            \"via\",\n+            \"warning\"));\n+        JDK11_RESTRICTED_HEADERS = Collections.unmodifiableSet(treeSet);\n+    }\n+\n+    JdkAsyncHttpClient(java.net.http.HttpClient httpClient) {\n+        this.jdk11HttpClient = httpClient;\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> send(HttpRequest request) {\n+        return toJdk11HttpRequest(request)\n+            .flatMap(jdk11Request -> Mono.fromCompletionStage(jdk11HttpClient.sendAsync(jdk11Request, ofPublisher()))\n+                .map(innerResponse -> new Jdk11HttpResponse(request, innerResponse)));\n+    }\n+\n+    /**\n+     * Converts the given azure-core request to the JDK 11 HttpRequest type.\n+     *\n+     * @param request the azure-core request\n+     * @return the Mono emitting HttpRequest\n+     */\n+    private static Mono<java.net.http.HttpRequest> toJdk11HttpRequest(HttpRequest request) {\n+        return Mono.fromCallable(() -> {\n+            final java.net.http.HttpRequest.Builder builder = java.net.http.HttpRequest.newBuilder();\n+            try {\n+                builder.uri(request.getUrl().toURI());\n+            } catch (URISyntaxException e) {\n+                throw Exceptions.propagate(e);\n+            }\n+            final HttpHeaders headers = request.getHeaders();\n+            if (headers != null) {\n+                for (HttpHeader header : headers) {\n+                    final String headerName = header.getName();\n+                    if (!JDK11_RESTRICTED_HEADERS.contains(headerName)) {\n+                        final String headerValue = header.getValue();\n+                        builder.setHeader(headerName, headerValue);\n+                    }\n+                }\n+            }\n+            switch (request.getHttpMethod()) {\n+                case GET:\n+                    return builder.GET().build();\n+                case HEAD:\n+                    return builder.method(\"HEAD\", noBody()).build();\n+                default:\n+                    final String contentLength = request.getHeaders().getValue(\"content-length\");\n+                    final BodyPublisher bodyPublisher = toBodyPublisher(request.getBody(), contentLength);\n+                    return builder.method(request.getHttpMethod().toString(), bodyPublisher).build();\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Create BodyPublisher from the given java.nio.ByteBuffer publisher.\n+     *\n+     * @param bbPublisher stream of java.nio.ByteBuffer representing request content\n+     * @return the BodyPublisher\n+     */\n+    private static BodyPublisher toBodyPublisher(Flux<ByteBuffer> bbPublisher, String contentLength) {\n+        if (bbPublisher == null) {\n+            return noBody();\n+        }\n+        final Flow.Publisher<ByteBuffer> bbFlowPublisher = JdkFlowAdapter.publisherToFlowPublisher(bbPublisher);\n+        if (CoreUtils.isNullOrEmpty(contentLength)) {\n+            return fromPublisher(bbFlowPublisher);\n+        } else {\n+            long contentLengthLong = Long.parseLong(contentLength);\n+            if (contentLengthLong < 1) {\n+                return fromPublisher(bbFlowPublisher);\n+            } else {\n+                return fromPublisher(bbFlowPublisher, contentLengthLong);\n+            }\n+        }\n+    }\n+\n+    private static class Jdk11HttpResponse extends HttpResponse {\n+        private final int statusCode;\n+        private final HttpHeaders headers;\n+        private final Flux<ByteBuffer> contentFlux;\n+        private volatile boolean disposed = false;\n+\n+        protected Jdk11HttpResponse(final HttpRequest request,\n+                                    java.net.http.HttpResponse<Flow.Publisher<List<ByteBuffer>>> innerResponse) {\n+            super(request);\n+            this.statusCode = innerResponse.statusCode();\n+            this.headers = fromJdk11HttpHeaders(innerResponse.headers());\n+            this.contentFlux = JdkFlowAdapter.flowPublisherToFlux(innerResponse.body())\n+                .flatMapSequential(Flux::fromIterable);\n+        }\n+\n+        @Override\n+        public int getStatusCode() {\n+            return this.statusCode;\n+        }\n+\n+        @Override\n+        public String getHeaderValue(String name) {\n+            return this.headers.getValue(name);\n+        }\n+\n+        @Override\n+        public HttpHeaders getHeaders() {\n+            return this.headers;\n+        }\n+\n+        @Override\n+        public Flux<ByteBuffer> getBody() {\n+            return this.contentFlux\n+                .doFinally(signalType -> disposed = true);\n+        }\n+\n+        @Override\n+        public Mono<byte[]> getBodyAsByteArray() {\n+            return FluxUtil.collectBytesInByteBufferStream(getBody())\n+                .flatMap(bytes -> bytes.length == 0 ? Mono.empty() : Mono.just(bytes));\n+        }\n+\n+        @Override\n+        public Mono<String> getBodyAsString() {\n+            return getBodyAsByteArray()\n+                .map(bytes -> new String(bytes));\n+        }\n+\n+        @Override\n+        public Mono<String> getBodyAsString(Charset charset) {\n+            return getBodyAsByteArray()\n+                .map(bytes -> new String(bytes, charset));\n+        }\n+\n+        @Override\n+        public void close() {\n+            if (!this.disposed) {\n+                this.contentFlux\n+                    .subscribe()\n+                    .dispose();\n+            }\n+        }\n+\n+        private static HttpHeaders fromJdk11HttpHeaders(java.net.http.HttpHeaders headers) {\n+            final HttpHeaders httpHeaders = new HttpHeaders();\n+            for (final String key : headers.map().keySet()) {\n+                for (final String value : headers.allValues(key)) {\n+                    httpHeaders.put(key, value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d147918ced47f684fc645ab0914bfe2277c988"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg2MzgwOA==", "bodyText": "May want to log a warning here when we find a restricted header to let the user know that we skipped over some headers.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r399863808", "createdAt": "2020-03-29T22:33:52Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java", "diffHunk": "@@ -0,0 +1,197 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.jdk.httpclient;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.FluxUtil;\n+import reactor.adapter.JdkFlowAdapter;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URISyntaxException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import java.net.http.HttpRequest.BodyPublisher;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.concurrent.Flow;\n+\n+import static java.net.http.HttpResponse.BodyHandlers.*;\n+import static java.net.http.HttpRequest.BodyPublishers.*;\n+\n+/**\n+ * HttpClient implementation for the JDK 11 HttpClient.\n+ */\n+class JdkAsyncHttpClient implements HttpClient {\n+    private final java.net.http.HttpClient jdk11HttpClient;\n+\n+    private static final Set<String> JDK11_RESTRICTED_HEADERS;\n+    static {\n+        TreeSet<String> treeSet = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n+        treeSet.addAll(Set.of(\"connection\",\n+            \"content-length\",\n+            \"date\", // BUG: Java11: https://bugs.openjdk.java.net/browse/JDK-8213189 (Fixed in JDK12)\n+            \"expect\",\n+            \"from\",\n+            \"host\",\n+            \"upgrade\",\n+            \"via\",\n+            \"warning\"));\n+        JDK11_RESTRICTED_HEADERS = Collections.unmodifiableSet(treeSet);\n+    }\n+\n+    JdkAsyncHttpClient(java.net.http.HttpClient httpClient) {\n+        this.jdk11HttpClient = httpClient;\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> send(HttpRequest request) {\n+        return toJdk11HttpRequest(request)\n+            .flatMap(jdk11Request -> Mono.fromCompletionStage(jdk11HttpClient.sendAsync(jdk11Request, ofPublisher()))\n+                .map(innerResponse -> new Jdk11HttpResponse(request, innerResponse)));\n+    }\n+\n+    /**\n+     * Converts the given azure-core request to the JDK 11 HttpRequest type.\n+     *\n+     * @param request the azure-core request\n+     * @return the Mono emitting HttpRequest\n+     */\n+    private static Mono<java.net.http.HttpRequest> toJdk11HttpRequest(HttpRequest request) {\n+        return Mono.fromCallable(() -> {\n+            final java.net.http.HttpRequest.Builder builder = java.net.http.HttpRequest.newBuilder();\n+            try {\n+                builder.uri(request.getUrl().toURI());\n+            } catch (URISyntaxException e) {\n+                throw Exceptions.propagate(e);\n+            }\n+            final HttpHeaders headers = request.getHeaders();\n+            if (headers != null) {\n+                for (HttpHeader header : headers) {\n+                    final String headerName = header.getName();\n+                    if (!JDK11_RESTRICTED_HEADERS.contains(headerName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d147918ced47f684fc645ab0914bfe2277c988"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg2NjUyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <version>1.1.0</version>\n          \n          \n            \n                <version>1.0.0-beta.1</version>", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r399866528", "createdAt": "2020-03-29T22:57:41Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-http-jdk11-httpclient/README.md", "diffHunk": "@@ -0,0 +1,68 @@\n+# Azure Core JDK HttpClient library for Java\n+\n+This is an azure-core HTTP client that makes use of the asynchronous HttpClient that was made generally available as \n+part of JDK 11. \n+\n+## Getting started\n+\n+### Prerequisites\n+\n+- Java Development Kit (JDK) with version 11 or above\n+\n+### Adding the package to your product\n+\n+[//]: # ({x-version-update-start;com.azure:azure-core-http-jdk-httpclient;current})\n+```xml\n+<dependency>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-core-http-jdk-httpclient</artifactId>\n+    <version>1.1.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d147918ced47f684fc645ab0914bfe2277c988"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MDIwMDA3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#pullrequestreview-384020007", "createdAt": "2020-03-30T16:20:20Z", "commit": {"oid": "32d147918ced47f684fc645ab0914bfe2277c988"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjoyMDoyMFrOF9xtsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjozNzo0OFrOF9ycfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyMTk2OA==", "bodyText": "* imports.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r400321968", "createdAt": "2020-03-30T16:20:20Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java", "diffHunk": "@@ -0,0 +1,197 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.jdk.httpclient;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.FluxUtil;\n+import reactor.adapter.JdkFlowAdapter;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URISyntaxException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import java.net.http.HttpRequest.BodyPublisher;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.concurrent.Flow;\n+\n+import static java.net.http.HttpResponse.BodyHandlers.*;\n+import static java.net.http.HttpRequest.BodyPublishers.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d147918ced47f684fc645ab0914bfe2277c988"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyMzMzOA==", "bodyText": "How will this work for libraries which require fine tuning for these headers? In the case of Storage the upload could fail on a mismatch Content-Length header and shared key credential authentication will fail if the Date header is mismatch compared to what was used to generate the key.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r400323338", "createdAt": "2020-03-30T16:22:15Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java", "diffHunk": "@@ -0,0 +1,197 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.jdk.httpclient;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.FluxUtil;\n+import reactor.adapter.JdkFlowAdapter;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URISyntaxException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import java.net.http.HttpRequest.BodyPublisher;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.concurrent.Flow;\n+\n+import static java.net.http.HttpResponse.BodyHandlers.*;\n+import static java.net.http.HttpRequest.BodyPublishers.*;\n+\n+/**\n+ * HttpClient implementation for the JDK 11 HttpClient.\n+ */\n+class JdkAsyncHttpClient implements HttpClient {\n+    private final java.net.http.HttpClient jdk11HttpClient;\n+\n+    private static final Set<String> JDK11_RESTRICTED_HEADERS;\n+    static {\n+        TreeSet<String> treeSet = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n+        treeSet.addAll(Set.of(\"connection\",\n+            \"content-length\",\n+            \"date\", // BUG: Java11: https://bugs.openjdk.java.net/browse/JDK-8213189 (Fixed in JDK12)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d147918ced47f684fc645ab0914bfe2277c988"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMDgzMg==", "bodyText": "Would this handle digest authentication?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r400330832", "createdAt": "2020-03-30T16:33:07Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClientBuilder.java", "diffHunk": "@@ -0,0 +1,150 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.jdk.httpclient;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.ProxyOptions;\n+import com.azure.core.http.jdk.httpclient.implementation.JdkHttpClientProxySelector;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.net.Authenticator;\n+import java.net.PasswordAuthentication;\n+import java.net.Proxy;\n+import java.time.Duration;\n+import java.util.Objects;\n+import java.util.concurrent.Executor;\n+\n+/**\n+ * Builder to configure and build an instance of the azure-core {@link HttpClient} type using the JDK HttpClient APIs,\n+ * first introduced as preview in JDK 9, but made generally available from JDK 11 onwards.\n+ */\n+public class JdkAsyncHttpClientBuilder {\n+    private final ClientLogger logger = new ClientLogger(JdkAsyncHttpClientBuilder.class);\n+\n+    private static final Duration DEFAULT_CONNECT_TIMEOUT = Duration.ofSeconds(60);\n+\n+    private java.net.http.HttpClient.Builder httpClientBuilder;\n+    private Duration connectionTimeout;\n+    private ProxyOptions proxyOptions;\n+    private Configuration configuration;\n+    private Executor executor;\n+\n+    /**\n+     * Creates JdkAsyncHttpClientBuilder.\n+     */\n+    public JdkAsyncHttpClientBuilder() {\n+    }\n+\n+    /**\n+     * Creates JdkAsyncHttpClientBuilder from the builder of an existing {@link java.net.http.HttpClient.Builder}.\n+     *\n+     * @param httpClientBuilder the HttpClient builder to use\n+     */\n+    public JdkAsyncHttpClientBuilder(java.net.http.HttpClient.Builder httpClientBuilder) {\n+        this.httpClientBuilder = Objects.requireNonNull(httpClientBuilder, \"'httpClientBuilder' cannot be null.\");\n+    }\n+\n+    /**\n+     * Sets the executor to be used for asynchronous and dependent tasks. This cannot be null.\n+     *\n+     * <p> If this method is not invoked prior to {@linkplain #build() building}, a default executor is created for each\n+     * newly built {@code HttpClient}.\n+     *\n+     * @param executor the executor to be used for asynchronous and dependent tasks\n+     * @return the updated Jdk11AsyncHttpClientBuilder object\n+     */\n+    public JdkAsyncHttpClientBuilder executor(Executor executor) {\n+        this.executor = Objects.requireNonNull(executor, \"executor can not be null\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the connection timeout.\n+     *\n+     * The default connection timeout is 60 seconds.\n+     *\n+     * @param connectionTimeout the connection timeout\n+     * @return the updated JdkAsyncHttpClientBuilder object\n+     */\n+    public JdkAsyncHttpClientBuilder connectionTimeout(Duration connectionTimeout) {\n+        // setConnectionTimeout can be null\n+        this.connectionTimeout = connectionTimeout;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the proxy.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.core.http.jdk.httpclient.JdkAsyncHttpClientBuilder.proxy#ProxyOptions}\n+     *\n+     * @param proxyOptions The proxy configuration to use.\n+     * @return the updated {@link JdkAsyncHttpClientBuilder} object\n+     */\n+    public JdkAsyncHttpClientBuilder proxy(ProxyOptions proxyOptions) {\n+        // proxyOptions can be null\n+        this.proxyOptions = proxyOptions;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the configuration store that is used during construction of the HTTP client.\n+     * <p>\n+     * The default configuration store is a clone of the {@link Configuration#getGlobalConfiguration() global\n+     * configuration store}, use {@link Configuration#NONE} to bypass using configuration settings during construction.\n+     *\n+     * @param configuration The configuration store used to\n+     * @return The updated JdkAsyncHttpClientBuilder object.\n+     */\n+    public JdkAsyncHttpClientBuilder configuration(Configuration configuration) {\n+        this.configuration = configuration;\n+        return this;\n+    }\n+\n+    /**\n+     * Build a HttpClient with current configurations.\n+     *\n+     * @return a {@link HttpClient}.\n+     */\n+    public HttpClient build() {\n+        java.net.http.HttpClient.Builder httpClientBuilder = this.httpClientBuilder == null\n+                     ? java.net.http.HttpClient.newBuilder()\n+                     : this.httpClientBuilder;\n+\n+        httpClientBuilder = (this.connectionTimeout != null)\n+            ? httpClientBuilder.connectTimeout(this.connectionTimeout)\n+            : httpClientBuilder.connectTimeout(DEFAULT_CONNECT_TIMEOUT);\n+\n+        Configuration buildConfiguration = (configuration == null)\n+            ? Configuration.getGlobalConfiguration()\n+            : configuration;\n+\n+        ProxyOptions buildProxyOptions = (proxyOptions == null && buildConfiguration != Configuration.NONE)\n+            ? ProxyOptions.fromConfiguration(buildConfiguration)\n+            : proxyOptions;\n+\n+        if (executor != null) {\n+            httpClientBuilder.executor(executor);\n+        }\n+\n+        if (buildProxyOptions != null) {\n+            httpClientBuilder = httpClientBuilder.proxy(new JdkHttpClientProxySelector(\n+                buildProxyOptions.getType().toProxyType(),\n+                buildProxyOptions.getAddress(),\n+                buildProxyOptions.getNonProxyHosts()));\n+\n+            if (buildProxyOptions.getUsername() != null) {\n+                httpClientBuilder.authenticator(new Authenticator() {\n+                    @Override\n+                    protected PasswordAuthentication getPasswordAuthentication() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d147918ced47f684fc645ab0914bfe2277c988"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMjI2Ng==", "bodyText": "Add a @throws", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r400332266", "createdAt": "2020-03-30T16:35:14Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClientBuilder.java", "diffHunk": "@@ -0,0 +1,150 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.jdk.httpclient;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.ProxyOptions;\n+import com.azure.core.http.jdk.httpclient.implementation.JdkHttpClientProxySelector;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.net.Authenticator;\n+import java.net.PasswordAuthentication;\n+import java.net.Proxy;\n+import java.time.Duration;\n+import java.util.Objects;\n+import java.util.concurrent.Executor;\n+\n+/**\n+ * Builder to configure and build an instance of the azure-core {@link HttpClient} type using the JDK HttpClient APIs,\n+ * first introduced as preview in JDK 9, but made generally available from JDK 11 onwards.\n+ */\n+public class JdkAsyncHttpClientBuilder {\n+    private final ClientLogger logger = new ClientLogger(JdkAsyncHttpClientBuilder.class);\n+\n+    private static final Duration DEFAULT_CONNECT_TIMEOUT = Duration.ofSeconds(60);\n+\n+    private java.net.http.HttpClient.Builder httpClientBuilder;\n+    private Duration connectionTimeout;\n+    private ProxyOptions proxyOptions;\n+    private Configuration configuration;\n+    private Executor executor;\n+\n+    /**\n+     * Creates JdkAsyncHttpClientBuilder.\n+     */\n+    public JdkAsyncHttpClientBuilder() {\n+    }\n+\n+    /**\n+     * Creates JdkAsyncHttpClientBuilder from the builder of an existing {@link java.net.http.HttpClient.Builder}.\n+     *\n+     * @param httpClientBuilder the HttpClient builder to use", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d147918ced47f684fc645ab0914bfe2277c988"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMjMxMw==", "bodyText": "Add a @throws", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r400332313", "createdAt": "2020-03-30T16:35:19Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClientBuilder.java", "diffHunk": "@@ -0,0 +1,150 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.jdk.httpclient;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.ProxyOptions;\n+import com.azure.core.http.jdk.httpclient.implementation.JdkHttpClientProxySelector;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.net.Authenticator;\n+import java.net.PasswordAuthentication;\n+import java.net.Proxy;\n+import java.time.Duration;\n+import java.util.Objects;\n+import java.util.concurrent.Executor;\n+\n+/**\n+ * Builder to configure and build an instance of the azure-core {@link HttpClient} type using the JDK HttpClient APIs,\n+ * first introduced as preview in JDK 9, but made generally available from JDK 11 onwards.\n+ */\n+public class JdkAsyncHttpClientBuilder {\n+    private final ClientLogger logger = new ClientLogger(JdkAsyncHttpClientBuilder.class);\n+\n+    private static final Duration DEFAULT_CONNECT_TIMEOUT = Duration.ofSeconds(60);\n+\n+    private java.net.http.HttpClient.Builder httpClientBuilder;\n+    private Duration connectionTimeout;\n+    private ProxyOptions proxyOptions;\n+    private Configuration configuration;\n+    private Executor executor;\n+\n+    /**\n+     * Creates JdkAsyncHttpClientBuilder.\n+     */\n+    public JdkAsyncHttpClientBuilder() {\n+    }\n+\n+    /**\n+     * Creates JdkAsyncHttpClientBuilder from the builder of an existing {@link java.net.http.HttpClient.Builder}.\n+     *\n+     * @param httpClientBuilder the HttpClient builder to use\n+     */\n+    public JdkAsyncHttpClientBuilder(java.net.http.HttpClient.Builder httpClientBuilder) {\n+        this.httpClientBuilder = Objects.requireNonNull(httpClientBuilder, \"'httpClientBuilder' cannot be null.\");\n+    }\n+\n+    /**\n+     * Sets the executor to be used for asynchronous and dependent tasks. This cannot be null.\n+     *\n+     * <p> If this method is not invoked prior to {@linkplain #build() building}, a default executor is created for each\n+     * newly built {@code HttpClient}.\n+     *\n+     * @param executor the executor to be used for asynchronous and dependent tasks\n+     * @return the updated Jdk11AsyncHttpClientBuilder object", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d147918ced47f684fc645ab0914bfe2277c988"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMjQ3OA==", "bodyText": "<p>", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r400332478", "createdAt": "2020-03-30T16:35:33Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClientBuilder.java", "diffHunk": "@@ -0,0 +1,150 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.jdk.httpclient;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.ProxyOptions;\n+import com.azure.core.http.jdk.httpclient.implementation.JdkHttpClientProxySelector;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.net.Authenticator;\n+import java.net.PasswordAuthentication;\n+import java.net.Proxy;\n+import java.time.Duration;\n+import java.util.Objects;\n+import java.util.concurrent.Executor;\n+\n+/**\n+ * Builder to configure and build an instance of the azure-core {@link HttpClient} type using the JDK HttpClient APIs,\n+ * first introduced as preview in JDK 9, but made generally available from JDK 11 onwards.\n+ */\n+public class JdkAsyncHttpClientBuilder {\n+    private final ClientLogger logger = new ClientLogger(JdkAsyncHttpClientBuilder.class);\n+\n+    private static final Duration DEFAULT_CONNECT_TIMEOUT = Duration.ofSeconds(60);\n+\n+    private java.net.http.HttpClient.Builder httpClientBuilder;\n+    private Duration connectionTimeout;\n+    private ProxyOptions proxyOptions;\n+    private Configuration configuration;\n+    private Executor executor;\n+\n+    /**\n+     * Creates JdkAsyncHttpClientBuilder.\n+     */\n+    public JdkAsyncHttpClientBuilder() {\n+    }\n+\n+    /**\n+     * Creates JdkAsyncHttpClientBuilder from the builder of an existing {@link java.net.http.HttpClient.Builder}.\n+     *\n+     * @param httpClientBuilder the HttpClient builder to use\n+     */\n+    public JdkAsyncHttpClientBuilder(java.net.http.HttpClient.Builder httpClientBuilder) {\n+        this.httpClientBuilder = Objects.requireNonNull(httpClientBuilder, \"'httpClientBuilder' cannot be null.\");\n+    }\n+\n+    /**\n+     * Sets the executor to be used for asynchronous and dependent tasks. This cannot be null.\n+     *\n+     * <p> If this method is not invoked prior to {@linkplain #build() building}, a default executor is created for each\n+     * newly built {@code HttpClient}.\n+     *\n+     * @param executor the executor to be used for asynchronous and dependent tasks\n+     * @return the updated Jdk11AsyncHttpClientBuilder object\n+     */\n+    public JdkAsyncHttpClientBuilder executor(Executor executor) {\n+        this.executor = Objects.requireNonNull(executor, \"executor can not be null\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the connection timeout.\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d147918ced47f684fc645ab0914bfe2277c988"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMjc3NA==", "bodyText": "Missing class level Javadoc", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r400332774", "createdAt": "2020-03-30T16:36:01Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/implementation/JdkHttpClientProvider.java", "diffHunk": "@@ -0,0 +1,16 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.jdk.httpclient.implementation;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpClientProvider;\n+import com.azure.core.http.jdk.httpclient.JdkAsyncHttpClientBuilder;\n+\n+public class JdkHttpClientProvider implements HttpClientProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d147918ced47f684fc645ab0914bfe2277c988"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMzEyOA==", "bodyText": "Constructor Javadoc?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r400333128", "createdAt": "2020-03-30T16:36:35Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/implementation/JdkHttpClientProxySelector.java", "diffHunk": "@@ -0,0 +1,46 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.jdk.httpclient.implementation;\n+\n+import java.io.IOException;\n+import java.net.Proxy;\n+import java.net.ProxySelector;\n+import java.net.SocketAddress;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * This class handles selecting the proxy during a request.\n+ */\n+public final class JdkHttpClientProxySelector extends ProxySelector {\n+    private final Proxy.Type proxyType;\n+    private final SocketAddress proxyAddress;\n+    private final Pattern nonProxyHostsPattern;\n+\n+    public JdkHttpClientProxySelector(Proxy.Type proxyType, SocketAddress proxyAddress, String nonProxyHosts) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d147918ced47f684fc645ab0914bfe2277c988"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMzk0OA==", "bodyText": "Needs a version change", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r400333948", "createdAt": "2020-03-30T16:37:48Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-http-jdk11-httpclient/pom.xml", "diffHunk": "@@ -0,0 +1,120 @@\n+<!--\n+  ~ Copyright (c) Microsoft Corporation. All rights reserved.\n+  ~ Licensed under the MIT License.\n+  -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-client-sdk-parent</artifactId>\n+    <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+    <relativePath>../../../pom.client.xml</relativePath>\n+  </parent>\n+\n+  <groupId>com.azure</groupId>\n+  <artifactId>azure-core-http-jdk-httpclient</artifactId>\n+  <packaging>jar</packaging>\n+  <version>1.0.0-beta.1</version> <!-- {x-version-update;com.azure:azure-core-http-jdk-httpclient;current} -->\n+\n+  <name>Microsoft Azure JDK HTTP Client Library</name>\n+  <description>This package contains the Azure HTTP client library using the JDK HttpClient API.</description>\n+  <url>https://github.com/Azure/azure-sdk-for-java</url>\n+\n+  <licenses>\n+    <license>\n+      <name>The MIT License (MIT)</name>\n+      <url>http://opensource.org/licenses/MIT</url>\n+      <distribution>repo</distribution>\n+    </license>\n+  </licenses>\n+\n+  <distributionManagement>\n+    <site>\n+      <id>azure-java-build-docs</id>\n+      <url>${site.url}/site/${project.artifactId}</url>\n+    </site>\n+  </distributionManagement>\n+\n+  <scm>\n+    <url>https://github.com/Azure/azure-sdk-for-java</url>\n+    <connection>scm:git:https://github.com/Azure/azure-sdk-for-java.git</connection>\n+    <developerConnection>scm:git:https://github.com/Azure/azure-sdk-for-java.git</developerConnection>\n+  </scm>\n+\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    <maven.compiler.source>11</maven.compiler.source>\n+    <maven.compiler.target>11</maven.compiler.target>\n+    <legal>\n+      <![CDATA[[INFO] Any downloads listed may be third party software.  Microsoft grants you no rights for third party software.]]></legal>\n+  </properties>\n+\n+  <developers>\n+    <developer>\n+      <id>microsoft</id>\n+      <name>Microsoft</name>\n+    </developer>\n+  </developers>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core</artifactId>\n+      <version>1.3.0-beta.2</version> <!-- {x-version-update;com.azure:azure-core;current} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d147918ced47f684fc645ab0914bfe2277c988"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0Mjk3MjQy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#pullrequestreview-384297242", "createdAt": "2020-03-30T23:13:59Z", "commit": {"oid": "32d147918ced47f684fc645ab0914bfe2277c988"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzoxMzo1OVrOF9_njA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzoxMzo1OVrOF9_njA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0OTc3Mg==", "bodyText": "This should be more flexible in its configuration, if someone is using Java 12+ and set the system property to allow restricted headers we should allow these headers.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r400549772", "createdAt": "2020-03-30T23:13:59Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java", "diffHunk": "@@ -0,0 +1,197 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.jdk.httpclient;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.FluxUtil;\n+import reactor.adapter.JdkFlowAdapter;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URISyntaxException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import java.net.http.HttpRequest.BodyPublisher;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.concurrent.Flow;\n+\n+import static java.net.http.HttpResponse.BodyHandlers.*;\n+import static java.net.http.HttpRequest.BodyPublishers.*;\n+\n+/**\n+ * HttpClient implementation for the JDK 11 HttpClient.\n+ */\n+class JdkAsyncHttpClient implements HttpClient {\n+    private final java.net.http.HttpClient jdk11HttpClient;\n+\n+    private static final Set<String> JDK11_RESTRICTED_HEADERS;\n+    static {\n+        TreeSet<String> treeSet = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d147918ced47f684fc645ab0914bfe2277c988"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1b2d637014efd06f0c078a0ab03f18827c5bb86", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a1b2d637014efd06f0c078a0ab03f18827c5bb86", "committedDate": "2020-04-02T00:27:42Z", "message": "JDKHttpClient: Cleanup and test cases."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86ffa1ec7af769e303225cfd1b49335b99fbcc33", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/86ffa1ec7af769e303225cfd1b49335b99fbcc33", "committedDate": "2020-04-02T00:30:29Z", "message": "sync upstream"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MDQyMjgw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#pullrequestreview-386042280", "createdAt": "2020-04-02T00:46:08Z", "commit": {"oid": "86ffa1ec7af769e303225cfd1b49335b99fbcc33"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwMDo0NjowOFrOF_Xl7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwMDo0NjowOFrOF_Xl7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MTE1MQ==", "bodyText": "This could be made static right?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r401991151", "createdAt": "2020-04-02T00:46:08Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java", "diffHunk": "@@ -0,0 +1,253 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.jdk.httpclient;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n+import reactor.adapter.JdkFlowAdapter;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URISyntaxException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import java.net.http.HttpRequest.BodyPublisher;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.concurrent.Flow;\n+\n+import static java.net.http.HttpResponse.BodyHandlers.ofPublisher;\n+import static java.net.http.HttpRequest.BodyPublishers.fromPublisher;\n+import static java.net.http.HttpRequest.BodyPublishers.noBody;\n+\n+/**\n+ * HttpClient implementation for the JDK HttpClient.\n+ */\n+class JdkAsyncHttpClient implements HttpClient {\n+    private final ClientLogger logger = new ClientLogger(JdkAsyncHttpClient.class);\n+    private final java.net.http.HttpClient jdkHttpClient;\n+    private final int javaVersion;\n+\n+    // These headers are restricted by default in native JDK12 HttpClient.\n+    // These headers can be whitelisted by setting jdk.httpclient.allowRestrictedHeaders\n+    // property in the network properties file: 'JAVA_HOME/conf/net.properties'\n+    // e.g white listing 'host' header.\n+    //\n+    // jdk.httpclient.allowRestrictedHeaders=host\n+    //\n+    private static final Set<String> JDK12_RESTRICTED_HEADERS;\n+    static {\n+        TreeSet<String> treeSet = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n+        treeSet.addAll(Set.of(\"connection\",\n+            \"content-length\",\n+            \"expect\",\n+            \"host\",\n+            \"upgrade\"));\n+        JDK12_RESTRICTED_HEADERS = Collections.unmodifiableSet(treeSet);\n+    }\n+\n+    JdkAsyncHttpClient(java.net.http.HttpClient httpClient) {\n+        this.jdkHttpClient = httpClient;\n+        this.javaVersion = getJavaVersion();\n+        if (javaVersion <= 11) {\n+            logger.logExceptionAsError(\n+                new RuntimeException(\"JdkAsyncHttpClient is not supported in Java version 11 and below.\"));\n+        }\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> send(HttpRequest request) {\n+        return toJdkHttpRequest(request)\n+            .flatMap(jdkRequest -> Mono.fromCompletionStage(jdkHttpClient.sendAsync(jdkRequest, ofPublisher()))\n+                .map(innerResponse -> new JdkHttpResponse(request, innerResponse)));\n+    }\n+\n+    /**\n+     * Converts the given azure-core request to the JDK HttpRequest type.\n+     *\n+     * @param request the azure-core request\n+     * @return the Mono emitting HttpRequest\n+     */\n+    private Mono<java.net.http.HttpRequest> toJdkHttpRequest(HttpRequest request) {\n+        return Mono.fromCallable(() -> {\n+            final java.net.http.HttpRequest.Builder builder = java.net.http.HttpRequest.newBuilder();\n+            try {\n+                builder.uri(request.getUrl().toURI());\n+            } catch (URISyntaxException e) {\n+                throw Exceptions.propagate(e);\n+            }\n+            final HttpHeaders headers = request.getHeaders();\n+            if (headers != null) {\n+                for (HttpHeader header : headers) {\n+                    final String headerName = header.getName();\n+                    if (!JDK12_RESTRICTED_HEADERS.contains(headerName)) {\n+                        final String headerValue = header.getValue();\n+                        builder.setHeader(headerName, headerValue);\n+                    } else {\n+                        logger.logExceptionAsError(\n+                            new IllegalArgumentException(\"The header \" +\n+                                \"'\" + headerName + \"' is restricted by default in JDK HttpClient 12 and above.\" +\n+                                \"(unless it is whitelisted in JAVA_HOME/conf/net.properties)\"));\n+                    }\n+                }\n+            }\n+            switch (request.getHttpMethod()) {\n+                case GET:\n+                    return builder.GET().build();\n+                case HEAD:\n+                    return builder.method(\"HEAD\", noBody()).build();\n+                default:\n+                    final String contentLength = request.getHeaders().getValue(\"content-length\");\n+                    final BodyPublisher bodyPublisher = toBodyPublisher(request.getBody(), contentLength);\n+                    return builder.method(request.getHttpMethod().toString(), bodyPublisher).build();\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Create BodyPublisher from the given java.nio.ByteBuffer publisher.\n+     *\n+     * @param bbPublisher stream of java.nio.ByteBuffer representing request content\n+     * @return the request BodyPublisher\n+     */\n+    private static BodyPublisher toBodyPublisher(Flux<ByteBuffer> bbPublisher, String contentLength) {\n+        if (bbPublisher == null) {\n+            return noBody();\n+        }\n+        final Flow.Publisher<ByteBuffer> bbFlowPublisher = JdkFlowAdapter.publisherToFlowPublisher(bbPublisher);\n+        if (CoreUtils.isNullOrEmpty(contentLength)) {\n+            return fromPublisher(bbFlowPublisher);\n+        } else {\n+            long contentLengthLong = Long.parseLong(contentLength);\n+            if (contentLengthLong < 1) {\n+                return fromPublisher(bbFlowPublisher);\n+            } else {\n+                return fromPublisher(bbFlowPublisher, contentLengthLong);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get the java runtime major version.\n+     *\n+     * @return the java major version\n+     */\n+    private int getJavaVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86ffa1ec7af769e303225cfd1b49335b99fbcc33"}, "originalPosition": 146}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MDQyNDMw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#pullrequestreview-386042430", "createdAt": "2020-04-02T00:46:41Z", "commit": {"oid": "86ffa1ec7af769e303225cfd1b49335b99fbcc33"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62735f0416afe6c8fde54f6e54f5a0b56c7c3fb1", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/62735f0416afe6c8fde54f6e54f5a0b56c7c3fb1", "committedDate": "2020-04-02T05:35:10Z", "message": "JdkHttpClient: Overriding maven compiler release to 11 from 8"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08eaf533a5c0187bfe2f62dfb70f5699db9d56f1", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/08eaf533a5c0187bfe2f62dfb70f5699db9d56f1", "committedDate": "2020-04-02T05:35:43Z", "message": "JdkHttpClient: Supression for ServiceBuilder annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8206b3ee97d39da6fe6c643f826f0c08bba451a", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a8206b3ee97d39da6fe6c643f826f0c08bba451a", "committedDate": "2020-04-02T05:36:20Z", "message": "JdkHttpClient: Address spotbug and checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43bc1ce0d517bd69d92d193c2c26ae60c2392b64", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/43bc1ce0d517bd69d92d193c2c26ae60c2392b64", "committedDate": "2020-04-02T05:40:20Z", "message": "JdkHttpClient: rename dir from azure-core-http-jdk11-httpclient to azure-core-http-jdk-httpclient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f93789748af576719585c500e02637751dfdd40", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5f93789748af576719585c500e02637751dfdd40", "committedDate": "2020-04-02T07:33:48Z", "message": "JdkHttpClient: Updating to latest azure-core version and implementing RestProxyTest contracts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8798554455eb9a9298632966fbde487d47329a0a", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8798554455eb9a9298632966fbde487d47329a0a", "committedDate": "2020-04-02T08:52:17Z", "message": "JdkHttpClient: specifying version for compiler plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ea3086775babf1d4f1eb66fcbfb9817e606e0fd", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3ea3086775babf1d4f1eb66fcbfb9817e606e0fd", "committedDate": "2020-04-02T09:18:23Z", "message": "JdkHttpClient: Updating the README to follow the general readme template, adding connectionTimeout sample to README."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f57a576b48aa918572a5a2a2b00b6189e2492a34", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f57a576b48aa918572a5a2a2b00b6189e2492a34", "committedDate": "2020-04-02T09:36:46Z", "message": "Adding javadoc for ProxyOptions::Type::toProxyType()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "886cc196e3e9533d14c4b30ca1ad824594cb96eb", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/886cc196e3e9533d14c4b30ca1ad824594cb96eb", "committedDate": "2020-04-02T09:55:06Z", "message": "Fixing checkstyle in azure-core okhttp builder"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NjA1MTMw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#pullrequestreview-386605130", "createdAt": "2020-04-02T16:41:07Z", "commit": {"oid": "886cc196e3e9533d14c4b30ca1ad824594cb96eb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c3eb4ce0c6bf0f2cce633d5c586a37b42ea3b5b", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3c3eb4ce0c6bf0f2cce633d5c586a37b42ea3b5b", "committedDate": "2020-04-02T19:09:26Z", "message": "JdkHttpClient: Adding jdk-httpclient to the artifact list in ci.yml (enables release task for this lib)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0331ba085a9f38dfd1e781129ab5e8310d22686", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f0331ba085a9f38dfd1e781129ab5e8310d22686", "committedDate": "2020-04-02T19:10:10Z", "message": "JdkHttpClient: Adding jdk-httpclient to core pom module list"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25fbbc6f2670f63474ab35d0c9e03600cde2eb20", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/25fbbc6f2670f63474ab35d0c9e03600cde2eb20", "committedDate": "2020-04-02T19:11:56Z", "message": "JdkHttpClient: don't ignore header multi-values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b9ffedeea395afba635a2d81ef07e48da460e68", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5b9ffedeea395afba635a2d81ef07e48da460e68", "committedDate": "2020-04-02T19:12:33Z", "message": "JdkHttpClient: Adding code snippet for connectionTimeout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3940840e16c2d546e491673a6e15aabbaa5c6ccc", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3940840e16c2d546e491673a6e15aabbaa5c6ccc", "committedDate": "2020-04-02T19:20:37Z", "message": "JdkHttpClient: Fix code snippet reference"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NzM3ODk3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#pullrequestreview-386737897", "createdAt": "2020-04-02T19:38:33Z", "commit": {"oid": "3940840e16c2d546e491673a6e15aabbaa5c6ccc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "128b25559509e431cd91133d5eb9f487c4659f73", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/128b25559509e431cd91133d5eb9f487c4659f73", "committedDate": "2020-04-02T23:36:59Z", "message": "JdkHttpClient: Override the 1.8 and 11+ profile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "306d959013e8ce5e2b753a78e17e774f3a0ee872", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/306d959013e8ce5e2b753a78e17e774f3a0ee872", "committedDate": "2020-04-03T00:19:05Z", "message": "JdkHttpClient: Ensure README and ReadmeSamples are in sync"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c8ac254a678c0bef51afb5e1ba929ffe7450729", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4c8ac254a678c0bef51afb5e1ba929ffe7450729", "committedDate": "2020-04-03T00:40:55Z", "message": "JdkHttpClient: fix code snippet reference name"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 957, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}