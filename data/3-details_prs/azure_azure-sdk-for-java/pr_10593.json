{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNTEzOTA4", "number": 10593, "title": "[TA] Changes based on V3.0 swagger, etc", "bodyText": "Use V3.0 swagger code base, fixes: #10585, fixes: #8480\nHide public constructor of analyzed result, which is no longer an issue. We will keep constructor design, fixes: #10346\nRenaming:\n\nDetectedLanguage: getScore() to getConfidenceScore()\nCategorizedEntity: getSubCategory() to getSubcategory()\nLinkedEntity: getLinkedEntityMatches() to getMatches()\nDocumentResult to TextAnalyticsResult\nTextAnalyticsException and TextAnalyticsError: getCode() to getErrorCode()\nTextAnalyticsWarning: getCode() to getWarningCode()\n\n\nInternal transfer TextAnalyticsErrorException to HttpResponseException and added tests\nSupport not throws exception directly in asycn client but return it as monoError or fluxError. Added class DocumentInputAsyncTest to support it\nUpdate sync client to make sure the client throws exception.\nAdded one new method getText() to SentenceSentiment\nAdded a new class, TextAnalyticsWarning and one expandatable enum WarningCode\nDeprecated TextDocumentInput(String id, String text, String language) constructor, but added setLanguage() setter since language is optional.\nRemove graphme properties:  removed getGraphemeLength() and getGraphemeOffset() from CategorizedEntity, SentenceSentiment, and LinkedEntityMatch. getGraphemeCount() in TextDocumentStatistics has been renamed to getCharacterCount(). fixes: #10587\nWarningsproperty added to each document-level response object returned from the endpoints. It is a list ofTextAnalyticsWarnings`. fixes: #10586\nAdded CategorizedEntityCollection, KeyPhrasesCollection, LinkedEntityCollection for having getWarnings() to retrieve warnings.\nAdded a new enum value ADDRESS to EntityCategory.\nReplaced all single input asynchronous APIs, e.x.,\n\nTextAnalyticsPagedFlux<CategorizedEntity> recognizeEntities(String document) to Mono<CategorizedEntityCollection> recognizeEntities(String document).\nTextAnalyticsPagedFlux<LinkedEntity> recognizeLinkedEntities(String document) to Mono<LinkedEntityCollection> recognizeLinkedEntities(String document).\nTextAnalyticsPagedFlux<String> extractKeyPhrases(String document) to Mono<KeyPhrasesCollection> extractKeyPhrases(String document).\n\n\nReplaced all single input synchronous APIs, e.x.,\n\nTextAnalyticsPagedIterable<CategorizedEntity> recognizeEntities(String document) to CategorizedEntityCollection recognizeEntities(String document).\nTextAnalyticsPagedIterable<LinkedEntity> recognizeLinkedEntities(String document) to LinkedEntityCollection recognizeLinkedEntities(String document).\nTextAnalyticsPagedIterable<String> extractKeyPhrases(String document) to KeyPhrasesCollection extractKeyPhrases(String document).", "createdAt": "2020-04-29T06:21:14Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593", "merged": true, "mergeCommit": {"oid": "62005e7d01aad535d55815f749daa5b48da53bf4"}, "closed": true, "closedAt": "2020-05-09T04:45:52Z", "author": {"login": "mssfang"}, "timelineItems": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcakP52AH2gAyNDEwNTEzOTA4OjA5YmQ0MmE0MmNiZDg3ZjdhOWMzYzUwYjlkMjgwZWE4Nzg0NzBmYWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfbzCVgH2gAyNDEwNTEzOTA4OmM5ZGQ2YzM2ZWFiOTU0ZjY3ZGUxNzI0MDcxY2Y5YmNhNmViYWYxYTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "09bd42a42cbd87f7a9c3c50b9d280ea878470fae", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/09bd42a42cbd87f7a9c3c50b9d280ea878470fae", "committedDate": "2020-04-23T22:02:04Z", "message": "regenerated code using swagger"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da927543f329c1797ea8c075c36849bb4f1d341f", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/da927543f329c1797ea8c075c36849bb4f1d341f", "committedDate": "2020-04-27T04:33:48Z", "message": "only detected language is not working"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49f05a4fda347dd190e4dfa2d9fbf6cdba537176", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/49f05a4fda347dd190e4dfa2d9fbf6cdba537176", "committedDate": "2020-04-29T06:14:47Z", "message": "everything works beside exception thrown has not been take care"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bbf324ab605006c9b097a7b02b6c08a309a9385", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4bbf324ab605006c9b097a7b02b6c08a309a9385", "committedDate": "2020-04-30T05:00:00Z", "message": "throw HttpResponseException and added tests corresponding to it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41748cbb5344a0b20c976b9e61f47cb335710293", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/41748cbb5344a0b20c976b9e61f47cb335710293", "committedDate": "2020-04-30T05:26:38Z", "message": "update readme with embededme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8de596aa5068fefdd9f8fdade2e11f18281d54e8", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8de596aa5068fefdd9f8fdade2e11f18281d54e8", "committedDate": "2020-04-30T17:48:50Z", "message": "subCategory, sub-category to subcategory"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODY3NzY5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#pullrequestreview-403867769", "createdAt": "2020-04-30T20:51:01Z", "commit": {"oid": "8de596aa5068fefdd9f8fdade2e11f18281d54e8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo1MTowMVrOGO53Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo1MTowMVrOGO53Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4MTI5MA==", "bodyText": "Not so sure, but I see that AnalyzeSentimentResultImpl isn't a generated class but we still have it under implementation.models package?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r418281290", "createdAt": "2020-04-30T20:51:01Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -119,7 +123,7 @@\n             analyzeSentimentResults.add(convertToAnalyzeSentimentResult(documentSentiment));\n         }\n         for (DocumentError documentError : sentimentResponse.getErrors()) {\n-            analyzeSentimentResults.add(new AnalyzeSentimentResult(documentError.getId(), null,\n+            analyzeSentimentResults.add(new AnalyzeSentimentResultImpl(documentError.getId(), null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8de596aa5068fefdd9f8fdade2e11f18281d54e8"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e1def838b46e56a87cd855e70486af5ea909452", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8e1def838b46e56a87cd855e70486af5ea909452", "committedDate": "2020-05-01T05:04:57Z", "message": "not throw exception but return it for async apis and added tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a291299dd226cb77c73674963582984ab5580411", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a291299dd226cb77c73674963582984ab5580411", "committedDate": "2020-05-01T07:52:25Z", "message": "add text to sentenceSentiment and add warning support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35656e916f51de922508097123cab21513543620", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/35656e916f51de922508097123cab21513543620", "committedDate": "2020-05-01T07:57:48Z", "message": "checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MjE2MzY5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#pullrequestreview-404216369", "createdAt": "2020-05-01T15:17:01Z", "commit": {"oid": "35656e916f51de922508097123cab21513543620"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNToxNzowMVrOGPMhJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNTo1MToxMFrOGPNejg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU4NjkxNg==", "bodyText": "Just to confirm I'm understanding this: For single document calls, you're now throwing on errors?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r418586916", "createdAt": "2020-05-01T15:17:01Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/RecognizeLinkedEntityAsyncClient.java", "diffHunk": "@@ -194,15 +202,22 @@\n      */\n     private Mono<TextAnalyticsPagedResponse<RecognizeLinkedEntitiesResult>> getRecognizedLinkedEntitiesResponseInPage(\n         Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context) {\n-        return service.entitiesLinkingWithRestResponseAsync(\n+        return service.entitiesLinkingWithResponseAsync(\n             new MultiLanguageBatchInput().setDocuments(Transforms.toMultiLanguageInput(documents)),\n+            context.addData(AZ_TRACING_NAMESPACE_KEY, COGNITIVE_TRACING_NAMESPACE_VALUE),\n             options == null ? null : options.getModelVersion(),\n-            options == null ? null : options.isIncludeStatistics(),\n-            context.addData(AZ_TRACING_NAMESPACE_KEY, COGNITIVE_TRACING_NAMESPACE_VALUE))\n+            options == null ? null : options.isIncludeStatistics())\n             .doOnSubscribe(ignoredValue -> logger.info(\"A batch of documents - {}\", documents.toString()))\n             .doOnSuccess(response -> logger.info(\"Recognized linked entities for a batch of documents - {}\",\n                 response.getValue()))\n             .doOnError(error -> logger.warning(\"Failed to recognize linked entities - {}\", error))\n-            .map(this::toTextAnalyticsPagedResponse);\n+            .map(this::toTextAnalyticsPagedResponse)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35656e916f51de922508097123cab21513543620"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU4NzE2Mw==", "bodyText": "Are you trying to fit this todo in your pr?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r418587163", "createdAt": "2020-05-01T15:17:36Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -162,15 +163,19 @@ public TextAnalyticsServiceVersion getServiceVersion() {\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<DetectedLanguage> detectLanguage(String document, String countryHint) {\n-        Objects.requireNonNull(document, \"'document' cannot be null.\");\n-        return detectLanguageBatch(Collections.singletonList(document), countryHint, null)\n-            .map(detectLanguageResult -> {\n-                if (detectLanguageResult.isError()) {\n-                    throw logger.logExceptionAsError(\n-                        Transforms.toTextAnalyticsException(detectLanguageResult.getError()));\n-                }\n-                return detectLanguageResult.getPrimaryLanguage();\n-            }).last();\n+        try {\n+            Objects.requireNonNull(document, \"'document' cannot be null.\");\n+            return detectLanguageBatch(Collections.singletonList(document), countryHint, null)\n+                .map(detectLanguageResult -> {\n+                    if (detectLanguageResult.isError()) {\n+                        // TODO: throw HttpResponseException instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35656e916f51de922508097123cab21513543620"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU4ODc0MQ==", "bodyText": "It appears you've removed the check for null documents and haven't added in a call to your inputDocumentsValidation utility function (also seeing other instances of this)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r418588741", "createdAt": "2020-05-01T15:21:03Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -512,7 +516,6 @@ public TextAnalyticsServiceVersion getServiceVersion() {\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n     public TextAnalyticsPagedFlux<LinkedEntity> recognizeLinkedEntities(String document, String language) {\n-        Objects.requireNonNull(document, \"'document' cannot be null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35656e916f51de922508097123cab21513543620"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU4OTIyNg==", "bodyText": "Wouldn't it be better to make a call to inputDocumentsValidation here instead of calling Objects.requireNonNull? You can either make your inputDpcumentsValidation function take in strings as well as iterable of strings with an overload, or pass in the document in an array of 1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r418589226", "createdAt": "2020-05-01T15:22:05Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -853,15 +851,19 @@ public TextAnalyticsServiceVersion getServiceVersion() {\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<DocumentSentiment> analyzeSentiment(String document, String language) {\n-        Objects.requireNonNull(document, \"'document' cannot be null.\");\n-        return analyzeSentimentBatch(Collections.singletonList(document), language, null)\n-            .map(sentimentResult -> {\n-                if (sentimentResult.isError()) {\n-                    throw logger.logExceptionAsError(Transforms.toTextAnalyticsException(sentimentResult.getError()));\n-                }\n-\n-                return sentimentResult.getDocumentSentiment();\n-            }).last();\n+        try {\n+            Objects.requireNonNull(document, \"'document' cannot be null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35656e916f51de922508097123cab21513543620"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5MDY4OQ==", "bodyText": "Seems like this random whitespace change has made it's way into the PR, can you remove these?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r418590689", "createdAt": "2020-05-01T15:25:19Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/implementation/TextAnalyticsClientImpl.java", "diffHunk": "@@ -48,7 +49,7 @@\n \n     /**\n      * Gets Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com).\n-     *\n+     * ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35656e916f51de922508097123cab21513543620"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5MTQ5NQ==", "bodyText": "What is this context change?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r418591495", "createdAt": "2020-05-01T15:27:03Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/implementation/TextAnalyticsClientImpl.java", "diffHunk": "@@ -100,229 +102,197 @@ public TextAnalyticsClientImpl(HttpPipeline httpPipeline) {\n      * The interface defining all the services for TextAnalyticsClient to be\n      * used by the proxy service to perform REST calls.\n      */\n-    @Host(\"{Endpoint}/text/analytics/v3.0-preview.1\")\n+    @Host(\"{Endpoint}/text/analytics/v3.0\")\n     @ServiceInterface(name = \"TextAnalyticsClient\")\n     private interface TextAnalyticsClientService {\n-        @Post(\"entities/recognition/general\")\n+        @Post(\"/entities/recognition/general\")\n         @ExpectedResponses({200})\n-        @UnexpectedResponseExceptionType(HttpResponseException.class)\n-        Mono<SimpleResponse<EntitiesResult>> entitiesRecognitionGeneral(@HostParam(\"Endpoint\") String endpoint, @QueryParam(\"model-version\") String modelVersion, @QueryParam(\"showStats\") Boolean showStats, @BodyParam(\"application/json; charset=utf-8\") MultiLanguageBatchInput input, Context context);\n+        @UnexpectedResponseExceptionType(TextAnalyticsErrorException.class)\n+        Mono<SimpleResponse<EntitiesResult>> entitiesRecognitionGeneral(@HostParam(\"Endpoint\") String endpoint, @QueryParam(\"model-version\") String modelVersion, @QueryParam(\"showStats\") Boolean showStats, @BodyParam(\"application/json\") MultiLanguageBatchInput input, Context context);\n \n-        @Post(\"entities/recognition/pii\")\n+        @Post(\"/entities/linking\")\n         @ExpectedResponses({200})\n-        @UnexpectedResponseExceptionType(HttpResponseException.class)\n-        Mono<SimpleResponse<EntitiesResult>> entitiesRecognitionPii(@HostParam(\"Endpoint\") String endpoint, @QueryParam(\"model-version\") String modelVersion, @QueryParam(\"showStats\") Boolean showStats, @BodyParam(\"application/json; charset=utf-8\") MultiLanguageBatchInput input, Context context);\n+        @UnexpectedResponseExceptionType(TextAnalyticsErrorException.class)\n+        Mono<SimpleResponse<EntityLinkingResult>> entitiesLinking(@HostParam(\"Endpoint\") String endpoint, @QueryParam(\"model-version\") String modelVersion, @QueryParam(\"showStats\") Boolean showStats, @BodyParam(\"application/json\") MultiLanguageBatchInput input, Context context);\n \n-        @Post(\"entities/linking\")\n+        @Post(\"/keyPhrases\")\n         @ExpectedResponses({200})\n-        @UnexpectedResponseExceptionType(HttpResponseException.class)\n-        Mono<SimpleResponse<EntityLinkingResult>> entitiesLinking(@HostParam(\"Endpoint\") String endpoint, @QueryParam(\"model-version\") String modelVersion, @QueryParam(\"showStats\") Boolean showStats, @BodyParam(\"application/json; charset=utf-8\") MultiLanguageBatchInput input, Context context);\n+        @UnexpectedResponseExceptionType(TextAnalyticsErrorException.class)\n+        Mono<SimpleResponse<KeyPhraseResult>> keyPhrases(@HostParam(\"Endpoint\") String endpoint, @QueryParam(\"model-version\") String modelVersion, @QueryParam(\"showStats\") Boolean showStats, @BodyParam(\"application/json\") MultiLanguageBatchInput input, Context context);\n \n-        @Post(\"keyPhrases\")\n+        @Post(\"/languages\")\n         @ExpectedResponses({200})\n-        @UnexpectedResponseExceptionType(HttpResponseException.class)\n-        Mono<SimpleResponse<KeyPhraseResult>> keyPhrases(@HostParam(\"Endpoint\") String endpoint, @QueryParam(\"model-version\") String modelVersion, @QueryParam(\"showStats\") Boolean showStats, @BodyParam(\"application/json; charset=utf-8\") MultiLanguageBatchInput input, Context context);\n+        @UnexpectedResponseExceptionType(TextAnalyticsErrorException.class)\n+        Mono<SimpleResponse<LanguageResult>> languages(@HostParam(\"Endpoint\") String endpoint, @QueryParam(\"model-version\") String modelVersion, @QueryParam(\"showStats\") Boolean showStats, @BodyParam(\"application/json\") LanguageBatchInput input, Context context);\n \n-        @Post(\"languages\")\n+        @Post(\"/sentiment\")\n         @ExpectedResponses({200})\n-        @UnexpectedResponseExceptionType(HttpResponseException.class)\n-        Mono<SimpleResponse<LanguageResult>> languages(@HostParam(\"Endpoint\") String endpoint, @QueryParam(\"model-version\") String modelVersion, @QueryParam(\"showStats\") Boolean showStats, @BodyParam(\"application/json; charset=utf-8\") LanguageBatchInput input, Context context);\n-\n-        @Post(\"sentiment\")\n-        @ExpectedResponses({200})\n-        @UnexpectedResponseExceptionType(HttpResponseException.class)\n-        Mono<SimpleResponse<SentimentResponse>> sentiment(@HostParam(\"Endpoint\") String endpoint, @QueryParam(\"model-version\") String modelVersion, @QueryParam(\"showStats\") Boolean showStats, @BodyParam(\"application/json; charset=utf-8\") MultiLanguageBatchInput input, Context context);\n+        @UnexpectedResponseExceptionType(TextAnalyticsErrorException.class)\n+        Mono<SimpleResponse<SentimentResponse>> sentiment(@HostParam(\"Endpoint\") String endpoint, @QueryParam(\"model-version\") String modelVersion, @QueryParam(\"showStats\") Boolean showStats, @BodyParam(\"application/json\") MultiLanguageBatchInput input, Context context);\n     }\n \n     /**\n-     * Named Entity Recognition\n      * The API returns a list of general named entities in a given document. For the list of supported entity types, check &lt;a href=\"https://aka.ms/taner\"&gt;Supported Entity Types in Text Analytics API&lt;/a&gt;. See the &lt;a href=\"https://aka.ms/talangs\"&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.\n-     *\n-     * @param input Collection of documents to analyze.\n-     * @param context The context to associate with this operation.\n+     * \n+     * @param input Contains a set of input documents to be analyzed by the service.\n+     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.\n+     * @param showStats (Optional) if set to true, response will contain input and document level statistics.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n-     * @return a Mono which performs the network request upon subscription.\n+     * @throws TextAnalyticsErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the response.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<SimpleResponse<EntitiesResult>> entitiesRecognitionGeneralWithRestResponseAsync(MultiLanguageBatchInput input, Context context) {\n-        final String modelVersion = null;\n-        final Boolean showStats = null;\n-        return service.entitiesRecognitionGeneral(this.getEndpoint(), modelVersion, showStats, input, context);\n+    public Mono<SimpleResponse<EntitiesResult>> entitiesRecognitionGeneralWithResponseAsync(MultiLanguageBatchInput input, String modelVersion, Boolean showStats) {\n+        return FluxUtil.withContext(context -> service.entitiesRecognitionGeneral(this.getEndpoint(), modelVersion, showStats, input, context));\n     }\n \n     /**\n-     * Named Entity Recognition\n      * The API returns a list of general named entities in a given document. For the list of supported entity types, check &lt;a href=\"https://aka.ms/taner\"&gt;Supported Entity Types in Text Analytics API&lt;/a&gt;. See the &lt;a href=\"https://aka.ms/talangs\"&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.\n-     *\n-     * @param input Collection of documents to analyze.\n+     * \n+     * @param input Contains a set of input documents to be analyzed by the service.\n+     * @param context The context to associate with this operation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35656e916f51de922508097123cab21513543620"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5MTk0NA==", "bodyText": "Why is Java diverging in naming here, for python we have it as RecognizeLinkedEntitiesResult", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r418591944", "createdAt": "2020-05-01T15:28:11Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/implementation/TextAnalyticsClientImpl.java", "diffHunk": "@@ -100,229 +102,197 @@ public TextAnalyticsClientImpl(HttpPipeline httpPipeline) {\n      * The interface defining all the services for TextAnalyticsClient to be\n      * used by the proxy service to perform REST calls.\n      */\n-    @Host(\"{Endpoint}/text/analytics/v3.0-preview.1\")\n+    @Host(\"{Endpoint}/text/analytics/v3.0\")\n     @ServiceInterface(name = \"TextAnalyticsClient\")\n     private interface TextAnalyticsClientService {\n-        @Post(\"entities/recognition/general\")\n+        @Post(\"/entities/recognition/general\")\n         @ExpectedResponses({200})\n-        @UnexpectedResponseExceptionType(HttpResponseException.class)\n-        Mono<SimpleResponse<EntitiesResult>> entitiesRecognitionGeneral(@HostParam(\"Endpoint\") String endpoint, @QueryParam(\"model-version\") String modelVersion, @QueryParam(\"showStats\") Boolean showStats, @BodyParam(\"application/json; charset=utf-8\") MultiLanguageBatchInput input, Context context);\n+        @UnexpectedResponseExceptionType(TextAnalyticsErrorException.class)\n+        Mono<SimpleResponse<EntitiesResult>> entitiesRecognitionGeneral(@HostParam(\"Endpoint\") String endpoint, @QueryParam(\"model-version\") String modelVersion, @QueryParam(\"showStats\") Boolean showStats, @BodyParam(\"application/json\") MultiLanguageBatchInput input, Context context);\n \n-        @Post(\"entities/recognition/pii\")\n+        @Post(\"/entities/linking\")\n         @ExpectedResponses({200})\n-        @UnexpectedResponseExceptionType(HttpResponseException.class)\n-        Mono<SimpleResponse<EntitiesResult>> entitiesRecognitionPii(@HostParam(\"Endpoint\") String endpoint, @QueryParam(\"model-version\") String modelVersion, @QueryParam(\"showStats\") Boolean showStats, @BodyParam(\"application/json; charset=utf-8\") MultiLanguageBatchInput input, Context context);\n+        @UnexpectedResponseExceptionType(TextAnalyticsErrorException.class)\n+        Mono<SimpleResponse<EntityLinkingResult>> entitiesLinking(@HostParam(\"Endpoint\") String endpoint, @QueryParam(\"model-version\") String modelVersion, @QueryParam(\"showStats\") Boolean showStats, @BodyParam(\"application/json\") MultiLanguageBatchInput input, Context context);\n \n-        @Post(\"entities/linking\")\n+        @Post(\"/keyPhrases\")\n         @ExpectedResponses({200})\n-        @UnexpectedResponseExceptionType(HttpResponseException.class)\n-        Mono<SimpleResponse<EntityLinkingResult>> entitiesLinking(@HostParam(\"Endpoint\") String endpoint, @QueryParam(\"model-version\") String modelVersion, @QueryParam(\"showStats\") Boolean showStats, @BodyParam(\"application/json; charset=utf-8\") MultiLanguageBatchInput input, Context context);\n+        @UnexpectedResponseExceptionType(TextAnalyticsErrorException.class)\n+        Mono<SimpleResponse<KeyPhraseResult>> keyPhrases(@HostParam(\"Endpoint\") String endpoint, @QueryParam(\"model-version\") String modelVersion, @QueryParam(\"showStats\") Boolean showStats, @BodyParam(\"application/json\") MultiLanguageBatchInput input, Context context);\n \n-        @Post(\"keyPhrases\")\n+        @Post(\"/languages\")\n         @ExpectedResponses({200})\n-        @UnexpectedResponseExceptionType(HttpResponseException.class)\n-        Mono<SimpleResponse<KeyPhraseResult>> keyPhrases(@HostParam(\"Endpoint\") String endpoint, @QueryParam(\"model-version\") String modelVersion, @QueryParam(\"showStats\") Boolean showStats, @BodyParam(\"application/json; charset=utf-8\") MultiLanguageBatchInput input, Context context);\n+        @UnexpectedResponseExceptionType(TextAnalyticsErrorException.class)\n+        Mono<SimpleResponse<LanguageResult>> languages(@HostParam(\"Endpoint\") String endpoint, @QueryParam(\"model-version\") String modelVersion, @QueryParam(\"showStats\") Boolean showStats, @BodyParam(\"application/json\") LanguageBatchInput input, Context context);\n \n-        @Post(\"languages\")\n+        @Post(\"/sentiment\")\n         @ExpectedResponses({200})\n-        @UnexpectedResponseExceptionType(HttpResponseException.class)\n-        Mono<SimpleResponse<LanguageResult>> languages(@HostParam(\"Endpoint\") String endpoint, @QueryParam(\"model-version\") String modelVersion, @QueryParam(\"showStats\") Boolean showStats, @BodyParam(\"application/json; charset=utf-8\") LanguageBatchInput input, Context context);\n-\n-        @Post(\"sentiment\")\n-        @ExpectedResponses({200})\n-        @UnexpectedResponseExceptionType(HttpResponseException.class)\n-        Mono<SimpleResponse<SentimentResponse>> sentiment(@HostParam(\"Endpoint\") String endpoint, @QueryParam(\"model-version\") String modelVersion, @QueryParam(\"showStats\") Boolean showStats, @BodyParam(\"application/json; charset=utf-8\") MultiLanguageBatchInput input, Context context);\n+        @UnexpectedResponseExceptionType(TextAnalyticsErrorException.class)\n+        Mono<SimpleResponse<SentimentResponse>> sentiment(@HostParam(\"Endpoint\") String endpoint, @QueryParam(\"model-version\") String modelVersion, @QueryParam(\"showStats\") Boolean showStats, @BodyParam(\"application/json\") MultiLanguageBatchInput input, Context context);\n     }\n \n     /**\n-     * Named Entity Recognition\n      * The API returns a list of general named entities in a given document. For the list of supported entity types, check &lt;a href=\"https://aka.ms/taner\"&gt;Supported Entity Types in Text Analytics API&lt;/a&gt;. See the &lt;a href=\"https://aka.ms/talangs\"&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.\n-     *\n-     * @param input Collection of documents to analyze.\n-     * @param context The context to associate with this operation.\n+     * \n+     * @param input Contains a set of input documents to be analyzed by the service.\n+     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.\n+     * @param showStats (Optional) if set to true, response will contain input and document level statistics.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n-     * @return a Mono which performs the network request upon subscription.\n+     * @throws TextAnalyticsErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the response.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<SimpleResponse<EntitiesResult>> entitiesRecognitionGeneralWithRestResponseAsync(MultiLanguageBatchInput input, Context context) {\n-        final String modelVersion = null;\n-        final Boolean showStats = null;\n-        return service.entitiesRecognitionGeneral(this.getEndpoint(), modelVersion, showStats, input, context);\n+    public Mono<SimpleResponse<EntitiesResult>> entitiesRecognitionGeneralWithResponseAsync(MultiLanguageBatchInput input, String modelVersion, Boolean showStats) {\n+        return FluxUtil.withContext(context -> service.entitiesRecognitionGeneral(this.getEndpoint(), modelVersion, showStats, input, context));\n     }\n \n     /**\n-     * Named Entity Recognition\n      * The API returns a list of general named entities in a given document. For the list of supported entity types, check &lt;a href=\"https://aka.ms/taner\"&gt;Supported Entity Types in Text Analytics API&lt;/a&gt;. See the &lt;a href=\"https://aka.ms/talangs\"&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.\n-     *\n-     * @param input Collection of documents to analyze.\n+     * \n+     * @param input Contains a set of input documents to be analyzed by the service.\n+     * @param context The context to associate with this operation.\n      * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.\n      * @param showStats (Optional) if set to true, response will contain input and document level statistics.\n-     * @param context The context to associate with this operation.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n-     * @return a Mono which performs the network request upon subscription.\n+     * @throws TextAnalyticsErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the response.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<SimpleResponse<EntitiesResult>> entitiesRecognitionGeneralWithRestResponseAsync(MultiLanguageBatchInput input, String modelVersion, Boolean showStats, Context context) {\n+    public Mono<SimpleResponse<EntitiesResult>> entitiesRecognitionGeneralWithResponseAsync(MultiLanguageBatchInput input, Context context, String modelVersion, Boolean showStats) {\n         return service.entitiesRecognitionGeneral(this.getEndpoint(), modelVersion, showStats, input, context);\n     }\n \n     /**\n-     * Entities containing personal information\n-     * The API returns a list of entities with personal information (\\\"SSN\\\", \\\"Bank Account\\\" etc) in the document. For the list of supported entity types, check &lt;a href=\"https://aka.ms/tanerpii\"&gt;Supported Entity Types in Text Analytics API&lt;/a&gt;. See the &lt;a href=\"https://aka.ms/talangs\"&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.\n-     *\n-     * @param input Collection of documents to analyze.\n-     * @param context The context to associate with this operation.\n-     * @throws IllegalArgumentException thrown if parameters fail the validation.\n-     * @return a Mono which performs the network request upon subscription.\n-     */\n-    @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<SimpleResponse<EntitiesResult>> entitiesRecognitionPiiWithRestResponseAsync(MultiLanguageBatchInput input, Context context) {\n-        final String modelVersion = null;\n-        final Boolean showStats = null;\n-        return service.entitiesRecognitionPii(this.getEndpoint(), modelVersion, showStats, input, context);\n-    }\n-\n-    /**\n-     * Entities containing personal information\n-     * The API returns a list of entities with personal information (\\\"SSN\\\", \\\"Bank Account\\\" etc) in the document. For the list of supported entity types, check &lt;a href=\"https://aka.ms/tanerpii\"&gt;Supported Entity Types in Text Analytics API&lt;/a&gt;. See the &lt;a href=\"https://aka.ms/talangs\"&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.\n-     *\n-     * @param input Collection of documents to analyze.\n+     * The API returns a list of recognized entities with links to a well-known knowledge base. See the &lt;a href=\"https://aka.ms/talangs\"&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.\n+     * \n+     * @param input Contains a set of input documents to be analyzed by the service.\n      * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.\n      * @param showStats (Optional) if set to true, response will contain input and document level statistics.\n-     * @param context The context to associate with this operation.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n-     * @return a Mono which performs the network request upon subscription.\n+     * @throws TextAnalyticsErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the response.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<SimpleResponse<EntitiesResult>> entitiesRecognitionPiiWithRestResponseAsync(MultiLanguageBatchInput input, String modelVersion, Boolean showStats, Context context) {\n-        return service.entitiesRecognitionPii(this.getEndpoint(), modelVersion, showStats, input, context);\n+    public Mono<SimpleResponse<EntityLinkingResult>> entitiesLinkingWithResponseAsync(MultiLanguageBatchInput input, String modelVersion, Boolean showStats) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35656e916f51de922508097123cab21513543620"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5MzgxNw==", "bodyText": "Should the input parameter score be changed to confidenceScore as well?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r418593817", "createdAt": "2020-05-01T15:32:10Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/implementation/models/DetectedLanguageImpl.java", "diffHunk": "@@ -0,0 +1,74 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.implementation.models;\n+\n+import com.azure.ai.textanalytics.models.DetectedLanguage;\n+import com.azure.core.annotation.Immutable;\n+\n+/**\n+ * The {@link DetectedLanguage} model.\n+ */\n+@Immutable\n+public final class DetectedLanguageImpl implements DetectedLanguage {\n+    /*\n+     * Long name of a detected language (e.g. English, French).\n+     */\n+    private final String name;\n+\n+    /*\n+     * A two letter representation of the detected language according to the\n+     * ISO 639-1 standard (e.g. en, fr).\n+     */\n+    private final String iso6391Name;\n+\n+    /*\n+     * A confidence score between 0 and 1. Scores close to 1 indicate 100%\n+     * certainty that the identified language is true.\n+     */\n+    private final double confidenceScore;\n+\n+    /**\n+     * Creates a {@link DetectedLanguage} model that describes detected language content.\n+     *\n+     * @param name The name of a detected language.\n+     * @param iso6391Name A two letter representation of the detected language according to the ISO 639-1 standard.\n+     * @param score A confidence score between 0 and 1.\n+     */\n+    public DetectedLanguageImpl(String name, String iso6391Name, double score) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35656e916f51de922508097123cab21513543620"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5NTYwOQ==", "bodyText": "nitpick: Since you're changing the getters and setters of InnerError to have the casing Innererror, it might be worth it to change this property", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r418595609", "createdAt": "2020-05-01T15:36:11Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/implementation/models/InnerError.java", "diffHunk": "@@ -43,27 +40,21 @@\n     /*\n      * Inner error contains more specific information.\n      */\n-    @JsonProperty(value = \"innerError\")\n-    private InnerError innerError;\n+    @JsonProperty(value = \"innererror\")\n+    private InnerError innererror;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35656e916f51de922508097123cab21513543620"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5ODUwMg==", "bodyText": "in python we call this property matches, just want to make sure it's ok that Java diverges", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r418598502", "createdAt": "2020-05-01T15:42:02Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/implementation/models/LinkedEntityImpl.java", "diffHunk": "@@ -0,0 +1,119 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.implementation.models;\n+\n+import com.azure.ai.textanalytics.models.LinkedEntity;\n+import com.azure.ai.textanalytics.models.LinkedEntityMatch;\n+import com.azure.core.annotation.Immutable;\n+import com.azure.core.util.IterableStream;\n+\n+/**\n+ * The {@link LinkedEntityImpl} model.\n+ */\n+@Immutable\n+public final class LinkedEntityImpl implements LinkedEntity {\n+    /*\n+     * Entity Linking formal name.\n+     */\n+    private final String name;\n+\n+    /*\n+     * List of instances this entity appears in the text.\n+     */\n+    private final IterableStream<LinkedEntityMatch> linkedEntityMatches;\n+\n+    /*\n+     * Language used in the data source.\n+     */\n+    private final String language;\n+\n+    /*\n+     * Unique identifier of the recognized entity from the data source.\n+     */\n+    private final String dataSourceEntityId;\n+\n+    /*\n+     * URL for the entity's page from the data source.\n+     */\n+    private final String url;\n+\n+    /*\n+     * Data source used to extract entity linking, such as Wiki/Bing etc.\n+     */\n+    private final String dataSource;\n+\n+    /**\n+     * Creates a {@link LinkedEntityImpl} model that describes linked entity.\n+     *\n+     * @param name The entity Linking formal name.\n+     * @param linkedEntityMatches A list of instances this entity appears in the text.\n+     * @param language The language used in the data source.\n+     * @param dataSourceEntityId Unique identifier of the recognized entity from the data source.\n+     * @param url URL for the entity's page from the data source.\n+     * @param dataSource The data source used to extract entity linking, such as Wiki/Bing etc.\n+     */\n+    public LinkedEntityImpl(String name, IterableStream<LinkedEntityMatch> linkedEntityMatches, String language,\n+                            String dataSourceEntityId, String url, String dataSource) {\n+        this.name = name;\n+        this.linkedEntityMatches = linkedEntityMatches;\n+        this.language = language;\n+        this.dataSourceEntityId = dataSourceEntityId;\n+        this.url = url;\n+        this.dataSource = dataSource;\n+    }\n+\n+    /**\n+     * Get the name property: Entity Linking formal name.\n+     *\n+     * @return The name value.\n+     */\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+    /**\n+     * Get the linkedEntityMatches property: List of instances this entity appears in the text.\n+     *\n+     * @return The linkedEntityMatches value.\n+     */\n+    public IterableStream<LinkedEntityMatch> getLinkedEntityMatches() {\n+        return this.linkedEntityMatches;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35656e916f51de922508097123cab21513543620"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYwMjYzOA==", "bodyText": "Can you add a test for warnings? We're only able to add it for extract key phrases, but this is the python test: https://github.com/Azure/azure-sdk-for-python/blob/9da31763f9809305c4e04ac41b7a6a995dcdeb9e/sdk/textanalytics/azure-ai-textanalytics/tests/test_extract_key_phrases.py#L411", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r418602638", "createdAt": "2020-05-01T15:51:10Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/DocumentInputTest.java", "diffHunk": "@@ -42,29 +42,29 @@ protected static void afterTest() {\n \n     // Detect language\n     /**\n-     * Verifies that a null pointer exception is thrown when null document is given for\n+     * Verifies that a {@link NullPointerException} is thrown when null document is given for\n      * {@link TextAnalyticsClient#detectLanguage(String)}\n      */\n     @Test\n-    public void detectLanguagesNullInput() {\n+    public void detectLanguageNullInput() {\n         Exception exception = assertThrows(NullPointerException.class, () ->\n             client.detectLanguage(null));\n         assertTrue(INVALID_DOCUMENT_NPE_MESSAGE.equals(exception.getMessage()));\n     }\n \n     /**\n-     * Verifies that a null pointer exception is thrown when null document is given for\n+     * Verifies that a {@link NullPointerException} is thrown when null document is given for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35656e916f51de922508097123cab21513543620"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "967f64930667b3a2d13e216d9f1311b3124eb8c7", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/967f64930667b3a2d13e216d9f1311b3124eb8c7", "committedDate": "2020-05-01T16:59:38Z", "message": "renaming DocumentResult to TAResult. Add new entity, address to entity enum"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MjgzNzQ2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#pullrequestreview-404283746", "createdAt": "2020-05-01T17:18:43Z", "commit": {"oid": "967f64930667b3a2d13e216d9f1311b3124eb8c7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNzoxODo0M1rOGPP2yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNzoxODo0M1rOGPP2yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY0MTYwOQ==", "bodyText": "Do we need these both?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r418641609", "createdAt": "2020-05-01T17:18:43Z", "author": {"login": "samvaity"}, "path": "sdk/parents/azure-client-sdk-parent/pom.xml", "diffHunk": "@@ -1074,6 +1074,7 @@\n                 --add-opens com.azure.core/com.azure.core.implementation.serializer=ALL-UNNAMED\n                 --add-opens com.azure.ai.formrecognizer/com.azure.ai.formrecognizer=ALL-UNNAMED\n                 --add-opens com.azure.ai.textanalytics/com.azure.ai.textanalytics=ALL-UNNAMED", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967f64930667b3a2d13e216d9f1311b3124eb8c7"}, "originalPosition": 3}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a870de624e91b62c16580b049a2ab95322dbc6d5", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a870de624e91b62c16580b049a2ab95322dbc6d5", "committedDate": "2020-05-04T09:51:27Z", "message": "remove graphe_ properties and rename graphe_ct to characterCount"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02af7a5c0e9356b5217b0614117d7159f33c8ab9", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/02af7a5c0e9356b5217b0614117d7159f33c8ab9", "committedDate": "2020-05-04T09:52:07Z", "message": "update readme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bee8c7d8926cd5cdfd9598b5ce2edf74dd9ed9c9", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bee8c7d8926cd5cdfd9598b5ce2edf74dd9ed9c9", "committedDate": "2020-05-06T16:55:44Z", "message": "not explore interface but class for models and warning feature"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5421653bc38cff8f86978cea39759998da25820", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d5421653bc38cff8f86978cea39759998da25820", "committedDate": "2020-05-06T17:01:17Z", "message": "checkstyle and readme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "083182b996fc4bff5c43a6c372a33c297edc4df5", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/083182b996fc4bff5c43a6c372a33c297edc4df5", "committedDate": "2020-05-07T02:53:51Z", "message": "api review feedbacks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7c00fb37d96722230df2d1e010a2c5a0be7851e", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a7c00fb37d96722230df2d1e010a2c5a0be7851e", "committedDate": "2020-05-07T02:57:22Z", "message": "checkstyles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0c0ce10c3467c79dc62a10181401c0aa33736e42", "committedDate": "2020-05-07T04:55:09Z", "message": "rename getCode() to getErrorCode for Error type, getWarningCode() for Warning type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NTY0MTE1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#pullrequestreview-407564115", "createdAt": "2020-05-07T15:03:48Z", "commit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNTowMzo0OVrOGSC_PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNToyMDoyN1rOGSDuEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU3NjUwOQ==", "bodyText": "you should add to the docstring that it also contains warnings", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r421576509", "createdAt": "2020-05-07T15:03:49Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsClient.java", "diffHunk": "@@ -255,14 +249,14 @@ public DetectedLanguage detectLanguage(String document, String countryHint) {\n      * For text length limits, maximum batch size, and supported text encoding, see\n      * <a href=\"https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits\">data limits</a>.\n      *\n-     * @return A {@link TextAnalyticsPagedIterable} contains a list of\n+     * @return A {@link CategorizedEntityCollection} contains a list of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU4MTM3NQ==", "bodyText": "Should subcategory also be of type enum? (I'm just not sure where the team landed, so could definitely be wrong here)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r421581375", "createdAt": "2020-05-07T15:10:33Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/CategorizedEntity.java", "diffHunk": "@@ -3,49 +3,81 @@\n \n package com.azure.ai.textanalytics.models;\n \n+import com.azure.core.annotation.Immutable;\n+\n /**\n  * The {@link CategorizedEntity} model.\n  */\n-public interface CategorizedEntity {\n-    /**\n-     * Get the text property: Categorized entity text as appears in the request.\n-     *\n-     * @return The text value.\n+@Immutable\n+public final class CategorizedEntity {\n+    /*\n+     * CategorizedEntity text as appears in the request.\n+     */\n+    private final String text;\n+\n+    /*\n+     * CategorizedEntity category, such as Person/Location/Org/SSN etc\n+     */\n+    private final EntityCategory category;\n+\n+    /*\n+     * CategorizedEntity sub category, such as Age/Year/TimeRange etc\n+     */\n+    private final String subcategory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU4MzA2MA==", "bodyText": "Should linkedEntityMatches also be changed to matches here (not sure if this is exposed to users, but would still be nice to keep it consistent)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r421583060", "createdAt": "2020-05-07T15:12:50Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/LinkedEntity.java", "diffHunk": "@@ -3,50 +3,115 @@\n \n package com.azure.ai.textanalytics.models;\n \n+import com.azure.core.annotation.Immutable;\n import com.azure.core.util.IterableStream;\n \n /**\n  * The {@link LinkedEntity} model.\n  */\n-public interface LinkedEntity {\n+@Immutable\n+public final class LinkedEntity {\n+    /*\n+     * Entity Linking formal name.\n+     */\n+    private final String name;\n+\n+    /*\n+     * List of instances this entity appears in the text.\n+     */\n+    private final IterableStream<LinkedEntityMatch> linkedEntityMatches;\n+\n+    /*\n+     * Language used in the data source.\n+     */\n+    private final String language;\n+\n+    /*\n+     * Unique identifier of the recognized entity from the data source.\n+     */\n+    private final String dataSourceEntityId;\n+\n+    /*\n+     * URL for the entity's page from the data source.\n+     */\n+    private final String url;\n+\n+    /*\n+     * Data source used to extract entity linking, such as Wiki/Bing etc.\n+     */\n+    private final String dataSource;\n+\n+    /**\n+     * Creates a {@link LinkedEntity} model that describes linked entity.\n+     *\n+     * @param name The entity Linking formal name.\n+     * @param linkedEntityMatches A list of instances this entity appears in the text.\n+     * @param language The language used in the data source.\n+     * @param dataSourceEntityId Unique identifier of the recognized entity from the data source.\n+     * @param url URL for the entity's page from the data source.\n+     * @param dataSource The data source used to extract entity linking, such as Wiki/Bing etc.\n+     */\n+    public LinkedEntity(String name, IterableStream<LinkedEntityMatch> linkedEntityMatches, String language,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU4NzE2MQ==", "bodyText": "nitpick: Get the sentence text", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r421587161", "createdAt": "2020-05-07T15:18:38Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/SentenceSentiment.java", "diffHunk": "@@ -3,43 +3,57 @@\n \n package com.azure.ai.textanalytics.models;\n \n+import com.azure.core.annotation.Immutable;\n+\n /**\n- * The {@link SentenceSentiment} model that contains a sentiment label of a sentence, confidence score of the sentiment\n- * label, length of the sentence and offset of the sentence within a document.\n+ * The {@link SentenceSentiment} model that contains a sentiment label of a sentence, confidence score of the\n+ * sentiment label, length of the sentence and offset of the sentence within a document.\n  */\n-public interface SentenceSentiment {\n-    /**\n-     * Get the text property: The sentence text.\n-     *\n-     * @return the text value.\n-     */\n-    String getText();\n+@Immutable\n+public final class SentenceSentiment {\n+    private final String text;\n+    private final SentimentConfidenceScores confidenceScores;\n+    private final TextSentiment sentiment;\n \n     /**\n-     * Get the grapheme length of the sentence.\n+     * Creates a {@link SentenceSentiment} model that describes the sentiment analysis of sentence.\n      *\n-     * @return The grapheme length of the sentence.\n+     * @param text The sentence text\n+     * @param sentiment The sentiment label of the sentence.\n+     * @param confidenceScores The sentiment confidence score (Softmax score) between 0 and 1, for each sentiment label.\n+     *   Higher values signify higher confidence.\n      */\n-    int getGraphemeLength();\n+    public SentenceSentiment(String text, TextSentiment sentiment, SentimentConfidenceScores confidenceScores) {\n+        this.text = text;\n+        this.sentiment = sentiment;\n+        this.confidenceScores = confidenceScores;\n+    }\n \n     /**\n-     * Get the grapheme offset property: start position for the sentence sentiment.\n+     * Get the text property: The sentence text.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU4ODQ5OA==", "bodyText": "why is the language just set to english? it seems that no matter what you pass in for language, your language is just going to be english", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r421588498", "createdAt": "2020-05-07T15:20:27Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextDocumentInput.java", "diffHunk": "@@ -37,20 +34,9 @@\n      * @param text The document to process.\n      */\n     public TextDocumentInput(String id, String text) {\n-        this(id, text, null);\n-    }\n-\n-    /**\n-     * Creates a {@link TextDocumentInput} model that describes the documents.\n-     *\n-     * @param id A unique, non-empty document identifier.\n-     * @param text The document to process.\n-     * @param language Optional. This is the 2 letter ISO 639-1 representation of a language.\n-     */\n-    public TextDocumentInput(String id, String text, String language) {\n         this.id = id;\n         this.text = text;\n-        this.language = language;\n+        this.language = \"en\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3Njc2MTgy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#pullrequestreview-407676182", "createdAt": "2020-05-07T17:16:14Z", "commit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoxNjoxNFrOGSIX0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoxNjoxNFrOGSIX0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2NDcyMA==", "bodyText": "what do you think about renaming score to confidence score ? not super important", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r421664720", "createdAt": "2020-05-07T17:16:14Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/README.md", "diffHunk": "@@ -230,16 +230,16 @@ documentSentiment.getSentences().forEach(sentenceSentiment ->\n String document = \"Bonjour tout le monde\";\n DetectedLanguage detectedLanguage = textAnalyticsClient.detectLanguage(document);\n System.out.printf(\"Detected language name: %s, ISO 6391 name: %s, score: %f.%n\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3Njk4OTk1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#pullrequestreview-407698995", "createdAt": "2020-05-07T17:46:49Z", "commit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzo0Njo0OVrOGSJfUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoxNzo1OFrOGSKnxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY4MzAyNQ==", "bodyText": "Do we know instances when it won't be a TextAnalyticsErrorException?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r421683025", "createdAt": "2020-05-07T17:46:49Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/DetectLanguageAsyncClient.java", "diffHunk": "@@ -161,15 +158,22 @@\n      */\n     private Mono<TextAnalyticsPagedResponse<DetectLanguageResult>> getDetectedLanguageResponseInPage(\n         Iterable<DetectLanguageInput> documents, TextAnalyticsRequestOptions options, Context context) {\n-        return service.languagesWithRestResponseAsync(\n-            new LanguageBatchInput().setDocuments(toLanguageInput(documents)),\n-            options == null ? null : options.getModelVersion(),\n-            options == null ? null : options.isIncludeStatistics(),\n-            context.addData(AZ_TRACING_NAMESPACE_KEY, COGNITIVE_TRACING_NAMESPACE_VALUE))\n-            .doOnSubscribe(ignoredValue -> logger.info(\"A batch of documents - {}\", documents.toString()))\n-            .doOnSuccess(response -> logger.info(\"Detected languages for a batch of documents - {}\",\n-                response.getValue()))\n-            .doOnError(error -> logger.warning(\"Failed to detect language - {}\", error))\n-            .map(this::toTextAnalyticsPagedResponse);\n+        return service.languagesWithResponseAsync(\n+                new LanguageBatchInput().setDocuments(toLanguageInput(documents)),\n+                context.addData(AZ_TRACING_NAMESPACE_KEY, COGNITIVE_TRACING_NAMESPACE_VALUE),\n+                options == null ? null : options.getModelVersion(),\n+                options == null ? null : options.isIncludeStatistics())\n+                .doOnSubscribe(ignoredValue -> logger.info(\"A batch of documents - {}\", documents.toString()))\n+                .doOnSuccess(response -> logger.info(\"Detected languages for a batch of documents - {}\",\n+                    response.getValue()))\n+                .doOnError(error -> logger.warning(\"Failed to detect language - {}\", error))\n+                .map(this::toTextAnalyticsPagedResponse)\n+                .onErrorMap(throwable -> {\n+                    if (throwable instanceof TextAnalyticsErrorException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY4MzQzMw==", "bodyText": "can be replaced with inputDocumentsValidation?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r421683433", "createdAt": "2020-05-07T17:47:33Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/ExtractKeyPhraseAsyncClient.java", "diffHunk": "@@ -53,38 +61,29 @@\n     }\n \n     /**\n-     * Helper function for calling service with max overloaded parameters that a returns {@link TextAnalyticsPagedFlux}\n-     * which is a paged flux that contains extracted key phrases.\n+     * Helper function for calling service with max overloaded parameters that a returns {@link KeyPhrasesCollection}.\n      *\n      * @param document A document.\n      * @param language The language code.\n      *\n-     * @return The {@link TextAnalyticsPagedFlux} of extracted key phrases strings.\n+     * @return The {@link Mono} of {@link KeyPhrasesCollection} extracted key phrases strings.\n      */\n-    TextAnalyticsPagedFlux<String> extractKeyPhrasesSingleText(String document, String language) {\n-        Objects.requireNonNull(document, \"'document' cannot be null.\");\n-        return new TextAnalyticsPagedFlux<>(() ->\n-            (continuationToken, pageSize) -> extractKeyPhrases(\n-                Collections.singletonList(new TextDocumentInput(\"0\", document, language)), null).byPage()\n-                .map(resOfResult -> {\n-                    Iterator<ExtractKeyPhraseResult> iterator = resOfResult.getValue().iterator();\n-                    // Collection will never empty\n-                    if (!iterator.hasNext()) {\n-                        throw logger.logExceptionAsError(new IllegalStateException(\n-                            \"An empty collection returned which is an unexpected error.\"));\n-                    }\n-\n-                    final ExtractKeyPhraseResult keyPhraseResult = iterator.next();\n-                    if (keyPhraseResult.isError()) {\n-                        throw logger.logExceptionAsError(\n-                            Transforms.toTextAnalyticsException(keyPhraseResult.getError()));\n-                    }\n-\n-                    return new TextAnalyticsPagedResponse<>(\n-                        resOfResult.getRequest(), resOfResult.getStatusCode(), resOfResult.getHeaders(),\n-                        keyPhraseResult.getKeyPhrases().stream().collect(Collectors.toList()),\n-                        null, resOfResult.getModelVersion(), resOfResult.getStatistics());\n-                }));\n+    Mono<KeyPhrasesCollection> extractKeyPhrasesSingleText(String document, String language) {\n+        try {\n+            Objects.requireNonNull(document, \"'document' cannot be null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY4NDAxNQ==", "bodyText": "can this too be replaced with inputDocumentsValidation?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r421684015", "createdAt": "2020-05-07T17:48:32Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/RecognizeEntityAsyncClient.java", "diffHunk": "@@ -53,146 +60,142 @@\n     }\n \n     /**\n-     * Helper function for calling service with max overloaded parameters that a returns {@link TextAnalyticsPagedFlux}\n-     * which is a paged flux that contains {@link CategorizedEntity}.\n+     * Helper function for calling service with max overloaded parameters that a returns {@link Mono}\n+     * which is a paged flux that contains {@link CategorizedEntityCollection}.\n      *\n      * @param document A single document.\n      * @param language The language code.\n      *\n-     * @return The {@link TextAnalyticsPagedFlux} of {@link CategorizedEntity}.\n+     * @return The {@link Mono} of {@link CategorizedEntityCollection}.\n      */\n-    TextAnalyticsPagedFlux<CategorizedEntity> recognizeEntities(String document, String language) {\n-        Objects.requireNonNull(document, \"'document' cannot be null.\");\n-        return new TextAnalyticsPagedFlux<>(() ->\n-            (continuationToken, pageSize) -> recognizeEntitiesBatch(\n-                Collections.singletonList(new TextDocumentInput(\"0\", document, language)), null)\n-                .byPage()\n-                .map(resOfResult -> {\n-                    Iterator<RecognizeCategorizedEntitiesResult> iterator = resOfResult.getValue().iterator();\n-                    // Collection will never empty\n-                    if (!iterator.hasNext()) {\n-                        throw logger.logExceptionAsError(new IllegalStateException(\n-                            \"An empty collection returned which is an unexpected error.\"));\n-                    }\n-\n-                    final RecognizeCategorizedEntitiesResult entitiesResult = iterator.next();\n-                    if (entitiesResult.isError()) {\n-                        throw logger.logExceptionAsError(\n-                            Transforms.toTextAnalyticsException(entitiesResult.getError()));\n-                    }\n-\n-                    return new TextAnalyticsPagedResponse<>(\n-                        resOfResult.getRequest(), resOfResult.getStatusCode(), resOfResult.getHeaders(),\n-                        entitiesResult.getEntities().stream().collect(Collectors.toList()), null,\n-                        resOfResult.getModelVersion(), resOfResult.getStatistics());\n-                }));\n+    Mono<CategorizedEntityCollection> recognizeEntities(String document, String language) {\n+        try {\n+            Objects.requireNonNull(document, \"'document' cannot be null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY4NTE3Mw==", "bodyText": "@maririos  and @iscai-msft Could you confirm the exception being thrown here in python and .NET?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r421685173", "createdAt": "2020-05-07T17:50:22Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/RecognizeEntityAsyncClient.java", "diffHunk": "@@ -53,146 +60,142 @@\n     }\n \n     /**\n-     * Helper function for calling service with max overloaded parameters that a returns {@link TextAnalyticsPagedFlux}\n-     * which is a paged flux that contains {@link CategorizedEntity}.\n+     * Helper function for calling service with max overloaded parameters that a returns {@link Mono}\n+     * which is a paged flux that contains {@link CategorizedEntityCollection}.\n      *\n      * @param document A single document.\n      * @param language The language code.\n      *\n-     * @return The {@link TextAnalyticsPagedFlux} of {@link CategorizedEntity}.\n+     * @return The {@link Mono} of {@link CategorizedEntityCollection}.\n      */\n-    TextAnalyticsPagedFlux<CategorizedEntity> recognizeEntities(String document, String language) {\n-        Objects.requireNonNull(document, \"'document' cannot be null.\");\n-        return new TextAnalyticsPagedFlux<>(() ->\n-            (continuationToken, pageSize) -> recognizeEntitiesBatch(\n-                Collections.singletonList(new TextDocumentInput(\"0\", document, language)), null)\n-                .byPage()\n-                .map(resOfResult -> {\n-                    Iterator<RecognizeCategorizedEntitiesResult> iterator = resOfResult.getValue().iterator();\n-                    // Collection will never empty\n-                    if (!iterator.hasNext()) {\n-                        throw logger.logExceptionAsError(new IllegalStateException(\n-                            \"An empty collection returned which is an unexpected error.\"));\n-                    }\n-\n-                    final RecognizeCategorizedEntitiesResult entitiesResult = iterator.next();\n-                    if (entitiesResult.isError()) {\n-                        throw logger.logExceptionAsError(\n-                            Transforms.toTextAnalyticsException(entitiesResult.getError()));\n-                    }\n-\n-                    return new TextAnalyticsPagedResponse<>(\n-                        resOfResult.getRequest(), resOfResult.getStatusCode(), resOfResult.getHeaders(),\n-                        entitiesResult.getEntities().stream().collect(Collectors.toList()), null,\n-                        resOfResult.getModelVersion(), resOfResult.getStatistics());\n-                }));\n+    Mono<CategorizedEntityCollection> recognizeEntities(String document, String language) {\n+        try {\n+            Objects.requireNonNull(document, \"'document' cannot be null.\");\n+            final TextDocumentInput textDocumentInput = new TextDocumentInput(\"0\", document);\n+            textDocumentInput.setLanguage(language);\n+            return recognizeEntitiesBatch(Collections.singletonList(textDocumentInput), null)\n+                    .map(entitiesResult -> {\n+                        if (entitiesResult.isError()) {\n+                            throw logger.logExceptionAsError(toTextAnalyticsException(entitiesResult.getError()));\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY4OTAxNg==", "bodyText": "It seems odd that\n\npublic TextAnalyticsPagedIterable recognizeEntitiesBatch(Iterable documents)\n\nreturns RecognizeEntitiesResult\nwhereas,\n\npublic CategorizedEntityCollection recognizeEntities(String document, String language)\n\nreturns a CategorizedEntityCollection?\n@maririos , @iscai-msft Is this similarly followed in other languages?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r421689016", "createdAt": "2020-05-07T17:56:50Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsClient.java", "diffHunk": "@@ -273,15 +275,16 @@ public DetectedLanguage detectLanguage(String document, String countryHint) {\n      * <a href=\"https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits\">data limits</a>.\n      * @param language The 2 letter ISO 639-1 representation of language. If not set, uses \"en\" for English as default.\n      *\n-     * @return The {@link TextAnalyticsPagedIterable} contains a list of\n+     * @return The {@link CategorizedEntityCollection} contains a list of\n      * {@link CategorizedEntity recognized categorized entities}.\n      *\n      * @throws NullPointerException if {@code document} is {@code null}.\n      * @throws TextAnalyticsException if the response returned with an {@link TextAnalyticsError error}.\n      */\n-    @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public TextAnalyticsPagedIterable<CategorizedEntity> recognizeEntities(String document, String language) {\n-        return new TextAnalyticsPagedIterable<>(client.recognizeEntities(document, language));\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public CategorizedEntityCollection recognizeEntities(String document, String language) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY4OTc4MA==", "bodyText": "Should this method never get called if documents is null?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r421689780", "createdAt": "2020-05-07T17:58:07Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/Transforms.java", "diffHunk": "@@ -40,7 +36,10 @@ private Transforms() {\n      * @return The list holding all the generic items combined.\n      */\n     static <T> List<T> mapByIndex(Iterable<String> documents, BiFunction<String, String, T> mappingFunction) {\n-        Objects.requireNonNull(documents, \"'documents' cannot be null.\");\n+        // don't do anything if given input 'documents' is null, return null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5MTQ5OQ==", "bodyText": "throw logger.logExceptionAsWarning(...)\nAlso, add a section for throws javadoc for the respective methods where this is called.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r421691499", "createdAt": "2020-05-07T18:00:51Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/implementation/Utility.java", "diffHunk": "@@ -0,0 +1,28 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.implementation;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+\n+/**\n+ * Utility method class.\n+ */\n+public final class Utility {\n+    private Utility() {\n+    }\n+\n+    /**\n+     * Verify that list of documents are not null or empty. Otherwise, throw exception.\n+     *\n+     * @param documents A list of documents.\n+     */\n+    public static void inputDocumentsValidation(Iterable<?> documents) {\n+        Objects.requireNonNull(documents, \"'documents' cannot be null.\");\n+        final Iterator<?> iterator = documents.iterator();\n+        if (!iterator.hasNext()) {\n+            throw new IllegalArgumentException(\"'documents' cannot be empty.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5NTExNQ==", "bodyText": "nit: *An", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r421695115", "createdAt": "2020-05-07T18:06:53Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/DetectedLanguage.java", "diffHunk": "@@ -4,46 +4,57 @@\n package com.azure.ai.textanalytics.models;\n \n import com.azure.core.annotation.Immutable;\n+import com.azure.core.util.IterableStream;\n \n /**\n  * The {@link DetectedLanguage} model.\n  */\n @Immutable\n public final class DetectedLanguage {\n-    /*\n+    /**\n+     *\n      * Long name of a detected language (e.g. English, French).\n      */\n     private final String name;\n \n-    /*\n+    /**\n      * A two letter representation of the detected language according to the\n      * ISO 639-1 standard (e.g. en, fr).\n      */\n     private final String iso6391Name;\n \n-    /*\n+    /**\n      * A confidence score between 0 and 1. Scores close to 1 indicate 100%\n      * certainty that the identified language is true.\n      */\n-    private final double score;\n+    private final double confidenceScore;\n+\n+    /**\n+     * A {@link IterableStream} of {@link TextAnalyticsWarning Text Analytics warnings}.\n+     */\n+    private final IterableStream<TextAnalyticsWarning> warnings;\n \n     /**\n      * Creates a {@link DetectedLanguage} model that describes detected language content.\n      *\n      * @param name The name of a detected language.\n      * @param iso6391Name A two letter representation of the detected language according to the ISO 639-1 standard.\n-     * @param score A confidence score between 0 and 1.\n+     * @param confidenceScore A confidence score between 0 and 1.\n+     * @param warnings A {@link IterableStream} of {@link TextAnalyticsWarning warnings}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5NzU3MQ==", "bodyText": "Warning code", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r421697571", "createdAt": "2020-05-07T18:10:58Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsWarning.java", "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Immutable;\n+\n+/**\n+ * The {@link TextAnalyticsWarning} model.\n+ */\n+@Immutable\n+public final class TextAnalyticsWarning {\n+    /*\n+     * Error code.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5Nzg3Mg==", "bodyText": "Could the docs be updated to understand what a warning code would mean?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r421697872", "createdAt": "2020-05-07T18:11:30Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsWarning.java", "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Immutable;\n+\n+/**\n+ * The {@link TextAnalyticsWarning} model.\n+ */\n+@Immutable\n+public final class TextAnalyticsWarning {\n+    /*\n+     * Error code.\n+     */\n+    private final WarningCode code;\n+\n+    /*\n+     * Warning message.\n+     */\n+    private final String message;\n+\n+    /**\n+     * Creates a {@link TextAnalyticsWarning} model that describes text analytics warning.\n+     *\n+     * @param code The warning code value\n+     * @param message The warning message.\n+     */\n+    public TextAnalyticsWarning(WarningCode code, String message) {\n+        this.code = code;\n+        this.message = message;\n+    }\n+\n+    /**\n+     * Get the code property: Error code.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcwMTQxNg==", "bodyText": "Should follow Fluent pattern.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r421701416", "createdAt": "2020-05-07T18:17:41Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextDocumentInput.java", "diffHunk": "@@ -82,6 +68,17 @@ public String getLanguage() {\n         return this.language;\n     }\n \n+    /**\n+     * Set the language property: (Optional) This is the 2 letter ISO 639-1\n+     * representation of a language. For example, use \"en\" for English; \"es\"\n+     * for Spanish etc. If not set, use \"en\" for English as default.\n+     *\n+     * @param language Optional. This is the 2 letter ISO 639-1 representation of a language.\n+     */\n+    public void setLanguage(String language) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcwMTU3Mg==", "bodyText": "@Fluent", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r421701572", "createdAt": "2020-05-07T18:17:58Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextDocumentInput.java", "diffHunk": "@@ -3,14 +3,11 @@\n \n package com.azure.ai.textanalytics.models;\n \n-import com.azure.core.annotation.Immutable;\n-\n import java.util.Locale;\n \n /**\n  * Contains an input document to be analyzed by the service.\n  */\n-@Immutable\n public final class TextDocumentInput {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NzQ4NjYx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#pullrequestreview-407748661", "createdAt": "2020-05-07T18:55:01Z", "commit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODo1NTowMVrOGSL8VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODo1NTowMVrOGSL8VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcyMzIyMQ==", "bodyText": "warnings should be in DetectedLanguage to be consistent with keyphrases. no?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r421723221", "createdAt": "2020-05-07T18:55:01Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/DetectLanguageResult.java", "diffHunk": "@@ -18,9 +19,10 @@\n      * @param textDocumentStatistics The text document statistics.\n      * @param error The document error.\n      * @param primaryLanguage The detected primary language.\n+     * @param warnings A {@link IterableStream} of {@link TextAnalyticsWarning}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NzUxNTA3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#pullrequestreview-407751507", "createdAt": "2020-05-07T18:59:04Z", "commit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODo1OTowNFrOGSMFVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODo1OTowNFrOGSMFVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcyNTUyNQ==", "bodyText": "It will be good to connect this type with CategorizedEntityCollection which also includes warnings in there.\nAny reason why this is different than .net here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r421725525", "createdAt": "2020-05-07T18:59:04Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/RecognizeEntitiesResult.java", "diffHunk": "@@ -0,0 +1,44 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Immutable;\n+import com.azure.core.util.IterableStream;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * The {@link RecognizeEntitiesResult} model.\n+ */\n+@Immutable\n+public final class RecognizeEntitiesResult extends TextAnalyticsResult {\n+    private final CategorizedEntityCollection entities;\n+\n+    /**\n+     * Creates a {@link RecognizeEntitiesResult} model that describes recognized entities result.\n+     *\n+     * @param id Unique, non-empty document identifier.\n+     * @param textDocumentStatistics The text document statistics.\n+     * @param error The document error.\n+     * @param entities An {@link IterableStream} of {@link CategorizedEntity}.\n+     * @param warnings A {@link IterableStream} of {@link TextAnalyticsWarning}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2ODUxMjU2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#pullrequestreview-406851256", "createdAt": "2020-05-06T17:51:55Z", "commit": {"oid": "d5421653bc38cff8f86978cea39759998da25820"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzo1MTo1NVrOGRem1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxOToyNjoyNVrOGSM_wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MDQzNw==", "bodyText": "Can we put this into module-info.java?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r420980437", "createdAt": "2020-05-06T17:51:55Z", "author": {"login": "sima-zhu"}, "path": "sdk/parents/azure-client-sdk-parent/pom.xml", "diffHunk": "@@ -1074,6 +1074,7 @@\n                 --add-opens com.azure.core/com.azure.core.implementation.serializer=ALL-UNNAMED\n                 --add-opens com.azure.ai.formrecognizer/com.azure.ai.formrecognizer=ALL-UNNAMED\n                 --add-opens com.azure.ai.textanalytics/com.azure.ai.textanalytics=ALL-UNNAMED\n+                --add-opens com.azure.ai.textanalytics/com.azure.ai.textanalytics.implementation.models=com.azure.core", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5421653bc38cff8f86978cea39759998da25820"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczNDM2OA==", "bodyText": "Better to have a mapping helper method as it continues to grow. Make the top API impl as simple as possible.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r421734368", "createdAt": "2020-05-07T19:15:04Z", "author": {"login": "sima-zhu"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -184,7 +183,13 @@ private AnalyzeSentimentResult convertToAnalyzeSentimentResult(DocumentSentiment\n                     confidenceScorePerLabel.getNegative(),\n                     confidenceScorePerLabel.getNeutral(),\n                     confidenceScorePerLabel.getPositive()),\n-                new IterableStream<>(sentenceSentiments)));\n+                new IterableStream<>(sentenceSentiments),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczOTI0OA==", "bodyText": "Helper method in common place. It seems show up so many times.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r421739248", "createdAt": "2020-05-07T19:24:09Z", "author": {"login": "sima-zhu"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/DetectLanguageAsyncClient.java", "diffHunk": "@@ -161,15 +158,22 @@\n      */\n     private Mono<TextAnalyticsPagedResponse<DetectLanguageResult>> getDetectedLanguageResponseInPage(\n         Iterable<DetectLanguageInput> documents, TextAnalyticsRequestOptions options, Context context) {\n-        return service.languagesWithRestResponseAsync(\n-            new LanguageBatchInput().setDocuments(toLanguageInput(documents)),\n-            options == null ? null : options.getModelVersion(),\n-            options == null ? null : options.isIncludeStatistics(),\n-            context.addData(AZ_TRACING_NAMESPACE_KEY, COGNITIVE_TRACING_NAMESPACE_VALUE))\n-            .doOnSubscribe(ignoredValue -> logger.info(\"A batch of documents - {}\", documents.toString()))\n-            .doOnSuccess(response -> logger.info(\"Detected languages for a batch of documents - {}\",\n-                response.getValue()))\n-            .doOnError(error -> logger.warning(\"Failed to detect language - {}\", error))\n-            .map(this::toTextAnalyticsPagedResponse);\n+        return service.languagesWithResponseAsync(\n+                new LanguageBatchInput().setDocuments(toLanguageInput(documents)),\n+                context.addData(AZ_TRACING_NAMESPACE_KEY, COGNITIVE_TRACING_NAMESPACE_VALUE),\n+                options == null ? null : options.getModelVersion(),\n+                options == null ? null : options.isIncludeStatistics())\n+                .doOnSubscribe(ignoredValue -> logger.info(\"A batch of documents - {}\", documents.toString()))\n+                .doOnSuccess(response -> logger.info(\"Detected languages for a batch of documents - {}\",\n+                    response.getValue()))\n+                .doOnError(error -> logger.warning(\"Failed to detect language - {}\", error))\n+                .map(this::toTextAnalyticsPagedResponse)\n+                .onErrorMap(throwable -> {\n+                    if (throwable instanceof TextAnalyticsErrorException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY4MzAyNQ=="}, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc0MDQ4MQ==", "bodyText": "What's the expect behavior here?\n\nStop doing other maps if one event gets throwable\nKeep doing other maps if one event gets throwable", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r421740481", "createdAt": "2020-05-07T19:26:25Z", "author": {"login": "sima-zhu"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/ExtractKeyPhraseAsyncClient.java", "diffHunk": "@@ -53,38 +61,29 @@\n     }\n \n     /**\n-     * Helper function for calling service with max overloaded parameters that a returns {@link TextAnalyticsPagedFlux}\n-     * which is a paged flux that contains extracted key phrases.\n+     * Helper function for calling service with max overloaded parameters that a returns {@link KeyPhrasesCollection}.\n      *\n      * @param document A document.\n      * @param language The language code.\n      *\n-     * @return The {@link TextAnalyticsPagedFlux} of extracted key phrases strings.\n+     * @return The {@link Mono} of {@link KeyPhrasesCollection} extracted key phrases strings.\n      */\n-    TextAnalyticsPagedFlux<String> extractKeyPhrasesSingleText(String document, String language) {\n-        Objects.requireNonNull(document, \"'document' cannot be null.\");\n-        return new TextAnalyticsPagedFlux<>(() ->\n-            (continuationToken, pageSize) -> extractKeyPhrases(\n-                Collections.singletonList(new TextDocumentInput(\"0\", document, language)), null).byPage()\n-                .map(resOfResult -> {\n-                    Iterator<ExtractKeyPhraseResult> iterator = resOfResult.getValue().iterator();\n-                    // Collection will never empty\n-                    if (!iterator.hasNext()) {\n-                        throw logger.logExceptionAsError(new IllegalStateException(\n-                            \"An empty collection returned which is an unexpected error.\"));\n-                    }\n-\n-                    final ExtractKeyPhraseResult keyPhraseResult = iterator.next();\n-                    if (keyPhraseResult.isError()) {\n-                        throw logger.logExceptionAsError(\n-                            Transforms.toTextAnalyticsException(keyPhraseResult.getError()));\n-                    }\n-\n-                    return new TextAnalyticsPagedResponse<>(\n-                        resOfResult.getRequest(), resOfResult.getStatusCode(), resOfResult.getHeaders(),\n-                        keyPhraseResult.getKeyPhrases().stream().collect(Collectors.toList()),\n-                        null, resOfResult.getModelVersion(), resOfResult.getStatistics());\n-                }));\n+    Mono<KeyPhrasesCollection> extractKeyPhrasesSingleText(String document, String language) {\n+        try {\n+            Objects.requireNonNull(document, \"'document' cannot be null.\");\n+            final TextDocumentInput textDocumentInput = new TextDocumentInput(\"0\", document);\n+            textDocumentInput.setLanguage(language);\n+            return extractKeyPhrases(Collections.singletonList(textDocumentInput), null)\n+                    .map(keyPhraseResult -> {\n+                        if (keyPhraseResult.isError()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3ODE4ODkx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#pullrequestreview-407818891", "createdAt": "2020-05-07T20:39:06Z", "commit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDozOTowNlrOGSPX7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDozOTowNlrOGSPX7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc3OTQzNg==", "bodyText": "Could u help me understand why before we didn't need to do a foreach with entity, but now we do have to do a foreach on entityCollection?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r421779436", "createdAt": "2020-05-07T20:39:06Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/RecognizeEntitiesAsync.java", "diffHunk": "@@ -27,11 +27,12 @@ public static void main(String[] args) {\n         String document = \"Satya Nadella is the CEO of Microsoft\";\n \n         client.recognizeEntities(document).subscribe(\n-            entity -> System.out.printf(\n-                \"Recognized categorized entity: %s, entity category: %s, entity sub-category: %s, score: %f.%n\",\n-                entity.getText(), entity.getCategory(), entity.getSubCategory(), entity.getConfidenceScore()),\n+            entityCollection -> entityCollection.forEach(entity -> System.out.printf(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3ODU5Mjg1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#pullrequestreview-407859285", "createdAt": "2020-05-07T21:44:41Z", "commit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMTo0NDo0MVrOGSRZwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMTo0NDo0MVrOGSRZwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgxMjY3NA==", "bodyText": "Not sure I understand why we are hiding the language here. It is true that en is the default, but the purpose of this batch sample is to show the user that they can set the language (otherwise they'll use the convenience method/sample).\nIt will be more obvious if we have text in different languages.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r421812674", "createdAt": "2020-05-07T21:44:41Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/AnalyzeSentimentBatchDocuments.java", "diffHunk": "@@ -37,9 +37,9 @@ public static void main(String[] args) {\n \n         // The texts that need be analyzed.\n         List<TextDocumentInput> documents = Arrays.asList(\n-            new TextDocumentInput(\"A\", \"The hotel was dark and unclean. I wouldn't recommend staying there.\", \"en\"),\n-            new TextDocumentInput(\"B\", \"The restaurant had amazing gnocchi! The waiters were excellent.\", \"en\"),\n-            new TextDocumentInput(\"C\", \"The hotel was dark and unclean. The restaurant had amazing gnocchi!\", \"en\")\n+            new TextDocumentInput(\"A\", \"The hotel was dark and unclean. I wouldn't recommend staying there.\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3ODYwNDY1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#pullrequestreview-407860465", "createdAt": "2020-05-07T21:46:31Z", "commit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMTo0NjozMlrOGSRdvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMTo0NjozMlrOGSRdvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgxMzY5NA==", "bodyText": "same comment here about language", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r421813694", "createdAt": "2020-05-07T21:46:32Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/AnalyzeSentimentBatchDocumentsAsync.java", "diffHunk": "@@ -36,9 +36,9 @@ public static void main(String[] args) {\n \n         // The texts that need be analyzed.\n         List<TextDocumentInput> documents = Arrays.asList(\n-            new TextDocumentInput(\"A\", \"The hotel was dark and unclean. I wouldn't recommend staying there.\", \"en\"),\n-            new TextDocumentInput(\"B\", \"The restaurant had amazing gnocchi! The waiters were excellent.\", \"en\"),\n-            new TextDocumentInput(\"C\", \"The hotel was dark and unclean. The restaurant had amazing gnocchi!\", \"en\")\n+            new TextDocumentInput(\"A\", \"The hotel was dark and unclean. I wouldn't recommend staying there.\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3ODYxMjk4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#pullrequestreview-407861298", "createdAt": "2020-05-07T21:47:58Z", "commit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMTo0Nzo1OVrOGSRgeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMTo0Nzo1OVrOGSRgeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgxNDM5Mg==", "bodyText": "language", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r421814392", "createdAt": "2020-05-07T21:47:59Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/ExtractKeyPhrasesBatchDocuments.java", "diffHunk": "@@ -35,8 +35,8 @@ public static void main(String[] args) {\n \n         // The texts that need be analyzed.\n         List<TextDocumentInput> documents = Arrays.asList(\n-            new TextDocumentInput(\"A\", \"The food was delicious and there were wonderful staff.\", \"en\"),\n-            new TextDocumentInput(\"B\", \"The pitot tube is used to measure airspeed.\", \"en\")\n+            new TextDocumentInput(\"A\", \"The food was delicious and there were wonderful staff.\"),\n+            new TextDocumentInput(\"B\", \"The pitot tube is used to measure airspeed.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3OTMwNDk4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#pullrequestreview-407930498", "createdAt": "2020-05-08T00:54:25Z", "commit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMDo1NDoyNVrOGSVRxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMDo1NDoyNVrOGSVRxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3NjE2Ng==", "bodyText": "update it to match", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r421876166", "createdAt": "2020-05-08T00:54:25Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/LinkedEntity.java", "diffHunk": "@@ -75,7 +75,7 @@ public String getName() {\n      *\n      * @return The linkedEntityMatches value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ac3668c6dc080a58a0248ccced1c7abab7e1483", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2ac3668c6dc080a58a0248ccced1c7abab7e1483", "committedDate": "2020-05-08T06:45:31Z", "message": "address feedbacks and add too many document exception handler"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MzI4NDUx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#pullrequestreview-408328451", "createdAt": "2020-05-08T15:39:57Z", "commit": {"oid": "2ac3668c6dc080a58a0248ccced1c7abab7e1483"}, "state": "APPROVED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNTozOTo1OFrOGSp-sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNjoxMjozNlrOGSrBMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIxNTM0NQ==", "bodyText": "Is it expected to only return the status code in the response?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r422215345", "createdAt": "2020-05-08T15:39:58Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/implementation/Utility.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.implementation;\n+\n+import com.azure.ai.textanalytics.implementation.models.TextAnalyticsErrorException;\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.rest.SimpleResponse;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.util.Iterator;\n+import java.util.Objects;\n+\n+/**\n+ * Utility method class.\n+ */\n+public final class Utility {\n+    private Utility() {\n+    }\n+\n+    /**\n+     * Verify that list of documents are not null or empty. Otherwise, throw exception.\n+     *\n+     * @param documents A list of documents.\n+     */\n+    public static void inputDocumentsValidation(Iterable<?> documents) {\n+        Objects.requireNonNull(documents, \"'documents' cannot be null.\");\n+        final Iterator<?> iterator = documents.iterator();\n+        if (!iterator.hasNext()) {\n+            throw new IllegalArgumentException(\"'documents' cannot be empty.\");\n+        }\n+    }\n+\n+    /**\n+     * Get a mock {@link HttpResponse} that only return status code 400.\n+     *\n+     * @param response A {@link SimpleResponse} with any type\n+     * @return A mock {@link HttpResponse} that only return status code 400.\n+     */\n+    public static HttpResponse getMockHttpResponse(SimpleResponse<?> response) {\n+        return new HttpResponse(response.getRequest()) {\n+            @Override\n+            public int getStatusCode() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ac3668c6dc080a58a0248ccced1c7abab7e1483"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIxNjQyMA==", "bodyText": "Could we have a tracking issue for this?\nWhen does the service team plan to update this?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r422216420", "createdAt": "2020-05-08T15:42:01Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -119,6 +116,14 @@\n             analyzeSentimentResults.add(convertToAnalyzeSentimentResult(documentSentiment));\n         }\n         for (DocumentError documentError : sentimentResponse.getErrors()) {\n+            /*\n+             *  TODO: Remove this after service update to throw exception.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ac3668c6dc080a58a0248ccced1c7abab7e1483"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIyMTE0NQ==", "bodyText": "This is still not updated.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r422221145", "createdAt": "2020-05-08T15:50:59Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/implementation/Utility.java", "diffHunk": "@@ -0,0 +1,28 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.implementation;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+\n+/**\n+ * Utility method class.\n+ */\n+public final class Utility {\n+    private Utility() {\n+    }\n+\n+    /**\n+     * Verify that list of documents are not null or empty. Otherwise, throw exception.\n+     *\n+     * @param documents A list of documents.\n+     */\n+    public static void inputDocumentsValidation(Iterable<?> documents) {\n+        Objects.requireNonNull(documents, \"'documents' cannot be null.\");\n+        final Iterator<?> iterator = documents.iterator();\n+        if (!iterator.hasNext()) {\n+            throw new IllegalArgumentException(\"'documents' cannot be empty.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5MTQ5OQ=="}, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIyMjIyMw==", "bodyText": "nit extra line", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r422222223", "createdAt": "2020-05-08T15:53:05Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/DetectedLanguage.java", "diffHunk": "@@ -4,46 +4,57 @@\n package com.azure.ai.textanalytics.models;\n \n import com.azure.core.annotation.Immutable;\n+import com.azure.core.util.IterableStream;\n \n /**\n  * The {@link DetectedLanguage} model.\n  */\n @Immutable\n public final class DetectedLanguage {\n-    /*\n+    /**\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ac3668c6dc080a58a0248ccced1c7abab7e1483"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIyMjQ5Mg==", "bodyText": "nit: an", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r422222492", "createdAt": "2020-05-08T15:53:36Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/DocumentSentiment.java", "diffHunk": "@@ -7,28 +7,31 @@\n import com.azure.core.util.IterableStream;\n \n /**\n- * The {@link DocumentSentiment} model that contains sentiment label of a document, confidence score of the sentiment\n- * label, and a list of {@link SentenceSentiment}.\n+ * The {@link DocumentSentiment} model that contains sentiment label of a document, confidence score of the\n+ * sentiment label, and a list of {@link SentenceSentiment}.\n  */\n @Immutable\n public final class DocumentSentiment {\n     private final TextSentiment sentiment;\n     private final SentimentConfidenceScores confidenceScores;\n-    private final IterableStream<SentenceSentiment> sentences;\n+    private final IterableStream<com.azure.ai.textanalytics.models.SentenceSentiment> sentences;\n+    private final IterableStream<TextAnalyticsWarning> warnings;\n \n     /**\n      * Creates a {@link DocumentSentiment} model that describes the sentiment of the document.\n      *\n      * @param sentiment the sentiment label of the document.\n      * @param confidenceScores the sentiment confidence score (Softmax score) between 0 and 1, for each sentiment label.\n      *   Higher values signify higher confidence.\n-     * @param sentences a list of sentence sentiments.\n+     * @param sentences a {@link IterableStream} of sentence sentiments.\n+     * @param warnings a {@link IterableStream} of {@link TextAnalyticsWarning}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ac3668c6dc080a58a0248ccced1c7abab7e1483"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIyMzMyMg==", "bodyText": "Should the class name still be LinkedEntityMatch or Match?\ncc: @iscai-msft", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r422223322", "createdAt": "2020-05-08T15:55:06Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/LinkedEntityMatch.java", "diffHunk": "@@ -21,30 +21,16 @@\n      */\n     private final String text;\n \n-    /*\n-     * Grapheme start position for the entity match text.\n-     */\n-    private final int graphemeOffset;\n-\n-    /*\n-     * Grapheme length for the entity match text.\n-     */\n-    private final int graphemeLength;\n-\n     /**\n      * Creates a {@link LinkedEntityMatch} model that describes linked entity match.\n      *\n      * @param text The entity text as appears in the request.\n      * @param confidenceScore If a well-known item is recognized, a decimal number denoting the\n      * confidence level between 0 and 1 will be returned.\n-     * @param graphemeOffset Grapheme start position for the entity match text.\n-     * @param graphemeLength Grapheme length for the entity match text.\n      */\n-    public LinkedEntityMatch(String text, double confidenceScore, int graphemeOffset, int graphemeLength) {\n+    public LinkedEntityMatch(String text, double confidenceScore) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ac3668c6dc080a58a0248ccced1c7abab7e1483"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIyMzYyMQ==", "bodyText": "containing", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r422223621", "createdAt": "2020-05-08T15:55:37Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/RecognizeLinkedEntitiesResult.java", "diffHunk": "@@ -6,35 +6,33 @@\n import com.azure.core.annotation.Immutable;\n import com.azure.core.util.IterableStream;\n \n-import java.util.ArrayList;\n-\n /**\n  * The {@link RecognizeLinkedEntitiesResult} model.\n  */\n @Immutable\n-public final class RecognizeLinkedEntitiesResult extends DocumentResult {\n-    private final IterableStream<LinkedEntity> entities;\n+public final class RecognizeLinkedEntitiesResult extends TextAnalyticsResult {\n+    private final LinkedEntityCollection entities;\n \n     /**\n      * Creates a {@link RecognizeLinkedEntitiesResult} model that describes recognized linked entities result.\n      *\n      * @param id Unique, non-empty document identifier.\n      * @param textDocumentStatistics The text document statistics.\n      * @param error The document error.\n-     * @param entities An {@link IterableStream} of {@link LinkedEntity}.\n+     * @param entities A {@link LinkedEntityCollection} contains entities and warnings.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ac3668c6dc080a58a0248ccced1c7abab7e1483"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIyNDYwNQ==", "bodyText": "Where are we setting this default?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r422224605", "createdAt": "2020-05-08T15:57:26Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextDocumentInput.java", "diffHunk": "@@ -28,7 +25,7 @@\n      * For example, use \"en\" for English; \"es\" for Spanish etc. If not set, use\n      * \"en\" for English as default.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ac3668c6dc080a58a0248ccced1c7abab7e1483"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIyNjU5Nw==", "bodyText": "COuld consider adding a setLanguage here ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r422226597", "createdAt": "2020-05-08T16:01:22Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsClientJavaDocCodeSnippets.java", "diffHunk": "@@ -455,8 +464,8 @@ public void recognizeLinkedEntitiesStringListWithOptions() {\n     public void recognizeLinkedEntitiesBatchMaxOverload() {\n         // BEGIN: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatch#Iterable-TextAnalyticsRequestOptions-Context\n         List<TextDocumentInput> textDocumentInputs = Arrays.asList(\n-            new TextDocumentInput(\"1\", \"Old Faithful is a geyser at Yellowstone Park.\", \"en\"),\n-            new TextDocumentInput(\"2\", \"Mount Shasta has lenticular clouds.\", \"en\")\n+            new TextDocumentInput(\"1\", \"Old Faithful is a geyser at Yellowstone Park.\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ac3668c6dc080a58a0248ccced1c7abab7e1483"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIyNzQ5Nw==", "bodyText": "I agree with @maririos.\nSince the batch samples show advanced behavior, we should consider showing the users how they can set language on each document.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r422227497", "createdAt": "2020-05-08T16:03:09Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/AnalyzeSentimentBatchDocuments.java", "diffHunk": "@@ -37,9 +37,9 @@ public static void main(String[] args) {\n \n         // The texts that need be analyzed.\n         List<TextDocumentInput> documents = Arrays.asList(\n-            new TextDocumentInput(\"A\", \"The hotel was dark and unclean. I wouldn't recommend staying there.\", \"en\"),\n-            new TextDocumentInput(\"B\", \"The restaurant had amazing gnocchi! The waiters were excellent.\", \"en\"),\n-            new TextDocumentInput(\"C\", \"The hotel was dark and unclean. The restaurant had amazing gnocchi!\", \"en\")\n+            new TextDocumentInput(\"A\", \"The hotel was dark and unclean. I wouldn't recommend staying there.\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgxMjY3NA=="}, "originalCommit": {"oid": "0c0ce10c3467c79dc62a10181401c0aa33736e42"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIzMDE4Ng==", "bodyText": "Would it help to assert the warning and confirm result has the expected result + warnings?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r422230186", "createdAt": "2020-05-08T16:08:26Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientTest.java", "diffHunk": "@@ -200,10 +205,17 @@ public void recognizeEntitiesForEmptyText() {\n     @Test\n     public void recognizeEntitiesForFaultyText() {\n         StepVerifier.create(client.recognizeEntities(\"!@#%%\"))\n-            .expectNextCount(0)\n+            .assertNext(result -> assertFalse(result.getWarnings().iterator().hasNext()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ac3668c6dc080a58a0248ccced1c7abab7e1483"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIzMTI0OQ==", "bodyText": "Any particular reason we changed this from AAD to AzureKeyCredential?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r422231249", "createdAt": "2020-05-08T16:10:24Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTestBase.java", "diffHunk": "@@ -59,33 +59,38 @@\n import static com.azure.ai.textanalytics.TestUtils.KEY_PHRASE_INPUTS;\n import static com.azure.ai.textanalytics.TestUtils.LINKED_ENTITY_INPUTS;\n import static com.azure.ai.textanalytics.TestUtils.SENTIMENT_INPUTS;\n+import static com.azure.ai.textanalytics.TestUtils.TOO_LONG_INPUT;\n+import static com.azure.ai.textanalytics.TestUtils.getDuplicateTextDocumentInputs;\n+import static com.azure.ai.textanalytics.TestUtils.getWarningsTextDocumentInputs;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public abstract class TextAnalyticsClientTestBase extends TestBase {\n-    private static final String DEFAULT_SCOPE = \"https://cognitiveservices.azure.com/.default\";\n     private static final String NAME = \"name\";\n     private static final String TEXT_ANALYTICS_PROPERTIES = \"azure-ai-textanalytics.properties\";\n+    private static final String OCP_APIM_SUBSCRIPTION_KEY = \"Ocp-Apim-Subscription-Key\";\n     private static final String VERSION = \"version\";\n+    private static final String AZURE_TEXT_ANALYTICS_API_KEY = \"AZURE_TEXT_ANALYTICS_API_KEY\";\n \n     private final HttpLogOptions httpLogOptions = new HttpLogOptions();\n     private final Map<String, String> properties = CoreUtils.getProperties(TEXT_ANALYTICS_PROPERTIES);\n     private final String clientName = properties.getOrDefault(NAME, \"UnknownName\");\n     private final String clientVersion = properties.getOrDefault(VERSION, \"UnknownVersion\");\n-    static final String BATCH_ERROR_EXCEPTION_MESSAGE = \"Error in accessing the property on document id: 2, when RecognizeCategorizedEntitiesResult returned with an error: Document text is empty. ErrorCodeValue: {invalidDocument}\";\n+    static final String BATCH_ERROR_EXCEPTION_MESSAGE = \"Error in accessing the property on document id: 2, when RecognizeEntitiesResult returned with an error: Document text is empty. ErrorCodeValue: {invalidDocument}\";\n     static final String INVALID_COUNTRY_HINT_EXPECTED_EXCEPTION_MESSAGE = \"Country hint is not valid. Please specify an ISO 3166-1 alpha-2 two letter country code. ErrorCodeValue: {invalidCountryHint}\";\n     static final String INVALID_DOCUMENT_BATCH_NPE_MESSAGE = \"'documents' cannot be null.\";\n     static final String INVALID_DOCUMENT_EMPTY_LIST_EXCEPTION_MESSAGE = \"'documents' cannot be empty.\";\n     static final String INVALID_DOCUMENT_EXPECTED_EXCEPTION_MESSAGE = \"Document text is empty. ErrorCodeValue: {invalidDocument}\";\n     static final String INVALID_DOCUMENT_NPE_MESSAGE = \"'document' cannot be null.\";\n+    static final String WARNING_TOO_LONG_DOCUMENT_INPUT_MESSAGE = \"The document contains very long words (longer than 64 characters). These words will be truncated and may result in unreliable model predictions.\";\n \n     <T> T clientSetup(Function<HttpPipeline, T> clientBuilder) {\n-        TokenCredential credential = null;\n+        AzureKeyCredential credential = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ac3668c6dc080a58a0248ccced1c7abab7e1483"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIzMjM2OQ==", "bodyText": "extra / .\nAlso, do we need to update all the recordings?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r422232369", "createdAt": "2020-05-08T16:12:36Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/resources/session-records/recognizeLinkedEntitiesForBatchInput.json", "diffHunk": "@@ -1,27 +1,26 @@\n {\n   \"networkCallRecords\" : [ {\n     \"Method\" : \"POST\",\n-    \"Uri\" : \"https://javatextanalyticstestresources.cognitiveservices.azure.com/text/analytics/v3.0-preview.1/entities/linking\",\n+    \"Uri\" : \"https://westus2.ppe.cognitiveservices.azure.com/text/analytics/v3.0//entities/linking\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ac3668c6dc080a58a0248ccced1c7abab7e1483"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MzY1NjQz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#pullrequestreview-408365643", "createdAt": "2020-05-08T16:37:42Z", "commit": {"oid": "2ac3668c6dc080a58a0248ccced1c7abab7e1483"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNjozNzo0MlrOGSryVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNjozNzo0MlrOGSryVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI0NDk0OA==", "bodyText": "consider changing to a name that indicates that this method is only intended to use when error.id=\"\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r422244948", "createdAt": "2020-05-08T16:37:42Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/implementation/Utility.java", "diffHunk": "@@ -25,4 +35,64 @@ public static void inputDocumentsValidation(Iterable<?> documents) {\n             throw new IllegalArgumentException(\"'documents' cannot be empty.\");\n         }\n     }\n+\n+    /**\n+     * Get a mock {@link HttpResponse} that only return status code 400.\n+     *\n+     * @param response A {@link SimpleResponse} with any type\n+     * @return A mock {@link HttpResponse} that only return status code 400.\n+     */\n+    public static HttpResponse getMockHttpResponse(SimpleResponse<?> response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ac3668c6dc080a58a0248ccced1c7abab7e1483"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MzcyNjU5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#pullrequestreview-408372659", "createdAt": "2020-05-08T16:48:59Z", "commit": {"oid": "2ac3668c6dc080a58a0248ccced1c7abab7e1483"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNjo0OTowMFrOGSsJIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNjo0OTowMFrOGSsJIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI1MDc4NQ==", "bodyText": "although this will be supported in all endpoints, it has only been deployed to linked entities one.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r422250785", "createdAt": "2020-05-08T16:49:00Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientTest.java", "diffHunk": "@@ -264,6 +264,14 @@ public void recognizeEntitiesForListWithOptions() {\n                 .verifyComplete());\n     }\n \n+    @Test\n+    public void recognizeEntitiesTooManyDocuments() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ac3668c6dc080a58a0248ccced1c7abab7e1483"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MzczMDE2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#pullrequestreview-408373016", "createdAt": "2020-05-08T16:49:33Z", "commit": {"oid": "2ac3668c6dc080a58a0248ccced1c7abab7e1483"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNjo0OTozM1rOGSsKQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNjo0OTozM1rOGSsKQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI1MTA3NQ==", "bodyText": "it will be good to check the status code and error code?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r422251075", "createdAt": "2020-05-08T16:49:33Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientTest.java", "diffHunk": "@@ -264,6 +264,14 @@ public void recognizeEntitiesForListWithOptions() {\n                 .verifyComplete());\n     }\n \n+    @Test\n+    public void recognizeEntitiesTooManyDocuments() {\n+        recognizeEntitiesTooManyDocumentsRunner(inputs -> {\n+            StepVerifier.create(client.recognizeEntitiesBatch(inputs))\n+                .verifyErrorSatisfies(ex -> assertEquals(HttpResponseException.class, ex.getClass()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ac3668c6dc080a58a0248ccced1c7abab7e1483"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NDA4NDQ5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#pullrequestreview-408408449", "createdAt": "2020-05-08T17:46:10Z", "commit": {"oid": "2ac3668c6dc080a58a0248ccced1c7abab7e1483"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNzo0NjoxMFrOGSt5MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNzo1MDoyN1rOGSuBgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3OTQ3Mw==", "bodyText": "Oh sorry, what I meant was this should be just \"Get the sentence text property\". It's still a nitpick though, so not a big deal if you don't want to change it again", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r422279473", "createdAt": "2020-05-08T17:46:10Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/SentenceSentiment.java", "diffHunk": "@@ -30,7 +30,7 @@ public SentenceSentiment(String text, TextSentiment sentiment, SentimentConfiden\n     }\n \n     /**\n-     * Get the text property: The sentence text.\n+     * Get the sentence text property: The sentence text.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ac3668c6dc080a58a0248ccced1c7abab7e1483"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI4MTYwMQ==", "bodyText": "Sorry I was wrong when I suggested this, I didn't realize that this TextDocumentInput constructor didn't take language. I'm confused though: it looks like in master you had two constructors: one that took language, one that did not.\nI think you should still have two constructors here like in master. For the one that doesn't take language as a parameter, it should set this.language = \"en\", since that is the default. Otherwise, this.language = language", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r422281601", "createdAt": "2020-05-08T17:50:27Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextDocumentInput.java", "diffHunk": "@@ -36,7 +36,6 @@\n     public TextDocumentInput(String id, String text) {\n         this.id = id;\n         this.text = text;\n-        this.language = \"en\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ac3668c6dc080a58a0248ccced1c7abab7e1483"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07718eb148f40fc09ec3f01ca40a806ba7b4aa4c", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/07718eb148f40fc09ec3f01ca40a806ba7b4aa4c", "committedDate": "2020-05-08T22:52:45Z", "message": "wording and setter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTcxMzA1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#pullrequestreview-408571305", "createdAt": "2020-05-08T23:01:01Z", "commit": {"oid": "07718eb148f40fc09ec3f01ca40a806ba7b4aa4c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTcyMDI0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#pullrequestreview-408572024", "createdAt": "2020-05-08T23:03:43Z", "commit": {"oid": "07718eb148f40fc09ec3f01ca40a806ba7b4aa4c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMzowMzo0NFrOGS2Cjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMzowMzo0NFrOGS2Cjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxMjk0Mg==", "bodyText": "i'm not sure i understand the context on just making setLanguage a setter and not adding it to a separate constructor like you used to have it. Is there a reason why you can't add this constructor back like it is in master: \n  \n    \n      azure-sdk-for-java/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextDocumentInput.java\n    \n    \n         Line 50\n      in\n      fcdaff1\n    \n    \n    \n    \n\n        \n          \n           public TextDocumentInput(String id, String text, String language) { \n        \n    \n  \n\n\nI really don't think it's a good idea to force users to call TextDocumentInput.setLanguage(\"en\") for the most basic version of TextDocumentInput (you're doing this in your tests). What I think you should do is have two constructors exactly how it is in master. Is there a reason why you're changing this code?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10593#discussion_r422412942", "createdAt": "2020-05-08T23:03:44Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextDocumentInput.java", "diffHunk": "@@ -73,9 +73,12 @@ public String getLanguage() {\n      * for Spanish etc. If not set, use \"en\" for English as default.\n      *\n      * @param language Optional. This is the 2 letter ISO 639-1 representation of a language.\n+     *\n+     * @return The object {@link TextDocumentInput} itself.\n      */\n-    public void setLanguage(String language) {\n+    public TextDocumentInput setLanguage(String language) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07718eb148f40fc09ec3f01ca40a806ba7b4aa4c"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dcf149196d48bb0f1a73488c5e24a085142d45d", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7dcf149196d48bb0f1a73488c5e24a085142d45d", "committedDate": "2020-05-08T23:54:00Z", "message": "throw HttpException with errorcode, and message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9dd6c36eab954f67de1724071cf9bca6ebaf1a5", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c9dd6c36eab954f67de1724071cf9bca6ebaf1a5", "committedDate": "2020-05-09T01:00:55Z", "message": "update changelog and readme"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4639, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}