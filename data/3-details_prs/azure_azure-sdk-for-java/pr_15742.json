{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNDM1Mjk4", "number": 15742, "title": "CosmosPagedFlux & CosmosPagedIterable Handler", "bodyText": "This PR adds handler to CosmosPagedFlux and CosmosPagedIterable.\nMore details on this feature API can be found here: #14757\nCurrently added as beta APIs, will be fully supported once tested by Walmart Fork Lift team.", "createdAt": "2020-09-25T23:56:36Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742", "merged": true, "mergeCommit": {"oid": "a63e68f5bf4ce7f094c053c8db5dc2ca69bf362d"}, "closed": true, "closedAt": "2020-09-30T18:48:37Z", "author": {"login": "kushagraThapar"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMaAb2AH2gAyNDkzNDM1Mjk4Ojk1MjAyZDQzZjAyN2RiZDEyYjEzMjQ0ZjkwODk0NjA2OWNmZTliMzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNxWO6gH2gAyNDkzNDM1Mjk4Ojk4ZjY2MWQyYjVlNmFmMzQwZDRjODFhMTA0M2YzMzUzMDRjZDUyMjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "95202d43f027dbd12b13244f908946069cfe9b35", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/95202d43f027dbd12b13244f908946069cfe9b35", "committedDate": "2020-09-25T18:22:20Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c15d978d21619049bea0fd1798625ca17f11c4ac", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c15d978d21619049bea0fd1798625ca17f11c4ac", "committedDate": "2020-09-25T20:27:59Z", "message": "Merge branch 'master' into cosmos_paged_flux_handler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c135b55aa6b8df4af0dfc269f9743a2a20543dbd", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c135b55aa6b8df4af0dfc269f9743a2a20543dbd", "committedDate": "2020-09-25T21:24:26Z", "message": "WIP for CosmosPagedFluxHandler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ad74ef79cc10631c34233ab10d842703dfa25ad", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8ad74ef79cc10631c34233ab10d842703dfa25ad", "committedDate": "2020-09-25T21:40:07Z", "message": "WIP for Cosmos Paged Iterable Handler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d5f0dc010d748f953808056f9c955ac22f7ed83", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6d5f0dc010d748f953808056f9c955ac22f7ed83", "committedDate": "2020-09-25T23:53:25Z", "message": "Added functionality to provide handler to CosmosPagedFlux and CosmosPagedIterable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df24d030f3536129da73f60444473ad145dddaa7", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/df24d030f3536129da73f60444473ad145dddaa7", "committedDate": "2020-09-25T23:54:46Z", "message": "Merged latest master and resolved conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NzA1MDM3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#pullrequestreview-497705037", "createdAt": "2020-09-28T16:34:29Z", "commit": {"oid": "df24d030f3536129da73f60444473ad145dddaa7"}, "state": "APPROVED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjozNDoyOVrOHZGmPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjo1Mzo0MVrOHZHS1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4NDU0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Consumer<FeedResponse<T>> feedResponseConsumer;\n          \n          \n            \n                private final Consumer<FeedResponse<T>> feedResponseConsumer;", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r496084541", "createdAt": "2020-09-28T16:34:29Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/CosmosPagedFlux.java", "diffHunk": "@@ -36,10 +37,29 @@\n \n     private final Function<CosmosPagedFluxOptions, Flux<FeedResponse<T>>> optionsFluxFunction;\n \n+    private Consumer<FeedResponse<T>> feedResponseConsumer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df24d030f3536129da73f60444473ad145dddaa7"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5MDA0Mg==", "bodyText": "you will need client builder for session consistency otherwise the test will become flaky.\nperhaps clientBuildersWithDirectSession ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r496090042", "createdAt": "2020-09-28T16:43:33Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedFluxTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ *\n+ */\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class CosmosPagedFluxTest extends TestSuiteBase {\n+\n+    private static final int NUM_OF_ITEMS = 10;\n+\n+    private CosmosAsyncClient cosmosAsyncClient;\n+    private CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @Factory(dataProvider = \"clientBuilders\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df24d030f3536129da73f60444473ad145dddaa7"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5MDU4NA==", "bodyText": "loggger.info is too noisy for the test.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r496090584", "createdAt": "2020-09-28T16:44:25Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedIterableTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ *\n+ */\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import com.azure.cosmos.util.CosmosPagedIterable;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class CosmosPagedIterableTest extends TestSuiteBase {\n+\n+    private static final int NUM_OF_ITEMS = 10;\n+\n+    private CosmosClient cosmosClient;\n+    private CosmosContainer cosmosContainer;\n+\n+    @Factory(dataProvider = \"clientBuilders\")\n+    public CosmosPagedIterableTest(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }\n+\n+    @BeforeClass(groups = { \"simple\" }, timeOut = SETUP_TIMEOUT)\n+    public void before_CosmosPagedIterableTest() {\n+        assertThat(this.cosmosClient).isNull();\n+        this.cosmosClient = getClientBuilder().buildClient();\n+        CosmosAsyncContainer asyncContainer = getSharedMultiPartitionCosmosContainer(this.cosmosClient.asyncClient());\n+        cosmosContainer =\n+            cosmosClient.getDatabase(asyncContainer.getDatabase().getId()).getContainer(asyncContainer.getId());\n+        createItems(NUM_OF_ITEMS);\n+    }\n+\n+    @AfterClass(groups = { \"simple\" }, timeOut = SHUTDOWN_TIMEOUT, alwaysRun = true)\n+    public void afterClass() {\n+        assertThat(this.cosmosClient).isNotNull();\n+        this.cosmosClient.close();\n+    }\n+\n+    @Test(groups = { \"simple\" }, timeOut = TIMEOUT)\n+    public void readAllItemsByPageWithCosmosPagedIterableHandler() throws Exception {\n+        CosmosQueryRequestOptions cosmosQueryRequestOptions = new CosmosQueryRequestOptions();\n+\n+        CosmosPagedIterable<InternalObjectNode> cosmosPagedIterable =\n+            cosmosContainer.readAllItems(cosmosQueryRequestOptions, InternalObjectNode.class);\n+\n+        AtomicInteger handleCount = new AtomicInteger();\n+        cosmosPagedIterable = cosmosPagedIterable.handle(feedResponse -> {\n+            CosmosDiagnostics cosmosDiagnostics = feedResponse.getCosmosDiagnostics();\n+            logger.info(\"Cosmos Diagnostics : {}\", cosmosDiagnostics);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df24d030f3536129da73f60444473ad145dddaa7"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NDExNQ==", "bodyText": "ditto we should use client builder with at least session, otherwise the test will be flaky.\nperhaps clientBuildersWithDirectSession", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r496094115", "createdAt": "2020-09-28T16:50:28Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedIterableTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ *\n+ */\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import com.azure.cosmos.util.CosmosPagedIterable;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class CosmosPagedIterableTest extends TestSuiteBase {\n+\n+    private static final int NUM_OF_ITEMS = 10;\n+\n+    private CosmosClient cosmosClient;\n+    private CosmosContainer cosmosContainer;\n+\n+    @Factory(dataProvider = \"clientBuilders\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df24d030f3536129da73f60444473ad145dddaa7"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NTQzNA==", "bodyText": "for the new test please don't use InternalObjectNode this will be used by the end user.\nPlease rely on ObjectNode or a simple POJO.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r496095434", "createdAt": "2020-09-28T16:52:46Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedFluxTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ *\n+ */\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class CosmosPagedFluxTest extends TestSuiteBase {\n+\n+    private static final int NUM_OF_ITEMS = 10;\n+\n+    private CosmosAsyncClient cosmosAsyncClient;\n+    private CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @Factory(dataProvider = \"clientBuilders\")\n+    public CosmosPagedFluxTest(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }\n+\n+    @BeforeClass(groups = { \"simple\" }, timeOut = SETUP_TIMEOUT)\n+    public void before_CosmosPagedFluxTest() {\n+        assertThat(this.cosmosAsyncClient).isNull();\n+        this.cosmosAsyncClient = getClientBuilder().buildAsyncClient();\n+        CosmosAsyncContainer asyncContainer = getSharedMultiPartitionCosmosContainer(this.cosmosAsyncClient);\n+        cosmosAsyncContainer =\n+            cosmosAsyncClient.getDatabase(asyncContainer.getDatabase().getId()).getContainer(asyncContainer.getId());\n+        createItems(NUM_OF_ITEMS);\n+    }\n+\n+    @AfterClass(groups = { \"simple\" }, timeOut = SHUTDOWN_TIMEOUT, alwaysRun = true)\n+    public void afterClass() {\n+        assertThat(this.cosmosAsyncClient).isNotNull();\n+        this.cosmosAsyncClient.close();\n+    }\n+\n+    @Test(groups = { \"simple\" }, timeOut = TIMEOUT)\n+    public void readAllItemsByPageWithCosmosPagedFluxHandler() throws Exception {\n+        CosmosQueryRequestOptions cosmosQueryRequestOptions = new CosmosQueryRequestOptions();\n+\n+        CosmosPagedFlux<InternalObjectNode> cosmosPagedFlux =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df24d030f3536129da73f60444473ad145dddaa7"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NTUzNg==", "bodyText": "ditto.\nfor the new test please don't use InternalObjectNode this will be used by the end user.\nPlease rely on ObjectNode or a simple POJO.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r496095536", "createdAt": "2020-09-28T16:52:56Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedIterableTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ *\n+ */\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import com.azure.cosmos.util.CosmosPagedIterable;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class CosmosPagedIterableTest extends TestSuiteBase {\n+\n+    private static final int NUM_OF_ITEMS = 10;\n+\n+    private CosmosClient cosmosClient;\n+    private CosmosContainer cosmosContainer;\n+\n+    @Factory(dataProvider = \"clientBuilders\")\n+    public CosmosPagedIterableTest(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }\n+\n+    @BeforeClass(groups = { \"simple\" }, timeOut = SETUP_TIMEOUT)\n+    public void before_CosmosPagedIterableTest() {\n+        assertThat(this.cosmosClient).isNull();\n+        this.cosmosClient = getClientBuilder().buildClient();\n+        CosmosAsyncContainer asyncContainer = getSharedMultiPartitionCosmosContainer(this.cosmosClient.asyncClient());\n+        cosmosContainer =\n+            cosmosClient.getDatabase(asyncContainer.getDatabase().getId()).getContainer(asyncContainer.getId());\n+        createItems(NUM_OF_ITEMS);\n+    }\n+\n+    @AfterClass(groups = { \"simple\" }, timeOut = SHUTDOWN_TIMEOUT, alwaysRun = true)\n+    public void afterClass() {\n+        assertThat(this.cosmosClient).isNotNull();\n+        this.cosmosClient.close();\n+    }\n+\n+    @Test(groups = { \"simple\" }, timeOut = TIMEOUT)\n+    public void readAllItemsByPageWithCosmosPagedIterableHandler() throws Exception {\n+        CosmosQueryRequestOptions cosmosQueryRequestOptions = new CosmosQueryRequestOptions();\n+\n+        CosmosPagedIterable<InternalObjectNode> cosmosPagedIterable =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df24d030f3536129da73f60444473ad145dddaa7"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NTk1OA==", "bodyText": "nit: final.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r496095958", "createdAt": "2020-09-28T16:53:41Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/CosmosPagedIterable.java", "diffHunk": "@@ -22,12 +22,27 @@\n  */\n public final class CosmosPagedIterable<T> extends ContinuablePagedIterable<String, T, FeedResponse<T>> {\n \n+    private CosmosPagedFlux<T> cosmosPagedFlux;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df24d030f3536129da73f60444473ad145dddaa7"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3ODc1MTU4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#pullrequestreview-497875158", "createdAt": "2020-09-28T20:34:32Z", "commit": {"oid": "df24d030f3536129da73f60444473ad145dddaa7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98f661d2b5e6af340d4c81a1043f335304cd5221", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/98f661d2b5e6af340d4c81a1043f335304cd5221", "committedDate": "2020-09-30T00:07:53Z", "message": "Updated tests with ObjectNode and other code review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3221, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}