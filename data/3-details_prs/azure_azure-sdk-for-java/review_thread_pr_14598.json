{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1Njg0OTE1", "number": 14598, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjozNzoyM1rOEeYcUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMToxODozNVrOEeefHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjkzMjAzOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjozNzoyM1rOHKAImQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDo1MDoyNlrOHKIw7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI1MDAwOQ==", "bodyText": "nit: Do not need space This line would align with line below.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480250009", "createdAt": "2020-08-31T16:37:23Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -286,8 +287,8 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    public Mono<Long> schedule(ServiceBusMessage message, Instant scheduledEnqueueTime, int maxLinkSize,\n-        String associatedLinkName, ServiceBusTransactionContext transactionContext) {\n+    public Mono<Long> schedule(ServiceBusMessage message, OffsetDateTime scheduledEnqueueTime, int maxLinkSize,\n+                               String associatedLinkName, ServiceBusTransactionContext transactionContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afb24fa522ff4be9bac79d83ed6d4677d0e749e5"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5MTQwNA==", "bodyText": "Updated", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480391404", "createdAt": "2020-08-31T20:50:26Z", "author": {"login": "YijunXieMS"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -286,8 +287,8 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    public Mono<Long> schedule(ServiceBusMessage message, Instant scheduledEnqueueTime, int maxLinkSize,\n-        String associatedLinkName, ServiceBusTransactionContext transactionContext) {\n+    public Mono<Long> schedule(ServiceBusMessage message, OffsetDateTime scheduledEnqueueTime, int maxLinkSize,\n+                               String associatedLinkName, ServiceBusTransactionContext transactionContext) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI1MDAwOQ=="}, "originalCommit": {"oid": "afb24fa522ff4be9bac79d83ed6d4677d0e749e5"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjk1MjE4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjo0MzoyMFrOHKAU7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDo1MDozOFrOHKIxYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI1MzE2Ng==", "bodyText": "via-queue  -> via-topic", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480253166", "createdAt": "2020-08-31T16:43:20Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientIntegrationTest.java", "diffHunk": "@@ -205,7 +206,82 @@ void viaMessageSendTest() {\n             })\n             .verifyComplete();\n \n-        // Verify, intermediate-via queue has is delivered to intermediate Entity.\n+        // Verify, intermediate-via queue has it delivered to intermediate Entity.\n+        StepVerifier.create(intermediateReceiver.receiveMessages().take(total).timeout(shortTimeout))\n+            .assertNext(receivedMessage -> {\n+                assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+                messagesPending.decrementAndGet();\n+            })\n+            .verifyComplete();\n+    }\n+\n+    /**\n+     * Verifies that we can send message to final destination using via-queue.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afb24fa522ff4be9bac79d83ed6d4677d0e749e5"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5MTUyMw==", "bodyText": "good catch! updated", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480391523", "createdAt": "2020-08-31T20:50:38Z", "author": {"login": "YijunXieMS"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientIntegrationTest.java", "diffHunk": "@@ -205,7 +206,82 @@ void viaMessageSendTest() {\n             })\n             .verifyComplete();\n \n-        // Verify, intermediate-via queue has is delivered to intermediate Entity.\n+        // Verify, intermediate-via queue has it delivered to intermediate Entity.\n+        StepVerifier.create(intermediateReceiver.receiveMessages().take(total).timeout(shortTimeout))\n+            .assertNext(receivedMessage -> {\n+                assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+                messagesPending.decrementAndGet();\n+            })\n+            .verifyComplete();\n+    }\n+\n+    /**\n+     * Verifies that we can send message to final destination using via-queue.\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI1MzE2Ng=="}, "originalCommit": {"oid": "afb24fa522ff4be9bac79d83ed6d4677d0e749e5"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjk4NjA1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusManagementNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjo1MzowNVrOHKApqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDo1MDo0M1rOHKIxhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI1ODQ3Mg==", "bodyText": "Same as above: space  not needed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480258472", "createdAt": "2020-08-31T16:53:05Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusManagementNode.java", "diffHunk": "@@ -93,14 +94,14 @@\n      * the message.\n      *\n      * @param message The message to be sent to the entity.\n-     * @param scheduledEnqueueTime The {@link Instant} at which the message should be enqueued in the entity.\n+     * @param scheduledEnqueueTime The {@link OffsetDateTime} at which the message should be enqueued in the entity.\n      * @param transactionContext to be set on message before sending to Service Bus.\n      *\n      * @return The sequence number representing the pending send, which returns the sequence number of the scheduled\n      *     message. This sequence number can be used to cancel the scheduling of the message.\n      */\n-    Mono<Long> schedule(ServiceBusMessage message, Instant scheduledEnqueueTime, int maxSendLinkSize,\n-        String associatedLinkName, ServiceBusTransactionContext transactionContext);\n+    Mono<Long> schedule(ServiceBusMessage message, OffsetDateTime scheduledEnqueueTime, int maxSendLinkSize,\n+                        String associatedLinkName, ServiceBusTransactionContext transactionContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afb24fa522ff4be9bac79d83ed6d4677d0e749e5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5MTU1OQ==", "bodyText": "updated", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480391559", "createdAt": "2020-08-31T20:50:43Z", "author": {"login": "YijunXieMS"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusManagementNode.java", "diffHunk": "@@ -93,14 +94,14 @@\n      * the message.\n      *\n      * @param message The message to be sent to the entity.\n-     * @param scheduledEnqueueTime The {@link Instant} at which the message should be enqueued in the entity.\n+     * @param scheduledEnqueueTime The {@link OffsetDateTime} at which the message should be enqueued in the entity.\n      * @param transactionContext to be set on message before sending to Service Bus.\n      *\n      * @return The sequence number representing the pending send, which returns the sequence number of the scheduled\n      *     message. This sequence number can be used to cancel the scheduling of the message.\n      */\n-    Mono<Long> schedule(ServiceBusMessage message, Instant scheduledEnqueueTime, int maxSendLinkSize,\n-        String associatedLinkName, ServiceBusTransactionContext transactionContext);\n+    Mono<Long> schedule(ServiceBusMessage message, OffsetDateTime scheduledEnqueueTime, int maxSendLinkSize,\n+                        String associatedLinkName, ServiceBusTransactionContext transactionContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI1ODQ3Mg=="}, "originalCommit": {"oid": "afb24fa522ff4be9bac79d83ed6d4677d0e749e5"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzAwMTQwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusClientBuilderTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjo1NjoxMlrOHKAzyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDo1MToxNVrOHKIyZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2MTA2Nw==", "bodyText": "May be we can add one more validation that \"By adding 'viaTopicNamedid not change thetopicName.  You can use client.getEntityPath()`  to validate that.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480261067", "createdAt": "2020-08-31T16:56:12Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusClientBuilderTest.java", "diffHunk": "@@ -75,6 +89,22 @@ void queueClientWithViaQueueName() {\n         assertNotNull(client);\n     }\n \n+    @Test\n+    void topicClientWithViaTopicName() {\n+        // Arrange\n+        final ServiceBusSenderClientBuilder builder = new ServiceBusClientBuilder()\n+            .connectionString(NAMESPACE_CONNECTION_STRING)\n+            .sender()\n+            .topicName(TOPIC_NAME)\n+            .viaTopicName(TOPIC_NAME);\n+\n+        // Act\n+        final ServiceBusSenderAsyncClient client = builder.buildAsyncClient();\n+\n+        // Assert\n+        assertNotNull(client);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afb24fa522ff4be9bac79d83ed6d4677d0e749e5"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5MTc4Mg==", "bodyText": "Added assertion", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480391782", "createdAt": "2020-08-31T20:51:15Z", "author": {"login": "YijunXieMS"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusClientBuilderTest.java", "diffHunk": "@@ -75,6 +89,22 @@ void queueClientWithViaQueueName() {\n         assertNotNull(client);\n     }\n \n+    @Test\n+    void topicClientWithViaTopicName() {\n+        // Arrange\n+        final ServiceBusSenderClientBuilder builder = new ServiceBusClientBuilder()\n+            .connectionString(NAMESPACE_CONNECTION_STRING)\n+            .sender()\n+            .topicName(TOPIC_NAME)\n+            .viaTopicName(TOPIC_NAME);\n+\n+        // Act\n+        final ServiceBusSenderAsyncClient client = builder.buildAsyncClient();\n+\n+        // Assert\n+        assertNotNull(client);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2MTA2Nw=="}, "originalCommit": {"oid": "afb24fa522ff4be9bac79d83ed6d4677d0e749e5"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzkwMjU2OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMToxMTo1N1rOHKJZMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMjoyOTowMlrOHKLb_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwMTcxNQ==", "bodyText": "What happens if both viaQueueName and viaTopicName are set.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480401715", "createdAt": "2020-08-31T21:11:57Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -530,9 +544,13 @@ public ServiceBusSenderAsyncClient buildAsyncClient() {\n             if (!CoreUtils.isNullOrEmpty(viaQueueName) && entityType == MessagingEntityType.SUBSCRIPTION) {\n                 throw logger.logExceptionAsError(new IllegalStateException(String.format(\n                     \"(%s), Via queue feature work only with a queue.\", viaQueueName)));\n+            } else if (!CoreUtils.isNullOrEmpty(viaTopicName) && entityType == MessagingEntityType.QUEUE) {\n+                throw logger.logExceptionAsError(new IllegalStateException(String.format(\n+                    \"(%s), Via topic feature work only with a topic.\", viaTopicName)));\n             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6da02438b53653bb4f40922d3a3cafb0fcf5d64"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzNTE5Ng==", "bodyText": "validateEntityPaths rules out that both topicName and queueName are provided.\nIf both viaQueueName and viaTopicName are set, one of the above two validations will throw an error.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480435196", "createdAt": "2020-08-31T22:29:02Z", "author": {"login": "YijunXieMS"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -530,9 +544,13 @@ public ServiceBusSenderAsyncClient buildAsyncClient() {\n             if (!CoreUtils.isNullOrEmpty(viaQueueName) && entityType == MessagingEntityType.SUBSCRIPTION) {\n                 throw logger.logExceptionAsError(new IllegalStateException(String.format(\n                     \"(%s), Via queue feature work only with a queue.\", viaQueueName)));\n+            } else if (!CoreUtils.isNullOrEmpty(viaTopicName) && entityType == MessagingEntityType.QUEUE) {\n+                throw logger.logExceptionAsError(new IllegalStateException(String.format(\n+                    \"(%s), Via topic feature work only with a topic.\", viaTopicName)));\n             }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwMTcxNQ=="}, "originalCommit": {"oid": "f6da02438b53653bb4f40922d3a3cafb0fcf5d64"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzkwOTMxOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMToxNDowNVrOHKJdPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzo0ODozNlrOHLBtTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwMjc0OA==", "bodyText": "This looks very similar to the instant one, can you just do another transformation rather than duplicating this logic.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480402748", "createdAt": "2020-08-31T21:14:05Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "diffHunk": "@@ -219,8 +223,25 @@ public int getSize(Message amqpMessage) {\n         return Collections.emptyList();\n     }\n \n-    private List<Instant> deserializeListOfInstant(Message amqpMessage) {\n+    private List<OffsetDateTime> deserializeListOfOffsetDateTime(Message amqpMessage) {\n+        if (amqpMessage.getBody() instanceof AmqpValue) {\n+            AmqpValue amqpValue = ((AmqpValue) amqpMessage.getBody());\n+            if (amqpValue.getValue() instanceof  Map) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6da02438b53653bb4f40922d3a3cafb0fcf5d64"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwMzQ4NA==", "bodyText": "In addition, can you flatten this logic? The multiple nested ifs loops are hard to read.\nFor example:\nif (!(amqpMessage.getBody() instanceof AmqpValue)) {\n    return Collections.emptyList();\n}\n\nfinal AmqpValue amqpValue = ((AmqpValue) amqpMessage.getBody());\nif (!(amqpValue.getValue() instanceof Map)) {\n    return Collections.emptyList();\n}\n\n... stuff.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480403484", "createdAt": "2020-08-31T21:15:36Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "diffHunk": "@@ -219,8 +223,25 @@ public int getSize(Message amqpMessage) {\n         return Collections.emptyList();\n     }\n \n-    private List<Instant> deserializeListOfInstant(Message amqpMessage) {\n+    private List<OffsetDateTime> deserializeListOfOffsetDateTime(Message amqpMessage) {\n+        if (amqpMessage.getBody() instanceof AmqpValue) {\n+            AmqpValue amqpValue = ((AmqpValue) amqpMessage.getBody());\n+            if (amqpValue.getValue() instanceof  Map) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwMjc0OA=="}, "originalCommit": {"oid": "f6da02438b53653bb4f40922d3a3cafb0fcf5d64"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyNDM2Ng==", "bodyText": "Created a new issue to refactor all Instant related stuffs. #14691", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r481324366", "createdAt": "2020-09-01T17:48:36Z", "author": {"login": "YijunXieMS"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "diffHunk": "@@ -219,8 +223,25 @@ public int getSize(Message amqpMessage) {\n         return Collections.emptyList();\n     }\n \n-    private List<Instant> deserializeListOfInstant(Message amqpMessage) {\n+    private List<OffsetDateTime> deserializeListOfOffsetDateTime(Message amqpMessage) {\n+        if (amqpMessage.getBody() instanceof AmqpValue) {\n+            AmqpValue amqpValue = ((AmqpValue) amqpMessage.getBody());\n+            if (amqpValue.getValue() instanceof  Map) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwMjc0OA=="}, "originalCommit": {"oid": "f6da02438b53653bb4f40922d3a3cafb0fcf5d64"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzkxODM0OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMToxNzowM1rOHKJiqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzo1MToxMFrOHLBzTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNDEzNg==", "bodyText": "Is this logic correct? I don't remember making such large transformations like this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480404136", "createdAt": "2020-08-31T21:17:03Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1085,7 +1089,8 @@ public LockRenewalOperation getAutoRenewSessionLock(String sessionId, Duration m\n             .flatMap(connection -> connection.getManagementNode(entityPath, entityType))\n             .flatMap(serviceBusManagementNode ->\n                 serviceBusManagementNode.renewMessageLock(lockToken, getLinkName(null)))\n-            .map(instant -> managementNodeLocks.addOrUpdate(lockToken, instant, instant));\n+            .map(instant -> managementNodeLocks.addOrUpdate(lockToken, instant,\n+                instant.atOffset(ZoneOffset.UTC)).atOffset(ZoneOffset.UTC));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6da02438b53653bb4f40922d3a3cafb0fcf5d64"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNTM5MA==", "bodyText": "You can change the LockContainer to take OffsetDateTime so you don't have to do all these method invocations.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480405390", "createdAt": "2020-08-31T21:20:02Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1085,7 +1089,8 @@ public LockRenewalOperation getAutoRenewSessionLock(String sessionId, Duration m\n             .flatMap(connection -> connection.getManagementNode(entityPath, entityType))\n             .flatMap(serviceBusManagementNode ->\n                 serviceBusManagementNode.renewMessageLock(lockToken, getLinkName(null)))\n-            .map(instant -> managementNodeLocks.addOrUpdate(lockToken, instant, instant));\n+            .map(instant -> managementNodeLocks.addOrUpdate(lockToken, instant,\n+                instant.atOffset(ZoneOffset.UTC)).atOffset(ZoneOffset.UTC));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNDEzNg=="}, "originalCommit": {"oid": "f6da02438b53653bb4f40922d3a3cafb0fcf5d64"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyNTkwMg==", "bodyText": "I think it's correct. It's just conversion back and forth.\nWill refactor it with issue #14691", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r481325902", "createdAt": "2020-09-01T17:51:10Z", "author": {"login": "YijunXieMS"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1085,7 +1089,8 @@ public LockRenewalOperation getAutoRenewSessionLock(String sessionId, Duration m\n             .flatMap(connection -> connection.getManagementNode(entityPath, entityType))\n             .flatMap(serviceBusManagementNode ->\n                 serviceBusManagementNode.renewMessageLock(lockToken, getLinkName(null)))\n-            .map(instant -> managementNodeLocks.addOrUpdate(lockToken, instant, instant));\n+            .map(instant -> managementNodeLocks.addOrUpdate(lockToken, instant,\n+                instant.atOffset(ZoneOffset.UTC)).atOffset(ZoneOffset.UTC));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNDEzNg=="}, "originalCommit": {"oid": "f6da02438b53653bb4f40922d3a3cafb0fcf5d64"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzkyMjIwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/UnnamedSessionManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMToxODozNVrOHKJlCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzo1MDo1MlrOHLBypg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNDc0Nw==", "bodyText": "I thought we made managementNode.renewSessionLock return OffsetDateTime. You had changed one operation in there.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480404747", "createdAt": "2020-08-31T21:18:35Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/UnnamedSessionManager.java", "diffHunk": "@@ -160,18 +161,18 @@ String getLinkName(String sessionId) {\n      * @return The next expiration time for the session lock.\n      * @throws IllegalStateException if the receiver is a non-session receiver.\n      */\n-    Mono<Instant> renewSessionLock(String sessionId) {\n+    Mono<OffsetDateTime> renewSessionLock(String sessionId) {\n         return validateParameter(sessionId, \"sessionId\", \"renewSessionLock\").then(\n             getManagementNode().flatMap(channel -> {\n                 final UnnamedSessionReceiver receiver = sessionReceivers.get(sessionId);\n                 final String associatedLinkName = receiver != null ? receiver.getLinkName() : null;\n \n                 return channel.renewSessionLock(sessionId, associatedLinkName).handle((instant, sink) -> {\n                     if (receiver != null) {\n-                        receiver.setSessionLockedUntil(instant);\n+                        receiver.setSessionLockedUntil(instant.atOffset(ZoneOffset.UTC));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6da02438b53653bb4f40922d3a3cafb0fcf5d64"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyNTczNA==", "bodyText": "Will refactor it with issue #14691", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r481325734", "createdAt": "2020-09-01T17:50:52Z", "author": {"login": "YijunXieMS"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/UnnamedSessionManager.java", "diffHunk": "@@ -160,18 +161,18 @@ String getLinkName(String sessionId) {\n      * @return The next expiration time for the session lock.\n      * @throws IllegalStateException if the receiver is a non-session receiver.\n      */\n-    Mono<Instant> renewSessionLock(String sessionId) {\n+    Mono<OffsetDateTime> renewSessionLock(String sessionId) {\n         return validateParameter(sessionId, \"sessionId\", \"renewSessionLock\").then(\n             getManagementNode().flatMap(channel -> {\n                 final UnnamedSessionReceiver receiver = sessionReceivers.get(sessionId);\n                 final String associatedLinkName = receiver != null ? receiver.getLinkName() : null;\n \n                 return channel.renewSessionLock(sessionId, associatedLinkName).handle((instant, sink) -> {\n                     if (receiver != null) {\n-                        receiver.setSessionLockedUntil(instant);\n+                        receiver.setSessionLockedUntil(instant.atOffset(ZoneOffset.UTC));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNDc0Nw=="}, "originalCommit": {"oid": "f6da02438b53653bb4f40922d3a3cafb0fcf5d64"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1473, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}