{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0Mjg5OTA0", "number": 13845, "title": "Granular Netty Write, Response, and Read Timeouts", "bodyText": "Fixes #10397\nThis PR adds granular handling for write, response, and read timeouts for a request/response using Netty's HttpClient's doOnX operators. By default the timeouts for each operation type will be 60 seconds with the ability to configure them from one millisecond to having no timeout at all.\nWrite timeout handling watches both write operations completing and that the channel outbound buffer is being sent over the wire, it is added using the doOnRequest hook which triggers right before a request is sent using the channel.\nResponse timeout ensures that the status code and HTTP headers of a response returns within a reasonable time, it is added using the doAfterRequest hook which triggers once the request has been sent but before response metadata is returned. Additionally, during the doAfterRequest hook the write timeout handler is removed as the request has completed sending.\nRead timeout ensures that the server is continually sending the response body to the client, it is added using the doOnResponse hook which triggers once the response metadata is returned but the entire response hasn't been received. Additionally, during the doOnResponse hook the response timeout handler is removed as the response metadata has been received.\nFinally, once the complete response has been received, during the doOnResponseSuccess hook, the read timeout handler is removed as the complete life-cycle of the request/response has been completed.", "createdAt": "2020-08-06T22:16:50Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13845", "merged": true, "mergeCommit": {"oid": "9344fa414a6bf249b2f7df0d00083d6302ede228"}, "closed": true, "closedAt": "2020-08-10T20:51:32Z", "author": {"login": "alzimmermsft"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8XQz5gH2gAyNDY0Mjg5OTA0Ojg3M2FkODc5ZjIwZGQ4ODM0MjBmZTczYTQ1NTQ1NzFlZWNkMWVhNWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9rT9hgFqTQ2NDY2NDQ1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "873ad879f20dd883420fe73a4554571eecd1ea5d", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/873ad879f20dd883420fe73a4554571eecd1ea5d", "committedDate": "2020-08-06T22:07:43Z", "message": "Granular write, response, and read timeouts using HttpClient's doOnRequest, doAfterRequest, and doOnResponse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6863e34fbd4b953de0e045069c7feb32d95e8ddd", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6863e34fbd4b953de0e045069c7feb32d95e8ddd", "committedDate": "2020-08-06T22:22:51Z", "message": "Remove auto generated files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5567a6fef8315530c22f6779e755933a4b7ad61", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a5567a6fef8315530c22f6779e755933a4b7ad61", "committedDate": "2020-08-06T23:24:34Z", "message": "Merge branch 'master' into AzNetty_DoOnTimeouts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a13bbd86da56e602abaa382a3000805b2c8a7f88", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a13bbd86da56e602abaa382a3000805b2c8a7f88", "committedDate": "2020-08-06T23:30:19Z", "message": "Update test timeouts and expectations to be more flexible"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8240c7b67bc0f0c8982bf3b3d19aa5a94281ba2c", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8240c7b67bc0f0c8982bf3b3d19aa5a94281ba2c", "committedDate": "2020-08-07T00:53:09Z", "message": "Increase timeout tests sleep period to ensure event loop can trigger event"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTczNTE2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13845#pullrequestreview-462973516", "createdAt": "2020-08-07T01:11:07Z", "commit": {"oid": "8240c7b67bc0f0c8982bf3b3d19aa5a94281ba2c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NDc5ODIw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13845#pullrequestreview-464479820", "createdAt": "2020-08-10T18:39:12Z", "commit": {"oid": "8240c7b67bc0f0c8982bf3b3d19aa5a94281ba2c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODozOToxMlrOG-atPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODozOToxMlrOG-atPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwMjQ2MQ==", "bodyText": "It might be good to set the defaults in the build() method of the builder as that's usually where we set all the defaults and when it's changed we'll remember to update the builder javadocs too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13845#discussion_r468102461", "createdAt": "2020-08-10T18:39:12Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/implementation/ImplUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.netty.implementation;\n+\n+import java.time.Duration;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Helper class containing utility methods for the implementation package.\n+ */\n+final class ImplUtils {\n+    private static final long MINIMUM_TIMEOUT = TimeUnit.MILLISECONDS.toMillis(1);\n+\n+    /*\n+     * Helper function to convert the timeout duration into MILLISECONDS. If the duration is null, 0, or negative there\n+     * is no timeout period, so return 0. Otherwise, return the maximum of the duration and the minimum timeout period.\n+     */\n+\n+    /**\n+     * Returns the timeout in milliseconds to use based on the passed {@link Duration}.\n+     * <p>\n+     * If the timeout is {@code null} a default of 60 seconds will be used. If the timeout is less than or equal to zero\n+     * no timeout will be used. If the timeout is less than one millisecond a timeout of one millisecond will be used.\n+     *\n+     * @param timeout The {@link Duration} to convert to timeout in milliseconds.\n+     * @return The timeout period in milliseconds, zero if no timeout.\n+     */\n+    static long getTimeoutMillis(Duration timeout) {\n+        // Timeout is null, use the 60 second default.\n+        if (timeout == null) {\n+            return TimeUnit.SECONDS.toMillis(60);\n+        }\n+\n+        // Timeout is less than or equal to zero, return no timeout.\n+        if (timeout.isZero() || timeout.isNegative()) {\n+            return 0;\n+        }\n+\n+        // Return the maximum of the timeout period and the minimum allowed timeout period.\n+        return Math.max(timeout.toMillis(), MINIMUM_TIMEOUT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8240c7b67bc0f0c8982bf3b3d19aa5a94281ba2c"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "336934947198d6cde945e29d495e78dba0a04635", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/336934947198d6cde945e29d495e78dba0a04635", "committedDate": "2020-08-10T19:09:37Z", "message": "Merge branch 'master' into AzNetty_DoOnTimeouts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74d0e268299b0860e6cf0c0ca781262eceaa631b", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/74d0e268299b0860e6cf0c0ca781262eceaa631b", "committedDate": "2020-08-10T19:16:02Z", "message": "Moved timeout conversion into builder, changed handlers to accept timeoutMillis instead of timeout Duration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c9943f16f850995f6535b61f168aa8f982c9587", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8c9943f16f850995f6535b61f168aa8f982c9587", "committedDate": "2020-08-10T19:47:30Z", "message": "Fixed tests after last changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NjY0NDU2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13845#pullrequestreview-464664456", "createdAt": "2020-08-11T00:03:11Z", "commit": {"oid": "8c9943f16f850995f6535b61f168aa8f982c9587"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDowMzoxMVrOG-jxqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDowMzoxMVrOG-jxqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1MTA1MQ==", "bodyText": "I think this is more flaky than you expected. We have two builds on one commit that failed this test:\nhttps://dev.azure.com/azure-sdk/public/_build/results?buildId=489952&view=logs&j=3d7a0212-45d0-5080-1981-6d6ef159b344&t=14d7dc25-187c-516a-cf22-fdfcecf8f884&l=580", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13845#discussion_r468251051", "createdAt": "2020-08-11T00:03:11Z", "author": {"login": "jianghaolu"}, "path": "sdk/core/azure-core-http-netty/src/test/java/com/azure/core/http/netty/implementation/WriteTimeoutHandlerTests.java", "diffHunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.netty.implementation;\n+\n+import io.netty.channel.AbstractChannel;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.DefaultChannelPromise;\n+import io.netty.util.concurrent.DefaultEventExecutor;\n+import io.netty.util.concurrent.EventExecutor;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.atLeast;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.internal.verification.VerificationModeFactory.times;\n+\n+/**\n+ * Tests {@link WriteTimeoutHandler}.\n+ */\n+public class WriteTimeoutHandlerTests {\n+    @Test\n+    public void noTimeoutDoesNotAddWatcher() {\n+        WriteTimeoutHandler writeTimeoutHandler = new WriteTimeoutHandler(0);\n+\n+        EventExecutor eventExecutor = mock(EventExecutor.class);\n+        when(eventExecutor.scheduleAtFixedRate(any(), anyLong(), anyLong(), any())).thenReturn(null);\n+\n+        ChannelHandlerContext ctx = mock(ChannelHandlerContext.class);\n+        when(ctx.executor()).thenReturn(eventExecutor);\n+\n+        writeTimeoutHandler.handlerAdded(ctx);\n+\n+        verify(eventExecutor, never()).scheduleAtFixedRate(any(), anyLong(), anyLong(), any());\n+    }\n+\n+    @Test\n+    public void timeoutAddsWatcher() {\n+        WriteTimeoutHandler writeTimeoutHandler = new WriteTimeoutHandler(1);\n+\n+        EventExecutor eventExecutor = mock(EventExecutor.class);\n+        when(eventExecutor.scheduleAtFixedRate(any(), eq(1L), eq(1L), any())).thenReturn(null);\n+\n+        ChannelHandlerContext ctx = mock(ChannelHandlerContext.class);\n+        when(ctx.executor()).thenReturn(eventExecutor);\n+\n+        writeTimeoutHandler.handlerAdded(ctx);\n+\n+        verify(eventExecutor, times(1)).scheduleAtFixedRate(any(), eq(1L), eq(1L), any());\n+    }\n+\n+    @Test\n+    public void removingHandlerCancelsTimeout() throws InterruptedException {\n+        WriteTimeoutHandler writeTimeoutHandler = new WriteTimeoutHandler(100);\n+\n+        ChannelHandlerContext ctx = mock(ChannelHandlerContext.class);\n+        when(ctx.executor()).thenReturn(new DefaultEventExecutor());\n+\n+        writeTimeoutHandler.handlerAdded(ctx);\n+        writeTimeoutHandler.handlerRemoved(ctx);\n+\n+        Thread.sleep(100);\n+\n+        verify(ctx, never()).fireExceptionCaught(any());\n+    }\n+\n+    @Test\n+    public void writeTimesOut() throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c9943f16f850995f6535b61f168aa8f982c9587"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 849, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}