{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNDAwMzU3", "number": 11433, "title": "Return headers sync upload", "bodyText": "Resolves #10685\nNote that EncryptedBlobClient inherits BlobClient's upload method, so this change implicitly applies to EncryptedBlobClient as well.", "createdAt": "2020-05-26T19:11:47Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11433", "merged": true, "mergeCommit": {"oid": "4064382e80d440fa7b3f59cc890df37b7f76f7fd"}, "closed": true, "closedAt": "2020-05-29T20:12:24Z", "author": {"login": "rickle-msft"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclJLFcAH2gAyNDIzNDAwMzU3Ojc1NGI1OGM3ODgwYzc2ZWVmMzk2NWZkM2FjNjY4N2UwNzIyOGI1MTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclyPWbAFqTQyMDM4MzQzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "754b58c7880c76eef3965fd3ac6687e07228b518", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/754b58c7880c76eef3965fd3ac6687e07228b518", "committedDate": "2020-05-26T18:42:32Z", "message": "Changed internal implementation of sync buffered upload"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5e8a30f829768b5dc7d92c28da6973a6c79add2", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f5e8a30f829768b5dc7d92c28da6973a6c79add2", "committedDate": "2020-05-26T19:02:54Z", "message": "Added new upload method with return value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4985f6ff6155d66fbaf5458ef92a491d31e14112", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4985f6ff6155d66fbaf5458ef92a491d31e14112", "committedDate": "2020-05-26T19:06:46Z", "message": "Changelog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e50b0513ca6602fa121e0a88eb5fe44fae1fed3d", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e50b0513ca6602fa121e0a88eb5fe44fae1fed3d", "committedDate": "2020-05-26T19:10:30Z", "message": "removed tags from upload options"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "741dd681e5c3b8c9b47584945199915a8e061ccb", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/741dd681e5c3b8c9b47584945199915a8e061ccb", "committedDate": "2020-05-26T19:11:26Z", "message": "Removed unused import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NjM1NTgx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11433#pullrequestreview-418635581", "createdAt": "2020-05-26T19:59:29Z", "commit": {"oid": "741dd681e5c3b8c9b47584945199915a8e061ccb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTo1OToyOVrOGauPXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTo1OToyOVrOGauPXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3Mzc1OA==", "bodyText": "Just a thought - Ideally wouldnt this model helper code go in the getter for ParallelTransferOptions in the options bag? or would that be odd for users when they see the getter returns something different from what they set", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11433#discussion_r430673758", "createdAt": "2020-05-26T19:59:29Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobClient.java", "diffHunk": "@@ -169,29 +174,38 @@ public void upload(InputStream data, long length, boolean overwrite) {\n     public void uploadWithResponse(InputStream data, long length, ParallelTransferOptions parallelTransferOptions,\n         BlobHttpHeaders headers, Map<String, String> metadata, AccessTier tier, BlobRequestConditions requestConditions,\n         Duration timeout, Context context) {\n+        uploadWithResponse(data, length, new BlobParallelUploadOptions()\n+            .setParallelTransferOptions(parallelTransferOptions).setHeaders(headers).setMetadata(metadata).setTier(tier)\n+        .setRequestConditions(requestConditions), timeout, context);\n+    }\n+\n+    /**\n+     * Creates a new blob, or updates the content of an existing blob.\n+     * <p>\n+     * To avoid overwriting, pass \"*\" to {@link BlobRequestConditions#setIfNoneMatch(String)}.\n+     *\n+     * @param data The data to write to the blob.\n+     * @param length The exact length of the data. It is important that this value match precisely the length of the\n+     * data provided in the {@link InputStream}.\n+     * @param options {@link BlobParallelUploadOptions}\n+     * @param timeout An optional timeout value beyond which a {@link RuntimeException} will be raised.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     */\n+    public Response<BlockBlobItem> uploadWithResponse(InputStream data, long length, BlobParallelUploadOptions options,\n+        Duration timeout, Context context) {\n+        BlobParallelUploadOptions blobParallelUploadOptions = options == null ? new BlobParallelUploadOptions()\n+            : options;\n         final ParallelTransferOptions validatedParallelTransferOptions =\n-            ModelHelper.populateAndApplyDefaults(parallelTransferOptions);\n-        Mono<Object> upload = Mono.fromCallable(() -> {\n-            try {\n-                // BlobOutputStream will internally handle the decision for single-shot or multi-part upload.\n-                BlobOutputStream blobOutputStream = BlobOutputStream.blockBlobOutputStream(client,\n-                    validatedParallelTransferOptions, headers, metadata, tier, requestConditions, context);\n-                StorageImplUtils.copyToOutputStream(data, length, blobOutputStream);\n-                blobOutputStream.close();\n-                return null;\n-            } catch (IOException e) {\n-                Throwable cause = e.getCause();\n-                if (cause instanceof BlobStorageException) {\n-                    throw logger.logExceptionAsError((BlobStorageException) cause);\n-                } else {\n-                    throw logger.logExceptionAsError(new UncheckedIOException(e));\n-                }\n-            }\n-            // Subscribing has to happen on a different thread for the timeout to happen properly.\n-        }).subscribeOn(Schedulers.elastic());\n+            ModelHelper.populateAndApplyDefaults(blobParallelUploadOptions.getParallelTransferOptions());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "741dd681e5c3b8c9b47584945199915a8e061ccb"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NjM0NzE4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11433#pullrequestreview-418634718", "createdAt": "2020-05-26T19:58:12Z", "commit": {"oid": "741dd681e5c3b8c9b47584945199915a8e061ccb"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTo1ODoxMlrOGauM6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDoxMDoyMVrOGauksA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3MzEzMQ==", "bodyText": "Should this be called BlockBlobParallelUploadOptions based on the description. Or is this called this since it is the property bag for BlobClient upload.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11433#discussion_r430673131", "createdAt": "2020-05-26T19:58:12Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/BlobParallelUploadOptions.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.models;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.util.Map;\n+\n+/**\n+ * Extended options that may be passed when uploading a Block Blob in parallel.\n+ */\n+@Fluent\n+public class BlobParallelUploadOptions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "741dd681e5c3b8c9b47584945199915a8e061ccb"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3ODY0OQ==", "bodyText": "Should the async class have this overload added as well? I know it has an API which is similar to this but with all the options splayed out.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11433#discussion_r430678649", "createdAt": "2020-05-26T20:09:16Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobClient.java", "diffHunk": "@@ -169,29 +174,38 @@ public void upload(InputStream data, long length, boolean overwrite) {\n     public void uploadWithResponse(InputStream data, long length, ParallelTransferOptions parallelTransferOptions,\n         BlobHttpHeaders headers, Map<String, String> metadata, AccessTier tier, BlobRequestConditions requestConditions,\n         Duration timeout, Context context) {\n+        uploadWithResponse(data, length, new BlobParallelUploadOptions()\n+            .setParallelTransferOptions(parallelTransferOptions).setHeaders(headers).setMetadata(metadata).setTier(tier)\n+        .setRequestConditions(requestConditions), timeout, context);\n+    }\n+\n+    /**\n+     * Creates a new blob, or updates the content of an existing blob.\n+     * <p>\n+     * To avoid overwriting, pass \"*\" to {@link BlobRequestConditions#setIfNoneMatch(String)}.\n+     *\n+     * @param data The data to write to the blob.\n+     * @param length The exact length of the data. It is important that this value match precisely the length of the\n+     * data provided in the {@link InputStream}.\n+     * @param options {@link BlobParallelUploadOptions}\n+     * @param timeout An optional timeout value beyond which a {@link RuntimeException} will be raised.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     */\n+    public Response<BlockBlobItem> uploadWithResponse(InputStream data, long length, BlobParallelUploadOptions options,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "741dd681e5c3b8c9b47584945199915a8e061ccb"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3OTIxNg==", "bodyText": "Should a non-Response overload be added to match the async client more closely.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11433#discussion_r430679216", "createdAt": "2020-05-26T20:10:21Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobClient.java", "diffHunk": "@@ -169,29 +174,38 @@ public void upload(InputStream data, long length, boolean overwrite) {\n     public void uploadWithResponse(InputStream data, long length, ParallelTransferOptions parallelTransferOptions,\n         BlobHttpHeaders headers, Map<String, String> metadata, AccessTier tier, BlobRequestConditions requestConditions,\n         Duration timeout, Context context) {\n+        uploadWithResponse(data, length, new BlobParallelUploadOptions()\n+            .setParallelTransferOptions(parallelTransferOptions).setHeaders(headers).setMetadata(metadata).setTier(tier)\n+        .setRequestConditions(requestConditions), timeout, context);\n+    }\n+\n+    /**\n+     * Creates a new blob, or updates the content of an existing blob.\n+     * <p>\n+     * To avoid overwriting, pass \"*\" to {@link BlobRequestConditions#setIfNoneMatch(String)}.\n+     *\n+     * @param data The data to write to the blob.\n+     * @param length The exact length of the data. It is important that this value match precisely the length of the\n+     * data provided in the {@link InputStream}.\n+     * @param options {@link BlobParallelUploadOptions}\n+     * @param timeout An optional timeout value beyond which a {@link RuntimeException} will be raised.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     */\n+    public Response<BlockBlobItem> uploadWithResponse(InputStream data, long length, BlobParallelUploadOptions options,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "741dd681e5c3b8c9b47584945199915a8e061ccb"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "142517721f7957d0ceed881d79d913ecd5900709", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/142517721f7957d0ceed881d79d913ecd5900709", "committedDate": "2020-05-26T21:40:32Z", "message": "CI fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b18c9738632b23b3371d3a367f13b90e6f1f182", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7b18c9738632b23b3371d3a367f13b90e6f1f182", "committedDate": "2020-05-26T22:23:49Z", "message": "Updated recording"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d218a884a5d60e632a859c40fc3789f86592b9d8", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d218a884a5d60e632a859c40fc3789f86592b9d8", "committedDate": "2020-05-26T23:16:11Z", "message": "Unused imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NTcwOTE5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11433#pullrequestreview-419570919", "createdAt": "2020-05-27T20:09:15Z", "commit": {"oid": "d218a884a5d60e632a859c40fc3789f86592b9d8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMzI5NzU1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11433#pullrequestreview-420329755", "createdAt": "2020-05-28T17:19:31Z", "commit": {"oid": "d218a884a5d60e632a859c40fc3789f86592b9d8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMzgzNDMz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11433#pullrequestreview-420383433", "createdAt": "2020-05-28T18:33:18Z", "commit": {"oid": "d218a884a5d60e632a859c40fc3789f86592b9d8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4060, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}