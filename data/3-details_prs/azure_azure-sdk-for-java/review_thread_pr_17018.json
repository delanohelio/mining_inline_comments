{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMjA4MTAw", "number": 17018, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMjozMDowMlrOEz-sNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMjozMDowMlrOEz-sNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTM5OTU4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMjozMDowMlrOHriGvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMzoyNToxNFrOHrkibA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQwOTU5OQ==", "bodyText": "Should we remove them instead of comment out?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17018#discussion_r515409599", "createdAt": "2020-10-30T22:30:02Z", "author": {"login": "YijunXieMS"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientIntegrationTest.java", "diffHunk": "@@ -146,157 +145,157 @@ void nonSessionMessageBatch(MessagingEntityType entityType) {\n     /**\n      * Verifies that we can send message to final destination using via-queue.\n      */\n-    @Test\n-    void viaQueueMessageSendTest() {\n-        // Arrange\n-        final boolean useCredentials = false;\n-        final Duration shortTimeout = Duration.ofSeconds(15);\n-        final int viaIntermediateEntity = TestUtils.USE_CASE_SEND_VIA_QUEUE_1;\n-        final int destinationEntity = TestUtils.USE_CASE_SEND_VIA_QUEUE_2;\n-        final boolean shareConnection = true;\n-        final MessagingEntityType entityType = MessagingEntityType.QUEUE;\n-        final boolean isSessionEnabled = false;\n-        final String messageId = UUID.randomUUID().toString();\n-        final int total = 1;\n-        final int totalToDestination = 2;\n-        final List<ServiceBusMessage> messages = TestUtils.getServiceBusMessages(total, messageId, CONTENTS_BYTES);\n-        final String viaQueueName = getQueueName(viaIntermediateEntity);\n-\n-        setSenderAndReceiver(entityType, viaIntermediateEntity, useCredentials);\n-\n-        final ServiceBusSenderAsyncClient destination1ViaSender = getSenderBuilder(useCredentials, entityType,\n-            destinationEntity, false, shareConnection)\n-            .viaQueueName(viaQueueName)\n-            .buildAsyncClient();\n-        final ServiceBusReceiverAsyncClient destination1Receiver = getReceiverBuilder(useCredentials, entityType,\n-            destinationEntity, shareConnection)\n-            .receiveMode(ReceiveMode.RECEIVE_AND_DELETE)\n-            .buildAsyncClient();\n-\n-        final AtomicReference<ServiceBusTransactionContext> transaction = new AtomicReference<>();\n-\n-        // Act\n-        try {\n-            StepVerifier.create(destination1ViaSender.createTransaction())\n-                .assertNext(transactionContext -> {\n-                    transaction.set(transactionContext);\n-                    assertNotNull(transaction);\n-                })\n-                .verifyComplete();\n-            assertNotNull(transaction.get());\n-\n-            StepVerifier.create(sender.sendMessages(messages, transaction.get()))\n-                .verifyComplete();\n-            StepVerifier.create(destination1ViaSender.sendMessages(messages, transaction.get()))\n-                .verifyComplete();\n-            StepVerifier.create(destination1ViaSender.sendMessages(messages, transaction.get()))\n-                .verifyComplete();\n-\n-            StepVerifier.create(destination1ViaSender.commitTransaction(transaction.get())\n-                .delaySubscription(Duration.ofSeconds(1)))\n-                .verifyComplete();\n-\n-            // Assert\n-            // Verify message is received by final destination Entity\n-            StepVerifier.create(destination1Receiver.receiveMessages().take(totalToDestination).timeout(shortTimeout))\n-                .assertNext(receivedMessage -> {\n-                    assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n-                    messagesPending.decrementAndGet();\n-                })\n-                .assertNext(receivedMessage -> {\n-                    assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n-                    messagesPending.decrementAndGet();\n-                })\n-                .verifyComplete();\n-\n-            // Verify, intermediate-via queue has it delivered to intermediate Entity.\n-            StepVerifier.create(receiver.receiveMessages().take(total).timeout(shortTimeout))\n-                .assertNext(receivedMessage -> {\n-                    assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n-                    messagesPending.decrementAndGet();\n-                })\n-                .verifyComplete();\n-        } finally {\n-            destination1Receiver.close();\n-            destination1ViaSender.close();\n-        }\n-    }\n+    // @Test\n+    // void viaQueueMessageSendTest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd8cb5e0350bf193646b3eee18d44a8ddf9933f5"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxNjU4OA==", "bodyText": "I kept them so that we can use them in the next update when we add the transaction feature for cross entities back in", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17018#discussion_r515416588", "createdAt": "2020-10-30T22:59:39Z", "author": {"login": "ramya-rao-a"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientIntegrationTest.java", "diffHunk": "@@ -146,157 +145,157 @@ void nonSessionMessageBatch(MessagingEntityType entityType) {\n     /**\n      * Verifies that we can send message to final destination using via-queue.\n      */\n-    @Test\n-    void viaQueueMessageSendTest() {\n-        // Arrange\n-        final boolean useCredentials = false;\n-        final Duration shortTimeout = Duration.ofSeconds(15);\n-        final int viaIntermediateEntity = TestUtils.USE_CASE_SEND_VIA_QUEUE_1;\n-        final int destinationEntity = TestUtils.USE_CASE_SEND_VIA_QUEUE_2;\n-        final boolean shareConnection = true;\n-        final MessagingEntityType entityType = MessagingEntityType.QUEUE;\n-        final boolean isSessionEnabled = false;\n-        final String messageId = UUID.randomUUID().toString();\n-        final int total = 1;\n-        final int totalToDestination = 2;\n-        final List<ServiceBusMessage> messages = TestUtils.getServiceBusMessages(total, messageId, CONTENTS_BYTES);\n-        final String viaQueueName = getQueueName(viaIntermediateEntity);\n-\n-        setSenderAndReceiver(entityType, viaIntermediateEntity, useCredentials);\n-\n-        final ServiceBusSenderAsyncClient destination1ViaSender = getSenderBuilder(useCredentials, entityType,\n-            destinationEntity, false, shareConnection)\n-            .viaQueueName(viaQueueName)\n-            .buildAsyncClient();\n-        final ServiceBusReceiverAsyncClient destination1Receiver = getReceiverBuilder(useCredentials, entityType,\n-            destinationEntity, shareConnection)\n-            .receiveMode(ReceiveMode.RECEIVE_AND_DELETE)\n-            .buildAsyncClient();\n-\n-        final AtomicReference<ServiceBusTransactionContext> transaction = new AtomicReference<>();\n-\n-        // Act\n-        try {\n-            StepVerifier.create(destination1ViaSender.createTransaction())\n-                .assertNext(transactionContext -> {\n-                    transaction.set(transactionContext);\n-                    assertNotNull(transaction);\n-                })\n-                .verifyComplete();\n-            assertNotNull(transaction.get());\n-\n-            StepVerifier.create(sender.sendMessages(messages, transaction.get()))\n-                .verifyComplete();\n-            StepVerifier.create(destination1ViaSender.sendMessages(messages, transaction.get()))\n-                .verifyComplete();\n-            StepVerifier.create(destination1ViaSender.sendMessages(messages, transaction.get()))\n-                .verifyComplete();\n-\n-            StepVerifier.create(destination1ViaSender.commitTransaction(transaction.get())\n-                .delaySubscription(Duration.ofSeconds(1)))\n-                .verifyComplete();\n-\n-            // Assert\n-            // Verify message is received by final destination Entity\n-            StepVerifier.create(destination1Receiver.receiveMessages().take(totalToDestination).timeout(shortTimeout))\n-                .assertNext(receivedMessage -> {\n-                    assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n-                    messagesPending.decrementAndGet();\n-                })\n-                .assertNext(receivedMessage -> {\n-                    assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n-                    messagesPending.decrementAndGet();\n-                })\n-                .verifyComplete();\n-\n-            // Verify, intermediate-via queue has it delivered to intermediate Entity.\n-            StepVerifier.create(receiver.receiveMessages().take(total).timeout(shortTimeout))\n-                .assertNext(receivedMessage -> {\n-                    assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n-                    messagesPending.decrementAndGet();\n-                })\n-                .verifyComplete();\n-        } finally {\n-            destination1Receiver.close();\n-            destination1ViaSender.close();\n-        }\n-    }\n+    // @Test\n+    // void viaQueueMessageSendTest() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQwOTU5OQ=="}, "originalCommit": {"oid": "fd8cb5e0350bf193646b3eee18d44a8ddf9933f5"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxNjY3OA==", "bodyText": "I can delete the entire file if we feel otherwise.\n@conniey, @hemanttanwar ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17018#discussion_r515416678", "createdAt": "2020-10-30T23:00:02Z", "author": {"login": "ramya-rao-a"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientIntegrationTest.java", "diffHunk": "@@ -146,157 +145,157 @@ void nonSessionMessageBatch(MessagingEntityType entityType) {\n     /**\n      * Verifies that we can send message to final destination using via-queue.\n      */\n-    @Test\n-    void viaQueueMessageSendTest() {\n-        // Arrange\n-        final boolean useCredentials = false;\n-        final Duration shortTimeout = Duration.ofSeconds(15);\n-        final int viaIntermediateEntity = TestUtils.USE_CASE_SEND_VIA_QUEUE_1;\n-        final int destinationEntity = TestUtils.USE_CASE_SEND_VIA_QUEUE_2;\n-        final boolean shareConnection = true;\n-        final MessagingEntityType entityType = MessagingEntityType.QUEUE;\n-        final boolean isSessionEnabled = false;\n-        final String messageId = UUID.randomUUID().toString();\n-        final int total = 1;\n-        final int totalToDestination = 2;\n-        final List<ServiceBusMessage> messages = TestUtils.getServiceBusMessages(total, messageId, CONTENTS_BYTES);\n-        final String viaQueueName = getQueueName(viaIntermediateEntity);\n-\n-        setSenderAndReceiver(entityType, viaIntermediateEntity, useCredentials);\n-\n-        final ServiceBusSenderAsyncClient destination1ViaSender = getSenderBuilder(useCredentials, entityType,\n-            destinationEntity, false, shareConnection)\n-            .viaQueueName(viaQueueName)\n-            .buildAsyncClient();\n-        final ServiceBusReceiverAsyncClient destination1Receiver = getReceiverBuilder(useCredentials, entityType,\n-            destinationEntity, shareConnection)\n-            .receiveMode(ReceiveMode.RECEIVE_AND_DELETE)\n-            .buildAsyncClient();\n-\n-        final AtomicReference<ServiceBusTransactionContext> transaction = new AtomicReference<>();\n-\n-        // Act\n-        try {\n-            StepVerifier.create(destination1ViaSender.createTransaction())\n-                .assertNext(transactionContext -> {\n-                    transaction.set(transactionContext);\n-                    assertNotNull(transaction);\n-                })\n-                .verifyComplete();\n-            assertNotNull(transaction.get());\n-\n-            StepVerifier.create(sender.sendMessages(messages, transaction.get()))\n-                .verifyComplete();\n-            StepVerifier.create(destination1ViaSender.sendMessages(messages, transaction.get()))\n-                .verifyComplete();\n-            StepVerifier.create(destination1ViaSender.sendMessages(messages, transaction.get()))\n-                .verifyComplete();\n-\n-            StepVerifier.create(destination1ViaSender.commitTransaction(transaction.get())\n-                .delaySubscription(Duration.ofSeconds(1)))\n-                .verifyComplete();\n-\n-            // Assert\n-            // Verify message is received by final destination Entity\n-            StepVerifier.create(destination1Receiver.receiveMessages().take(totalToDestination).timeout(shortTimeout))\n-                .assertNext(receivedMessage -> {\n-                    assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n-                    messagesPending.decrementAndGet();\n-                })\n-                .assertNext(receivedMessage -> {\n-                    assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n-                    messagesPending.decrementAndGet();\n-                })\n-                .verifyComplete();\n-\n-            // Verify, intermediate-via queue has it delivered to intermediate Entity.\n-            StepVerifier.create(receiver.receiveMessages().take(total).timeout(shortTimeout))\n-                .assertNext(receivedMessage -> {\n-                    assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n-                    messagesPending.decrementAndGet();\n-                })\n-                .verifyComplete();\n-        } finally {\n-            destination1Receiver.close();\n-            destination1ViaSender.close();\n-        }\n-    }\n+    // @Test\n+    // void viaQueueMessageSendTest() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQwOTU5OQ=="}, "originalCommit": {"oid": "fd8cb5e0350bf193646b3eee18d44a8ddf9933f5"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ0OTQ1Mg==", "bodyText": "Normally we delete the test if we do not need it soon. We can always get it back from git history and old commits.\nIf we are going to introduce this next months or soon, we can disable by adding @Disable annotation.\n@Disabled(\"Reason why disable.\")\nThere are other test in this file, so we can not delete the file but remove the test.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17018#discussion_r515449452", "createdAt": "2020-10-31T03:25:14Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientIntegrationTest.java", "diffHunk": "@@ -146,157 +145,157 @@ void nonSessionMessageBatch(MessagingEntityType entityType) {\n     /**\n      * Verifies that we can send message to final destination using via-queue.\n      */\n-    @Test\n-    void viaQueueMessageSendTest() {\n-        // Arrange\n-        final boolean useCredentials = false;\n-        final Duration shortTimeout = Duration.ofSeconds(15);\n-        final int viaIntermediateEntity = TestUtils.USE_CASE_SEND_VIA_QUEUE_1;\n-        final int destinationEntity = TestUtils.USE_CASE_SEND_VIA_QUEUE_2;\n-        final boolean shareConnection = true;\n-        final MessagingEntityType entityType = MessagingEntityType.QUEUE;\n-        final boolean isSessionEnabled = false;\n-        final String messageId = UUID.randomUUID().toString();\n-        final int total = 1;\n-        final int totalToDestination = 2;\n-        final List<ServiceBusMessage> messages = TestUtils.getServiceBusMessages(total, messageId, CONTENTS_BYTES);\n-        final String viaQueueName = getQueueName(viaIntermediateEntity);\n-\n-        setSenderAndReceiver(entityType, viaIntermediateEntity, useCredentials);\n-\n-        final ServiceBusSenderAsyncClient destination1ViaSender = getSenderBuilder(useCredentials, entityType,\n-            destinationEntity, false, shareConnection)\n-            .viaQueueName(viaQueueName)\n-            .buildAsyncClient();\n-        final ServiceBusReceiverAsyncClient destination1Receiver = getReceiverBuilder(useCredentials, entityType,\n-            destinationEntity, shareConnection)\n-            .receiveMode(ReceiveMode.RECEIVE_AND_DELETE)\n-            .buildAsyncClient();\n-\n-        final AtomicReference<ServiceBusTransactionContext> transaction = new AtomicReference<>();\n-\n-        // Act\n-        try {\n-            StepVerifier.create(destination1ViaSender.createTransaction())\n-                .assertNext(transactionContext -> {\n-                    transaction.set(transactionContext);\n-                    assertNotNull(transaction);\n-                })\n-                .verifyComplete();\n-            assertNotNull(transaction.get());\n-\n-            StepVerifier.create(sender.sendMessages(messages, transaction.get()))\n-                .verifyComplete();\n-            StepVerifier.create(destination1ViaSender.sendMessages(messages, transaction.get()))\n-                .verifyComplete();\n-            StepVerifier.create(destination1ViaSender.sendMessages(messages, transaction.get()))\n-                .verifyComplete();\n-\n-            StepVerifier.create(destination1ViaSender.commitTransaction(transaction.get())\n-                .delaySubscription(Duration.ofSeconds(1)))\n-                .verifyComplete();\n-\n-            // Assert\n-            // Verify message is received by final destination Entity\n-            StepVerifier.create(destination1Receiver.receiveMessages().take(totalToDestination).timeout(shortTimeout))\n-                .assertNext(receivedMessage -> {\n-                    assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n-                    messagesPending.decrementAndGet();\n-                })\n-                .assertNext(receivedMessage -> {\n-                    assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n-                    messagesPending.decrementAndGet();\n-                })\n-                .verifyComplete();\n-\n-            // Verify, intermediate-via queue has it delivered to intermediate Entity.\n-            StepVerifier.create(receiver.receiveMessages().take(total).timeout(shortTimeout))\n-                .assertNext(receivedMessage -> {\n-                    assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n-                    messagesPending.decrementAndGet();\n-                })\n-                .verifyComplete();\n-        } finally {\n-            destination1Receiver.close();\n-            destination1ViaSender.close();\n-        }\n-    }\n+    // @Test\n+    // void viaQueueMessageSendTest() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQwOTU5OQ=="}, "originalCommit": {"oid": "fd8cb5e0350bf193646b3eee18d44a8ddf9933f5"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3807, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}