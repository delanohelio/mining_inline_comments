{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NzQwNDU5", "number": 9686, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjowNDozMFrODsvo_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzowNjoyMVrODsxO_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjQ0NDc4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/Configuration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjowNDozMFrOF9xDag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzoyMDowN1rOF-gLXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxMTE0Ng==", "bodyText": "this is the default partition-key if the collection does not exist. But if the collection exist the partition-key path could be different and that's ok. right?\nSo could you please change the naming to DEFAULT_PARTITION_KEY_PATH", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9686#discussion_r400311146", "createdAt": "2020-03-30T16:04:30Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/Configuration.java", "diffHunk": "@@ -32,6 +32,7 @@\n \n class Configuration {\n \n+    final static String PARTITION_KEY = \"/pk\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ca2070a9e036e9e4860687c579abdc5809c384c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA4MzIzMQ==", "bodyText": "done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9686#discussion_r401083231", "createdAt": "2020-03-31T17:20:07Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/Configuration.java", "diffHunk": "@@ -32,6 +32,7 @@\n \n class Configuration {\n \n+    final static String PARTITION_KEY = \"/pk\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxMTE0Ng=="}, "originalCommit": {"oid": "6ca2070a9e036e9e4860687c579abdc5809c384c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjQ3MjkyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/AsyncBenchmark.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjoxMDo1NVrOF9xVLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzoyMTo1N1rOF-gPtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxNTY5Mw==", "bodyText": "In our testing subscriptions we can't create a collection with 1M throughput upfront. The workaround we have is to create a collection with 100K throughput and then scale up. Now with this auto deleting collection it means we have to do this manual process everytime.\nwe don't want to always delete the collection. We should have a config option called autoCollectionCreateEnabled when present we should attempt to\n\ncreate collection if not exist\ndelete the collection\n\nwhen autoCollectionCreateEnabled=false we shouldn't attempt to create or delete the collection, and if the collection doesn't exist we should fail.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9686#discussion_r400315693", "createdAt": "2020-03-30T16:10:55Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/AsyncBenchmark.java", "diffHunk": "@@ -130,6 +134,8 @@ protected void init() {\n     }\n \n     void shutdown() {\n+        cosmosAsyncContainer.delete().block();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ca2070a9e036e9e4860687c579abdc5809c384c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA4NDM0MA==", "bodyText": "Please check current design , it is more seem less in respect to customer expectation , code will only create resource if it is not present , and only delete newly created resource and not the existing", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9686#discussion_r401084340", "createdAt": "2020-03-31T17:21:57Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/AsyncBenchmark.java", "diffHunk": "@@ -130,6 +134,8 @@ protected void init() {\n     }\n \n     void shutdown() {\n+        cosmosAsyncContainer.delete().block();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxNTY5Mw=="}, "originalCommit": {"oid": "6ca2070a9e036e9e4860687c579abdc5809c384c"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjcwNTg4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/AsynReadWithMultipleClients.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzowNjoyMVrOF9zmVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzoyMTo1MFrOF-gPZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1Mjg1Mw==", "bodyText": "if the application deletes it should create too.\nwhen a user runs an application, the user expects to either 1.  application handles the collection creation/deletion 2. the user provides the collection and the app doesn't create nor deletes.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9686#discussion_r400352853", "createdAt": "2020-03-30T17:06:21Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/AsynReadWithMultipleClients.java", "diffHunk": "@@ -227,33 +212,29 @@ private void createClients() {\n                         .connectionReuseAcrossClientsEnabled(true)\n                         .buildAsyncClient();\n                     List<PojoizedJson> docsToRead = new ArrayList<>();\n-                    if (!configuration.isDeleteCollections()) {\n-                        CosmosAsyncDatabase cosmosAsyncDatabase = asyncClient.createDatabaseIfNotExists(this.configuration.getDatabaseId()).block().getDatabase();\n-                        CosmosAsyncContainer cosmosAsyncContainer =\n-                            cosmosAsyncDatabase.createContainerIfNotExists(configuration.getCollectionId(), PARTITION_KEY, configuration.getThroughput()).block().getContainer();\n-                        String partitionKey = cosmosAsyncContainer.read().block().getProperties().getPartitionKeyDefinition()\n-                            .getPaths().iterator().next().split(\"/\")[1];\n-                        String dataFieldValue = RandomStringUtils.randomAlphabetic(this.configuration.getDocumentDataFieldSize());\n-                        ArrayList<Flux<PojoizedJson>> createDocumentObservables = new ArrayList<>();\n-\n-                        for (int i = 0; i < this.configuration.getNumberOfPreCreatedDocuments(); i++) {\n-                            String uuid = UUID.randomUUID().toString();\n-                            com.azure.cosmos.benchmark.PojoizedJson newDoc = generateDocument(uuid, dataFieldValue, partitionKey);\n-\n-                            Flux<PojoizedJson> obs = cosmosAsyncContainer.createItem(newDoc).map(resp -> {\n-                                    com.azure.cosmos.benchmark.PojoizedJson x =\n-                                        resp.getItem();\n-                                    return x;\n-                                }\n-                            ).flux();\n-                            createDocumentObservables.add(obs);\n-                        }\n-                        docsToRead = Flux.merge(Flux.fromIterable(createDocumentObservables), 100).collectList().block();\n-\n-                        logger.info(\"Client have been initialized with data created for host {}\", hostAndKey[0]);\n-                    } else {\n-                        logger.info(\"Client have been initialized with host {}\", hostAndKey[0]);\n+                    CosmosAsyncDatabase cosmosAsyncDatabase = asyncClient.createDatabaseIfNotExists(this.configuration.getDatabaseId()).block().getDatabase();\n+                    CosmosAsyncContainer cosmosAsyncContainer =\n+                        cosmosAsyncDatabase.createContainerIfNotExists(configuration.getCollectionId(), Configuration.PARTITION_KEY, configuration.getThroughput()).block().getContainer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ca2070a9e036e9e4860687c579abdc5809c384c"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA4NDI2MA==", "bodyText": "Please check current design , it is more seem less in respect to customer expectation , code will only create resource if it is not present , and only delete newly created resource and not the existing", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9686#discussion_r401084260", "createdAt": "2020-03-31T17:21:50Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/AsynReadWithMultipleClients.java", "diffHunk": "@@ -227,33 +212,29 @@ private void createClients() {\n                         .connectionReuseAcrossClientsEnabled(true)\n                         .buildAsyncClient();\n                     List<PojoizedJson> docsToRead = new ArrayList<>();\n-                    if (!configuration.isDeleteCollections()) {\n-                        CosmosAsyncDatabase cosmosAsyncDatabase = asyncClient.createDatabaseIfNotExists(this.configuration.getDatabaseId()).block().getDatabase();\n-                        CosmosAsyncContainer cosmosAsyncContainer =\n-                            cosmosAsyncDatabase.createContainerIfNotExists(configuration.getCollectionId(), PARTITION_KEY, configuration.getThroughput()).block().getContainer();\n-                        String partitionKey = cosmosAsyncContainer.read().block().getProperties().getPartitionKeyDefinition()\n-                            .getPaths().iterator().next().split(\"/\")[1];\n-                        String dataFieldValue = RandomStringUtils.randomAlphabetic(this.configuration.getDocumentDataFieldSize());\n-                        ArrayList<Flux<PojoizedJson>> createDocumentObservables = new ArrayList<>();\n-\n-                        for (int i = 0; i < this.configuration.getNumberOfPreCreatedDocuments(); i++) {\n-                            String uuid = UUID.randomUUID().toString();\n-                            com.azure.cosmos.benchmark.PojoizedJson newDoc = generateDocument(uuid, dataFieldValue, partitionKey);\n-\n-                            Flux<PojoizedJson> obs = cosmosAsyncContainer.createItem(newDoc).map(resp -> {\n-                                    com.azure.cosmos.benchmark.PojoizedJson x =\n-                                        resp.getItem();\n-                                    return x;\n-                                }\n-                            ).flux();\n-                            createDocumentObservables.add(obs);\n-                        }\n-                        docsToRead = Flux.merge(Flux.fromIterable(createDocumentObservables), 100).collectList().block();\n-\n-                        logger.info(\"Client have been initialized with data created for host {}\", hostAndKey[0]);\n-                    } else {\n-                        logger.info(\"Client have been initialized with host {}\", hostAndKey[0]);\n+                    CosmosAsyncDatabase cosmosAsyncDatabase = asyncClient.createDatabaseIfNotExists(this.configuration.getDatabaseId()).block().getDatabase();\n+                    CosmosAsyncContainer cosmosAsyncContainer =\n+                        cosmosAsyncDatabase.createContainerIfNotExists(configuration.getCollectionId(), Configuration.PARTITION_KEY, configuration.getThroughput()).block().getContainer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1Mjg1Mw=="}, "originalCommit": {"oid": "6ca2070a9e036e9e4860687c579abdc5809c384c"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2148, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}