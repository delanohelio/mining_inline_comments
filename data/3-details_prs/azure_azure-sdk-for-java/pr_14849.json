{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwMTI3ODk3", "number": 14849, "title": "Add Sync samples for Model Lifecycle.", "bodyText": "", "createdAt": "2020-09-04T21:21:26Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849", "merged": true, "mergeCommit": {"oid": "b79469c2d8a2eae068f19220a968a4a8d734ad8c"}, "closed": true, "closedAt": "2020-09-05T04:43:01Z", "author": {"login": "azabbasi"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFr-nXAH2gAyNDgwMTI3ODk3OmZhMjJhZWYyODMzMzAzYmNmNTNhNjg1ODI4NWI5ZjZhOGJmMWY5MTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFu6VCAFqTQ4MzAxNjkwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fa22aef2833303bcf53a6858285b9f6a8bf1f910", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fa22aef2833303bcf53a6858285b9f6a8bf1f910", "committedDate": "2020-09-04T21:21:10Z", "message": "Add Sync samples for Model Lifecycle."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb711e2acc0ed2bcd3f90338c9017c965aa429da", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bb711e2acc0ed2bcd3f90338c9017c965aa429da", "committedDate": "2020-09-04T21:23:05Z", "message": "Update ModelsLifecycleSyncSamples.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyOTg4MTc3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#pullrequestreview-482988177", "createdAt": "2020-09-04T22:04:30Z", "commit": {"oid": "bb711e2acc0ed2bcd3f90338c9017c965aa429da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjowNDozMVrOHNcn_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjowNDozMVrOHNcn_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2MjUyNA==", "bodyText": "Thanks for adding this!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483862524", "createdAt": "2020-09-04T22:04:31Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -454,6 +454,16 @@ public void deleteRelationship(String digitalTwinId, String relationshipId) {\n     // Models APIs\n     //==================================================================================================================================================\n \n+    /**\n+     * Creates one or many models.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A {@link PagedIterable} of created models and the http response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<ModelData> createModels(List<String> models) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb711e2acc0ed2bcd3f90338c9017c965aa429da"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyOTg4Njk4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#pullrequestreview-482988698", "createdAt": "2020-09-04T22:06:18Z", "commit": {"oid": "bb711e2acc0ed2bcd3f90338c9017c965aa429da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjowNjoxOFrOHNcplQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjowNjoxOFrOHNcplQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2MjkzMw==", "bodyText": "Java methods should be lowercase Camelcase", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483862933", "createdAt": "2020-09-04T22:06:18Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.digitaltwins.core.helpers.ConsoleLogger;\n+import com.azure.digitaltwins.core.helpers.SamplesArguments;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+import com.azure.digitaltwins.core.models.ModelData;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+import org.apache.http.HttpStatus;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+/**\n+ * Creates a component with a random Id.\n+ * Creates a new model with a random Id that uses the previously created component.\n+ * Decommission the newly created models (model and component) and check for success.\n+ * Delete all created models and components.\n+ */\n+public class ModelsLifecycleSyncSamples {\n+\n+    private static DigitalTwinsClient client;\n+\n+    public static void main(String[] args) throws IOException, InterruptedException {\n+\n+        SamplesArguments parsedArguments = new SamplesArguments(args);\n+\n+        client = new DigitalTwinsClientBuilder()\n+            .tokenCredential(\n+                new ClientSecretCredentialBuilder()\n+                    .tenantId(parsedArguments.getTenantId())\n+                    .clientId(parsedArguments.getClientId())\n+                    .clientSecret(parsedArguments.getClientSecret())\n+                    .build()\n+            )\n+            .endpoint(parsedArguments.getDigitalTwinEndpoint())\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(parsedArguments.getHttpLogDetailLevel()))\n+            .buildClient();\n+\n+        RunModelLifecycleSample();\n+    }\n+\n+    public static void RunModelLifecycleSample() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb711e2acc0ed2bcd3f90338c9017c965aa429da"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyOTg5MTg1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#pullrequestreview-482989185", "createdAt": "2020-09-04T22:08:00Z", "commit": {"oid": "bb711e2acc0ed2bcd3f90338c9017c965aa429da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjowODowMFrOHNcrOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjowODowMFrOHNcrOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2MzM1Mg==", "bodyText": "\"Some string \" + ex  doesn't give the full stack trace. That's fine since this is a sample, but for future reference, most loggers take the exception as a parameter after the string like log.error(\"Something bad happened!\", someException)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483863352", "createdAt": "2020-09-04T22:08:00Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.digitaltwins.core.helpers.ConsoleLogger;\n+import com.azure.digitaltwins.core.helpers.SamplesArguments;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+import com.azure.digitaltwins.core.models.ModelData;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+import org.apache.http.HttpStatus;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+/**\n+ * Creates a component with a random Id.\n+ * Creates a new model with a random Id that uses the previously created component.\n+ * Decommission the newly created models (model and component) and check for success.\n+ * Delete all created models and components.\n+ */\n+public class ModelsLifecycleSyncSamples {\n+\n+    private static DigitalTwinsClient client;\n+\n+    public static void main(String[] args) throws IOException, InterruptedException {\n+\n+        SamplesArguments parsedArguments = new SamplesArguments(args);\n+\n+        client = new DigitalTwinsClientBuilder()\n+            .tokenCredential(\n+                new ClientSecretCredentialBuilder()\n+                    .tenantId(parsedArguments.getTenantId())\n+                    .clientId(parsedArguments.getClientId())\n+                    .clientSecret(parsedArguments.getClientSecret())\n+                    .build()\n+            )\n+            .endpoint(parsedArguments.getDigitalTwinEndpoint())\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(parsedArguments.getHttpLogDetailLevel()))\n+            .buildClient();\n+\n+        RunModelLifecycleSample();\n+    }\n+\n+    public static void RunModelLifecycleSample() {\n+        // For the purpose of this sample we will create temporary models using random model Ids and then decommission a model.\n+        // We have to make sure these model Ids are unique within the DigitalTwin instance.\n+        String componentModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TemporaryComponentModelPrefix, client);\n+        String sampleModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TemporaryModelPrefix, client);\n+\n+        String newComponentModelPayload = SamplesConstants.TemporaryComponentModelPayload\n+            .replace(SamplesConstants.ComponentId, componentModelId);\n+\n+        String newModelPayload = SamplesConstants.TemporaryModelWithComponentPayload\n+            .replace(SamplesConstants.ModelId, sampleModelId)\n+            .replace(SamplesConstants.ComponentId, componentModelId);\n+\n+        ConsoleLogger.PrintHeader(\"Create models\");\n+\n+        try {\n+            // Create the model\n+            // TODO: azabbasi: Discuss the usability of this API with SDK team and change the return type if possible\n+            // Currently we have to iterate through the response for the lazy method invocation to run.\n+            client.createModels(new ArrayList<String>(Arrays.asList(newComponentModelPayload, newModelPayload)))\n+                .forEach((modelData -> {\n+                    System.out.println(\"Created model \" + modelData.getId());\n+                }));\n+\n+            ConsoleLogger.PrintSuccess(\"Created models \" + componentModelId + \" and \" + sampleModelId);\n+        }\n+        catch (ErrorResponseException ex){\n+            if (ex.getResponse().getStatusCode() == HttpStatus.SC_CONFLICT) {\n+                ConsoleLogger.PrintWarning(\"One or more models already existed\");\n+            }\n+        }\n+        catch (Exception ex) {\n+            ConsoleLogger.PrintFatal(\"Failed to create models due to: \\n\" + ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb711e2acc0ed2bcd3f90338c9017c965aa429da"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyOTg5NTg5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#pullrequestreview-482989589", "createdAt": "2020-09-04T22:09:15Z", "commit": {"oid": "bb711e2acc0ed2bcd3f90338c9017c965aa429da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjowOToxNlrOHNcslA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjowOToxNlrOHNcslA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2MzcwMA==", "bodyText": "I get the impression that we'll need this logic in the e2e tests and in the samples. If this PR goes in first, I'll try to rewrite my tests to leverage this helper class instead of writing a similar one", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483863700", "createdAt": "2020-09-04T22:09:16Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/UniqueIdHelper.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.azure.digitaltwins.core.helpers;\n+\n+import com.azure.digitaltwins.core.DigitalTwinsClient;\n+import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+import org.apache.http.HttpStatus;\n+\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+public class UniqueIdHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb711e2acc0ed2bcd3f90338c9017c965aa429da"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyOTkxMzYz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#pullrequestreview-482991363", "createdAt": "2020-09-04T22:15:23Z", "commit": {"oid": "bb711e2acc0ed2bcd3f90338c9017c965aa429da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjoxNToyM1rOHNcySg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjoxNToyM1rOHNcySg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2NTE2Mg==", "bodyText": "Typically the Java SDKs use HttpsUrlConnection class to get http status codes. See here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483865162", "createdAt": "2020-09-04T22:15:23Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.digitaltwins.core.helpers.ConsoleLogger;\n+import com.azure.digitaltwins.core.helpers.SamplesArguments;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+import com.azure.digitaltwins.core.models.ModelData;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+import org.apache.http.HttpStatus;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+/**\n+ * Creates a component with a random Id.\n+ * Creates a new model with a random Id that uses the previously created component.\n+ * Decommission the newly created models (model and component) and check for success.\n+ * Delete all created models and components.\n+ */\n+public class ModelsLifecycleSyncSamples {\n+\n+    private static DigitalTwinsClient client;\n+\n+    public static void main(String[] args) throws IOException, InterruptedException {\n+\n+        SamplesArguments parsedArguments = new SamplesArguments(args);\n+\n+        client = new DigitalTwinsClientBuilder()\n+            .tokenCredential(\n+                new ClientSecretCredentialBuilder()\n+                    .tenantId(parsedArguments.getTenantId())\n+                    .clientId(parsedArguments.getClientId())\n+                    .clientSecret(parsedArguments.getClientSecret())\n+                    .build()\n+            )\n+            .endpoint(parsedArguments.getDigitalTwinEndpoint())\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(parsedArguments.getHttpLogDetailLevel()))\n+            .buildClient();\n+\n+        RunModelLifecycleSample();\n+    }\n+\n+    public static void RunModelLifecycleSample() {\n+        // For the purpose of this sample we will create temporary models using random model Ids and then decommission a model.\n+        // We have to make sure these model Ids are unique within the DigitalTwin instance.\n+        String componentModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TemporaryComponentModelPrefix, client);\n+        String sampleModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TemporaryModelPrefix, client);\n+\n+        String newComponentModelPayload = SamplesConstants.TemporaryComponentModelPayload\n+            .replace(SamplesConstants.ComponentId, componentModelId);\n+\n+        String newModelPayload = SamplesConstants.TemporaryModelWithComponentPayload\n+            .replace(SamplesConstants.ModelId, sampleModelId)\n+            .replace(SamplesConstants.ComponentId, componentModelId);\n+\n+        ConsoleLogger.PrintHeader(\"Create models\");\n+\n+        try {\n+            // Create the model\n+            // TODO: azabbasi: Discuss the usability of this API with SDK team and change the return type if possible\n+            // Currently we have to iterate through the response for the lazy method invocation to run.\n+            client.createModels(new ArrayList<String>(Arrays.asList(newComponentModelPayload, newModelPayload)))\n+                .forEach((modelData -> {\n+                    System.out.println(\"Created model \" + modelData.getId());\n+                }));\n+\n+            ConsoleLogger.PrintSuccess(\"Created models \" + componentModelId + \" and \" + sampleModelId);\n+        }\n+        catch (ErrorResponseException ex){\n+            if (ex.getResponse().getStatusCode() == HttpStatus.SC_CONFLICT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb711e2acc0ed2bcd3f90338c9017c965aa429da"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyOTkxNjE2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#pullrequestreview-482991616", "createdAt": "2020-09-04T22:16:11Z", "commit": {"oid": "bb711e2acc0ed2bcd3f90338c9017c965aa429da"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea35ff7e152222546b00e64996af513c8db9e76c", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ea35ff7e152222546b00e64996af513c8db9e76c", "committedDate": "2020-09-04T22:40:57Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyOTk5NjU0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#pullrequestreview-482999654", "createdAt": "2020-09-04T22:50:08Z", "commit": {"oid": "ea35ff7e152222546b00e64996af513c8db9e76c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjo1MDowOFrOHNdPLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjo1MDowOFrOHNdPLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3MjU1Ng==", "bodyText": "Nice! A list for create response is so much better than a pageable!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483872556", "createdAt": "2020-09-04T22:50:08Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -747,23 +747,25 @@ public HttpPipeline getHttpPipeline() {\n     /**\n      * Creates one or many models.\n      * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return A {@link PagedFlux} of created models and the http response.\n+     * @return A List of created models.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedFlux<ModelData> createModels(List<String> models) {\n-        return new PagedFlux<>(\n-            () -> withContext(context -> createModelsSinglePageAsync(models, context)),\n-            nextLink -> withContext(context -> Mono.empty()));\n+    public Mono<List<ModelData>> createModels(List<String> models) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea35ff7e152222546b00e64996af513c8db9e76c"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMDAwMzEz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#pullrequestreview-483000313", "createdAt": "2020-09-04T22:53:15Z", "commit": {"oid": "ea35ff7e152222546b00e64996af513c8db9e76c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjo1MzoxNlrOHNdRmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjo1MzoxNlrOHNdRmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3MzE3OA==", "bodyText": "nit: we've been following the pattern where each sync API calls its max arg overload, and the max arg overload calls into the async API; so this could call createModelsWithResponse(List<String> models, Context context) sync API with Context.None.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483873178", "createdAt": "2020-09-04T22:53:16Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -454,15 +454,25 @@ public void deleteRelationship(String digitalTwinId, String relationshipId) {\n     // Models APIs\n     //==================================================================================================================================================\n \n+    /**\n+     * Creates one or many models.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A List of created models.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public List<ModelData> createModels(List<String> models) {\n+        return digitalTwinsAsyncClient.createModels(models).block();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea35ff7e152222546b00e64996af513c8db9e76c"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMDAwNDc0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#pullrequestreview-483000474", "createdAt": "2020-09-04T22:54:06Z", "commit": {"oid": "ea35ff7e152222546b00e64996af513c8db9e76c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjo1NDowNlrOHNdSHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjo1NDowNlrOHNdSHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3MzMwOA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483873308", "createdAt": "2020-09-04T22:54:06Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/DigitalTwinsLifecycleAsyncSample.java", "diffHunk": "@@ -236,7 +238,7 @@ public static void createAllModels() throws IOException, InterruptedException {\n \n         // Call API to create the models. For each async operation, once the operation is completed successfully, a latch is counted down.\n         client.createModels(modelsToCreate)\n-            .doOnNext(modelData -> System.out.println(\"Created model: \" + modelData.getId()))\n+            .doOnNext(listOfModelData -> System.out.println(\"Count of created models: \" + listOfModelData.size()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea35ff7e152222546b00e64996af513c8db9e76c"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMDAwNjk3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#pullrequestreview-483000697", "createdAt": "2020-09-04T22:55:11Z", "commit": {"oid": "ea35ff7e152222546b00e64996af513c8db9e76c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjo1NToxMlrOHNdTNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjo1NToxMlrOHNdTNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3MzU4OQ==", "bodyText": "Does the model use the component, or define the \"model\" for the component?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483873589", "createdAt": "2020-09-04T22:55:12Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.digitaltwins.core.helpers.ConsoleLogger;\n+import com.azure.digitaltwins.core.helpers.SamplesArguments;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+import com.azure.digitaltwins.core.models.ModelData;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+import org.apache.http.HttpStatus;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+/**\n+ * Creates a component with a random Id.\n+ * Creates a new model with a random Id that uses the previously created component.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea35ff7e152222546b00e64996af513c8db9e76c"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMDAwOTU3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#pullrequestreview-483000957", "createdAt": "2020-09-04T22:56:19Z", "commit": {"oid": "ea35ff7e152222546b00e64996af513c8db9e76c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjo1NjoxOVrOHNdUDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjo1NjoxOVrOHNdUDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3MzgwNw==", "bodyText": "Are we checking in with this TODO? \ud83d\ude2e", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483873807", "createdAt": "2020-09-04T22:56:19Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.digitaltwins.core.helpers.ConsoleLogger;\n+import com.azure.digitaltwins.core.helpers.SamplesArguments;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+import com.azure.digitaltwins.core.models.ModelData;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+import org.apache.http.HttpStatus;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+/**\n+ * Creates a component with a random Id.\n+ * Creates a new model with a random Id that uses the previously created component.\n+ * Decommission the newly created models (model and component) and check for success.\n+ * Delete all created models and components.\n+ */\n+public class ModelsLifecycleSyncSamples {\n+\n+    private static DigitalTwinsClient client;\n+\n+    public static void main(String[] args) throws IOException, InterruptedException {\n+\n+        SamplesArguments parsedArguments = new SamplesArguments(args);\n+\n+        client = new DigitalTwinsClientBuilder()\n+            .tokenCredential(\n+                new ClientSecretCredentialBuilder()\n+                    .tenantId(parsedArguments.getTenantId())\n+                    .clientId(parsedArguments.getClientId())\n+                    .clientSecret(parsedArguments.getClientSecret())\n+                    .build()\n+            )\n+            .endpoint(parsedArguments.getDigitalTwinEndpoint())\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(parsedArguments.getHttpLogDetailLevel()))\n+            .buildClient();\n+\n+        runModelLifecycleSample();\n+    }\n+\n+    public static void runModelLifecycleSample() {\n+        // For the purpose of this sample we will create temporary models using random model Ids and then decommission a model.\n+        // We have to make sure these model Ids are unique within the DigitalTwin instance.\n+        String componentModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TemporaryComponentModelPrefix, client);\n+        String sampleModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TemporaryModelPrefix, client);\n+\n+        String newComponentModelPayload = SamplesConstants.TemporaryComponentModelPayload\n+            .replace(SamplesConstants.ComponentId, componentModelId);\n+\n+        String newModelPayload = SamplesConstants.TemporaryModelWithComponentPayload\n+            .replace(SamplesConstants.ModelId, sampleModelId)\n+            .replace(SamplesConstants.ComponentId, componentModelId);\n+\n+        ConsoleLogger.PrintHeader(\"Create models\");\n+\n+        try {\n+            // Create the model\n+            // TODO: azabbasi: Discuss the usability of this API with SDK team and change the return type if possible", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea35ff7e152222546b00e64996af513c8db9e76c"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d51e167cf5419ed49ce77c977165a333b363df25", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d51e167cf5419ed49ce77c977165a333b363df25", "committedDate": "2020-09-04T23:02:40Z", "message": "Address more comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMDAyMzc2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#pullrequestreview-483002376", "createdAt": "2020-09-04T23:03:04Z", "commit": {"oid": "ea35ff7e152222546b00e64996af513c8db9e76c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMzowMzowNFrOHNdZeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMzowMzowNFrOHNdZeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3NTE5NA==", "bodyText": "I am updating the sample to use status code from here: https://docs.oracle.com/javase/7/docs/api/java/net/HttpURLConnection.html\nThis is what Tim used in the e2e tests, and what other sdks are using as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483875194", "createdAt": "2020-09-04T23:03:04Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.digitaltwins.core.helpers.ConsoleLogger;\n+import com.azure.digitaltwins.core.helpers.SamplesArguments;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+import com.azure.digitaltwins.core.models.ModelData;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+import org.apache.http.HttpStatus;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+/**\n+ * Creates a component with a random Id.\n+ * Creates a new model with a random Id that uses the previously created component.\n+ * Decommission the newly created models (model and component) and check for success.\n+ * Delete all created models and components.\n+ */\n+public class ModelsLifecycleSyncSamples {\n+\n+    private static DigitalTwinsClient client;\n+\n+    public static void main(String[] args) throws IOException, InterruptedException {\n+\n+        SamplesArguments parsedArguments = new SamplesArguments(args);\n+\n+        client = new DigitalTwinsClientBuilder()\n+            .tokenCredential(\n+                new ClientSecretCredentialBuilder()\n+                    .tenantId(parsedArguments.getTenantId())\n+                    .clientId(parsedArguments.getClientId())\n+                    .clientSecret(parsedArguments.getClientSecret())\n+                    .build()\n+            )\n+            .endpoint(parsedArguments.getDigitalTwinEndpoint())\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(parsedArguments.getHttpLogDetailLevel()))\n+            .buildClient();\n+\n+        runModelLifecycleSample();\n+    }\n+\n+    public static void runModelLifecycleSample() {\n+        // For the purpose of this sample we will create temporary models using random model Ids and then decommission a model.\n+        // We have to make sure these model Ids are unique within the DigitalTwin instance.\n+        String componentModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TemporaryComponentModelPrefix, client);\n+        String sampleModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TemporaryModelPrefix, client);\n+\n+        String newComponentModelPayload = SamplesConstants.TemporaryComponentModelPayload\n+            .replace(SamplesConstants.ComponentId, componentModelId);\n+\n+        String newModelPayload = SamplesConstants.TemporaryModelWithComponentPayload\n+            .replace(SamplesConstants.ModelId, sampleModelId)\n+            .replace(SamplesConstants.ComponentId, componentModelId);\n+\n+        ConsoleLogger.PrintHeader(\"Create models\");\n+\n+        try {\n+            // Create the model\n+            // TODO: azabbasi: Discuss the usability of this API with SDK team and change the return type if possible\n+            // Currently we have to iterate through the response for the lazy method invocation to run.\n+            client.createModels(new ArrayList<String>(Arrays.asList(newComponentModelPayload, newModelPayload)));\n+\n+            ConsoleLogger.PrintSuccess(\"Created models \" + componentModelId + \" and \" + sampleModelId);\n+        }\n+        catch (ErrorResponseException ex){\n+            if (ex.getResponse().getStatusCode() == HttpStatus.SC_CONFLICT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea35ff7e152222546b00e64996af513c8db9e76c"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffb64b059e390d40ac6cb5e46a73629a76a38d51", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ffb64b059e390d40ac6cb5e46a73629a76a38d51", "committedDate": "2020-09-04T23:04:01Z", "message": "Update ModelsLifecycleSyncSamples.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3b94e656ff0d98e47a7ac861ff58b04c038ca29", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c3b94e656ff0d98e47a7ac861ff58b04c038ca29", "committedDate": "2020-09-04T23:11:32Z", "message": "Update ModelsLifecycleSyncSamples.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMDE2OTAw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#pullrequestreview-483016900", "createdAt": "2020-09-05T00:46:12Z", "commit": {"oid": "c3b94e656ff0d98e47a7ac861ff58b04c038ca29"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4940, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}