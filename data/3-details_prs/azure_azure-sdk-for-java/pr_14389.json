{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyODM5MDM3", "number": 14389, "title": "Event Hubs Idempotent Producer Java", "bodyText": "EventHubs Service has a new feature to send events to an event hub partition idempotently. Refer to Idempotent Producer Design for details.\nThis PR is to implement the idempotent producer Java Client SDK.", "createdAt": "2020-08-24T23:32:46Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389", "merged": true, "mergeCommit": {"oid": "1f693b74ba7f8c730d60b2ffedbac34be7eea7ad"}, "closed": true, "closedAt": "2020-09-24T00:10:38Z", "author": {"login": "YijunXieMS"}, "timelineItems": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdG_rLrAH2gAyNDcyODM5MDM3OjlmMjhhZTZhZjBhZWM0OGFhYzM0YmIxZmM5OGI5NzQyZjM4NDk2MDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLxObzgFqTQ5NDk1NTUyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9f28ae6af0aec48aac34bb1fc98b9742f3849606", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9f28ae6af0aec48aac34bb1fc98b9742f3849606", "committedDate": "2020-09-08T22:51:58Z", "message": "Initialize idempotent producer scaffolding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20f700606a1f2d5ac1df709630c406bf737e99e2", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/20f700606a1f2d5ac1df709630c406bf737e99e2", "committedDate": "2020-09-08T22:51:59Z", "message": "Add isIdempotentPublishingEnabled"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c12485289d9a03ee1e33b1eae02ea3eb49843d52", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c12485289d9a03ee1e33b1eae02ea3eb49843d52", "committedDate": "2020-09-08T22:52:00Z", "message": "Add producer desired capabilities"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acb5b2a817552b09f673c6f25a4f632cef76079a", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/acb5b2a817552b09f673c6f25a4f632cef76079a", "committedDate": "2020-09-08T22:52:00Z", "message": "Idempotent Producer Draft Implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1e3f7182fd57f5f8f1222dfa55166521cc22301", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a1e3f7182fd57f5f8f1222dfa55166521cc22301", "committedDate": "2020-09-08T22:52:01Z", "message": "Fix an import error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ff21b8f26563a0c56f2ffb5a7d19bc956c27f78", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1ff21b8f26563a0c56f2ffb5a7d19bc956c27f78", "committedDate": "2020-09-08T22:52:01Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29caf1fbfa81d5fb705c040fea8170c6317cd025", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/29caf1fbfa81d5fb705c040fea8170c6317cd025", "committedDate": "2020-09-08T22:52:01Z", "message": "Fix unit test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6abf4afd4b59aba4383233ef94c6d1de5cb4f14a", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6abf4afd4b59aba4383233ef94c6d1de5cb4f14a", "committedDate": "2020-09-08T18:53:54Z", "message": "Fix unit test"}, "afterCommit": {"oid": "29caf1fbfa81d5fb705c040fea8170c6317cd025", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/29caf1fbfa81d5fb705c040fea8170c6317cd025", "committedDate": "2020-09-08T22:52:01Z", "message": "Fix unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b71587d8b7d298e193ffd94db10e10953795214", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2b71587d8b7d298e193ffd94db10e10953795214", "committedDate": "2020-09-10T00:21:08Z", "message": "Update from API discussions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa0235c36e1600af6dca93a305927aa47df34ec8", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/aa0235c36e1600af6dca93a305927aa47df34ec8", "committedDate": "2020-09-10T00:23:58Z", "message": "Update EventData size estimation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07347c3b815762de08ce35e8bf4b35eed85fb7c0", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/07347c3b815762de08ce35e8bf4b35eed85fb7c0", "committedDate": "2020-09-10T06:17:45Z", "message": "Bug fixing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea7c1a06ce192e88c9cce03fe80520449ad73fe3", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ea7c1a06ce192e88c9cce03fe80520449ad73fe3", "committedDate": "2020-09-10T06:27:16Z", "message": "bug fixing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MDIzMDE2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#pullrequestreview-486023016", "createdAt": "2020-09-10T14:55:07Z", "commit": {"oid": "ea7c1a06ce192e88c9cce03fe80520449ad73fe3"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNDo1NTowN1rOHP4HMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTowODoyNlrOHP4uTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxMDAzMg==", "bodyText": "Not sure how I feel about having this as a system property.  On one hand, it does make some sense semantically, on the other those are typically \"broker owned\" properties that the service controls where sequence number is something the client controls.\nI'm open to suggestion here, though...", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r486410032", "createdAt": "2020-09-10T14:55:07Z", "author": {"login": "jsquire"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventData.java", "diffHunk": "@@ -213,6 +212,22 @@ public Long getSequenceNumber() {\n         return systemProperties.getSequenceNumber();\n     }\n \n+    /**\n+     * Gets the sequence number that was assigned during publishing, if the event was successfully\n+     * published by a sequence-aware producer.  If the producer was not configured to apply\n+     * sequence numbering or if the event has not yet been successfully published, this member\n+     * will be {@code null}.\n+     *\n+     * The published sequence number is only populated and relevant when certain features\n+     * of the producer are enabled. For example, it is used by idempotent publishing.\n+     *\n+     * @return The publishing sequence number assigned to the event at the time it was successfully published.\n+     * {@code null} if the {@link EventData} hasn't been sent or it's sent without idempotent publishing enabled.\n+     */\n+    public Integer getPublishedSequenceNumber() {\n+        return systemProperties.getPublishedSequenceNumber();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7c1a06ce192e88c9cce03fe80520449ad73fe3"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxMDgzMA==", "bodyText": "Is this too specific?   Rather than tying it to the idempotent producer explicitly, maybe we should consider something like \"requires sequence number\" so that it can be used across features if needed?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r486410830", "createdAt": "2020-09-10T14:56:10Z", "author": {"login": "jsquire"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventDataBatch.java", "diffHunk": "@@ -58,9 +58,11 @@\n     private final TracerProvider tracerProvider;\n     private final String entityPath;\n     private final String hostname;\n+    private final boolean isCreatedByIdempotentProducer;\n+    private Integer startingPublishedSequenceNumber;\n \n     EventDataBatch(int maxMessageSize, String partitionId, String partitionKey, ErrorContextProvider contextProvider,\n-        TracerProvider tracerProvider, String entityPath, String hostname) {\n+        TracerProvider tracerProvider, String entityPath, String hostname, boolean isCreatedByIdempotentProducer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7c1a06ce192e88c9cce03fe80520449ad73fe3"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxNjMwNw==", "bodyText": "Orthogonal to these changes, but this seems a bit different than how .NET does the estimation, which goes back to T1.    Not sure whether it's a concern, just mentioning for awareness:\nhttps://github.com/Azure/azure-sdk-for-net/blob/master/sdk/eventhub/Azure.Messaging.EventHubs/src/Amqp/AmqpEventBatch.cs#L137", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r486416307", "createdAt": "2020-09-10T15:03:29Z", "author": {"login": "jsquire"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventDataBatch.java", "diffHunk": "@@ -182,6 +208,18 @@ private int getSize(final EventData eventData, final boolean isFirst) {\n         Objects.requireNonNull(eventData, \"'eventData' cannot be null.\");\n \n         final Message amqpMessage = createAmqpMessage(eventData, partitionKey);\n+        if (isCreatedByIdempotentProducer) {\n+            // Pre-allocate size for system properties \"com.microsoft:producer-sequence-number\".\n+            // EventData doesn't have this system property until it's added just before an idempotent producer\n+            // sends the EventData out.\n+            final MessageAnnotations messageAnnotations = (amqpMessage.getMessageAnnotations() == null)\n+                ? new MessageAnnotations(new HashMap<>())\n+                : amqpMessage.getMessageAnnotations();\n+            amqpMessage.setMessageAnnotations(messageAnnotations);\n+            messageAnnotations.getValue().put(\n+                Symbol.getSymbol(\n+                    AmqpMessageConstant.PRODUCER_SEQUENCE_NUMBER_ANNOTATION_NAME.getValue()), Integer.MAX_VALUE);\n+        }\n         int eventSize = amqpMessage.encode(this.eventBytes, 0, maxMessageSize); // actual encoded bytes size\n         eventSize += 16; // data section overhead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7c1a06ce192e88c9cce03fe80520449ad73fe3"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxNzc5NQ==", "bodyText": "This is a nice touch.   I should probably think of adding something similar.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r486417795", "createdAt": "2020-09-10T15:05:25Z", "author": {"login": "jsquire"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/PartitionPublishingState.java", "diffHunk": "@@ -0,0 +1,171 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.messaging.eventhubs.implementation.PartitionPublishingUtils;\n+\n+import java.util.concurrent.Semaphore;\n+\n+/**\n+ * Store the starting and running state of a partition, which an idempotent producer sends events to.\n+ */\n+public final class PartitionPublishingState {\n+    private Short ownerLevel;\n+    private Long producerGroupId;\n+    private Integer sequenceNumber;\n+\n+    /**\n+     * Indicate whether the state has ever been retrieved from the link, or it's just a pure client created object.\n+     * Once the state is retrieved from the link, this value is always true.\n+     */\n+    private boolean fromLink = false;\n+    // Idempotent producer requires all event data batches of a partition are sent out sequentially.\n+    private final Semaphore sendingSemaphore = new Semaphore(1);\n+\n+    /**\n+     * Create a PartitionPublishingState with producer group id, owner level and starting sequence number\n+     * being {@code null}.\n+     */\n+    PartitionPublishingState() {\n+    }\n+\n+    PartitionPublishingState(PartitionPublishingState that) {\n+        this(that.getProducerGroupId(), that.getOwnerLevel(), that.getSequenceNumber());\n+    }\n+\n+    /**\n+     * Create a PartitionPublishingState with the producer group id, owner level and starting sequence number.\n+     *\n+     * @param producerGroupId See {@link #getProducerGroupId()}}\n+     * @param ownerLevel See {@link #getOwnerLevel()}\n+     * @param sequenceNumber See {@link #getSequenceNumber()} ()}\n+     */\n+    public PartitionPublishingState(Long producerGroupId, Short ownerLevel, Integer sequenceNumber) {\n+        this.ownerLevel = ownerLevel;\n+        this.producerGroupId = producerGroupId;\n+        this.sequenceNumber = sequenceNumber;\n+    }\n+\n+    /**\n+     * Gets the owner level that indicates a publishing is intended to be performed exclusively for events in the\n+     * requested partition in the context of the associated producer group. To do so, publishing will attempt to assert\n+     * ownership over the partition; in the case where more than one publisher in the producer group attempts to assert\n+     * ownership for the same partition, the one having a larger owner level value will \"win\".\n+     *\n+     * When an owner level is specified, other exclusive publishers which have a lower owner level within the context of\n+     * the same producer group will either not be allowed to be created or, if they already exist, will encounter an\n+     * exception during the next attempted operation. Should there be multiple producers in the producer group with the\n+     * same owner level, each of them will be able to publish to the partition.\n+     *\n+     * Producers with no owner level or which belong to a different producer group are permitted to publish to the\n+     * associated partition without restriction or awareness of other exclusive producers.\n+     *\n+     * The owner level is only recognized and relevant when certain features of the producer are enabled. For example,\n+     * it is used by idempotent publishing.\n+     *\n+     * An {@link com.azure.core.amqp.exception.AmqpException} will occur if an {@link EventHubProducerAsyncClient} or\n+     * {@link EventHubProducerClient} is unable to publish events to the\n+     * Event Hub partition for the given producer group id. In this case, the errorCondition of\n+     * {@link com.azure.core.amqp.exception.AmqpException} will be set to\n+     * {@link com.azure.core.amqp.exception.AmqpErrorCondition#PRODUCER_DISCONNECTED}.\n+     *\n+     * @see EventHubClientBuilder#enableIdempotentPartitionPublishing()\n+     *\n+     * @return The relative priority to associate with an exclusive publisher; if {@code null},\n+     * the Event Hubs service will control the value.\n+     */\n+    public Short getOwnerLevel() {\n+        return ownerLevel;\n+    }\n+\n+    /**\n+     * Gets the identifier of the producer group that this producer is associated with when publishing to the\n+     * associated partition. Events will be published in the context of this group.\n+     *\n+     * The producer group is only recognized and relevant when certain features of the producer are enabled.\n+     * For example, it is used by idempotent publishing.\n+     *\n+     * @see EventHubClientBuilder#enableIdempotentPartitionPublishing()\n+     *\n+     * @return The identifier of the producer group to associate with the partition; if {@code null},\n+     * the Event Hubs service will control the value.\n+     */\n+    public Long getProducerGroupId() {\n+        return producerGroupId;\n+    }\n+\n+    /**\n+     * Get the starting number that should be used for the automatic sequencing of events for the associated partition,\n+     * when published by this producer.\n+     *\n+     * The starting sequence number is only recognized and relevant when certain features of the producer are enabled.\n+     * For example, it is used by idempotent publishing.\n+     *\n+     * @see EventHubClientBuilder#enableIdempotentPartitionPublishing()\n+     *\n+     * @return The starting sequence number to associate with the partition; if {@code null},\n+     * the Event Hubs service will control the value.\n+     */\n+    public Integer getSequenceNumber() {\n+        return sequenceNumber;\n+    }\n+\n+    /**\n+     * Set the owner level.\n+     * @param ownerLevel The owner level of the idempotent producer.\n+     */\n+    void setOwnerLevel(Short ownerLevel) {\n+        this.ownerLevel = ownerLevel;\n+    }\n+\n+    /**\n+     * Set the producer group id.\n+     * @param producerGroupId The producer group id of the idempotent producer.\n+     */\n+    void setProducerGroupId(Long producerGroupId) {\n+        this.producerGroupId = producerGroupId;\n+    }\n+\n+    /**\n+     * Set the sequence number.\n+     * @param sequenceNumber The next publishing sequence number of a partition when an idempotent producer send\n+     * an {@link EventData} to.\n+     */\n+    void setSequenceNumber(Integer sequenceNumber) {\n+        this.sequenceNumber = sequenceNumber;\n+    }\n+\n+    void increaseSequenceNumber(int delta) {\n+        this.setSequenceNumber(PartitionPublishingUtils.incrementSequenceNumber(this.sequenceNumber, delta));\n+    }\n+\n+    /**\n+     * An idempotent producer must sequentially send events to an EventHubs partition. This {@link Semaphore}\n+     * is used to send sequentially.\n+     * @return The {@link Semaphore} used to ensure the send to the partition sequentially.\n+     */\n+    Semaphore getSendingSemaphore() {\n+        return sendingSemaphore;\n+    }\n+\n+    /**\n+     * @return whether the state has ever been retrieved from the link, or it's just a pure client created object.\n+     */\n+    boolean isFromLink() {\n+        return fromLink;\n+    }\n+\n+    void setFromLink(boolean fromLink) {\n+        this.fromLink = fromLink;\n+    }\n+\n+    @Override\n+    public String toString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7c1a06ce192e88c9cce03fe80520449ad73fe3"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyMDA0Nw==", "bodyText": "Are you actually using this anywhere, or are you just adding some flexibility \"in case\"?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r486420047", "createdAt": "2020-09-10T15:08:26Z", "author": {"login": "jsquire"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/PartitionPublishingUtils.java", "diffHunk": "@@ -0,0 +1,32 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.eventhubs.implementation;\n+\n+/**\n+ * A util class for idempotent producer partition publishing.\n+ */\n+public class PartitionPublishingUtils {\n+    /**\n+     * Increase an int value. If the increased value is over {@link Integer#MAX_VALUE}, restart from 0.\n+     * @param value The number to be incremented.\n+     * @param delta The number is to be incremented by delta.\n+     * @return The incremented value.\n+     */\n+    public static int incrementSequenceNumber(int value, int delta) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7c1a06ce192e88c9cce03fe80520449ad73fe3"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MDQwOTgx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#pullrequestreview-486040981", "createdAt": "2020-09-10T15:12:39Z", "commit": {"oid": "ea7c1a06ce192e88c9cce03fe80520449ad73fe3"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNToxMjo0MFrOHP46oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNToyNjo0MlrOHP5jxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyMzIwMQ==", "bodyText": "That's not part of the design.   This is intended to be exposed by the PartitionPublishingProperties", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r486423201", "createdAt": "2020-09-10T15:12:40Z", "author": {"login": "jsquire"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -187,6 +225,32 @@ public String getEventHubName() {\n             .flatMap(node -> node.getPartitionProperties(partitionId));\n     }\n \n+    /**\n+     * Indicate whether this client is an idempotent producer.\n+     * @return Whether this client is an idempotent producer.\n+     */\n+    public boolean isIdempotentProducer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7c1a06ce192e88c9cce03fe80520449ad73fe3"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyOTk0Nw==", "bodyText": "Forgive my lack of Flux, but in the case where there's a failure state (all retries exhausted), you remove the batch sequence number, each of the event sequence numbers, and don't update state right?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r486429947", "createdAt": "2020-09-10T15:21:29Z", "author": {"login": "jsquire"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -447,18 +516,56 @@ public String getEventHubName() {\n             // Start send span and store updated context\n             parentContext.set(tracerProvider.startSpan(finalSharedContext, ProcessKind.SEND));\n         }\n-\n-        return withRetry(getSendLink(batch.getPartitionId())\n-            .flatMap(link ->\n-                messages.size() == 1\n+        if (this.enableIdempotentPartitions) {\n+            PartitionPublishingState publishingState = this.getClientPartitionPublishingState(batch.getPartitionId());\n+            try {\n+                // Ensure only one EventDataBatch of a partition is being sent at a time.\n+                publishingState.getSendingSemaphore().acquire();\n+            } catch (InterruptedException e) {\n+                return monoError(logger, new RuntimeException(e));\n+            }\n+            return withRetry(\n+                getSendLink(batch.getPartitionId())\n+                .map(link -> {\n+                    int seqNumber = publishingState.getSequenceNumber();\n+                    batch.setStartingPublishedSequenceNumber(seqNumber);\n+                    for (EventData eventData : batch.getEvents()) {\n+                        eventData.getSystemProperties().put(\n+                            AmqpMessageConstant.PRODUCER_SEQUENCE_NUMBER_ANNOTATION_NAME.getValue(),\n+                            seqNumber);\n+                        seqNumber = PartitionPublishingUtils.incrementSequenceNumber(seqNumber);\n+                    }\n+                    return link;\n+                })\n+                .flatMap(link -> messages.size() == 1\n+                    ? link.send(messages.get(0))\n+                    : link.send(messages)),\n+                retryOptions.getTryTimeout(), retryPolicy\n+            ).publishOn(scheduler)\n+                .doOnEach(signal -> {\n+                    if (isTracingEnabled) {\n+                        tracerProvider.endSpan(parentContext.get(), signal);\n+                    }\n+                })\n+                .then(Mono.fromRunnable(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7c1a06ce192e88c9cce03fe80520449ad73fe3"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQzMTY3OQ==", "bodyText": "This isn't set until publishing is confirmed as successful, correct?   (we don't want to represent an interim state to callers when the publishing operation is active)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r486431679", "createdAt": "2020-09-10T15:23:54Z", "author": {"login": "jsquire"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventDataBatch.java", "diffHunk": "@@ -100,6 +108,20 @@ public int getSizeInBytes() {\n         return this.sizeInBytes;\n     }\n \n+    /**\n+     * Gets the sequence number of the first event in the batch, if the batch was successfully\n+     * published by a sequence-aware producer.  If the producer was not configured to apply\n+     * sequence numbering or if the batch has not yet been successfully published, this member\n+     * will be {@code null}.\n+     *\n+     * @return the publishing sequence number assigned to the first event in the batch at the time\n+     * the batch was successfully published. {@code null} if the producer was not configured to apply\n+     * sequence numbering or if the batch has not yet been successfully published.\n+     */\n+    public Integer getStartingPublishedSequenceNumber() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7c1a06ce192e88c9cce03fe80520449ad73fe3"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQzMzczNQ==", "bodyText": "This isn't set until publishing is confirmed as successful, correct? (we don't want to represent an interim state to callers when the publishing operation is active)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r486433735", "createdAt": "2020-09-10T15:26:42Z", "author": {"login": "jsquire"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventData.java", "diffHunk": "@@ -213,6 +212,22 @@ public Long getSequenceNumber() {\n         return systemProperties.getSequenceNumber();\n     }\n \n+    /**\n+     * Gets the sequence number that was assigned during publishing, if the event was successfully\n+     * published by a sequence-aware producer.  If the producer was not configured to apply\n+     * sequence numbering or if the event has not yet been successfully published, this member\n+     * will be {@code null}.\n+     *\n+     * The published sequence number is only populated and relevant when certain features\n+     * of the producer are enabled. For example, it is used by idempotent publishing.\n+     *\n+     * @return The publishing sequence number assigned to the event at the time it was successfully published.\n+     * {@code null} if the {@link EventData} hasn't been sent or it's sent without idempotent publishing enabled.\n+     */\n+    public Integer getPublishedSequenceNumber() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7c1a06ce192e88c9cce03fe80520449ad73fe3"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71b589a47fdb21ee3ffe29023be7febb0f47a0be", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/71b589a47fdb21ee3ffe29023be7febb0f47a0be", "committedDate": "2020-09-12T05:40:31Z", "message": "Add idempotent producer error conditions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "577d30e655c0b8631b280d04ee14457106c7dbc6", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/577d30e655c0b8631b280d04ee14457106c7dbc6", "committedDate": "2020-09-12T05:42:22Z", "message": "Add idempotent producer tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9139484aa7f0e382192ea95bbc1e6bab94ec516e", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9139484aa7f0e382192ea95bbc1e6bab94ec516e", "committedDate": "2020-09-12T05:43:19Z", "message": "bug fixing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fbf1056f6b267f0281e8497b2ae91343c50ec44", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8fbf1056f6b267f0281e8497b2ae91343c50ec44", "committedDate": "2020-09-13T00:30:45Z", "message": "producer related properties won't be available until events are successfully sent out"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbdafcb07fcde0e9eb42997c27652b63f019624f", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cbdafcb07fcde0e9eb42997c27652b63f019624f", "committedDate": "2020-09-13T00:41:43Z", "message": "Merge branch 'master' into eh_idem_producer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0ddcd5b648c9678d4d7675ae3ced16457d453df", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a0ddcd5b648c9678d4d7675ae3ced16457d453df", "committedDate": "2020-09-14T00:58:01Z", "message": "Fix merge file error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9637959251875e467a781277e299b4dbb94c4d71", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9637959251875e467a781277e299b4dbb94c4d71", "committedDate": "2020-09-14T01:28:40Z", "message": "Update from api view and PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c88e7acad1590a105727b189745e87acab48e49f", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c88e7acad1590a105727b189745e87acab48e49f", "committedDate": "2020-09-14T01:39:32Z", "message": "Change EH version to 5.3.0-beta.1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf20f6bf99f4980a707ae806bc2b97b0402b42d5", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bf20f6bf99f4980a707ae806bc2b97b0402b42d5", "committedDate": "2020-09-14T04:23:56Z", "message": "Small code refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3db0b6dd662802c91f8149a4b50dcb625bf69ce9", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3db0b6dd662802c91f8149a4b50dcb625bf69ce9", "committedDate": "2020-09-15T06:51:35Z", "message": "Add PartitionPublishingProperties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6c2a24a6723206870ce35844b21f5d47b64752d", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e6c2a24a6723206870ce35844b21f5d47b64752d", "committedDate": "2020-09-15T07:26:00Z", "message": "Add PartitionPublishingProperties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fc2cc4a505cbbecceba7bd35a62e867fa623d74", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7fc2cc4a505cbbecceba7bd35a62e867fa623d74", "committedDate": "2020-09-15T21:27:38Z", "message": "Merge branch 'master' into eh_idem_producer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MTQ4NjU1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#pullrequestreview-489148655", "createdAt": "2020-09-15T22:22:43Z", "commit": {"oid": "7fc2cc4a505cbbecceba7bd35a62e867fa623d74"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMjoyMjo0NFrOHSXx1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMjo0OToxN1rOHSZAEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTAyNjAwNw==", "bodyText": "Can we avoid using synchronized here? See SimpleTokenCache in core for an example.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r489026007", "createdAt": "2020-09-15T22:22:44Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ReactorSender.java", "diffHunk": "@@ -276,6 +278,26 @@ public String getHostname() {\n         }\n     }\n \n+    @Override\n+    public Mono<Map<Symbol, Object>> getRemoteProperties() {\n+        if (this.remoteProperties != null) {\n+            return Mono.just(this.remoteProperties);\n+        }\n+        synchronized (this) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fc2cc4a505cbbecceba7bd35a62e867fa623d74"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTAyNzIzNw==", "bodyText": "Update the tag to use the unreleased dependency.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r489027237", "createdAt": "2020-09-15T22:24:25Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/pom.xml", "diffHunk": "@@ -42,7 +42,7 @@\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-core-amqp</artifactId>\n-      <version>1.5.1</version> <!-- {x-version-update;com.azure:azure-core-amqp;dependency} -->\n+      <version>1.6.0-beta.1</version> <!-- {x-version-update;com.azure:azure-core-amqp;dependency} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fc2cc4a505cbbecceba7bd35a62e867fa623d74"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTAyODY5OQ==", "bodyText": "Will this group id be different for each event?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r489028699", "createdAt": "2020-09-15T22:26:24Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventData.java", "diffHunk": "@@ -213,6 +219,80 @@ public Long getSequenceNumber() {\n         return systemProperties.getSequenceNumber();\n     }\n \n+    /**\n+     * Gets the producer sequence number that was assigned during publishing, if the event was successfully\n+     * published by a sequence-aware producer.  If the producer was not configured to apply\n+     * sequence numbering or if the event has not yet been successfully published, this member\n+     * will be {@code null}.\n+     *\n+     * The published sequence number is only populated and relevant when certain features\n+     * of the producer are enabled. For example, it is used by idempotent publishing.\n+     *\n+     * @return The publishing sequence number assigned to the event at the time it was successfully published.\n+     * {@code null} if the {@link EventData} hasn't been sent or it's sent without idempotent publishing enabled.\n+     */\n+    public Integer getPublishedSequenceNumber() {\n+        return publishedSequenceNumber;\n+    }\n+\n+    /**\n+     * Gets the producer group id that was assigned during publishing, if the event was successfully\n+     * published by a sequence-aware producer.  If the producer was not configured to apply\n+     * sequence numbering or if the event has not yet been successfully published, this member\n+     * will be {@code null}.\n+     *\n+     * The producer group id is only populated and relevant when certain features\n+     * of the producer are enabled. For example, it is used by idempotent publishing.\n+     *\n+     * @return The producer group id assigned to the event at the time it was successfully published.\n+     * {@code null} if the {@link EventData} hasn't been sent or it's sent without idempotent publishing enabled.\n+     */\n+    public Long getPublishedGroupId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fc2cc4a505cbbecceba7bd35a62e867fa623d74"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTAyOTMwOA==", "bodyText": "I am not sure why event data should contain the owner level information.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r489029308", "createdAt": "2020-09-15T22:27:16Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventData.java", "diffHunk": "@@ -213,6 +219,80 @@ public Long getSequenceNumber() {\n         return systemProperties.getSequenceNumber();\n     }\n \n+    /**\n+     * Gets the producer sequence number that was assigned during publishing, if the event was successfully\n+     * published by a sequence-aware producer.  If the producer was not configured to apply\n+     * sequence numbering or if the event has not yet been successfully published, this member\n+     * will be {@code null}.\n+     *\n+     * The published sequence number is only populated and relevant when certain features\n+     * of the producer are enabled. For example, it is used by idempotent publishing.\n+     *\n+     * @return The publishing sequence number assigned to the event at the time it was successfully published.\n+     * {@code null} if the {@link EventData} hasn't been sent or it's sent without idempotent publishing enabled.\n+     */\n+    public Integer getPublishedSequenceNumber() {\n+        return publishedSequenceNumber;\n+    }\n+\n+    /**\n+     * Gets the producer group id that was assigned during publishing, if the event was successfully\n+     * published by a sequence-aware producer.  If the producer was not configured to apply\n+     * sequence numbering or if the event has not yet been successfully published, this member\n+     * will be {@code null}.\n+     *\n+     * The producer group id is only populated and relevant when certain features\n+     * of the producer are enabled. For example, it is used by idempotent publishing.\n+     *\n+     * @return The producer group id assigned to the event at the time it was successfully published.\n+     * {@code null} if the {@link EventData} hasn't been sent or it's sent without idempotent publishing enabled.\n+     */\n+    public Long getPublishedGroupId() {\n+        return publishedGroupId;\n+    }\n+\n+    /**\n+     * Gets the producer owner level that was assigned during publishing, if the event was successfully\n+     * published by a sequence-aware producer.  If the producer was not configured to apply\n+     * sequence numbering or if the event has not yet been successfully published, this member\n+     * will be {@code null}.\n+     *\n+     * The producer owner level is only populated and relevant when certain features\n+     * of the producer are enabled. For example, it is used by idempotent publishing.\n+     *\n+     * @return The producer owner level assigned to the event at the time it was successfully published.\n+     * {@code null} if the {@link EventData} hasn't been sent or it's sent without idempotent publishing enabled.\n+     */\n+    public Short getPublishedOwnerLevel() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fc2cc4a505cbbecceba7bd35a62e867fa623d74"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA0MDg2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public EventHubClientBuilder idempotentPartitionPublishing() {\n          \n          \n            \n                public EventHubClientBuilder enableIdempotentPartitionPublishing() {", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r489040861", "createdAt": "2020-09-15T22:42:25Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubClientBuilder.java", "diffHunk": "@@ -372,6 +378,51 @@ public EventHubClientBuilder prefetchCount(int prefetchCount) {\n         return this;\n     }\n \n+    /**\n+     * Enables idempotent publishing when an {@link EventHubProducerAsyncClient} or {@link EventHubProducerClient}\n+     * is built.\n+     *\n+     * If enabled, the producer will only be able to publish directly to partitions; it will not be able to publish to\n+     * the Event Hubs gateway for automatic partition routing nor using a partition key.\n+     *\n+     * @return The updated {@link EventHubClientBuilder} object.\n+     */\n+    public EventHubClientBuilder idempotentPartitionPublishing() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fc2cc4a505cbbecceba7bd35a62e867fa623d74"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA0MjQ4OQ==", "bodyText": "If this method is called twice - first time with a non-null map and second time with null map, then the 2nd call is a no-op and the builder will still use the first map which is not what the user would have expected. If the map is null, this builder's map should also be set to null.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r489042489", "createdAt": "2020-09-15T22:44:39Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubClientBuilder.java", "diffHunk": "@@ -372,6 +378,51 @@ public EventHubClientBuilder prefetchCount(int prefetchCount) {\n         return this;\n     }\n \n+    /**\n+     * Enables idempotent publishing when an {@link EventHubProducerAsyncClient} or {@link EventHubProducerClient}\n+     * is built.\n+     *\n+     * If enabled, the producer will only be able to publish directly to partitions; it will not be able to publish to\n+     * the Event Hubs gateway for automatic partition routing nor using a partition key.\n+     *\n+     * @return The updated {@link EventHubClientBuilder} object.\n+     */\n+    public EventHubClientBuilder idempotentPartitionPublishing() {\n+        this.idempotentPartitionPublishing = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the idempotent publishing options to {@link EventHubProducerAsyncClient} or {@link EventHubProducerClient}\n+     * when you build them.\n+     *\n+     * The set of options that can be specified to influence publishing behavior specific to the configured Event Hub\n+     * partition.\n+     * These options are not necessary in the majority of scenarios and are intended for use with specialized scenarios,\n+     * such as when recovering the state used for idempotent publishing.\n+     *\n+     * It is highly recommended that these options only be specified if there is a proven need to do so; Incorrectly\n+     * configuring these values may result in the built {@link EventHubProducerAsyncClient} or\n+     * {@link EventHubProducerClient} instance unable to publish to the Event Hubs.\n+     *\n+     * These options are ignored when publishing to the Event Hubs gateway for automatic routing or when using a\n+     * partition key.\n+     *\n+     * @param states A {@link Map} of {@link PartitionPublishingState} for each partition. The keys of the map\n+     * are the partition ids.\n+     * @return The updated {@link EventHubClientBuilder} object.\n+     */\n+    public EventHubClientBuilder initialPartitionPublishingStates(Map<String,\n+        PartitionPublishingProperties> states) {\n+        if (states != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fc2cc4a505cbbecceba7bd35a62e867fa623d74"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA0NTE2NQ==", "bodyText": "Use Mono.defer() instead to wait until the user subscribes to call publishingState.toPartitionPublishingProperties().", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r489045165", "createdAt": "2020-09-15T22:48:09Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -187,6 +225,43 @@ public String getEventHubName() {\n             .flatMap(node -> node.getPartitionProperties(partitionId));\n     }\n \n+    /**\n+     * Get the idempotent producer's publishing state of a partition.\n+     * @param partitionId The partition id of the publishing state\n+     * @return A mono that has the {@link PartitionPublishingProperties}.\n+     * {@code null} if the partition doesn't have any state yet.\n+     * @throws UnsupportedOperationException if this producer isn't an idempotent producer.\n+     */\n+    Mono<PartitionPublishingProperties> getPartitionPublishingProperties(String partitionId) {\n+        PartitionPublishingState publishingState = getClientPartitionPublishingState(partitionId);\n+        if (publishingState.isFromLink()) {\n+            return Mono.just(publishingState.toPartitionPublishingProperties());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fc2cc4a505cbbecceba7bd35a62e867fa623d74"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA0NjAzNQ==", "bodyText": "All of this should be wrapped in Mono.defer().", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r489046035", "createdAt": "2020-09-15T22:49:17Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -187,6 +225,43 @@ public String getEventHubName() {\n             .flatMap(node -> node.getPartitionProperties(partitionId));\n     }\n \n+    /**\n+     * Get the idempotent producer's publishing state of a partition.\n+     * @param partitionId The partition id of the publishing state\n+     * @return A mono that has the {@link PartitionPublishingProperties}.\n+     * {@code null} if the partition doesn't have any state yet.\n+     * @throws UnsupportedOperationException if this producer isn't an idempotent producer.\n+     */\n+    Mono<PartitionPublishingProperties> getPartitionPublishingProperties(String partitionId) {\n+        PartitionPublishingState publishingState = getClientPartitionPublishingState(partitionId);\n+        if (publishingState.isFromLink()) {\n+            return Mono.just(publishingState.toPartitionPublishingProperties());\n+        } else {\n+            return withRetry(this.getSendLink(partitionId).flatMap(amqpSendLink ->\n+                    Mono.just(this.getClientPartitionPublishingState(partitionId))),\n+                retryOptions.getTryTimeout(), retryPolicy).map(\n+                    PartitionPublishingState::toPartitionPublishingProperties);\n+        }\n+    }\n+\n+    /**\n+     * Get the idempotent producer's publishing state of a partition.\n+     * @param partitionId The partition id of the publishing state\n+     * @return A mono that has the {@link PartitionPublishingState}.\n+     * {@code null} if the partition doesn't have any state yet.\n+     * @throws UnsupportedOperationException if this producer isn't an idempotent producer.\n+     */\n+    Mono<PartitionPublishingState> getPartitionPublishingState(String partitionId) {\n+        PartitionPublishingState publishingState = getClientPartitionPublishingState(partitionId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fc2cc4a505cbbecceba7bd35a62e867fa623d74"}, "originalPosition": 124}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4OTgzNTg2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#pullrequestreview-488983586", "createdAt": "2020-09-15T19:05:24Z", "commit": {"oid": "e6c2a24a6723206870ce35844b21f5d47b64752d"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOTowNToyNVrOHSQL_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTozODoxNVrOHSc7Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwMTYyOQ==", "bodyText": "I wonder if this will be easier to reason about if we use an AtomicReference rather than volatile.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r488901629", "createdAt": "2020-09-15T19:05:25Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ReactorSender.java", "diffHunk": "@@ -276,6 +278,26 @@ public String getHostname() {\n         }\n     }\n \n+    @Override\n+    public Mono<Map<Symbol, Object>> getRemoteProperties() {\n+        if (this.remoteProperties != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c2a24a6723206870ce35844b21f5d47b64752d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwMzUzOA==", "bodyText": "I have it not to align the parameter names.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r488903538", "createdAt": "2020-09-15T19:08:56Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ReactorSession.java", "diffHunk": "@@ -463,11 +464,16 @@ protected ReactorReceiver createConsumer(String entityPath, Receiver receiver,\n             }));\n     }\n \n+    protected Mono<AmqpLink> createProducer(String linkName, String entityPath, Duration timeout,\n+                                            AmqpRetryPolicy retry, Map<Symbol, Object> linkProperties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c2a24a6723206870ce35844b21f5d47b64752d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwMzY4MA==", "bodyText": "Is there a reason we realigned it this way?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r488903680", "createdAt": "2020-09-15T19:09:13Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ReactorSession.java", "diffHunk": "@@ -463,11 +464,16 @@ protected ReactorReceiver createConsumer(String entityPath, Receiver receiver,\n             }));\n     }\n \n+    protected Mono<AmqpLink> createProducer(String linkName, String entityPath, Duration timeout,\n+                                            AmqpRetryPolicy retry, Map<Symbol, Object> linkProperties) {\n+        return this.createProducer(linkName, entityPath, timeout, retry, linkProperties, null);\n+    }\n     /**\n      * NOTE: Ensure this is invoked using the reactor dispatcher because proton-j is not thread-safe.\n      */\n-    private LinkSubscription<AmqpSendLink> getSubscription(String linkName, String entityPath,\n-        Map<Symbol, Object> linkProperties, Duration timeout, AmqpRetryPolicy retry, TokenManager tokenManager) {\n+    private LinkSubscription<AmqpSendLink> getSubscription(\n+        String linkName, String entityPath, Map<Symbol, Object> linkProperties, Symbol[] senderDesiredCapabilities,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c2a24a6723206870ce35844b21f5d47b64752d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkzOTE0Mg==", "bodyText": "There was a reason for this. If you follow the logic, we do some conversions on it to make it the correct type then add it back.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r488939142", "createdAt": "2020-09-15T20:00:44Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventData.java", "diffHunk": "@@ -307,6 +387,9 @@ public EventData addContext(String key, Object value) {\n             }\n             this.sequenceNumber = sequenceNumber;\n             put(SEQUENCE_NUMBER_ANNOTATION_NAME.getValue(), this.sequenceNumber);\n+\n+            // TODO: confirm with Connie why we remove a value from this SystemProperty and then add it back?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c2a24a6723206870ce35844b21f5d47b64752d"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0MDg1Nw==", "bodyText": "We don't need to specify this is internal, the method is package-private.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r488940857", "createdAt": "2020-09-15T20:04:01Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventData.java", "diffHunk": "@@ -213,6 +219,80 @@ public Long getSequenceNumber() {\n         return systemProperties.getSequenceNumber();\n     }\n \n+    /**\n+     * Gets the producer sequence number that was assigned during publishing, if the event was successfully\n+     * published by a sequence-aware producer.  If the producer was not configured to apply\n+     * sequence numbering or if the event has not yet been successfully published, this member\n+     * will be {@code null}.\n+     *\n+     * The published sequence number is only populated and relevant when certain features\n+     * of the producer are enabled. For example, it is used by idempotent publishing.\n+     *\n+     * @return The publishing sequence number assigned to the event at the time it was successfully published.\n+     * {@code null} if the {@link EventData} hasn't been sent or it's sent without idempotent publishing enabled.\n+     */\n+    public Integer getPublishedSequenceNumber() {\n+        return publishedSequenceNumber;\n+    }\n+\n+    /**\n+     * Gets the producer group id that was assigned during publishing, if the event was successfully\n+     * published by a sequence-aware producer.  If the producer was not configured to apply\n+     * sequence numbering or if the event has not yet been successfully published, this member\n+     * will be {@code null}.\n+     *\n+     * The producer group id is only populated and relevant when certain features\n+     * of the producer are enabled. For example, it is used by idempotent publishing.\n+     *\n+     * @return The producer group id assigned to the event at the time it was successfully published.\n+     * {@code null} if the {@link EventData} hasn't been sent or it's sent without idempotent publishing enabled.\n+     */\n+    public Long getPublishedGroupId() {\n+        return publishedGroupId;\n+    }\n+\n+    /**\n+     * Gets the producer owner level that was assigned during publishing, if the event was successfully\n+     * published by a sequence-aware producer.  If the producer was not configured to apply\n+     * sequence numbering or if the event has not yet been successfully published, this member\n+     * will be {@code null}.\n+     *\n+     * The producer owner level is only populated and relevant when certain features\n+     * of the producer are enabled. For example, it is used by idempotent publishing.\n+     *\n+     * @return The producer owner level assigned to the event at the time it was successfully published.\n+     * {@code null} if the {@link EventData} hasn't been sent or it's sent without idempotent publishing enabled.\n+     */\n+    public Short getPublishedOwnerLevel() {\n+        return publishedOwnerLevel;\n+    }\n+\n+    void setInternalProducerGroupId(Long internalProducerGroupId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c2a24a6723206870ce35844b21f5d47b64752d"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwODc5Nw==", "bodyText": "isPublishingSequenceNumberRequired?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r489108797", "createdAt": "2020-09-16T01:32:36Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventDataBatch.java", "diffHunk": "@@ -58,9 +58,11 @@\n     private final TracerProvider tracerProvider;\n     private final String entityPath;\n     private final String hostname;\n+    private final boolean publishingSequenceNumberRequired;\n+    private Integer startingPublishedSequenceNumber;\n \n     EventDataBatch(int maxMessageSize, String partitionId, String partitionKey, ErrorContextProvider contextProvider,\n-        TracerProvider tracerProvider, String entityPath, String hostname) {\n+        TracerProvider tracerProvider, String entityPath, String hostname, boolean publishingSequenceNumberRequired) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fc2cc4a505cbbecceba7bd35a62e867fa623d74"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwOTA5NQ==", "bodyText": "I'm not sure why the arguments are moved to the next line.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r489109095", "createdAt": "2020-09-16T01:33:49Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubAsyncClient.java", "diffHunk": "@@ -32,9 +34,13 @@\n     private final boolean isSharedConnection;\n     private final Runnable onClientClose;\n     private final TracerProvider tracerProvider;\n+    private final boolean enableIdempotentPartitions;\n+    private final Map<String, PartitionPublishingState> initialPartitionPublishingStates;\n \n-    EventHubAsyncClient(EventHubConnectionProcessor connectionProcessor, TracerProvider tracerProvider,\n-        MessageSerializer messageSerializer, Scheduler scheduler, boolean isSharedConnection, Runnable onClientClose) {\n+    EventHubAsyncClient(\n+        EventHubConnectionProcessor connectionProcessor, TracerProvider tracerProvider,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fc2cc4a505cbbecceba7bd35a62e867fa623d74"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwOTIwMA==", "bodyText": "Can we put the entire argument on the next line rather than splitting the map here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r489109200", "createdAt": "2020-09-16T01:34:18Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubClientBuilder.java", "diffHunk": "@@ -372,6 +378,51 @@ public EventHubClientBuilder prefetchCount(int prefetchCount) {\n         return this;\n     }\n \n+    /**\n+     * Enables idempotent publishing when an {@link EventHubProducerAsyncClient} or {@link EventHubProducerClient}\n+     * is built.\n+     *\n+     * If enabled, the producer will only be able to publish directly to partitions; it will not be able to publish to\n+     * the Event Hubs gateway for automatic partition routing nor using a partition key.\n+     *\n+     * @return The updated {@link EventHubClientBuilder} object.\n+     */\n+    public EventHubClientBuilder idempotentPartitionPublishing() {\n+        this.idempotentPartitionPublishing = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the idempotent publishing options to {@link EventHubProducerAsyncClient} or {@link EventHubProducerClient}\n+     * when you build them.\n+     *\n+     * The set of options that can be specified to influence publishing behavior specific to the configured Event Hub\n+     * partition.\n+     * These options are not necessary in the majority of scenarios and are intended for use with specialized scenarios,\n+     * such as when recovering the state used for idempotent publishing.\n+     *\n+     * It is highly recommended that these options only be specified if there is a proven need to do so; Incorrectly\n+     * configuring these values may result in the built {@link EventHubProducerAsyncClient} or\n+     * {@link EventHubProducerClient} instance unable to publish to the Event Hubs.\n+     *\n+     * These options are ignored when publishing to the Event Hubs gateway for automatic routing or when using a\n+     * partition key.\n+     *\n+     * @param states A {@link Map} of {@link PartitionPublishingState} for each partition. The keys of the map\n+     * are the partition ids.\n+     * @return The updated {@link EventHubClientBuilder} object.\n+     */\n+    public EventHubClientBuilder initialPartitionPublishingStates(Map<String,\n+        PartitionPublishingProperties> states) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fc2cc4a505cbbecceba7bd35a62e867fa623d74"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwOTY0NA==", "bodyText": "Is it possible to use Collections.unmodifiableMap to show that we don't want people adding random things to this?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r489109644", "createdAt": "2020-09-16T01:35:47Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubClientBuilder.java", "diffHunk": "@@ -372,6 +378,51 @@ public EventHubClientBuilder prefetchCount(int prefetchCount) {\n         return this;\n     }\n \n+    /**\n+     * Enables idempotent publishing when an {@link EventHubProducerAsyncClient} or {@link EventHubProducerClient}\n+     * is built.\n+     *\n+     * If enabled, the producer will only be able to publish directly to partitions; it will not be able to publish to\n+     * the Event Hubs gateway for automatic partition routing nor using a partition key.\n+     *\n+     * @return The updated {@link EventHubClientBuilder} object.\n+     */\n+    public EventHubClientBuilder idempotentPartitionPublishing() {\n+        this.idempotentPartitionPublishing = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the idempotent publishing options to {@link EventHubProducerAsyncClient} or {@link EventHubProducerClient}\n+     * when you build them.\n+     *\n+     * The set of options that can be specified to influence publishing behavior specific to the configured Event Hub\n+     * partition.\n+     * These options are not necessary in the majority of scenarios and are intended for use with specialized scenarios,\n+     * such as when recovering the state used for idempotent publishing.\n+     *\n+     * It is highly recommended that these options only be specified if there is a proven need to do so; Incorrectly\n+     * configuring these values may result in the built {@link EventHubProducerAsyncClient} or\n+     * {@link EventHubProducerClient} instance unable to publish to the Event Hubs.\n+     *\n+     * These options are ignored when publishing to the Event Hubs gateway for automatic routing or when using a\n+     * partition key.\n+     *\n+     * @param states A {@link Map} of {@link PartitionPublishingState} for each partition. The keys of the map\n+     * are the partition ids.\n+     * @return The updated {@link EventHubClientBuilder} object.\n+     */\n+    public EventHubClientBuilder initialPartitionPublishingStates(Map<String,\n+        PartitionPublishingProperties> states) {\n+        if (states != null) {\n+            this.initialPartitionPublishingStates = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fc2cc4a505cbbecceba7bd35a62e867fa623d74"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTExMDIyMQ==", "bodyText": "I think this is used in multiple places, iirc we have a constants class we can put these in and make them package-private?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r489110221", "createdAt": "2020-09-16T01:37:57Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/EventHubReactorSession.java", "diffHunk": "@@ -43,6 +45,15 @@\n     private static final Symbol ENABLE_RECEIVER_RUNTIME_METRIC_NAME =\n         Symbol.valueOf(VENDOR + \":enable-receiver-runtime-metric\");\n \n+    private static final Symbol PRODUCER_EPOCH = Symbol.valueOf(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fc2cc4a505cbbecceba7bd35a62e867fa623d74"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTExMDI5OA==", "bodyText": "I think it's weird we have a new line before arguments. We should be consistent here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r489110298", "createdAt": "2020-09-16T01:38:15Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/EventHubReactorSession.java", "diffHunk": "@@ -68,6 +79,32 @@\n             messageSerializer, openTimeout, retryPolicy);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Mono<AmqpSendLink> createProducer(\n+        String linkName, String entityPath, Duration timeout, AmqpRetryPolicy retry,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fc2cc4a505cbbecceba7bd35a62e867fa623d74"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5effee6faace0a55f5957e4c98139abbd2bb394", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d5effee6faace0a55f5957e4c98139abbd2bb394", "committedDate": "2020-09-16T03:48:14Z", "message": "Unreleased azure-core-amqp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "837ef255b4e8757ad33c3418dde6811d86743be0", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/837ef255b4e8757ad33c3418dde6811d86743be0", "committedDate": "2020-09-16T04:09:12Z", "message": "Unreleased azure-messaging-eventhubs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "761dba839eea71d6a41e15aa39910eed12f2fe8f", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/761dba839eea71d6a41e15aa39910eed12f2fe8f", "committedDate": "2020-09-16T17:25:12Z", "message": "Use azure-core-amqp unreleased tag in pom.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b596e144103b80cd65aa3ab7cc3139b019781b4f", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b596e144103b80cd65aa3ab7cc3139b019781b4f", "committedDate": "2020-09-16T23:59:56Z", "message": "Update for review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwOTIwNjMx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#pullrequestreview-490920631", "createdAt": "2020-09-17T19:26:55Z", "commit": {"oid": "b596e144103b80cd65aa3ab7cc3139b019781b4f"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOToyNjo1NVrOHTx_2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOTozODozMFrOHTyr4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUwNDE1Mg==", "bodyText": "We don't need an atomic reference for this? The getEndpointStates() is a replayable Flux, and replays the last cached value... by then, the sender.getRemoteProperties() will be populated. Returning as-is is fine.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r490504152", "createdAt": "2020-09-17T19:26:55Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ReactorSender.java", "diffHunk": "@@ -276,6 +279,16 @@ public String getHostname() {\n         }\n     }\n \n+    @Override\n+    public Mono<Map<Symbol, Object>> getRemoteProperties() {\n+        this.remotePropertiesReference.compareAndSet(null, RetryUtil.withRetry(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b596e144103b80cd65aa3ab7cc3139b019781b4f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUwODE4NA==", "bodyText": "I don't think we need \"internal\" as a parameter property name. Same with other ones above and below.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r490508184", "createdAt": "2020-09-17T19:30:50Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventData.java", "diffHunk": "@@ -213,6 +219,80 @@ public Long getSequenceNumber() {\n         return systemProperties.getSequenceNumber();\n     }\n \n+    /**\n+     * Gets the producer sequence number that was assigned during publishing, if the event was successfully\n+     * published by a sequence-aware producer.  If the producer was not configured to apply\n+     * sequence numbering or if the event has not yet been successfully published, this member\n+     * will be {@code null}.\n+     *\n+     * The published sequence number is only populated and relevant when certain features\n+     * of the producer are enabled. For example, it is used by idempotent publishing.\n+     *\n+     * @return The publishing sequence number assigned to the event at the time it was successfully published.\n+     * {@code null} if the {@link EventData} hasn't been sent or it's sent without idempotent publishing enabled.\n+     */\n+    public Integer getPublishedSequenceNumber() {\n+        return publishedSequenceNumber;\n+    }\n+\n+    /**\n+     * Gets the producer group id that was assigned during publishing, if the event was successfully\n+     * published by a sequence-aware producer.  If the producer was not configured to apply\n+     * sequence numbering or if the event has not yet been successfully published, this member\n+     * will be {@code null}.\n+     *\n+     * The producer group id is only populated and relevant when certain features\n+     * of the producer are enabled. For example, it is used by idempotent publishing.\n+     *\n+     * @return The producer group id assigned to the event at the time it was successfully published.\n+     * {@code null} if the {@link EventData} hasn't been sent or it's sent without idempotent publishing enabled.\n+     */\n+    public Long getPublishedGroupId() {\n+        return publishedGroupId;\n+    }\n+\n+    /**\n+     * Gets the producer owner level that was assigned during publishing, if the event was successfully\n+     * published by a sequence-aware producer.  If the producer was not configured to apply\n+     * sequence numbering or if the event has not yet been successfully published, this member\n+     * will be {@code null}.\n+     *\n+     * The producer owner level is only populated and relevant when certain features\n+     * of the producer are enabled. For example, it is used by idempotent publishing.\n+     *\n+     * @return The producer owner level assigned to the event at the time it was successfully published.\n+     * {@code null} if the {@link EventData} hasn't been sent or it's sent without idempotent publishing enabled.\n+     */\n+    public Short getPublishedOwnerLevel() {\n+        return publishedOwnerLevel;\n+    }\n+\n+    void setProducerGroupIdInSysProperties(Long internalProducerGroupId) {\n+        this.getSystemProperties().put(\n+            AmqpMessageConstant.PRODUCER_ID_ANNOTATION_NAME.getValue(),\n+            internalProducerGroupId\n+        );\n+    }\n+\n+    void setProducerOwnerLevelInSysProperties(Short internalProducerOwnerLevel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b596e144103b80cd65aa3ab7cc3139b019781b4f"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUwOTYzMw==", "bodyText": "We should have created an internal options bag before.. but it might be worthwhile because as we add to the constructor, it'll break existing classes.\nEventHubAsyncClientOptions or something that has all these optional things (ie. isSharedConnection, isIdempotent, etc)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r490509633", "createdAt": "2020-09-17T19:32:22Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubAsyncClient.java", "diffHunk": "@@ -32,9 +34,13 @@\n     private final boolean isSharedConnection;\n     private final Runnable onClientClose;\n     private final TracerProvider tracerProvider;\n+    private final boolean isIdempotentPartitionPublishing;\n+    private final Map<String, PartitionPublishingState> initialPartitionPublishingStates;\n \n     EventHubAsyncClient(EventHubConnectionProcessor connectionProcessor, TracerProvider tracerProvider,\n-        MessageSerializer messageSerializer, Scheduler scheduler, boolean isSharedConnection, Runnable onClientClose) {\n+        MessageSerializer messageSerializer, Scheduler scheduler, boolean isSharedConnection, Runnable onClientClose,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b596e144103b80cd65aa3ab7cc3139b019781b4f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxMDU3NQ==", "bodyText": "Same with using options for the constructor.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r490510575", "createdAt": "2020-09-17T19:33:16Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -132,6 +141,25 @@\n         this.retryPolicy = getRetryPolicy(retryOptions);\n         this.scheduler = scheduler;\n         this.isSharedConnection = isSharedConnection;\n+        this.isIdempotentPartitionPublishing = isIdempotentPartitionPublishing;\n+        if (isIdempotentPartitionPublishing) {\n+            if (initialPartitionPublishingStates == null) {\n+                this.partitionPublishingStates = new HashMap<>();\n+            } else {\n+                this.partitionPublishingStates = initialPartitionPublishingStates;\n+            }\n+        } else {\n+            this.partitionPublishingStates = null;\n+        }\n+    }\n+\n+    EventHubProducerAsyncClient(String fullyQualifiedNamespace, String eventHubName,\n+        EventHubConnectionProcessor connectionProcessor, AmqpRetryOptions retryOptions, TracerProvider tracerProvider,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b596e144103b80cd65aa3ab7cc3139b019781b4f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxMjEzNw==", "bodyText": "can we flatten this into an &&", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r490512137", "createdAt": "2020-09-17T19:34:44Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -207,6 +272,12 @@ public String getEventHubName() {\n         if (options == null) {\n             return monoError(logger, new NullPointerException(\"'options' cannot be null.\"));\n         }\n+        if (this.isIdempotentPartitionPublishing) {\n+            if (CoreUtils.isNullOrEmpty(options.getPartitionId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b596e144103b80cd65aa3ab7cc3139b019781b4f"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxMzI4MA==", "bodyText": "Consistent use of this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r490513280", "createdAt": "2020-09-17T19:35:51Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -376,6 +447,9 @@ public String getEventHubName() {\n             return monoError(logger, new NullPointerException(\"'events' cannot be null.\"));\n         } else if (options == null) {\n             return monoError(logger, new NullPointerException(\"'options' cannot be null.\"));\n+        } else if (options.getPartitionId() == null && this.isIdempotentPartitionPublishing) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b596e144103b80cd65aa3ab7cc3139b019781b4f"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxMzkyOA==", "bodyText": "Does this part need to be in a mono? it seems ysnchronous to me.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r490513928", "createdAt": "2020-09-17T19:36:33Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -447,18 +514,65 @@ public String getEventHubName() {\n             // Start send span and store updated context\n             parentContext.set(tracerProvider.startSpan(finalSharedContext, ProcessKind.SEND));\n         }\n-\n-        return withRetry(getSendLink(batch.getPartitionId())\n-            .flatMap(link ->\n-                messages.size() == 1\n+        if (isIdempotentPartitionPublishing) {\n+            PartitionPublishingState publishingState = this.getClientPartitionPublishingState(batch.getPartitionId());\n+            return Mono.fromRunnable(() -> {\n+                publishingState.getSemaphore().acquireUninterruptibly();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b596e144103b80cd65aa3ab7cc3139b019781b4f"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxNDYyNQ==", "bodyText": "Since we're synchronising on the entire class... is it possible to just synchronise on the parts that need to be?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r490514625", "createdAt": "2020-09-17T19:37:18Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -502,12 +617,69 @@ private String getEntityPath(String partitionId) {\n             : String.format(Locale.US, SENDER_ENTITY_PATH_FORMAT, eventHubName, partitionId);\n     }\n \n+    private Mono<AmqpSendLink> updatePublishingState(String partitionId, AmqpSendLink amqpSendLink) {\n+        if (this.isIdempotentPartitionPublishing) {\n+            return amqpSendLink.getRemoteProperties().map(properties -> {\n+                this.setPartitionPublishingState(\n+                    partitionId, (Long) properties.get(SymbolConstants.PRODUCER_ID),\n+                    (Short) properties.get(SymbolConstants.PRODUCER_EPOCH),\n+                    (Integer) properties.get(SymbolConstants.PRODUCER_SEQUENCE_NUMBER)\n+                );\n+                return amqpSendLink;\n+            });\n+        } else {\n+            return Mono.just(amqpSendLink);\n+        }\n+    }\n+\n+    /**\n+     * Get the idempotent producer's publishing state of a partition from the client side maintained state.\n+     * It doesn't create a link to get state from the service.\n+     */\n+    private PartitionPublishingState getClientPartitionPublishingState(String partitionId) {\n+        if (!this.isIdempotentPartitionPublishing) {\n+            throw logger.logExceptionAsWarning(\n+                new IllegalStateException(\"getPartitionPublishingState() shouldn't be called if the producer\"\n+                    + \" is not an idempotent producer.\"));\n+        }\n+        if (this.partitionPublishingStates.containsKey(partitionId)) {\n+            return this.partitionPublishingStates.get(partitionId);\n+        } else {\n+            synchronized (this) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b596e144103b80cd65aa3ab7cc3139b019781b4f"}, "originalPosition": 287}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxNTEwMg==", "bodyText": "We don't need this. It's implied because there is no other variable with the same name in this scope.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r490515102", "createdAt": "2020-09-17T19:37:54Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -502,12 +617,69 @@ private String getEntityPath(String partitionId) {\n             : String.format(Locale.US, SENDER_ENTITY_PATH_FORMAT, eventHubName, partitionId);\n     }\n \n+    private Mono<AmqpSendLink> updatePublishingState(String partitionId, AmqpSendLink amqpSendLink) {\n+        if (this.isIdempotentPartitionPublishing) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b596e144103b80cd65aa3ab7cc3139b019781b4f"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxNTE3NQ==", "bodyText": "Same with other usages of this", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r490515175", "createdAt": "2020-09-17T19:38:03Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -502,12 +617,69 @@ private String getEntityPath(String partitionId) {\n             : String.format(Locale.US, SENDER_ENTITY_PATH_FORMAT, eventHubName, partitionId);\n     }\n \n+    private Mono<AmqpSendLink> updatePublishingState(String partitionId, AmqpSendLink amqpSendLink) {\n+        if (this.isIdempotentPartitionPublishing) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxNTEwMg=="}, "originalCommit": {"oid": "b596e144103b80cd65aa3ab7cc3139b019781b4f"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxNTQyNg==", "bodyText": "@srnagar I'm torn on using a semaphore for this. thoughts?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r490515426", "createdAt": "2020-09-17T19:38:30Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -447,18 +514,65 @@ public String getEventHubName() {\n             // Start send span and store updated context\n             parentContext.set(tracerProvider.startSpan(finalSharedContext, ProcessKind.SEND));\n         }\n-\n-        return withRetry(getSendLink(batch.getPartitionId())\n-            .flatMap(link ->\n-                messages.size() == 1\n+        if (isIdempotentPartitionPublishing) {\n+            PartitionPublishingState publishingState = this.getClientPartitionPublishingState(batch.getPartitionId());\n+            return Mono.fromRunnable(() -> {\n+                publishingState.getSemaphore().acquireUninterruptibly();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b596e144103b80cd65aa3ab7cc3139b019781b4f"}, "originalPosition": 182}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e4f920e7527e9ea183ba597eaa77bc0b26bc19a", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8e4f920e7527e9ea183ba597eaa77bc0b26bc19a", "committedDate": "2020-09-18T00:01:30Z", "message": "Fix review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyODA0MDI1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#pullrequestreview-492804025", "createdAt": "2020-09-21T16:51:14Z", "commit": {"oid": "8e4f920e7527e9ea183ba597eaa77bc0b26bc19a"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNjo1MToxNFrOHVZ6Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzowMjozNVrOHVaT4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwNjYyNg==", "bodyText": "You're doing this assignment in each iteration of the for loop?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r492206626", "createdAt": "2020-09-21T16:51:14Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubClientBuilder.java", "diffHunk": "@@ -372,6 +379,54 @@ public EventHubClientBuilder prefetchCount(int prefetchCount) {\n         return this;\n     }\n \n+    /**\n+     * Enables idempotent publishing when an {@link EventHubProducerAsyncClient} or {@link EventHubProducerClient}\n+     * is built.\n+     *\n+     * If enabled, the producer will only be able to publish directly to partitions; it will not be able to publish to\n+     * the Event Hubs gateway for automatic partition routing nor using a partition key.\n+     *\n+     * @return The updated {@link EventHubClientBuilder} object.\n+     */\n+    public EventHubClientBuilder enableIdempotentPartitionPublishing() {\n+        this.isIdempotentPartitionPublishing = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the idempotent publishing options to {@link EventHubProducerAsyncClient} or {@link EventHubProducerClient}\n+     * when you build them.\n+     *\n+     * The set of options that can be specified to influence publishing behavior specific to the configured Event Hub\n+     * partition.\n+     * These options are not necessary in the majority of scenarios and are intended for use with specialized scenarios,\n+     * such as when recovering the state used for idempotent publishing.\n+     *\n+     * It is highly recommended that these options only be specified if there is a proven need to do so; Incorrectly\n+     * configuring these values may result in the built {@link EventHubProducerAsyncClient} or\n+     * {@link EventHubProducerClient} instance unable to publish to the Event Hubs.\n+     *\n+     * These options are ignored when publishing to the Event Hubs gateway for automatic routing or when using a\n+     * partition key.\n+     *\n+     * @param states A {@link Map} of {@link PartitionPublishingProperties} for each partition. The keys of the map\n+     * are the partition ids.\n+     * @return The updated {@link EventHubClientBuilder} object.\n+     */\n+    public EventHubClientBuilder initialPartitionPublishingStates(Map<String, PartitionPublishingProperties> states) {\n+        if (states != null) {\n+            this.initialPartitionPublishingStates = new HashMap<>();\n+            states.forEach((partitionId, state) -> {\n+                this.initialPartitionPublishingStates.put(partitionId, new PartitionPublishingState(state));\n+                this.initialPartitionPublishingStates =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e4f920e7527e9ea183ba597eaa77bc0b26bc19a"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwODkzNg==", "bodyText": "Do we need inSysProperties in these? It's an implementation detail. I just want to set the producer group, sequence number, etc on an Event Data, it doesn't matter to me where it is stored.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r492208936", "createdAt": "2020-09-21T16:55:10Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -447,18 +512,65 @@ public String getEventHubName() {\n             // Start send span and store updated context\n             parentContext.set(tracerProvider.startSpan(finalSharedContext, ProcessKind.SEND));\n         }\n-\n-        return withRetry(getSendLink(batch.getPartitionId())\n-            .flatMap(link ->\n-                messages.size() == 1\n+        if (isIdempotentPartitionPublishing) {\n+            PartitionPublishingState publishingState = getClientPartitionPublishingState(batch.getPartitionId());\n+            return Mono.fromRunnable(() -> {\n+                publishingState.getSemaphore().acquireUninterruptibly();\n+                int seqNumber = publishingState.getSequenceNumber();\n+                for (EventData eventData : batch.getEvents()) {\n+                    eventData.setProducerGroupIdInSysProperties(publishingState.getProducerGroupId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e4f920e7527e9ea183ba597eaa77bc0b26bc19a"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxMTE5NQ==", "bodyText": "Do we need this class? I'm not fond of having utility classes unless it's constantly used by multiple classes. In this case, we are only incrementing by one.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r492211195", "createdAt": "2020-09-21T16:59:10Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/PartitionPublishingUtils.java", "diffHunk": "@@ -0,0 +1,32 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.eventhubs.implementation;\n+\n+/**\n+ * A util class for idempotent producer partition publishing.\n+ */\n+public class PartitionPublishingUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e4f920e7527e9ea183ba597eaa77bc0b26bc19a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxMTQwMQ==", "bodyText": "IIRC, we already have a constants class. Can we put them in there?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r492211401", "createdAt": "2020-09-21T16:59:33Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/SymbolConstants.java", "diffHunk": "@@ -0,0 +1,22 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.eventhubs.implementation;\n+\n+import com.azure.core.amqp.AmqpMessageConstant;\n+import org.apache.qpid.proton.amqp.Symbol;\n+\n+import static com.azure.core.amqp.implementation.AmqpConstants.VENDOR;\n+\n+public final class SymbolConstants {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e4f920e7527e9ea183ba597eaa77bc0b26bc19a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxMTg4OA==", "bodyText": "private?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r492211888", "createdAt": "2020-09-21T17:00:14Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClientIdempotentTest.java", "diffHunk": "@@ -0,0 +1,321 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.*;\n+import com.azure.core.amqp.implementation.*;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.messaging.eventhubs.implementation.ClientConstants;\n+import com.azure.messaging.eventhubs.implementation.EventHubAmqpConnection;\n+import com.azure.messaging.eventhubs.implementation.EventHubConnectionProcessor;\n+import com.azure.messaging.eventhubs.implementation.PartitionPublishingState;\n+import com.azure.messaging.eventhubs.models.CreateBatchOptions;\n+import com.azure.messaging.eventhubs.models.SendOptions;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.apache.qpid.proton.message.Message;\n+import org.junit.jupiter.api.*;\n+import org.mockito.*;\n+import reactor.core.publisher.DirectProcessor;\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Scheduler;\n+import reactor.core.scheduler.Schedulers;\n+import reactor.test.StepVerifier;\n+\n+import java.time.Duration;\n+import java.util.*;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.ArgumentMatchers.*;\n+import static org.mockito.Mockito.*;\n+\n+class EventHubProducerAsyncClientIdempotentTest {\n+    private static final String HOSTNAME = \"something.servicebus.windows.net\";\n+    private static final String EVENT_HUB_NAME = \"anEventHub\";\n+    private static final String PARTITION_0 = \"0\";\n+    private static final String PARTITION_1 = \"1\";\n+    private static final String ENTITY_PATH_0 = EVENT_HUB_NAME + \"/Partitions/\" + PARTITION_0;\n+    private static final String ENTITY_PATH_1 = EVENT_HUB_NAME + \"/Partitions/\" + PARTITION_1;\n+    private static final String TEST_CONNECTION_STRING = \"Endpoint=sb://something.servicebus.windows.net/;\"\n+        + \"SharedAccessKeyName=anAccessKeyName;\"\n+        + \"SharedAccessKey=anAccessKey;EntityPath=anEventHub\";\n+\n+    private static final Long PRODUCER_GROUP_ID = 1L;\n+    private static final Short PRODUCER_OWNER_LEVEL = (short) 10;\n+    private static final Integer PRODUCER_SEQ_NUMBER = 100;\n+\n+    @Mock\n+    private AmqpSendLink sendLink;\n+\n+    @Mock\n+    private AmqpSendLink sendLink2;\n+\n+    @Mock\n+    private EventHubAmqpConnection connection;\n+\n+    @Mock\n+    private TokenCredential tokenCredential;\n+    @Mock\n+    private Runnable onClientClosed;\n+\n+    private final MessageSerializer messageSerializer = new EventHubMessageSerializer();\n+    private final AmqpRetryOptions retryOptions = new AmqpRetryOptions()\n+        .setDelay(Duration.ofMillis(500))\n+        .setMode(AmqpRetryMode.FIXED)\n+        .setTryTimeout(Duration.ofSeconds(5))\n+        .setMaxRetries(2);\n+    private final DirectProcessor<AmqpEndpointState> endpointProcessor = DirectProcessor.create();\n+    private final FluxSink<AmqpEndpointState> endpointSink = endpointProcessor.sink(FluxSink.OverflowStrategy.BUFFER);\n+    private EventHubProducerAsyncClient producer;\n+    private EventHubConnectionProcessor connectionProcessor;\n+    private TracerProvider tracerProvider;\n+    private ConnectionOptions connectionOptions;\n+    private final Scheduler testScheduler = Schedulers.newElastic(\"test\");\n+\n+    PartitionPublishingProperties p0InitialState;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e4f920e7527e9ea183ba597eaa77bc0b26bc19a"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxMTk1Ng==", "bodyText": "Why p0?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r492211956", "createdAt": "2020-09-21T17:00:20Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClientIdempotentTest.java", "diffHunk": "@@ -0,0 +1,321 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.*;\n+import com.azure.core.amqp.implementation.*;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.messaging.eventhubs.implementation.ClientConstants;\n+import com.azure.messaging.eventhubs.implementation.EventHubAmqpConnection;\n+import com.azure.messaging.eventhubs.implementation.EventHubConnectionProcessor;\n+import com.azure.messaging.eventhubs.implementation.PartitionPublishingState;\n+import com.azure.messaging.eventhubs.models.CreateBatchOptions;\n+import com.azure.messaging.eventhubs.models.SendOptions;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.apache.qpid.proton.message.Message;\n+import org.junit.jupiter.api.*;\n+import org.mockito.*;\n+import reactor.core.publisher.DirectProcessor;\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Scheduler;\n+import reactor.core.scheduler.Schedulers;\n+import reactor.test.StepVerifier;\n+\n+import java.time.Duration;\n+import java.util.*;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.ArgumentMatchers.*;\n+import static org.mockito.Mockito.*;\n+\n+class EventHubProducerAsyncClientIdempotentTest {\n+    private static final String HOSTNAME = \"something.servicebus.windows.net\";\n+    private static final String EVENT_HUB_NAME = \"anEventHub\";\n+    private static final String PARTITION_0 = \"0\";\n+    private static final String PARTITION_1 = \"1\";\n+    private static final String ENTITY_PATH_0 = EVENT_HUB_NAME + \"/Partitions/\" + PARTITION_0;\n+    private static final String ENTITY_PATH_1 = EVENT_HUB_NAME + \"/Partitions/\" + PARTITION_1;\n+    private static final String TEST_CONNECTION_STRING = \"Endpoint=sb://something.servicebus.windows.net/;\"\n+        + \"SharedAccessKeyName=anAccessKeyName;\"\n+        + \"SharedAccessKey=anAccessKey;EntityPath=anEventHub\";\n+\n+    private static final Long PRODUCER_GROUP_ID = 1L;\n+    private static final Short PRODUCER_OWNER_LEVEL = (short) 10;\n+    private static final Integer PRODUCER_SEQ_NUMBER = 100;\n+\n+    @Mock\n+    private AmqpSendLink sendLink;\n+\n+    @Mock\n+    private AmqpSendLink sendLink2;\n+\n+    @Mock\n+    private EventHubAmqpConnection connection;\n+\n+    @Mock\n+    private TokenCredential tokenCredential;\n+    @Mock\n+    private Runnable onClientClosed;\n+\n+    private final MessageSerializer messageSerializer = new EventHubMessageSerializer();\n+    private final AmqpRetryOptions retryOptions = new AmqpRetryOptions()\n+        .setDelay(Duration.ofMillis(500))\n+        .setMode(AmqpRetryMode.FIXED)\n+        .setTryTimeout(Duration.ofSeconds(5))\n+        .setMaxRetries(2);\n+    private final DirectProcessor<AmqpEndpointState> endpointProcessor = DirectProcessor.create();\n+    private final FluxSink<AmqpEndpointState> endpointSink = endpointProcessor.sink(FluxSink.OverflowStrategy.BUFFER);\n+    private EventHubProducerAsyncClient producer;\n+    private EventHubConnectionProcessor connectionProcessor;\n+    private TracerProvider tracerProvider;\n+    private ConnectionOptions connectionOptions;\n+    private final Scheduler testScheduler = Schedulers.newElastic(\"test\");\n+\n+    PartitionPublishingProperties p0InitialState;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxMTg4OA=="}, "originalCommit": {"oid": "8e4f920e7527e9ea183ba597eaa77bc0b26bc19a"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxMjM1NQ==", "bodyText": "Is there a test where we try a failure and it increments the count?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r492212355", "createdAt": "2020-09-21T17:00:59Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClientIdempotentTest.java", "diffHunk": "@@ -0,0 +1,321 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.*;\n+import com.azure.core.amqp.implementation.*;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.messaging.eventhubs.implementation.ClientConstants;\n+import com.azure.messaging.eventhubs.implementation.EventHubAmqpConnection;\n+import com.azure.messaging.eventhubs.implementation.EventHubConnectionProcessor;\n+import com.azure.messaging.eventhubs.implementation.PartitionPublishingState;\n+import com.azure.messaging.eventhubs.models.CreateBatchOptions;\n+import com.azure.messaging.eventhubs.models.SendOptions;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.apache.qpid.proton.message.Message;\n+import org.junit.jupiter.api.*;\n+import org.mockito.*;\n+import reactor.core.publisher.DirectProcessor;\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Scheduler;\n+import reactor.core.scheduler.Schedulers;\n+import reactor.test.StepVerifier;\n+\n+import java.time.Duration;\n+import java.util.*;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.ArgumentMatchers.*;\n+import static org.mockito.Mockito.*;\n+\n+class EventHubProducerAsyncClientIdempotentTest {\n+    private static final String HOSTNAME = \"something.servicebus.windows.net\";\n+    private static final String EVENT_HUB_NAME = \"anEventHub\";\n+    private static final String PARTITION_0 = \"0\";\n+    private static final String PARTITION_1 = \"1\";\n+    private static final String ENTITY_PATH_0 = EVENT_HUB_NAME + \"/Partitions/\" + PARTITION_0;\n+    private static final String ENTITY_PATH_1 = EVENT_HUB_NAME + \"/Partitions/\" + PARTITION_1;\n+    private static final String TEST_CONNECTION_STRING = \"Endpoint=sb://something.servicebus.windows.net/;\"\n+        + \"SharedAccessKeyName=anAccessKeyName;\"\n+        + \"SharedAccessKey=anAccessKey;EntityPath=anEventHub\";\n+\n+    private static final Long PRODUCER_GROUP_ID = 1L;\n+    private static final Short PRODUCER_OWNER_LEVEL = (short) 10;\n+    private static final Integer PRODUCER_SEQ_NUMBER = 100;\n+\n+    @Mock\n+    private AmqpSendLink sendLink;\n+\n+    @Mock\n+    private AmqpSendLink sendLink2;\n+\n+    @Mock\n+    private EventHubAmqpConnection connection;\n+\n+    @Mock\n+    private TokenCredential tokenCredential;\n+    @Mock\n+    private Runnable onClientClosed;\n+\n+    private final MessageSerializer messageSerializer = new EventHubMessageSerializer();\n+    private final AmqpRetryOptions retryOptions = new AmqpRetryOptions()\n+        .setDelay(Duration.ofMillis(500))\n+        .setMode(AmqpRetryMode.FIXED)\n+        .setTryTimeout(Duration.ofSeconds(5))\n+        .setMaxRetries(2);\n+    private final DirectProcessor<AmqpEndpointState> endpointProcessor = DirectProcessor.create();\n+    private final FluxSink<AmqpEndpointState> endpointSink = endpointProcessor.sink(FluxSink.OverflowStrategy.BUFFER);\n+    private EventHubProducerAsyncClient producer;\n+    private EventHubConnectionProcessor connectionProcessor;\n+    private TracerProvider tracerProvider;\n+    private ConnectionOptions connectionOptions;\n+    private final Scheduler testScheduler = Schedulers.newElastic(\"test\");\n+\n+    PartitionPublishingProperties p0InitialState;\n+    Map<String, PartitionPublishingProperties> initialStates = new HashMap<>();\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        StepVerifier.setDefaultTimeout(Duration.ofSeconds(30));\n+    }\n+\n+    @AfterAll\n+    static void afterAll() {\n+        StepVerifier.resetDefaultTimeout();\n+    }\n+\n+    @BeforeEach\n+    void setup(TestInfo testInfo) {\n+        MockitoAnnotations.initMocks(this);\n+\n+        tracerProvider = new TracerProvider(Collections.emptyList());\n+        connectionOptions = new ConnectionOptions(HOSTNAME, tokenCredential,\n+            CbsAuthorizationType.SHARED_ACCESS_SIGNATURE, AmqpTransportType.AMQP_WEB_SOCKETS, retryOptions,\n+            ProxyOptions.SYSTEM_DEFAULTS, testScheduler);\n+\n+        when(connection.getEndpointStates()).thenReturn(endpointProcessor);\n+        endpointSink.next(AmqpEndpointState.ACTIVE);\n+\n+        connectionProcessor = Mono.fromCallable(() -> connection).repeat(10).subscribeWith(\n+            new EventHubConnectionProcessor(connectionOptions.getFullyQualifiedNamespace(),\n+                EVENT_HUB_NAME, connectionOptions.getRetry()));\n+\n+        p0InitialState = new PartitionPublishingProperties(PRODUCER_GROUP_ID, PRODUCER_OWNER_LEVEL, PRODUCER_SEQ_NUMBER);\n+        initialStates = new HashMap<>();\n+        initialStates.put(PARTITION_0, p0InitialState);\n+\n+        Map<String, PartitionPublishingState> internalStates = new HashMap<>();\n+        initialStates.forEach((k, v) -> internalStates.put(k, new PartitionPublishingState(v)));\n+        producer = new EventHubProducerAsyncClient(HOSTNAME, EVENT_HUB_NAME, connectionProcessor, retryOptions,\n+            tracerProvider, messageSerializer, testScheduler, false, onClientClosed,\n+            true, internalStates);\n+\n+        Map<Symbol, Object> remoteProperties = new HashMap<>();\n+        remoteProperties.put(\n+            Symbol.getSymbol(AmqpMessageConstant.PRODUCER_EPOCH_ANNOTATION_NAME.getValue()),\n+            p0InitialState.getOwnerLevel());\n+        remoteProperties.put(\n+            Symbol.getSymbol(AmqpMessageConstant.PRODUCER_SEQUENCE_NUMBER_ANNOTATION_NAME.getValue()),\n+            p0InitialState.getSequenceNumber());\n+        remoteProperties.put(\n+            Symbol.getSymbol(AmqpMessageConstant.PRODUCER_ID_ANNOTATION_NAME.getValue()),\n+            p0InitialState.getProducerGroupId());\n+\n+        when(connection.createSendLink(eq(ENTITY_PATH_0), eq(ENTITY_PATH_0),\n+            eq(retryOptions), eq(true), any(PartitionPublishingState.class))).thenReturn(Mono.just(sendLink));\n+        when(sendLink.getRemoteProperties()).thenReturn(\n+            Mono.just(remoteProperties));\n+        when(sendLink.getLinkSize()).thenReturn(Mono.just(ClientConstants.MAX_MESSAGE_LENGTH_BYTES));\n+        when(sendLink.send(any(Message.class))).thenReturn(Mono.empty());\n+        when(sendLink.send(anyList())).thenReturn(Mono.empty());\n+    }\n+\n+    @AfterEach\n+    void teardown(TestInfo testInfo) {\n+        testScheduler.dispose();\n+        Mockito.framework().clearInlineMocks();\n+        Mockito.reset(sendLink, connection);\n+    }\n+\n+    @Test\n+    void buildClientIllegalArgument() {\n+        assertThrows(IllegalArgumentException.class, () -> new EventHubClientBuilder()\n+            .connectionString(TEST_CONNECTION_STRING)\n+            .initialPartitionPublishingStates(initialStates)  // Not an idempotent producer. Shouldn't set.\n+            .buildAsyncProducerClient());\n+    }\n+\n+    @Test\n+    void getPartitionPublishingProperties() {\n+        StepVerifier.create(producer.getPartitionPublishingProperties(PARTITION_0))\n+            .assertNext(properties -> {\n+                assertEquals(properties.getOwnerLevel(), p0InitialState.getOwnerLevel());\n+                assertEquals(properties.getProducerGroupId(), p0InitialState.getProducerGroupId());\n+                assertEquals(properties.getSequenceNumber(), p0InitialState.getSequenceNumber());\n+            })\n+            .verifyComplete();\n+    }\n+\n+    @Test\n+    void createEventDataBatch() {\n+        CreateBatchOptions options = new CreateBatchOptions();\n+        options.setPartitionId(PARTITION_0);\n+        StepVerifier.create(producer.createBatch(options))\n+            .assertNext(eventDataBatch -> {\n+                assertNull(eventDataBatch.getStartingPublishedSequenceNumber());\n+            })\n+            .verifyComplete();\n+    }\n+\n+    @Test\n+    void createBatchWithoutPartitionId() {\n+        StepVerifier.create(producer.createBatch())\n+            .expectError(IllegalArgumentException.class)\n+            .verify();\n+    }\n+\n+    @Test\n+    void sendEventDataBatch() {\n+        CreateBatchOptions options = new CreateBatchOptions();\n+        options.setPartitionId(PARTITION_0);\n+        EventDataBatch batch = producer.createBatch(options).block();\n+        assertNotNull(batch);\n+        EventData eventData = new EventData(\"This is a test event\");\n+        batch.tryAdd(eventData);\n+        StepVerifier.create(producer.send(batch)).verifyComplete();\n+        assertEquals(eventData.getSystemProperties().get(AmqpMessageConstant.PRODUCER_ID_ANNOTATION_NAME.getValue()),\n+            PRODUCER_GROUP_ID);\n+        assertEquals(eventData.getSystemProperties().get(AmqpMessageConstant.PRODUCER_EPOCH_ANNOTATION_NAME.getValue()),\n+            PRODUCER_OWNER_LEVEL);\n+        assertEquals(eventData.getSystemProperties().get(\n+            AmqpMessageConstant.PRODUCER_SEQUENCE_NUMBER_ANNOTATION_NAME.getValue()),\n+            PRODUCER_SEQ_NUMBER);\n+        assertEquals(batch.getStartingPublishedSequenceNumber(), PRODUCER_SEQ_NUMBER);\n+\n+        StepVerifier.create(producer.getPartitionPublishingState(PARTITION_0))\n+            .assertNext(state -> {\n+                assertEquals(state.getSequenceNumber(), PRODUCER_SEQ_NUMBER + batch.getCount());\n+            }).verifyComplete();\n+    }\n+\n+    @Test\n+    void sendEventList() {\n+        EventData eventData = new EventData(\"This is a test event\");\n+        List<EventData> eventDataList = new ArrayList<>();\n+        eventDataList.add(eventData);\n+        StepVerifier.create(producer.send(eventDataList, new SendOptions().setPartitionId(PARTITION_0))).verifyComplete();\n+        assertEquals(eventData.getSystemProperties().get(AmqpMessageConstant.PRODUCER_ID_ANNOTATION_NAME.getValue()),\n+            PRODUCER_GROUP_ID);\n+        assertEquals(eventData.getSystemProperties().get(AmqpMessageConstant.PRODUCER_EPOCH_ANNOTATION_NAME.getValue()),\n+            PRODUCER_OWNER_LEVEL);\n+        assertEquals(eventData.getSystemProperties().get(\n+            AmqpMessageConstant.PRODUCER_SEQUENCE_NUMBER_ANNOTATION_NAME.getValue()),\n+            PRODUCER_SEQ_NUMBER);\n+\n+        StepVerifier.create(producer.getPartitionPublishingState(PARTITION_0))\n+            .assertNext(state -> {\n+                assertEquals(state.getSequenceNumber(), PRODUCER_SEQ_NUMBER + eventDataList.size());\n+            }).verifyComplete();\n+    }\n+\n+    @Test\n+    void sendEventDataListWithoutPartition() {\n+        EventData eventData = new EventData(\"This is a test event\");\n+        List<EventData> eventDataList = new ArrayList<>();\n+        eventDataList.add(eventData);\n+        StepVerifier.create(producer.send(eventDataList)).verifyError(IllegalArgumentException.class);\n+    }\n+\n+    @Test\n+    void sendEventBatchesToSamePartitionConcurrently() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e4f920e7527e9ea183ba597eaa77bc0b26bc19a"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxMzIxNg==", "bodyText": "You need to update your intelliJ settings not to use star imports. This will fail checkstyles. I updated mine to 99.\n\n\n\nI am not a fan of this class... I don't see it providing enough value to warrant an entire utils class.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r492213216", "createdAt": "2020-09-21T17:02:35Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/test/java/com/azure/messaging/eventhubs/implementation/PartitionPublishigUtilsTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.eventhubs.implementation;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e4f920e7527e9ea183ba597eaa77bc0b26bc19a"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17a26dab053c154e13de99ed6c8c948a6f0ba7e8", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/17a26dab053c154e13de99ed6c8c948a6f0ba7e8", "committedDate": "2020-09-22T19:24:19Z", "message": "Update for code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d2b29de221702e3d514969777ed6fd317db7b17", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1d2b29de221702e3d514969777ed6fd317db7b17", "committedDate": "2020-09-22T19:32:57Z", "message": "Update for code review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzODEzNzc5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#pullrequestreview-493813779", "createdAt": "2020-09-22T20:18:03Z", "commit": {"oid": "1d2b29de221702e3d514969777ed6fd317db7b17"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDoxODowNFrOHWK0AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDozMTowMFrOHWLPTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwNzg3Mg==", "bodyText": "If it's a property of a client, then should it be on EventData?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r493007872", "createdAt": "2020-09-22T20:18:04Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventData.java", "diffHunk": "@@ -213,6 +219,80 @@ public Long getSequenceNumber() {\n         return systemProperties.getSequenceNumber();\n     }\n \n+    /**\n+     * Gets the producer sequence number that was assigned during publishing, if the event was successfully\n+     * published by a sequence-aware producer.  If the producer was not configured to apply\n+     * sequence numbering or if the event has not yet been successfully published, this member\n+     * will be {@code null}.\n+     *\n+     * The published sequence number is only populated and relevant when certain features\n+     * of the producer are enabled. For example, it is used by idempotent publishing.\n+     *\n+     * @return The publishing sequence number assigned to the event at the time it was successfully published.\n+     * {@code null} if the {@link EventData} hasn't been sent or it's sent without idempotent publishing enabled.\n+     */\n+    public Integer getPublishedSequenceNumber() {\n+        return publishedSequenceNumber;\n+    }\n+\n+    /**\n+     * Gets the producer group id that was assigned during publishing, if the event was successfully\n+     * published by a sequence-aware producer.  If the producer was not configured to apply\n+     * sequence numbering or if the event has not yet been successfully published, this member\n+     * will be {@code null}.\n+     *\n+     * The producer group id is only populated and relevant when certain features\n+     * of the producer are enabled. For example, it is used by idempotent publishing.\n+     *\n+     * @return The producer group id assigned to the event at the time it was successfully published.\n+     * {@code null} if the {@link EventData} hasn't been sent or it's sent without idempotent publishing enabled.\n+     */\n+    public Long getPublishedGroupId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTAyODY5OQ=="}, "originalCommit": {"oid": "7fc2cc4a505cbbecceba7bd35a62e867fa623d74"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwODk2NQ==", "bodyText": "Can this be package-private for now to send the message and if customers need this information, make it public?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r493008965", "createdAt": "2020-09-22T20:20:14Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventData.java", "diffHunk": "@@ -213,6 +219,80 @@ public Long getSequenceNumber() {\n         return systemProperties.getSequenceNumber();\n     }\n \n+    /**\n+     * Gets the producer sequence number that was assigned during publishing, if the event was successfully\n+     * published by a sequence-aware producer.  If the producer was not configured to apply\n+     * sequence numbering or if the event has not yet been successfully published, this member\n+     * will be {@code null}.\n+     *\n+     * The published sequence number is only populated and relevant when certain features\n+     * of the producer are enabled. For example, it is used by idempotent publishing.\n+     *\n+     * @return The publishing sequence number assigned to the event at the time it was successfully published.\n+     * {@code null} if the {@link EventData} hasn't been sent or it's sent without idempotent publishing enabled.\n+     */\n+    public Integer getPublishedSequenceNumber() {\n+        return publishedSequenceNumber;\n+    }\n+\n+    /**\n+     * Gets the producer group id that was assigned during publishing, if the event was successfully\n+     * published by a sequence-aware producer.  If the producer was not configured to apply\n+     * sequence numbering or if the event has not yet been successfully published, this member\n+     * will be {@code null}.\n+     *\n+     * The producer group id is only populated and relevant when certain features\n+     * of the producer are enabled. For example, it is used by idempotent publishing.\n+     *\n+     * @return The producer group id assigned to the event at the time it was successfully published.\n+     * {@code null} if the {@link EventData} hasn't been sent or it's sent without idempotent publishing enabled.\n+     */\n+    public Long getPublishedGroupId() {\n+        return publishedGroupId;\n+    }\n+\n+    /**\n+     * Gets the producer owner level that was assigned during publishing, if the event was successfully\n+     * published by a sequence-aware producer.  If the producer was not configured to apply\n+     * sequence numbering or if the event has not yet been successfully published, this member\n+     * will be {@code null}.\n+     *\n+     * The producer owner level is only populated and relevant when certain features\n+     * of the producer are enabled. For example, it is used by idempotent publishing.\n+     *\n+     * @return The producer owner level assigned to the event at the time it was successfully published.\n+     * {@code null} if the {@link EventData} hasn't been sent or it's sent without idempotent publishing enabled.\n+     */\n+    public Short getPublishedOwnerLevel() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTAyOTMwOA=="}, "originalCommit": {"oid": "7fc2cc4a505cbbecceba7bd35a62e867fa623d74"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxMzgzOA==", "bodyText": "The other option was to consider Reentrant lock but since the thread that acquires the lock may not be the same as the one that releases it, semaphore is the only option here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r493013838", "createdAt": "2020-09-22T20:29:07Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -447,18 +514,65 @@ public String getEventHubName() {\n             // Start send span and store updated context\n             parentContext.set(tracerProvider.startSpan(finalSharedContext, ProcessKind.SEND));\n         }\n-\n-        return withRetry(getSendLink(batch.getPartitionId())\n-            .flatMap(link ->\n-                messages.size() == 1\n+        if (isIdempotentPartitionPublishing) {\n+            PartitionPublishingState publishingState = this.getClientPartitionPublishingState(batch.getPartitionId());\n+            return Mono.fromRunnable(() -> {\n+                publishingState.getSemaphore().acquireUninterruptibly();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxNTQyNg=="}, "originalCommit": {"oid": "b596e144103b80cd65aa3ab7cc3139b019781b4f"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxNDg2Mg==", "bodyText": "Can we also include some integration tests for this - maybe as a separate PR?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#discussion_r493014862", "createdAt": "2020-09-22T20:31:00Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClientIdempotentTest.java", "diffHunk": "@@ -0,0 +1,383 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.AmqpEndpointState;\n+import com.azure.core.amqp.AmqpMessageConstant;\n+import com.azure.core.amqp.AmqpRetryMode;\n+import com.azure.core.amqp.AmqpRetryOptions;\n+import com.azure.core.amqp.AmqpTransportType;\n+import com.azure.core.amqp.ProxyOptions;\n+import com.azure.core.amqp.implementation.AmqpSendLink;\n+import com.azure.core.amqp.implementation.CbsAuthorizationType;\n+import com.azure.core.amqp.implementation.ConnectionOptions;\n+import com.azure.core.amqp.implementation.MessageSerializer;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.messaging.eventhubs.implementation.ClientConstants;\n+import com.azure.messaging.eventhubs.implementation.EventHubAmqpConnection;\n+import com.azure.messaging.eventhubs.implementation.EventHubConnectionProcessor;\n+import com.azure.messaging.eventhubs.implementation.PartitionPublishingState;\n+import com.azure.messaging.eventhubs.models.CreateBatchOptions;\n+import com.azure.messaging.eventhubs.models.SendOptions;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.apache.qpid.proton.message.Message;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import reactor.core.publisher.DirectProcessor;\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Scheduler;\n+import reactor.core.scheduler.Schedulers;\n+import reactor.test.StepVerifier;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.when;\n+\n+class EventHubProducerAsyncClientIdempotentTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d2b29de221702e3d514969777ed6fd317db7b17"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9871a35a6b159d0b4305f7da7a7f3483a40b4df", "author": {"user": {"login": "YijunXieMS", "name": "Yijun Xie"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c9871a35a6b159d0b4305f7da7a7f3483a40b4df", "committedDate": "2020-09-22T22:15:25Z", "message": "Hide EventData getPublishedGroupId and getPublishedOwnerLevel at package level"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0OTU1NTI4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14389#pullrequestreview-494955528", "createdAt": "2020-09-23T18:51:31Z", "commit": {"oid": "c9871a35a6b159d0b4305f7da7a7f3483a40b4df"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 222, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}