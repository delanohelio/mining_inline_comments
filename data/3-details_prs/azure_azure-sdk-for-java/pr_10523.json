{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MzUyMjc2", "number": 10523, "title": "Update receive batch API to provide option to get partition context", "bodyText": "This PR is to change the receive batch consumer to accept an EventBatchContext object instead of List<EventContext>. This change allows the receive batch consumer to get the partition context even when the batch is empty.\nPreviously, returning a list of EventContext would have required at least 1 event to be present in the batch for the user to know the partition context. A batch can be empty if the max wait time is set and there are no events received for that duration. When this happens, the processEventBatch handler is called with an empty list and the user will not be able to get the partition context. So, this change wraps the list of events in a context container that always guarantees the presence of partition context even when there are no events in the batch.\nhttps://apiview.dev/Assemblies/Review/c2a7c6bbfd9c433aa407740a72fb24ec?diffRevisionId=315a6ac83318411bb00b36dc31578c1f", "createdAt": "2020-04-27T08:57:21Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10523", "merged": true, "mergeCommit": {"oid": "04e431138652b2527d635f2129518b103d149a13"}, "closed": true, "closedAt": "2020-04-30T21:53:25Z", "author": {"login": "srnagar"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbqRRdgH2gAyNDA5MzUyMjc2OjMwOWZmZWFhZTIwZGRlODNjN2EyMDM3MDIwNTMyOWU2ODE2NDhkNjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccyry1gFqTQwMzgzNDcyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "309ffeaae20dde83c7a20370205329e681648d64", "author": {"user": {"login": "srnagar", "name": "Srikanta"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/309ffeaae20dde83c7a20370205329e681648d64", "committedDate": "2020-04-27T07:36:55Z", "message": "Update receive batch API to provide option to get partition context"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMTQ0MTIx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10523#pullrequestreview-401144121", "createdAt": "2020-04-27T16:55:22Z", "commit": {"oid": "309ffeaae20dde83c7a20370205329e681648d64"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjo1NToyM1rOGMtmmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjo1NToyM1rOGMtmmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk4MzI1OQ==", "bodyText": "I may have tapped out during this API review, but getEvents() seems less cumbersome than getEventDataList.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10523#discussion_r415983259", "createdAt": "2020-04-27T16:55:23Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/models/EventBatchContext.java", "diffHunk": "@@ -0,0 +1,108 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.eventhubs.models;\n+\n+import com.azure.messaging.eventhubs.CheckpointStore;\n+import com.azure.messaging.eventhubs.EventData;\n+import com.azure.messaging.eventhubs.EventProcessorClientBuilder;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * A class that contains a batch of {@link EventData} and the partition information the event batch belongs to. This is\n+ * given to the {@link EventProcessorClientBuilder#processEventBatch(Consumer, int)}  processEventBatch} handler each\n+ * time an event batch is received from the Event Hub. This class also includes methods to update checkpoint in\n+ * {@link CheckpointStore} and retrieve the last enqueued event information.\n+ */\n+public class EventBatchContext {\n+\n+    private final PartitionContext partitionContext;\n+    private final List<EventData> eventDataList;\n+    private final CheckpointStore checkpointStore;\n+    private final LastEnqueuedEventProperties lastEnqueuedEventProperties;\n+\n+    /**\n+     * Creates an instance of {@link EventContext}.\n+     *\n+     * @param partitionContext The partition information associated with the received event.\n+     * @param eventDataList The list of events received from Event Hub.\n+     * @param checkpointStore The checkpoint store that is used for updating checkpoints.\n+     * @param lastEnqueuedEventProperties The properties of the last enqueued event in this partition. If {@link\n+     * EventProcessorClientBuilder#trackLastEnqueuedEventProperties(boolean)} is set to {@code false}, this will be\n+     * {@code null}.\n+     * @throws NullPointerException If {@code partitionContext}, {@code eventData} or {@code checkpointStore} is null.\n+     */\n+    public EventBatchContext(PartitionContext partitionContext, List<EventData> eventDataList,\n+        CheckpointStore checkpointStore, LastEnqueuedEventProperties lastEnqueuedEventProperties) {\n+        this.checkpointStore = checkpointStore;\n+        this.eventDataList = eventDataList;\n+        this.lastEnqueuedEventProperties = lastEnqueuedEventProperties;\n+        this.partitionContext = partitionContext;\n+    }\n+\n+    /**\n+     * Returns the partition information associated with the received event.\n+     *\n+     * @return The partition information of the received event.\n+     */\n+    public PartitionContext getPartitionContext() {\n+        return partitionContext;\n+    }\n+\n+    /**\n+     * Returns a list of event data received from Event Hub.\n+     *\n+     * @return The list of event data received from Event Hub.\n+     */\n+    public List<EventData> getEventDataList() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "309ffeaae20dde83c7a20370205329e681648d64"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNDc2ODgx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10523#pullrequestreview-401476881", "createdAt": "2020-04-28T03:44:54Z", "commit": {"oid": "309ffeaae20dde83c7a20370205329e681648d64"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzo0NDo1NFrOGNBNgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzo0Njo1N1rOGNBQJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMwNDUxNA==", "bodyText": "The default behavior mentioned in the JavaDoc does not match the code?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10523#discussion_r416304514", "createdAt": "2020-04-28T03:44:54Z", "author": {"login": "JonathanGiles"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/PartitionProcessor.java", "diffHunk": "@@ -45,15 +45,20 @@ public void initialize(InitializationContext initializationContext) {\n     }\n \n     /**\n-     * This method is called when a new event is received for this partition. Processing of this event can happen\n-     * asynchronously.\n+     * This method is called when a new event is received for this partition.\n      *\n      * @param eventContext The partition information and the next event data from this partition.\n      */\n     public abstract void processEvent(EventContext eventContext);\n \n-    public void processEventBatch(List<EventContext> eventContextBatch) {\n-        eventContextBatch.forEach(this::processEvent);\n+    /**\n+     * This method is called when a batch of events is received for this partition. The default behavior will be to\n+     * forward the individual events in this batch to {@link #processEvent(EventContext)}.\n+     *\n+     * @param eventBatchContext The event batch context containing the batch of events along with partition information.\n+     */\n+    public void processEventBatch(EventBatchContext eventBatchContext) {\n+        throw logger.logExceptionAsError(new UnsupportedOperationException(\"Processing event batch not implemented\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "309ffeaae20dde83c7a20370205329e681648d64"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMwNDkwMA==", "bodyText": "You have a curly brace mismatch here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10523#discussion_r416304900", "createdAt": "2020-04-28T03:46:06Z", "author": {"login": "JonathanGiles"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/models/EventBatchContext.java", "diffHunk": "@@ -0,0 +1,108 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.eventhubs.models;\n+\n+import com.azure.messaging.eventhubs.CheckpointStore;\n+import com.azure.messaging.eventhubs.EventData;\n+import com.azure.messaging.eventhubs.EventProcessorClientBuilder;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * A class that contains a batch of {@link EventData} and the partition information the event batch belongs to. This is\n+ * given to the {@link EventProcessorClientBuilder#processEventBatch(Consumer, int)}  processEventBatch} handler each", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "309ffeaae20dde83c7a20370205329e681648d64"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMwNTE4OA==", "bodyText": "I agree", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10523#discussion_r416305188", "createdAt": "2020-04-28T03:46:57Z", "author": {"login": "JonathanGiles"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/models/EventBatchContext.java", "diffHunk": "@@ -0,0 +1,108 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.eventhubs.models;\n+\n+import com.azure.messaging.eventhubs.CheckpointStore;\n+import com.azure.messaging.eventhubs.EventData;\n+import com.azure.messaging.eventhubs.EventProcessorClientBuilder;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * A class that contains a batch of {@link EventData} and the partition information the event batch belongs to. This is\n+ * given to the {@link EventProcessorClientBuilder#processEventBatch(Consumer, int)}  processEventBatch} handler each\n+ * time an event batch is received from the Event Hub. This class also includes methods to update checkpoint in\n+ * {@link CheckpointStore} and retrieve the last enqueued event information.\n+ */\n+public class EventBatchContext {\n+\n+    private final PartitionContext partitionContext;\n+    private final List<EventData> eventDataList;\n+    private final CheckpointStore checkpointStore;\n+    private final LastEnqueuedEventProperties lastEnqueuedEventProperties;\n+\n+    /**\n+     * Creates an instance of {@link EventContext}.\n+     *\n+     * @param partitionContext The partition information associated with the received event.\n+     * @param eventDataList The list of events received from Event Hub.\n+     * @param checkpointStore The checkpoint store that is used for updating checkpoints.\n+     * @param lastEnqueuedEventProperties The properties of the last enqueued event in this partition. If {@link\n+     * EventProcessorClientBuilder#trackLastEnqueuedEventProperties(boolean)} is set to {@code false}, this will be\n+     * {@code null}.\n+     * @throws NullPointerException If {@code partitionContext}, {@code eventData} or {@code checkpointStore} is null.\n+     */\n+    public EventBatchContext(PartitionContext partitionContext, List<EventData> eventDataList,\n+        CheckpointStore checkpointStore, LastEnqueuedEventProperties lastEnqueuedEventProperties) {\n+        this.checkpointStore = checkpointStore;\n+        this.eventDataList = eventDataList;\n+        this.lastEnqueuedEventProperties = lastEnqueuedEventProperties;\n+        this.partitionContext = partitionContext;\n+    }\n+\n+    /**\n+     * Returns the partition information associated with the received event.\n+     *\n+     * @return The partition information of the received event.\n+     */\n+    public PartitionContext getPartitionContext() {\n+        return partitionContext;\n+    }\n+\n+    /**\n+     * Returns a list of event data received from Event Hub.\n+     *\n+     * @return The list of event data received from Event Hub.\n+     */\n+    public List<EventData> getEventDataList() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk4MzI1OQ=="}, "originalCommit": {"oid": "309ffeaae20dde83c7a20370205329e681648d64"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e37906a482d96df11d38aa2cd916b23f78f8b32", "author": {"user": {"login": "srnagar", "name": "Srikanta"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1e37906a482d96df11d38aa2cd916b23f78f8b32", "committedDate": "2020-04-28T09:01:04Z", "message": "Address PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODM0NzIy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10523#pullrequestreview-403834722", "createdAt": "2020-04-30T19:59:03Z", "commit": {"oid": "1e37906a482d96df11d38aa2cd916b23f78f8b32"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4597, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}