{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwNTg0NTU2", "number": 13697, "reviewThreads": {"totalCount": 73, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzoyNDoxNFrOEbq7vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMDoxMjozNVrOEkSDcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDUwNDI5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzoyNDoxNFrOHFvHaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzoyNDoxNFrOHFvHaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc3Njg3NQ==", "bodyText": "Since Event Hubs depends on implementation classes in azure-core-amqp. This will break it. Have you checked to make sure it works there?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r475776875", "createdAt": "2020-08-24T17:24:14Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/pom.xml", "diffHunk": "@@ -58,7 +58,7 @@\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-core</artifactId>\n-      <version>1.8.0-beta.1</version> <!-- {x-version-update;com.azure:azure-core;current} -->\n+      <version>1.8.0-beta.1</version> <!-- {x-version-update;unreleased_com.azure:azure-core;current} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09aff0dfbb4222bd34eea63f761bc30c8e39f3be"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDUwNTg3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ReactorHandlerProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzoyNDo0NVrOHFvIdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzoyNDo0NVrOHFvIdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc3NzE0Mw==", "bodyText": "What about for web sockets? We still want the applicationId to apply.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r475777143", "createdAt": "2020-08-24T17:24:45Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ReactorHandlerProvider.java", "diffHunk": "@@ -43,13 +43,15 @@ public ReactorHandlerProvider(ReactorProvider provider) {\n      * @param proxyOptions The options to use for proxy.\n      * @param product The name of the product this connection handler is created for.\n      * @param clientVersion The version of the client library creating the connection handler.\n+     * @param applicationId applicationId to be used in user agent while making connection.\n      * @return A new {@link ConnectionHandler}.\n      */\n     public ConnectionHandler createConnectionHandler(String connectionId, String hostname,\n-            AmqpTransportType transportType, ProxyOptions proxyOptions, String product, String clientVersion) {\n+            AmqpTransportType transportType, ProxyOptions proxyOptions, String product, String clientVersion,\n+            String applicationId) {\n         switch (transportType) {\n             case AMQP:\n-                return new ConnectionHandler(connectionId, hostname, product, clientVersion);\n+                return new ConnectionHandler(connectionId, hostname, product, clientVersion, applicationId);\n             case AMQP_WEB_SOCKETS:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09aff0dfbb4222bd34eea63f761bc30c8e39f3be"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDUwNzE1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/handler/WebSocketsConnectionHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzoyNTowM1rOHFvJLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzoyNTowM1rOHFvJLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc3NzMyNw==", "bodyText": "We still want the applicationId to apply.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r475777327", "createdAt": "2020-08-24T17:25:03Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/handler/WebSocketsConnectionHandler.java", "diffHunk": "@@ -32,7 +32,7 @@\n      */\n     public WebSocketsConnectionHandler(final String connectionId, final String hostname, final String product,\n         final String clientVersion) {\n-        super(connectionId, hostname, product, clientVersion);\n+        super(connectionId, hostname, product, clientVersion, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09aff0dfbb4222bd34eea63f761bc30c8e39f3be"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjE3MzQzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo0MjowM1rOHF_pbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo0MjowM1rOHF_pbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA0NzcyNg==", "bodyText": "This should not be in root package. Consider moving this to com.azure.core.utils where we have Context and Configuration types.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r476047726", "createdAt": "2020-08-25T01:42:03Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/ClientOptions.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09aff0dfbb4222bd34eea63f761bc30c8e39f3be"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjE3Mzk1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo0MjoxMVrOHF_pyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo0MjoxMVrOHF_pyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA0NzgxOQ==", "bodyText": "Make this final.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r476047819", "createdAt": "2020-08-25T01:42:11Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/ClientOptions.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core;\n+\n+/**\n+ * Client Options for setting common properties for example applicationId, contentType. Most of these properties are\n+ * applied on request being send to Azure Service but some could be used for other purpose also for example\n+ * applicationId is also used for telemetry.\n+ */\n+public class ClientOptions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09aff0dfbb4222bd34eea63f761bc30c8e39f3be"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjE3NTA5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo0MjozMFrOHF_qhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo0MjozMFrOHF_qhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA0ODAwNw==", "bodyText": "Add more details to the javadoc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r476048007", "createdAt": "2020-08-25T01:42:30Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/ClientOptions.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core;\n+\n+/**\n+ * Client Options for setting common properties for example applicationId, contentType. Most of these properties are\n+ * applied on request being send to Azure Service but some could be used for other purpose also for example\n+ * applicationId is also used for telemetry.\n+ */\n+public class ClientOptions {\n+    private String applicationId;\n+    private String contentType;\n+\n+    /**\n+     * applicationId", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09aff0dfbb4222bd34eea63f761bc30c8e39f3be"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjE3NzA0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo0Mjo1NlrOHF_rqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo0Mjo1NlrOHF_rqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA0ODI5Ng==", "bodyText": "Add @fluent annotation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r476048296", "createdAt": "2020-08-25T01:42:56Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/ClientOptions.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core;\n+\n+/**\n+ * Client Options for setting common properties for example applicationId, contentType. Most of these properties are\n+ * applied on request being send to Azure Service but some could be used for other purpose also for example\n+ * applicationId is also used for telemetry.\n+ */\n+public class ClientOptions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09aff0dfbb4222bd34eea63f761bc30c8e39f3be"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjE3NzgxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo0MzowN1rOHF_sMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo0MzowN1rOHF_sMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA0ODQzNA==", "bodyText": "Fix javadoc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r476048434", "createdAt": "2020-08-25T01:43:07Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/ClientOptions.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core;\n+\n+/**\n+ * Client Options for setting common properties for example applicationId, contentType. Most of these properties are\n+ * applied on request being send to Azure Service but some could be used for other purpose also for example\n+ * applicationId is also used for telemetry.\n+ */\n+public class ClientOptions {\n+    private String applicationId;\n+    private String contentType;\n+\n+    /**\n+     * applicationId\n+     * @return applicationId\n+     */\n+    public String getApplicationId() {\n+        return applicationId;\n+    }\n+\n+    /**\n+     * sets id\n+     * @param applicationId id\n+     * @return updated options\n+     */\n+    public ClientOptions setApplicationId(String applicationId) {\n+        this.applicationId = applicationId;\n+        return this;\n+    }\n+\n+    /**\n+     * applicationId\n+     * @return applicationId\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09aff0dfbb4222bd34eea63f761bc30c8e39f3be"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjE4MDUyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo0Mzo0OFrOHF_uCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo0Mzo0OFrOHF_uCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA0ODkwNg==", "bodyText": "This is missing implementation. headers is not used.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r476048906", "createdAt": "2020-08-25T01:43:48Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/ClientOptions.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core;\n+\n+/**\n+ * Client Options for setting common properties for example applicationId, contentType. Most of these properties are\n+ * applied on request being send to Azure Service but some could be used for other purpose also for example\n+ * applicationId is also used for telemetry.\n+ */\n+public class ClientOptions {\n+    private String applicationId;\n+    private String contentType;\n+\n+    /**\n+     * applicationId\n+     * @return applicationId\n+     */\n+    public String getApplicationId() {\n+        return applicationId;\n+    }\n+\n+    /**\n+     * sets id\n+     * @param applicationId id\n+     * @return updated options\n+     */\n+    public ClientOptions setApplicationId(String applicationId) {\n+        this.applicationId = applicationId;\n+        return this;\n+    }\n+\n+    /**\n+     * applicationId\n+     * @return applicationId\n+     */\n+    public String getContentType() {\n+        return contentType;\n+    }\n+\n+    /**\n+     * sets id\n+     * @param contentType id\n+     * @return updated options\n+     */\n+    public ClientOptions setContentType(String contentType) {\n+        this.contentType = contentType;\n+        return this;\n+    }\n+\n+    /**\n+     * sets headers\n+     * @param headers headers\n+     * @return updated options\n+     */\n+    public ClientOptions headers(Headers headers) {\n+        return this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09aff0dfbb4222bd34eea63f761bc30c8e39f3be"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjE4MTQyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo0NDowNFrOHF_utQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo0NDowNFrOHF_utQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA0OTA3Nw==", "bodyText": "Same here - name and value are not used.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r476049077", "createdAt": "2020-08-25T01:44:04Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/ClientOptions.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core;\n+\n+/**\n+ * Client Options for setting common properties for example applicationId, contentType. Most of these properties are\n+ * applied on request being send to Azure Service but some could be used for other purpose also for example\n+ * applicationId is also used for telemetry.\n+ */\n+public class ClientOptions {\n+    private String applicationId;\n+    private String contentType;\n+\n+    /**\n+     * applicationId\n+     * @return applicationId\n+     */\n+    public String getApplicationId() {\n+        return applicationId;\n+    }\n+\n+    /**\n+     * sets id\n+     * @param applicationId id\n+     * @return updated options\n+     */\n+    public ClientOptions setApplicationId(String applicationId) {\n+        this.applicationId = applicationId;\n+        return this;\n+    }\n+\n+    /**\n+     * applicationId\n+     * @return applicationId\n+     */\n+    public String getContentType() {\n+        return contentType;\n+    }\n+\n+    /**\n+     * sets id\n+     * @param contentType id\n+     * @return updated options\n+     */\n+    public ClientOptions setContentType(String contentType) {\n+        this.contentType = contentType;\n+        return this;\n+    }\n+\n+    /**\n+     * sets headers\n+     * @param headers headers\n+     * @return updated options\n+     */\n+    public ClientOptions headers(Headers headers) {\n+        return this;\n+    }\n+\n+    /**\n+     * sets headers\n+     * @param name name of the header\n+     * @param value value for this header\n+     * @return updated options\n+     */\n+    public ClientOptions header(String name, String value) {\n+        return this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09aff0dfbb4222bd34eea63f761bc30c8e39f3be"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjE5MTA1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/Header.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo0NjoyNVrOHF_1AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo0NjoyNVrOHF_1AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA1MDY4OA==", "bodyText": "Fix javadoc - HttpHeader should be just Header.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r476050688", "createdAt": "2020-08-25T01:46:25Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/Header.java", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core;\n+\n+/**\n+ * A single header within for a request.\n+ *\n+ * If multiple header values are added to a request or response with\n+ * the same name (case-insensitive), then the values will be appended\n+ * to the end of the same Header with commas separating them.\n+ */\n+public class Header {\n+    private final String name;\n+    private String value;\n+\n+    /**\n+     * Create a HttpHeader instance using the provided name and value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09aff0dfbb4222bd34eea63f761bc30c8e39f3be"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjIwNDI1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/Headers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo0OTo0NlrOHF_-SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo0OTo0NlrOHF_-SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA1MzA2NA==", "bodyText": "Do we need this type? We can simply have Iterable<Header> in ClientOptions.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r476053064", "createdAt": "2020-08-25T01:49:46Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/Headers.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * {@link Iterable} map representation for {@link Header}.\n+ */\n+public class Headers implements Iterable<Header> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09aff0dfbb4222bd34eea63f761bc30c8e39f3be"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjIwNzI0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/Header.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo1MDozMVrOHGAAHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo1MDozMVrOHGAAHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA1MzUzNQ==", "bodyText": "This should not be in root package.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r476053535", "createdAt": "2020-08-25T01:50:31Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/Header.java", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09aff0dfbb4222bd34eea63f761bc30c8e39f3be"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjIxOTQ5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/CoreUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo1Mzo0NFrOHGAIZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzo1MzozN1rOHGynaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA1NTY1NA==", "bodyText": "Consider renaming this to getApplicationId(). Why does this method take RuntimeException as param?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r476055654", "createdAt": "2020-08-25T01:53:44Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/CoreUtils.java", "diffHunk": "@@ -249,4 +251,46 @@ public static String bomAwareToString(byte[] bytes, String contentType) {\n             }\n         }\n     }\n+\n+    /**\n+     * Validate applicationId and return it based on following rule.\n+     *\n+     * 1.If {@code runtimeException} is not {@code null} and {@code  applicationId} has different value in\n+     * {@link HttpLogOptions} and {@link ClientOptions}, It will log and throw this exception.\n+     * 2. Prioritize {@code applicationId} set in ClientOptions over {@link HttpLogOptions}.\n+     *\n+     * @param logOptions provided {@link HttpLogOptions}.\n+     * @param clientOptions provided {@link ClientOptions}.\n+     * @param runtimeException if this function need to throw. The {@code null} value represent: It will not throw if\n+     * {@code applicationId} is different in {@link HttpLogOptions} and {@link ClientOptions}.\n+     * @return applicationId based on rule explained above.\n+     *\n+     * @throws RuntimeException If {@code runtimeException} is not {@code null} and {@code  applicationId} is different\n+     * in {@link HttpLogOptions} and {@link ClientOptions}\n+     */\n+    public static String validateApplicationId(HttpLogOptions logOptions, ClientOptions clientOptions,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09aff0dfbb4222bd34eea63f761bc30c8e39f3be"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgwMTAzMA==", "bodyText": "@srnagar : This function could be used in various situation and in some cases caller may want to throw different kind of exception.\n\nIn builder caller can call this to validate and throw IllegalStateException or IllegalArguementException or some other.\nIn other place, caller may want to just get right applicationId value and do not want to throw any Exception, they can pass null in RuntimeException.\n\nThus I have used \"validate\" verb and RuntimeException. I can change \"validate\" -> \"get\" if preferred.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r476801030", "createdAt": "2020-08-25T22:29:22Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/CoreUtils.java", "diffHunk": "@@ -249,4 +251,46 @@ public static String bomAwareToString(byte[] bytes, String contentType) {\n             }\n         }\n     }\n+\n+    /**\n+     * Validate applicationId and return it based on following rule.\n+     *\n+     * 1.If {@code runtimeException} is not {@code null} and {@code  applicationId} has different value in\n+     * {@link HttpLogOptions} and {@link ClientOptions}, It will log and throw this exception.\n+     * 2. Prioritize {@code applicationId} set in ClientOptions over {@link HttpLogOptions}.\n+     *\n+     * @param logOptions provided {@link HttpLogOptions}.\n+     * @param clientOptions provided {@link ClientOptions}.\n+     * @param runtimeException if this function need to throw. The {@code null} value represent: It will not throw if\n+     * {@code applicationId} is different in {@link HttpLogOptions} and {@link ClientOptions}.\n+     * @return applicationId based on rule explained above.\n+     *\n+     * @throws RuntimeException If {@code runtimeException} is not {@code null} and {@code  applicationId} is different\n+     * in {@link HttpLogOptions} and {@link ClientOptions}\n+     */\n+    public static String validateApplicationId(HttpLogOptions logOptions, ClientOptions clientOptions,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA1NTY1NA=="}, "originalCommit": {"oid": "09aff0dfbb4222bd34eea63f761bc30c8e39f3be"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg4Mjc5Mw==", "bodyText": "I think this can be improved, based on my other comment in this review.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r476882793", "createdAt": "2020-08-25T23:53:37Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/CoreUtils.java", "diffHunk": "@@ -249,4 +251,46 @@ public static String bomAwareToString(byte[] bytes, String contentType) {\n             }\n         }\n     }\n+\n+    /**\n+     * Validate applicationId and return it based on following rule.\n+     *\n+     * 1.If {@code runtimeException} is not {@code null} and {@code  applicationId} has different value in\n+     * {@link HttpLogOptions} and {@link ClientOptions}, It will log and throw this exception.\n+     * 2. Prioritize {@code applicationId} set in ClientOptions over {@link HttpLogOptions}.\n+     *\n+     * @param logOptions provided {@link HttpLogOptions}.\n+     * @param clientOptions provided {@link ClientOptions}.\n+     * @param runtimeException if this function need to throw. The {@code null} value represent: It will not throw if\n+     * {@code applicationId} is different in {@link HttpLogOptions} and {@link ClientOptions}.\n+     * @return applicationId based on rule explained above.\n+     *\n+     * @throws RuntimeException If {@code runtimeException} is not {@code null} and {@code  applicationId} is different\n+     * in {@link HttpLogOptions} and {@link ClientOptions}\n+     */\n+    public static String validateApplicationId(HttpLogOptions logOptions, ClientOptions clientOptions,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA1NTY1NA=="}, "originalCommit": {"oid": "09aff0dfbb4222bd34eea63f761bc30c8e39f3be"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjIyNTAxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/module-info.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo1NToxMVrOHGAMDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo1NToxMVrOHGAMDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA1NjU5MQ==", "bodyText": "We should not have any of the types related to client options in root package. So, this export can be removed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r476056591", "createdAt": "2020-08-25T01:55:11Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/module-info.java", "diffHunk": "@@ -14,6 +14,7 @@\n     requires transitive com.fasterxml.jackson.datatype.jsr310;\n \n     // public API surface area\n+    exports com.azure.core;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09aff0dfbb4222bd34eea63f761bc30c8e39f3be"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjIzMTgzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/CoreUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo1Njo1M1rOHGAQng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo1Njo1M1rOHGAQng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA1Nzc1OA==", "bodyText": "A static client logger should be used for a helper class that only has static methods.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r476057758", "createdAt": "2020-08-25T01:56:53Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/CoreUtils.java", "diffHunk": "@@ -249,4 +251,46 @@ public static String bomAwareToString(byte[] bytes, String contentType) {\n             }\n         }\n     }\n+\n+    /**\n+     * Validate applicationId and return it based on following rule.\n+     *\n+     * 1.If {@code runtimeException} is not {@code null} and {@code  applicationId} has different value in\n+     * {@link HttpLogOptions} and {@link ClientOptions}, It will log and throw this exception.\n+     * 2. Prioritize {@code applicationId} set in ClientOptions over {@link HttpLogOptions}.\n+     *\n+     * @param logOptions provided {@link HttpLogOptions}.\n+     * @param clientOptions provided {@link ClientOptions}.\n+     * @param runtimeException if this function need to throw. The {@code null} value represent: It will not throw if\n+     * {@code applicationId} is different in {@link HttpLogOptions} and {@link ClientOptions}.\n+     * @return applicationId based on rule explained above.\n+     *\n+     * @throws RuntimeException If {@code runtimeException} is not {@code null} and {@code  applicationId} is different\n+     * in {@link HttpLogOptions} and {@link ClientOptions}\n+     */\n+    public static String validateApplicationId(HttpLogOptions logOptions, ClientOptions clientOptions,\n+        RuntimeException runtimeException) {\n+\n+        String applicationId;\n+        String logApplicationId = null;\n+        String clientApplicationId = null;\n+\n+        if (logOptions != null) {\n+            logApplicationId = logOptions.getApplicationId();\n+        }\n+        if (clientOptions != null) {\n+            clientApplicationId = clientOptions.getApplicationId();\n+        }\n+\n+        // Check applicationId in both location , if present, should be same.\n+        if (runtimeException != null && logApplicationId != null && clientApplicationId != null\n+            && !clientApplicationId.equalsIgnoreCase(logApplicationId)) {\n+            ClientLogger logger = new ClientLogger(CoreUtils.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09aff0dfbb4222bd34eea63f761bc30c8e39f3be"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjI0MDg3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo1OToxMlrOHGAW4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjozNTo0N1rOHGgZiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA1OTM2MA==", "bodyText": "Why do we need content type in client options? Do we have a usecase where customers would want to set this?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r476059360", "createdAt": "2020-08-25T01:59:12Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/ClientOptions.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core;\n+\n+/**\n+ * Client Options for setting common properties for example applicationId, contentType. Most of these properties are\n+ * applied on request being send to Azure Service but some could be used for other purpose also for example\n+ * applicationId is also used for telemetry.\n+ */\n+public class ClientOptions {\n+    private String applicationId;\n+    private String contentType;\n+\n+    /**\n+     * applicationId\n+     * @return applicationId\n+     */\n+    public String getApplicationId() {\n+        return applicationId;\n+    }\n+\n+    /**\n+     * sets id\n+     * @param applicationId id\n+     * @return updated options\n+     */\n+    public ClientOptions setApplicationId(String applicationId) {\n+        this.applicationId = applicationId;\n+        return this;\n+    }\n+\n+    /**\n+     * applicationId\n+     * @return applicationId\n+     */\n+    public String getContentType() {\n+        return contentType;\n+    }\n+\n+    /**\n+     * sets id\n+     * @param contentType id\n+     * @return updated options\n+     */\n+    public ClientOptions setContentType(String contentType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09aff0dfbb4222bd34eea63f761bc30c8e39f3be"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4NDMzMQ==", "bodyText": "Removed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r476584331", "createdAt": "2020-08-25T16:35:47Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/ClientOptions.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core;\n+\n+/**\n+ * Client Options for setting common properties for example applicationId, contentType. Most of these properties are\n+ * applied on request being send to Azure Service but some could be used for other purpose also for example\n+ * applicationId is also used for telemetry.\n+ */\n+public class ClientOptions {\n+    private String applicationId;\n+    private String contentType;\n+\n+    /**\n+     * applicationId\n+     * @return applicationId\n+     */\n+    public String getApplicationId() {\n+        return applicationId;\n+    }\n+\n+    /**\n+     * sets id\n+     * @param applicationId id\n+     * @return updated options\n+     */\n+    public ClientOptions setApplicationId(String applicationId) {\n+        this.applicationId = applicationId;\n+        return this;\n+    }\n+\n+    /**\n+     * applicationId\n+     * @return applicationId\n+     */\n+    public String getContentType() {\n+        return contentType;\n+    }\n+\n+    /**\n+     * sets id\n+     * @param contentType id\n+     * @return updated options\n+     */\n+    public ClientOptions setContentType(String contentType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA1OTM2MA=="}, "originalCommit": {"oid": "09aff0dfbb4222bd34eea63f761bc30c8e39f3be"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjI2Mzc4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/administration/ServiceBusAdministrationClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMjowNToyMlrOHGAmKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMjowNToyMlrOHGAmKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA2MzI3Mg==", "bodyText": "The return type should be ServiceBusAdministrationClientBuilder", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r476063272", "createdAt": "2020-08-25T02:05:22Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/administration/ServiceBusAdministrationClientBuilder.java", "diffHunk": "@@ -255,6 +258,19 @@ public ServiceBusAdministrationClientBuilder httpLogOptions(HttpLogOptions logOp\n         return this;\n     }\n \n+    /**\n+     * Sets various options on the client. For example application-id which will be used in user-agent while creating\n+     * connection with Azure Service Bus.\n+     *\n+     * @param clientOptions to be set on the client.\n+     *\n+     * @return The updated {@link ServiceBusManagementClientBuilder} object.\n+     */\n+    public ServiceBusManagementClientBuilder clientOptions(ClientOptions clientOptions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09aff0dfbb4222bd34eea63f761bc30c8e39f3be"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjI3MTE5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/package-info.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMjowNzoyOVrOHGArOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMjowNzoyOVrOHGArOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA2NDU3MQ==", "bodyText": "This can be removed once all types are moved from root package.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r476064571", "createdAt": "2020-08-25T02:07:29Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/package-info.java", "diffHunk": "@@ -0,0 +1,7 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+/**\n+ * Package containing core utility classes.\n+ */\n+package com.azure.core;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09aff0dfbb4222bd34eea63f761bc30c8e39f3be"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MTMxMjE4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzo0MzoxMVrOHGx8fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzo0MzoxMVrOHGx8fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg3MTgwNA==", "bodyText": "Why can't it be null? It is by default null so it seems reasonable for a user to null it out if they don't want it set any longer?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r476871804", "createdAt": "2020-08-25T23:43:11Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Client Options for setting common properties for example applicationId. Most of these properties are applied on\n+ * request being send to Azure Service but some could be used for other purpose also for example applicationId could be\n+ * used for telemetry.\n+ */\n+@Fluent\n+public final class ClientOptions {\n+    private final Map<String, Header> headers = new ConcurrentHashMap<>();\n+    private String applicationId;\n+\n+    /**\n+     * Gets the applicationId.\n+     *\n+     * @return The applicationId.\n+     */\n+    public String getApplicationId() {\n+        return applicationId;\n+    }\n+\n+    /**\n+     * Sets the applicationId provided.\n+     *\n+     * @param applicationId to be set.\n+     * @return updated {@link ClientOptions}.\n+     *\n+     * @throws NullPointerException if {@code applicationId} is null.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b56cf9c8304cc71dc86a8b2f1f54e35cc63281d"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MTMzNTgwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzo0NzowMVrOHGyMTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzo0NzowMVrOHGyMTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg3NTg1NA==", "bodyText": "This is not consistent with the behavior of Header itself, where the value gets appended to the header.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r476875854", "createdAt": "2020-08-25T23:47:01Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Client Options for setting common properties for example applicationId. Most of these properties are applied on\n+ * request being send to Azure Service but some could be used for other purpose also for example applicationId could be\n+ * used for telemetry.\n+ */\n+@Fluent\n+public final class ClientOptions {\n+    private final Map<String, Header> headers = new ConcurrentHashMap<>();\n+    private String applicationId;\n+\n+    /**\n+     * Gets the applicationId.\n+     *\n+     * @return The applicationId.\n+     */\n+    public String getApplicationId() {\n+        return applicationId;\n+    }\n+\n+    /**\n+     * Sets the applicationId provided.\n+     *\n+     * @param applicationId to be set.\n+     * @return updated {@link ClientOptions}.\n+     *\n+     * @throws NullPointerException if {@code applicationId} is null.\n+     */\n+    public ClientOptions setApplicationId(String applicationId) {\n+        this.applicationId = Objects.requireNonNull(applicationId, \"'applicationId' cannot be null.\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the provided headers.\n+     *\n+     * @param headers headers to be set.\n+     * @return updated {@link ClientOptions}.\n+     *\n+     * @throws NullPointerException if {@code headers} is null.\n+     */\n+    public ClientOptions headers(Iterable<Header> headers) {\n+        Objects.requireNonNull(headers, \"'headers' cannot be null.\");\n+\n+        for (final Header header : headers) {\n+            this.headers.put(formatKey(header.getName()), header);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a {@link Header header} with the given name and value.\n+     *\n+     * <p>If header with same name already exists then the value will be overwritten.</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b56cf9c8304cc71dc86a8b2f1f54e35cc63281d"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MTM2MjM2OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzo1MToyMlrOHGyeaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzo1MToyMlrOHGyeaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg4MDQ5MQ==", "bodyText": "Don't talk about implementation details in API documentation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r476880491", "createdAt": "2020-08-25T23:51:22Z", "author": {"login": "JonathanGiles"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -93,6 +95,19 @@\n     public ServiceBusClientBuilder() {\n     }\n \n+    /**\n+     * Sets various options on the client. For example application-id which will be used in user-agent while creating\n+     * connection with Azure Service Bus.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b56cf9c8304cc71dc86a8b2f1f54e35cc63281d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MTM3MDg1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/administration/ServiceBusAdministrationClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzo1Mjo0OVrOHGykKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzo1Mjo0OVrOHGykKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg4MTk2Mw==", "bodyText": "I don't think we need to do this. We should deprecate the HttpLogOptions one, and have it take lower precedence to the clientOptions one (so we only use it when the clientOptions one is not set).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r476881963", "createdAt": "2020-08-25T23:52:49Z", "author": {"login": "JonathanGiles"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/administration/ServiceBusAdministrationClientBuilder.java", "diffHunk": "@@ -321,7 +338,10 @@ private HttpPipeline createPipeline() {\n         final String clientName = properties.getOrDefault(\"name\", \"UnknownName\");\n         final String clientVersion = properties.getOrDefault(\"version\", \"UnknownVersion\");\n \n-        httpPolicies.add(new UserAgentPolicy(httpLogOptions.getApplicationId(), clientName, clientVersion,\n+        final String applicationId = CoreUtils.validateApplicationId(httpLogOptions, clientOptions,\n+            new IllegalStateException(\"applicationId should be same in httpLogOptions and clientOptions.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b56cf9c8304cc71dc86a8b2f1f54e35cc63281d"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MTc5ODUyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMTozNTowOVrOHG3FbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoyNzoxMlrOHG9lVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk1NjAxMw==", "bodyText": "Have you reproduced this logic for application ID length, spaces, etc in the new location?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r476956013", "createdAt": "2020-08-26T01:35:09Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java", "diffHunk": "@@ -168,7 +171,9 @@ public String getApplicationId() {\n      *\n      * @param applicationId The user specified application id.\n      * @return The updated HttpLogOptions object.\n+     * @deprecated deprecated in favor of {@link ClientOptions#setApplicationId(String)}\n      */\n+    @Deprecated\n     public HttpLogOptions setApplicationId(final String applicationId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10020b68f2a5463710f9dee94fcadf0ec35306ec"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2MjQ4NQ==", "bodyText": "Missed it, I added it back. Thanks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r477062485", "createdAt": "2020-08-26T06:27:12Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java", "diffHunk": "@@ -168,7 +171,9 @@ public String getApplicationId() {\n      *\n      * @param applicationId The user specified application id.\n      * @return The updated HttpLogOptions object.\n+     * @deprecated deprecated in favor of {@link ClientOptions#setApplicationId(String)}\n      */\n+    @Deprecated\n     public HttpLogOptions setApplicationId(final String applicationId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk1NjAxMw=="}, "originalCommit": {"oid": "10020b68f2a5463710f9dee94fcadf0ec35306ec"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjcxNTE4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzo0NTo1N1rOHG_6Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzo0NTo1N1rOHG_6Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwMDU2Mg==", "bodyText": "It's better to pass the whole ClientOptions here since we might need the headers and other options that will be added there. It's easier to plumb this in once and not keep adding new params to this constructor.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r477100562", "createdAt": "2020-08-26T07:45:57Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionOptions.java", "diffHunk": "@@ -24,10 +24,11 @@\n     private final Scheduler scheduler;\n     private final String fullyQualifiedNamespace;\n     private final CbsAuthorizationType authorizationType;\n+    private final String applicationId;\n \n     public ConnectionOptions(String fullyQualifiedNamespace, TokenCredential tokenCredential,\n             CbsAuthorizationType authorizationType, AmqpTransportType transport, AmqpRetryOptions retryOptions,\n-            ProxyOptions proxyOptions, Scheduler scheduler) {\n+            ProxyOptions proxyOptions, Scheduler scheduler, String applicationId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8eba360cf7f9a50317846eed57eef6fcc48b1e1"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjcyMDAzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzo0NzoyMVrOHG_9DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzo0NzoyMVrOHG_9DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwMTMyNQ==", "bodyText": "nit: move all constants to the top of the class.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r477101325", "createdAt": "2020-08-26T07:47:21Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -0,0 +1,168 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Client Options for setting common properties for example applicationId. Most of these properties are applied on\n+ * request being send to Azure Service but some could be used for other purpose also for example applicationId could be\n+ * used for telemetry.\n+ */\n+@Fluent\n+public final class ClientOptions {\n+    private final ClientLogger logger = new ClientLogger(ClientOptions.class);\n+    private final Map<String, Header> headers = new ConcurrentHashMap<>();\n+\n+    private static final int MAX_APPLICATION_ID_LENGTH = 24;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8eba360cf7f9a50317846eed57eef6fcc48b1e1"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjczNjI0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzo1MTo0NVrOHHAHJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzo1MTo0NVrOHHAHJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwMzkwOQ==", "bodyText": "I don't think we need any of these methods on the ClientOptions class. We should just have getter method for returning the header collection.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r477103909", "createdAt": "2020-08-26T07:51:45Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -0,0 +1,168 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Client Options for setting common properties for example applicationId. Most of these properties are applied on\n+ * request being send to Azure Service but some could be used for other purpose also for example applicationId could be\n+ * used for telemetry.\n+ */\n+@Fluent\n+public final class ClientOptions {\n+    private final ClientLogger logger = new ClientLogger(ClientOptions.class);\n+    private final Map<String, Header> headers = new ConcurrentHashMap<>();\n+\n+    private static final int MAX_APPLICATION_ID_LENGTH = 24;\n+    private String applicationId;\n+\n+    /**\n+     * Gets the applicationId.\n+     *\n+     * @return The applicationId.\n+     */\n+    public String getApplicationId() {\n+        return applicationId;\n+    }\n+\n+    /**\n+     * Sets the applicationId provided.\n+     *\n+     * @param applicationId to be set.\n+     * @return updated {@link ClientOptions}.\n+     *\n+     */\n+    public ClientOptions setApplicationId(String applicationId) {\n+        if (!CoreUtils.isNullOrEmpty(applicationId)) {\n+            if (applicationId.length() > MAX_APPLICATION_ID_LENGTH) {\n+                throw logger\n+                    .logExceptionAsError(new IllegalArgumentException(\"'applicationId' length cannot be greater than \"\n+                        + MAX_APPLICATION_ID_LENGTH));\n+            } else if (applicationId.contains(\" \")) {\n+                throw logger\n+                    .logExceptionAsError(new IllegalArgumentException(\"'applicationId' must not contain a space.\"));\n+            } else {\n+                this.applicationId = applicationId;\n+            }\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the provided headers.\n+     *\n+     * @param headers headers to be set.\n+     * @return updated {@link ClientOptions}.\n+     *\n+     * @throws NullPointerException if {@code headers} is null.\n+     */\n+    public ClientOptions headers(Iterable<Header> headers) {\n+        Objects.requireNonNull(headers, \"'headers' cannot be null.\");\n+\n+        for (final Header header : headers) {\n+            this.headers.put(formatKey(header.getName()), header);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a {@link Header header} with the given name and value or append the {@code value} separated by {@code comma}\n+     * if the {@link Header} exists for given {@code name}.\n+     *\n+     * @param name the name\n+     * @param value the value\n+     * @return The updated ClientOptions object\n+     *\n+     * @throws NullPointerException if {@code name} or {@code value} is null.\n+     */\n+    public ClientOptions addHeader(String name, String value) {\n+        Objects.requireNonNull(name, \"'name' cannot be null.\");\n+        Objects.requireNonNull(value, \"'value' cannot be null.\");\n+\n+        Header existing = get(name);\n+        if (existing == null) {\n+            this.headers.put(formatKey(name), new Header(name, value));\n+        } else {\n+            existing.addValue(value);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the {@link Header header} for the provided header name. {@code Null} is returned if the header isn't\n+     * found.\n+     *\n+     * @param name the name of the header to find.\n+     * @return the header if found, null otherwise.\n+     *\n+     * @throws NullPointerException if {@code name} is null.\n+     */\n+    public Header get(String name) {\n+        Objects.requireNonNull(name, \"'name' cannot be null.\");\n+\n+        return headers.get(formatKey(name));\n+    }\n+\n+    /**\n+     * Removes the {@link Header header} with the provided header name. {@code Null} is returned if the header\n+     * isn't found.\n+     *\n+     * @param name the name of the header to remove.\n+     * @return the header if removed, null otherwise.\n+     *\n+     * @throws NullPointerException if {@code name} is null.\n+     */\n+    public Header remove(String name) {\n+        Objects.requireNonNull(name, \"'name' cannot be null.\");\n+\n+        return headers.remove(formatKey(name));\n+    }\n+\n+    /**\n+     * Get the value for the provided header name. {@code Null} is returned if the header name isn't found.\n+     *\n+     * @param name the name of the header whose value is being retrieved.\n+     * @return the value of the header, or null if the header isn't found\n+     *\n+     * @throws NullPointerException if {@code name} is null.\n+     */\n+    public String getValue(String name) {\n+        final Header header = get(name);\n+        return header == null ? null : header.getValue();\n+    }\n+\n+    /**\n+     * Get the values for the provided header name. {@code Null} is returned if the header name isn't found.\n+     *\n+     * <p>This returns {@link #getValue(String) getValue} split by {@code comma}.</p>\n+     *\n+     * @param name the name of the header whose value is being retrieved.\n+     * @return the values of the header, or null if the header isn't found\n+     */\n+    public String[] getValues(String name) {\n+        final Header header = get(name);\n+        return header == null ? null : header.getValues();\n+    }\n+\n+    /**\n+     * Gets a {@link Map} representation of the {@link Header} collection. The keys are {@link Header#getName()} in the\n+     * given {@link Header}.\n+     *\n+     * @return the headers as map\n+     */\n+    public Map<String, Header> toMap() {\n+        return headers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8eba360cf7f9a50317846eed57eef6fcc48b1e1"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4Mjc0MDkxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/CoreUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzo1Mjo1NlrOHHAKAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzo1Mjo1NlrOHHAKAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwNDY0Mg==", "bodyText": "This line should be removed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r477104642", "createdAt": "2020-08-26T07:52:56Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/CoreUtils.java", "diffHunk": "@@ -249,4 +251,32 @@ public static String bomAwareToString(byte[] bytes, String contentType) {\n             }\n         }\n     }\n+\n+    /**\n+     * Prioritize {@code applicationId} set in ClientOptions over {@link HttpLogOptions}.\n+     *\n+     * @param logOptions provided {@link HttpLogOptions}.\n+     * @param clientOptions provided {@link ClientOptions}.\n+     * {@code applicationId} is different in {@link HttpLogOptions} and {@link ClientOptions}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8eba360cf7f9a50317846eed57eef6fcc48b1e1"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4Mjc0NjI3OnYy", "diffSide": "RIGHT", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubClientBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzo1NDoyNFrOHHANXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODoxMDoyNFrOHHX1eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwNTUwMA==", "bodyText": "Why is this hardcoded to empty string?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r477105500", "createdAt": "2020-08-26T07:54:24Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubClientBuilder.java", "diffHunk": "@@ -623,7 +623,7 @@ private ConnectionOptions getConnectionOptions() {\n             : CbsAuthorizationType.JSON_WEB_TOKEN;\n \n         return new ConnectionOptions(fullyQualifiedNamespace, credentials, authorizationType, transport, retryOptions,\n-            proxyOptions, scheduler);\n+            proxyOptions, scheduler, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8eba360cf7f9a50317846eed57eef6fcc48b1e1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ5MjYwMQ==", "bodyText": "I told Hemant to save the EventHubs implementation one to another PR. I was trying to scope this PR. There is another open issue for Event Hubs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r477492601", "createdAt": "2020-08-26T18:10:24Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubClientBuilder.java", "diffHunk": "@@ -623,7 +623,7 @@ private ConnectionOptions getConnectionOptions() {\n             : CbsAuthorizationType.JSON_WEB_TOKEN;\n \n         return new ConnectionOptions(fullyQualifiedNamespace, credentials, authorizationType, transport, retryOptions,\n-            proxyOptions, scheduler);\n+            proxyOptions, scheduler, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwNTUwMA=="}, "originalCommit": {"oid": "e8eba360cf7f9a50317846eed57eef6fcc48b1e1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTE1NjMxOnYy", "diffSide": "RIGHT", "path": "eng/code-quality-reports/src/main/resources/checkstyle/checkstyle-suppressions.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODowMDoxOFrOHHXexQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOTowMjoxN1rOHHZm_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4Njc4OQ==", "bodyText": "Do you really need this suppression?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r477486789", "createdAt": "2020-08-26T18:00:18Z", "author": {"login": "conniey"}, "path": "eng/code-quality-reports/src/main/resources/checkstyle/checkstyle-suppressions.xml", "diffHunk": "@@ -239,6 +239,7 @@\n   <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\" files=\"com.azure.storage.common.Utility.java\"/>\n   <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\"\n             files=\"com.azure.storage.common.implementation.StorageImplUtils.java\"/>\n+  <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\" files=\"com.azure.core.util.CoreUtils.java\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8eba360cf7f9a50317846eed57eef6fcc48b1e1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUyMTY2Mg==", "bodyText": "Like other CoreUtils static function I was using non static instance of ClientLogger.\n@srnagar  suggested to use static reference to \"ClientLogger\" and there is a checkstyle rule on this. Other classes have done same.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r477521662", "createdAt": "2020-08-26T19:02:17Z", "author": {"login": "hemanttanwar"}, "path": "eng/code-quality-reports/src/main/resources/checkstyle/checkstyle-suppressions.xml", "diffHunk": "@@ -239,6 +239,7 @@\n   <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\" files=\"com.azure.storage.common.Utility.java\"/>\n   <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\"\n             files=\"com.azure.storage.common.implementation.StorageImplUtils.java\"/>\n+  <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\" files=\"com.azure.core.util.CoreUtils.java\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4Njc4OQ=="}, "originalCommit": {"oid": "e8eba360cf7f9a50317846eed57eef6fcc48b1e1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTE1OTcyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/test/java/com/azure/core/amqp/implementation/ReactorConnectionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODowMToxNFrOHHXg9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzoyOTo1MFrOHHi5tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4NzM0OQ==", "bodyText": "Do you have any tests for applicationId? I see you just passing NULL everywhere.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r477487349", "createdAt": "2020-08-26T18:01:14Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/test/java/com/azure/core/amqp/implementation/ReactorConnectionTest.java", "diffHunk": "@@ -98,7 +98,7 @@ static void afterAll() {\n     @BeforeEach", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8eba360cf7f9a50317846eed57eef6fcc48b1e1"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY3MzkwOQ==", "bodyText": "Added test in ConnectionHandlerTest to check for applicationId everywhere else it is pass through.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r477673909", "createdAt": "2020-08-26T23:29:50Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core-amqp/src/test/java/com/azure/core/amqp/implementation/ReactorConnectionTest.java", "diffHunk": "@@ -98,7 +98,7 @@ static void afterAll() {\n     @BeforeEach", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4NzM0OQ=="}, "originalCommit": {"oid": "e8eba360cf7f9a50317846eed57eef6fcc48b1e1"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTE2NDU2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODowMjozN1rOHHXkCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODo1NTo1NVrOHHZXVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4ODEzOQ==", "bodyText": "Does this need to be a concurrent hash map.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r477488139", "createdAt": "2020-08-26T18:02:37Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -0,0 +1,168 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Client Options for setting common properties for example applicationId. Most of these properties are applied on\n+ * request being send to Azure Service but some could be used for other purpose also for example applicationId could be\n+ * used for telemetry.\n+ */\n+@Fluent\n+public final class ClientOptions {\n+    private final ClientLogger logger = new ClientLogger(ClientOptions.class);\n+    private final Map<String, Header> headers = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8eba360cf7f9a50317846eed57eef6fcc48b1e1"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxNzY1NQ==", "bodyText": "The map doesn't need to exist at all. We just have setters and getters for headers and a property of type Iterable<Header>. Don't see the need to use the map here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r477517655", "createdAt": "2020-08-26T18:55:55Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -0,0 +1,168 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Client Options for setting common properties for example applicationId. Most of these properties are applied on\n+ * request being send to Azure Service but some could be used for other purpose also for example applicationId could be\n+ * used for telemetry.\n+ */\n+@Fluent\n+public final class ClientOptions {\n+    private final ClientLogger logger = new ClientLogger(ClientOptions.class);\n+    private final Map<String, Header> headers = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4ODEzOQ=="}, "originalCommit": {"oid": "e8eba360cf7f9a50317846eed57eef6fcc48b1e1"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTE2NzY0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODowMzozOVrOHHXmKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODowMzozOVrOHHXmKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4ODY4Mg==", "bodyText": "nit: I'm not a fan of multiple nested if statements because it makes things harder to read if it's not necessary. Can we bounce early?\nif (CoreUtils.isNullorEmpty(applicationId)) { \n    return this;\n}\n... \n// other stuff.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r477488682", "createdAt": "2020-08-26T18:03:39Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -0,0 +1,168 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Client Options for setting common properties for example applicationId. Most of these properties are applied on\n+ * request being send to Azure Service but some could be used for other purpose also for example applicationId could be\n+ * used for telemetry.\n+ */\n+@Fluent\n+public final class ClientOptions {\n+    private final ClientLogger logger = new ClientLogger(ClientOptions.class);\n+    private final Map<String, Header> headers = new ConcurrentHashMap<>();\n+\n+    private static final int MAX_APPLICATION_ID_LENGTH = 24;\n+    private String applicationId;\n+\n+    /**\n+     * Gets the applicationId.\n+     *\n+     * @return The applicationId.\n+     */\n+    public String getApplicationId() {\n+        return applicationId;\n+    }\n+\n+    /**\n+     * Sets the applicationId provided.\n+     *\n+     * @param applicationId to be set.\n+     * @return updated {@link ClientOptions}.\n+     *\n+     */\n+    public ClientOptions setApplicationId(String applicationId) {\n+        if (!CoreUtils.isNullOrEmpty(applicationId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8eba360cf7f9a50317846eed57eef6fcc48b1e1"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTE3NTE4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODowNTozOFrOHHXq0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzoyMjoxMlrOHHiVsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4OTg3NQ==", "bodyText": "If you do need the concurrent hash map, you are not leveraging it by splitting the operations in two.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r477489875", "createdAt": "2020-08-26T18:05:38Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -0,0 +1,168 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Client Options for setting common properties for example applicationId. Most of these properties are applied on\n+ * request being send to Azure Service but some could be used for other purpose also for example applicationId could be\n+ * used for telemetry.\n+ */\n+@Fluent\n+public final class ClientOptions {\n+    private final ClientLogger logger = new ClientLogger(ClientOptions.class);\n+    private final Map<String, Header> headers = new ConcurrentHashMap<>();\n+\n+    private static final int MAX_APPLICATION_ID_LENGTH = 24;\n+    private String applicationId;\n+\n+    /**\n+     * Gets the applicationId.\n+     *\n+     * @return The applicationId.\n+     */\n+    public String getApplicationId() {\n+        return applicationId;\n+    }\n+\n+    /**\n+     * Sets the applicationId provided.\n+     *\n+     * @param applicationId to be set.\n+     * @return updated {@link ClientOptions}.\n+     *\n+     */\n+    public ClientOptions setApplicationId(String applicationId) {\n+        if (!CoreUtils.isNullOrEmpty(applicationId)) {\n+            if (applicationId.length() > MAX_APPLICATION_ID_LENGTH) {\n+                throw logger\n+                    .logExceptionAsError(new IllegalArgumentException(\"'applicationId' length cannot be greater than \"\n+                        + MAX_APPLICATION_ID_LENGTH));\n+            } else if (applicationId.contains(\" \")) {\n+                throw logger\n+                    .logExceptionAsError(new IllegalArgumentException(\"'applicationId' must not contain a space.\"));\n+            } else {\n+                this.applicationId = applicationId;\n+            }\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the provided headers.\n+     *\n+     * @param headers headers to be set.\n+     * @return updated {@link ClientOptions}.\n+     *\n+     * @throws NullPointerException if {@code headers} is null.\n+     */\n+    public ClientOptions headers(Iterable<Header> headers) {\n+        Objects.requireNonNull(headers, \"'headers' cannot be null.\");\n+\n+        for (final Header header : headers) {\n+            this.headers.put(formatKey(header.getName()), header);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a {@link Header header} with the given name and value or append the {@code value} separated by {@code comma}\n+     * if the {@link Header} exists for given {@code name}.\n+     *\n+     * @param name the name\n+     * @param value the value\n+     * @return The updated ClientOptions object\n+     *\n+     * @throws NullPointerException if {@code name} or {@code value} is null.\n+     */\n+    public ClientOptions addHeader(String name, String value) {\n+        Objects.requireNonNull(name, \"'name' cannot be null.\");\n+        Objects.requireNonNull(value, \"'value' cannot be null.\");\n+\n+        Header existing = get(name);\n+        if (existing == null) {\n+            this.headers.put(formatKey(name), new Header(name, value));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8eba360cf7f9a50317846eed57eef6fcc48b1e1"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY2NDY5MA==", "bodyText": "removed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r477664690", "createdAt": "2020-08-26T23:22:12Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -0,0 +1,168 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Client Options for setting common properties for example applicationId. Most of these properties are applied on\n+ * request being send to Azure Service but some could be used for other purpose also for example applicationId could be\n+ * used for telemetry.\n+ */\n+@Fluent\n+public final class ClientOptions {\n+    private final ClientLogger logger = new ClientLogger(ClientOptions.class);\n+    private final Map<String, Header> headers = new ConcurrentHashMap<>();\n+\n+    private static final int MAX_APPLICATION_ID_LENGTH = 24;\n+    private String applicationId;\n+\n+    /**\n+     * Gets the applicationId.\n+     *\n+     * @return The applicationId.\n+     */\n+    public String getApplicationId() {\n+        return applicationId;\n+    }\n+\n+    /**\n+     * Sets the applicationId provided.\n+     *\n+     * @param applicationId to be set.\n+     * @return updated {@link ClientOptions}.\n+     *\n+     */\n+    public ClientOptions setApplicationId(String applicationId) {\n+        if (!CoreUtils.isNullOrEmpty(applicationId)) {\n+            if (applicationId.length() > MAX_APPLICATION_ID_LENGTH) {\n+                throw logger\n+                    .logExceptionAsError(new IllegalArgumentException(\"'applicationId' length cannot be greater than \"\n+                        + MAX_APPLICATION_ID_LENGTH));\n+            } else if (applicationId.contains(\" \")) {\n+                throw logger\n+                    .logExceptionAsError(new IllegalArgumentException(\"'applicationId' must not contain a space.\"));\n+            } else {\n+                this.applicationId = applicationId;\n+            }\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the provided headers.\n+     *\n+     * @param headers headers to be set.\n+     * @return updated {@link ClientOptions}.\n+     *\n+     * @throws NullPointerException if {@code headers} is null.\n+     */\n+    public ClientOptions headers(Iterable<Header> headers) {\n+        Objects.requireNonNull(headers, \"'headers' cannot be null.\");\n+\n+        for (final Header header : headers) {\n+            this.headers.put(formatKey(header.getName()), header);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a {@link Header header} with the given name and value or append the {@code value} separated by {@code comma}\n+     * if the {@link Header} exists for given {@code name}.\n+     *\n+     * @param name the name\n+     * @param value the value\n+     * @return The updated ClientOptions object\n+     *\n+     * @throws NullPointerException if {@code name} or {@code value} is null.\n+     */\n+    public ClientOptions addHeader(String name, String value) {\n+        Objects.requireNonNull(name, \"'name' cannot be null.\");\n+        Objects.requireNonNull(value, \"'value' cannot be null.\");\n+\n+        Header existing = get(name);\n+        if (existing == null) {\n+            this.headers.put(formatKey(name), new Header(name, value));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4OTg3NQ=="}, "originalCommit": {"oid": "e8eba360cf7f9a50317846eed57eef6fcc48b1e1"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTE3NzUzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODowNjoyNFrOHHXsYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODowNjoyNFrOHHXsYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ5MDI3NA==", "bodyText": "this can be a private static method because it doesn't rely on any state in the class.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r477490274", "createdAt": "2020-08-26T18:06:24Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -0,0 +1,168 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Client Options for setting common properties for example applicationId. Most of these properties are applied on\n+ * request being send to Azure Service but some could be used for other purpose also for example applicationId could be\n+ * used for telemetry.\n+ */\n+@Fluent\n+public final class ClientOptions {\n+    private final ClientLogger logger = new ClientLogger(ClientOptions.class);\n+    private final Map<String, Header> headers = new ConcurrentHashMap<>();\n+\n+    private static final int MAX_APPLICATION_ID_LENGTH = 24;\n+    private String applicationId;\n+\n+    /**\n+     * Gets the applicationId.\n+     *\n+     * @return The applicationId.\n+     */\n+    public String getApplicationId() {\n+        return applicationId;\n+    }\n+\n+    /**\n+     * Sets the applicationId provided.\n+     *\n+     * @param applicationId to be set.\n+     * @return updated {@link ClientOptions}.\n+     *\n+     */\n+    public ClientOptions setApplicationId(String applicationId) {\n+        if (!CoreUtils.isNullOrEmpty(applicationId)) {\n+            if (applicationId.length() > MAX_APPLICATION_ID_LENGTH) {\n+                throw logger\n+                    .logExceptionAsError(new IllegalArgumentException(\"'applicationId' length cannot be greater than \"\n+                        + MAX_APPLICATION_ID_LENGTH));\n+            } else if (applicationId.contains(\" \")) {\n+                throw logger\n+                    .logExceptionAsError(new IllegalArgumentException(\"'applicationId' must not contain a space.\"));\n+            } else {\n+                this.applicationId = applicationId;\n+            }\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the provided headers.\n+     *\n+     * @param headers headers to be set.\n+     * @return updated {@link ClientOptions}.\n+     *\n+     * @throws NullPointerException if {@code headers} is null.\n+     */\n+    public ClientOptions headers(Iterable<Header> headers) {\n+        Objects.requireNonNull(headers, \"'headers' cannot be null.\");\n+\n+        for (final Header header : headers) {\n+            this.headers.put(formatKey(header.getName()), header);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a {@link Header header} with the given name and value or append the {@code value} separated by {@code comma}\n+     * if the {@link Header} exists for given {@code name}.\n+     *\n+     * @param name the name\n+     * @param value the value\n+     * @return The updated ClientOptions object\n+     *\n+     * @throws NullPointerException if {@code name} or {@code value} is null.\n+     */\n+    public ClientOptions addHeader(String name, String value) {\n+        Objects.requireNonNull(name, \"'name' cannot be null.\");\n+        Objects.requireNonNull(value, \"'value' cannot be null.\");\n+\n+        Header existing = get(name);\n+        if (existing == null) {\n+            this.headers.put(formatKey(name), new Header(name, value));\n+        } else {\n+            existing.addValue(value);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the {@link Header header} for the provided header name. {@code Null} is returned if the header isn't\n+     * found.\n+     *\n+     * @param name the name of the header to find.\n+     * @return the header if found, null otherwise.\n+     *\n+     * @throws NullPointerException if {@code name} is null.\n+     */\n+    public Header get(String name) {\n+        Objects.requireNonNull(name, \"'name' cannot be null.\");\n+\n+        return headers.get(formatKey(name));\n+    }\n+\n+    /**\n+     * Removes the {@link Header header} with the provided header name. {@code Null} is returned if the header\n+     * isn't found.\n+     *\n+     * @param name the name of the header to remove.\n+     * @return the header if removed, null otherwise.\n+     *\n+     * @throws NullPointerException if {@code name} is null.\n+     */\n+    public Header remove(String name) {\n+        Objects.requireNonNull(name, \"'name' cannot be null.\");\n+\n+        return headers.remove(formatKey(name));\n+    }\n+\n+    /**\n+     * Get the value for the provided header name. {@code Null} is returned if the header name isn't found.\n+     *\n+     * @param name the name of the header whose value is being retrieved.\n+     * @return the value of the header, or null if the header isn't found\n+     *\n+     * @throws NullPointerException if {@code name} is null.\n+     */\n+    public String getValue(String name) {\n+        final Header header = get(name);\n+        return header == null ? null : header.getValue();\n+    }\n+\n+    /**\n+     * Get the values for the provided header name. {@code Null} is returned if the header name isn't found.\n+     *\n+     * <p>This returns {@link #getValue(String) getValue} split by {@code comma}.</p>\n+     *\n+     * @param name the name of the header whose value is being retrieved.\n+     * @return the values of the header, or null if the header isn't found\n+     */\n+    public String[] getValues(String name) {\n+        final Header header = get(name);\n+        return header == null ? null : header.getValues();\n+    }\n+\n+    /**\n+     * Gets a {@link Map} representation of the {@link Header} collection. The keys are {@link Header#getName()} in the\n+     * given {@link Header}.\n+     *\n+     * @return the headers as map\n+     */\n+    public Map<String, Header> toMap() {\n+        return headers;\n+    }\n+\n+    private String formatKey(final String key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8eba360cf7f9a50317846eed57eef6fcc48b1e1"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTE4MjE4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/CoreUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODowNzo0NFrOHHXvVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODowNzo0NFrOHHXvVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ5MTAzMQ==", "bodyText": "You can use ternary operators to make these more readable. I was trying to understand the assignments.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r477491031", "createdAt": "2020-08-26T18:07:44Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/CoreUtils.java", "diffHunk": "@@ -249,4 +251,32 @@ public static String bomAwareToString(byte[] bytes, String contentType) {\n             }\n         }\n     }\n+\n+    /**\n+     * Prioritize {@code applicationId} set in ClientOptions over {@link HttpLogOptions}.\n+     *\n+     * @param logOptions provided {@link HttpLogOptions}.\n+     * @param clientOptions provided {@link ClientOptions}.\n+     * {@code applicationId} is different in {@link HttpLogOptions} and {@link ClientOptions}.\n+     * @return applicationId based on rule explained above.\n+     *\n+     */\n+    public static String getApplicationId(HttpLogOptions logOptions, ClientOptions clientOptions) {\n+\n+        String applicationId;\n+        String logApplicationId = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8eba360cf7f9a50317846eed57eef6fcc48b1e1"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTE4MzMwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/CoreUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODowNzo1OFrOHHXwAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODowNzo1OFrOHHXwAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ5MTIwMg==", "bodyText": "this can just be returned from the ternary operator.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r477491202", "createdAt": "2020-08-26T18:07:58Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/CoreUtils.java", "diffHunk": "@@ -249,4 +251,32 @@ public static String bomAwareToString(byte[] bytes, String contentType) {\n             }\n         }\n     }\n+\n+    /**\n+     * Prioritize {@code applicationId} set in ClientOptions over {@link HttpLogOptions}.\n+     *\n+     * @param logOptions provided {@link HttpLogOptions}.\n+     * @param clientOptions provided {@link ClientOptions}.\n+     * {@code applicationId} is different in {@link HttpLogOptions} and {@link ClientOptions}.\n+     * @return applicationId based on rule explained above.\n+     *\n+     */\n+    public static String getApplicationId(HttpLogOptions logOptions, ClientOptions clientOptions) {\n+\n+        String applicationId;\n+        String logApplicationId = null;\n+        String clientApplicationId = null;\n+\n+        if (logOptions != null) {\n+            logApplicationId = logOptions.getApplicationId();\n+        }\n+        if (clientOptions != null) {\n+            clientApplicationId = clientOptions.getApplicationId();\n+        }\n+\n+        // We prioritize application id sent in ClientOptions.\n+        applicationId = clientApplicationId != null ? clientApplicationId : logApplicationId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8eba360cf7f9a50317846eed57eef6fcc48b1e1"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTE4NDM5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODowODoxN1rOHHXwtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOTo0MjoxMFrOHHbE3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ5MTM4Mg==", "bodyText": "final?Or can this be changed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r477491382", "createdAt": "2020-08-26T18:08:17Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+/**\n+ * A single header within for a request.\n+ *\n+ * If multiple header values are added to a request or response with\n+ * the same name (case-insensitive), then the values will be appended\n+ * to the end of the same Header with commas separating them.\n+ */\n+public class Header {\n+    private final String name;\n+    private String value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8eba360cf7f9a50317846eed57eef6fcc48b1e1"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU0NTY5NA==", "bodyText": "can be changed in addValue", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r477545694", "createdAt": "2020-08-26T19:42:10Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+/**\n+ * A single header within for a request.\n+ *\n+ * If multiple header values are added to a request or response with\n+ * the same name (case-insensitive), then the values will be appended\n+ * to the end of the same Header with commas separating them.\n+ */\n+public class Header {\n+    private final String name;\n+    private String value;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ5MTM4Mg=="}, "originalCommit": {"oid": "e8eba360cf7f9a50317846eed57eef6fcc48b1e1"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTE4NTMwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODowODoyOVrOHHXxPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOTo0MToyM1rOHHbDPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ5MTUxOQ==", "bodyText": "Can header name and value be null?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r477491519", "createdAt": "2020-08-26T18:08:29Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+/**\n+ * A single header within for a request.\n+ *\n+ * If multiple header values are added to a request or response with\n+ * the same name (case-insensitive), then the values will be appended\n+ * to the end of the same Header with commas separating them.\n+ */\n+public class Header {\n+    private final String name;\n+    private String value;\n+\n+    /**\n+     * Create a Header instance using the provided name and value.\n+     *\n+     * @param name the name\n+     * @param value the value\n+     */\n+    public Header(String name, String value) {\n+        this.name = name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8eba360cf7f9a50317846eed57eef6fcc48b1e1"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU0NTI3Nw==", "bodyText": "Should not be null. But HttpHeaderTest have a  unit test test where null value is allowed.\nSo I am allowing null value. But adding check for name can not be null.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r477545277", "createdAt": "2020-08-26T19:41:23Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+/**\n+ * A single header within for a request.\n+ *\n+ * If multiple header values are added to a request or response with\n+ * the same name (case-insensitive), then the values will be appended\n+ * to the end of the same Header with commas separating them.\n+ */\n+public class Header {\n+    private final String name;\n+    private String value;\n+\n+    /**\n+     * Create a Header instance using the provided name and value.\n+     *\n+     * @param name the name\n+     * @param value the value\n+     */\n+    public Header(String name, String value) {\n+        this.name = name;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ5MTUxOQ=="}, "originalCommit": {"oid": "e8eba360cf7f9a50317846eed57eef6fcc48b1e1"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTE4ODc2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/test/java/com/azure/core/util/CoreUtilsTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODowOTozOVrOHHXzlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODowOTozOVrOHHXzlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ5MjExOQ==", "bodyText": "If you name \"validateApplicationId\" parameter the same as the test method name, you don't need to specify it. The framework can infer what the arguments are. And you can use @methodSource", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r477492119", "createdAt": "2020-08-26T18:09:39Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core/src/test/java/com/azure/core/util/CoreUtilsTests.java", "diffHunk": "@@ -75,6 +76,20 @@ public void bomAwareToString(byte[] bytes, String contentType, String expected)\n         assertEquals(expected, CoreUtils.bomAwareToString(bytes, contentType));\n     }\n \n+    @ParameterizedTest\n+    @MethodSource(\"validApplicationId\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8eba360cf7f9a50317846eed57eef6fcc48b1e1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzE1NTM0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/CoreUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzo0MjowN1rOHKCSNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzo0MjowN1rOHKCSNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4NTIzOA==", "bodyText": "This will throw NPE if logOptions is null.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r480285238", "createdAt": "2020-08-31T17:42:07Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/CoreUtils.java", "diffHunk": "@@ -249,4 +251,24 @@ public static String bomAwareToString(byte[] bytes, String contentType) {\n             }\n         }\n     }\n+\n+    /**\n+     * Prioritize {@code applicationId} set in ClientOptions over {@link HttpLogOptions}.\n+     *\n+     * @param logOptions provided {@link HttpLogOptions}.\n+     * @param clientOptions provided {@link ClientOptions}.\n+     * @return applicationId based on rule explained above.\n+     *\n+     */\n+    public static String getApplicationId(HttpLogOptions logOptions, ClientOptions clientOptions) {\n+\n+        String clientApplicationId = null;\n+\n+        if (clientOptions != null) {\n+            clientApplicationId = clientOptions.getApplicationId();\n+        }\n+\n+        // We prioritize application id sent in ClientOptions.\n+        return clientApplicationId != null ? clientApplicationId : logOptions.getApplicationId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2429ce2f346184d7b7c896b7549ef3ebdd8d85"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzM5MjI4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/CoreUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzo1MjozOVrOHMP5LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzo1MjozOVrOHMP5LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwNTM1Nw==", "bodyText": "What is using this logger? I see it is a newly added property but no new code uses it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r482605357", "createdAt": "2020-09-02T23:52:39Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/CoreUtils.java", "diffHunk": "@@ -29,6 +30,7 @@\n  * This class contains utility methods useful for building client libraries.\n  */\n public final class CoreUtils {\n+    private static final ClientLogger LOGGER = new ClientLogger(CoreUtils.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2429ce2f346184d7b7c896b7549ef3ebdd8d85"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzM5MzgyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzo1MzozMlrOHMP6EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo1NjozNFrOHMap-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwNTU4NA==", "bodyText": "If value is null does this return name: or name:null?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r482605584", "createdAt": "2020-09-02T23:53:32Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java", "diffHunk": "@@ -0,0 +1,79 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A single header within for a request.\n+ *\n+ * If multiple header values are added to a request or response with\n+ * the same name (case-insensitive), then the values will be appended\n+ * to the end of the same Header with commas separating them.\n+ */\n+public class Header {\n+    private final String name;\n+    private String value;\n+\n+    /**\n+     * Create a Header instance using the provided name and value.\n+     *\n+     * @param name the name\n+     * @param value the value\n+     * @throws NullPointerException if {@code name} or {@code value} is null.\n+     */\n+    public Header(String name, String value) {\n+        Objects.requireNonNull(name, \"'name' cannot be null.\");\n+        this.name = name;\n+        this.value = value;\n+    }\n+\n+    /**\n+     * Get the header name.\n+     *\n+     * @return the name of this Header\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Get the header value.\n+     *\n+     * @return the value of this Header\n+     */\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    /**\n+     * Get the comma separated value as an array.\n+     *\n+     * @return the values of this Header that are separated by a comma\n+     */\n+    public String[] getValues() {\n+        return value == null ? null : value.split(\",\");\n+    }\n+\n+    /**\n+     * Add a new value to the end of the Header.\n+     *\n+     * @param value the value to add\n+     * @throws NullPointerException if {@code value} is null.\n+     */\n+    public void addValue(String value) {\n+        Objects.requireNonNull(value, \"'value' cannot be null.\");\n+        this.value += \",\" + value;\n+    }\n+\n+    /**\n+     * Get the String representation of the header.\n+     *\n+     * @return the String representation of this Header.\n+     */\n+    @Override\n+    public String toString() {\n+        return name + \":\" + value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2429ce2f346184d7b7c896b7549ef3ebdd8d85"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc4MTY5MQ==", "bodyText": "It should show name:null, Same way how HttpHeader shows.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r482781691", "createdAt": "2020-09-03T07:56:34Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java", "diffHunk": "@@ -0,0 +1,79 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A single header within for a request.\n+ *\n+ * If multiple header values are added to a request or response with\n+ * the same name (case-insensitive), then the values will be appended\n+ * to the end of the same Header with commas separating them.\n+ */\n+public class Header {\n+    private final String name;\n+    private String value;\n+\n+    /**\n+     * Create a Header instance using the provided name and value.\n+     *\n+     * @param name the name\n+     * @param value the value\n+     * @throws NullPointerException if {@code name} or {@code value} is null.\n+     */\n+    public Header(String name, String value) {\n+        Objects.requireNonNull(name, \"'name' cannot be null.\");\n+        this.name = name;\n+        this.value = value;\n+    }\n+\n+    /**\n+     * Get the header name.\n+     *\n+     * @return the name of this Header\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Get the header value.\n+     *\n+     * @return the value of this Header\n+     */\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    /**\n+     * Get the comma separated value as an array.\n+     *\n+     * @return the values of this Header that are separated by a comma\n+     */\n+    public String[] getValues() {\n+        return value == null ? null : value.split(\",\");\n+    }\n+\n+    /**\n+     * Add a new value to the end of the Header.\n+     *\n+     * @param value the value to add\n+     * @throws NullPointerException if {@code value} is null.\n+     */\n+    public void addValue(String value) {\n+        Objects.requireNonNull(value, \"'value' cannot be null.\");\n+        this.value += \",\" + value;\n+    }\n+\n+    /**\n+     * Get the String representation of the header.\n+     *\n+     * @return the String representation of this Header.\n+     */\n+    @Override\n+    public String toString() {\n+        return name + \":\" + value;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwNTU4NA=="}, "originalCommit": {"oid": "ea2429ce2f346184d7b7c896b7549ef3ebdd8d85"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzM5OTAwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzo1NjowN1rOHMP9DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMToxMDoxOFrOHMRpPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwNjM0OQ==", "bodyText": "Mind giving an example on how this class would be used? Is it expected to be passed during the construction of an SDK client or for each service call made?\nRight now, UserAgentPolicy has an immutable User-Agent string, so it feels like this would be passed during client construction only?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r482606349", "createdAt": "2020-09-02T23:56:07Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -0,0 +1,78 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.ArrayList;\n+import java.util.Objects;\n+\n+/**\n+ * Client Options for setting common properties for example applicationId. Most of these properties are applied on\n+ * request being send to Azure Service but some could be used for other purpose also for example applicationId could be\n+ * used for telemetry.\n+ */\n+@Fluent\n+public final class ClientOptions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2429ce2f346184d7b7c896b7549ef3ebdd8d85"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYzNDA0Nw==", "bodyText": "This would be set  in Builder and client creation time.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r482634047", "createdAt": "2020-09-03T01:10:18Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -0,0 +1,78 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.ArrayList;\n+import java.util.Objects;\n+\n+/**\n+ * Client Options for setting common properties for example applicationId. Most of these properties are applied on\n+ * request being send to Azure Service but some could be used for other purpose also for example applicationId could be\n+ * used for telemetry.\n+ */\n+@Fluent\n+public final class ClientOptions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwNjM0OQ=="}, "originalCommit": {"oid": "ea2429ce2f346184d7b7c896b7549ef3ebdd8d85"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTk1MDM3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/CoreUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMDoxMDo1N1rOHM7UrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMTo1MTowMVrOHQu1Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxNjkwOA==", "bodyText": "I'm not fond of having this in our public API", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r483316908", "createdAt": "2020-09-04T00:10:57Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/CoreUtils.java", "diffHunk": "@@ -249,4 +250,28 @@ public static String bomAwareToString(byte[] bytes, String contentType) {\n             }\n         }\n     }\n+\n+    /**\n+     * Prioritize {@code applicationId} set in ClientOptions over {@link HttpLogOptions}.\n+     *\n+     * @param logOptions provided {@link HttpLogOptions}.\n+     * @param clientOptions provided {@link ClientOptions}.\n+     * @return applicationId based on rule explained above.\n+     *\n+     */\n+    public static String getApplicationId(HttpLogOptions logOptions, ClientOptions clientOptions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0acee537a9a527a543641b04763a40f51cd60a1"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMwNjU3NA==", "bodyText": "removed this public API.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r487306574", "createdAt": "2020-09-11T21:51:01Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/CoreUtils.java", "diffHunk": "@@ -249,4 +250,28 @@ public static String bomAwareToString(byte[] bytes, String contentType) {\n             }\n         }\n     }\n+\n+    /**\n+     * Prioritize {@code applicationId} set in ClientOptions over {@link HttpLogOptions}.\n+     *\n+     * @param logOptions provided {@link HttpLogOptions}.\n+     * @param clientOptions provided {@link ClientOptions}.\n+     * @return applicationId based on rule explained above.\n+     *\n+     */\n+    public static String getApplicationId(HttpLogOptions logOptions, ClientOptions clientOptions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxNjkwOA=="}, "originalCommit": {"oid": "f0acee537a9a527a543641b04763a40f51cd60a1"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDY5NDUwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMTo1MjowMlrOHRBghA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMTo1MjowMlrOHRBghA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYxMjU0OA==", "bodyText": "This javadoc could be improved.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r487612548", "createdAt": "2020-09-14T01:52:02Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -0,0 +1,78 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.ArrayList;\n+import java.util.Objects;\n+\n+/**\n+ * Client Options for setting common properties for example applicationId. Most of these properties are applied on\n+ * request being send to Azure Service but some could be used for other purpose also for example applicationId could be\n+ * used for telemetry. This class is used by user to set these properties at the time of building the client.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0f1d0066609cf50f27217f9630bfe5701cd8e5a"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDY5NTU5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMTo1MzowN1rOHRBhPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMTo1MzowN1rOHRBhPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYxMjczMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Sets the provided headers.\n          \n          \n            \n                 * Sets the provided headers, overwriting all previously-set headers in the process.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r487612732", "createdAt": "2020-09-14T01:53:07Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -0,0 +1,78 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.ArrayList;\n+import java.util.Objects;\n+\n+/**\n+ * Client Options for setting common properties for example applicationId. Most of these properties are applied on\n+ * request being send to Azure Service but some could be used for other purpose also for example applicationId could be\n+ * used for telemetry. This class is used by user to set these properties at the time of building the client.\n+ */\n+@Fluent\n+public final class ClientOptions {\n+    private static final int MAX_APPLICATION_ID_LENGTH = 24;\n+    private final ClientLogger logger = new ClientLogger(ClientOptions.class);\n+    private Iterable<Header> headers = new ArrayList<>();\n+\n+    private String applicationId;\n+\n+    /**\n+     * Gets the applicationId.\n+     * @return The applicationId.\n+     */\n+    public String getApplicationId() {\n+        return applicationId;\n+    }\n+\n+    /**\n+     * Sets the applicationId provided.\n+     * @param applicationId to be set.\n+     *\n+     * @return updated {@link ClientOptions}.\n+     */\n+    public ClientOptions setApplicationId(String applicationId) {\n+\n+        if (CoreUtils.isNullOrEmpty(applicationId)) {\n+            return this;\n+        }\n+\n+        if (applicationId.length() > MAX_APPLICATION_ID_LENGTH) {\n+            throw logger\n+                .logExceptionAsError(new IllegalArgumentException(\"'applicationId' length cannot be greater than \"\n+                    + MAX_APPLICATION_ID_LENGTH));\n+        } else if (applicationId.contains(\" \")) {\n+            throw logger\n+                .logExceptionAsError(new IllegalArgumentException(\"'applicationId' must not contain a space.\"));\n+        } else {\n+            this.applicationId = applicationId;\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the provided headers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0f1d0066609cf50f27217f9630bfe5701cd8e5a"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDY5NjEzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMTo1MzozN1rOHRBhiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMTo1MzozN1rOHRBhiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYxMjgwOQ==", "bodyText": "You might want to consider making this lazily instantiated", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r487612809", "createdAt": "2020-09-14T01:53:37Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -0,0 +1,78 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.ArrayList;\n+import java.util.Objects;\n+\n+/**\n+ * Client Options for setting common properties for example applicationId. Most of these properties are applied on\n+ * request being send to Azure Service but some could be used for other purpose also for example applicationId could be\n+ * used for telemetry. This class is used by user to set these properties at the time of building the client.\n+ */\n+@Fluent\n+public final class ClientOptions {\n+    private static final int MAX_APPLICATION_ID_LENGTH = 24;\n+    private final ClientLogger logger = new ClientLogger(ClientOptions.class);\n+    private Iterable<Header> headers = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0f1d0066609cf50f27217f9630bfe5701cd8e5a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDY5NzMwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMTo1NDoyOVrOHRBiLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNToxNTo0OVrOHRZ-Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYxMjk3Mw==", "bodyText": "Once the applicationId is set, this seems to prevent it ever being reset? If that is desirable (which I don't think it is), then it is not documented.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r487612973", "createdAt": "2020-09-14T01:54:29Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -0,0 +1,78 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.ArrayList;\n+import java.util.Objects;\n+\n+/**\n+ * Client Options for setting common properties for example applicationId. Most of these properties are applied on\n+ * request being send to Azure Service but some could be used for other purpose also for example applicationId could be\n+ * used for telemetry. This class is used by user to set these properties at the time of building the client.\n+ */\n+@Fluent\n+public final class ClientOptions {\n+    private static final int MAX_APPLICATION_ID_LENGTH = 24;\n+    private final ClientLogger logger = new ClientLogger(ClientOptions.class);\n+    private Iterable<Header> headers = new ArrayList<>();\n+\n+    private String applicationId;\n+\n+    /**\n+     * Gets the applicationId.\n+     * @return The applicationId.\n+     */\n+    public String getApplicationId() {\n+        return applicationId;\n+    }\n+\n+    /**\n+     * Sets the applicationId provided.\n+     * @param applicationId to be set.\n+     *\n+     * @return updated {@link ClientOptions}.\n+     */\n+    public ClientOptions setApplicationId(String applicationId) {\n+\n+        if (CoreUtils.isNullOrEmpty(applicationId)) {\n+            return this;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0f1d0066609cf50f27217f9630bfe5701cd8e5a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxMzM3NA==", "bodyText": "Changed it , so that user can reset applicationId.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r488013374", "createdAt": "2020-09-14T15:15:49Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -0,0 +1,78 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.ArrayList;\n+import java.util.Objects;\n+\n+/**\n+ * Client Options for setting common properties for example applicationId. Most of these properties are applied on\n+ * request being send to Azure Service but some could be used for other purpose also for example applicationId could be\n+ * used for telemetry. This class is used by user to set these properties at the time of building the client.\n+ */\n+@Fluent\n+public final class ClientOptions {\n+    private static final int MAX_APPLICATION_ID_LENGTH = 24;\n+    private final ClientLogger logger = new ClientLogger(ClientOptions.class);\n+    private Iterable<Header> headers = new ArrayList<>();\n+\n+    private String applicationId;\n+\n+    /**\n+     * Gets the applicationId.\n+     * @return The applicationId.\n+     */\n+    public String getApplicationId() {\n+        return applicationId;\n+    }\n+\n+    /**\n+     * Sets the applicationId provided.\n+     * @param applicationId to be set.\n+     *\n+     * @return updated {@link ClientOptions}.\n+     */\n+    public ClientOptions setApplicationId(String applicationId) {\n+\n+        if (CoreUtils.isNullOrEmpty(applicationId)) {\n+            return this;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYxMjk3Mw=="}, "originalCommit": {"oid": "f0f1d0066609cf50f27217f9630bfe5701cd8e5a"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDY5OTE4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMTo1NTo1NlrOHRBjQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMTo1NTo1NlrOHRBjQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYxMzI0OQ==", "bodyText": "Please be sure to review all JavaDoc to ensure it is readable.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r487613249", "createdAt": "2020-09-14T01:55:56Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java", "diffHunk": "@@ -0,0 +1,79 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A single header within for a request.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0f1d0066609cf50f27217f9630bfe5701cd8e5a"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDcwMTkwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMTo1Nzo1M1rOHRBkyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNTo0MDozN1rOHRbMKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYxMzY0Mw==", "bodyText": "This says there is a NPE for a null value, but the code doesn't check for that.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r487613643", "createdAt": "2020-09-14T01:57:53Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java", "diffHunk": "@@ -0,0 +1,79 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A single header within for a request.\n+ *\n+ * If multiple header values are added to a request or response with\n+ * the same name (case-insensitive), then the values will be appended\n+ * to the end of the same Header with commas separating them.\n+ */\n+public class Header {\n+    private final String name;\n+    private String value;\n+\n+    /**\n+     * Create a Header instance using the provided name and value.\n+     *\n+     * @param name the name\n+     * @param value the value\n+     * @throws NullPointerException if {@code name} or {@code value} is null.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0f1d0066609cf50f27217f9630bfe5701cd8e5a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAzMzMyMA==", "bodyText": "Removing {@code value} from javadoc. We have one year old test which allow null value. So I am not changing that behavior.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r488033320", "createdAt": "2020-09-14T15:40:37Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java", "diffHunk": "@@ -0,0 +1,79 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A single header within for a request.\n+ *\n+ * If multiple header values are added to a request or response with\n+ * the same name (case-insensitive), then the values will be appended\n+ * to the end of the same Header with commas separating them.\n+ */\n+public class Header {\n+    private final String name;\n+    private String value;\n+\n+    /**\n+     * Create a Header instance using the provided name and value.\n+     *\n+     * @param name the name\n+     * @param value the value\n+     * @throws NullPointerException if {@code name} or {@code value} is null.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYxMzY0Mw=="}, "originalCommit": {"oid": "f0f1d0066609cf50f27217f9630bfe5701cd8e5a"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDcwNzc4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMjowMTozNlrOHRBoGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMjowMTozNlrOHRBoGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYxNDQ4OQ==", "bodyText": "Another JavaDoc to flesh out, especially before it gets replicated across all libraries.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r487614489", "createdAt": "2020-09-14T02:01:36Z", "author": {"login": "JonathanGiles"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -95,6 +97,18 @@\n     public ServiceBusClientBuilder() {\n     }\n \n+    /**\n+     * Sets various options on the client for example applicationId.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0f1d0066609cf50f27217f9630bfe5701cd8e5a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDkyNjY3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMjoyMTo0MFrOHRpIPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzowMDoyMVrOHRqhRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI2MTY5NA==", "bodyText": "Rather than return a new arraylist - just return an empty iterable, e.g. return Collections.emptyList();", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r488261694", "createdAt": "2020-09-14T22:21:40Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -73,6 +74,9 @@ public ClientOptions setHeaders(Iterable<Header> headers) {\n      * @return the headers.\n      */\n     public Iterable<Header> getHeaders() {\n+        if (headers == null) {\n+            headers = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ed969a30407d8a55caa933d6cfd43c7b139cbc"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4NDQ4Ng==", "bodyText": "Yeah, this creates a new instance of ArrayList each time. Instead, using Collections.emptyList() will return a static singleton list instance.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r488284486", "createdAt": "2020-09-14T23:00:21Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -73,6 +74,9 @@ public ClientOptions setHeaders(Iterable<Header> headers) {\n      * @return the headers.\n      */\n     public Iterable<Header> getHeaders() {\n+        if (headers == null) {\n+            headers = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI2MTY5NA=="}, "originalCommit": {"oid": "a8ed969a30407d8a55caa933d6cfd43c7b139cbc"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTA3OTQzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/HttpHeader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMjo1NTo1NFrOHRqbUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDozNjoxNFrOHRsQmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4Mjk2MQ==", "bodyText": "Can this be made final?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r488282961", "createdAt": "2020-09-14T22:55:54Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/HttpHeader.java", "diffHunk": "@@ -3,16 +3,16 @@\n \n package com.azure.core.http;\n \n+import com.azure.core.util.Header;\n+\n /**\n  * A single header within a HTTP request or response.\n  *\n  * If multiple header values are added to a HTTP request or response with\n  * the same name (case-insensitive), then the values will be appended\n  * to the end of the same Header with commas separating them.\n  */\n-public class HttpHeader {\n-    private final String name;\n-    private String value;\n+public class HttpHeader extends Header {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7826049a0b279d97cba5eed2df095b3138b56f67"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxMjk4Nw==", "bodyText": "Spoke to Jonathan, This is API change and we can not do it now.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r488312987", "createdAt": "2020-09-15T00:36:14Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/HttpHeader.java", "diffHunk": "@@ -3,16 +3,16 @@\n \n package com.azure.core.http;\n \n+import com.azure.core.util.Header;\n+\n /**\n  * A single header within a HTTP request or response.\n  *\n  * If multiple header values are added to a HTTP request or response with\n  * the same name (case-insensitive), then the values will be appended\n  * to the end of the same Header with commas separating them.\n  */\n-public class HttpHeader {\n-    private final String name;\n-    private String value;\n+public class HttpHeader extends Header {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4Mjk2MQ=="}, "originalCommit": {"oid": "7826049a0b279d97cba5eed2df095b3138b56f67"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTA4NTY3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMjo1ODo0NFrOHRqe7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMjo1ODo0NFrOHRqe7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4Mzg4Ng==", "bodyText": "I would be more direct:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @deprecated deprecated in favor of {@link ClientOptions#getApplicationId()}\n          \n          \n            \n                 * @deprecated Use {@link ClientOptions} to configured {@code applicationId}.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r488283886", "createdAt": "2020-09-14T22:58:44Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java", "diffHunk": "@@ -158,7 +159,9 @@ public HttpLogOptions addAllowedQueryParamName(final String allowedQueryParamNam\n      * Gets the application specific id.\n      *\n      * @return The application specific id.\n+     * @deprecated deprecated in favor of {@link ClientOptions#getApplicationId()}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7826049a0b279d97cba5eed2df095b3138b56f67"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTA4NjU3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMjo1OTowNFrOHRqfaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMjo1OTowNFrOHRqfaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4NDAxMQ==", "bodyText": "Same comment\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @deprecated deprecated in favor of {@link ClientOptions#setApplicationId(String)}\n          \n          \n            \n                 * @deprecated Use {@link ClientOptions} to configured {@code applicationId}.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r488284011", "createdAt": "2020-09-14T22:59:04Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java", "diffHunk": "@@ -168,7 +171,9 @@ public String getApplicationId() {\n      *\n      * @param applicationId The user specified application id.\n      * @return The updated HttpLogOptions object.\n+     * @deprecated deprecated in favor of {@link ClientOptions#setApplicationId(String)}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7826049a0b279d97cba5eed2df095b3138b56f67"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTA4OTMwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzowMDowNVrOHRqg4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzowMDowNVrOHRqg4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4NDM4NQ==", "bodyText": "I think we should leave the second sentence out if we ever want to use this in different ways. It also doesn't add much explanation about the usage of this class.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r488284385", "createdAt": "2020-09-14T23:00:05Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+\n+import java.util.ArrayList;\n+import java.util.Objects;\n+\n+/**\n+ * This class represents various options to be set on the client. It is set on the builder at the time of building the\n+ * client.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7826049a0b279d97cba5eed2df095b3138b56f67"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTA5NDYyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzowMjozOFrOHRqj_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDo0NzowOFrOHRsdAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4NTE4Mg==", "bodyText": "Any reason to require the user to set the entire Iterable rather than offering a setHeaders(Header...), or setHeaders(Iterable<Header>), and addHeader(Header) operators? I feel this will lead to a lot of situations where the user will need to use Collections.singletonList().", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r488285182", "createdAt": "2020-09-14T23:02:38Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+\n+import java.util.ArrayList;\n+import java.util.Objects;\n+\n+/**\n+ * This class represents various options to be set on the client. It is set on the builder at the time of building the\n+ * client.\n+ * <p>\n+ * The {@link Header} could be set using {@link ClientOptions#setHeaders(Iterable) setHeaders}. The {@link Header} will\n+ * be applied on the request being sent to Azure Service.\n+ * <p>\n+ * The {@code applicationId} could be set using {@link ClientOptions#setApplicationId(String) setApplicationId} which\n+ * is used for setting {@code applicationId} in the {@link UserAgentPolicy}.\n+ */\n+@Fluent\n+public final class ClientOptions {\n+    private static final int MAX_APPLICATION_ID_LENGTH = 24;\n+    private final ClientLogger logger = new ClientLogger(ClientOptions.class);\n+    private Iterable<Header> headers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7826049a0b279d97cba5eed2df095b3138b56f67"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNjE2MA==", "bodyText": "I had this specific discussion with @srnagar .  Earlier in the PR I did had addHeader(name, value), remove(name), getValue(name) API but the argument against this was 1. This class is not equivalent of HttpHeaders  2. This is not primary way to add the Headers . We do not want every time user create a client, they have to set a Header here.  It is kind of hidden, user use them in special cases.  So need to add these additional API is not so strong. But in future if we see usage pattern like this, we can add additional API.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r488316160", "createdAt": "2020-09-15T00:47:08Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+\n+import java.util.ArrayList;\n+import java.util.Objects;\n+\n+/**\n+ * This class represents various options to be set on the client. It is set on the builder at the time of building the\n+ * client.\n+ * <p>\n+ * The {@link Header} could be set using {@link ClientOptions#setHeaders(Iterable) setHeaders}. The {@link Header} will\n+ * be applied on the request being sent to Azure Service.\n+ * <p>\n+ * The {@code applicationId} could be set using {@link ClientOptions#setApplicationId(String) setApplicationId} which\n+ * is used for setting {@code applicationId} in the {@link UserAgentPolicy}.\n+ */\n+@Fluent\n+public final class ClientOptions {\n+    private static final int MAX_APPLICATION_ID_LENGTH = 24;\n+    private final ClientLogger logger = new ClientLogger(ClientOptions.class);\n+    private Iterable<Header> headers;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4NTE4Mg=="}, "originalCommit": {"oid": "7826049a0b279d97cba5eed2df095b3138b56f67"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTA5NTc3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzowMzoxNFrOHRqkxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzowMzoxNFrOHRqkxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4NTM4Mg==", "bodyText": "Need to add a @throws Javadoc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r488285382", "createdAt": "2020-09-14T23:03:14Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+\n+import java.util.ArrayList;\n+import java.util.Objects;\n+\n+/**\n+ * This class represents various options to be set on the client. It is set on the builder at the time of building the\n+ * client.\n+ * <p>\n+ * The {@link Header} could be set using {@link ClientOptions#setHeaders(Iterable) setHeaders}. The {@link Header} will\n+ * be applied on the request being sent to Azure Service.\n+ * <p>\n+ * The {@code applicationId} could be set using {@link ClientOptions#setApplicationId(String) setApplicationId} which\n+ * is used for setting {@code applicationId} in the {@link UserAgentPolicy}.\n+ */\n+@Fluent\n+public final class ClientOptions {\n+    private static final int MAX_APPLICATION_ID_LENGTH = 24;\n+    private final ClientLogger logger = new ClientLogger(ClientOptions.class);\n+    private Iterable<Header> headers;\n+\n+    private String applicationId;\n+\n+    /**\n+     * Gets the applicationId.\n+     * @return The applicationId.\n+     */\n+    public String getApplicationId() {\n+        return applicationId;\n+    }\n+\n+    /**\n+     * Sets the applicationId provided. It is used for setting {@code applicationId} in the {@link UserAgentPolicy}.\n+     * @param applicationId to be set.\n+     *\n+     * @return updated {@link ClientOptions}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7826049a0b279d97cba5eed2df095b3138b56f67"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTA5ODI2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzowNDozMFrOHRqmMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDoyOTowOVrOHRwGxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4NTc0NA==", "bodyText": "Why do we prevent null here when the getter will return an empty list on null?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r488285744", "createdAt": "2020-09-14T23:04:30Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+\n+import java.util.ArrayList;\n+import java.util.Objects;\n+\n+/**\n+ * This class represents various options to be set on the client. It is set on the builder at the time of building the\n+ * client.\n+ * <p>\n+ * The {@link Header} could be set using {@link ClientOptions#setHeaders(Iterable) setHeaders}. The {@link Header} will\n+ * be applied on the request being sent to Azure Service.\n+ * <p>\n+ * The {@code applicationId} could be set using {@link ClientOptions#setApplicationId(String) setApplicationId} which\n+ * is used for setting {@code applicationId} in the {@link UserAgentPolicy}.\n+ */\n+@Fluent\n+public final class ClientOptions {\n+    private static final int MAX_APPLICATION_ID_LENGTH = 24;\n+    private final ClientLogger logger = new ClientLogger(ClientOptions.class);\n+    private Iterable<Header> headers;\n+\n+    private String applicationId;\n+\n+    /**\n+     * Gets the applicationId.\n+     * @return The applicationId.\n+     */\n+    public String getApplicationId() {\n+        return applicationId;\n+    }\n+\n+    /**\n+     * Sets the applicationId provided. It is used for setting {@code applicationId} in the {@link UserAgentPolicy}.\n+     * @param applicationId to be set.\n+     *\n+     * @return updated {@link ClientOptions}.\n+     */\n+    public ClientOptions setApplicationId(String applicationId) {\n+\n+        if (CoreUtils.isNullOrEmpty(applicationId)) {\n+            this.applicationId = applicationId;\n+            return this;\n+        }\n+\n+        if (applicationId.length() > MAX_APPLICATION_ID_LENGTH) {\n+            throw logger\n+                .logExceptionAsError(new IllegalArgumentException(\"'applicationId' length cannot be greater than \"\n+                    + MAX_APPLICATION_ID_LENGTH));\n+        } else if (applicationId.contains(\" \")) {\n+            throw logger\n+                .logExceptionAsError(new IllegalArgumentException(\"'applicationId' must not contain a space.\"));\n+        } else {\n+            this.applicationId = applicationId;\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the provided headers, overwriting all previously-set headers in the process. It will be applied on the\n+     * request being sent to Azure Service.\n+     * @param headers headers to be set.\n+     *\n+     * @return updated {@link ClientOptions}.\n+     * @throws NullPointerException if {@code headers} is null.\n+     */\n+    public ClientOptions setHeaders(Iterable<Header> headers) {\n+        this.headers = Objects.requireNonNull(headers, \"'headers' cannot be null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7826049a0b279d97cba5eed2df095b3138b56f67"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM3NjAwNA==", "bodyText": "make sense, I will remove this check.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r488376004", "createdAt": "2020-09-15T04:29:09Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+\n+import java.util.ArrayList;\n+import java.util.Objects;\n+\n+/**\n+ * This class represents various options to be set on the client. It is set on the builder at the time of building the\n+ * client.\n+ * <p>\n+ * The {@link Header} could be set using {@link ClientOptions#setHeaders(Iterable) setHeaders}. The {@link Header} will\n+ * be applied on the request being sent to Azure Service.\n+ * <p>\n+ * The {@code applicationId} could be set using {@link ClientOptions#setApplicationId(String) setApplicationId} which\n+ * is used for setting {@code applicationId} in the {@link UserAgentPolicy}.\n+ */\n+@Fluent\n+public final class ClientOptions {\n+    private static final int MAX_APPLICATION_ID_LENGTH = 24;\n+    private final ClientLogger logger = new ClientLogger(ClientOptions.class);\n+    private Iterable<Header> headers;\n+\n+    private String applicationId;\n+\n+    /**\n+     * Gets the applicationId.\n+     * @return The applicationId.\n+     */\n+    public String getApplicationId() {\n+        return applicationId;\n+    }\n+\n+    /**\n+     * Sets the applicationId provided. It is used for setting {@code applicationId} in the {@link UserAgentPolicy}.\n+     * @param applicationId to be set.\n+     *\n+     * @return updated {@link ClientOptions}.\n+     */\n+    public ClientOptions setApplicationId(String applicationId) {\n+\n+        if (CoreUtils.isNullOrEmpty(applicationId)) {\n+            this.applicationId = applicationId;\n+            return this;\n+        }\n+\n+        if (applicationId.length() > MAX_APPLICATION_ID_LENGTH) {\n+            throw logger\n+                .logExceptionAsError(new IllegalArgumentException(\"'applicationId' length cannot be greater than \"\n+                    + MAX_APPLICATION_ID_LENGTH));\n+        } else if (applicationId.contains(\" \")) {\n+            throw logger\n+                .logExceptionAsError(new IllegalArgumentException(\"'applicationId' must not contain a space.\"));\n+        } else {\n+            this.applicationId = applicationId;\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the provided headers, overwriting all previously-set headers in the process. It will be applied on the\n+     * request being sent to Azure Service.\n+     * @param headers headers to be set.\n+     *\n+     * @return updated {@link ClientOptions}.\n+     * @throws NullPointerException if {@code headers} is null.\n+     */\n+    public ClientOptions setHeaders(Iterable<Header> headers) {\n+        this.headers = Objects.requireNonNull(headers, \"'headers' cannot be null.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4NTc0NA=="}, "originalCommit": {"oid": "7826049a0b279d97cba5eed2df095b3138b56f67"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTEwMDA1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzowNToxMlrOHRqnKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzowNToxMlrOHRqnKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4NTk5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Sets the provided headers, overwriting all previously-set headers in the process. It will be applied on the\n          \n          \n            \n                 * Sets the headers, overwriting all previously set headers in the process. It will be applied on the", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r488285993", "createdAt": "2020-09-14T23:05:12Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+\n+import java.util.ArrayList;\n+import java.util.Objects;\n+\n+/**\n+ * This class represents various options to be set on the client. It is set on the builder at the time of building the\n+ * client.\n+ * <p>\n+ * The {@link Header} could be set using {@link ClientOptions#setHeaders(Iterable) setHeaders}. The {@link Header} will\n+ * be applied on the request being sent to Azure Service.\n+ * <p>\n+ * The {@code applicationId} could be set using {@link ClientOptions#setApplicationId(String) setApplicationId} which\n+ * is used for setting {@code applicationId} in the {@link UserAgentPolicy}.\n+ */\n+@Fluent\n+public final class ClientOptions {\n+    private static final int MAX_APPLICATION_ID_LENGTH = 24;\n+    private final ClientLogger logger = new ClientLogger(ClientOptions.class);\n+    private Iterable<Header> headers;\n+\n+    private String applicationId;\n+\n+    /**\n+     * Gets the applicationId.\n+     * @return The applicationId.\n+     */\n+    public String getApplicationId() {\n+        return applicationId;\n+    }\n+\n+    /**\n+     * Sets the applicationId provided. It is used for setting {@code applicationId} in the {@link UserAgentPolicy}.\n+     * @param applicationId to be set.\n+     *\n+     * @return updated {@link ClientOptions}.\n+     */\n+    public ClientOptions setApplicationId(String applicationId) {\n+\n+        if (CoreUtils.isNullOrEmpty(applicationId)) {\n+            this.applicationId = applicationId;\n+            return this;\n+        }\n+\n+        if (applicationId.length() > MAX_APPLICATION_ID_LENGTH) {\n+            throw logger\n+                .logExceptionAsError(new IllegalArgumentException(\"'applicationId' length cannot be greater than \"\n+                    + MAX_APPLICATION_ID_LENGTH));\n+        } else if (applicationId.contains(\" \")) {\n+            throw logger\n+                .logExceptionAsError(new IllegalArgumentException(\"'applicationId' must not contain a space.\"));\n+        } else {\n+            this.applicationId = applicationId;\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the provided headers, overwriting all previously-set headers in the process. It will be applied on the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7826049a0b279d97cba5eed2df095b3138b56f67"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTEwMTU0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzowNTo1NlrOHRqoBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzowNTo1NlrOHRqoBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4NjIxNA==", "bodyText": "I think the second sentence should be made into another paragraph as it is details on how the values passed to the setter will be used.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r488286214", "createdAt": "2020-09-14T23:05:56Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+\n+import java.util.ArrayList;\n+import java.util.Objects;\n+\n+/**\n+ * This class represents various options to be set on the client. It is set on the builder at the time of building the\n+ * client.\n+ * <p>\n+ * The {@link Header} could be set using {@link ClientOptions#setHeaders(Iterable) setHeaders}. The {@link Header} will\n+ * be applied on the request being sent to Azure Service.\n+ * <p>\n+ * The {@code applicationId} could be set using {@link ClientOptions#setApplicationId(String) setApplicationId} which\n+ * is used for setting {@code applicationId} in the {@link UserAgentPolicy}.\n+ */\n+@Fluent\n+public final class ClientOptions {\n+    private static final int MAX_APPLICATION_ID_LENGTH = 24;\n+    private final ClientLogger logger = new ClientLogger(ClientOptions.class);\n+    private Iterable<Header> headers;\n+\n+    private String applicationId;\n+\n+    /**\n+     * Gets the applicationId.\n+     * @return The applicationId.\n+     */\n+    public String getApplicationId() {\n+        return applicationId;\n+    }\n+\n+    /**\n+     * Sets the applicationId provided. It is used for setting {@code applicationId} in the {@link UserAgentPolicy}.\n+     * @param applicationId to be set.\n+     *\n+     * @return updated {@link ClientOptions}.\n+     */\n+    public ClientOptions setApplicationId(String applicationId) {\n+\n+        if (CoreUtils.isNullOrEmpty(applicationId)) {\n+            this.applicationId = applicationId;\n+            return this;\n+        }\n+\n+        if (applicationId.length() > MAX_APPLICATION_ID_LENGTH) {\n+            throw logger\n+                .logExceptionAsError(new IllegalArgumentException(\"'applicationId' length cannot be greater than \"\n+                    + MAX_APPLICATION_ID_LENGTH));\n+        } else if (applicationId.contains(\" \")) {\n+            throw logger\n+                .logExceptionAsError(new IllegalArgumentException(\"'applicationId' must not contain a space.\"));\n+        } else {\n+            this.applicationId = applicationId;\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the provided headers, overwriting all previously-set headers in the process. It will be applied on the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7826049a0b279d97cba5eed2df095b3138b56f67"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTEwMjQ4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/test/java/com/azure/core/util/CoreUtilsTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzowNjoyNFrOHRqojw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzowNjoyNFrOHRqojw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4NjM1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        //                 logOptions, clientOptions, expected\n          \n          \n            \n                        // logOptions, clientOptions, expected", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r488286351", "createdAt": "2020-09-14T23:06:24Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/test/java/com/azure/core/util/CoreUtilsTests.java", "diffHunk": "@@ -91,6 +91,16 @@ public void bomAwareToString(byte[] bytes, String contentType, String expected)\n         );\n     }\n \n+    private static Stream<Arguments> testValidApplicationId() {\n+        return Stream.of(\n+            //                 logOptions, clientOptions, expected", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7826049a0b279d97cba5eed2df095b3138b56f67"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTEwNDcyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzowNzoyMlrOHRqp3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzowNzoyMlrOHRqp3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4NjY4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * It represents a single header for a request being sent to Azure Service.\n          \n          \n            \n             * Represents a single header for a request.\n          \n      \n    \n    \n  \n\nCan drop the Azure bit as it isn't explicitly required for our SDKs to talk to Azure services.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r488286686", "createdAt": "2020-09-14T23:07:22Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java", "diffHunk": "@@ -0,0 +1,78 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.Objects;\n+\n+/**\n+ * It represents a single header for a request being sent to Azure Service.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7826049a0b279d97cba5eed2df095b3138b56f67"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTEwNTI2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzowNzozOFrOHRqqLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzowNzozOFrOHRqqLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4Njc2NA==", "bodyText": "Missing <p> tag.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r488286764", "createdAt": "2020-09-14T23:07:38Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java", "diffHunk": "@@ -0,0 +1,78 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.Objects;\n+\n+/**\n+ * It represents a single header for a request being sent to Azure Service.\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7826049a0b279d97cba5eed2df095b3138b56f67"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTEwNzY1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzowODo1NVrOHRqrrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjozMTo1MFrOHSKOgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4NzE0OA==", "bodyText": "We should see if it is cheaper to store the values as a String[], List<String>, or String. Not required for this PR.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r488287148", "createdAt": "2020-09-14T23:08:55Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java", "diffHunk": "@@ -0,0 +1,78 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.Objects;\n+\n+/**\n+ * It represents a single header for a request being sent to Azure Service.\n+ *\n+ * If multiple header values are added to a request or response with the same name (case-insensitive), then the values\n+ * will be appended at the end of the same {@link Header} with commas separating them.\n+ */\n+public class Header {\n+    private final String name;\n+    private String value;\n+\n+    /**\n+     * Create a Header instance using the provided name and value.\n+     *\n+     * @param name the name\n+     * @param value the value\n+     * @throws NullPointerException if {@code name} is null.\n+     */\n+    public Header(String name, String value) {\n+        Objects.requireNonNull(name, \"'name' cannot be null.\");\n+        this.name = name;\n+        this.value = value;\n+    }\n+\n+    /**\n+     * Gets the header name.\n+     *\n+     * @return the name of this Header\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Gets the header value.\n+     *\n+     * @return the value of this Header\n+     */\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    /**\n+     * Gets the comma separated value as an array.\n+     *\n+     * @return the values of this Header that are separated by a comma\n+     */\n+    public String[] getValues() {\n+        return value == null ? null : value.split(\",\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7826049a0b279d97cba5eed2df095b3138b56f67"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5OTM5Mg==", "bodyText": "This will be moved to a follow-up issue.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r488799392", "createdAt": "2020-09-15T16:24:30Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java", "diffHunk": "@@ -0,0 +1,78 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.Objects;\n+\n+/**\n+ * It represents a single header for a request being sent to Azure Service.\n+ *\n+ * If multiple header values are added to a request or response with the same name (case-insensitive), then the values\n+ * will be appended at the end of the same {@link Header} with commas separating them.\n+ */\n+public class Header {\n+    private final String name;\n+    private String value;\n+\n+    /**\n+     * Create a Header instance using the provided name and value.\n+     *\n+     * @param name the name\n+     * @param value the value\n+     * @throws NullPointerException if {@code name} is null.\n+     */\n+    public Header(String name, String value) {\n+        Objects.requireNonNull(name, \"'name' cannot be null.\");\n+        this.name = name;\n+        this.value = value;\n+    }\n+\n+    /**\n+     * Gets the header name.\n+     *\n+     * @return the name of this Header\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Gets the header value.\n+     *\n+     * @return the value of this Header\n+     */\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    /**\n+     * Gets the comma separated value as an array.\n+     *\n+     * @return the values of this Header that are separated by a comma\n+     */\n+    public String[] getValues() {\n+        return value == null ? null : value.split(\",\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4NzE0OA=="}, "originalCommit": {"oid": "7826049a0b279d97cba5eed2df095b3138b56f67"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgwMzk2OQ==", "bodyText": "#15219", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r488803969", "createdAt": "2020-09-15T16:31:50Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java", "diffHunk": "@@ -0,0 +1,78 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.Objects;\n+\n+/**\n+ * It represents a single header for a request being sent to Azure Service.\n+ *\n+ * If multiple header values are added to a request or response with the same name (case-insensitive), then the values\n+ * will be appended at the end of the same {@link Header} with commas separating them.\n+ */\n+public class Header {\n+    private final String name;\n+    private String value;\n+\n+    /**\n+     * Create a Header instance using the provided name and value.\n+     *\n+     * @param name the name\n+     * @param value the value\n+     * @throws NullPointerException if {@code name} is null.\n+     */\n+    public Header(String name, String value) {\n+        Objects.requireNonNull(name, \"'name' cannot be null.\");\n+        this.name = name;\n+        this.value = value;\n+    }\n+\n+    /**\n+     * Gets the header name.\n+     *\n+     * @return the name of this Header\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Gets the header value.\n+     *\n+     * @return the value of this Header\n+     */\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    /**\n+     * Gets the comma separated value as an array.\n+     *\n+     * @return the values of this Header that are separated by a comma\n+     */\n+    public String[] getValues() {\n+        return value == null ? null : value.split(\",\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4NzE0OA=="}, "originalCommit": {"oid": "7826049a0b279d97cba5eed2df095b3138b56f67"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTEzMjcxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzoyMToyMVrOHRq6Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDo0Mjo0M1rOHRwUZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5MDkxOA==", "bodyText": "It seems like the ctor does not check for null value but addValue does. We should either consistently do the null check.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r488290918", "createdAt": "2020-09-14T23:21:21Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java", "diffHunk": "@@ -0,0 +1,78 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.Objects;\n+\n+/**\n+ * It represents a single header for a request being sent to Azure Service.\n+ *\n+ * If multiple header values are added to a request or response with the same name (case-insensitive), then the values\n+ * will be appended at the end of the same {@link Header} with commas separating them.\n+ */\n+public class Header {\n+    private final String name;\n+    private String value;\n+\n+    /**\n+     * Create a Header instance using the provided name and value.\n+     *\n+     * @param name the name\n+     * @param value the value\n+     * @throws NullPointerException if {@code name} is null.\n+     */\n+    public Header(String name, String value) {\n+        Objects.requireNonNull(name, \"'name' cannot be null.\");\n+        this.name = name;\n+        this.value = value;\n+    }\n+\n+    /**\n+     * Gets the header name.\n+     *\n+     * @return the name of this Header\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Gets the header value.\n+     *\n+     * @return the value of this Header\n+     */\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    /**\n+     * Gets the comma separated value as an array.\n+     *\n+     * @return the values of this Header that are separated by a comma\n+     */\n+    public String[] getValues() {\n+        return value == null ? null : value.split(\",\");\n+    }\n+\n+    /**\n+     * Add a new value to the end of the Header.\n+     *\n+     * @param value the value to add\n+     * @throws NullPointerException if {@code value} is null.\n+     */\n+    public void addValue(String value) {\n+        Objects.requireNonNull(value, \"'value' cannot be null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7826049a0b279d97cba5eed2df095b3138b56f67"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM3OTQ5Mg==", "bodyText": "allowing null value", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r488379492", "createdAt": "2020-09-15T04:42:43Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java", "diffHunk": "@@ -0,0 +1,78 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.Objects;\n+\n+/**\n+ * It represents a single header for a request being sent to Azure Service.\n+ *\n+ * If multiple header values are added to a request or response with the same name (case-insensitive), then the values\n+ * will be appended at the end of the same {@link Header} with commas separating them.\n+ */\n+public class Header {\n+    private final String name;\n+    private String value;\n+\n+    /**\n+     * Create a Header instance using the provided name and value.\n+     *\n+     * @param name the name\n+     * @param value the value\n+     * @throws NullPointerException if {@code name} is null.\n+     */\n+    public Header(String name, String value) {\n+        Objects.requireNonNull(name, \"'name' cannot be null.\");\n+        this.name = name;\n+        this.value = value;\n+    }\n+\n+    /**\n+     * Gets the header name.\n+     *\n+     * @return the name of this Header\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Gets the header value.\n+     *\n+     * @return the value of this Header\n+     */\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    /**\n+     * Gets the comma separated value as an array.\n+     *\n+     * @return the values of this Header that are separated by a comma\n+     */\n+    public String[] getValues() {\n+        return value == null ? null : value.split(\",\");\n+    }\n+\n+    /**\n+     * Add a new value to the end of the Header.\n+     *\n+     * @param value the value to add\n+     * @throws NullPointerException if {@code value} is null.\n+     */\n+    public void addValue(String value) {\n+        Objects.requireNonNull(value, \"'value' cannot be null.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5MDkxOA=="}, "originalCommit": {"oid": "7826049a0b279d97cba5eed2df095b3138b56f67"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTEzNDgxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzoyMjoyNlrOHRq7qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDo0MjoyOVrOHRwUHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5MTI0Mw==", "bodyText": "This can throw NPE if the ctor set the value to null and then trying to concat to the null value.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r488291243", "createdAt": "2020-09-14T23:22:26Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java", "diffHunk": "@@ -0,0 +1,78 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.Objects;\n+\n+/**\n+ * It represents a single header for a request being sent to Azure Service.\n+ *\n+ * If multiple header values are added to a request or response with the same name (case-insensitive), then the values\n+ * will be appended at the end of the same {@link Header} with commas separating them.\n+ */\n+public class Header {\n+    private final String name;\n+    private String value;\n+\n+    /**\n+     * Create a Header instance using the provided name and value.\n+     *\n+     * @param name the name\n+     * @param value the value\n+     * @throws NullPointerException if {@code name} is null.\n+     */\n+    public Header(String name, String value) {\n+        Objects.requireNonNull(name, \"'name' cannot be null.\");\n+        this.name = name;\n+        this.value = value;\n+    }\n+\n+    /**\n+     * Gets the header name.\n+     *\n+     * @return the name of this Header\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Gets the header value.\n+     *\n+     * @return the value of this Header\n+     */\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    /**\n+     * Gets the comma separated value as an array.\n+     *\n+     * @return the values of this Header that are separated by a comma\n+     */\n+    public String[] getValues() {\n+        return value == null ? null : value.split(\",\");\n+    }\n+\n+    /**\n+     * Add a new value to the end of the Header.\n+     *\n+     * @param value the value to add\n+     * @throws NullPointerException if {@code value} is null.\n+     */\n+    public void addValue(String value) {\n+        Objects.requireNonNull(value, \"'value' cannot be null.\");\n+        this.value += \",\" + value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7826049a0b279d97cba5eed2df095b3138b56f67"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM3OTQyMQ==", "bodyText": "removing this null check", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r488379421", "createdAt": "2020-09-15T04:42:29Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java", "diffHunk": "@@ -0,0 +1,78 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.Objects;\n+\n+/**\n+ * It represents a single header for a request being sent to Azure Service.\n+ *\n+ * If multiple header values are added to a request or response with the same name (case-insensitive), then the values\n+ * will be appended at the end of the same {@link Header} with commas separating them.\n+ */\n+public class Header {\n+    private final String name;\n+    private String value;\n+\n+    /**\n+     * Create a Header instance using the provided name and value.\n+     *\n+     * @param name the name\n+     * @param value the value\n+     * @throws NullPointerException if {@code name} is null.\n+     */\n+    public Header(String name, String value) {\n+        Objects.requireNonNull(name, \"'name' cannot be null.\");\n+        this.name = name;\n+        this.value = value;\n+    }\n+\n+    /**\n+     * Gets the header name.\n+     *\n+     * @return the name of this Header\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Gets the header value.\n+     *\n+     * @return the value of this Header\n+     */\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    /**\n+     * Gets the comma separated value as an array.\n+     *\n+     * @return the values of this Header that are separated by a comma\n+     */\n+    public String[] getValues() {\n+        return value == null ? null : value.split(\",\");\n+    }\n+\n+    /**\n+     * Add a new value to the end of the Header.\n+     *\n+     * @param value the value to add\n+     * @throws NullPointerException if {@code value} is null.\n+     */\n+    public void addValue(String value) {\n+        Objects.requireNonNull(value, \"'value' cannot be null.\");\n+        this.value += \",\" + value;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5MTI0Mw=="}, "originalCommit": {"oid": "7826049a0b279d97cba5eed2df095b3138b56f67"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTE0MTQwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/administration/ServiceBusAdministrationClientBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzoyNTozNFrOHRq_iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDo0MDowMFrOHRwRmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5MjIzMg==", "bodyText": "I don't think this is necessary. If we find the app id in ClientOptions, there's no need to check HttpLogOptions at all. App id in ClientOptions will always have higher priority.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r488292232", "createdAt": "2020-09-14T23:25:34Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/administration/ServiceBusAdministrationClientBuilder.java", "diffHunk": "@@ -321,7 +337,26 @@ private HttpPipeline createPipeline() {\n         final String clientName = properties.getOrDefault(\"name\", \"UnknownName\");\n         final String clientVersion = properties.getOrDefault(\"version\", \"UnknownVersion\");\n \n-        httpPolicies.add(new UserAgentPolicy(httpLogOptions.getApplicationId(), clientName, clientVersion,\n+        // Find applicationId to use\n+        String logApplicationId = null;\n+        if (httpLogOptions != null) {\n+            logApplicationId = httpLogOptions.getApplicationId();\n+        }\n+\n+        String clientApplicationId = null;\n+        if (clientOptions != null && clientOptions.getApplicationId() != null) {\n+            clientApplicationId = clientOptions.getApplicationId();\n+        }\n+\n+        if (logApplicationId != null && clientApplicationId != null\n+            && !logApplicationId.equalsIgnoreCase(clientApplicationId)) {\n+            throw logger.logExceptionAsError(new IllegalStateException(\n+                \"'httpLogOptions.getApplicationId() and clientOptions.getApplicationId()' cannot be different.\"));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7826049a0b279d97cba5eed2df095b3138b56f67"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM3ODc3Ng==", "bodyText": "I think we would like to inform client if client has set two separate value in clientOptions.getApplicationId()  and  httpLogOptions.getApplicationId(). This is probably a configuration mistake by user.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r488378776", "createdAt": "2020-09-15T04:40:00Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/administration/ServiceBusAdministrationClientBuilder.java", "diffHunk": "@@ -321,7 +337,26 @@ private HttpPipeline createPipeline() {\n         final String clientName = properties.getOrDefault(\"name\", \"UnknownName\");\n         final String clientVersion = properties.getOrDefault(\"version\", \"UnknownVersion\");\n \n-        httpPolicies.add(new UserAgentPolicy(httpLogOptions.getApplicationId(), clientName, clientVersion,\n+        // Find applicationId to use\n+        String logApplicationId = null;\n+        if (httpLogOptions != null) {\n+            logApplicationId = httpLogOptions.getApplicationId();\n+        }\n+\n+        String clientApplicationId = null;\n+        if (clientOptions != null && clientOptions.getApplicationId() != null) {\n+            clientApplicationId = clientOptions.getApplicationId();\n+        }\n+\n+        if (logApplicationId != null && clientApplicationId != null\n+            && !logApplicationId.equalsIgnoreCase(clientApplicationId)) {\n+            throw logger.logExceptionAsError(new IllegalStateException(\n+                \"'httpLogOptions.getApplicationId() and clientOptions.getApplicationId()' cannot be different.\"));\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5MjIzMg=="}, "originalCommit": {"oid": "7826049a0b279d97cba5eed2df095b3138b56f67"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDA5MTI2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMzo0Mjo0NlrOHSa9mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMzo0Mjo0NlrOHSa9mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA3ODE3MA==", "bodyText": "Typo on 'configured' here and elsewhere.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r489078170", "createdAt": "2020-09-15T23:42:46Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java", "diffHunk": "@@ -159,7 +159,7 @@ public HttpLogOptions addAllowedQueryParamName(final String allowedQueryParamNam\n      * Gets the application specific id.\n      *\n      * @return The application specific id.\n-     * @deprecated deprecated in favor of {@link ClientOptions#getApplicationId()}\n+     * @deprecated Use {@link ClientOptions} to configured {@code applicationId}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ee60c462f05904df365976641fb3bfe9b23bd51"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDA5Mjc3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMzo0MzozOFrOHSa-lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMzo0MzozOFrOHSa-lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA3ODQyMA==", "bodyText": "There is no need for a new paragraph for the second sentence.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r489078420", "createdAt": "2020-09-15T23:43:38Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -64,15 +64,15 @@ public ClientOptions setApplicationId(String applicationId) {\n     }\n \n     /**\n-     * Sets the provided headers, overwriting all previously-set headers in the process. It will be applied on the\n-     * request being sent to Azure Service.\n+     * Sets the headers, overwriting all previously set headers in the process.\n+     * <p>\n+     * It will be applied on the request being sent to Azure Service.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ee60c462f05904df365976641fb3bfe9b23bd51"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDEwOTM0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMzo1MjowNlrOHSbIZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMzo1MjowNlrOHSbIZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA4MDkzNQ==", "bodyText": "I'd really like another pass on this JavaDoc, because it is not as descriptive as it would ideally be. It doesn't explain what it means to set various options on the client (and why that is different from other builder parameters), it doesn't explain where users can use this API. It doesn't explain very clearly what a Header is, and how an http or other header might be created and passed in. It doesn't explain what exactly an application ID is and why it might be useful to set it.\nIn other words, put yourself in the seat of someone new to this API and be sure you're explaining to them everything they need to know. Same goes for the clientOptions API on builders, especially as the rest of the team will copy / paste that content.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r489080935", "createdAt": "2020-09-15T23:52:06Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/ClientOptions.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+\n+import java.util.Collections;\n+\n+/**\n+ * This class represents various options to be set on the client.\n+ * <p>\n+ * The {@link Header} could be set using {@link ClientOptions#setHeaders(Iterable) setHeaders}. The {@link Header} will\n+ * be applied on the request being sent to Azure Service.\n+ * <p>\n+ * The {@code applicationId} could be set using {@link ClientOptions#setApplicationId(String) setApplicationId} which\n+ * is used for setting {@code applicationId} in the {@link UserAgentPolicy}.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "784318e7b130eb60d64e015e6477028546d530c6"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDc5OTg0OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMDoxMjozNVrOHTIT5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMDoxMjozNVrOHTIT5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgyMTE1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /**\n          \n          \n            \n                 * Sets the {@link ClientOptions} which enables various options to be set on the client. For example setting\n          \n          \n            \n                 * {@code applicationId} using {@link ClientOptions#setApplicationId(String)} to configure {@link UserAgentPolicy}\n          \n          \n            \n                 * for telemetry/monitoring purpose.\n          \n          \n            \n                 * <p>\n          \n          \n            \n                 * More About <a href=\"https://azure.github.io/azure-sdk/general_azurecore.html#telemetry-policy\">Azure Core: Telemetry policy</a>\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param clientOptions to be set on the client.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @return The updated {@link ServiceBusClientBuilder} object.\n          \n          \n            \n                 * @see ClientOptions\n          \n          \n            \n                 */\n          \n          \n            \n                /**\n          \n          \n            \n                 * Sets the {@link ClientOptions} to be sent from the client built from this builder, enabling customization of\n          \n          \n            \n                 * certain properties, as well as support the addition of custom header information. Refer to the \n          \n          \n            \n                 * {@link ClientOptions} documentation for more information.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param clientOptions to be set on the client.\n          \n          \n            \n                 * @return The updated {@link ServiceBusClientBuilder} object.\n          \n          \n            \n                 */", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13697#discussion_r489821156", "createdAt": "2020-09-17T00:12:35Z", "author": {"login": "JonathanGiles"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -95,6 +98,23 @@\n     public ServiceBusClientBuilder() {\n     }\n \n+    /**\n+     * Sets the {@link ClientOptions} which enables various options to be set on the client. For example setting\n+     * {@code applicationId} using {@link ClientOptions#setApplicationId(String)} to configure {@link UserAgentPolicy}\n+     * for telemetry/monitoring purpose.\n+     * <p>\n+     * More About <a href=\"https://azure.github.io/azure-sdk/general_azurecore.html#telemetry-policy\">Azure Core: Telemetry policy</a>\n+     *\n+     * @param clientOptions to be set on the client.\n+     *\n+     * @return The updated {@link ServiceBusClientBuilder} object.\n+     * @see ClientOptions\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f248f7f3f84317798c9d2451d8a56c4b8943cbb4"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4710, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}