{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4Mzc0MjU2", "number": 17847, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwODowMTozOFrOE-iLPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNToyNzoyM1rOE_dOzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDA3MTAyOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwODowMTozOFrOH7vbkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMTo1NjowOVrOH8VEyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQwNTEzNg==", "bodyText": "Check of scopes has been removed, so please update the text and graph", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17847#discussion_r532405136", "createdAt": "2020-11-30T08:01:38Z", "author": {"login": "yiliuTo"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "diffHunk": "@@ -39,22 +39,45 @@ The way to obtain group relationship that will determine which graph api will be\n * **direct**: the default value, get groups that the user is a direct member of. For details, see [list memberOf][graph-api-list-member-of] api.\n * **transitive**: Get groups that the user is a member of, and will also return all groups the user is a nested member of. For details, see [list transitive memberOf][graph-api-list-transitive-member-of] api.\n \n-### Authenticate in frontend\n-Sends bearer authorization code to backend, in backend a Spring Security filter `AADAuthenticationFilter` validates the Jwt token from Azure AD and save authentication. The Jwt token is also used to acquire a On-Behalf-Of token for Azure AD Graph API so that authenticated user's membership information is available for authorization of access of API resources. \n-Below is a diagram that shows the layers and typical flow for Single Page Application with Spring Boot web API backend that uses the filter for Authentication and Authorization.\n-![Single Page Application + Spring Boot Web API + Azure AD](resource/auth-in-frontend-with-aad-filter.png)\n+### Web Server\n+Based on Azure AD as a Web Server, it uses OAuth2 authorization code flow to authentication, and authorizes resources based on the scopes or roles claim in the access token. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2929c7ac47a43c92847a36582a854eced3654e5e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyMTg5OA==", "bodyText": "Only in web server-side has removed, right?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17847#discussion_r533021898", "createdAt": "2020-12-01T01:56:09Z", "author": {"login": "moarychan"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "diffHunk": "@@ -39,22 +39,45 @@ The way to obtain group relationship that will determine which graph api will be\n * **direct**: the default value, get groups that the user is a direct member of. For details, see [list memberOf][graph-api-list-member-of] api.\n * **transitive**: Get groups that the user is a member of, and will also return all groups the user is a nested member of. For details, see [list transitive memberOf][graph-api-list-transitive-member-of] api.\n \n-### Authenticate in frontend\n-Sends bearer authorization code to backend, in backend a Spring Security filter `AADAuthenticationFilter` validates the Jwt token from Azure AD and save authentication. The Jwt token is also used to acquire a On-Behalf-Of token for Azure AD Graph API so that authenticated user's membership information is available for authorization of access of API resources. \n-Below is a diagram that shows the layers and typical flow for Single Page Application with Spring Boot web API backend that uses the filter for Authentication and Authorization.\n-![Single Page Application + Spring Boot Web API + Azure AD](resource/auth-in-frontend-with-aad-filter.png)\n+### Web Server\n+Based on Azure AD as a Web Server, it uses OAuth2 authorization code flow to authentication, and authorizes resources based on the scopes or roles claim in the access token. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQwNTEzNg=="}, "originalCommit": {"oid": "2929c7ac47a43c92847a36582a854eced3654e5e"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDE1MTM0OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwODoyNjoxMVrOH7wK7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMTo0NTozNVrOH8U3BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQxNzI2MA==", "bodyText": "Do we have this BearerTokenAuthenticationFilter?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17847#discussion_r532417260", "createdAt": "2020-11-30T08:26:11Z", "author": {"login": "yiliuTo"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "diffHunk": "@@ -39,22 +39,45 @@ The way to obtain group relationship that will determine which graph api will be\n * **direct**: the default value, get groups that the user is a direct member of. For details, see [list memberOf][graph-api-list-member-of] api.\n * **transitive**: Get groups that the user is a member of, and will also return all groups the user is a nested member of. For details, see [list transitive memberOf][graph-api-list-transitive-member-of] api.\n \n-### Authenticate in frontend\n-Sends bearer authorization code to backend, in backend a Spring Security filter `AADAuthenticationFilter` validates the Jwt token from Azure AD and save authentication. The Jwt token is also used to acquire a On-Behalf-Of token for Azure AD Graph API so that authenticated user's membership information is available for authorization of access of API resources. \n-Below is a diagram that shows the layers and typical flow for Single Page Application with Spring Boot web API backend that uses the filter for Authentication and Authorization.\n-![Single Page Application + Spring Boot Web API + Azure AD](resource/auth-in-frontend-with-aad-filter.png)\n+### Web Server\n+Based on Azure AD as a Web Server, it uses OAuth2 authorization code flow to authentication, and authorizes resources based on the scopes or roles claim in the access token. \n+Provide a convenient way to quickly access other resource server, other resources should be registered as `ClientRegistration`, use `@RegisteredOAuth2AuthorizedClient` annotation to mark the client resource, Security will help automatically obtain valid access tokens based on the root refresh token, business methods will use the corresponding access token to request client resources.\n \n+#### Standalone web server usage\n+Only as a Web Server, no further access to other resources protected by Azure AD.\n+![Standalone Web Server](resource/aad-based-standalone-web-server.png)\n \n-### Authenticate in backend\n-Auto configuration for common Azure Active Directory OAuth2 properties and `OAuth2UserService` to map authorities are provided.\n+* Access restricted resources of Web Server, login with credentials using default scopes.\n+* Return secured data.\n+\n+#### Web server access resources usage\n+Web Server and resource server use scenarios, Web server access the resources of resource server which is protected by Azure AD.\n+![Web Server Access Resources](resource/add-based-web-server-access-resources.png)\n+\n+* Login with credentials, the scope includes all other clients. \n+* Auto-refresh the access token of other clients based on the root refresh token.\n+* Use each client's access token to request restricted resource.\n+* Return secured data.\n+\n+### Resource Server\n+Based on Azure AD as a Resource Server, it uses `BearerTokenAuthenticationFilter` authorize request. The current resource server also can access other resources, there's a similar method to the Web server usage to obtain access to the client access token, the difference is the access token obtained based on the `MSAL On-Behalf-Of` process.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2929c7ac47a43c92847a36582a854eced3654e5e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxODM3Mw==", "bodyText": "Yes, as a resource server this filter will work.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17847#discussion_r533018373", "createdAt": "2020-12-01T01:45:35Z", "author": {"login": "moarychan"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "diffHunk": "@@ -39,22 +39,45 @@ The way to obtain group relationship that will determine which graph api will be\n * **direct**: the default value, get groups that the user is a direct member of. For details, see [list memberOf][graph-api-list-member-of] api.\n * **transitive**: Get groups that the user is a member of, and will also return all groups the user is a nested member of. For details, see [list transitive memberOf][graph-api-list-transitive-member-of] api.\n \n-### Authenticate in frontend\n-Sends bearer authorization code to backend, in backend a Spring Security filter `AADAuthenticationFilter` validates the Jwt token from Azure AD and save authentication. The Jwt token is also used to acquire a On-Behalf-Of token for Azure AD Graph API so that authenticated user's membership information is available for authorization of access of API resources. \n-Below is a diagram that shows the layers and typical flow for Single Page Application with Spring Boot web API backend that uses the filter for Authentication and Authorization.\n-![Single Page Application + Spring Boot Web API + Azure AD](resource/auth-in-frontend-with-aad-filter.png)\n+### Web Server\n+Based on Azure AD as a Web Server, it uses OAuth2 authorization code flow to authentication, and authorizes resources based on the scopes or roles claim in the access token. \n+Provide a convenient way to quickly access other resource server, other resources should be registered as `ClientRegistration`, use `@RegisteredOAuth2AuthorizedClient` annotation to mark the client resource, Security will help automatically obtain valid access tokens based on the root refresh token, business methods will use the corresponding access token to request client resources.\n \n+#### Standalone web server usage\n+Only as a Web Server, no further access to other resources protected by Azure AD.\n+![Standalone Web Server](resource/aad-based-standalone-web-server.png)\n \n-### Authenticate in backend\n-Auto configuration for common Azure Active Directory OAuth2 properties and `OAuth2UserService` to map authorities are provided.\n+* Access restricted resources of Web Server, login with credentials using default scopes.\n+* Return secured data.\n+\n+#### Web server access resources usage\n+Web Server and resource server use scenarios, Web server access the resources of resource server which is protected by Azure AD.\n+![Web Server Access Resources](resource/add-based-web-server-access-resources.png)\n+\n+* Login with credentials, the scope includes all other clients. \n+* Auto-refresh the access token of other clients based on the root refresh token.\n+* Use each client's access token to request restricted resource.\n+* Return secured data.\n+\n+### Resource Server\n+Based on Azure AD as a Resource Server, it uses `BearerTokenAuthenticationFilter` authorize request. The current resource server also can access other resources, there's a similar method to the Web server usage to obtain access to the client access token, the difference is the access token obtained based on the `MSAL On-Behalf-Of` process.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQxNzI2MA=="}, "originalCommit": {"oid": "2929c7ac47a43c92847a36582a854eced3654e5e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDI2ODA3OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwODo1Nzo1MlrOH7xRdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOTo0ODo0M1rOH8im7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQzNTMxNg==", "bodyText": "I don't think the name of Web Server fit with this scenerio well, perhaps web client or application client is better?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17847#discussion_r532435316", "createdAt": "2020-11-30T08:57:52Z", "author": {"login": "yiliuTo"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "diffHunk": "@@ -39,22 +39,45 @@ The way to obtain group relationship that will determine which graph api will be\n * **direct**: the default value, get groups that the user is a direct member of. For details, see [list memberOf][graph-api-list-member-of] api.\n * **transitive**: Get groups that the user is a member of, and will also return all groups the user is a nested member of. For details, see [list transitive memberOf][graph-api-list-transitive-member-of] api.\n \n-### Authenticate in frontend\n-Sends bearer authorization code to backend, in backend a Spring Security filter `AADAuthenticationFilter` validates the Jwt token from Azure AD and save authentication. The Jwt token is also used to acquire a On-Behalf-Of token for Azure AD Graph API so that authenticated user's membership information is available for authorization of access of API resources. \n-Below is a diagram that shows the layers and typical flow for Single Page Application with Spring Boot web API backend that uses the filter for Authentication and Authorization.\n-![Single Page Application + Spring Boot Web API + Azure AD](resource/auth-in-frontend-with-aad-filter.png)\n+### Web Server", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2929c7ac47a43c92847a36582a854eced3654e5e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyNTQ3Mw==", "bodyText": "will discuss which name is better.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17847#discussion_r533025473", "createdAt": "2020-12-01T02:07:31Z", "author": {"login": "moarychan"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "diffHunk": "@@ -39,22 +39,45 @@ The way to obtain group relationship that will determine which graph api will be\n * **direct**: the default value, get groups that the user is a direct member of. For details, see [list memberOf][graph-api-list-member-of] api.\n * **transitive**: Get groups that the user is a member of, and will also return all groups the user is a nested member of. For details, see [list transitive memberOf][graph-api-list-transitive-member-of] api.\n \n-### Authenticate in frontend\n-Sends bearer authorization code to backend, in backend a Spring Security filter `AADAuthenticationFilter` validates the Jwt token from Azure AD and save authentication. The Jwt token is also used to acquire a On-Behalf-Of token for Azure AD Graph API so that authenticated user's membership information is available for authorization of access of API resources. \n-Below is a diagram that shows the layers and typical flow for Single Page Application with Spring Boot web API backend that uses the filter for Authentication and Authorization.\n-![Single Page Application + Spring Boot Web API + Azure AD](resource/auth-in-frontend-with-aad-filter.png)\n+### Web Server", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQzNTMxNg=="}, "originalCommit": {"oid": "2929c7ac47a43c92847a36582a854eced3654e5e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI0MzYyOQ==", "bodyText": "will use web application.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17847#discussion_r533243629", "createdAt": "2020-12-01T09:48:43Z", "author": {"login": "moarychan"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "diffHunk": "@@ -39,22 +39,45 @@ The way to obtain group relationship that will determine which graph api will be\n * **direct**: the default value, get groups that the user is a direct member of. For details, see [list memberOf][graph-api-list-member-of] api.\n * **transitive**: Get groups that the user is a member of, and will also return all groups the user is a nested member of. For details, see [list transitive memberOf][graph-api-list-transitive-member-of] api.\n \n-### Authenticate in frontend\n-Sends bearer authorization code to backend, in backend a Spring Security filter `AADAuthenticationFilter` validates the Jwt token from Azure AD and save authentication. The Jwt token is also used to acquire a On-Behalf-Of token for Azure AD Graph API so that authenticated user's membership information is available for authorization of access of API resources. \n-Below is a diagram that shows the layers and typical flow for Single Page Application with Spring Boot web API backend that uses the filter for Authentication and Authorization.\n-![Single Page Application + Spring Boot Web API + Azure AD](resource/auth-in-frontend-with-aad-filter.png)\n+### Web Server", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQzNTMxNg=="}, "originalCommit": {"oid": "2929c7ac47a43c92847a36582a854eced3654e5e"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTc0Mzk2OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNToyNjowM1rOH9K-Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNTozMzowOFrOH9LGUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkwNDkzOA==", "bodyText": "I think we should replace scopes with groups here. And it is the same with below 2 graphs, update the flow of Evaluate permission based on roles to Evaluate permission based on groups or roles.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17847#discussion_r533904938", "createdAt": "2020-12-02T05:26:03Z", "author": {"login": "yiliuTo"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "diffHunk": "@@ -39,28 +39,28 @@ The way to obtain group relationship that will determine which graph api will be\n * **direct**: the default value, get groups that the user is a direct member of. For details, see [list memberOf][graph-api-list-member-of] api.\n * **transitive**: Get groups that the user is a member of, and will also return all groups the user is a nested member of. For details, see [list transitive memberOf][graph-api-list-transitive-member-of] api.\n \n-### Web Server\n-Based on Azure AD as a Web Server, it uses OAuth2 authorization code flow to authentication, and authorizes resources based on the scopes or roles claim in the access token. \n-Provide a convenient way to quickly access other resource server, other resources should be registered as `ClientRegistration`, use `@RegisteredOAuth2AuthorizedClient` annotation to mark the client resource, Security will help automatically obtain valid access tokens based on the root refresh token, business methods will use the corresponding access token to request client resources.\n+### Web application\n+Based on Azure AD as a Web application, it uses OAuth2 authorization code flow to authentication, and authorizes resources based on the scopes or roles claim in the access token. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3be826e91083e510b9ee74ccaa4d3b4404ac59a5"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkwNzAyNg==", "bodyText": "Besides, I think in the first graph, we need to find a better way to diaplay the scenerios of access denied and data returned. Making them parallel is confusing because it may be read as two successive flows.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17847#discussion_r533907026", "createdAt": "2020-12-02T05:33:08Z", "author": {"login": "yiliuTo"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "diffHunk": "@@ -39,28 +39,28 @@ The way to obtain group relationship that will determine which graph api will be\n * **direct**: the default value, get groups that the user is a direct member of. For details, see [list memberOf][graph-api-list-member-of] api.\n * **transitive**: Get groups that the user is a member of, and will also return all groups the user is a nested member of. For details, see [list transitive memberOf][graph-api-list-transitive-member-of] api.\n \n-### Web Server\n-Based on Azure AD as a Web Server, it uses OAuth2 authorization code flow to authentication, and authorizes resources based on the scopes or roles claim in the access token. \n-Provide a convenient way to quickly access other resource server, other resources should be registered as `ClientRegistration`, use `@RegisteredOAuth2AuthorizedClient` annotation to mark the client resource, Security will help automatically obtain valid access tokens based on the root refresh token, business methods will use the corresponding access token to request client resources.\n+### Web application\n+Based on Azure AD as a Web application, it uses OAuth2 authorization code flow to authentication, and authorizes resources based on the scopes or roles claim in the access token. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkwNDkzOA=="}, "originalCommit": {"oid": "3be826e91083e510b9ee74ccaa4d3b4404ac59a5"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTc0NjcxOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNToyNzoyM1rOH9K_vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNToyNzoyM1rOH9K_vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkwNTM0Mw==", "bodyText": "I think here auto-acquire fits better than auto-refresh.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17847#discussion_r533905343", "createdAt": "2020-12-02T05:27:23Z", "author": {"login": "yiliuTo"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "diffHunk": "@@ -39,28 +39,28 @@ The way to obtain group relationship that will determine which graph api will be\n * **direct**: the default value, get groups that the user is a direct member of. For details, see [list memberOf][graph-api-list-member-of] api.\n * **transitive**: Get groups that the user is a member of, and will also return all groups the user is a nested member of. For details, see [list transitive memberOf][graph-api-list-transitive-member-of] api.\n \n-### Web Server\n-Based on Azure AD as a Web Server, it uses OAuth2 authorization code flow to authentication, and authorizes resources based on the scopes or roles claim in the access token. \n-Provide a convenient way to quickly access other resource server, other resources should be registered as `ClientRegistration`, use `@RegisteredOAuth2AuthorizedClient` annotation to mark the client resource, Security will help automatically obtain valid access tokens based on the root refresh token, business methods will use the corresponding access token to request client resources.\n+### Web application\n+Based on Azure AD as a Web application, it uses OAuth2 authorization code flow to authentication, and authorizes resources based on the scopes or roles claim in the access token. \n+Provide a convenient way to quickly access other resource server, other resources should be registered as `ClientRegistration`, use `@RegisteredOAuth2AuthorizedClient` annotation to mark the client resource, Spring Security will help automatically obtain valid access tokens based on the root refresh token, business methods will use the corresponding access token to request client resources.\n \n-#### Standalone web server usage\n-Only as a Web Server, no further access to other resources protected by Azure AD.\n-![Standalone Web Server](resource/aad-based-standalone-web-server.png)\n+#### Standalone web application usage\n+Only as a Web application, no further access to other resources protected by Azure AD.\n+![Standalone Web Application](resource/aad-based-standalone-web-application.png)\n \n-* Access restricted resources of Web Server, login with credentials using default scopes.\n+* Access restricted resources of web application, login with credentials using default scopes.\n * Return secured data.\n \n-#### Web server access resources usage\n-Web Server and resource server use scenarios, Web server access the resources of resource server which is protected by Azure AD.\n-![Web Server Access Resources](resource/add-based-web-server-access-resources.png)\n+#### Web application access resources usage\n+Web application and resource server use scenarios, web application access the resources of resource server which is protected by Azure AD.\n+![Web Application Access Resources](resource/add-based-web-application-access-resources.png)\n \n * Login with credentials, the scope includes all other clients. \n * Auto-refresh the access token of other clients based on the root refresh token.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3be826e91083e510b9ee74ccaa4d3b4404ac59a5"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2720, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}