{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMDk0MzI1", "number": 9173, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMToxMjozOVrODpucZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMToxMjozOVrODpucZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDc5MTQwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMToxMjozOVrOF5FSnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMToxMjozOVrOF5FSnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5OTgzNg==", "bodyText": "Should we use the term event or  message for Service bus?\ncreatesMessageBatchWithSize", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9173#discussion_r395399836", "createdAt": "2020-03-20T01:12:39Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "diffHunk": "@@ -125,6 +124,108 @@ void teardown() {\n         messagesCaptor = null;\n     }\n \n+    /**\n+     * Verifies that the correct Service Bus properties are set.\n+     */\n+    @Test\n+    void verifyProperties() {\n+        Assertions.assertEquals(ENTITY_NAME, sender.getEntityName());\n+        Assertions.assertEquals(NAMESPACE, sender.getFullyQualifiedNamespace());\n+    }\n+\n+    /**\n+     * Verifies that an exception is thrown when we create a batch with null options.\n+     */\n+    @Test\n+    void createBatchNull() {\n+        Assertions.assertThrows(NullPointerException.class, () -> sender.createBatch(null));\n+    }\n+\n+    /**\n+     * Verifies that the default batch is the same size as the message link.\n+     */\n+    @Test\n+    void createBatchDefault() {\n+        // Arrange\n+        when(connection.createSendLink(eq(ENTITY_NAME), eq(ENTITY_NAME), any(AmqpRetryOptions.class)))\n+            .thenReturn(Mono.just(sendLink));\n+        when(sendLink.getLinkSize()).thenReturn(Mono.just(MAX_MESSAGE_LENGTH_BYTES));\n+\n+        // Act & Assert\n+        StepVerifier.create(sender.createBatch())\n+            .assertNext(batch -> {\n+                Assertions.assertEquals(MAX_MESSAGE_LENGTH_BYTES, batch.getMaxSizeInBytes());\n+                Assertions.assertEquals(0, batch.getCount());\n+            })\n+            .verifyComplete();\n+    }\n+\n+    /**\n+     * Verifies we cannot create a batch if the options size is larger than the link.\n+     */\n+    @Test\n+    void createBatchWhenSizeTooBig() {\n+        // Arrange\n+        int maxLinkSize = 1024;\n+        int batchSize = maxLinkSize + 10;\n+\n+        final AmqpSendLink link = mock(AmqpSendLink.class);\n+        when(link.getLinkSize()).thenReturn(Mono.just(maxLinkSize));\n+\n+        when(connection.createSendLink(eq(ENTITY_NAME), eq(ENTITY_NAME), eq(retryOptions)))\n+            .thenReturn(Mono.just(link));\n+\n+        // This event is 1024 bytes when serialized.\n+        final CreateBatchOptions options = new CreateBatchOptions().setMaximumSizeInBytes(batchSize);\n+\n+        // Act & Assert\n+        StepVerifier.create(sender.createBatch(options))\n+            .expectError(IllegalArgumentException.class)\n+            .verify();\n+    }\n+\n+    /**\n+     * Verifies that the producer can create a batch with a given {@link CreateBatchOptions#getMaximumSizeInBytes()}.\n+     */\n+    @Test\n+    void createsEventDataBatchWithSize() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a939d2481f305ab67eb72abea04c378a7f5c111a"}, "originalPosition": 109}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 124, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}