{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyODYzNzY0", "number": 17988, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTo1Mzo1MVrOFCAWlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjowNDo0OVrOFCAoow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjQ3MjU1OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTo1Mzo1MVrOIA8ahg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjowMjozMVrOIA8wIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2MDc0Mg==", "bodyText": "Thoughts on MetadataValidationPolicy? A little more generic and if we need to add more logic in the future the name will still be representative of what it does.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17988#discussion_r537860742", "createdAt": "2020-12-07T21:53:51Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java", "diffHunk": "@@ -0,0 +1,45 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.common.policy;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.common.implementation.Constants;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Locale;\n+\n+/**\n+ * This is a request policy in an {@link com.azure.core.http.HttpPipeline} to validate that metadata does not contain\n+ * leading or trailing whitespace characters.\n+ * We do this since the service trims whitespace for the string to sign, but the client does not, resulting in an auth\n+ * failure.\n+ */\n+public class MetadataWhitespacePolicy implements HttpPipelinePolicy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0db5b8e61e40922bf87b49af3d97d408d1388e34"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NjI3NQ==", "bodyText": "That sounds good to me", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17988#discussion_r537866275", "createdAt": "2020-12-07T22:02:31Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java", "diffHunk": "@@ -0,0 +1,45 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.common.policy;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.common.implementation.Constants;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Locale;\n+\n+/**\n+ * This is a request policy in an {@link com.azure.core.http.HttpPipeline} to validate that metadata does not contain\n+ * leading or trailing whitespace characters.\n+ * We do this since the service trims whitespace for the string to sign, but the client does not, resulting in an auth\n+ * failure.\n+ */\n+public class MetadataWhitespacePolicy implements HttpPipelinePolicy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2MDc0Mg=="}, "originalCommit": {"oid": "0db5b8e61e40922bf87b49af3d97d408d1388e34"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjQ5NDY5OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTo1ODo0NFrOIA8nOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjowMjo1NlrOIA8xIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2Mzk5NQ==", "bodyText": "Do we need to substring here? We aren't using the metadata key in the error message and we could just check:\nboolean foundWhitespace = Character.isWhitespace(name.charAt(Constants.HeaderContants.X_MS_META.length())) || Character.isWhitespace(name.charAt(name.length() -1));", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17988#discussion_r537863995", "createdAt": "2020-12-07T21:58:44Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java", "diffHunk": "@@ -0,0 +1,45 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.common.policy;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.common.implementation.Constants;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Locale;\n+\n+/**\n+ * This is a request policy in an {@link com.azure.core.http.HttpPipeline} to validate that metadata does not contain\n+ * leading or trailing whitespace characters.\n+ * We do this since the service trims whitespace for the string to sign, but the client does not, resulting in an auth\n+ * failure.\n+ */\n+public class MetadataWhitespacePolicy implements HttpPipelinePolicy {\n+\n+    private final ClientLogger logger = new ClientLogger(MetadataWhitespacePolicy.class);\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        context.getHttpRequest().getHeaders().stream()\n+            .filter(header -> header.getName().toLowerCase(Locale.ROOT).startsWith(Constants.HeaderConstants.X_MS_META))\n+            .forEach(header -> {\n+                String name = header.getName().substring(Constants.HeaderConstants.X_MS_META.length());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0db5b8e61e40922bf87b49af3d97d408d1388e34"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NjUyOA==", "bodyText": "Yeah we can do this", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17988#discussion_r537866528", "createdAt": "2020-12-07T22:02:56Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java", "diffHunk": "@@ -0,0 +1,45 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.common.policy;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.common.implementation.Constants;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Locale;\n+\n+/**\n+ * This is a request policy in an {@link com.azure.core.http.HttpPipeline} to validate that metadata does not contain\n+ * leading or trailing whitespace characters.\n+ * We do this since the service trims whitespace for the string to sign, but the client does not, resulting in an auth\n+ * failure.\n+ */\n+public class MetadataWhitespacePolicy implements HttpPipelinePolicy {\n+\n+    private final ClientLogger logger = new ClientLogger(MetadataWhitespacePolicy.class);\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        context.getHttpRequest().getHeaders().stream()\n+            .filter(header -> header.getName().toLowerCase(Locale.ROOT).startsWith(Constants.HeaderConstants.X_MS_META))\n+            .forEach(header -> {\n+                String name = header.getName().substring(Constants.HeaderConstants.X_MS_META.length());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2Mzk5NQ=="}, "originalCommit": {"oid": "0db5b8e61e40922bf87b49af3d97d408d1388e34"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjUwNTQ2OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjowMTozMlrOIA8trQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjozMzoyN1rOIA92DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NTY0NQ==", "bodyText": "Do we want to use header.getValues() or header.getValue()? \n  \n    \n      azure-sdk-for-java/sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java\n    \n    \n         Line 55\n      in\n      07c54ba\n    \n    \n    \n    \n\n        \n          \n           return value == null ? null : value.split(\",\"); \n        \n    \n  \n\n\nHow does the service handle coma separated header values?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17988#discussion_r537865645", "createdAt": "2020-12-07T22:01:32Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java", "diffHunk": "@@ -0,0 +1,45 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.common.policy;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.common.implementation.Constants;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Locale;\n+\n+/**\n+ * This is a request policy in an {@link com.azure.core.http.HttpPipeline} to validate that metadata does not contain\n+ * leading or trailing whitespace characters.\n+ * We do this since the service trims whitespace for the string to sign, but the client does not, resulting in an auth\n+ * failure.\n+ */\n+public class MetadataWhitespacePolicy implements HttpPipelinePolicy {\n+\n+    private final ClientLogger logger = new ClientLogger(MetadataWhitespacePolicy.class);\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        context.getHttpRequest().getHeaders().stream()\n+            .filter(header -> header.getName().toLowerCase(Locale.ROOT).startsWith(Constants.HeaderConstants.X_MS_META))\n+            .forEach(header -> {\n+                String name = header.getName().substring(Constants.HeaderConstants.X_MS_META.length());\n+                boolean foundWhitespace = Character.isWhitespace(name.charAt(0))\n+                    || Character.isWhitespace(name.charAt(name.length() - 1));\n+                for (String value: header.getValues()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0db5b8e61e40922bf87b49af3d97d408d1388e34"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4MTgzNw==", "bodyText": "It looks like you can set metadata with comma delimited values\nI was able to set x-ms-meta-foo: bar,bar2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17988#discussion_r537881837", "createdAt": "2020-12-07T22:29:15Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java", "diffHunk": "@@ -0,0 +1,45 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.common.policy;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.common.implementation.Constants;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Locale;\n+\n+/**\n+ * This is a request policy in an {@link com.azure.core.http.HttpPipeline} to validate that metadata does not contain\n+ * leading or trailing whitespace characters.\n+ * We do this since the service trims whitespace for the string to sign, but the client does not, resulting in an auth\n+ * failure.\n+ */\n+public class MetadataWhitespacePolicy implements HttpPipelinePolicy {\n+\n+    private final ClientLogger logger = new ClientLogger(MetadataWhitespacePolicy.class);\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        context.getHttpRequest().getHeaders().stream()\n+            .filter(header -> header.getName().toLowerCase(Locale.ROOT).startsWith(Constants.HeaderConstants.X_MS_META))\n+            .forEach(header -> {\n+                String name = header.getName().substring(Constants.HeaderConstants.X_MS_META.length());\n+                boolean foundWhitespace = Character.isWhitespace(name.charAt(0))\n+                    || Character.isWhitespace(name.charAt(name.length() - 1));\n+                for (String value: header.getValues()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NTY0NQ=="}, "originalCommit": {"oid": "0db5b8e61e40922bf87b49af3d97d408d1388e34"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4MzQ5OQ==", "bodyText": "this also worked\nx-ms-meta-foo: bar,bar2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17988#discussion_r537883499", "createdAt": "2020-12-07T22:32:12Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java", "diffHunk": "@@ -0,0 +1,45 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.common.policy;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.common.implementation.Constants;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Locale;\n+\n+/**\n+ * This is a request policy in an {@link com.azure.core.http.HttpPipeline} to validate that metadata does not contain\n+ * leading or trailing whitespace characters.\n+ * We do this since the service trims whitespace for the string to sign, but the client does not, resulting in an auth\n+ * failure.\n+ */\n+public class MetadataWhitespacePolicy implements HttpPipelinePolicy {\n+\n+    private final ClientLogger logger = new ClientLogger(MetadataWhitespacePolicy.class);\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        context.getHttpRequest().getHeaders().stream()\n+            .filter(header -> header.getName().toLowerCase(Locale.ROOT).startsWith(Constants.HeaderConstants.X_MS_META))\n+            .forEach(header -> {\n+                String name = header.getName().substring(Constants.HeaderConstants.X_MS_META.length());\n+                boolean foundWhitespace = Character.isWhitespace(name.charAt(0))\n+                    || Character.isWhitespace(name.charAt(name.length() - 1));\n+                for (String value: header.getValues()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NTY0NQ=="}, "originalCommit": {"oid": "0db5b8e61e40922bf87b49af3d97d408d1388e34"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4NDE3Mw==", "bodyText": "Based off that, I think we should use header.getValue()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17988#discussion_r537884173", "createdAt": "2020-12-07T22:33:27Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java", "diffHunk": "@@ -0,0 +1,45 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.common.policy;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.common.implementation.Constants;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Locale;\n+\n+/**\n+ * This is a request policy in an {@link com.azure.core.http.HttpPipeline} to validate that metadata does not contain\n+ * leading or trailing whitespace characters.\n+ * We do this since the service trims whitespace for the string to sign, but the client does not, resulting in an auth\n+ * failure.\n+ */\n+public class MetadataWhitespacePolicy implements HttpPipelinePolicy {\n+\n+    private final ClientLogger logger = new ClientLogger(MetadataWhitespacePolicy.class);\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        context.getHttpRequest().getHeaders().stream()\n+            .filter(header -> header.getName().toLowerCase(Locale.ROOT).startsWith(Constants.HeaderConstants.X_MS_META))\n+            .forEach(header -> {\n+                String name = header.getName().substring(Constants.HeaderConstants.X_MS_META.length());\n+                boolean foundWhitespace = Character.isWhitespace(name.charAt(0))\n+                    || Character.isWhitespace(name.charAt(name.length() - 1));\n+                for (String value: header.getValues()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NTY0NQ=="}, "originalCommit": {"oid": "0db5b8e61e40922bf87b49af3d97d408d1388e34"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjUxODc1OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjowNDo0OVrOIA81Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjowNDo0OVrOIA81Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NzU5OA==", "bodyText": "We should return Mono.error here instead of throwing the error as it'll force asynchronous clients to have an additional location where it has to try/catch", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17988#discussion_r537867598", "createdAt": "2020-12-07T22:04:49Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java", "diffHunk": "@@ -0,0 +1,45 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.common.policy;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.common.implementation.Constants;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Locale;\n+\n+/**\n+ * This is a request policy in an {@link com.azure.core.http.HttpPipeline} to validate that metadata does not contain\n+ * leading or trailing whitespace characters.\n+ * We do this since the service trims whitespace for the string to sign, but the client does not, resulting in an auth\n+ * failure.\n+ */\n+public class MetadataWhitespacePolicy implements HttpPipelinePolicy {\n+\n+    private final ClientLogger logger = new ClientLogger(MetadataWhitespacePolicy.class);\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        context.getHttpRequest().getHeaders().stream()\n+            .filter(header -> header.getName().toLowerCase(Locale.ROOT).startsWith(Constants.HeaderConstants.X_MS_META))\n+            .forEach(header -> {\n+                String name = header.getName().substring(Constants.HeaderConstants.X_MS_META.length());\n+                boolean foundWhitespace = Character.isWhitespace(name.charAt(0))\n+                    || Character.isWhitespace(name.charAt(name.length() - 1));\n+                for (String value: header.getValues()) {\n+                    foundWhitespace |= Character.isWhitespace(value.charAt(0))\n+                        || Character.isWhitespace(value.charAt(value.length() - 1));\n+                }\n+                if (foundWhitespace) {\n+                    throw logger.logExceptionAsError(new IllegalArgumentException(\"Metadata keys and values can \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0db5b8e61e40922bf87b49af3d97d408d1388e34"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2653, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}