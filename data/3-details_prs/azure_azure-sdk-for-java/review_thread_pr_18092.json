{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3MzU1MDE0", "number": 18092, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMDozNToxN1rOFFNgTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMTozODowN1rOFFQBvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMDA4NDYyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosDiagnostics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMDozNToxN1rOIFnD7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTo1NToyM1rOIGdaGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc1Mzc3Mw==", "bodyText": "please use slf4j exception pladeholder.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18092#discussion_r542753773", "createdAt": "2020-12-14T20:35:17Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosDiagnostics.java", "diffHunk": "@@ -90,4 +84,30 @@ public Duration getDuration() {\n     FeedResponseDiagnostics getFeedResponseDiagnostics() {\n         return feedResponseDiagnostics;\n     }\n+\n+    void fillCosmosDiagnostics(ObjectNode parentNode, StringBuilder stringBuilder) {\n+        if (this.feedResponseDiagnostics != null) {\n+            if (parentNode != null) {\n+                parentNode.put(USER_AGENT_KEY, USER_AGENT);\n+                parentNode.putPOJO(COSMOS_DIAGNOSTICS_KEY, feedResponseDiagnostics);\n+            }\n+\n+            if (stringBuilder != null) {\n+                stringBuilder.append(USER_AGENT_KEY +\"=\").append(USER_AGENT).append(System.lineSeparator());\n+                stringBuilder.append(feedResponseDiagnostics);\n+            }\n+        } else {\n+            if (parentNode != null) {\n+                parentNode.putPOJO(COSMOS_DIAGNOSTICS_KEY, clientSideRequestStatistics);\n+            }\n+\n+            if (stringBuilder != null) {\n+                try {\n+                    stringBuilder.append(OBJECT_MAPPER.writeValueAsString(this.clientSideRequestStatistics));\n+                } catch (JsonProcessingException e) {\n+                    LOGGER.error(\"Error while parsing diagnostics \" + e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d39a839a20e8d1b398dbf5edc5610015d00e0cd6"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0NDE4Ng==", "bodyText": "done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18092#discussion_r543644186", "createdAt": "2020-12-15T19:55:23Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosDiagnostics.java", "diffHunk": "@@ -90,4 +84,30 @@ public Duration getDuration() {\n     FeedResponseDiagnostics getFeedResponseDiagnostics() {\n         return feedResponseDiagnostics;\n     }\n+\n+    void fillCosmosDiagnostics(ObjectNode parentNode, StringBuilder stringBuilder) {\n+        if (this.feedResponseDiagnostics != null) {\n+            if (parentNode != null) {\n+                parentNode.put(USER_AGENT_KEY, USER_AGENT);\n+                parentNode.putPOJO(COSMOS_DIAGNOSTICS_KEY, feedResponseDiagnostics);\n+            }\n+\n+            if (stringBuilder != null) {\n+                stringBuilder.append(USER_AGENT_KEY +\"=\").append(USER_AGENT).append(System.lineSeparator());\n+                stringBuilder.append(feedResponseDiagnostics);\n+            }\n+        } else {\n+            if (parentNode != null) {\n+                parentNode.putPOJO(COSMOS_DIAGNOSTICS_KEY, clientSideRequestStatistics);\n+            }\n+\n+            if (stringBuilder != null) {\n+                try {\n+                    stringBuilder.append(OBJECT_MAPPER.writeValueAsString(this.clientSideRequestStatistics));\n+                } catch (JsonProcessingException e) {\n+                    LOGGER.error(\"Error while parsing diagnostics \" + e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc1Mzc3Mw=="}, "originalCommit": {"oid": "d39a839a20e8d1b398dbf5edc5610015d00e0cd6"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMDQ5Nzg5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosException.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMTozODowN1rOIFrI3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODowMTo0OFrOIItE3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgyMDU3Mg==", "bodyText": "serializing diagnostics is very expensive and will have perf impact.\nNow that we are doing that in the exception stacktrace for each exception we should exclude the business logic errors:\n\nNotFound (with no substatus code, i.e., for READ_SESSION_NOT_AVAILABLE we need diagnostics),\nConflict,\nPreconditionFailed.\n\nThese are business logic failures we don't need to the diagnostics for this.\nNotFound with READ_SESSION_NOT_AVAILABLE substatus code is a consistency failure not business logic we should have diagnostics for that.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18092#discussion_r542820572", "createdAt": "2020-12-14T21:38:07Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosException.java", "diffHunk": "@@ -299,10 +314,39 @@ public double getRequestCharge() {\n \n     @Override\n     public String toString() {\n-        return getClass().getSimpleName() + \"{\" + \"userAgent=\" + USER_AGENT + \", error=\" + cosmosError + \", resourceAddress='\"\n-                   + resourceAddress  +  \", statusCode=\" + statusCode + \", message=\" + getMessage()\n-                   + \", causeInfo=\" + causeInfo() + \", responseHeaders=\" + responseHeaders + \", requestHeaders=\"\n-                   + filterSensitiveData(requestHeaders) + '}';\n+        try {\n+            ObjectNode exceptionMessageNode = mapper.createObjectNode();\n+            exceptionMessageNode.put(\"ClassName\", getClass().getSimpleName());\n+            exceptionMessageNode.put(USER_AGENT_KEY, USER_AGENT);\n+            exceptionMessageNode.put(\"statusCode\", statusCode);\n+            exceptionMessageNode.put(\"resourceAddress\", resourceAddress);\n+            if (cosmosError != null) {\n+                exceptionMessageNode.put(\"error\", cosmosError.toJson());\n+            }\n+\n+            exceptionMessageNode.put(\"innerErrorMessage\", innerErrorMessage());\n+            exceptionMessageNode.put(\"causeInfo\", causeInfo());\n+            if (responseHeaders != null) {\n+                exceptionMessageNode.put(\"responseHeaders\", responseHeaders.toString());\n+            }\n+\n+            List<Map.Entry<String, String>> filterRequestHeaders = filterSensitiveData(requestHeaders);\n+            if (filterRequestHeaders != null) {\n+                exceptionMessageNode.put(\"requestHeaders\", filterRequestHeaders.toString());\n+            }\n+\n+            if(this.cosmosDiagnostics != null) {\n+                cosmosDiagnostics.fillCosmosDiagnostics(exceptionMessageNode, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d39a839a20e8d1b398dbf5edc5610015d00e0cd6"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0Mzk4NQ==", "bodyText": "Before this PR we were still serializing diagnostics and putting in string on exception message. In this PR we putting diagnostics object in exception parent ObjectNode  and then serializing in json at the last. So for computation on diagnostics serialization still remain the same.\nHowever I see your point in general to avoid diagnostics serialization on regular customer business scenario like 404 not found. I would like to keep it as sperate work item, however there is down side to put custom logic based on status code, we need to maintain extra logic for future scenarios and secondly its customer who should decide  whether to fetch the whole message when there is expected failure and can be handle based on expected status code. Thoughts?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18092#discussion_r543643985", "createdAt": "2020-12-15T19:55:05Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosException.java", "diffHunk": "@@ -299,10 +314,39 @@ public double getRequestCharge() {\n \n     @Override\n     public String toString() {\n-        return getClass().getSimpleName() + \"{\" + \"userAgent=\" + USER_AGENT + \", error=\" + cosmosError + \", resourceAddress='\"\n-                   + resourceAddress  +  \", statusCode=\" + statusCode + \", message=\" + getMessage()\n-                   + \", causeInfo=\" + causeInfo() + \", responseHeaders=\" + responseHeaders + \", requestHeaders=\"\n-                   + filterSensitiveData(requestHeaders) + '}';\n+        try {\n+            ObjectNode exceptionMessageNode = mapper.createObjectNode();\n+            exceptionMessageNode.put(\"ClassName\", getClass().getSimpleName());\n+            exceptionMessageNode.put(USER_AGENT_KEY, USER_AGENT);\n+            exceptionMessageNode.put(\"statusCode\", statusCode);\n+            exceptionMessageNode.put(\"resourceAddress\", resourceAddress);\n+            if (cosmosError != null) {\n+                exceptionMessageNode.put(\"error\", cosmosError.toJson());\n+            }\n+\n+            exceptionMessageNode.put(\"innerErrorMessage\", innerErrorMessage());\n+            exceptionMessageNode.put(\"causeInfo\", causeInfo());\n+            if (responseHeaders != null) {\n+                exceptionMessageNode.put(\"responseHeaders\", responseHeaders.toString());\n+            }\n+\n+            List<Map.Entry<String, String>> filterRequestHeaders = filterSensitiveData(requestHeaders);\n+            if (filterRequestHeaders != null) {\n+                exceptionMessageNode.put(\"requestHeaders\", filterRequestHeaders.toString());\n+            }\n+\n+            if(this.cosmosDiagnostics != null) {\n+                cosmosDiagnostics.fillCosmosDiagnostics(exceptionMessageNode, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgyMDU3Mg=="}, "originalCommit": {"oid": "d39a839a20e8d1b398dbf5edc5610015d00e0cd6"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY1MjAwMw==", "bodyText": "We should exclude the business logic failure (404, 409, 412) and not include in the exception due to the perf impact.\nFeel free to capture this work in a separate PR.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18092#discussion_r544652003", "createdAt": "2020-12-16T21:57:30Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosException.java", "diffHunk": "@@ -299,10 +314,39 @@ public double getRequestCharge() {\n \n     @Override\n     public String toString() {\n-        return getClass().getSimpleName() + \"{\" + \"userAgent=\" + USER_AGENT + \", error=\" + cosmosError + \", resourceAddress='\"\n-                   + resourceAddress  +  \", statusCode=\" + statusCode + \", message=\" + getMessage()\n-                   + \", causeInfo=\" + causeInfo() + \", responseHeaders=\" + responseHeaders + \", requestHeaders=\"\n-                   + filterSensitiveData(requestHeaders) + '}';\n+        try {\n+            ObjectNode exceptionMessageNode = mapper.createObjectNode();\n+            exceptionMessageNode.put(\"ClassName\", getClass().getSimpleName());\n+            exceptionMessageNode.put(USER_AGENT_KEY, USER_AGENT);\n+            exceptionMessageNode.put(\"statusCode\", statusCode);\n+            exceptionMessageNode.put(\"resourceAddress\", resourceAddress);\n+            if (cosmosError != null) {\n+                exceptionMessageNode.put(\"error\", cosmosError.toJson());\n+            }\n+\n+            exceptionMessageNode.put(\"innerErrorMessage\", innerErrorMessage());\n+            exceptionMessageNode.put(\"causeInfo\", causeInfo());\n+            if (responseHeaders != null) {\n+                exceptionMessageNode.put(\"responseHeaders\", responseHeaders.toString());\n+            }\n+\n+            List<Map.Entry<String, String>> filterRequestHeaders = filterSensitiveData(requestHeaders);\n+            if (filterRequestHeaders != null) {\n+                exceptionMessageNode.put(\"requestHeaders\", filterRequestHeaders.toString());\n+            }\n+\n+            if(this.cosmosDiagnostics != null) {\n+                cosmosDiagnostics.fillCosmosDiagnostics(exceptionMessageNode, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgyMDU3Mg=="}, "originalCommit": {"oid": "d39a839a20e8d1b398dbf5edc5610015d00e0cd6"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5ODA0NQ==", "bodyText": "#18271", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18092#discussion_r545998045", "createdAt": "2020-12-18T18:01:48Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosException.java", "diffHunk": "@@ -299,10 +314,39 @@ public double getRequestCharge() {\n \n     @Override\n     public String toString() {\n-        return getClass().getSimpleName() + \"{\" + \"userAgent=\" + USER_AGENT + \", error=\" + cosmosError + \", resourceAddress='\"\n-                   + resourceAddress  +  \", statusCode=\" + statusCode + \", message=\" + getMessage()\n-                   + \", causeInfo=\" + causeInfo() + \", responseHeaders=\" + responseHeaders + \", requestHeaders=\"\n-                   + filterSensitiveData(requestHeaders) + '}';\n+        try {\n+            ObjectNode exceptionMessageNode = mapper.createObjectNode();\n+            exceptionMessageNode.put(\"ClassName\", getClass().getSimpleName());\n+            exceptionMessageNode.put(USER_AGENT_KEY, USER_AGENT);\n+            exceptionMessageNode.put(\"statusCode\", statusCode);\n+            exceptionMessageNode.put(\"resourceAddress\", resourceAddress);\n+            if (cosmosError != null) {\n+                exceptionMessageNode.put(\"error\", cosmosError.toJson());\n+            }\n+\n+            exceptionMessageNode.put(\"innerErrorMessage\", innerErrorMessage());\n+            exceptionMessageNode.put(\"causeInfo\", causeInfo());\n+            if (responseHeaders != null) {\n+                exceptionMessageNode.put(\"responseHeaders\", responseHeaders.toString());\n+            }\n+\n+            List<Map.Entry<String, String>> filterRequestHeaders = filterSensitiveData(requestHeaders);\n+            if (filterRequestHeaders != null) {\n+                exceptionMessageNode.put(\"requestHeaders\", filterRequestHeaders.toString());\n+            }\n+\n+            if(this.cosmosDiagnostics != null) {\n+                cosmosDiagnostics.fillCosmosDiagnostics(exceptionMessageNode, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgyMDU3Mg=="}, "originalCommit": {"oid": "d39a839a20e8d1b398dbf5edc5610015d00e0cd6"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2548, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}