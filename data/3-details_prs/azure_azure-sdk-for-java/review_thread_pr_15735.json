{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNDE3NTEw", "number": 15735, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzoxMjozOVrOEoLvIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoxNjoxOFrOEpP2XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTcwNzg2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzoxMjozOVrOHZIDKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzoxMjozOVrOHZIDKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEwODMyOA==", "bodyText": "nice! thanks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r496108328", "createdAt": "2020-09-28T17:12:39Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "diffHunk": "@@ -203,7 +203,7 @@ public long id() {\n             BridgeInternal.setRequestTimeline(cosmosException, record.takeTimelineSnapshot());\n             BridgeInternal.setRntbdPendingRequestQueueSize(cosmosException, record.pendingRequestQueueSize());\n             BridgeInternal.setChannelTaskQueueSize(cosmosException, record.channelTaskQueueLength());\n-\n+            BridgeInternal.setSendingRequestStarted(cosmosException, record.hasSendingRequestStarted());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0c6809e5d410a0f95926c638f8698456296c1bb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTcyNjA1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestRecord.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzoxNzo1MlrOHZIObw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTo1ODo0MFrOHatLoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExMTIxNQ==", "bodyText": "I wonder if we should incorporate that into the RntbdRequestRecord stages as SEND_STARTED stage, and this as an event to the request timeline.\ne.g.:\nQUEUED, PIPELINED, SEND_STARTED, SENT, RECEIVED, COMPLETED", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r496111215", "createdAt": "2020-09-28T17:17:52Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestRecord.java", "diffHunk": "@@ -213,13 +214,26 @@ public long transportRequestId() {\n     // region Methods\n \n     public boolean expire() {\n-        final RequestTimeoutException error = new RequestTimeoutException(this.toString(), this.args.physicalAddress());\n+        final GoneException error = new GoneException(this.toString(), null, this.args.physicalAddress());\n         BridgeInternal.setRequestHeaders(error, this.args.serviceRequest().getHeaders());\n+\n         return this.completeExceptionally(error);\n     }\n \n     public abstract Timeout newTimeout(final TimerTask task);\n \n+    /**\n+     * Provides information whether the request could have been sent to the service\n+     * @return fals if it is possible to guarantee that the request never arrived at the service - true otherwise\n+     */\n+    public boolean hasSendingRequestStarted() {\n+        return this.sendingRequestHasStarted;\n+    }\n+\n+    void setSendingRequestHasStarted() {\n+        this.sendingRequestHasStarted = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0c6809e5d410a0f95926c638f8698456296c1bb"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNDA3OQ==", "bodyText": "I thought about it - decided against it because I haven't found a place where I could interrupt really when starting to send on the wire. Right now I set the flag at the last point where I can guarantee that sending hasn't started yet - which is good enough for the exception handling. But when pushing it into a first-class STAGE i think we should do it really when starting to send data to the wire. So my preference would to leave this as is - are you ok with it or still disagree?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r496324079", "createdAt": "2020-09-29T01:33:40Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestRecord.java", "diffHunk": "@@ -213,13 +214,26 @@ public long transportRequestId() {\n     // region Methods\n \n     public boolean expire() {\n-        final RequestTimeoutException error = new RequestTimeoutException(this.toString(), this.args.physicalAddress());\n+        final GoneException error = new GoneException(this.toString(), null, this.args.physicalAddress());\n         BridgeInternal.setRequestHeaders(error, this.args.serviceRequest().getHeaders());\n+\n         return this.completeExceptionally(error);\n     }\n \n     public abstract Timeout newTimeout(final TimerTask task);\n \n+    /**\n+     * Provides information whether the request could have been sent to the service\n+     * @return fals if it is possible to guarantee that the request never arrived at the service - true otherwise\n+     */\n+    public boolean hasSendingRequestStarted() {\n+        return this.sendingRequestHasStarted;\n+    }\n+\n+    void setSendingRequestHasStarted() {\n+        this.sendingRequestHasStarted = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExMTIxNQ=="}, "originalCommit": {"oid": "f0c6809e5d410a0f95926c638f8698456296c1bb"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2NTI4MQ==", "bodyText": "I agree with you. Thanks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r497765281", "createdAt": "2020-09-30T19:58:40Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestRecord.java", "diffHunk": "@@ -213,13 +214,26 @@ public long transportRequestId() {\n     // region Methods\n \n     public boolean expire() {\n-        final RequestTimeoutException error = new RequestTimeoutException(this.toString(), this.args.physicalAddress());\n+        final GoneException error = new GoneException(this.toString(), null, this.args.physicalAddress());\n         BridgeInternal.setRequestHeaders(error, this.args.serviceRequest().getHeaders());\n+\n         return this.completeExceptionally(error);\n     }\n \n     public abstract Timeout newTimeout(final TimerTask task);\n \n+    /**\n+     * Provides information whether the request could have been sent to the service\n+     * @return fals if it is possible to guarantee that the request never arrived at the service - true otherwise\n+     */\n+    public boolean hasSendingRequestStarted() {\n+        return this.sendingRequestHasStarted;\n+    }\n+\n+    void setSendingRequestHasStarted() {\n+        this.sendingRequestHasStarted = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExMTIxNQ=="}, "originalCommit": {"oid": "f0c6809e5d410a0f95926c638f8698456296c1bb"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTczNzYyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GoneAndRetryWithRetryPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzoyMTowMlrOHZIVjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMToyOTo1MVrOHZVKRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExMzAzOQ==", "bodyText": "address refresh is done as part of the retry.\nIf no one retries who is going to refresh the address caches when request.requestContext.forceRefreshAddressCache set to true?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r496113039", "createdAt": "2020-09-28T17:21:02Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GoneAndRetryWithRetryPolicy.java", "diffHunk": "@@ -60,12 +60,25 @@ public GoneAndRetryWithRetryPolicy(RxDocumentServiceRequest request, Integer wai\n             !(exception instanceof RetryWithException) &&\n             !(exception instanceof PartitionIsMigratingException) &&\n             !(exception instanceof InvalidPartitionException &&\n-            (this.request.getPartitionKeyRangeIdentity() == null ||\n-            this.request.getPartitionKeyRangeIdentity().getCollectionRid() == null)) &&\n+                (this.request.getPartitionKeyRangeIdentity() == null ||\n+                this.request.getPartitionKeyRangeIdentity().getCollectionRid() == null)) &&\n             !(exception instanceof PartitionKeyRangeIsSplittingException)) {\n+\n             logger.debug(\"Operation will NOT be retried. Current attempt {}, Exception: \", this.attemptCount,\n-                    exception);\n+                exception);\n+            stopStopWatch(this.durationTimer);\n+            return Mono.just(ShouldRetryResult.noRetry());\n+        } else if (exception instanceof GoneException &&\n+            !request.isReadOnly() &&\n+            BridgeInternal.hasSendingRequestStarted((CosmosException)exception)) {\n+\n+            logger.debug(\n+                \"Operation will NOT be retried. Write operations can not be retried safely when sending the request \" +\n+                    \"to the service because they aren't idempotent. Current attempt {}, Exception: \",\n+                this.attemptCount,\n+                exception);\n             stopStopWatch(this.durationTimer);\n+            this.request.requestContext.forceRefreshAddressCache = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0c6809e5d410a0f95926c638f8698456296c1bb"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyMzE0Mw==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r496323143", "createdAt": "2020-09-29T01:29:51Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GoneAndRetryWithRetryPolicy.java", "diffHunk": "@@ -60,12 +60,25 @@ public GoneAndRetryWithRetryPolicy(RxDocumentServiceRequest request, Integer wai\n             !(exception instanceof RetryWithException) &&\n             !(exception instanceof PartitionIsMigratingException) &&\n             !(exception instanceof InvalidPartitionException &&\n-            (this.request.getPartitionKeyRangeIdentity() == null ||\n-            this.request.getPartitionKeyRangeIdentity().getCollectionRid() == null)) &&\n+                (this.request.getPartitionKeyRangeIdentity() == null ||\n+                this.request.getPartitionKeyRangeIdentity().getCollectionRid() == null)) &&\n             !(exception instanceof PartitionKeyRangeIsSplittingException)) {\n+\n             logger.debug(\"Operation will NOT be retried. Current attempt {}, Exception: \", this.attemptCount,\n-                    exception);\n+                exception);\n+            stopStopWatch(this.durationTimer);\n+            return Mono.just(ShouldRetryResult.noRetry());\n+        } else if (exception instanceof GoneException &&\n+            !request.isReadOnly() &&\n+            BridgeInternal.hasSendingRequestStarted((CosmosException)exception)) {\n+\n+            logger.debug(\n+                \"Operation will NOT be retried. Write operations can not be retried safely when sending the request \" +\n+                    \"to the service because they aren't idempotent. Current attempt {}, Exception: \",\n+                this.attemptCount,\n+                exception);\n             stopStopWatch(this.durationTimer);\n+            this.request.requestContext.forceRefreshAddressCache = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExMzAzOQ=="}, "originalCommit": {"oid": "f0c6809e5d410a0f95926c638f8698456296c1bb"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODcxODQyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentServiceRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwOTo0NjoyMFrOHZlKdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwOTo0NjoyMFrOHZlKdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU4NTMzNA==", "bodyText": "Nice thanks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r496585334", "createdAt": "2020-09-29T09:46:20Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentServiceRequest.java", "diffHunk": "@@ -83,6 +83,10 @@ public boolean isReadOnlyScript() {\n         }\n     }\n \n+    public boolean isReadOnly() {\n+        return this.isReadOnlyRequest() || this.isReadOnlyScript();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "585dea7d460a1b50b601f75121a6188ae0f21610"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODczNTgxOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GoneAndRetryWithRetryPolicy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwOTo1MDo1NVrOHZlVqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwOTo1MDo1NVrOHZlVqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU4ODIwMQ==", "bodyText": "Other similar tracers are at warn below.\nWarn seems makes sense.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r496588201", "createdAt": "2020-09-29T09:50:55Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GoneAndRetryWithRetryPolicy.java", "diffHunk": "@@ -60,13 +60,27 @@ public GoneAndRetryWithRetryPolicy(RxDocumentServiceRequest request, Integer wai\n             !(exception instanceof RetryWithException) &&\n             !(exception instanceof PartitionIsMigratingException) &&\n             !(exception instanceof InvalidPartitionException &&\n-            (this.request.getPartitionKeyRangeIdentity() == null ||\n-            this.request.getPartitionKeyRangeIdentity().getCollectionRid() == null)) &&\n+                (this.request.getPartitionKeyRangeIdentity() == null ||\n+                this.request.getPartitionKeyRangeIdentity().getCollectionRid() == null)) &&\n             !(exception instanceof PartitionKeyRangeIsSplittingException)) {\n+\n             logger.debug(\"Operation will NOT be retried. Current attempt {}, Exception: \", this.attemptCount,\n-                    exception);\n+                exception);\n             stopStopWatch(this.durationTimer);\n             return Mono.just(ShouldRetryResult.noRetry());\n+        } else if (exception instanceof GoneException &&\n+            !request.isReadOnly() &&\n+            BridgeInternal.hasSendingRequestStarted((CosmosException)exception)) {\n+\n+            logger.debug(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "585dea7d460a1b50b601f75121a6188ae0f21610"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTQ0ODEyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDowOTo1M1rOHZ_Vfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoxMDowNVrOHazaIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxNDE0Mg==", "bodyText": "If the STAGE status is before SENT, is that enough to decide whether we should retry?\nOr maybe can use @flush() to decide whether the request is on wire? I think when calling flush(), sslHandler will start to prepare handshake etc", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r497014142", "createdAt": "2020-09-29T20:09:53Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -492,6 +492,7 @@ public void write(final ChannelHandlerContext context, final Object message, fin\n \n             final RntbdRequestRecord record = (RntbdRequestRecord) message;\n             this.timestamps.channelWriteAttempted();\n+            record.setSendingRequestHasStarted();\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31c603510f672116d4f58e0f6716959d445387b2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3NjM3Mg==", "bodyText": "No - Especially the SSL handhsake has relatively high potential for error/timeout - and at that point we would still be \"safe to retry\" - the right time is really just before we start sending the actual request on the wire. Does that make sense?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r497076372", "createdAt": "2020-09-29T21:40:21Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -492,6 +492,7 @@ public void write(final ChannelHandlerContext context, final Object message, fin\n \n             final RntbdRequestRecord record = (RntbdRequestRecord) message;\n             this.timestamps.channelWriteAttempted();\n+            record.setSendingRequestHasStarted();\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxNDE0Mg=="}, "originalCommit": {"oid": "31c603510f672116d4f58e0f6716959d445387b2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA4MTQ0Nw==", "bodyText": "Hmm, but I thought instead of creating a new flag, we probably should be safe enough to use Stage.Sent to guard the retry?\nBut this change makes sense to me~", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r497081447", "createdAt": "2020-09-29T21:50:41Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -492,6 +492,7 @@ public void write(final ChannelHandlerContext context, final Object message, fin\n \n             final RntbdRequestRecord record = (RntbdRequestRecord) message;\n             this.timestamps.channelWriteAttempted();\n+            record.setSendingRequestHasStarted();\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxNDE0Mg=="}, "originalCommit": {"oid": "31c603510f672116d4f58e0f6716959d445387b2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA5MTMyMQ==", "bodyText": "Stage.SENT is only set after finishing sending the request on the wire - which means we could receive an error we map to 410 while sending the request - which isn't 100% safe from the idempotency perspective. Once we start sending the request we can't exclude the risk of side effects on the service (because retrieving ACK from the service and setting Stage.SENT isn't happening atomically - although I admit the risk is low. I personally don't think the additional flag is increasing overall complexity much - but as the author I am obviously biased. If there is broader concern about the complexity introduced by this additional flag I am ok with trading-in some correctness and using Stage < SENT as indication of allowing retries. @moderakh / @kirankumarkolli  / @kushagraThapar / @simplynaveen20 - Thoughts?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r497091321", "createdAt": "2020-09-29T22:13:36Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -492,6 +492,7 @@ public void write(final ChannelHandlerContext context, final Object message, fin\n \n             final RntbdRequestRecord record = (RntbdRequestRecord) message;\n             this.timestamps.channelWriteAttempted();\n+            record.setSendingRequestHasStarted();\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxNDE0Mg=="}, "originalCommit": {"oid": "31c603510f672116d4f58e0f6716959d445387b2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA5NzYyMA==", "bodyText": "So currently, we are using write() not writeAndFlush(), that is why I think maybe it is safe (since the write method is only queue the message, but not really writing the message to the underlying socket).\nAnd I think maybe SENT_STARTED when write() completes, and then SENT when flush() completes.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r497097620", "createdAt": "2020-09-29T22:29:22Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -492,6 +492,7 @@ public void write(final ChannelHandlerContext context, final Object message, fin\n \n             final RntbdRequestRecord record = (RntbdRequestRecord) message;\n             this.timestamps.channelWriteAttempted();\n+            record.setSendingRequestHasStarted();\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxNDE0Mg=="}, "originalCommit": {"oid": "31c603510f672116d4f58e0f6716959d445387b2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2NzI5OQ==", "bodyText": "@FabianMeiswinkel  - I am fine with adding the flag, I don't think it introduces additional complexity.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r497867299", "createdAt": "2020-10-01T00:10:05Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -492,6 +492,7 @@ public void write(final ChannelHandlerContext context, final Object message, fin\n \n             final RntbdRequestRecord record = (RntbdRequestRecord) message;\n             this.timestamps.channelWriteAttempted();\n+            record.setSendingRequestHasStarted();\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxNDE0Mg=="}, "originalCommit": {"oid": "31c603510f672116d4f58e0f6716959d445387b2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTQ2MTQ3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDoxMzo1OVrOHZ_dpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDozMDo1NlrOHaACTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxNjIyOQ==", "bodyText": "Why need to create RequestTimeoutException as inner? would not 'error' itself enough?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r497016229", "createdAt": "2020-09-29T20:13:59Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -799,7 +800,11 @@ private void messageReceived(final ChannelHandlerContext context, final RntbdRes\n                     break;\n \n                 case StatusCodes.REQUEST_TIMEOUT:\n-                    cause = new RequestTimeoutException(error, lsn, partitionKeyRangeId, responseHeaders);\n+                    Exception inner = new RequestTimeoutException(error, lsn, partitionKeyRangeId, responseHeaders);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31c603510f672116d4f58e0f6716959d445387b2"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyNTYxMg==", "bodyText": "To not loose context in cases where we iterate through exceptions recursively through all inner exceptions etc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r497025612", "createdAt": "2020-09-29T20:30:56Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -799,7 +800,11 @@ private void messageReceived(final ChannelHandlerContext context, final RntbdRes\n                     break;\n \n                 case StatusCodes.REQUEST_TIMEOUT:\n-                    cause = new RequestTimeoutException(error, lsn, partitionKeyRangeId, responseHeaders);\n+                    Exception inner = new RequestTimeoutException(error, lsn, partitionKeyRangeId, responseHeaders);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxNjIyOQ=="}, "originalCommit": {"oid": "31c603510f672116d4f58e0f6716959d445387b2"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTQ2OTA4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos-dotnet-benchmark/src/main/resources/log4j2.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDoxNjowMlrOHZ_iEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDoyNzowM1rOHZ_5rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxNzM2MA==", "bodyText": "not important, just wonder should we use different file name here for .net?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r497017360", "createdAt": "2020-09-29T20:16:02Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos-dotnet-benchmark/src/main/resources/log4j2.properties", "diffHunk": "@@ -0,0 +1,25 @@\n+# This is the log4j configuration for benchmarks\n+# Set root logger level to INFO and its default appender to be 'STDOUT'.\n+rootLogger.level = info\n+rootLogger.appenderRef.stdout.ref = STDOUT\n+\n+# Uncomment here and lines 21 - 25 to enable logging to a file as well.\n+#rootLogger.appenderRef.logFile.ref = FILE\n+\n+property.logDirectory = $${sys:azure.cosmos.logger.directory}\n+property.hostName = $${sys:azure.cosmos.hostname}\n+\n+logger.netty.name = io.netty\n+logger.netty.level = off\n+\n+# STDOUT is a ConsoleAppender and uses PatternLayout.\n+appender.console.name = STDOUT\n+appender.console.type = Console\n+appender.console.layout.type = PatternLayout\n+appender.console.layout.pattern = %d %5X{pid} [%t] %-5p %c - %m%n\n+\n+#appender.logfile.name = FILE\n+#appender.logfile.type = File\n+#appender.logfile.filename = ${logDirectory}/azure-cosmos-benchmark.log", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31c603510f672116d4f58e0f6716959d445387b2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyMzQwNw==", "bodyText": "Fixed in next iteration", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r497023407", "createdAt": "2020-09-29T20:27:03Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos-dotnet-benchmark/src/main/resources/log4j2.properties", "diffHunk": "@@ -0,0 +1,25 @@\n+# This is the log4j configuration for benchmarks\n+# Set root logger level to INFO and its default appender to be 'STDOUT'.\n+rootLogger.level = info\n+rootLogger.appenderRef.stdout.ref = STDOUT\n+\n+# Uncomment here and lines 21 - 25 to enable logging to a file as well.\n+#rootLogger.appenderRef.logFile.ref = FILE\n+\n+property.logDirectory = $${sys:azure.cosmos.logger.directory}\n+property.hostName = $${sys:azure.cosmos.hostname}\n+\n+logger.netty.name = io.netty\n+logger.netty.level = off\n+\n+# STDOUT is a ConsoleAppender and uses PatternLayout.\n+appender.console.name = STDOUT\n+appender.console.type = Console\n+appender.console.layout.type = PatternLayout\n+appender.console.layout.pattern = %d %5X{pid} [%t] %-5p %c - %m%n\n+\n+#appender.logfile.name = FILE\n+#appender.logfile.type = File\n+#appender.logfile.filename = ${logDirectory}/azure-cosmos-benchmark.log", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxNzM2MA=="}, "originalCommit": {"oid": "31c603510f672116d4f58e0f6716959d445387b2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTQ3MzM3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GoneAndRetryWithRetryPolicy.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDoxNzoxMlrOHZ_kww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMTo0NjowNFrOHaDUUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxODA1MQ==", "bodyText": "NIT: the the indent same as above line?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r497018051", "createdAt": "2020-09-29T20:17:12Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GoneAndRetryWithRetryPolicy.java", "diffHunk": "@@ -60,13 +60,27 @@ public GoneAndRetryWithRetryPolicy(RxDocumentServiceRequest request, Integer wai\n             !(exception instanceof RetryWithException) &&\n             !(exception instanceof PartitionIsMigratingException) &&\n             !(exception instanceof InvalidPartitionException &&\n-            (this.request.getPartitionKeyRangeIdentity() == null ||\n-            this.request.getPartitionKeyRangeIdentity().getCollectionRid() == null)) &&\n+                (this.request.getPartitionKeyRangeIdentity() == null ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31c603510f672116d4f58e0f6716959d445387b2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyNDQzMg==", "bodyText": "No - intentional - because it is the second condition for the logical AND.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r497024432", "createdAt": "2020-09-29T20:28:50Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GoneAndRetryWithRetryPolicy.java", "diffHunk": "@@ -60,13 +60,27 @@ public GoneAndRetryWithRetryPolicy(RxDocumentServiceRequest request, Integer wai\n             !(exception instanceof RetryWithException) &&\n             !(exception instanceof PartitionIsMigratingException) &&\n             !(exception instanceof InvalidPartitionException &&\n-            (this.request.getPartitionKeyRangeIdentity() == null ||\n-            this.request.getPartitionKeyRangeIdentity().getCollectionRid() == null)) &&\n+                (this.request.getPartitionKeyRangeIdentity() == null ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxODA1MQ=="}, "originalCommit": {"oid": "31c603510f672116d4f58e0f6716959d445387b2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3OTM3OA==", "bodyText": "oh, yea, sorry, miss read )", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r497079378", "createdAt": "2020-09-29T21:46:04Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GoneAndRetryWithRetryPolicy.java", "diffHunk": "@@ -60,13 +60,27 @@ public GoneAndRetryWithRetryPolicy(RxDocumentServiceRequest request, Integer wai\n             !(exception instanceof RetryWithException) &&\n             !(exception instanceof PartitionIsMigratingException) &&\n             !(exception instanceof InvalidPartitionException &&\n-            (this.request.getPartitionKeyRangeIdentity() == null ||\n-            this.request.getPartitionKeyRangeIdentity().getCollectionRid() == null)) &&\n+                (this.request.getPartitionKeyRangeIdentity() == null ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxODA1MQ=="}, "originalCommit": {"oid": "31c603510f672116d4f58e0f6716959d445387b2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTQ4NTkxOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RetryUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDoyMDo0NlrOHZ_sgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMTo0NzoxNVrOHaDWXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyMDAzNA==", "bodyText": "Why we need to refresh address here? If we reach here, it means we will not going to retry the request, is that we are trying to proactively refresh the address?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r497020034", "createdAt": "2020-09-29T20:20:46Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RetryUtils.java", "diffHunk": "@@ -82,11 +84,20 @@\n \n                 if (!shouldRetryResult.shouldRetry) {\n                     retryPolicy.updateEndTime();\n-                    if(shouldRetryResult.exception == null) {\n-                        return Mono.error(e);\n-                    } else {\n-                        return Mono.error(shouldRetryResult.exception);\n+\n+                    final Throwable errorToReturn = shouldRetryResult.exception != null ? shouldRetryResult.exception : e;\n+                    final Mono<T> failure = Mono.error(errorToReturn);\n+\n+                    if (shouldRetryResult.policyArg != null &&\n+                        shouldRetryResult.policyArg.getValue0() != null &&\n+                        shouldRetryResult.policyArg.getValue0()) {\n+\n+                        return addressSelector.resolveAddressesAsync(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31c603510f672116d4f58e0f6716959d445387b2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyNTA1Mg==", "bodyText": "It is the Gone for write requests - before we were refreshing addresses and retry. Retrying is a problem because writes aren't idempotent. But the address refresh as reaction of all 410s should still happen", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r497025052", "createdAt": "2020-09-29T20:30:00Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RetryUtils.java", "diffHunk": "@@ -82,11 +84,20 @@\n \n                 if (!shouldRetryResult.shouldRetry) {\n                     retryPolicy.updateEndTime();\n-                    if(shouldRetryResult.exception == null) {\n-                        return Mono.error(e);\n-                    } else {\n-                        return Mono.error(shouldRetryResult.exception);\n+\n+                    final Throwable errorToReturn = shouldRetryResult.exception != null ? shouldRetryResult.exception : e;\n+                    final Mono<T> failure = Mono.error(errorToReturn);\n+\n+                    if (shouldRetryResult.policyArg != null &&\n+                        shouldRetryResult.policyArg.getValue0() != null &&\n+                        shouldRetryResult.policyArg.getValue0()) {\n+\n+                        return addressSelector.resolveAddressesAsync(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyMDAzNA=="}, "originalCommit": {"oid": "31c603510f672116d4f58e0f6716959d445387b2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3OTkwMQ==", "bodyText": "I see, got it, make sense, thanks for the explanation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r497079901", "createdAt": "2020-09-29T21:47:15Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RetryUtils.java", "diffHunk": "@@ -82,11 +84,20 @@\n \n                 if (!shouldRetryResult.shouldRetry) {\n                     retryPolicy.updateEndTime();\n-                    if(shouldRetryResult.exception == null) {\n-                        return Mono.error(e);\n-                    } else {\n-                        return Mono.error(shouldRetryResult.exception);\n+\n+                    final Throwable errorToReturn = shouldRetryResult.exception != null ? shouldRetryResult.exception : e;\n+                    final Mono<T> failure = Mono.error(errorToReturn);\n+\n+                    if (shouldRetryResult.policyArg != null &&\n+                        shouldRetryResult.policyArg.getValue0() != null &&\n+                        shouldRetryResult.policyArg.getValue0()) {\n+\n+                        return addressSelector.resolveAddressesAsync(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyMDAzNA=="}, "originalCommit": {"oid": "31c603510f672116d4f58e0f6716959d445387b2"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjE3ODUwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RetryUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTo1NTozMlrOHatFOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjo0OTowMlrOHax83Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2MzY0MA==", "bodyText": "this is for refreshing address cache on a Gone Exception for write request.\nWith this approach the write response will get blocked till the unrelated address resolution completes.\nyou could instead trigger an address cache refresh in background and return the write response immediately.\nSee this as example:\nhttps://github.com/Azure/azure-sdk-for-java/blob/master/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/ConsistencyWriter.java#L365-L373", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r497763640", "createdAt": "2020-09-30T19:55:32Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RetryUtils.java", "diffHunk": "@@ -82,11 +84,20 @@\n \n                 if (!shouldRetryResult.shouldRetry) {\n                     retryPolicy.updateEndTime();\n-                    if(shouldRetryResult.exception == null) {\n-                        return Mono.error(e);\n-                    } else {\n-                        return Mono.error(shouldRetryResult.exception);\n+\n+                    final Throwable errorToReturn = shouldRetryResult.exception != null ? shouldRetryResult.exception : e;\n+                    final Mono<T> failure = Mono.error(errorToReturn);\n+\n+                    if (shouldRetryResult.policyArg != null &&\n+                        shouldRetryResult.policyArg.getValue0() != null &&\n+                        shouldRetryResult.policyArg.getValue0()) {\n+\n+                        return addressSelector.resolveAddressesAsync(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41ecf26d04001ac94c6f77decd913df4b8af53ad"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0MzQyMQ==", "bodyText": "Fixed - good catch. Thanks!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r497843421", "createdAt": "2020-09-30T22:49:02Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RetryUtils.java", "diffHunk": "@@ -82,11 +84,20 @@\n \n                 if (!shouldRetryResult.shouldRetry) {\n                     retryPolicy.updateEndTime();\n-                    if(shouldRetryResult.exception == null) {\n-                        return Mono.error(e);\n-                    } else {\n-                        return Mono.error(shouldRetryResult.exception);\n+\n+                    final Throwable errorToReturn = shouldRetryResult.exception != null ? shouldRetryResult.exception : e;\n+                    final Mono<T> failure = Mono.error(errorToReturn);\n+\n+                    if (shouldRetryResult.policyArg != null &&\n+                        shouldRetryResult.policyArg.getValue0() != null &&\n+                        shouldRetryResult.policyArg.getValue0()) {\n+\n+                        return addressSelector.resolveAddressesAsync(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2MzY0MA=="}, "originalCommit": {"oid": "41ecf26d04001ac94c6f77decd913df4b8af53ad"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjgzODAzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RetryUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDowMDo0MVrOHazQoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoyNjo1OVrOHaz8Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2NDg2NQ==", "bodyText": "Can you please add a comment here what policyArg.getValue0() is ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r497864865", "createdAt": "2020-10-01T00:00:41Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RetryUtils.java", "diffHunk": "@@ -82,11 +85,18 @@\n \n                 if (!shouldRetryResult.shouldRetry) {\n                     retryPolicy.updateEndTime();\n-                    if(shouldRetryResult.exception == null) {\n-                        return Mono.error(e);\n-                    } else {\n-                        return Mono.error(shouldRetryResult.exception);\n+\n+                    final Throwable errorToReturn = shouldRetryResult.exception != null ? shouldRetryResult.exception : e;\n+                    final Mono<T> failure = Mono.error(errorToReturn);\n+\n+                    if (shouldRetryResult.policyArg != null &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45cfea1f34112d4f90f274453b9ca09b7ed24a14"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3NTk3OA==", "bodyText": "Fixed in next iteration", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r497875978", "createdAt": "2020-10-01T00:26:59Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RetryUtils.java", "diffHunk": "@@ -82,11 +85,18 @@\n \n                 if (!shouldRetryResult.shouldRetry) {\n                     retryPolicy.updateEndTime();\n-                    if(shouldRetryResult.exception == null) {\n-                        return Mono.error(e);\n-                    } else {\n-                        return Mono.error(shouldRetryResult.exception);\n+\n+                    final Throwable errorToReturn = shouldRetryResult.exception != null ? shouldRetryResult.exception : e;\n+                    final Mono<T> failure = Mono.error(errorToReturn);\n+\n+                    if (shouldRetryResult.policyArg != null &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2NDg2NQ=="}, "originalCommit": {"oid": "45cfea1f34112d4f90f274453b9ca09b7ed24a14"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjg1NTgyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestRecord.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoxMTowNVrOHazbJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoyNDo0MVrOHaz2Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2NzU1Nw==", "bodyText": "typo on return value :)\nfals -> false", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r497867557", "createdAt": "2020-10-01T00:11:05Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestRecord.java", "diffHunk": "@@ -213,13 +214,26 @@ public long transportRequestId() {\n     // region Methods\n \n     public boolean expire() {\n-        final RequestTimeoutException error = new RequestTimeoutException(this.toString(), this.args.physicalAddress());\n+        final GoneException error = new GoneException(this.toString(), null, this.args.physicalAddress());\n         BridgeInternal.setRequestHeaders(error, this.args.serviceRequest().getHeaders());\n+\n         return this.completeExceptionally(error);\n     }\n \n     public abstract Timeout newTimeout(final TimerTask task);\n \n+    /**\n+     * Provides information whether the request could have been sent to the service\n+     * @return fals if it is possible to guarantee that the request never arrived at the service - true otherwise", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45cfea1f34112d4f90f274453b9ca09b7ed24a14"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2ODE4Ng==", "bodyText": "If I understand this correctly, we are saying that this API returns true if the request has been sent to the service and received it, false otherwise - meaning either the request is sent but not received by the service, or request is not sent at all ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r497868186", "createdAt": "2020-10-01T00:13:42Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestRecord.java", "diffHunk": "@@ -213,13 +214,26 @@ public long transportRequestId() {\n     // region Methods\n \n     public boolean expire() {\n-        final RequestTimeoutException error = new RequestTimeoutException(this.toString(), this.args.physicalAddress());\n+        final GoneException error = new GoneException(this.toString(), null, this.args.physicalAddress());\n         BridgeInternal.setRequestHeaders(error, this.args.serviceRequest().getHeaders());\n+\n         return this.completeExceptionally(error);\n     }\n \n     public abstract Timeout newTimeout(final TimerTask task);\n \n+    /**\n+     * Provides information whether the request could have been sent to the service\n+     * @return fals if it is possible to guarantee that the request never arrived at the service - true otherwise", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2NzU1Nw=="}, "originalCommit": {"oid": "45cfea1f34112d4f90f274453b9ca09b7ed24a14"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3NDQ5NQ==", "bodyText": "No - will return true if there exists a chance that the request could have arrived at the service\nFalse if we are 100% sure the request wasn't sent on the wire", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r497874495", "createdAt": "2020-10-01T00:24:41Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestRecord.java", "diffHunk": "@@ -213,13 +214,26 @@ public long transportRequestId() {\n     // region Methods\n \n     public boolean expire() {\n-        final RequestTimeoutException error = new RequestTimeoutException(this.toString(), this.args.physicalAddress());\n+        final GoneException error = new GoneException(this.toString(), null, this.args.physicalAddress());\n         BridgeInternal.setRequestHeaders(error, this.args.serviceRequest().getHeaders());\n+\n         return this.completeExceptionally(error);\n     }\n \n     public abstract Timeout newTimeout(final TimerTask task);\n \n+    /**\n+     * Provides information whether the request could have been sent to the service\n+     * @return fals if it is possible to guarantee that the request never arrived at the service - true otherwise", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2NzU1Nw=="}, "originalCommit": {"oid": "45cfea1f34112d4f90f274453b9ca09b7ed24a14"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjg2NzQ5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/directconnectivity/ReplicatedResourceClientGoneForWriteTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoxNjoxOFrOHazibQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoyMjowNlrOHazwUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2OTQyMQ==", "bodyText": "Not sure why the CI didn't catch this, but this is missing Microsoft copyright header information.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r497869421", "createdAt": "2020-10-01T00:16:18Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/directconnectivity/ReplicatedResourceClientGoneForWriteTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package com.azure.cosmos.implementation.directconnectivity;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45cfea1f34112d4f90f274453b9ca09b7ed24a14"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3Mjk3Nw==", "bodyText": "Fixed in next iteration", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15735#discussion_r497872977", "createdAt": "2020-10-01T00:22:06Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/directconnectivity/ReplicatedResourceClientGoneForWriteTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package com.azure.cosmos.implementation.directconnectivity;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2OTQyMQ=="}, "originalCommit": {"oid": "45cfea1f34112d4f90f274453b9ca09b7ed24a14"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 780, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}