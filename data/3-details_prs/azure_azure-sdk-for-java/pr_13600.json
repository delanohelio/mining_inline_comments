{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NTkxMzgz", "number": 13600, "title": "Add TypeReference.createInstance(Class<T>)", "bodyText": "This PR adds the method <T> TypeReference<T> createInstance(Class<T>) to TypeReference. It allows for the creation and caching of non-parameterized TypeReferences.", "createdAt": "2020-07-29T17:53:16Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13600", "merged": true, "mergeCommit": {"oid": "796236b4637da84d92dd7a64531ed2b0741f6f92"}, "closed": true, "closedAt": "2020-07-30T17:19:21Z", "author": {"login": "alzimmermsft"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5uzf_gH2gAyNDU4NTkxMzgzOmVjZTdlZWEyMTM4ZGNiMDI5ZDQ0OGMxZGI1M2I3NDk0MTcxMTk5NzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6C779AFqTQ1ODYwMzg2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ece7eea2138dcb029d448c1db53b749417119974", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ece7eea2138dcb029d448c1db53b749417119974", "committedDate": "2020-07-29T17:51:39Z", "message": "Add TypeReference.createInstance(Class<T>) to create and cache non-parameterized TypeReferences"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "535b8dd4c5978a7fa40e58f65d9459bf131fa2cd", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/535b8dd4c5978a7fa40e58f65d9459bf131fa2cd", "committedDate": "2020-07-29T17:59:47Z", "message": "Merge from upstream, fixed merge conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3Nzg2MjQy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13600#pullrequestreview-457786242", "createdAt": "2020-07-29T18:34:47Z", "commit": {"oid": "535b8dd4c5978a7fa40e58f65d9459bf131fa2cd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODozNDo0N1rOG5FGfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODozNDo0N1rOG5FGfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwNTU5OQ==", "bodyText": "Several questions here:\n\nDo we only cache the non-Parameterized class? (e.g. Hotel) What about the Parameterized type class like Map<>?\nIs the Class<?> able to compare in Map?\nDo we waste memory by using map cache? Search user might have many different models(hotel, book etc). It might improve a bit in time but you cannot predict how large the cache map is.\n\nE.g. if customer just pass you inner subclass, then it is different classes every time make the call. I am afraid it will crash the system since we do not have LRU clean up as normal cache.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13600#discussion_r462505599", "createdAt": "2020-07-29T18:34:47Z", "author": {"login": "sima-zhu"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/TypeReference.java", "diffHunk": "@@ -16,6 +19,8 @@\n     private static final ClientLogger LOGGER = new ClientLogger(TypeReference.class);\n     private static final String MISSING_TYPE = \"Type constructed without type information.\";\n \n+    private static final Map<Class<?>, TypeReference<?>> CACHE = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "535b8dd4c5978a7fa40e58f65d9459bf131fa2cd"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3Nzg5NzE4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13600#pullrequestreview-457789718", "createdAt": "2020-07-29T18:39:31Z", "commit": {"oid": "535b8dd4c5978a7fa40e58f65d9459bf131fa2cd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODozOTozMVrOG5FRCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODozOTozMVrOG5FRCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwODI5Ng==", "bodyText": "It looks a little weird by having both createInstance and public constructor.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13600#discussion_r462508296", "createdAt": "2020-07-29T18:39:31Z", "author": {"login": "sima-zhu"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/TypeReference.java", "diffHunk": "@@ -24,19 +29,44 @@\n      * @throws IllegalArgumentException If the reference is constructed without type information.\n      */\n     public TypeReference() {\n-        java.lang.reflect.Type superClass = this.getClass().getGenericSuperclass();\n+        Type superClass = this.getClass().getGenericSuperclass();\n         if (superClass instanceof Class) {\n             throw LOGGER.logExceptionAsError(new IllegalArgumentException(MISSING_TYPE));\n         } else {\n             this.javaType = ((ParameterizedType) superClass).getActualTypeArguments()[0];\n         }\n     }\n \n+    private TypeReference(Class<T> clazz) {\n+        this.javaType = clazz;\n+    }\n+\n     /**\n-     * Return class T type\n-     * @return type\n+     * Returns the {@link Type} representing {@code T}.\n+     *\n+     * @return The {@link Type} representing {@code T}.\n      */\n-    public java.lang.reflect.Type getJavaType() {\n+    public Type getJavaType() {\n         return javaType;\n     }\n+\n+    /**\n+     * Creates and instance of {@link TypeReference} which maintains the generic {@code T} of the passed {@link Class}.\n+     * <p>\n+     * This method will cache the instance of {@link TypeReference} using the passed {@link Class} as the key. This is\n+     * meant to be used with non-generic types such as primitive object types and POJOs, not {@code Map<String, Object>}\n+     * or {@code List<Integer>} parameterized types.\n+     *\n+     * @param clazz {@link Class} that contains generic information used to create the {@link TypeReference}.\n+     * @param <T> The generic type.\n+     * @return Either the cached or new instance of {@link TypeReference}.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> TypeReference<T> createInstance(Class<T> clazz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "535b8dd4c5978a7fa40e58f65d9459bf131fa2cd"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NjAzODYx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13600#pullrequestreview-458603861", "createdAt": "2020-07-30T17:18:58Z", "commit": {"oid": "535b8dd4c5978a7fa40e58f65d9459bf131fa2cd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1017, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}