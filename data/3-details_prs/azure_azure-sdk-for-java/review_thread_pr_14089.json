{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NjgwMzc3", "number": 14089, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDoyODo1NlrOEYSUWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzoyODoyMlrOEYjY1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTAxNDAyOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDoyODo1NlrOHAioDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDoyODo1NlrOHAioDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMyOTM1OA==", "bodyText": "Versioning for libraries in the repo is expected to use the beta moniker, you'll want to change this to 1.0.0-beta.1. Additionally, this will need a version comment tag as other versions in the POM file have, in this case it'll be <!-- {x-version-update;com.azure.digitaltwins.core:azure-digitaltwins-core;current} -->. This will also require adding a new line into this file which is used to validate and update versions automatically using a script: https://github.com/Azure/azure-sdk-for-java/blob/master/eng/versioning/version_client.txt", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470329358", "createdAt": "2020-08-14T00:28:56Z", "author": {"login": "alzimmermsft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/pom.xml", "diffHunk": "@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-client-sdk-parent</artifactId>\n+    <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+    <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+  </parent>\n+\n+    <groupId>com.azure.digitaltwins.core</groupId>\n+    <artifactId>azure-digitaltwins-core</artifactId>\n+    <version>1.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7156871b8c647e5ef02d676d6de96043a0b5e222"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTAxODUxOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozMDowNFrOHAiq7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozMDowNFrOHAiq7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzMDA5Mw==", "bodyText": "Is Digital Twins expected to have its own group? All other client libraries are targeting the groupId of com.azure.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470330093", "createdAt": "2020-08-14T00:30:04Z", "author": {"login": "alzimmermsft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/pom.xml", "diffHunk": "@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-client-sdk-parent</artifactId>\n+    <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+    <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+  </parent>\n+\n+    <groupId>com.azure.digitaltwins.core</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7156871b8c647e5ef02d676d6de96043a0b5e222"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTAyMjQ5OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozMTowNVrOHAitew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjo0MTowMVrOHA7XUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzMDc0Nw==", "bodyText": "This will need a version tag comment as the dependencies above have. This may also need to use version 1.7.3 as it is what is listed in the external version management file we use: https://github.com/Azure/azure-sdk-for-java/blob/master/eng/versioning/external_dependencies.txt#L20.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470330747", "createdAt": "2020-08-14T00:31:05Z", "author": {"login": "alzimmermsft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/pom.xml", "diffHunk": "@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-client-sdk-parent</artifactId>\n+    <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+    <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+  </parent>\n+\n+    <groupId>com.azure.digitaltwins.core</groupId>\n+    <artifactId>azure-digitaltwins-core</artifactId>\n+    <version>1.0-SNAPSHOT</version>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core</artifactId>\n+      <version>1.6.0</version> <!-- {x-version-update;com.azure:azure-core;dependency} -->\n+    </dependency>\n+    <dependency>\n+      <!--Azure identity library has useful classes for authenticating against ADT, but isn't required in the client library. It is used in samples/tests-->\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-identity</artifactId>\n+      <version>1.0.6</version> <!-- {x-version-update;com.azure:azure-identity-service;dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core-http-netty</artifactId>\n+      <version>1.5.3</version> <!-- {x-version-update;com.azure:azure-core-http-netty;dependency} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>com.microsoft.rest</groupId>\n+      <artifactId>client-runtime</artifactId>\n+      <version>1.7.4</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7156871b8c647e5ef02d676d6de96043a0b5e222"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDczNDY3Mg==", "bodyText": "I ended up removing this dependency as we don't really need it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470734672", "createdAt": "2020-08-14T16:41:01Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/pom.xml", "diffHunk": "@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-client-sdk-parent</artifactId>\n+    <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+    <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+  </parent>\n+\n+    <groupId>com.azure.digitaltwins.core</groupId>\n+    <artifactId>azure-digitaltwins-core</artifactId>\n+    <version>1.0-SNAPSHOT</version>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core</artifactId>\n+      <version>1.6.0</version> <!-- {x-version-update;com.azure:azure-core;dependency} -->\n+    </dependency>\n+    <dependency>\n+      <!--Azure identity library has useful classes for authenticating against ADT, but isn't required in the client library. It is used in samples/tests-->\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-identity</artifactId>\n+      <version>1.0.6</version> <!-- {x-version-update;com.azure:azure-identity-service;dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core-http-netty</artifactId>\n+      <version>1.5.3</version> <!-- {x-version-update;com.azure:azure-core-http-netty;dependency} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>com.microsoft.rest</groupId>\n+      <artifactId>client-runtime</artifactId>\n+      <version>1.7.4</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzMDc0Nw=="}, "originalCommit": {"oid": "7156871b8c647e5ef02d676d6de96043a0b5e222"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTAyNDg2OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozMTo0NVrOHAivIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozMTo0NVrOHAivIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzMTE2OQ==", "bodyText": "This will need to be versioned as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470331169", "createdAt": "2020-08-14T00:31:45Z", "author": {"login": "alzimmermsft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/pom.xml", "diffHunk": "@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-client-sdk-parent</artifactId>\n+    <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+    <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+  </parent>\n+\n+    <groupId>com.azure.digitaltwins.core</groupId>\n+    <artifactId>azure-digitaltwins-core</artifactId>\n+    <version>1.0-SNAPSHOT</version>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core</artifactId>\n+      <version>1.6.0</version> <!-- {x-version-update;com.azure:azure-core;dependency} -->\n+    </dependency>\n+    <dependency>\n+      <!--Azure identity library has useful classes for authenticating against ADT, but isn't required in the client library. It is used in samples/tests-->\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-identity</artifactId>\n+      <version>1.0.6</version> <!-- {x-version-update;com.azure:azure-identity-service;dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core-http-netty</artifactId>\n+      <version>1.5.3</version> <!-- {x-version-update;com.azure:azure-core-http-netty;dependency} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>com.microsoft.rest</groupId>\n+      <artifactId>client-runtime</artifactId>\n+      <version>1.7.4</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-annotations</artifactId>\n+      <version>2.10.1</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7156871b8c647e5ef02d676d6de96043a0b5e222"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTAzMDI3OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozMzoxNVrOHAizBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjo0NToyNFrOHA7gSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzMjE2Ng==", "bodyText": "Generally we don't want to have protected fields, instead could this be retrievable using a public getter method and this field can become private.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470332166", "createdAt": "2020-08-14T00:33:15Z", "author": {"login": "alzimmermsft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -0,0 +1,62 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.digitaltwins.core.models.DigitalTwinsGetByIdResponse;\n+import reactor.core.publisher.Mono;\n+\n+\n+/**\n+ * This class provides a client for interacting asynchronously with an Azure Digital Twins instance.\n+ *\n+ * <p>\n+ * This client is instantiated through {@link DigitalTwinsClientBuilder}.\n+ * </p>\n+ *\n+ * <p>\n+ * This client allows for management of digital twins, their components, and their relationships. It also allows for managing\n+ * the digital twin models and event routes tied to your Azure Digital Twins instance.\n+ * </p>\n+ */\n+@ServiceClient(builder = DigitalTwinsClientBuilder.class)\n+public class DigitalTwinsAsyncClient {\n+    protected final DigitalTwinsServiceVersion serviceVersion;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7156871b8c647e5ef02d676d6de96043a0b5e222"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDczNjk3MA==", "bodyText": "I will make code changes after the first round of team review, I will make a note of this comment.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470736970", "createdAt": "2020-08-14T16:45:24Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -0,0 +1,62 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.digitaltwins.core.models.DigitalTwinsGetByIdResponse;\n+import reactor.core.publisher.Mono;\n+\n+\n+/**\n+ * This class provides a client for interacting asynchronously with an Azure Digital Twins instance.\n+ *\n+ * <p>\n+ * This client is instantiated through {@link DigitalTwinsClientBuilder}.\n+ * </p>\n+ *\n+ * <p>\n+ * This client allows for management of digital twins, their components, and their relationships. It also allows for managing\n+ * the digital twin models and event routes tied to your Azure Digital Twins instance.\n+ * </p>\n+ */\n+@ServiceClient(builder = DigitalTwinsClientBuilder.class)\n+public class DigitalTwinsAsyncClient {\n+    protected final DigitalTwinsServiceVersion serviceVersion;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzMjE2Ng=="}, "originalCommit": {"oid": "7156871b8c647e5ef02d676d6de96043a0b5e222"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTAzMzMyOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozNDowNlrOHAi0-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozNDowNlrOHAi0-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzMjY2Nw==", "bodyText": "Generally clients should be final as we don't normally allow them to be extended instead opting for a composition approach.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470332667", "createdAt": "2020-08-14T00:34:06Z", "author": {"login": "alzimmermsft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -0,0 +1,62 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.digitaltwins.core.models.DigitalTwinsGetByIdResponse;\n+import reactor.core.publisher.Mono;\n+\n+\n+/**\n+ * This class provides a client for interacting asynchronously with an Azure Digital Twins instance.\n+ *\n+ * <p>\n+ * This client is instantiated through {@link DigitalTwinsClientBuilder}.\n+ * </p>\n+ *\n+ * <p>\n+ * This client allows for management of digital twins, their components, and their relationships. It also allows for managing\n+ * the digital twin models and event routes tied to your Azure Digital Twins instance.\n+ * </p>\n+ */\n+@ServiceClient(builder = DigitalTwinsClientBuilder.class)\n+public class DigitalTwinsAsyncClient {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7156871b8c647e5ef02d676d6de96043a0b5e222"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTAzNjk5OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozNTowMFrOHAi3OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozNTowMFrOHAi3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzMzI0MQ==", "bodyText": "Should use a package private scope (no scope keyword).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470333241", "createdAt": "2020-08-14T00:35:00Z", "author": {"login": "alzimmermsft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -0,0 +1,62 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.digitaltwins.core.models.DigitalTwinsGetByIdResponse;\n+import reactor.core.publisher.Mono;\n+\n+\n+/**\n+ * This class provides a client for interacting asynchronously with an Azure Digital Twins instance.\n+ *\n+ * <p>\n+ * This client is instantiated through {@link DigitalTwinsClientBuilder}.\n+ * </p>\n+ *\n+ * <p>\n+ * This client allows for management of digital twins, their components, and their relationships. It also allows for managing\n+ * the digital twin models and event routes tied to your Azure Digital Twins instance.\n+ * </p>\n+ */\n+@ServiceClient(builder = DigitalTwinsClientBuilder.class)\n+public class DigitalTwinsAsyncClient {\n+    protected final DigitalTwinsServiceVersion serviceVersion;\n+\n+    protected final AzureDigitalTwinsAPI protocolLayer;\n+\n+    protected DigitalTwinsAsyncClient(HttpPipeline pipeline, DigitalTwinsServiceVersion serviceVersion, String host) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7156871b8c647e5ef02d676d6de96043a0b5e222"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTAzODE4OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozNToxN1rOHAi37Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozNToxN1rOHAi37Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzMzQyMQ==", "bodyText": "Should be final.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470333421", "createdAt": "2020-08-14T00:35:17Z", "author": {"login": "alzimmermsft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -0,0 +1,60 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.digitaltwins.core.models.DigitalTwinsGetByIdResponse;\n+\n+/**\n+ * This class provides a client for interacting synchronously with an Azure Digital Twins instance.\n+ *\n+ * <p>\n+ * This client is instantiated through {@link DigitalTwinsClientBuilder}.\n+ * </p>\n+ *\n+ * <p>\n+ * This client allows for management of digital twins, their components, and their relationships. It also allows for managing\n+ * the digital twin models and event routes tied to your Azure Digital Twins instance.\n+ * </p>\n+ */\n+@ServiceClient(builder = DigitalTwinsClientBuilder.class)\n+public class DigitalTwinsClient {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7156871b8c647e5ef02d676d6de96043a0b5e222"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTA0NTUwOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozNzoyMVrOHAi8uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozNzoyMVrOHAi8uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzNDY1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static String[] GetAuthorizationScopes(String endpoint) {\n          \n          \n            \n                private static String[] getAuthorizationScopes(String endpoint) {", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470334651", "createdAt": "2020-08-14T00:37:21Z", "author": {"login": "alzimmermsft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "diffHunk": "@@ -0,0 +1,221 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link DigitalTwinsClient\n+ * DigitalTwinsClients} and {@link DigitalTwinsAsyncClient DigitalTwinsAsyncClients}, call {@link #buildClient() buildClient} and {@link\n+ * #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ */\n+@ServiceClientBuilder(serviceClients = {DigitalTwinsClient.class, DigitalTwinsAsyncClient.class})\n+public class DigitalTwinsClientBuilder {\n+    private final List<HttpPipelinePolicy> additionalPolicies = new ArrayList<>();\n+    // mandatory\n+    private String endpoint;\n+    private TokenCredential tokenCredential;\n+    // optional/have default values\n+    private DigitalTwinsServiceVersion serviceVersion;\n+    private HttpPipeline httpPipeline;\n+    private HttpClient httpClient;\n+    private HttpLogOptions logOptions;\n+    private RetryPolicy retryPolicy;\n+\n+    private static HttpPipeline buildPipeline(TokenCredential tokenCredential, String endpoint,\n+                                              HttpLogOptions logOptions, HttpClient httpClient,\n+                                              List<HttpPipelinePolicy> additionalPolicies, RetryPolicy retryPolicy) {\n+        // Closest to API goes first, closest to wire goes last.\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+        // Adds a \"x-ms-client-request-id\" header to each request. This header is useful for tracing requests through Azure ecosystems\n+        policies.add(new RequestIdPolicy());\n+\n+        // Only the RequestIdPolicy will take effect prior to the retry policy\n+        HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+\n+        policies.add(retryPolicy);\n+\n+        // Adds a date header to each HTTP request for tracking purposes\n+        policies.add(new AddDatePolicy());\n+\n+        // Add authentication policy so that each HTTP request has authorization header\n+        HttpPipelinePolicy credentialPolicy = new BearerTokenAuthenticationPolicy(tokenCredential, GetAuthorizationScopes(endpoint));\n+        policies.add(credentialPolicy);\n+\n+        policies.addAll(additionalPolicies);\n+\n+        // Custom policies, authentication policy, and add date policy all take place after the retry policy\n+        HttpPolicyProviders.addAfterRetryPolicies(policies);\n+\n+        policies.add(new HttpLoggingPolicy(logOptions));\n+\n+        return new HttpPipelineBuilder()\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .httpClient(httpClient)\n+            .build();\n+    }\n+\n+    private static String[] GetAuthorizationScopes(String endpoint) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7156871b8c647e5ef02d676d6de96043a0b5e222"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTA1MzM2OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozOTozMFrOHAjB9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozOTozMFrOHAjB9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzNTk4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (this.httpPipeline == null)\n          \n          \n            \n                    {\n          \n          \n            \n                    if (this.httpPipeline == null) {", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470335988", "createdAt": "2020-08-14T00:39:30Z", "author": {"login": "alzimmermsft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "diffHunk": "@@ -0,0 +1,221 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link DigitalTwinsClient\n+ * DigitalTwinsClients} and {@link DigitalTwinsAsyncClient DigitalTwinsAsyncClients}, call {@link #buildClient() buildClient} and {@link\n+ * #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ */\n+@ServiceClientBuilder(serviceClients = {DigitalTwinsClient.class, DigitalTwinsAsyncClient.class})\n+public class DigitalTwinsClientBuilder {\n+    private final List<HttpPipelinePolicy> additionalPolicies = new ArrayList<>();\n+    // mandatory\n+    private String endpoint;\n+    private TokenCredential tokenCredential;\n+    // optional/have default values\n+    private DigitalTwinsServiceVersion serviceVersion;\n+    private HttpPipeline httpPipeline;\n+    private HttpClient httpClient;\n+    private HttpLogOptions logOptions;\n+    private RetryPolicy retryPolicy;\n+\n+    private static HttpPipeline buildPipeline(TokenCredential tokenCredential, String endpoint,\n+                                              HttpLogOptions logOptions, HttpClient httpClient,\n+                                              List<HttpPipelinePolicy> additionalPolicies, RetryPolicy retryPolicy) {\n+        // Closest to API goes first, closest to wire goes last.\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+        // Adds a \"x-ms-client-request-id\" header to each request. This header is useful for tracing requests through Azure ecosystems\n+        policies.add(new RequestIdPolicy());\n+\n+        // Only the RequestIdPolicy will take effect prior to the retry policy\n+        HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+\n+        policies.add(retryPolicy);\n+\n+        // Adds a date header to each HTTP request for tracking purposes\n+        policies.add(new AddDatePolicy());\n+\n+        // Add authentication policy so that each HTTP request has authorization header\n+        HttpPipelinePolicy credentialPolicy = new BearerTokenAuthenticationPolicy(tokenCredential, GetAuthorizationScopes(endpoint));\n+        policies.add(credentialPolicy);\n+\n+        policies.addAll(additionalPolicies);\n+\n+        // Custom policies, authentication policy, and add date policy all take place after the retry policy\n+        HttpPolicyProviders.addAfterRetryPolicies(policies);\n+\n+        policies.add(new HttpLoggingPolicy(logOptions));\n+\n+        return new HttpPipelineBuilder()\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .httpClient(httpClient)\n+            .build();\n+    }\n+\n+    private static String[] GetAuthorizationScopes(String endpoint) {\n+        // Uri representation for azure digital twin app Id \"0b07f429-9f4b-4714-9392-cc5e8e80c8b0\" in the public cloud.\n+        String adtPublicCloudAppId = \"https://digitaltwins.azure.net\";\n+        String defaultPermissionConsent = \"/.default\";\n+\n+        // If the endpoint is in Azure public cloud, the suffix will have \"azure.net\" or \"ppe.net\".\n+        // Once ADT becomes available in other clouds, their corresponding scope has to be matched and set.\n+        if (endpoint.indexOf(\"azure.net\") > 0\n+            || endpoint.indexOf(\"ppe.net\") > 0) {\n+            return new String[]{adtPublicCloudAppId + defaultPermissionConsent};\n+        }\n+\n+        throw new IllegalArgumentException(String.format(\"Azure digital twins instance endpoint %s is not valid.\", endpoint));\n+    }\n+\n+    /**\n+     * Create a {@link DigitalTwinsClient} based on the builder settings.\n+     *\n+     * @return the created synchronous DigitalTwinsClient\n+     */\n+    public DigitalTwinsClient buildClient() {\n+        return new DigitalTwinsClient(buildAsyncClient());\n+    }\n+\n+    /**\n+     * Create a {@link DigitalTwinsAsyncClient} based on the builder settings.\n+     *\n+     * @return the created synchronous DigitalTwinsAsyncClient\n+     */\n+    public DigitalTwinsAsyncClient buildAsyncClient() {\n+        Objects.requireNonNull(tokenCredential, \"'tokenCredential' cannot be null.\");\n+        Objects.requireNonNull(endpoint, \"'endpoint' cannot be null\");\n+\n+        // Set defaults for these fields if they were not set while building the client\n+        this.serviceVersion = this.serviceVersion != null ? this.serviceVersion : DigitalTwinsServiceVersion.getLatest();\n+        this.retryPolicy = this.retryPolicy != null ? this.retryPolicy : new RetryPolicy(); // Default is exponential backoff\n+\n+        if (this.httpPipeline == null)\n+        {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7156871b8c647e5ef02d676d6de96043a0b5e222"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTA2MjM3OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo0MTo1MlrOHAjIGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo0MTo1MlrOHAjIGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzNzU2Mg==", "bodyText": "Given this will be called a lot you may want to generate a Pattern for this.\nPattern.compile(\"(ppe|azure)\\\\.net\")\nCould also add case-insensitive flag to it if that is allowed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470337562", "createdAt": "2020-08-14T00:41:52Z", "author": {"login": "alzimmermsft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "diffHunk": "@@ -0,0 +1,221 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link DigitalTwinsClient\n+ * DigitalTwinsClients} and {@link DigitalTwinsAsyncClient DigitalTwinsAsyncClients}, call {@link #buildClient() buildClient} and {@link\n+ * #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ */\n+@ServiceClientBuilder(serviceClients = {DigitalTwinsClient.class, DigitalTwinsAsyncClient.class})\n+public class DigitalTwinsClientBuilder {\n+    private final List<HttpPipelinePolicy> additionalPolicies = new ArrayList<>();\n+    // mandatory\n+    private String endpoint;\n+    private TokenCredential tokenCredential;\n+    // optional/have default values\n+    private DigitalTwinsServiceVersion serviceVersion;\n+    private HttpPipeline httpPipeline;\n+    private HttpClient httpClient;\n+    private HttpLogOptions logOptions;\n+    private RetryPolicy retryPolicy;\n+\n+    private static HttpPipeline buildPipeline(TokenCredential tokenCredential, String endpoint,\n+                                              HttpLogOptions logOptions, HttpClient httpClient,\n+                                              List<HttpPipelinePolicy> additionalPolicies, RetryPolicy retryPolicy) {\n+        // Closest to API goes first, closest to wire goes last.\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+        // Adds a \"x-ms-client-request-id\" header to each request. This header is useful for tracing requests through Azure ecosystems\n+        policies.add(new RequestIdPolicy());\n+\n+        // Only the RequestIdPolicy will take effect prior to the retry policy\n+        HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+\n+        policies.add(retryPolicy);\n+\n+        // Adds a date header to each HTTP request for tracking purposes\n+        policies.add(new AddDatePolicy());\n+\n+        // Add authentication policy so that each HTTP request has authorization header\n+        HttpPipelinePolicy credentialPolicy = new BearerTokenAuthenticationPolicy(tokenCredential, GetAuthorizationScopes(endpoint));\n+        policies.add(credentialPolicy);\n+\n+        policies.addAll(additionalPolicies);\n+\n+        // Custom policies, authentication policy, and add date policy all take place after the retry policy\n+        HttpPolicyProviders.addAfterRetryPolicies(policies);\n+\n+        policies.add(new HttpLoggingPolicy(logOptions));\n+\n+        return new HttpPipelineBuilder()\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .httpClient(httpClient)\n+            .build();\n+    }\n+\n+    private static String[] GetAuthorizationScopes(String endpoint) {\n+        // Uri representation for azure digital twin app Id \"0b07f429-9f4b-4714-9392-cc5e8e80c8b0\" in the public cloud.\n+        String adtPublicCloudAppId = \"https://digitaltwins.azure.net\";\n+        String defaultPermissionConsent = \"/.default\";\n+\n+        // If the endpoint is in Azure public cloud, the suffix will have \"azure.net\" or \"ppe.net\".\n+        // Once ADT becomes available in other clouds, their corresponding scope has to be matched and set.\n+        if (endpoint.indexOf(\"azure.net\") > 0\n+            || endpoint.indexOf(\"ppe.net\") > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7156871b8c647e5ef02d676d6de96043a0b5e222"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTA2NjIwOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo0Mjo1NlrOHAjKuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo0Mjo1NlrOHAjKuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzODIzMg==", "bodyText": "Would this String array ever be mutated? If not let's make it a constant so a new array isn't added to the heap each time this path triggers.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470338232", "createdAt": "2020-08-14T00:42:56Z", "author": {"login": "alzimmermsft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "diffHunk": "@@ -0,0 +1,221 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link DigitalTwinsClient\n+ * DigitalTwinsClients} and {@link DigitalTwinsAsyncClient DigitalTwinsAsyncClients}, call {@link #buildClient() buildClient} and {@link\n+ * #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ */\n+@ServiceClientBuilder(serviceClients = {DigitalTwinsClient.class, DigitalTwinsAsyncClient.class})\n+public class DigitalTwinsClientBuilder {\n+    private final List<HttpPipelinePolicy> additionalPolicies = new ArrayList<>();\n+    // mandatory\n+    private String endpoint;\n+    private TokenCredential tokenCredential;\n+    // optional/have default values\n+    private DigitalTwinsServiceVersion serviceVersion;\n+    private HttpPipeline httpPipeline;\n+    private HttpClient httpClient;\n+    private HttpLogOptions logOptions;\n+    private RetryPolicy retryPolicy;\n+\n+    private static HttpPipeline buildPipeline(TokenCredential tokenCredential, String endpoint,\n+                                              HttpLogOptions logOptions, HttpClient httpClient,\n+                                              List<HttpPipelinePolicy> additionalPolicies, RetryPolicy retryPolicy) {\n+        // Closest to API goes first, closest to wire goes last.\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+        // Adds a \"x-ms-client-request-id\" header to each request. This header is useful for tracing requests through Azure ecosystems\n+        policies.add(new RequestIdPolicy());\n+\n+        // Only the RequestIdPolicy will take effect prior to the retry policy\n+        HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+\n+        policies.add(retryPolicy);\n+\n+        // Adds a date header to each HTTP request for tracking purposes\n+        policies.add(new AddDatePolicy());\n+\n+        // Add authentication policy so that each HTTP request has authorization header\n+        HttpPipelinePolicy credentialPolicy = new BearerTokenAuthenticationPolicy(tokenCredential, GetAuthorizationScopes(endpoint));\n+        policies.add(credentialPolicy);\n+\n+        policies.addAll(additionalPolicies);\n+\n+        // Custom policies, authentication policy, and add date policy all take place after the retry policy\n+        HttpPolicyProviders.addAfterRetryPolicies(policies);\n+\n+        policies.add(new HttpLoggingPolicy(logOptions));\n+\n+        return new HttpPipelineBuilder()\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .httpClient(httpClient)\n+            .build();\n+    }\n+\n+    private static String[] GetAuthorizationScopes(String endpoint) {\n+        // Uri representation for azure digital twin app Id \"0b07f429-9f4b-4714-9392-cc5e8e80c8b0\" in the public cloud.\n+        String adtPublicCloudAppId = \"https://digitaltwins.azure.net\";\n+        String defaultPermissionConsent = \"/.default\";\n+\n+        // If the endpoint is in Azure public cloud, the suffix will have \"azure.net\" or \"ppe.net\".\n+        // Once ADT becomes available in other clouds, their corresponding scope has to be matched and set.\n+        if (endpoint.indexOf(\"azure.net\") > 0\n+            || endpoint.indexOf(\"ppe.net\") > 0) {\n+            return new String[]{adtPublicCloudAppId + defaultPermissionConsent};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7156871b8c647e5ef02d676d6de96043a0b5e222"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTA2NzI5OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo0MzoxNFrOHAjLYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo0MzoxNFrOHAjLYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzODQwMA==", "bodyText": "These could be made constant at the class level.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470338400", "createdAt": "2020-08-14T00:43:14Z", "author": {"login": "alzimmermsft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "diffHunk": "@@ -0,0 +1,221 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link DigitalTwinsClient\n+ * DigitalTwinsClients} and {@link DigitalTwinsAsyncClient DigitalTwinsAsyncClients}, call {@link #buildClient() buildClient} and {@link\n+ * #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ */\n+@ServiceClientBuilder(serviceClients = {DigitalTwinsClient.class, DigitalTwinsAsyncClient.class})\n+public class DigitalTwinsClientBuilder {\n+    private final List<HttpPipelinePolicy> additionalPolicies = new ArrayList<>();\n+    // mandatory\n+    private String endpoint;\n+    private TokenCredential tokenCredential;\n+    // optional/have default values\n+    private DigitalTwinsServiceVersion serviceVersion;\n+    private HttpPipeline httpPipeline;\n+    private HttpClient httpClient;\n+    private HttpLogOptions logOptions;\n+    private RetryPolicy retryPolicy;\n+\n+    private static HttpPipeline buildPipeline(TokenCredential tokenCredential, String endpoint,\n+                                              HttpLogOptions logOptions, HttpClient httpClient,\n+                                              List<HttpPipelinePolicy> additionalPolicies, RetryPolicy retryPolicy) {\n+        // Closest to API goes first, closest to wire goes last.\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+        // Adds a \"x-ms-client-request-id\" header to each request. This header is useful for tracing requests through Azure ecosystems\n+        policies.add(new RequestIdPolicy());\n+\n+        // Only the RequestIdPolicy will take effect prior to the retry policy\n+        HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+\n+        policies.add(retryPolicy);\n+\n+        // Adds a date header to each HTTP request for tracking purposes\n+        policies.add(new AddDatePolicy());\n+\n+        // Add authentication policy so that each HTTP request has authorization header\n+        HttpPipelinePolicy credentialPolicy = new BearerTokenAuthenticationPolicy(tokenCredential, GetAuthorizationScopes(endpoint));\n+        policies.add(credentialPolicy);\n+\n+        policies.addAll(additionalPolicies);\n+\n+        // Custom policies, authentication policy, and add date policy all take place after the retry policy\n+        HttpPolicyProviders.addAfterRetryPolicies(policies);\n+\n+        policies.add(new HttpLoggingPolicy(logOptions));\n+\n+        return new HttpPipelineBuilder()\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .httpClient(httpClient)\n+            .build();\n+    }\n+\n+    private static String[] GetAuthorizationScopes(String endpoint) {\n+        // Uri representation for azure digital twin app Id \"0b07f429-9f4b-4714-9392-cc5e8e80c8b0\" in the public cloud.\n+        String adtPublicCloudAppId = \"https://digitaltwins.azure.net\";\n+        String defaultPermissionConsent = \"/.default\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7156871b8c647e5ef02d676d6de96043a0b5e222"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTA3MzI2OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo0NDo1MlrOHAjPUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo0NDo1MlrOHAjPUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzOTQxMA==", "bodyText": "HttpLoggingPolicy allows for null HttpLogOptions to effectively be a no-op, don't think it needs to be null checked here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470339410", "createdAt": "2020-08-14T00:44:52Z", "author": {"login": "alzimmermsft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "diffHunk": "@@ -0,0 +1,221 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link DigitalTwinsClient\n+ * DigitalTwinsClients} and {@link DigitalTwinsAsyncClient DigitalTwinsAsyncClients}, call {@link #buildClient() buildClient} and {@link\n+ * #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ */\n+@ServiceClientBuilder(serviceClients = {DigitalTwinsClient.class, DigitalTwinsAsyncClient.class})\n+public class DigitalTwinsClientBuilder {\n+    private final List<HttpPipelinePolicy> additionalPolicies = new ArrayList<>();\n+    // mandatory\n+    private String endpoint;\n+    private TokenCredential tokenCredential;\n+    // optional/have default values\n+    private DigitalTwinsServiceVersion serviceVersion;\n+    private HttpPipeline httpPipeline;\n+    private HttpClient httpClient;\n+    private HttpLogOptions logOptions;\n+    private RetryPolicy retryPolicy;\n+\n+    private static HttpPipeline buildPipeline(TokenCredential tokenCredential, String endpoint,\n+                                              HttpLogOptions logOptions, HttpClient httpClient,\n+                                              List<HttpPipelinePolicy> additionalPolicies, RetryPolicy retryPolicy) {\n+        // Closest to API goes first, closest to wire goes last.\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+        // Adds a \"x-ms-client-request-id\" header to each request. This header is useful for tracing requests through Azure ecosystems\n+        policies.add(new RequestIdPolicy());\n+\n+        // Only the RequestIdPolicy will take effect prior to the retry policy\n+        HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+\n+        policies.add(retryPolicy);\n+\n+        // Adds a date header to each HTTP request for tracking purposes\n+        policies.add(new AddDatePolicy());\n+\n+        // Add authentication policy so that each HTTP request has authorization header\n+        HttpPipelinePolicy credentialPolicy = new BearerTokenAuthenticationPolicy(tokenCredential, GetAuthorizationScopes(endpoint));\n+        policies.add(credentialPolicy);\n+\n+        policies.addAll(additionalPolicies);\n+\n+        // Custom policies, authentication policy, and add date policy all take place after the retry policy\n+        HttpPolicyProviders.addAfterRetryPolicies(policies);\n+\n+        policies.add(new HttpLoggingPolicy(logOptions));\n+\n+        return new HttpPipelineBuilder()\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .httpClient(httpClient)\n+            .build();\n+    }\n+\n+    private static String[] GetAuthorizationScopes(String endpoint) {\n+        // Uri representation for azure digital twin app Id \"0b07f429-9f4b-4714-9392-cc5e8e80c8b0\" in the public cloud.\n+        String adtPublicCloudAppId = \"https://digitaltwins.azure.net\";\n+        String defaultPermissionConsent = \"/.default\";\n+\n+        // If the endpoint is in Azure public cloud, the suffix will have \"azure.net\" or \"ppe.net\".\n+        // Once ADT becomes available in other clouds, their corresponding scope has to be matched and set.\n+        if (endpoint.indexOf(\"azure.net\") > 0\n+            || endpoint.indexOf(\"ppe.net\") > 0) {\n+            return new String[]{adtPublicCloudAppId + defaultPermissionConsent};\n+        }\n+\n+        throw new IllegalArgumentException(String.format(\"Azure digital twins instance endpoint %s is not valid.\", endpoint));\n+    }\n+\n+    /**\n+     * Create a {@link DigitalTwinsClient} based on the builder settings.\n+     *\n+     * @return the created synchronous DigitalTwinsClient\n+     */\n+    public DigitalTwinsClient buildClient() {\n+        return new DigitalTwinsClient(buildAsyncClient());\n+    }\n+\n+    /**\n+     * Create a {@link DigitalTwinsAsyncClient} based on the builder settings.\n+     *\n+     * @return the created synchronous DigitalTwinsAsyncClient\n+     */\n+    public DigitalTwinsAsyncClient buildAsyncClient() {\n+        Objects.requireNonNull(tokenCredential, \"'tokenCredential' cannot be null.\");\n+        Objects.requireNonNull(endpoint, \"'endpoint' cannot be null\");\n+\n+        // Set defaults for these fields if they were not set while building the client\n+        this.serviceVersion = this.serviceVersion != null ? this.serviceVersion : DigitalTwinsServiceVersion.getLatest();\n+        this.retryPolicy = this.retryPolicy != null ? this.retryPolicy : new RetryPolicy(); // Default is exponential backoff\n+\n+        if (this.httpPipeline == null)\n+        {\n+            this.httpPipeline = buildPipeline(\n+                this.tokenCredential,\n+                this.endpoint,\n+                this.logOptions,\n+                this.httpClient,\n+                this.additionalPolicies,\n+                this.retryPolicy);\n+        }\n+\n+        return new DigitalTwinsAsyncClient(this.httpPipeline, this.serviceVersion, this.endpoint);\n+    }\n+\n+    /**\n+     * Set the service endpoint that the built client will communicate with. This field is mandatory to set.\n+     *\n+     * @param endpoint URL of the service.\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     */\n+    public DigitalTwinsClientBuilder endpoint(String endpoint) {\n+        this.endpoint = endpoint;\n+        return this;\n+    }\n+\n+    /**\n+     * Set the authentication token provider that the built client will use for all service requests. This field is\n+     * mandatory to set unless you set the http pipeline directly and that set pipeline has an authentication policy configured.\n+     *\n+     * @param tokenCredential the authentication token provider.\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     */\n+    public DigitalTwinsClientBuilder tokenCredential(TokenCredential tokenCredential) {\n+        this.tokenCredential = tokenCredential;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the {@link DigitalTwinsServiceVersion} that is used when making API requests.\n+     * <p>\n+     * If a service version is not provided, the service version that will be used will be the latest known service\n+     * version based on the version of the client library being used. If no service version is specified, updating to a\n+     * newer version of the client library will have the result of potentially moving to a newer service version.\n+     * <p>\n+     * Targeting a specific service version may also mean that the service will return an error for newer APIs.\n+     *\n+     * @param serviceVersion The service API version to use.\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     */\n+    public DigitalTwinsClientBuilder serviceVersion(DigitalTwinsServiceVersion serviceVersion) {\n+        this.serviceVersion = serviceVersion;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the {@link HttpClient} to use for sending a receiving requests to and from the service.\n+     *\n+     * @param httpClient HttpClient to use for requests.\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     */\n+    public DigitalTwinsClientBuilder httpClient(HttpClient httpClient) {\n+        this.httpClient = httpClient;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the {@link HttpLogOptions} for service requests.\n+     *\n+     * @param logOptions The logging configuration to use when sending and receiving HTTP requests/responses.\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     * @throws NullPointerException If {@code logOptions} is {@code null}.\n+     */\n+    public DigitalTwinsClientBuilder httpLogOptions(HttpLogOptions logOptions) {\n+        this.logOptions = Objects.requireNonNull(logOptions, \"'logOptions' cannot be null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7156871b8c647e5ef02d676d6de96043a0b5e222"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTA3NzI4OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo0NTo1MFrOHAjSCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjo0NTowOFrOHA7fvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0MDEwNQ==", "bodyText": "The other code in the builder allows for retryPolicy to be null. I would remove the null check and just document that if this is null a default RetryPolicy will be used.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470340105", "createdAt": "2020-08-14T00:45:50Z", "author": {"login": "alzimmermsft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "diffHunk": "@@ -0,0 +1,221 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link DigitalTwinsClient\n+ * DigitalTwinsClients} and {@link DigitalTwinsAsyncClient DigitalTwinsAsyncClients}, call {@link #buildClient() buildClient} and {@link\n+ * #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ */\n+@ServiceClientBuilder(serviceClients = {DigitalTwinsClient.class, DigitalTwinsAsyncClient.class})\n+public class DigitalTwinsClientBuilder {\n+    private final List<HttpPipelinePolicy> additionalPolicies = new ArrayList<>();\n+    // mandatory\n+    private String endpoint;\n+    private TokenCredential tokenCredential;\n+    // optional/have default values\n+    private DigitalTwinsServiceVersion serviceVersion;\n+    private HttpPipeline httpPipeline;\n+    private HttpClient httpClient;\n+    private HttpLogOptions logOptions;\n+    private RetryPolicy retryPolicy;\n+\n+    private static HttpPipeline buildPipeline(TokenCredential tokenCredential, String endpoint,\n+                                              HttpLogOptions logOptions, HttpClient httpClient,\n+                                              List<HttpPipelinePolicy> additionalPolicies, RetryPolicy retryPolicy) {\n+        // Closest to API goes first, closest to wire goes last.\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+        // Adds a \"x-ms-client-request-id\" header to each request. This header is useful for tracing requests through Azure ecosystems\n+        policies.add(new RequestIdPolicy());\n+\n+        // Only the RequestIdPolicy will take effect prior to the retry policy\n+        HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+\n+        policies.add(retryPolicy);\n+\n+        // Adds a date header to each HTTP request for tracking purposes\n+        policies.add(new AddDatePolicy());\n+\n+        // Add authentication policy so that each HTTP request has authorization header\n+        HttpPipelinePolicy credentialPolicy = new BearerTokenAuthenticationPolicy(tokenCredential, GetAuthorizationScopes(endpoint));\n+        policies.add(credentialPolicy);\n+\n+        policies.addAll(additionalPolicies);\n+\n+        // Custom policies, authentication policy, and add date policy all take place after the retry policy\n+        HttpPolicyProviders.addAfterRetryPolicies(policies);\n+\n+        policies.add(new HttpLoggingPolicy(logOptions));\n+\n+        return new HttpPipelineBuilder()\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .httpClient(httpClient)\n+            .build();\n+    }\n+\n+    private static String[] GetAuthorizationScopes(String endpoint) {\n+        // Uri representation for azure digital twin app Id \"0b07f429-9f4b-4714-9392-cc5e8e80c8b0\" in the public cloud.\n+        String adtPublicCloudAppId = \"https://digitaltwins.azure.net\";\n+        String defaultPermissionConsent = \"/.default\";\n+\n+        // If the endpoint is in Azure public cloud, the suffix will have \"azure.net\" or \"ppe.net\".\n+        // Once ADT becomes available in other clouds, their corresponding scope has to be matched and set.\n+        if (endpoint.indexOf(\"azure.net\") > 0\n+            || endpoint.indexOf(\"ppe.net\") > 0) {\n+            return new String[]{adtPublicCloudAppId + defaultPermissionConsent};\n+        }\n+\n+        throw new IllegalArgumentException(String.format(\"Azure digital twins instance endpoint %s is not valid.\", endpoint));\n+    }\n+\n+    /**\n+     * Create a {@link DigitalTwinsClient} based on the builder settings.\n+     *\n+     * @return the created synchronous DigitalTwinsClient\n+     */\n+    public DigitalTwinsClient buildClient() {\n+        return new DigitalTwinsClient(buildAsyncClient());\n+    }\n+\n+    /**\n+     * Create a {@link DigitalTwinsAsyncClient} based on the builder settings.\n+     *\n+     * @return the created synchronous DigitalTwinsAsyncClient\n+     */\n+    public DigitalTwinsAsyncClient buildAsyncClient() {\n+        Objects.requireNonNull(tokenCredential, \"'tokenCredential' cannot be null.\");\n+        Objects.requireNonNull(endpoint, \"'endpoint' cannot be null\");\n+\n+        // Set defaults for these fields if they were not set while building the client\n+        this.serviceVersion = this.serviceVersion != null ? this.serviceVersion : DigitalTwinsServiceVersion.getLatest();\n+        this.retryPolicy = this.retryPolicy != null ? this.retryPolicy : new RetryPolicy(); // Default is exponential backoff\n+\n+        if (this.httpPipeline == null)\n+        {\n+            this.httpPipeline = buildPipeline(\n+                this.tokenCredential,\n+                this.endpoint,\n+                this.logOptions,\n+                this.httpClient,\n+                this.additionalPolicies,\n+                this.retryPolicy);\n+        }\n+\n+        return new DigitalTwinsAsyncClient(this.httpPipeline, this.serviceVersion, this.endpoint);\n+    }\n+\n+    /**\n+     * Set the service endpoint that the built client will communicate with. This field is mandatory to set.\n+     *\n+     * @param endpoint URL of the service.\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     */\n+    public DigitalTwinsClientBuilder endpoint(String endpoint) {\n+        this.endpoint = endpoint;\n+        return this;\n+    }\n+\n+    /**\n+     * Set the authentication token provider that the built client will use for all service requests. This field is\n+     * mandatory to set unless you set the http pipeline directly and that set pipeline has an authentication policy configured.\n+     *\n+     * @param tokenCredential the authentication token provider.\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     */\n+    public DigitalTwinsClientBuilder tokenCredential(TokenCredential tokenCredential) {\n+        this.tokenCredential = tokenCredential;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the {@link DigitalTwinsServiceVersion} that is used when making API requests.\n+     * <p>\n+     * If a service version is not provided, the service version that will be used will be the latest known service\n+     * version based on the version of the client library being used. If no service version is specified, updating to a\n+     * newer version of the client library will have the result of potentially moving to a newer service version.\n+     * <p>\n+     * Targeting a specific service version may also mean that the service will return an error for newer APIs.\n+     *\n+     * @param serviceVersion The service API version to use.\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     */\n+    public DigitalTwinsClientBuilder serviceVersion(DigitalTwinsServiceVersion serviceVersion) {\n+        this.serviceVersion = serviceVersion;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the {@link HttpClient} to use for sending a receiving requests to and from the service.\n+     *\n+     * @param httpClient HttpClient to use for requests.\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     */\n+    public DigitalTwinsClientBuilder httpClient(HttpClient httpClient) {\n+        this.httpClient = httpClient;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the {@link HttpLogOptions} for service requests.\n+     *\n+     * @param logOptions The logging configuration to use when sending and receiving HTTP requests/responses.\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     * @throws NullPointerException If {@code logOptions} is {@code null}.\n+     */\n+    public DigitalTwinsClientBuilder httpLogOptions(HttpLogOptions logOptions) {\n+        this.logOptions = Objects.requireNonNull(logOptions, \"'logOptions' cannot be null.\");\n+        return this;\n+    }\n+\n+    /**\n+     * Adds a pipeline policy to apply on each request sent. The policy will be added after the retry policy. If\n+     * the method is called multiple times, all policies will be added and their order preserved.\n+     *\n+     * @param pipelinePolicy a pipeline policy\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     * @throws NullPointerException If {@code pipelinePolicy} is {@code null}.\n+     */\n+    public DigitalTwinsClientBuilder addPolicy(HttpPipelinePolicy pipelinePolicy) {\n+        this.additionalPolicies.add(Objects.requireNonNull(pipelinePolicy, \"'pipelinePolicy' cannot be null\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the request retry options for all the requests made through the client. By default, the pipeline will\n+     * use an exponential backoff retry value as detailed in {@link RetryPolicy#RetryPolicy()}.\n+     *\n+     * @param retryPolicy {@link RetryPolicy}.\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     * @throws NullPointerException If {@code retryOptions} is {@code null}.\n+     */\n+    public DigitalTwinsClientBuilder retryOptions(RetryPolicy retryPolicy) {\n+        this.retryPolicy = Objects.requireNonNull(retryPolicy, \"'retryPolicy' cannot be null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7156871b8c647e5ef02d676d6de96043a0b5e222"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDczNjgyOQ==", "bodyText": "I will make code changes after the first round of team review, I will make a note of this comment.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470736829", "createdAt": "2020-08-14T16:45:08Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "diffHunk": "@@ -0,0 +1,221 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link DigitalTwinsClient\n+ * DigitalTwinsClients} and {@link DigitalTwinsAsyncClient DigitalTwinsAsyncClients}, call {@link #buildClient() buildClient} and {@link\n+ * #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ */\n+@ServiceClientBuilder(serviceClients = {DigitalTwinsClient.class, DigitalTwinsAsyncClient.class})\n+public class DigitalTwinsClientBuilder {\n+    private final List<HttpPipelinePolicy> additionalPolicies = new ArrayList<>();\n+    // mandatory\n+    private String endpoint;\n+    private TokenCredential tokenCredential;\n+    // optional/have default values\n+    private DigitalTwinsServiceVersion serviceVersion;\n+    private HttpPipeline httpPipeline;\n+    private HttpClient httpClient;\n+    private HttpLogOptions logOptions;\n+    private RetryPolicy retryPolicy;\n+\n+    private static HttpPipeline buildPipeline(TokenCredential tokenCredential, String endpoint,\n+                                              HttpLogOptions logOptions, HttpClient httpClient,\n+                                              List<HttpPipelinePolicy> additionalPolicies, RetryPolicy retryPolicy) {\n+        // Closest to API goes first, closest to wire goes last.\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+        // Adds a \"x-ms-client-request-id\" header to each request. This header is useful for tracing requests through Azure ecosystems\n+        policies.add(new RequestIdPolicy());\n+\n+        // Only the RequestIdPolicy will take effect prior to the retry policy\n+        HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+\n+        policies.add(retryPolicy);\n+\n+        // Adds a date header to each HTTP request for tracking purposes\n+        policies.add(new AddDatePolicy());\n+\n+        // Add authentication policy so that each HTTP request has authorization header\n+        HttpPipelinePolicy credentialPolicy = new BearerTokenAuthenticationPolicy(tokenCredential, GetAuthorizationScopes(endpoint));\n+        policies.add(credentialPolicy);\n+\n+        policies.addAll(additionalPolicies);\n+\n+        // Custom policies, authentication policy, and add date policy all take place after the retry policy\n+        HttpPolicyProviders.addAfterRetryPolicies(policies);\n+\n+        policies.add(new HttpLoggingPolicy(logOptions));\n+\n+        return new HttpPipelineBuilder()\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .httpClient(httpClient)\n+            .build();\n+    }\n+\n+    private static String[] GetAuthorizationScopes(String endpoint) {\n+        // Uri representation for azure digital twin app Id \"0b07f429-9f4b-4714-9392-cc5e8e80c8b0\" in the public cloud.\n+        String adtPublicCloudAppId = \"https://digitaltwins.azure.net\";\n+        String defaultPermissionConsent = \"/.default\";\n+\n+        // If the endpoint is in Azure public cloud, the suffix will have \"azure.net\" or \"ppe.net\".\n+        // Once ADT becomes available in other clouds, their corresponding scope has to be matched and set.\n+        if (endpoint.indexOf(\"azure.net\") > 0\n+            || endpoint.indexOf(\"ppe.net\") > 0) {\n+            return new String[]{adtPublicCloudAppId + defaultPermissionConsent};\n+        }\n+\n+        throw new IllegalArgumentException(String.format(\"Azure digital twins instance endpoint %s is not valid.\", endpoint));\n+    }\n+\n+    /**\n+     * Create a {@link DigitalTwinsClient} based on the builder settings.\n+     *\n+     * @return the created synchronous DigitalTwinsClient\n+     */\n+    public DigitalTwinsClient buildClient() {\n+        return new DigitalTwinsClient(buildAsyncClient());\n+    }\n+\n+    /**\n+     * Create a {@link DigitalTwinsAsyncClient} based on the builder settings.\n+     *\n+     * @return the created synchronous DigitalTwinsAsyncClient\n+     */\n+    public DigitalTwinsAsyncClient buildAsyncClient() {\n+        Objects.requireNonNull(tokenCredential, \"'tokenCredential' cannot be null.\");\n+        Objects.requireNonNull(endpoint, \"'endpoint' cannot be null\");\n+\n+        // Set defaults for these fields if they were not set while building the client\n+        this.serviceVersion = this.serviceVersion != null ? this.serviceVersion : DigitalTwinsServiceVersion.getLatest();\n+        this.retryPolicy = this.retryPolicy != null ? this.retryPolicy : new RetryPolicy(); // Default is exponential backoff\n+\n+        if (this.httpPipeline == null)\n+        {\n+            this.httpPipeline = buildPipeline(\n+                this.tokenCredential,\n+                this.endpoint,\n+                this.logOptions,\n+                this.httpClient,\n+                this.additionalPolicies,\n+                this.retryPolicy);\n+        }\n+\n+        return new DigitalTwinsAsyncClient(this.httpPipeline, this.serviceVersion, this.endpoint);\n+    }\n+\n+    /**\n+     * Set the service endpoint that the built client will communicate with. This field is mandatory to set.\n+     *\n+     * @param endpoint URL of the service.\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     */\n+    public DigitalTwinsClientBuilder endpoint(String endpoint) {\n+        this.endpoint = endpoint;\n+        return this;\n+    }\n+\n+    /**\n+     * Set the authentication token provider that the built client will use for all service requests. This field is\n+     * mandatory to set unless you set the http pipeline directly and that set pipeline has an authentication policy configured.\n+     *\n+     * @param tokenCredential the authentication token provider.\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     */\n+    public DigitalTwinsClientBuilder tokenCredential(TokenCredential tokenCredential) {\n+        this.tokenCredential = tokenCredential;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the {@link DigitalTwinsServiceVersion} that is used when making API requests.\n+     * <p>\n+     * If a service version is not provided, the service version that will be used will be the latest known service\n+     * version based on the version of the client library being used. If no service version is specified, updating to a\n+     * newer version of the client library will have the result of potentially moving to a newer service version.\n+     * <p>\n+     * Targeting a specific service version may also mean that the service will return an error for newer APIs.\n+     *\n+     * @param serviceVersion The service API version to use.\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     */\n+    public DigitalTwinsClientBuilder serviceVersion(DigitalTwinsServiceVersion serviceVersion) {\n+        this.serviceVersion = serviceVersion;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the {@link HttpClient} to use for sending a receiving requests to and from the service.\n+     *\n+     * @param httpClient HttpClient to use for requests.\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     */\n+    public DigitalTwinsClientBuilder httpClient(HttpClient httpClient) {\n+        this.httpClient = httpClient;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the {@link HttpLogOptions} for service requests.\n+     *\n+     * @param logOptions The logging configuration to use when sending and receiving HTTP requests/responses.\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     * @throws NullPointerException If {@code logOptions} is {@code null}.\n+     */\n+    public DigitalTwinsClientBuilder httpLogOptions(HttpLogOptions logOptions) {\n+        this.logOptions = Objects.requireNonNull(logOptions, \"'logOptions' cannot be null.\");\n+        return this;\n+    }\n+\n+    /**\n+     * Adds a pipeline policy to apply on each request sent. The policy will be added after the retry policy. If\n+     * the method is called multiple times, all policies will be added and their order preserved.\n+     *\n+     * @param pipelinePolicy a pipeline policy\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     * @throws NullPointerException If {@code pipelinePolicy} is {@code null}.\n+     */\n+    public DigitalTwinsClientBuilder addPolicy(HttpPipelinePolicy pipelinePolicy) {\n+        this.additionalPolicies.add(Objects.requireNonNull(pipelinePolicy, \"'pipelinePolicy' cannot be null\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the request retry options for all the requests made through the client. By default, the pipeline will\n+     * use an exponential backoff retry value as detailed in {@link RetryPolicy#RetryPolicy()}.\n+     *\n+     * @param retryPolicy {@link RetryPolicy}.\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     * @throws NullPointerException If {@code retryOptions} is {@code null}.\n+     */\n+    public DigitalTwinsClientBuilder retryOptions(RetryPolicy retryPolicy) {\n+        this.retryPolicy = Objects.requireNonNull(retryPolicy, \"'retryPolicy' cannot be null.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0MDEwNQ=="}, "originalCommit": {"oid": "7156871b8c647e5ef02d676d6de96043a0b5e222"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTA4MzMxOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/tests.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo0NzoyNlrOHAjV_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjozODo0NFrOHA7S3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0MTExOA==", "bodyText": "This may need to be LIVE, can't remember if what we check is case sensitive or not.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470341118", "createdAt": "2020-08-14T00:47:26Z", "author": {"login": "alzimmermsft"}, "path": "sdk/digitaltwins/tests.yml", "diffHunk": "@@ -0,0 +1,11 @@\n+trigger: none\n+\n+extends:\n+  template: ../../eng/pipelines/templates/jobs/archetype-sdk-tests.yml\n+  parameters:\n+    ServiceDirectory: digitaltwins\n+    Location: westus2\n+    SubscriptionConfiguration: $(sub-config-azure-cloud-test-resources-preview)\n+    EnvVars:\n+      # Runs live tests.\n+      AZURE_IOT_TEST_MODE: Live", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7156871b8c647e5ef02d676d6de96043a0b5e222"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDczMzUzNA==", "bodyText": "We have it lower cased in the .NET repo and it works as expected.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470733534", "createdAt": "2020-08-14T16:38:44Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/tests.yml", "diffHunk": "@@ -0,0 +1,11 @@\n+trigger: none\n+\n+extends:\n+  template: ../../eng/pipelines/templates/jobs/archetype-sdk-tests.yml\n+  parameters:\n+    ServiceDirectory: digitaltwins\n+    Location: westus2\n+    SubscriptionConfiguration: $(sub-config-azure-cloud-test-resources-preview)\n+    EnvVars:\n+      # Runs live tests.\n+      AZURE_IOT_TEST_MODE: Live", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0MTExOA=="}, "originalCommit": {"oid": "7156871b8c647e5ef02d676d6de96043a0b5e222"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTA5NDI0OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/ci.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo1MDoxNFrOHAjdSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo1MDoxNFrOHAjdSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0Mjk4Ng==", "bodyText": "You'll probably want to these triggers as well.\n- feature/*\n- hotfix/*\n- release/*\n\nThis will ensure that feature branches, release, and hotfix branches will run CI as well. This matches our goal of how to handle branching management as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470342986", "createdAt": "2020-08-14T00:50:14Z", "author": {"login": "alzimmermsft"}, "path": "sdk/digitaltwins/ci.yml", "diffHunk": "@@ -0,0 +1,30 @@\n+# DO NOT EDIT THIS FILE\n+# This file is generated automatically and any changes will be lost.\n+trigger:\n+  branches:\n+    include:\n+      - master", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7156871b8c647e5ef02d676d6de96043a0b5e222"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTA5NzE0OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/ci.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo1MDo1OFrOHAjfPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo1MDo1OFrOHAjfPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0MzQ4Ng==", "bodyText": "This groupId is different than what is in the POM.xml, not exactly sure how that would change build but they should match.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470343486", "createdAt": "2020-08-14T00:50:58Z", "author": {"login": "alzimmermsft"}, "path": "sdk/digitaltwins/ci.yml", "diffHunk": "@@ -0,0 +1,30 @@\n+# DO NOT EDIT THIS FILE\n+# This file is generated automatically and any changes will be lost.\n+trigger:\n+  branches:\n+    include:\n+      - master\n+  paths:\n+    include:\n+      - sdk/digitaltwins/\n+    exclude:\n+      - sdk/digitaltwins/mgmt-v2020_03_01_preview\n+\n+pr:\n+  branches:\n+    include:\n+      - master\n+  paths:\n+    include:\n+      - sdk/digitaltwins/\n+    exclude:\n+      - sdk/digitaltwins/mgmt-v2020_03_01_preview\n+\n+extends:\n+  template: ../../eng/pipelines/templates/stages/archetype-sdk-client.yml\n+  parameters:\n+    ServiceDirectory: digitaltwins\n+    Artifacts:\n+      - name: azure-digitaltwins\n+        groupId: com.azure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7156871b8c647e5ef02d676d6de96043a0b5e222"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTA5OTg4OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/ci.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo1MTozOVrOHAjhGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo1MTozOVrOHAjhGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0Mzk2Mw==", "bodyText": "This doesn't match the artifactId of the POM.xml, should also match.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470343963", "createdAt": "2020-08-14T00:51:39Z", "author": {"login": "alzimmermsft"}, "path": "sdk/digitaltwins/ci.yml", "diffHunk": "@@ -0,0 +1,30 @@\n+# DO NOT EDIT THIS FILE\n+# This file is generated automatically and any changes will be lost.\n+trigger:\n+  branches:\n+    include:\n+      - master\n+  paths:\n+    include:\n+      - sdk/digitaltwins/\n+    exclude:\n+      - sdk/digitaltwins/mgmt-v2020_03_01_preview\n+\n+pr:\n+  branches:\n+    include:\n+      - master\n+  paths:\n+    include:\n+      - sdk/digitaltwins/\n+    exclude:\n+      - sdk/digitaltwins/mgmt-v2020_03_01_preview\n+\n+extends:\n+  template: ../../eng/pipelines/templates/stages/archetype-sdk-client.yml\n+  parameters:\n+    ServiceDirectory: digitaltwins\n+    Artifacts:\n+      - name: azure-digitaltwins", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7156871b8c647e5ef02d676d6de96043a0b5e222"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTgxMDc2OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzoyODoyMlrOHA80UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDoyMToyOVrOHBCSGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1ODQ4MQ==", "bodyText": "Is there no global variable for package versions in the repo for java? Something like the C# global nuget versions file.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470758481", "createdAt": "2020-08-14T17:28:22Z", "author": {"login": "vinagesh"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/pom.xml", "diffHunk": "@@ -0,0 +1,42 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-client-sdk-parent</artifactId>\n+    <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+    <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+  </parent>\n+\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-digitaltwins-core</artifactId>\n+    <version>1.0.0-beta.1</version><!-- {x-version-update;com.azure.digitaltwins.core:azure-digitaltwins-core;current} -->\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core</artifactId>\n+      <version>1.6.0</version> <!-- {x-version-update;com.azure:azure-core;dependency} -->\n+    </dependency>\n+    <dependency>\n+      <!--Azure identity library has useful classes for authenticating against ADT, but isn't required in the client library. It is used in samples/tests-->\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-identity</artifactId>\n+      <version>1.0.6</version> <!-- {x-version-update;com.azure:azure-identity-service;dependency} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20939ab8bd0bed5a524bb60195d3b33101a67046"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0ODAyNQ==", "bodyText": "There is not, they use these code comments for global package updates.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470848025", "createdAt": "2020-08-14T20:21:29Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/pom.xml", "diffHunk": "@@ -0,0 +1,42 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-client-sdk-parent</artifactId>\n+    <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+    <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+  </parent>\n+\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-digitaltwins-core</artifactId>\n+    <version>1.0.0-beta.1</version><!-- {x-version-update;com.azure.digitaltwins.core:azure-digitaltwins-core;current} -->\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core</artifactId>\n+      <version>1.6.0</version> <!-- {x-version-update;com.azure:azure-core;dependency} -->\n+    </dependency>\n+    <dependency>\n+      <!--Azure identity library has useful classes for authenticating against ADT, but isn't required in the client library. It is used in samples/tests-->\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-identity</artifactId>\n+      <version>1.0.6</version> <!-- {x-version-update;com.azure:azure-identity-service;dependency} -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1ODQ4MQ=="}, "originalCommit": {"oid": "20939ab8bd0bed5a524bb60195d3b33101a67046"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1686, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}