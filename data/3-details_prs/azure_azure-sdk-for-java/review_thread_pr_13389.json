{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0NzI4MzU1", "number": 13389, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMTowNjoyMlrOEQ2cmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDo0OToxNFrOESjWhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTA0NzI5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/config/CosmosAuditingRegistrar.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMTowNjoyMlrOG1PEJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMTowNjoyMlrOG1PEJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ3NDUzMw==", "bodyText": "This should be called - CosmosMappingContextLookup", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13389#discussion_r458474533", "createdAt": "2020-07-22T01:06:22Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/config/CosmosAuditingRegistrar.java", "diffHunk": "@@ -0,0 +1,117 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.data.cosmos.config;\n+\n+import com.azure.spring.data.cosmos.Constants;\n+import com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter;\n+import com.azure.spring.data.cosmos.core.mapping.CosmosPersistentEntity;\n+import com.azure.spring.data.cosmos.core.mapping.CosmosPersistentProperty;\n+import org.springframework.beans.factory.FactoryBean;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.beans.factory.support.AbstractBeanDefinition;\n+import org.springframework.beans.factory.support.BeanDefinitionBuilder;\n+import org.springframework.beans.factory.support.BeanDefinitionRegistry;\n+import org.springframework.data.auditing.IsNewAwareAuditingHandler;\n+import org.springframework.data.auditing.config.AuditingBeanDefinitionRegistrarSupport;\n+import org.springframework.data.auditing.config.AuditingConfiguration;\n+import org.springframework.data.mapping.context.MappingContext;\n+import org.springframework.util.Assert;\n+\n+import java.lang.annotation.Annotation;\n+\n+/**\n+ * Adapted from <a href=\"https://github.com/spring-projects/spring-data-mongodb/blob/master/spring-data-mongodb\n+ * /src/main/java/org/springframework/data/mongodb/config/MongoAuditingRegistrar.java\">MongoAuditingRegistrar.java</a>\n+ */\n+class CosmosAuditingRegistrar extends AuditingBeanDefinitionRegistrarSupport {\n+\n+    /*\n+     * (non-Javadoc)\n+     * @see org.springframework.data.auditing.config.AuditingBeanDefinitionRegistrarSupport#getAnnotation()\n+     */\n+    @Override\n+    protected Class<? extends Annotation> getAnnotation() {\n+        return EnableCosmosAuditing.class;\n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     * @see org.springframework.data.auditing.config.AuditingBeanDefinitionRegistrarSupport#getAuditingHandlerBeanName()\n+     */\n+    @Override\n+    protected String getAuditingHandlerBeanName() {\n+        return Constants.AUDITING_HANDLER_BEAN_NAME;\n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     * @see org.springframework.data.auditing.config.AuditingBeanDefinitionRegistrarSupport#\n+     * getAuditHandlerBeanDefinitionBuilder(org.springframework.data.auditing.config.AuditingConfiguration)\n+     */\n+    @Override\n+    protected BeanDefinitionBuilder getAuditHandlerBeanDefinitionBuilder(AuditingConfiguration configuration) {\n+        Assert.notNull(configuration, \"AuditingConfiguration must not be null!\");\n+\n+        final BeanDefinitionBuilder builder =\n+            BeanDefinitionBuilder.rootBeanDefinition(IsNewAwareAuditingHandler.class);\n+\n+        final BeanDefinitionBuilder definition =\n+            BeanDefinitionBuilder.genericBeanDefinition(DocumentDbMappingContextLookup.class);\n+        definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n+\n+        builder.addConstructorArgValue(definition.getBeanDefinition());\n+        return configureDefaultAuditHandlerAttributes(configuration, builder);\n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     * @see org.springframework.data.auditing.config.AuditingBeanDefinitionRegistrarSupport#\n+     * registerAuditListener(org.springframework.beans.factory.config.BeanDefinition,\n+     * org.springframework.beans.factory.support.BeanDefinitionRegistry)\n+     */\n+    @Override\n+    protected void registerAuditListenerBeanDefinition(BeanDefinition auditingHandlerDefinition,\n+                                                       BeanDefinitionRegistry registry) {\n+        // TODO: consider moving to event listener for auditing rather than injecting the\n+        // IsNewAwareAuditingHandler directly - this would require integrating CosmosTemplate with\n+        // the spring eventing system which would be a chunk of work beyond the scope of this PR\n+    }\n+\n+    static class DocumentDbMappingContextLookup implements", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80e4196af425e48606e7353478b8dd21b49249b2"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTA1MTYzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/config/EnableCosmosAuditing.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMTowODo1OFrOG1PGmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDo0MTo1NVrOG3yzIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ3NTE2Mw==", "bodyText": "Since all the other annotations are in com/azure/spring/data/cosmos/core/mapping/ directory, I think we should also place this class in the same directory to be consistent with other Annotations.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13389#discussion_r458475163", "createdAt": "2020-07-22T01:08:58Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/config/EnableCosmosAuditing.java", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80e4196af425e48606e7353478b8dd21b49249b2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1NzE1Mw==", "bodyText": "@Blackbaud-EricSlater Any plans on updating this class package to core/mapping ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13389#discussion_r461157153", "createdAt": "2020-07-27T20:41:55Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/config/EnableCosmosAuditing.java", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ3NTE2Mw=="}, "originalCommit": {"oid": "80e4196af425e48606e7353478b8dd21b49249b2"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODg3ODI4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/CosmosTemplate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDo0NTozMFrOG3y6aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjo0MTowOFrOG32GXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1OTAxOQ==", "bodyText": "Because of multi-database support we have now - hard coding null in this constructor will be in-correct.\nAs in that case, this auditing feature will not work in multi-database configuration.\nSee DatabaseConfiguration.java class for more information on multi-database support example.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13389#discussion_r461159019", "createdAt": "2020-07-27T20:45:30Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/CosmosTemplate.java", "diffHunk": "@@ -76,7 +79,7 @@\n      */\n     public CosmosTemplate(CosmosAsyncClient client, String databaseName,\n                           CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter) {\n-        this(new CosmosFactory(client, databaseName), cosmosConfig, mappingCosmosConverter);\n+        this(new CosmosFactory(client, databaseName), cosmosConfig, mappingCosmosConverter, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9a55cc0dcb22bd1f6691393d7234bd9b6d5a137"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxMTIzMA==", "bodyText": "added a new constructor that includes IsNewAwareAuditingHandler as a parameter for use in multi-database configuration. Updated sample in DatabaseConfiguration.java to use this new constructor with auditing enabled.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13389#discussion_r461211230", "createdAt": "2020-07-27T22:41:08Z", "author": {"login": "Blackbaud-EricSlater"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/CosmosTemplate.java", "diffHunk": "@@ -76,7 +79,7 @@\n      */\n     public CosmosTemplate(CosmosAsyncClient client, String databaseName,\n                           CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter) {\n-        this(new CosmosFactory(client, databaseName), cosmosConfig, mappingCosmosConverter);\n+        this(new CosmosFactory(client, databaseName), cosmosConfig, mappingCosmosConverter, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1OTAxOQ=="}, "originalCommit": {"oid": "c9a55cc0dcb22bd1f6691393d7234bd9b6d5a137"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODg5MDI5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDo0OToxNFrOG3zB3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjo0MDo1MFrOG32GAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2MDkyNw==", "bodyText": "Same here - support for multi-database configuration. Auditing should work in that case too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13389#discussion_r461160927", "createdAt": "2020-07-27T20:49:14Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java", "diffHunk": "@@ -64,7 +66,7 @@\n      */\n     public ReactiveCosmosTemplate(CosmosAsyncClient client, String databaseName,\n                                   CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter) {\n-        this(new CosmosFactory(client, databaseName), cosmosConfig, mappingCosmosConverter);\n+        this(new CosmosFactory(client, databaseName), cosmosConfig, mappingCosmosConverter, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9a55cc0dcb22bd1f6691393d7234bd9b6d5a137"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxMTEzOQ==", "bodyText": "added a new constructor that includes IsNewAwareAuditingHandler as a parameter for use in multi-database configuration. Updated sample in DatabaseConfiguration.java to use this new constructor with auditing enabled.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13389#discussion_r461211139", "createdAt": "2020-07-27T22:40:50Z", "author": {"login": "Blackbaud-EricSlater"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java", "diffHunk": "@@ -64,7 +66,7 @@\n      */\n     public ReactiveCosmosTemplate(CosmosAsyncClient client, String databaseName,\n                                   CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter) {\n-        this(new CosmosFactory(client, databaseName), cosmosConfig, mappingCosmosConverter);\n+        this(new CosmosFactory(client, databaseName), cosmosConfig, mappingCosmosConverter, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2MDkyNw=="}, "originalCommit": {"oid": "c9a55cc0dcb22bd1f6691393d7234bd9b6d5a137"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4956, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}