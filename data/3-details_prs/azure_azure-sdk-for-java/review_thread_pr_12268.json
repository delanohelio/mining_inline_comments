{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NTI0NjIx", "number": 12268, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDoyODowN1rOEIH2DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODozNDozN1rOEKnpjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTUyNTg5OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDoyODowN1rOGn5Wnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNzozMjoxMFrOGouuGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4NzMyNw==", "bodyText": "Will it be clear where the causes are? What identifies the causes if they want to find them quickly in the log?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12268#discussion_r444487327", "createdAt": "2020-06-23T20:28:07Z", "author": {"login": "catalinaperalta"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java", "diffHunk": "@@ -38,27 +40,31 @@\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n         List<CredentialUnavailableException> exceptions = new ArrayList<>(4);\n         return Flux.fromIterable(credentials)\n-                   .flatMap(p -> p.getToken(request).onErrorResume(CredentialUnavailableException.class, t -> {\n-                       exceptions.add(t);\n-                       return Mono.empty();\n-                   }), 1)\n-                   .next()\n-                   .switchIfEmpty(Mono.defer(() -> {\n+            .flatMap(p -> p.getToken(request)\n+                .doOnNext(t -> logger.info(\"Azure Identity => Attempted credential {} returns a token\",\n+                    p.getClass().getSimpleName()))\n+                .onErrorResume(CredentialUnavailableException.class, t -> {\n+                    exceptions.add(t);\n+                    logger.info(\"Azure Identity => Attempted credential {} is unavailable.\",\n+                        p.getClass().getSimpleName());\n+                    return Mono.empty();\n+                }), 1)\n+            .next()\n+            .switchIfEmpty(Mono.defer(() -> {\n+                StringBuilder message = new StringBuilder(\"Tried \"\n+                    + credentials.stream().map(c -> c.getClass().getSimpleName())\n+                    .collect(Collectors.joining(\", \"))\n+                    + \" but failed to acquire a token for any of them. Please verify the\"\n+                    + \" environment for the credentials\"\n+                    + \" and see more details in the causes below.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8625726dac132556ac80daaed63dae72f66d4ef"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM2MTY4OQ==", "bodyText": "This error message has been improved through this PR: #9022", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12268#discussion_r445361689", "createdAt": "2020-06-25T07:32:10Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java", "diffHunk": "@@ -38,27 +40,31 @@\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n         List<CredentialUnavailableException> exceptions = new ArrayList<>(4);\n         return Flux.fromIterable(credentials)\n-                   .flatMap(p -> p.getToken(request).onErrorResume(CredentialUnavailableException.class, t -> {\n-                       exceptions.add(t);\n-                       return Mono.empty();\n-                   }), 1)\n-                   .next()\n-                   .switchIfEmpty(Mono.defer(() -> {\n+            .flatMap(p -> p.getToken(request)\n+                .doOnNext(t -> logger.info(\"Azure Identity => Attempted credential {} returns a token\",\n+                    p.getClass().getSimpleName()))\n+                .onErrorResume(CredentialUnavailableException.class, t -> {\n+                    exceptions.add(t);\n+                    logger.info(\"Azure Identity => Attempted credential {} is unavailable.\",\n+                        p.getClass().getSimpleName());\n+                    return Mono.empty();\n+                }), 1)\n+            .next()\n+            .switchIfEmpty(Mono.defer(() -> {\n+                StringBuilder message = new StringBuilder(\"Tried \"\n+                    + credentials.stream().map(c -> c.getClass().getSimpleName())\n+                    .collect(Collectors.joining(\", \"))\n+                    + \" but failed to acquire a token for any of them. Please verify the\"\n+                    + \" environment for the credentials\"\n+                    + \" and see more details in the causes below.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4NzMyNw=="}, "originalCommit": {"oid": "b8625726dac132556ac80daaed63dae72f66d4ef"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NTQ2NDg0OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwOTo0MzozOVrOGozU1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwOTo0MzozOVrOGozU1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQzNzE0MQ==", "bodyText": "Can use if ( ! (t instanceof CredentialUnavailableException) )?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12268#discussion_r445437141", "createdAt": "2020-06-25T09:43:39Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java", "diffHunk": "@@ -39,31 +42,29 @@\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n         List<CredentialUnavailableException> exceptions = new ArrayList<>(4);\n         return Flux.fromIterable(credentials)\n-            .flatMap(p -> p.getToken(request)\n-                .doOnNext(t -> logger.info(\"Azure Identity => Attempted credential {} returns a token\",\n-                    p.getClass().getSimpleName()))\n-                .onErrorResume(CredentialUnavailableException.class, t -> {\n-                    exceptions.add(t);\n-                    logger.info(\"Azure Identity => Attempted credential {} is unavailable.\",\n-                        p.getClass().getSimpleName());\n-                    return Mono.empty();\n-                }), 1)\n-            .next()\n-            .switchIfEmpty(Mono.defer(() -> {\n-                StringBuilder message = new StringBuilder(\"Tried \"\n-                    + credentials.stream().map(c -> c.getClass().getSimpleName())\n-                    .collect(Collectors.joining(\", \"))\n-                    + \" but failed to acquire a token for any of them. Please verify the\"\n-                    + \" environment for the credentials\"\n-                    + \" and see more details in the causes below.\");\n-\n-                // Chain Exceptions.\n-                CredentialUnavailableException last = exceptions.get(exceptions.size() - 1);\n-                for (int z = exceptions.size() - 2; z >= 0; z--) {\n-                    CredentialUnavailableException current = exceptions.get(z);\n-                    last = new CredentialUnavailableException(current.getMessage(), last);\n-                }\n-                return Mono.error(new CredentialUnavailableException(message.toString(), last));\n-            }));\n+               .flatMap(p -> p.getToken(request).onErrorResume(Exception.class, t -> {\n+                   if (!t.getClass().getSimpleName().equals(\"CredentialUnavailableException\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26275b69cbd1daa0624f616f4b2c8a2c2667a879"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Nzg0OTI5OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/util/LoggingUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDozOTo1MFrOGpK_3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDozOTo1MFrOGpK_3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyNDk5MA==", "bodyText": "Should this be called logTokenSuccess instead? Similarly, logTokenError() for the other method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12268#discussion_r445824990", "createdAt": "2020-06-25T20:39:50Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/util/LoggingUtil.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation.util;\n+\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+/**\n+ * Utilities to handle logging for credentials.\n+ */\n+public final class LoggingUtil {\n+    /**\n+     * Log a success message for a getToken() call.\n+     * @param credential the credential class\n+     * @param logger the logger to output the log message\n+     * @param context the context of the getToken() request\n+     */\n+    public static void getTokenSuccess(Class<?> credential, ClientLogger logger, TokenRequestContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26275b69cbd1daa0624f616f4b2c8a2c2667a879"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Nzg1ODU3OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/util/LoggingUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDo0Mjo1MlrOGpLFqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMToyMzozN1rOGpMSmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyNjQ3Mw==", "bodyText": "It might be more useful to have the context on the error log than on success log. Logging the requested scope when an error occurs will help troubleshooting issues (unless the Throwable is guaranteed to have this scope information).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12268#discussion_r445826473", "createdAt": "2020-06-25T20:42:52Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/util/LoggingUtil.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation.util;\n+\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+/**\n+ * Utilities to handle logging for credentials.\n+ */\n+public final class LoggingUtil {\n+    /**\n+     * Log a success message for a getToken() call.\n+     * @param credential the credential class\n+     * @param logger the logger to output the log message\n+     * @param context the context of the getToken() request\n+     */\n+    public static void getTokenSuccess(Class<?> credential, ClientLogger logger, TokenRequestContext context) {\n+        logger.info(\"Azure Identity => getToken() result for {}: SUCCESS\", credential.getSimpleName());\n+        logger.verbose(\"Azure Identity => Scopes: [{}]\", String.join(\", \", context.getScopes()));\n+    }\n+\n+    /**\n+     * Log an error message for a getToken() call.\n+     * @param credential the credential class\n+     * @param logger the logger to output the log message\n+     * @param error the error thrown during getToken()\n+     */\n+    public static void getTokenError(Class<?> credential, ClientLogger logger, Throwable error) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26275b69cbd1daa0624f616f4b2c8a2c2667a879"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg0NjE3MA==", "bodyText": "Since it doesn't require users to call these methods, I'm adding TokenRequestContext context parameter to this method as well as the success log. I'll print the scopes in error log stream for logTokenError and verbose log stream for logTokenSuccess.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12268#discussion_r445846170", "createdAt": "2020-06-25T21:23:37Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/util/LoggingUtil.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation.util;\n+\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+/**\n+ * Utilities to handle logging for credentials.\n+ */\n+public final class LoggingUtil {\n+    /**\n+     * Log a success message for a getToken() call.\n+     * @param credential the credential class\n+     * @param logger the logger to output the log message\n+     * @param context the context of the getToken() request\n+     */\n+    public static void getTokenSuccess(Class<?> credential, ClientLogger logger, TokenRequestContext context) {\n+        logger.info(\"Azure Identity => getToken() result for {}: SUCCESS\", credential.getSimpleName());\n+        logger.verbose(\"Azure Identity => Scopes: [{}]\", String.join(\", \", context.getScopes()));\n+    }\n+\n+    /**\n+     * Log an error message for a getToken() call.\n+     * @param credential the credential class\n+     * @param logger the logger to output the log message\n+     * @param error the error thrown during getToken()\n+     */\n+    public static void getTokenError(Class<?> credential, ClientLogger logger, Throwable error) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyNjQ3Mw=="}, "originalCommit": {"oid": "26275b69cbd1daa0624f616f4b2c8a2c2667a879"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Nzg3NDUxOnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/util/LoggingUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDo0ODowOVrOGpLQHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMToyNDoyOFrOGpMUHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyOTE1MQ==", "bodyText": "The logger should be created with the classname and the log statement will have with the name of the class. Do we need to print the classname again? Can drop the Class<T> credential arg if it's not required.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12268#discussion_r445829151", "createdAt": "2020-06-25T20:48:09Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/util/LoggingUtil.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation.util;\n+\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+/**\n+ * Utilities to handle logging for credentials.\n+ */\n+public final class LoggingUtil {\n+    /**\n+     * Log a success message for a getToken() call.\n+     * @param credential the credential class\n+     * @param logger the logger to output the log message\n+     * @param context the context of the getToken() request\n+     */\n+    public static void getTokenSuccess(Class<?> credential, ClientLogger logger, TokenRequestContext context) {\n+        logger.info(\"Azure Identity => getToken() result for {}: SUCCESS\", credential.getSimpleName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26275b69cbd1daa0624f616f4b2c8a2c2667a879"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg0NjU1Ng==", "bodyText": "Make sense", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12268#discussion_r445846556", "createdAt": "2020-06-25T21:24:28Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/util/LoggingUtil.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation.util;\n+\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+/**\n+ * Utilities to handle logging for credentials.\n+ */\n+public final class LoggingUtil {\n+    /**\n+     * Log a success message for a getToken() call.\n+     * @param credential the credential class\n+     * @param logger the logger to output the log message\n+     * @param context the context of the getToken() request\n+     */\n+    public static void getTokenSuccess(Class<?> credential, ClientLogger logger, TokenRequestContext context) {\n+        logger.info(\"Azure Identity => getToken() result for {}: SUCCESS\", credential.getSimpleName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyOTE1MQ=="}, "originalCommit": {"oid": "26275b69cbd1daa0624f616f4b2c8a2c2667a879"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTg1MzYxOnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/EnvironmentCredential.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTo0NjowNlrOGrL6oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzozNDo1OFrOGrvQgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkzNzE4NQ==", "bodyText": "Just a question about this, will there be information in the log about the environment variables that need to be set? (Like the error explaining the reason the environment credential failed?) Because this seems to me that is does not include that information, but I'm not sure if it is included later on.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12268#discussion_r447937185", "createdAt": "2020-06-30T19:46:06Z", "author": {"login": "catalinaperalta"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/EnvironmentCredential.java", "diffHunk": "@@ -56,19 +59,29 @@\n         String certPath = configuration.get(Configuration.PROPERTY_AZURE_CLIENT_CERTIFICATE_PATH);\n         String username = configuration.get(Configuration.PROPERTY_AZURE_USERNAME);\n         String password = configuration.get(Configuration.PROPERTY_AZURE_PASSWORD);\n+        logAvailableEnvironmentVariables(clientId, tenantId, clientSecret, certPath, username, password);\n         if (verifyNotNull(clientId)) {\n             if (verifyNotNull(tenantId, clientSecret)) {\n+                logger.info(\"Azure Identity => EnvironmentCredential invoking ClientSecretCredential\");\n                 targetCredential = new ClientSecretCredential(tenantId, clientId, clientSecret, identityClientOptions);\n             } else if (verifyNotNull(tenantId, certPath)) {\n+                logger.info(\"Azure Identity => EnvironmentCredential invoking ClientCertificateCredential\");\n                 targetCredential = new ClientCertificateCredential(tenantId, clientId, certPath,\n                         null, identityClientOptions);\n             } else if (verifyNotNull(username, password)) {\n+                logger.info(\"Azure Identity => EnvironmentCredential invoking UsernamePasswordCredential\");\n                 targetCredential = new UsernamePasswordCredential(clientId,\n                         tenantId,\n                         username,\n                         password,\n                         identityClientOptions);\n+            } else {\n+                logger.error(\"Azure Identity => ERROR in EnvironmentCredential: Not enough environment variables \"\n+                    + \" to determine the environment.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56bbc569044c4f95160aaf497e57e80926bea6d0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkzODU2MA==", "bodyText": "It does not. There are multiple possibilities though for a valid EnvironmentCredential. I cannot tell which scenario the user wants thus I cannot give suggestions on what environment variables are missing.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12268#discussion_r447938560", "createdAt": "2020-06-30T19:48:47Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/EnvironmentCredential.java", "diffHunk": "@@ -56,19 +59,29 @@\n         String certPath = configuration.get(Configuration.PROPERTY_AZURE_CLIENT_CERTIFICATE_PATH);\n         String username = configuration.get(Configuration.PROPERTY_AZURE_USERNAME);\n         String password = configuration.get(Configuration.PROPERTY_AZURE_PASSWORD);\n+        logAvailableEnvironmentVariables(clientId, tenantId, clientSecret, certPath, username, password);\n         if (verifyNotNull(clientId)) {\n             if (verifyNotNull(tenantId, clientSecret)) {\n+                logger.info(\"Azure Identity => EnvironmentCredential invoking ClientSecretCredential\");\n                 targetCredential = new ClientSecretCredential(tenantId, clientId, clientSecret, identityClientOptions);\n             } else if (verifyNotNull(tenantId, certPath)) {\n+                logger.info(\"Azure Identity => EnvironmentCredential invoking ClientCertificateCredential\");\n                 targetCredential = new ClientCertificateCredential(tenantId, clientId, certPath,\n                         null, identityClientOptions);\n             } else if (verifyNotNull(username, password)) {\n+                logger.info(\"Azure Identity => EnvironmentCredential invoking UsernamePasswordCredential\");\n                 targetCredential = new UsernamePasswordCredential(clientId,\n                         tenantId,\n                         username,\n                         password,\n                         identityClientOptions);\n+            } else {\n+                logger.error(\"Azure Identity => ERROR in EnvironmentCredential: Not enough environment variables \"\n+                    + \" to determine the environment.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkzNzE4NQ=="}, "originalCommit": {"oid": "56bbc569044c4f95160aaf497e57e80926bea6d0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1Njk5MQ==", "bodyText": "I have completely redone the logging logic around EnvironmentCredential. I'm doing the best I can to guess which credential the user might be attempting to use (usually only one env var is missing from getting it to work). When multiple are missing, I print a log containing the possible combinations of env vars to configure a valid EnvironmentCredential.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12268#discussion_r448156991", "createdAt": "2020-07-01T07:03:21Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/EnvironmentCredential.java", "diffHunk": "@@ -56,19 +59,29 @@\n         String certPath = configuration.get(Configuration.PROPERTY_AZURE_CLIENT_CERTIFICATE_PATH);\n         String username = configuration.get(Configuration.PROPERTY_AZURE_USERNAME);\n         String password = configuration.get(Configuration.PROPERTY_AZURE_PASSWORD);\n+        logAvailableEnvironmentVariables(clientId, tenantId, clientSecret, certPath, username, password);\n         if (verifyNotNull(clientId)) {\n             if (verifyNotNull(tenantId, clientSecret)) {\n+                logger.info(\"Azure Identity => EnvironmentCredential invoking ClientSecretCredential\");\n                 targetCredential = new ClientSecretCredential(tenantId, clientId, clientSecret, identityClientOptions);\n             } else if (verifyNotNull(tenantId, certPath)) {\n+                logger.info(\"Azure Identity => EnvironmentCredential invoking ClientCertificateCredential\");\n                 targetCredential = new ClientCertificateCredential(tenantId, clientId, certPath,\n                         null, identityClientOptions);\n             } else if (verifyNotNull(username, password)) {\n+                logger.info(\"Azure Identity => EnvironmentCredential invoking UsernamePasswordCredential\");\n                 targetCredential = new UsernamePasswordCredential(clientId,\n                         tenantId,\n                         username,\n                         password,\n                         identityClientOptions);\n+            } else {\n+                logger.error(\"Azure Identity => ERROR in EnvironmentCredential: Not enough environment variables \"\n+                    + \" to determine the environment.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkzNzE4NQ=="}, "originalCommit": {"oid": "56bbc569044c4f95160aaf497e57e80926bea6d0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUxNjIyNQ==", "bodyText": "Ok that sounds good about logging the possible combination of env vars to configure a valid EnvironmentCredential. I also want to improve the logic in Go to do this. So that sounds good to me.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12268#discussion_r448516225", "createdAt": "2020-07-01T17:34:58Z", "author": {"login": "catalinaperalta"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/EnvironmentCredential.java", "diffHunk": "@@ -56,19 +59,29 @@\n         String certPath = configuration.get(Configuration.PROPERTY_AZURE_CLIENT_CERTIFICATE_PATH);\n         String username = configuration.get(Configuration.PROPERTY_AZURE_USERNAME);\n         String password = configuration.get(Configuration.PROPERTY_AZURE_PASSWORD);\n+        logAvailableEnvironmentVariables(clientId, tenantId, clientSecret, certPath, username, password);\n         if (verifyNotNull(clientId)) {\n             if (verifyNotNull(tenantId, clientSecret)) {\n+                logger.info(\"Azure Identity => EnvironmentCredential invoking ClientSecretCredential\");\n                 targetCredential = new ClientSecretCredential(tenantId, clientId, clientSecret, identityClientOptions);\n             } else if (verifyNotNull(tenantId, certPath)) {\n+                logger.info(\"Azure Identity => EnvironmentCredential invoking ClientCertificateCredential\");\n                 targetCredential = new ClientCertificateCredential(tenantId, clientId, certPath,\n                         null, identityClientOptions);\n             } else if (verifyNotNull(username, password)) {\n+                logger.info(\"Azure Identity => EnvironmentCredential invoking UsernamePasswordCredential\");\n                 targetCredential = new UsernamePasswordCredential(clientId,\n                         tenantId,\n                         username,\n                         password,\n                         identityClientOptions);\n+            } else {\n+                logger.error(\"Azure Identity => ERROR in EnvironmentCredential: Not enough environment variables \"\n+                    + \" to determine the environment.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkzNzE4NQ=="}, "originalCommit": {"oid": "56bbc569044c4f95160aaf497e57e80926bea6d0"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTg1NTMwOnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/AuthorizationCodeCredential.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTo0NjozNlrOGrL7oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzowMToyNVrOGrZSAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkzNzQ0MQ==", "bodyText": "do we want to replace this with doOnSuccess ?\nand also add doOnRequest ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12268#discussion_r447937441", "createdAt": "2020-06-30T19:46:36Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/AuthorizationCodeCredential.java", "diffHunk": "@@ -63,7 +66,9 @@\n                    cachedToken.set(new MsalAuthenticationAccount(\n                                 new AuthenticationRecord(msalToken.getAuthenticationResult(),\n                                         identityClient.getTenantId())));\n-                   return  msalToken;\n-               });\n+                   return (AccessToken) msalToken;\n+               })\n+            .doOnNext(token -> LoggingUtil.logTokenSuccess(logger, request))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56bbc569044c4f95160aaf497e57e80926bea6d0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1NjE2Mg==", "bodyText": "I modified everything to be doOnSuccess. We don't log anything on doOnRequest().", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12268#discussion_r448156162", "createdAt": "2020-07-01T07:01:25Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/AuthorizationCodeCredential.java", "diffHunk": "@@ -63,7 +66,9 @@\n                    cachedToken.set(new MsalAuthenticationAccount(\n                                 new AuthenticationRecord(msalToken.getAuthenticationResult(),\n                                         identityClient.getTenantId())));\n-                   return  msalToken;\n-               });\n+                   return (AccessToken) msalToken;\n+               })\n+            .doOnNext(token -> LoggingUtil.logTokenSuccess(logger, request))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkzNzQ0MQ=="}, "originalCommit": {"oid": "56bbc569044c4f95160aaf497e57e80926bea6d0"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTg2MjQxOnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/EnvironmentCredential.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTo0ODo1NlrOGrMAUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzowMDo1MlrOGrZQ7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkzODY0MQ==", "bodyText": "Just an FYI about this, I logged this one for every credential, not just the environment credential, because environment variables can affect other credentials as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12268#discussion_r447938641", "createdAt": "2020-06-30T19:48:56Z", "author": {"login": "catalinaperalta"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/EnvironmentCredential.java", "diffHunk": "@@ -92,4 +105,28 @@ private boolean verifyNotNull(String... configs) {\n         }\n         return true;\n     }\n+\n+    private void logAvailableEnvironmentVariables(String clientId, String tenantId, String clientSecret,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56bbc569044c4f95160aaf497e57e80926bea6d0"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1NTg4Nw==", "bodyText": "I've added this to all the credentials that currently take advantage of environment variables, which are EnvironmentCredential, ManagedIdentityCredential, and SharedTokenCredential. It might be confusing for other credential types that in case of error, users might be misled to believe there's something wrong with their environment variables.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12268#discussion_r448155887", "createdAt": "2020-07-01T07:00:52Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/EnvironmentCredential.java", "diffHunk": "@@ -92,4 +105,28 @@ private boolean verifyNotNull(String... configs) {\n         }\n         return true;\n     }\n+\n+    private void logAvailableEnvironmentVariables(String clientId, String tenantId, String clientSecret,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkzODY0MQ=="}, "originalCommit": {"oid": "56bbc569044c4f95160aaf497e57e80926bea6d0"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTg3NDI4OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/EnvironmentCredential.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTo1MjozN1rOGrMHtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjo1ODo0NlrOGrZNfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0MDUzMw==", "bodyText": "Should this be \"Required Environment variables not found to determine an authentication technique/credential?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12268#discussion_r447940533", "createdAt": "2020-06-30T19:52:37Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/EnvironmentCredential.java", "diffHunk": "@@ -56,19 +59,29 @@\n         String certPath = configuration.get(Configuration.PROPERTY_AZURE_CLIENT_CERTIFICATE_PATH);\n         String username = configuration.get(Configuration.PROPERTY_AZURE_USERNAME);\n         String password = configuration.get(Configuration.PROPERTY_AZURE_PASSWORD);\n+        logAvailableEnvironmentVariables(clientId, tenantId, clientSecret, certPath, username, password);\n         if (verifyNotNull(clientId)) {\n             if (verifyNotNull(tenantId, clientSecret)) {\n+                logger.info(\"Azure Identity => EnvironmentCredential invoking ClientSecretCredential\");\n                 targetCredential = new ClientSecretCredential(tenantId, clientId, clientSecret, identityClientOptions);\n             } else if (verifyNotNull(tenantId, certPath)) {\n+                logger.info(\"Azure Identity => EnvironmentCredential invoking ClientCertificateCredential\");\n                 targetCredential = new ClientCertificateCredential(tenantId, clientId, certPath,\n                         null, identityClientOptions);\n             } else if (verifyNotNull(username, password)) {\n+                logger.info(\"Azure Identity => EnvironmentCredential invoking UsernamePasswordCredential\");\n                 targetCredential = new UsernamePasswordCredential(clientId,\n                         tenantId,\n                         username,\n                         password,\n                         identityClientOptions);\n+            } else {\n+                logger.error(\"Azure Identity => ERROR in EnvironmentCredential: Not enough environment variables \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56bbc569044c4f95160aaf497e57e80926bea6d0"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1NTAwNg==", "bodyText": "Some required environment variables may have been found. so \"required environment variables not found\" is not accurate. I've added more detail to this error message if that makes it more readable to you.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12268#discussion_r448155006", "createdAt": "2020-07-01T06:58:46Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/EnvironmentCredential.java", "diffHunk": "@@ -56,19 +59,29 @@\n         String certPath = configuration.get(Configuration.PROPERTY_AZURE_CLIENT_CERTIFICATE_PATH);\n         String username = configuration.get(Configuration.PROPERTY_AZURE_USERNAME);\n         String password = configuration.get(Configuration.PROPERTY_AZURE_PASSWORD);\n+        logAvailableEnvironmentVariables(clientId, tenantId, clientSecret, certPath, username, password);\n         if (verifyNotNull(clientId)) {\n             if (verifyNotNull(tenantId, clientSecret)) {\n+                logger.info(\"Azure Identity => EnvironmentCredential invoking ClientSecretCredential\");\n                 targetCredential = new ClientSecretCredential(tenantId, clientId, clientSecret, identityClientOptions);\n             } else if (verifyNotNull(tenantId, certPath)) {\n+                logger.info(\"Azure Identity => EnvironmentCredential invoking ClientCertificateCredential\");\n                 targetCredential = new ClientCertificateCredential(tenantId, clientId, certPath,\n                         null, identityClientOptions);\n             } else if (verifyNotNull(username, password)) {\n+                logger.info(\"Azure Identity => EnvironmentCredential invoking UsernamePasswordCredential\");\n                 targetCredential = new UsernamePasswordCredential(clientId,\n                         tenantId,\n                         username,\n                         password,\n                         identityClientOptions);\n+            } else {\n+                logger.error(\"Azure Identity => ERROR in EnvironmentCredential: Not enough environment variables \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0MDUzMw=="}, "originalCommit": {"oid": "56bbc569044c4f95160aaf497e57e80926bea6d0"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjE5NjcwOnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/ManagedIdentityCredential.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTozMzoyMlrOGrPRPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjo1OToyNVrOGrZOiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5MjEyNQ==", "bodyText": "This can be misleading in cases when running on non-Azure hosted machines.\nAs we default to VM credential if MSI endpoint is not set.\nShould we check if IMDS available before logging the environment ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12268#discussion_r447992125", "createdAt": "2020-06-30T21:33:22Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/ManagedIdentityCredential.java", "diffHunk": "@@ -53,8 +56,16 @@ public String getClientId() {\n \n     @Override\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n-        return (appServiceMSICredential != null\n-            ? appServiceMSICredential.authenticate(request)\n-            : virtualMachineMSICredential.authenticate(request));\n+        Mono<AccessToken> accessTokenMono;\n+        if (appServiceMSICredential != null) {\n+            accessTokenMono = appServiceMSICredential.authenticate(request);\n+            logger.info(\"Azure Identity => Managed Identity environment: MSI_ENDPOINT\");\n+        } else {\n+            accessTokenMono = virtualMachineMSICredential.authenticate(request);\n+            logger.info(\"Azure Identity => Managed Identity environment: IMDS\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56bbc569044c4f95160aaf497e57e80926bea6d0"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1NTI3Mw==", "bodyText": "I've moved this log to be only printed in doOnSuccess().", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12268#discussion_r448155273", "createdAt": "2020-07-01T06:59:25Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/ManagedIdentityCredential.java", "diffHunk": "@@ -53,8 +56,16 @@ public String getClientId() {\n \n     @Override\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n-        return (appServiceMSICredential != null\n-            ? appServiceMSICredential.authenticate(request)\n-            : virtualMachineMSICredential.authenticate(request));\n+        Mono<AccessToken> accessTokenMono;\n+        if (appServiceMSICredential != null) {\n+            accessTokenMono = appServiceMSICredential.authenticate(request);\n+            logger.info(\"Azure Identity => Managed Identity environment: MSI_ENDPOINT\");\n+        } else {\n+            accessTokenMono = virtualMachineMSICredential.authenticate(request);\n+            logger.info(\"Azure Identity => Managed Identity environment: IMDS\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5MjEyNQ=="}, "originalCommit": {"oid": "56bbc569044c4f95160aaf497e57e80926bea6d0"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTcwODMxOnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODozNDozN1rOGrxGtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOToxODo0MlrOGryZAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NjQ4Ng==", "bodyText": "should this be doOnSuccess too ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12268#discussion_r448546486", "createdAt": "2020-07-01T18:34:37Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java", "diffHunk": "@@ -40,27 +41,32 @@\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n         List<CredentialUnavailableException> exceptions = new ArrayList<>(4);\n         return Flux.fromIterable(credentials)\n-                   .flatMap(p -> p.getToken(request).onErrorResume(Exception.class, t -> {\n-                       if (!t.getClass().getSimpleName().equals(\"CredentialUnavailableException\")) {\n-                           return Mono.error(new ClientAuthenticationException(\n+            .flatMap(p -> p.getToken(request)\n+                .doOnNext(t -> logger.info(\"Azure Identity => Attempted credential {} returns a token\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0df11b8f1f89d93e8e855780032f5c6bb2922739"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NzcyNA==", "bodyText": "Yeah I can make that change. Though I'm not exactly sure of their difference in our use cases", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12268#discussion_r448547724", "createdAt": "2020-07-01T18:37:07Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java", "diffHunk": "@@ -40,27 +41,32 @@\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n         List<CredentialUnavailableException> exceptions = new ArrayList<>(4);\n         return Flux.fromIterable(credentials)\n-                   .flatMap(p -> p.getToken(request).onErrorResume(Exception.class, t -> {\n-                       if (!t.getClass().getSimpleName().equals(\"CredentialUnavailableException\")) {\n-                           return Mono.error(new ClientAuthenticationException(\n+            .flatMap(p -> p.getToken(request)\n+                .doOnNext(t -> logger.info(\"Azure Identity => Attempted credential {} returns a token\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NjQ4Ng=="}, "originalCommit": {"oid": "0df11b8f1f89d93e8e855780032f5c6bb2922739"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2NzU1NQ==", "bodyText": "Per offline discussion, doOnNext should be used everywhere for now, as we cannot guarantee a Mono will emit a token when doOnSuccess is signaled. An upstream Mono may terminate without emitting either a token or an error. doOnNext() is the more accurate mapping to the message conveyed \"xxx returns a token\".\nIdeally a Mono from the IdentityClient should always return an item or an error. This may or may not be possible. The work is out of scope for this PR thus deferred for further investigation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12268#discussion_r448567555", "createdAt": "2020-07-01T19:18:42Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java", "diffHunk": "@@ -40,27 +41,32 @@\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n         List<CredentialUnavailableException> exceptions = new ArrayList<>(4);\n         return Flux.fromIterable(credentials)\n-                   .flatMap(p -> p.getToken(request).onErrorResume(Exception.class, t -> {\n-                       if (!t.getClass().getSimpleName().equals(\"CredentialUnavailableException\")) {\n-                           return Mono.error(new ClientAuthenticationException(\n+            .flatMap(p -> p.getToken(request)\n+                .doOnNext(t -> logger.info(\"Azure Identity => Attempted credential {} returns a token\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NjQ4Ng=="}, "originalCommit": {"oid": "0df11b8f1f89d93e8e855780032f5c6bb2922739"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3864, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}