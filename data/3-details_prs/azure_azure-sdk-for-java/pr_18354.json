{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1NDk3Nzg5", "number": 18354, "title": "Support conditional access policy in obo flow.", "bodyText": "Fix AzureOAuthenticationFailureHandler not display error info in web page.\nSupport conditional access policy in this flow: webapp -> webapi(obo) -> other-webapi", "createdAt": "2020-12-25T02:29:14Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354", "merged": true, "mergeCommit": {"oid": "6e7e9fb63740396e09b682aed4159b97c07d5ae7"}, "closed": true, "closedAt": "2021-02-26T08:35:39Z", "author": {"login": "han-gao"}, "timelineItems": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdpe5V_gH2gAyNTQ1NDk3Nzg5OmIxOGYyNTAwY2UxMjhjMGE2YmUwN2FkMmQ4Zjc4MTQ5NmRmOGJlYjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd9bKEZgH2gAyNTQ1NDk3Nzg5OjcxM2QwZGI4YmY1YjdhYzU5YWM2ZDdmNmI0MDQ1MmRmZjMyMTdmOGM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b18f2500ce128c0a6be07ad2d8f781496df8beb9", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b18f2500ce128c0a6be07ad2d8f781496df8beb9", "committedDate": "2020-12-25T02:27:55Z", "message": "fix failureHandle not error info"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0254e884d3eede4ad0ab46d7bf106e15cfb9aefb", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0254e884d3eede4ad0ab46d7bf106e15cfb9aefb", "committedDate": "2020-12-31T02:39:40Z", "message": "fix failureHandle not error info"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2b72f7b767af2ad0af3196d13f7afd86c5810da", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b2b72f7b767af2ad0af3196d13f7afd86c5810da", "committedDate": "2021-01-11T01:50:29Z", "message": "Merge branch 'master' of git://github.com/Azure/azure-sdk-for-java into fix_not_error_info\n\n# Conflicts:\n#\tsdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADAuthenticationFailureHandler.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72654ff58db0f9529ba6ecf36778db0385d2a8c1", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/72654ff58db0f9529ba6ecf36778db0385d2a8c1", "committedDate": "2021-01-11T03:00:37Z", "message": "Merge branch 'master' of git://github.com/Azure/azure-sdk-for-java into fix_not_error_info"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "230ca9dca52f4ce63bab84e79f1dc4b48af81958", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/230ca9dca52f4ce63bab84e79f1dc4b48af81958", "committedDate": "2021-01-11T03:15:33Z", "message": "fix failureHandle not error info"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "726a95e2c08ded0c4d04f51dd16b23e0c8d5b428", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/726a95e2c08ded0c4d04f51dd16b23e0c8d5b428", "committedDate": "2021-01-11T10:09:55Z", "message": "code format for checkStyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33ac445954190fa9f8655650819859ee58c0a223", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/33ac445954190fa9f8655650819859ee58c0a223", "committedDate": "2021-01-12T01:52:54Z", "message": "code format for checkStyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY1ODc1MzM4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#pullrequestreview-565875338", "createdAt": "2021-01-12T01:39:38Z", "commit": {"oid": "230ca9dca52f4ce63bab84e79f1dc4b48af81958"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMTozOTozOVrOIRuUnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMTo1NTo0MlrOIRuotA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ1NTY0NQ==", "bodyText": "Delete <scope>compile</scope>, and add <optional>true</optional>.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555455645", "createdAt": "2021-01-12T01:39:39Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/pom.xml", "diffHunk": "@@ -270,6 +270,12 @@\n       <artifactId>spring-core</artifactId>\n       <version>5.2.10.RELEASE</version> <!-- {x-version-update;org.springframework:spring-core;external_dependency} -->\n     </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-webflux</artifactId>\n+      <version>5.2.10.RELEASE</version>\n+      <scope>compile</scope>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230ca9dca52f4ce63bab84e79f1dc4b48af81958"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ1NzgwMA==", "bodyText": "It's better to write a util class like:\npublic class ContitionalAccessPolicyUtil {\n  public static String toConditionalAccessPolicyBody(String claims) {...}\n  public static boolean isConditionalAccessPolicyBody(String body) {...}\n  // other util methods\n}", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555457800", "createdAt": "2021-01-12T01:46:19Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -87,6 +95,28 @@ public AADOAuth2OboAuthorizedClientRepository(ClientRegistrationRepository repos\n             request.setAttribute(oboAuthorizedClientAttributeName, (T) oAuth2AuthorizedClient);\n             return (T) oAuth2AuthorizedClient;\n         } catch (Throwable throwable) {\n+            String claims = Optional.of(throwable)\n+                                    .map(Throwable::getCause)\n+                                    .filter(e -> e instanceof MsalInteractionRequiredException)\n+                                    .map(e -> (MsalInteractionRequiredException) e)\n+                                    .map(MsalInteractionRequiredException::claims)\n+                                    .orElse(null);\n+\n+            if (claims != null) {\n+                ServletRequestAttributes attr =\n+                    (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();\n+                HttpServletResponse response = attr.getResponse();\n+                response.setStatus(HttpStatus.FORBIDDEN.value());\n+                try {\n+                    ServletOutputStream outputStream = response.getOutputStream();\n+                    String result =\n+                        Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS + claims + Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230ca9dca52f4ce63bab84e79f1dc4b48af81958"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ1Nzk1Mw==", "bodyText": "Use LOGGER.error(...) instead of e.printStackTrace()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555457953", "createdAt": "2021-01-12T01:46:50Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -87,6 +95,28 @@ public AADOAuth2OboAuthorizedClientRepository(ClientRegistrationRepository repos\n             request.setAttribute(oboAuthorizedClientAttributeName, (T) oAuth2AuthorizedClient);\n             return (T) oAuth2AuthorizedClient;\n         } catch (Throwable throwable) {\n+            String claims = Optional.of(throwable)\n+                                    .map(Throwable::getCause)\n+                                    .filter(e -> e instanceof MsalInteractionRequiredException)\n+                                    .map(e -> (MsalInteractionRequiredException) e)\n+                                    .map(MsalInteractionRequiredException::claims)\n+                                    .orElse(null);\n+\n+            if (claims != null) {\n+                ServletRequestAttributes attr =\n+                    (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();\n+                HttpServletResponse response = attr.getResponse();\n+                response.setStatus(HttpStatus.FORBIDDEN.value());\n+                try {\n+                    ServletOutputStream outputStream = response.getOutputStream();\n+                    String result =\n+                        Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS + claims + Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS;\n+                    outputStream.write(result.getBytes());\n+                    outputStream.flush();\n+                } catch (IOException e) {\n+                    e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230ca9dca52f4ce63bab84e79f1dc4b48af81958"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ1ODQ2NQ==", "bodyText": "Is this redundant because we already have @ExceptionHandler(AADConditionalAccessException.class).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555458465", "createdAt": "2021-01-12T01:48:23Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -121,6 +136,21 @@ public static int resourceServerCount(Set<String> scopes) {\n         return result;\n     }\n \n+    @ControllerAdvice\n+    public class GlobalExceptionAdvice {\n+        @ExceptionHandler(AADConditionalAccessException.class)\n+        public void handleUserNotFound(HttpServletRequest request, HttpServletResponse response, Exception e) throws IOException {\n+            if(e instanceof AADConditionalAccessException){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230ca9dca52f4ce63bab84e79f1dc4b48af81958"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ1ODkzMA==", "bodyText": "As discussed, we do not provide this bean.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555458930", "createdAt": "2021-01-12T01:49:51Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -196,4 +226,76 @@ protected void configure(HttpSecurity http) throws Exception {\n         }\n     }\n \n+\n+    @Bean\n+    public OAuth2AuthorizedClientManager authorizedClientManager(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230ca9dca52f4ce63bab84e79f1dc4b48af81958"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ1OTAzNg==", "bodyText": "Same here, we do not provide this bean.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555459036", "createdAt": "2021-01-12T01:50:10Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -196,4 +226,76 @@ protected void configure(HttpSecurity http) throws Exception {\n         }\n     }\n \n+\n+    @Bean\n+    public OAuth2AuthorizedClientManager authorizedClientManager(\n+        ClientRegistrationRepository clientRegistrationRepository,\n+        OAuth2AuthorizedClientRepository authorizedClientRepository) {\n+\n+        OAuth2AuthorizedClientProvider authorizedClientProvider =\n+            OAuth2AuthorizedClientProviderBuilder.builder()\n+                                                 .authorizationCode()\n+                                                 .refreshToken()\n+                                                 .clientCredentials()\n+                                                 .password()\n+                                                 .build();\n+\n+        DefaultOAuth2AuthorizedClientManager authorizedClientManager =\n+            new DefaultOAuth2AuthorizedClientManager(\n+                clientRegistrationRepository, authorizedClientRepository);\n+        authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);\n+\n+        return authorizedClientManager;\n+    }\n+\n+    @Bean", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230ca9dca52f4ce63bab84e79f1dc4b48af81958"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ1OTQyOA==", "bodyText": "toAADConditionalAccessException", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555459428", "createdAt": "2021-01-12T01:51:35Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -196,4 +226,76 @@ protected void configure(HttpSecurity http) throws Exception {\n         }\n     }\n \n+\n+    @Bean\n+    public OAuth2AuthorizedClientManager authorizedClientManager(\n+        ClientRegistrationRepository clientRegistrationRepository,\n+        OAuth2AuthorizedClientRepository authorizedClientRepository) {\n+\n+        OAuth2AuthorizedClientProvider authorizedClientProvider =\n+            OAuth2AuthorizedClientProviderBuilder.builder()\n+                                                 .authorizationCode()\n+                                                 .refreshToken()\n+                                                 .clientCredentials()\n+                                                 .password()\n+                                                 .build();\n+\n+        DefaultOAuth2AuthorizedClientManager authorizedClientManager =\n+            new DefaultOAuth2AuthorizedClientManager(\n+                clientRegistrationRepository, authorizedClientRepository);\n+        authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);\n+\n+        return authorizedClientManager;\n+    }\n+\n+    @Bean\n+    public static WebClient webClient(OAuth2AuthorizedClientManager authorizedClientManager) {\n+        ServletOAuth2AuthorizedClientExchangeFilterFunction oauth2Client =\n+            new ServletOAuth2AuthorizedClientExchangeFilterFunction(authorizedClientManager);\n+        return WebClient.builder()\n+                        .apply(oauth2Client.oauth2Configuration())\n+                        .filter(errorHandlingFilter())\n+                        .build();\n+    }\n+\n+\n+    private static ExchangeFilterFunction errorHandlingFilter() {\n+        return ExchangeFilterFunction.ofResponseProcessor(clientResponse -> {\n+                if (clientResponse.statusCode().is4xxClientError()) {\n+                    return clientResponse.bodyToMono(String.class)\n+                                         .flatMap(errorBody -> {\n+                                             if (isConditionalAccessError(errorBody)) {\n+                                                 return Mono.error(convertToException(errorBody));\n+                                             }\n+                                             return Mono.just(clientResponse);\n+                                         });\n+                }\n+                return Mono.just(clientResponse);\n+            }\n+        );\n+    }\n+\n+\n+    private static boolean isConditionalAccessError(String body) {\n+        return body.startsWith(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS);\n+    }\n+\n+    private static AADConditionalAccessException convertToException(String body) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230ca9dca52f4ce63bab84e79f1dc4b48af81958"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ1OTc5Ng==", "bodyText": "Can we set it to private, because it's not used outside.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555459796", "createdAt": "2021-01-12T01:52:50Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -196,4 +226,76 @@ protected void configure(HttpSecurity http) throws Exception {\n         }\n     }\n \n+\n+    @Bean\n+    public OAuth2AuthorizedClientManager authorizedClientManager(\n+        ClientRegistrationRepository clientRegistrationRepository,\n+        OAuth2AuthorizedClientRepository authorizedClientRepository) {\n+\n+        OAuth2AuthorizedClientProvider authorizedClientProvider =\n+            OAuth2AuthorizedClientProviderBuilder.builder()\n+                                                 .authorizationCode()\n+                                                 .refreshToken()\n+                                                 .clientCredentials()\n+                                                 .password()\n+                                                 .build();\n+\n+        DefaultOAuth2AuthorizedClientManager authorizedClientManager =\n+            new DefaultOAuth2AuthorizedClientManager(\n+                clientRegistrationRepository, authorizedClientRepository);\n+        authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);\n+\n+        return authorizedClientManager;\n+    }\n+\n+    @Bean\n+    public static WebClient webClient(OAuth2AuthorizedClientManager authorizedClientManager) {\n+        ServletOAuth2AuthorizedClientExchangeFilterFunction oauth2Client =\n+            new ServletOAuth2AuthorizedClientExchangeFilterFunction(authorizedClientManager);\n+        return WebClient.builder()\n+                        .apply(oauth2Client.oauth2Configuration())\n+                        .filter(errorHandlingFilter())\n+                        .build();\n+    }\n+\n+\n+    private static ExchangeFilterFunction errorHandlingFilter() {\n+        return ExchangeFilterFunction.ofResponseProcessor(clientResponse -> {\n+                if (clientResponse.statusCode().is4xxClientError()) {\n+                    return clientResponse.bodyToMono(String.class)\n+                                         .flatMap(errorBody -> {\n+                                             if (isConditionalAccessError(errorBody)) {\n+                                                 return Mono.error(convertToException(errorBody));\n+                                             }\n+                                             return Mono.just(clientResponse);\n+                                         });\n+                }\n+                return Mono.just(clientResponse);\n+            }\n+        );\n+    }\n+\n+\n+    private static boolean isConditionalAccessError(String body) {\n+        return body.startsWith(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS);\n+    }\n+\n+    private static AADConditionalAccessException convertToException(String body) {\n+        String claims = body.split(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS)[1];\n+        return new AADConditionalAccessException(claims);\n+    }\n+\n+    protected static class AADConditionalAccessException extends RuntimeException{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230ca9dca52f4ce63bab84e79f1dc4b48af81958"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ1OTgzNg==", "bodyText": "private, too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555459836", "createdAt": "2021-01-12T01:52:59Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -196,4 +226,76 @@ protected void configure(HttpSecurity http) throws Exception {\n         }\n     }\n \n+\n+    @Bean\n+    public OAuth2AuthorizedClientManager authorizedClientManager(\n+        ClientRegistrationRepository clientRegistrationRepository,\n+        OAuth2AuthorizedClientRepository authorizedClientRepository) {\n+\n+        OAuth2AuthorizedClientProvider authorizedClientProvider =\n+            OAuth2AuthorizedClientProviderBuilder.builder()\n+                                                 .authorizationCode()\n+                                                 .refreshToken()\n+                                                 .clientCredentials()\n+                                                 .password()\n+                                                 .build();\n+\n+        DefaultOAuth2AuthorizedClientManager authorizedClientManager =\n+            new DefaultOAuth2AuthorizedClientManager(\n+                clientRegistrationRepository, authorizedClientRepository);\n+        authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);\n+\n+        return authorizedClientManager;\n+    }\n+\n+    @Bean\n+    public static WebClient webClient(OAuth2AuthorizedClientManager authorizedClientManager) {\n+        ServletOAuth2AuthorizedClientExchangeFilterFunction oauth2Client =\n+            new ServletOAuth2AuthorizedClientExchangeFilterFunction(authorizedClientManager);\n+        return WebClient.builder()\n+                        .apply(oauth2Client.oauth2Configuration())\n+                        .filter(errorHandlingFilter())\n+                        .build();\n+    }\n+\n+\n+    private static ExchangeFilterFunction errorHandlingFilter() {\n+        return ExchangeFilterFunction.ofResponseProcessor(clientResponse -> {\n+                if (clientResponse.statusCode().is4xxClientError()) {\n+                    return clientResponse.bodyToMono(String.class)\n+                                         .flatMap(errorBody -> {\n+                                             if (isConditionalAccessError(errorBody)) {\n+                                                 return Mono.error(convertToException(errorBody));\n+                                             }\n+                                             return Mono.just(clientResponse);\n+                                         });\n+                }\n+                return Mono.just(clientResponse);\n+            }\n+        );\n+    }\n+\n+\n+    private static boolean isConditionalAccessError(String body) {\n+        return body.startsWith(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS);\n+    }\n+\n+    private static AADConditionalAccessException convertToException(String body) {\n+        String claims = body.split(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS)[1];\n+        return new AADConditionalAccessException(claims);\n+    }\n+\n+    protected static class AADConditionalAccessException extends RuntimeException{\n+        String claims;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230ca9dca52f4ce63bab84e79f1dc4b48af81958"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ2MDQ0NQ==", "bodyText": "Rename sharedObject to filter.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555460445", "createdAt": "2021-01-12T01:54:34Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java", "diffHunk": "@@ -87,4 +92,15 @@ protected OAuth2AuthorizationRequestResolver requestResolver() {\n     protected AuthenticationFailureHandler failureHandler() {\n         return new AADAuthenticationFailureHandler();\n     }\n+\n+    /**\n+     * Fix the default error info not displayed when the setting failureHandler in configure\n+     */\n+    private final static class AADHttpConfigurer extends AbstractHttpConfigurer<AADHttpConfigurer, HttpSecurity>{\n+        @Override\n+        public void init(HttpSecurity http) {\n+            DefaultLoginPageGeneratingFilter sharedObject = http.getSharedObject(DefaultLoginPageGeneratingFilter.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230ca9dca52f4ce63bab84e79f1dc4b48af81958"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ2MDc4OA==", "bodyText": "Delete DEFAULT_FAILURE_URL, use \"/login?error\" directly, because it only used one time.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555460788", "createdAt": "2021-01-12T01:55:42Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java", "diffHunk": "@@ -31,6 +33,7 @@\n  */\n public abstract class AADWebSecurityConfigurerAdapter extends WebSecurityConfigurerAdapter {\n \n+    private static final String DEFAULT_FAILURE_URL = \"/login?error\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230ca9dca52f4ce63bab84e79f1dc4b48af81958"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76b9b15821b9a96a296e35977a51749fdb90fbb6", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/76b9b15821b9a96a296e35977a51749fdb90fbb6", "committedDate": "2021-01-12T09:40:29Z", "message": "add webClient handle conditional access policy."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24a7bfddba8a21a01175568bf36ec3328e75bf06", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/24a7bfddba8a21a01175568bf36ec3328e75bf06", "committedDate": "2021-01-13T02:27:58Z", "message": "add dependency to azure-spring-boot-starter-active-directory-pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f3250cc0c53a43390206d5870b206c9dd453b8b", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6f3250cc0c53a43390206d5870b206c9dd453b8b", "committedDate": "2021-01-13T06:01:08Z", "message": "add webflux to external_dependency."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "694239305f9a4bae1604f665c45cef2a562284a6", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/694239305f9a4bae1604f665c45cef2a562284a6", "committedDate": "2021-01-13T06:20:36Z", "message": "Modify note."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2ODYzMDQz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#pullrequestreview-566863043", "createdAt": "2021-01-13T03:09:39Z", "commit": {"oid": "24a7bfddba8a21a01175568bf36ec3328e75bf06"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwMzowOTo0MFrOISd59w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwOToyNTo1NVrOISmh3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjIzNTI1NQ==", "bodyText": "We can not split this into 2 lines.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r556235255", "createdAt": "2021-01-13T03:09:40Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/pom.xml", "diffHunk": "@@ -96,12 +101,16 @@\n                 <include>com.microsoft.azure:msal4j:[1.8.0]</include> <!-- {x-include-update;com.microsoft.azure:msal4j;external_dependency} -->\n                 <include>com.nimbusds:nimbus-jose-jwt:[8.19]</include> <!-- {x-include-update;com.nimbusds:nimbus-jose-jwt;external_dependency} -->\n                 <include>io.projectreactor.netty:reactor-netty:[0.9.15.RELEASE]</include> <!-- {x-include-update;io.projectreactor.netty:reactor-netty;external_dependency} -->\n-                <include>org.springframework.boot:spring-boot-starter-validation:[2.3.5.RELEASE]</include> <!-- {x-include-update;org.springframework.boot:spring-boot-starter-validation;external_dependency} -->\n-                <include>org.springframework.boot:spring-boot-starter-webflux:[2.3.5.RELEASE]</include> <!-- {x-include-update;org.springframework.boot:spring-boot-starter-webflux;external_dependency} -->\n+                <include>org.springframework.boot:spring-boot-starter-validation:[2.3.5.RELEASE]\n+                </include> <!-- {x-include-update;org.springframework.boot:spring-boot-starter-validation;external_dependency} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24a7bfddba8a21a01175568bf36ec3328e75bf06"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM2MjAzMA==", "bodyText": "Can we use spring-boot-starter-webflux instead of spring-webflux?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r556362030", "createdAt": "2021-01-13T09:02:54Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/pom.xml", "diffHunk": "@@ -270,6 +270,12 @@\n       <artifactId>spring-core</artifactId>\n       <version>5.2.10.RELEASE</version> <!-- {x-version-update;org.springframework:spring-core;external_dependency} -->\n     </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-webflux</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694239305f9a4bae1604f665c45cef2a562284a6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM3MjM0Mg==", "bodyText": "I think we need more content in java doc to explain how we use ConditionalAccessException to handle condition access in obo flow.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r556372342", "createdAt": "2021-01-13T09:19:25Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/ConditionalAccessException.java", "diffHunk": "@@ -0,0 +1,36 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.aad.webapp;\n+\n+import com.azure.spring.autoconfigure.aad.Constants;\n+\n+/**\n+ * Create ConditionalAccessException to handle conditionalAccess in obo flow.\n+ */\n+public final class ConditionalAccessException extends RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694239305f9a4bae1604f665c45cef2a562284a6"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM3MzY5OQ==", "bodyText": "Use Assert.notNull() instead of assert. assert should not be used in production code.\nRefs: https://stackoverflow.com/questions/2758224/what-does-the-java-assert-keyword-do-and-when-should-it-be-used", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r556373699", "createdAt": "2021-01-13T09:21:39Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -87,6 +96,29 @@ public AADOAuth2OboAuthorizedClientRepository(ClientRegistrationRepository repos\n             request.setAttribute(oboAuthorizedClientAttributeName, (T) oAuth2AuthorizedClient);\n             return (T) oAuth2AuthorizedClient;\n         } catch (Throwable throwable) {\n+            // Handle conditional access policy for obo flow.\n+            String claims = Optional.of(throwable)\n+                                    .map(Throwable::getCause)\n+                                    .filter(e -> e instanceof MsalInteractionRequiredException)\n+                                    .map(e -> (MsalInteractionRequiredException) e)\n+                                    .map(MsalInteractionRequiredException::claims)\n+                                    .orElse(null);\n+\n+            if (claims != null) {\n+                ServletRequestAttributes attr =\n+                    (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();\n+                HttpServletResponse response = attr.getResponse();\n+                assert response != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694239305f9a4bae1604f665c45cef2a562284a6"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM3NTc4Ng==", "bodyText": "Please confirm there is no side-effect of clearContent.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r556375786", "createdAt": "2021-01-13T09:24:53Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -121,6 +135,30 @@ public static int resourceServerCount(Set<String> scopes) {\n         return result;\n     }\n \n+    /**\n+     * Handle conditional access error in obo flow.\n+     */\n+    @ControllerAdvice\n+    public static class GlobalExceptionAdvice {\n+        @ExceptionHandler(ConditionalAccessException.class)\n+        public void handleUserNotFound(HttpServletRequest request,\n+                                       HttpServletResponse response, Exception exception) {\n+            Optional.of(exception)\n+                    .map(e -> (ConditionalAccessException) e)\n+                    .ifPresent(aadConditionalAccessException -> {\n+                        response.setStatus(302);\n+                        SecurityContextHolder.clearContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694239305f9a4bae1604f665c45cef2a562284a6"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM3NjU0MA==", "bodyText": "This is not used now? I think we should update the webapp sample", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r556376540", "createdAt": "2021-01-13T09:25:55Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -196,4 +234,16 @@ protected void configure(HttpSecurity http) throws Exception {\n         }\n     }\n \n+\n+    public static ExchangeFilterFunction conditionalAccessExchangeFilterFunction() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694239305f9a4bae1604f665c45cef2a562284a6"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwMjQ4NDM2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#pullrequestreview-570248436", "createdAt": "2021-01-18T08:11:05Z", "commit": {"oid": "694239305f9a4bae1604f665c45cef2a562284a6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwODoxMTowNVrOIVd1Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwODoxMTowNVrOIVd1Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTM3OTcxNA==", "bodyText": "Rename this method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r559379714", "createdAt": "2021-01-18T08:11:05Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -121,6 +135,30 @@ public static int resourceServerCount(Set<String> scopes) {\n         return result;\n     }\n \n+    /**\n+     * Handle conditional access error in obo flow.\n+     */\n+    @ControllerAdvice\n+    public static class GlobalExceptionAdvice {\n+        @ExceptionHandler(ConditionalAccessException.class)\n+        public void handleUserNotFound(HttpServletRequest request,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694239305f9a4bae1604f665c45cef2a562284a6"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df4f6e2b2597644a216a40b2ff312d7afb33074d", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/df4f6e2b2597644a216a40b2ff312d7afb33074d", "committedDate": "2021-01-19T02:55:55Z", "message": "add svg for ConditionalAccessException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34bd03ccf29f13da9e660c61e06ccd709d10fbaf", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/34bd03ccf29f13da9e660c61e06ccd709d10fbaf", "committedDate": "2021-01-19T02:57:09Z", "message": "add notes for ConditionalAccess."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcxMDI2NzY2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#pullrequestreview-571026766", "createdAt": "2021-01-19T08:59:39Z", "commit": {"oid": "34bd03ccf29f13da9e660c61e06ccd709d10fbaf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwODo1OTozOVrOIWEbQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwODo1OTozOVrOIWEbQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDAxMjA5OA==", "bodyText": "Please do not catch throwable. Just catch the exception we care about.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r560012098", "createdAt": "2021-01-19T08:59:39Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -87,6 +96,29 @@ public AADOAuth2OboAuthorizedClientRepository(ClientRegistrationRepository repos\n             request.setAttribute(oboAuthorizedClientAttributeName, (T) oAuth2AuthorizedClient);\n             return (T) oAuth2AuthorizedClient;\n         } catch (Throwable throwable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34bd03ccf29f13da9e660c61e06ccd709d10fbaf"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d3ec7ba7601aedb6a03fd8c3805b6ac2f32e4b6", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0d3ec7ba7601aedb6a03fd8c3805b6ac2f32e4b6", "committedDate": "2021-01-19T10:15:31Z", "message": "update sample for ConditionalAccess"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "502384fe139aa6fb3acfbd402dd296cbc6c570f9", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/502384fe139aa6fb3acfbd402dd296cbc6c570f9", "committedDate": "2021-01-21T02:45:46Z", "message": "resolve conversation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a9e6bcdc1969527796fe8a3ab565d41243268ac", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8a9e6bcdc1969527796fe8a3ab565d41243268ac", "committedDate": "2021-01-21T02:49:06Z", "message": "resolve conversation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14ffa212dba1dbab96649c644e8a39e33ef0ed09", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/14ffa212dba1dbab96649c644e8a39e33ef0ed09", "committedDate": "2021-01-25T02:48:23Z", "message": "update webapp sample and webclient filter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96a4e27761dc041bd5ae91459d7e716eb64912eb", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/96a4e27761dc041bd5ae91459d7e716eb64912eb", "committedDate": "2021-02-02T03:11:23Z", "message": "add filter for conditionalAccess."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f1945cf8892a656b951cd90032a214ea068d728", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7f1945cf8892a656b951cd90032a214ea068d728", "committedDate": "2021-02-02T06:43:43Z", "message": "resolve conflicts."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc4da854ad63916a66745deb4faac4712f012896", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fc4da854ad63916a66745deb4faac4712f012896", "committedDate": "2021-02-02T06:43:59Z", "message": "Merge branch 'master' of git://github.com/Azure/azure-sdk-for-java into fix_not_error_info"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "162d5ac96f3d0437db0633e1267ed4a55622d78c", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/162d5ac96f3d0437db0633e1267ed4a55622d78c", "committedDate": "2021-02-02T10:45:29Z", "message": "update ConditionalAccessException.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f103badcd9ff176a811f8cdb8467abe91bb7c7a7", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f103badcd9ff176a811f8cdb8467abe91bb7c7a7", "committedDate": "2021-02-03T01:27:18Z", "message": "fix code style."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47daa01d5a1500ae6ef3703185fcd59128895511", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/47daa01d5a1500ae6ef3703185fcd59128895511", "committedDate": "2021-02-04T06:15:20Z", "message": "when re-authentication, update all clients."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23964083213bd1f0738a9384612c34d9fa65b8e5", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/23964083213bd1f0738a9384612c34d9fa65b8e5", "committedDate": "2021-02-09T11:20:10Z", "message": "remove ConditionalAccessException.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "809661d7708d8f9574c546780d3fcbcbd0b32e2f", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/809661d7708d8f9574c546780d3fcbcbd0b32e2f", "committedDate": "2021-02-10T01:34:23Z", "message": "Merge branch 'master' of git://github.com/Azure/azure-sdk-for-java into fix_not_error_info\n\n# Conflicts:\n#\tsdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd0c5cdbaa7c3ca1ded10e74e74ef4b54cbc5afe", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bd0c5cdbaa7c3ca1ded10e74e74ef4b54cbc5afe", "committedDate": "2021-02-10T03:06:36Z", "message": "resolve conflicts."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9da07e22aca4a0b63e60a89d064e62cf82f4195c", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9da07e22aca4a0b63e60a89d064e62cf82f4195c", "committedDate": "2021-02-10T03:24:51Z", "message": "Solve pipeline problems."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009", "committedDate": "2021-02-18T02:41:05Z", "message": "Solve pipeline problems."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkzOTgzNDA4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#pullrequestreview-593983408", "createdAt": "2021-02-19T09:00:24Z", "commit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQwOTowMDoyNFrOIoM_-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQwOToxODoxNlrOIoNr6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAyNjkzOA==", "bodyText": "Add empty line at the end of this file.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579026938", "createdAt": "2021-02-19T09:00:24Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-webapp/src/main/resources/application.yml", "diffHunk": "@@ -13,9 +13,12 @@ azure:\n             - https://manage.office.com/ActivityFeed.Read\n             - https://manage.office.com/ActivityFeed.ReadDlp\n             - https://manage.office.com/ServiceHealth.Read\n+      obo:\n+        scopes:\n+          - <Web-API-A-app-id-url>/File.Read\n     client-id: <client-id>\n     client-secret: <client-secret>\n     tenant-id: <tenant-id>\n     user-group:\n       allowed-groups: group1, group2\n-    post-logout-redirect-uri: http://localhost:8080\n+    post-logout-redirect-uri: http://localhost:8080", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAyODk0Mg==", "bodyText": "No need to break line.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579028942", "createdAt": "2021-02-19T09:03:42Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -130,4 +161,16 @@ private String interceptAuthorizationUri(String authorizationUri) {\n         }\n         return null;\n     }\n+\n+    void replyForbiddenWithWwwAuthenticateHeader(HttpServletResponse response,\n+                                                 MsalInteractionRequiredException exception) {\n+        Map<String, Object> parameters = new LinkedHashMap<>();\n+        response.setStatus(HttpStatus.FORBIDDEN.value());\n+        parameters.put(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS,\n+            exception.claims());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAyOTI1Mg==", "bodyText": "Does MsalInteractionRequiredException  have error message? Maybe we can use the error message instead.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579029252", "createdAt": "2021-02-19T09:04:16Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -130,4 +161,16 @@ private String interceptAuthorizationUri(String authorizationUri) {\n         }\n         return null;\n     }\n+\n+    void replyForbiddenWithWwwAuthenticateHeader(HttpServletResponse response,\n+                                                 MsalInteractionRequiredException exception) {\n+        Map<String, Object> parameters = new LinkedHashMap<>();\n+        response.setStatus(HttpStatus.FORBIDDEN.value());\n+        parameters.put(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS,\n+            exception.claims());\n+        parameters.put(OAuth2ParameterNames.ERROR, OAuth2ErrorCodes.INVALID_TOKEN);\n+        parameters.put(OAuth2ParameterNames.ERROR_DESCRIPTION, \"The resource server requires higher privileges than \"\n+            + \"provided by the access token\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAyOTkwNQ==", "bodyText": "Web API -> resource-server", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579029905", "createdAt": "2021-02-19T09:05:18Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java", "diffHunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapp;\n+\n+import com.azure.spring.aad.webapi.AADOAuth2OboAuthorizedClientRepository;\n+import com.azure.spring.autoconfigure.aad.Constants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.reactive.function.client.WebClientResponseException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Handle the {@link WebClientResponseException} in On-Behalf-Of flow.\n+ *\n+ * <p>\n+ * When the Web API needs re-acquire token(The request requires higher privileges than provided by the access token in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzMDY0NQ==", "bodyText": "Web APP -> web-application.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579030645", "createdAt": "2021-02-19T09:06:29Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java", "diffHunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapp;\n+\n+import com.azure.spring.aad.webapi.AADOAuth2OboAuthorizedClientRepository;\n+import com.azure.spring.autoconfigure.aad.Constants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.reactive.function.client.WebClientResponseException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Handle the {@link WebClientResponseException} in On-Behalf-Of flow.\n+ *\n+ * <p>\n+ * When the Web API needs re-acquire token(The request requires higher privileges than provided by the access token in\n+ * On-Behalf-Of flow.), it can sent a 403 with information in the WWW-Authenticate header to web client ,web client\n+ * will throw {@link WebClientResponseException}, Web APP can handle this exception to challenge the user.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzMzY0Mw==", "bodyText": "The above 2 lines of code execute 2 times, could you please remove the duplicate?\nFor example:\nconditionalAccessClaims = ...;\nif (conditionalAccessClaims != null ) {\n  handleConditionalAccess(...);\n}", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579033643", "createdAt": "2021-02-19T09:11:06Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java", "diffHunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapp;\n+\n+import com.azure.spring.aad.webapi.AADOAuth2OboAuthorizedClientRepository;\n+import com.azure.spring.autoconfigure.aad.Constants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.reactive.function.client.WebClientResponseException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Handle the {@link WebClientResponseException} in On-Behalf-Of flow.\n+ *\n+ * <p>\n+ * When the Web API needs re-acquire token(The request requires higher privileges than provided by the access token in\n+ * On-Behalf-Of flow.), it can sent a 403 with information in the WWW-Authenticate header to web client ,web client\n+ * will throw {@link WebClientResponseException}, Web APP can handle this exception to challenge the user.\n+ */\n+public class AADHandleConditionalAccessFilter extends OncePerRequestFilter {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n+                                    FilterChain filterChain) throws IOException, ServletException {\n+        try {\n+            filterChain.doFilter(request, response);\n+        } catch (Exception exception) {\n+            WebClientResponseException webClientResponseException =\n+                Optional.of(exception)\n+                        .map(Throwable::getCause)\n+                        .filter(e -> e instanceof WebClientResponseException)\n+                        .map(e -> (WebClientResponseException) e)\n+                        .filter(AADHandleConditionalAccessFilter::isConditionalAccessExceptionFromObo)\n+                        .orElse(null);\n+            if (webClientResponseException != null) {\n+                handleConditionalAccess(webClientResponseException, request, response);\n+                return;\n+            }\n+            throw exception;\n+        }\n+    }\n+\n+    private static boolean isConditionalAccessExceptionFromObo(WebClientResponseException exception) {\n+        String result = Optional.of(exception)\n+                                .map(WebClientResponseException::getHeaders)\n+                                .map(httpHeaders -> httpHeaders.get(HttpHeaders.WWW_AUTHENTICATE))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzNjM3OQ==", "bodyText": "Does this wwwAuthenticateHeader's format same to the format we discussed in Teams group? For example: starts with Bearer", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579036379", "createdAt": "2021-02-19T09:15:26Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java", "diffHunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapp;\n+\n+import com.azure.spring.aad.webapi.AADOAuth2OboAuthorizedClientRepository;\n+import com.azure.spring.autoconfigure.aad.Constants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.reactive.function.client.WebClientResponseException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Handle the {@link WebClientResponseException} in On-Behalf-Of flow.\n+ *\n+ * <p>\n+ * When the Web API needs re-acquire token(The request requires higher privileges than provided by the access token in\n+ * On-Behalf-Of flow.), it can sent a 403 with information in the WWW-Authenticate header to web client ,web client\n+ * will throw {@link WebClientResponseException}, Web APP can handle this exception to challenge the user.\n+ */\n+public class AADHandleConditionalAccessFilter extends OncePerRequestFilter {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n+                                    FilterChain filterChain) throws IOException, ServletException {\n+        try {\n+            filterChain.doFilter(request, response);\n+        } catch (Exception exception) {\n+            WebClientResponseException webClientResponseException =\n+                Optional.of(exception)\n+                        .map(Throwable::getCause)\n+                        .filter(e -> e instanceof WebClientResponseException)\n+                        .map(e -> (WebClientResponseException) e)\n+                        .filter(AADHandleConditionalAccessFilter::isConditionalAccessExceptionFromObo)\n+                        .orElse(null);\n+            if (webClientResponseException != null) {\n+                handleConditionalAccess(webClientResponseException, request, response);\n+                return;\n+            }\n+            throw exception;\n+        }\n+    }\n+\n+    private static boolean isConditionalAccessExceptionFromObo(WebClientResponseException exception) {\n+        String result = Optional.of(exception)\n+                                .map(WebClientResponseException::getHeaders)\n+                                .map(httpHeaders -> httpHeaders.get(HttpHeaders.WWW_AUTHENTICATE))\n+                                .map(list -> list.get(0))\n+                                .filter(value -> value.contains(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS))\n+                                .orElse(null);\n+        return result != null;\n+    }\n+\n+    static void handleConditionalAccess(WebClientResponseException exception, HttpServletRequest request,\n+                                        HttpServletResponse response) {\n+        Map<String, String> authParameters =\n+            Optional.of(exception)\n+                    .map(WebClientResponseException::getHeaders)\n+                    .map(httpHeaders -> httpHeaders.get(HttpHeaders.WWW_AUTHENTICATE))\n+                    .map(list -> list.get(0))\n+                    .map(AADHandleConditionalAccessFilter::parseAuthParameters)\n+                    .orElse(null);\n+        request.getSession().setAttribute(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS,\n+            authParameters.get(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS));\n+        response.setStatus(302);\n+        try {\n+            response.sendRedirect(Constants.DEFAULT_AUTHORITY_ENDPOINT_URI);\n+        } catch (IOException e) {\n+            LOGGER.error(\"Failed to redirect at this response.\", exception);\n+        }\n+    }\n+\n+    private static Map<String, String> parseAuthParameters(String wwwAuthenticateHeader) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzNzUyNg==", "bodyText": "Recover this file.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579037526", "createdAt": "2021-02-19T09:17:17Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -48,6 +51,8 @@\n @EnableConfigurationProperties(AADAuthenticationProperties.class)\n public class AADWebAppConfiguration {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzODE4NA==", "bodyText": "Any specific reason about WebAsyncManagerIntegrationFilter?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579038184", "createdAt": "2021-02-19T09:18:16Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java", "diffHunk": "@@ -51,7 +50,8 @@ protected void configure(HttpSecurity http) throws Exception {\n                 .and()\n             .logout()\n                 .logoutSuccessHandler(oidcLogoutSuccessHandler())\n-                .and();\n+                .and()\n+            .addFilterBefore(handleConditionalAccessFilter(), WebAsyncManagerIntegrationFilter.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "707c22dc5114a964dc8985f9b8e899ddd11df962", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/707c22dc5114a964dc8985f9b8e899ddd11df962", "committedDate": "2021-02-20T10:10:59Z", "message": "resolve conversation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6aade06e374fe91c3d6098153849478fe181df24", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6aade06e374fe91c3d6098153849478fe181df24", "committedDate": "2021-02-20T10:32:40Z", "message": "Merge branch 'master' of git://github.com/Azure/azure-sdk-for-java into fix_not_error_info\n\n# Conflicts:\n#\tsdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-webapp/src/main/resources/application.yml\n#\tsdk/spring/azure-spring-boot/pom.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b7bf5abc79b766a82d4d71187bbe65b1d4ad491", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3b7bf5abc79b766a82d4d71187bbe65b1d4ad491", "committedDate": "2021-02-22T02:09:39Z", "message": "Merge branch 'master' of git://github.com/Azure/azure-sdk-for-java into fix_not_error_info"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2259e8ab6ea02a05e7d8129c310fed65830a307", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d2259e8ab6ea02a05e7d8129c310fed65830a307", "committedDate": "2021-02-22T02:24:11Z", "message": "add web-flux dependency to aad stater"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk1MDI2Njcy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#pullrequestreview-595026672", "createdAt": "2021-02-22T05:51:57Z", "commit": {"oid": "d2259e8ab6ea02a05e7d8129c310fed65830a307"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQwNTo1MTo1N1rOIpIUUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQwNjowODo1NVrOIpIniw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTk5ODgwMQ==", "bodyText": "It should be in line 276 instead of line 277.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579998801", "createdAt": "2021-02-22T05:51:57Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/pom.xml", "diffHunk": "@@ -270,6 +270,12 @@\n       <artifactId>spring-core</artifactId>\n       <version>5.2.10.RELEASE</version> <!-- {x-version-update;org.springframework:spring-core;external_dependency} -->\n     </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-webflux</artifactId>\n+      <version>5.2.10.RELEASE</version>\n+      <optional>true</optional> <!-- {x-version-update;org.springframework:spring-webflux;external_dependency} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2259e8ab6ea02a05e7d8129c310fed65830a307"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDAwMDk0NA==", "bodyText": "If there is no WebAsyncManagerIntegrationFilter in the context, will it throw exception? Can we make sure that WebAsyncManagerIntegrationFilter always exist?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r580000944", "createdAt": "2021-02-22T05:59:27Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java", "diffHunk": "@@ -51,7 +50,8 @@ protected void configure(HttpSecurity http) throws Exception {\n                 .and()\n             .logout()\n                 .logoutSuccessHandler(oidcLogoutSuccessHandler())\n-                .and();\n+                .and()\n+            .addFilterBefore(handleConditionalAccessFilter(), WebAsyncManagerIntegrationFilter.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzODE4NA=="}, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDAwMTcwMg==", "bodyText": "Can we get response by RequestContextHolder in this method instead of pass it in?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r580001702", "createdAt": "2021-02-22T06:02:07Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -130,4 +161,15 @@ private String interceptAuthorizationUri(String authorizationUri) {\n         }\n         return null;\n     }\n+\n+    void replyForbiddenWithWwwAuthenticateHeader(HttpServletResponse response,\n+                                                 MsalInteractionRequiredException exception) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2259e8ab6ea02a05e7d8129c310fed65830a307"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDAwMjAyOA==", "bodyText": "Does the toString() method get the same format compare co the C# code?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r580002028", "createdAt": "2021-02-22T06:03:23Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -130,4 +161,15 @@ private String interceptAuthorizationUri(String authorizationUri) {\n         }\n         return null;\n     }\n+\n+    void replyForbiddenWithWwwAuthenticateHeader(HttpServletResponse response,\n+                                                 MsalInteractionRequiredException exception) {\n+        Map<String, Object> parameters = new LinkedHashMap<>();\n+        response.setStatus(HttpStatus.FORBIDDEN.value());\n+        parameters.put(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS, exception.claims());\n+        parameters.put(OAuth2ParameterNames.ERROR, OAuth2ErrorCodes.INVALID_TOKEN);\n+        parameters.put(OAuth2ParameterNames.ERROR_DESCRIPTION, \"The resource server requires higher privileges than \"\n+            + \"provided by the access token\");\n+        response.addHeader(HttpHeaders.WWW_AUTHENTICATE, Constants.BEARER_PREFIX + parameters.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2259e8ab6ea02a05e7d8129c310fed65830a307"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDAwMzExNw==", "bodyText": "Please add integration test for conditional access. It's OK to do it after this PR merged.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r580003117", "createdAt": "2021-02-22T06:07:23Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java", "diffHunk": "@@ -51,7 +50,8 @@ protected void configure(HttpSecurity http) throws Exception {\n                 .and()\n             .logout()\n                 .logoutSuccessHandler(oidcLogoutSuccessHandler())\n-                .and();\n+                .and()\n+            .addFilterBefore(handleConditionalAccessFilter(), WebAsyncManagerIntegrationFilter.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzODE4NA=="}, "originalCommit": {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDAwMzcyMw==", "bodyText": "Can we delete this method? Just use new AADHandleConditionalAccessFilter() instead.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r580003723", "createdAt": "2021-02-22T06:08:55Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java", "diffHunk": "@@ -81,7 +77,7 @@ protected OAuth2AuthorizationRequestResolver requestResolver() {\n         return new AADOAuth2AuthorizationRequestResolver(this.repo);\n     }\n \n-    protected AuthenticationFailureHandler failureHandler() {\n-        return new AADAuthenticationFailureHandler();\n+    protected AADHandleConditionalAccessFilter handleConditionalAccessFilter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2259e8ab6ea02a05e7d8129c310fed65830a307"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab6be45f9f96b6ccb5e69279113e533c1916f8f5", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ab6be45f9f96b6ccb5e69279113e533c1916f8f5", "committedDate": "2021-02-22T06:25:25Z", "message": "add web-flux dependency to aad stater"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfb52b57e5122c350ce60df1f0618091a052d87a", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bfb52b57e5122c350ce60df1f0618091a052d87a", "committedDate": "2021-02-22T07:55:30Z", "message": "resolve conversation."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk1OTA0NzU3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#pullrequestreview-595904757", "createdAt": "2021-02-23T00:27:16Z", "commit": {"oid": "bfb52b57e5122c350ce60df1f0618091a052d87a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwMDoyNzoxNlrOIpydaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwMDoyNzoxNlrOIpydaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDY4OTI1Nw==", "bodyText": "By doing this, do you mean ExceptionTranslationFilter will always exist in context?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r580689257", "createdAt": "2021-02-23T00:27:16Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java", "diffHunk": "@@ -51,7 +50,8 @@ protected void configure(HttpSecurity http) throws Exception {\n                 .and()\n             .logout()\n                 .logoutSuccessHandler(oidcLogoutSuccessHandler())\n-                .and();\n+                .and()\n+            .addFilterBefore(new AADHandleConditionalAccessFilter(), ExceptionTranslationFilter.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb52b57e5122c350ce60df1f0618091a052d87a"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk1OTA1NjU3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#pullrequestreview-595905657", "createdAt": "2021-02-23T00:29:21Z", "commit": {"oid": "bfb52b57e5122c350ce60df1f0618091a052d87a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "713d0db8bf5b7ac59ac6d7f6b40452dff3217f8c", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/713d0db8bf5b7ac59ac6d7f6b40452dff3217f8c", "committedDate": "2021-02-25T01:25:03Z", "message": "Merge branch 'master' of git://github.com/Azure/azure-sdk-for-java into fix_not_error_info"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1157, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}