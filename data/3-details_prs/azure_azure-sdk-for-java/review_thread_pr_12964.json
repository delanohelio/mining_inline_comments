{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2Njg1MTYw", "number": 12964, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNToyMjoxNVrOENJJcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNToyNDo0M1rOENJK7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjE2ODE2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNToyMjoxNVrOGvqNQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNToyMjoxNVrOGvqNQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyNzc3Ng==", "bodyText": "Do we need to talk about these versions ?\nSince now - it is called - com.azure:azure-spring-data-cosmos", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12964#discussion_r452627776", "createdAt": "2020-07-10T05:22:15Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/README.md", "diffHunk": "@@ -1,25 +1,356 @@\n #Azure Cosmos DB client library for Java\n \n ## Getting started\n+[Azure Cosmos DB](https://docs.microsoft.com/azure/cosmos-db/introduction) is a globally-distributed database service that allows developers to work with data using a variety of standard APIs, such as SQL, MongoDB, Cassandra, Graph, and Table.\n+\n+**Spring Data Azure Cosmos DB** provides initial Spring Data support for Azure Cosmos DB using the [SQL API](https://docs.microsoft.com/azure/cosmos-db/sql-api-introduction), based on Spring Data framework. Currently it only supports SQL API, the other APIs are in the plan. \n \n ## TOC\n \n+* [Examples](#Examples)\n+* [Spring data version support](#spring-data-version-support)\n+* [Feature List](#feature-list)\n+* [Quick Start](#quick-start)\n+* [Query Partitioned Collection](QueryPartitionedCollection.md)\n+* [Beta version package](#Beta version package)\n+* [Troubleshooting](#Troubleshooting)\n+* [Contributing](#Contributing)\n+* [Code of Conduct](#code-of-conduct)\n+* [Key concepts](#Key concepts)\n+* [Next steps](#Next steps)\n+\n ## Examples\n+Please refer to [sample project here](./samplecode).\n \n ## Spring Data Version Support\n+Version mapping between spring boot and spring-data-cosmosdb:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4e7303afcd85f49a02ac0f4f81ba8c7a9706284"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjE2OTAxOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNToyMjo0MVrOGvqNsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNToyMjo0MVrOGvqNsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyNzg5MQ==", "bodyText": "Please rename it to azure-spring-data-cosmos", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12964#discussion_r452627891", "createdAt": "2020-07-10T05:22:41Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/README.md", "diffHunk": "@@ -1,25 +1,356 @@\n #Azure Cosmos DB client library for Java\n \n ## Getting started\n+[Azure Cosmos DB](https://docs.microsoft.com/azure/cosmos-db/introduction) is a globally-distributed database service that allows developers to work with data using a variety of standard APIs, such as SQL, MongoDB, Cassandra, Graph, and Table.\n+\n+**Spring Data Azure Cosmos DB** provides initial Spring Data support for Azure Cosmos DB using the [SQL API](https://docs.microsoft.com/azure/cosmos-db/sql-api-introduction), based on Spring Data framework. Currently it only supports SQL API, the other APIs are in the plan. \n \n ## TOC\n \n+* [Examples](#Examples)\n+* [Spring data version support](#spring-data-version-support)\n+* [Feature List](#feature-list)\n+* [Quick Start](#quick-start)\n+* [Query Partitioned Collection](QueryPartitionedCollection.md)\n+* [Beta version package](#Beta version package)\n+* [Troubleshooting](#Troubleshooting)\n+* [Contributing](#Contributing)\n+* [Code of Conduct](#code-of-conduct)\n+* [Key concepts](#Key concepts)\n+* [Next steps](#Next steps)\n+\n ## Examples\n+Please refer to [sample project here](./samplecode).\n \n ## Spring Data Version Support\n+Version mapping between spring boot and spring-data-cosmosdb:\n+\n+| Spring boot version                                         | spring-data-cosmosdb version                                                                                                                                                                                        |\n+| :----------------------------------------------------------:|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|\n+| ![version](https://img.shields.io/badge/version-2.3.x-blue) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/spring-data-cosmosdb/2.3.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:spring-data-cosmosdb%20AND%20v:2.3.*) |\n+| ![version](https://img.shields.io/badge/version-2.2.x-blue) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/spring-data-cosmosdb/2.2.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:spring-data-cosmosdb%20AND%20v:2.2.*) |\n+| ![version](https://img.shields.io/badge/version-2.1.x-blue) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/spring-data-cosmosdb/2.1.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:spring-data-cosmosdb%20AND%20v:2.1.*) |\n+| ![version](https://img.shields.io/badge/version-2.0.x-blue) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/spring-data-cosmosdb/2.0.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:spring-data-cosmosdb%20AND%20v:2.0.*) |\n \n ## Feature List\n+- Spring Data ReactiveCrudRepository CrudRepository basic CRUD functionality\n+    - save\n+    - findAll\n+    - findOne by Id\n+    - deleteAll\n+    - delete by Id\n+    - delete entity\n+- Spring Data [@Id](https://github.com/spring-projects/spring-data-commons/blob/db62390de90c93a78743c97cc2cc9ccd964994a5/src/main/java/org/springframework/data/annotation/Id.java) annotation.\n+  There're 2 ways to map a field in domain class to `id` field of Azure Cosmos DB document.\n+  - annotate a field in domain class with `@Id`, this field will be mapped to document `id` in Cosmos DB. \n+  - set name of this field to `id`, this field will be mapped to document `id` in Azure Cosmos DB.\n+- Custom collection Name.\n+  By default, collection name will be class name of user domain class. To customize it, add the `@Document(collection=\"myCustomCollectionName\")` annotation to the domain class. The collection field also supports SpEL expressions (eg. `collection = \"${dynamic.collection.name}\"` or `collection = \"#{@someBean.getContainerName()}\"`) in order to provide collection names programmatically/via configuration properties.\n+- Custom IndexingPolicy\n+  By default, IndexingPolicy will be set by azure service. To customize it add annotation `@DocumentIndexingPolicy` to domain class. This annotation has 4 attributes to customize, see following:\n+<!-- embedme src/samples/java/com/azure/cosmos/DocumentIndexingPolicyCodeSnippet.java#L16-L26 -->\n+```java\n+// Indicate if indexing policy use automatic or not\n+boolean automatic() default Constants.DEFAULT_INDEXINGPOLICY_AUTOMATIC;\n+\n+// Indexing policy mode, option Consistent|Lazy|None.\n+IndexingMode mode() default IndexingMode.CONSISTENT;\n+\n+// Included paths for indexing\n+String[] includePaths() default {};\n+\n+// Excluded paths for indexing\n+String[] excludePaths() default {};\n+```\n+\n+- Supports Optimistic Locking for specific collections, which means upserts/deletes by document will fail with an exception in case the document was modified by another process in the meanwhile. To enable Optimistic Locking for a collection, just create a string `_etag` field and mark it with the `@Version` annotation. See the following:\n+\n+<!-- embedme src/samples/java/com/azure/cosmos/MyDocument.java#L14-L20 -->\n+```java\n+@Document(collection = \"myCollection\")\n+public class MyDocument {\n+    String id;\n+    String data;\n+    @Version\n+    String _etag;\n+}\n+```\n+- Supports [Azure Cosmos DB partition](https://docs.microsoft.com/azure/cosmos-db/partition-data). To specify a field of domain class to be partition key field, just annotate it with `@PartitionKey`. When you do CRUD operation, pls specify your partition value. For more sample on partition CRUD, pls refer to [test here](./src/test/java/com/microsoft/azure/spring/data/cosmosdb/repository/integration/AddressRepositoryIT.java)\n+- Supports [Spring Data custom query](https://docs.spring.io/spring-data/commons/docs/current/reference/html/#repositories.query-methods.details) find operation, e.g., `findByAFieldAndBField`\n+- Supports [Spring Data pagable and sort](https://docs.spring.io/spring-data/commons/docs/current/reference/html/#repositories.special-parameters).\n+  - Based on available RUs on the database account, cosmosDB can return documents less than or equal to the requested size.\n+  - Due to this variable number of returned documents in every iteration, user should not rely on the totalPageSize, and instead iterating over pageable should be done in this way.  \n+<!-- embedme src/samples/java/com/azure/cosmos/PageableRepositoryCodeSnippet.java#L29-L36 -->\n+```java\n+final CosmosPageRequest pageRequest = new CosmosPageRequest(0, pageSize, null);\n+Page<T> page = repository.findAll(pageRequest);\n+List<T> pageContent = page.getContent();\n+while (page.hasNext()) {\n+    Pageable nextPageable = page.nextPageable();\n+    page = repository.findAll(nextPageable);\n+    pageContent = page.getContent();\n+}\n+```\n+- Supports [spring-boot-starter-data-rest](https://projects.spring.io/spring-data-rest/).\n+- Supports List and nested type in domain class.\n+- Configurable ObjectMapper bean with unique name `cosmosdbObjectMapper`, only configure customized ObjectMapper if you really need to. e.g.,\n+<!-- embedme src/samples/java/com/azure/cosmos/ObjectMapperConfigurationCodeSnippet.java#L17-L20 -->\n+```java\n+@Bean(name = \"cosmosdbObjectMapper\")\n+public ObjectMapper objectMapper() {\n+    return new ObjectMapper(); // Do configuration to the ObjectMapper if required\n+}\n+```\n \n ## Quick Start\n \n-## Snapshots\n+### Add the dependency\n+`spring-data-cosmosdb` is published on Maven Central Repository.  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4e7303afcd85f49a02ac0f4f81ba8c7a9706284"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjE2OTUyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNToyMzowMFrOGvqN_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNToyMzowMFrOGvqN_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyNzk2NQ==", "bodyText": "This should be changed to com.azure:azure-spring-data-cosmos", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12964#discussion_r452627965", "createdAt": "2020-07-10T05:23:00Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/README.md", "diffHunk": "@@ -1,25 +1,356 @@\n #Azure Cosmos DB client library for Java\n \n ## Getting started\n+[Azure Cosmos DB](https://docs.microsoft.com/azure/cosmos-db/introduction) is a globally-distributed database service that allows developers to work with data using a variety of standard APIs, such as SQL, MongoDB, Cassandra, Graph, and Table.\n+\n+**Spring Data Azure Cosmos DB** provides initial Spring Data support for Azure Cosmos DB using the [SQL API](https://docs.microsoft.com/azure/cosmos-db/sql-api-introduction), based on Spring Data framework. Currently it only supports SQL API, the other APIs are in the plan. \n \n ## TOC\n \n+* [Examples](#Examples)\n+* [Spring data version support](#spring-data-version-support)\n+* [Feature List](#feature-list)\n+* [Quick Start](#quick-start)\n+* [Query Partitioned Collection](QueryPartitionedCollection.md)\n+* [Beta version package](#Beta version package)\n+* [Troubleshooting](#Troubleshooting)\n+* [Contributing](#Contributing)\n+* [Code of Conduct](#code-of-conduct)\n+* [Key concepts](#Key concepts)\n+* [Next steps](#Next steps)\n+\n ## Examples\n+Please refer to [sample project here](./samplecode).\n \n ## Spring Data Version Support\n+Version mapping between spring boot and spring-data-cosmosdb:\n+\n+| Spring boot version                                         | spring-data-cosmosdb version                                                                                                                                                                                        |\n+| :----------------------------------------------------------:|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|\n+| ![version](https://img.shields.io/badge/version-2.3.x-blue) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/spring-data-cosmosdb/2.3.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:spring-data-cosmosdb%20AND%20v:2.3.*) |\n+| ![version](https://img.shields.io/badge/version-2.2.x-blue) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/spring-data-cosmosdb/2.2.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:spring-data-cosmosdb%20AND%20v:2.2.*) |\n+| ![version](https://img.shields.io/badge/version-2.1.x-blue) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/spring-data-cosmosdb/2.1.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:spring-data-cosmosdb%20AND%20v:2.1.*) |\n+| ![version](https://img.shields.io/badge/version-2.0.x-blue) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/spring-data-cosmosdb/2.0.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:spring-data-cosmosdb%20AND%20v:2.0.*) |\n \n ## Feature List\n+- Spring Data ReactiveCrudRepository CrudRepository basic CRUD functionality\n+    - save\n+    - findAll\n+    - findOne by Id\n+    - deleteAll\n+    - delete by Id\n+    - delete entity\n+- Spring Data [@Id](https://github.com/spring-projects/spring-data-commons/blob/db62390de90c93a78743c97cc2cc9ccd964994a5/src/main/java/org/springframework/data/annotation/Id.java) annotation.\n+  There're 2 ways to map a field in domain class to `id` field of Azure Cosmos DB document.\n+  - annotate a field in domain class with `@Id`, this field will be mapped to document `id` in Cosmos DB. \n+  - set name of this field to `id`, this field will be mapped to document `id` in Azure Cosmos DB.\n+- Custom collection Name.\n+  By default, collection name will be class name of user domain class. To customize it, add the `@Document(collection=\"myCustomCollectionName\")` annotation to the domain class. The collection field also supports SpEL expressions (eg. `collection = \"${dynamic.collection.name}\"` or `collection = \"#{@someBean.getContainerName()}\"`) in order to provide collection names programmatically/via configuration properties.\n+- Custom IndexingPolicy\n+  By default, IndexingPolicy will be set by azure service. To customize it add annotation `@DocumentIndexingPolicy` to domain class. This annotation has 4 attributes to customize, see following:\n+<!-- embedme src/samples/java/com/azure/cosmos/DocumentIndexingPolicyCodeSnippet.java#L16-L26 -->\n+```java\n+// Indicate if indexing policy use automatic or not\n+boolean automatic() default Constants.DEFAULT_INDEXINGPOLICY_AUTOMATIC;\n+\n+// Indexing policy mode, option Consistent|Lazy|None.\n+IndexingMode mode() default IndexingMode.CONSISTENT;\n+\n+// Included paths for indexing\n+String[] includePaths() default {};\n+\n+// Excluded paths for indexing\n+String[] excludePaths() default {};\n+```\n+\n+- Supports Optimistic Locking for specific collections, which means upserts/deletes by document will fail with an exception in case the document was modified by another process in the meanwhile. To enable Optimistic Locking for a collection, just create a string `_etag` field and mark it with the `@Version` annotation. See the following:\n+\n+<!-- embedme src/samples/java/com/azure/cosmos/MyDocument.java#L14-L20 -->\n+```java\n+@Document(collection = \"myCollection\")\n+public class MyDocument {\n+    String id;\n+    String data;\n+    @Version\n+    String _etag;\n+}\n+```\n+- Supports [Azure Cosmos DB partition](https://docs.microsoft.com/azure/cosmos-db/partition-data). To specify a field of domain class to be partition key field, just annotate it with `@PartitionKey`. When you do CRUD operation, pls specify your partition value. For more sample on partition CRUD, pls refer to [test here](./src/test/java/com/microsoft/azure/spring/data/cosmosdb/repository/integration/AddressRepositoryIT.java)\n+- Supports [Spring Data custom query](https://docs.spring.io/spring-data/commons/docs/current/reference/html/#repositories.query-methods.details) find operation, e.g., `findByAFieldAndBField`\n+- Supports [Spring Data pagable and sort](https://docs.spring.io/spring-data/commons/docs/current/reference/html/#repositories.special-parameters).\n+  - Based on available RUs on the database account, cosmosDB can return documents less than or equal to the requested size.\n+  - Due to this variable number of returned documents in every iteration, user should not rely on the totalPageSize, and instead iterating over pageable should be done in this way.  \n+<!-- embedme src/samples/java/com/azure/cosmos/PageableRepositoryCodeSnippet.java#L29-L36 -->\n+```java\n+final CosmosPageRequest pageRequest = new CosmosPageRequest(0, pageSize, null);\n+Page<T> page = repository.findAll(pageRequest);\n+List<T> pageContent = page.getContent();\n+while (page.hasNext()) {\n+    Pageable nextPageable = page.nextPageable();\n+    page = repository.findAll(nextPageable);\n+    pageContent = page.getContent();\n+}\n+```\n+- Supports [spring-boot-starter-data-rest](https://projects.spring.io/spring-data-rest/).\n+- Supports List and nested type in domain class.\n+- Configurable ObjectMapper bean with unique name `cosmosdbObjectMapper`, only configure customized ObjectMapper if you really need to. e.g.,\n+<!-- embedme src/samples/java/com/azure/cosmos/ObjectMapperConfigurationCodeSnippet.java#L17-L20 -->\n+```java\n+@Bean(name = \"cosmosdbObjectMapper\")\n+public ObjectMapper objectMapper() {\n+    return new ObjectMapper(); // Do configuration to the ObjectMapper if required\n+}\n+```\n \n ## Quick Start\n \n-## Snapshots\n+### Add the dependency\n+`spring-data-cosmosdb` is published on Maven Central Repository.  \n+If you are using Maven, add the following dependency. \n+\n+[//]: # \"{x-version-update-start;com.microsoft.azure:spring-data-cosmosdb;current}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4e7303afcd85f49a02ac0f4f81ba8c7a9706284"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjE3MDQyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNToyMzo0NFrOGvqOmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNToyMzo0NFrOGvqOmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyODEyMA==", "bodyText": "Same here, please update the group id and artifact id to the latest values which are :\ngroupId -> com.azure\nartifactId -> azure-spring-data-cosmos", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12964#discussion_r452628120", "createdAt": "2020-07-10T05:23:44Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/README.md", "diffHunk": "@@ -1,25 +1,356 @@\n #Azure Cosmos DB client library for Java\n \n ## Getting started\n+[Azure Cosmos DB](https://docs.microsoft.com/azure/cosmos-db/introduction) is a globally-distributed database service that allows developers to work with data using a variety of standard APIs, such as SQL, MongoDB, Cassandra, Graph, and Table.\n+\n+**Spring Data Azure Cosmos DB** provides initial Spring Data support for Azure Cosmos DB using the [SQL API](https://docs.microsoft.com/azure/cosmos-db/sql-api-introduction), based on Spring Data framework. Currently it only supports SQL API, the other APIs are in the plan. \n \n ## TOC\n \n+* [Examples](#Examples)\n+* [Spring data version support](#spring-data-version-support)\n+* [Feature List](#feature-list)\n+* [Quick Start](#quick-start)\n+* [Query Partitioned Collection](QueryPartitionedCollection.md)\n+* [Beta version package](#Beta version package)\n+* [Troubleshooting](#Troubleshooting)\n+* [Contributing](#Contributing)\n+* [Code of Conduct](#code-of-conduct)\n+* [Key concepts](#Key concepts)\n+* [Next steps](#Next steps)\n+\n ## Examples\n+Please refer to [sample project here](./samplecode).\n \n ## Spring Data Version Support\n+Version mapping between spring boot and spring-data-cosmosdb:\n+\n+| Spring boot version                                         | spring-data-cosmosdb version                                                                                                                                                                                        |\n+| :----------------------------------------------------------:|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|\n+| ![version](https://img.shields.io/badge/version-2.3.x-blue) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/spring-data-cosmosdb/2.3.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:spring-data-cosmosdb%20AND%20v:2.3.*) |\n+| ![version](https://img.shields.io/badge/version-2.2.x-blue) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/spring-data-cosmosdb/2.2.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:spring-data-cosmosdb%20AND%20v:2.2.*) |\n+| ![version](https://img.shields.io/badge/version-2.1.x-blue) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/spring-data-cosmosdb/2.1.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:spring-data-cosmosdb%20AND%20v:2.1.*) |\n+| ![version](https://img.shields.io/badge/version-2.0.x-blue) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/spring-data-cosmosdb/2.0.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:spring-data-cosmosdb%20AND%20v:2.0.*) |\n \n ## Feature List\n+- Spring Data ReactiveCrudRepository CrudRepository basic CRUD functionality\n+    - save\n+    - findAll\n+    - findOne by Id\n+    - deleteAll\n+    - delete by Id\n+    - delete entity\n+- Spring Data [@Id](https://github.com/spring-projects/spring-data-commons/blob/db62390de90c93a78743c97cc2cc9ccd964994a5/src/main/java/org/springframework/data/annotation/Id.java) annotation.\n+  There're 2 ways to map a field in domain class to `id` field of Azure Cosmos DB document.\n+  - annotate a field in domain class with `@Id`, this field will be mapped to document `id` in Cosmos DB. \n+  - set name of this field to `id`, this field will be mapped to document `id` in Azure Cosmos DB.\n+- Custom collection Name.\n+  By default, collection name will be class name of user domain class. To customize it, add the `@Document(collection=\"myCustomCollectionName\")` annotation to the domain class. The collection field also supports SpEL expressions (eg. `collection = \"${dynamic.collection.name}\"` or `collection = \"#{@someBean.getContainerName()}\"`) in order to provide collection names programmatically/via configuration properties.\n+- Custom IndexingPolicy\n+  By default, IndexingPolicy will be set by azure service. To customize it add annotation `@DocumentIndexingPolicy` to domain class. This annotation has 4 attributes to customize, see following:\n+<!-- embedme src/samples/java/com/azure/cosmos/DocumentIndexingPolicyCodeSnippet.java#L16-L26 -->\n+```java\n+// Indicate if indexing policy use automatic or not\n+boolean automatic() default Constants.DEFAULT_INDEXINGPOLICY_AUTOMATIC;\n+\n+// Indexing policy mode, option Consistent|Lazy|None.\n+IndexingMode mode() default IndexingMode.CONSISTENT;\n+\n+// Included paths for indexing\n+String[] includePaths() default {};\n+\n+// Excluded paths for indexing\n+String[] excludePaths() default {};\n+```\n+\n+- Supports Optimistic Locking for specific collections, which means upserts/deletes by document will fail with an exception in case the document was modified by another process in the meanwhile. To enable Optimistic Locking for a collection, just create a string `_etag` field and mark it with the `@Version` annotation. See the following:\n+\n+<!-- embedme src/samples/java/com/azure/cosmos/MyDocument.java#L14-L20 -->\n+```java\n+@Document(collection = \"myCollection\")\n+public class MyDocument {\n+    String id;\n+    String data;\n+    @Version\n+    String _etag;\n+}\n+```\n+- Supports [Azure Cosmos DB partition](https://docs.microsoft.com/azure/cosmos-db/partition-data). To specify a field of domain class to be partition key field, just annotate it with `@PartitionKey`. When you do CRUD operation, pls specify your partition value. For more sample on partition CRUD, pls refer to [test here](./src/test/java/com/microsoft/azure/spring/data/cosmosdb/repository/integration/AddressRepositoryIT.java)\n+- Supports [Spring Data custom query](https://docs.spring.io/spring-data/commons/docs/current/reference/html/#repositories.query-methods.details) find operation, e.g., `findByAFieldAndBField`\n+- Supports [Spring Data pagable and sort](https://docs.spring.io/spring-data/commons/docs/current/reference/html/#repositories.special-parameters).\n+  - Based on available RUs on the database account, cosmosDB can return documents less than or equal to the requested size.\n+  - Due to this variable number of returned documents in every iteration, user should not rely on the totalPageSize, and instead iterating over pageable should be done in this way.  \n+<!-- embedme src/samples/java/com/azure/cosmos/PageableRepositoryCodeSnippet.java#L29-L36 -->\n+```java\n+final CosmosPageRequest pageRequest = new CosmosPageRequest(0, pageSize, null);\n+Page<T> page = repository.findAll(pageRequest);\n+List<T> pageContent = page.getContent();\n+while (page.hasNext()) {\n+    Pageable nextPageable = page.nextPageable();\n+    page = repository.findAll(nextPageable);\n+    pageContent = page.getContent();\n+}\n+```\n+- Supports [spring-boot-starter-data-rest](https://projects.spring.io/spring-data-rest/).\n+- Supports List and nested type in domain class.\n+- Configurable ObjectMapper bean with unique name `cosmosdbObjectMapper`, only configure customized ObjectMapper if you really need to. e.g.,\n+<!-- embedme src/samples/java/com/azure/cosmos/ObjectMapperConfigurationCodeSnippet.java#L17-L20 -->\n+```java\n+@Bean(name = \"cosmosdbObjectMapper\")\n+public ObjectMapper objectMapper() {\n+    return new ObjectMapper(); // Do configuration to the ObjectMapper if required\n+}\n+```\n \n ## Quick Start\n \n-## Snapshots\n+### Add the dependency\n+`spring-data-cosmosdb` is published on Maven Central Repository.  \n+If you are using Maven, add the following dependency. \n+\n+[//]: # \"{x-version-update-start;com.microsoft.azure:spring-data-cosmosdb;current}\"\n+```xml\n+<dependency>\n+    <groupId>com.microsoft.azure</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4e7303afcd85f49a02ac0f4f81ba8c7a9706284"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjE3MDc3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNToyNDowMlrOGvqOzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNToyNDowMlrOGvqOzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyODE3Mg==", "bodyText": "Please update this to this repo issues url", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12964#discussion_r452628172", "createdAt": "2020-07-10T05:24:02Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/README.md", "diffHunk": "@@ -1,25 +1,356 @@\n #Azure Cosmos DB client library for Java\n \n ## Getting started\n+[Azure Cosmos DB](https://docs.microsoft.com/azure/cosmos-db/introduction) is a globally-distributed database service that allows developers to work with data using a variety of standard APIs, such as SQL, MongoDB, Cassandra, Graph, and Table.\n+\n+**Spring Data Azure Cosmos DB** provides initial Spring Data support for Azure Cosmos DB using the [SQL API](https://docs.microsoft.com/azure/cosmos-db/sql-api-introduction), based on Spring Data framework. Currently it only supports SQL API, the other APIs are in the plan. \n \n ## TOC\n \n+* [Examples](#Examples)\n+* [Spring data version support](#spring-data-version-support)\n+* [Feature List](#feature-list)\n+* [Quick Start](#quick-start)\n+* [Query Partitioned Collection](QueryPartitionedCollection.md)\n+* [Beta version package](#Beta version package)\n+* [Troubleshooting](#Troubleshooting)\n+* [Contributing](#Contributing)\n+* [Code of Conduct](#code-of-conduct)\n+* [Key concepts](#Key concepts)\n+* [Next steps](#Next steps)\n+\n ## Examples\n+Please refer to [sample project here](./samplecode).\n \n ## Spring Data Version Support\n+Version mapping between spring boot and spring-data-cosmosdb:\n+\n+| Spring boot version                                         | spring-data-cosmosdb version                                                                                                                                                                                        |\n+| :----------------------------------------------------------:|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|\n+| ![version](https://img.shields.io/badge/version-2.3.x-blue) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/spring-data-cosmosdb/2.3.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:spring-data-cosmosdb%20AND%20v:2.3.*) |\n+| ![version](https://img.shields.io/badge/version-2.2.x-blue) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/spring-data-cosmosdb/2.2.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:spring-data-cosmosdb%20AND%20v:2.2.*) |\n+| ![version](https://img.shields.io/badge/version-2.1.x-blue) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/spring-data-cosmosdb/2.1.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:spring-data-cosmosdb%20AND%20v:2.1.*) |\n+| ![version](https://img.shields.io/badge/version-2.0.x-blue) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/spring-data-cosmosdb/2.0.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:spring-data-cosmosdb%20AND%20v:2.0.*) |\n \n ## Feature List\n+- Spring Data ReactiveCrudRepository CrudRepository basic CRUD functionality\n+    - save\n+    - findAll\n+    - findOne by Id\n+    - deleteAll\n+    - delete by Id\n+    - delete entity\n+- Spring Data [@Id](https://github.com/spring-projects/spring-data-commons/blob/db62390de90c93a78743c97cc2cc9ccd964994a5/src/main/java/org/springframework/data/annotation/Id.java) annotation.\n+  There're 2 ways to map a field in domain class to `id` field of Azure Cosmos DB document.\n+  - annotate a field in domain class with `@Id`, this field will be mapped to document `id` in Cosmos DB. \n+  - set name of this field to `id`, this field will be mapped to document `id` in Azure Cosmos DB.\n+- Custom collection Name.\n+  By default, collection name will be class name of user domain class. To customize it, add the `@Document(collection=\"myCustomCollectionName\")` annotation to the domain class. The collection field also supports SpEL expressions (eg. `collection = \"${dynamic.collection.name}\"` or `collection = \"#{@someBean.getContainerName()}\"`) in order to provide collection names programmatically/via configuration properties.\n+- Custom IndexingPolicy\n+  By default, IndexingPolicy will be set by azure service. To customize it add annotation `@DocumentIndexingPolicy` to domain class. This annotation has 4 attributes to customize, see following:\n+<!-- embedme src/samples/java/com/azure/cosmos/DocumentIndexingPolicyCodeSnippet.java#L16-L26 -->\n+```java\n+// Indicate if indexing policy use automatic or not\n+boolean automatic() default Constants.DEFAULT_INDEXINGPOLICY_AUTOMATIC;\n+\n+// Indexing policy mode, option Consistent|Lazy|None.\n+IndexingMode mode() default IndexingMode.CONSISTENT;\n+\n+// Included paths for indexing\n+String[] includePaths() default {};\n+\n+// Excluded paths for indexing\n+String[] excludePaths() default {};\n+```\n+\n+- Supports Optimistic Locking for specific collections, which means upserts/deletes by document will fail with an exception in case the document was modified by another process in the meanwhile. To enable Optimistic Locking for a collection, just create a string `_etag` field and mark it with the `@Version` annotation. See the following:\n+\n+<!-- embedme src/samples/java/com/azure/cosmos/MyDocument.java#L14-L20 -->\n+```java\n+@Document(collection = \"myCollection\")\n+public class MyDocument {\n+    String id;\n+    String data;\n+    @Version\n+    String _etag;\n+}\n+```\n+- Supports [Azure Cosmos DB partition](https://docs.microsoft.com/azure/cosmos-db/partition-data). To specify a field of domain class to be partition key field, just annotate it with `@PartitionKey`. When you do CRUD operation, pls specify your partition value. For more sample on partition CRUD, pls refer to [test here](./src/test/java/com/microsoft/azure/spring/data/cosmosdb/repository/integration/AddressRepositoryIT.java)\n+- Supports [Spring Data custom query](https://docs.spring.io/spring-data/commons/docs/current/reference/html/#repositories.query-methods.details) find operation, e.g., `findByAFieldAndBField`\n+- Supports [Spring Data pagable and sort](https://docs.spring.io/spring-data/commons/docs/current/reference/html/#repositories.special-parameters).\n+  - Based on available RUs on the database account, cosmosDB can return documents less than or equal to the requested size.\n+  - Due to this variable number of returned documents in every iteration, user should not rely on the totalPageSize, and instead iterating over pageable should be done in this way.  \n+<!-- embedme src/samples/java/com/azure/cosmos/PageableRepositoryCodeSnippet.java#L29-L36 -->\n+```java\n+final CosmosPageRequest pageRequest = new CosmosPageRequest(0, pageSize, null);\n+Page<T> page = repository.findAll(pageRequest);\n+List<T> pageContent = page.getContent();\n+while (page.hasNext()) {\n+    Pageable nextPageable = page.nextPageable();\n+    page = repository.findAll(nextPageable);\n+    pageContent = page.getContent();\n+}\n+```\n+- Supports [spring-boot-starter-data-rest](https://projects.spring.io/spring-data-rest/).\n+- Supports List and nested type in domain class.\n+- Configurable ObjectMapper bean with unique name `cosmosdbObjectMapper`, only configure customized ObjectMapper if you really need to. e.g.,\n+<!-- embedme src/samples/java/com/azure/cosmos/ObjectMapperConfigurationCodeSnippet.java#L17-L20 -->\n+```java\n+@Bean(name = \"cosmosdbObjectMapper\")\n+public ObjectMapper objectMapper() {\n+    return new ObjectMapper(); // Do configuration to the ObjectMapper if required\n+}\n+```\n \n ## Quick Start\n \n-## Snapshots\n+### Add the dependency\n+`spring-data-cosmosdb` is published on Maven Central Repository.  \n+If you are using Maven, add the following dependency. \n+\n+[//]: # \"{x-version-update-start;com.microsoft.azure:spring-data-cosmosdb;current}\"\n+```xml\n+<dependency>\n+    <groupId>com.microsoft.azure</groupId>\n+    <artifactId>spring-data-cosmosdb</artifactId>\n+    <version>3.0.0-beta.1</version>\n+</dependency>\n+```\n+\n+### Setup Configuration\n+Setup configuration class.\n+\n+CosmosKeyCredential feature provides capability to rotate keys on the fly. You can switch keys using switchToSecondaryKey(). \n+For more information on this, see the Sample Application code.\n+\n+### Sync and Reactive Repository support\n+2.2.x supports both sync and reactive repository support. \n+\n+Use `@EnableCosmosRepositories` to enable sync repository support. \n+\n+For reactive repository support, use `@EnableReactiveCosmosRepositories`\n+\n+### Response Diagnostics String and Query Metrics\n+2.2.x supports Response Diagnostics String and Query Metrics. \n+Set `populateQueryMetrics` flag to true in application.properties to enable query metrics.\n+In addition to setting the flag, implement `ResponseDiagnosticsProcessor` to log diagnostics information. \n+<!-- embedme src/samples/java/com/azure/cosmos/AppConfiguration.java#L21-L65 -->\n+\n+```java\n+@Configuration\n+@EnableCosmosRepositories\n+public class AppConfiguration extends AbstractCosmosConfiguration {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(AppConfiguration.class);\n+\n+    @Value(\"${azure.cosmosdb.uri}\")\n+    private String uri;\n+\n+    @Value(\"${azure.cosmosdb.key}\")\n+    private String key;\n+\n+    @Value(\"${azure.cosmosdb.secondaryKey}\")\n+    private String secondaryKey;\n+\n+    @Value(\"${azure.cosmosdb.database}\")\n+    private String dbName;\n+\n+    @Value(\"${azure.cosmosdb.populateQueryMetrics}\")\n+    private boolean populateQueryMetrics;\n+\n+    private CosmosKeyCredential cosmosKeyCredential;\n+\n+    public CosmosDBConfig getConfig() {\n+        this.cosmosKeyCredential = new CosmosKeyCredential(key);\n+        CosmosDBConfig cosmosdbConfig = CosmosDBConfig.builder(uri,\n+            this.cosmosKeyCredential, dbName).build();\n+        cosmosdbConfig.setPopulateQueryMetrics(populateQueryMetrics);\n+        cosmosdbConfig.setResponseDiagnosticsProcessor(new ResponseDiagnosticsProcessorImplementation());\n+        return cosmosdbConfig;\n+    }\n+\n+    public void switchToSecondaryKey() {\n+        this.cosmosKeyCredential.key(secondaryKey);\n+    }\n+\n+    private static class ResponseDiagnosticsProcessorImplementation implements ResponseDiagnosticsProcessor {\n+\n+        @Override\n+        public void processResponseDiagnostics(@Nullable ResponseDiagnostics responseDiagnostics) {\n+            logger.info(\"Response Diagnostics {}\", responseDiagnostics);\n+        }\n+    }\n+\n+}\n+```\n+Or if you want to customize your config:\n+<!-- embedme src/samples/java/com/azure/cosmos/AppConfigurationCodeSnippet.java#L40-L46 -->\n+```java\n+public CosmosDBConfig getConfig() {\n+    this.cosmosKeyCredential = new CosmosKeyCredential(key);\n+    CosmosDBConfig cosmosDbConfig = CosmosDBConfig.builder(uri, this.cosmosKeyCredential, dbName).build();\n+    cosmosDbConfig.getConnectionPolicy().connectionMode(ConnectionMode.DIRECT);\n+    cosmosDbConfig.getConnectionPolicy().maxPoolSize(1000);\n+    return cosmosDbConfig;\n+}\n+```\n+By default, `@EnableCosmosRepositories` will scan the current package for any interfaces that extend one of Spring Data's repository interfaces. Using it to annotate your Configuration class to scan a different root package by `@EnableCosmosRepositories(basePackageClass=UserRepository.class)` if your project layout has multiple projects and it's not finding your repositories.\n+\n+\n+### Define an entity\n+Define a simple entity as Document in Azure Cosmos DB.\n+\n+You can define entities by adding the `@Document` annotation and specifying properties related to the container, such as the container name, request units (RUs), time to live, and auto-create container. \n+\n+Containers are created automatically unless you don't want them to: Set `autoCreateCollection` to false in `@Document` annotation to disable auto creation of containers. \n+\n+Note: By default request units assigned to newly created containers is 4000. Specify different ru value to customize request units for container created by the SDK (minimum RU value is 400). \n+<!-- embedme src/samples/java/com/azure/cosmos/User.java#L14-L62 -->\n+```java\n+@Document(collection = \"myCollection\", ru = \"400\")\n+public class User {\n+    private String id;\n+    private String firstName;\n+\n+\n+    @PartitionKey\n+    private String lastName;\n+\n+    public User() {\n+        // If you do not want to create a default constructor,\n+        // use annotation @JsonCreator and @JsonProperty in the full args constructor\n+    }\n+\n+    public User(String id, String firstName, String lastName) {\n+        this.id = id;\n+        this.firstName = firstName;\n+        this.lastName = lastName;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"User: %s %s, %s\", firstName, lastName, id);\n+    }\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+}\n+```\n+`id` field will be used as document id in Azure Cosmos DB. If you want use another field like `emailAddress` as document `id`, just annotate that field with `@Id` annotation.\n+\n+Annotation `@Document(collection=\"mycollection\")` is used to specify collection name in Azure Cosmos DB.\n+Annotation `@PartitionKey` on `lastName` field is used to specify this field be partition key in Azure Cosmos DB.\n+<!-- embedme src/samples/java/com/azure/cosmos/UserSample.java#L14-L19 -->\n+```java\n+@Document(collection = \"mycollection\")\n+public class UserSample {\n+    @Id\n+    private String emailAddress;\n+\n+}\n+```\n+\n+### Create repositories\n+Extends CosmosRepository interface, which provides Spring Data repository support.\n+<!-- embedme src/samples/java/com/azure/cosmos/UserRepository.java#L17-L22 -->\n+\n+```java\n+@Repository\n+public interface UserRepository extends CosmosRepository<User, String> {\n+    List<User> findByFirstName(String firstName);\n+    User findOne(String id, String lastName);\n+}\n+```\n+\n+`findByFirstName` method is custom query method, it will find documents per FirstName.\n+\n+### Create an Application class\n+Here create an application class with all the components\n+<!-- embedme src/samples/java/com/azure/cosmos/SampleApplication.java#L17-L51 -->\n+\n+```java\n+@SpringBootApplication\n+public class SampleApplication implements CommandLineRunner {\n+\n+    @Autowired\n+    private UserRepository repository;\n+\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(SampleApplication.class, args);\n+    }\n+\n+    public void run(String... var1) {\n+\n+        final User testUser = new User(\"testId\", \"testFirstName\", \"testLastName\");\n+\n+        repository.deleteAll();\n+        repository.save(testUser);\n+\n+        // to find by Id, please specify partition key value if collection is partitioned\n+        final User result = repository.findOne(testUser.getId(), testUser.getLastName());\n+        // if emailAddress is mapped to id, then\n+        // final User result = respository.findOne(testUser.getEmailAddress(), testUser.getLastName());\n+\n+        //  Switch to secondary key\n+        UserRepositoryConfiguration bean =\n+            applicationContext.getBean(UserRepositoryConfiguration.class);\n+        bean.switchToSecondaryKey();\n+\n+        //  Now repository will use secondary key\n+        repository.save(testUser);\n+\n+    }\n+}\n+```\n+Autowired UserRepository interface, then can do save, delete and find operations. Spring Data Azure Cosmos DB uses the CosmosTemplate to execute the queries behind *find*, *save* methods. You can use the template yourself for more complex queries.\n+\n+## Beta version package\n+\n+Beta version built from `master` branch are available, you can refer to the [instruction](https://github.com/Azure/azure-sdk-for-java/blob/master/CONTRIBUTING.md#nightly-package-builds) to use beta version packages.\n+\n \n ## Troubleshooting\n \n+If you encounter any bug, please file an issue [here](https://github.com/Microsoft/spring-data-cosmosdb/issues/new).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4e7303afcd85f49a02ac0f4f81ba8c7a9706284"}, "originalPosition": 339}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjE3MTk4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNToyNDo0M1rOGvqPfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNToyNDo0M1rOGvqPfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyODM1MQ==", "bodyText": "Please update the path of AddressRepositoryIT.java", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12964#discussion_r452628351", "createdAt": "2020-07-10T05:24:43Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/README.md", "diffHunk": "@@ -1,25 +1,356 @@\n #Azure Cosmos DB client library for Java\n \n ## Getting started\n+[Azure Cosmos DB](https://docs.microsoft.com/azure/cosmos-db/introduction) is a globally-distributed database service that allows developers to work with data using a variety of standard APIs, such as SQL, MongoDB, Cassandra, Graph, and Table.\n+\n+**Spring Data Azure Cosmos DB** provides initial Spring Data support for Azure Cosmos DB using the [SQL API](https://docs.microsoft.com/azure/cosmos-db/sql-api-introduction), based on Spring Data framework. Currently it only supports SQL API, the other APIs are in the plan. \n \n ## TOC\n \n+* [Examples](#Examples)\n+* [Spring data version support](#spring-data-version-support)\n+* [Feature List](#feature-list)\n+* [Quick Start](#quick-start)\n+* [Query Partitioned Collection](QueryPartitionedCollection.md)\n+* [Beta version package](#Beta version package)\n+* [Troubleshooting](#Troubleshooting)\n+* [Contributing](#Contributing)\n+* [Code of Conduct](#code-of-conduct)\n+* [Key concepts](#Key concepts)\n+* [Next steps](#Next steps)\n+\n ## Examples\n+Please refer to [sample project here](./samplecode).\n \n ## Spring Data Version Support\n+Version mapping between spring boot and spring-data-cosmosdb:\n+\n+| Spring boot version                                         | spring-data-cosmosdb version                                                                                                                                                                                        |\n+| :----------------------------------------------------------:|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|\n+| ![version](https://img.shields.io/badge/version-2.3.x-blue) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/spring-data-cosmosdb/2.3.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:spring-data-cosmosdb%20AND%20v:2.3.*) |\n+| ![version](https://img.shields.io/badge/version-2.2.x-blue) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/spring-data-cosmosdb/2.2.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:spring-data-cosmosdb%20AND%20v:2.2.*) |\n+| ![version](https://img.shields.io/badge/version-2.1.x-blue) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/spring-data-cosmosdb/2.1.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:spring-data-cosmosdb%20AND%20v:2.1.*) |\n+| ![version](https://img.shields.io/badge/version-2.0.x-blue) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/spring-data-cosmosdb/2.0.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:spring-data-cosmosdb%20AND%20v:2.0.*) |\n \n ## Feature List\n+- Spring Data ReactiveCrudRepository CrudRepository basic CRUD functionality\n+    - save\n+    - findAll\n+    - findOne by Id\n+    - deleteAll\n+    - delete by Id\n+    - delete entity\n+- Spring Data [@Id](https://github.com/spring-projects/spring-data-commons/blob/db62390de90c93a78743c97cc2cc9ccd964994a5/src/main/java/org/springframework/data/annotation/Id.java) annotation.\n+  There're 2 ways to map a field in domain class to `id` field of Azure Cosmos DB document.\n+  - annotate a field in domain class with `@Id`, this field will be mapped to document `id` in Cosmos DB. \n+  - set name of this field to `id`, this field will be mapped to document `id` in Azure Cosmos DB.\n+- Custom collection Name.\n+  By default, collection name will be class name of user domain class. To customize it, add the `@Document(collection=\"myCustomCollectionName\")` annotation to the domain class. The collection field also supports SpEL expressions (eg. `collection = \"${dynamic.collection.name}\"` or `collection = \"#{@someBean.getContainerName()}\"`) in order to provide collection names programmatically/via configuration properties.\n+- Custom IndexingPolicy\n+  By default, IndexingPolicy will be set by azure service. To customize it add annotation `@DocumentIndexingPolicy` to domain class. This annotation has 4 attributes to customize, see following:\n+<!-- embedme src/samples/java/com/azure/cosmos/DocumentIndexingPolicyCodeSnippet.java#L16-L26 -->\n+```java\n+// Indicate if indexing policy use automatic or not\n+boolean automatic() default Constants.DEFAULT_INDEXINGPOLICY_AUTOMATIC;\n+\n+// Indexing policy mode, option Consistent|Lazy|None.\n+IndexingMode mode() default IndexingMode.CONSISTENT;\n+\n+// Included paths for indexing\n+String[] includePaths() default {};\n+\n+// Excluded paths for indexing\n+String[] excludePaths() default {};\n+```\n+\n+- Supports Optimistic Locking for specific collections, which means upserts/deletes by document will fail with an exception in case the document was modified by another process in the meanwhile. To enable Optimistic Locking for a collection, just create a string `_etag` field and mark it with the `@Version` annotation. See the following:\n+\n+<!-- embedme src/samples/java/com/azure/cosmos/MyDocument.java#L14-L20 -->\n+```java\n+@Document(collection = \"myCollection\")\n+public class MyDocument {\n+    String id;\n+    String data;\n+    @Version\n+    String _etag;\n+}\n+```\n+- Supports [Azure Cosmos DB partition](https://docs.microsoft.com/azure/cosmos-db/partition-data). To specify a field of domain class to be partition key field, just annotate it with `@PartitionKey`. When you do CRUD operation, pls specify your partition value. For more sample on partition CRUD, pls refer to [test here](./src/test/java/com/microsoft/azure/spring/data/cosmosdb/repository/integration/AddressRepositoryIT.java)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4e7303afcd85f49a02ac0f4f81ba8c7a9706284"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3602, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}