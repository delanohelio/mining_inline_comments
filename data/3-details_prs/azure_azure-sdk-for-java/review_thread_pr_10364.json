{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1ODkyNTI0", "number": 10364, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODowMzozNVrODzmTGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODowMzozNVrODzmTGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDMxNDQ4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/mgmt/src/main/java/com/azure/management/cosmosdb/implementation/CosmosDBAccountImpl.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODowMzozNVrOGIIHkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOTowNDoxOFrOGIKiQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE3NDgwMA==", "bodyText": "Why it using lro regry duration?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10364#discussion_r411174800", "createdAt": "2020-04-20T08:03:35Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/cosmos/mgmt/src/main/java/com/azure/management/cosmosdb/implementation/CosmosDBAccountImpl.java", "diffHunk": "@@ -622,7 +603,7 @@ private void addLocationsForParameters(HasLocations locationParameters, List<Fai\n                                         .flatMap(\n                                             index -> {\n                                                 data.set(0, data.get(0) + 30);\n-                                                return Mono.delay(manager().getSdkContext().getLroRetryDuration());\n+                                                return Mono.delay(SdkContext.getLroRetryDuration());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c246992073089017c509d72b33fbad27df32dba0"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE4MTMyOA==", "bodyText": "The cosmos multi location prevision is async. It will return succeeded when first location is done. This func I think is to ensure all location is succeeded.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10364#discussion_r411181328", "createdAt": "2020-04-20T08:14:11Z", "author": {"login": "ChenTanyi"}, "path": "sdk/cosmos/mgmt/src/main/java/com/azure/management/cosmosdb/implementation/CosmosDBAccountImpl.java", "diffHunk": "@@ -622,7 +603,7 @@ private void addLocationsForParameters(HasLocations locationParameters, List<Fai\n                                         .flatMap(\n                                             index -> {\n                                                 data.set(0, data.get(0) + 30);\n-                                                return Mono.delay(manager().getSdkContext().getLroRetryDuration());\n+                                                return Mono.delay(SdkContext.getLroRetryDuration());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE3NDgwMA=="}, "originalCommit": {"oid": "c246992073089017c509d72b33fbad27df32dba0"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5MzQzOQ==", "bodyText": "Yes, but why use getLroRetryDuration? It should be only used for LRO, but this is not.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10364#discussion_r411193439", "createdAt": "2020-04-20T08:32:24Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/cosmos/mgmt/src/main/java/com/azure/management/cosmosdb/implementation/CosmosDBAccountImpl.java", "diffHunk": "@@ -622,7 +603,7 @@ private void addLocationsForParameters(HasLocations locationParameters, List<Fai\n                                         .flatMap(\n                                             index -> {\n                                                 data.set(0, data.get(0) + 30);\n-                                                return Mono.delay(manager().getSdkContext().getLroRetryDuration());\n+                                                return Mono.delay(SdkContext.getLroRetryDuration());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE3NDgwMA=="}, "originalCommit": {"oid": "c246992073089017c509d72b33fbad27df32dba0"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5NjI0Ng==", "bodyText": "You can use getDelayDuration with a specified delay.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10364#discussion_r411196246", "createdAt": "2020-04-20T08:36:37Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/cosmos/mgmt/src/main/java/com/azure/management/cosmosdb/implementation/CosmosDBAccountImpl.java", "diffHunk": "@@ -622,7 +603,7 @@ private void addLocationsForParameters(HasLocations locationParameters, List<Fai\n                                         .flatMap(\n                                             index -> {\n                                                 data.set(0, data.get(0) + 30);\n-                                                return Mono.delay(manager().getSdkContext().getLroRetryDuration());\n+                                                return Mono.delay(SdkContext.getLroRetryDuration());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE3NDgwMA=="}, "originalCommit": {"oid": "c246992073089017c509d72b33fbad27df32dba0"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5NjY3MQ==", "bodyText": "This is a LRO situation, just isn't a common LRO situation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10364#discussion_r411196671", "createdAt": "2020-04-20T08:37:20Z", "author": {"login": "ChenTanyi"}, "path": "sdk/cosmos/mgmt/src/main/java/com/azure/management/cosmosdb/implementation/CosmosDBAccountImpl.java", "diffHunk": "@@ -622,7 +603,7 @@ private void addLocationsForParameters(HasLocations locationParameters, List<Fai\n                                         .flatMap(\n                                             index -> {\n                                                 data.set(0, data.get(0) + 30);\n-                                                return Mono.delay(manager().getSdkContext().getLroRetryDuration());\n+                                                return Mono.delay(SdkContext.getLroRetryDuration());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE3NDgwMA=="}, "originalCommit": {"oid": "c246992073089017c509d72b33fbad27df32dba0"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5NzExMg==", "bodyText": "Long running operation to wait all location prevision complete.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10364#discussion_r411197112", "createdAt": "2020-04-20T08:38:01Z", "author": {"login": "ChenTanyi"}, "path": "sdk/cosmos/mgmt/src/main/java/com/azure/management/cosmosdb/implementation/CosmosDBAccountImpl.java", "diffHunk": "@@ -622,7 +603,7 @@ private void addLocationsForParameters(HasLocations locationParameters, List<Fai\n                                         .flatMap(\n                                             index -> {\n                                                 data.set(0, data.get(0) + 30);\n-                                                return Mono.delay(manager().getSdkContext().getLroRetryDuration());\n+                                                return Mono.delay(SdkContext.getLroRetryDuration());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE3NDgwMA=="}, "originalCommit": {"oid": "c246992073089017c509d72b33fbad27df32dba0"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwMTAyOA==", "bodyText": "An operation takes long time does not means that it is LRO.\nThe specific var is used here for the PollerFlux.\n   public <T, U> PollerFlux<PollResult<T>, U> getLroResultAsync(Mono<SimpleResponse<Flux<ByteBuffer>>> lroInit,\n                                                                 HttpPipeline httpPipeline,\n                                                                 Type pollResultType, Type finalResultType) {\n        return PollerFactory.create(\n            getSerializerAdapter(),\n            httpPipeline,\n            pollResultType,\n            finalResultType,\n            SdkContext.getLroRetryDuration(),\n            activationOperation(lroInit)\n        );\n    }", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10364#discussion_r411201028", "createdAt": "2020-04-20T08:44:02Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/cosmos/mgmt/src/main/java/com/azure/management/cosmosdb/implementation/CosmosDBAccountImpl.java", "diffHunk": "@@ -622,7 +603,7 @@ private void addLocationsForParameters(HasLocations locationParameters, List<Fai\n                                         .flatMap(\n                                             index -> {\n                                                 data.set(0, data.get(0) + 30);\n-                                                return Mono.delay(manager().getSdkContext().getLroRetryDuration());\n+                                                return Mono.delay(SdkContext.getLroRetryDuration());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE3NDgwMA=="}, "originalCommit": {"oid": "c246992073089017c509d72b33fbad27df32dba0"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwMjAyMA==", "bodyText": "Track1 is such\n                        ).repeatWhen(new Func1<Observable<? extends java.lang.Void>, Observable<?>>() {\n                            @Override\n                            public Observable<?> call(Observable<? extends Void> observable) {\n                                data.set(0, data.get(0) + 5);\n                                return observable.delay(5, TimeUnit.SECONDS);\n                            }\n                        })", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10364#discussion_r411202020", "createdAt": "2020-04-20T08:45:33Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/cosmos/mgmt/src/main/java/com/azure/management/cosmosdb/implementation/CosmosDBAccountImpl.java", "diffHunk": "@@ -622,7 +603,7 @@ private void addLocationsForParameters(HasLocations locationParameters, List<Fai\n                                         .flatMap(\n                                             index -> {\n                                                 data.set(0, data.get(0) + 30);\n-                                                return Mono.delay(manager().getSdkContext().getLroRetryDuration());\n+                                                return Mono.delay(SdkContext.getLroRetryDuration());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE3NDgwMA=="}, "originalCommit": {"oid": "c246992073089017c509d72b33fbad27df32dba0"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIxNDQwMg==", "bodyText": "Done, change to getDelayDuration.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10364#discussion_r411214402", "createdAt": "2020-04-20T09:04:18Z", "author": {"login": "ChenTanyi"}, "path": "sdk/cosmos/mgmt/src/main/java/com/azure/management/cosmosdb/implementation/CosmosDBAccountImpl.java", "diffHunk": "@@ -622,7 +603,7 @@ private void addLocationsForParameters(HasLocations locationParameters, List<Fai\n                                         .flatMap(\n                                             index -> {\n                                                 data.set(0, data.get(0) + 30);\n-                                                return Mono.delay(manager().getSdkContext().getLroRetryDuration());\n+                                                return Mono.delay(SdkContext.getLroRetryDuration());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE3NDgwMA=="}, "originalCommit": {"oid": "c246992073089017c509d72b33fbad27df32dba0"}, "originalPosition": 163}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4537, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}