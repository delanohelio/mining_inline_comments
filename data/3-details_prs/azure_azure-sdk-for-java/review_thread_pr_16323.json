{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNzA1NDI4", "number": 16323, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMzoyMDozNVrOEttkGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjo1OTowOFrOEuFrfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MzY3ODk4OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMzoyMDozNVrOHhqbKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMzoyMDozNVrOHhqbKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA2MDEzNw==", "bodyText": "nit: I would break this down for better readability, especially when there is a conditional statement involved. here and everywhere", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16323#discussion_r505060137", "createdAt": "2020-10-14T23:20:35Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -445,14 +445,14 @@ public DigitalTwinsServiceVersion getServiceVersion() {\n      * @return A {@link DigitalTwinsResponse} containing the deserialized relationship.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public <T> Mono<DigitalTwinsResponse<T>> getRelationshipWithResponse(String digitalTwinId, String relationshipId, Class<T> clazz, DigitalTwinsGetRelationshipByIdOptions options) {\n+    public <T> Mono<DigitalTwinsResponse<T>> getRelationshipWithResponse(String digitalTwinId, String relationshipId, Class<T> clazz, GetRelationshipOptions options) {\n         return withContext(context -> getRelationshipWithResponse(digitalTwinId, relationshipId, clazz, options, context));\n     }\n \n-    <T> Mono<DigitalTwinsResponse<T>> getRelationshipWithResponse(String digitalTwinId, String relationshipId, Class<T> clazz, DigitalTwinsGetRelationshipByIdOptions options, Context context) {\n+    <T> Mono<DigitalTwinsResponse<T>> getRelationshipWithResponse(String digitalTwinId, String relationshipId, Class<T> clazz, GetRelationshipOptions options, Context context) {\n         return protocolLayer\n             .getDigitalTwins()\n-            .getRelationshipByIdWithResponseAsync(digitalTwinId, relationshipId, options, context)\n+            .getRelationshipByIdWithResponseAsync(digitalTwinId, relationshipId, options != null ? options.toProtocolLayerOptions() : null, context)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aec701bf3a0073ed2c668a3f39f86236795cf862"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MzcyMjczOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/models/CreateDigitalTwinOptions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMzozMjowMlrOHhq4wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMzozMjowMlrOHhq4wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA2NzcxMg==", "bodyText": "I am not sure if we can have a public method that has a return type from the implementation package.\nSpoke to Tim offline and he is confirming that assumption.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16323#discussion_r505067712", "createdAt": "2020-10-14T23:32:02Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/models/CreateDigitalTwinOptions.java", "diffHunk": "@@ -0,0 +1,77 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.digitaltwins.core.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.Context;\n+import com.azure.digitaltwins.core.implementation.models.DigitalTwinsAddOptions;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * The optional parameters for\n+ * {@link com.azure.digitaltwins.core.DigitalTwinsClient#createDigitalTwinWithResponse(String, Object, Class, CreateDigitalTwinOptions, Context)} and\n+ * {@link com.azure.digitaltwins.core.DigitalTwinsAsyncClient#createDigitalTwinWithResponse(String, Object, Class, CreateDigitalTwinOptions)}\n+ */\n+@Fluent\n+public final class CreateDigitalTwinOptions {\n+    /*\n+     * Identifies the request in a distributed tracing system.\n+     */\n+    @JsonProperty(value = \"traceparent\")\n+    private String traceparent;\n+\n+    /*\n+     * Provides vendor-specific trace identification information and is a\n+     * companion to traceparent.\n+     */\n+    @JsonProperty(value = \"tracestate\")\n+    private String tracestate;\n+\n+    /**\n+     * Get the traceparent property: Identifies the request in a distributed tracing system.\n+     *\n+     * @return the traceparent value.\n+     */\n+    public String getTraceparent() {\n+        return this.traceparent;\n+    }\n+\n+    /**\n+     * Set the traceparent property: Identifies the request in a distributed tracing system.\n+     *\n+     * @param traceparent the traceparent value to set.\n+     * @return the CreateDigitalTwinOptions object itself.\n+     */\n+    public CreateDigitalTwinOptions setTraceparent(String traceparent) {\n+        this.traceparent = traceparent;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the tracestate property: Provides vendor-specific trace identification information and is a companion to\n+     * traceparent.\n+     *\n+     * @return the tracestate value.\n+     */\n+    public String getTracestate() {\n+        return this.tracestate;\n+    }\n+\n+    /**\n+     * Set the tracestate property: Provides vendor-specific trace identification information and is a companion to\n+     * traceparent.\n+     *\n+     * @param tracestate the tracestate value to set.\n+     * @return the CreateDigitalTwinOptions object itself.\n+     */\n+    public CreateDigitalTwinOptions setTracestate(String tracestate) {\n+        this.tracestate = tracestate;\n+        return this;\n+    }\n+\n+    public DigitalTwinsAddOptions toProtocolLayerOptions() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aec701bf3a0073ed2c668a3f39f86236795cf862"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzYzMDA3OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/converters/OptionsConverter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjo1OTowOFrOHiRYjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjo1OTowOFrOHiRYjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY5ODQ0Nw==", "bodyText": "copyrights header", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16323#discussion_r505698447", "createdAt": "2020-10-15T16:59:08Z", "author": {"login": "barustum"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/converters/OptionsConverter.java", "diffHunk": "@@ -0,0 +1,210 @@\n+package com.azure.digitaltwins.core.implementation.converters;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b9ffd9789815be589101c1297d537c40b9929d1"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4131, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}